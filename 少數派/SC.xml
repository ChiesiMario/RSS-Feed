<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>少数派</title>
        <link>https://sspai.com</link>
        <description>少数派致力于更好地运用数字产品或科学方法，帮助用户提升工作效率和生活品质</description>
        <language>zh-CN</language>
        <managingEditor>contact@sspai.com (少数派)</managingEditor>
        <pubDate>Tue, 21 Jan 2025 18:37:36 +0800</pubDate>
        <item>
            <title>社区速递 078 | 你没见过的社区文章、一周最热评、派友的游戏清单</title>
            <link>https://sspai.com/post/95785</link>
            <description>&lt;div class=&quot;content wangEditor-txt minHeight&quot;&gt;&lt;p&gt;除了首页时间流和侧栏的精选展位，少数派 Matrix 社区还有很多优秀内容因条件所限无法得到有效曝光，因此我们决定重启 Matrix 周报，并在此基础上添加更多社区内容、作者投稿新玩意呈现给大家。&lt;/p&gt;&lt;h2&gt;&#128293;一周热评&lt;/h2&gt;&lt;p&gt;来自文章&lt;a href=&quot;https://sspai.com/post/95633&quot;&gt;《物念&#183;一个物品价值追踪网站》&lt;/a&gt;：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;红烧牛肉 &lt;/strong&gt;(+1) 试用了下，不清楚你怎么定义成本高低的，比如买个车子，几年下来每日成本也摊不到 100 一下，但是车子属于必需品，和手机平板对比就有点不合适吧&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;o 大狼 o &lt;/strong&gt;(+0) 去试用了一下，有点意思。&lt;/p&gt;&lt;p&gt;我其实买有些东西的时候，也会有类似的想法。&lt;/p&gt;&lt;p&gt;比如 2020 年，Keep 一辆动感单车要 2600 元，我盘算著，如果能骑 200 小时的，每小时成本 13 元，我能接受，就买了。结果一共只骑了 40 小时，大多时间闲置，就 600 元转让了。算下来实际每小时使用成本 50 元，大概比去健身房高得多了。&lt;/p&gt;&lt;p&gt;你的网站上现在只有按次计的，但可以多一些方式，比如象健身单车，不可能统计一共骑了几次，但因为本身有使用时间统计功能，我就按总使用时间计，笔记本电脑、手机什么的，天天频繁使用的，只会按天计。&lt;/p&gt;&lt;p&gt;家里一个空气炸锅，挺贵的，但从疫情前开始，一直用到现在，使用频率极高，一年 200 次是有的，在网站上要体现这个使用次数，还有点难度。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;来自文章&lt;a href=&quot;https://sspai.com/post/95637&quot;&gt;《浅聊药品集采焦虑》&lt;/a&gt;：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Gurri &lt;/strong&gt;(+1) 把焦虑转移到「预防」上，这个说的太好了。国家财政的问题不管我们持什么观点，能做的都不多。还是先为自己和家人行动起来。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;来自文章&lt;a href=&quot;https://sspai.com/post/95589&quot;&gt;《AI 辅助编程，真的那么不靠谱吗？》&lt;/a&gt;：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;YTu &lt;/strong&gt;(+22) 作为一个 0 基础的小白，愣是靠著 ChatGPT 写了一个 Scriptable 脚本，解决了我一个心念已久的功能：一个财联社 RSS 阅读器。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;ZephyrZ &lt;/strong&gt;(+5) 哈哈哈哈哈，「古法手作」看笑了，那还的凸显一个匠人精神，出了 BUG 那必须鞠躬道歉。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;玉树芝兰 &lt;/strong&gt;(+1) 这份 Super 黄编写的《AI 编程蓝皮书》文档挺有趣，适合入门上手，推荐大家阅读。&lt;a href=&quot;https://superhuang.feishu.cn/wiki/CBBPwvgEuicVhFkx0s7cPmhpn4e?__readwiseLocation=&quot;&gt;https://superhuang.feishu.cn/wiki/CBBPwvgEuicVhFkx0s7cPmhpn4e?__readwiseLocation=&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;来自文章&lt;a href=&quot;https://sspai.com/post/95681&quot;&gt;《寻微致新：少数派的 2024 年度最佳好物》&lt;/a&gt;：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;kergee &lt;/strong&gt;(+8) 所以是不是出个小丑牌的文章？&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;衞书有道 &lt;/strong&gt;(+3) 页面效果不错，要是每个产品的介绍再多点就好了。或者直接附上少数派社区内相关的文章更好。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;zzsqwq &lt;/strong&gt;(+2) 很赞的页面效果，和 Apple 成绩单一样都是一种新的尝试 &#128077;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;来自文章&lt;a href=&quot;https://sspai.com/post/95529&quot;&gt;《人人都可以上手的 Android TV 改造指南，让你也能开机就能看到节目》&lt;/a&gt;：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Vincent_Asobi &lt;/strong&gt;(+22) 感觉作者还是比较生疏，文章那么长，不如这些方案&lt;/p&gt;&lt;ul&gt;&lt;li&gt;电视桌面：Projectivy Launcher（可开箱可定制）&lt;/li&gt;&lt;li&gt;文件管理：Mixplorer（可文件管理可安装可传输）&lt;/li&gt;&lt;li&gt;ADB 工具：ADBToolbox（禁用自带程序和桌面）&lt;/li&gt;&lt;li&gt;附加安装工具：Apkmirror 安装工具（用来安装 apkmirror 上的 APKM）&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;去梦老婆 &lt;/strong&gt;(+3) Pro 系列没有开机广告，小米太真实了。&#128514;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;来自文章&lt;a href=&quot;https://sspai.com/post/95200&quot;&gt;《up 主们在用「苹果字体」时用对了吗？》&lt;/a&gt;：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;来个板烧鸡腿堡 &lt;/strong&gt;(+11) 作者做了很仔细的观察，点赞。一点建议是可以在总结处，给读者更简单直接的结论。&lt;/p&gt;&lt;p&gt;正确使用苹果字体：在苹果电脑里直接选择 SF Pro 作为默认字体。&lt;/p&gt;&lt;p&gt;ps: 如果是给小公司用作商用场景，用苹方也要小心版权问题，虽然苹果不像某公司那么爱追溯，但理论上还是不被允许的。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;鼓手高 &lt;/strong&gt;(+6) 上海城建真该需要你来拯救，地铁站牌和路牌的字体简直是地狱&#128557;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;&#128210;社区摘要&lt;/h3&gt;&lt;h2&gt;&#127381;作者的新玩意&lt;/h2&gt;&lt;p&gt;为了让作者的投稿尽快与广大读者见面，我们调整了《新玩意》栏目中作者投稿部分的呈现方式和周期，作者投稿的「新玩意」后续会迁移至本栏目。投稿渠道与奖励方式仍与以往完全一致，详情参见文末。我们相信新鲜火热出炉的分享更能赢得大家的喜爱，也欢迎广大读者朋友们踊跃投稿。&lt;/p&gt;&lt;h3&gt;@车不能快：老蛙 FFⅡ 90mmF2.8 镜头&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;入手渠道：海鲜市场&lt;/li&gt;&lt;li&gt;参考价格：3280 二手 2000 左右&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;自今年 618 购入松下 S5M2 之后，我一直在思考该添置什么镜头好。但无奈的是，马来松联盟的 L 卡口生态仍旧是画大饼状态，表面上松下有数码机技术、适马有镜头对焦技术、徕卡有光学积累，但现实便是 ——L 卡口可用的全画幅镜头屈指可数。同时，适马的重量、徕卡的价格也让人望而却步。&lt;/p&gt;&lt;p&gt;当时我手上的镜头只有套机带的 50mm f1.8 和 20-60mm f/3.5-5.6，室内拍摄视频还是够用的，但在键盘照片拍摄方面，这两颗镜头的焦段就有些不合适了，因为键盘是一个相对方正的产品，拍摄整体时我希望获得一些压缩感，而不是「近大远小」的透视关系和强烈的冲击感。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/05/d0bf78011bf5bbf527f001deaa322e3b.JPG&quot;&gt;&lt;/figure&gt;&lt;p&gt;最后，在和一位键盘拍摄颇有经验的前辈交流之后，我决定购买一颗 70mm 焦段以上的定焦手动镜头。一方面手动头的选择面比自动头要丰富，同时价格跨度也宽泛不少，另一方面，定焦头的结构相对变焦头要简单不少，同样的价格段下更容易拥有更大的光圈和更好的画质。&lt;/p&gt;&lt;p&gt;而在观望了诸多适配 L 卡口的中长焦镜头之后，我选择了老蛙 FFⅡ 90mmF2.8 镜头。如今国产镜头五花八门，价格和参数也都很诱人，但综合评估下来，我觉得老蛙的产品力是最实在的，尤其是在微距方面，老蛙还有许多「独门绝技」，而他们在营销方面也没有做国内厂家经常干的大面积推流和矩阵号，也让我对这个品牌有一种「脚踏实地做产品」的好感。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/05/86c92ab43949b11ab4c5f204d0fddd41.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;先来聊聊几个槽点，首先老蛙的镜头盖的松紧尺度感觉做的不是很到位，稍微一碰就会开，其次遮光罩的安装实在是有点难受，总是给我一种异样的剐蹭感。同时镜头重量也不轻，虽然长焦肯定比短焦重，但近乎同焦段之下，老蛙 90（619g）足足比松下 100mm f2.8（298g）重了一倍有余，而且松下还是带有电机对焦的自动头。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/05/653fd10ef1f9f1bcf14d8d47c1142e6e.JPG&quot;&gt;&lt;/figure&gt;&lt;p&gt;不过这些问题在这个价格和画质表现之下瑕不掩瑜，老蛙的画质表现著实让我惊喜，凭借他们自家的 APO 复消色差技术，暗角、畸变、眩光、色散的控制都很不错。当然，我确实没用过什么好镜头，但就拍键盘而言，我觉得这个素质已经非常够用了。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/05/3f845e8d8df6cf2a8d7a8549eb7685b4.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;在购入老蛙 90mm 之后，我几乎所有的键盘照片都由这颗镜头效劳，毕竟除开 90mm 的焦段，它还是一颗最大 2 倍放大倍率的微距镜头，有著极近的对焦距离，可以用来拍摄很多键盘的做工细节，虽然用来拍这个确实有点大材小用了。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/05/1254175aa13b6094c48875aea1a0123d.JPG&quot;&gt;&lt;/figure&gt;&lt;p&gt;关于摄影，我能聊的真的不多，毕竟我开始玩才相机半年不到，尽拍摄的次数和题材也相对有限，但摄影带给我的宁静感却让我在繁忙的生活中找到了难得的片刻喘息，也希望各位能用摄影的方式发现生活中美好。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/05/d1d0a504e54cada688123ca68e94d7be.JPG&quot;&gt;&lt;/figure&gt;&lt;h3&gt;@夜行列车长：MUJI 断货王擦镜纸&lt;/h3&gt;&lt;p&gt;目前市面上广泛可见的擦镜纸多含有酒精或其他清洁剂成分，旨在实现快速干燥与除菌效果。然而，鉴于多数眼镜镜片均附有镀膜，长期使用含酒精的擦镜纸擦拭，极易导致镀膜受损脱落。&lt;/p&gt;&lt;p&gt;在更换上一副眼镜前，我一直使用配镜时附带的擦镜布以及酒精片来清洁镜片。结果发现，镜片镀膜已略显斑驳，并伴有多处划痕。回顾日常擦拭习惯，这些损伤大多源于反复使用的擦镜布中夹杂的微小尘粒对镜片的摩擦，以及酒精棉片中酒精成分对镀层的侵蚀，共同加速了镜面镀膜的脱落。&lt;/p&gt;&lt;figure class=&quot;ss-imgRows&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/13/caca1f1766edb248e01058b60c5de3c2.JPG&quot; alt&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/13/ca456e2f445e45e20668890d4284c1e8.JPG&quot; alt&gt;&lt;/figure&gt;&lt;p&gt;在网上冲浪的时候看到不少人推荐 MUJI 的擦镜纸，于是便在库存紧张的京东平台上不断刷新，终于成功抢购到两包回来试用。若论 MUJI 中性价比高且不踩雷的产品，我个人认为这款擦镜纸绝对可以入选。作为门店中最实惠的商品之一，擦镜纸的材质为「丙烯酸无纺布」，每包内有 14 张，长 15 ✖️ 13 cm 的尺寸（约一台 iPhone 11 Pro ）。这个尺寸无论是擦拭眼镜还是显示屏都恰到好处，不会显得太小。而且，擦镜纸可以多次循环使用，&lt;strong&gt; 切记在使用前抖动去除浮尘，就能有效避免细微尘粒划伤镜片。&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/13/9223571afefd57edd6e87be1680b32d6.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;在使用了擦镜纸后，还是能很明显的看出差别。擦拭前，镜片上的指纹、灰尘仿佛给视野蒙上了一层薄雾；而擦拭后，镜面很光洁，前后对比之下，那种清晰透亮的视觉效果让人倍感舒畅。&lt;/p&gt;&lt;p&gt;使用过程中也无需大力擦拭，只需要擦拭两三次即可将镜面上的大面积污渍擦掉，而且还是在没有使用任何清洁剂的情况下。既省时间又能减少对镜片的磨损，也是蛮高效温和的清洁方式。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/13/cda3697cff56261259084510e2d1d99b.JPG&quot;&gt;&lt;figcaption&gt;&#128072;&#127995;左边：使用后；                           右边&#128073;&#127995;：使用前&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;不过也有人说这款擦镜纸有平替 —— 实验室擦拭纸，具体感兴趣的朋友可以去某宝搜索一下，是否有一样的效果这个还需要等买来对比之后才知道。但从 MUJI 的这款产品目前的表现来看，清洁力、便携性和性价比都是不错的。平常不习惯携带擦镜布的朋友可以揣一包放兜里，需要用的时候随时取用，放一张的话很有可能当纸巾给扔掉。现在我都是车里、办公室、家里各放一张，需要用的时候都是随取随用。&lt;/p&gt;&lt;h2&gt;&#128172;一派热议&lt;/h2&gt;&lt;p&gt;在上期第 194 期一派投票《&lt;a href=&quot;https://sspai.com/bullet/1736744010&quot;&gt;你的旅途游戏清单准备好了吗？ &lt;/a&gt;》中，共有 202 名派友热情参与，十分感谢！&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Gurri &lt;/strong&gt;(+19) 买了开源掌机 35xxsp，最近在补银河战士系列。已经通了融合，在玩零点任务。不得不说体验和手机插个手柄真的是两种体验，翻开即玩，小巧的机身都非常契合那个时代的掌机体验。这个时代唯一可以揣裤兜的掌机只剩下手机了，然而手机游戏在我们这些老 ass 看来根本没法称之为游戏（纯个人感受，如有冒犯请见谅）。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/13/avatar/ecd8244f99aac3be0891e22076898c0d.jpeg&quot; alt&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;落雪小凝 &lt;/strong&gt;(+8) 最近沉迷燕云十六州，当做纯粹的单机游戏，探索的挺开心。&lt;/p&gt;&lt;p&gt;旅途中，上飞机前，会提前登录一下月圆之夜，打开单机模式，然后切后台。进入飞行模式之后，就可以继续刷全图鉴成就啦&lt;/p&gt;&lt;p&gt;&lt;strong&gt;少数派 18510599 &lt;/strong&gt;(+7) 在手机上装了 GBA 模拟器，希望能在高铁上打打逆转裁判 123。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/15/avatar/de8156278b0ed62975eeb3e848323192.jpeg&quot; alt&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;阿利安卓 &lt;/strong&gt;(+5) 只有 Steamdeck，玩玩土豆兄弟和小丑牌还还是不错的&lt;/p&gt;&lt;p&gt;手机游戏嘛，F-droid 上有不少开源好玩的小游戏，比如 Vector Pinball&lt;/p&gt;&lt;p&gt;&lt;strong&gt;hAPPydOg &lt;/strong&gt;(+3) Delta + 宝可梦水晶，开了 GS 球&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/14/4f8bcd2fae36de0e2e8b30221292de88.jpg&quot; alt&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;HZ_Studio &lt;/strong&gt;(+2) Kingdom Rush&lt;/p&gt;&lt;p&gt;&lt;strong&gt;jojo12 &lt;/strong&gt;(+2) 星露谷物语希望把全成就做完。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;zixr365 &lt;/strong&gt;(+2) 最近为了备战怪猎：荒野，在玩怪猎：世界。不得不说，怪物猎人是真的好玩啊，世界的画面啥的，也挺好的，并不会显得过于古旧。打完世界刚好续上荒野。&lt;/p&gt;&lt;p&gt;ps 上刚打完了最后生还者一代重置版，确实很好玩。二代迟迟不进会员库，另外听说有觉醒元素，一直在犹豫和等待，实在不想给 zzzq 投钱。&lt;/p&gt;&lt;p&gt;因为打过了最后生还者，感觉对这类丧尸题材的游戏抗力有了一点点提高，所以考虑打生化危机了，之前一直是想玩不敢玩的。听说 4 代已经不算恐怖游戏而算射击游戏了，所以在 steam 上买了个豪华版开玩。确实不算很恐怖，开个简单难度，玩得也挺开心的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;忆梦非诸侯 &lt;/strong&gt;(+2) 歧路旅人 1+2，最近迷上了这种回合制游戏，从之前的 p5R 到星之海，这种回合制游戏可太适合 switch 了&lt;/p&gt;&lt;p&gt;&lt;strong&gt;JimLu &lt;/strong&gt;(+1) 突发奇想把 wiiu 又拿了出来，发现老任服务器都关了，更新系统联 pretendo 折腾老半天，终于玩上了喷射战士 1 代，还是那个原汁原味的感觉。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/20/4bd006ae5884054582e8289ccd2b8a28.jpg&quot; alt&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Yorkson &lt;/strong&gt;(+1) 在 iPad mini 上装了 Delta 和 PPSSPP，发现能模拟 PSP 后可以打 GalGame 了，十几个小时的火车有事儿可做了，另外还买了个三十块的 shanwan 小手柄，单手按按 AB 比点屏幕方便。虽然有 Delta，还是把 3DS 翻出来，准备打几个 GBA 游戏玩玩，比搓屏幕手感好不少。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/20/0d532c812546f81d514324cae6eca985.jpg&quot; alt&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;JuniperPhoton &lt;/strong&gt;(+1) 继续推荐歧路旅人 2，即便是 Switch 上玩也很棒。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;kendentline &lt;/strong&gt;(+1) 川渝牛马表示，隧洞太多了，很难找到连续的信号打游戏，有时候甚至听个歌都是奢侈……&lt;/p&gt;&lt;p&gt;&lt;strong&gt;蝉心 &lt;/strong&gt;(+1) 看起来派里玩绝区零的不少，我也喜欢。&lt;/p&gt;&lt;p&gt;NS 推荐，圣兽之王、十三机兵防衞圈、雪居之地、蒸汽世界，大劫掠 1 / 塞尔达，智慧的再现&lt;/p&gt;&lt;p&gt;Win/SD 推荐，漫威争锋，以及过几天上的，三国无双，起源&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Leobai &lt;/strong&gt;(+0) 纯旅途中的手游来说是 P5X 和杀戮尖塔。因为出行大多数情况下是一个小时多点的高铁，因此可以趁机刷刷日常本开一局尖塔。P5X 的主线剧情虽然是亮点，但还是更适合长时间打。&lt;/p&gt;&lt;p&gt;如果是正经玩的话，quest 平台的 demeo 生化 4 和蝙蝠侠阿卡姆之影都很不错，demeo 是经典下棋跑团，玩不明白但是很上瘾，生化 4vr 很经典，蝙蝠侠是很不错的八向打拳模拟器，流程爽快。&lt;/p&gt;&lt;p&gt;ps 平台个人比较喜欢浪人崛起，把跑图做的很顺畅，非常顺滑的进入了忍者组的打人流程。机器人惊喜感很不错，但有些背板关卡对于我这种操作就会很吃力需要兄弟帮忙代打一部分。&lt;/p&gt;&lt;p&gt;pc 平台或者全平台很喜欢暗喻幻想，首先抛开后半流程剧情全部加速赶工的问题，以及能够接受脑死跑图毫无创意的迷宫部分，就公路片形式，剧情没有雷点甚至有点让人满足，以及美术音乐来说可以推一下，你很难不喜欢开最低难度然后控制自己操作速度争取在音乐达到下一个小高潮切进下一个副歌前打死小怪这种操作，真的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;黄小猪 &lt;/strong&gt;(+0) Arcade 里的 Sasquatch 两年前初见的时候点开了一下以为就是个大脚怪整蛊露营者的恶作剧游戏，但是常年霸榜让我一直不太理解，后来突然发现除了在营地恶搞以外还有很广阔的天空可以翱翔，最近一星期都在沉迷。整体画风很卡通，感觉是小朋友也能玩的游戏，但是对于一个将将三十岁的大人来说也很上头，推荐给有 Arcade 订阅的各位～（有点像肝脏友好版的星露谷）然后还下载了朋友们口中的年度游戏小丑牌，不过平时不怎么爱打扑克，打算路上玩腻了 Sasquatch 之后来开拓一下新世界。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;江月何年初照人 &lt;/strong&gt;(+0) 以前在旅途中喜欢玩手机单机游戏，&lt;/p&gt;&lt;p&gt;小时候最早喜欢玩日本开罗游戏，一款游戏能玩一个寒假，怀念在摩托罗拉上喜欢忍者村&lt;/p&gt;&lt;p&gt;之后玩得比较杂，迷你地下城 2，铁锈战争，移植的守墓人，崩溃大陆，以及当时的很多汉化游戏，比如手谈汉化组的 solar2，太阳系战争等，现在也会去找一些这样的游戏合集&lt;/p&gt;&lt;p&gt;Mindustry（像素工厂）是唯一一个玩到现在还在保留的游戏，可以在飞机上玩，比较有趣&lt;/p&gt;&lt;p&gt;&#128226;：下一期的一派讨论是数码圈日经话题《&lt;a href=&quot;https://sspai.com/bullet/1737450027&quot;&gt;2024 踩过的数码产品「坑」有哪些？ &lt;/a&gt;》，欢迎来聊。&lt;/p&gt;&lt;h2&gt;&#127183;互动环节&lt;/h2&gt;&lt;p&gt;会员社区改版的喜悦也希望能够分享给派友，《社区速递》新增互动环节：我们将从会员社区的问答讨论中，匿名精选出一些有趣的话题，放在每期《社区速递》的末尾，作为我们分享与讨论的「话题池」。如果你对以下&lt;strong&gt;任一话题&lt;/strong&gt;有独到的见解或经验分享，欢迎在评论区留下你的精彩回答，可重复评论参与。我们将认真阅读每一条评论，对于回答优秀且详尽的朋友，送上一份少数派会员社区体验月卡。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;本期话题池：&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;你用 Android 机还会 root 吗？&lt;/li&gt;&lt;li&gt;如何管理 B 站的关注？&lt;/li&gt;&lt;li&gt;2025 苹果外接显示器求推荐？&lt;/li&gt;&lt;li&gt;求推荐的低因咖啡豆？&lt;/li&gt;&lt;li&gt;照片的存储方案？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;如果你也想分享「新玩意」&#128265;：&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;获取 Matrix 社区写作权限并签署 &lt;a href=&quot;https://sspai.com/post/72089&quot;&gt;Matrix 共创计划&lt;/a&gt;；&lt;/li&gt;&lt;li&gt;在少数派独家发布一篇文章，在标题中标注「新玩意」前缀；&lt;/li&gt;&lt;li&gt;用至少 800 字介绍产品，并配上 2-3 张产品的实拍图片；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;在网站个人信息中补充支付宝账号。&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;成功入选本栏目还可以得到 108 元的「剁手红包」&#129511;。如果你有兴趣参与，就赶紧来稿吧！&lt;/p&gt;&lt;p&gt;&gt; 下载少数派 &lt;a href=&quot;https://sspai.com/page/client&quot;&gt;客户端&lt;/a&gt;、关注 &lt;a href=&quot;https://sspai.com/s/J71e&quot;&gt;少数派公众号&lt;/a&gt;，了解更多的新玩意 &#127378;&lt;/p&gt;&lt;p&gt;&gt; 特惠、好用的硬件产品，尽在 &lt;a href=&quot;https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc&quot;&gt;少数派 sspai 官方店铺 &lt;/a&gt;&#128722;&lt;/p&gt;&lt;/div&gt;</description>
            <author>Matrix 机器人</author>
            <pubDate>Tue, 21 Jan 2025 18:37:36 +0800</pubDate>
        </item>
        <item>
            <title>於单调中别有洞天：等宽字体选择指南</title>
            <link>https://sspai.com/prime/story/monospaced-fonts</link>
            <description>&lt;div&gt;&lt;p class=&quot;prime__story__summary&quot;&gt; 为自己选择高质量、合口味的等宽字体，是一种有趣的审美实践，也能让写作、编程环境受益于更悦目和整洁的外观。 &lt;/p&gt;&lt;article class=&quot;wangEditor-txt prime__story__body&quot;&gt;
&lt;p&gt;如果让你在纸上写一个单词 &lt;code&gt;Hi&lt;/code&gt;，你肯定不会把两个字母写成一样宽。的确，在正常手写时，字母根据形态、笔画和大小写，自然地会被写成不同宽度。换到数字环境中，我们见到的西文字体也大多如此。这种字体称为「比例字体」（proportional fonts），也是我们在日常使用中最多见到的。&lt;/p&gt;
&lt;p&gt;但回想一下机械打字机和早期电脑，它们打出的字母却是个个一样宽的；这主要是因为技术上的限制。&lt;/p&gt;
&lt;p&gt;在打字机中，每个按键所连接的字模在按键时敲击浸有墨水的丝带，在纸上留下字迹。由于字模都是一样宽的，纯机械机构又不能动态调整字距，只有将字母也做成等宽，才能维持版式的均匀。&lt;/p&gt;
&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/21/dc5f8528687153188aa83ebce544ef47.gif&quot;&gt; &lt;figcaption&gt;打字机打出的等宽字体&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;而在早期终端和电脑中，由于屏幕不够精细，芯片也缺少图形显示能力，画面只能被分成数量有限的网格，每个网格固定显示一个字符。这也把文字「框」成了一样尺寸。&lt;/p&gt;
&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/21/383cc3c030af258cc243d796d53fa73f.jpeg&quot;&gt; &lt;figcaption&gt;终端机 VT100 上的等宽字体&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;来到现代，这些技术限制不复存在，但等宽字体（monospaced fonts）却作为一种风格延续下来，凭借其天然的网格对齐特征，在许多场合继续发挥重要作用。在终端环境中，等宽字体不仅用来显示内容，也承担了「绘制」界面的功能；借助 &lt;a href=&quot;https://en.wikipedia.org/wiki/Ncurses&quot;&gt;ncurses&lt;/a&gt; 等库的帮助，用纯文本也能做出功能丰富、版式美观的 TUI（文本界面）软件。在代码编辑器中，等宽字体与空格、缩进等格式结合，加强了整洁感和可读性；易于区分的设计也让形近字符更容易区分，让错误更容易发现。&lt;/p&gt;
&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/21/6df01663967cdae05627b33e38cfbd00.png&quot;&gt; &lt;figcaption&gt;sc-im 这样的 TUI 软件依赖于等宽字体&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;等宽字体的应用也不限于技术场景。许多 Markdown 写作工具都选择等宽字体作为默认字体，既是对打字机传统的致意，也是因为等宽字体能赋予版式一种特殊的简约肌理，营造出让不少人觉得更平静、专注的写作环境。英文剧本创作中，用 12 号的等宽字体 Courier 是行业惯例，因为经验上这样写出的剧本一页正好需要一分钟来演出，方便估算时间。&lt;/p&gt;
&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/21/d80757636311c4154ca22ede42805a6d.jpg&quot;&gt; &lt;figcaption&gt;Markdown 写作软件 iA Writer 的早期版本，使用等宽字体 Nitti&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;好的等宽字体是如何炼成的&lt;/h2&gt;
&lt;p&gt;等宽并不意味著均一和乏味。在看似粗砺的外观背后，等宽字体的设计是丰富多变、充满细节的；做好一款等宽字体需要的努力，并不亚于任何抓眼的标题字体或优雅的正文字体。&lt;/p&gt;
&lt;p&gt;那么，如何辨别和选择出好的等宽字体呢？我们可以从美观性和实用性两个角度考虑：好的等宽字体应该具有考究的设计细节，以及能满足使用场景的丰富功能。此外，中文用户可能还需关注字体对中文字符的兼容性。以下分别介绍。&lt;/p&gt;
&lt;h3&gt;设计细节&lt;/h3&gt;
&lt;p&gt;等宽字体一个特别重要的品质就是「不容易看岔」。因此，几乎所有等宽字体都会关注易混淆字符的设计，特别是数字 &lt;code&gt;1&lt;/code&gt; / 小写字母 &lt;code&gt;i&lt;/code&gt; / 小写字母 &lt;code&gt;l&lt;/code&gt; / 大写字母 &lt;code&gt;I&lt;/code&gt;，以及小写字母 &lt;code&gt;o&lt;/code&gt;/ 数字 &lt;code&gt;0&lt;/code&gt; 这两组。&lt;/p&gt;
&lt;p&gt;至于具体如何区分，不同字体的处理方式不同，但一般是在小写字母 &lt;code&gt;i&lt;/code&gt; 和，小写字母 &lt;code&gt;l&lt;/code&gt; 头部和尾部添加衬线（即笔画是否「出头」以及出头的造型），以及数字 &lt;code&gt;0&lt;/code&gt; 中间添加圆点或斜线。这些设计没有优劣之分，以自己看著顺眼并且能看清楚为准即可。&lt;/p&gt;
&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/21/983eea79f3555398f8f24e79fcb629a1.png&quot;&gt;&lt;/figure&gt;
&lt;p&gt;x 字高（x-height）是另一项重要的设计决策。这是指英文字母「四线格」中间两条线之间部分的高度，也就是小写字母 x 的高度，它对字体的风格和特征影响极大。许多等宽字体会采用偏大的 x 字高，因为这能让外观更「饱满」，更容易在小字号下辨认，而这正是等宽字体的主要使用场景。不过，过大的 x 字高也会让字体看起来有点「愣」，具体尺度就是个人偏好问题了。&lt;/p&gt;
&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/21/2a5c4ae1eaaf47fe4ceff1ff25e84bee.png&quot;&gt;&lt;/figure&gt;
&lt;p&gt;虽然多数等宽字体都会采用无衬线设计，笔画粗壮并且末端无装饰，但这也不是唯一的风格。例如，经典字体 Courier 就采用了粗衬线（slab serif）设计，笔画终端是向外延伸的圆角；PT Mono、Fira Mono 等较晚近的字体也采用了粗衬线。还有一些更具「创意」的字体直接套用了衬线字体的风格（例如 Xanh Mono），或者走复古像素风（例如 VT323），不过实用性就比较有限了。&lt;/p&gt;
&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/21/82d9620b36fff5de8cd74b3acf9fd849.png&quot;&gt;&lt;/figure&gt;
&lt;p&gt;近年来，还有不少字体会把斜体当作展示个性的空间，为其使用和正体截然不同的风格。这股风潮最初可能是大厂 Hoefler &amp; Co. 出品的 &lt;a href=&quot;https://typography.com/fonts/operator/overview&quot;&gt;Operator Mono&lt;/a&gt; 带起来的，它的斜体模仿了手写体的设计，&lt;code&gt;f&lt;/code&gt;、&lt;code&gt;l&lt;/code&gt;、&lt;code&gt;s&lt;/code&gt; 等小写字母俏皮的起笔成为很多后来者（例如免费的 Victor Mono 和付费的 MonoLisa 等）的模仿对象。&lt;/p&gt;
&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/21/17a8cf12728d63b23c0a40fb6ead3c34.png&quot;&gt; &lt;figcaption&gt;Operator Mono 的「花式」斜体&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;由于斜体在代码编辑器中经常被用来自动高亮 &lt;code&gt;class&lt;/code&gt;、&lt;code&gt;public&lt;/code&gt; 等关键词，不少程序员喜欢用这种字体来给枯燥的代码增添一些活泼感。（当然，正如编程界的任何选择一样，嘲讽这种字体的声音也不少见。）&lt;/p&gt;
&lt;p&gt;此外，既然等宽字体的核心特征就是字符宽度相同，这个宽度到底定多少自然也很重要。与追求宽度适中的正文字体相比，许多等宽字体会选择做得稍微偏窄，以便节省空间，在相同尺寸窗口中放下更多代码。这方面的一个极端莫过于 &lt;a href=&quot;https://typography.com/fonts/operator/overview&quot;&gt;Iosevka&lt;/a&gt;，它将宽度压缩到 1/2 em，也就是每个字母的宽度只有其高度的一半，用在控制枱输出等空间有限的地方特别紧凑高效，但拿来码字就看著有点局促了。&lt;/p&gt;
&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/21/107f9a04d269a288b9adb10ad196a8a8.png&quot;&gt;&lt;/figure&gt;
&lt;p&gt;还有一类字体试图从根本上挑战「等宽」的概念，其代表是 &lt;a href=&quot;https://input.djr.com/&quot;&gt;Input Sans&lt;/a&gt; 和 &lt;a href=&quot;https://ia.net/topics/a-typographic-christmas&quot;&gt;iA Writer Duo/Quattro&lt;/a&gt;。这些字体虽然仍具有等宽字体典型的「无机感」，但放松了「每个字一样宽」的约束，不同字符根据其形态特征，可能占据多种不同宽度，例如 &lt;code&gt;W&lt;/code&gt; 偏宽而 &lt;code&gt;i&lt;/code&gt; 偏窄。&lt;/p&gt;
&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/21/3ffe23d47f62aa5aaa855276b89e6165.png&quot;&gt;&lt;/figure&gt;
&lt;p&gt;但这样「不伦不类」的字体还能胜任等宽字体的用途吗？Input Sans 的作者&lt;a href=&quot;https://input.djr.com/info/&quot;&gt;提出&lt;/a&gt;了一些有趣的主张。在他看来，在编程中，最需要对齐的是行首缩进，而这无论如何不受等宽与否的影响。同时，不等宽的设计反而有助于发现错误，例如你在一连串 &lt;code&gt;&lt;span&gt;&lt;/code&gt; 中手滑把其中一个标签打成了 &lt;code&gt;&lt;spam&gt;&lt;/code&gt;，由此产生的不对齐将是非常显眼的。当然，如果你是用来写文章，就更不用在意严格对齐了，可变宽度反而会让排版看起来更和谐舒适。&lt;/p&gt;
&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/21/e3a5d53f7bad787ca11a8a66c9022603.png&quot;&gt;&lt;/figure&gt;
&lt;p&gt;正是因为字符设计上存在这么多众口难调的因素，许多较新的字体会通过提供字体家族、可变字体等方式来满足多样化需求。例如，Iosevka 在标准版之外还提供了宽度更舒展的 Extended 版本；&lt;a href=&quot;https://www.recursive.design/&quot;&gt;Recursive&lt;/a&gt; 在一个可变字体里包含了从等宽到变宽、从规整到「奔放」等多种风格；等等。&lt;/p&gt;
&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/21/34bad1d9809abab3af6e7e6594066d1f.png&quot;&gt; &lt;figcaption&gt;Recursive 在一个可变字体里包含多种风格&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3&gt;额外功能&lt;/h3&gt;
&lt;p&gt;合字（ligatures）可能是当代等宽字体最能玩出花样的地方。所谓合字，是指为特定字符的组合制作一个专门造型。传统上，这一般用来为一些存在笔画勾连的字母组合（例如 &lt;code&gt;fi&lt;/code&gt;、&lt;code&gt;ff&lt;/code&gt;、&lt;code&gt;Th&lt;/code&gt; 等）做特殊设计，使之看起来更自然和协调。&lt;/p&gt;&lt;/article&gt;&lt;/div&gt;</description>
            <author>PlatyHsu</author>
            <pubDate>Tue, 21 Jan 2025 17:25:44 +0800</pubDate>
        </item>
        <item>
            <title>中文播客为什么偏爱「四字名」？</title>
            <link>https://sspai.com/post/95618</link>
            <description>&lt;div class=&quot;content wangEditor-txt minHeight&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://science.caixin.com/2025-01-06/102276027.html&quot;&gt;财新最近发了篇报道&lt;/a&gt;，讲脑机接口解码汉语，其中有一段：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;此次突破的汉语言解码，就面临独特的挑战——汉语作为一种全球现使用的唯一表意语言，&lt;strong&gt;以单音节为主&lt;/strong&gt;，同时具有声调语言和图形语言的特征......&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这里有几点值得商榷，尤其是「以单音节为主」这个说法并不准确。恰好，理解汉语的真实语音特点，能帮我们解答一个困扰播客圈很久的现象——&lt;strong&gt;为什么中文播客偏爱四字名？&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;汉语真的「以单音节为主」吗？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;从书面文字来看，汉语好像真的「以单音节为主」。这种印象主要来自我们对汉字的视觉感受：每个方块字看起来都像是一个独立单元，并且具有明显的单音节特性，同时还代表一个语素（最小意义单位），如「好」字，读音是 hǎo，意思是积极的。&lt;/p&gt;&lt;p&gt;但这种文字视觉有很大的欺骗性，语言是看人们怎么说出来，说再决定了写。我们在说话时，其实更偏爱双音节词，有学者做过专门统计：现代汉语常用词和规范词中，二字词（双音节）占比均超过 60%，远超一字词（单音节）。这一特点在日常交谈中也常见，像「播客」「上班」「出轨」这样的双音节词最为常用。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/15/article/59e5c13b44a4020bc7f525f98212f258.png&quot;&gt;&lt;figcaption&gt;苏新春统计了《现代汉语词频词典》与《现代汉语词典》现代汉语常用词和规范词二字词频率，基本可以反映现代汉语以双音节为主的特点。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;为何汉语会以双音节为主？从历史演变看，双音节化能扩充词汇量，避免同音混淆，这只是现象层面的解释。我们还得追问：人类自身的发音规律，会给出什么样的答案？&lt;/p&gt;&lt;p&gt;答案在汉语的音节特点上：相比英语音节的自然滑动（如 [ai] 是从 [a] 到 [i] 的过程），汉语音节都很短促，单个音节太短，缺少抑扬，&lt;strong&gt;不足以形成稳定的韵律感&lt;/strong&gt;。所以，当我们听到外国人说中文时，往往会觉得很违和，他们会不自觉地拖长音节，比如把「天」拉长成「梯——安」。&lt;/p&gt;&lt;p&gt;我们也有追求双音节的倾向，说话时自然地组合音节，像「好吃」「好看」这样。这种对双音节的偏爱在口语中表现得更明显，甚至会把三音节词吞音快读成双音节：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;派出所 =&gt; 派所&lt;/li&gt;&lt;li&gt;公安局 =&gt; 关局&lt;/li&gt;&lt;li&gt;特好吃 =&gt; 套吃&lt;/li&gt;&lt;li&gt;大家好，我是大张伟 =&gt; 大猴儿 / 我 / 裆儿伟&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;理解了这种双音节特质，我们就能更好地解释人们偏爱播客四字名的原因。&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;为什么中文播客偏爱四字名？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;小宇宙上线时的&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5NzU4ODQ2MA==&amp;mid=2676499194&amp;idx=1&amp;sn=784a78866e8623a7f7824e2379870345&amp;scene=21#wechat_redirect&quot;&gt;数据显示&lt;/a&gt;：平台一百个最热门的播客中，近 50% 选择了四字名，这个比例至今仍具参考价值。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/15/article/c4549271fe37b3a71218dff3cde522bc.png&quot;&gt;&lt;figcaption&gt;图源：《三明治》公众号&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;要理解这个现象，得从音步说起。音步是语音中的节拍单位，就像音乐中的小节，是人们说话时自然停顿形成的节奏单元。我们前面说到汉语偏爱双音节，&lt;strong&gt;其实就是说我们习惯用两个音节作为一个自然的说话单位，即一个音步。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;双音节名虽然符合这种口语习惯，但在竞争激烈的播客市场中，两个字的信息量往往不够，难以让听众快速理解节目定位和内容。比如像「机核」这样的成功案例并不多见。&lt;/p&gt;&lt;p&gt;而四字名，比如「日谈公园」「大内密谈」「忽左忽右」，恰好由两个双音节词组成，产生了音义融合优势。每个双音节读起来都很自然，前后叠加又带来更强的节奏感。&lt;/p&gt;&lt;p&gt;同时，如前文所述，人们说话以双音节词为主，这使得大多数双音节词都能表达相对完整的含义。比如「日谈」暗示日常对话，「公园」带来开放空间感，合在一起就传达出一种轻松又富有公共性的氛围。&lt;/p&gt;&lt;p&gt;这种音义融合让四字名既朗朗上口，又能在短短四个字里承载丰富的节目信息，因此在播客圈获得了广泛欢迎。&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;三字名：反常规的独特美感&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;在四字名占主导的播客圈里，也有一些节目选择了三字名，比如「不在场」「山有虎」。三音节在汉语中比较特殊，读起来不那么顺滑自然。这一点从古诗就能看出来——七言诗里很少用「为他人 / 做嫁衣裳」（3+4）这样的折句，反而更爱用「孤帆远影 / 碧空尽」（4+3）这样先长后短，奇数在后的节奏，因为这样更符合人们说话习惯。&lt;/p&gt;&lt;p&gt;乍看之下，三字名似乎不合时宜。但也给了创作者反常规的机会。「不 / 在场」以一个坚决的「不」字开头，让发音突出、停顿，语义聚焦，让听者立刻对后续「在场」产生质疑；「山 / 有虎」采用典型的存现句式，以地点词起句，一下子在听者脑海中构建出一个画面，既有危险的暗示，又带著向前的意味。&lt;/p&gt;&lt;p&gt;三字名打破了常规的双音节节奏，却在这种「不完美」中获得了独特的表达力：以反叛姿态给听众带来新鲜感。&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;结语&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;有人试图从成语的角度解释四字名的流行，认为成语不仅朗朗上口且内涵丰富。但这种解释更像是用现象解释现象。毕竟播客是要说给人听的，其命名更可能源于最基础的语言规律：&lt;strong&gt;我们与生俱来的发音习惯和语音节奏。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;有趣的是，许多播客创作者在命名时，可能并未刻意考虑这些语言学理论，而是凭直觉选择了四字名。这种「不约而同」恰恰印证了语音规律的普遍性和根深蒂固。但也别想当然地认为，起个四字名就能做好播客了，毕竟一个播客的成功还取决于更新频率、内容质量、运气等诸多因素。&lt;/p&gt;&lt;p&gt;播客作为一种声音媒介，让内容回归了语言的最初形式。从语音规律的角度来解释播客的命名现象，我们得以窥见汉语的某些本质特征。&lt;/p&gt;&lt;p&gt;最后补充一点：财新说汉语是「全球现使用的唯一表意语言」也不准确。日语也有和制汉字（如「峠」，意为山顶、山岭），也具有表意特征。而且现代汉语本身就有高比例的形声字，更应该说是意音文字。&lt;/p&gt;&lt;p&gt;本文首发「&lt;a href=&quot;https://mp.weixin.qq.com/s/OXrClZKvLfqw1wJZLv-H2Q&quot;&gt;言辞之间&lt;/a&gt;」，同步少数派。&lt;/p&gt;&lt;p&gt;&gt; 关注&#160;&lt;a href=&quot;https://sspai.com/s/J71e&quot;&gt;少数派公众号&lt;/a&gt;，解锁全新阅读体验 &#128240;&lt;/p&gt;&lt;p&gt;&gt; 实用、好用的&#160;&lt;a href=&quot;https://sspai.com/mall&quot;&gt;正版软件&lt;/a&gt;，少数派为你呈现 &#128640;&lt;/p&gt;&lt;/div&gt;</description>
            <author>王隐</author>
            <pubDate>Tue, 21 Jan 2025 15:33:12 +0800</pubDate>
        </item>
        <item>
            <title>从「原子化」提交到妙用 rebase，一次搞定清爽的 Git 提交记录</title>
            <link>https://sspai.com/post/95404</link>
            <description>&lt;div class=&quot;content wangEditor-txt minHeight&quot;&gt;&lt;p&gt;&lt;strong&gt;Matrix 首页推荐&lt;/strong&gt;&#160;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://sspai.com/matrix&quot;&gt;Matrix&lt;/a&gt;&#160;是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&#160;&lt;br&gt;文章代表作者个人观点，少数派仅对标题和排版略作修改。&lt;/p&gt;&lt;p&gt;作为一名软件开发者，Git 是我离不开的版本管理工具，它可以记录并追溯开发进程，功能强大，用法灵活多样。围绕著它诞生的协作平台 GitHub、Gitee 等也深入人心。&lt;/p&gt;&lt;p&gt;Git 本身就是一门学问，其重要性不亚于软件开发。在长期的开源软件开发维护的过程中，我长期与 Git 打交道，对 Git 有了更多的感悟，也探索了一些非常实用的技巧。这些技巧，充分发挥了 Git 本身的特性，极大改善了我使用 Git 管理项目的体验。&lt;/p&gt;&lt;p&gt;下面，我就来分享让我受益最深的几点技巧，希望能给读者朋友们一些启发。&lt;/p&gt;&lt;h2&gt;「原子化」提交，一个提交只做一件事&lt;/h2&gt;&lt;p&gt;小时候，老师和长辈或许都告诫我们，在做事情的时候要「一心一意」，不要分散注意力到其他的事情上，这样做事才会高效、有成果。&lt;/p&gt;&lt;p&gt;一旦没有遵循「一心一意」的原则，那么干正事的时候碰壁就再寻常不过。就拿我本人来说，做正事的时候「摸鱼」，狂欢一阵子后再回来，面对还没有完成的正式任务，我是容易一脸懵的：我做了啥？进度怎么样了？我刚刚是怎么攻关难题的来著？——显然，这导致了时间和精力的浪费，更不利于事后覆盘和提升。&lt;/p&gt;&lt;p&gt;不单单是做事，在使用 Git 的过程中，做每一个提交时也需要「一心一意」，也就是「原子化」（atomic）——确保每个提交只完成一项任务。&lt;/p&gt;&lt;h3&gt;1）引例&lt;/h3&gt;&lt;p&gt;可能一些开发者在组织 Git 提交时，习惯让一个提交做多件事情，&lt;strong&gt;把多项各自独立且不相关联的功能修改都放在同一个提交里&lt;/strong&gt;。比如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一个项目有 A、B、C 三个功能模块，作者对这三个模块都做了修改，还顺带在 2025 年来临之际修改了所有源码开头注释里版权说明的年份。&lt;/li&gt;&lt;li&gt;一个算法函数有多个各自独立的部分，作者在一个提交里就对这几个部分做了修改。&lt;/li&gt;&lt;li&gt;作者原本在写 A 函数，但是发现 B、C、D 这几个函数的注释需要补充，于是统统做了修改，并放在同一个提交里。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这种提交方式看似省事儿，但无疑会给后续的开发工作「埋雷」。&lt;/p&gt;&lt;h3&gt;2）为什么会「埋雷」？&lt;/h3&gt;&lt;p&gt;根据笔者自己的经验体会，如果一个提交做了不止一件事情，那么有可能会在你日后开发的时候，给你带来一些「麻烦」：&lt;/p&gt;&lt;h4&gt;0x00：难以排错&lt;/h4&gt;&lt;p&gt;也许在开发过程中，某个提交给项目引入了 Bug。当你好不容易找到了存在问题的提交，但却发现这个提交做了不止一件事，你还要花费额外的精力来定位造成 Bug 的地方。&lt;/p&gt;&lt;p&gt;而如果你有不止一个提交都没有做到「一心一意」，那么你就很难直接浏览提交记录来找到问题所在，你就不得不翻阅一个个提交，浪费成倍的精力。&lt;/p&gt;&lt;h4&gt;0x01：不便覆盘&lt;/h4&gt;&lt;p&gt;很多时候，开发者需要覆盘自己的提交记录，看看自己做了哪些工作。然而，&lt;strong&gt;假如一个提交做了不止一件事，那么就不便于覆盘开发过程。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;例如，当你想要回顾某个功能的实现过程，找出实现该功能的提交时，却发现关键的代码都被混在几个大的、综合的提交里，难以找出。好比是考前复习的时候，你总结的关键知识点混在了一堆厚厚的复习资料里，自然会影响复习效率。&lt;/p&gt;&lt;p&gt;或许有些读者会选择详尽编写提交说明，通过检索提交说明来找出自己想要的提交。不过这带来的好处有限——你后续还是离不开使用 &lt;code&gt;git show&lt;/code&gt;，在一长串「包罗万象」的 diff 记录中，找到真正想找的修改记录。&lt;/p&gt;&lt;h3&gt;2）「原子化」提交&lt;/h3&gt;&lt;p&gt;践行「原子化」提交的理念，以上的麻烦将不复存在。&lt;/p&gt;&lt;p&gt;C++ 从 C++11 标准开始，引入了「原子操作」（atomic）特性，可以确保一个变量在同一时间只有一个操作者在读写，从而防止多线程抢占造成冲突。我借鉴了「原子操作」的理念，提出了「原子化」提交——也就是确保每个提交只完成一个任务，从而改进提交记录的组织方式，防止潜在的杂乱和冲突。&lt;/p&gt;&lt;p&gt;原子化提交最大的优势，在于&lt;strong&gt;提交记录简洁、可追溯、易于查错&lt;/strong&gt;：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;使用 &lt;code&gt;git log&lt;/code&gt; 浏览提交记录时，你的开发进程一目了然，可以精确到每个提交实现的功能、修复的 Bug，等等，十分利于覆盘。&lt;/li&gt;&lt;li&gt;一旦某个提交出现问题，你可以快速浏览提交记录，短时间内找到可能存在问题的提交。然后，你就可以通过 &lt;code&gt;git checkout &lt;疑似有问题提交的前一个提交&gt;&lt;/code&gt;，暂时回到应用该提交前的状态，来排查故障。&lt;/li&gt;&lt;li&gt;在实现一个新功能、修复一个 Bug 的时候，你可以先浏览提交记录，快速判定之前是否有做了相关工作，从而避免「无用功」。&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;3）实践「原子化」提交&lt;/h3&gt;&lt;p&gt;下面，我就以几个在实际开发场景中的例子，来演示「原子化」提交的操作。&lt;/p&gt;&lt;h4&gt;实例一：修复 Bug 的「原子化」提交&lt;/h4&gt;&lt;p&gt;假设你正在开发一个电商平台的项目，最近有用户反馈在使用优惠券时，无法正确抵扣金额。经过排查，你发现是优惠券计算逻辑中的一个 Bug。你修复了这个 Bug，并且为了提高代码的可读性，对相关代码进行了重构，将一些冗长的函数拆分成了更小的函数。&lt;/p&gt;&lt;p&gt;如果你遵循「原子化」提交的原则，你可以将这个过程分为两个提交：&lt;/p&gt;&lt;figure class=&quot;table&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;提交序号&lt;/th&gt;&lt;th&gt;提交信息（commit message）&lt;/th&gt;&lt;th&gt;提交内容&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1：专门修复 Bug&lt;/td&gt;&lt;td&gt;&lt;code&gt;Fix discount calculation bug in coupon system&lt;/code&gt;&lt;/td&gt;&lt;td&gt;在这个提交中，你只修改了计算优惠券金额的代码，确保 Bug 被修复。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2：进行代码重构&lt;/td&gt;&lt;td&gt;&lt;code&gt;Refactor coupon calculation code for better readability&lt;/code&gt;&lt;/td&gt;&lt;td&gt;在这个提交中，你对代码进行了拆分和重构，但不涉及任何 Bug 修复的逻辑。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这样做的好处是，&lt;strong&gt;如果后续发现修复 Bug 的代码引入了新的问题，你可以很容易地通过 &lt;/strong&gt;&lt;code&gt;&lt;strong&gt;git log&lt;/strong&gt;&lt;/code&gt;&lt;strong&gt; 找到第一个提交，然后使用 &lt;/strong&gt;&lt;code&gt;&lt;strong&gt;git checkout&lt;/strong&gt;&lt;/code&gt;&lt;strong&gt; 检出到修复 Bug 之前的版本&lt;/strong&gt;，快速定位问题。同时，代码重构的提交也不会干扰到 Bug 修复的提交，使得提交记录清晰明了。&lt;/p&gt;&lt;h4&gt;实例二：新功能开发的「原子化」提交&lt;/h4&gt;&lt;p&gt;假设你正在开发一个在线教育平台，需要添加一个新的功能：允许用户上传视频作业。这个功能涉及到多个方面的开发，包括前端页面的设计、后端接口的编写以及数据库表结构的调整。&lt;/p&gt;&lt;p&gt;如果你遵循「原子化」提交的原则，你可以将这个功能的开发过程分为多个提交：&lt;/p&gt;&lt;figure class=&quot;table&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;提交序号&lt;/th&gt;&lt;th&gt;提交信息（commit message）&lt;/th&gt;&lt;th&gt;提交内容&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1：专注于前端页面设计&lt;/td&gt;&lt;td&gt;&lt;code&gt;Design video assignment upload page&lt;/code&gt;&lt;/td&gt;&lt;td&gt;在这个提交中，你创建了新的 HTML 文件和 CSS 样式，实现了页面的基本布局和样式。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2：编写后端接口&lt;/td&gt;&lt;td&gt;&lt;code&gt;Implement backend API for video assignment upload&lt;/code&gt;&lt;/td&gt;&lt;td&gt;在这个提交中，你创建了新的 API，实现了视频文件的接收和存储逻辑。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3：调整数据库表结构&lt;/td&gt;&lt;td&gt;&lt;code&gt;Add database table for video assignments&lt;/code&gt;&lt;/td&gt;&lt;td&gt;在这个提交中，你创建了新的数据库表，用于存储视频作业的相关信息，如用户 ID、作业 ID、视频文件路径等。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过这样的「原子化」提交，你可以清晰地记录每个功能模块的开发进度，便于后续的覆盘和维护。如果某个模块出现问题，你可以快速定位到相应的提交，进行针对性的排查和修复，而不会被其他模块的代码干扰。&lt;/p&gt;&lt;h4&gt;实例三：性能优化的原子提交&lt;/h4&gt;&lt;p&gt;假设你正在开发一款合成器软音源插件，最近发现插件占用处理器资源过高，影响用户体验。经过分析，你发现是由于合成器的振荡器、滤波器算法优化不当，且编译参数存在问题，拖累性能。为了优化性能，你需要调整合成器算法，并修改编译系统的编译参数。&lt;/p&gt;&lt;p&gt;如果你遵循「原子化」提交的原则，你可以将这个优化过程分为多个提交：&lt;/p&gt;&lt;figure class=&quot;table&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;提交序号&lt;/th&gt;&lt;th&gt;提交信息（commit message）&lt;/th&gt;&lt;th&gt;提交内容&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1：优化振荡器算法&lt;/td&gt;&lt;td&gt;&lt;code&gt;Optimize oscillator with SIMD&lt;/code&gt;&lt;/td&gt;&lt;td&gt;在这个提交中，你使用 SIMD 指令来改善振荡器的性能。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2：优化滤波器算法&lt;/td&gt;&lt;td&gt;&lt;code&gt;Optimize filter with SIMD&lt;/code&gt;&lt;/td&gt;&lt;td&gt;在这个提交中，你同样使用了 SIMD 指令，来提升滤波器的工作效率。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3：优化编译系统的编译参数设置&lt;/td&gt;&lt;td&gt;&lt;code&gt;Enable compiler optimization&lt;/code&gt;&lt;/td&gt;&lt;td&gt;在这个提交中，你为编译系统添加了编译器优化参数，使编译器充分优化代码性能。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过这样的原子化提交，你可以清晰地记录每个优化措施的实施过程，便于后续的评估和维护。如果某个优化措施带来了新的问题，你可以快速定位到相应的提交，进行针对性的排查和修复，而不会被其他优化措施的代码干扰。&lt;/p&gt;&lt;h3&gt;4）原子化提交的潜在优势&lt;/h3&gt;&lt;p&gt;值得一提的是，原子化提交除了有利于你自己的代码管理，还能起到「利他」的作用。&lt;/p&gt;&lt;p&gt;在 GitHub 等开源社区中，原子化提交可以方便其他开发者浏览你的提交记录和开发进程，使你的开源成果更好惠及他人。井井有条的提交记录，还可以给他人留下好印象，彰显你的专业水准。&lt;/p&gt;&lt;p&gt;另一方面，像 Linux 这样的大型项目，每个提交也都是原子化的，并且更加规范，这大大方便了二次开发时对新特性的反向移植工作。&lt;/p&gt;&lt;p&gt;我自己也在做 Android 内核的适配，曾经将新版本内核的特性反向移植到华为 P6 的 3.0.6 内核中。开发过程中，我会从新版本内核的提交日志中找到与某个特性有关的补丁，然后将其应用到当前内核中，几乎是一找一个准，节省了在海量代码中「找重点」的精力。&lt;/p&gt;&lt;p&gt;可见，原子化提交利己利人，具有非常显著的潜在优势，受益不只一点点。&lt;/p&gt;&lt;h2&gt;善用 &lt;code&gt;git rebase&lt;/code&gt;，合并细碎提交&lt;/h2&gt;&lt;p&gt;记得大概是 2018 年，我在刷知乎的时候见到一个提问：&lt;a href=&quot;https://www.zhihu.com/question/61283395&quot;&gt;&lt;i&gt;《Git commits 历史是如何做到如此清爽的？》&lt;/i&gt;&lt;/a&gt;，提问者非常惊讶于知名前端框架 Vue.js 源码库提交记录的干净、清爽。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/08/0f2275f4985a9701132c5d73248e46fb.png&quot;&gt;&lt;figcaption&gt;&lt;a href=&quot;https://github.com/vuejs/core/commits/main/&quot;&gt;Vue.js core 组件提交记录&lt;/a&gt;的一部分。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;就在这个问题下，作者尤雨溪（Evan You）&lt;a href=&quot;Git commits 历史是如何做到如此清爽的？ - 尤雨溪的回答 - 知乎 https://www.zhihu.com/question/61283395/answer/186122300&quot;&gt;现身说法&lt;/a&gt;：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;多用 rebase。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;就是大佬这短短三个字的经验谈，让我对 git rebase 这个功能产生了浓厚的兴趣。那时的我恐怕也不会想到，后来的我会如此频繁地使用 rebase，从而摆脱既往使用 Git 时提交记录琐碎、杂乱的问题，离正确使用 Git 更近一步。&lt;/p&gt;&lt;h3&gt;1）琐碎的提交从何而来？&lt;/h3&gt;&lt;p&gt;大家都知道，作为版本管理系统，Git 要保证提交记录可靠、可追溯，因此不能像文本编辑那样随意更改提交记录，最多只提供 &lt;code&gt;git commit --amend&lt;/code&gt; 功能来允许你更改最新的提交。&lt;/p&gt;&lt;p&gt;但在开发过程中，或许你不太可能时时刻刻像 Vue.js 的提交记录那样，使自己每个提交都保持清爽、规范。回头使用 git log 浏览提交记录，你可能会发现你提交了太多琐碎的内容，「细致」到写一行代码、修一个错别字、修一个注释都有单独的提交。&lt;/p&gt;&lt;p&gt;很多时候这些提交是很琐碎的，没有必要单独保留，好比是你在文字处理软件中每写一句话就按「保存」，而每个修改都被单独保存成了一个文件。久而久之，提交记录就变得冗长琐碎，管理的时候就很难追溯到有用的、重要的提交。&lt;/p&gt;&lt;p&gt;这个时候， &lt;code&gt;git rebase&lt;/code&gt; 就派上用场了。&lt;/p&gt;&lt;p&gt;Git 的设计师考虑到用户整理提交记录的需求，于是就设计了 &lt;code&gt;git rebase&lt;/code&gt; 这一功能，允许你合并、编辑、重排已有的提交，使修改后的提交井然有序，就像 Vue.js 的提交记录那样清晰。&lt;/p&gt;&lt;h3&gt;2）实战演示如何合并琐碎提交&lt;/h3&gt;&lt;p&gt;以下面这个提交记录为例，记录了某项目从零开始写 &lt;code&gt;main()&lt;/code&gt; 函数的过程，仅仅是添加文本输出与修改注释的提交就有好几个。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;假设这些提交彼此之间没有冲突，每个提交都是在原有提交之上的微调。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code&gt;$ git log --pretty=oneline    # 使用单行模式输出提交记录。最新的提交在前。
3a51f37493191451413b8dc7428d63351ce4b1e3 (HEAD -&gt; main, origin/main) main: 修改注释中的错别字
6587eeb437c8b139965085ddf99bd72bae682f89 main: 添加注释
61b04c318c24434996587eeb437c8b13996587e6 main: 添加操作结束的文本输出
61500445ebae1eb855ab216c6bbcec6ee73bd270 main: 微调操作开始的文本
7dad6bec684949ab0188085ddf99bc724c7b7b59 main: 添加操作开始的文本输出
996587eeb437c8b13996451413b8dc7603452f32 main: 添加基本文本输出
554bb6603452f3bf5705ac200effbdfc0aa97465 main: 创建 main 函数&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来，笔者就要把所有提交都合并到第一个提交「&lt;code&gt;main: 创建 main 函数&lt;/code&gt;」&lt;i&gt;（以下简称「目标提交」）&lt;/i&gt;当中。&lt;/p&gt;&lt;h4&gt;0x00：检查代码树是否有未提交的更改&lt;/h4&gt;&lt;p&gt;为了防止 rebase 弄乱代码仓库，Git 强制要求你的工作区「干净」，也就是不存在已经修改但没有提交的文件。否则，你是没有办法 rebase 的。&lt;/p&gt;&lt;p&gt;根据你的开发进度，你可以先提交修改；或者是使用 &lt;code&gt;git stash&lt;/code&gt; 将修改暂时保存起来，等到完成 rebase 后再运行 &lt;code&gt;git stash pop&lt;/code&gt; 恢复你的修改。&lt;/p&gt;&lt;h4&gt;0x01：进入 git rebase 模式&lt;/h4&gt;&lt;p&gt;使用 &lt;code&gt;git log&lt;/code&gt; 查看提交记录，记住「目标提交」的 ID。然后，运行以下命令，开始 rebase：&lt;/p&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code&gt;git rebase -i 554bb6603452f3bf5705ac200effbdfc0aa97465~&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个命令，允许你修改从「最新提交」到「目标提交」在内的所有提交。&lt;strong&gt;注意不要漏了提交 ID 后面的波浪线，否则会把「目标提交」给漏掉&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;稍等片刻，Git 会自动打开文本编辑器（通常是 Vim 或 Nano），列出一系列提交。其中：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;较新的提交列在文档的后面&lt;/strong&gt;&lt;strong&gt;，顺序是与 &lt;/strong&gt;&lt;code&gt;&lt;strong&gt;git log&lt;/strong&gt;&lt;/code&gt;&lt;strong&gt; 相反的；&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;每一行前面的 &lt;code&gt;pick&lt;/code&gt; 是操作指令，意为采用该提交。这是默认的行为。&lt;/li&gt;&lt;/ul&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code&gt;pick 554bb660 main: 创建 main 函数
pick 996587ee main: 添加基本文本输出
pick 7dad6bec main: 添加操作开始的文本输出
pick 61500445 main: 微调操作开始的文本
pick 61b04c31 main: 添加操作结束的文本输出
pick 6587eeb4 main: 添加注释
pick 3a51f374 main: 修改注释中的错别字&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;0x02：合并提交&lt;/h4&gt;&lt;p&gt;在本例中，从&lt;code&gt;996587ee&lt;/code&gt; 到&lt;code&gt;3a51f374&lt;/code&gt; 的这几个提交，都是要并入「目标提交」的提交。&lt;/p&gt;&lt;p&gt;我们把这些提交对应行行首的 &lt;code&gt;pick&lt;/code&gt; 改为 &lt;code&gt;fixup&lt;/code&gt; （或单个字母「&lt;code&gt;f&lt;/code&gt;」）。&lt;code&gt;fixup&lt;/code&gt; 指令的作用是合并提交，但是只保留前一个提交（相邻一个比它早的提交）的说明。如下所示：&lt;/p&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code&gt;pick 554bb660 main: 创建 main 函数
f 996587ee main: 添加基本文本输出
f 7dad6bec main: 添加操作开始的文本输出
f 61500445 main: 微调操作开始的文本
f 61b04c31 main: 添加操作结束的文本输出
f 6587eeb4 main: 添加注释
f 3a51f374 main: 修改注释中的错别字&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;随后，保存文件并关闭编辑器，Git 就会自动开始 rebase，一个个把新的提交并入相邻的前一个提交中，直到目标提交。这样，那些琐碎的提交都被并入我们的目标提交中，如此一来提交记录就清爽了不少：&lt;/p&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code&gt;$ git log --pretty=oneline    # 使用单行模式输出提交记录
f5815166356e85a5fe244f6024c2e401f04b10fa (HEAD -&gt; main, origin/main) main: 创建 main 函数&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;如果你希望保留相关提交的说明文本（以备参考等），那么你可以使用 &lt;/strong&gt;&lt;code&gt;&lt;strong&gt;squash&lt;/strong&gt;&lt;/code&gt;&lt;strong&gt; 指令（或单个字母「&lt;/strong&gt;&lt;code&gt;&lt;strong&gt;s&lt;/strong&gt;&lt;/code&gt;&lt;strong&gt;」）&lt;/strong&gt;，保存文件并关闭编辑器后， Git 会打开一个新文档，在这里你可以检查、修改提交说明。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;br&gt;经过 rebase 之后，原本的「目标提交」ID 会发生变化，因为 Git 实际上生成了一个新的提交。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;3）如果琐碎的提交是后来才做出的&lt;/h3&gt;&lt;p&gt;随著项目开发的推进，你达成的目标越来越多，提交数量也随之增长。但你发现一个早期编写的功能里，注释、代码缩进这些细节存在问题，于是再做了几个提交来修改。&lt;/p&gt;&lt;p&gt;现在，你想把这些琐碎的修改合并到该功能的提交中。此时你依然可以运用 &lt;code&gt;git rebase&lt;/code&gt;，先调整提交顺序，然后再使用 &lt;code&gt;fixup&lt;/code&gt;（或 &lt;code&gt;squash&lt;/code&gt;）指令来合并提交。&lt;/p&gt;&lt;h4&gt;0x00：准备工作&lt;/h4&gt;&lt;p&gt;在继续操作之前，你需要确保仓库里没有未提交的更改。&lt;/p&gt;&lt;p&gt;另一方面，你还要保证那些琐碎的提交不与你既往的修改产生冲突。比如说，如果你的提交除了修改注释，还顺带修改了函数结构、变量定义等内容，那么很可能会与你的其他提交造成冲突，需要你手动干预，造成不必要的麻烦。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;br&gt;假设下文的提交彼此之间没有冲突，每个提交都是在原有提交之上的调整。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4&gt;0x01：进入 rebase 模式，重排提交顺序&lt;/h4&gt;&lt;p&gt;在运行 &lt;code&gt;git rebase&lt;/code&gt; 之前，你需要通过 &lt;code&gt;git log&lt;/code&gt; 检索提交日志，找到你的「目标提交」。&lt;/p&gt;&lt;p&gt;在下面的例子中，目标提交是&lt;code&gt;554bb660&lt;/code&gt; &lt;i&gt;（「创建 main」函数）&lt;/i&gt;，你的任务就是要把你的目标是把 &lt;code&gt;3a51f374&lt;/code&gt; 与 &lt;code&gt;6587eeb4&lt;/code&gt; 这两个琐碎的提交合并到 &lt;code&gt;554bb660&lt;/code&gt; 这个提交中。&lt;/p&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code&gt;$ git log --pretty=oneline    # 使用单行模式输出提交记录
...
3a51f374 main: 修改注释中的错别字
6587eeb4 main: 修正代码缩进
996587ee process: 使用 libfftw3，优化合成器算法逻辑
34e87ac3 process: 创建 process 函数
554bb660 main: 创建 main 函数
...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，运行 &lt;code&gt;git rebase&lt;/code&gt; 命令：&lt;/p&gt;&lt;pre class=&quot;language-null&quot;&gt;&lt;code&gt;git rebase -i 554bb660~&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时， Git 依然会打开一个文本编辑器，内容如下：&lt;/p&gt;&lt;pre class=&quot;language-null&quot;&gt;&lt;code&gt;pick 554bb660 main: 创建 main 函数
pick 34e87ac3 process: 创建 process 函数
pick 996587ee process: 使用 libfftw3，优化合成器算法逻辑
pick 6587eeb4 main: 修正代码缩进
pick 3a51f374 main: 修改注释中的错别字&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们在 &lt;code&gt;git rebase&lt;/code&gt; 给我们打开的文本编辑器里，把&lt;code&gt;3a51f374&lt;/code&gt; 与 &lt;code&gt;6587eeb4&lt;/code&gt; 这两个提交对应的行，&lt;strong&gt;整体复制到 &lt;/strong&gt;&lt;code&gt;&lt;strong&gt;554bb660&lt;/strong&gt;&lt;/code&gt;&lt;strong&gt; 的后面，并将原有的行注释掉&lt;/strong&gt;。就像下面这样：&lt;/p&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code&gt;pick 554bb660 main: 创建 main 函数

# 将提交所对应的行复制到我们的目标提交后面
pick 6587eeb4 main: 修正代码缩进
pick 3a51f374 main: 修改注释中的错别字

pick 34e87ac3 process: 创建 process 函数
pick 996587ee process: 使用 libfftw3，优化合成器算法逻辑

# 为保险起见，将原有的行注释掉，而不是直接移动
#pick 6587eeb4 main: 修正代码缩进
#pick 3a51f374 main: 修改注释中的错别字&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;警告：&lt;/strong&gt;&lt;br&gt;不要修改 &lt;code&gt;pick&lt;/code&gt; 后面的内容，尤其是提交 ID，否则提交记录可能会发生混乱。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4&gt;0x02：合并提交&lt;/h4&gt;&lt;p&gt;确认提交顺序无误后，将待合并的提交对应行行首的 &lt;code&gt;pick&lt;/code&gt; 指令改为 &lt;code&gt;fixup&lt;/code&gt; （或 &lt;code&gt;squash&lt;/code&gt;），如下所示：&lt;/p&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code&gt;pick 554bb660 main: 创建 main 函数

# 将提交所对应的行复制到我们的目标提交后面
fixup 6587eeb4 main: 修正代码缩进
fixup 3a51f374 main: 修改注释中的错别字

pick 34e87ac3 process: 创建 process 函数
pick 996587ee process: 使用 libfftw3，优化合成器算法逻辑

# 为保险起见，将原有的行注释掉，而不是直接移动
#pick 6587eeb4 main: 修正代码缩进
#pick 3a51f374 main: 修改注释中的错别字&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;保存文件后，Git 随即开始 rebase 工作，这样我们就可以化琐碎为清爽，得到一个干净的提交记录了。&lt;/p&gt;&lt;h3&gt;3）注意事项&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;在进行 rebase 前，务必要检查你要合并的提交与「目标提交」之间是否存在冲突。&lt;/strong&gt;一旦存在冲突，那么 &lt;code&gt;git rebase&lt;/code&gt; 就无法继续，会要求你手工修改你的仓库代码来处理冲突，这需要更多的时间和精力——因为你要保证代码正常无误。&lt;/p&gt;&lt;p&gt;另一方面，经过 rebase 合并所得的提交，本质上是一个全新的提交，并且也改变了原有的提交记录，因此如果别人 fork 了你的代码，在与你的仓库同步时必定会发生冲突。你或许需要告知你的团队成员，或者是通过 README 来告知代码共享平台上的用户，告诉他们使用 &lt;code&gt;git pull --rebase&lt;/code&gt; 来同步你的修改。&lt;/p&gt;&lt;h2&gt;提交顺序不满意？也可以用 rebase 搞定&lt;/h2&gt;&lt;p&gt;我自己在找到开发项目的新灵感后，会马上新建一个 Git 仓库，开始动手实践，并把我写的源代码提交到仓库里。然而当我想进一步把仓库上传到 GitHub 时，却发现：我忘了加上许可协议、README 和 &lt;code&gt;.gitignore&lt;/code&gt;！&lt;/p&gt;&lt;p&gt;考虑到这些文件都是在新建项目时就要添加的，如果我在完成了一部分程序功能后补上去，再回看 Git 提交记录，总是会觉得格外「别扭」。在这样的情况下，&lt;strong&gt;我依然可以运用 git rebase，单独调整提交顺序，还我自己一个科学有序的提交记录。&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;1）实践如何调整提交顺序&lt;/h3&gt;&lt;p&gt;这里举一个高度简化的例子：假设笔者有一个项目，已经完成了程序的主体开发工作，后来才补上 README 与许可协议。提交日志如下（较新的提交在前面）：&lt;/p&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code&gt;$ git log --pretty=oneline    # 使用单行模式输出提交记录
0fb4a3b0 添加 README.md
acbc6080 添加许可协议（GPLv3）
a841dbc1 UI 的 bug 修复
16f688a6 DSP 性能优化
75ca23f6 完成 UI 开发
277aad5f 完成 DSP 开发
eb323b0e 初始提交（Initial commit）&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我希望把与 README、许可协议相关的提交──也就是 &lt;code&gt;0fb4a3b0&lt;/code&gt; 、&lt;code&gt;acbc6080&lt;/code&gt; ──挪到时间顺序上的初始提交之后，也就是提交日志中初始提交的前一行。&lt;/p&gt;&lt;h4&gt;0x01：打开 git rebase&lt;/h4&gt;&lt;p&gt;在本例中，我已经确定好了「目标提交」，也就是初始提交，并且已经确保工作区没有未提交的代码。&lt;/p&gt;&lt;p&gt;然后，运行 git rebase，定位到目标提交：&lt;/p&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code&gt;git rebase -i eb323b0e&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来 Git 会打开文本编辑器，显示以下内容（较新的提交在文档的后面）：&lt;/p&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code&gt;pick 277aad5f 完成 DSP 开发
pick 75ca23f6 完成 UI 开发
pick 16f688a6 DSP 性能优化
pick a841dbc1 UI 的 bug 修复
pick acbc6080 添加许可协议（GPLv3）
pick 0fb4a3b0 添加 README.md&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要注意的是，git rebase 不能显示初始提交，所以我们能看到的最早的提交是紧邻初始提交之后（比初始提交新）的第一个提交。&lt;/p&gt;&lt;h3&gt;0x02：开始挪动&lt;/h3&gt;&lt;p&gt;先把&lt;code&gt;0fb4a3b0&lt;/code&gt; 、&lt;code&gt;acbc6080&lt;/code&gt; 这两个提交对应的行整体复制到 &lt;code&gt;277aad5f&lt;/code&gt; （也就是初始提交后的第一个提交）前面，然后将原有的那两行注释掉，如下所示：&lt;/p&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code&gt;# 将提交所对应的行复制到我们的目标提交后面。
# 本例中的目标提交是初始提交，所以我们实际上是把要挪动的提交放在 git rebase 文档的最前面
pick 0fb4a3b0 添加 README.md
pick acbc6080 添加许可协议（GPLv3）

pick 277aad5f 完成 DSP 开发
pick 75ca23f6 完成 UI 开发
pick 16f688a6 DSP 性能优化
pick a841dbc1 UI 的 bug 修复

# 为保险起见，将原有的行注释掉，而不是直接移动
#pick acbc6080 添加许可协议（GPLv3）
#pick 0fb4a3b0 添加 README.md&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;确认无误后，直接保存，此时 Git 就会自动开始 rebase 工作，稍等片刻再查看提交记录，你会发现提交顺序变了，README 与许可协议所对应的提交就出现在了初始提交的后面，大功告成。&lt;/p&gt;&lt;h3&gt;2）注意事项&lt;/h3&gt;&lt;p&gt;考虑到 rebase 时可能会面临的冲突，你需要三思而后行。&lt;/p&gt;&lt;p&gt;通常只建议重排那些对其他提交记录几乎没什么干扰的提交，例如你的提交只创建、修改了某一个特定的文件（README、许可协议这样的文件）。若重排不慎，你就不得不花费大量的精力来处理 rebase 的冲突，还有可能把提交记录弄乱。&lt;/p&gt;&lt;p&gt;同样地，你还需要告知你的团队成员或用户，使用 &lt;code&gt;git pull --rebase&lt;/code&gt; 来合并你的更改。&lt;/p&gt;&lt;h2&gt;对于未成型项目，&lt;code&gt;git commit --amend&lt;/code&gt; 也许更适合你&lt;/h2&gt;&lt;p&gt;git commit 是 Git 用于提交修改的命令。它有一个参数 &lt;code&gt;--amend&lt;/code&gt;，允许你修改最新一次提交的内容。有时你发现刚刚提交的代码有错误，或者是提交说明有问题，但是你不想再新建一个提交来修正这些错误，那么你就可以使用 &lt;code&gt;git commit --amend&lt;/code&gt; 这个命令。&lt;/p&gt;&lt;p&gt;然而，对我来说，&lt;code&gt;git commit --amend&lt;/code&gt; 的用途远不止于此。&lt;strong&gt;在项目还未成型的阶段，我使用它来保持提交记录的清爽。&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;1）为什么我会常用 &lt;code&gt;git commit --amend&lt;/code&gt;？&lt;/h3&gt;&lt;p&gt;我开发的项目，主要是将现有的开源音频插件移植到 &lt;a href=&quot;https://github.com/DISTRHO/DPF&quot;&gt;DPF&lt;/a&gt; 这个跨平台框架，这往往是「摸著石头过河」——无论是 DPF 还是被移植的插件，都缺乏文档，全靠我自己摸索。&lt;/p&gt;&lt;p&gt;在早期阶段，代码文件结构、模块和功能代码、编译系统等都还没有定稿，程序也只实现了部分功能：这就是未成型的状态。我个人习惯一边写功能一边调试，常常反复调整代码结构和算法，直到真正实现我预期的目标为止。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这，往往意味著我要持续修改源代码库。&lt;/strong&gt;如此背景之下，如果每个修改都单独提交到仓库里，那么就意味著仓库里会有数十甚至上百条极其琐碎的提交记录，待到项目成型时还要用 &lt;code&gt;git rebase&lt;/code&gt; 来整理提交。你可以想象一下，用 WPS 写文章，每写一句话就另存一个文件，是什么样的感觉。&lt;/p&gt;&lt;h3&gt;2）如何妙用 &lt;code&gt;git commit --amend&lt;/code&gt;？&lt;/h3&gt;&lt;p&gt;为了解决上述问题，&lt;code&gt;git commit --amend&lt;/code&gt; 就成为了我最常用的操作之一。我会采用这样的思路：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;第一步，&lt;/strong&gt;用一个提交来存放项目成型前的所有开发工作。提交说明为「&lt;code&gt;Early development (WIP!)&lt;/code&gt;」，其中「&lt;code&gt;WIP（Work In Progress）&lt;/code&gt;」表示该提交随时可能被覆盖。做出这个提交之后，就不要再做新的提交。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;第二步，&lt;/strong&gt;每次完成一部分功能，确认代码编写与程序运行无误时，就使用 &lt;code&gt;git add&lt;/code&gt; 命令来将修改过的文件暂存（stage）起来，随后使用 &lt;code&gt;git commit --amend&lt;/code&gt; 更新这个提交的内容。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;第三步，&lt;/strong&gt;继续完成开发，直到项目成型。此时，再运行 &lt;code&gt;git commit --amend&lt;/code&gt;，重新修改提交说明，将「&lt;code&gt;WIP&lt;/code&gt;」等字样删除，代表我的早期开发工作已经定稿。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我个人偏向在项目成型之后，才开始转变为以一个个单独提交的方式来持续开发。这里的「成型」，大致可理解为代码结构稳定，程序预期功能已经实现，至少有可以跑起来的 Alpha 版本推出。&lt;/p&gt;&lt;p&gt;如此一来，提交记录就会变得清爽，不会让琐碎的早期开发记录「挤占」你的 git log，事后也不需要再单独花时间来 rebase。&lt;/p&gt;&lt;h3&gt;3）注意事项&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;由于这种方法并不会为每个更改留下单独的提交，后续难以通过 &lt;code&gt;git log&lt;/code&gt; 回溯，故只建议在项目未成型时使用。如果你不放心，依然可以每做一组工作就提交一次，对此我建议在提交说明里做标记，以备项目成形后再 rebase 提交记录。&lt;/li&gt;&lt;li&gt;在 &lt;code&gt;git commit --amend&lt;/code&gt; 之前，也务必确保程序与代码无误，以免混乱。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;除此之外，当你在为你的项目添加新功能时，你也可以在原型设计、测试的阶段使用&lt;code&gt;git commit --amend&lt;/code&gt; ，因为这个过程常常就像写一篇新文章，你或许也不希望每写一句话就又来另存一个新文档。&lt;/p&gt;&lt;h2&gt;写在最后&lt;/h2&gt;&lt;p&gt;在日常与 Git 打交道的过程中，我一直致力于精进 Git 的使用。上面这几点技巧，就是我自己的实践成果，著力于让提交日志更清爽、规范，方便后续的维护。让我们再来回顾一下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;使用「原子化」提交，每个提交只做一件事，利于管理、维护和回顾你的开发进度；&lt;/li&gt;&lt;li&gt;灵活运用 &lt;code&gt;git rebase&lt;/code&gt;，合并细碎的提交，按需要重排提交，使提交记录清爽、规范；&lt;/li&gt;&lt;li&gt;项目未成型时，活用 &lt;code&gt;git commit --amend&lt;/code&gt;，保持提交记录清爽。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当然，以上的技巧，更多体现出我个人的使用习惯，客观上也改善了我自己 Git 仓库的质量。相信我的分享能为感兴趣的读者朋友们提供参考，一同将 Git 用得更自在。&lt;/p&gt;&lt;/div&gt;</description>
            <author>爱拼安小匠</author>
            <pubDate>Tue, 21 Jan 2025 11:06:37 +0800</pubDate>
        </item>
        <item>
            <title>派早报：EA Origin 应用将停运，IDC 发布 2024 年中国手机市场报告等</title>
            <link>https://sspai.com/post/95757</link>
            <description>&lt;div class=&quot;content wangEditor-txt minHeight&quot;&gt;&lt;p&gt;EA 于 1 月 18 日发布通知，宣布旗下的 Origin 应用将于 2025 年 4 月 17 日停运，后续将切换到 EA app 平台。这一次的关停的主要原因是 Origin 客户端是基于旧版操作系统开发的，而无论是微软还是 Apple 都已经停止对旧版操作系统的支持，随著时间推移也势必导致安全问题，而迁移到基于现代操作系统的 EA \app 则是最佳的选择。&lt;a href=&quot;https://help.ea.com/en/help/ea/ea-app/update-operating-system-for-ea-app/&quot;&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;IDC：2024 年全年中国智能手机市场触底反弹&lt;/h3&gt;&lt;p&gt;1 月 20 日，市场研究机构 IDC（国际数据公司）发布 2024 年中国智能手机市场最新季度跟踪报告。报告显示，2024 年第四季度，中国智能手机市场出货量约 7643 万台，同比增长 3.9%。市场份额方面，2024 年第四季度前五大厂商分别为 Apple、vivo、华为、小米、荣耀与并列第五的 OPPO，其中 vivo、华为与小米同比增幅达 14.0%、22.8%、28.4%，为 Android 带去 7% 的市场增幅。全年范围看，市场份额前五的厂商分别为 vivo、华为、Apple、荣耀与 OPPO。&lt;/p&gt;&lt;p&gt;值得一提的是，2024 年第四季度，折叠屏手机出货量自 2022 年第二季度后首次出现同比下降，但全年出货量仍达 917 万台，同比增长 30.8%。2024 年折叠屏市场份额前五的厂商分别为华为、荣耀、vivo、小米、OPPO，其中华为市场份额达 48.6%。&lt;a href=&quot;https://www.idc.com/getdoc.jsp?containerId=prCHC53105325&quot;&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu774j5b34temt4lrt4g.png&quot; alt=&quot;XUZTbxkfuoWmUbxrj5tcMDtsnye&quot;&gt;&lt;/figure&gt;&lt;h3&gt;字节跳动发布面向海外的 AI 中文开发环境 IDE：Trae&lt;/h3&gt;&lt;p&gt;字节跳动于 1 月 19 日正式发布了一款面向专业的开发者提供服务的全新 AI Coding 产品 Trae，该 IDE 由字节跳动旗下新加坡公司 SPRING (SG) PTE.LTD. 提供服务，支持 AI 问答、代码自动补全、基于 Agent 的 AI 编程等功能，可以帮助程序员自动化完成开发任任务，并在一些项目中可以实现端到端开发（通过用户的提问直接生产一个完整的代码项目），该工具可选择简体中文或英文，并内置了 GPT-4o、Claude-3.5-Sonnet 模型供免费使用，目前仅支持 Mac 版本，未来将推出 Windows 版本。&lt;a href=&quot;https://www.trae.ai/&quot;&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;月之暗面发布 Kimi k1.5 多模态思考模型&lt;/h3&gt;&lt;p&gt;1 月 20 日，月之暗面宣布推出 Kimi k1.5 多模态思考模型，宣称在 short-CoT 模式下，Kimi k1.5 的数学、代码、视觉多模态和通用能力大幅超越 GPT-4o 和 Claude 3.5 Sonnet；在 long-CoT 模式下，其数学、代码、多模态推理能力达到 OpenAI o1 正式版水平。该模型预览版将灰度上线 Kimi 官网与 app。&lt;a href=&quot;https://mp.weixin.qq.com/s/BmOKGKjXP2tjmPyNdU0Hqg&quot;&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Google 将通过 Android 和 Chrome 支持沉浸式音频格式 Eclipsa Audio&lt;/h3&gt;&lt;p&gt;Google 于 1 月 19 日在其官方博客上宣布，将在 Android 系统和 Chrome 浏览器中支持沉浸式音频格式 Eclipsa Audio，并会很快面向开发者推出 Eclipsa Audio 插件。Eclipsa Audio 基于沉浸式音频模型和格式（IAMF）的空间音频格式，IAMF 则是开放媒体联盟 AOMedia 推出的开源免专利费空间音频格式，Google 和三星为该开放媒体联盟的成员。借助 Eclipsa Audio，内容创作者可以为消费者提供空间音频，而此前创作空间音频主要局限在电影和音乐行业的专业人士。此外 Google 还表示，预计 2025 年下半年，多家电视制造商和条形音箱制造商也会推出支持该空间音频格式的设备，Google 和三星将推出认证和品牌授权计划，为消费者提供质量保证。&lt;a href=&quot;https://9to5google.com/2025/01/19/eclipsa-audio-google-chrome-android/?open_in_browser=true&quot;&gt;来源&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;看看就行的小道消息&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Elon Musk 于 1 月 20 日在 X 平台发布推文，表示正「考虑」恢复短视频平台 Vine。Vine 曾是一个拥有八年历史的短视频平台，于 2012 年被 Twitter（X 的前身）收购，其最大的亮点是通过 6 秒的创意短视频挑战模式，吸引了大量忠实用户，后续该应用渐渐被用户抛弃，Twitter 最终在 2016 年将其关闭。&lt;a href=&quot;https://x.com/elonmusk/status/1880852037212291478&quot;&gt;来源&lt;/a&gt;&lt;/li&gt;&lt;li&gt;微博数码博主 @体验 more 称，OPPO Find N5（PKH110，非衞星通信版）将采用 SM-8750-3-AB，是采用 2+5 核设计的骁龙 8 Elite，比标准版少了一颗性能核。目前泄露的跑分成绩为单核 3083，多核 8865，与标准版骁龙 8 Elite 有明显差距。&lt;a href=&quot;https://weibo.com/3108827753/PapB5nuwp&quot;&gt;来源&lt;/a&gt;&lt;/li&gt;&lt;li&gt;由于海外网友大量涌入，小红书于 1 月 20 日的最新版本 app 火速上线翻译功能。上线早期不少用户发现该功能依靠大模型，且未做提示词屏蔽，导致大量用户开始使用翻译功能生成内容，包括食谱、代码、提示词等。目前该漏洞已基本完成封堵。据封堵前该功能就提示词的回应，翻译功能由智谱 GLM 提供服务。&lt;a href=&quot;https://www.cnbeta.com.tw/articles/tech/1472606.htm&quot;&gt;来源&lt;/a&gt;&lt;/li&gt;&lt;li&gt;1 月 20 日，爆料人 Evan Blass（@evleaks）发布了一条&lt;a href=&quot;https://x.com/evleaks/status/1881274150351962611&quot;&gt;源码截图&lt;/a&gt;，截图显示除了 iPhone SE (4th Gen) 外，还有 iPad (11th Gen)、iPad Air 13 (M3)、iPad Air 11 (M3) 三台未发布的 iPad。此前，Mark Gurman 在爆料中有提及 iPad 11 会使用 A17 Pro 芯片与 8GB RAM 以支持 Apple Intelligence。&lt;a href=&quot;https://www.macrumors.com/2025/01/20/new-ipad-air-models-with-m3-chip-leak/&quot;&gt;来源&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu774jdb34temtjvmqp0.png&quot; alt=&quot;JE55bYl6voZVCVxgLFxcUAf4n1d&quot;&gt;&lt;/figure&gt;&lt;h2&gt;少数派的近期动态&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;少数派年度盘点回归，我们选出了 16 件产品，涵盖手机、平板电脑、智能家居、AI 模型等多个领域，并做成了富有交互感的页面，欢迎&lt;a href=&quot;https://sspai.com/page/2024&quot;&gt;查阅&lt;/a&gt;并&lt;a href=&quot;https://weibo.com/1914010467/Pa0U25do2&quot;&gt;参与微博讨论和抽奖&lt;/a&gt;。&lt;/li&gt;&lt;li&gt;少数派「大家给 Apple 的成绩单」2024 年结果已上线。你给 Apple 的 2024 年打几分？欢迎进入&lt;a href=&quot;https://sspai.com/page/apple_report_2024&quot;&gt;专题页&lt;/a&gt;查阅，还可参与微博&lt;a href=&quot;https://sspai.com/post/95746&quot;&gt;话题讨论&lt;/a&gt;与&lt;a href=&quot;https://weibo.com/1914010467/Paup46FAj&quot;&gt;抽奖&lt;/a&gt;。&lt;/li&gt;&lt;li&gt;春节来点「科技年货」送人送己，少数派年终大促销开始啦。&lt;a href=&quot;https://sspai.com/post/95456&quot;&gt;&lt;strong&gt;进一步了解&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;假期将至，你的旅途游戏清单列好了吗？&lt;a href=&quot;https://sspai.com/bullet/1736744010&quot;&gt;&lt;strong&gt;来分享一下吧&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;你可能错过的文章&lt;/h2&gt;&lt;p&gt;&gt; 下载 &lt;a href=&quot;https://sspai.com/page/client&quot;&gt;少数派 2.0 客户端&lt;/a&gt;、关注 &lt;a href=&quot;https://sspai.com/s/J71e&quot;&gt;少数派公众号&lt;/a&gt;，解锁全新阅读体验 &#128240;&lt;/p&gt;&lt;p&gt;&gt; 实用、好用的 &lt;a href=&quot;https://sspai.com/mall&quot;&gt;正版软件&lt;/a&gt;，少数派为你呈现 &#128640;&lt;/p&gt;&lt;/div&gt;</description>
            <author>少数派编辑部</author>
            <pubDate>Tue, 21 Jan 2025 08:00:00 +0800</pubDate>
        </item>
        <item>
            <title>满分五分，你给 Apple 的 2024 年打几分？</title>
            <link>https://sspai.com/post/95746</link>
            <description>&lt;article class=&quot;normal-article&quot;&gt; &lt;div id class=&quot;article-body&quot;&gt;&lt;div class=&quot;articleWidth-content&quot;&gt;&lt;div class=&quot;content wangEditor-txt minHeight&quot;&gt;&lt;p&gt;Apple 的 2024 年从 Vision Pro 的高调亮相开始。这款开启了全新产品线的 XR 设备带来了令人惊艳的视听效果和交互范式，但围绕其实用性和发展前景的讨论，短期内预计还不会终结。M4 处理器先后登陆 iPad 和 Mac，两个产品线都由此获得更极致的外观和更强大的性能，Mac mini 更是成为年内最令人惊喜的新品之一。iPhone 和 Apple Watch 的升级相对谨慎，但 RAM 和屏幕尺寸的提升也为隔代升级的用户提供了「甜点」。&lt;/p&gt;&lt;p&gt;软实力方面，面对 AI 浪潮，Apple Intelligence 的发布交上了及时的答卷，也留下了仍待后续发展的悬念，在中国的前景尤其受到行业和消费者高度关注。面对快速变化的监管环境，App Store、NFC 等生态呈现出更多开放的迹象，但各利益相关方还在磨合中共同探索前进的方向和幅度。在中国，增开的零售店、应用实验室持续强化著 Apple 的「存在感」和服务能力，但竞争激烈的市场环境也对 Apple 的品牌领导力提出了新的挑战。&lt;/p&gt;&lt;p&gt;那么，对于 Apple 这个喜忧兼具的 2024 年，少数派的朋友们都会怎样评价呢？今年，我们连续第四年推出「大家给 Apple 的成绩单」策划，邀请到更多嘉宾，也结合时事热点对评分类目、问题设置做了更新，希望能够为大家呈现一份既反映共识、又体现个性的点评。&lt;/p&gt;&lt;p&gt;与去年一样，你可以在页面底部填写一份自己心目中的「成绩单」，然后和少数派嘉宾们的结果一起分享到 &lt;a href=&quot;https://s.weibo.com/weibo?q=%23%E7%BB%99Apple%E6%89%93%E5%88%86%23&quot;&gt;#给 Apple 打分#&lt;/a&gt; 微博话题，2 月 10 日，我们将从分享用户中抽取 15 位送出招财水獭。期待看到你的观点，也希望 Apple 能在 2025 年持续为我们带来惊喜。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://sspai.com/page/apple_report_2024&quot;&gt;&lt;strong&gt;访问专题页面&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&quot;https://sspai.com/page/apple_report_2023&quot;&gt;&lt;strong&gt;2023 年结果回顾&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&quot;https://sspai.com/page/apple_report&quot;&gt;&lt;strong&gt;2022 年结果回顾&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&quot;https://sspai.com/post/70814&quot;&gt;&lt;strong&gt;2021 年结果回顾&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/20/57a5c7c5014c649465881f856c682ae9.jpg&quot;&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/20/9b4263f2f8dca0f338e0d5e347e673b1.jpg&quot;&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/20/09225eb010ec0c049fcc6df554d486d6.jpg&quot;&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/20/86419aa2d5938251bdf9c790f44324b1.jpg&quot;&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/20/ce4a92b73b3aeb1459b91ce6809fde8c.jpg&quot;&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/20/f4c0ed5cfa651607bac929f638f95805.jpg&quot;&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/20/58eb4738c7651fc8a6a48304174686ff.jpg&quot;&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/20/8419eb99c2e1406f8dd8df410dcc5e83.jpg&quot;&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/20/4b5ea91007ff0b92403beb441e9380ac.jpg&quot;&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/20/032a4def4795f1916fd1dc165a0b3a01.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt; 我们从 2024 年 11 月下旬至 12 月中旬期间，陆续向 33 名受访人发送了相同的问卷。问卷中仅含有少量背景信息、分类说明和官方资讯，不含有其他引导或提示性质的文本。问卷回收结束于 2025 年 1 月 3 日。&lt;/p&gt;&lt;p&gt;除为符合产品规范名称、语句通顺所做的必要编辑外，文章引用的评语均为所回收问卷中的原文。该等评语的权利由相应受访者保留，其内容不代表少数派立场。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;article-author articleWidth-687&quot;&gt;&lt;div class=&quot;el-row&quot;&gt;&lt;div class=&quot;el-col el-col-11 center&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/article&gt;</description>
            <author>少数派编辑部</author>
            <pubDate>Mon, 20 Jan 2025 18:25:32 +0800</pubDate>
        </item>
        <item>
            <title>派评 | 近期值得关注的 App</title>
            <link>https://sspai.com/post/95744</link>
            <description>&lt;div class=&quot;content wangEditor-txt minHeight&quot;&gt;&lt;p&gt;欢迎收看本期《派评》。你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们讨论。&lt;/p&gt;&lt;h2&gt;值得关注的新 App&lt;/h2&gt;&lt;p&gt;虽然少数派一直在为大家发现和介绍各平台上的优质 App，但仍有不少设计、功能、交互、体验都非常优秀的 App，还没有被我们发掘和介绍。它们可能是一款老 App，也可能是近期上架的新 App，我们会在这里介绍给你。&lt;/p&gt;&lt;h3&gt;Showly：数据更全面的开源影视记录工具&lt;/h3&gt;&lt;p&gt;&lt;a class=&quot;ss-atUser&quot; href=&quot;https://sspai.com/u/69zxdqx8&quot;&gt;@Noah_Choi&lt;/a&gt;：买了 NAS 之后，总想要收藏各种资源反复观看，因此也衍生出了观影情况记录的需求。虽然国内有豆瓣之类的记录平台，但也会因为诸多原因缺少很多冷门资源的条目和信息，许多优秀剧集的幕后花絮、采访、纪录片等也没有收录。&lt;/p&gt;&lt;p&gt;而 Showly 就完美解决了我的记录需求，它就是一款数据非常全面并且简单易用的影视记录工具。应用可以非常简洁明了地展示当前正在追踪的影视剧，包括目前已经更新到多少集、你已经看过了多少集等等，由于它的数据来源是 track.tv，支持与平台的双向同步，我们不必担心数据缺失，很多电视剧的幕后花絮、纪录片等也能记录在册。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71p6db34temtjvmpr0.png&quot; alt=&quot;DxYOb7osfo0o7txI1dzc5fIYnTg&quot;&gt;&lt;/figure&gt;&lt;p&gt;不过 Showly 记录的逻辑和我们国内很多平台的逻辑有些差别。比如在豆瓣上，想看、在看、看过的标记都相当于加入到了我们的观看列表中，但在 Showly 里，标记看过的剧集和加入观看列表是两套独立的操作。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71p6lb34temupl6vc0.png&quot; alt=&quot;UUTubHCFooz9l0x80iccb0qfnZd&quot;&gt;&lt;/figure&gt;&lt;p&gt;另外，豆瓣上的标记一般都是以整个电影和整个剧集为单位进行标记，而 Showly 是以「集」为单位，如果你想要标注以前看过的影视剧，需要进入影视详情页，在下面选择每一季的复选框来标注观看进度。不过值得一提的是，Showly 提供了三种观看日期标注选项，分别是现在、自定义以及「剧集发布当日」，而不是像国内平台那样只能按照标注当天来记录时间。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71p6tb34temupl6vcg.png&quot; alt=&quot;XwnFbd1SkoSfprxqeWGcWzgTnOc&quot;&gt;&lt;/figure&gt;&lt;p&gt;总体来看，Showly 虽然相当于是个套壳 track.tv 的记录工具，但使用起来清爽干净，没有多余的功能，也不需要忍受官方客户端各种 VIP 会员限制，而且它本身还是一个开源作品，作为轻度记录观影记录的工具来说绰绰有余。现在，你可以在 &lt;a href=&quot;https://github.com/michaldrabik/showly&quot;&gt;GitHub&lt;/a&gt; 和 &lt;a href=&quot;https://apt.izzysoft.de/fdroid/index/apk/com.michaldrabik.showly2&quot;&gt;IzzyOnDroid&lt;/a&gt; 免费下载 Showly。&lt;/p&gt;&lt;h3&gt;Default Browser：用快捷键切换默认浏览器&lt;/h3&gt;&lt;p&gt;&lt;a class=&quot;ss-atUser&quot; href=&quot;https://sspai.com/u/914r3btn&quot;&gt;@ElijahLee&lt;/a&gt;：Default Browser，顾名思义，是 macOS 上一款快捷切换默认浏览器的小工具，它支持菜单栏、快捷键等多种便捷方式来快速切换浏览器。&lt;/p&gt;&lt;p&gt;下载安装 Default Browser 之后，应用会在 macOS 的菜单栏添加一枚应用图标，并自动读取已经安装的浏览器，目前支持 Safari、Arc、Firefox、Chrome 等多种主流浏览器应用。应用为每一个浏览器分配了一个数字，这些数字即对应切换浏览器的快捷操作。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71p75b34temtc0gru0.jpeg&quot; alt=&quot;CwZ5b31VTocqFbxZY09csWLjnPd&quot;&gt;&lt;/figure&gt;&lt;p&gt;使用 Default Browser 切换默认浏览器有两种方式。首先是通过菜单栏方式，点击菜单栏的应用图标，待弹出式窗口出现后，再点按对应的数字或者上下方向键，即可切换浏览器。第二种方式是通过快捷键，在应用的设置中，分配快捷键，比如 &lt;code&gt;Command - B&lt;/code&gt;，待弹出式窗口出现后继续按数字键或者上下方向键。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71p7db34temtc0grug.jpeg&quot; alt=&quot;MCyBbSHL3oh4kTx0xhGcaYfonyh&quot;&gt;&lt;/figure&gt;&lt;p&gt;Default Browser 还有一些贴心的功能。首先是菜单栏的图标有多种选择，包括浏览器的默认 icon 经纬地球，还有切换符号，还有我认为非常实用的方式：直观地在菜单栏显示当前默认浏览器的应用图标。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71p7lb34temtjvmprg.png&quot; alt=&quot;L5Ibbt3oWoNtJjxx5WZcv0Opnyf&quot;&gt;&lt;/figure&gt;&lt;p&gt;在应用的设置中，还可以设置隐藏菜单栏图标，只有在切换默认浏览器时，短暂地显示菜单栏图标。这样既可以保持菜单栏的简洁，同时能够在切换浏览器时提供提示。&lt;/p&gt;&lt;p&gt;Default Browser 还支持使用快捷指令、自动化、专注模式等方式来切换默认浏览器。添加包含 Default Browser 操作的快捷指令，并配置快捷键即可通过快捷指令来切换，在「系统设置 - 专注模式 - 过滤条件」中，选择 Default Browser 设置默认浏览器。自动化则是需要使用 &lt;a href=&quot;https://apps.apple.com/app/id1594183810&quot;&gt;Shortery&lt;/a&gt;，设置时间、地点、Wi-Fi 等条件下，自动触发切换浏览器。&lt;/p&gt;&lt;p&gt;你可以在应用&lt;a href=&quot;https://sindresorhus.com/default-browser#focus-filter&quot;&gt;官网&lt;/a&gt;购买 Default Browser，应用起始售价 4 美元。&lt;/p&gt;&lt;h3&gt;Cobalt：开源在线影音下载工具&lt;/h3&gt;&lt;p&gt;&lt;a class=&quot;ss-atUser&quot; href=&quot;https://sspai.com/u/ul0vcezb&quot;&gt;@Snow&lt;/a&gt;：Cobalt 是一款开源的在线下载工具，它可以帮你保存你喜欢的网站上的视频、音频、静态照片或 GIF 图。由于 Cobalt 依托于网页呈现，因而所有支持浏览器的平台均可适配。&lt;/p&gt;&lt;p&gt;Cobalt 的使用方法也非常简单，只需粘贴你想要下载的内容链接，点击 paste 按钮，Cobalt 就会自动解析并开始下载。当你的下载内容为图片时，Cobalt 会以网格图形式提供预览，方便你有选择性地下载；当下载内容为视频时，则可以在左下方的按钮选择下载纯视频/音频内容。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71p7tb34temtc0grv0.jpeg&quot; alt=&quot;NOumbIWMgo7FzfxmVYrcqQVlnmd&quot;&gt;&lt;/figure&gt;&lt;p&gt;作为一款效率工具，Cobalt 可自定义项非常丰富。例如，你可以自定义优先下载的视频格式与分辨率、音频格式与比特率，针对 YouTube 部分内容，Cobalt 甚至还支持挑选不同语言音轨下载。它还提供了 4 种文件命名方式，方便用户管理下载内容。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71p85b34temtc0grvg.png&quot; alt=&quot;DD2rb5UuboZoshxiJMxcZbOKnNB&quot;&gt;&lt;/figure&gt;&lt;p&gt;此外，Cobalt 还提供了一个测试版的媒体修复功能，可以将现有的编解码器数据复制到新的媒体容器中，或许可以解决一些信息丢失的问题，同时还可以提升与旧版软件的兼容性。你只需跳转至 Remux 一栏，并将需要处理的媒体文件拖入即可。&lt;/p&gt;&lt;p&gt;Cobalt 目前支持 YouTube、X（Twitter）、Pinterest、Tiktok、Instagram、Tumblr 等社交平台，不过由于是第三方工具，并不是每一项服务都非常稳定，例如支持的 B 站视频，目前就无法使用 Cobalt 下载。&lt;/p&gt;&lt;p&gt;你可以&lt;a href=&quot;https://cobalt.tools/settings/download&quot;&gt;点击此处&lt;/a&gt;免费使用 Cobalt。&lt;/p&gt;&lt;h3&gt;DigiPaw：数字健康新方式&lt;/h3&gt;&lt;p&gt;&lt;a class=&quot;ss-atUser&quot; href=&quot;https://sspai.com/u/5isr02uh&quot;&gt;@Peggy_&lt;/a&gt;：又一次坐上下班的公交车，车厢里此起彼伏的都是抖音、快手视频的声音，这边是小美的传奇经历，那边是大圣直击天灵盖的声音，还没等听完上个家人的惊爆价，转头又传来了秘闻要事。电子产品从来没有像今天这样分散著我们的注意力，吞噬著我们的时间。&lt;/p&gt;&lt;p&gt;现如今，越来越多手机厂商开始在手机里塞入各种数字健康功能来帮助用户戒除手机瘾，而类似的应用也层出不穷。今天介绍的 DigiPaw 也是一款主打数字健康的应用。其功能涵盖了随时开启专注时段并屏蔽特定应用、特定时间屏蔽特定应用、屏蔽关键词、手机使用统计等。优势在于功能更多、使用较为方便。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71p85b34temtc0gs00.jpeg&quot; alt=&quot;XDjAbcQcwoZDdzxCsKUcxx59ngc&quot;&gt;&lt;/figure&gt;&lt;p&gt;在使用前我们需要授予 DigiPaw 相应权限，这里针对不同的功能选项，我们可以授予不同的无障碍权限，对于不需要的部分功能也可以选择不给予其对应权限。首先是专注模式，在这一功能下，我们可以根据自己的习惯来选择屏蔽导致我们分心的应用。每次要使用时，便可以点击开始专注，并灵活更改专注时长。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71p8lb34temupl6vd0.jpeg&quot; alt=&quot;XHTsb8eawo0TgZxeaxacQBe5nBf&quot;&gt;&lt;/figure&gt;&lt;p&gt;其次便是应用屏蔽功能，我们可以选择所有想要屏蔽的应用，并设置警告界面出现的时间和具体内容，例如打开相应应用 5 分钟便弹出警告界面，当然我们可以结合自己的自律程度选择是否允许继续浏览应用。如果希望更加严格，那么便可以在到达规定时长后强制退出应用。当然了，我们安装应用的初衷毕竟还是为了娱乐，全天禁止的效果倒不如不安装。因而 DigiPaw 也允许我们设置多个时段，并在此时段内小小地「作弊」来使用某些已经屏蔽的应用。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71p8tb34temtjvmps0.jpeg&quot; alt=&quot;X64abuAfyoL8AixA91Jczi4fnwh&quot;&gt;&lt;/figure&gt;&lt;p&gt;关键词屏蔽功能更加……一言难尽，只要手机屏幕上出现了我们添加的关键词，不论这个词出现在哪个位置，页面便会被快速定向到下面这个网页，轻易不要尝试。比如我添加了关键词「YouTube」，而这个应用又被我放在了主屏，所以就非常魔性地只要切到主屏，就得看一段劲歌热舞。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71p8tb34temt4lrsig.jpeg&quot; alt=&quot;YrmfbvMOVol1orxWBpYczc8onle&quot;&gt;&lt;/figure&gt;&lt;p&gt;其余功能由于篇幅有限，不再一一说明，如果你对 DigiPaw 感兴趣，可以通过 &lt;a href=&quot;https://f-droid.org/packages/nethical.digipaws/&quot;&gt;F-Droid&lt;/a&gt; 下载体验。&lt;/p&gt;&lt;h3&gt;Horizon Live Wallpapers：跟随日月天气变化的动态壁纸&lt;/h3&gt;&lt;p&gt;&lt;a class=&quot;ss-atUser&quot; href=&quot;https://sspai.com/u/liuxiaofengone&quot;&gt;@化学心情下 2&lt;/a&gt;：虽说 Google Pixel 内置了动态壁纸，但官方原生提供的壁纸可谓是寥寥无几，尤其是我喜欢根据每天的日落日出来动态调整系统主题，所以很长一段时间都通过 Breezy Weather 实现背景壁纸的动态交替。不过每次看壁纸都是天气符号也略显单调，那么有没有同样支持浅色/深色主题切换，且支持节律的动态壁纸呢？&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71p9db34temt4lrsj0.jpeg&quot; alt=&quot;AlnIb9ha0o7G2cx6IR7c3jffnze&quot;&gt;&lt;/figure&gt;&lt;p&gt;Horizon Live Wallpapers 是近期上架的一款融合了天气、月相、日出、日落的动态壁纸应用，支持根据日出日落生成不同的全天候动态壁纸。打开应用后，你可以选择壁纸集、设置天气和位置、选择控制方式、调整月相显示等等。&lt;/p&gt;&lt;p&gt;首先是壁纸集的设置，默认情况下是随机选定一个免费的壁纸，当然在这里面你可以单独选择壁纸的样式，大多数都提供了浅色/深色主题选项，除了免费的壁纸集也可以付费购买一些有更多样式的壁纸，比如有些付费壁纸除了白天和夜晚的主题之外，还有清晨以及傍晚的主题，一天下来会有更为丰富的视觉效果。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71p9lb34temupl6vdg.jpeg&quot; alt=&quot;M5G4b9UX7ozaFxxQx5gcoQcUnyf&quot;&gt;&lt;/figure&gt;&lt;p&gt;这些变化其实是基于当地位置和天气所产生的，因此在 Horizon Live Wallpapers 中你需要单独设置天气和位置，在获取定位并打开天气+天气效果之后，动态壁纸上将会呈现当地的天气，比如下雪、或者下雨的效果，这样你打开手机桌面就能知道户外的天气是什么，结合原本壁纸上的风景还是相当有趣的。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71pa5b34temupl6ve0.jpeg&quot; alt=&quot;VNoWbripto8q8sxhwKlcXiiJnpf&quot;&gt;&lt;/figure&gt;&lt;p&gt;除了天气之外， Horizon Live Wallpapers 还支持设置月相，也可以在动态壁纸上呈现月亮的升起以及月圆月缺的效果，你还可以将小组件放置在桌面用来当作天气预报提示使用，当然比起专业的天气应用还是比较羸弱的，所以只能说是一个天气情况的补充而已。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71padb34temtjvmpsg.jpeg&quot; alt=&quot;OIBkbzzFdoGhIwx9WpIcXDswntf&quot;&gt;&lt;/figure&gt;&lt;p&gt;总的来说，Horizon Live Wallpapers 更像是结合了天气的动态壁纸应用，更为丰富的壁纸画面场景、结合月相、天气、以及日升日落的动态变化，让你的 Android 手机桌面变成一个不断变化的风景画，你可以在 &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.seresk.horizon.realtime.live.wallpapers&quot;&gt;Play Store&lt;/a&gt; 免费下载并使用。&lt;/p&gt;&lt;h2&gt;不容错过的 App 更新&lt;/h2&gt;&lt;p&gt;除了「新鲜」App，App Store 中的许多老面孔也在不断迭代、更新，增加更多有趣和实用的功能。少数派希望帮你筛选 App Store 中值得关注的 App 动态，让你快速了解 App 和开发者们的最新动态。&lt;/p&gt;&lt;h3&gt;Craft：新年首次更新及 2025 年更新计划&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;平台：iOS / iPadOS / macOS / Windows / Web / visionOS&lt;/li&gt;&lt;li&gt;关键词：文档协作、笔记工具&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a class=&quot;ss-atUser&quot; href=&quot;https://sspai.com/u/whoops&quot;&gt;@Vanilla&lt;/a&gt;：继去年底的大版本更新之后，知名在线笔记应用 Craft 又在新年伊始为我们带来了 2025 年的第一次更新，同时也预告了新一年中的更新计划，包括了导航、文件组织、键盘快捷键、收藏与任务、搜索、图像处理、AI、Windows 应用以及提升性能，不过其中最让我感到兴奋的是标签功能，不知道等了这么久是否能在 2025 年如愿以偿。&lt;/p&gt;&lt;p&gt;在今年的第一个新版本中，最重要的一个更新内容是 Craft 支持了 Apple Intelligence 中的 Image Playground（图乐园）功能。如果你将设备更新到了 iOS 18.2 或者 macOS 15.2 以上的版本，同时设备支持 Apple Intelligence，那么就可以在 Craft 中直接调用图乐园功能来创建 AI 图像。&lt;/p&gt;&lt;p&gt;目前，我们可以在 Craft 中的封面图片、行内图片和胶带部分使用图乐园功能创建图像，只需要点击 Create 按钮即可在应用内唤起图乐园界面，然后我们可以通过文字描述、上传图片、预设模版等来创建图像，完成后直接插入到 Craft 中使用。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71palb34temtjvmpt0.jpeg&quot; alt=&quot;VvUdbOfSZoUmNfxZwJLcSnwRnKb&quot;&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71pb5b34temupl6veg.jpeg&quot; alt=&quot;KKQtbT3daoEIERxmMd5cPjohnaf&quot;&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71pb5b34temupl6vf0.jpeg&quot; alt=&quot;R0EYbPESSop408xTar0cSQsEnf9&quot;&gt;&lt;/figure&gt;&lt;p&gt;另外一个新版本主要更新内容是上下文菜单。Craft 在新版本中重新设计了上下文菜单的样式，放弃了 Craft 自己的 UI 风格，而是采用了 iOS 系统原生样式，因此在 iOS/iPadOS 平台上使用 Craft 时会看起来更加和谐。&lt;/p&gt;&lt;p&gt;新的上下文菜单现在已经深入了 Craft 应用中的各个地方，包括文档视图、任务视图、日历视图等，我们都可以通过原生样式的上下文菜单和次级菜单来获得更多的操作功能。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71pblb34temtjvmptg.jpeg&quot; alt=&quot;QBUWbi7vcomQbOxN4TicTcoynJd&quot;&gt;&lt;/figure&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/editor/u_/cu71pbtb34temtc0gs0g.jpeg&quot; alt=&quot;DXWMbc3A4o9eYpxYv9ncOAkknih&quot;&gt;&lt;/figure&gt;&lt;p&gt;除了上述提到的更新内容，Craft 还在新版本中更新了图片库、增加了日期选择器上的字体大小选项、更新了拼写检查的实线颜色等，具体内容可以在官网更新日志中查看。Craft 可以在各个应用商店或者官网下载使用，目前已经支持了 iOS、iPadOS、macOS、Windows、Web 等多个平台，采用了免费使用 + 付费订阅的收费方式。&lt;/p&gt;&lt;span class=&quot;ss-application&quot;&gt;&#160;&lt;/span&gt;&lt;h2&gt;App 速报&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Parallels Desktop（&lt;a href=&quot;https://prf.hn/l/7R0aWV9&quot;&gt;macOS&lt;/a&gt;）：更新至 v20.2，针对 Apple Silicon 架构的 Mac 加入了 64 位 x86 系统模拟，并为 Windows 应用带来 Apple Intelligence 写作工具（Writing Tools）支持。&lt;/li&gt;&lt;li&gt;Start11（&lt;a href=&quot;https://www.stardock.com/products/start11/history&quot;&gt;Windows&lt;/a&gt;）：更新至 v2.5，可以将任务栏停靠在显示器的任何一侧。同时修复了此前拖动任务栏按钮的错误、Win + X 菜单、将鼠标悬停在自定义开始按钮上时任务栏闪烁、对齐等问题。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&gt; 下载少数派 &lt;a href=&quot;https://sspai.com/page/client&quot;&gt;客户端&lt;/a&gt;、关注 &lt;a href=&quot;https://sspai.com/link?target=https%3A%2F%2Fwww.xiaohongshu.com%2Fuser%2Fprofile%2F63f5d65d000000001001d8d4&quot;&gt;少数派小红书&lt;/a&gt;，感受精彩数字生活 &#127811;&lt;/p&gt;&lt;p&gt;&gt; 实用、好用的 &lt;a href=&quot;https://sspai.com/mall&quot;&gt;正版软件&lt;/a&gt;，少数派为你呈现 &#128640;&lt;/p&gt;&lt;/div&gt;</description>
            <author>少数派编辑部</author>
            <pubDate>Mon, 20 Jan 2025 17:55:06 +0800</pubDate>
        </item>
        <item>
            <title>从打工小妹到创业大佬：折腾但精彩的搞钱人生</title>
            <link>https://sspai.com/post/95725</link>
            <description>&lt;article class=&quot;normal-article&quot;&gt; &lt;div id class=&quot;article-body&quot;&gt;&lt;div class=&quot;articleWidth-content&quot;&gt;&lt;div class=&quot;content wangEditor-txt minHeight&quot;&gt;&lt;p&gt;「拼命搞钱」是许多人常常挂在嘴边的玩笑口号，但本期节目的嘉宾馒头却从学生时代就将之视为人生目标。她曾经在工厂拧过螺丝，当过微商，开过淘宝，搞过代购，做过小红书博主，虽然历经各种折腾，但每一步都恰好踩在时代的风口上，也赚到了自己的第一二三四五桶金。&lt;/p&gt;&lt;p&gt;如今的她再度更换赛道，与合作伙伴共同建立了国内规模最大之一的 AI 算力池，她的工作模式也从单打独斗变成了团队协作。本期节目中，我们就来听馒头讲讲她的折腾人生。&lt;/p&gt;&lt;h2&gt;直接收听&lt;/h2&gt;&lt;p class=&quot;ss-audioSource&quot; id=&quot;136&quot; src=&quot;https://v.typlog.com/sspai/8262719831_87638.mp3&quot;&gt;Audio&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://sspai.com/link?target=https%3A%2F%2Fsspai.typlog.io%2Ffeed%2Faudio.xml&quot;&gt;节目 RSS 链接&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://podcasts.apple.com/hk/podcast/%E4%B8%80%E6%B4%BE-podcast/id1483157529&quot;&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://sspai.com/link?target=https%3A%2F%2Fwww.xiaoyuzhoufm.com%2Fpodcast%2F5e280fb1418a84a0461fc567&quot;&gt;小宇宙&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://sspai.com/link?target=https%3A%2F%2Fopen.spotify.com%2Fshow%2F7pJ5EHWj7i5wQwqzY9kHr5&quot;&gt;Spotify&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://sspai.com/link?target=https%3A%2F%2Fpod.link%2F1483157529&quot;&gt;其它平台&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;馒头：爱折腾的创业女孩&lt;/li&gt;&lt;li&gt;张奕源 Nick：少数派编辑部成员&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;欢迎写信至 &lt;a href=&quot;mailto:nick@sspai.com&quot;&gt;nick@sspai.com&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&gt; 关注&#160;&lt;a href=&quot;https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4&quot;&gt;少数派小红书&lt;/a&gt;，感受精彩数字生活 &#127811;&lt;/p&gt;&lt;p&gt;&gt; 实用、好用的 &lt;a href=&quot;https://sspai.com/mall&quot;&gt;正版软件&lt;/a&gt;，少数派为你呈现 &#128640;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;article-copyrights&quot;&gt;&lt;p class=&quot;followUpAdmin&quot;&gt;&lt;span class=&quot;nickname&quot;&gt;本文责编：@&lt;a href=&quot;/u/nicholaszhang&quot;&gt;张奕源 Nick&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&#169; 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。&lt;/div&gt; &lt;div class=&quot;article-author articleWidth-687&quot;&gt;&lt;div class=&quot;el-row&quot;&gt;&lt;div class=&quot;el-col el-col-11 center&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/article&gt;</description>
            <author>少数派编辑部</author>
            <pubDate>Mon, 20 Jan 2025 15:00:00 +0800</pubDate>
        </item>
        <item>
            <title>让新知识成为冒险游戏，用 AI 重构「学习」这件事</title>
            <link>https://sspai.com/post/95426</link>
            <description>&lt;div class=&quot;content wangEditor-txt minHeight&quot;&gt;&lt;p&gt;最近和一位游戏设计专家聊天时，我突然意识到一件很有趣的事。&lt;/p&gt;&lt;p&gt;——我已经好几个月没打游戏了。&lt;/p&gt;&lt;p&gt;不是因为工作太忙，更不是因为突然想通了要戒掉游戏。恰恰相反——我发现了一个比游戏还让人上瘾的东西：用 AI 学点什么。&lt;/p&gt;&lt;p&gt;我大概和他讲了讲我的方法，那位游戏设计专家兴奋地打断了我：「等等，你知道你这种学习方式用上了游戏设计中最核心的几个原理吗？」&lt;/p&gt;&lt;p&gt;他说了一堆专业术语，什么「核心游戏循环」「心流状态」「学习曲线」「成就系统」，说白了就是：&lt;/p&gt;&lt;p&gt;我搭建了&lt;strong&gt;一个关卡体系、一个开放世界、一套游戏地图和成就系统、一条动态难度曲线、一个即时反馈的伙伴系统&lt;/strong&gt;，从而达到了&lt;strong&gt;上瘾的心流体验。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;于是我决定把这个发现聊给更多人听。&lt;/p&gt;&lt;h2&gt;一、你一定见过的冒险游戏&lt;/h2&gt;&lt;p&gt;如果你玩过开放世界的冒险游戏，常见的设计是：你扮演一个勇者，站在一片未知的大陆上。这片大陆被迷雾笼罩，只有你所在的这座山丘周围是清晰可见的。远处若隐若现的城堡指引著你的终极目标，但通往那里的路径却有无数种可能。&lt;/p&gt;&lt;p&gt;这个游戏的妙处在于：首先，你不必按照固定的路线前进。你可能会被远处山顶的宝箱吸引，也可能对眼前的古老遗迹充满好奇，或者干脆沿著小溪一路探索。每个人都能找到自己感兴趣的方向。在最初，你遇到的都是些简单的挑战，比如跳过小溪，推开石头。而在城堡、迷宫、遗迹这种大型关卡，你会碰到 boss 还有传奇的装备。随著你获得新的装备和技能，你解锁了更丰富的游戏体验。&lt;/p&gt;&lt;p&gt;你有一个随从，当你找不到方向时，他不会直接告诉你答案，但总能在你需要时给出恰到好处的指引。&lt;/p&gt;&lt;p&gt;你会有一个地图系统，清晰地知道游戏的进度，随著探索的深入，地图上的迷雾渐渐散去。你不仅能看到更远的地方，还会发现原本看似毫无关联的区域居然暗藏著密道。每当你点亮一座灯塔，解开一个机关，获得一件新装备，都会感受到自己正在一步步接近那座神秘的城堡。&lt;/p&gt;&lt;p&gt;等等，这不就是……塞尔达传说、上古卷轴、辐射 4、艾尔登法环？&lt;/p&gt;&lt;h2&gt;二、我的方法非常简单：&lt;/h2&gt;&lt;h3&gt;1、搭建关卡，案例即关卡（Quests as Cases）&lt;/h3&gt;&lt;p&gt;在接触新领域后，先把教材扔给人工智能帮我总结知识点。我会让 AI 提出三到四个案例，把每个知识点都落到具体的例子里。我会直接学习具体案例，通过案例来反推这些知识点还有知识点之间的联系——它们可能是跨章节的。我不会从基础知识或基础概念开始学习，因为太抽象太零散。&lt;/p&gt;&lt;p&gt;这是把学习游戏化最关键的一步：我把线性的知识有机地聚拢成了几个游戏里的大型关卡，每开一个都有宝藏。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/08/5157f00216df46340696abb41a5c957c.png&quot;&gt;&lt;figcaption&gt;编程的 4 大关卡，就像塞尔达荒野之息的四大神兽&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;任务目标化：&lt;/strong&gt;传统课本把知识切得太碎，而通过 AI 精选的大型案例学习，就像设计了几个核心关卡 —— 每个案例都会串联起多个知识点。比如在学习金融时，一个特斯拉股票定价的案例就会涉及市场预期、风险溢价、行业估值等多个概念。通过啃下这样三四个大案例，整个学科的核心知识点就都串联起来了。这种案例驱动的方式不仅让零散的知识有了联系，更让抽象的概念有了具体的应用场景。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;任务分解与分级：&lt;/strong&gt;有些 boss 打不过时，我们会先去刷野怪。当 AI 给出一个复杂案例时，我会要求它进行任务分解。比如学习「设计模式」时，不直接理解完整的工厂模式，而是让 AI 把它拆解成递进的小任务：从简单工厂到抽象工厂。每个小任务都建立在前一个的基础上，形成清晰的进阶路径。如果某个概念特别难懂，就让 AI 设计更多的中间任务，确保学习过程始终处于适度挑战的状态。&lt;/p&gt;&lt;h3&gt;2、开放世界机制，自由探索（Open World Mechanism）：&lt;/h3&gt;&lt;p&gt;我一定从最简单最好理解的地方开始学，就像一个大地图，我会先去有趣的地方探索。这有点像玩游戏的新手教程，从试玩版开始进入一个领域，我很快就能有一些初始的认识。遇到不懂的，就和 AI 聊天，把新概念和已有的认知连接起来。&lt;/p&gt;&lt;p&gt;从原来跟著书的目录来看，变成了哪里好看就看哪里：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;兴趣优先机制：&lt;/strong&gt;开放世界让你可以随时选择探索的方向。我的学习也是如此 —— 不必从「第一章第一节」开始，而是直接切入最感兴趣的知识点。编程不一定从变量定义开始，可以直接做一个简单的计算器，让兴趣指引学习的方向。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;开放式奖励：&lt;/strong&gt;教材之外和 AI 聊出来的「白痴问题」往往藏著最有趣的知识点。比如「为什么钢琴键从 C 而不是 A 开始编号？这用户体验设计得也太差了。」这些看似无关的「彩蛋」不仅满足好奇心，更帮助建立起对领域的深层理解。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/08/440d8aa7860a02fc606ba56b66c664d6.png&quot;&gt;&lt;figcaption&gt;白痴的问题，非常有趣&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;自我驱动的独特剧情：&lt;/strong&gt;当你根据自己的理解和节奏探索时，就会形成个性化的学习体验。你的提问会引导 AI 展开新的知识分支，让学习变成一场由你主导的探险。这种「我在设计自己的探索」的掌控感，让学习始终充满动力。&lt;/p&gt;&lt;h3&gt;3、进度系统（Exploration Map）：构建认知地图&lt;/h3&gt;&lt;p&gt;AI 总结出来的知识点会作为我的学习地图和进度指示。在探索过程中，我会随时回看这些知识点，&lt;strong&gt;不是去看知识点具体的解释，只是用来确认自己的学习深度和方向。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;知识点的目录只是我反复确认的 todo list：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;可视化的成就系统：&lt;/strong&gt;每掌握一个知识点，就像在探索地图上点亮一座灯塔，每理解一个概念间的联系，就像获得了一枚成就徽章。这些清晰的进度标记不仅让学习变得充满成就感，更像游戏中的成就系统一样，激励我们去解锁更多未知的领域。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;全局视图更新：&lt;/strong&gt;随著探索的深入，认知地图也在不断进化。新掌握的知识就像驱散迷雾，让我们看到更远的地方；发现的知识联系则像开启密道，连通了原本看似独立的区域。这种实时更新的地图系统，让我们既能纵览全局，找准自己的位置，也能看清下一步该往哪里去。&lt;/p&gt;&lt;h3&gt;4、动态难度调节（Dynamic Difficulty）：成瘾性的心流体验&lt;/h3&gt;&lt;p&gt;在学习的过程中，绝对不要让自己卡壳。如果碰到抽象的概念，我一定会让人工智能具体化、案例化、打比喻，有了人工智能，那些半懂不懂的概念我可以迅速连接弄懂，这让我很有探索的惊喜感。&lt;/p&gt;&lt;p&gt;如果还是卡壳，我就马上切换方向，我把这个原则叫做「&lt;strong&gt;好吃的先吃&lt;/strong&gt;」。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;我不要用意志力，只要持续的正反馈&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;实时调整难度：&lt;/strong&gt;游戏最让人上瘾的机制之一是动态难度系统。在和 AI 学习时，它也会根据你的理解程度实时调整内容的复杂度。当发现概念太抽象，AI 会立即切换到更基础的解释方式；当掌握了基础知识，它又会引入更深层的内容。这种实时调整确保了学习始终处在「恰好有挑战」的状态。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;低成本试错：&lt;/strong&gt;在和 AI 对话时，我经常用自己的话复述学到的概念。当理解有偏差时，AI 会及时指出并引导思考。当遇到理解障碍时，AI 会迅速提供替代路径。它不会固守一种解释方式，而是灵活调整策略，从不同角度帮助理解。这种低成本的试错机制正反馈极强，鼓励迭代。&lt;/p&gt;&lt;h3&gt;5、即时反馈伙伴系统（Instant Feedback System）：AI 作为 NPC&lt;/h3&gt;&lt;p&gt;还有一点很关键，当我们在进行聊天时地学习时，我们不仅在用「费曼学习法」，我们也有了一个极度聪明的随从，它可以帮我们：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;实时问题解答：&lt;/strong&gt;有了 AI 作为 NPC，每个疑问都能得到即时回应。这种即时反馈让学习变成了一场流畅的对话，不会因为困惑而卡壳，极大地提升了学习的连续性和效率。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;虚拟团队：&lt;/strong&gt;虽然自学是「单人游戏」，但 AI 能完美扮演不同角色 —— 有时是耐心的导师，有时是纠错的搭档，有时是启发思考的对手。这种虚拟团队的存在让独学不再孤独，每个想法都能得到及时的回应和深化。&lt;/p&gt;&lt;h2&gt;三、重新发现学习的乐趣&lt;/h2&gt;&lt;p&gt;听完他的分析，我才明白为什么这种方式这么让人上瘾，学习就像在玩塞尔达，而且它不是时间的消费，反而获得了生产力。&lt;/p&gt;&lt;p&gt;传统的学习会被大家视为寒窗苦读。固定低效的线性路径忽视了每个人的兴趣和节奏。即使你对后面的内容充满好奇，也得硬著头皮按部就班地先搞懂前置概念。&lt;/p&gt;&lt;p&gt;另外，进度总是模糊不清。除了考试成绩，很难知道自己到底学得怎么样。这种不确定感让学习之路显得格外漫长。而且反馈来得太慢，你可能要等到月考或期末，才知道自己理解得对不对。&lt;/p&gt;&lt;p&gt;最后，互动几乎不存在，当遇到困惑时，往往只能独自苦恼，小红书总是提倡死磕，真实情况是很容易把自己磕死。&lt;/p&gt;&lt;p&gt;是时候找回真正的乐趣了。&lt;/p&gt;&lt;p&gt;我之前写过一篇用人工智能速通考试的帖子，有读者觉得我只是在讲应试。成年人的世界，机会都稍纵即逝，最后脱颖而出的，往往是那些敢于在准备不足的情况下依然主动出击的人。他们在最短的时间内武装自己，然后直接撞上去。&lt;/p&gt;&lt;p&gt;这绝不是在否定多年实践基础知识的价值，也不是在鼓吹「速通主义」。而是在提倡一种更接近游戏开发的「最小可行产品」理念 —— 先快速搭建一个简单但能运行的原型，然后在实践中不断迭代，逐步补充基础知识。&lt;/p&gt;&lt;p&gt;出了学校才发现教育是一种昂贵的服务。大家发现了吗，有一个有趣的现象，在少数派，「在职备考」类的文章很容易上热搜。&lt;/p&gt;&lt;p&gt;我们中年人，很少考虑要不要当行业大咖，发愁的都是还有没有机会入行。&lt;/p&gt;&lt;p&gt;AI 不仅给了我们抓住机会的可能性，更让我们重新找回了学习最初的模样：那不该是痛苦地前行，而是一场充满好奇与惊喜的探索。每掌握一项新技能，都像获得了认知世界的新的眼睛，体验那些本来读不懂的生命里的惊喜。这是学习最动人的馈赠。&lt;/p&gt;&lt;p&gt;当然什么都想学只会害了你，再怎么学习仍然不是创造，而&lt;strong&gt;创造是更高级的快乐。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这篇文章怎么来的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://sspai.com/post/94340&quot;&gt;工作最忙的 78 天，我用 ChatGPT 考了 CFA&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://sspai.com/post/95339&quot;&gt;方法太好，不想公开，使唤 AI 干活的 100 个小妙招&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/08/0960d7f09d4916c97f69dfe48a7aa991.png&quot;&gt;&lt;/figure&gt;&lt;p&gt;我搭了一个&lt;strong&gt;游戏大王&lt;/strong&gt;：&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper image_resized&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/08/ea694d8437873db0462679f47865a765.png&quot;&gt;&lt;figcaption&gt;这就是我那位游戏设计专家朋友：游戏大王&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;想和&lt;strong&gt;游戏大王&lt;/strong&gt;聊天请访问：&lt;br&gt;&lt;a href=&quot;https://chatgpt.com/g/g-677aa66cd5088191b3b0374676a71b58-you-xi-da-wang&quot;&gt;https://chatgpt.com/g/g-677aa66cd5088191b3b0374676a71b58-you-xi-da-wang&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&gt; 关注&#160;&lt;a href=&quot;https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4&quot;&gt;少数派小红书&lt;/a&gt;，感受精彩数字生活 &#127811;&lt;/p&gt;&lt;p&gt;&gt; 实用、好用的 &lt;a href=&quot;https://sspai.com/mall&quot;&gt;正版软件&lt;/a&gt;，少数派为你呈现 &#128640;&lt;/p&gt;&lt;/div&gt;</description>
            <author>工作很忙中年人</author>
            <pubDate>Mon, 20 Jan 2025 11:28:34 +0800</pubDate>
        </item>
        <item>
            <title>App+1 | 我开发了一款旅行记录 app，让照片背后的记忆更鲜活：山河旅记</title>
            <link>https://sspai.com/post/95430</link>
            <description>&lt;div class=&quot;content wangEditor-txt minHeight&quot;&gt;&lt;p&gt;&lt;strong&gt;Matrix 首页推荐&lt;/strong&gt;&#160;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://sspai.com/matrix&quot;&gt;Matrix&lt;/a&gt;&#160;是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&#160;&lt;br&gt;文章代表作者个人观点，少数派仅对标题和排版略作修改。&lt;/p&gt;&lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;旅行的意义是什么？当我又一次翻看手机相册，这个老掉牙的问题浮现于脑海。记录美景，抑或放松身心？都行。这个问题的答案取决你自己。无不例外的是，我们都希望回忆起那段美好旅行时，嘴角能在生活的重压之下浮现出一抹微笑。&lt;/p&gt;&lt;p&gt;可照片依然鲜活，记忆却逐渐模糊，这些零散的照片就像没有标注的故事书，随著时间流逝，渐渐泛黄。&lt;/p&gt;&lt;p&gt;我去过的地方不算多，但每一次旅行都让我收获独特的体验，曾只身一人游历于香港，也曾与爱的人相拥于 4680 米的雪山，不论是遇见有趣的人和事，还是探索没有见过的街和景，旅行的每一个瞬间都另我十分享受。&lt;/p&gt;&lt;p&gt;但现在回看相册里成百上千张的照片，却只能帮我回忆起那些标志性的景点，真正打动人心的细节反而慢慢淡去了：是哪家不起眼的小店让我念念不忘？路边偶遇的街头艺人又是在古镇的哪个角落？&lt;/p&gt;&lt;p&gt;这种感觉很遗憾。照片记录的只是一个瞬间，但旅行的意义远不止于此。每一次旅行，都是由无数个精彩瞬间串联而成的故事，有时甚至是那些看似不够完美的片段，反倒成为了最珍贵的回忆。&lt;/p&gt;&lt;p&gt;我尝试过各种方式来保存这些记忆：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;写旅行博客 ，但经常因为太麻烦而半途而废。&lt;/li&gt;&lt;li&gt;发朋友圈，但朋友圈的内容总是经过精心 P 图和筛选的，不够真实。&lt;/li&gt;&lt;li&gt;专门的旅行应用，要么功能太复杂，要么强制社交，没有单纯记录旅行足迹的应用。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我需要的是一个更简单的工具，就像一本随身携带的旅行笔记本。它应该足够轻便，让记录不再成为负担；它应该足够私密，让我可以毫无顾忌地记录每一个真实的想法；它还应该足够智能，能自动帮我串联起这些零散的记忆。&lt;/p&gt;&lt;p&gt;正是带著这样的念头，我开发了「山河旅记」这款应用。希望它能成为每个旅行者的可靠伙伴，帮助大家保存旅途中的点点滴滴。&lt;/p&gt;&lt;h2&gt;记录旅程的三个要素&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;阅读提示：本文中「旅程」指的是旅行中的最小单元，一次旅行可能会包含多个旅程。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;记录是为了日后能够借此回忆起当下，太简单会丢失很多细节，太复杂则又会带来负担，本末倒置，如何找到这个平衡点，是我在「山河旅记」开发过程中思考最多的问题。&lt;/p&gt;&lt;p&gt;于是我将旅程拆解为三个核心要素：元数据、照片、足迹。&lt;/p&gt;&lt;p&gt;元数据，是旅程的骨架。地点、时间、联系与标签，构成了一个旅程的基本定义。时间与地点描述了一个旅程是在何时发生的，比如：我在 2024 年去了一趟云南。而联系与标签则定义了旅程之间的关系，比如某次旅行中「洱海」的&lt;strong&gt;下一站&lt;/strong&gt;是「丽江古城」，「丽江古城」与另一个 2023 年的旅程「平遥古城」之间可能又存在一个共同标签「&lt;strong&gt;古城打卡&lt;/strong&gt;」。这些基本信息之间的关联让零散的记忆重新连接，帮助我们在未来更容易回忆起整个旅程的脉络。&lt;/p&gt;&lt;p&gt;照片，是旅程的眼睛。它不仅仅是记录美景的工具，更是生活瞬间的见证者。在「山河旅记」中，我们鼓励用户记录下更多真实的场景：排队等候时街边的烟火气，或是雨天被困在客栈时的慵懒时光。这些照片也许不够「精致」，但却最能勾起我们对旅途的真实回忆。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/07/513f07b27be37eb8a5ac8a659302000d.PNG&quot;&gt;&lt;figcaption&gt;「山河旅记」使用「照片墙」和「图谱」多维度展现旅程&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;足迹，是旅程的血肉。它记录了我们在一个地方的完整活动轨迹，回想起一个人旅行的时候，我最喜欢的就是在古城里七拐八拐的探索，在路边随意坐下观察过往的行人……这些轨迹不仅仅是一条条线路，更是一个个故事。足迹是旅程中占比最大的部分，可也是我们忘的最快，最缺少记录的部分。当我垂垂老矣迈不动脚的时候，回看曾经因为逛古城而腿酸脚麻在一个街角瘫坐了半个小时，似乎也是种不错的体验。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/07/7044547455563ee29aace81a25c516f0.PNG&quot;&gt;&lt;figcaption&gt;「山河旅记」中可以保存旅行足迹和细节，支持回放&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;元数据提供了旅程的基本框架，照片记录了视觉瞬间，而足迹则串联起整个旅程的完整故事，正是这三者相辅相成，才能真正帮助我们在未来重温旅行时的点点滴滴。&lt;/p&gt;&lt;h2&gt;无压记录旅程&lt;/h2&gt;&lt;p&gt;基于旅程的三个基本要素，需要思考的是如何使用最少的成本将这些要素记录下来。最佳的方式是&lt;strong&gt;让记录成为旅行的自然延伸，而不是额外的负担&lt;/strong&gt;，所以我首先设计了「足迹旅程」这一概念。&lt;/p&gt;&lt;p&gt;在「山河旅记」，你可以轻松地记录一条完整的旅行足迹，只需要在旅程开始时启动「足迹」功能，结束时关闭即可，系统会自动为你生成一个「足迹旅程」。不论是旅程中拍摄的照片（需要在设置打开「随旅拍」功能哦），还是某次驻足停留，都会保存在足迹线上。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;示意图见本文第二张图。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这是我最推荐的旅程记录方式、轻松且全面。但你我已经历了这么多的人生，那些走过的路不可能重走一遍。&lt;/p&gt;&lt;p&gt;为此，「山河旅记」还提供了另一种记录方式，你可以将手机内的旅行照片导入到应用，应用会自动读取照片信息中的位置与时间信息。&lt;/p&gt;&lt;p&gt;当然，如果一次性导入全部照片，无穷多的位置信息势必会造成旅程管理的混乱，这只会演变为另一个杂乱的「相册」。为了在导入便利性和功能完整性之间取得平衡，「山河旅记」做了适当的限制：同一次导入的照片都会被归类为同一个旅程，你可以从导入的照片中自由选择一个地点用作整个旅程的位置信息。&lt;/p&gt;&lt;h2&gt;为旅程建立联系&lt;/h2&gt;&lt;p&gt;旅程之间往往相互关联，就像我们总是怀揣著期待奔赴下一趟旅程，每一段旅途都可能与过往的经历产生共鸣，或是为未来的行程埋下伏笔。在「山河旅记」，你可以通过「联系」和「标签」功能，为每段旅程建立起独特的关联网络，让零散的旅行记忆串联成一幅完整的人生画卷。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/07/279a30cbc2f9c86f9fb3214a8f6c4e60.PNG&quot;&gt;&lt;figcaption&gt;通过「图谱」查看旅程联系&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;相信有不少派友是知识管理爱好者吧，这个功能很容易让人联想到 Obsidian 的知识图谱。我也热爱做知识管理，所以在开发这款旅程管理工具时，特意将图谱功能融入到旅程管理的一环。&lt;/p&gt;&lt;p&gt;在「图谱」界面，你可以从宏观视角一览所有旅程，看到彼此交织的时空脉络。借助这种网状结构，不仅能轻松发现旅程间的潜在联系，更能脱离时间与空间的束缚，梳理出专属于你的旅行轨迹。这种体验，就像在进行一场别开生面的知识管理探索，让每一段旅程都焕发出新的意义。&lt;/p&gt;&lt;p&gt;最后也提一点个人建议：为了充分发挥图谱的优势，建议将一次完整的旅行细分为多个精细的「旅程」单元，并为它们添加相应的「联系」与「标签」。比如，你可以将一次长途旅行分解为不同的城市站点，并且为其打上有意义的标签。就像做知识管理一样！&lt;/p&gt;&lt;h2&gt;多维度的回顾方式&lt;/h2&gt;&lt;p&gt;「旅行图谱」功能在上文已经介绍过了，但「山河旅记」还提供了更多回顾旅程的视角。&lt;/p&gt;&lt;h3&gt;旅行地图与照片墙&lt;/h3&gt;&lt;p&gt;2024 年下半年，我正忙于装修小家，繁忙之中怀揣著对未来的期待。在设计书房区域时，我特意留出了一面大白墙，准备用来贴上过去和未来的旅行照片。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/07/0b554382a09b8c0149a3eac83154bd7a.jpg&quot;&gt;&lt;figcaption&gt;类似这样&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;这个构想也激发了「山河旅记」的核心功能之一——旅行地图。应用的主界面是一张可自由缩放的世界地图，所有旅程都以缩略图标的形式呈现其上。通过这种地理位置的直观展示，你可以一目了然地看到哪些地方尚未探索，又是哪些角落让你流连忘返。&lt;/p&gt;&lt;p&gt;点击任一缩略图，便会展开旅程的详细内容——一面由照片组成的照片墙。受我曾经钟爱的拍立得相机启发，「山河旅记」在展示照片的时候特意复现了拍立得相片的效果，只需轻点任意照片缩略图，系统就会呈现一张类似风格的相片，为你的旅行记忆增添一份独特韵味。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/10/b08ac18a2ebb727a1e22e140157768b6.png&quot;&gt;&lt;figcaption&gt;旅行地图与照片墙&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;回放足迹旅程&lt;/h3&gt;&lt;p&gt;每一段旅程都值得细细品味。在「山河旅记」，你可以通过回放功能重温整个足迹旅程，看著地图上的轨迹线随时间推移逐步展开，仿佛重返当时的时空。系统会根据你的行进距离，恰到好处地弹出你在某条街边拍摄的照片，或者某个角落的停留时间。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/07/9a8cfcb81a19d520ea90d9b6a5eba5e2.PNG&quot;&gt;&lt;figcaption&gt;丰富的足迹回放功能&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;为了让你能够充分回顾各种旅程细节，「山河旅记」提供了丰富的回放选项：你可以通过进度条自由调节播放进度，选择 0.5 倍速细品精彩瞬间，或是使用 2 倍、4 倍速快览全程。&lt;/p&gt;&lt;p&gt;此外，在观看视角上，「山河旅记」提供了两种模式：「镜头更随」模式会沿著足迹线的绘制脚步，实时展示你曾经的行进轨迹；而「自由视角」则可以让你跳出局部，以全局视角审视整段旅程。&lt;/p&gt;&lt;p&gt;无论是短途漫步还是跨城远行，你都能找到最舒适的回顾方式。&lt;/p&gt;&lt;h3&gt;时间线&lt;/h3&gt;&lt;p&gt;「旅行地图」为我们展现了旅程的空间维度，而时间则是串联起人生故事的隐形纽带。在「山河旅记」，你可以通过时间线视图一览所有旅程，从最初的探索到最新的足迹，构成了一部完整的时光旅记。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/07/3b7ddb6fb67e1b8e2ced2ca0ba8faffc.PNG&quot;&gt;&lt;figcaption&gt;按照时间顺序排布的旅程&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;通过右上角的视图切换按钮，你可以自由选择详细或简略的展示方式，找到最适合当下的浏览体验。&lt;/p&gt;&lt;h3&gt;日历&lt;/h3&gt;&lt;p&gt;时间线展现了旅程的宏观脉络，而日历视角则让旅程与具体日期紧密相连。在「山河旅记」，每个旅程都会在对应的日期上留下一个缩略图标。&lt;/p&gt;&lt;figure class=&quot;image ss-img-wrapper&quot;&gt;&lt;img src=&quot;https://cdnfile.sspai.com/2025/01/07/93f52af8d8a8dd9416c11b78c7ecb1ea.PNG&quot;&gt;&lt;figcaption&gt;从日历视角可以清晰地查看旅程频次&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;这种传统的日历形式既方便查看过往旅程，也便于规划新的行程。无论是短期出行还是长途旅行，都能在日历中一目了然地看到时间分布。&lt;/p&gt;&lt;h2&gt;数据安全&lt;/h2&gt;&lt;p&gt;作为用户，我深知数据隐私的重要性。除了必要的在线工具外，我更倾向于选择无需服务器、无需登录、数据本地存储的应用，如使用 Trilium 做笔记、用 Bitwarden 管理密码。&lt;/p&gt;&lt;p&gt;作为开发者，我秉持这一理念。「山河旅记」采用完全的本地存储方案，你的所有旅程数据都将安全地保存在设备中，无需登录账号，无需联网，随时随地都能使用。&lt;/p&gt;&lt;p&gt;为了确保数据安全，应用还提供了 iCloud 备份和本地导出功能，让你的旅行记忆得到双重保障。&lt;/p&gt;&lt;h2&gt;未来的开发计划&lt;/h2&gt;&lt;p&gt;作为一款偏向小众的旅程管理应用，「山河旅记」目前的功能已经足够丰富了，但除了常规的细节优化和 bug 修复之外，我脑袋里还有非常多的想法想要去实现：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;记录更多的足迹细节&lt;/li&gt;&lt;li&gt;更全面的规划旅程功能&lt;/li&gt;&lt;li&gt;更多的数据导入方式&lt;/li&gt;&lt;li&gt;更多的旅程回顾方式&lt;/li&gt;&lt;li&gt;添加小组件支持&lt;/li&gt;&lt;li&gt;添加 Watch 端支持&lt;/li&gt;&lt;li&gt;快捷指令支持&lt;/li&gt;&lt;li&gt;……&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;希望大家提出宝贵的意见，「山河旅记」接受任何类型的批评与建议。&lt;/p&gt;&lt;h2&gt;结语&lt;/h2&gt;&lt;p&gt;「山河旅记」诞生于一个简单的想法：让旅行记录回归本质，既不打扰当下的体验，又能完整保存每一段珍贵回忆。在开发的过程中，我始终坚持著这个初心，努力打造一个优雅且实用的旅程管理工具。&lt;/p&gt;&lt;p&gt;这是一款专注于个人使用的小众应用。它不追求社交分享，不渲染情绪，而是安静地做好记录这件事。希望它能成为你旅途中的可靠伙伴，让每一段旅程都能被妥善收藏。&lt;/p&gt;&lt;p&gt;欢迎各位在评论区留言，我将抽 10 位读者送上「山河旅记」的永久兑换码。&lt;/p&gt;&lt;p&gt;应用下载链接：「&lt;a href=&quot;https://apps.apple.com/cn/app/%E5%B1%B1%E6%B2%B3%E6%97%85%E8%AE%B0-%E6%97%85%E8%A1%8C%E5%9C%B0%E5%9B%BE-%E8%B6%B3%E8%BF%B9%E5%9B%9E%E6%94%BE-%E6%97%85%E7%A8%8B%E5%9B%BE%E8%B0%B1-%E8%A1%8C%E7%A8%8B%E8%A7%84%E5%88%92/id6739272460&quot;&gt;山河旅记&lt;/a&gt;」&lt;/p&gt;&lt;span class=&quot;ss-application&quot;&gt;&#160;&lt;/span&gt;&lt;p&gt;&gt; 关注&#160;&lt;a href=&quot;https://www.xiaohongshu.com/user/profile/63f5d65d000000001001d8d4&quot;&gt;少数派小红书&lt;/a&gt;，感受精彩数字生活 &#127811;&lt;/p&gt;&lt;p&gt;&gt; 实用、好用的 &lt;a href=&quot;https://sspai.com/mall&quot;&gt;正版软件&lt;/a&gt;，少数派为你呈现 &#128640;&lt;/p&gt;&lt;/div&gt;</description>
            <author>_东东_</author>
            <pubDate>Sun, 19 Jan 2025 14:37:54 +0800</pubDate>
        </item>
        <atom:link href="https://sspai.com/feed" type="application/rss+xml" ref="self"></atom:link>
        <atom:link href="https://sspai.com/feed" type="application/rss+xml" ref="hub"></atom:link>
    </channel>
</rss>