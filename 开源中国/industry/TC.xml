<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - industry - 繁體中文（台灣）</title>
    <link>https://www.oschina.net/news/industry</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/industry" rel="self" type="application/rss+xml"/>
    <description>已對該 RSS 進行格式化操作：中英字符之間插入空格、使用直角引號、標點符號修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-tw</language>
    <lastBuildDate>Thu, 29 May 2025 16:41:43 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>​Netflix 聯合創始人 Reed Hastings 加入 Anthropic 董事會</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;人工智能公司 Anthropic 最近宣佈，Netflix 的聯合創始人、董事長以及前首席執行官 Reed Hastings 正式加入其董事會。Hastings 在 2023 年卸任了 Netflix 的共同首席執行官職務；此外，他還曾在 Facebook、微軟和彭博社等公司的董事會任職。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="372" src="https://oscimg.oschina.net/oscnet/up-112f5965a8035159bc73d8c94ddeb448fa3.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在公告中，Anthropic 表示，Hastings 不僅在 Netflix 的發展上表現卓越，同時他在教育改革和發展中國家的數字基礎設施方面也投入了大量精力。這使得他對如何確保技術能夠服務於更廣泛的社會目標有着切實的理解。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Hastings 在一份聲明中提到：Anthropic 對人工智能能為人類帶來的益處持樂觀態度，但也非常清楚經濟、社會及安全方面的挑戰。我加入 Anthropic 董事會是因為我相信他們在人工智能發展上的方法，並希望幫助人類進步。」&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Anthropic 的董事會還包括首席執行官 Dario Amodei、總裁 Daniela Amodei、Yasmin Razavi 和 Jay Kreps 等成員。最近，Anthropic 還發布了其&lt;span&gt;最新&lt;/span&gt;的 Claude4 人工智能模型。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352601</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352601</guid>
      <pubDate>Sat, 10 May 2025 09:55:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>HTAP 已死</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;本文翻譯自：&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mooncake.dev%2Fblog%2Fhtap-is-dead" target="_blank"&gt;《HTAP is Dead》&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;這篇博客受到 Jordan Tigani 文章&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmotherduck.com%2Fblog%2Fbig-data-is-dead%2F" target="_blank"&gt;《Big Data is Dead》&lt;/a&gt;&lt;/em&gt;的啓發。&lt;/p&gt; 
&lt;h2&gt;舊時代的歲月（70 年代）&lt;/h2&gt; 
&lt;p&gt;上世紀 70 年代，一個關係型數據庫可以完成所有任務。白天處理事務（OLTP），晚上生成報表（OLAP）。像 Oracle V2 和 IBM DB2 這樣的數據庫在同一系統上運行 OLTP 和 OLAP，主要是因為數據集仍然可以裝在幾個磁盤上，而計算資源昂貴。&lt;/p&gt; 
&lt;p&gt;沒有人稱之為混合事務/分析處理（HTAP）；它只是&lt;strong&gt;數據庫&lt;/strong&gt;而已。&lt;/p&gt; 
&lt;h2&gt;重大分歧（80 年代）&lt;/h2&gt; 
&lt;p&gt;隨着企業擁有更多數據，並提出更復雜的問題，數據庫開始顯示出它的侷限性。&lt;/p&gt; 
&lt;p&gt;事務型和分析型工作負載是朝着相反的方向發展的。OLTP 需要微秒級的插入和單行查找，而 OLAP 則需要全表掃描和大規模的聚合。這導致了持續的爭用；分析型工作負載消耗 I/O 和緩存，這些資源對於低延遲的事務型工作負載來説是必需的，反之亦然。&lt;/p&gt; 
&lt;p&gt;解決方案是什麼？隔離這些工作負載。到 20 世紀 80 年代初，這種「巨大分歧」已經開始出現。&lt;/p&gt; 
&lt;h2&gt;存儲的分離（90 年代）&lt;/h2&gt; 
&lt;p&gt;推動這種分歧的一個關鍵技術因素是存儲架構。OLTP 系統針對基於行的存儲進行了優化（快速寫入 + 點查詢）。而 OLAP 系統則選擇基於列的存儲，以實現高效的掃描和聚合。&lt;/p&gt; 
&lt;p&gt;到 2000 年代中期，這種分離已經成為行業標準。數據庫先驅邁克爾·斯托納布勒（Michael Stonebraker）在他的論文《One Size Fits All：An Idea Whose Time Has Come and Gone》中標誌着這一轉變，該論文發表在 ACM Digital Library 上（https://dl.acm.org/doi/abs/10.1145/3226595.3226636）。數據庫開始分裂成專門的引擎。&lt;/p&gt; 
&lt;h2&gt;OLTP 和 OLAP 都放棄了 SQL（2000–2010 年代）&lt;/h2&gt; 
&lt;p&gt;橫向擴展推動了 OLTP 和 OLAP 之間的距離進一步拉大。&lt;/p&gt; 
&lt;p&gt;早期的分佈式 OLTP 數據庫（如 MongoDB 這類 NoSQL 引擎）完全摒棄了 SQL 和分析能力。在分析領域，我們看到了 MapReduce 和數據湖架構（Hadoop/HDFS）的採用：以犧牲傳統關係型數據庫的嚴格一致性為代價，換取巨大的吞吐量。&lt;/p&gt; 
&lt;h2&gt;意想不到的和解（2010 年代）&lt;/h2&gt; 
&lt;p&gt;在 2010 年代，兩種不同的數據庫運動逐漸興起：&lt;/p&gt; 
&lt;p&gt;1. &lt;strong&gt;NewSQL&lt;/strong&gt;（Spanner、CockroachDB、Vitess）。OLTP 應該保持基於 SQL。&lt;br&gt; 2. &lt;strong&gt;雲數據倉庫&lt;/strong&gt;（Redshift、Snowflake）。OLAP 應該運行在具有更強一致性保證的 SQL 系統上。&lt;/p&gt; 
&lt;p&gt;從表面看，這些系統服務於完全不同的工作負載。但在底層，它們有很多共同點：分佈式、MPP 風格的執行，以及 SQL。孤立來看，OLTP 和 OLAP 系統已經收斂於許多相同的架構原則。唯一一個大的不同點是：存儲引擎。&lt;/p&gt; 
&lt;p&gt;我們問自己：如果可以將行存儲引擎和列存儲引擎結合到一個數據庫中，會怎樣？&lt;/p&gt; 
&lt;h2&gt;沒錯，就是 HTAP (2014)&lt;/h2&gt; 
&lt;p&gt;2014 年，Gartner &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gartner.com%2Fen%2Fdocuments%2F2657815%23%3A%7E%3Atext%3DSummary%2Cmemory%2520computing%2520technologies%2520as%2520enablers" target="_blank"&gt;引入&lt;/a&gt; 術語 HTAP（混合事務和分析處理）：下一代數據庫架構。&lt;/p&gt; 
&lt;p&gt;目標是縮小操作系統和分析系統之間的差距。這對於新興的工作負載，如定價、欺詐檢測和個人化，都是必要的。即使在企業層面，決策者也希望獲得實時數據。早期的 HTAP 系統展示了這是可以實現的。不過，大部分情況是如此。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdl.acm.org%2Fdoi%2F10.1145%2F3514221.3526055" target="_blank"&gt;SingleStoreDB&lt;/a&gt; 結合了內存中的行存儲、基於磁盤的列存儲以及向量化執行引擎——在一個系統中支持快速掃描、查找、過濾、聚合和更新。隨着時間的推移，我們發現，在現代硬件的支持下，僅列存儲就可以處理大量 OLTP 風格的查詢，包括點查找和低延遲的訪問模式。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.pingcap.com%2Ftidb%2Fstable%2Ftidb-architecture" target="_blank"&gt;TiDB&lt;/a&gt; 採取了不同的路線，將其 TiKV 行存儲與基於 ClickHouse 的獨立列式引擎相結合——保持數據的兩個副本以服務兩種工作負載。&lt;/p&gt; 
&lt;p&gt;所以，這樣應該就是全部了，對吧？70 年代的數據烏託邦，唉，終究還是落空了。&lt;/p&gt; 
&lt;h2&gt;雲數據倉庫是 2020 年代的唯一贏家&lt;/h2&gt; 
&lt;p&gt;雲數據倉庫顯然勝出。NewSQL 運動停滯了……HTAP 呢？它從未獲得應有的關注。儘管有真正的技術進步，但它仍然處於預產品市場契合狀態。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. 替換一個人的 OLTP 系統真的非常困難。&lt;/strong&gt; 請相信&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdb-engines.com%2Fen%2Franking" target="_blank"&gt;DBEngines&lt;/a&gt;的説法：Oracle 和 SQL Server 仍然分別排在第 1 和第 3 位。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. 大多數工作負載並不需要分佈式 OLTP。&lt;/strong&gt; 硬件變得更快且更便宜了。單台性能強大的機器就可以處理大多數事務型工作負載。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D4jDQi9P9UIw" target="_blank"&gt;Cursor&lt;/a&gt;和&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.pixelstech.net%2Farticle%2F1747708863-openai%253a-scaling-postgresql-to-the-next-level" target="_blank"&gt;OpenAI&lt;/a&gt;都是由單台 Postgres 實例驅動的。你完全沒問題。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3. 雲原生架構更傾向於共享磁盤，而不是共享無磁盤。&lt;/strong&gt; 雖然 NewSQL 系統需要快速的本地存儲（甚至需要內存持久性），但云平台則更傾向於對象存儲和彈性計算。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4. OLTP 和 OLAP 由不同的團隊負責。&lt;/strong&gt; OLTP 由產品工程團隊負責；OLAP 屬於數據團隊。激勵機制很少一致。沒有人因為「整合堆棧」而被晉升。&lt;/p&gt; 
&lt;h2&gt;你的數據棧構成了 HTAP 數據庫（今天）&lt;/h2&gt; 
&lt;p&gt;雲技術也開始推動從緊密耦合的數據倉庫向基於對象存儲的模塊化數據湖轉變。&lt;/p&gt; 
&lt;p&gt;在試圖擺脫傳統數據倉庫/數據庫的模式時，數據團隊開始自行構建定製系統。這些系統由「最佳組件」構成：&lt;/p&gt; 
&lt;p&gt;1. OLTP 系統和流處理器作為 WAL&lt;br&gt; 2. 開放表格格式如 Iceberg 作為存儲引擎&lt;br&gt; 3. 查詢引擎如 Spark 和 Trino 用於執行&lt;br&gt; 4. 實時系統如 ClickHouse 或 Elastic 作為索引&lt;/p&gt; 
&lt;p&gt;即使在今天解耦的數據棧中，需求依然不變：在最新的交易數據上實現快速的 OLAP 查詢。這現在通過一系列流式管道、雲數據湖和實時查詢層的網絡實現。&lt;/p&gt; 
&lt;p&gt;它仍然是 HTAP；但通過數據庫的組合而非整合來實現。這歸結為諸如：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. 如何將 WAL 應用到我的存儲引擎上？&lt;/strong&gt; AKA: 如何高效地從 OLTP 系統將數據同步到數據湖？&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. 我能否在我的數據湖上構建一個低成本的索引，並保持同步？&lt;/strong&gt; AKA: 如何將實時數據攝入到湖中？或者如何使用 Postgres 或 Elastic 功能查詢湖中的數據？&lt;/p&gt; 
&lt;p&gt;我們當前的 HTAP 挑戰歸根結底是讓湖倉成為實時準備的系統。&lt;/p&gt; 
&lt;p&gt;在花費了我最好的 10 年時間，先是創立，然後是拯救之後，HTAP 作為一種數據庫已經死了。&lt;/p&gt; 
&lt;p&gt;但讓精神繼續存在。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352600/htap-is-dead</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352600/htap-is-dead</guid>
      <pubDate>Sat, 10 May 2025 09:48:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Greenmask —— 轉儲匿名化和合成數據生成工具</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                            &lt;p&gt;&lt;strong style="color:#1f2328"&gt;Greenmask&amp;nbsp;&lt;/strong&gt;是一款功能強大的開源實用程序，專為邏輯數據庫備份轉儲、匿名化、合成數據生成和恢復而設計。&lt;/p&gt;

&lt;p&gt;它已移植 PostgreSQL 庫，因此非常可靠。它是無狀態的，不需要對數據庫架構進行任何更改。它設計為高度可定製，並與現有的 PostgreSQL 實用程序向後兼容，快速可靠。&lt;/p&gt;

&lt;p&gt;&lt;span style="background-color:#fbfbfb; color:#1d1d35"&gt;Greenmask 提供了一套安全的工具來轉換你的數據庫同時保持完整性，創建一個鏡像生產數據的暫存環境並確保高效的測試而不損害信息。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img height="248" src="https://static.oschina.net/uploads/space/2025/0407/151056_sbRf_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style="background-color:#fbfbfb; color:#1d1d35"&gt;特點：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong style="color:#1f2328"&gt;&lt;a href="https://docs.greenmask.io/latest/database_subset/"&gt;Database subset&lt;/a&gt;&lt;/strong&gt;—市場上最先進的子集系統之一。它支持&lt;strong&gt;虛擬引用、可空列、多態引用，甚至可以使用&lt;/strong&gt;&lt;strong&gt;循環引用&lt;/strong&gt;對最複雜的架構進行子集化。&lt;/li&gt;
&lt;li&gt;&lt;strong style="color:#1f2328"&gt;&lt;a href="https://docs.greenmask.io/latest/built_in_transformers/transformation_engines/#hash-engine"&gt;Deterministic transformers&lt;/a&gt;&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#1f2328"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;— 使用哈希函數確保相同輸入的輸出一致。大多數轉換器都支持&lt;code&gt;random&lt;/code&gt;和&amp;nbsp;&lt;code&gt;hash&lt;/code&gt;引擎，為各種用例提供靈活性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.greenmask.io/latest/built_in_transformers/dynamic_parameters/"&gt;動態參數&lt;/a&gt;&lt;/strong&gt;— 大多數轉換器都支持動態參數，允許它們根據表列值進行調整。此功能有助於管理列之間的依賴關係並有效滿足約束。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.greenmask.io/latest/built_in_transformers/transformation_condition/"&gt;轉換條件&lt;/a&gt;&lt;/strong&gt;—僅在滿足指定條件時應用轉換，這對於定位特定行很有用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.greenmask.io/latest/commands/validate/"&gt;轉換驗證和輕鬆維護&lt;/a&gt;&lt;/strong&gt;— Greenmask 在配置期間提供驗證警告、數據轉換差異和架構差異，從而實現對轉換的有效監控和維護。架構差異功能有助於防止架構更改時的數據泄漏。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.greenmask.io/latest/built_in_transformers/transformation_inheritance/"&gt;轉換繼承&lt;/a&gt;&lt;/strong&gt;&amp;nbsp;— 分區表和帶外鍵的表的轉換繼承。定義一次，應用於全部。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;無狀態&lt;/strong&gt;—Greenmask 作為邏輯轉儲運行，不會影響您現有的數據庫模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨平台&lt;/strong&gt;—由於其基於 Go 的架構消除了平台依賴性，因此可以在任何平台上輕鬆構建和執行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;數據庫類型安全&lt;/strong&gt;—通過驗證數據並使用數據庫驅動程序進行編碼和解碼操作來確保數據完整性，從而保留準確的數據格式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;向後兼容&lt;/strong&gt;— 完全支持與標準 PostgreSQL 實用程序相同的功能和協議。Greenmask 創建的轉儲可以使用該&lt;code&gt;pg_restore&lt;/code&gt;實用程序無縫恢復。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可擴展&lt;/strong&gt;—用戶可以靈活地使用&amp;nbsp;任何編程語言&lt;a href="https://docs.greenmask.io/latest/built_in_transformers/standard_transformers/cmd/"&gt;實現基於領域的轉換或使用&lt;/a&gt;&lt;a href="https://docs.greenmask.io/latest/built_in_transformers/advanced_transformers/"&gt;預定義的模板&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;並行執行&lt;/strong&gt;—支持並行轉儲和恢復，以顯著加快結果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多種存儲&lt;/strong&gt;—支持本地和遠程存儲，包括目錄和 S3 兼容解決方案。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.greenmask.io/latest/commands/dump/?h=pgzip#pgzip-compression"&gt;Pgzip 支持更快的壓縮&lt;/a&gt;&lt;/strong&gt;— 通過設置&lt;code&gt;--pgzip&lt;/code&gt;並行壓縮來加速轉儲和恢復過程。&lt;/li&gt;
&lt;/ul&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/greenmask</link>
      <guid isPermaLink="false">https://www.oschina.net/p/greenmask</guid>
      <pubDate>Sat, 10 May 2025 09:24:00 GMT</pubDate>
    </item>
    <item>
      <title>65.4% 受訪者期待建立全方位的 AI 法規體系</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;中國青年報社社會調查中心聯合問卷網，對 1340 名受訪者進行的一項調查顯示，近八成受訪者最近使用過人工智能工具。內容生成、教育輔助、效率工具是人們現階段使用 AI 工具的主要用途。未來，讓人工智能更好地服務於人，65.4% 的受訪者希望建立覆蓋倫理、算法等各方面的 AI 法規體系。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="338" src="https://oscimg.oschina.net/oscnet/up-2e1e4f7be33cd7ddeca06d21646cf2dd23a.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;調查顯示，78.3% 的受訪者使用過人工智能工具，其中，近三成（27.7%）頻繁使用。交叉分析顯示，受訪在校大學生（90.2%）使用比最高，其次是黨政機關/事業單位工作人員（83.8%），國有企業工作人員（82.0%）排在第三位。不同年齡段的受訪者中，年齡越大使用人工智能的比例越低，00 後比例最高，為 85.1%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在各種不同的 AI 工具中，豆包是人們使用最普遍的工具，超六成受訪者（61.0%）表示都在使用，其次是文心一言（48.6%），DeepSeek（44.1%）排在第三位。其他主要還有：騰訊元寶（17.9%）、訊飛星火（17.4%）、Kimi（16.5%）、ChatGPT（11.3%）、千問（10.7%）。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;人們現在使用 AI 工具主要是做什麼？調查顯示，內容生成（文案撰寫/圖像視頻生成）（62.8%）是第一用途，其次是教育輔助（知識問答/學習路徑規劃）（56.2%），排在第三位的用途是作為效率工具（文檔處理/數據分析/信息檢索）（52.4%），其他還有：健康管理（飲食建議/醫療諮詢）（44.7%）、情感交互（心理疏導/虛擬陪伴）（28.1%）、商業決策（市場分析/投資建議）（10.4%）。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;重慶大學法學院教授齊愛民提醒，雖然 AI 給我們的工作和生活帶來了很多便利，但也需要注意，AI 系統通常依賴於使用大量用戶的數據進行訓練和優化，如果使用不當或缺乏監管，可能導致個人隱私的泄露和個人信息的濫用，甚至威脅公共安全。國家有關方面和社會的方方面面都應加強公眾對 AI 技術的深入瞭解，廣泛普及網絡安全知識和法律常識，提高整體安全防範意識。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;未來，讓人工智能更好地服務於人，65.4% 的受訪者期待建立覆蓋倫理、算法等各方面的 AI 法規體系；65.3% 的受訪者指出應儘快出台 AI 安全技術強制標準；59.6% 的受訪者呼籲重視人工智能教育培訓，提升數字素養；35.5% 的受訪者建議健全 AI 服務行業監督管理制度與標準。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;齊愛民指出，應在法律制度層面構建人工智能系統化的保障體系。首先，制定《人工智能基本法》，堅持以人為本，從整體上確定人工智能的基本規則，為各細分領域人工智能單行法的制定提供法律依據和立法基礎。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;其次，針對人工智能的數據治理、算法歧視、算法黑箱等特殊法律問題，在《人工智能基本法》的基礎上制定單行立法，針對性地解決人工智能數據治理問題與算法難題。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;「在人工智能法律制度的建設過程中，應貫徹分類分級的規範思維，同時堅持技術中立性原則，保持適度的規則彈性以適應技術迭代節奏，保障制度的科學性、穩定性與靈活性。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;受訪者中，00 後佔 9.5%，90 後佔 48.4%，80 後佔 34.4%，70 後佔 6.1%，60 後佔 1.4%，其他佔 0.2%。中學生佔 0.4%，在校大學生佔 6.1%，黨政機關/事業單位工作人員佔 9.7%，國有企業工作人員佔 20.3%，私營/外資企業工作人員佔 47.2%，個體戶佔 7.7%，靈活就業/自由職業者佔 7.5%，無業/失業人員佔 0.6%，已退休佔 0.1%，其他佔 0.4%。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352568</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352568</guid>
      <pubDate>Sat, 10 May 2025 08:32:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Zadig v3.4.0 核能級發佈：AI 提效 × 軍工級防護 × 協作革命</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;&lt;img alt="" height="383" src="https://oscimg.oschina.net/oscnet/up-c7ea0a614026dc5c524ec1a92c7e359ec52.png" width="900" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;親愛的開發者們，假期歸來，效率拉滿！&lt;/p&gt; 
&lt;p&gt;Zadig v3.4.0 攜&lt;strong&gt; AI 黑科技 + 企業級防護 + 絲滑協作&lt;/strong&gt; 強勢登場，免費版也能打，升級只需 5 分鐘👇，四大超能升級，助你輕鬆應對節後工作高峯！&lt;/p&gt; 
&lt;span id="OSC_h2_1"&gt;&lt;/span&gt; 
&lt;h2&gt;🤖 AI 提效，Zadig Pilot 登場！&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;對話式解決工作流卡頓問題&lt;/li&gt; 
 &lt;li&gt;智能診斷效能瓶頸並生成優化方案&lt;/li&gt; 
 &lt;li&gt;產品文檔秒級語義檢索&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" height="1061" src="https://oscimg.oschina.net/oscnet/up-ddfaa4d79911c7a473c808799e8c7f9fe83.gif" width="2142" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;⚡ 效能四連暴擊，甩鍋時代終結！&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔥 資源消耗直降 50%！工作流自身運行效率翻倍&lt;/li&gt; 
 &lt;li&gt;⏮️ 生產事故 5 秒回滾：支持一鍵回滾備註溯源&lt;/li&gt; 
 &lt;li&gt;🔔 Teams 跨國告警：跨國團隊零時差協同&lt;/li&gt; 
 &lt;li&gt;✅ 測試報告直通羣聊：質量問題全員可見&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" height="1500" src="https://oscimg.oschina.net/oscnet/up-9ecd24ae14768629517bb89f2c4f48eefea.png" width="2928" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img alt="" height="1358" src="https://oscimg.oschina.net/oscnet/up-96df3282e967fbeae27bd7bd03cdbe680c2.png" width="2028" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;h2&gt;&lt;img alt="" height="1516" src="https://oscimg.oschina.net/oscnet/up-a41e653968fb28614bd8fc4e616758a87d8.png" width="2956" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;h2&gt;&lt;img alt="" height="1500" src="https://oscimg.oschina.net/oscnet/up-96c53c116b921d5cf0a4d6b780791ad7b86.png" width="1418" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;span id="OSC_h2_2"&gt;&lt;/span&gt; 
&lt;h2&gt;🛡️ 系統安全&amp;amp;性能雙重升級&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;鏡像漏洞掃描強化版（更新 CVE 庫）&lt;/li&gt; 
 &lt;li&gt;智能攔截 0day 攻擊（高危接口動態防護）&lt;/li&gt; 
 &lt;li&gt;工作流測試列表加載速度提升 300%&lt;/li&gt; 
 &lt;li&gt;高可用架構（HubServer 多副本部署）&lt;/li&gt; 
 &lt;li&gt;操作日誌查詢響應時間縮短 80%&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" height="751" src="https://oscimg.oschina.net/oscnet/up-c3a995eb5c21f831a2cbfd431a663abec64.png" width="757" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img alt="" height="2323" src="https://oscimg.oschina.net/oscnet/up-ad118a1d48a76645de295c98b1acf02ad00.png" width="2685" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;span id="OSC_h2_3"&gt;&lt;/span&gt; 
&lt;h2&gt;🔗 OpenAPI &amp;amp; 集成：打通企業工具鏈&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;CI/CD 融合數據庫變更：OpenAPI 觸發工作流自動執行 SQL 腳本&lt;/li&gt; 
 &lt;li&gt;操作日誌審計 API：一鍵導出全量操作記錄，合規審計無憂&lt;/li&gt; 
 &lt;li&gt;身份管理擴容：新增飛書/企業微信 SSO，千人團隊一鍵登入&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" height="659" src="https://oscimg.oschina.net/oscnet/up-b98005a2e203e53ce90542195de6d3b2e98.png" width="1280" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-0cd12582e7c6c10bf017e0382bb3e7ff8a2.png" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;h2&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-f575cfc6da482d467e4784536fedbfc5fce.png" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;h2&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-cd2814f1f463a64dfd8e619c4861d8c6644.png" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;span id="OSC_h2_4"&gt;&lt;/span&gt; 
&lt;h2&gt;🎁 免費版超進化！小團隊也能開航母&lt;/h2&gt; 
&lt;p&gt;為普惠開發者，免費版現已開放多項企業級能力：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;✅ 工作流通知含測試結果&lt;/li&gt; 
 &lt;li&gt;✅ Helm 服務部署狀態檢查&lt;/li&gt; 
 &lt;li&gt;✅ 全量安全加固 &amp;amp; 性能優化&lt;/li&gt; 
 &lt;li&gt;✅ 軍工級資源優化（效能翻倍，成本減半）&lt;/li&gt; 
 &lt;li&gt;✅ HubServer 多副本高可用&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;💡 小團隊也能穩如大廠！&lt;/p&gt; 
&lt;p&gt;讓 Zadig 承包你的節後效率焦慮，現在升級👇&lt;/p&gt; 
&lt;p&gt;探索更多 Zadig v3.4 革新特性，敬請查閲：&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2FZadig%2520v3.4%2Frelease-notes%2Fv3.4.0%2F" target="_blank"&gt;Zadig v3.4 Release Notes&lt;/a&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/koderover/blog/18332270</link>
      <guid isPermaLink="false">https://my.oschina.net/koderover/blog/18332270</guid>
      <pubDate>Sat, 10 May 2025 08:03:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>我國科學家發明混合並行新算法，讓 AI 訓練速度翻倍</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近日，西北農林科技大學信息工程學院智能計算與農業信息系統團隊劉斌教授攜其課題組在國際計算機體系結構領域權威期刊《&lt;em&gt;IEEE Transactions on Computers&lt;/em&gt;》（TC，CCF A 類期刊）上發表研究論文。&lt;/p&gt; 
&lt;p&gt;該論文由西北農林科技大學攜手美國紐約州立大學和雲南大學聯合發表。西北農林科技大學信息工程學院教授劉斌擔任第一作者，紀澤宇老師與雲南大學副教授何臻力共同擔任通訊作者，紐約州立大學教授李克勤（歐洲科學院院士，並行與分佈式計算領域公認的頂尖學者，國家特聘教授）作為重要合作者，使本次研究成果更具國際影響力。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;論文針對當前大規模深度卷積神經網絡（DCNN）大模型訓練中負載不均衡和高通信開銷的難題，提出了一種創新的混合並行訓練方法——GroPipe&lt;/strong&gt;。該方法首次將流水線模型並行與數據並行相融合，構建「組內流水線+組間數據並行」的分層訓練架構，並通過自動模型劃分算法（AMPA）實現計算負載的動態均衡調度，大幅提升 GPU 資源利用率。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-cc26042b68f375fc4655056cadeda8f3857.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;GroPipe 方法整體框架圖。西北農林科技大學供圖&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;為了進一步降低數據並行同步通信代價，GroPipe 在反向傳播階段引入「基於分組的延遲異步通信」策略，延遲梯度同步操作，有效減輕全局通信帶寬壓力，顯著提升訓練吞吐量。&lt;/p&gt; 
&lt;p&gt;實驗證明，在 ImageNet 數據集上，GroPipe 方法相較於主流方案（如 DP、Torchgpipe、DAPPLE 和 DeepSpeed）表現出卓越優勢：ResNet 系列平均加速比達 42.2%，VGG 系列達 79.2%；在 BERT-base 模型訓練中，性能提升最高可達 51%。該成果展示了 GroPipe 在圖像與文本領域的廣泛適用性。&lt;/p&gt; 
&lt;p&gt;這一成果的發表標誌着西北農林科技大學在計算機體系結構領域的 A 類國際頂級學術期刊——《&lt;em&gt;IEEE Transactions on Computers&lt;/em&gt;》（創刊於 1952 年）上實現了歷史性突破。&lt;/p&gt; 
&lt;p&gt;相關論文信息：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoi.org%2F10.1109%2FTC.2025.3566869" target="_blank"&gt;https://doi.org/10.1109/TC.2025.3566869&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;轉載自：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.sciencenet.cn%2Fhtmlnews%2F2025%2F5%2F544895.shtm" target="_blank"&gt;https://news.sciencenet.cn/htmlnews/2025/5/544895.shtm&lt;/a&gt;&lt;br&gt; 作者：李媛，來源：中國科學報&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352559</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352559</guid>
      <pubDate>Sat, 10 May 2025 08:01:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>快手可靈 2.1 上線，價格降 65%</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;AI 視頻生成工具可靈 2.1 現已正式上線。這次更新不僅在性能上實現了顯著提升，還大幅降低了價格。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="479" src="https://oscimg.oschina.net/oscnet/up-5e7135eb09f9596c74164e4a9a21a533fa6.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;可靈 2.1 在之前的 2.0 版本基礎上進行了深入優化，推出了三個明確的模型質量體系：標準版、高品質版和大師版。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;標準版提供 720P 的畫質，適合一般視頻需求，一條視頻僅需 20 靈感值；高品質版提供 1080P 的畫質，性能卓越，一條視頻需 35 靈感值；而大師版則是 1080P 的高端選擇，適合影視級效果，價格為 100 靈感值。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;更新後的可靈 2.1 在效果上已經能夠與之前的 2.0 大師版相媲美，價格卻降低了 65%。雖然可靈 2.1 目前只支持圖生視頻，但其生成的效果已經能夠滿足大多數用戶的需求。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;通過對比測試，不同版本之間的性能差異顯著。可靈 2.1 的高品質版在生成速度上也相較於老版本有了明顯的提升，用戶的等待時間大幅縮短。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352553</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352553</guid>
      <pubDate>Sat, 10 May 2025 07:43:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>雲從科技多模態大模型「CongRong-v2.0​​​​​​​」登頂 OpenCompass 全球多模態榜單</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近日，雲從科技自主研發的「從容大模型」（CongRong-v2.0）在國際評測平台 OpenCompass 最新全球多模態榜單中，以 80.7 分的綜合成績登頂榜首。&lt;/p&gt; 
&lt;p&gt;&lt;img height="777" src="https://static.oschina.net/uploads/space/2025/0529/153339_ceUy_2720166.png" width="772" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1079" src="https://static.oschina.net/uploads/space/2025/0529/153443_hhxG_2720166.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frank.opencompass.org.cn%2Fleaderboard-multimodal%2F%3Fm%3DREALTIME" target="_blank"&gt;https://rank.opencompass.org.cn/leaderboard-multimodal/?m=REALTIME&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;據介紹，面對涵蓋視覺感知、認知理解與跨領域應用的 8 大核心數據集，CongRong-v2.0 模型在醫學健康、數理邏輯、藝術設計等十餘個專業領域表現突出。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1222" src="https://static.oschina.net/uploads/space/2025/0529/153632_A0RS_2720166.png" width="1269" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;來源：&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F1qANK87j5VYqKSAvU2cjBw" target="_blank"&gt;https://mp.weixin.qq.com/s/1qANK87j5VYqKSAvU2cjBw&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352549</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352549</guid>
      <pubDate>Sat, 10 May 2025 07:35:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>圖片授權公司 Getty Images 斥資數百萬美元指控 Stability AI 侵權</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Getty Images 指控 Stability AI 在未經授權的情況下，使用其 1200 萬張版權圖片訓練文生圖模型 Stable Diffusion，並生成帶有 Getty 水印的合成圖像，構成版權侵權、商標侵權及不正當競爭。&lt;/p&gt; 
&lt;p&gt;Stability AI 則主張其行為符合「合理使用」原則，認為 AI 生成內容具有變革性，不直接複製原作品。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnbeta.com.tw%2Farticles%2Ftech%2F1502862.htm" target="_blank"&gt;相關報道稱&lt;/a&gt;，Getty 已投入數百萬美元在英美兩國提起訴訟，CEO 克雷格·彼得斯坦承訴訟成本「高得令人卻步」，但強調「證據非常有力」。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-00f36d49e30a8d04ce50ff97b625dbe7b55.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;彼得斯坦承這場鬥爭並不輕鬆：「我認為我方證據非常有力。但需要説明：我們不得不在英美兩國分別起訴，而且坦白説，我們並不清楚其訓練行為的具體發生地。有些環節需要耗費資金進行盡職調查，對方會抵抗，我們必須反擊，雙方反覆拉鋸。」&lt;/p&gt; 
&lt;p&gt;他補充道：「從全球範圍的整體事實來看，優勢絕對在我們這邊。但這些事實如何在不同地域和法律框架下呈現，仍有待觀察。」&lt;/p&gt; 
&lt;p&gt;案件將於 2025 年 6 月 9 日舉行首次責任認定庭審。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352548</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352548</guid>
      <pubDate>Sat, 10 May 2025 07:30:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>NASA 內部使用的開源軟件存在安全漏洞</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;網絡安全初創公司 ThreatLeap 創始人、安全研究員 Leon Juranić&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.helpnetsecurity.com%2F2025%2F05%2F27%2Fnasa-open-source-software-vulnerabilities%2F" target="_blank"&gt;指出&lt;/a&gt;，美國宇航局（NASA）內部開發使用的開源軟件存在漏洞，可能被攻擊者利用入侵其系統。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0529/143431_zaKA_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;經分析確認，以下工具均因使用存在安全隱患的函數而存在緩衝區溢出漏洞：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;飛機工程分析工具 OpenVSP（開放式飛行器草圖板）&lt;/li&gt; 
 &lt;li&gt;區域水文極端評估系統 RHEAS&lt;/li&gt; 
 &lt;li&gt;多儀器分析軟件 OMINAS&lt;/li&gt; 
 &lt;li&gt;二維/三維網格適配工具 Refine&lt;/li&gt; 
 &lt;li&gt;包含數值分析庫的 CFD 工具軟件集（CFDTOOLS）&lt;/li&gt; 
 &lt;li&gt;knife 函數庫&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Leon Juranić表示僅用 4 小時進行手動代碼分析，就發現了 NASA 內部開發使用的多款開源軟件中存在的一系列漏洞，並且&lt;span&gt;多次通過不同電子郵件向 NASA 報告漏洞，還打電話給 NASA 的安全運營中心，但未得到回覆。因為 NASA 的官方政策規定不回覆外部人員的漏洞報告。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352532/nasa-open-source-software-vulnerabilities</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352532/nasa-open-source-software-vulnerabilities</guid>
      <pubDate>Sat, 10 May 2025 06:39:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>​字節推出全新 AI 剪輯應用 「剪小映」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;字節跳動公司發佈了一款名為 「剪小映」 的新應用，其宣傳口號 「捕捉美好，智創影片」 引發了廣泛關注。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="504" src="https://oscimg.oschina.net/oscnet/up-064c064581bd9831571c02a6b895dff4444.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;這也是字節繼 「即夢 AI」 之後的又一力作。藉助火山引擎的豆包大模型技術，「剪小映」 旨在為用戶提供更加便捷、高效的視頻創作體驗。用戶在使用這款應用時，無需具備專業的視頻編輯技能，簡單的操作就可以生成高質量的視頻作品。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;應用背後的火山引擎豆包大模型，是 「剪小映」 最核心的技術支持。該模型擁有強大的數據處理和學習能力，使得視頻的分析、剪輯和合成都表現得更加出色。通過智能化的處理方式，「剪小映」 能夠在短時間內完成複雜的視頻編輯任務，確保用戶的創作效率。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352521</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352521</guid>
      <pubDate>Sat, 10 May 2025 05:55:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>九聯開鴻基於 OpenHarmony 的機房動態環境監測場景解決方案</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;5 月 24 日，開源鴻蒙開發者大會 2025 在深圳隆重開幕。本次大會由開源鴻蒙項目羣工作委員會主辦，華為、潤開鴻、中軟國際、開鴻智谷、九聯開鴻、鴻湖萬聯、深開鴻、誠邁科技、中國南方電網、中國科學院軟件研究所、證通電子等合作單位提供支持。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;會上正式發佈了開源鴻蒙 5.1 Release 版本，並進行開源鴻蒙應用技術組件共建啓動、開源鴻蒙 AI Agent 技術共建啓動等重要儀式，同時設立八大主題分論壇，邀請開源操作系統技術專家、前沿實踐專家、開發者、生態夥伴代表等嘉賓匯聚一堂，共同探討開源鴻蒙技術的未來發展、分享最前沿的開發經驗。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;在會上，開源鴻蒙項目羣工作委員會主席、華為終端 BG 軟件部總裁龔體在大會上發表致辭。他表示，開源四年多來，開源鴻蒙代碼規模已達 1.3 億多行，代碼貢獻者達 8600 多位，超過 1100 款軟硬件產品通過兼容性測評，覆蓋金融、交通、教育、醫療、航天等多個行業領域，已成為發展速度最快的開源操作系統之一。開源鴻蒙項目羣工作委員會委員、華為終端 BG 軟件部副總裁章曉峯在會上發表《乘風破浪，共創開源鴻蒙未來》主旨報告，表示開源鴻蒙版本自開源以來持續迭代，已累計發佈 8 個大版本，累計建設 1100 多個開源三方庫，加速應用和設備的開發。未來，開源鴻蒙將持續推進全球化生態佈局，推動千行百業規模化商用，構建具有全球影響力的開源操作系統生態。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;廣東九聯開鴻科技發展有限公司，作為母公司廣東九聯科技股份有限公司（股票代碼：688609）持續深耕開源鴻蒙領域的全資子公司，致力於 OpenHarmony 生態產品與解決方案，提供基於 OpenHarmony 的物聯網通訊模組、家庭多媒體信息終端、視頻監控智能終端、智能通訊網關和路由設備、邊緣計算類和信創類產品的研發、生產、銷售與服務，參與了智慧城市、智慧電力、智慧醫療、智慧水利等行業解決方案，已經成為開源鴻蒙生態的重要貢獻者。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;九聯開鴻作為開源基金會的黃金捐贈人和 OpenHarmony 項目羣的 A 類捐贈人，打造了在開源鴻蒙生態內南向適配+規模製造+核心產品+解決方案的複合競爭能力，建立了在開源鴻蒙生態領域的核心競爭力，俱備了生態及行業影響力，更好的實現研發成果的商業化落地。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;九聯開鴻基於 OpenHarmony 的動態環境監測解決方案，實現了軟硬件端到端全棧化，打造數字化運維領域的技術底座。對機房設備加強監控和管理，實現機房設備智能化和聯網化集中管理，信息採集和處理的實時化，報警信息處理的自動化，提高機房設備低碳運行的安全性和穩定性，帶來運維的管理和經濟效益。廣泛適用於各種室內或室外場所，如機房、配電房、配網台區、變電站、倉庫等。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;img alt="1748492531192.jpg" src="https://oscimg.oschina.net/oscnet//14de8927c497c5799d25f99d7430a578.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;中國南方電網對深圳地區的 300 個數據機房和 45000 個配電機房進行信息化改造，引入九聯開鴻基於 OpenHarmony 電力機房動態環境監測解決方案，基於 OpenHarmony 技術底座，充分發揮鴻蒙分佈式軟總線的技術特點，通過九聯開鴻超高清發行版 HoloCeneOS 賦能的 AI 智能識別和人形追蹤功能的攝像機，配合輕量級鴻蒙控制器，支持環境內 OpenHarmony 全棧端側設備快速自組網、聯動協同。通過視頻監控+傳感器相結合的融合感知能力，實現電力機房的無人值守，日常監測、低碳運行和全數字化輔助運維。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;img alt="圖片 6.png" src="https://oscimg.oschina.net/oscnet//79c0ab0ce6b914ce9033f27eaa9d29cb.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;基於 OpenHarmony 的動態環境監測解決方案，針對機房所有的設備及內部環境進行集中監控和管理，動態環境監測包含機房環境內的設備、環境、能耗、消防、保安、網絡等子系統，並實時監測各子系統設備的運行狀態及工作參數，發現部件故障或參數異常，即時採取多媒體動畫、語音、電話、短消息等多種報警方式，記錄歷史數據和報警事件。通過九聯開鴻超高清發行版 HoloCeneOS 賦能的攝像機及應用 OpenHarmony 裝載的各類網關、控制器對其他環境感知終端聯動交互，實現集中管理、分散控制、能源管理、優化運行及高效管理，具備各機房的中央管理、監控及各子系統間的聯動能力，並以簡單易操作的用戶界面提供優質服務。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;開源鴻蒙開發者大會 2025 的成功舉辦，不僅全面展示了開源鴻蒙技術革新及生態共建成果，也為行業發展注入澎湃動能。九聯開鴻將繼續秉承開源精神，深耕 OpenHarmony 生態共建，推動更多基於 OpenHarmony 的行業應用場景落地，為開源生態的發展貢獻力量。面向全新的萬物智聯時代，九聯開鴻希望攜手更多開發者和生態夥伴繼續秉持「共建、共治、共享」的理念，匯聚更多開發者與產業力量，共創萬物智聯世界的美好未來！&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352520</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352520</guid>
      <pubDate>Sat, 10 May 2025 05:26:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>Claude 向所有用戶免費開放聯網搜索功能</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;Anthropic 團隊&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2FAnthropicAI%2Fstatus%2F1927440048930128089" target="_blank"&gt;宣佈&lt;/a&gt; Claude 的聯網搜索功能已面向所有用戶免費開放。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;&lt;img height="1378" src="https://static.oschina.net/uploads/space/2025/0529/115507_zRvs_2720166.png" width="1288" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;該功能此前僅限美國付費用戶使用。現在，免費用戶也可以通過 Claude 訪問實時網絡信息，包括行業趨勢、市場動態、學術文獻等。&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;Claude 通過 Brave Search 提供搜索結果，併為每次回覆提供內聯引用以確保信息可驗證。用戶只需在 Claude 賬戶的個人資料設置中開啓「網頁搜索」開關即可使用。&lt;/p&gt; 
&lt;p&gt;相關閲讀：&lt;a href="https://www.oschina.net/news/340196/anthropic-claude-web-search" target="news"&gt;Anthropic 為 Claude 增加聯網搜索功能&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352510</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352510</guid>
      <pubDate>Sat, 10 May 2025 03:56:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>2025 年視頻團隊協作效率軟件推薦之分秒幀</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#000000; text-align:left"&gt;分秒幀是由北京雲為先科技有限公司 (成立於 2019 年) 研發的雲端音視頻生產協作平台,專注於解決音視頻內容製作全流程的協同效率問題。作為新一代雲原生 SaaS 工具,其核心定位為:&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;全鏈路協同樞紐:打通素材管理、在線審片、版本控制、交付歸檔等環節,支持跨部門、跨組織實時協作。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;數據驅動的生產力工具:通過在線視頻批註、多版本對比、便捷安全分享等功能,實現從創意到交付的數字化轉型。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;垂直行業解決方案:針對廣告傳媒、遊戲、教育培訓、電商、MCN 等領域的定製化需求,提供場景化協作模板和合規支持。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;一、在線視頻協作平台&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;分秒幀 (&lt;/strong&gt;&lt;strong&gt;MediaTrack&lt;/strong&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;核心協作功能:精準到幀的批註系統:支持畫筆、箭頭、文字塗鴉等 10+標註工具,可針對視頻畫面的任意幀標記修改意見,團隊成員實時同步查看並一鍵導出任務清單。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;多版本智能對比:自動記錄視頻版本歷史,支持分屏對比不同版本的差異,快速定位修改點,減少重複溝通成本。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;雲端資產庫:提供團隊共享空間和個人私有云盤,支持 4K 視頻、PSD 工程文件等專業格式的在線預覽和極速傳輸,下載速度可達 20Gbps。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;跨平台協作:適配 Web、客戶端、小程序,移動端支持邊播放邊批註,適配弱網環境下的高清預覽。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;適用場景:廣告公司:多版本廣告片審核、跨部門協作 (如創意部與製作部實時同步修改意見)。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;教育機構:慕課內容安全審核、學生視頻作業批改 (支持逐幀批註和成績自動彙總)。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;MCN 機構:短視頻批量生產管理 (素材共享、腳本在線編輯、發佈進度追蹤)。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;遊戲廠商:買量廣告素材審核確認、外包供應商管理 (幫助美術團隊打通素材生產到投放的閉環)。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet//36161cec98e21f93015217e885905727.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;在線協作平台分秒幀,幫助視頻團隊提升協作效率&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;二、垂直領域解決方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;教育行業:分秒幀+&lt;/strong&gt;&lt;strong&gt;WeVideo&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;協同模式:課前策劃:教師通過分秒幀在線協作編輯課程腳本,學生同步參與討論並添加素材建議。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;課中錄製:使用 WeVideo 的互動視頻功能插入測驗和投票,學生觀看時實時反饋學習效果。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;課後批改:教師在分秒幀上對學生視頻作業進行逐幀批註,分析學生薄弱環節。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;核心優勢:全流程閉環:從課程設計到學生反饋,無需切換工具,提升教學效率。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;安全合規:分秒幀通過教育行業數據安全認證,保障教學內容不泄露。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;廣告行業:分秒幀+&lt;/strong&gt;&lt;strong&gt;Wipster&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;協同模式:創意提案:在分秒幀上上傳故事板和參考視頻,客戶直接在畫面上標記修改意見,實時同步至製作團隊。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;製作執行:使用 Wipster 的品牌資產庫確保視覺一致性,分秒幀的多版本管理功能支持 A/B 測試和客戶多輪確認。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;交付驗收:分秒幀生成帶水印的預覽鏈接,客戶審批通過後一鍵導出高清文件,自動歸檔至雲端。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;核心優勢:效率提升:客戶反饋週期從 3 天縮短至 8 小時,減少跨部門會議次數。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;三、協作效率提升技巧&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;標準化流程:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="color:#000000; text-align:left"&gt;1) &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;分秒幀模板庫:創建常用項目模板 (如廣告片、教育課程),包含預設標籤、審批流程和團隊權限,新成員可一鍵複用。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;2) &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;自動化工作流:通過 API 對接企業 OA 系統,視頻上傳後自動觸發 AI 審核和郵件通知,減少人工幹預。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;實時反饋優化:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="color:#000000; text-align:left"&gt;1) &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;批註優先級:在分秒幀上為批註設置「緊急」「建議」「參考」等標籤,團隊優先處理高優先級任務。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;數據驅動決策:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="color:#000000; text-align:left"&gt;1) &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;版本對比統計:多版本視頻的修改次數、審批時間等數據可視化,幫助團隊識別流程瓶頸。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;四、工具對比與選擇建議&lt;/strong&gt;&lt;/p&gt; 
&lt;table cellpadding="0" cellspacing="0" style="-webkit-text-stroke-width:0px; color:#000000; font-family:宋體; font-size:14px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; orphans:2; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;&lt;strong&gt;場景&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;&lt;strong&gt;推薦工具&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;&lt;strong&gt;核心優勢&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;&lt;strong&gt;分秒&lt;/strong&gt;&lt;strong&gt;幀&lt;/strong&gt;&lt;strong&gt;差異化功能&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;廣告公司多版本審核&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;分秒幀+Frame.io&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;雲端協作、品牌模板庫&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;精準到幀的批註、AI 智能審核&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;教育機構視頻作業管理&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;分秒幀+WeVideo&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;互動視頻、數據分析&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;作業自動歸檔、逐幀批註&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;中小企業快速迭代內容&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;分秒幀+剪映&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;在線協作、AI 工具&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;多版本管理、極速傳輸&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;跨國團隊跨境協作&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;分秒幀+Zoom&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;實時翻譯、弱網優化&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;中文界面適配、本地化技術支持&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;五、分秒&lt;/strong&gt;&lt;strong&gt;幀&lt;/strong&gt;&lt;strong&gt;行業案例&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;廣告行業:星馳廣告使用分秒幀管理汽車品牌廣告片製作,客戶直接在視頻上標記「更換車型顏色」「調整 LOGO 位置」等需求,製作週期縮短 40%。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;教育行業:中國石油大學教師通過分秒幀收集 120 名學生的視頻作業,AI 自動生成成績報告,每週節省 8 小時文件整理和批改時間。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="color:#000000; text-align:left"&gt;分秒幀通過「精準批註+智能審核+雲端存儲」的三位一體協作模式,已成為音視頻行業數字化轉型的核心工具。其教育行業解決方案和廣告行業版本管理功能尤其突出,建議優先試用免費版 (支持 10GB 存儲空間和 3 人協作),結合企業微信/釘釘實現深度集成。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352507</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352507</guid>
      <pubDate>Sat, 10 May 2025 03:50:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>Mistral AI 發佈代碼嵌入模型 Codestral Embed</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Mistral AI&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmistral.ai%2Fnews%2Fcodestral-embed"&gt;發佈&lt;/a&gt;了其首款專門針對代碼的嵌入模型 Codestral Embed。該模型在處理真實世界代碼數據的檢索用例時表現尤為出色，據稱其性能顯著優於市場上領先的代碼嵌入器，包括 Voyage Code 3、Cohere Embed v4.0 以及 OpenAI 的大型嵌入模型。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-85599f31eba5292dd0346c0531e83ee1ca9.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0529/113410_KZv0_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;該模型的核心應用場景廣泛。它可以為代碼補全、編輯或解釋任務提供快速高效的上下文檢索，支持 AI 驅動的軟件工程，例如 copilots 或編碼代理框架。同時，它能通過自然語言或代碼查詢準確搜索相關代碼片段，適用於開發者工具、文檔系統和 copilots。&lt;/p&gt; 
&lt;p&gt;此外，Codestral Embed 能夠識別功能相似或接近重複的代碼段，即便是詞彙差異較大的情況，這有助於識別可重用代碼以避免重複，或檢測複製粘貼以執行許可策略。它還能基於功能或結構對代碼進行無監督分組，用於分析存儲庫組成、識別新興架構模式或為自動化文檔和分類系統提供支持。&lt;/p&gt; 
&lt;p&gt;Codestral Embed 目前通過 Mistral AI 的 API 提供，名稱為 codestral-embed-2505。其價格為每百萬 tokens 0.15 美元，批量 API 調用可享受 50% 的折扣。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;來源：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F92OEt-XuAxwtaBukkDAZbw" target="_blank"&gt;https://mp.weixin.qq.com/s/92OEt-XuAxwtaBukkDAZbw&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352503/mistral-ai-codestral-embed</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352503/mistral-ai-codestral-embed</guid>
      <pubDate>Sat, 10 May 2025 03:36:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>蘋果操作系統大版本將採用年份命名</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2025-05-28%2Fapple-to-rebrand-device-operating-systems-ios-26-macos-26-watchos-26" target="_blank"&gt;彭博社報道稱&lt;/a&gt;&lt;/u&gt;，蘋果公司計劃從今年開始，所有蘋果操作系統的版本命名將&lt;strong&gt;統一採用年份標識&lt;/strong&gt;，而非此前混亂的版本體系。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0529/111852_wyvq_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;這意味着當前的 iOS 18 將直接跳躍至 "iOS 26"，同時 iPadOS 26、macOS 26、watchOS 26、tvOS 26 和 visionOS 26 也將同步亮相。&lt;/p&gt; 
&lt;p&gt;這一命名策略的核心邏輯在於統一性。目前蘋果的操作系統呈現出令人困惑的數字差異：iOS 18、watchOS 12、macOS 15、visionOS 2—— 這種不一致源於各系統首版發佈時間的差異，但對用戶和開發者而言卻構成了理解障礙。&lt;/p&gt; 
&lt;p&gt;報道指出，蘋果將在 6 月 9 日的全球開發者大會上正式宣佈這一變革。&lt;/p&gt; 
&lt;p&gt;新命名系統將伴隨代號為"Solarium"的全新用戶界面設計語言，覆蓋 tvOS、watchOS 以及部分 visionOS 系統。這一設計理念旨在確保用戶在不同設備間切換時獲得更加統一的體驗。&lt;/p&gt; 
&lt;p&gt;值得注意的是，蘋果採用的是「未來年份」策略 —— 儘管新操作系統將於 2025 年 9 月前後發佈，但卻以 2026 年命名，這與汽車行業的營銷手法如出一轍。如果這一策略得以延續，後續版本將依次使用 27、28 等年份標識。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352495/apple-to-rebrand-device-operating-systems-ios-26</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352495/apple-to-rebrand-device-operating-systems-ios-26</guid>
      <pubDate>Sat, 10 May 2025 03:19:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>日本出台首部人工智能法</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;日本參議院全體會議 28 日以多數贊成票通過首部專門針對人工智能（AI）的法律，旨在促進 AI 相關技術研發和應用並防止其濫用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;這部《人工智能相關技術研究開發及應用推進法》指出，AI 技術是日本經濟社會發展的基礎，從安全保障的角度來看也是重要的技術。依據這部新法，擬設立以日本首相為首、全體內閣成員參加的「AI 戰略本部」作為日本 AI 政策的「司令部」，並制定「AI 基本計劃」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;新法提出，日本應在 AI 領域保持研究開發能力，並提高相關產業的國際競爭力。日本政府有責任全面且系統地制定和實施推動 AI 研發和應用的措施。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;為防止 AI 技術被濫用而引發侵權問題，緩解公眾對生成式 AI 製造虛假信息等的不安，新法規定，日本政府要對侵權行為展開調查，並給涉事企業以建議和指導，企業有義務配合相關調查。對於使用 AI 製作虛假視頻、侵犯著作權等行為，日本政府將進行分析調查，並可公開相關企業的名稱。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;根據日本總務省 2024 年版《信息通信白皮書》，使用或使用過生成式 AI 的日本國民僅佔人口的 9.1%，遠低於美國的 46.3% 和德國的 34.6%。（新華社）&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352493</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352493</guid>
      <pubDate>Sat, 10 May 2025 03:11:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>深入淺出 DDD：從理論到落地的關鍵</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;隨着互聯業務的發展、業務逐漸的複雜，傳統代碼架構在日常開發中存在的多種弊端，如代碼混亂、補丁式開發、迭代成本高等問題，大大影響了迭代的效率。本文作者藉助 DDD 的戰略設計和戰術設計，介紹瞭如何通過限界上下文、領域模型、聚合、資源庫等概念，實現業務邏輯與技術的解耦，提升代碼的可維護性、擴展性和穩定性。同時，文章作者結合團隊在落地 DDD 時，遇到的卡點、痛點，創新性的提出一種 DDD 的分層實踐，並在實際開發中取得了較好的效果&lt;/p&gt; 
&lt;h1&gt;01 背景&lt;/h1&gt; 
&lt;p&gt;不知不覺從事 To B 業務已經 3 年，筆者在工作中看了很多、也寫了很多的代碼，由此也產生很多的思考和感悟：在日常的工作中，&lt;em&gt;&lt;strong&gt;我們的主要矛盾在於日漸複雜、動態變化的業務訴求與有限的人力之間的矛盾&lt;/strong&gt;&lt;/em&gt;。而為瞭解決這一矛盾，我們要儘可能的保證代碼的優雅。&lt;/p&gt; 
&lt;p&gt;但是傳統的代碼設計，如：麪條式代碼架構、基於面向對象+MVC 的代碼架構，大部分無法保證在日趨複雜的業務中以優雅的代碼架構持續發展。一旦迭代時間拉長，這類代碼往往會或多或少地表現出以下特徵：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;代碼組織混亂（&lt;em&gt;&lt;strong&gt;數據的獲取隨意、業務邏輯與數據邏輯糾纏、結構隨意&lt;/strong&gt;&lt;/em&gt;）;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;業務邏輯透傳數據數據庫（業務邏輯層層透傳到數據庫層）;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;隱式代碼邏輯橫行（&lt;em&gt;&lt;strong&gt;業務代碼到處散落、對象的初始化通過隱式 init&lt;/strong&gt;&lt;/em&gt;）。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;筆者在這裏畫一下這套代碼的邏輯組織結構：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-9dbec39118b18807bc8026ff0ce28dac508.jpg" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;具體來分析，筆者認為主要存在以下幾種問題：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;穩定性&amp;amp;性能低下：由於代碼組織結構的混亂，導致開發模式變成了打補丁，迭代方式變成了在原有的代碼基礎上繼續填充 if else、或者新開闢一個 func 用於實現本次新加的代碼邏輯。這往往會導致重複數據的獲取、重複的數據校驗、重複的對象創建.....，&lt;em&gt;&lt;strong&gt;從而導致性能的大幅下降&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;代碼複雜程度高&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;a.補丁式的開發模式:&lt;/p&gt; 
&lt;p&gt;i. 由於補丁的開發，數據的獲取隨意從而導致代碼的複用性降低，畢竟每同學在開發時，如果不全盤梳理代碼已無法抽取合理的公共代碼邏輯。而新添加的代碼又會成為下一個同學的開發負擔，從而導致_&lt;strong&gt;代碼一直處於惡性循環，從而導致複雜度一直增長&lt;/strong&gt;&lt;em&gt;。筆者就見過一些超過 1500 行的函數，這些函數除了重新推倒重來基本無迭代的可能性，因此我們應該儘可能避免這種情況發生。除了以上問題，補丁式的開發缺少統一的規劃，&lt;/em&gt;&lt;strong&gt;圈複雜度的急劇上升也是代碼複雜度上升&lt;/strong&gt;_的一個重要原因。&lt;/p&gt; 
&lt;p&gt;b. 代碼組織混亂:&lt;/p&gt; 
&lt;p&gt;i. 數據獲取隨意:由於沒有統一的代碼格式層級,數據的獲取散列在整個代碼的各處、賦值修改亦如此,導致數據污染。&lt;/p&gt; 
&lt;p&gt;ii.據獲取通過 Map 結構：筆者見過一些代碼通過 Map 獲取數據，後續的開發的同學必須不僅要關注這個 map 的成員、還要關注 Map 中每個成員的生命週期是否有過修改、更新，迭代過程中十分痛苦。&lt;/p&gt; 
&lt;p&gt;iii .....&lt;/p&gt; 
&lt;p&gt;c. 隱式的業務邏輯:&lt;/p&gt; 
&lt;p&gt;i.代碼只體現對數據修改、更新,而沒有顯示註明業務邏輯。&lt;/p&gt; 
&lt;p&gt;d. 業務邏輯透傳數據數據庫:&lt;/p&gt; 
&lt;p&gt;i. 筆者見過一些代碼,請求的參數直接從 api 透傳到 dao 層,導致對這段代碼進行擴展十分困難。&lt;/p&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;迭代成本高:由於代碼複雜度過高,導致迭代複雜度同比增加。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;從實際工作中來看，一旦代碼選擇這種架構，便只能沿着混亂繼續一路狂奔，從而無法挽回直到業務無法忍受技術的短板，選擇進行重構！筆者在這裏截取一些代碼片段，作為示例：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-1548a319bb4eb61341fb04b30e798aeca25.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;△map 獲取&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-9dce13380b0ee46cab908ae166d4a306651.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;△超長代碼&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;02 那什麼才是好的代碼架構？優雅的結構？&lt;/h1&gt; 
&lt;p&gt;從筆者的工作經驗來看，好的代碼結構一般具有以下幾種特點：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;代碼的可擴展性：&lt;em&gt;&lt;strong&gt;好的代碼架構幫助代碼開發人員將業務與技術解耦&lt;/strong&gt;&lt;/em&gt;，增加代碼的擴展性;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;代碼的可維護性：&lt;em&gt;&lt;strong&gt;好的代碼架構能將業務和依賴進行解耦，增加代碼的可維護性&lt;/strong&gt;&lt;/em&gt;；同時好的代碼架構可以降低代碼和文檔的腐化程度;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;代碼複用性高、可測試性強：&lt;em&gt;&lt;strong&gt;代碼架構有助於提升代碼的複用性、可測試性;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;錦上添花:&lt;/p&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;系統穩定性高:好的代碼架構有助於提升系統的穩定性。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;很高興的事情是 DDD 是從一種更高緯度的設計思想去思考問題，他以業務驅動為核心，從穩定性的角度去構建代碼結構。某種意義而言，DDD 也許是一種更巧妙的解決方案，幫助我們去構建更優雅的結構，從一定維度上&lt;strong&gt;減緩&lt;/strong&gt;項目代碼的腐化。&lt;/p&gt; 
&lt;h1&gt;03 什麼是領域驅動設計&lt;/h1&gt; 
&lt;p&gt;DDD 是一種圍繞領域建模來解決複雜業務交付的設計思想。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;什麼是複雜？如何理解複雜？&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;複雜可能是現狀業務就複雜，也可能是業務日漸演變成複雜&lt;/strong&gt;&lt;/em&gt;。複雜來自規模在變，比如幾個業務對象的邏輯不復雜，幾十上百個業務對象就會變得錯綜複雜;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;複雜來自結構化不足，例如結構化的中國結比非結構化的意大利麪更有序、易於大腦理解。此外，如何協同不同團隊完成軟件交付也是一種複雜。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;什麼是領域建模？&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;領域模型跟技術毫無關係，而是為了更有結構化的拆解和表達業務邏輯&lt;/strong&gt;&lt;/em&gt;。業務邏輯來自現實世界裏的具體場景，涉及可視畫面、操作動作和流程。要準確表達業務邏輯需要先講清楚每個概念是什麼，再建立概念之間的聯繫，基於這些關係再組合出更多的流程;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;概念、聯繫、流程就是領域模型。圍繞領域模型去表達業務時也自然而然地把技術實現細節分離出去了。&lt;em&gt;&lt;strong&gt;後續代碼實現就是將業務架構映射到系統架構的過程，以後業務架構調整了能快速的調整技術架構&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;DDD 用哪些領域概念表達業務？&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;表示業務邏輯的是：實體、值對象、領域服務、領域事件。這意味着所有領域邏輯都應該在這四種對象裏，統一稱為領域模型對象，這將極大_&lt;strong&gt;減少業務邏輯的蔓延;&lt;/strong&gt;_&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;引入聚合進一步封裝實體和值對象，讓領域邏輯更內聚，起到邊界保護的作用。聚合的引入使得業務對象間的關聯變少。如何設計聚合見下面實踐部分;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;圍繞聚合的操作引入工廠和資源庫。工廠負責複雜聚合的創建，資源庫負責聚合的加載、添加、修改、刪除。聚合內的實體狀態變更通過領域事件來推動;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;應用服務處於應用層，對領域邏輯編排、封裝之後對上層接口層暴露。一次編排就是一個用戶用例&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;04 領域驅動設計如何解決問題&lt;/p&gt; 
&lt;p&gt;DDD 包括&lt;strong&gt;戰略設計&lt;/strong&gt;和&lt;strong&gt;戰術設計&lt;/strong&gt;兩部分。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;戰略設計：主要從業務視角出發，建立業務領域模型，劃分領域邊界，建立通用語言的限界上下文，限界上下文可以作為微服務設計的參考邊界。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;戰術設計：從技術視角出發，側重於領域模型的技術實現，完成軟件開發和落地，包括：聚合根、實體、值對象、領域服務、應用服務和資源庫等代碼邏輯的設計和實現。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;strong&gt;4.1 戰略設計：分割你的設計，以免無法控制&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;4.1.1 &lt;strong&gt;Bounded Context（限界上下文）&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;限界上下文是圍繞應用程序和/或項目部分的概念邊界，涉及業務領域、團隊和代碼。&lt;em&gt;&lt;strong&gt;它將相關組件和概念分組，避免歧義，因為其中一些可能在沒有明確上下文的情況下具有相似的含義&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;比如電商領域的商品，商品在不同的階段有不同的術語，在銷售階段是商品，而在運輸階段則變成了貨物。同樣的一個東西，由於業務領域的不同，賦予了這些術語不同的涵義和職責邊界，這個邊界就可能會成為未來微服務設計的邊界。領域邊界就是通過限界上下文來定義的。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;比如財務領域、審核領域。DDD 裏的限界上下文（Bouded Context）是對廣告領域的軟件實現，比如錢包體系、賬戶體系就是財務領域內的限界上下文&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;限界上下文定義瞭解決方案的明顯邊界，邊界裏的每一個領域概念，包括領域概念內的屬性和行為都有特殊含義。&lt;em&gt;&lt;strong&gt;出了限界上下文這個邊界這層含義就不復存在。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;如何劃分限界上下文？&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;根據相關性做歸類。一般是優先考慮功能相關性而不是語義相關性，比如創建訂單和支付訂單都是訂單語義，但功能相差比較大，應該劃分為兩個限界上下文。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;根據團隊粒度做裁剪、根據技術特點做裁剪。&lt;strong&gt;一些通用的技術功能應該儘可能歸攏到一個限界上下文&lt;/strong&gt;，比如每個業務限界上下文都有監控，但監控能力應該歸攏到監控限界上下文。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;4.1.2 &lt;strong&gt;&lt;strong&gt;Context Mapping（上下文映射）&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;識別並以圖形方式記錄項目中的每個限界上下文稱為上下文映射。上下文映射有助於更好地理解有界上下文和團隊如何相互關聯和溝通。它們給出了實際邊界的清晰概念，並幫助團隊直觀地描述系統設計的概念細分。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-7afc8e9bf37035895215a3106b41c4c8a4b.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;受限上下文之間的關係可能會有所不同，這取決於設計要求和其他特定於項目的約束，本文將省略某些關係，但以下四種關係除外：&lt;/p&gt; 
&lt;h3&gt;4.1.3 &lt;strong&gt;&lt;strong&gt;&lt;strong&gt;Anti-corruption Layer（防腐層）:&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;下游限界上下文實現了一個轉換來自上游上下文的數據或對象的層，確保它支持內部模型。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-cff8c39809109ce1fc7df41d063957ce788.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;4.1.4 &lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;Conformist（跟隨者關係）:&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;下游有界上下文符合並適應上游上下文，如果需要，必須進行更改。在這種情況下，上游環境對滿足下游需求不關心。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-c95bb76778a72702762ef67c3509f91cdcf.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;4.1.5 &lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;Customer/Supplier（&lt;strong&gt;&lt;strong&gt;客戶/供應商關係&lt;/strong&gt;&lt;/strong&gt;）:&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;上游向下遊提供服務，下游上下文充當客戶，確定需求並向上遊請求更改以滿足其需求。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-c0c559fb2dc388d94f0271eceb521b387a2.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;4.1.6 &lt;strong&gt;&lt;strong&gt;&lt;strong&gt;Shared Kernel（共享內核）:&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;有時，兩個（或更多）上下文不可避免地重疊，最終共享資源或組件。這種關係要求兩個上下文在需要更改時保持連續同步，因此如果可能的話應該避免。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-92c12151b9f34174f0a252ebfff6f5a4448.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-30e17f45df9bce61e1c85a8ed8030c38922.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-705f22755d0aa7492bab6bc858e2829f710.jpg" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;4.2 戰術設計:DDD 的螺母和螺栓&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-835d6524c9b91d09b90bb78330ee3e48cb1.jpg" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-714bf04fbcf74ee5b68d9e0a8724b54ddca.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;4.2.1 Entity（實體）&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;具有唯一標識並具有連續性的對象稱為實體，它們不僅僅由屬性定義，更多地由它們是誰定義&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;它們的屬性可能會發生變異，它們的生命週期可能會發生劇烈變化，但它們的身份依然存在。&lt;strong&gt;身份通過唯一密鑰或保證唯一的屬性組合來維護&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;例如，在電子商務領域，訂單有一個唯一的標識符，它經歷幾個不同的階段：打開、確認、發貨和其他，因此它被視為領域實體。&lt;/p&gt; 
&lt;p&gt;重點關注：Entity 最重要的設計原則是&lt;strong&gt;保證實體的不變性（Invariants）&lt;/strong&gt;，&lt;strong&gt;也就是説要確保無論外部怎麼操作，一個實體內部的屬性都不能出現相互衝突，狀態不一致的情況。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;這裏給出一些總結的規範：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;創建一致性 ，實體的創建儘量通過 Factory 或者規約進行創建;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在代碼實踐中，儘量保證實體的創建唯一性（避免過多的創建實體的方法）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;實體的屬性儘量使用小寫，避免外部直接對屬性的操作，從而導致實體與業務出現不一致的情況;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;通過聚合根對子實體進行訪問；&lt;strong&gt;子實體的一致性交由聚合根保證;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任何&lt;strong&gt;實體的行為只能直接影響到本實體&lt;/strong&gt;（和其子實體）。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;應當遵守的原則：&lt;em&gt;&lt;strong&gt;在一個系統裏一個實體對象的所有變更操作應該都是預期內的，如果一個實體能隨意被外部直接修改的話，會增加代碼 bug 的風險&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;4.2.2 Value Object（值對象）&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;描述特徵的對象，不具有任何唯一性的對象稱為價值對象，它們只關心自己是什麼，而不關心自己是誰，值對象是多個實體的屬性，可以由多個實體共享。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;例如：兩個客戶可以具有相同的發貨地址，儘管存在風險，但如果其中一個屬性需要更改，則共享這些屬性的所有實體都會受到影響。為了防止這種情況發生，&lt;strong&gt;值對象必須是不可變的，當需要更新時，強制系統用新實例替換它們&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;此外，&lt;strong&gt;價值對象的創建應始終取決於用於創建它們的數據的有效性，以及它如何尊重業務不變量&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;因此，如果數據無效，將不會創建對象實例。例如，在北美，帶有非字母數字字符的郵政編碼將違反業務不變量，並將觸發地址創建異常。&lt;/p&gt; 
&lt;h3&gt;4.2.3 Aggregate（聚合）&lt;/h3&gt; 
&lt;p&gt;聚合是相關實體和值對象的集合，聚集在一起表示事務邊界。&lt;em&gt;&lt;strong&gt;每個聚合都有一個朝外的實體，控制對邊界內對象的所有訪問，該實體稱為聚合根，是其他對象可以交互的唯一對象。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;聚合中的任何對象都不能直接從外部世界調用，從而保持內部的一致性&lt;/strong&gt;。業務不變量是保證聚合及其內容完整性的業務規則，換句話説，它是一種確保其狀態始終與業務規則一致的機制。例如，當某個產品的庫存量為零時，就永遠不能下訂單。&lt;/p&gt; 
&lt;h3&gt;4.2.4 Repository（資源庫）&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;為了能夠從持久性中檢索對象，無論是在內存、文件系統還是數據庫中，我們需要提供一個對客戶機隱藏實現細節的接口，以便它不依賴於基礎架構細節，而僅僅依賴於抽象。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;存儲庫提供了一個接口，域層可以使用該接口來檢索存儲的對象，避免了與存儲邏輯的緊密耦合，並使客戶端產生了直接從內存檢索對象的錯覺。&lt;/p&gt; 
&lt;p&gt;值得一提的是，&lt;strong&gt;所有存儲庫接口定義都應該位於 domain 層，但它們的具體實現屬於基礎架構層&lt;/strong&gt;。&lt;/p&gt; 
&lt;h3&gt;4.2.5 Domain Event（領域事件）&lt;/h3&gt; 
&lt;p&gt;領域事件是過去時態的業務事實，當聚合根狀態變更時觸發，&lt;em&gt;&lt;strong&gt;它的核心職責是跨聚合/微服務的業務協同，我們將它定義在領域層，發佈/處理可在應用層&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;例如訂單創建後觸發庫存更新、通知等跨系統操作，它不需要強一致性保證，只需要保證最終一致性。&lt;/p&gt; 
&lt;h3&gt;4.2.6 Domain Service（領域服務）&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;在許多情況下，領域模型需要某些與實體或值對象不直接相關的動作或操作，將這些動作或操作強制到它們的實現中會導致它們的定義失真。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;如電商訂單支付，需要協調訂單、庫存、支付三個實體完成事務。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;服務****應該精心設計，始終確保它們不會剝奪實體和價值對象的直接責任和行為&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;它們還應該是無狀態的，這樣客戶機就可以使用服務的任何給定實例，而不考慮該實例在應用程序生命週期中的歷史記錄。&lt;/p&gt; 
&lt;h3&gt;4.2.7 Application Service（應用服務）&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;和領域服務的區別在於，應用服務處理流程編排、捕獲異常，領域服務處理核心業務規則&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;應用服務是協調領域模型與外部系統交互的中間層，負責處理非業務邏輯的橫切關注點，如事務管理、安全認證、參數校驗、事件發佈等。&lt;/p&gt; 
&lt;p&gt;通過一個應用服務，我們能夠清晰地看出對哪些實體行為進行了調度，它依賴於領域服務和基礎設施組件，進行日誌記錄、異常捕獲、權限驗證、數據轉換等基礎設施層交互，&lt;strong&gt;保持領域層與技術實現解耦&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;此外，應用服務還需要對外暴露 REST API 或 RPC 接口，對內將 DTO 轉換為領域對象，隔離外部請求與內部模型。&lt;/p&gt; 
&lt;h1&gt;05 領域驅動設計分層架構&lt;/h1&gt; 
&lt;h2&gt;**&amp;nbsp;六邊形架構**&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-b969e11d638db55ba81746ce300f1e9bc3f.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;從代碼演進的角度來看/需求變更的速度來看，我們將各層按照變更速度排序：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Domain（領域）層&lt;/strong&gt;屬於核心業務邏輯，屬於經常被修改的地方；這部分的需求經常隨着產品的迭代進行變更。&lt;em&gt;&lt;strong&gt;領域層不依賴其他層，通過資源庫包下的接口定義做到依賴倒置，接口參數不能體現具體技術實現細節，領域模型裏的實現邏輯只依賴接口&lt;/strong&gt;&lt;/em&gt;。這樣做到對領域邏輯的一層防腐。本層裏以聚合為單位放置代碼，便於以後系統拆分，以聚合為單位。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Application（應用）層&lt;/strong&gt;屬於 Use Case（業務用例）**。&lt;strong&gt;業務用例一般都是描述比較大方向的需求，接口相對穩定，特別是對外的接口一般不會頻繁變更。&lt;em&gt;&lt;strong&gt;添加業務用例可以通過新增 Application Service 或者新增接口實現功能的擴展&lt;/strong&gt;&lt;/em&gt;&lt;/strong&gt;。**此外應用層還可以處理橫切面事務比如啓動數據庫事務。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interface（接口）層&lt;/strong&gt;主要負責解決外部通信、協議等問題，將外部的定時任務、請求、rpc、事件消費都進行透明處理。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Infrastructure（基礎設施）層&lt;/strong&gt;屬於最低頻變更的。&lt;em&gt;&lt;strong&gt;基礎設施層完成資源庫的實際實現，以及領域層定義的其他接口的實現如對外部服務的訪問，領域事件發佈到消息隊列中間件等&lt;/strong&gt;&lt;/em&gt;。一般這個層的模塊只有在外部依賴變更了之後才會跟着升級，而外部依賴的變更頻率一般遠低於業務邏輯的變更頻率。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;&lt;strong&gt;5.1 DDD FrameWork（四層架構）&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;後文中，我們對於層的介紹將類比接口的概念進行介紹，重點關注 3 個概念：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;入參&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;出參&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;內容&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-a34a2ca1cc97836745db7b69c9da53746fd.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;5.1.1 用戶接口層&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;定義：用戶接口層負責向用戶顯示和解釋用戶指令。這裏的用戶可能是:用戶、程序、自動化測試和批處理腳本等等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;目的：我們希望通過分層,來提升 application 層的穩定性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;構成結構&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;入參: &amp;nbsp;CQE 對象;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;出參：&lt;strong&gt;DTO 對象;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;內容 : 對玩不輸入進行校驗,輸出內容的處理結果;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;筆者在這裏給出一些落地規範:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;統一的鑑權&lt;/strong&gt;：比如在一些需要 AppKey+Secret 的場景，需要針對某個租戶做鑑權的，包括一些加密串的校驗;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;網絡協議的轉化&lt;/strong&gt;：這個儘量交給框架處理，我們主要的工作是關注如何將參數反序列化或者序列化;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Session 的管理&lt;/strong&gt;：一般在面向用戶的接口或者有登陸態的，通過 Session 或者 RPC 上下文可以拿到當前調用的用戶，以便傳遞給下游服務;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;限流配置&lt;/strong&gt;：對接口進行限流;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;**異常處理：**通常在接口層要避免將異常直接暴露給調用端，所以需要在接口層做統一的異常捕獲，轉化為調用端可以理解的數據格式;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;日誌打印&lt;/strong&gt;：在該層進行日誌的打印;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;CQE 的校驗&lt;/strong&gt;：在該層進行業務無關的校驗，推薦依賴框架本身實現;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;可選&lt;/strong&gt;：部分代碼會在 interface 層引入緩存。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;補充：淺談 CQE 模型和 CQRS&lt;/p&gt; 
&lt;p&gt;從筆者的經驗來看，這兩者概念上區別不大，他的思路就是將系統的 Input，根據語義拆分成 write 和 read。這裏先只談 CQE 模型：&lt;/p&gt; 
&lt;p&gt;Command 指令：指調用方明確想讓系統執行的指令，他的預期是對一個系統進行影響，即寫操作。通常來説，需要一個明確的返回值（如：同步的操作結構、異步的指令被接受）&lt;/p&gt; 
&lt;p&gt;Query 指令：指調用方明確想查詢的東西，包括查詢參數、過濾、分頁等條件，其預期是對一個系統的數據完全不影響的，也就是隻讀操作&lt;/p&gt; 
&lt;p&gt;Event 指令：指一件已經發生過的事情，需要系統根據這個事實進行相應，通常都會伴隨一個寫操作。事件處理器不會有返回值。補充一下，Application 層的 Event 概念和 Domain 層的 DomainEvent 是類似的概念，但不一定是同一回事，這裏的 Event 更多是外部一種通知機制而已。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-132ad2640ce20f6a9ed2eccfc0c56e240ee.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q：為什麼使用 CQE 對象?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;這是一個好的問題，從筆者的經驗來看，DDD 在於解決複雜的業務；&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;從某種意義上來説，筆者認為讀不算真正的業務，讀往往可以理解成數據的組裝。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;因此，對問題進行拆分，分而治之，從工程學上來説是一種簡單可行的方案。從完美的角度上來説，如果能有一種可以全治理的方案一定是最好的！But we live in the real world!&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;5.1.2&amp;nbsp;應用層（落地重點）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;定義：&lt;em&gt;應用層是很薄的一層，理論上不應該有業務規則或邏輯，&lt;strong&gt;主要面向用例和流程相關的操作&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;目的：應用層的核心是：Manage 或者 Orchestration，編排是應用層最關心的事情，他負責將業務編排到各個領域中。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;構成結構&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;入參: &amp;nbsp;CQE(Command、Query、Event) 對象&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;出參：&lt;strong&gt;DTO 對象&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;內容：&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;a.應用層位於領域層之上，可以協調&lt;strong&gt;多個聚合的服務和領域對象完成服務編排和組合&lt;/strong&gt;，協作完成業務操作。&lt;/p&gt; 
&lt;p&gt;b.應用層也是微服務之間交互的通道，它可以調用其它微服務的應用服務，完成微服務之間的服務組合和編排。&lt;/p&gt; 
&lt;p&gt;c.應用服務是在應用層的，&lt;em&gt;&lt;strong&gt;它負責服務的組合、編排和轉發，負責處理業務用例的執行順序以及結果的拼裝，以粗粒度的服務通過 API 網關向前端發佈&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;d.應用服務還可以進行安全認證、權限校驗、事務控制、發送或訂閲領域事件等。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;落地規範&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;a.應用層應該只包含業務流程的封裝，不處理業務邏輯;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;b.避免進程內部的 EDA 驅動。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q:什麼是 DTO？為什麼要有 DTO？帶來的額外成本是什麼？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;DTO 存在的意義在於我們可以將實體與數據傳輸解耦，使得領域層只和應用層有關聯性、對外透明；額外成本：性能&amp;amp;冗餘&amp;amp;額外引入的 DTO Assembler 層（用於實體到 DTO 的轉換）。一個基本的 DTO 對象，如下（簡單的 pojo 對象）：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;type AdWalletDTO&amp;nbsp;struct&amp;nbsp;{
&amp;nbsp; &amp;nbsp; AdAccountID &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;string&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; `json:"ad_account_id"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;orm:"ad_account_id"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp;&amp;nbsp;// 子賬戶 ID
&amp;nbsp; &amp;nbsp; WalletStatus &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;uint&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; `json:"wallet_status"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;orm:"wallet_status"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp;&amp;nbsp;// 錢包狀態：1-正常 2-欠費狀態 3-關閉
&amp;nbsp; &amp;nbsp; DepositBalance &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;decimal.Decimal `json:"deposit_balance"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; orm:"deposit_balance"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; `&amp;nbsp;// 存款餘額
&amp;nbsp; &amp;nbsp; FrozenDepositBalance&amp;nbsp;decimal.Decimal `json:"frozen_deposit_balance"&amp;nbsp;orm:"frozen_deposit_balance"&amp;nbsp;`&amp;nbsp;// 凍結存款餘額
&amp;nbsp; &amp;nbsp; CreditBalance &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;decimal.Decimal `json:"credit_balance"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; orm:"credit_balance"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp;&amp;nbsp;// 信用餘額
&amp;nbsp; &amp;nbsp; FrozenCreditBalance &amp;nbsp;decimal.Decimal `json:"frozen_credit_balance"&amp;nbsp;orm:"frozen_credit_balance"&amp;nbsp;` &amp;nbsp;&amp;nbsp;// 凍結信用餘額
&amp;nbsp; &amp;nbsp; CouponBalance &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;decimal.Decimal `json:"coupon_balance"` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// 代金券餘額
&amp;nbsp; &amp;nbsp; Title &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;string&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; `json:"title"` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// 名字
&amp;nbsp; &amp;nbsp; Currency &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;string&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; `json:"currency"` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// 貨幣
}



&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Q:CQE 和 DTO 有什麼區別？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;ApplicationService 的入參是 CQE 對象，但是出參卻是一個 DTO，從代碼格式上來看都是簡單的 POJO 對象，那麼他們之間有什麼區別呢？&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;可以簡單做如下理解：&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;入水口的 pojo 是 CQE，出水口的是 DTO（因為入水口天然自帶業務含義，因此需要嚴格的校驗；出水口是安全的，只承擔數據傳輸的載體）&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;複用性上而言：CQE 對象複用性更低，DTO 的複用性更強&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;CQE 對象：CQE 對象是 ApplicationService 層的輸入，也可以是 interface 層的輸入，有明確的意圖，這個對象必須保證輸入的正確性。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;DTO 對象：是負責承接數據的容器，不負責具體的業務，不包含任何邏輯，只是貧血對象&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;最重要的一點：因為 CQE 是」意圖「，所以 CQE 對象在理論上可以有」無限「個，每個代表不同的意圖；但是 DTO 作為模型數據容器，和模型一一對應，所以是有限的。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q:為什麼出參應該返回 DTO 而不是 Entity?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;這個是一個非常好的問題，筆者在 DDD 落地實踐的時候，筆者是這麼去想的：&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;穩定性思考：Entity 裏面通常會包含業務規則，如果 ApplicationService 返回 Entity，則會導致調用方直接依賴業務規則，如果內部規則變更可能直接影響到外部。&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;DTO 的不穩定性大於實體：業務經常會增加、改變一些字段，而實體的字段相對更加穩定，這也讓我們儘量在 application 層的出參去屏蔽實體&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;領域邊界穩定性：ApplicationService 的入參是 CQE 對象，出參是 DTO，這些基本上都屬於簡單的 POJO，來確保 Application 層的內外互相不影響。&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;通過 DTO 組合降低成本：Entity 是有限的，DTO 可以是多個 Entity、VO 的自由組合，一次性封裝成複雜 DTO，或者有選擇的抽取部分參數封裝成 DTO 可以降低對外的成本。&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Q:在上述的過程中，我們似乎只解決了 C、E 對象，我們應該如何針對 Query 進行處理？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;在實踐過程中，我們發現 Query 往往是複雜的、隨意的、且交付對象是異變的，因此如果強行將 Query 作為業務來嵌入我們的 DDD 中，簡直是自討苦吃——我們很難保證一個操作既是高效讀、又是高效寫、同時還要兼顧一致性。因此我們的解決思路是，針對 Query 採用傳統的開發模型，雖然不夠優雅、但是足夠有效，畢竟因為改動代碼，導致讀錯的成本實在是太小了。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;在實踐過程中，我們推薦使用調用鏈去儘量簡化、複用讀的場景，並且取得較好的實踐效果。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;應用層，因為我們操作的對象是 Entity，但是輸出的對象是 DTO，這裏就需要一個專屬類型的對象叫 DTO Assembler。DTO Assembler 的唯一職責是將一個或多個 Entity/VO，轉化為 DTO。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;注意：DTO Assembler 通常不建議有反操作，也就是&lt;/strong&gt;&lt;em&gt;&lt;strong&gt;不會從 DTO 到 Entity&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;，因為通常一個 DTO 轉化為 Entity 時是無法保證 Entity 的準確性的。&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;5.1.3&amp;nbsp;領域層&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;定義：領域層的作用是實現企業核心業務邏輯,通過各種校驗手段保證業務的正確性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;目的：領域層的目的是完成業務的核心邏輯,降低實體之間的依賴性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;構成結構&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;入參: 實體、聚合根、基礎的數據結構 (int、string......)......&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;出參：實體、聚合根、基礎的數據結構&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;內容：&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;a.應領域層包含聚合根、實體、值對象、領域服務等領域模型中的領域對象，主要體現領域模型的業務能力，它用來表達業務概念、業務狀態和業務規則。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;b.領域模型的業務邏輯主要是由實體和領域服務來實現的&lt;/strong&gt;&lt;/em&gt;，其中實體會採用充血模型來實現所有與之相關的業務功能。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;c.當領域中的某些功能，單一實體（或者值對象）不能實現時，我們就會將這樣的邏輯放在領域服務裏，&lt;/strong&gt;__&lt;strong&gt;通過領域服務組合聚合內的多個實體（或者值對象），實現複雜的業務邏輯&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;落地規範&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;a.避免領域事件的使用。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q:為什麼我們要避免進程內部的領域事件的使用？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;進程內的領域事件，會導致顯示的調度變成隱式，這種隱式的場景在測試階段很難發現問題，從而導致線上問題的產生。從迭代的發展來看，隱式的事件驅動對於我們設計一個好的代碼架構不是一件好事情，反而會大大提高代碼的複雜度！因此，我們要儘量去避免進程內部級別的事件驅動~&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;5.1.4&amp;nbsp;基礎設施層&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;定義：&lt;em&gt;&lt;strong&gt;基礎層是貫穿所有層的，它的作用就是為其它各層提供通用的技術和基礎服務&lt;/strong&gt;&lt;/em&gt;，包括第三方工具、驅動、消息中間件、網關、文件、緩存以及數據庫等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;目的：對業務提供最基本的服務&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;落地規範&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;a.比較常見的功能還是提供數據庫持久化&lt;/p&gt; 
&lt;p&gt;b.基礎層包含基礎服務，它採用依賴倒置設計，封裝基礎資源服務，實現應用層、領域層與基礎層的解耦，降低外部資源變化對應用的影響。&lt;/p&gt; 
&lt;h3&gt;5.1.5 Data flow direction（數據鏈路）&lt;/h3&gt; 
&lt;p&gt;在數據鏈路維度，我們來看 DDD 的數據流轉，可以更清晰地看出每一層之間的交互。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-9dee7244a7da8fbc9592919ffa82a7d3f60.jpg" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;數據持久化對象 PO(Persistent Object)，與數據庫結構一一映射，是數據持久化過程中的數據載體。&lt;/p&gt; 
&lt;p&gt;領域對象 DO（Domain Object），微服務運行時的實體，是核心業務的載體。&lt;/p&gt; 
&lt;p&gt;數據傳輸對象 DTO（Data Transfer Object），用於前端與應用層或者微服務之間的數據組裝和傳輸，是應用之間數據傳輸的載體。&lt;/p&gt; 
&lt;p&gt;視圖對象 VO（View Object），用於封裝展示層指定頁面或組件的數據。&lt;/p&gt; 
&lt;h3&gt;5.1.6 附錄：生產環境中項目結構&lt;/h3&gt; 
&lt;p&gt;目錄結構：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-5097fcffa71cd055242a7f2fef2732018dd.jpg" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;5.2 領域驅動 VS 數據驅動&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;5.2.1 對比&lt;/h3&gt; 
&lt;p&gt;傳統的接口-邏輯-數據訪問三層架構裏，往往是這麼個邏輯。&lt;/p&gt; 
&lt;p&gt;前幾行代碼做 validation，接下來做 convert，然後是業務處理邏輯的代碼，中間穿插着通過 RPC 或者 DAO 獲取更多的數據，拿到數據後，又是 convert 代碼，然後接着一段業務邏輯代碼，最後可能還要落庫，發消息等等。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;MVC 三層架構&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;用戶界面層（View/Controller）**負責用戶交互和界面展示，接收用戶輸入並傳遞至業務邏輯層，同時將處理結果返回給前端。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;業務邏輯層（Service）**包含核心業務邏輯，但常因過度集中而臃腫，容易成為「大泥球」。業務邏輯可能分散在多個 Service 類中，甚至通過 SQL 實現部分邏輯，導致耦合度高。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;數據訪問層（DAO）**直接操作數據庫，依賴 ORM 框架，與數據庫表結構緊密綁定。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-86b21cba1182376b823e71bc6d78b89aecb.jpg" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;MVC VS DDD：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-3b5f86f8a24a83b70c8e81a7e877562eead.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;5.2.2 轉化&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-6dbaa14bd6cd3dd8c0a0b10723cea84925b.jpg" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;三層架構向 DDD 分層架構演進，主要發生在業務邏輯層和數據訪問層。&lt;/p&gt; 
&lt;p&gt;DDD 分層架構在用戶接口層引入了 DTO，給前端提供了更多的可使用數據和更高的展示靈活性。&lt;/p&gt; 
&lt;p&gt;DDD 分層架構對三層架構的業務邏輯層進行了更清晰的劃分，改善了三層架構核心業務邏輯混亂，代碼改動相互影響大的情況。DDD 分層架構將業務邏輯層的服務拆分到了應用層和領域層。&lt;em&gt;&lt;strong&gt;應用層快速響應前端的變化，領域層實現領域模型的能力&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;另外一個重要的變化發生在數據訪問層和基礎層之間。三層架構數據訪問採用 DAO 方式；&lt;em&gt;&lt;strong&gt;DDD 分層架構的數據庫等基礎資源訪問，採用了倉儲（Repository）設計模式，通過依賴倒置實現各層對基礎資源的解耦&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;倉儲又分為兩部分：倉儲接口和倉儲實現。&lt;em&gt;&lt;strong&gt;倉儲接口放在領域層中，倉儲實現放在基礎層&lt;/strong&gt;&lt;/em&gt;。原來三層架構通用的第三方工具包、驅動、Common、Utility、Config 等通用的公共的資源類統一放到了基礎層。&lt;/p&gt; 
&lt;h3&gt;5.2.3 CQRS&lt;/h3&gt; 
&lt;p&gt;不得不提的 CQRS 結構（參考文檔：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fzh-cn%2Fazure%2Farchitecture%2Fpatterns%2Fcqrs%25EF%25BC%2589" target="_blank"&gt;https://learn.microsoft.com/zh-cn/azure/architecture/patterns/cqrs）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;簡介：CQRS 是「命令查詢責任分離」（Command Query Responsibility Segregation）的縮寫&lt;/p&gt; 
&lt;p&gt;定義：&lt;em&gt;&lt;strong&gt;CQRS 是一種設計模式，可將數據存儲的讀取和寫入操作隔離到單獨的數據模型中&lt;/strong&gt;&lt;/em&gt;。 此方法允許每個模型獨立優化，並可以提高應用程序的性能、可伸縮性和安全性&lt;/p&gt; 
&lt;p&gt;核心：將外部系統的輸入區分為：Cmd(包含 Event) 和 Qurey。&lt;/p&gt; 
&lt;p&gt;因為我們知道，在 DDD 的模式中，所有的操作都是以實體為基礎的，一個實體很有可能很大，涵蓋了多種數據來源組成。&lt;/p&gt; 
&lt;p&gt;那這裏就出現了一個問題，業務中需要出一個接口，查詢一個 account list，以 label value 的形式返回，我們該怎麼做？&lt;/p&gt; 
&lt;p&gt;是先通過一系列工廠校驗，拿到一個大實體，然後通過這個實體操作數據，拿到 account list，再處理成 dto 返回。&lt;/p&gt; 
&lt;p&gt;還是直接寫一個簡單的 mvc，查詢然後拿結果組裝返回。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;毫無疑問，我們選擇後者&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;這就是 CQRS，用比較粗糙的説法：我們建議在業務邏輯的寫入 Cmd(包含 Event) 用 DDD 來進行，也建議在業務邏輯的查詢 Query 用 MVC 來進行。&lt;/p&gt; 
&lt;p&gt;一切模型或者框架，都是為了簡化我們的工作，如果我們因為使用了某一種設計模式，而導致開發嚴重受限，那説明這種設計模式，並不適合我們。&lt;/p&gt; 
&lt;h1&gt;06 總結&lt;/h1&gt; 
&lt;p&gt;正如那句話説的，DDD 不是銀彈，它不能解決所有問題，但是我們在嘗試解決的路上，發現了這樣一種模式。&lt;/p&gt; 
&lt;h3&gt;07 彩蛋&lt;/h3&gt; 
&lt;p&gt;看到了這裏想必你的腦子裏現在全是實體、領域等等這些理論概念，已經忘記了文章一開始我們要幹什麼，這其實也是在落地 DDD 時一大痛點。那就讓我們不忘初心，再重新回顧和強調一下：我們的目的是要去寫一個好的代碼。&lt;/p&gt; 
&lt;p&gt;-----END-----&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;推薦閲讀&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592850%26idx%3D1%26sn%3D76f6451f3f149d210106dab1e036298c%26chksm%3Dc03f5beef748d2f8e47da9b2dec927af37b69d534958950e9bda1547645e2b9583acebd4335f%26scene%3D21%26token%3D1111915580%26lang%3Dzh_CN%23wechat_redirect" target="_blank"&gt;讀友好的緩存淘汰算法&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592618%26idx%3D1%26sn%3D61740f39ea744e00280c70b638622b91%26chksm%3Dc03f5ad6f748d3c02b964f5f2d5c1b716c38c98c630d4741f4b687821c33d52f16b2cc8de612%26scene%3D21%23wechat_redirect" target="_blank"&gt;如何定量分析 Llama 3，大模型系統工程師視角的 Transformer 架構&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592237%26idx%3D1%26sn%3D99dff8b8971f210c69ee50fa7383b9ee%26chksm%3Dc03f5951f748d0470163cdd13a5ce7d591a2054840fe8278ef7d5f4ba8ce7c374813ba823daf%26scene%3D21%23wechat_redirect" target="_blank"&gt;微服務架構革新：百度 Jarvis2.0 與雲原生技術的力量&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247591996%26idx%3D1%26sn%3Dc5b5f19bf8f26d43b923c953273fe8cf%26chksm%3Dc03f5840f748d156881e820c037d719ae43b8c5387a89f44300692dc0de9ad6d93b04a108dd2%26scene%3D21%23wechat_redirect" target="_blank"&gt;技術路線速通！用飛槳讓京劇人物照片動起來&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247591982%26idx%3D1%26sn%3D33db28d92148841f38b91779f2469101%26chksm%3Dc03f5852f748d1444e421bafb73dbe22f27614bf98131dd39091e53f9b7c3170dea0a39b1349%26scene%3D21%23wechat_redirect" target="_blank"&gt;無需業務改造，一套數據庫滿足 OLTP 和 OLAP，GaiaDB 發佈並行查詢能力&lt;/a&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4939618/blog/18449959</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/18449959</guid>
      <pubDate>Sat, 10 May 2025 03:05:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>螞蟻百靈團隊開源統一多模態大模型 Ming-lite-omni</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;螞蟻百靈大模型（Ling）團隊正式開源統一多模態大模型 Ming-lite-omni。&lt;/p&gt; 
&lt;p&gt;官方介紹稱，這是一款基於 Ling-lite 構建的 MoE 架構的全模態模型，其總參數 22B，激活參數 3B，在多項理解和生成能力評測中，性能與 10B 量級領先的多模態大模型相當或更優。這也是目前已知首個在模態支持方面能夠與 GPT-4o 相媲美的開源模型。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0529/110325_pcpa_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;另外，螞蟻百靈大模型團隊還將持續優化 Ming-lite-omni 在全模態理解和生成任務上的效果，並提升 Ming-lite-omni 的多模複雜推理能力；同時也會訓練更大尺寸的全模態模型 Ming-plus-omni， 以期進一步解決更多高度專業化或領域化的複雜交互問題。&lt;/p&gt; 
&lt;p&gt;Ming-lite-omni 當前模型權重和推理代碼已開源，後續會陸續開源訓練代碼和訓練數據。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GitHub:&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FinclusionAI%2FMing%2Ftree%2Fmain%2FMing-omni" target="_blank"&gt;https://github.com/inclusionAI/Ming/tree/main/Ming-omni&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hugging Face:&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2FinclusionAI%2FMing-Lite-Omni" target="_blank"&gt;https://huggingface.co/inclusionAI/Ming-Lite-Omni&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ModelScope:&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmodelscope.cn%2Fmodels%2FinclusionAI%2FMing-Lite-Omni" target="_blank"&gt;https://modelscope.cn/models/inclusionAI/Ming-Lite-Omni&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Project Page:&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flucaria-academy.github.io%2FMing-Omni%2F" target="_blank"&gt;https://lucaria-academy.github.io/Ming-Omni/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352489</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352489</guid>
      <pubDate>Sat, 10 May 2025 03:04:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>華為公佈「盤古 Pro MoE」混合專家模型</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;日前，華為盤古團隊正式公佈了昇騰原生的分組混合專家模型——「盤古 Pro MoE」。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0529/105705_hQ9O_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據盤古團隊介紹：&lt;/p&gt; 
&lt;p&gt;混合專家模型（MoE）在大語言模型（LLMs）中逐漸興起，該架構能夠以較低計算成本支持更大規模的參數，從而獲得更強的表達能力。這一優勢源於其稀疏激活機制的設計特點，即每個輸入 token 僅需激活部分參數即可完成計算。然而，在實際部署中，不同專家的激活頻率存在嚴重的不均衡問題，一部分專家被過度調用，而其他專家則長期閒置，導致系統效率低下。&lt;/p&gt; 
&lt;p&gt;為此，盤古團隊提出了新型的分組混合專家模型（Mixture of Grouped Experts, MoGE），其在專家選擇階段對專家進行分組，並約束 token 在每個組內激活等量專家，從而實現專家負載均衡，顯著提升模型在昇騰平台的部署效率。&lt;/p&gt; 
&lt;p&gt;據悉，盤古 Pro MoE 模型基於 MoGE 架構，團隊構建了總參數量 720 億、激活參數量 160 億，並針對昇騰 300I Duo 和 800I A2 平台進行系統優化。&lt;/p&gt; 
&lt;p&gt;性能表現上，盤古 Pro MoE 在昇騰 800I A2 上實現了單卡 1148 tokens/s 的推理吞吐性能，並可進一步通過投機加速等技術提升至 1528 tokens/s，顯著優於同等規模的 320 億和 720 億參數的稠密模型；在昇騰 300I Duo 推理服務器上，盤古團隊也實現了極具性價比的模型推理方案。&lt;/p&gt; 
&lt;p&gt;團隊研究表明，昇騰 NPU 能夠支持盤古 Pro MoE 的大規模並行訓練。多項公開基準測試結果表明，盤古 Pro MoE 在千億內總參數模型中處於領先地位。&lt;/p&gt; 
&lt;p&gt;從官方給出的對比表格來看，盤古 Pro MoE 與 Qwen3-32B、GLM-Z1-32B、Gemma3-27B、Llama4-Scout 對比，在中文、英文、推理等多個領域均有超越。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;模型技術報告（中文）：https://gitcode.com/ascend-tribe/pangu-pro-moe/blob/main/README.md&lt;/p&gt; 
&lt;p&gt;模型技術報告（英文）：https://arxiv.org/abs/2505.21411&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352487/ascend-tribe-pangu-pro-moe</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352487/ascend-tribe-pangu-pro-moe</guid>
      <pubDate>Sat, 10 May 2025 02:59:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
  </channel>
</rss>
