<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - industry - 繁體中文（台灣）</title>
    <link>https://www.oschina.net/news/industry</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/industry" rel="self" type="application/rss+xml"/>
    <description>已對該 RSS 進行格式化操作：中英字符之間插入空格、使用直角引號、標點符號修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-tw</language>
    <lastBuildDate>Fri, 15 Aug 2025 02:41:16 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>騰訊披露：有足夠芯片做 AI 訓練，不會過度依賴現有 GPU 資源</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;8 月 14 日消息，發佈 2025 年第二季度財報後，騰訊 8 月 13 日晚間召開業績交流會。最新財報中，AI 是一大關鍵詞。業績交流會上，騰訊管理層也重點談到 AI。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-4cad0ab684cbfa37c6f32ae12ee4ef14d57.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;騰訊管理層表示，公司密切關注 AI 開發進度，關注大模型性能演進，通過理解用戶需求和習慣改進 AI 產品，同時也着眼讓 AI 提高現有業務的效率，例如廣告、遊戲、金融科技。&lt;/p&gt; 
&lt;p&gt;對於 AI 運算依託的芯片，騰訊管理層表示，芯片進口的情況還需要觀察。騰訊目前有足夠的芯片來做訓練，並升級現有模型，推理方面則有不同的芯片選擇。在軟件方面，公司也會進一步改進，以提高推理效率，從而減少對芯片能力的依賴，騰訊會嘗試在相同數量的芯片上運行更多工作負載。&lt;/p&gt; 
&lt;p&gt;騰訊此前計劃增加今年的資本開支，用於支持 AI 相關的業務等。在第一季度資本開支同比增長 91% 的基礎上，第二季度資本開支同比增長 119% 至 191 億元。&lt;/p&gt; 
&lt;p&gt;騰訊管理層在業績交流會上表示，對於資本支出目標，公司尚未進行新的修改。更早前，國家網信辦就美國英偉達算力芯片 H20 漏洞後門安全風險約談該公司，也算是變相給國內公司採購時敲響警鐘。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366312</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366312</guid>
      <pubDate>Fri, 15 Aug 2025 02:30:14 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>馬斯克坦言谷歌 AI 領先，xAI 有望迎頭趕上</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;埃隆・馬斯克於發帖表示，承認谷歌在人工智能（AI）領域的領先地位，然而他也表示他的初創公司 xAI 有潛力迎頭趕上。馬斯克在回覆一位用戶時提到，雖然目前大型人工智能公司如谷歌依然佔據優勢，但他相信 xAI 同樣會在未來取得進展。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;img height="252" src="https://oscimg.oschina.net/oscnet/up-46d73a54149d046e698c4444a457f6034fd.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;馬斯克指出，谷歌在現實世界的人工智能應用中，擁有強大的計算能力和龐大的數據資源，這使得谷歌成為當前的領導者。他強調，谷歌在這些方面的優勢是顯而易見的，這使得他們在短期內很難被超越。然而，他也認為這種局面可能在未來幾年內會發生變化，暗示技術發展和市場競爭可能會給 xAI 帶來新的機會。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;在他的發帖中，馬斯克還表示，儘管當前競爭激烈，xAI 將繼續成長，並會在人工智能領域中扮演重要角色。他提到，「在可預見的未來，大型人工智能公司將繼續蓬勃發展，xAI 也是如此。有太多事情要做了!」 這句話反映出他對 xAI 未來發展的信心。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366311</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366311</guid>
      <pubDate>Fri, 15 Aug 2025 02:29:14 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>崑崙萬維上線 AI 音樂模型 Mureka V7.5</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;崑崙萬維集團&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fq61f8PeEhMzzLXUseQrY9A" target="_blank"&gt;宣佈&lt;/a&gt;正式上線 Mureka V7.5 模型。在為期五天的 SkyWork AI 技術發佈周內，崑崙萬維已推出了 SkyReels-A3、Matrix-Game2.0、Matrix-3D、Skywork UniPic2.0 和 Skywork Deep Research Agent 等模型。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;根據介紹，Mureka V7.5 的發佈是此次技術發佈周的壓軸之作，它在中文歌曲創作方面展現了卓越的能力。該模型不僅在音色和演奏技法上實現了大幅提升，還在咬字和情感表現上取得了顯著進步。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Mureka V7.5 憑藉對中文曲風和元素的深刻理解，能夠精準地傳達中文音樂的藝術神韻和情感色彩。它涵蓋了從傳統民歌、戲曲到經典華語流行金曲以及當代民謠音樂等多種風格，展現了中文音樂的多樣性與文化特性。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;為了進一步提升人聲表現的真實性與情感深度，Mureka V7.5 優化了自動語音識別（ASR）技術。這項技術深入到演唱的微觀層面，能夠精準識別唱詞，並分析真實演唱中的氣息運用、情感起伏和唱法細節。通過智能劃分樂句、確定自然的換氣與停頓位置，Mureka V7.5 顯著提升了生成人聲的段落清晰度與結構真實感。這些細節的捕捉反饋給生成模型後，極大地增強了人聲的自然度、呼吸感以及情感表達的真實性，有效削弱了機械感，使 AI 演繹的歌曲在流暢性上更貼近真人演唱，尤其在處理中文歌曲特有的韻律和氣息要求時表現出色。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="327" src="https://oscimg.oschina.net/oscnet/up-617d5b88f3dd7efb93d359c73f2fbc2725a.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;與此同時，崑崙萬維語音團隊還推出了 MoE-TTS——首個基於 Mixture of Experts（MOE）的角色描述語音合成框架。作為一項面向開放描述場景的研究性工作，MoE-TTS 能夠讓用戶通過自然語言描述精準控制聲音特徵與風格。即使僅使用開源數據，該技術在角色貼合度上也能對標甚至超越閉源商業產品。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;MoE-TTS 的推出有望解決描述性語音合成領域長期存在的難題，例如在面對比喻、類比等複雜修辭時，生成的語音往往偏離用戶預期。該框架結合了預訓練大語言模型 (LLM) 的文本能力和語音專家模塊，通過模態路由確保各模態獨立優化、互不幹擾，實現了「知識零損失」的泛化理解能力。在涵蓋域內與域外描述的雙測試集上，MoE-TTS 在風格表現力貼合度和整體貼合度等聲學控制上表現出色，展現了其在複雜描述匹配度上的優勢。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;MoE-TTS 的發佈不僅為學術界提供了可復現的開放描述 TTS 解決方案，也證明瞭模態解耦加知識凍結遷移的技術路徑在語音合成中的巨大潛力。這一突破有望推動行業從「封閉標籤式控制」走向「自然語言自由控制」的新範式，加速數字人、虛擬助手和沉浸式內容創作的體驗升級。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;目前，MoE-TTS 仍在迭代中，後續計劃將其集成至 Mureka-Speech 平台，作為角色配音的基座模型，為全球開發者和創作者提供開放、高效、可定製的描述性語音合成能力。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366306</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366306</guid>
      <pubDate>Fri, 15 Aug 2025 02:18:14 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>微軟高管：下一代 Windows 深度整合 AI，實現多模態交互</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;微軟 Windows 負責人 Pavan Davuluri 近日在採訪中&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.windowscentral.com%2Fmicrosoft%2Fwindows-11%2Fmicrosoft-teases-windows-12-next-version-os-agentic-ai-ambient-computing-copilot" target="_blank"&gt;闡述&lt;/a&gt;了操作系統的發展願景，強調 AI 將深度融入計算體驗，推動交互方式革新。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0814/193722_X7Xj_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;他表示，未來的 Windows 將更具「環境感」，通過語音、語義理解等多模態技術，實現更自然的操作。例如，用戶可直接通過語音與電腦對話，系統能理解上下文並智能響應。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-86cbf23e01e3a3048f8eb1c6388e1214b14.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;微軟此前發佈的《Windows 2030 Vision》視頻也提到，語音輸入將成為重點，逐步超越傳統鍵鼠操作。&lt;/p&gt; 
&lt;p&gt;此外，Davuluri 透露，AI 智能體的引入將徹底改變 Windows 界面，未來五年可能推出從底層整合 AI 的新系統，如 Windows 12。 儘管語音交互可能需適應期，但微軟認為，結合雲計算與本地計算的無縫體驗，AI 驅動的操作系統將重塑人機交互方式。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366239</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366239</guid>
      <pubDate>Tue, 12 Aug 2025 11:38:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Siri 迄今為止最大的升級計劃：「Linwood」和「Glenwood」亮相</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;蘋果正在開發兩項重要的人工智能計劃，&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fappleinsider.com%2Farticles%2F25%2F08%2F13%2Fsiris-biggest-upgrade-yet-takes-shape-with-linwood-glenwood" target="_blank"&gt;代號為 Linwood 和 Glenwood&lt;/a&gt;，這是一項全面計劃的一部分，旨在讓蘋果在生成人工智能時代變得更加強大和具有競爭力。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0814/192600_Yrmu_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;其中 Linwood 是蘋果自主研發的核心項目，由 Apple Foundation Models 團隊構建大語言模型，全面重構 Siri 的「大腦」。該系統能理解複雜語義、維持多輪對話，並有望首次安全調用用戶個人數據提供個性化建議。&lt;/p&gt; 
&lt;p&gt;蘋果軟件主管克雷格・費德里吉透露，該項目為「端到端的徹底重建」，承認舊架構已落後，升級後的 Siri 將從被動響應轉向主動服務，將集成於 iPhone、iPad 及未來智能家居設備。&lt;/p&gt; 
&lt;p&gt;與之並行的 Glenwood 項目則代表戰略轉向：蘋果打破蘋果長期依賴自研技術的傳統，正測試使用 Anthropic 的 Claude 作為 Siri 核心引擎，並曾評估 ChatGPT 與谷歌 Gemini。&lt;/p&gt; 
&lt;p&gt;該項目由前 Vision Pro 負責人 Mike Rockwell 統一領導，公司尚未決定採用純自研、第三方或混合方案，選擇 Linwood 可強化隱私與系統整合優勢，而引入外部 AI 則可能加速追趕競爭對手。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366235</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366235</guid>
      <pubDate>Tue, 12 Aug 2025 11:26:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>賽昉推出 RISC-V 開發板 VisionFive 2 Lite，售價約 143 元</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;中國 RISC-V 企業賽昉科技 StarFive 在眾籌平台 Kickstarter 推出了一款入門級 RISC-V 開發板 VisionFive 2 Lite。&lt;/p&gt; 
&lt;p&gt;這款單板計算機採用與樹莓派相同的 85mm×56mm 外形規格，定價最低的 2GB 內存版本僅售 19.9 美元（約合 143 元人民幣）。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-30475d153e4565154d5c7f8d8d3ffd4bb27.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-e209ba50acc1392efe86e0ad5c2228c7a70.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;VisionFive 2 Lite 搭載 2GB / 4GB / 8GB LPDDR4 內存，正面提供了 1 組 40-Pin GPIO、3 個 USB-A 480Mbps、1 個 USB-A 3.0/2.0、1 個僅供電 USB-C、1 個 MIPI-CSI、1 個 MIPI-DSI、1 個 HDMI 2.0、1 個 RJ45 1GbE；反面則包含 1 個 microSD 卡槽和&amp;nbsp;1 個 M.2 2242 PCIe 2.0×1 盤位。&lt;/p&gt; 
&lt;p&gt;賽昉 VisionFive 2 Lite 開發板的&amp;nbsp;2GB 內存版本眾籌價 19.9 美元；2GB 內存 + Wi-Fi / BT 無線芯片版本 23 美元；4GB 內存 + 無線芯片版本 30 美元；8GB 內存 + 無線芯片版本 37 美元；8GB 內存 + 64GB eMMC 閃存 + 無線芯片版本 45 美元。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366232</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366232</guid>
      <pubDate>Tue, 12 Aug 2025 11:13:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Kaisen Linux 發佈最後一次功能更新，作者宣佈項目結束</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;Kaisen Linux 是一個面向 IT 專業人士的發行版，特點是提供一套專門的系統管理工具，涵蓋了診斷、處理系統和組件的故障等等所有需求，以及眾多其他的功能。它支持多種桌面環境，包括 KDE Plasma、LXQt、MATE 和 Xfce，並且有一個獨特的 「toram」 模式，可以將整個操作系統加載到內存中，從而方便用戶在無硬盤環境中使用。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-f74f49a86a23591fe9996e36cedc385edf8.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Kaisen Linux 開發者 Kevin Chevreuil&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkaisenlinux.org%2Fblog%2Fkaisenlinuxrolling3.0.php"&gt;宣佈&lt;/a&gt;，這個專為 IT 專業人士設計的 Linux 發行版即將停止維護。&lt;/p&gt; 
&lt;p&gt;在 Rolling 3.0 版本的發佈中，Chevreuil 提到，由於新的個人和職業項目佔據了大量時間，他無法繼續開發 Kaisen Linux，這個版本將成為項目的絕唱。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0814/184928_bSsO_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在 Rolling 3.0 中，Kaisen Linux 基於最新發布的 Debian Trixie（Debian 13），Chevreuil 對軟件包列表進行了精簡，移除了包括 neofetch、dmraid、hping3 和 reiser4progs 等在內的多個工具。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-f31ae240967ec66730b2dec919d0a87acbc.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;此外，該版本將 KDE Plasma 6 設為默認桌面環境，並用 SDDM 替換了 LightDM 顯示管理器，其他更新包括：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;apt upgrade 命令現在重定向到 apt full-upgrade，以防止系統損壞。&lt;/li&gt; 
 &lt;li&gt;新增 kaisen-timeshift-fast-restore 命令，允許用戶通過一條命令恢復 BTRFS 快照。&lt;/li&gt; 
 &lt;li&gt;ZFS 管理工具和內核模塊現在得到完全支持。&lt;/li&gt; 
 &lt;li&gt;中央化的手冊頁面現在包含超過 1705 頁，修復了鏈接並新增了分類。&lt;/li&gt; 
 &lt;li&gt;安裝程序的自動分區現在只提供 / 和 /home 的分離，以保護快照功能。&lt;/li&gt; 
 &lt;li&gt;GPG 密鑰已更新，有效期至 2029 年。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Kaisen Linux 將繼續提供長達兩年的安全更新支持&lt;/strong&gt;。Chevreuil 表示，這將為用戶提供足夠的時間來遷移到新的系統。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366231</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366231</guid>
      <pubDate>Tue, 12 Aug 2025 10:55:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>vivo Pulsar 萬億級消息處理實踐（4）-Ansible 運維部署</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;blockquote&gt; 
 &lt;p&gt;作者：Liu Sikang、互聯網大數據團隊-Luo Mingbo&lt;/p&gt; 
 &lt;p&gt;Pulsar 作為下一代雲原生架構的分佈式消息中間件，存算分離的架構設計能有效解決大數據場景下分佈式消息中間件老牌一哥"Kafka"存在的諸多問題，2021 年 vivo 分佈式消息中間件團隊正式開啓對 Pulsar 的調研，2022 年正式引入 Pulsar 作為大數據場景下的分佈式消息中間件，本篇文章主要從 Pulsar 運維痛點、Ansible 簡介、Ansible 核心模塊詳解、Ansible 自動化部署 zk 集羣、Ansible 自動化部署 Pulsar 集羣幾個維度向大家介紹 vivo Pulsar 萬億級消息處理實踐之運維部署。&lt;/p&gt; 
 &lt;p&gt;注：本文是《vivo Pulsar 萬億級消息處理實踐》系列文章第 4 篇。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;1 分鐘看圖掌握核心觀點👇&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//99d2e2b2667e8f57cfab5dd3873106b2.gif" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;1、簡介&lt;/h1&gt; 
&lt;h2&gt;1.1 Pulsar 運維面臨的問題&lt;/h2&gt; 
&lt;p&gt;新業務增長快，很多新業務接入需要搭建獨立的集羣或者資源組。&lt;/p&gt; 
&lt;p&gt;升級頻次高，對於 bug 修復，配置更改以及依賴組件替換等，都需要對全集羣進行升級、配置更改或組件替換。&lt;/p&gt; 
&lt;p&gt;人力投入大，在集羣運維時，需要對公共的執行步驟進行批處理封裝，否則會耗費大量人力在集羣的部署和升級上。&lt;/p&gt; 
&lt;h2&gt;1.2 什麼是 Ansible Playbook&lt;/h2&gt; 
&lt;p&gt;Asnible Playbooks 是 Ansible 自動化工具的核心部分。它是基於 YAML 文件格式，用於在多個主機上執行的任務。通過在 Playbook 中設置變量、處理器、角色和任務標籤等功能，可以大大提高自動化腳本的複用性和可維護性。可以理解為批處理任務。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//dac2881aeee293b2e482bf5893266acf.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上圖中我們看到 Playbook 的主要模塊如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ansible&lt;/strong&gt;：Ansible 的核心程序。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;HostInventory&lt;/strong&gt;：記錄由 Ansible 管理的主機信息，包括端口、密碼、ip 等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Playbooks&lt;/strong&gt;："劇本" YAML 格式文件，多個任務定義在一個文件中，定義主機需要調用哪些模塊來完成的功能。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;CoreModules&lt;/strong&gt;：核心模塊，主要操作是通過調用核心模塊來完成管理任務。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;CustomModules&lt;/strong&gt;：自定義模塊，完成核心模塊無法完成的功能，支持多種語言。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ConnectionPlugins&lt;/strong&gt;：連接插件，Ansible 和 Host 通信使用。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;2、Playbook 語法&lt;/h1&gt; 
&lt;h2&gt;2.1 書寫格式&lt;/h2&gt; 
&lt;p&gt;playbook 常用到的 YMAL 格式：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;文件的第一行應該以 "---" (三個連字符) 開始，表明 YMAL 文件的開始。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在同一行中，# 之後的內容表示註釋，類似於 shell，python 和 ruby。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;YMAL 中的列表元素以 "-" 開頭然後緊跟着一個空格，後面為元素內容。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;同一個列表中的元素應該保持相同的縮進。否則會被當做錯誤處理。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;play 中 hosts，variables，roles，tasks 等對象的表示方法都是鍵值中間以 ":" 分隔表示，":" 後面還要增加一個空格。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;以下是 Playbook 的基本語法書寫格式：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;- name: playbook 的名稱
  hosts: 目標主機或主機組     # 可以使用普通的 IP 地址或域名，也可以使用主機組名稱
  remote_user: 遠程用戶        # 使用 SSH 登錄遠程主機時使用的用戶名
  become: yes                # 是否使用特權（例如 sudo）運行命令
  tasks:                     # Playbook 中的任務列表
     - name: 任務名稱
       module_name: 參數       # Ansible 模塊的名稱和參數組成的字典，用於執行操作
       tags:                    # 與該任務相關的標記列表，用於執行特定的任務
         - 標籤名稱
       when: 條件             # 指定該任務在滿足特定條件下才會被執行
       notify: 通知列表       # 指定依賴於該任務的另一個任務列表，當這個任務被執行後會自動觸發這些任務
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;2.2 Tasks &amp;amp; Modules&lt;/h2&gt; 
&lt;p&gt;在 Ansible Playbook 的語法中，&lt;/p&gt; 
&lt;p&gt;"Tasks"和"Modules"是兩個核心概念。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tasks（任務）&lt;/strong&gt;：Tasks 是 Playbook 中的操作步驟或任務，它們定義了要在目標主機上執行的操作。可以在 Playbook 中定義一個或多個任務。Tasks 按照順序執行，並且可以有條件地執行或跳過。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Modules（模塊）&lt;/strong&gt;：Modules 提供了執行特定任務的功能單元。每個模塊負責處理不同的操作，如管理文件、安裝軟件包、查詢系統信息等。Ansible 提供了許多內置模塊，可以滿足大多數常見的操作。&lt;/p&gt; 
&lt;p&gt;通過組合不同的模塊和任務，可以構建複雜的 Playbooks 來執行各種操作和配置任務。&lt;/p&gt; 
&lt;h2&gt;2.3 任務之間的依賴關係&lt;/h2&gt; 
&lt;p&gt;在 Ansible 的 playbook 中，任務之間可以有依賴關係，你可以使用 dependencies 或者 notify 語句來定義。&lt;/p&gt; 
&lt;h3&gt;2.3.1 使用 dependencies 定義任務依賴關係&lt;/h3&gt; 
&lt;p&gt;如果任務 A 依賴任務 B 完成，可以使用 dependencies 定義任務依賴關係，語法如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;- hosts: web
  tasks:
    - name: Install Nginx
      yum:
        name: nginx
        state: present

    - name: Start Nginx
      service:
        name: nginx
        state: started
      become: true
      dependencies:
        - Install Nginx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在上面的示例中，Start Nginx 任務在 Install Nginx 任務完成之後才會執行。如果在執行 Start Nginx 任務之前，Install Nginx 任務未完成或者執行失敗，則 Start Nginx 任務也會失敗。&lt;/p&gt; 
&lt;h3&gt;2.3.2 使用 notify 定義任務依賴關係&lt;/h3&gt; 
&lt;p&gt;如果任務 A 完成後需要通知任務 B 執行，可以使用 notify 定義任務依賴關係，語法如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;- hosts: web
  tasks:
    - name: Install Nginx
      yum:
        name: nginx
        state: present
      notify:
        -Start Nginx
         
    - name: Start Nginx
      service:
        name: nginx
        state: started
      become: true
      listen: Start Nginx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在上面的示例中，Install Nginx 任務完成後會通知 Start Nginx 任務執行。然後 Start Nginx 任務會通過 listen 參數監聽，等待通知執行。&lt;/p&gt; 
&lt;p&gt;總之，Ansible 支持在 playbook 中定義任務之間的依賴關係。你可以使用 dependencies 或 notify 語句來定義任務之間的順序和依賴關係。&lt;/p&gt; 
&lt;h2&gt;2.4 條件判斷&lt;/h2&gt; 
&lt;p&gt;在 Playbook 中，可以使用 when 關鍵字來添加條件判斷。when 關鍵字後面跟一個條件表達式，如果表達式返回 True，則任務會被執行；如果返回 False，則任務會被跳過。&lt;/p&gt; 
&lt;p&gt;條件表達式可以使用 Ansible 的 Jinja2 模板來編寫，例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;tasks:
  - name: Install Apache if not installed
    package:
      name: apache2
      state: present
    when: ansible_pkg_mgr == 'apt'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在這個例子中，如果 ansible_pkg_mgr 變量等於"apt"，則安裝 Apache；否則跳過這個任務。&lt;/p&gt; 
&lt;p&gt;除了使用任務級別的條件判斷，還可以使用 Play 級別的條件判斷來控制整個 Playbook 的執行。這可以通過在 Play 的開始處添加 when 關鍵字來實現，例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;- name: Deploy Web App
  hosts: all
  vars:
    deploy_web_app: true
  tasks:
    - name: Install Dependencies
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - python3
        - python3-pip
      when: deploy_web_app
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在這個例子中，deploy_web_app 變量的值為 True 時，才會執行任務 Install Dependencies。如果 deploy_web_app 變量的值為 False，則跳過整個 Playbook 的執行。&lt;/p&gt; 
&lt;h2&gt;2.5 循環&lt;/h2&gt; 
&lt;p&gt;在 Playbook 中，可以使用循環結構來遍歷列表或其他可迭代對象，並對每個迭代項執行相同的任務。這可以使用 Ansible 的 with_*系列模塊來實現。&lt;/p&gt; 
&lt;p&gt;以下是一些常見的循環結構的示例：&lt;/p&gt; 
&lt;h3&gt;2.5.1 使用 with_items 模塊來遍歷列表&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;tasks:
  - name: Install packages
    apt:
      name: "{{ item }}"
      state: present
    with_items:
      - python3
      - python3-pip
      - git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在這個例子中，將依次安裝 python3、python3-pip 和 git。&lt;/p&gt; 
&lt;h1&gt;3、Playbook 組織&lt;/h1&gt; 
&lt;h2&gt;3.1 Inclusions&lt;/h2&gt; 
&lt;p&gt;在 Playbook 的組織中，include 和 import 兩個指令都可以用來將其他的 yaml 文件（也就是 Tasks 文件）包含到當前的 Playbook 中。&lt;/p&gt; 
&lt;p&gt;它們的區別在於，當主 Playbook 執行到 include 指令時，它將處理包含的文件中的所有任務，並且在處理完之後繼續主 Playbook 的執行。而當主 Playbook 執行到 import 指令時，它只會處理被導入的文件中的變量定義，而不會處理任務，任務只有在需要的時候才會被引入執行。&lt;/p&gt; 
&lt;p&gt;下面是一個使用 include 指令包含其他文件的例子：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;- hosts: webservers
  tasks:
    - name: Include web tasks
      include: web-tasks.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在這個例子中，主 Playbook 從 web-tasks.yml 文件中導入任務，並在執行完後繼續執行餘下的任務。&lt;/p&gt; 
&lt;p&gt;下面是一個使用 import 指令包含其他文件的例子：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;- name: Load variables
  import_vars: vars.yml

- name: Deploy web app
  hosts: webservers
  tasks:
    - name: Install dependencies
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - python3
        - python3-pip

    - name: Deploy app
      include: app-tasks.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在這個例子中，在主 Playbook 中使用 import_vars 指令來導入變量定義，然後在每個任務中都可以使用這些變量。然後我們使用 include 指令從 app-tasks.yml 文件中包含任務，這些任務可以使用在 vars.yml 文件中定義的變量。這種方式可以在需要時懶加載任務，提高性能。&lt;/p&gt; 
&lt;p&gt;需要注意的是，在被引入的文件中，不能再次使用- hosts:指令定義新的主機組，因為 Ansible 只允許在主 Playbook 中定義主機組。被引入的文件只包含任務，任務必須使用被定義的主機組來指定目標主機。&lt;/p&gt; 
&lt;h2&gt;3.2 Roles&lt;/h2&gt; 
&lt;p&gt;Ansible 的 Roles 是一種組織 Playbook 的方式，它將 Playbook 和相關的變量、模板和其他資源打包在一起，並且可以輕鬆地在 Playbook 中重用和分享。一個 Role 通常適用於一種操作或功能，比如安裝和配置一個應用程序、部署 Web 服務、安裝軟件包等等。&lt;/p&gt; 
&lt;p&gt;一個 Role 目錄通常包含以下文件和目錄：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;my-role/
├── README.md
├── defaults/
│   └── main.yml
├── files/
├── handlers/
│   └── main.yml
├── meta/
│   └── main.yml
├── tasks/
│   └── main.yml
├── templates/
├── tests/
│   ├── inventory
│   └── test.yml
└── vars/
    └── main.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;README.md&lt;/strong&gt;：Role 的説明文檔。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;defaults/main.yml&lt;/strong&gt;：默認變量定義文件。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;files&lt;/strong&gt;：包含角色使用的文件。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;handlers/main.yml&lt;/strong&gt;：Role 的處理程序。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;meta/main.yml&lt;/strong&gt;：Role 的元數據，例如角色名稱、作者、依賴等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;tasks/main.yml&lt;/strong&gt;：包含 Role 組成部分的主要任務。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;templates&lt;/strong&gt;：包含角色使用的 Jinja2 模板。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;tests&lt;/strong&gt;：Role 的測試腳本。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;vars/main.yml&lt;/strong&gt;：包含 Role 的變量。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;要使用 Role，需要在 Playbook 中定義 roles 擴展，例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;- hosts: webservers
  roles:
    - my-role
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;這將運行 my-role 目錄中包含的所有任務。&lt;/p&gt; 
&lt;p&gt;通過使用 Role，可以更好地組織和重複使用代碼，並提高代碼的可讀性和可維護性。它還可以幫助您在 Ansible 社區中分享自己的工作，或從其他用戶那裏獲得高質量的 Roles。&lt;/p&gt; 
&lt;h2&gt;3.3 引用/定義變量&lt;/h2&gt; 
&lt;p&gt;在 Playbook 中，可以使用 vars 關鍵字來定義變量。例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;vars:
  my_var: "Hello World"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;這將定義一個名為 my_var 的變量，其值為字符串"Hello World"。&lt;/p&gt; 
&lt;p&gt;要在 Playbook 中訪問這個變量，可以使用{{ my_var }}語法。例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;tasks:
  - name: Print Message
    debug:
      msg: "{{ my_var }}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;除了在 vars 中定義變量，還可以通過 set_fact 模塊來動態設置變量。例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;tasks:
  - name: SetDynamic Variable
    set_fact:
      my_var: "{{ inventory_hostname }} is awesome"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3.4 使用插件和模板&lt;/h2&gt; 
&lt;p&gt;Ansible 提供了插件和模板的功能，使得在 Playbook 中使用動態內容變得更加簡單和方便。&lt;/p&gt; 
&lt;p&gt;插件是一種可以擴展和定製 Ansible 功能的機制，可以在 Playbook 中調用和使用。常見的插件包括 Action、Lookup、Filter、Callback 等。使用插件和模板可以使 Playbook 更加具有可讀性和可維護性，使得動態內容的生成更加靈活和方便。&lt;/p&gt; 
&lt;h1&gt;4、服務安裝與主機管理&lt;/h1&gt; 
&lt;h2&gt;4.1 安裝服務器依賴&lt;/h2&gt; 
&lt;p&gt;Playbook 是 Ansible 的核心組件之一，用於定義和執行一系列任務。在使用 Playbook 之前，需要確保服務器上已經安裝了 Ansible 和相關的依賴項。以下是安裝服務器依賴的步驟：&lt;/p&gt; 
&lt;h3&gt;4.1.1 安裝 Python3 及其相關依賴項&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt-get install -y python3 python3-pip python3-dev build-essential libssl-dev libffi-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;4.1.2 安裝 Ansible&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt-add-repository ppa:ansible/ansible
sudo apt update
sudo apt-get install -y ansible
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;4.1.3 （可選）安裝 git&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt-get install -y git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;4.1.4 檢查 Ansible 是否安裝&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;ansible --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;這樣，您的服務器就已經安裝了所需的依賴項以及 Ansible。如果您計劃在多台服務器上使用 Ansible，則需要在每台服務器上重複這些步驟。&lt;/p&gt; 
&lt;h2&gt;4.2 配置遠程服務器&lt;/h2&gt; 
&lt;p&gt;在使用 Playbook 配置遠程服務器之前，需要確保 Ansible 已經正確安裝在本地機器上。然後，您需要做以下幾個步驟：&lt;/p&gt; 
&lt;h3&gt;4.2.1 創建 inventory 文件&lt;/h3&gt; 
&lt;p&gt;創建新的 inventory 文件，用於定義您要配置的遠程服務器的 IP 地址或域名。例如，您可以創建一個名為 inventory 的文件，幷包含以下內容：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[webservers]
192.168.1.100
192.168.1.101

[dbservers]
192.168.1.102
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在此示例中，我們定義了兩個組，webservers 和 dbservers，並列出了它們中每個服務器的 IP 地址。&lt;/p&gt; 
&lt;h3&gt;4.2.2 編寫 Playbook&lt;/h3&gt; 
&lt;p&gt;編寫一個 Playbook，用於在遠程服務器上執行特定的任務。例如，您可以創建一個名為 web.yml 的 Playbook，幷包含以下內容：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;- name: Install andstart Nginx
  hosts: webservers
  become: true
  tasks:
  - name: Install Nginx
    apt:
      name: nginx
      update_cache: yes
      state: latest
  - name: Start Nginx
    service:
      name: nginx
      state: started
      enabled: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在這個 Playbook 示例中，我們定義了一個名為 Install and start Nginx 的任務，它會在 webservers 組中的服務器上啓動 Nginx 服務器。&lt;/p&gt; 
&lt;h3&gt;4.2.3 運行 Playbook&lt;/h3&gt; 
&lt;p&gt;運行 Playbook，在遠程服務器上執行配置任務。例如，要在遠程服務器上運行示例中的 web.yml Playbook，可以使用以下命令：&lt;/p&gt; 
&lt;p&gt;ansible-playbook -i inventory web.yml&lt;/p&gt; 
&lt;p&gt;在執行此命令後，Ansible 將使用 inventory 文件中定義的遠程服務器的 IP 地址，並執行 web.yml Playbook 中定義的任務。&lt;/p&gt; 
&lt;p&gt;這是一個基本的 Playbook 配置遠程服務器的示例。需要根據具體的場景和任務需求來進行個性化配置和修改。&lt;/p&gt; 
&lt;h2&gt;4.3 部署應用程序&lt;/h2&gt; 
&lt;p&gt;Playbook 部署應用程序一般步驟：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;1、準備應用程序的部署包。這通常是一個.tar.gz 或.zip 文件，包含應用程序代碼、依賴項和其他必要文件。
2、在目標主機上安裝所需的依賴項和軟件包。例如，在部署 Python 應用程序時，需要安裝 Python 解釋器、pip 和其他依賴項。
3、創建一個目錄用於應用程序的部署。這通常是在目標主機上的一個新目錄，例如/home/user/myapp。
4、上傳應用程序部署包到目標主機並解壓縮。您可以使用 copy 模塊將部署包部署到目標主機上。
5、配置應用程序的運行環境。例如，在部署 Flask 應用程序時，需要設置環境變量、安裝必要的 Python 包等。
6、配置 Web 服務器以偵聽應用程序的請求。例如，您可以使用 Nginx 或 Apache 等 Web 服務器來代理應用程序請求。
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;5、常用模塊的 playbook 語法&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;file 模塊&lt;/strong&gt;：可以管理文件系統中的文件和目錄。下面是該模塊的常用參數：&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;copy 模塊&lt;/strong&gt;：可以將本地文件複製到遠程服務器上。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;unarchive 模塊&lt;/strong&gt;：Ansible 中用於將壓縮文件解壓縮的模塊。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;apt 模塊&lt;/strong&gt;：可以在 Ubuntu 或 Debian 系統上安裝、升級、刪除軟件包。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;service 模塊&lt;/strong&gt;：可以在系統上管理服務。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;user 模塊&lt;/strong&gt;：可以管理系統用戶。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;shell 模塊&lt;/strong&gt;：可以在遠程服務器上運行基於命令行的任務。該模塊只能運行命令，不能使用管道、重定向和通配符。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;script 模塊&lt;/strong&gt;：可以將本地腳本或可執行文件上傳到遠程服務器並在遠程服務器上運行。該模塊適用於運行復雜的命令和複雜的腳本。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;template 模塊&lt;/strong&gt;：可以將在 Ansible 中定義的 Jinja2 模板應用於遠程服務器上的文件。在應用模板時，您可以使用變量來一次生成多個文件的不同版本。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;lineinfile 模塊&lt;/strong&gt;：可以從文件中添加、修改或刪除單行文本。該模塊可用於修改文件中的配置文件或語言文件，或添加新行。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;blockinfile 模塊&lt;/strong&gt;：可以在遠程服務器文件中添加、修改或刪除代碼塊。該模塊可以替代 lineinfile 模塊，以單個塊更新文件。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;debug 模塊&lt;/strong&gt;：可以輸出調試信息。該模塊在編寫 Playbooks 時非常有用，因為可以檢查任務的變量和結果。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;6、Ansible 部署 Pulsar 集羣運維實戰&lt;/h1&gt; 
&lt;h2&gt;6.1 部署 zookeeper 集羣&lt;/h2&gt; 
&lt;h3&gt;6.1.1 定義 host 文件&lt;/h3&gt; 
&lt;p&gt;host 文件指定了要在哪些主機上執行任務。在 playbook 中，可以將 hosts 指定為一個變量，也可以通過 -i 參數指定一個主機清單文件，該文件包含要操作的主機列表。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[all:vars]
ansible_ssh_user=xxx
ansible_ssh_pass=xxx

[zk]
127.xxx.xxx.1 myid=1
127.xxx.xxx.2 myid=2
127.xxx.xxx.3 myid=3
127.xxx.xxx.4 myid=4
127.xxx.xxx.5 myid=5
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;6.1.2 定義變量&lt;/h3&gt; 
&lt;p&gt;group_vars 目錄用於存放針對不同主機組的變量文件，其中 all 文件是一種特殊的變量文件，它包含了全局的變量定義，將適用於所有主機組。路徑結構如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;group_vars/
├── all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在 all 文件中，我們可以定義安裝路徑、JDK 版本為、zookeeper 版本以及 zookeeper 相關的配置信息。比如：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;inst_home: /opt/bigdata/inst
app_home: /opt/bigdata/app
zk_inst_home: zookeeper-3.6.3
zk_app_home: zookeeper
jdk_inst_home: jdk1.8.0_192
jdk_app_home: jdk
jdk_tgz: jdk1.8.0_192.tar.gz
zk_tgz: zookeeper-3.6.3.tar.gz

cluster_name=clusterName
client_port=2181
server_port1=2881
server_port2=2882
jmx_port=9012
admin_port=18080
dataDir="/data/bigdata/zookeeper_{{cluster_name}}/zkDataDir"
dataLogDir="/data/bigdata/zookeeper_{{cluster_name}}/zkDataLogDir"
zoo_log_dir="/opt/bigdata/inst/zookeeper-3.6.3-{{cluster_name}}/logs/"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;6.1.3 編輯 roles 模塊&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;① check_port：檢查端口&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;判斷配置的端口是否被佔用，如果被佔用，則不能執行後續的步驟。&lt;/p&gt; 
&lt;p&gt;目錄結構如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;check_port/
├── tasks/
│   └── main.yml
main.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;#循環檢查端口是否是停用狀態&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;- name: Check port
  wait_for:
    host: "{{ inventory_hostname }}"
    port: "{{ item }}"
    delay: 2
    timeout: 3
    state: stopped
  register: result
  with_items:
    - "{{ client_port }}"
    - "{{ server_port1 }}"
    - "{{ server_port2 }}"
    - "{{ jmx_port }}"
    - "{{ admin_port }}"

- name: print result
  debug:
    msg: "Port {{ item.item }} is {{ item.state }}"
  with_items: "{{ result.results }}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;② dispatch_zk：分發安裝包&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;目錄結構如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;dispatch_zk/
├── files/
│   └── zookeeper-3.6.3.tar.gz
├── tasks/
│   └── main.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;files：放 zookeeper 安裝包文件。&lt;/p&gt; 
&lt;p&gt;main.yml&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#分發 zk 安裝包並解壓到/tmp 路徑下
- name: dispatch_zk
  unarchive:
    src: "{{zk_tgz}}"
    dest: "/tmp"
    mode: 755
    owner: root
    group: root
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;③ config_zk：配置 zookeeper&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;目錄結構如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;config_zk/
├── tasks/
│   └── main.yml
├── templates/
│   └── zoo.cfg
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;main.yml&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#zoo.cfg 模板文件應用到指定的路徑下
- name: zoo.cfg
  template:
    src: zoo.cfg
    dest: "{{ app_home }}/zk-{{ cluster_name }}/conf"
#創建 zoo_log_dir 目錄
- name: mkdir forlog
  shell: mkdir -p "{{zoo_log_dir}}"

#創建 zk 數據目錄
- name: mkdir for dataDir
  shell: mkdir -p "{{dataDir}}"

#創建 zk 日誌目錄
- name: mkdir for dataLogDir
  shell: mkdir -p "{{dataLogDir}}"

#myid 文件中輸入每台主機的編號
- name: myid file
  shell: echo "{{myid}}" &amp;gt; {{dataDir}}/myid
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;zoo.cfg：zookeeper 配置文件模板。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;tickTime=2000
initLimit=10
syncLimit=5
maxClientCnxns=65535
autopurge.snapRetainCount=30
autopurge.purgeInterval=48
clientPort={{client_port}}
admin.serverPort={{admin_port}}
dataDir={{dataDir}}
dataLogDir={{dataLogDir}}
{% for host in groups.zk%}
server.{{ hostvars[host]['myid'] }}={{host}}:{{server_port1}}:{{server_port2}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;④ deploy_zk：部署 zookeeper 服務&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;目錄結構如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;deploy_zk/
├── files/
│   └── env.sh
│   └── jdk1.8.0_192.tar.gz
├── tasks/
│   └── main.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;env.sh：jdk 環境變量配置&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;JAVA_HOME=/opt/bigdata/app/jdk
JRE_HOME=$JAVA_HOME/jre
PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH
CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib/rt.jar:$CLASSPATH
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;main.yml&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#創建/opt/bigdata/inst 目錄
- name: mkdir for inst_home
  shell: mkdir -p {{ inst_home }}

#創建/opt/bigdata/app 目錄
- name: mkdir for app_home
  shell: mkdir -p {{ app_home }}

#註冊 zk_dir 變量
- name: stat_dir
  stat: path={{ inst_home }}/{{zk_inst_home}}-{{cluster_name}}
  register: zk_dir

#當 zk_dir 存在時，將/tmp 路徑安裝包移到指定目錄並重命名
- name: rename zookeeper dir
  command: mv /tmp/{{zk_inst_home}} {{ inst_home }}/{{zk_inst_home}}-{{cluster_name}}
  when: zk_dir.stat.exists == False

#創建 zk 集羣軟連接
- name: soft link
  file:
    path: "{{ app_home }}/zk-{{ cluster_name }}"
    src: "{{ inst_home }}/{{ zk_inst_home }}-{{ cluster_name }}"
    state: link

#分發並解壓 jdk 安裝包
- name: deploy jdk
  unarchive:
    src: "{{ jdk_tgz }}"
    dest: "{{ inst_home }}"

#創建 jdk 軟連接
- name: create soft link for jdk
  file:
    path: "{{ app_home }}/{{ jdk_app_home }}"
    src: "{{ inst_home }}/{{ jdk_inst_home }}"
    state: link

#運行 jdk 環境變量，使其生效
- name: env
  script: env.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;⑤ start_zk：啓動 zookeeper 服務&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;目錄結構如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;start_zk/
├── tasks/
│   └── main.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;main.yml&lt;/p&gt; 
&lt;p&gt;#啓動 zk 服務&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;- name: start zookeeper
  shell: cd {{ app_home }}/zk-{{cluster_name}}; sh bin/zkServer.sh start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;6.1.4 編輯任務執行和啓動腳本&lt;/h3&gt; 
&lt;p&gt;zookeeper.yml：任務執行腳本&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;---
- name: check_port
  hosts: zk
  remote_user: root
  roles:
    - check_port
  tags: check_port

- name: dispatch_zk
  hosts: zk
  remote_user: root
  roles:
    - dispatch_zk
  tags: dispatch_zk

- name: deploy_zk
  hosts: zk
  remote_user: root
  roles:
    - deploy_zk
  tags: deploy_zk

- name: config_zk
  hosts: zk
  remote_user: root
  roles:
    - config_zk
  tags: config_zk
   
- name: start_zk
  hosts: zk
  remote_user: root
  roles:
    - start_zk
  tags: start_zk
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;6.1.5 部署並啓動 zookeeper 服務&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;# 部署並啓動 zookeeper 服務
ansible-playbook -i hosts-clusterName zookeeper.yml

#只檢查端口和分發安裝包
ansible-playbook -i hosts-clusterName zookeeper.yml --tags "check_port,dispatch_packages"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;6.2 部署 Pulsar 集羣&lt;/h2&gt; 
&lt;h3&gt;6.2.1 定義 hosts 文件&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;[all:vars]
ansible_ssh_user=xxx
ansible_ssh_pass=xxx

[pulsar]
127.xxx.xxx.1
127.xxx.xxx.2
127.xxx.xxx.3
127.xxx.xxx.4
127.xxx.xxx.5
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;6.2.2 定義全局變量&lt;/h3&gt; 
&lt;p&gt;group_vars 目錄用於存放針對不同主機組的變量文件，其中 all 文件是一種特殊的變量文件，它包含了全局的變量定義，將適用於所有主機組。路徑結構如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;group_vars/
├── all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;all 文件內容中定義變量信息，如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bigdata_home: /opt/bigdata
inst_home: /opt/bigdata/inst
app_home: /opt/bigdata/app
pulsar_app_home: pulsar
pulsar_inst_home: apache-pulsar-2.9.2-1.3
pulsar_tgz: apache-pulsar-2.9.2-1.3-bin.tar.gz
pulsar_conf: "{{ app_home }}/pulsar/conf"
secret_key_dir: "{{ app_home }}/pulsar/data"

#bookkeeper.conf
ledgerDirectories: /data1/bookkeeper/ledger,/data2/bookkeeper/ledger,/data3/bookkeeper/ledger,/data4/bookkeeper/ledger

#broker.conf or client.conf
zkServers: "127.xxx.xxx.1:2183,127.xxx.xxx.2:2183,127.xxx.xxx.3:2183/clusterName"
clusterName: wenzhu
webServiceUrl: http://clusterNamexxxx:8080
brokerServiceUrl: pulsar://clusterNamexxxx:6650
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;6.2.3 編輯 roles 模塊&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;① dispatch_pulsar：分發安裝包&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;目錄結構如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;dispatch_pulsar/
├── files/
│   └── apache-pulsar-2.9.2-1.3-bin.tar.gz
├── tasks/
│   └── main.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;main.yml&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#創建 inst_home 定義的目錄
- name: mkdir_inst_home
  file:
    path: "{{ inst_home }}"
    state: directory

#創建 app_home 定義的目錄
- name: mkdir_app_home
  file:
    path: "{{ app_home }}"
    state: directory

#分發並解壓 pulsar 安裝包到指定目錄
- name: dispatch_packages
  unarchive:
    src: "{{ pulsar_tgz }}"
    dest: "{{ inst_home }}"

#創建 pulsar 軟連接
- name: soft_link
  file:
    path: "{{ app_home }}/pulsar"
    src: "{{ inst_home }}/{{ pulsar_inst_home }}"
    state: link
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;② check_nar：校驗分層存儲和 kop 擴展的依賴包&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;目錄結構如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;check_nar/
├── tasks/
│   └── main.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;main.yml&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#匹配指定路徑 protocols 和 offloaders 下是否有 nar 後綴的文件
- name: check nar
  find:
    paths: "{{ app_home }}/pulsar/{{ item }}/"
    patterns: "*.nar"
  register: result
  with_items:
    - "offloaders"
    - "protocols"

#設置文件匹配的結果（大於 0 表示文件存在）
- name: set nar_files_exist variable
  set_fact:
    nar_files_exist_{{item.item}}: "{{ item.matched &amp;gt; 0 }}"
  with_items: "{{ result.results }}"

#如果文件不存在，進行提示
- name: nar files not exist
  fail:
    msg: "{{ item.item }} nar files not found"
  when: nar_files_exist_{{ item.item }} == false
  ignore_errors: true
  with_items: "{{ result.results }}"

#如果文件存在，列出存在的文件名
- name: print nar files list
  debug:
    msg: "{{ item.files | map(attribute='path') | list }}"
  when: nar_files_exist_{{item.item}}
  with_items: "{{ result.results }}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;③ config_pulsar：配置 pulsar&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;目錄結構如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;config_pulsar/
├── tasks/
│   └── main.yml
├── templates/
│   └── bkenv.sh
│   └── pulsar_env.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;main.yml&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#匹配 broker.conf 中的 advertisedAddress 值並設置為遠程主機 ip 地址
- name: config_advertisedAddress
  lineinfile:
    path: "{{ pulsar_conf }}/broker.conf"
    regexp: "^advertisedAddress="
    line: "advertisedAddress={{ inventory_hostname }}"

#配置 broker.conf 中的 zookeeperServers 值
- name: config_zookeeperServers
  lineinfile:
    path: "{{ pulsar_conf }}/broker.conf"
    regexp: "^zookeeperServers="
    line: "zookeeperServers={{ zkServers }}"

#配置 broker.conf 中的 clusterName 值
- name: config_clusterName
  lineinfile:
    path: "{{ pulsar_conf }}/broker.conf"
    regexp: "^clusterName="
    line: "clusterName={{ clusterName }}"
     
#配置 broker.conf 中的 kafkaAdvertisedListeners 值
- name: config_kafkaAdvertisedListeners
  lineinfile:
    path: "{{ pulsar_conf }}/broker.conf"
    regexp: "^kafkaAdvertisedListeners="
    line: "kafkaAdvertisedListeners=PLAINTEXT://{{ inventory_hostname }}:9093"

#配置 bookkeeper.conf 中的 advertisedAddress 值，設置為主機 ip 地址
- name: config_bk_advertisedAddress
  lineinfile:
    path: "{{ pulsar_conf }}/bookkeeper.conf"
    regexp: "^advertisedAddress="
    line: "advertisedAddress={{ inventory_hostname }}"

#將模板文件 bkenv.sh 應用到 pulsar 的配置文件中
- name: config_bkenv.sh
  template:
    src: bkenv.sh
    dest: "{{ pulsar_conf }}"

#將模板文件 pulsar_env.sh 應用到 pulsar 的配置文件中
- name: config_pulsar_env.sh
  template:
    src: pulsar_env.sh
    dest: "{{ pulsar_conf }}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;④ create_data_dir：創建存儲數據的目錄&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;目錄結構如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;create_data_dir/
├── tasks/
│   └── main.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;main.yml&lt;/p&gt; 
&lt;p&gt;#循環創建 with_items 中的數據目錄&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;- name: mkdir_data_dir
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - /data1/bookkeeper/ledger
    - /data2/bookkeeper/ledger
    - /data3/bookkeeper/ledger
    - /data4/bookkeeper/ledger
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;⑤ config_secret_key：配置安全祕鑰&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;目錄結構如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;config_secret_key/
├── files/
│   └── admin-secret.key
├── tasks/
│   └── main.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;main.yml&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#創建存放安全祕鑰的目錄
- name: create_secret_key_dir
  file:
    path: "{{ secret_key_dir }}"
    owner: root
    group: root
    state: directory

#將安裝祕鑰文件分發到指定的路徑下
- name: dispatch_secret.key
  copy:
    src: admin-secret.key
    dest: "{{ secret_key_dir }}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;⑥ init_meta：初始化集羣元數據&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;目錄結構如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;init_meta/
├── tasks/
│   └── main.yml
├── templates/
│   └── init_meta.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;main.yml&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#應用 init_meta.sh 腳本到遠程主機
- name: scp init_meta.sh
  template:
    src: init_meta.sh
    dest: "{{ app_home }}/pulsar"

#執行初始化腳本文件
- name: init_meta
  shell: nohup sh {{ app_home }}/pulsar/init_meta.sh &amp;gt; {{ app_home }}/pulsar/init.log2&amp;gt;&amp;amp;1 &amp;amp;

#等待 20s 查詢初始化日誌中是否出現初始化成功的日誌
- name: wait20s
  wait_for:
    path: "{{ app_home }}/pulsar/init.log"
    search_regex: "Cluster metadata for '{{ clusterName }}' setup correctly"
    delay: 20

#殺掉集羣元數據初始化進程
- name: kill metadata
  shell: ps -efww|grep PulsarClusterMetadataSetup|grep -v grep|cut -c 9-15|xargs kill -9
init_meta.sh：初始化集羣元數據腳本

{{ app_home }}/pulsar/bin/pulsar initialize-cluster-metadata \
--cluster {{ clusterName }} \
--zookeeper {{ zkServers }} \
--configuration-store {{ zkServers }} \
--web-service-url {{ webServiceUrl }} \
--broker-service-url {{ brokerServiceUrl }}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;⑦ start_service：啓動 broker 和 bookkeeper 服務&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;start_service/
├── tasks/
│   └── main.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;main.yml&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#啓動遠程主機 bookkeeper 服務
- name: start bookie
  shell: sh {{ app_home }}/pulsar/bin/pulsar-daemon start bookie

#啓動遠程主機 broker 服務
- name: start broker
  shell: sh {{ app_home }}/pulsar/bin/pulsar-daemon start broker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;6.2.4 編輯任務執行腳本&lt;/h3&gt; 
&lt;p&gt;pulsar.yml：任務執行腳本&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;---
#分發 pulsar 安裝包
- name: dispatch_pulsar
  hosts: pulsar
  remote_user: root
  become: yes
  become_flags: '-i'
  roles:
    - dispatch_pulsar
  tags: dispatch_pulsar

#檢查安裝包中 kop 和分層存儲 nar 包是否存在
- name: check_nar
  hosts: pulsar
  remote_user: root
  roles:
    - check_nar
  tags: check_nar

#修改 pulsar 配置
- name: config_pulsar
  hosts: pulsar
  remote_user: root
  become: yes
  become_flags: '-i'
  roles:
    - config_pulsar
  tags: config_pulsar
   
  #創建磁盤數據目錄
- name: create_data_dir
  hosts: pulsar
  remote_user: root
  become: yes
  become_flags: '-i'
  roles:
    - create_data_dir
  tags: create_data_dir

#配置證書文件
- name: config_secret_key
  hosts: pulsar
  remote_user: root
  become: yes
  become_flags: '-i'
  roles:
    - config_secret_key
  tags: config_secret_key

#初始化 meta 信息
- name: init_meta
  hosts: pulsar[0]
  remote_user: root
  become: yes
  become_flags: '-i'
  roles:
    - init_meta
  tags: init_meta
   
#啓動 broker 和 bookkeeper 服務
- name: start_service
  hosts: pulsar
  remote_user: root
  become: yes
  become_flags: '-i'
  roles:
    - start_service
  tags: start_service
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;6.2.5 執行 playbook 任務&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;#執行所有 pulsar.yml 中的任務
ansible-playbook -i hosts pulsar.yml

#只執行 pulsar.yml 中標籤為 dispatch_pulsar,check_nar 的任務
ansible-playbook -i hosts pulsar.yml --tags "dispatch_pulsar,check_nar"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;7、Playbooks 運維 Pulsar 集羣總結&lt;/h1&gt; 
&lt;h2&gt;7.1 Pulsar 運維實踐總結&lt;/h2&gt; 
&lt;p&gt;Pulsar 作為新一代雲原生架構的分佈式消息中間件，目前再超大流量規模、海量分區、超高 QPS 等場景下缺乏長時間的穩定性驗證，在極端場景下還存在較多穩定性風險，當前社區版本迭代活躍；Pulsar 集羣在 vivo 內部日均處理消息達萬億+，需要不斷的合併社區 issue 及灰度升級高版本。運維事項較多、投入的運維人力較大。vivo 分佈式消息中間件團隊通過藉助 Ansible 的模塊化、任務依賴、配置 check、批量腳本執行等能力實現 Pulsar 集羣從 zk 集羣搭建、Pulsar 安裝包編譯、自動化配置填充、批量分發部署、服務啓動的一鍵運維部署能力。大大縮減了 Pulsar 集羣的運維人力投入，Pulsar 組件存算分離的架構設計優秀，但部署配置項非常繁雜，通過自動化配置填充可有效規避配置信息不一致、版本不一致等高頻錯誤。&lt;/p&gt; 
&lt;h2&gt;7.2 playbooks 服務部署步驟&lt;/h2&gt; 
&lt;p&gt;根據以上實戰經驗，我們可以總結出部署某個服務時編寫 playbooks 腳本的一般步驟如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//9d95c4a3f898dea31aa737cfc4ae82ae.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Ansible 更多運維實踐可參考：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fansible%2Fansible-examples" target="_blank"&gt;https://github.com/ansible/ansible-examples&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;猜你喜歡&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247501335%26idx%3D1%26sn%3D3701be0b8b7b789e29c1ca53ba142e9d%26scene%3D21%23wechat_redirect" target="_blank"&gt;vivo Pulsar 萬億級消息處理實踐（1）-數據發送原理解析和性能調優&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247501426%26idx%3D1%26sn%3D76c04879cfa2c6b38a731b5c49f19d3a%26scene%3D21%23wechat_redirect" target="_blank"&gt;vivo Pulsar 萬億級消息處理實踐（2）-從 0 到 1 建設 Pulsar 指標監控鏈路&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247505310%26idx%3D1%26sn%3D541f7a56e7db9a0909f649a412c82d6d%26scene%3D21%23wechat_redirect" target="_blank"&gt;vivo Pulsar 萬億級消息處理實踐（3）-KoP 指標異常修復&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/vivotech/blog/18688145</link>
      <guid isPermaLink="false">https://my.oschina.net/vivotech/blog/18688145</guid>
      <pubDate>Tue, 12 Aug 2025 10:40:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>馬斯克必須面對 OpenAI 提出的騷擾指控</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;span style="color:#000000"&gt;OpenAI 此前在訴狀中指稱，埃隆·馬斯克（Elon Musk）在法庭內外對公司展開了「長達數年的騷擾行動」。一名聯邦法官已裁定，馬斯克必須面對這一指控。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;當地時間本週二，美國地方法院法官伊馮·岡薩雷斯·羅傑斯（Yvonne Gonzalez Rogers）駁回了馬斯克的一項請求。OpenAI 指控馬斯克利用法律訴訟、社交媒體發文及媒體言論等手段意圖打壓公司，從而為他自己創辦的生成式人工智能公司 xAI 爭取競爭優勢，而馬斯克請求法官駁回的正是這些指控。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="326" src="https://oscimg.oschina.net/oscnet/up-e9920e1f6a481cb62d069a91a566ad84a38.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此項裁決為雙方始於去年的法律戰帶來了最新轉折。當時，馬斯克指控 OpenAI 背棄非營利組織的創立初衷，2019 年也就是馬斯克離開 OpenAI 董事會的次年，開始從微軟接受數十億美元的投資。馬斯克本人則在 2023 年創立了 xAI 公司。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;羅傑斯法官並未就 OpenAI 反訴狀中「馬斯克試圖持續打壓公司」的指控本身作出實質性評判，但她裁定，OpenAI 於今年 4 月份提交的反訴在法律上理由充分，可以繼續推進。此外，羅傑斯法官還駁回了馬斯克針對 OpenAI 和微軟的部分指控。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;法官指出，雙方都互相指責對方虛偽。她在裁決書中寫道：「雙方的博弈伎倆昭然若揭，各自都出爾反爾。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此案計劃於明年 3 月在加州奧克蘭聯邦法院開庭審理。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366220</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366220</guid>
      <pubDate>Tue, 12 Aug 2025 10:19:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>港大聯手月之暗面等機構開源 OpenCUA，可自主操作電腦的 Agent</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;香港大學 XLANG Lab 聯合月之暗面、斯坦福大學等機構，正式開源了一個名為 OpenCUA 的完整框架，旨在幫助開發者低門檻地構建和擴展 CUA（Computer-Use Agent，計算機使用智能體）。&lt;/p&gt; 
&lt;p&gt;該框架包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;無縫捕獲人類計算機使用演示的註釋基礎設施&lt;/li&gt; 
 &lt;li&gt;第一個跨越 3 個操作系統以及超 200 個應用程序和網站的大規模計算機使用任務數據集 AgentNet&lt;/li&gt; 
 &lt;li&gt;一個可擴展的、能將演示轉換為具有反思性長思維鏈推理 「狀態 - 動作」 對的工作流程。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;香港大學計算機科學系助理教授 Tao Yu（餘濤）為項目負責人，月之暗面、斯坦福大學、滑鐵盧大學、卡內基梅隆大學的研究人員參與，月之暗面創始人、CEO 楊植麟在作者名單之列。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0814/181052_drco_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據介紹，OpenCUA 通過開源完整的數據、工具和模型，讓 「人人都能打造自己的專屬電腦智能體」，並已在關鍵基準上超越 GPT-4o，成為當前最強的開源 CUA 方案。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;相關鏈接&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;論文地址：&lt;em&gt;https://arxiv.org/pdf/2508.09123&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;OpenCUA 主頁（工具、模型、數據集）：&lt;em&gt;https://opencua.xlang.ai&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;Hugging Face 地址：&lt;em&gt;https://huggingface.co/collections/xlangai/opencua-open-foundations-for-computer-use-agents-6882014ebecdbbe46074a68d&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366219</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366219</guid>
      <pubDate>Tue, 12 Aug 2025 10:14:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>英偉達發佈包含 300 萬條高質量樣本的視覺語言模型訓練數據集</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;英偉達&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fblog%2Fnvidia%2Fnvidia-vlm-dataset-v1" target="_blank"&gt;發佈&lt;/a&gt;&lt;/u&gt;了一個包含 300 萬高質量樣本的視覺語言模型訓練數據集，以支持 OCR、VQA 和圖像字幕生成等多種應用。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-ea78950d32fa51e2aeb1dd78dc70cd8336b.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0814/175743_fO0l_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;數據集構成&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;67.0% 視覺問答（VQA）樣本&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;28.4% OCR 樣本&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;4.6% 圖像描述（Captioning）樣本&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;主要用途&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;文檔理解&lt;/strong&gt;：支持複雜版面、表格、圖文混排的 OCR 與內容提取。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;企業級 AI 開發&lt;/strong&gt;：數據已清除版權限制，&lt;strong&gt;可直接商用&lt;/strong&gt;。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;模型訓練支持&lt;/strong&gt;：配套 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.nvidia.com%2Fnemo-framework%2Fuser-guide%2F24.09%2Fnemotoolkit%2Fmultimodal%2Fmllm%2Fdatasets.html" target="_blank"&gt;NVIDIA NeMo Curator&lt;/a&gt; 工具，便於進一步清洗和定製。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;數據來源與構建方式&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;基於開源數據集重新標註，確保可商用；&lt;/li&gt; 
 &lt;li&gt;使用 NVIDIA 自研模型進行增強，如加入鏈式思考（Chain-of-Thought）解釋、模板化問答生成、答案擴展等；&lt;/li&gt; 
 &lt;li&gt;提供中英雙語的 OCR 數據，涵蓋字符級、詞級、頁面級標註。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;模型配套&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;該數據集是 &lt;strong&gt;Llama 3.1 Nemotron Nano VL 8B&lt;/strong&gt; 模型的訓練基礎，該模型在 OCRBench V2、DocVQA、ChartQA 等基準測試中表現領先，已作為 NVIDIA NIM API 和 Hugging Face 模型庫的一部分開放使用。&lt;/p&gt; 
&lt;p&gt;如需獲取數據集，可直接訪問 Hugging Face 頁面：&lt;em&gt;https://huggingface.co/datasets/nvidia/Llama-Nemotron-VLM-Dataset-v1&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366217</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366217</guid>
      <pubDate>Tue, 12 Aug 2025 09:56:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>甲骨文雲計算部門啓動裁員</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;外媒報道稱，多位知情人士向媒體透露，全球科技巨頭甲骨文（Oracle）正在其雲計算業務部門推進裁員計劃，受影響員工已於本週陸續收到通知。此次裁員被視為甲骨文在持續加碼人工智能（AI）基礎設施投資背景下，優化運營成本、提升組織效率的重要舉措。&lt;/p&gt; 
&lt;p&gt;&lt;img height="304" src="https://oscimg.oschina.net/oscnet/up-434e52918013b94f4053ef878cd50cb724e.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據三位不願具名的知情人士稱，甲骨文本輪裁員覆蓋雲計算部門多個團隊，但具體裁撤比例及地區分佈尚未明確。其中兩位人士強調，部分員工的離職與年度績效評估結果直接掛鈎，甲骨文或藉此機會淘汰低效崗位，同時保留核心戰略領域人才。&lt;/p&gt; 
&lt;p&gt;「這不是全面收縮，而是針對性優化。」一位接近甲骨文內部的消息人士表示，「公司仍在為 AI 相關項目招聘高端工程師，但希望團隊更加精幹。」&lt;/p&gt; 
&lt;p&gt;甲骨文近年來在雲計算與 AI 領域動作頻頻。2024 年，公司宣佈未來三年將投入超 200 億美元擴建數據中心，以支持其 AI 訓練與推理服務，並與英偉達等企業深化合作，構建高性能計算網絡。然而，激進擴張也帶來成本壓力——最新財報顯示，甲骨文 2025 財年第二季度資本支出同比增長 45%，而運營利潤率較去年同期下滑 2 個百分點。&lt;/p&gt; 
&lt;p&gt;儘管部分團隊面臨調整，但甲骨文雲計算部門仍在開放多個職位。根據 LinkedIn 招聘信息，該公司近期發佈了針對 AI 基礎設施架構師、雲安全專家及數據庫優化工程師等崗位的招募需求，工作地點涵蓋美國、印度及歐洲多地。&lt;/p&gt; 
&lt;p&gt;甲骨文並非唯一一家在擴張期優化成本的企業。2025 年以來，亞馬遜 AWS、微軟 Azure 等雲服務提供商均被曝出調整團隊結構，重點削減非戰略業務線人員，同時加大對生成式 AI、數據安全等領域的投入。&lt;span style="background-color:#ffffff; color:#222222"&gt;（環球網科技，青山）&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366210</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366210</guid>
      <pubDate>Tue, 12 Aug 2025 09:34:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>國內多數模型訓練使用中文數據已超 60%</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;span style="color:#000000"&gt;國務院新聞辦公室舉行「高質量完成‘十四五’規劃」系列主題新聞發佈會。國家數據局局長劉烈宏在新聞發佈會上&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Ft.cn%2FA6s9V2KV" target="_blank"&gt;表示&lt;/a&gt;，當前我國網民數量達到 11.23 億人，互聯網普及率達到 79.7%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="285" src="https://oscimg.oschina.net/oscnet/up-a7bc5b1720f5064d91d4f1b64ef3359ba32.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;劉烈宏表示，我國數據產業處於快速發展階段，數據產業鏈加速形成。據國家數據發展研究院研究，2024 年，全國數據企業數量超過 40 萬家，數據產業規模達 5.86 萬億元，較「十三五」末增長 117%，預計未來幾年仍將保持較高的增長水平。數據「採存算管用」全鏈條煥新迭代，催生出「數據即服務」「知識即服務」「模型即服務」等新模式、新業態。2024 年，上市數據企業平均研發投入較「十三五」末增長 79%，年均增速 15.7%，產業鏈創新活力持續增強。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;作為人工智能發展的三大核心要素之一，數據在推動「人工智能+」過程中發揮着關鍵作用，特別是高質量數據集的建設至關重要。例如在醫療健康領域，通過標註的醫學影像高質量數據集，模型的疾病診斷準確率可以提升 15% 以上。2024 年初，我國日均 Token（即通常所説的詞元，處理文本的最小數據單元）的消耗量為 1 千億，截至今年 6 月底，日均 Token 消耗量已經突破 30 萬億，1 年半時間增長了 300 多倍，反映出我國人工智能應用規模的快速增長。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;截至今年 6 月底，我國已經建設高質量數據集超過 3.5 萬個，總體量超過了 400PB（1PB 可存儲約 5 億張 2MB 大小的高清照片，400PB 的總量相當於中國國家圖書館數字資源總量的 140 倍左右）。人工智能模型的訓練也推動了數據交易需求的攀升，截至今年 6 月底，各地高質量數據集累計交易額近 40 億元，數據交易機構掛牌的高質量數據集總規模達到了 246PB。目前已佈局成都、瀋陽、合肥等 7 個數據標註基地，助力高質量數據集的建設。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;中文數據在國內大模型的訓練性能提升方面發揮着重要作用。經過一段時間的努力，國內多數模型訓練使用的中文數據佔比已經超過了 60%，有的模型已達到 80%。中文高質量數據的開發和供給能力持續增強，推動我國人工智能模型性能的快速提升。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366203</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366203</guid>
      <pubDate>Tue, 12 Aug 2025 09:17:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>ECA - 與編輯器無關的 AI 結對編程功能</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                        
                                                                                    &lt;p&gt;&lt;span style="background-color:#ffffff; color:#1f2328"&gt;Editor Code Assistant&lt;span&gt;&amp;nbsp;&lt;/span&gt;(ECA) - 人工智能結對編程功能，不受編輯器限制。&lt;/span&gt;旨在輕鬆連接 LLM 和編輯器，並通過定義明確的協議為 AI 結對編程提供最佳的用戶體驗。服務器採用 Clojure 編寫，並深受&amp;nbsp;&lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;LSP 協議&lt;/a&gt;的啓發，LSP 協議是此類集成的一個成功案例。&lt;/p&gt;

&lt;p style="text-align:start"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;該協議使其他編輯器更容易集成，並且在中間有一個服務器有助於快速添加更多功能，以下是一些示例：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;工具調用管理&lt;/li&gt;
&lt;li&gt;多 LLM 互動&lt;/li&gt;
&lt;li&gt;功能使用情況遙測&lt;/li&gt;
&lt;li&gt;為任何編輯器配置的單一方法&lt;/li&gt;
&lt;li&gt;相同的用戶體驗，易於人員和團隊加入。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img height="326" src="https://static.oschina.net/uploads/space/2025/0814/141201_GYAY_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;與編輯器無關&lt;/strong&gt;：適合任何編輯器集成的協議。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;單一配置&lt;/strong&gt;：通過全局或本地配置配置 eca，使其在任何編輯器中都能正常工作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;聊天&lt;/strong&gt;界面：提出問題、審查代碼、共同編寫代碼。&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&lt;strong&gt;Agentic&lt;/strong&gt;：讓 LLM 使用其原生工具和你可以配置的 MCP 作為代理工作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;背景&lt;/strong&gt;：支持：向 LLM 提供有關你的代碼的更多詳細信息，包括 MCP 資源和提示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多模型&lt;/strong&gt;：OpenAI、Anthropic、Ollama 本地模型和自定義用戶配置模型。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/editor-code-assistant/eca-emacs"&gt;使用 eca-emacs 的&lt;/a&gt;演示&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="" height="302" src="https://static.oschina.net/uploads/space/2025/0814/140948_Py2U_4252687.gif" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/editor-code-assistant/eca-vscode"&gt;使用 eca-vscode 的&lt;/a&gt;演示&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;img alt="" height="302" src="https://static.oschina.net/uploads/space/2025/0814/141100_VXGm_4252687.gif" width="500" referrerpolicy="no-referrer"&gt;&lt;/em&gt;&lt;/p&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/eca</link>
      <guid isPermaLink="false">https://www.oschina.net/p/eca</guid>
      <pubDate>Tue, 12 Aug 2025 08:28:00 GMT</pubDate>
    </item>
    <item>
      <title>階躍星辰發佈 StepFun-Prover-Preview 系列模型，用於形式化定理證明</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;階躍星辰（StepFun）發佈了 StepFun-Prover-Preview 系列模型，包括 7B 和 32B 兩個版本，專門用於形式化定理證明（formal theorem proving）。&lt;/p&gt; 
&lt;p&gt;據介紹，StepFun-Prover-Preview&amp;nbsp;專為數學推理設計，通過工具集成推理（tool-integrated reasoning）實現高效的形式化定理證明，支持 Lean 4 證明語言。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0814/162405_SPkB_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;論文地址：&lt;em&gt;https://arxiv.org/abs/2507.20199&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;性能方面，StepFun-Prover-Preview-7B 在 miniF2F-test (pass@1) 基準測試中，其表現與 DeepSeek-Prover-V2-671B 和 Kimina-Prover-72B 持平。更強大的 StepFun-Prover-Preview-32B 模型在 miniF2F-test (pass@1) 上超越了所有已知同類模型 4% 以上。該系列模型還具備類人證明細化能力，非常適合推動數學推理領域研究的科研人員。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0814/162334_3IsT_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;模型地址：&lt;em&gt;https://huggingface.co/stepfun-ai/StepFun-Prover-Preview-32B&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366192</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366192</guid>
      <pubDate>Tue, 12 Aug 2025 08:25:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>微軟本月從 Windows 11 移除 PowerShell 2.0</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;微軟&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.microsoft.com%2Fzh-cn%2Ftopic%2F%25E4%25BB%258E-windows-%25E4%25B8%25AD%25E5%2588%25A0%25E9%2599%25A4-powershell-2-0-fe6d1edc-2ed2-4c33-b297-afe82a64200a"&gt;發佈&lt;/a&gt;公告稱，將從 Windows 11 版本 24H2 中徹底移除 Windows PowerShell 2.0 這一遺留組件。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0814/155423_MsTY_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;PowerShell 2.0 最早隨 Windows 7 推出，早在 2017 年，已被微軟官方棄用。此次移除旨在清理舊代碼、降低系統複雜性、提升安全性，並不會影響 PowerShell 5.1 或 PowerShell 7.x 的正常使用。&lt;/p&gt; 
&lt;p&gt;Windows 11 23H2 及更早版本仍保留 PowerShell 2.0 作為可選組件，用戶可手動啓用或卸載。&lt;/p&gt; 
&lt;p&gt;根據支持文檔，大多數用戶不會注意到這一變化，因為 PowerShell 2.0 的移除不會影響 PowerShell 5.1 和 PowerShell 7.x 的使用。而且由於 PowerShell 5.1（默認模式）具有向後兼容性，大多數腳本應該可以按預期運行。&lt;/p&gt; 
&lt;p&gt;但對於某些特定需要 PowerShell 2.0 的應用程序，可能會出現安裝失敗的情況，因此微軟建議用戶使用較新的版本以避免兼容性問題。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366187</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366187</guid>
      <pubDate>Tue, 12 Aug 2025 07:56:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>​字節開源 Agent 專用模型 M3-Agent-Control</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;字節跳動在人工智能領域再度發力，推出了最新的 AI 模型 ——M3-Agent-Control。該模型旨在推動智能技術的開放和普及，為各行業的發展提供強有力的技術支持。M3-Agent-Control 的問世，不僅展示了字節跳動在 AI 領域的創新實力，也為開發者和企業提供了更多的可能性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;img height="317" src="https://oscimg.oschina.net/oscnet/up-79e584a04d882e72ff6db02d29cdfd15668.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;M3-Agent-Control 基於 Qwen332B 訓練，是一個擁有 328 億參數的高性能 AI 模型，採用了 BF16 的張量類型。這意味着該模型在處理複雜計算時，能夠更快地響應並提供更高效的結果。字節跳動一直以來致力於通過開放源代碼和科學共享的方式，加速人工智能技術的發展，M3-Agent-Control 的推出正是這一戰略的延續。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;目前，M3-Agent-Control 尚未由任何推理提供者進行部署，但字節跳動鼓勵更多的開發者和企業參與到這個項目中來，探索 AI 的無限可能性。通過這個模型，開發者可以進行各種應用場景的開發，推動智能化進程，為社會各個領域帶來技術革新。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366182</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366182</guid>
      <pubDate>Tue, 12 Aug 2025 07:41:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>螞蟻集團開源新一代 JVM 即時編譯器 Jeandle</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;螞蟻集團&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FYaMmozWGMKV3x7ZM5IP2KQ" target="_blank"&gt;宣佈&lt;/a&gt;正式開源基於 LLVM 的 JVM JIT 編譯器 Jeandle。公告寫道：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;以「筋斗雲」為喻，希望 Jeandle 可以為 JVM 加足馬力，拓寬它的性能與生態邊界，讓 Java 如騰雲駕霧般瞬息萬裏。&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0814/152859_uBKb_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;開源地址：&lt;/p&gt; 
&lt;p&gt;https://github.com/jeandle/jeandle-jdk&lt;br&gt; https://github.com/jeandle/jeandle-llvm&lt;/p&gt; 
&lt;p&gt;據介紹，Jeandle 是基於 OpenJDK Hotspot JVM 的全新 Just-In-Time（簡稱 JIT，即時）編譯器，利用 LLVM 進行編譯優化與代碼生成，將 LLVM 的性能優勢和生態優勢引入 JVM 中。&lt;/p&gt; 
&lt;p&gt;&lt;img height="533" src="https://static.oschina.net/uploads/space/2025/0814/152948_uqyv_2720166.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;為了整合 JVM 和 LLVM 兩個複雜的系統，Jeandle 需要攻克多個技術難題：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;支持 JVM 的垃圾回收機制&lt;/li&gt; 
 &lt;li&gt;為 JVM 中的各種功能分別定製 LLVM 特性&lt;/li&gt; 
 &lt;li&gt;基於 LLVM 實現針對 Java 語言的多類優化算法&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;......&lt;/p&gt; 
&lt;p&gt;Jeandle 開源伊始，目前已經實現了若干關鍵功能，同時也有大量的研發工作仍在進行中。未來規劃：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;2025 年全量 Bytecode 支持：社區計劃在今年年底的版本中完成各類基礎功能的支持，包括 exception、GC、sychronization 等等，覆蓋全量的 bytecode。&lt;/li&gt; 
 &lt;li&gt;2026 年持續聚焦於性能優化的「黑科技」：&lt;/li&gt; 
 &lt;li&gt;推出&amp;nbsp;Java 定製優化套件：研發針對 Java 語言的各類優化算法，使 Jeandle 具備全面的優化能力，包括但不限於鎖優化、類型分析、逃逸分析、inline 等。同時實現基於運行時 profile 信息的優化能力和 deoptimization 能力&lt;/li&gt; 
 &lt;li&gt;加入 intrinsic：通過針對各類特殊場景定製的高效代碼提升 Java 語言性能&lt;/li&gt; 
 &lt;li&gt;支持 on-stack replacement&lt;/li&gt; 
 &lt;li&gt;支持 G1 GC 算法&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366179</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366179</guid>
      <pubDate>Tue, 12 Aug 2025 07:31:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>小馬智行 Q2 財報亮眼，文遠知行 Robotaxi 營收暴漲，行業增長動能強勁</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#000000; text-align:left"&gt;頭部 Robotaxi 玩家相繼公佈 2025 年第二季度財報。數據顯示，Robotaxi 行業正呈現出顯著的向好態勢。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;8 月 12 日，小馬智行發佈了二季報，管理層強調了 Robotaxi 業務的增長——收入為 1090 萬元，同比增長 157.8%，營收佔比 7.09%，毛利率 16.1%。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;7 月 31 日，文遠知行披露了二季度的財報，在報告中、Robotaxi 的營收增長異常亮眼——營收 4590 萬元，同比大幅增長 836.7%，營收佔比 36.1%，毛利率 28.1%。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet//a61df81f0738135b5fa89608d73057b5.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;從這兩家頭部企業的財報數據來看，Robotaxi 業務的高速增長並非個例，而是行業發展的縮影。這種增長態勢背後，離不開技術的持續迭代與運營規模的不斷擴大。隨着自動駕駛技術的日益成熟，Robotaxi 的安全性和穩定性得到了大幅提升，這為其大規模商業化運營奠定了堅實基礎。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;以文遠知行為例，目前已在全球 10 個國家的 30 多個城市佈局自動駕駛研發測試與商業化運營網絡。尤其在過去半年，企業深耕中東市場取得突破性進展，成功打通了當地自動駕駛服務的商業化路徑。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet//1c70bb776ad3e2874b4824409ba35d02.jpeg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;2025 年 7 月 28 日，文遠知行宣佈旗下 Robotaxi 獲得沙特阿拉伯首張自動駕駛牌照。由此，文遠知行成為全球唯一一家旗下產品擁有六國自動駕駛牌照的科技公司，涵蓋沙特、中國、阿聯酋、新加坡、法國和美國。憑藉該牌照，文遠知行獲準在沙特開展自動駕駛運營，並可在沙特全國範圍內部署 Robotaxi 服務。首期，文遠知行攜手 Uber 及當地合作伙伴 AiDriver 在利雅得開展試點運營。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet//25fde64980a0b1627caa7b1513c924a1.jpeg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;整體來看，Robotaxi 行業在技術突破、市場擴張與商業化落地等方面均取得實質性進展，未來增長潛力值得期待。隨着政策對自動駕駛商業化的支持力度加大、技術成本的進一步優化以及用戶接受度的不斷提高，Robotaxi 行業正從「技術驗證期」全面邁入「規模增長期」，未來在出行市場的滲透率將持續提升，長期增長動能強勁。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366177</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366177</guid>
      <pubDate>Tue, 12 Aug 2025 07:27:00 GMT</pubDate>
      <author>作者: 開源科技</author>
    </item>
    <item>
      <title>AI 初創公司 Midjourney 更新功能，允許標準訂閲用戶生成高清視頻</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;span&gt;AI 初創公司 Midjourney&amp;nbsp;&lt;/span&gt;今天&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fmidjourney%2Fstatus%2F1955773050751963144" target="_blank"&gt;宣佈&lt;/a&gt;，他們根據社區反饋發佈了一系列的新功能，其中標準訂閲用戶現在可以生成高清視頻。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0814/152433_quiN_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;此外還有改善的視頻審核功能和批量製作視頻等功能。具體如下：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;服務更新相關：基於社區反饋對服務進行了一系列小改進，包括 HD 視頻生成對 Standard Plan 用戶開放、視頻作業可生成更小批量（1 或 2 個視頻/次，通過設置面板或命令行參數--bs 1 、--bs 2 觸發 ）、Moodboards 分離到側邊菜單可訪問的獨立頁面、視頻作業縮略圖改為顯示最後一幀、視頻內容審核準確性提升 。&lt;/li&gt; 
 &lt;li&gt;涉及公司/團隊：未明確提及具體公司，但圍繞服務更新，推測是某提供視頻等服務的團隊 。&lt;/li&gt; 
 &lt;li&gt;提及的人物標籤：@everyone@here ，屬於通知類標籤 。&lt;/li&gt; 
 &lt;li&gt;相關話題標籤：#ideas-and-features ，用於提交想法和功能建議 。&lt;/li&gt; 
&lt;/ol&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366176</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366176</guid>
      <pubDate>Tue, 12 Aug 2025 07:25:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
  </channel>
</rss>
