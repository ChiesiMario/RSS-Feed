<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>開源中國-綜合資訊</title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="http://8.134.148.166:30044/oschina/news/industry" rel="self" type="application/rss+xml"></atom:link>
        <description>開源中國-綜合資訊 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Fri, 18 Apr 2025 02:37:23 GMT</lastBuildDate>
        <ttl>5</ttl>
        <item>
            <title>谷歌發佈 Gemini 2.5 Flash：性能與效率的平衡之作</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;2025 年 4 月 17 日，谷歌正式宣佈通過 Google AI Studio 和 Vertex AI 平台推出 Gemini 2.5 Flash 預覽版。作為 2.0 Flash 的全面升級，這款新模型在保持速度和成本優勢的同時，顯著提升了推理能力，成為谷歌首款真正意義上的混合推理模型。&lt;/p&gt; 
&lt;h2&gt;思考能力成為焦點&lt;/h2&gt; 
&lt;p&gt;Gemini 2.5 Flash 最引人注目的特點在於其可控制的思考能力。不同於傳統模型直接生成輸出，Gemini 2.5 系列模型能夠在響應前進行「思考」過程，更好地理解提示，分解複雜任務，並規劃回答。這一特性使模型在處理需要多步推理的複雜任務時（如解決數學問題或分析研究問題）能夠給出更準確、更全面的答案。&lt;/p&gt; 
&lt;p&gt;據谷歌官方介紹，在 LMArena 的 Hard Prompts 基準測試中，Gemini 2.5 Flash 表現出色，僅次於 2.5 Pro。這一成就標誌着較小規模模型也能實現接近頂級模型的推理能力，為開發者提供了更經濟的選擇。&lt;/p&gt; 
&lt;h2&gt;精細化控制思考預算&lt;/h2&gt; 
&lt;p&gt;谷歌深知不同使用場景對質量、成本和延遲有着不同的權衡要求。為此，Gemini 2.5 Flash 引入了「思考預算」（thinking budget）機制，允許開發者對模型在思考階段可以生成的最大 token 數量進行精細控制。更高的預算可以讓模型進行更深入的推理，提高輸出質量。&lt;/p&gt; 
&lt;p&gt;值得注意的是，思考預算僅設置上限，模型不會浪費資源——如果提示不需要太多思考，模型會自動調整使用的思考量。谷歌表示，模型已經訓練成能夠根據任務複雜度自動決定思考時間的長短。&lt;/p&gt; 
&lt;p&gt;如果開發者希望保持最低成本和延遲，同時仍然獲得比 2.0 Flash 更好的性能，可以將思考預算設為 0。當然，他們也可以在 API 中使用參數或在 Google AI Studio 和 Vertex AI 中使用滑塊來設置特定的思考預算。對於 2.5 Flash，預算範圍可以從 0 到 24576 個 token。&lt;/p&gt; 
&lt;h2&gt;性價比領先的思考模型&lt;/h2&gt; 
&lt;p&gt;Gemini 2.5 Flash 的價格策略引人注目。根據谷歌提供的數據，這款模型保持了最佳的價格性能比，尤其是相較於競爭對手的同類產品。在輸入價格方面，每百萬 token 為 0.15 美元，輸出價格為每百萬 token 0.60 美元，相比 OpenAI 的 o4-mini、Anthropic 的 Claude Sonnet 3.7 和 xAI 的 Grok 3 Beta 等競品，具有明顯的成本優勢。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;1999&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d67320ae707ff147ab25e0d656d8ad5004a.png&quot; width=&quot;1361&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在性能上，Gemini 2.5 Flash 在多項基準測試中表現出色。例如，在「Humanity&#39;s Last Exam」（無工具）測試中達到了 12.1% 的成績，在 GPQA Diamond 科學測試中達到了 78.3% 的單次嘗試成績，在 AIME 2025 數學測試中達到了 78.0% 的單次嘗試成績。雖然在某些指標上略遜於更昂貴的模型，但考慮到其價格，這些成績令人印象深刻。&lt;/p&gt; 
&lt;h2&gt;開發者反應褒貶不一&lt;/h2&gt; 
&lt;p&gt;在技術社區 Hacker News 上，對谷歌 AI 產品的討論熱度頗高。一些用戶表示，自從谷歌將 Gemini 2.5 Pro（實驗版）免費提供以來，他們已成為谷歌模型的忠實用戶。用戶 zoogeny 分享道：「Gemini 2.5 Pro 是如此大的進步，以至於我對谷歌的模型整體產生了信心。它不僅在我接觸的大多數主題上比我更聰明，而且也不是完全順從。該模型會對我提出反駁，而不是扭曲自己以找到同意的方式。」&lt;/p&gt; 
&lt;p&gt;一些用戶甚至表示已取消對 Anthropic 的訂閲，轉而使用谷歌的服務。用戶 jeeeb 稱：「在並排比較 Gemini Pro 和 Claude Sonnet 3.7 的編碼回答幾次後，我決定取消我的 Anthropic 訂閲，只使用 Gemini。」&lt;/p&gt; 
&lt;p&gt;然而，也有用戶提出了一些擔憂。有人指出，谷歌 Gemini 網頁應用存在基本層面的問題，如速度慢、卡在「顯示思考」環節、拒絕接受一次性發送的 20 萬 token 提示等。另有用戶擔憂谷歌可能會像過去一樣，通過提供免費服務直到競爭對手消亡，然後降低質量的方式來操控市場。&lt;/p&gt; 
&lt;h2&gt;行業影響與前景&lt;/h2&gt; 
&lt;p&gt;Gemini 2.5 Flash 的發佈進一步加劇了 AI 模型市場的競爭。有分析認為，谷歌正在 AI 競賽中悄然領先，特別是在企業應用領域。相較於 OpenAI 和 Anthropic 等競爭對手，谷歌擁有垂直整合的芯片渠道、深厚的供應鏈和豐富的運營知識，為其提供了顯著的成本優勢。&lt;/p&gt; 
&lt;p&gt;此外，谷歌擁有的海量數據資源也是其不可忽視的優勢。隨着基礎模型提供商已經處理完普通爬網數據並競相消費視頻和剩餘內容，新數據變得越來越有價值，成為長期競爭的關鍵因素。&lt;/p&gt; 
&lt;p&gt;Gemini 2.5 Flash 的推出標誌着谷歌在 AI 領域的野心。雖然目前仍處於預覽階段，但谷歌表示，將繼續改進這一模型，並將很快推出更多功能，然後才會將其正式發佈用於全面生產。&lt;/p&gt; 
&lt;p&gt;隨着 AI 技術的快速發展，不同公司之間的競爭日益激烈。對於開發者和用戶來説，這場競爭帶來了更多選擇，也推動了 AI 技術的不斷進步。谷歌能否憑藉 Gemini 2.5 Flash 在這場競爭中贏得優勢，值得市場持續關注。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345237</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345237</guid>
            <pubDate>Fri, 18 Apr 2025 02:33:20 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>百度創始人李彥宏 2025 年首場演講海報曝光</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;百度創始人李彥宏的 2025 年首場演講海報曝光，他將於 4 月 25 日在 Create2025 百度 AI 開發者大會上，帶來持續 1 個小時的演講《模型的世界，應用的天下》。&lt;/p&gt; 
&lt;p&gt;海報背景文案囊括了 MCP、智能體、數字人、模型成本等 AI 熱點議題，預告了李彥宏將在大會現場帶來百度 AI 的全新產品發佈和業務進展。&lt;/p&gt; 
&lt;p&gt;此前，百度預告將在 Create 大會上發佈文心大模型 4.5 Turbo，從海報看，李彥宏或將在演講中詳細介紹這款模型的特色和能力。&lt;/p&gt; 
&lt;ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height=&quot;1440&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0418/102350_tW8f_2720166.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;文心大模型 4.5 Turbo 強在哪裏？&lt;/li&gt; 
 &lt;li&gt;MCP 會帶來更開放的生態嗎?&lt;/li&gt; 
 &lt;li&gt;智能體應用的下一站在哪裏？&lt;/li&gt; 
 &lt;li&gt;模型迭代太快，應用會不會過時？&lt;/li&gt; 
 &lt;li&gt;開發者的機會在哪裏？&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;相關閲讀：&lt;a href=&quot;https://www.oschina.net/news/343749&quot; target=&quot;news&quot;&gt;百度文心大模型 4.5 Turbo 將於 4 月 25 日亮相&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345236</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345236</guid>
            <pubDate>Fri, 18 Apr 2025 02:27:20 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>字節跳動開源 UI-TARS-1.5：基於視覺-語言模型構建的多模態智能體</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;字節豆包大模型團隊&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FgRqyNlF8BTkh9f36UlW3ew&quot; target=&quot;_blank&quot;&gt;宣佈&lt;/a&gt;&lt;/u&gt;開源 UI-TARS-1.5。&lt;/p&gt; 
&lt;p&gt;據介紹，這是一款基於視覺-語言模型構建的開源多模態智能體，能夠在虛擬世界中高效執行各類任務。目前，UI-TARS-1.5 已在 7 個典型的 GUI 圖形用戶界面評測基準中取得 SOTA 表現，並首次展現了其在遊戲中的長時推理能力和在開放空間中的交互能力。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;684&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0418/101719_9W5Z_2720166.png&quot; width=&quot;1280&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;UI-TARS-1.5 基於該團隊此前提出的原生智能體方案 UI-TARS，通過強化學習進一步增強了模型的高階推理能力，使模型能夠在「行動」前先進行「思考」。&lt;/p&gt; 
&lt;p&gt;該版本的模型中，團隊還展示了一個新的願景：以遊戲為載體來增強基礎模型的推理能力。與數學、編程等領域相比，遊戲更多依賴直觀的、常識性的推理，並較少依賴專業知識，因此，遊戲通常是評估和提升未來模型通用能力的理想測試場景。&lt;/p&gt; 
&lt;p&gt;據介紹，UI-TARS 作為原生 GUI 智能體，具備真實操作電腦和手機系統的能力，同時，還可操控瀏覽器、完成複雜交互任務。&lt;/p&gt; 
&lt;p&gt;UI-TARS-1.5 能夠實現精準 GUI 操作，基於團隊在四個維度的技術探索：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;視覺感知增強：依託大規模界面截圖數據，模型可理解元素的語義與上下文，形成精準描述。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;System 2 推理機制：在動作前生成「思維（thought）」，支持複雜任務的多步規劃與決策。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;統一動作建模：構建跨平台標準動作空間，通過真實軌跡學習提升動作可控性與執行精度。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;可自我演化的訓練範式：通過自動化的交互軌跡採集與反思式訓練，模型持續從錯誤中改進，適應複雜環境變化。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;開源地址&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbytedance%2FUI-TARS&quot; target=&quot;_blank&quot;&gt;https://github.com/bytedance/UI-TARS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fseed-tars.com%2F&quot; target=&quot;_blank&quot;&gt;https://seed-tars.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Arxiv&lt;/strong&gt;：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2501.12326&quot; target=&quot;_blank&quot;&gt;https://arxiv.org/abs/2501.12326&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345234/bytedance-ui-tars-1-5</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345234/bytedance-ui-tars-1-5</guid>
            <pubDate>Fri, 18 Apr 2025 02:18:20 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>10 億上海具身智能基金正式成立</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;由上海國有資本投資有限公司與浦東新區聯合發起的上海具身智創創業投資合夥企業（有限合夥）（以下簡稱「上海具身智能基金」）已於近日完成工商註冊，目標規模 10 億元人民幣，首關 5.6 億元人民幣。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;上海具身智能基金由上海國資母基金、浦東創投、張江集團共同擔任基石出資人，國投孚騰擔任基金管理人，浦東創投擔任執行事務合夥人，基金將依託張江機器人谷，聚焦具身智能本體、核心零部件、泛機器人等產業鏈關鍵環節，加速技術研發與產業轉化，助力上海構建國際領先的具身智能產業集羣。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;266&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-7e14f6e8d13867a59603ab9e17aa3ba9e45.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;該基金將重點投向三大領域：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;具身智能本體：支持人形機器人、工業協作機器人等智能體的研發與場景落地&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;核心零部件：突破高精度傳感器、仿生驅動裝置、邊緣計算芯片等「卡脖子」技術&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;泛機器人應用：拓展醫療康復、智慧物流、特種作業等垂直場景的智能化解決方案&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345232</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345232</guid>
            <pubDate>Fri, 18 Apr 2025 02:13:20 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>阿里開源通義萬相「首尾幀生視頻」14B 模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;阿里通義萬相「首尾幀生視頻模型」&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FkudRFGW7MZRfESYS__V5LA&quot; target=&quot;_blank&quot;&gt;宣佈&lt;/a&gt;開源，該模型參數量為 14B，是業界首個百億參數規模的開源首尾幀視頻模型。可根據用戶指定的開始和結束圖片，生成一段能銜接首尾畫面的 720p 高清視頻。公告稱，此次升級將能滿足用戶更可控、更定製化的視頻生成需求。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;基於現有的 Wan2.1 文生視頻基礎模型架構，通義萬相首尾幀生視頻模型進一步引入了額外的條件控制機制，通過該機制可實現流暢且精準的首尾幀變換；在訓練階段，團隊還構建了專門用於首尾幀模式的訓練數據，同時針對文本與視頻編碼模塊、擴散變換模型模塊採用了並行策略，這些策略提升了模型訓練和生成效率，也保障了模型具備高分辨率視頻生成的效果。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在推理階段，為了在有限內存資源的條件下支持高清視頻推理，萬相首尾幀模型分別採用了模型切分策略以及序列並行策略，在確保推理效果無損的前提下，顯著縮短了推理時間。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;239&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3ffeced748a2e76ecdd763255e46c87121b.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;基於該模型，用戶可完成更復雜、更個性化的視頻生成任務，可以實現同一主體的特效變化、不同場景的運鏡控制等視頻生成。例如，上傳相同位置不同時間段的兩張外景圖片，輸入一段提示詞，通義萬相首尾幀生成模型即可生成一段四季交替變化或者晝夜變化的延時攝影效果視頻；上傳兩張不同畫面的場景，還可通過旋轉、搖鏡、推進等運鏡控制銜接畫面，在保證視頻和預設圖片一致性前提下，同時讓視頻擁有更豐富的鏡頭。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345229</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345229</guid>
            <pubDate>Fri, 18 Apr 2025 02:03:20 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>有了它，AI 都能直接管理 Gitee 代碼倉啦</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;div&gt; 
 &lt;p&gt;不久前，Gitee 開源了官方的 MCP Server——&lt;a href=&quot;https://gitee.com/oschina/mcp-gitee&quot; rel=&quot;nofollow&quot;&gt;Gitee MCP Server&lt;/a&gt;。有了它，我們就能用 AI 助手直接管理 Gitee 代碼倉了！&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;讀取文件內容、查看 PR 變更、理解 Issue 描述，甚至直接操作代碼管理任務，比如創建 PR、合併分支、發佈版本等等，全都不是問題。&lt;/strong&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:left&quot;&gt;簡單來説，Gitee MCP Server 讓 AI 不再是「代碼的旁觀者」，真正成為了參與軟件開發過程的智能助手。&lt;/p&gt; 
 &lt;p&gt;如果你是&lt;strong&gt;個人開發者&lt;/strong&gt;， Gitee MCP Server 可以讓 AI 助手直接參與 PR 審查，減少低級錯誤，提高代碼質量；如果你是&lt;strong&gt;開源項目維護者&lt;/strong&gt;，可以接入 Gitee MCP Server，讓 AI 助手幫助處理大量 Issue，並提供自動化代碼審查，提升社區協作效率。&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;既然它是一個 MCP Server，那麼所有支持 MCP Client 的應用都能用，&lt;/strong&gt;比如 Cursor、claude desktop、windsurf、cherry studio 或是自行實現的帶有 mcp client 的 Agent，等等。（之前「馬建倉」就&lt;a href=&quot;https://www.oschina.net/news/340077&quot; rel=&quot;nofollow&quot;&gt;秀了把操作&lt;/a&gt;：沒寫一行代碼，只用 Cursor 和 Gitee MCP 做了個貪吃蛇遊戲。 ）&lt;/p&gt; 
 &lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;339&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9a4168709eaed70c553754b7015120c1931.png&quot; width=&quot;800&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;那麼，這麼好用的東西怎麼用呢？&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;4 月 21 日晚，&lt;strong&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;Gitee 研發工程師黃家建&lt;/span&gt;&lt;/strong&gt;將做客【開源中國】直播欄目《技術領航》，手把手教學如何上手 Gitee MCP Server：從安裝與配置開始，實戰演練如何用 AI 開發工具結合 Gitee MCP Server 實現 AI + 研發流程的融合。&lt;/p&gt; 
 &lt;p&gt;當然啦，作為 Gitee MCP Server 核心開發者，黃家建還會結合自己的實踐經驗，講一講 MCP 協議是什麼，與 function call 到底有什麼區別。&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;趕緊打開微信，掃碼預約直播吧~&lt;/strong&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;img height=&quot;1840&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-858977b0e133cc1bd2a46be9d6dc787b8dc.png&quot; width=&quot;900&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;&lt;strong&gt;Gitee&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Gitee（碼雲）是開源中國於 2013 年推出的基於 Git 的代碼託管平台、企業級研發效能平台，提供中國本土化的代碼託管服務。&lt;br&gt; 目前，Gitee 已經有超過 1350 萬名開發者，累計託管超過 3600 萬個代碼倉庫，是中國境內規模最大的代碼託管平台。同時，旗下企業級 DevOps 研發效能管理平台 Gitee 企業版已服務超過 36 萬家企業。&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;網址：&lt;a href=&quot;https://gitee.com/&quot; rel=&quot;nofollow&quot;&gt;https://gitee.com/&lt;/a&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;《技術領航》是開源中國 OSCHINA 推出的一檔直播欄目，旨在為&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;開源軟件、商業產品、前沿技術、知名品牌活動等各類項目&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;提供一個展示平台，每週五晚上開播&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;欄目邀請項目的創始人、核心團隊成員或資深用戶作為嘉賓，通過路演式直播分享項目的亮點和經驗，有助於提高項目的知名度，吸引更多的用戶和開發者關注。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果你手上也有好的項目，想要跟同行交流分享，歡迎聯繫我，欄目隨時開放～&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img height=&quot;537&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4dd54c1b0b817689ceefa15aa66d79cfae8.png&quot; width=&quot;400&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/3859945/blog/18184933</link>
            <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/18184933</guid>
            <pubDate>Sun, 13 Apr 2025 13:44:00 GMT</pubDate>
            <author>原創</author>
        </item>
        <item>
            <title>北京市人工智能產業投資基金追加投資智譜（Z.ai）2 億元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1829640482444053837%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;《北京日報》報道稱&lt;/a&gt;，&lt;strong&gt;北京市人工智能產業投資基金追加投資北京智譜華章科技股份有限公司（以下簡稱智譜）2 億人民幣。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;北京市人工智能產業投資基金表示，智譜是基金成立以來投資的第一家 AI 大模型企業，也是目前成長最快的企業。智譜在包括文本、推理、語音、圖像、視頻、代碼等在內的全面模型能力上有深厚積累。此外，商業化佈局完善，擁有超過百萬規模的開發者社區和企業用戶。&lt;/p&gt; 
&lt;p&gt;北京市人工智能產業投資基金表示：希望通過這次投資，進一步推動智譜在開源模型和算法創新方面的能力建設。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4 月 15 日，智譜開源 32B/9B 系列 GLM 模型，包括了基座、推理和沉思模型，所有模型採用寬鬆的 MIT 許可協議，免費商用、分發，引發業內關注。與此同時，智譜啓用全新域名 Z.ai，目前該平台整合了 32B 基座、推理、沉思三類 GLM 模型，後續將作為智譜最新模型的交互體驗入口。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;472&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0417/192641_FbK5_2720166.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;智譜此前在開源方面已經做了很多貢獻，2023 年率先開源國內第一個 Chat 大模型 ChatGLM-6B，短時間內就吸引超過千萬次下載。智譜持續為開源社區和大模型生態發展注入源源不斷的活力。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;北京市人工智能產業投資基金自 2023 年 12 月成立以來，圍繞北京市在人工智能領域的總體佈局，開展直接股權投資。重點方向包括人工智能芯片、訓練數據及相關軟件等底層技術領域，大模型算法創新、具身智能、可信 AI 等關鍵領域，以及大模型等人工智能技術產品開發和垂直行業創新應用等相關領域。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;閲讀更多&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/344631&quot; target=&quot;news&quot;&gt;智譜啓動上市輔導&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/344598&quot; target=&quot;news&quot;&gt;智譜開源 32B/9B 系列 GLM 模型，極速版最高達到 200 tokens/秒&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345155</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345155</guid>
            <pubDate>Sun, 13 Apr 2025 11:29:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>Figma 要求 AI 初創公司停止使用「Dev Mode」一詞</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;近日，設計協作平台 Figma 向瑞典人工智能編程初創公司 Loveable 發出了一份停止使用&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2FBillHeyman%2Fstatus%2F1912182928471412932&quot; target=&quot;_blank&quot;&gt;警告&lt;/a&gt;，原因是 &lt;strong&gt;Loveable 將其新產品的某項功能命名為「Dev Mode」，而 Figma 聲稱該術語已被其註冊為商標&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a60eef82084c2c7bde0249e75284af4f5bc.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftsdr.uspto.gov%2F%23caseNumber%3D98045640%26caseSearchType%3DUS_APPLICATION%26caseType%3DDEFAULT%26searchType%3DstatusSearch&quot; target=&quot;_blank&quot;&gt;據美國專利商標局的記錄顯示&lt;/a&gt;，Figma 在 2024 年 11 月成功註冊了「Dev Mode」商標。該公司於 2023 年推出了自己的「Dev Mode」功能，旨在幫助設計師和開發者更好地協作。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1838&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0417/183511_QrFp_2720166.png&quot; width=&quot;2684&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.figma.com%2Fdev-mode%2F&quot; target=&quot;_blank&quot;&gt;https://www.figma.com/dev-mode/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Figma 在致 Loveable 的信中表示：「我們很榮幸您認同‘Dev Mode’是連接設計與開發的軟件工具的理想名稱。」&lt;/p&gt; 
&lt;p&gt;然而，Figma 強調，該術語已與其軟件廣泛關聯，並且公司需要「保護我們的知識產權」，因此要求 Loveable 停止在其產品中使用「Dev Mode」一詞。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345147/figma-the-term-dev-mode</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345147/figma-the-term-dev-mode</guid>
            <pubDate>Sun, 13 Apr 2025 10:37:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>Qt AI Assistant v0.9 發佈，AI 驅動的開發助手</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;過去兩年中，Qt 一直在努力擁抱生成式 AI，以增強 Qt Creator 中 Qt/QML/C++應用程序的編碼能力。去年推出的 Qt AI Assistant 是一款 AI 驅動的開發助手，可在 Qt Creator 中運行，支持多種大型語言模型（LLM）。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-45670371548f2d5dce858a5fa6c1497cc5e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1240&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0417/182356_Duh4_2720166.png&quot; width=&quot;2308&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Qt AI Assistant v0.9 已於近日發佈，旨在為構建 Qt/C++軟件提供最新的 AI 驅動編碼幫助。現在，通過 CodeLlama-7B-QML 和 DeepSeekCoder v2 Lite 語言模型支持，Qt AI Assistant 提供了本地 LLM 支持。&lt;/p&gt; 
&lt;p&gt;Qt 還發布了 CodeLlama-7B-QML 和 CodeLlama-13B-QML 作為他們在 HuggingFace 和 Ollama 上微調的模型，這些模型基於額外的 QML 代碼片段進行訓練。&lt;/p&gt; 
&lt;p&gt;Qt AI Assistant v0.9 還增加了流式文本支持，以便更好地逐段處理大型語言模型的響應。同時，還引入了利用 AI 構建 Google Test 測試的初步支持。此外，Qt AI Assistant 現在還能夠為 QML 和 C++ 代碼生成內聯代碼註釋。&lt;/p&gt; 
&lt;p&gt;詳情查看&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.qt.io%2Fblog%2Fqt-ai-assistant-v0.9-released-deploy-llms-locally-and-enjoy-the-upgraded-user-experience&quot; target=&quot;_blank&quot;&gt;Qt 博客&lt;/a&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345140/qt-ai-assistant-v0-9-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345140/qt-ai-assistant-v0-9-released</guid>
            <pubDate>Sun, 13 Apr 2025 10:24:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>Scala 語言未來如何進化？</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;blockquote&gt; 
 &lt;p&gt;Scala 語言創建者 Martin Odersky 以及關鍵庫作者與維護者李浩毅描述了他們對 Scala 語言未來的規劃，並希望 Scala 能在現代編程領域保有一席之地。&lt;/p&gt; 
 &lt;p&gt;原文：&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.scala-lang.org%2Fblog%2F2025%2F03%2F24%2Fevolving-scala.html&quot; target=&quot;_blank&quot;&gt;Evolving Scala&lt;/a&gt;&lt;/u&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Scala 應該前進得多快？需要改進什麼？語言本身是否應該改變？本文討論了&lt;strong&gt;Scala 必須不斷進化&lt;/strong&gt;的原因，為什麼這種進化是必要的，以及我們預計這種進化將採取哪些方向。&lt;/p&gt; 
&lt;p&gt;我們希望這能涵蓋許多關於 Scala 語言方向的常見問題，並幫助社區瞭解語言在未來幾個月和幾年中將走向何方。&lt;/p&gt; 
&lt;h2&gt;摘要&lt;/h2&gt; 
&lt;p&gt;儘管 Scala 不再像 2010 年代中期那樣處於炒作的風口浪尖，根據大多數調查，該語言保持在主流語言列表之外。從技術角度來看，核心語言和生態系統在過去十年中得到了極大的改善。在許多方面，Scala 今天的基石比十年前要好得多。&lt;/p&gt; 
&lt;p&gt;Scala 一直引領着編程領域的潮流。為了換取比主流語言略遜一籌的打磨和穩定性，人們選擇 Scala，以便今天就能享受到下個十年的語言特性。Scala 的價值始終在於這些語言特性所賦予的獨特組合——&lt;strong&gt;&lt;em&gt;安全性和便利性&lt;/em&gt;&lt;/strong&gt;，以及它將&lt;strong&gt;&lt;em&gt;面向對象和函數式編程&lt;/em&gt;&lt;/strong&gt;思想融合在一起，從而優雅地適應這些特性。&lt;/p&gt; 
&lt;p&gt;但其他語言也在不斷進步，因此 Scala 必須繼續創新，在它的優勢和劣勢上不斷改進，特別關注新用戶的入門體驗。當然，有一些持續存在的問題，尤其是在 IDE 支持以及生態系統的易學性方面，隨着語言的發展，工具、兼容性和遷移成本等問題也始終會存在。但如果 Scala 想要在未來幾年保持其吸引力和相關性，它別無選擇，只能繼續前進。&lt;/p&gt; 
&lt;h2&gt;Scala 當前所處的位置&lt;/h2&gt; 
&lt;p&gt;儘管炒作已經消退，但從普及度來看，Scala 仍然處於其一貫的位置：並不完全屬於主流，但比那些更小眾的語言有着更廣泛的採用率。例如，RedMonk 語言排名在 2014 年將 Scala 排在第 14 位（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fredmonk.com%2Fsogrady%2F2014%2F06%2F13%2Flanguage-rankings-6-14%2F&quot; target=&quot;_blank&quot;&gt;2014 年的排名&lt;/a&gt;），10 年後的 2024 年仍然在第 14 位（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fredmonk.com%2Fsogrady%2F2024%2F09%2F12%2Flanguage-rankings-6-24%2F&quot; target=&quot;_blank&quot;&gt;2024 年的排名&lt;/a&gt;）。&lt;/p&gt; 
&lt;p&gt;在這段時間裏，編程領域發生了顯著變化：Swift 取代了 Objective C，Go、Kotlin、Dart 和 Rust 的出現，CoffeeScript 和 Perl 的衰落。然而，Scala 的位置始終保持不變。儘管社區中的個人來來去去，但整體而言，Scala 似乎保持着強大的穩定性，擁有一個堅實的愛好者基礎。&lt;/p&gt; 
&lt;p&gt;技術上，Scala 現在比 10 年前擁有更堅實的基礎。生態系統已經成熟，各種反應式或純函數式編程風格已經找到了他們的受眾。像&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Ftoolkit%2Fintroduction.html&quot; target=&quot;_blank&quot;&gt;Scala Toolkit&lt;/a&gt;和&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcom-lihaoyi&quot; target=&quot;_blank&quot;&gt;com.lihaoyi&lt;/a&gt;平台這樣的替代風格現在也可供選擇。新的構建工具如&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fscala-cli.virtuslab.org%2F&quot; target=&quot;_blank&quot;&gt;Scala-CLI&lt;/a&gt;和&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmill-build.org%2F&quot; target=&quot;_blank&quot;&gt;Mill&lt;/a&gt;已經出現，而開發者工具如&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscalameta%2Fscalafmt&quot; target=&quot;_blank&quot;&gt;Scalafmt&lt;/a&gt;和&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscalacenter%2Fscalafix&quot; target=&quot;_blank&quot;&gt;Scalafix&lt;/a&gt;已經得到廣泛應用。IDE 仍然是一個痛點，但我們預計到 2025 年它們會有所改進。重用符號運算符的潮流已經逐漸式微。&lt;/p&gt; 
&lt;p&gt;Scala 一直處於語言前沿，證明瞭像 lambda 表達式、記錄和模式匹配等語言特性在 10-15 年後被 Java、Python 和其他主流語言採納的可行性。目前尚不清楚主流語言在 10-15 年後將會採納 Scala 的哪些當前特性。&lt;/p&gt; 
&lt;h2&gt;Scala 將走向何方？&lt;/h2&gt; 
&lt;p&gt;在本節中，我們將討論核心 Scala 開發者將集中精力的一些領域。&lt;/p&gt; 
&lt;h3&gt;安全性與便利性：兩者取其一&lt;/h3&gt; 
&lt;p&gt;Scala 一直是一種混合型語言。面向對象和函數式風格的融合經常被提及。但它的另一種融合是 &lt;em&gt;安全性&lt;/em&gt; 和 &lt;em&gt;便利性&lt;/em&gt;。傳統上，「腳本」語言如 Python 不安全但方便，而「應用」語言如 Java 安全但不便。Scala 是第一個證明你可以在同一語言中做到這兩點的語言。更現代的語言如 Swift 或 Kotlin 也在這條道路上取得了進步，當 Scala 最初開始時，這種想法是聞所未聞的。&lt;/p&gt; 
&lt;p&gt;然而，過去二十年裏，編程領域並沒有停滯不前。曾經屬於 Scala 的許多獨特之處現在已成為普遍現象。所有現代語言都提供了泛型、類型推斷、lambda 表達式、記錄、模式匹配等特性。為了繼續吸引用戶，Scala 必須在這兩個方向上繼續創新：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;提升安全性而不犧牲便利性&lt;/strong&gt;：例如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fexperimental%2Fcc.html&quot; target=&quot;_blank&quot;&gt;捕獲檢查&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fexperimental%2Fexplicit-nulls.html&quot; target=&quot;_blank&quot;&gt;顯式空值&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fother-new-features%2Fsafe-initialization.html&quot; target=&quot;_blank&quot;&gt;安全初始化&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Fbook%2Fca-multiversal-equality.html&quot; target=&quot;_blank&quot;&gt;多態等價&lt;/a&gt; 等特性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;在不妥協安全性的前提下提高便利性&lt;/strong&gt;：如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fenums%2Fenums.html&quot; target=&quot;_blank&quot;&gt;枚舉&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fother-new-features%2Findentation.html&quot; target=&quot;_blank&quot;&gt;可選括號&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdotty.epfl.ch%2Fdocs%2Freference%2Fother-new-features%2Fnamed-tuples.html&quot; target=&quot;_blank&quot;&gt;命名元組&lt;/a&gt; 等特性。關於 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcontributors.scala-lang.org%2Ft%2Fpre-sip-a-syntax-for-aggregate-literals%2F6697&quot; target=&quot;_blank&quot;&gt;聚合數據字面量&lt;/a&gt; 的討論激起了廣泛的興趣，儘管目前還太早看到它將帶來什麼結果。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Scala 生態系統廣泛且多樣化，但我們認為這些雙重目標是共同的主線。無論您是在 JVM 上使用 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fakka.io%2F&quot; target=&quot;_blank&quot;&gt;Akka&lt;/a&gt; 實現後端服務，通過 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fscala.js%2F&quot; target=&quot;_blank&quot;&gt;Scala.js&lt;/a&gt; 在瀏覽器中構建 Web UI，還是通過 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.chisel-lang.org%2F&quot; target=&quot;_blank&quot;&gt;Chisel&lt;/a&gt; 定製硅芯片，Scala 的安全性和便利性是人們選擇這種語言的原因。&lt;/p&gt; 
&lt;p&gt;其他語言也在追求這些目標，但我們相信 Scala 做得比大多數語言都要好：它的類型系統、模式匹配、集合庫、多重繼承系統等都是業界領先的，即使其他語言也有自己的特色。因此，Scala 能夠比其他語言更好地執行和組合特性，並以一種統一、簡潔和原則性的方式將這些特性結合起來，而不是臨時性地拼接它們。&lt;/p&gt; 
&lt;p&gt;展望未來，Scala 必須繼續追求安全性和便利性的雙重目標。明天的流行框架可能與今天的不同，而今天的又與幾年前的不同。但幾十年來，開發者們一直希望獲得安全性和便利性，我們預計在未來幾年這種需求將繼續存在。&lt;/p&gt; 
&lt;h3&gt;打磨「粗糙邊緣」&lt;/h3&gt; 
&lt;p&gt;Scala 已不再是新興語言。二十年前，許多事物看似是好的想法，但並非所有決定都取得了預期的效果。儘管長期使用 Scala 的開發者可能已經習慣了這些特性，但 Scala 語言本身需要不斷打磨這些粗糙的邊緣：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;一些特性，如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Foverviews%2Fcore%2Factors.html&quot; target=&quot;_blank&quot;&gt;scala-actors&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fscala-parser-combinators&quot; target=&quot;_blank&quot;&gt;scala-parser-combinators&lt;/a&gt; 或 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fscala-xml&quot; target=&quot;_blank&quot;&gt;scala-xml&lt;/a&gt; 已經被移除。它們現在作為獨立的庫存在，你可以根據需要選擇使用或不使用，但已不再是語言的核心部分或標準庫的一部分。其他類似的清理工作包括 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.scala-lang.org%2Fblog%2F2018%2F06%2F13%2Fscala-213-collections.html&quot; target=&quot;_blank&quot;&gt;Scala 2.13 集合重寫&lt;/a&gt;。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;正在處理的更多問題包括：&lt;code&gt;@unroll&lt;/code&gt; 以避免與默認參數和 &lt;code&gt;case class&lt;/code&gt; 的二進制兼容性問題，這是實驗性的（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fimprovement-proposals%2Fpull%2F78&quot; target=&quot;_blank&quot;&gt;SIP-61&lt;/a&gt;），以及 &lt;code&gt;for&lt;/code&gt;-comprehension 的改進處於預覽階段（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fimprovement-proposals%2Fpull%2F79&quot; target=&quot;_blank&quot;&gt;SIP-62&lt;/a&gt;），這些改進應該有助於解決使用這些 Scala 語言特性時長期存在的問題。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;一些其他長期存在的問題尚未得到解決，但正在討論中：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fimprovement-proposals%2Fpull%2F105&quot; target=&quot;_blank&quot;&gt;靈活的變長參數&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcontributors.scala-lang.org%2Ft%2Funpacking-classes-into-method-argument-lists%2F6329&quot; target=&quot;_blank&quot;&gt;解包&lt;/a&gt;、涉及 &lt;code&gt;for&lt;/code&gt;-comprehension 語法的一些其他問題，等等。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;過去 20 年間，編程領域發生了巨大變化，Swift、Kotlin、Java、C# 和 Python 等語言都迅速發展。有時是發現新的方法，有時是針對常見用例收斂到相似解決方案。僅僅因為 Scala 在 2005 年做出了一個設計決策，並且我們接受了這個決策 20 年，並不意味着這個決策在 2025 年仍然是最佳的。有時，我們可以也應該做得更好。&lt;/p&gt; 
&lt;p&gt;Scala 的核心一直是其面向對象（OO）和函數式編程（FP）特徵的融合，以及安全性和便利性的融合，但其他一切都是可以討論的。例如，Scala 經歷了三次集合庫的迭代，才到達了今天的地位，儘管經歷了變革，但語言也因此變得更加出色。我們今天能夠解決哪些長期存在的問題，而我們在 5-10 年後會為此感到慶幸？我們可以從其他語言中採納哪些特性和約定，而不是以我們獨特的方式重新發明輪子？&lt;/p&gt; 
&lt;h3&gt;讓新手更容易上手&lt;/h3&gt; 
&lt;p&gt;我們相信 Scala 可以變得更加容易讓新入門者掌握。所有高級 Scala 用戶在某個時刻也都是新手。你今天所聽到的所有大型 Scala 項目最初都是由一羣新手開始的：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;大學生嘗試使用這門語言來完成他們的研究項目&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Python/Ruby 開發者嘗試使用這門語言來提高他們生產系統的穩定性&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;想要更多靈活性、力量和快速開發的 Java 老手&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;我們支持高級用戶和高級框架，但根據定義，高級用戶能夠自我照顧：解決他們自己的問題，編寫他們自己的文檔，並提出他們自己的語言變更。Scala 的高級用戶一直都在提交他們自己的補丁和改進——來自 Akka 世界的&lt;code&gt;scala.concurrent.Future&lt;/code&gt;，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftypelevel%2Fcats%2Fissues%2F2948&quot; target=&quot;_blank&quot;&gt;部分統一&lt;/a&gt;，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.scala-lang.org%2F2021%2F02%2F26%2Ftuples-bring-generic-programming-to-scala-3.html&quot; target=&quot;_blank&quot;&gt;泛型元組&lt;/a&gt;，以及來自純函數式編程世界的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftypelevel%2Fkind-projector&quot; target=&quot;_blank&quot;&gt;kind-projector&lt;/a&gt;——我們希望他們將繼續這樣做。相比之下，新來者必須依賴 Scala 的核心維護者來確保他們有一個良好的體驗。&lt;/p&gt; 
&lt;p&gt;實際上，這意味着：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;優先支持簡單易用的庫，如&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Ftoolkit%2Fintroduction.html&quot; target=&quot;_blank&quot;&gt;Scala Toolkit&lt;/a&gt;和&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcom-lihaoyi&quot; target=&quot;_blank&quot;&gt;com.lihaoyi&lt;/a&gt;平台，提供代碼和文檔支持。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;將 Scala 語法與其他語言中不必要的差異進行對齊。已經實現了通過&lt;code&gt;import foo.*&lt;/code&gt;進行的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fchanged-features%2Fimports.html&quot; target=&quot;_blank&quot;&gt;通配符導入&lt;/a&gt;和通過&lt;code&gt;foo*&lt;/code&gt;進行的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fchanged-features%2Fvararg-splices.html&quot; target=&quot;_blank&quot;&gt;可變參數拼接&lt;/a&gt;，後者取代了舊的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F46418559%2Fextractor-not-compiling-in-scala%2F46420376&quot; target=&quot;_blank&quot;&gt;蝸牛操作符&lt;/a&gt; &lt;code&gt;foo@_*&lt;/code&gt;。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;下一個重要的 Scala 項目很可能會由那些為瞭解決之前沒有人想過要解決的問題而開始學習這門語言的新手發起。他們會很聰明，但不會是那些推動 Scala 語言極限的專家，他們也不會使用最複雜的高級語言特性或設計模式。他們會知道 Java、Python 或 JavaScript，因為那是他們在學校裏學的。這就是我們需要確保那些人能夠輕鬆地進入 Scala 語言的原因。&lt;/p&gt; 
&lt;h2&gt;考慮的替代方案&lt;/h2&gt; 
&lt;p&gt;關於 Scala 應該走向何方，總是有不同的意見。我們將討論兩個在語言發展方向上反覆出現的主張。&lt;/p&gt; 
&lt;h3&gt;為什麼不全面擁抱框架？&lt;/h3&gt; 
&lt;p&gt;社區中常見的請求之一是讓 Scala 社區全面擁抱某些框架或工具鏈。例如：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;將 Scala 全面作為純函數式編程語言&lt;/li&gt; 
 &lt;li&gt;將 IO monads 作為構建應用程序的方式&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;這些想法值得討論；畢竟，使用 Scala 進行純函數式編程和 IO 單子的子社區一直健康且充滿活力。然而，當更深入地分析這種做法時，存在一些問題：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Scala 的設計初衷就是靈活且富有表現力。正如歷史所證明的那樣，這促進了創新：十年前，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fakka%2Fakka&quot; target=&quot;_blank&quot;&gt;Akka&lt;/a&gt; 和 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscalaz%2Fscalaz&quot; target=&quot;_blank&quot;&gt;Scalaz&lt;/a&gt; 是流行的框架。Scalaz 讓位於更新的函數式庫，如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fzio%2Fzio&quot; target=&quot;_blank&quot;&gt;ZIO&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftypelevel%2Fcats-effect&quot; target=&quot;_blank&quot;&gt;Cats-Effect&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmonix%2Fmonix&quot; target=&quot;_blank&quot;&gt;Monix&lt;/a&gt; 和 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftypelevel%2Ffs2&quot; target=&quot;_blank&quot;&gt;FS2&lt;/a&gt;。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgetkyo%2Fkyo&quot; target=&quot;_blank&quot;&gt;Kyo&lt;/a&gt; 看起來有潛力，但仍然處於早期階段。Scala 語言必須足夠通用，以支持這種自然演變，而不能將自己綁定到那些隨時間興衰的具體框架上。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;核心 Scala 開發者並非框架專家。當 Akka 流行時，他們並非 actor 模型方面的專家，如今也不是 IO monads 方面的專家。因此，我們需要那些子社區中的高級用戶為自己發聲，並推動語言在社區所需方面的改進。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;因此，Scala 必須保持通用性，通過構建任何框架或庫都能從中受益的特性。我們鼓勵框架愛好者提出對 Scala 語言的改進建議：雖然並非每個具體想法都會被接受，但反饋會推動語言變化，從而惠及所有框架。&lt;/p&gt; 
&lt;h3&gt;為什麼不能凍結所有特性開發？&lt;/h3&gt; 
&lt;p&gt;另一個常見的請求是「停止實現特性」。這經常在語言討論中出現，來自對工具支持、就業市場或其他事物不滿意的人。這些情緒是可以理解的。但現實中，凍結特性開發將註定導致 Scala 語言的衰落。&lt;/p&gt; 
&lt;p&gt;Scala 一直以來都比 Java 等語言功能更豐富，但打磨和穩定性卻相對不足。Scala 的核心價值主張是，作為交換，你將獲得來自未來的語言特性，而其他語言可能要過 10-15 年才能獲得：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Apache Spark 於 2014 年選擇 Scala 作為在 JVM 上具有 lambda 表達式和模式匹配功能的語言。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Akka 選擇 Scala，因為它是一種簡潔、高效的編程語言，支持使用 Futures 或 Actors 進行輕量級併發。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Scalaz 和 Cats 選擇 Scala，因為它是一種簡潔的語言，擁有豐富的類型系統。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;其他語言開始採用這些特性，給 Scala 帶來了創新的壓力。到 2025 年，基本上在 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fredmonk.com%2Fsogrady%2F2024%2F09%2F12%2Flanguage-rankings-6-24%2F&quot; target=&quot;_blank&quot;&gt;RedMonk top 20&lt;/a&gt; 的所有語言中，都包含了 lambda 表達式、模式匹配、輕量級併發和類型系統！那麼，為什麼任何項目會選擇 Scala 呢？&lt;/p&gt; 
&lt;p&gt;Scala 僅憑穩定性和完善性是無法與主流語言競爭的，因此如果我們今天停止功能開發，Scala 最終會變成一個功能更差、完善性和穩定性更差的編程語言，並且沒有存在的理由。因此，Scala 需要持續不斷的改進來維持其發展，為人們和項目提供選擇這門語言的理由。我們可能會犯錯——沒有一條保證成功的道路——但功能凍結是一條保證停滯和失敗的道路。&lt;/p&gt; 
&lt;h2&gt;Scala 生態系統中的開放性問題&lt;/h2&gt; 
&lt;p&gt;Scala 生態系統並非沒有問題。以下我們將簡要介紹我們認為 Scala 當前面臨的最大挑戰，以及我們將如何應對這些問題。&lt;/p&gt; 
&lt;h3&gt;工具：集成開發環境 (IDEs)&lt;/h3&gt; 
&lt;p&gt;「工具」是上次 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fscalasurvey2023.virtuslab.com%2F&quot; target=&quot;_blank&quot;&gt;VirtusLab Scala 調查&lt;/a&gt; 中指出的最大改進領域。這主要指的是集成開發環境（IntelliJ 和 VSCode）以及構建工具（如 sbt），這些是每位編寫 Scala 的人都必須與之交互的工具。&lt;/p&gt; 
&lt;p&gt;在 Scala 社區中，使用的兩個主要 IDE 是 IntelliJ 和 VSCode。上述調查表明，大約 80% 的受訪者使用 IntelliJ，大約 50% 使用 VSCode，還有一些人同時使用兩者。&lt;/p&gt; 
&lt;h4&gt;IntelliJ&lt;/h4&gt; 
&lt;p&gt;IntelliJ 對 Scala 3 的支持仍然需要趕上它對 Scala 2 一直以來的支持質量。儘管如此，進展是穩步的，最近的改進顯示出加速的步伐。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Scala 3 最近引入了「預覽」功能的概念：這些功能已經從實驗性穩定下來，但尚未在 IDE 和其他生態系統中獲得支持。這是為了幫助 IntelliJ 和其他 IDE 有足夠的時間跟進，以免在語言演變時落後。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fscala%2F2024%2F05%2F13%2Fjetbrains-joins-the-scala-center-advisory-board%2F&quot; target=&quot;_blank&quot;&gt;JetBrains 現已成為 Scala 中心諮詢委員會的成員&lt;/a&gt;。這已經改善了 JetBrains 和 Scala 編譯器團隊之間的溝通和協調，並有助於避免過去出現的問題，即 IntelliJ 需要時間才能跟上 Scala 的變化。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;最近的語言變更已經相對迅速地融入到 IntelliJ 中：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fsips%2Fsips%2Ftypeclasses-syntax.html&quot; target=&quot;_blank&quot;&gt;SIP-64 改進的給定語法&lt;/a&gt; 和 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fsips%2Fnamed-tuples.html&quot; target=&quot;_blank&quot;&gt;SIP-58 命名元組&lt;/a&gt; 已經在 IntelliJ 2024.3 中可用，而 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fsips%2Fbetter-fors.html&quot; target=&quot;_blank&quot;&gt;SIP-62 For 推導改進&lt;/a&gt; 將在 2025.1 中提供。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;我們承認還有很多工作要做。IntelliJ 團隊正在努力提供對 Scala 3 的最佳支持，您可以期待在未來幾個月看到更多改進。&lt;/p&gt; 
&lt;h4&gt;Metals - Scala 語言服務器&lt;/h4&gt; 
&lt;p&gt;金屬（Metals）通常與 VSCode 一起使用，但也支持其他編輯器。金屬（Metals）與 IntelliJ 相比面臨不同的挑戰：它始終使用實際的 Scala 編譯器來進行代碼智能，因此始終與實際語言保持同步。但它曾遇到過穩定性問題（例如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscalameta%2Fmetals%2Fissues%2F6478&quot; target=&quot;_blank&quot;&gt;#6478&lt;/a&gt;），其中一些問題源於其多進程架構的複雜性，另一些則源於其與 Scala 3 的新集成（例如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscalameta%2Fmetals%2Fissues%2F6628&quot; target=&quot;_blank&quot;&gt;#6628&lt;/a&gt;）。金屬（Metals）的維護者目前正在專注於修復最突出的問題，但如果您在自己的代碼庫中發現了任何問題，請打開 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscalameta%2Fmetals%2Fissues&quot; target=&quot;_blank&quot;&gt;https://github.com/scalameta/metals/issues&lt;/a&gt; 上的問題，VirtusLab 團隊將樂意查看（必要時甚至簽署保密協議）。&lt;/p&gt; 
&lt;p&gt;Scala 3 編譯器的開發者已經廣泛使用 IntelliJ 和 Metals，我們也清楚開發者在使用這兩個 IDE 時所面臨的問題。我們將繼續在發現問題時進行報告，並與 IntelliJ 和 Metals 的維護者合作，以改善編譯器與 IDE 之間的集成。但我們也需要社區人士積極參與問題報告，以便 IDE 維護者能夠進行調查和修復。&lt;/p&gt; 
&lt;h3&gt;構建工具&lt;/h3&gt; 
&lt;p&gt;構建工具 sbt 的複雜性在過去十年或更長時間一直是 Scala 社區的一個長期問題。然而，我們認為隧道盡頭已經出現了曙光：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fscala-cli.virtuslab.org%2F&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Scala-CLI&lt;/strong&gt;&lt;/a&gt; 已變得流行。現在它是默認的 Scala 啓動器（自 Scala &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fscala3%2Freleases%2Ftag%2F3.5.0&quot; target=&quot;_blank&quot;&gt;3.5.0&lt;/a&gt; 以來）。最新的 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fscalasurvey2023.virtuslab.com%2F&quot; target=&quot;_blank&quot;&gt;VirtusLab Scala 調查&lt;/a&gt; 顯示，35% 的人喜歡使用它，另外 35% 的人想要學習它。雖然不適合大型多模塊項目，但 Scala-CLI 幾乎為幾乎所有單模塊項目提供了所需的一切。它也是探索性編碼小型項目和實驗的出色工具。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;替代方案如&lt;/strong&gt; &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmill-build.org%2F&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Mill&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;存在&lt;/strong&gt;。調查發現，10% 的 Scala 開發者喜歡使用&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmill-build.org%2F&quot; target=&quot;_blank&quot;&gt;Mill&lt;/a&gt;，但近 50% 的人希望學習它，而像&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Feed3si9n.com%2Fsbt-remote-cache%2F&quot; target=&quot;_blank&quot;&gt;Scala-CLI&lt;/a&gt;和&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcoursier%2Fcoursier&quot; target=&quot;_blank&quot;&gt;Coursier&lt;/a&gt;這樣的基礎項目也是使用 Mill 構建的。我們認為，Mill 為大型項目提供了 sbt 的一個很好的替代方案。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Foyvindberg%2Fbleep&quot; target=&quot;_blank&quot;&gt;Bleep&lt;/a&gt;雖然仍處於早期階段，但在構建工具領域提供了一個不同的視角，同時也展現出了巨大的潛力。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;sbt 本身也隨着時間的推移有了很大的改進&lt;/strong&gt;。在過去的幾年裏，我們看到了諸如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsbt%2Fsbt%2Fpull%2F3434&quot; target=&quot;_blank&quot;&gt;Unified Slash Syntax&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsbt%2Fsbt-projectmatrix&quot; target=&quot;_blank&quot;&gt;sbt Project-Matrix&lt;/a&gt; 等改進，而即將到來的 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.scala-sbt.org%2F2.x%2Fdocs%2Fen%2Fchanges%2Fsbt-2.0-change-summary.html&quot; target=&quot;_blank&quot;&gt;sbt 2.0&lt;/a&gt; 發佈將帶來 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Feed3si9n.com%2Fsudori-part6%2F&quot; target=&quot;_blank&quot;&gt;構建查詢&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Feed3si9n.com%2Fsbt-remote-cache%2F&quot; target=&quot;_blank&quot;&gt;遠程緩存&lt;/a&gt; 等其他改進。雖然仍然不是完美無缺，但到 2025 年使用 sbt 的體驗已經遠遠優於十年前。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FdavidB%2Fscala-maven-plugin&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Maven&lt;/strong&gt;&lt;/a&gt; 和 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.gradle.org%2Fcurrent%2Fuserguide%2Fscala_plugin.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Gradle&lt;/strong&gt;&lt;/a&gt; 也可以使用。這些構建工具在 Java 圈子裏已經流行了很長時間，並且廣為人知。雖然它們在開源社區中並不像 sbt 那樣受歡迎，但我們看到它們被廣泛應用於許多商業 Scala 代碼庫中。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;總體而言，我們預計這個問題在將來會自行解決：一方面是通過 sbt 本身隨時間不斷改進，另一方面是通過項目選擇提供優秀替代方案的其他工具。&lt;/p&gt; 
&lt;h3&gt;生態系統易學性&lt;/h3&gt; 
&lt;p&gt;我們在 Scala 語言中看到的第三大問題是生態系統的易學性。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Scala 生態系統始終為高級用戶提供了框架：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fakka.io%2F&quot; target=&quot;_blank&quot;&gt;Akka&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftypelevel.org%2Fcats-effect%2F&quot; target=&quot;_blank&quot;&gt;Cats-Effect&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzio.dev%2F&quot; target=&quot;_blank&quot;&gt;ZIO&lt;/a&gt; 以及其他。但它缺乏一個適合初級用戶（例如：你的學生學期項目、你的新畢業生創業項目的代碼庫、由非工程師維護的 devops 或數據分析腳本）的平台。這些領域是 Scala 框架不適合的地方，但 Scala 語言卻可以適用。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在 Scala 生態系統中的文檔傳統上也一直是個問題。這加劇了上述問題：學習一個強大的框架或庫已經足夠困難，但糟糕的文檔使得學習變得更加困難。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;傳統上，儘管有人可能喜歡 Scala 語言，但當他們嘗試做一些簡單的事情，比如「發起一個 HTTP 請求」或「啓動一個服務器」時，他們會遇到一個障礙，突然需要學習關於 Actor、IO 單子或其他高級主題的知識，而相關文檔或學習資料卻不夠充分。&lt;/p&gt; 
&lt;p&gt;但在這裏，我們也看到了樂觀的理由：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Ftoolkit%2Fintroduction.html&quot; target=&quot;_blank&quot;&gt;Scala Toolkit&lt;/a&gt; 和高度重疊的 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcom-lihaoyi&quot; target=&quot;_blank&quot;&gt;com-lihaoyi&lt;/a&gt; 平台，它們包括許多相同的庫。這些提供了幾乎完整且易於使用的「新手友好」平台。它可能沒有更復雜框架的所有功能和裝飾，但絕對足夠用於許多生產部署，並且如果需要，可以輕鬆過渡到更復雜的框架。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;最近 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.scala-lang.org%2Fblog%2F2025%2F02%2F25%2Frock-the-jvm-partnership.html&quot; target=&quot;_blank&quot;&gt;Scala Center 與 Rock the JVM 的合作&lt;/a&gt; 有望幫助改善 Scala 的教學方面。來自 Rock the JVM 的 Daniel Ciocîrlan 一直是一位傑出的教育者和高質量教育材料的創作者。我們希望這次合作能夠擴大 Rock the JVM 的影響力，並幫助 Scala 新手發現並受益於他優秀的視頻和課程。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;這是一個我們一直在緩慢取得進步的領域，我們希望這種「新手友好」的 Scala 風格隨着時間的推移而發展：不是以犧牲更高級框架為代價，而是在它們並行發展的同時，隨着新手的數量增加，更多的人在需要時選擇更復雜的框架。&lt;/p&gt; 
&lt;h2&gt;如何幫助&lt;/h2&gt; 
&lt;p&gt;Scala 是一個社區努力的結果；沒有像其他語言那樣的龐大企業贊助 Scala 的開發。因此，我們需要社區的幫忙來推動語言的發展。這種幫助可以以各種方式實現。&lt;/p&gt; 
&lt;h3&gt;財政&lt;/h3&gt; 
&lt;p&gt;如果您想從財政上支持 Scala，有兩個主要羣體您可以支持：&lt;/p&gt; 
&lt;h4&gt;Scala 中心&lt;/h4&gt; 
&lt;p&gt;Scala 中心支持以下兩個方面：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;核心 Scala 語言和編譯器的開發：探索、原型設計、實施、維護和調試。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持 Scala 社區。這包括 Scala Days 會議、Scala 大使計劃以及工具峯會。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;您可以通過以下兩種方式向 Scala 中心捐款：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;個人捐款或讓您的公司向 Scala 中心捐款 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fscala.epfl.ch%2Fdonate.html&quot; target=&quot;_blank&quot;&gt;https://scala.epfl.ch/donate.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;您可以鼓勵您的公司加入 Scala 中心諮詢委員會，以持續資助它。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;如果您想支持核心 Scala 語言和社區工作，請向 Scala 中心捐款。他們的大部分工作可能並不光彩奪目，但它們在確保 Scala 生態系統持續健康發展中發揮着關鍵作用。&lt;/p&gt; 
&lt;h4&gt;VirtusLab&lt;/h4&gt; 
&lt;p&gt;VirtusLab 負責許多 Scala 工具的核心開發：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Metals 和 VSCode Metals 插件&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Scala-CLI&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Scala 3 LTS，Scala 的發佈流程和一般項目管理&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Scalameta 組織內的工具&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;如果您在使用 Metals 或 Scala-CLI 時遇到問題，並且想資助修復或改進，您應該聯繫 VirtusLab，郵箱地址為&amp;nbsp;scala@virtuslab.com.&lt;/p&gt; 
&lt;h3&gt;代碼&lt;/h3&gt; 
&lt;p&gt;Scala 生態系統的大部分內容都是開源的。這意味着您可以直接深入代碼，修復或改進您自己需要的部分：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;您可以自己修復 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fscala3&quot; target=&quot;_blank&quot;&gt;Scala3&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJetBrains%2Fintellij-scala&quot; target=&quot;_blank&quot;&gt;IntelliJ&lt;/a&gt; 和 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscalameta%2Fmetals&quot; target=&quot;_blank&quot;&gt;Metals&lt;/a&gt; 中的錯誤。儘管代碼庫很大，但有人能夠深入其中並修復他們自己用例所需的錯誤並不罕見。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;每 three 周都會進行一次 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fcontribute%2F%23so-you-want-to-improve-the-scala-3-compiler&quot; target=&quot;_blank&quot;&gt;Compiler Spree&lt;/a&gt; 和 Tooling Spree。這些是遠程編碼會議，您可以與 Scala 語言和工具的核心貢獻者合作解決小規模的問題，並獲取技能和知識，以應對更具挑戰性的問題。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;向工具和基礎設施貢獻修復和改進並不容易，但這也不是不可能的。Scala 工具鏈的大部分都是開源的，並且在過去多次由個人和公司進行了一次的快速貢獻，他們只是需要修復某些問題。向這些項目提交拉取請求與任何專業軟件工程師每天已經做的工作沒有區別，並且可以幫助你定期改善使用 Scala 的體驗。&lt;/p&gt; 
&lt;h3&gt;語言設計&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fsips%2F&quot; target=&quot;_blank&quot;&gt;Scala 改進流程&lt;/a&gt; 並不僅限於核心 Scala 貢獻者。任何人都可以提出一個，例如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fimprovement-proposals%2Fpull%2F40&quot; target=&quot;_blank&quot;&gt;SIP-42 二進制整數字面量&lt;/a&gt;，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fimprovement-proposals%2Fpull%2F78&quot; target=&quot;_blank&quot;&gt;SIP-61 為二進制兼容性@unroll 默認參數&lt;/a&gt;，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fimprovement-proposals%2Fpull%2F97&quot; target=&quot;_blank&quot;&gt;SIP-67 改進嚴格相等性&lt;/a&gt;。如果核心 Scala 團隊沒有優先考慮你想要的，你總是可以介入並提出自己對語言改進的建議。畢竟，沒有人比你更瞭解自己的需求！&lt;/p&gt; 
&lt;p&gt;SIPs 進入語言並不容易。無法保證一個 SIP 會被接受。即使 SIP 成功通過，通常也需要數月甚至一年時間來完成整個審查、實施和實驗過程，最終才能進入 Scala 的發佈。相反，最初被拒絕的想法可能在經過數月或數年的額外實驗和改進後找到進入的方式。但我們需要更多的貢獻者提出更改，而不僅僅是限於 Martin Odersky 和 EPFL 的團隊。&lt;/p&gt; 
&lt;p&gt;如果您有想法要提出，但需要幫助實施，並且有資金支付，請聯繫 [email&amp;nbsp;protected]，我們可以幫助找到合適的專家進行合作。&lt;/p&gt; 
&lt;h2&gt;結論&lt;/h2&gt; 
&lt;p&gt;語言發展是一個間接的過程。核心 Scala 團隊無法獨自構建下一個重大的 Scala 成功故事，這也不會一蹴而就。我們能做的就是從各個方面提升 Scala 的體驗：語言、工具和社區，並希望某處某個人會為一個新的項目選擇 Scala，使其成為「下一個大熱門」。&lt;/p&gt; 
&lt;p&gt;我們認為 Scala 語言的核心吸引力在於其安全性與便利性的結合。強大的類型系統和編譯器可以防止錯誤，提供出色的運行時性能，而簡潔的語法和類型推斷則使其感覺像任何腳本語言一樣靈活和富有表現力。毫無疑問，其他語言也在追求相同的目標，我們認為 Scala 憑藉其獨特的混合函數式-面向對象的設計，可以在多個方面做得更好，從而吸引並留住用戶。&lt;/p&gt; 
&lt;p&gt;但 Scala 語言及其生態系統的細節將隨着時間的推移而演變，我們不應過度依賴我們已經習慣的偶然複雜性。正如 Scala 在 2.13 版本中極大地簡化了&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.scala-lang.org%2Fblog%2F2018%2F06%2F13%2Fscala-213-collections.html&quot; target=&quot;_blank&quot;&gt;集合&lt;/a&gt;，並且用更簡單的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.scala-lang.org%2F2021%2F02%2F26%2Ftuples-bring-generic-programming-to-scala-3.html&quot; target=&quot;_blank&quot;&gt;泛型元組&lt;/a&gt;和其他&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fnew-types%2Findex.html&quot; target=&quot;_blank&quot;&gt;類型系統特性&lt;/a&gt;取代了類型級別的體操一樣，我們期望繼續發現可以改進 Scala 的領域。始終會有關於向後兼容性、遷移和易學性的擔憂，但無論如何，Scala 需要不斷地、批判性地審視自己，並借鑑過去二十年其他語言所學到的東西來提升開發者體驗。&lt;/p&gt; 
&lt;p&gt;Scala 一直是一個社區項目，我們需要社區的幫助來推動它向前發展：無論是通過資金支持、提交拉取請求，還是在語言設計方面。我們希望社區中的每個人都能以自己的方式做出貢獻，並推動語言的發展。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345137/evolving-scala</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345137/evolving-scala</guid>
            <pubDate>Sun, 13 Apr 2025 10:12:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>首個雲超算國標正式發佈：阿里雲、華為雲等聯合起草</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;近日，國家市場監督管理總局、國家標準化管理委員會正式發佈首個雲超算國家標準 GB/T 45400-2025，將於今年 10 月實施。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e500d685c371b785670bd445adca14e3947.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;該標準由阿里雲、華為雲、騰訊雲、中國電子技術標準化研究院等機構牽頭起草，為雲超算在更多高性能計算領域的大規模應用奠定基礎，推動我國算力基礎設施建設邁向標準化、智能化新階段。&lt;/p&gt; 
&lt;p&gt;雲超算是一種新型的高性能計算（HPC），它基於雲基礎設施對外提供彈性可擴展的高性能計算服務。&lt;/p&gt; 
&lt;p&gt;目前，傳統高性能計算在大模型訓練、自動駕駛、生命科學、工業製造、半導體芯片等領域展開應用，並逐漸向更多行業滲透。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;但傳統 HPC 往往架構複雜、擴展性不佳，並存在性能瓶頸、價格高昂等門檻，很多企業雖然想用，卻可能「不懂用」，或「用不好」、「用不起」。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;開箱即用的雲超算成為高性能計算的新選擇，多家單位在此背景下聯合起草首個雲超算國家標準，對雲超算基礎架構、資源協同調度、全棧安全可信體系等關鍵技術指標作出權威性界定，內容囊括雲超算服務的設計研發、部署運維和效能評估全流程。&lt;/p&gt; 
&lt;p&gt;新標準的出爐，相當於給各行各業提供了一份包含雲超算服務產品的設計、實現、應用和選型的科學指南。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345132</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345132</guid>
            <pubDate>Sun, 13 Apr 2025 09:44:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>🔥 Solon AI MCP Server 入門：Helloworld （國產解決方案）</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;目前網上能看到的 MCP Server 基本上都是基於 Python 或者 nodejs ，雖然也有 Java 版本的 MCP SDK，但是鮮有基於 Java 開發的。 作為 Java 開發中的國產頂級框架 Solon 已經基於 MCP SDK 在進行 Solon AI MCP 框架開發了，本文將使用 Solon AI MCP 做一個簡單的 MCP Server 入門。&lt;/p&gt; 
&lt;h3&gt;引入依賴&lt;/h3&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;Solon AI MCP 是 Solon AI 最新增加的特性。支持 Mcp Server 和 Mcp Client，且支持 Java 8 到 Java 24。最新的版本號為 3.2.0（隨 Solon 的版號）。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;span style=&quot;color:#e45649&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style=&quot;color:#e45649&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.noear&lt;span&gt;&amp;lt;/&lt;span style=&quot;color:#e45649&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style=&quot;color:#e45649&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;solon-ai-mcp&lt;span&gt;&amp;lt;/&lt;span style=&quot;color:#e45649&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style=&quot;color:#e45649&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.2.0&lt;span&gt;&amp;lt;/&lt;span style=&quot;color:#e45649&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;span style=&quot;color:#e45649&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;開始寫工具&lt;/h3&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;solon-ai-mcp 支持多端點的架構，可以手動構建端點，或者註解構建端點（&lt;code&gt;@McpServerEndpoint&lt;/code&gt;）。再使用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;@ToolMapping&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;註解編寫工具，就像開發 MVC 一樣簡單和熟悉。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;@ToolMapping 註解標記這個方法是一個工具映射，通過 description 屬性告訴大模型這個工具是做什麼的，其實就是提示詞，大模型會根據自己的理解調用這個工具，所以這個描述很重要。&lt;/li&gt; 
 &lt;li&gt;@ToolParam：從名字可以看出來，就是工具調用時需要傳什麼參數&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span style=&quot;color:#4078f2&quot;&gt;@McpServerEndpoint(sseEndpoint = &quot;/sse&quot;)&lt;/span&gt;
&lt;span style=&quot;color:#a626a4&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#a626a4&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#c18401&quot;&gt;HelloService&lt;/span&gt; {
    &lt;span style=&quot;color:#4078f2&quot;&gt;@ToolMapping(description = &quot;你好世界&quot;)&lt;/span&gt;
    &lt;span style=&quot;color:#a626a4&quot;&gt;public&lt;/span&gt; String &lt;span style=&quot;color:#4078f2&quot;&gt;hello&lt;/span&gt;&lt;span&gt;(&lt;span style=&quot;color:#4078f2&quot;&gt;@ToolParam(description = &quot;名字&quot;)&lt;/span&gt; String name)&lt;/span&gt; &lt;span style=&quot;color:#a626a4&quot;&gt;throws&lt;/span&gt; SQLException {
        &lt;span style=&quot;color:#a626a4&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#50a14f&quot;&gt;&quot;hello &quot;&lt;/span&gt; + name;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;這樣就可以了。啓動時就會自動註冊。並且打印基本的信息：&lt;/p&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//e47839b4670ac8858c97f2c82a4af150.png&quot; width=&quot;600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;用客戶端做個單測（調用這個工具）&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span style=&quot;color:#4078f2&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span style=&quot;color:#4078f2&quot;&gt;@SolonTest(App.class)&lt;/span&gt;
&lt;span style=&quot;color:#a626a4&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#a626a4&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#c18401&quot;&gt;HelloTest&lt;/span&gt; &lt;span style=&quot;color:#a626a4&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color:#c18401&quot;&gt;HttpTester&lt;/span&gt; {
    &lt;span style=&quot;color:#4078f2&quot;&gt;@Test&lt;/span&gt;
    &lt;span style=&quot;color:#a626a4&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#a626a4&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color:#4078f2&quot;&gt;hello&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span style=&quot;color:#a626a4&quot;&gt;throws&lt;/span&gt; IOException {
        &lt;span style=&quot;color:#986801&quot;&gt;McpClientToolProvider&lt;/span&gt; &lt;span style=&quot;color:#986801&quot;&gt;clientToolProvider&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; McpClientToolProvider.builder()
                .apiUrl(&lt;span style=&quot;color:#50a14f&quot;&gt;&quot;http://localhost:8080/sse&quot;&lt;/span&gt;)
                .build();

        &lt;span style=&quot;color:#986801&quot;&gt;String&lt;/span&gt; &lt;span style=&quot;color:#986801&quot;&gt;rst&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; clientToolProvider.callToolAsText(&lt;span style=&quot;color:#50a14f&quot;&gt;&quot;hello&quot;&lt;/span&gt;, Maps.of(&lt;span style=&quot;color:#50a14f&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span style=&quot;color:#50a14f&quot;&gt;&quot;solon&quot;&lt;/span&gt;));
        log.warn(rst);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;運行單測後：&lt;/p&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//80088a925343da37cad3f8f7a721f471.png&quot; width=&quot;600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345131</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345131</guid>
            <pubDate>Sun, 13 Apr 2025 09:43:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>黃仁勳：英偉達堅定不移服務中國市場，AI 將在每個行業引發顛覆性變革</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;4 月 17 日，中國貿促會會長任鴻斌在北京與英偉達公司首席執行官黃仁勳舉行會談。這是黃仁勳時隔 3 個月再次到訪北京。黃仁勳在會談中表示，&lt;strong&gt;中國是英偉達非常重要的市場，希望繼續與中國合作。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;372&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1bf052320ee3587eb2eedcd683357c58a5d.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;據央視財經，針對美國政府決定對英偉達對華出口的 H20 芯片，黃仁勳表示：&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;美國政府加強芯片出口管制已對英偉達業務產生重大影響，當前全球正掀起一場激烈的人工智能競賽，作為當代最具變革性的核心技術，AI 對各行業發展的推動前景廣闊，世界各國都在加速推進技術應用，研發創新與能力提升，這必將對包括中國在內的全球市場格局產生深遠影響。作為深耕中國市場三十載的企業，我們與中國市場共同成長、相互成就。中國不僅是全球最具規模的消費市場之一，其蓬勃發展的產業生態與領先的軟件實力，更成為我們持續創新的重要動力，在中國市場的成功經驗推動我們不斷加大研發投入，而與中國企業的深度合作，也使我們成長為更具競爭力的國際化企業。因此，&lt;strong&gt;我們將繼續不遺餘力優化符合監管要求的產品體系，堅定不移地服務中國市場。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;黃仁勳還表示，AI 已經在諸多領域產生了重大影響，例如在軟件編程方面，如今幾乎所有的英偉達員工都會藉助 AI 進行輔助開發。人工智能正在深刻改變眾多行業的發展格局，但這僅僅是個開端，無論是醫療健康、金融服務、氣候科技還是製造業，每個行業都將迎來人工智能引發的顛覆性變革。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345130</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345130</guid>
            <pubDate>Sun, 13 Apr 2025 09:40:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>Vanna —— 基於 RAG 的自然語言生成 SQL 工具</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                            &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;Vanna 是一個 MIT 許可的開源 Python RAG（檢索增強生成）框架，用於 SQL 生成和相關功能。&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;工作原理&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img height=&quot;357&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0416/151133_1FdG_4252687.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#1f2328&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Vanna 的工作分為兩個簡單的步驟 - 在你的數據上訓練 RAG「模型」，然後提出問題，這些問題將返回可設置為在你的數據庫上自動運行的 SQL 查詢。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;在你的數據上訓練 RAG「模型」&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提出問題&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;500&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0416/151158_TZIY_4252687.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;div style=&quot;text-align:start&quot;&gt;
&lt;p&gt;&lt;strong&gt;Supported LLMs&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/openai&quot;&gt;OpenAI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/anthropic&quot;&gt;Anthropic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/blob/main/src/vanna/google/gemini_chat.py&quot;&gt;Gemini&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/blob/main/src/vanna/hf/hf.py&quot;&gt;HuggingFace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/bedrock&quot;&gt;AWS Bedrock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/ollama&quot;&gt;Ollama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/qianwen&quot;&gt;Qianwen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/qianfan&quot;&gt;Qianfan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/ZhipuAI&quot;&gt;Zhipu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align:start&quot;&gt;
&lt;p&gt;&lt;strong&gt;Supported VectorStores&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/azuresearch&quot;&gt;AzureSearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/opensearch&quot;&gt;Opensearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/pgvector&quot;&gt;PgVector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/pinecone&quot;&gt;PineCone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/chromadb&quot;&gt;ChromaDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/faiss&quot;&gt;FAISS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/marqo&quot;&gt;Marqo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/milvus&quot;&gt;Milvus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/qdrant&quot;&gt;Qdrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/weaviate&quot;&gt;Weaviate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/oracle&quot;&gt;Oracle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align:start&quot;&gt;
&lt;p&gt;&lt;strong&gt;Supported Databases&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://prestodb.io/&quot;&gt;PrestoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hive.apache.org/&quot;&gt;Apache Hive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://clickhouse.com/&quot;&gt;ClickHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.snowflake.com/en/&quot;&gt;Snowflake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/sql-server/sql-server-downloads&quot;&gt;Microsoft SQL Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.google.com/bigquery&quot;&gt;BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://duckdb.org/&quot;&gt;DuckDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

                                                                    &lt;/div&gt;
                                                                </description>
            <link>https://www.oschina.net/p/vanna</link>
            <guid isPermaLink="false">https://www.oschina.net/p/vanna</guid>
            <pubDate>Sun, 13 Apr 2025 09:32:00 GMT</pubDate>
        </item>
        <item>
            <title>CVE 基金會成立</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;有 25 年曆史的 CVE 項目在漏洞管理中起到了舉足輕重的作用，它負責分配和管理漏洞的唯一 CVE ID 編號，確保在提及特定漏洞和補丁時針對的是同一個漏洞。&lt;/p&gt; 
&lt;p&gt;非營利組織 MITRE 與美國國土安全部簽訂了運營 CVE 項目的合同，MITRE 週二確認，合同沒有續簽。這意味着從 4 月 16 日（星期三）起&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/news/345038&quot;&gt;美國政府將停止資助 CVE&lt;/a&gt;&lt;/u&gt;。安全行業人士擔心在其他人接手前漏洞管理上將會出現巨大混亂。&lt;/p&gt; 
&lt;p&gt;CVE Naming Authority 機構 VulnCheck 表示預留了 1000 個 1000 個 CVE 用於 2025 年的漏洞。MITRE 每月發佈 300-600 個 CVE，預留的編號只夠用 2-3 個月。&lt;/p&gt; 
&lt;p&gt;為了應對危機，長期擔任 CVE 董事會成員的聯盟宣佈成立&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.thecvefoundation.org%2F&quot; target=&quot;_blank&quot;&gt;CVE 基金會&lt;/a&gt;，這是一個致力於確保漏洞識別系統持續運行的非營利組織。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;700&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0417/165002_yPMw_2720166.png&quot; width=&quot;1670&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;新成立的基金會官員肯特·蘭德菲爾德表示：「CVE 作為全球網絡安全生態系統的基石，其重要性不容忽視。全球網絡安全專業人員的日常工作——從安全工具和公告到威脅情報和響應——都依賴於 CVE 標識符和數據。如果沒有 CVE，防禦者在應對全球網絡威脅時將處於極其不利的地位。」&lt;/p&gt; 
&lt;p&gt;CVE 計劃提供了一個標準化的系統，用於識別和分類所有軟件和硬件（包括 Apple 的 macOS、iOS、iPadOS 和其他產品）中的安全漏洞。當安全研究人員發現漏洞時，他們會被分配唯一的 CVE 標識符，以便 Apple 等公司協調補丁和更新。&lt;/p&gt; 
&lt;p&gt;MITRE 公司與美國國土安全部簽訂了合同，負責管理該項目。該公司確認，政府資金已於 4 月 16 日到期。&lt;/p&gt; 
&lt;p&gt;據路透社&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reuters.com%2Ftechnology%2Fus-funding-running-out-critical-cyber-vulnerability-database-manager-says-2025-04-15%2F&quot; target=&quot;_blank&quot;&gt;報道&lt;/a&gt;，該項目的到期可能與聯邦政府正在進行的大規模裁員有關，此次裁員的部分原因是政府效率部（DOGE）。&lt;/p&gt; 
&lt;p&gt;受此次裁員影響的美國網絡安全和基礎設施安全局（CISA）表示，由於突然出現的資金缺口可能會擾亂全球漏洞管理，該局正在「緊急努力減輕影響」。&lt;/p&gt; 
&lt;p&gt;安全專家警告稱，如果沒有 CVE，網絡安全工作將面臨「徹底混亂」，因為用於溝通漏洞的通用語言實際上將消失。一位研究人員將其比作「突然刪除所有詞典」。&lt;/p&gt; 
&lt;p&gt;新成立的 CVE 基金會旨在將該項目轉型為不依賴單一政府資助的專門的非營利模式。基金會的組織者透露，他們過去一年一直在為這一可能性做準備。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.thecvefoundation.org%2F&quot; target=&quot;_blank&quot;&gt;該基金會在公告&lt;/a&gt;中表示：「對於國際網絡安全界來説，此舉代表着一個建立反映當今威脅形勢全球性的治理機制的機會。」&lt;/p&gt; 
&lt;p&gt;資金削減還影響了相關的通用弱點枚舉 (CWE) 計劃，該計劃幫助蘋果等公司在潛在安全問題成為漏洞之前發現它們。&lt;/p&gt; 
&lt;p&gt;CVE 基金會預計將在未來幾天公佈更多有關其架構和資金計劃的細節。蘋果和其他大型科技公司可能會在支持其成為網絡安全基礎設施關鍵組成部分方面發揮重要作用。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345117/the-cve-foundation</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345117/the-cve-foundation</guid>
            <pubDate>Sun, 13 Apr 2025 08:55:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>特朗普政府考慮在美國禁用 DeepSeek</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.nytimes.com%2F2025%2F04%2F16%2Ftechnology%2Fnvidia-deepseek-china-ai-trump.html&quot; target=&quot;_blank&quot;&gt;《紐約時報》&lt;/a&gt;週三報道稱，特朗普政府正在考慮對中國人工智能實驗室 DeepSeek 實施新的限制，限制其購買英偉達的人工智能芯片，並可能禁止美國人訪問其人工智能服務。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-203442edacfcf58c37d7ea5f763fad361b4.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;這些限制是特朗普政府在人工智能領域與中國競爭的舉措之一。在 DeepSeek 震驚硅谷和華爾街數月後，美國官員似乎正在權衡多種方案，以限制中國獲取美國技術和消費者。&lt;/p&gt; 
&lt;p&gt;週二，白宮採取行動限制更多英偉達人工智能芯片以及 AMD 的計算卡產品向中國銷售，加強拜登政府制定的規定。&lt;/p&gt; 
&lt;p&gt;近幾個月來，DeepSeek 在美國人工智能開發者中的人氣飆升，這家初創公司具有競爭力的定價迫使硅谷以更低的成本提供前沿人工智能模型。&lt;/p&gt; 
&lt;p&gt;此前，OpenAI 指控這家中國實驗室對其模型進行了篡改，違反了 OpenAI 的使用條款。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;相關閲讀：&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/338735/openai-calls-deepseek-state-controlled&quot; target=&quot;news&quot;&gt;OpenAI 呼籲美國政府禁止 DeepSeek&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/344925&quot; target=&quot;news&quot;&gt;英偉達對華特供版 AI 芯片（H20 GPU）遭遇出口管制&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345109/deepseek-china-ai-trump</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345109/deepseek-china-ai-trump</guid>
            <pubDate>Sun, 13 Apr 2025 08:39:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>字節跳動發佈視頻生成基礎大模型 Seaweed-7B</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;字節跳動近日公佈了一個僅 70 億參數的視頻生成基礎大模型「Seaweed-7B」。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4514fa3f8394e07ea2ee816465b6d9d857e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;u&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fseaweed.video%2F&quot; target=&quot;_blank&quot;&gt;https://seaweed.video/&lt;/a&gt;&lt;/em&gt;&lt;/u&gt;&lt;/p&gt; 
&lt;p&gt;令人驚喜的是，該模型以 66.5 萬個 H100 GPU 小時訓練成本，在文本/圖像到視頻生成任務中全面超越 140 億參數的 Wan 2.1，具體來看：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Seaweed-7B Elo 評分為 1047，勝率 58%，而 Wan 2.1 僅有 53%，OpenAI 的 Sora 更是僅有 36%&lt;/li&gt; 
 &lt;li&gt;可實時生成分辨率為 1280×720、幀率為 24fps 的視頻，比同類模型快 62 倍&lt;/li&gt; 
 &lt;li&gt;40GB 顯存即可支持 1280×720 分辨率生成&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;據官方介紹，Seaweed-7B 結合了變分自編碼器（VAE）和潛在擴散變換器（DiT）。其中，VAE 負責高效的訓練和推理，而 DiT 則通過擴散模型生成圖像和視頻，顯著提高了生成的質量與效率。&lt;/p&gt; 
&lt;p&gt;另外，團隊為了提升 Seaweed-7B 的訓練效率，採用了多階段訓練策略和 GPU 資源的優化調配。預訓練階段通過低分辨率圖像開始，逐步引入高分辨率視頻訓練，提升了模型的泛化能力。此外，在後訓練階段，通過監督微調和基於人類反饋的強化學習（RLHF）進一步提高了生成視頻的美學質量和運動一致性。&lt;/p&gt; 
&lt;p&gt;目前，Seaweed-7B 相關報告已公開：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fseaweed.video%2Fseaweed.pdf&quot; target=&quot;_blank&quot;&gt;https://seaweed.video/seaweed.pdf&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345103/bytedance-seaweed-video</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345103/bytedance-seaweed-video</guid>
            <pubDate>Sun, 13 Apr 2025 08:20:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>馬斯克：特斯拉將實現純 AI 自動駕駛，僅需攝像頭和 AI 芯片</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;馬斯克近日在社交媒體發文稱，特斯拉即將實現一種通用的、純 AI 的全自動駕駛（FSD）解決方案。&lt;/p&gt; 
&lt;p&gt;據其介紹，這一技術將完全依賴於攝像頭和特斯拉自主研發的 AI 芯片，並由特斯拉開發的 AI 軟件驅動。實際上，這一聲明與特斯拉長期以來堅持的僅靠視覺實現自動駕駛的願景相一致。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0417/160721_YZPO_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;值得注意的是，特斯拉官方 X 賬號近日發佈視頻，稱特斯拉德克薩斯工廠現在使用 FSD 無監督技術將汽車從生產線末端運送到發貨物流區，同時宣佈無監督 FSD 系統已積累超 50000 英里（約 80467.22 公里）駕駛里程，全程無需人工幹預。&lt;/p&gt; 
&lt;p&gt;在特斯拉工廠內部，新款 Model Y 和 Cybertruck 實現了從生產線到交付停車場的自動行駛。自動駕駛車輛運用最新 AI4 硬件（4.0 版），可應對交通標誌、工廠建設、行人和機械化交通等複雜道路環境，且車輛間能相互通信以避免碰撞。&lt;/p&gt; 
&lt;p&gt;據悉，特斯拉無監督 FSD 公路測試計劃即將開啓，預計 6 月於奧斯汀率先開展。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;相關閲讀：&lt;a href=&quot;https://www.oschina.net/news/340233&quot; target=&quot;news&quot;&gt;馬斯克：2024 年特斯拉 AI 投資約 100 億美元、FSD 安全水平將超過人類&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345100</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345100</guid>
            <pubDate>Sun, 13 Apr 2025 08:08:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>Linux 6.16 主線內核將合併 Asahi UAPI，進一步優化支持蘋果 M1 / M2 圖形驅動</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Fdri-devel%2Fe147ff95-697b-4067-9e2e-7cbd424e162a%40linux.intel.com%2F&quot; target=&quot;_blank&quot;&gt;根據 Linux 內核郵件列表的消息&lt;/a&gt;&lt;/u&gt;，Asahi 驅動用戶空間 API（UAPI）的頭文件已通過 DRM-Misc-Next，被提交至 DRM-Next 隊列，並計劃在 Linux 6.16 的合併窗口（預計為 6 月）正式納入主線內核。&lt;/p&gt; 
&lt;p&gt;這一 UAPI 主要用於支持蘋果 M1 和 M2 系列芯片的 GPU，目標是實現 Linux 系統對這些硬件圖形功能的驅動。&lt;/p&gt; 
&lt;p&gt;UAPI 的設計參考了其他現代 Vulkan 驅動程序（例如 Xe 和 Panthor），採用了顯式虛擬內存管理與同步機制，從而確保運行效率。開發者 Alyssa Rosenzweig 表示，此舉的目的是讓 Mesa 驅動能夠直接基於主線內核構建，減少對外部頭文件的依賴，從而提升系統的兼容性。&lt;/p&gt; 
&lt;p&gt;儘管 UAPI 的頭文件已經提交，但完整的 Asahi 內核圖形驅動目前尚未完成開發。主要原因在於該驅動使用 Rust 語言編寫，而 Rust 在內核中的抽象支持仍需大量的上游工作。&lt;/p&gt; 
&lt;p&gt;此外，作為一款生產級圖形驅動，Asahi 依賴許多尚未合併的 Rust 抽象層，因此短期內難以實現全面的上游整合。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1dade207fb4a37d21fe204449acb7a922be.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;目前，Mesa 開源堆棧已驗證了 UAPI，並支持包括 OpenGL 4.6、OpenGL ES 3.2、OpenCL 3.0 以及 Vulkan 1.4 在內的多種標準。然而，由於用戶空間與主線內核之間的對接尚未完全實現，實際應用仍然受到一定限制。&lt;/p&gt; 
&lt;p&gt;Rosenzweig 進一步強調，提交 UAPI 頭文件的主要目的是為了接受社區的審查，以確保其穩定性，並在未來以向後兼容的方式進行演進，從而為後續驅動程序的全面落地奠定基礎。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345097/linux-6-16-ashai-uapi-header</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345097/linux-6-16-ashai-uapi-header</guid>
            <pubDate>Sun, 13 Apr 2025 08:02:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>豆包公佈 Seedream 3.0 文生圖模型技術報告</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;字節跳動旗下「豆包大模型團隊」&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FmLRMHXq51HDBN_Vaylm_mw&quot; target=&quot;_blank&quot;&gt;發文表示&lt;/a&gt;&lt;/u&gt;，全新圖像生成基礎模型「Seedream 3.0」技術報告正式發佈。&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;Seedream 3.0 是一個原生高分辨率、支持中英雙語的圖像生成基礎模型，亮點如下：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;原生 2K 直出，適配多比例場景：無需後處理可直接輸出 2K 分辨率圖像，從手機端到巨幅海報場景的視覺需求均可滿足；&lt;/li&gt; 
 &lt;li&gt;3 秒出圖，大幅提升創作效率：面向海報設計、視覺創意等需求，可實現 3 秒左右快速生成高品質圖像，實現「所想即所得」的實時創意交互；&lt;/li&gt; 
 &lt;li&gt;小字更準，文本排版效果增強：優化小字體高保真生成、多行文本語義排版等業界難題，讓 AI 具備商業級圖文設計能力；&lt;/li&gt; 
 &lt;li&gt;美感 &amp;amp; 結構提升，生成富有感染力：指令遵循進一步增強，人體和物體結構崩壞改善，且進一步弱化了出圖的 AI 感，實現從「看得清」到「有感染力」的審美提升。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0417/155350_bNhq_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;值得一提的是，在權威競技場 Artificial Analysis 上，Seedream 3.0 與 GPT-4o、Imagen 3、Midjourney v6.1、FLUX 1.1 Pro、Ideogram 3.0 等文生圖模型同台競技，在近期打榜中，一度排名第一。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0417/154909_oM7T_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Seedream 3.0 已在本月正式上線，目前已在豆包、即夢等平台全量開放。&lt;/p&gt; 
&lt;p&gt;另外，Seedream 3.0 的相關技術報告以及詳細內容也已經上架：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Arxiv：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2504.11346&quot; target=&quot;_blank&quot;&gt;https://arxiv.org/abs/2504.11346&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;技術呈現頁：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fteam.doubao.com%2Ftech%2Fseedream3_0&quot; target=&quot;_blank&quot;&gt;https://team.doubao.com/tech/seedream3_0&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345096/seedream-3-0-technical-report</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345096/seedream-3-0-technical-report</guid>
            <pubDate>Sun, 13 Apr 2025 07:51:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
    </channel>
</rss>