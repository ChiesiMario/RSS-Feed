<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>開源中國-綜合資訊</title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="http://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml"></atom:link>
        <description>開源中國-綜合資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)</description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>en</language>
        <lastBuildDate>Thu, 25 Apr 2024 13:48:39 GMT</lastBuildDate>
        <ttl>1</ttl>
        <item>
            <title>開源日報 | 「鴻蒙原生版」微信；小鎮裏的「大模型」；全網最剛遊戲公司；半個 AI 圈向李彥宏「開炮」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;歡迎閲讀 OSCHINA 編輯部出品的開源日報，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.4.25&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要點&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/289383/nginx-1-26-released&quot; target=&quot;_blank&quot;&gt;nginx 1.26.0 穩定版實驗性支持 HTTP/3&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;主要變化&lt;/p&gt; 
&lt;ul style=&quot;list-style-type:disc; margin-left:0; margin-right:0&quot;&gt; 
 &lt;li&gt;合併來自 1.25.x 主線分支的新功能和錯誤修復&lt;/li&gt; 
 &lt;li&gt;實驗性支持 HTTP/3&lt;/li&gt; 
 &lt;li&gt;流模塊 (stream module) 引入&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnginx.org%2Fen%2Fdocs%2Fstream%2Fngx_stream_core_module.html%23server_name&quot; target=&quot;_blank&quot;&gt;虛擬服務器&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;支持將流連接&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnginx.org%2Fen%2Fdocs%2Fstream%2Fngx_stream_pass_module.html&quot; target=&quot;_blank&quot;&gt;傳遞&lt;/a&gt;給監聽套接字&lt;/li&gt; 
 &lt;li&gt;HTTP/2 on a&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnginx.org%2Fen%2Fdocs%2Fhttp%2Fngx_http_v2_module.html%23http2&quot; target=&quot;_blank&quot;&gt;per-server&lt;/a&gt;&amp;nbsp;basis&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnginx.org%2Fen%2Fdownload.html&quot; target=&quot;_blank&quot;&gt;下載地址&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/289394/apple-openelm&quot; target=&quot;_blank&quot;&gt;蘋果開源面向移動設備打造的小尺寸模型 OpenELM&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;蘋果在 Hugging Face 平台上發佈了一個「具有開源訓練和推理框架的高效語言模型」，名為 OpenELM。&lt;/span&gt;OpenELM 使用分層縮放策略，可以有效地分配 Transformer 模型每一層的參數，從而提高準確率。例如，在參數量約為 10 億的情況下，OpenELM 與 OLMo 相比準確率提升了 2.36%，同時所需的預訓練 tokens 數量僅有原來的 50%。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;OpenELM 有四種尺寸：2.7 億、4.5 億、11 億和 30 億個參數。而微軟 Phi-3 模型為 38 億，因此前者在小型機型上運行成本更低，可在手機和筆記本電腦等移動設備上運行，是做 AI 硬件的絕佳小模型。&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/289497/wechat-mmkv-support-harmonyos-next&quot; target=&quot;news&quot;&gt;最新開源代碼證實！「鴻蒙原生版」微信正在積極開發中&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;MMKV 是微信客戶端自用的 key-value 組件，於 2018 年&lt;a href=&quot;https://www.oschina.net/news/100210/tecent-opensource-mmkv&quot;&gt;正式開源&lt;/a&gt;，支持 Android /macOS/ Windows / POSIX 平台。MMKV 底層序列化 / 反序列化使用 protobuf 實現，性能高，穩定性強。從 2015 年中至今在微信上使用，其性能和穩定性經過了時間的驗證。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;官方公告顯示，最新發布的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTencent%2FMMKV%2Freleases%2Ftag%2Fv1.3.5&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;MMKV&amp;nbsp;v1.3.5&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;已正式支持&amp;nbsp;HarmonyOS NEXT&lt;/strong&gt;，目前大部分功能在該平台上可正常使用。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-23464b9424efb7293554a65a98292c32ae6.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;MMKV for HarmonyOS NEXT 使用文檔：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTencent%2FMMKV%2Fwiki%2Fohos_setup&quot; target=&quot;_blank&quot;&gt;https://github.com/Tencent/MMKV/wiki/ohos_setup&lt;/a&gt;&lt;/p&gt; 
&lt;h3 style=&quot;margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/289471/snowflake-s-open-source-arctic-llm&quot; target=&quot;_blank&quot;&gt;Snowflake 開源 Arctic LLM 挑戰 Llama 3、Grok 等&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;數據庫公司 Snowflake&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.snowflake.com%2Fblog%2Farctic-open-efficient-foundation-language-models-snowflake%2F%3Futm_cta%3Dwebsite-homepage-featured-blog-snowflake-artic-intro&quot; target=&quot;_blank&quot;&gt;宣佈&lt;/a&gt;開源了新的大語言模型&amp;nbsp;Arctic，號稱 「高效智能且真正開放」。專為複雜企業工作負載而設計，以成本效益為主要亮點。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;與訓練預算遠高於所需的模型相比，它可以高效地完成 SQL 生成、編碼和指令跟蹤等企業智能任務，滿足或超過這些領域的基準。 Snowflake 表示，這些指標對企業很重要，因為這些是構建生成式人工智能副駕駛所需的能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Snowflake 聲稱，其 Arctic 模型的性能優於大多數開源模型和一些參數較少的閉源模型，並且使用較少的計算能力進行訓練。較低的訓練成本將使公司能夠訓練定製模型，而無需花費過多的資金。&lt;/span&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日觀察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交觀察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6182606334%2FObcWj1sxJ&quot; target=&quot;_blank&quot;&gt;字節和曠視發佈的項目 HiDiffusion，代碼開源了&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;無需訓練，只需要一行代碼就可以提高 SD 生成圖像的清晰度和生成速度。&lt;/p&gt; 
   &lt;p&gt;支持將圖像生成的分辨率提高至 4096×4096，同時將圖像生成速度提升 1.5 至 6 倍。&lt;/p&gt; 
   &lt;p&gt;支持所有 SD 模型同時也支持 SD 模型的下游模型，比如 Playground。&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;歸藏的 AI 工具箱&lt;/strong&gt;&lt;/p&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1727858283%2FObbl8kXSU&quot; target=&quot;_blank&quot;&gt;Meta 宣佈推出 Llama 3 的介紹視頻（雙語字幕）&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;在我們深入瞭解 Llama 之前，先給大家介紹一些背景信息。我們實際上在 2023 年 2 月在 Meta 組織了一個團隊。這個團隊集結了公司內從 SysML 到模型開發，再到數據處理，甚至是一些在各個領域進行深度研究的頂級研究員。我們還聘請了一些創新型的人才。&lt;/p&gt; 
   &lt;p&gt;Llama 2 模型在 7 月份發佈，可商業使用。參數範圍從 7 到 70。這是當時的最先進成果。然後在八月和一月，我們發佈了 Code Llama。12 月推出 Purple Llama 項目，關注安全和信任。&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;寶玉 xp&lt;/strong&gt;&lt;/p&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6105753431%2FObkDInc3e&quot; target=&quot;_blank&quot;&gt;開源可商用文本轉語音模型&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;加拿大初創公司 MyShell 和 MIT 升級推出 OpenVoice V2。&lt;/p&gt; 
   &lt;p&gt;作為一種文本轉語音模型，OpenVoice V2 僅使用一小段人聲就能克隆語音。&lt;/p&gt; 
   &lt;p&gt;而且支持轉成其他語言，包括英語、西班牙語、法語、中文、日語和韓語。&lt;/p&gt; 
   &lt;p&gt;PS：官方宣佈 OpenVoice V2 完全開源，允許免費商業使用~&lt;/p&gt; 
   &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;在線體驗：&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.lepton.ai%2Fplayground%2Fopenvoice&quot; target=&quot;_blank&quot;&gt;網頁鏈接&lt;/a&gt;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博 &lt;strong&gt;量子位&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒體觀察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.com.cn%2Farticle_7517400647_1c0126e47059050t3e.html&quot; target=&quot;_blank&quot;&gt;信息軟件業，加快「擁抱」大模型&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;根據行動方案，北京將探索人工通用智能前沿技術，支持攻關內容生成、檢索增強生成、人工智能內容安全標識、深度學習框架、向量數據庫等大模型工具類軟件，搭建大模型原生軟件應用商店、大模型安全靶場。以建設單體萬卡智能算力中心為目標，組織攻關算力芯片、高性能通信、調度系統、容器編排等雲計算關鍵技術。支持在教育、醫療、文化、工業等領域建設人工智能場景應用實驗室，打造示範性場景落地項目。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;人民資訊&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.com.cn%2Farticle_3205514555_bf10453b02001lvrq.html&quot; target=&quot;_blank&quot;&gt;中國經濟向前「進」丨小鎮裏的「大模型」 這裏有 100 萬台電腦的算力→&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;進軍，代表着在新領域開拓新空間。當前我國不斷增長的高技術產業，就體現出了這樣一種勢頭。&lt;/p&gt; 
 &lt;p&gt;同比增長 11.4%!這是高技術產業投資跑出的增速，這個增速比全部投資增速還要高出 6.9 個百分點，投資新引擎的地位日漸凸顯。&lt;/p&gt; 
 &lt;p&gt;分領域來看，高技術製造業投資同比增長 10.8%!高技術服務業投資同比增長 12.7%!&lt;/p&gt; 
 &lt;p&gt;這組高速增長的數據，意味着有更多企業正在抓緊向「高技術」攀登，向前沿領域進軍。人工智能可以説是今年最火的領域之一。在浙江杭州錢塘江畔，一個人工智能小鎮裏，大模型、各類 AI 應用正在加速生長。&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;安徽財經網&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fi.ifeng.com%2Fc%2F8Z3yMkcdKSE&quot; target=&quot;_blank&quot;&gt;英偉達收購兩家 AI 創企，要讓 AI 芯片變得更便宜&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;英偉達正成為 AI 熱潮中最活躍的企業投資方之一，在去年投資 30 多家創企後，現在它的投資名單又新增兩家以色列 AI 創企——Run:ai 與 Deci。&lt;/p&gt; 
 &lt;p&gt;英偉達今日宣佈達成一項最終協議，收購 Run:ai。據 CTech 報道，這筆交易價預計約為 7 億美元。根據 LinkedIn，Run:ai 約有 150 名員工，累計融資 1.18 億美元；Deci 擁有約 100 名員工，累計融資 5500 萬美元。英偉達與 Deci 的交易未公開披露，交易價未知。&lt;/p&gt; 
 &lt;p&gt;據 The Information 報道，被英偉達最近達成收購交易的這兩家創企，旨在降低開發或運行生成式 AI 模型的成本，幫助客戶更有效地利用 AI 計算資源，進而提振英偉達 AI 芯片的需求。&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;- &lt;strong&gt;芯東西&lt;/strong&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推薦&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;開源項目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkevmo314%2Fmagic-copy&quot; target=&quot;_blank&quot;&gt;kevmo314/magic-copy&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;248&quot; src=&quot;https://static.oschina.net/uploads/space/2023/0414/184116_YyZh_5430600.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkevmo314%2Fmagic-copy&quot; target=&quot;_blank&quot;&gt;https://github.com/kevmo314/magic-copy&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;Magic Copy 是一個 Chrome 擴展，可從圖像中提取前景對象並將其複製到剪貼板，基於&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;&amp;nbsp;Meta 的 Segment Anything Model。&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/u/5783135/blog/11054744&quot; target=&quot;_blank&quot;&gt;大模型下 B 端前端代碼輔助生成的思考與實踐&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;B 端頁面列表、表單、詳情都支持生成，鏈路大概可分為以下幾個步驟。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;img alt=&quot;&quot; height=&quot;312&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-865640d7af801189d2dad45b3f22b568e07.gif&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;輸入自然語言&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;結合大模型按照指定規則提取出相應搭建信息&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;搭建信息結合代碼模板與 AST 輸出前端代碼&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;div&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;事件點評&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289460&quot; target=&quot;_blank&quot;&gt;知名遊戲公司出新規：員工娶妻彩禮不得超過 10 萬元&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;日前知名遊戲公司多益網絡發佈公告稱，公司規定：公司任何員工娶妻彩禮不得超過 10 萬人民幣價值，否則全公司通報批評並嚴懲。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;公開資料顯示，多益網絡成立於 2006 年 7 月，總部位於廣東省廣州市，公司專注於網絡遊戲的研發與運營，是中國十大網遊研發及運營公司之一。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;多益網絡的業務涵蓋大型網絡遊戲、移動遊戲、電子郵箱、IM 即時通訊軟件和社交網站等，旗下擁有多款知名遊戲產品，如《神武 4》端手遊、《夢想世界》端手遊等。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;224&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8e5d0f2f76f8ec6b802487165dda682abd6.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;點評&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2328; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;這一規定在業界引起了一定的爭議。一方面，它反映了企業對員工個人生活的幹預，這在現代企業管理中較為罕見。另一方面，這也反映了企業在制定內部政策時對文化和社會習俗的考慮。彩禮傳統上被視為男性家庭對女性家庭的補償，這一規定可能被解讀為對這一傳統性別角色的挑戰，從而引發關於性別平等和傳統性別角色定位的討論。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2328; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;以及可能會影響員工對公司的看法和忠誠度，同時也可能引起公眾對企業文化和社會責任的討論，反映了當前社會對傳統習俗與現代企業管理的衝突的關注。在現代企業環境中，如何平衡企業文化、員工個人權益以及社會習俗，是一個值得深思的問題。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2328; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;此舉還可能會引起公眾對多益網絡企業形象的關注，影響其品牌形象和公眾信任度。&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289441/ftc-bans-noncompete-agreements&quot; target=&quot;_blank&quot;&gt;美國廢除絕大部分職業的《競業禁止協議》&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;4 月 24 日，美國媒體 NPR&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.npr.org%2F2024%2F04%2F23%2F1246655366%2Fftc-bans-noncompete-agreements-lina-khan&quot; target=&quot;_blank&quot;&gt;報道稱&lt;/a&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;，美國聯邦貿易委員會 (FTC) 週二發以 3 票對 2 票的微弱優勢&lt;/span&gt;&lt;strong&gt;禁止了幾乎所有職業的競業禁止協議&lt;/strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;。此類協議會禁止員工加入競爭企業或創辦自己的企業。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;據稱這是 50 多年來 FTC 官員首次發佈一項規定，要求在整個經濟範圍內改變公司企業的競爭方式。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;FTC 主席 Lina Khan 在一份聲明中表示：「競業禁止條款壓低了工資，遏制了新想法，並剝奪了美國經濟的活力。一旦禁止競業禁止條款，每年將會有 8500 多家新的初創公司誕生，員工平均每年也將多賺 524 美元。」&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;272&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6ce1bff7b6ae17ffeefd93492175c935f26.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;點評&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;FTC 廢除競業禁止協議的決定不僅對員工和僱主產生影響，還可能對市場競爭、法律框架以及經濟結構產生深遠的影響。這一決策反映了政府在平衡商業利益和勞動力權益方面的重要作用，同時也表明了在不斷變化的經濟環境中，法律和政策需要不斷適應和調整。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;競業禁止協議的廢除意味着員工將有更大的自由度去選擇他們的工作，而不受前僱主合同的限制。這有助於提高員工的工作滿意度和職業流動性，同時促進市場競爭。廢除競業禁止協議將減少企業間的壟斷行為，增強市場競爭。這有助於新企業的成立和發展，從而促進創新和經濟增長。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;FTC 估計，這一禁令將使工資和福利在十年內增加 4880 億美元。這表明廢除競業禁止協議可能對工人的經濟福祉產生積極影響。雖然 FTC 的決定已經作出，但預計會有來自僱主和商業團體的法律挑戰。這些挑戰可能會延遲該禁令的實施，甚至可能導致其最終無法生效。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;對於企業來説，這一決策意味着他們需要尋找其他方式來保護其商業祕密和知識產權，而不是依賴於競業禁止協議。&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289440/is-php-still-worth-it-in-2024&quot; target=&quot;_blank&quot;&gt;PHP 在 2024 年還值得學習嗎？&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;IOBE 在&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/news/286796/tiobe-index-202404&quot;&gt;2024&amp;nbsp;年 4 月榜單&lt;/a&gt;中曾指出，隨着眾多競爭對手進入市場以及語言本身出現的一些問題；PHP 已經不復往日輝煌，在 TIOBE 指數中的排名跌至歷史最低點（第 17 位）。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;在有關 PHP 已經日漸沒落的言論四起的背景下，軟件工程師&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;Sotiris Kourouklis&amp;nbsp;&lt;span style=&quot;color:#000000&quot;&gt;近日發佈了一篇名為 「&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsotergreco.com%2Fis-php-still-worth-it-in-2024&quot; target=&quot;_blank&quot;&gt;Is PHP still worth it in 2024 ?&lt;/a&gt;」 的博客文章，對 PHP 語言進行了一番詳盡的分析，探討該語言在現代 Web&amp;nbsp;開發中的實用性和效率。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;並最終得出結論稱，&lt;strong&gt;PHP 在 2024 年仍然是 Web 開發的一個不錯選擇。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;203&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-138c3b04e87d1fef7bf375ce68eae75cd0b.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;點評&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;PHP 在 2024 年的編程語言發展和市場方面仍具有重要地位。儘管面臨新興技術的挑戰，但其在 Web 開發領域的普及度、社區支持、靈活性和與其他技術的良好集成，使其繼續在市場上保持競爭力。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;PHP 仍然是網絡開發中最受歡迎的編程語言之一，支撐着包括 Facebook、Wikipedia 和 WordPress 在內的大量網站。PHP 社區仍然活躍，持續有貢獻者參與 PHP 核心的開發，這些貢獻不僅包括錯誤修復和小補丁，還包括許多前瞻性的增強，推動 PHP 進入現代網絡開發的現代時代。&lt;/span&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;開源之聲&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒體觀點&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.xinhuanet.com%2Ftech%2F20240425%2Fb4292ac6fe234709ac2fd21ddb15d0ce%2Fc.html&quot; target=&quot;_blank&quot;&gt;周鴻禕參加中關村論壇：2024 是大模型場景之年，有望實現「萬模萬企萬場景」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;color:#1a1a1a; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;360 集團創始人周鴻禕認為，大模型不是泡沫，將引領新一輪工業革命。大模型有兩條路，一條是越做越大，OpenAI 走的就是這條路。這條路需要政府層面多指導，鼓勵開源、開放、共享的理念，組織一個開源社區，讓更多人蔘與進來，共同推動技術的進步，實現產業的跨越式發展。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1a1a1a; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;「除了越做越大，還能越做越專。專業大模型這條路，可以讓我們不被 OpenAI 牽着鼻子走。2023 年，是百模大戰，解決了大模型從無到有的問題。2024 年則是場景之年，如果有一萬家企業尋找了一萬個場景，開發了一萬個大模型，那大模型就真正進入百行千業。新一輪工業革命因此會在中國率先出現。」&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;央廣網&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.com.cn%2Farticle_1642634100_61e89b7401901e0cu.html&quot; target=&quot;_blank&quot;&gt;半個 AI 圈，向李彥宏「開炮」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#27282d; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;「目前李彥宏認為開源模型會越來越落後，最主要的理由還是訓練和推理成本高。」但事實上，「office、數據庫等人力成本很高的項目也有許多不錯的開源項目，為何大模型就不行了呢？」&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#27282d; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;「如果百度市佔率高，那你的對手可能就會考慮推開源版本，哪怕是不如閉源版本好，但是客觀上也是一個選擇，有些客戶的需求也未必很高，那開源版本就足夠了。」在他看來，「開源閉源都是一種選擇，很難一刀切地評價開源好壞。畢竟，開源賺的是名氣和社區，閉源做的是收入。」&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;新浪科技&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8Z41fmEzREk&quot; target=&quot;_blank&quot;&gt;一個大模型引發的停牌：商湯科技股價為何一日暴漲 30%？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;商湯將股價暴漲的原因指向了日前發佈的「日日新 SenseNova 5.0」大模型。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;不過，時代週報記者從多位 AI 從業者口中獲知，「日日新 5.0」帶來的行業震動也許沒有想象中那麼大。有從業者表示，如今大模型的突破已經很難在科技圈掀起波瀾了。在他們看來，國內各家大模型的差距並不大，且多為大參數，除非有完全不同的技術路線出現，或者是有開源的且通過小參數、小算力達到良好的效果。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;-&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;時代週報&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.ce.cn%2Fcysc%2Ftech%2Fgd2012%2F202404%2F25%2Ft20240425_38982717.shtml&quot; target=&quot;_blank&quot;&gt;鴻蒙系統迎「決戰時刻」 原生應用成「關鍵之戰」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;前方無限風光，腳步鏗鏘有力。站在 2024 年，華為鴻蒙操作系統的建設迎來「決戰時刻」。日前，中國證券報記者調研發現，儘管面臨巨大的挑戰和不確定性，但鴻蒙的成功已經具備了多重有利因素，而一旦跨過臨界點，鴻蒙將實現華為在操作系統領域的歷史性跨越。&lt;/span&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;中國證券報&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用戶觀點&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F5vKismrj3JQLRTwPM2Akag&quot; target=&quot;_blank&quot;&gt;全網最剛遊戲公司&lt;span&gt;——&lt;/span&gt;規定員工娶妻彩禮不得超過 10 萬元&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：公司效益越好，工資就越降的多？&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 2：這個董事長，可以瞭解一下一夫多妻制的推崇者&lt;/span&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 3：不是正常人能想到的觀點&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 4：「公司效益良好，允許員工自願降薪 10%」 這真是奇葩中的戰鬥機啊&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 5：這個董事長戲真多啊，上躥下跳的&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 6：為什麼不要求女性要多少，而要求娶妻給多少&lt;/span&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 7：多益的女員工已經被裁得差不多了&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 8：他就是想讓你們單身好加班&lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289272/us-china-risc-v-risk&quot; target=&quot;_blank&quot;&gt;路透社：美國正在審查中國使用 RISC-V 芯片技術的風險&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：看來技術真的有國界&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 2：這東西為什麼開源呢？&lt;/span&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 3：不開源早被 arm 滅了&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289250/2024-bad-bot-report&quot; target=&quot;_blank&quot;&gt;近一半的互聯網流量是機器人，32% 是惡意機器人&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：人類在用互聯網訓練大量惡意機器人，等這些 AI 真的出現了智能後果難以想象，終結那一天時問他為啥如此，他説都是人類教的。&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 2：惡意的不是機器人，是有意識的&lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;程序員梗圖&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-0c69f9102f46babc98decd7d1644947ed7c.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最後，歡迎掃碼下載「開源中國 APP」，閲讀海量技術報告、程序員極客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289528</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289528</guid>
            <pubDate>Thu, 25 Apr 2024 11:27:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>一文搞懂 Vue3 defineModel 雙向綁定：告別繁瑣代碼！</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                        
                                                                                            &lt;span id=&quot;OSC_h1_1&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;前言&lt;/h1&gt; 
&lt;p&gt;隨着&lt;code&gt;vue3.4&lt;/code&gt;版本的發佈，&lt;code&gt;defineModel&lt;/code&gt;也正式轉正了。它可以簡化父子組件之間的雙向綁定，是目前官方推薦的雙向綁定實現方式。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_2&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;code&gt;vue3.4&lt;/code&gt;以前如何實現雙向綁定&lt;/h1&gt; 
&lt;p&gt;大家應該都知道&lt;code&gt;v-model&lt;/code&gt;只是一個語法糖，實際就是給組件定義了&lt;code&gt;modelValue&lt;/code&gt;屬性和監聽&lt;code&gt;update:modelValue&lt;/code&gt;事件，所以我們以前要實現數據雙向綁定需要給子組件定義一個&lt;code&gt;modelValue&lt;/code&gt;屬性，並且在子組件內要更新&lt;code&gt;modelValue&lt;/code&gt;值時需要&lt;code&gt;emit&lt;/code&gt;出去一個&lt;code&gt;update:modelValue&lt;/code&gt;事件，將新的值作為第二個字段傳出去。&lt;/p&gt; 
&lt;p&gt;我們來看一個簡單的例子，父組件的代碼如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;CommonInput v-model=&quot;inputValue&quot; /&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;
import { ref } from &quot;vue&quot;;

const inputValue = ref();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;子組件的代碼如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;input
    :value=&quot;props.modelValue&quot;
    @input=&quot;emit(&#39;update:modelValue&#39;, $event.target.value)&quot;
  /&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;
const props = defineProps([&quot;modelValue&quot;]);
const emit = defineEmits([&quot;update:modelValue&quot;]);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;上面的例子大家應該很熟悉，以前都是這樣去實現&lt;code&gt;v-model&lt;/code&gt;雙向綁定的。但是存在一個問題就是&lt;code&gt;input&lt;/code&gt;輸入框其實支持直接使用&lt;code&gt;v-model&lt;/code&gt;的，我們這裏卻沒有使用&lt;code&gt;v-model&lt;/code&gt;而是在&lt;code&gt;input&lt;/code&gt;輸入框上面添加&lt;code&gt;value&lt;/code&gt;屬性和&lt;code&gt;input&lt;/code&gt;事件。&lt;/p&gt; 
&lt;p&gt;原因是因為從&lt;code&gt;vue2&lt;/code&gt;開始就已經是單向數據流，在子組件中是不能直接修改&lt;code&gt;props&lt;/code&gt;中的值。而是應該由子組件中拋出一個事件，由父組件去監聽這個事件，然後去修改父組件中傳遞給&lt;code&gt;props&lt;/code&gt;的變量。如果這裏我們給&lt;code&gt;input&lt;/code&gt;輸入框直接加一個&lt;code&gt;v-model=&quot;props.modelValue&quot;&lt;/code&gt;，那麼其實是在子組件內直接修改&lt;code&gt;props&lt;/code&gt;中的&lt;code&gt;modelValue&lt;/code&gt;。由於單向數據流的原因，&lt;code&gt;vue&lt;/code&gt;是不支持直接修改&lt;code&gt;props&lt;/code&gt;的，所以我們才需要將代碼寫成上面的樣子。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_3&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;使用&lt;code&gt;defineModel&lt;/code&gt;實現數據雙向綁定&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;defineModel&lt;/code&gt;是一個宏，所以不需要從 vue 中&lt;code&gt;import&lt;/code&gt;導入，直接使用就可以了。這個宏可以用來聲明一個雙向綁定 prop，通過父組件的&amp;nbsp;&lt;code&gt;v-model&lt;/code&gt;&amp;nbsp;來使用。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_4&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;基礎 demo&lt;/h2&gt; 
&lt;p&gt;父組件的代碼和前面是一樣的，如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;CommonInput v-model=&quot;inputValue&quot; /&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;
import { ref } from &quot;vue&quot;;

const inputValue = ref();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;子組件的代碼如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;input v-model=&quot;model&quot; /&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;
const model = defineModel();
model.value = &quot;xxx&quot;;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在上面的例子中我們直接將&lt;code&gt;defineModel&lt;/code&gt;的返回值使用&lt;code&gt;v-model&lt;/code&gt;綁定到 input 輸入框上面，無需定義 &lt;code&gt;modelValue&lt;/code&gt; 屬性和監聽 &lt;code&gt;update:modelValue&lt;/code&gt; 事件，代碼更加簡潔。&lt;code&gt;defineModel&lt;/code&gt;的返回值是一個&lt;code&gt;ref&lt;/code&gt;，我們可以在子組件中修改&lt;code&gt;model&lt;/code&gt;變量的值，並且父組件中的&lt;code&gt;inputValue&lt;/code&gt;變量的值也會同步更新，這樣就可以實現雙向綁定。&lt;/p&gt; 
&lt;p&gt;那麼問題來了，從&lt;code&gt;vue2&lt;/code&gt;開始就變成了單向數據流。這裏修改子組件的值後，父組件的變量值也被修改了，那這不就變回了&lt;code&gt;vue1&lt;/code&gt;的雙向數據流了嗎？其實並不是這樣的，這裏還是單向數據流，我們接下來會簡單講一下&lt;code&gt;defineModel&lt;/code&gt;的實現原理。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_5&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;實現原理&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;defineModel&lt;/code&gt;其實就是在子組件內定義了一個叫&lt;code&gt;model&lt;/code&gt;的 ref 變量和&lt;code&gt;modelValue&lt;/code&gt;的 props，並且&lt;code&gt;watch&lt;/code&gt;了 props 中的&lt;code&gt;modelValue&lt;/code&gt;。當&lt;code&gt;props&lt;/code&gt;中的&lt;code&gt;modelValue&lt;/code&gt;的值改變後會同步更新&lt;code&gt;model&lt;/code&gt;變量的值。並且當在子組件內改變&lt;code&gt;model&lt;/code&gt;變量的值後會拋出&lt;code&gt;update:modelValue&lt;/code&gt;事件，父組件收到這個事件後就會更新父組件中對應的變量值。&lt;/p&gt; 
&lt;p&gt;實現原理代碼如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;input v-model=&quot;model&quot; /&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;
import { ref, watch } from &quot;vue&quot;;

const props = defineProps([&quot;modelValue&quot;]);
const emit = defineEmits([&quot;update:modelValue&quot;]);
const model = ref();

watch(
  () =&amp;gt; props.modelValue,
  () =&amp;gt; {
    model.value = props.modelValue;
  }
);
watch(model, () =&amp;gt; {
  emit(&quot;update:modelValue&quot;, model.value);
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;看了上面的代碼後你應該瞭解到了為什麼可以在子組件內直接修改&lt;code&gt;defineModel&lt;/code&gt;的返回值後父組件對應的變量也會同步更新了吧。我們修改的其實是&lt;code&gt;defineModel&lt;/code&gt;返回的&lt;code&gt;ref&lt;/code&gt;變量，而不是直接修改 props 中的&lt;code&gt;modelValue&lt;/code&gt;。實現方式還是和&lt;code&gt;vue3.4&lt;/code&gt;以前實現雙向綁定一樣的，只是&lt;code&gt;defineModel&lt;/code&gt;這個宏幫我們將以前的那些繁瑣的代碼給封裝到內部實現了。&lt;/p&gt; 
&lt;p&gt;其實&lt;code&gt;defineModel&lt;/code&gt;的源碼中是使用 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.vuejs.org%2Fapi%2Freactivity-advanced.html%23customref&quot; target=&quot;_blank&quot;&gt;customRef&lt;/a&gt; 和 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.vuejs.org%2Fapi%2Freactivity-core.html%23watchsynceffect&quot; target=&quot;_blank&quot;&gt;watchSyncEffect&lt;/a&gt; 去實現的，我這裏是為了讓大家能夠更容易的明白&lt;code&gt;defineModel&lt;/code&gt;的實現原理才舉的&lt;code&gt;ref&lt;/code&gt;和&lt;code&gt;watch&lt;/code&gt;的例子。如果大家對&lt;code&gt;defineModel&lt;/code&gt;的源碼感興趣，請在評論區留言，如果感興趣的小夥伴比較多，我會在下一期出一篇&lt;code&gt;defineModel&lt;/code&gt;源碼的文章。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_6&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;code&gt;defineModel&lt;/code&gt;如何定義&lt;code&gt;type&lt;/code&gt;、&lt;code&gt;default&lt;/code&gt;等&lt;/h1&gt; 
&lt;p&gt;既然&lt;code&gt;defineModel&lt;/code&gt;是聲明瞭一個 prop，那同樣也可以定義 prop 的&lt;code&gt;type&lt;/code&gt;、&lt;code&gt;default&lt;/code&gt;。具體代碼如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const model = defineModel({ type: String, default: &quot;20&quot; });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;除了支持&lt;code&gt;type&lt;/code&gt;和&lt;code&gt;default&lt;/code&gt;，也支持&lt;code&gt;required&lt;/code&gt;和&lt;code&gt;validator&lt;/code&gt;，用法和定義&lt;code&gt;prop&lt;/code&gt;時一樣。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_7&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;code&gt;defineModel&lt;/code&gt;如何實現多個 &amp;nbsp; &lt;code&gt;v-model&lt;/code&gt; &amp;nbsp; 綁定&lt;/h1&gt; 
&lt;p&gt;同樣也支持在父組件上面實現多個 &amp;nbsp; &lt;code&gt;v-model&lt;/code&gt; &amp;nbsp; 綁定，這時我們給&lt;code&gt;defineModel&lt;/code&gt;傳的第一個參數就不是對象了，而是一個字符串。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const model1 = defineModel(&quot;count1&quot;);
const model2 = defineModel(&quot;count2&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在父組件中使用&lt;code&gt;v-model&lt;/code&gt;時代碼如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;CommonInput v-model:count1=&quot;inputValue1&quot; /&amp;gt;
&amp;lt;CommonInput v-model:count2=&quot;inputValue2&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;我們也可以在多個&lt;code&gt;v-model&lt;/code&gt;中定義&lt;code&gt;type&lt;/code&gt;、&lt;code&gt;default&lt;/code&gt;等&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const model1 = defineModel(&quot;count1&quot;, {
  type: String,
  default: &quot;aaa&quot;,
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;span id=&quot;OSC_h1_8&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;code&gt;defineModel&lt;/code&gt;如何使用內置修飾符和自定義修飾符&lt;/h1&gt; 
&lt;p&gt;如果要使用系統內置的修飾符比如&lt;code&gt;trim&lt;/code&gt;，父組件的寫法還是和之前是一樣的：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;CommonInput v-model.trim=&quot;inputValue&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;子組件也無需做任何修改，和上面其他的&lt;code&gt;defineModel&lt;/code&gt;例子是一樣的：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const model = defineModel();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;defineModel&lt;/code&gt;也支持自定義修飾符，比如我們要實現一個將輸入框的字母全部變成大寫的&lt;code&gt;uppercase&lt;/code&gt;自定義修飾符，同時也需要使用內置的&lt;code&gt;trim&lt;/code&gt;修飾符。&lt;/p&gt; 
&lt;p&gt;我們的父組件代碼如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;CommonInput v-model.trim.uppercase=&quot;inputValue&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;我們的子組件需要寫成下面這樣的：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;input v-model=&quot;modelValue&quot; /&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;
const [modelValue, modelModifiers] = defineModel({
  // get 我們這裏不需要
  set(value) {
    if (modelModifiers.uppercase) {
      return value?.toUpperCase();
    }
  },
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;這時我們給&lt;code&gt;defineModel&lt;/code&gt;傳進去的第一個參數就是包含&lt;code&gt;get&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code&gt;set&lt;/code&gt;&amp;nbsp;方法的對象，當對&lt;code&gt;modelValue&lt;/code&gt;變量進行讀操作時會走到&lt;code&gt;get&lt;/code&gt;方法裏面去，當對&lt;code&gt;modelValue&lt;/code&gt;變量進行寫操作時會走到&lt;code&gt;set&lt;/code&gt;方法裏面去。如果只需要對寫操作進行攔截，那麼可以不用寫&lt;code&gt;get&lt;/code&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;defineModel&lt;/code&gt;的返回值也可以解構成兩個變量，第一個變量就是我們前面幾個例子的&lt;code&gt;ref&lt;/code&gt;對象，用於給&lt;code&gt;v-model&lt;/code&gt;綁定。第二個變量是一個對象，裏麪包含了有哪些修飾符，在這裏我們有&lt;code&gt;trim&lt;/code&gt;和&lt;code&gt;uppercase&lt;/code&gt;兩個修飾符，所以&lt;code&gt;modelModifiers&lt;/code&gt;的值為：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
  trim: true,
  uppercase: true
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在輸入框進行輸入時，就會走到&lt;code&gt;set&lt;/code&gt;方法裏面，然後調用&lt;code&gt;value?.toUpperCase()&lt;/code&gt;就可以實現將輸入的字母變成大寫字母。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_9&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;總結&lt;/h1&gt; 
&lt;p&gt;這篇文章介紹瞭如何使用&lt;code&gt;defineModel&lt;/code&gt;宏實現雙向綁定以及&lt;code&gt;defineModel&lt;/code&gt;的實現原理。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;在子組件內調用&lt;code&gt;defineModel&lt;/code&gt;宏會返回一個&lt;code&gt;ref&lt;/code&gt;對象，在子組件內可以直接對這個&lt;code&gt;ref&lt;/code&gt;對象進行賦值，父組件內的相應變量也會同步修改。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;defineModel&lt;/code&gt;其實就是在子組件內定義了一個 ref 變量和對應的 prop，然後監聽了對應的 prop 保持 ref 變量的值始終和對應的 prop 是一樣的。在子組件內當修改 ref 變量值時會拋出一個事件給父組件，讓父組件更新對應的變量值，從而實現雙向綁定。&lt;/li&gt; 
 &lt;li&gt;使用&lt;code&gt;defineModel({ type: String, default: &quot;20&quot; })&lt;/code&gt;就可以定義 prop 的&lt;code&gt;type&lt;/code&gt;和&lt;code&gt;default&lt;/code&gt;等選項。&lt;/li&gt; 
 &lt;li&gt;使用&lt;code&gt;defineModel(&quot;count&quot;)&lt;/code&gt;就可以實現多個&lt;code&gt;v-model&lt;/code&gt;綁定。&lt;/li&gt; 
 &lt;li&gt;通過解構&amp;nbsp;&lt;code&gt;defineModel()&lt;/code&gt;&amp;nbsp;的返回值拿到&lt;code&gt;modelModifiers&lt;/code&gt;修飾符對象，配合&amp;nbsp;&lt;code&gt;get&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code&gt;set&lt;/code&gt;&amp;nbsp;轉換器選項實現自定義修飾符。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;關注公眾號：【前端歐陽】，解鎖我更多 vue 原理文章。還可以加我微信，讓你的朋友圈多一位對 vue 有深入理解的人。也可以通過微信給我説你想看哪些 vue 原理文章，我會根據大家的反饋進行創作。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/3322222/blog/11053418</link>
            <guid isPermaLink="false">https://my.oschina.net/u/3322222/blog/11053418</guid>
            <pubDate>Thu, 25 Apr 2024 09:02:10 GMT</pubDate>
            <author>原創</author>
        </item>
        <item>
            <title>微信客戶端底層組件 MMKV 官宣支持 HarmonyOS NEXT</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;MMKV 是微信客戶端自用的 key-value 組件，於 2018 年&lt;a href=&quot;https://www.oschina.net/news/100210/tecent-opensource-mmkv&quot;&gt;正式開源&lt;/a&gt;，支持 Android / macOS / Windows / POSIX 平台。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;MMKV 是基於 mmap 內存映射的 key-value 組件，底層序列化/反序列化使用 protobuf 實現，性能高，穩定性強。從 2015 年中至今在微信上使用，其性能和穩定性經過了時間的驗證。&lt;/p&gt; 
 &lt;p&gt;近期也已移植到 Android / macOS / Windows / POSIX / HarmonyOS NEXT 等平台，一併開源。&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-98fec1f555bf09389fa2ebffea665cf744d.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;官方公告顯示，最新發布的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTencent%2FMMKV%2Freleases%2Ftag%2Fv1.3.5&quot; target=&quot;_blank&quot;&gt; &lt;strong&gt;MMKV&amp;nbsp;v1.3.5 &lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;已正式支持&amp;nbsp;HarmonyOS NEXT&lt;/strong&gt;，目前大部分功能在該平台上可正常使用。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-23464b9424efb7293554a65a98292c32ae6.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;MMKV for HarmonyOS NEXT 使用文檔：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTencent%2FMMKV%2Fwiki%2Fohos_setup&quot; target=&quot;_blank&quot;&gt;https://github.com/Tencent/MMKV/wiki/ohos_setup&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;此前一度有傳言稱，華為鴻蒙和微信之間的合作談崩，但之後又有消息稱華為與騰訊關於微信推送機制談判結束，同意華為採用同 iOS 墓碑機制的推送方式，微信接入鴻蒙 NEXT 版本。&lt;/p&gt; 
&lt;p&gt;近日有接近華為的人士&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cls.cn%2Fdetail%2F1650707&quot; target=&quot;_blank&quot;&gt;告訴《科創板日報》&lt;/a&gt;：談崩是謠言，進度還不方便透露，到時會有正式官宣。&lt;/p&gt; 
&lt;p&gt;目前看來，&lt;span&gt;微信的鴻蒙原生版確實正在開發中，並且已經取得了一定的進展。這對於鴻蒙操作系統的推廣和生態建設是一個積極信號，有助於吸引更多用戶和開發者加入鴻蒙生態。&lt;/span&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;延伸閲讀&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/281254&quot; target=&quot;_blank&quot;&gt;深圳發佈政策支持鴻蒙原生應用發展&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/283921&quot; target=&quot;_blank&quot;&gt;深圳成立鴻蒙生態創新中心&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/288303&quot; target=&quot;news&quot;&gt;華為：用 1 年時間將 5000 個常用手機應用全面遷移至鴻蒙&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289497/wechat-mmkv-support-harmonyos-next</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289497/wechat-mmkv-support-harmonyos-next</guid>
            <pubDate>Thu, 25 Apr 2024 08:49:10 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>Snowflake 開源 Arctic LLM 挑戰 Llama 3、Grok 等</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;數據庫公司 Snowflake &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.snowflake.com%2Fblog%2Farctic-open-efficient-foundation-language-models-snowflake%2F%3Futm_cta%3Dwebsite-homepage-featured-blog-snowflake-artic-intro&quot; target=&quot;_blank&quot;&gt;宣佈&lt;/a&gt;開源了新的大語言模型&amp;nbsp;Arctic，號稱「高效智能且真正開放」。專為複雜企業工作負載而設計，以成本效益為主要亮點。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;與訓練預算遠高於所需的模型相比，它可以高效地完成 SQL 生成、編碼和指令跟蹤等企業智能任務，滿足或超過這些領域的基準。 Snowflake 表示，這些指標對企業很重要，因為這些是構建生成式人工智能副駕駛所需的能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Snowflake 聲稱，其 Arctic 模型的性能優於大多數開源模型和一些參數較少的閉源模型，並且使用較少的計算能力進行訓練。較低的訓練成本將使公司能夠訓練定製模型，而無需花費過多的資金。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Arctic 在企業指標上與 LLAMA 3 8B 和 LLAMA 2 70B 相當或更好，而使用的訓練計算預算不到 1/2。同樣，儘管訓練預算減少了 17 倍，Arctic 在編碼（HumanEval+ 和 MBPP+）、SQL（Spider）和指令跟蹤（IFEval）等方面仍然與 Llama3 70B 相當。且儘管使用的計算量比 DBRX 少 7 倍，但它在語言理解和推理（11 個指標的集合）方面仍然具有競爭力，同時在數學 (GSM8K) 方面表現更好。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;358&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-0509fae3f9129291ed25c678f9085b5c3d7.webp&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;189&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6a7436479c9aa80a1eb974196c00f123e80.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Snowflake AI 研究團隊在一篇博客文章中寫道： 「傳統上，使用 LLM 構建頂級企業級智能的成本高昂，而且資源匱乏，通常需要花費數千萬至數億美元。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Snowflake 首席執行官 Sridhar Ramaswamy 表示：「通過以真正開放的方式向 AI 社區提供行業領先的智能和效率，我們正在進一步拓展開源 AI 的前沿。我們與 Arctic 的研究將顯着增強我們為客戶提供可靠、高效的人工智能的能力。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Snowflake 在 Apache 2.0 許可證下提供 Arctic 及其其他文本嵌入模型以及代碼模板和模型權重，允許商業使用而無需任何許可成本。Arctic LLM 現已通過 Hugging Face 提供。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289471/snowflake-s-open-source-arctic-llm</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289471/snowflake-s-open-source-arctic-llm</guid>
            <pubDate>Thu, 25 Apr 2024 07:40:12 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>「deepin 生態共建小組」正式啓動！三大生態共建項目，速來 ！</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;383&quot; src=&quot;https://storage.deepin.org/thread/202404250700454329_%E5%95%86%E4%B8%9A%E6%8A%95%E8%B5%84%E8%93%9D%E8%89%B2%E7%AE%80%E7%BA%A6%E5%85%AC%E4%BC%97%E5%8F%B7%E9%A6%96%E5%9B%BE__2024-04-25+14_58_57.jpg&quot; width=&quot;900&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;基於社區開源精神，為提高大家對 deepin 生態建設的參與感，應用商店將正式開放眾多軟件給廣大開源愛好者進行維護。參與小組工作可獲得多項專屬小組福利，工作項目分為玲瓏格式遷移、wine 應用打包、deb 原生應用維護。&lt;/p&gt; 
&lt;h1&gt;&amp;nbsp;&lt;strong&gt;招募條件&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;1）不限性別年齡職業地區，認同開源文化，願投身 deepin 軟件生態建設，且有一定的時間投入；&lt;/p&gt; 
&lt;p&gt;2）有一定的計算機基礎，擁有一定的 linux 技術積累，對源碼有一定的認識；&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;&amp;nbsp;項目介紹&lt;/strong&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;strong&gt;項目一、玲瓏格式遷移&lt;/strong&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;項目目標：玲瓏是一種新型的獨立包管理工具集，致力於治理 Linux 系統下傳統軟件包格式複雜、交叉的依賴關係導致的各種兼容性問題，遷移項目的目標是讓玲瓏能實際應用於常見的發行版操作系統，包括四大架構：amd64、arm64、loongarch64、riscv&amp;nbsp;；現階段僅支持 amd64 的遷移&lt;/li&gt; 
 &lt;li&gt;參與要求：需要具備文檔閲讀能力，有源碼編譯構建、開源應用維護經驗更佳&lt;/li&gt; 
 &lt;li&gt;參與方式：認領遷移任務，任務一般分為 1、入門遷移任務：該部分可使用轉格式工具快速將現有的 deb 包轉為玲瓏格式，難度較低，可以作為玲瓏入門學習；2、進階遷移任務及轉格式失敗的入門任務：該部分需手動編譯構建，需要對玲瓏有比較深入的瞭解；構建完畢的應用通過開發者平台或社區投遞系統上架應用商店（有特殊需求可以申請官方的機器設備支持）&lt;/li&gt; 
 &lt;li&gt;參考文檔：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flinglong.dev%2Fguide%2Fll-builder%2Fmanifests.html%23runtime-20-5-0-%25E5%258C%2585%25E5%2590%25AB%25E4%25BE%259D%25E8%25B5%2596%25E9%25A1%25B9&quot; target=&quot;_blank&quot;&gt;玲瓏在線文檔&lt;/a&gt;&amp;nbsp;、轉換工具及文檔（目前只有 amd64，羣內分享）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;項目二、wine 應用打包&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;第一期 wine 打包活動進行中，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fzh%2Fpost%2F271247&quot; target=&quot;_blank&quot;&gt;詳情見 &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;項目目標：將常用 exe 格式的 Windows 應用轉成 deepin/UOS 可用的 deb 格式並上架應用商店&lt;/li&gt; 
 &lt;li&gt;參與要求：有 wine 容器配置、調試經驗更佳&lt;/li&gt; 
 &lt;li&gt;參與方式：Windows 應用可通過官方一鍵打包工具將軟件轉成 deepin/UOS 下可用的 deb 包（提供清單方向），部分打包失敗或打開後功能異常的軟件需要手動調試配置，打包後通過開發者平台或社區投遞系統上架應用商店；&lt;/li&gt; 
 &lt;li&gt;參考文檔：進羣領取 wine 一鍵打包工具，已支持一鍵生成 amd64&amp;amp;arm64 的 deb&lt;/li&gt; 
 &lt;li&gt;劃重點！&lt;strong&gt;wine 有獎打包活動&lt;/strong&gt;即將上線&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;項目三、deb 原生應用維護&lt;/strong&gt;&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;項目目標：遵循開源精神，商店內開源應用放開給社區用戶自行維護，能保證深度商店應用的正常使用、新版本的及時更新&lt;/li&gt; 
 &lt;li&gt;參與要求：SHELL 腳本讀寫能力、對 Linux 桌面發行版運行庫相互關係有一定的瞭解&lt;/li&gt; 
 &lt;li&gt;參與方式：除部分重點應用保持官方維護外，絕大多數開源應用公開給社區用戶自行維護，平台定期公開應用新版本或問題修復的需求任務，感興趣的可認認領任務，成為應用的維護者。打包後通過開發者平台或社區投遞系統上架應用商店，並此後保持應用的維護或及時轉出&lt;/li&gt; 
 &lt;li&gt;參考文檔：&amp;nbsp;&lt;a href=&quot;https://gitee.com/ziggy615/packing-master-pool&quot; target=&quot;_blank&quot;&gt;packing master pool: 打包仙人自動化構建模版池&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;.&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;工作流程&lt;/strong&gt;&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;掃碼入羣，報名登記&lt;img alt=&quot;&quot; height=&quot;200&quot; src=&quot;https://storage.deepin.org/thread/202404250700268021_202404170843266411_%E7%94%9F%E6%80%81%E5%85%B1%E5%BB%BA%E5%B0%8F%E7%BB%84%E4%BA%8C%E7%BB%B4%E7%A0%81(1).png&quot; width=&quot;200&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;成為小組成員（不定期公示小組成員）&lt;/li&gt; 
 &lt;li&gt;認領任務（共享雲文檔登記，不可重複認領任務）&lt;/li&gt; 
 &lt;li&gt;適配打包（回填任務完成情況，打包成功/已上架/打包失敗及原因）&lt;/li&gt; 
 &lt;li&gt;上架商店（可選通過&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fappdelivery.deepin.org.cn%2F%23%2Findex&quot; target=&quot;_blank&quot;&gt;社區投遞系統&lt;/a&gt;或&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogin.uniontech.com%2F&quot; target=&quot;_blank&quot;&gt;開發者平台&lt;/a&gt;進行上架，上架需通過基礎測試）&lt;/li&gt; 
 &lt;li&gt;獲得激勵（積分公示、定期發放獎勵等）&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;&lt;strong&gt;小組福利&lt;/strong&gt;&lt;/h1&gt; 
&lt;h2&gt;1）打包激勵標準&lt;/h2&gt; 
&lt;p&gt;完成各類型應用打包及上架可以獲得一定的生態積分&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th&gt;打包類型&lt;/th&gt; 
   &lt;th&gt;應用新增上架&lt;/th&gt; 
   &lt;th&gt;應用維護更新&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;生態積分&lt;/td&gt; 
   &lt;td&gt;對生態共建項目中涉及的應用進行&lt;strong&gt;打包上新&lt;/strong&gt;&lt;br&gt; 可以獲得對應的積分激勵：&lt;br&gt; ● wine 應用：20 分/架構包&lt;br&gt; ● 玲瓏格式：50 分/架構包&lt;br&gt; ● deb 原生：40 分/架構包&lt;/td&gt; 
   &lt;td&gt;對生態共建項目中涉及的應用進行&lt;strong&gt;升級維護&lt;/strong&gt;&lt;br&gt; 可以獲得對應的維護積分激勵：&lt;br&gt; ● wine 應用：10 分/架構包&lt;br&gt; ● 玲瓏格式：30 分/架構包&lt;br&gt; ● deb 原生：20 分/架構包&lt;br&gt; 備註：需要規範管理版本號，不可無故刷新版本號。&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;按實際上架到應用商店的架構包數量計算積分，包括 amd64、arm64、loongarch64，其中 loongarch64 的包可額外多獎勵 50% 積分；&lt;/li&gt; 
 &lt;li&gt;目前社區投遞系統僅支持單一架構包提交，一個應用多個架構的需要通過開發者平台提交；&lt;/li&gt; 
 &lt;li&gt;如果完成了高難度的軟件包適配，可以與官方運營溝通，評估後可以一定比例提升積分；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;strong&gt;2）生態積分激勵&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;獲得生態積分達到一定數量，可以獲得對應的社區榮譽稱號，並且積分可以用於兌換 deepin 周邊禮品。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;A. 專屬 deepin 社區榮譽稱號&lt;/strong&gt;&lt;/h3&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th&gt;生態積分&lt;/th&gt; 
   &lt;th&gt;50-599&lt;/th&gt; 
   &lt;th&gt;600-2999&lt;/th&gt; 
   &lt;th&gt;3000-9999&lt;/th&gt; 
   &lt;th&gt;≥10000&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;deepin 社區稱號&lt;/td&gt; 
   &lt;td&gt;生態共建組成員&lt;/td&gt; 
   &lt;td&gt;生態共建組骨幹&lt;/td&gt; 
   &lt;td&gt;生態共建組專家&lt;/td&gt; 
   &lt;td&gt;生態共建組導師&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;&lt;strong&gt;B. 積分可兌換周邊獎勵&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;生態積分可自選兌換 deepin 積分商城內獎品池的等價值禮品，具體兌換説明後續共建小組羣內同步&lt;/li&gt; 
 &lt;li&gt;周邊獎勵：小浣熊公仔/小浣熊鑰匙扣/deepin 筆記本/deepinT 恤/deepin 超大鼠標墊/deepin 鼠標/deepin 徽章/小浣熊帆布袋等等&lt;/li&gt; 
 &lt;li&gt;達到 50 生態積分可申請獲得 UOS 專業版半年期激活碼&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;C. 2024 年度限定榮譽證書&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;截止至 2024 年 12 月 31 日，年度生態積分 top10 的小組成員，頒發榮譽證書——deepin 生態共建小組-卓越貢獻獎.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;特殊説明&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;在共建小組工作中已上架的應用軟件包，在沒有新版本的情況下，可以直接用於申報參與 1 次後續的生態適配活動（積分不重複計算）&lt;/li&gt; 
 &lt;li&gt;每個月末覈算小組成員的積分情況，並在 deepin 社區論壇公示&lt;/li&gt; 
 &lt;li&gt;社區榮譽稱號按獲得的總積分計算，消耗積分兌換獎勵並不影響已獲得的稱號&lt;/li&gt; 
 &lt;li&gt;當小組成員大於 12 個月未有軟件維護或更新，已獲得的社區榮譽稱號將會被取消&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;strong&gt;3）用戶特權&lt;/strong&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;優秀軟件將被商店重點推薦，優秀個人獲得商店專屬展示專區&lt;/li&gt; 
 &lt;li&gt;生態活動出謀劃策，邀請成為生態適配導師&lt;/li&gt; 
 &lt;li&gt;社區論壇、Github 項目定期公示成員及貢獻&lt;/li&gt; 
 &lt;li&gt;成為深度各技術沙龍的特邀講師&lt;/li&gt; 
 &lt;li&gt;作為特邀嘉賓參與 DDUC 年度大會&lt;/li&gt; 
 &lt;li&gt;在校生可獲得實習機會，社招工作優先錄取&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;&lt;strong&gt;&amp;nbsp;官方支持&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;1）官方提供打包教程、打包規範；&lt;/p&gt; 
&lt;p&gt;2）官方組織開展系統化打包培訓；&lt;/p&gt; 
&lt;p&gt;3）官方打包維護羣，提供在線答疑；&lt;/p&gt; 
&lt;p&gt;4）官方不定期公開任務給社區維護者。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;以上為本小組的詳細介紹，歡迎加入生態共建小組，共謀大事~&lt;/p&gt; 
&lt;p&gt;本方案試運行，可能會參考大家的意見進行一定的調整，歡迎大家提出各種建設性意見。最終解釋權歸 deepin 深度應用商店運營組所有。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相關鏈接：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;社區投遞系統介紹：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fzh%2Fpost%2F265432&quot; target=&quot;_blank&quot;&gt;deepin 社區「應用投遞系統」全新上線，誠邀您來共建應用生態！&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.chinauos.com%2F%23document3%3Fdirid%3D656ef276bd766615b0b0300c%26id%3D657036f6bd766615b0b03132&quot; target=&quot;_blank&quot;&gt;開發者認證及上架指南&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;瞭解 deepin（深度操作系統）：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdistrowatch.com%2Findex.php%3Fdistribution%3Ddeepin&quot; target=&quot;_blank&quot;&gt;DistroWatch.com: Put the fun back into computing. Use Linux, BSD.&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289464</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289464</guid>
            <pubDate>Thu, 25 Apr 2024 07:23:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>知名遊戲公司出新規：員工娶妻彩禮不得超過 10 萬元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;日前知名遊戲公司多益網絡發佈公告稱，公司規定：公司任何員工娶妻彩禮不得超過 10 萬人民幣價值，否則全公司通報批評並嚴懲。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-4719edabcb32a121346342ca9e4906fa130.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;u&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F5088502796%2FObbRPb9ZR&quot; target=&quot;_blank&quot;&gt;https://weibo.com/5088502796/ObbRPb9ZR&lt;/a&gt;&lt;/em&gt;&lt;/u&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;公開資料顯示，多益網絡成立於 2006 年 7 月，總部位於廣東省廣州市，公司專注於網絡遊戲的研發與運營，是中國十大網遊研發及運營公司之一。&lt;/p&gt; 
&lt;p&gt;多益網絡的業務涵蓋大型網絡遊戲、移動遊戲、電子郵箱、IM 即時通訊軟件和社交網站等，旗下擁有多款知名遊戲產品，如《神武 4》端手遊、《夢想世界》端手遊等。&lt;/p&gt; 
&lt;p&gt;多益網絡還位列 2017 年中國互聯網企業百強榜第 25 位，2018 年被評為「廣東年度十大互聯網領軍企業」，2019 年獲得「年度中國十大遊戲研發企業」和「年度中國十大遊戲出版運營企業」等稱號。&lt;/p&gt; 
&lt;p&gt;在去年 3 月份，多益網絡發佈《前女高管們利用網絡水軍造假導致公司損失幾億的情況公告》。公告提到：前 CEO 唐憶魯為首的腐敗團夥，利用職務之便以權謀私，夥同廣告代理皮包公司、網絡水軍刷量公司等製造虛假廣告，對公司進行合同欺詐，給公司帶來直接經濟損失高達 5 億元。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289460</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289460</guid>
            <pubDate>Thu, 25 Apr 2024 07:19:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>Apache Doris 基於 Workload Group 的負載隔離能力｜Deep Dive</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                        
                                                                                            &lt;p&gt;作者：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fc.d4t.cn%2Fyjdpth&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;SelectDB&lt;/a&gt; 技術團隊&lt;/p&gt; 
&lt;p&gt;現如今企業的數據查詢需求在不斷增多，在共享同一集羣時，往往需要同時面對多個業務線或多種分析負載的併發查詢。在有限的資源條件下，查詢任務間的資源搶佔將導致性能下降甚至集羣不穩定，因此負載管理的重要性不言而喻。&lt;/p&gt; 
&lt;p&gt;從業務場景出發，用戶負載管理的需求主要來自以下幾方面：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;多個業務部門或租戶可能共享同一套集羣時，為避免不同租戶間的負載相互影響，需保證每個租戶的資源使用獨立性和性能穩定性。&lt;/li&gt; 
 &lt;li&gt;不同業務對查詢任務的響應度和優先級有着不同要求，對於關鍵業務或高優先級任務，如實時數據分析、在線交易等，需要確保這些任務能夠獲得足夠的資源並優先執行，避免因資源競爭對查詢性能產生影響。&lt;/li&gt; 
 &lt;li&gt;用戶不僅關心資源的分配和管理，還注重成本控制和資源利用率。負載管理方案需在滿足隔離要求的同時，實現用戶對低使用成本和高資源利用率的訴求。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在早期版本中，Apache Doris 推出了基於資源標籤（Resource Tag）的隔離方案，包括集羣內節點級別的資源組劃分以及針對單個查詢的資源限制，實現了不同用戶間的資源物理隔離。而為給用戶提供更完善的負載管理方案，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fc.d4t.cn%2Fyjdpth&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Apache Doris&lt;/a&gt; 自 2.0 版本起，推出了基於 Workload Group 的管理方案，&lt;strong&gt;實現了 CPU 資源的軟限，為用戶提供較高的資源利用率。&lt;strong&gt;在新發布的 2.1 版本基於 Linux 內核提供的 CGroup 技術，進一步地&lt;/strong&gt;實現了對 CPU 資源的硬限，為用戶提供更好的查詢穩定性。&lt;/strong&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_1&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;基於 Resource Tag 的物理隔離方案&lt;/h2&gt; 
&lt;p&gt;在 Apache Doris 中有 FE 和 BE 兩類節點，FE 節點負責元數據存儲、集羣管理、用戶請求接入以及查詢計劃解析等，BE 節點則負責數據的存儲和計算。在查詢執行過程中涉及資源消耗的主要是 BE 節點，因此 Apache Doris 負載隔離方案都是面向 BE 節點設計。&lt;/p&gt; 
&lt;p&gt;在 Resource Tag 資源物理隔離方案中，可以對同一個集羣內的 BE 節點設置標籤，標籤相同的 BE 節點會組成一個資源組（Resource Group），可將資源組看作數據存儲和計算的一個單元。數據入庫時會按照資源組配置將數據的副本寫入到不同的資源組中，查詢時按照資源組的劃分使用對應資源組上的計算資源進行計算。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;參考文檔：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fc.d4t.cn%2Fii4x6r&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://doris.apache.org/zh-CN/docs/2.0/admin-manual/resource-admin/multi-tenant&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;我們以常見的讀寫分析場景為例，假設集羣中有 3 台 BE，具體使用步驟如下：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;BE 節點綁定 Resource Tag：將兩台 BE 綁定到 Tag Read 上，服務於讀負載；一台 BE 綁定到 Tag Write 上，服務於寫負載。讀負載和寫負載位於不同的機器上，以實現讀寫隔離。&lt;/li&gt; 
 &lt;li&gt;數據副本綁定 Resource Tag：Table 1 有三個副本，兩個副本綁定到 Tag Read 上，一個副本綁定到 Tag write 上。寫入 replica 3 的數據會自動同步到 replica 1 和 replica 2 上，同步過程不會佔用過多 BE 1 和 BE 2 的計算資源。&lt;/li&gt; 
 &lt;li&gt;工作負載綁定到 Resource Tag：如果查詢 SQL 攜帶的 Tag 為 Read，查詢將被自動路由到 Tag 為 Read 上的機器上（BE 1 、BE 2）上執行；如果將 Stream Load 導入負載指定 Tag 為 Write，那麼 Stream Load 就會路由到 Tag 為 Write 的機器上（ BE 3）。在此過程除了副本同步時產生的開銷，查詢和導入之間不再有資源的競爭。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/Resource_Tag_67d668b5cb.png&quot; alt=&quot;基於 Resource Tag 的物理隔離方案.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Resource Tag 還可以實現多租戶的功能。例如有兩個用戶 UserA 和 UserB，期望創建各自獨立的租戶以避免相互影響，那麼可以把 UserA 的計算和存儲資源綁定到名為 UserA 的 Tag 上，把 UserB 的計算和存儲資源綁定到名為 UserB 的 Tag 上，那麼兩個用戶在 BE 側就實現了租戶間的資源隔離。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/Resource_Tag_2_13c66f617b.png&quot; alt=&quot;基於 Resource Tag 的物理隔離方案-2.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Resource Tag 本質是通過對 BE 節點的分組實現了資源隔離，這個方案的優點是：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;隔離性好，多個租戶之間通過物理機隔離，對 CPU、內存、IO 都實現了完全的隔離；&lt;/li&gt; 
 &lt;li&gt;故障隔離，當一個租戶出現問題（比如進程崩潰），另外一個租戶絲毫不受影響；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;基於這個技術，有的用戶將不同的資源組放置到不同的物理機房內，實現同城 2 個機房的雙活。&lt;/p&gt; 
&lt;p&gt;但是也存在一定的侷限性：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;讀寫隔離場景下，當寫入負載停止時，Tag 為 Write 的機器就處於空閒狀態，從而降低整個集羣的資源利用率，顯然無法滿足用戶對資源充分利用的期望。&lt;/li&gt; 
 &lt;li&gt;多租戶場景下，同一個租戶內的多個業務方的負載之間也會相互影響。即使可以通過為每個業務方配置單獨物理機來滿足隔離性，卻帶來了高成本、低資源利用率等問題。&lt;/li&gt; 
 &lt;li&gt;靈活性差，租戶的數量實際是跟副本數綁定的，如果要建立 5 個租戶，那麼至少需要有 5 個副本才可以，這在一定程度上造成了存儲空間的浪費。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_2&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;基於 Workload Group 的負載管理方案&lt;/h2&gt; 
&lt;p&gt;為解決上述問題，Apache Doris 推出了基於 Workload Group 的管理方案，支持了更細粒度的資源隔離機制——進程內的資源隔離，這意味着同一個 BE 內多個 Query 間也可以實現一定程度上的隔離，有效避免了進程內的資源競爭，提高資源的利用率。&lt;/p&gt; 
&lt;p&gt;Workload Group 是通過對工作負載進行分組管理，實現對內存和 CPU 資源的精細化管控。通過將用戶執行的 Query 與 Workload Group 相關聯，限制單個 Query 在單個 BE 節點上的 CPU 和內存資源的百分比。同時可以配置開啓內存資源限制，集羣資源緊張時自動終止組內高內存佔用查詢以緩解壓力。資源空閒時，多個 Workload Group 共享空閒資源並自動突破限制，確保查詢穩定執行。&lt;/p&gt; 
&lt;p&gt;CPU 資源的限制可細分為軟限和硬限，CPU 軟限具備資源利用率更高的特點，允許在資源空閒時候靈活分配資源；而 CPU 硬限則更側重於性能穩定性的保障，確保各 Group 之間不會因負載變化而相互幹擾。&lt;/p&gt; 
&lt;p&gt;（&lt;em&gt;CPU 硬限和軟限這兩種隔離方式可匹配不同使用場景，但不可同時應用，用戶可根據自身需求靈活選擇）&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/Workload_Group_e4dba91c4d.png&quot; alt=&quot;基於 Workload Group 的負載管理方案.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Workload Group 與 Resource Tag 的方案主要有以下不同：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;從計算資源的角度來説，Workload Group 是對 BE 進程內的 CPU 和內存資源進一步劃分，多個 Workload Group 需要在同一個 BE 上競爭資源。而 Resource Tag 則是對 BE 節點進行分組，不同業務方的負載發送到不同分組的 BE 上實現資源隔離，不同 BE 分組間的業務負載不會有直接的資源競爭。&lt;/li&gt; 
 &lt;li&gt;從存儲資源的角度來説，Workload Group 無需關注存儲資源，只關注單 BE 內計算資源的分配。Resource Tag 則需要對數據的副本進行分組，確保需要隔離的業務方數據分佈在不同的 BE 上。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h3_3&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;01 CPU 軟限制&lt;/h3&gt; 
&lt;p&gt;CPU 優先級主要通過參數 &lt;code&gt;cpu_share&lt;/code&gt; 體現，可以將它類比為權重的概念。在相同的時間週期內，權重越高的 Group 可以獲得更多的 CPU 時間。&lt;/p&gt; 
&lt;p&gt;以 Group A 和 Group B 為例，若配置 Group A 的 &lt;code&gt;cpu_share&lt;/code&gt; 為 1、Group B 的 &lt;code&gt;cpu_share&lt;/code&gt; 為 9，給定 10s 的時間週期。當兩者負載均飽和時，權重更高的 Group B 可以獲得 CPU 的時間為 9s（所有資源的 90%），Group A 可獲得 CPU 時間為 1s（所有資源的 10%）。而在實際使用中，並非所有業務都是滿負載運行，若 Group B 的負載較低或無負載，那麼 Group A 可以獨佔 10s 的 CPU 時間。這種方式可以提供更高的資源分配靈活性，從而提高集羣 CPU 資源的整體利用率。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/CPU_e856b0fbad.png&quot; alt=&quot;CPU&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_4&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;02 CPU 硬限制&lt;/h3&gt; 
&lt;p&gt;使用 CPU 軟限時，如果系統負載較高或 CPU 資源緊張時，可能引起查詢性能的波動。為滿足更用戶對查詢性能穩定的高要求， &lt;strong&gt;Apache Doris 在最新的 2.1 版本中，實現了 Workload Group 的 CPU 硬限制——無論當前物理機整體 CPU 是否空閒，配置了硬限的 Group 最大 CPU 用量不能超過預先配置的限制值。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;以 Group A 和 Group B 為例，若配置 Group A 的 &lt;code&gt;cpu_hard_limit=10%&lt;/code&gt;，Group B 的&lt;code&gt;cpu_hard_limit=90%&lt;/code&gt;。當兩者單機 CPU 資源均達到飽和時， Group A 的 CPU 利用率為 10%， Group B 的 CPU 利用率為 90%，這與 CPU 軟限是一樣的。但是當 Group B 的負載降低或沒有負載時，即便 Group A 增加查詢負載，其最大 CPU 利用率仍被嚴格限制在 10%，無法獲得更多的資源。雖然這種方式犧牲了資源分配的彈性，但也確保了查詢性能的穩定性。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/CPU_ec2c0fd7f0.png&quot; alt=&quot;硬限制&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_5&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;03 內存資源限制&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;使用須知，BE 節點內存主要劃分為以下幾部分：&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;操作系統保留內存&lt;/li&gt; 
  &lt;li&gt;BE 進程內非查詢部分的內存，暫時無法被 Workload Group 統計到。&lt;/li&gt; 
  &lt;li&gt;BE 進程內的查詢部分的內存（包括導入操作），可被 Workload Group 統計並管理。&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;內存資源限制主要通過參數 &lt;code&gt;memory_limit&lt;/code&gt; 來限制（設置可以使用 BE 內存的百分比）。不僅可以設置預配置內存用量，還影響內存過度分配（Overcommit）之後的歸還優先級。&lt;/p&gt; 
&lt;p&gt;在初始狀態下，高優先級的資源組會被配置更多的內存、低優先級的資源組被分配較少的內存。為了提升內存的利用率，可以通過 &lt;code&gt;enable_memory_overcommit&lt;/code&gt; 開啓資源組的內存軟限制，如果系統有空閒內存資源時可以超限使用。&lt;/p&gt; 
&lt;p&gt;為了保證系統穩定運行，當系統整體內存資源不足時，系統將會優先取消佔用內存較大的任務，以回收超額分配（Overcommit）的內存資源。在此過程中，系統會盡量保留高優先級的資源組內存資源，低優先級資源組超額內存將被更快收回。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/_153887415b.png&quot; alt=&quot;內存資源限制&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_6&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;04 查詢排隊&lt;/h3&gt; 
&lt;p&gt;當業務負載超過系統可承載上限時，繼續提交新的查詢不僅無法有效執行，還會對運行中的查詢造成影響。為避免該問題出現，Workload Group 支持查詢排隊功能。當查詢達到預設的最大併發時，新提交計劃會進入排隊邏輯，當隊列已滿或等待超時，查詢會被拒絕，以此來緩解高負載下系統的壓力。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/_6e1a32f528.png&quot; alt=&quot;查詢排隊.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;查詢排隊功能主要有三個屬性：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;max_concurrency&lt;/code&gt;：當前 Group 允許同時運行的最大 SQL 數，如果超過最大數值，則進入排隊邏輯。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;max_queue_size&lt;/code&gt;：排隊隊列中的允許最大查詢個數，如果隊列滿了，那麼查詢會被拒絕、執行失敗。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;queue_timeout&lt;/code&gt;：隊列中排隊的時間限制，如果超時會直接失敗，單位是毫秒。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;參考文檔：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fc.d4t.cn%2FA2KmBm&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://doris.apache.org/zh-CN/docs/admin-manual/workload-group&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;span id=&quot;OSC_h2_7&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;Workload Group 使用測試&lt;/h2&gt; 
&lt;p&gt;接下來，我們對 Workload Group 的 CPU 軟限制和硬限制進行詳細測試，以便為用戶清晰呈現這兩種限制在相同硬件條件下的負載管理效果與性能表現。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;測試環境：16 核 64G 內存單台物理機&lt;/li&gt; 
 &lt;li&gt;部署方式：1 台 FE、1 台 BE&lt;/li&gt; 
 &lt;li&gt;測試數據集：Clickbench、TPCH&lt;/li&gt; 
 &lt;li&gt;壓測工具：JMeter&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h3_8&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;01 CPU 軟限測試&lt;/h3&gt; 
&lt;p&gt;啓動兩個客戶端（1、2），分別在未使用/使用 CPU 軟限的前提下，測試 CPU 軟限制對負載管理的效果。需要注意的是，在該測試中 Page Cache 會影響測試結果，需要關閉 Page Cache 才會達到理想的測試效果。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/CPU_a28bb3b520.png&quot; alt=&quot;CPU 軟限測試.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;通過對比分析兩次測試中的客戶端的吞吐量數據，我們可以得出以下結論：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;未使用 Workload Group 的情況下&lt;/strong&gt;，兩個客戶端的吞吐量比例為 1:1，表明它們在相同運行時間內獲得的 CPU 資源是相同的。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;使用 Workload Group 之後，&lt;/strong&gt; 分別設置 &lt;code&gt;cpu_share&lt;/code&gt; 為 2048 及 1024，結果表明吞吐量比例變為 2:1。這説明在相同的運行時間內，&lt;code&gt;cpu_share&lt;/code&gt;參數更大的客戶端 1 獲得了更高比例的 CPU 資源。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h3_9&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;02 CPU 硬限測試&lt;/h3&gt; 
&lt;p&gt;由上文介紹可知，CPU 硬限制在負載較高時，可以保證很好的隔離性。因此我們使用硬限限制 CPU 使用率為 50%（&lt;code&gt;cpu_hard_limit=50%&lt;/code&gt;），並使用同一客戶端分別在併發數為 1、2、4 時（模擬不同負載）下執行 q23 查詢測試，每次測試運行時間為 5 分鐘。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/CPU_5bfebd10d0.jpeg&quot; alt=&quot;CPU 硬限測試.jpeg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;從上方測試結果可知，隨着查詢併發數的增加，CPU 的利用率的始終穩定在 800% 上下（在一個 16 核的機器上，800% 的意味着使用 8 個核，&lt;strong&gt;實際的 CPU 利用率，為 50%&lt;/strong&gt;）。由於 CPU 資源被硬限，因此在併發增加時，tp99 延時增加是符合預期的。&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_10&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;03 模擬生產環境測試&lt;/h3&gt; 
&lt;p&gt;在實際生產環境中，用戶往往更關注查詢的延遲性能而非單純的吞吐量。為了更貼近實際應用場景並準確評估性能，我們選取了一系列延遲約為 1 秒的查詢 SQL（包括 CKBench 的 q15、q17、q23 和 TPCH 的 q3、q7、q19），構成一個 SQL 集合。這些查詢涵蓋了單表聚合和 Join 計算等多種特性，使用的 TPCH 數據集大小為 100G。&lt;/p&gt; 
&lt;p&gt;我們設計了兩組測試，分別模擬了未使用 Workload Group 和使用 Workload Group 的場景。在客戶端 1 和客戶端 2 上進行了四次測試，重點關注 tp90 和 tp99 的延遲情況。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/_f8188b69dd.png&quot; alt=&quot;模擬生產環境測試.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;通過觀察上表 4 次測試中查詢延遲，可得出以下結論：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;未使用 Workload Group（測試 1、2）&lt;/strong&gt;：當客戶端 2 的併發量從 1 增加到 4 時，客戶端 1、2 的查詢延遲均顯著上升。對比客戶端 1 的性能表現，median、tp90 和 tp95 查詢響應時間均增加了 2-3 倍。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;使用 Workload Group（測試 3、4）：&lt;/strong&gt; 這兩次測試中應用了 CPU 硬限制：設置客戶端 1 &lt;code&gt;cpu_hard_limit=90%&lt;/code&gt;、客戶端 2 &lt;code&gt;cpu_hard_limit=90%&lt;/code&gt;。從測試結果可知，即使客戶端 2 的併發量增加，客戶端 1 的查詢延遲僅呈現小幅上升，明顯優於測試 2 中性能表現。這一結果充分展現了 Workload Group 在負載隔離和性能穩定保障上的有效性。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_11&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;結束語&lt;/h2&gt; 
&lt;p&gt;目前 Resource Tag 和 Workload Group 功能已經在多個社區用戶的生產業務中上線並得到大規模驗證，推薦有資源隔離需求的用戶使用。&lt;/p&gt; 
&lt;p&gt;無論是 Resource Tag 或是 Workload Group，其目標都在於&lt;strong&gt;在資源隔離的獨立性和資源的利用率二者之間進行平衡&lt;/strong&gt;，前者採取了更徹底的隔離方案，而後者在保證隔離性的同時實現了資源的充分利用，並通過查詢隊列和任務排隊機制進一步保證了在高工作負載場景下的系統穩定性。&lt;/p&gt; 
&lt;p&gt;在資源隔離的實際使用過程中，我們建議兩種方案可以根據業務場景結合起來應用：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;如果是跨體系/跨業務部門之間共享同一集羣，希望實現資源和數據的物理隔離，可以採取 Resource Tag 方案；&lt;/li&gt; 
 &lt;li&gt;如果是在同一集羣內同時面對多種類型的查詢負載，可以通過 Workload Group 將不同負載區分開來，通過靈活的資源分配保證多種查詢負載均可以獲得合適的資源；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;在後續的功能完善上，我們還有很多規劃：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;當前內存限制通過 Cancel Query 來釋放內存，未來通過算子落盤可以進一步提升大查詢的穩定性、避免資源緊張時的查詢任務失敗。&lt;/li&gt; 
 &lt;li&gt;目前在 BE 進程的內存模型中，還存在部分非查詢的內存未被統計到，這可能導致用戶看到的 BE 進程內存和 Workload Group 使用內存之間存在差異，未來版本中將嘗試解決這個問題。&lt;/li&gt; 
 &lt;li&gt;查詢排隊功能只支持根據最大查詢併發數排隊，未來將通過 BE 的資源用量來約束最大併發數，從而對客戶端形成自動的反壓，提升 Doris 在客戶端持續提交高負載情況下的可用性。&lt;/li&gt; 
 &lt;li&gt;Resource Tag 功能是對 BE 機器資源的劃分，Workload Group 則是對單機進程內的資源劃分，這兩種資源劃分的方式都對用戶暴露了 BE 節點的概念。而用戶在使用資源管理功能時，本質上僅需要關注自己的工作負載在整個集內的可用資源量和資源分配的優先級。未來會探索資源劃分新方式，降低用戶的理解和使用成本。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_12&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;致謝&lt;/h2&gt; 
&lt;p&gt;Workload Group 功能是開源社區合作開發的項目，感謝以下同學的貢獻：羅甑林（luozenglin），劉立家（liutang123），趙立偉（levy5307）&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/selectdb/blog/11054766</link>
            <guid isPermaLink="false">https://my.oschina.net/selectdb/blog/11054766</guid>
            <pubDate>Thu, 25 Apr 2024 06:47:29 GMT</pubDate>
            <author>原創</author>
        </item>
        <item>
            <title>美國廢除絕大部分職業的《競業禁止協議》</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;4 月 24 日，美國媒體 NPR &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.npr.org%2F2024%2F04%2F23%2F1246655366%2Fftc-bans-noncompete-agreements-lina-khan&quot; target=&quot;_blank&quot;&gt;報道稱&lt;/a&gt;，美國聯邦貿易委員會 (FTC) 週二發以 3 票對 2 票的微弱優勢&lt;strong&gt;禁止了幾乎所有職業的競業禁止協議&lt;/strong&gt;。此類協議會禁止員工加入競爭企業或創辦自己的企業。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-657098ad88ce07e1acce5c96073ba62e30e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;據稱這是 50 多年來 FTC 官員首次發佈一項規定，要求在整個經濟範圍內改變公司企業的競爭方式。&lt;/p&gt; 
&lt;p&gt;在投票的幾個月前，FTC 收到了逾 2.6 萬條公眾意見。FTC 估計，從最低工資收入者到 CEO，美國有大約五分之一的從業者相當於 3000 萬人受到了競業禁止協議的約束。&lt;/p&gt; 
&lt;p&gt;很多人直到想要換工作時才知道自己簽署了競業禁止協議。&lt;/p&gt; 
&lt;p&gt;FTC 主席 Lina Khan 在一份聲明中表示：「競業禁止條款壓低了工資，遏制了新想法，並剝奪了美國經濟的活力。一旦禁止競業禁止條款，每年將會有 8500 多家新的初創公司誕生，員工平均每年也將多賺 524 美元。」&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-6ce1bff7b6ae17ffeefd93492175c935f26.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Khan 表示，最終規定將公司企業通過在職場實施競業禁止條款所攫取的權利交還給了美國人。她説：「搶奪人們的經濟自由權也就搶奪了他們的各種其他自由權。」&lt;/p&gt; 
&lt;p&gt;FTC 於 2023 年 1 月提議修改規定。該委員會後來收到了 2.6 萬條關於該方案的公眾評論，絕大多數人贊同禁止。&lt;/p&gt; 
&lt;p&gt;倡導自由企業、一直反對禁令的美國商會則誓言要就這項規定起訴 FTC，稱該規定是不必要的、非法的，是公然奪權。&lt;/p&gt; 
&lt;p&gt;美國商會總裁兼首席執行官 Suzanne Clark 在一份聲明中表示：「這一決定為政府對企業的微觀管理（即管得太細）開了一個危險的先例，可能會損害僱主、員工和我們的經濟。」&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289441/ftc-bans-noncompete-agreements</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289441/ftc-bans-noncompete-agreements</guid>
            <pubDate>Thu, 25 Apr 2024 06:40:29 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>PHP 在 2024 年還值得學習嗎？</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;IOBE 在&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/news/286796/tiobe-index-202404&quot;&gt;2024&amp;nbsp;年 4 月榜單&lt;/a&gt;中曾指出，隨着眾多競爭對手進入市場以及語言本身出現的一些問題；PHP 已經不復往日輝煌，在 TIOBE 指數中的排名跌至歷史最低點（第 17 位）。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在有關 PHP 已經日漸沒落的言論四起的背景下，軟件工程師 &lt;/span&gt;Sotiris Kourouklis&amp;nbsp;&lt;span style=&quot;color:#000000&quot;&gt;近日發佈了一篇名為「&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsotergreco.com%2Fis-php-still-worth-it-in-2024&quot; target=&quot;_blank&quot;&gt;Is PHP still worth it in 2024 ?&lt;/a&gt;」的博客文章，對 PHP 語言進行了一番詳盡的分析，探討該語言在現代 Web&amp;nbsp;開發中的實用性和效率。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;並最終得出結論稱，&lt;strong&gt;PHP 在 2024 年仍然是 Web 開發的一個不錯選擇。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;以下為全文譯文：&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;儘管許多人認為 PHP 是一種古老而不合格的語言，但在 2024 年，它仍然是所有網站中使用最多的語言。它的糟糕名聲往往與 WordPress 有關，後者被認為是 21 世紀最糟糕的軟件之一。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;撇開 WordPress 不談，讓我們快速瞭解一下 PHP 以及為什麼它在 2024 年可能是 Web&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;開發的一個不錯選擇。&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;性能&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;PHP 隨着時間的推移正在變得更快，尤其是最新版本，如 PHP 8.1 及以上版本，速度相當快。儘管在某些情況下它可能比 Go 或 Java 等編程語言慢，但在速度上，它至少可以與 Python 或 Node.js 媲美，甚至可能更快。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;203&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-138c3b04e87d1fef7bf375ce68eae75cd0b.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;開發速度&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;即使你不熟悉 PHP，它其實與 Python 非常相似，只有一些細微的差別。這種相似性有助於加快開發速度。從執行簡單的 CRUD 操作，到處理文件、webhook 和 websocket，幾乎所有事情都可以用最少的代碼完成。這是因為幾乎對於你可能需要完成的任何任務，都有現成的庫可用，從而無需你自己編寫大量代碼。&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;部署&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;PHP 的關鍵優勢之一是其部署的簡便性，即使是在大規模應用中也是如此。只需一個簡單的 PHP 服務器和 nginx，你就可以在幾個小時內啓動並運行&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;可擴展性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;那麼可擴展性如何呢？當然，使用任何編程語言對應用程序進行負載均衡是必要的，尤其是當你每天接到數百萬個請求時。但即便你沒有，只要你在端點上正確實現緩存，就不會有任何問題。&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;代碼整潔與可讀性&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在編寫整潔代碼方面，PHP 可能會出現混亂。然而，使用像 Laravel 這樣提供模板的框架就能解決這個問題。即使在擁有超過 20 萬行代碼（不包括自動生成的文件）的大型 API 中，只要保持代碼簡單，代碼的可讀性仍然可以非常高。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;我認為唯一更適合編寫簡潔代碼的編程語言是 Python。&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;結論&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;總之，建議使用 PHP/Laravel 構建主要的單體 API，因為其強大的框架功能能夠簡化大型代碼庫的管理。對於特殊需求，特別是涉及人工智能或其他 CPU 密集型操作的需求，可以考慮使用針對這些任務進行優化的其他編程語言。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;這種戰略性的劃分使你能夠利用每種語言和技術的優勢，確保項目在效率和可維護性方面表現出色。&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289440/is-php-still-worth-it-in-2024</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289440/is-php-still-worth-it-in-2024</guid>
            <pubDate>Thu, 25 Apr 2024 06:40:29 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>案例與腳本實踐：DolphinDB 輕量級實時數倉的構建與應用</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                        
                                                                                            &lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;DolphinDB 高性能分佈式時序數據庫，具有分佈式計算、事務支持、多模存儲、及流批一體等能力，非常適合作為一款理想的輕量級大數據平台，輕鬆搭建一站式的高性能實時數據倉庫。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;本教程將以案例與腳本的方式，介紹如何通過 DolphinDB 快速搭建實時數倉&lt;/strong&gt;，助力各個行業（如能源電力、航空航天、車聯網、石油化工、礦業、智能製造、貿易政務、金融等）在複雜業務場景下快速實現海量數據的低延時複雜指標計算和分析。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;本教程包括原理介紹和實踐操作，配套示例代碼，&lt;strong&gt;用戶可以根據教程，結合自身業務特點，動手搭建一個輕量級高性能的實時數據倉庫&lt;/strong&gt;。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_1&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;1. 引言&lt;/h2&gt; 
&lt;span id=&quot;OSC_h3_2&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;1.1 案例背景與需求&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;隨着大數據時代的來臨，各行各業對數據處理的實時性和準確性要求越來越高。傳統的離線數倉，雖然能夠在一定程度上滿足企業的數據存儲和離線分析需求，但在處理大規模實時數據時，往往顯得力不從心。尤其是在對數據實時性要求非常高的物聯網和金融的頭部企業，離線數倉的侷限性更加明顯。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;以電力行業的發電廠為例，每個發電廠都擁有大量的測點，這些測點實時採集着電站的運行數據。如何結合海量的電站運行數據，對實時數據進行精準複雜的計算和分析，成為了發電廠面臨的一大挑戰。傳統的實時數據庫欠缺對海量數據的聚合分析與計算能力，而傳統大數據系統搭建的離線數倉由於處理速度慢、時延高、架構複雜，難以滿足更深層次的業務需求。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;DolphinDB 作為一款輕量級一站式實時數倉解決方案，憑藉其高性能分佈式計算框架、實時流數據處理能力、分佈式多模態存儲引擎以及內存計算技術，成為瞭解決這一問題的理想選擇。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;本文將通過 DolphinDB 實現一個典型的發電側需求場景。在發電側 4 萬個測點秒採樣的情況下，實時獲取每個測點在 1 分鐘、5 分鐘、30 分鐘、小時、天、月、直至最近 1 年的各項測點指標（最大值、最小值、平均值、中位數、95% 分位數、5% 分位數、變化量、變化率、開始值、結束值等），並且實現毫秒級查詢響應。這些指標對於電站的運行監控、故障預警、能效分析，大數據展示等方面至關重要。&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_3&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;1.2 數據倉庫的基本概念&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;數據倉庫（Data Warehouse，簡稱 DW 或 DWH）是一種用於存儲、處理和分析大量數據的系統，旨在支持特定業務場景下的決策制定過程。數據倉庫也是一種技術架構，能夠彙集並融合來自多個數據源（如 MySQL、Oracle、MongoDB、HBase 等）的異構數據（如數據表、Json、CSV、Protobuf 等），通過數據清洗、集成和轉換，將數據整合至統一的存儲體系（如 DolphinDB，Hadoop）中，從而支持業務的多維分析、數據挖掘以及精準決策。&lt;/p&gt; 
&lt;div&gt; 
 &lt;img height=&quot;536&quot; src=&quot;https://pic1.zhimg.com/80/v2-c6dcd67596578af4b731d4bd90699658_720w.webp&quot; width=&quot;1106&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;1.1 傳統數據倉庫典型架構圖&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;數據倉庫的重要性在於它能夠幫助企業實現數據的集中管理和高效利用，根據用途和實時性區分，可以分為離線數倉和實時數倉兩種類型。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;離線數據倉庫通常採用 T -1 的方式實現，即每天定時（如凌晨）通過作業任務將前一天的歷史數據導入數據倉庫，再通過 OLAP（Online Analytical Processing） 對海量歷史數據（批數據）進行分析查詢。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;對於大部分企業來説，業務上迫切需要 T +0 實現實時風控、實時效果分析、實時過程管控等功能。傳統離線數倉無法滿足實時性要求，因此出現了兼顧實時性和分析性的新型數據倉庫架構，即實時數倉。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;實時數倉在技術要求和實現難度上，要遠遠超過傳統的數據倉庫。相比傳統數倉來説，實時數倉可以更高效的數據處理能力和實時（準實時）的數據更新頻率。在低延時的性能要求下，需要解決數據源異構性、數據質量控制、事務和強一致性、多模存儲、高性能聚合分析等技術難題。並且，如何讓普通開發人員具備實時數倉的開發和運維能力，並持續穩定的進行產品迭代，也是非常大的考驗。&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_4&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;1.3 傳統的實時數倉典型架構&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;傳統的實時數倉，通常以 Hadoop 大數據框架為基礎，使用 Lambda 架構或 Kappa 架構。技術複雜，開發週期長，無論在開發人員成本、時間成本還是硬件投入成本等方面來看，對企業都是極大的負擔。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;傳統實時數倉典型的技術棧如下所示：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;採集（Sqoop、Flume、Flink CDC、DataX、Kafka）&lt;/li&gt; 
 &lt;li&gt;存儲（HBase、HDFS、Hive、MySQL、MongoDB）&lt;/li&gt; 
 &lt;li&gt;數據加工和計算（Hive、Spark、Flink、Storm、Presto）&lt;/li&gt; 
 &lt;li&gt;OLAP 分析及查詢（TSDB/HTAP、ES、Kylin、DorisDB）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;企業要落地應用傳統的實時數倉，將會面臨學習成本高、資源消耗大、擴展性和實時性不足等諸多問題。&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_5&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;1.4 DolphinDB 實時數倉架構與性能&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;與複雜的傳統實時數倉不同，DolphinDB 可通過自身產品能力，快速實現輕量級實時數倉。既可獨立進行採集、存儲、流計算、ETL、決策分析與計算、可視化展示。亦可以作為企業已部署的各類第三方應用（如大數據平台、AI 中台、駕駛艙）的有效補充，為企業級應用系統、集團級數據中台提供實時數倉的技術支撐，以實現更復雜的應用場景。&lt;/p&gt; 
&lt;div&gt; 
 &lt;img height=&quot;606&quot; src=&quot;https://pic3.zhimg.com/80/v2-ef303091e8a454da6873c0a69e0bca2e_720w.webp&quot; width=&quot;930&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;DolphinDB 實時數倉業務架構圖&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;DolphinDB 在物聯網和金融等各行各業均擁有豐富且成熟的數據倉庫實踐案例，充分展現了其廣泛的應用價值。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;以某省海關電子口岸公司的實時數倉項目為例，DolphinDB 構建的實時數倉充分發揮了 All In One 輕量級一站式的產品優勢。支持多源異構數據的接入，兼容標準 SQL ，支持複雜的多表關聯，強大的 ETL 數據清洗能力，極大縮短了數據處理鏈條，減少運維和開發成本。其業務架構及技術特點如下圖所示：&lt;/p&gt; 
&lt;div&gt; 
 &lt;img height=&quot;829&quot; src=&quot;https://pic4.zhimg.com/80/v2-bb54f34b7dd2393ca16d850bae1b1477_720w.webp&quot; width=&quot;1503&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;某省電子口岸實時數倉項目業務架構圖&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;以下是在三機高可用集羣部署的情況下，DolphinDB 可支持的實時數倉性能指標參考：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;測點數量支持：&amp;gt;1 億測點&lt;/li&gt; 
 &lt;li&gt;寫入吞吐量：&amp;gt;1 億測點/秒&lt;/li&gt; 
 &lt;li&gt;ODS 支持存儲的記錄數：&amp;gt; 1 萬億條&lt;/li&gt; 
 &lt;li&gt;客戶端最大連接數：&amp;gt;5000&lt;/li&gt; 
 &lt;li&gt;併發查詢（QPS）：&amp;gt; 5000&lt;/li&gt; 
 &lt;li&gt;多維度聚合查詢：毫秒級&lt;/li&gt; 
 &lt;li&gt;實時流計算特徵值提取：&amp;gt;50 萬/秒&lt;/li&gt; 
 &lt;li&gt;單條記錄、單進程的刪改（軟刪除、upsert）同步耗時：≈ 10ms&lt;/li&gt; 
 &lt;li&gt;高可用集羣：多副本（數據高可用），多控制節點（元數據高可用），客戶端斷線重連和故障切換（客戶端高可用）&lt;/li&gt; 
 &lt;li&gt;彈性擴展：不停機水平擴展（加節點）、不停機垂直擴展（加磁盤卷），支持灰度升級&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_6&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;2. DolphinDB 實時數倉實踐&lt;/h2&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;接下來，我們將以水電站發電機組設備實時監控的真實需求為案例，通過 DolphinDB 搭建輕量級實時數倉。該案例可應用於能源電力、工業物聯網、車聯網等行業中。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;歡迎大家動手嘗試，一起來驗證一下！&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_7&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;2.1 DolphinDB 安裝部署&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;1. 下載官網社區最新版，建議 2.00.11 及以上版本。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;傳送門：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fwww.dolphindb.cn%2Fdownloads%2FDolphinDB_Win64_V2.00.9.3.zip&quot; target=&quot;_blank&quot;&gt;https://cdn.dolphindb.cn/downloads/DolphinDB_Win64_V2.00.11.3.zip&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;2. windows 解壓路徑，不能有空格，避免安裝到 Program Files 路徑下。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;官網教程：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fdocs.dolphindb.cn%2Fzh%2Ftutorials%2Fdeploy_dolphindb_on_new_server.html&quot; target=&quot;_blank&quot;&gt;https://docs.dolphindb.cn/zh/tutorials/deploy_dolphindb_on_new_server.htm&lt;/a&gt;l&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;3. 本次測試使用企業版，license 可申請免費試用。如使用免費社區版，建議降低測試的數據量級。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;獲取方式：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fdolphindb.cn%2Fproduct%2523downloads&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;background-color:transparent; color:transparent&quot;&gt;https://&lt;/span&gt;&lt;span&gt;dolphindb.cn/product#&lt;/span&gt;&lt;span style=&quot;background-color:transparent; color:transparent&quot;&gt;downloads&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;4. 安裝及測試過程中，有任何問題，可後台私信諮詢。&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_8&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;2.2 實時數倉指標需求&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;數據基本情況&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;測點個數：40000&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;採樣頻率：秒級&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;計算指標（聚合值）&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div&gt; 
 &lt;img height=&quot;97&quot; src=&quot;https://pic4.zhimg.com/80/v2-ce31230d9a3c69a299416d66364a127b_720w.webp&quot; width=&quot;805&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h3_9&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;2.3 實踐方案規劃&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;以 DolphinDB 流計算框架為基礎，搭建邊緣端輕量級實時數倉。所有計算結果在數據寫入的同時高效完成，時延控制在毫秒級。&lt;/p&gt; 
&lt;div&gt; 
 &lt;img height=&quot;1081&quot; src=&quot;https://pic1.zhimg.com/80/v2-7f5ac0fa8b7ce01a05af07228ed9cf48_720w.webp&quot; width=&quot;1131&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;對於 1 分鐘計算週期、5 分鐘計算週期的指標，以原始實時數據為基表；&lt;/li&gt; 
 &lt;li&gt;對於 30 分鐘計算週期、1 小時計算週期的指標，以 1 分鐘計算結果為基表；&lt;/li&gt; 
 &lt;li&gt;對於 24 小時計算週期指標，以 5 分鐘計算結果作為基表；&lt;/li&gt; 
 &lt;li&gt;對於 1 年計算週期指標，以 24 小時計算結果作為基表。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;每類指標的計算窗口及滑動步長如下表所示：&lt;/p&gt; 
&lt;table cellspacing=&quot;0&quot; style=&quot;-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; color:#191b1f; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Helvetica Neue&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Source Han Sans SC&amp;quot;,&amp;quot;Noto Sans CJK SC&amp;quot;,&amp;quot;WenQuanYi Micro Hei&amp;quot;,sans-serif; font-size:15px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin:1.4em auto; max-width:100%; orphans:2; table-layout:fixed; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:690px; word-spacing:0px&quot;&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th style=&quot;height:24px&quot;&gt;計算週期&lt;/th&gt; 
   &lt;th style=&quot;height:24px&quot;&gt;窗口長度&lt;/th&gt; 
   &lt;th style=&quot;height:24px&quot;&gt;滑動步長&lt;/th&gt; 
   &lt;th style=&quot;height:24px&quot;&gt;備註&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 分鐘&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 分鐘&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 分鐘&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;每間隔 1 分鐘，對過去 1 分鐘窗口內的值進行計算&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;5 分鐘&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;5 分鐘&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;5 分鐘&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;每間隔 5 分鐘，對過去 5 分鐘窗口內的值進行計算&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;30 分鐘&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;30 分鐘&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;30 分鐘&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;每間隔 30 分鐘，對過去 30 分鐘窗口內的值進行計算&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 小時&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 小時&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 小時&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;每間隔 1 小時，對過去 1 小時窗口內的值進行計算&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;24 小時&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;24 小時&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;24 小時&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;每間隔 24 小時，對過去 24 小時窗口內的值進行計算&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 年&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 年&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;24 小時&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;每間隔 1 天，對過去 1 年窗口內的值進行計算&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;span id=&quot;OSC_h2_10&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;3. 性能測試及結果&lt;/h2&gt; 
&lt;span id=&quot;OSC_h3_11&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;3.1 測試環境&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;為了方便測試和驗證，採用單機單節點的部署方式實現輕量級實時數倉，服務器配置如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CPU：12 核&lt;/li&gt; 
 &lt;li&gt;內存：32GB&lt;/li&gt; 
 &lt;li&gt;磁盤：1.1T HDD 150MB/s&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;通過腳本模擬全量測點（40000）24 小時內的實時數據（2023.01.01T00:00:00—2023.01.02T00:00:01.000），進行 1 分鐘、5 分鐘、30 分鐘、1 小時、24 小時的窗口聚合計算，並將計算結果寫入分佈式數據庫。（在某個窗口內，數據條數有可能比窗口長度要小）&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;對於 1 年窗口的計算，另模擬 24 小時窗口計算結果實時數據，對該模擬的結果進行實時聚合計算。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;詳細的測試腳本，包含在文末的附件中。&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_12&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;3.2 測試結果&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;性能測試結果見下表：&lt;/p&gt; 
&lt;div&gt; 
 &lt;img height=&quot;366&quot; src=&quot;https://pic4.zhimg.com/80/v2-34ede83e34d89088149c56a5c0a5ed0b_720w.webp&quot; width=&quot;766&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;注：上表中，全部測點計算耗時為時間窗口內所有測點指標計算的耗時；單測點/多測點計算耗時為時間窗口內所選測點指標計算的耗時。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_13&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;4. 總結&lt;/h2&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;通過本教程的學習和實踐，我們深入瞭解了 DolphinDB 在構建輕量級實時數倉方面的強大能力。DolphinDB 以其高性能、分佈式、實時計算的特點，為各個行業提供了快速實現海量數據低延時複雜指標計算和分析的有力工具。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;通過實踐操作，我們可以體驗到了 DolphinDB 的易用性和高效性。無論是數據導入、數據查詢還是複雜的流式計算，DolphinDB 都提供了簡潔明瞭的語法和強大的功能。附件中所提供的腳本不僅包括 DolphinDB 的基本使用和操作方法，更能夠深入瞭解實時數倉的構建原理和應用場景。這使得我們可以快速構建出符合業務需求的實時數倉，並實時響應各種複雜的分析需求。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;最後，希望讀者能夠結合本教程的示例代碼和自身業務特點，動手搭建一個輕量級高性能的實時數據倉庫。在實際應用中，不斷挖掘 DolphinDB 的潛力，無論是能源電力、石油化工、智能製造、航空航天還是車聯網、金融等行業，DolphinDB 均可為實時數倉的廣泛應用提供有力支持。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_14&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;5. 附件&lt;/h2&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;測試結果可通過以下腳本，在 DolphinDB 服務器上進行復現：&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;def clearEnv(){
    //取消訂閲
    unsubscribeTable(tableName=`inputStream, actionName=&quot;dispatch1&quot;)
    unsubscribeTable(tableName=`inputStream, actionName=&quot;dispatch2&quot;)
    unsubscribeTable(tableName=`oneMinuteResult, actionName=&quot;calcHalfHour&quot;)
    unsubscribeTable(tableName=`oneMinuteResult, actionName=&quot;calcOneHour&quot;)
    unsubscribeTable(tableName=`fiveMinuteResult, actionName=&quot;calcOneDay&quot;)
    unsubscribeTable(tableName = `oneDayResultSimulate,actionName=`calcOneYear)

    unsubscribeTable(tableName = `oneMinuteResult,actionName=`appendInToDFS)
    unsubscribeTable(tableName = `fiveMinuteResult,actionName=`appendInToDFS)
    unsubscribeTable(tableName = `halfHourResult,actionName=`appendInToDFS)
    unsubscribeTable(tableName = `oneHourResult,actionName=`appendInToDFS)
    unsubscribeTable(tableName = `oneDayResult,actionName=`appendInToDFS)
    unsubscribeTable(tableName = `oneYearResult,actionName=`appendInToDFS)

    //刪除流計算引擎
    for(i in 1..2){
        try{dropStreamEngine(`dispatchDemo+string(i))}catch(ex){print(ex)}
    }
    for(i in 1..5){
        try{dropStreamEngine(`oneMinuteCalc+string(i))}catch(ex){print(ex)}
        try{dropStreamEngine(`fiveMinuteCalc+string(i))}catch(ex){print(ex)}
    }
    try{dropStreamEngine(`halfHourCalc)}catch(ex){print(ex)}
    try{dropStreamEngine(`oneHourCalc)}catch(ex){print(ex)}
    try{dropStreamEngine(`oneDayCalc)}catch(ex){print(ex)}
    try{dropStreamEngine(`oneYearCalc)}catch(ex){print(ex)}

    //刪除流數據表
    try{dropStreamTable(`inputStream)}catch(ex){print(ex)}
    try{dropStreamTable(`oneMinuteResult)}catch(ex){print(ex)}
    try{dropStreamTable(`fiveMinuteResult)}catch(ex){print(ex)}
    try{dropStreamTable(`halfHourResult)}catch(ex){print(ex)}
    try{dropStreamTable(`oneHourResult)}catch(ex){print(ex)}
    try{dropStreamTable(`oneDayResult)}catch(ex){print(ex)}
    try{dropStreamTable(`oneDayResultSimulate)}catch(ex){print(ex)}
    try{dropStreamTable(`oneYearResult)}catch(ex){print(ex)}

}

def createStreamTable(){
    //定義輸入流表
    enableTableShareAndPersistence(table = streamTable(1000:0,`Time`deviceId`value,`TIMESTAMP`SYMBOL`DOUBLE),
            tableName = `inputStream,cacheSize = 1000000,precache=1000000)

    colName = `Time`deviceId`filterTime`MAX`MIN`MEAN`MED`P95`P5`CHANGE`CHANGE_RATE`first`last`endTime
    colType = `TIMESTAMP`SYMBOL`NANOTIMESTAMP join take(`DOUBLE,10) join `NANOTIMESTAMP
    //定義 1 分鐘窗口計算結果流表            
    enableTableShareAndPersistence(table = streamTable(1000:0,colName,colType),
        tableName = `oneMinuteResult,cacheSize = 1000000,precache=1000000)

    //定義 5 分鐘窗口計算結果流表            
    enableTableShareAndPersistence(table = streamTable(1000:0,colName,colType),
        tableName = `fiveMinuteResult,cacheSize = 1000000,precache=1000000)

    //定義 30 分鐘窗口計算結果流表            
    enableTableShareAndPersistence(table = streamTable(1000:0,colName,colType),
        tableName = `halfHourResult,cacheSize = 1000000,precache=1000000)

    //定義 1 小時窗口計算結果流表            
    enableTableShareAndPersistence(table = streamTable(1000:0,colName,colType),
        tableName = `oneHourResult,cacheSize = 1000000,precache=1000000)
    
    //定義 24 小時窗口計算結果流表            
    enableTableShareAndPersistence(table = streamTable(1000:0,colName,colType),
        tableName = `oneDayResult,cacheSize = 1000000,precache=1000000)

    //定義模擬 24 小時窗口計算結果流表
    colName = `TIME`deviceId`MAX`MIN`MEAN`MED`P95`P5`CHANGE`CHANGE_RATE`first`last
    colType = `DATE`SYMBOL join take(`DOUBLE,10)           
    enableTableShareAndPersistence(table = streamTable(1000:0,colName,colType),
        tableName = `oneDayResultSimulate,cacheSize = 1000000,precache=1000000)

    //定義 1 年窗口計算結果流表
    colName = `Time`deviceId`filterTime`MAX`MIN`MEAN`MED`P95`P5`CHANGE`CHANGE_RATE`first`last`endTime
    colType = `DATE`SYMBOL`NANOTIMESTAMP join take(`DOUBLE,10) join `NANOTIMESTAMP            
    enableTableShareAndPersistence(table = streamTable(1000:0,colName,colType),
       tableName = `oneYearResult,cacheSize = 1000000,precache=1000000)    
}

def createDFS(){
    //創建存儲計算 1 分鐘窗口計算結果表
    if(existsDatabase(&quot;dfs://oneMinuteCalc&quot;)){dropDatabase(&quot;dfs://oneMinuteCalc&quot;)}
    db1 = database(, VALUE,2023.01.01..2023.01.03)
    db2 = database(, HASH,[SYMBOL,20])
    db = database(directory=&quot;dfs://oneMinuteCalc&quot;, partitionType=COMPO, partitionScheme=[db1,db2],engine=&quot;TSDB&quot;)
    colName =  `Time`deviceId`filterTime`MAX`MIN`MEAN`MED`P95`P5`CHANGE`CHANGE_RATE`first`last`endTime
    colType = `TIMESTAMP`SYMBOL`NANOTIMESTAMP join take(`DOUBLE,10) join `NANOTIMESTAMP
    t = table(1:0,colName,colType)
    pt = db.createPartitionedTable(table=t,tableName =&quot;test&quot; ,partitionColumns = [&quot;Time&quot;,&quot;deviceId&quot;],
            sortColumns =[&quot;deviceId&quot;,&quot;Time&quot;],compressMethods={Time:&quot;delta&quot;})

    //創建存儲計算 5 分鐘窗口計算結果表        
    if(existsDatabase(&quot;dfs://fiveMinuteCalc&quot;)){dropDatabase(&quot;dfs://fiveMinuteCalc&quot;)}
    db = database(directory=&quot;dfs://fiveMinuteCalc&quot;, partitionType=VALUE,
           partitionScheme=2023.01.01..2023.01.03,engine=&quot;TSDB&quot;)
    t = table(1:0,colName,colType)
    pt = db.createPartitionedTable(table=t,tableName =&quot;test&quot; ,partitionColumns = [&quot;Time&quot;],
            sortColumns =[&quot;deviceId&quot;,&quot;Time&quot;],compressMethods={Time:&quot;delta&quot;},
            sortKeyMappingFunction=[hashBucket{,100}])        

    //創建存儲計算 30 分鐘窗口計算結果表
    if(existsDatabase(&quot;dfs://halfHourCalc&quot;)){dropDatabase(&quot;dfs://halfHourCalc&quot;)}
    db = database(directory=&quot;dfs://halfHourCalc&quot;, partitionType=VALUE, 
            partitionScheme=2023.01.01..2023.01.03,engine=&quot;TSDB&quot;)
    t = table(1:0,colName,colType)
    pt = db.createPartitionedTable(table=t,tableName =&quot;test&quot; ,partitionColumns = [&quot;Time&quot;],
            sortColumns =[&quot;deviceId&quot;,&quot;Time&quot;],compressMethods={Time:&quot;delta&quot;})  

    //創建存儲計算 1 小時窗口計算結果表
    if(existsDatabase(&quot;dfs://oneHourCalc&quot;)){dropDatabase(&quot;dfs://oneHourCalc&quot;)}
    db = database(directory=&quot;dfs://oneHourCalc&quot;, partitionType=VALUE,
             partitionScheme=2023.01.01..2023.01.03,engine=&quot;TSDB&quot;)
    t = table(1:0,colName,colType)
    pt = db.createPartitionedTable(table=t,tableName =&quot;test&quot; ,partitionColumns = [&quot;Time&quot;],
            sortColumns =[&quot;deviceId&quot;,&quot;Time&quot;],compressMethods={Time:&quot;delta&quot;})
            
    //創建存儲計算 24 小時窗口計算結果表
    if(existsDatabase(&quot;dfs://oneDayCalc&quot;)){dropDatabase(&quot;dfs://oneDayCalc&quot;)}
    db = database(directory=&quot;dfs://oneDayCalc&quot;, partitionType=VALUE, 
          partitionScheme=2023.01.01..2023.01.03,engine=&quot;TSDB&quot;)
    t = table(1:0,colName,colType)
    pt = db.createPartitionedTable(table=t,tableName =&quot;test&quot; ,partitionColumns = [&quot;Time&quot;],
            sortColumns =[&quot;deviceId&quot;,&quot;Time&quot;],compressMethods={Time:&quot;delta&quot;})

    //創建存儲計算 1 年窗口計算結果表
    if(existsDatabase(&quot;dfs://oneYearCalc&quot;)){dropDatabase(&quot;dfs://oneYearCalc&quot;)}
    db = database(directory=&quot;dfs://oneYearCalc&quot;, partitionType=VALUE, 
          partitionScheme=2023.01.01..2023.01.03,engine=&quot;TSDB&quot;)
    t = table(1:0,colName,colType)
    pt = db.createPartitionedTable(table=t,tableName =&quot;test&quot; ,partitionColumns = [&quot;Time&quot;],
            sortColumns =[&quot;deviceId&quot;,&quot;Time&quot;],compressMethods={Time:&quot;delta&quot;})
}

//1 分鐘窗口計算過濾函數
def filter1(msg){
    t = select *,now(true) as filterTime from msg 
    getStreamEngine(`dispatchDemo1).append!(t)
}

//5 分鐘窗口計算過濾函數
def filter2(msg){
    t = select *,now(true) as filterTime from msg 
    getStreamEngine(`dispatchDemo2).append!(t)
}

//30 分鐘窗口計算過濾函數
def filter3(msg){
    t = select *,now(true) as filterTime2 from msg 
    getStreamEngine(`halfHourCalc).append!(t)
}

//1 小時窗口計算
def filter4(msg){
    t = select *,now(true) as filterTime2 from msg 
    getStreamEngine(`oneHourCalc).append!(t)
}

//24 小時窗口計算
def filter5(msg){
    t = select *,now(true) as filterTime2 from msg 
    getStreamEngine(`oneDayCalc).append!(t)
}

clearEnv();
createStreamTable();
createDFS();

schemas1 = table(1:0,`Time`deviceId`value`filterTime,`TIMESTAMP`SYMBOL`DOUBLE`NANOTIMESTAMP)
metrics1 = &amp;lt;[first(filterTime),max(value),min(value),mean(value),med(value),percentile(value,95),
              percentile(value,5),last(value)-first(value),
              (last(value)-first(value))/first(value),first(value),last(value),now(true)]&amp;gt;
//創建 1 分鐘窗口聚合計算引擎
for(i in 1..5){
    engine1 = createTimeSeriesEngine(name=&quot;oneMinuteCalc&quot;+string(i), windowSize=60000, step=60000,
                metrics=metrics1 , dummyTable=schemas1 , outputTable=objByName(`oneMinuteResult),
                timeColumn = `Time, useSystemTime=false, keyColumn = `deviceId)
}

//創建 5 分鐘窗口聚合計算引擎
for(i in 1..5){
    engine2 = createTimeSeriesEngine(name=&quot;fiveMinuteCalc&quot;+string(i), windowSize=300000, step=300000, 
                metrics=metrics1 , dummyTable=schemas1 , outputTable=objByName(`fiveMinuteResult),
                timeColumn = `Time, useSystemTime=false, keyColumn = `deviceId)
}

//1 分鐘、5 分鐘窗口聚合計算分發引擎
dispatchEngine1=createStreamDispatchEngine(name=&quot;dispatchDemo1&quot;, dummyTable=schemas1, keyColumn=`deviceId, 
        outputTable=[getStreamEngine(&quot;oneMinuteCalc1&quot;),getStreamEngine(&quot;oneMinuteCalc2&quot;),
                        getStreamEngine(&quot;oneMinuteCalc3&quot;),getStreamEngine(&quot;oneMinuteCalc4&quot;),
                        getStreamEngine(&quot;oneMinuteCalc5&quot;)])
dispatchEngine2=createStreamDispatchEngine(name=&quot;dispatchDemo2&quot;, dummyTable=schemas1, keyColumn=`deviceId, 
        outputTable=[getStreamEngine(&quot;fiveMinuteCalc1&quot;),getStreamEngine(&quot;fiveMinuteCalc2&quot;),
                        getStreamEngine(&quot;fiveMinuteCalc3&quot;),getStreamEngine(&quot;fiveMinuteCalc4&quot;),
                        getStreamEngine(&quot;fiveMinuteCalc5&quot;)])


colName =  `Time`deviceId`filterTime`MAX`MIN`MEAN`MED`P95`P5`CHANGE`CHANGE_RATE`first`last`endTime`filterTime2
colType = `TIMESTAMP`SYMBOL`NANOTIMESTAMP join take(`DOUBLE,10) join `NANOTIMESTAMP`NANOTIMESTAMP
schemas2 = table(1:0,colName,colType)
metrics2 = &amp;lt;[first(filterTime2),max(MAX),min(MIN),mean(MEAN),med(MED),avg(P95),avg(P5),last(last)-first(first),
                (last(last)-first(first))/first(first),first(first),last(last),now(true)]&amp;gt;
//創建 30 分鐘窗口聚合計算引擎
engine3 = createTimeSeriesEngine(name=&quot;halfHourCalc&quot;, windowSize=1800000, step=1800000, metrics=metrics2 , 
                dummyTable=schemas2 , outputTable=objByName(`halfHourResult),
                timeColumn = `Time, useSystemTime=false, keyColumn = `deviceId)

//創建 1 小時窗口聚合計算引擎
engine4 = createTimeSeriesEngine(name=&quot;oneHourCalc&quot;, windowSize=3600000, step=3600000, metrics=metrics2 , 
                dummyTable=schemas2 , outputTable=objByName(`oneHourResult),
                timeColumn = `Time, useSystemTime=false, keyColumn = `deviceId)

//創建 24 小時窗口聚合計算引擎
engine5 = createTimeSeriesEngine(name=&quot;oneDayCalc&quot;, windowSize=86400000, step=86400000, 
                metrics=metrics2 , dummyTable=schemas2 , outputTable=objByName(`oneDayResult),
                timeColumn = `Time, useSystemTime=false, keyColumn = `deviceId)


//訂閲
subscribeTable(tableName=`inputStream, actionName=&quot;dispatch1&quot;, handler=filter1, msgAsTable = true,
          batchSize = 10240)
subscribeTable(tableName=`inputStream, actionName=&quot;dispatch2&quot;, handler=filter2, msgAsTable = true,
          batchSize = 10240)

subscribeTable(tableName=`oneMinuteResult, actionName=&quot;calcHalfHour&quot;, handler=filter3,
           msgAsTable = true,batchSize = 10240)
subscribeTable(tableName=`oneMinuteResult, actionName=&quot;calcOneHour&quot;, handler=filter4, 
          msgAsTable = true,batchSize = 10240)
subscribeTable(tableName=`fiveMinuteResult, actionName=&quot;calcOneDay&quot;, handler=filter5, 
          msgAsTable = true,batchSize = 10240)


subscribeTable(tableName = `oneMinuteResult,actionName=`appendInToDFS,offset=0,
          handler=loadTable(&quot;dfs://oneMinuteCalc&quot;,&quot;test&quot;),
          msgAsTable=true,batchSize=10240)
subscribeTable(tableName = `fiveMinuteResult,actionName=`appendInToDFS,offset=0,
          handler=loadTable(&quot;dfs://fiveMinuteCalc&quot;,&quot;test&quot;),
          msgAsTable=true,batchSize=10240)
subscribeTable(tableName = `halfHourResult,actionName=`appendInToDFS,offset=0,
          handler=loadTable(&quot;dfs://halfHourCalc&quot;,&quot;test&quot;),
          msgAsTable=true,batchSize=10240)
subscribeTable(tableName = `oneHourResult,actionName=`appendInToDFS,offset=0,
          handler=loadTable(&quot;dfs://oneHourCalc&quot;,&quot;test&quot;),
          msgAsTable=true,batchSize=10240)
subscribeTable(tableName = `oneDayResult,actionName=`appendInToDFS,offset=0,
          handler=loadTable(&quot;dfs://oneDayCalc&quot;,&quot;test&quot;),
          msgAsTable=true,batchSize=10240)


def filter6(msg){
    tmp = select * ,now(true) as filterTime from msg 
    getStreamEngine(`oneYearCalc).append!(tmp)
}        

colName =  `Time`deviceId`MAX`MIN`MEAN`MED`P95`P5`CHANGE`CHANGE_RATE`first`last`filterTime
colType = `DATE`SYMBOL join take(`DOUBLE,10) join `NANOTIMESTAMP
schemas3 = table(1:0,colName,colType)
metrics3 = &amp;lt;[last(filterTime),max(MAX),min(MIN),mean(MEAN),med(MED),avg(P95),avg(P5),last(last)-first(first),
                (last(last)-first(first))/first(first),first(first),last(last),now(true)]&amp;gt;
engine6 = createTimeSeriesEngine(name=&quot;oneYearCalc&quot;, windowSize=365, step=1, metrics=metrics3 , 
            dummyTable=schemas3 , outputTable=objByName(`oneYearResult),
            timeColumn = `Time, useSystemTime=false, keyColumn = `deviceId)

subscribeTable(tableName = `oneDayResultSimulate,actionName=`calcOneYear, handler=filter6, 
            msgAsTable = true,batchSize = 10240)
subscribeTable(tableName = `oneYearResult,actionName=`appendInToDFS,offset=0,
            handler=loadTable(&quot;dfs://oneYearCalc&quot;,&quot;test&quot;),
            msgAsTable=true)



deviceIdList = lapd(string(rand(10000,700)),6,&quot;0&quot;)  //測點 id

//模擬數據的函數，一共模擬 1 小時的數據
def simulateData(deviceIdList){
    num = deviceIdList.size()
    startTime = timestamp(2023.01.01)
    do{
        Time = take(startTime,num)
        deviceId = deviceIdList
        value = rand(100.0,num)
        objByName(`inputStream).append!(table(Time,deviceId,value))
        startTime = startTime+1000
        sleep(100)
    }while(startTime&amp;lt;=2023.01.02T00:00:10.000)
}

def simulateOneDay(deviceIdList){
    num = deviceIdList.size()
    startTime =2022.01.01
    do{
        Time = take(startTime,num)
        deviceId = deviceIdList
        MAX = rand(100.0,num)
        MIN = rand(100.0,num)
        MEAN = rand(100.0,num)
        MED = rand(100.0,num)
        P95 = rand(100.0,num)
        P5 = rand(100.0,num)
        CHANGE = rand(100.0,num)
        CHANGE_RATE = rand(100.0,num)
        first = rand(100.0,num)
        last = rand(100.0,num)
        tmp = table(Time,deviceId,MAX,MIN,MEAN,MED,P95,P5,CHANGE,CHANGE_RATE,first,last)
        objByName(`oneDayResultSimulate).append!(tmp)
        startTime = startTime+1
        sleep(500)
    }while(startTime&amp;lt;=2023.12.31)
}


submitJob(&quot;simulateData&quot;,&quot;write&quot;,simulateData,deviceIdList)
submitJob(&quot;simulateOneDay&quot;,&quot;write&quot;,simulateOneDay,deviceIdList)


//耗時統計
tmp1 = select Time,deviceId,filterTime,endTime from loadTable(&quot;dfs://oneYearCalc&quot;,&quot;test&quot;) order by Time,deviceId
tmp2 = select Time,deviceId,next(filterTime) as startTime,endTime from tmp1 context by deviceId
select avg(endTime-startTime)\1000\1000 as timeUsed from tmp2 group by deviceId  //統計單個測點的計算耗時
tmp3 = select min(startTime) as st,max(endTime) as dt from tmp2 group by Time  
select (dt-st)\1000\1000 as used from tmp3 //統計整個時間窗口的計算耗時&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt;
                                                                                    &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/4865736/blog/11054780</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4865736/blog/11054780</guid>
            <pubDate>Thu, 25 Apr 2024 03:46:20 GMT</pubDate>
            <author>原創</author>
        </item>
        <item>
            <title>蘋果開源面向移動設備打造的小尺寸模型 OpenELM</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;在 WWDC24 之前，蘋果在 Hugging Face 平台上發佈了一個「具有開源訓練和推理框架的高效語言模型」，名為 OpenELM。&lt;/p&gt; 
&lt;p&gt;官方介紹稱：大型語言模型的可重複性和透明性對於推進開放研究、確保結果的可信度以及調查數據和模型偏差以及潛在風險至關重要。為此，我們發佈了 OpenELM，一個最先進的開源語言模型。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6f1c87c8957e0c4f4a27e1d3fd76bc1044e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;OpenELM 使用分層縮放策略，可以有效地分配 Transformer 模型每一層的參數，從而提高準確率。例如，在參數量約為 10 億的情況下，OpenELM 與 OLMo 相比準確率提升了 2.36%，同時所需的預訓練 tokens 數量僅有原來的 50%。&lt;/p&gt; 
&lt;p&gt;OpenELM 有四種尺寸：2.7 億、4.5 億、11 億和 30 億個參數。而微軟 Phi-3 模型為 38 億，因此前者在小型機型上運行成本更低，可在手機和筆記本電腦等移動設備上運行，是做 AI 硬件的絕佳小模型。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;OpenELM 核心特性如下&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;功能：該模型能夠執行生成文本、代碼、翻譯、總結摘要等功能。&lt;/li&gt; 
 &lt;li&gt;預訓練數據：儘管最小的模型只有 2.7 億參數，但蘋果使用了 1.8 萬億 tokens 的數據進行預訓練，這是其小參數下仍能表現出色的原因之一。&lt;/li&gt; 
 &lt;li&gt;蘋果的開源策略：蘋果通常在手機領域採取閉源策略，但此次開源可能是為了吸引用戶，未來可能會推出閉源產品實現商業化。&lt;/li&gt; 
 &lt;li&gt;技術貢獻：蘋果不僅發佈了模型權重和推理代碼，還發布了完整的訓練和評估框架，包括數據準備、模型訓練、微調和評估流程，以及多個預訓練檢查點和訓練日誌。&lt;/li&gt; 
 &lt;li&gt;OpenELM 架構：OpenELM 的架構，包括其技術創新點，如無編碼器的 transformer 架構、層級縮放策略、不使用全連接層中的可學習偏置參數等。&lt;/li&gt; 
 &lt;li&gt;訓練流程與數據集：蘋果使用 CoreNet 作為訓練框架，Adam 優化算法，以及動態分詞和數據過濾的方法。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;論文地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2404.14619&quot; target=&quot;_blank&quot;&gt;https://arxiv.org/abs/2404.14619&lt;/a&gt;&lt;br&gt; 模型地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fapple%2FOpenELM&quot; target=&quot;_blank&quot;&gt;https://huggingface.co/apple/OpenELM&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289394/apple-openelm</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289394/apple-openelm</guid>
            <pubDate>Thu, 25 Apr 2024 03:08:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>Atlassian 開源最強「實用」前端拖拽組件：性能和兼容性俱佳、支持跨窗口拖動、適用於任何前端框架</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;​Pragmatic drag and drop 是一款前端拖拽組件，由知名軟件開發公司 Atlassian 開源。&lt;/p&gt; 
&lt;p&gt;正如名字中的&amp;nbsp;Pragmatic（「實用」）所言，該組件支持許多拖拽場景，十分注重性能，並且通過使用瀏覽器強大而靈活的內置拖拽功能變得安全而簡單。&lt;/p&gt; 
&lt;p&gt;目前&amp;nbsp;Atlassian 公司旗下核心產品 Trello、Jira 和 Confluence 等均使用了&amp;nbsp;Pragmatic&amp;nbsp;drag and drop。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-069de10d4ff639cca6480f25d48b742c307.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在 Pragmatic&amp;nbsp;drag and drop 之前，該組件作者 Alex Reardon 還打造了另一款流行的 React 開源拖拽組件&amp;nbsp;&lt;strong&gt;react-beautiful-dnd&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;與之相比，Pragmatic&amp;nbsp;drag and drop 支持了更多的拖拽場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;列表&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;面板&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;表格&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;樹&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Grids&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Drawing&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Resizing&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-94b6db72d4113d06c166d6f96526d61654f.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;下圖展示了 Pragmatic Drag and Drop 在不同場景的運行效果：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-dbf425a891de9dbbc643f2e1dd09a719759.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-1a1d06ccd389f1df79d68fc064a4782d48c.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Pragmatic drag and drop 還支持在任何前端框架（如 React、Svelte、Vue、Angular）中使用，不受特定技術棧的限制。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8c77133d269dab03a7d429d112d2bd3ed2d.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在不同框架中使用的寫法如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;React&lt;br&gt; &lt;br&gt; &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-00e35c0e3d694933f9112098dd6864080ca.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Svelte&lt;br&gt; &lt;br&gt; &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c3494a999b592b17d69eacc5ca002608a51.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;JS&lt;br&gt; &lt;br&gt; &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1a47c9ab905b482c197e690100d6484a94f.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;對比其他同類型的開源拖拽組件，Pragmaticdrag and drop&amp;nbsp;核心包經過壓縮後更加輕量，僅 4.7kb。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-55df7155c1ff15a0b672074e83653c583d9.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;性能方面，對比以下同類型開源框架：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;react-beautiful-dnd&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;react-dnd&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;dnd-kit&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Pragmaticdrag and drop 的&amp;nbsp;TTI 指標可謂是「遙遙領先」。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;TTI: Time to Interactive，可交互時間。該指標主要用於測量頁面從開始加載到主要子資源完成渲染，並能夠快速、可靠地響應用戶輸入所需要的時間。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-145754a9398db4c824b6bd3246b3ac84e91.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;參考鏈接&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D5SQkOyzZLHM&quot; target=&quot;_blank&quot;&gt;https://www.youtube.com/watch?v=5SQkOyzZLHM&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fatlassian.design%2Fcomponents%2Fpragmatic-drag-and-drop%2Fabout&quot; target=&quot;_blank&quot;&gt;https://atlassian.design/components/pragmatic-drag-and-drop/about&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMjM5OTExNzQ3NQ%3D%3D%26mid%3D2450963563%26idx%3D1%26sn%3Dc5a58b5b52dbf9e36123cb923db4dfd4%26chksm%3Db1224ba78655c2b1004c1f9e085b89c32060af4477fe9c15a44e756df33bbefe3e7d086cc185%26poc_token%3DHArEKWajFvhQDByJ05Dti33GLNu_z4q8albNvq6z&quot; target=&quot;_blank&quot;&gt;https://mp.weixin.qq.com/&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289391</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289391</guid>
            <pubDate>Thu, 25 Apr 2024 02:47:38 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>大模型下 B 端前端代碼輔助生成的思考與實踐 ｜ 得物技術</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    &lt;div class=&quot;ad-wrap&quot; style=&quot;margin-bottom: 8px;&quot;&gt;
            &lt;div data-traceid=&quot;news_comment_top_ad&quot; data-tracepid=&quot;news_comment_top&quot; style=&quot;text-align: center;&quot;&gt;
&lt;a style=&quot;color:#A00;font-weight:bold;&quot; href=&quot;https://www.oschina.net/action/visit/ad?id=1603&quot; target=&quot;_blank&quot;&gt;【直播預告】大模型會取代程序員嗎？」 &lt;img src=&quot;https://www.oschina.net/img/hot3.png&quot; align=&quot;absmiddle&quot; style=&quot;max-height: 32px;max-width: 32px;margin-top: -4px;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
            &lt;/div&gt;
                                                        
                                                                                            &lt;span id=&quot;OSC_h2_1&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;一、背景&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;重複工作，代碼規範：&lt;/strong&gt;B 端前端代碼開發過程中開發者總會面臨重複開發的痛點，很多 CRUD 頁面的元素模塊基本相似，但仍需手動開發，將時間花在簡單的元素搭建上，降低了業務需求的&lt;strong&gt;開發效率&lt;/strong&gt;，同時因為不同開發者的&lt;strong&gt;代碼風格不一致&lt;/strong&gt;，使得敏捷迭代時其他人上手成本較高。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;AI 代替簡單腦力：&lt;/strong&gt;AI 大模型的不斷髮展，已經具備簡單的理解能力，並可以進行&lt;strong&gt;語言到指令的轉換&lt;/strong&gt;。對於基礎頁面搭建這樣的通用指令可以滿足日常基礎頁面搭建的需要，提升通用場景業務開發效率。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_2&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;二、生成鏈路一覽&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;B 端頁面列表、表單、詳情都支持生成，鏈路大概可分為以下幾個步驟。&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-865640d7af801189d2dad45b3f22b568e07.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;輸入自然語言&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;結合大模型按照指定規則提取出相應搭建信息&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;搭建信息結合代碼模板與 AST 輸出前端代碼&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_3&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;三、表達需求&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;圖形化配置&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;輔助代碼生成第一步是告訴它開發出怎樣的界面，提到這裏，我們首先想到的是&lt;strong&gt;頁面配置&lt;/strong&gt;，即目前主流的低代碼產品形式，用戶通過一系列的圖形化配置對頁面進行搭建，如下圖：&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;664&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e52cbe02c18dc1b38482a6afee34aa8baed.png&quot; width=&quot;1356&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;以上配置方式對於通用場景（如後台邏輯較為簡單的 CURD 頁面）或是特定的業務場景（如會場搭建）有較好的提效作用 。而對於需要不斷迭代邏輯相對複雜的需求來説，由於是通過圖形化操作的方式進行配置，對於交互設計要求較高，並且具備一定的上手成本，並且隨着需求的複雜度越來越高，配置表單交互越來越複雜，維護成本也越來越高。因此，頁面配置的方式前端領域的使用是相對&lt;strong&gt;剋制&lt;/strong&gt;的。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;AI 直接生成代碼&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;AI 生成代碼在工具函數場景下應用較多，但對於公司內部特定業務場景的需求，可能需要考慮以下幾點：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;生成定製化：&lt;/strong&gt;公司團隊內部有自己的技術棧與重型通用組件，需要將這些知識進行預訓練，目前對於長文本的預訓練內容僅支持單次會話注入，token 數消耗較高；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;準確度：&lt;/strong&gt;AI 生成代碼的準確度挑戰是比較大的，加上預訓練包含大段 prompt，因為代碼輸出的內容細節過多，加上模型幻覺，目前來看業務代碼的失敗率是較高的，而準確度是考量輔助編碼的核心指標，如果這一點無法解決，輔助編碼效果將大打折扣；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;生成內容殘缺：&lt;/strong&gt;由於 GPT 單次會話的存在限制，對於複雜需求，代碼生成有一定幾率被截斷，影響生成成功率。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;自然語言轉指令&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;GPT 其實還有個很重要的能力，那就是&lt;strong&gt;自然語言轉指令&lt;/strong&gt;，指令即行動，舉個例子：我們假設一個函數方法實現，輸入是自然語言，結合 GPT 與內置的 prompt，讓其穩定的輸出某幾個單詞，我們是不是就可以通過對這些單詞輸出做出進一步的行動？這相對於&lt;strong&gt;圖形化配置&lt;/strong&gt;有以下幾個&lt;strong&gt;優點&lt;/strong&gt;：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;學習門檻低：&lt;/strong&gt;因為自然語言本身就是人類的原生語言，你只需要根據你的想法描述頁面即可，當然描述的內容是需要遵循一些規範的，但相對於圖形化配置來説效率是有明顯提升的；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;複雜度黑盒：&lt;/strong&gt;圖形化配置的複雜度會隨着配置頁面複雜度的上升而上升，而這樣的複雜度會一覽無餘地展示在用戶面前，用戶可能會迷失在複雜的配置頁面交互中，配置成本逐步上升；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;敏捷迭代：&lt;/strong&gt;如果要在用戶端新增一個頁面配置功能，基於大模型的交互方式可能只需要新增幾個 prompt，但圖形化配置需要開發複雜表單以便於快速輸入。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;這裏大家可能會有個疑問：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;生成的指令信息不也會出現大模型幻覺嗎？如何保證每次生成指令信息是穩定且一致的呢？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;自然語言轉指令可行大致有以下幾個原因：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;由長文本轉關鍵信息屬於總結內容，大模型在總結場景下的準確度遠高於擴散型場景；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;由於指令信息只是提取需求中的關鍵信息，不需要做代碼技術棧上的預訓練，因此 prompt 存在很大的可優化空間，通過優化完善 prompt 內容可以有效提升輸出準確度；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;準確性可驗證，對於每一個場景不同表述需求輸入，可以通過單測預測輸出驗證準確性，當出現 badCase，我們在優化後針對該 badCase 接入單測。保證準確度不斷提高。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;讓我們來看最終的信息轉化結果：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;對於代碼輔助來説，基於用戶的需求描述，經過 PROMPT 處理，可以拿到這樣的信息。為代碼生成提供基礎信息。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1187&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-40d8202f2c6579aaf62af80dd1f85fec3da.png&quot; width=&quot;865&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_4&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;四、信息轉化為代碼&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;通過大模型拿到自然語言對應可編碼的信息（即上面例子中的 JSON）後，我們就可以基於這個信息轉化代碼了。對於一個有明確場景的頁面而言，一般情況下可分為主代碼模板（列表、表單、描述框架）+&amp;nbsp;業務組件。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;轉化流程&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1173&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-7a48ed8cf5e91801c2807f2642febcaab1b.png&quot; width=&quot;1507&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;我們如何開發代碼的？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;其實這一步很像我們自己開發代碼，我們拿到需求後，大腦中會提取其中的關鍵信息，即上方提到的&lt;strong&gt;自然語言轉指令&lt;/strong&gt;，然後我們會在 vscode 中創建一個文件，然後會進行以下操作：&lt;/p&gt; 
&lt;p&gt;首先一定是創建代碼模板，然後根據場景引入對應重型組件，如列表就引入 ProTable，表單就引入 ProForm。&lt;/p&gt; 
&lt;p&gt;基於 ProTable 等重型組件並向其中添加一些屬性，如 headerTitle、pageSize 等列表相關信息。&lt;/p&gt; 
&lt;p&gt;根據需求描述引入組件，比如識別到篩選項中存在類目選擇，會在 useColumns 新增業務組件，識別到需求描述中存在導入導出組件，會在頁面的指定位置新增導入導出業務組件。&lt;/p&gt; 
&lt;p&gt;拿到 mock 鏈接，新增請求層，在頁面指定位置引入。&lt;/p&gt; 
&lt;p&gt;對於以上常用的代碼插入場景都可以封裝進 JSON 中，然後通過代碼模板結合 AST 插入或字符串模板替換的方式生成對應代碼。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_5&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;五、源碼生成&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;定位&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;源碼輔助主要幫助開發者減少重複的工作，提升編碼效率，和低代碼頁面搭建屬於完全不同的賽道，低代碼重在特定場景下搭建完整的頁面，並且頁面功能數量是可枚舉的，業界低代碼搭建也有很優秀的實踐。而源碼輔助工具旨在幫助用戶儘可能多的初始化業務需求代碼，後面的修改維護在代碼層面交給用戶，提升新增頁面的開發效率。&lt;/p&gt; 
&lt;p&gt;具體的功能架構見下方：&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;574&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-10a3e7083fb654dbe05509ba7e826504583.png&quot; width=&quot;1208&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_6&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;六、組件向量搜索與嵌入&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;對於前端開發來説，提效的本質是少開發代碼，更快的頁面生成是一方面，良好的組件抽離是相當重要的一環，我們結合向量對組件的引入鏈路進行了優化，在初始化模板與存量代碼中快速搜索定位組件。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;組件向量引入鏈路&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;650&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1576ee8c75af651f89628fce11084f9812d.png&quot; width=&quot;1752&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;組件信息錄入&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;支持快速獲取組件的描述內容與組件引入範式，一鍵錄入組件，組件描述會轉化為向量數據存入向量數據庫。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;592&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ea11af01ef770e833806a26694aabff8066.gif&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;組件向量搜索&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;用戶輸入描述後，會將描述轉化為向量，基於餘弦相似度與組件列表進行比對，找到相似度最高的組件 TOP N。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;718&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-463882cffc8d66e44062e99010d5413e7b8.gif&quot; width=&quot;382&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;組件快速插入&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;用戶可以在存量代碼中快速通過描述搜索匹配度最高的組件，回車進行插入。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;660&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3d97928b4a52dc11c0a64eea5f606a1cbe9.gif&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_7&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;七、未來展望&lt;/strong&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;組件嵌入模板：&lt;/strong&gt;目前組件已支持向量搜索，通過結合源碼頁面生成，支持動態匹配組件並嵌入模板；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;存量代碼的編輯生成：&lt;/strong&gt;目前僅支持新增頁面的源碼生成，後續將支持存量頁面的局部代碼新增；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;代碼模板流水線：&lt;/strong&gt;AST 的代碼操作工具化，將自然語言與代碼寫入進一步打通，提升場景拓展效率。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&amp;nbsp;*文/&lt;/strong&gt;天意&lt;/p&gt; 
&lt;p&gt;本文屬得物技術原創，更多精彩文章請看：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Ftech.dewu.com&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;得物技術官網&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;未經得物技術許可嚴禁轉載，否則依法追究法律責任！&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/5783135/blog/11054744</link>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/11054744</guid>
            <pubDate>Thu, 25 Apr 2024 02:26:00 GMT</pubDate>
            <author>得物技術</author>
        </item>
        <item>
            <title>IBM 以 64 億美元收購 HashiCorp</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;IBM &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnewsroom.ibm.com%2F2024-04-24-IBM-to-Acquire-HashiCorp-Inc-Creating-a-Comprehensive-End-to-End-Hybrid-Cloud-Platform&quot; target=&quot;_blank&quot;&gt;宣佈&lt;/a&gt;將以每股 35 美元的現金收購雲基礎設施軟件供應商 HashiCorp，交易扣除現金後的企業價值為 64 億美元。該交易預計將於 2024 年底完成。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;公告稱，HashiCorp 的能力將為 IBM 在多個戰略增長領域帶來顯著的協同效應，包括 Red Hat、watsonx、數據安全、IT 自動化和諮詢領域。例如，紅帽的 Ansible 自動化平台的配置管理和 Terraform 的自動化的強大組合將簡化混合雲環境中應用程序的調配和配置。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;作為 IBM 的一部分，HashiCorp 預計將加速創新並加強其市場推廣、增長和貨幣化舉措。在上市和產品協同效應的推動下，該交易將加速 IBM 的增長。這種增長與運營效率相結合，預計將為收購的業務實現短期利潤率的大幅增長。預計該交易將在第一年內增加調整後的 EBITDA，並在第二年增加交易後的自由現金流。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;281&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-cd62178bd2b51a790a7d2e885d803b51e15.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前，IBM 和 HashiCorp 的董事會均已批准這項交易。收購尚需獲得 HashiCorp 股東的批准、監管部門的批准和其他常規成交條件。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;數據顯示，HashiCorp 共擁有 4400 多家客戶，包括彭博社、康卡斯特、德意志銀行、GitHub、摩根大通、星巴克和沃達豐等。HashiCorp 的產品在開發者社區得到廣泛採用，《財富》500 強中 85% 的公司都在使用 HashiCorp 的產品。在 HashiCorp 的 2024 財年，其基礎設施和安全方面的社區產品下載量超過 5 億次。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;IBM 主席兼首席執行官 Arvind Krishna 稱：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&quot;企業客戶正面臨着基礎設施和應用在公共雲、私有云以及內部環境中前所未有的擴張。全球圍繞人工智能的熱潮加劇了這些挑戰，首席信息官和開發人員的技術戰略面臨着巨大的複雜性。HashiCorp 在幫助客戶管理當今基礎架構的複雜性和應用程序的無序擴張方面有着良好的記錄。將 IBM 的產品組合和專業知識與 HashiCorp 的能力和人才相結合，將創建一個專為人工智能時代設計的全面混合雲平台。&quot;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289379/ibm-acquire-hashicorp-6-4-billion</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289379/ibm-acquire-hashicorp-6-4-billion</guid>
            <pubDate>Thu, 25 Apr 2024 02:10:12 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>開源日報 | 工業開源項目 OGG 1.0；姐姐，你要和我一起配置火狐嗎；蘋果 AI 遙遙落後？Fedora 40</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;歡迎閲讀 OSCHINA 編輯部出品的開源日報，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.4.24&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要點&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/289248/opengeometry-ogg-1-0-huawei&quot; target=&quot;_blank&quot;&gt;工業軟件大事件 —— OGG 1.0 發佈，華為貢獻全部源代碼&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;OpenGeometry Group (OGG) 是由數字化工業軟件聯盟 (英文譯名為「Digital Industrial Software Alliance」 ， 英文縮寫 「DISA」) 孵化，由開元幾何落地運營的開源項目。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;OGG 代碼倉庫已創建完成（目前 Fork 自 OCCT），託管在 Gitee：&lt;a href=&quot;https://gitee.com/opengeometry&quot;&gt;https://gitee.com/opengeometry&lt;/a&gt;。OCCT 是為特定領域快速開發程序而設計的面向對象的開源 C++庫，主要涵蓋 3D 幾何建模 (CAD)，製造/測量 (CAM) 或數值模擬 (CAE) 領域，可開發二維和三維幾何建模應用程序，包括通用的或專業的計算機輔助設計 CAD 系統、製造或分析領域的應用程序、仿真應用程序或圖形。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;OGG 1.0（OGG 2024.4 Preview Beta）版本已在 Open Geometry 開源社區官網發佈並開啓公測：&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopengeometry.cn%2Fhome%2Findex&quot; target=&quot;_blank&quot;&gt;https://opengeometry.cn/home/index&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/289206/apple-corenet&quot; target=&quot;_blank&quot;&gt;蘋果開源 CoreNet：一個用於訓練深度神經網絡的庫&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;蘋果公司開源了一個用於訓練深度神經網絡的庫 CoreNet。允許研究人員和工程師訓練標準和新型的小型和大型模型，以完成各種任務，包括基礎模型（如 CLIP 和 LLM）、對象分類、對象檢測和語義分割。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;CoreNet 基於 CVNet 演變而來，涵蓋計算機視覺之外更廣泛的應用。該公司聲稱，CoreNet 的擴展促進了包括 LLM 在內的基礎模型的訓練。&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;CVNets 是蘋果公司在去年開源的一個計算機視覺工具包，允許研究人員和工程師為各種任務訓練標準和移動 / 非移動計算機視覺模型，包括對象分類、對象檢測、語義分割和基礎模型（例如，CLIP）。&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/289194/fedora-linux-40&quot; target=&quot;_blank&quot;&gt;Fedora Linux 40 正式發佈&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;主要變化包括：升級桌面環境、增加 AI 開發工具，以及更新軟件包。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Fedora Workstation 默認使用最新的 GNOME 46 桌面環境，KDE Spin 版本搭載 KDE Plasma 6，並默認使用 Wayland。此外，Fedora 還正式恢復了 「Fedora Atomic Desktop」 品牌，用於所有使用 ostree 或基於鏡像的配置的變體。Fedora Linux 40 還首次提供了 PyTorch 軟件包，這是一個用於深度學習的流行框架。此外，還提供了用於 AMD 顯卡加速支持的 ROCm 6 軟件。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Fedora Linux 40 還更新了大量軟件包，包括編譯器和庫的更新，這些更新帶來了 bug 修復、安全改進和性能提升。這次發佈還包括了來自數千個上游項目的最新開源軟件版本的集成。&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/289216/qemu-9-0-0-released&quot; target=&quot;_blank&quot;&gt;QEMU 9.0 發佈&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;跨架構全系統模擬器 QEMU 正式發佈 v9.0.0，主要新特性包括：virtio-blk 支持多隊列；使用多線程同時處理內存後端預分配；支持 mapped-ram 功能允許更高效的虛擬機快照；龍芯的 LoongArch 架構支持 KVM 加速，包括 LSX/LASX 矢量擴展；改進 RISC-V 支持，等等。&lt;/p&gt; 
&lt;p&gt;QEMU 項目由 Fabrice Bellard 創建，最初設想在非 x86 平台上運行 x86 Linux 二進製程序，隨後轉變成跨架構的全系統模擬器。&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日觀察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交觀察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2557120465%2FOb4krsKmS&quot; target=&quot;_blank&quot;&gt;OGG 1.0 開源幾何建模引擎面世，是我國工業能力軟實力提升的重要體現&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;全球造汽車的國家有十幾個，造航空發動機的國家有五六個，而造幾何建模引擎的國家不過三四個！曾幾何時，人們把航空發動機比喻為皇冠上的明珠。更稀缺的皇冠明珠其實是幾何建模引擎。看不見、摸不着，無比重要——沒有幾何建模引擎，就沒有工業軟件，就沒有新型工業化發展。如果我國真的與對手發生全方位、多領域、多形態戰爭，幾何建模引擎有可能會變成一種制裁「武器」。&lt;/p&gt; 
   &lt;p&gt;華為在這個事情上起到主導作用，華為將所掌握的全部 OCCT 源代碼和 486 項增強，貢獻給 OGG 社區。從此源代碼社區在手，幾何建模引擎無憂。&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;機工戰略&lt;/strong&gt;&lt;/p&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1727858283%2FOb5TlojZn&quot; target=&quot;_blank&quot;&gt;AI 研究者更偏愛開源項目而不是閉源的商業模式&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;OpenAI 擁有 20 億美元的收入，但可能賺得並不多。而 Meta 的毛利潤超過了 1000 億美元，他們在計算資源和人才投入上可能是 OpenAI 的十倍。而且，很多 AI 研究者更偏愛開源項目而不是閉源的商業模式，這意味着 Meta 可能會吸引更多頂尖人才。相對而言，谷歌還在為 AI 技術可能衝擊其主要營收渠道而猶豫，不太可能全力以赴像 Meta 那樣投入。&lt;/p&gt; 
   &lt;p&gt;在這一切中，應用開發者可能是最大的受益者。你可以選擇託管 Llama 3 的任何 API 服務，或者按照自己的規則來自行託管。&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;寶玉 xp&lt;/strong&gt;&lt;/p&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1727858283%2FOb2igvMkh&quot; target=&quot;_blank&quot;&gt;Mistral 入門指南&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;在《Mistral 入門指南》課程中，由 Mistral 的 Sophia Yang, Ph.D. 主講，你將會瞭解到：&lt;/p&gt; 
   &lt;p&gt;- 通過 API 調用及 Mistral AI 的 Le Chat 網站，探索 Mistral 的開源模型（Mistral 7B、Mixtral 8x7B）及商業模型。&lt;br&gt; - 實施 JSON 模式來生成可直接融入大型軟件系統的結構化輸出。&lt;br&gt; - 學習如何使用函數調用進行工具操作，比如使用自定義 Python 代碼查詢表格數據。&lt;br&gt; - 將你的大語言模型（LLM）的響應與外部知識源結合，使用 RAG 技術增強實用性。&lt;br&gt; - 創建一個可以參照外部文檔的 Mistral 驅動聊天界面。&lt;/p&gt; 
   &lt;p&gt;本課程將助力提升你的提示工程能力。&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;寶玉 xp&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6503323978%2FObcwdolB7&quot; target=&quot;_blank&quot;&gt;《姐姐，你要和我一起配置火狐嗎》&lt;/a&gt;&lt;/h4&gt; 
  &lt;h4&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6f18ca12c9faec1d99438dd00fb8c3f18b1.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/h4&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;一口一個瑪麗酥&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒體觀察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F86XnP3h6Md92tWD-knUUqg&quot; target=&quot;_blank&quot;&gt;李彥宏説開源模型會越來越落後，為什麼很多人不認同？&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;開源與閉源並非一個單選題，很多公司都採用了開源與閉源雙輪驅動的戰略，比如智譜 AI、百川智能、零一萬物等等。&lt;/p&gt; 
 &lt;p&gt;王小川就認為，從 to B 角度，開源閉源其實都需要。未來 80% 的企業會用到開源的大模型，因為閉源沒有辦法對產品做更好的適配，或者成本特別高，閉源可以給剩下的 20% 提供服務。二者不是競爭關係，而是在不同產品中互補的關係。」&lt;/p&gt; 
 &lt;p&gt;不論開源還是閉源，大模型商業化面臨的根本問題是，如何降低推理成本。只有降低了推理成本，大模型才有可能真正大規模落地。&lt;/p&gt; 
 &lt;p&gt;今天，開源與閉源陣營分別有自己的支持者。但如果參考 iOS 與安卓操作系統的發展軌跡來看，彼此之間的良性競爭大大促進了產品的迭代與用戶體驗的升級。這才是開閉源之爭最終的價值。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;甲子光年&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8Z2Gc8ZNWN7&quot; target=&quot;_blank&quot;&gt;6000 億參數的商湯多模態大模型發佈，性能超越 GPT-4 Turbo&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;4 月 23 日下午，人工智能（AI）上市公司商湯科技在上海發佈「日日新 SenseNova」5.0 多模態大模型系列，採用混合專家（MoE）架構，支持多達 10T Tokens 中英文與訓練數據，推理合成數據高達數千億 Token，推理時上下文窗口可以有效到 200K 左右，擁有端側擴散和語言模型，知識、推理、數學、代碼等綜合能力全面對標 GPT-4 Turbo。&lt;/p&gt; 
 &lt;p&gt;商湯科技董事長兼 CEO 徐立表示，在尺度定律（Scaling Law）的準則下，商湯持續推動自身大模型研發，會持續探索大模型能力的 KRE 三層架構（知識-推理-執行），不斷突破大模型能力邊界。&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;鈦媒體&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.pingwest.com%2Fa%2F294361&quot; target=&quot;_blank&quot;&gt;蘋果 AI，遙遙落後？&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;據 Mark Gurman 爆料，蘋果正在研發一種端側大模型，併兼顧運算速度和隱私保護能力。這也意味着將來 iPhone 的 AppleGPT 語音助手將會完全在設備本地運行，無需將請求發送到雲端，同時也能保證用戶的隱私安全。&lt;/p&gt; 
 &lt;p&gt;只是這也衍生出來了一個問題，如果 AppleGPT 不上雲，那麼它如何獲取當前最新的信息呢？還是説升級後的 Siri 只是能力範圍更強，仍然無法跟上瞬息萬變的互聯網？假如所有設備的 Siri 能夠同步升級，那麼在 Vision Pro 上又能有什麼不同？&lt;/p&gt; 
 &lt;p&gt;而這一切，或許都將在 6 月的 WWDC 中得到解答。&lt;/p&gt; 
 &lt;p&gt;最後一個問題，如果蘋果有在芯片上改名的習慣，那麼得到 AI 加強的 iPhone 會不會改名 AIPhone 呢？&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;- &lt;strong&gt;品玩&lt;/strong&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推薦&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;開源項目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopen5gs%2Fopen5gs&quot; target=&quot;_blank&quot;&gt;open5gs/open5gs&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;300&quot; src=&quot;https://static.oschina.net/uploads/space/2023/0427/224739_hG2x_12.jpg&quot; width=&quot;418&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopen5gs%2Fopen5gs&quot; target=&quot;_blank&quot;&gt;https://github.com/open5gs/open5gs&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;Open5GS 是一個開源 5G 核心網的實現。Open5GS 包含一系列軟件組件和網絡功能，實現 4G / 5G NSA 和 5G SA 核心功能。&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/u/3808186/blog/11054097&quot; target=&quot;_blank&quot;&gt;從 0 到 1：社區論壇小程序開發筆記&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;論壇小程序：為用戶提供了一個社交互動的平台，使用戶可以分享經驗、交流觀點、解決問題，促進社區成員之間的互動和交流。 用戶可以在論壇小程序上發佈有關各種話題的帖子，分享自己的知識、經驗和見解，幫助其他用戶獲取信息和解決問題。 用戶可以通過參與論壇討論，擴展自己的知識面，學習他人的經驗和見解，促進個人成長和進步。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;891&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-2f4f9cd27b5766011f1642ee6f8753950e3.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;div&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;事件點評&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289272/us-china-risc-v-risk&quot; target=&quot;_blank&quot;&gt;路透社：美國正在審查中國使用 RISC-V 芯片技術的風險&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;路透社&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reuters.com%2Ftechnology%2Fus-is-reviewing-risks-chinas-use-risc-v-chip-technology-2024-04-23%2F&quot; target=&quot;_blank&quot;&gt;消息稱&lt;/a&gt;，美國商務部正在審查中國在開源 RISC-V 芯片技術方面的工作對其國家安全的影響。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;來自美國國會參眾兩院的 18 名議員曾在去年向拜登政府施壓，要求其制定計劃，阻止中國 「在 RISC-V 技術領域取得主導地位」。而路透社在日前所看到一封 「致美國立法者的信」 中，美國商務部則表示，正在 「努力審查潛在風險，並評估商務部門是否採取適當行動來有效解決任何潛在問題。」&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;但美國商務部也指出，需要謹慎行事，避免損害隸屬於從事 RISC-V 技術的國際組織的美國公司。因為其此前對中國 5G 技術的管制措施，就給相關的美國公司造成了障礙。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;223&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-17e31c2a4f62c83a771874fdf6b84dc32eb.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;點評&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2328; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;美國對中國在 RISC-V 芯片技術方面的審查和可能的限制措施，對全球科技產業和國際關係產生了廣泛影響：&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;中美科技競爭加劇&lt;/strong&gt;：這一事件凸顯了中美在科技領域的競爭，特別是在半導體技術方面。美國對中國的審查和潛在限制，反映了兩國在技術領先地位上的競爭。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;全球半導體產業影響&lt;/strong&gt;：RISC-V 作為一種開放標準，其發展對全球半導體產業具有重要意義。任何限制措施都可能影響全球芯片技術的發展和創新。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;國際合作與開源文化&lt;/strong&gt;：RISC-V 的開放性和國際合作性質使其成為全球技術合作的典範。美國對 RISC-V 的限制可能對全球創新和開源文化產生負面影響。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;中國半導體產業的發展&lt;/strong&gt;：中國在 RISC-V 的採納方面處於領先地位，任何限制措施都可能加速中國在半導體技術領域的自主研發。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;全球供應鏈和安全問題&lt;/strong&gt;：RISC-V 技術的國際應用和合作對全球供應鏈的穩定和安全至關重要。限制措施可能加劇供應鏈的不確定性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;國際關係和地緣政治&lt;/strong&gt;：這一事件不僅涉及科技競爭，還可能影響國際關係和地緣政治格局，特別是在半導體技術日益成為國際競爭焦點的背景下。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289213/give-up-open-source&quot; target=&quot;_blank&quot;&gt;我決定放棄開源&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Simon Hofmann 是開源 UI 自動化 / 測試工具&amp;nbsp;nut.js 的核心開發者和創始人。近日他發表文章《I&#39;m giving up — on open source》討論了對開源項目可持續性和收費的看法。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Simon 在博客中提到，他一直對開源項目持有積極的態度，但最終決定收費是因為他在開發新插件時投入了大量時間和金錢，並且遇到了一些不愉快的經歷。他認為開源項目的維護者也應該得到應有的回報，而不應該被指責為追求金錢。他還表示，他將繼續維護 nut.js，但會對新功能和更新進行延遲發佈，並且決定對部分功能進行收費。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;249&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a05c0fe349ab06e5c5aec45bd31c8e3caf8.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;點評&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;這一決定反映了開源社區中一個長期存在的問題：開源項目的維護者往往得不到應有的回報。開源項目的維護者通常需要投入大量的時間和精力，但他們往往得不到足夠的回報。這可能導致他們在經濟壓力下放棄開源項目，轉向收費項目。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;這對開源社區來説是一個挑戰，因為它可能導致一些優秀的開源項目無法得到持續的維護和發展。Hofmann 的決定也揭示了開源社區的一些矛盾，如用戶對開源項目的期望與維護者能力的匹配問題，以及開源項目如何平衡社區貢獻和商業利益。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;這個事件提醒我們，儘管開源項目為我們帶來了很多好處，但我們也不能忽視開源項目維護者的付出。我們需要找到一種平衡，既能享受到開源項目帶來的好處，又能確保開源項目的可持續性。&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289258/mozilla-rust-crash-reporter&quot; target=&quot;_blank&quot;&gt;Mozilla 用 Rust 重寫 Firefox 的崩潰報告程序&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Mozilla 正在用 Rust 編程語言重寫 Firefox 的崩潰報告程序。Mozilla 工程師 Alex Franchuk 在 Mozilla Hacks 上撰文，詳細介紹了他們如何使用 Rust 編程語言將崩潰報告器重寫為跨平台 GUI 應用程序。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;雖然時至今日 Firefox 崩潰的情況已經有所減少，但 Mozilla 工程師認為，重寫崩潰報告程序對深入瞭解崩潰情況非常重要。由於現有的崩潰報告器錯誤庫 &quot;困難且容易出錯&quot;，他們決定用 Rust 進行重寫。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e8281052fa3bed36c8e1fff522c982932ca.png&quot; width=&quot;416&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;點評&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;這一舉措反映了 Mozilla 對提高軟件質量和性能的持續關注。Rust 語言以其內存安全和併發能力而聞名，這可能有助於改善崩潰報告程序的穩定性和可靠性。通過使用 Rust，Mozilla 能夠創建一個更加健壯和跨平台的崩潰報告程序，這對於用戶和開發者來説都是一個積極的進步。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;它將有助於提高 Firefox 的穩定性和安全性，優化錯誤處理，增強跨平台兼容性，並提升用戶體驗。此舉也再次證明瞭 Rust 在現代軟件開發中的重要地位，並展示了開源社區對新興技術的接受和使用，鼓勵其他項目考慮採用 Rust。&lt;/span&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;開源之聲&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒體觀點&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F3g.k.sohu.com%2Ft%2Fn784866654&quot; target=&quot;_blank&quot;&gt;蘋果 16 或將取消實體按鍵上熱搜，新機能否拯救銷量滑坡局面&lt;/a&gt;&lt;/h4&gt; 
&lt;p style=&quot;color:#1a1a1a; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;在手機行業更新換代快、在用戶換機動力不足的背景下，AI 大模型將成為手機廠商競爭的重要利器，同時也將成為提升未來銷量預期的關鍵技術手段。而生成式人工智能的出現已經促使中國手機品牌廠商將此類功能集成到其旗艦設備中，而蘋果在這方面似乎已經落後。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;南方都市報&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.huxiu.com%2Farticle%2F2943255.html&quot; target=&quot;_blank&quot;&gt;AI 風口吹不起科大訊飛&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#27282d; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;自 ChatGPT 發佈後，全球掀起了一股 AI 大模型的盛宴。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#27282d; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;雷軍曾説過，「站在風口，豬都能飛起來」。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#27282d; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;如果，雷軍説的不是假話；那麼，科大訊飛該好好思考為何沒有飛起來。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#27282d; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;4 月 22 日，科大訊飛已經發布了 2023 年年報，業績低於預期。在 AI 爆發的 2023 年，科大訊飛為何沒有進入高速增長的快車道呢？&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;妙投 APP&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.com.cn%2Farticle_6105713761_16bedcc61020019lu4.html&quot; target=&quot;_blank&quot;&gt;月之暗面成立一年估值 180 億，創始人被曝套現數千萬美金，公司迴應：消息不實&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;紅星資本局 4 月 24 日消息，有報道稱，人工智能初創公司月之暗面（Moonshot AI）創始人楊植麟通過售出個人持股已套現數千萬美金，「創始人及相關人員套現金額在 4000 萬美金。」&lt;/p&gt; 
&lt;p&gt;同時，還有市場傳言稱，曾參與投資過楊植麟首個創業項目「循環智能」的前金沙江創投管理合夥人張予彤已從金沙江創投離職，將加入月之暗面。&lt;/p&gt; 
&lt;p&gt;對於上述兩則傳言，月之暗面迴應稱，創始人套現的消息不實，月之暗面此前已公佈員工激勵計劃；張予彤並未入職月之暗面。&lt;/p&gt; 
&lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;紅星新聞&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F694157001&quot; target=&quot;_blank&quot;&gt;算力不足，小模型成 AI 模型發展下個方向？&lt;/a&gt;&lt;/h4&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;大模型不是 AI 的唯一出路，把模型做小也是本事。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;顯然，如果持續「大力出奇跡」，通過堆砌參數量來實現 AI 性能的提升，那麼以上這些問題遲早會遇到，但是如果把大模型做小，使用較小的參數量，實現同樣或者更好的性能，那麼將可以顯著減少對算力資源的需求，進而減少對電力資源的消耗，從而讓 AI 在有限資源的情況下，得到更好的發展。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;因此，接下來，誰能在將模型做小的同時，還能實現性能的增長，也是實力的體現。&lt;/span&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;新火種&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用戶觀點&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FuFBGnuXiNMHiemtfzvE8gw&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;華為將鴻蒙操作系統推向全球&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：自己做沒問題，但 tree new bee 譁眾取寵，就不對了，鴻蒙內核超越傳統內核，鴻蒙系統是真正的操作系統，從編程語言到編譯器都是全棧自研。吹的自己都信了&lt;/span&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 2：不知道你們在嘲笑啥&lt;img alt=&quot;[臉紅]&quot; src=&quot;https://res.wx.qq.com/mpres/zh_CN/htmledition/comm_htmledition/images/pic/common/pic_blank.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;，我們目前正在接入鴻蒙 5.0，雖然目前還在開發中，但有一説一，鴻蒙 Next 設計還是很不錯的。&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 3：沒有嘲笑，兩句話就把發展計算機這麼多年的精粹給否定了，超越傳統內核，真正的，也就説老子天下第一，其他的都不是系統，我才是真正的，全面超越，語言，編譯器都是自研，秒殺一切，是吧，殊不知，語言是基於 ts 編譯器是基於 llvm 至於內核嘛，也是基於 rtos 的，誇大宣傳，太離譜了&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 4：國外的軟件是否跟進才是關鍵&lt;/span&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 5：國內全面跟進才是關鍵&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 6：華為手機在國外的市佔率才多少？有多少海外開發者願意花更多成本為你這點用戶量專門進行適配？海外不像國內，沒人把你當回事&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 7：估計會很難，加油吧&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 8：會不會又是下一個 WP，全靠國內人口基數大優勢來玩………徹底不支持安卓 APP 的話，為啥還要用華為？不然怎麼刷 IG 和 X、tiktok、TG………&lt;/span&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 9：跟 WP 不同，WP 是純屬自己作死。&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 10：不管怎麼樣，先嚐試一把，萬一成功了呢&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 11：有興趣接觸一下 Harmony Next 但是請問：我可以用現有的手機，或者電腦裏安裝這個功能系統嗎？我沒有資金再去買新的硬件。期待大佬們的解疑，謝謝！&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 12：這個應該向小米初發家時的策略學習，組建專門團隊和發燒友愛好者一起，對那些常見的第三方品牌手機進行系統移植，讓更多第三方手機可以在非官方情況下用上&lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289194/fedora-linux-40&quot; target=&quot;_blank&quot;&gt;Fedora Linux 40 正式發佈&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：下游企業版又可以升級一波了！！！&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 2：很多非本行業的人都不知道它準時發佈，不跳票意味着什麼……&lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289216/qemu-9-0-0-released&quot; target=&quot;_blank&quot;&gt;QEMU 9.0 發佈&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：支持 QEMU，是沒錢買 RISCV 板子又想在上面寫玩具 OS 的窮程序員的福音&lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;程序員梗圖&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;內存回收（物理版）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-fb082b05114e07a4b16bed404f7b9417b0f.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em style=&quot;font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif&quot;&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最後，歡迎掃碼下載「開源中國 APP」，閲讀海量技術報告、程序員極客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289306</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289306</guid>
            <pubDate>Wed, 24 Apr 2024 11:28:25 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>華為輸入法不上傳用戶輸入內容至雲端</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;加拿大多倫多大學公民實驗室 (CitizenLab) 的研究人員分析了&lt;strong&gt;百度、榮耀、華為、訊飛、OPPO、Vivo、三星、騰訊、小米&lt;/strong&gt;九家廠商的雲輸入法，發現八家輸入法軟件包含嚴重漏洞，允許研究人員完整破解廠商設計用於保護用戶輸入內容的加密法。還有&lt;strong&gt;部分廠商並未使用任何加密法保護用戶輸入內容&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-f5080677c6f4c4cc7cfd1c09ceea8fd5374.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;▲ 百度 IME 在 Android 和 iOS 上使用的 BCTR 模式加密方案示意圖&lt;/p&gt; 
&lt;p&gt;研究人員向受影響的九家開發商提交了漏洞報告，大部分開發商均認真看待問題並予以迴應，修補了漏洞，但仍有少數輸入法未修補漏洞。&lt;/p&gt; 
&lt;p&gt;在測試的九家廠商的應用程序中，僅有&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#e67e22&quot;&gt;華為的產品未發現任何上傳用戶輸入內容至雲端&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;相關的安全問題，其餘每一家廠商都至少有一個應用程序含有漏洞，使得被動型網絡攻擊者得以監看用戶輸入的完整內容。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-5d3b9577a75ce1cf91a4859bccd729a4880.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;參考鏈接&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcitizenlab.ca%2F2024%2F04%2Fvulnerabilities-across-keyboard-apps-reveal-keystrokes-to-network-eavesdroppers%2F&quot; target=&quot;_blank&quot;&gt;https://citizenlab.ca/2024/04/vulnerabilities-across-keyboard-apps-reveal-keystrokes-to-network-eavesdroppers/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcitizenlab.ca%2F2024%2F04%2F%25e6%2595%25b2%25e6%2595%25b2%25e6%2589%2593%25e6%2589%2593%25e4%25b8%2580%25e7%25b3%25bb%25e5%2588%2597%25e4%25ba%2591%25e7%25ab%25af%25e8%25be%2593%25e5%2585%25a5%25e6%25b3%2595%25e6%25bc%258f%25e6%25b4%259e%25e4%25bd%25bf%25e7%25bd%2591%25e7%25bb%259c%25e6%2594%25bb%25e5%2587%25bb%25e8%2580%2585%25e5%25be%2597-zh-cn%2F&quot; target=&quot;_blank&quot;&gt;https://citizenlab.ca/2024/04/%e6%95%b2%e6%95%b2%e6%89%93%e6%89%93%e4%b8%80%e7%b3%bb%e5%88%97%e4%ba%91%e7%ab%af%e8%be%93%e5%85%a5%e6%b3%95%e6%bc%8f%e6%b4%9e%e4%bd%bf%e7%bd%91%e7%bb%9c%e6%94%bb%e5%87%bb%e8%80%85%e5%be%97-zh-cn/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcitizenlab.ca%2Fwp-content%2Fuploads%2F2024%2F04%2FCitizenLabReport175-keyboardvuln.pdf&quot; target=&quot;_blank&quot;&gt;https://citizenlab.ca/wp-content/uploads/2024/04/CitizenLabReport175-keyboardvuln.pdf&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289288</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289288</guid>
            <pubDate>Wed, 24 Apr 2024 09:36:55 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>拼多多因不正當競爭被判賠償 500 萬元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;根據封面新聞的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.cn%2Ftech%2F2024-04-24%2Fdetail-inasxkkw7856800.d.html&quot; target=&quot;_blank&quot;&gt;報道&lt;/a&gt;，拼多多涉不正當競爭糾紛敗訴，被判賠償 500 萬元。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-7067418aa142659c588b68b8aec1ec0c228.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;以下為報道原文。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;近日，浙江省高院對菜鳥網絡訴拼多多不正當競爭案作出終審判決，駁回拼多多上訴，維持一審法院判決，並賠償菜鳥網絡經濟損失及及合理維權費用 500 萬元。&lt;/p&gt; 
&lt;p&gt;根據判決書，此案是兩家企業在快遞物流領域不正當競爭的二審案件，涉訴雙方均為互聯網相關領域的重要企業。庭審中，法院認定了該案的三大焦點：菜鳥網絡是否就本案末端物流系統的競爭性權益享有訴權；其訴請的三項不正當競爭行為適用的相關法律條例是否成立；如構成上述不正當競爭行為，拼多多應承擔的法律責任。&lt;/p&gt; 
&lt;p&gt;法院審理查明，拼多多電商平台向消費者提供的「自提點」名稱、圖示中出現「菜鳥」「菜鳥驛站」的標識，在網頁版「拼多多快遞代收」以及「拼多多門店端」APP 中所用的門店名稱中、在「拼多多」門店交接單中均有使用了「菜鳥驛站」「菜鳥」標識。&lt;/p&gt; 
&lt;p&gt;根據判決書中的審查分析，本案中拼多多作為同業競爭者，通過對抗性的業務推廣實質入駐菜鳥網絡已簽約的加盟門店，在明知「菜鳥驛站」加盟現狀的情況下悄然入駐開展同業經營，實質性侵佔了菜鳥網絡已有的可合理期待的競爭優勢，由此不正當地增加了自身的交易機會和業務收入，也造成了菜鳥網絡額外的經營損失，明顯有失誠信，屬於違反商業道德、造成競爭秩序損害的行為。&lt;/p&gt; 
&lt;p&gt;判決書中顯示，菜鳥網絡及相關公司主張的競爭性財產權益為菜鳥系統，是物流業務的末端系統，為快遞包裹從「快遞公司」 到消費者「最後一公里」提供解決方案。快遞末端網點作為末端物流企業業務流程中的關鍵資源，是末端物流產業經營者的核心競爭力所在。拼多多的部分行為構成反不正當競爭法第六條的混淆行為，該行為事實上不當增強了其競爭優勢，並造成了菜鳥網絡的競爭優勢受損。&lt;/p&gt; 
&lt;p&gt;最終，法院宣佈駁回拼多多的上訴請求，維持一審法院判決。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289285</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289285</guid>
            <pubDate>Wed, 24 Apr 2024 09:27:55 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>路透社：美國正在審查中國使用 RISC-V 芯片技術的風險</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;路透社&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reuters.com%2Ftechnology%2Fus-is-reviewing-risks-chinas-use-risc-v-chip-technology-2024-04-23%2F&quot; target=&quot;_blank&quot;&gt;消息稱&lt;/a&gt;，美國商務部正在審查中國在開源 RISC-V 芯片技術方面的工作對其國家安全的影響。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;來自美國國會參眾兩院的 18 名議員曾在去年向拜登政府施壓，要求其制定計劃，阻止中國「在 RISC-V 技術領域取得主導地位」。而路透社在日前所看到一封「致美國立法者的信」中，美國商務部則表示，正在「努力審查潛在風險，並評估商務部門是否採取適當行動來有效解決任何潛在問題。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;但美國商務部也指出，需要謹慎行事，避免損害隸屬於從事 RISC-V 技術的國際組織的美國公司。因為其此前對中國 5G 技術的管制措施，就給相關的美國公司造成了障礙。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;532&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-17e31c2a4f62c83a771874fdf6b84dc32eb.png&quot; width=&quot;1191&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前尚不清楚美國政府可能甚至可以採取什麼行動。此舉的潛在有效性存在爭議，且開源社區對美國的這一做法也不甚感冒。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;去年 10 月，在多名美國政客以國家安全為由，敦促拜登政府對 RISC-V 採取行動，呼籲拜登政府對 RISC-V 相關技術的出口實施限制時。RISC-V 國際基金會 CEO Calista Redmond 曾發文表示，RISC-V 是一個開放標準，吸收了來自世界各地的有意義的貢獻。作為全球標準，RISC-V 不受任何單一公司或國家的控制。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;並強調，RISC-V 為世界各地的公司帶來了參與快速增長的半導體領域的巨大潛力。限制公司、代工廠、政府和研究機構採用 RISC-V 將使他們無法從自己資助和創建的開放標準中受益，同時讓全球競爭對手在自己的實施中領先。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;相關閲讀：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:start&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/260839/us-china-tech-war-risc-v&quot; target=&quot;_blank&quot;&gt;路透社：RISC-V 技術成為中美科技戰的新戰場&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:start&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/261262/risc-v-enable-open-computing-for-all&quot; target=&quot;_blank&quot;&gt;RISC-V：不受任何單一公司或國家的控制&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289272/us-china-risc-v-risk</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289272/us-china-risc-v-risk</guid>
            <pubDate>Wed, 24 Apr 2024 08:10:02 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>殺死谷歌搜索的人</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;這是關於谷歌搜索如何消亡，以及那些對其死亡負有責任的人的故事。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-dd53d8414e35a078aae4c45fc54f85558a4.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;故事始於 2019 年 2 月 5 日，當時谷歌搜索主管本·戈麥斯 (Ben Gomes) 遇到了問題。時任 Google 廣告副總裁兼總經理的 Jerry Dischler 和時任 Google 工程、搜索和廣告副總裁的 Shiv Venkataraman，由於「日常數字的穩定下降」，以及可能會使季度業績大幅落後的可能性，他們發起了一個「黃色代碼」警報搜索收入。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.justice.gov%2Fusdoj-media%2Fatr%2Fmedia%2F1322631%2Fdl%3Finline%3D%26ref%3Dwheresyoured.at&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;在作為美國司法部針對谷歌反壟斷案件一部分而公開的電子郵件中，Dischler 列出了幾個影響因素——搜索查詢增長「遠低於預期」，「收入啓動」的「時機」也明顯落後，以及對「搜索中存在幾個特定廣告商和行業弱點」的模糊擔憂。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;我應該指出，我以前——錯誤地——將「黃色代碼」稱為是戈麥斯提出的一種方式，用以引起人們對谷歌廣告業務與搜索業務過於接近的關注。&lt;/p&gt; 
 &lt;p&gt;事實要嚴峻得多——黃色代碼是腐經濟體的動盪，谷歌的收入部門拉響警報，稱其搖錢樹下的金蛋產量不足。戈麥斯，一個在谷歌工作了 19 年，為現代搜索引擎打下基礎的人，應該被視為科技界少數幾個真正為原則而戰的人之一，而被管理諮詢派系的計算機科學家級叛徒普拉巴卡爾·拉格哈萬所破壞和取代。&lt;/p&gt; 
 &lt;p&gt;更令人困惑的是，問題之一是「查詢」增長不足，即人們向谷歌提出的問題量不夠。這有點像福特決定事情進展不佳是因為司機們沒有讓他們的卡車行駛足夠的里程。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;總之，在 2019 年 2 月 1 日前的幾天，谷歌當時的商業財務副總裁 Kristen Gil 通過電子郵件向谷歌當時的工程副總裁、搜索和發現部門的 Shashi Thakur 表示，廣告團隊一直在考慮啓動「黃色代碼」以「彌合所看到的搜索差距」，含糊地提到這種增長對一項未具名的「公司計劃」至關重要。&lt;/p&gt; 
&lt;p&gt;明確一點，這封電子郵件是迴應 Thakur 所説的搜索團隊「無能為力」，以滿足廣告部門所要求的高增長精度。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;沙希將電子郵件轉發給戈麥斯，詢問是否有可能與谷歌首席執行官桑達爾·皮查伊討論此事，並宣稱他不可能簽署一項關於搜索的日活躍用戶「高保真」業務指標。塔庫爾還説了一些事情，自從我讀了這些電子郵件以來，我一直在思考：谷歌的創始人將搜索與廣告分開是有充分理由的。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;在 2019 年 2 月 2 日，僅僅過了一天，Thakur 和 Gomes 與谷歌搜索和谷歌助手的副總裁 Nick Fox 分享了他們的焦慮，展開了一場長達數日的關於谷歌突然追求增長的辯論。這個討論線索是瞭解以增長為導向的科技世界的一扇黑暗窗口，Thakur 在其中列出了廣告和搜索團隊之間的多個脫節點，討論了搜索團隊如何在不受「破解參與度」（指有效地誘使用戶在網站上花費更多時間）的情況下無法精細優化谷歌的參與度，這樣做會導致他們「放棄對高效旅程的工作」。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;在一封電子郵件中，Fox 補充説，金融和廣告部門想要的與搜索部門正在做的之間存在「相當大的脫節」。當戈梅斯對多次增長請求提出反對時，福克斯補充説，他們三人都要對搜索負責，搜索是「公司的收入引擎」，並且與廣告和財務團隊的討價還價可能是「他們工作的新現實」。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;2019 年 2 月 6 日，戈梅斯表示，他認為搜索業務「&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.justice.gov%2Fd9%2F2023-11%2F417581.pdf%3Fref%3Dwheresyoured.at&quot; target=&quot;_blank&quot;&gt;離錢太近&lt;/a&gt;」，並在郵件結尾表示，他擔心谷歌只關心增長。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;2019 年 3 月 22 日，谷歌產品管理副總裁 Darshan Kantak 宣佈結束「黃色代碼」。該貼主要由祝賀電子郵件組成，直到 Gomes 迴應祝賀團隊，並表示作為代碼一部分的計劃將在全年內表現良好。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;普拉巴卡爾·拉格哈萬，當時谷歌廣告部門的負責人，也是代碼黃色背後的真正策劃者，迴應簡短地説，目前的收入目標是通過「英勇的 RPM 工程」來解決的，並且「核心查詢的軟化持續沒有緩解」——這是一種非常笨拙的説法，意思是儘管這些變化，查詢增長並未發生。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;一天後，戈梅斯給福克斯和塔庫爾發了一封他打算髮給拉加萬的郵件。他在一封長郵件中開頭説，他「既個人感到煩惱，也代表搜索團隊感到煩惱」。在郵件中，他解釋瞭如何提高與谷歌搜索的互動度，但特別提到，他們可以「在短期內以用戶負面方式相當容易地增加查詢量」，比如關閉拼寫糾正、關閉排名改進，或者在頁面上到處放置精煉項——實際上是標籤——並補充説，「這裏可能存在不同類型用戶負面情緒之間的權衡，由互動破解引起」，他「非常非常不舒服這一點」。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;他還補充説，這就是他不認為查詢是衡量搜索的好指標的原因，最好的防禦就是創造「吸引用戶回來的令人信服的用戶體驗」。在 2019 年 3 月的核心搜索更新中，大約在代碼黃色結束前一週發生，預計這將是「很長一段時間內最大的搜索更新之一」。然而，當它推出時，許多人發現這個更新&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.searchenginejournal.com%2Fflorida-update-2-insights%2F298365%2F%3Fref%3Dwheresyoured.at&quot; target=&quot;_blank&quot;&gt;基本上回滾了之前的更改&lt;/a&gt;，並且&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.webmasterworld.com%2Fgoogle%2F4938447-2-50.htm%3Fref%3Dwheresyoured.at%23%3A%7E%3Atext%3D%28gmt%25200%29-%2CTraffic%2520on%2520several%2520sites%2520that%2520were%2520abused%2520by%2520Penquin%2520have%2520rebounded%2520significantly.%2C-nettulf&quot; target=&quot;_blank&quot;&gt;流量開始增加，回到了之前被 2012 年穀歌搜索的「企鵝」更新所壓制的網站&lt;/a&gt;，該更新專門針對垃圾搜索結果，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsearchengineland.com%2Fearly-data-on-google-march-2019-core-update-show-an-interesting-pattern-314089%3Fref%3Dwheresyoured.at&quot; target=&quot;_blank&quot;&gt;以及那些在 2018 年 8 月 1 日更新後受到影響的網站&lt;/a&gt;，就在 Gomes 成為搜索部門負責人的幾個月後。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;儘管我只是在猜測，2019 年 3 月核心更新的時間，以及之前被壓制網站的流量增加，強烈暗示谷歌對「代碼黃色」的迴應是回滾為保持搜索結果質量而做出的更改。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;幾個月後的 2019 年 5 月，谷歌對其移動搜索平台上的廣告展示方式進行了重新設計，將明亮的綠色「廣告」標籤和廣告 URL 顏色替換為一個微小的加粗黑色註釋「廣告」，而鏈接在視覺上與常規搜索鏈接幾乎相同。我猜這是在代碼黃色之後，他們的數據開始受到影響的方式。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;2020 年 1 月，谷歌將這一變化帶到了桌面端，正如 The Verge 的 Jon Porter 所指出的，這使得「谷歌的廣告現在看起來就像搜索結果一樣。」五個月後，在代碼黃色事件失敗一年多後，谷歌將普拉巴卡爾·拉格哈萬任命為谷歌搜索的負責人，傑裏·迪什勒接替他成為廣告部門的負責人。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;在將近 20 年致力於構建谷歌搜索之後，戈梅斯將被降職為谷歌教育部門的副總裁。戈梅斯是使谷歌搜索運作起來的原始團隊的關鍵成員，他被譽為確立了世界上最大、最重要的搜索引擎文化的功臣，卻遭到了以普拉巴卡爾·拉格哈萬為首的一羣渴望增長的管理人員的排擠，而拉格哈萬隻是一個穿着工程師服裝的管理顧問。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;請注意，我在這句話中使用「管理顧問」作為貶義詞。儘管他表現出了所有與管理顧問相同的算計、道德指導缺失的行為，但據我所知，拉加萬實際上從未在這個經濟領域的具體部門工作過。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;但你可知道誰做到了？ Sundar Pichai，他曾在麥肯錫工作——可以説是有史以來道德上最令人憎惡的公司，在 2008 年金融危機（它鼓勵銀行增加債務和有缺陷的抵押貸款支持證券）和持續的阿片類藥物危機中扮演了角色，實際上它還就如何「增長黑客」銷售 Oxycontin 向普渡製藥提供建議。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;由於與普渡的合作，麥肯錫已經支付了近 10 億美元的和解金。我有點跑題了，但還有一點。麥肯錫積極反對勞工。當一個公司請來麥肯錫顧問時，他們經常是在提供建議如何「削減成本」，這無疑意味着裁員和外包。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;麥肯錫對中產階級來説，就像食肉細菌對健康組織一樣。這些電子郵件鮮明地體現了主導科技生態系統的唯增長至上思維，如果你從這封通訊中帶走一件事，我希望它是普拉巴卡爾·拉格哈萬這個名字，以及理解目前科技現狀的責任人。這些電子郵件——我鼓勵你們去查找——講述了一個關於谷歌的財務和廣告團隊如何在大中華區負責人 Raghavan 的領導下，在 CEO 桑達爾·皮查伊的祝福下，積極工作使谷歌變得更糟，以使公司賺取更多錢的故事。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;這就是我所説的「腐朽經濟」——那種不合邏輯、破壞產品的思維模式，它將你喜愛的產品變成了折磨人、令人沮喪的準工具，你不得不與公司的意圖抗爭才能獲得你想要的服務。&lt;/p&gt; 
&lt;h2&gt;英雄與反派&lt;/h2&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;本·戈梅斯是一位英雄。他在使搜索功能既成為產品又成為業務方面發揮了重要作用，於 1999 年加入公司——那時距離谷歌在領域中確立主導地位還很久遠，同年拉里·佩奇和謝爾蓋·布林試圖以 100 萬美元的價格將公司賣給 Excite，但在 Excite 的投資者、太陽微系統的聯合創始人維諾德·科斯拉將報價壓低到 75 萬美元后，他們選擇了離開。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;在 2018 年接受 FastCompany 的 Harry McCracken 採訪時，Gomes 將谷歌面臨的挑戰描述為「將 PageRank 算法從一台機器擴展到許多機器上，而當時的機器性能並不好。」儘管他的影響力和任期都很長，但在 John Giannandrea 於 2018 年年中去蘋果負責機器學習和人工智能戰略後，Gomes 才被任命為搜索部門負責人。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;Gomes 被描述為谷歌的「搜索沙皇」，他跨部門溝通的能力深受喜愛。我讀過的每一篇關於 Gomes 在谷歌任期的文章，都描述了一個深深植根於史上最重要技術之一基礎的人，他致力於維護一個產品——用 Gomes 自己的話來説——「&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.fastcompany.com%2F90241011%2Fthis-man-has-helped-shape-google-search-almost-from-the-start%3Fref%3Dwheresyoured.at%23%3A%7E%3Atext%3DTo%2520me%252C%2520it%25E2%2580%2599s%2520the%2520guiding%2520light%2520of%2520serving%2520the%2520user%2520and%2520using%2520technology%2520to%2520do%2520that&quot; target=&quot;_blank&quot;&gt;引導之光是為用戶服務並使用技術來實現這一點&lt;/a&gt;。」而當最終交給他王國的鑰匙——提升谷歌搜索的能力時——他卻因為一系列試圖取悅華爾街的職業主義者，以 Prabhakar Raghavan 為首的糟糕決策而受阻。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;您想了解普拉巴卡·拉格萬之前的工作是什麼嗎？在擔任谷歌搜索的新負責人之前，那個把谷歌搜索搞得一團糟，目前正摧毀搜索的人，在谷歌之前是做什麼的？他擔任雅虎搜索業務的負責人，從 2005 年到 2012 年，這是一個動盪的時期，該公司因此陷入了最終的衰退，並實際上完全退出了搜索市場。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;他的職責是負責雅虎搜索和廣告產品的研究與開發。當 Raghavan 加入該公司時，雅虎持有 30.4% 的市場份額——與谷歌的 36.9% 相差不遠，遠遠領先於 MSN 搜索的 15.7%。到了 2012 年 5 月，雅虎的市場份額降至僅 13.4%，並且此前九個月連續縮水，甚至被新推出的必應超越。同年，雅虎經歷了公司歷史上最大規模的裁員，裁減了近 2000 名員工——佔其總員工數的 14%。那個取代了本·戈梅斯的人——一個從一開始就從事谷歌搜索工作的人——在他的工作中表現得非常糟糕，以至於在 2009 年，雅虎實際上放棄了自身的搜索技術，轉而選擇與必應的引擎簽訂了一個為期十年的許可協議。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmoney.cnn.com%2F2009%2F07%2F29%2Ftechnology%2Fmicrosoft_yahoo%2F%3Fref%3Dwheresyoured.at&quot; target=&quot;_blank&quot;&gt;而不是自己繼續開發&lt;/a&gt;。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;如果我們從長遠的角度來看，這很可能導致了整個公司的衰落，該公司從互聯網泡沫頂峯時期的 1250 億美元市值，到 2017 年以 48 億美元的價格被威瑞森收購。隨着搜索不再是優先事項——並且為公司賺取的利潤越來越少——雅虎決定轉向 Web 2.0 和原創內容，它的一些投資得到了回報，但也有太多太多的投資沒有成功。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;2013 年，它花費了 11 億美元收購了 Tumblr，結果 Verizon 在 2019 年僅以 30 萬美元的價格出售了它。2007 年，它收購了 Zimbra，表面上是為了與新的谷歌應用生產力套件競爭，但幾年後以據説遠低於原始購買價格的價格賣給了 VMware。雅虎是一個沒有使命、目的或目標的公司。沒有人——我甚至敢説，包括那些領導公司的人——真正知道它是什麼，或者它做了什麼。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;在 2005 年接受 ZDNet 的 Dan Farber 採訪時，拉格哈萬談到了他在雅虎時有意「將數十億內容提供商的商業激勵與社會公益意圖相結合」，並渴望「激發觀眾提供更多數據。在那之前，很難確切知道拉格哈萬做了什麼——據 ZDNet 報道，他在 IBM 花了「14 年時間進行搜索和數據挖掘研究。」&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;2011 年 4 月，《衞報》發表了對 Raghavan 的採訪，稱他為「雅虎的祕密武器」，描述了他的計劃，即通過「嚴格的科學研究與實踐…為雅虎的業務提供信息，從電子郵件到廣告」，以及在當時 CEO 卡羅爾·巴茨的領導下，「重點已經轉移到直接開發新產品」。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;文章提到了 Raghavan 的「科學方法」和他「穩定、基於流程的創新邏輯，這與普遍認為的想法和發展更多依賴於運氣和自發性截然不同」。我之所以與您分享這句話，是因為我需要您看出這是多麼愚蠢，以及科技媒體的讚譽曾經是多麼站不住腳。整篇文章荒謬至極，空洞無物，以至於我實際上感到震驚。Raghavan 的職業生涯有哪些方面讓這篇文章覺得合適？為什麼以前沒有人將這些點連接起來並説出些什麼？難道是我瘋了？&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;在雅虎將其搜索引擎授權給微軟的財務協議幾年後，這件事被提了出來，這個協議讓接替巴茨的瑪麗莎·梅耶爾多年來仍然對此感到憤怒。拉格哈萬作為「搜索大師」的統治如此成功，以至於最終被一個世界上沒有一個人願意大聲説出來的搜索引擎所取代。這篇文章由《衞報》發表，恰好是在雅虎大規模裁員的一年前，那次裁員涉及解僱整個部門的員工，以及四個月前，卡羅爾·巴茨被當時的董事長羅伊·博斯克通過電話解僱。她的繼任者——之前擔任 PayPal 總裁的斯科特·湯普森——在擔任該職位僅五個月後也被替換，接替他的是前谷歌高管瑪麗莎·梅耶爾，部分原因是因為他被揭發在簡歷上撒謊，稱自己擁有計算機科學學位。巴茨於 2009 年加入雅虎，在前任 CEO 楊致遠拒絕以 450 億美元將公司賣給微軟之後。在她上任的第一年，她裁減了數百名員工，並與微軟達成協議，使用微軟必應搜索引擎技術為雅虎提供搜索動力，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmoney.cnn.com%2F2009%2F07%2F29%2Ftechnology%2Fmicrosoft_yahoo%2F%3Fref%3Dwheresyoured.at&quot; target=&quot;_blank&quot;&gt;微軟將搜索收入的 88%&lt;/a&gt;支付給雅虎——這筆交易讓雅虎僅憑將其最高流量平台的控制權交給微軟就獲得了數億美元。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;正如我之前所述，當雅虎的祕密武器普拉巴卡爾·拉加萬在做他的工作時，雅虎搜索變得如此有價值，以至於它被必應取代。在許多方面，這家公司的唯一價值完全是由懷舊情緒和他在那裏工作之前的關聯所驅動的。&lt;/p&gt; 
&lt;h2&gt;一個近乎匿名的反派角色&lt;/h2&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;要找到關於拉格哈萬的歷史信息非常非常困難——我花了數小時在谷歌搜索結果中挖掘，只找到了三、四篇真正深入介紹他的文章——但從我搜集到的信息來看，他的專長主要在於「逆境上升」，依靠他引發的爆炸性事件在技術領域不斷晉升。在 2021 年的一篇《連線》雜誌採訪中，史蒂文·萊維説拉格哈萬「&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.wired.com%2Fstory%2Fprabhakar-raghavan-isnt-ceo-of-google-he-just-runs-the-place%2F%3Fref%3Dwheresyoured.at&quot; target=&quot;_blank&quot;&gt;並不是谷歌的 CEO，他只是管理這個地方&lt;/a&gt;」，並描述他加入公司是從研究轉向管理。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;萊維稱他為「世界級計算機科學家，在該領域撰寫了權威性著作」，同時也描述拉格萬「選擇了管理路線」，這與我對他的所有了解完全一致。在拉格萬大力激勵搜索引擎優化內容的時候，他自豪地宣稱「谷歌的第三方廣告技術在保持新聞業生存方面發揮着關鍵作用」，而就在一年前，他還廢黜了那個真正關心搜索的人。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;在拉格萬的領導下，谷歌變得不再可靠，透明度降低，且被搜索引擎優化的聚合器、廣告和明顯的垃圾信息所主導。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;正如我之前所論述的，我們出於充分的理由不斷抱怨埃隆·馬斯克旗下的推特狀態，但我認為拉格哈文（以及由此及彼的谷歌首席執行官桑達爾·皮查伊）同樣應該受到批評，甚至可能更多，因為他們給社會造成的損害。因為谷歌是網絡基礎設施中最為關鍵的部分，就像物理世界中的電力線路和水管一樣。拉加萬和他的同夥努力推翻本·戈梅斯，這個男人將他生命中的一大部分獻給了讓世界信息更加開放的事業，在這個過程中，他們焚燬了亞歷山大圖書館，以便皮查伊能夠每年賺取超過 2 億美元。並將其翻譯為中文：&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;拉加萬——由曾任麥肯錫顧問的蘇達爾·皮查伊聘用的一位經理，本身就是經理出身——是科技行業一切錯誤的典型例子。儘管拉加萬有着真正的計算機科學家背景和實際的學術資歷，他卻選擇排擠真正的員工，用諂媚者取而代之，這些人讓谷歌變得更加盈利，但對整個世界來説卻變得不那麼有用。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;自從 Prabhakar 在 2020 年接管以來，谷歌搜索急劇下降，據稱旨在改善結果質量的眾多「核心」搜索更新產生了反效果，增加了垃圾郵件式、針對搜索引擎優化的內容的普遍性。因為它背後的科技行業不再是由那些創建它的人所運營。拉里·佩奇和謝爾蓋·布林在 2019 年 12 月離開了谷歌（同年發生了代碼黃色事件），雖然他們仍然是控股股東，但他們顯然不再關心「谷歌」這個名字的含義。普拉巴卡·拉格哈萬是一位經理，據我所知，他的職業生涯主要是由「在 IBM 做了一些事情，未能讓雅虎有任何值得注意的成就，並讓谷歌變得如此糟糕，以至於每個新聞媒體都報道了它有多糟糕。」這將技術從真正的建設者手中奪走，交給了管理者，在「管理」與「儘可能遠離實際工作」同義的時代。當你什麼也不做，卻想盡可能多地獲利時，你只關心增長。你不是用戶，你是一個寄生蟲，正是這些寄生蟲佔據了主導地位，正在吸乾科技行業的價值。拉格哈文的經歷獨一無二，他在兩家定義行業的公司中造成的損害（或者，如果我們特別寬容地説，在雅虎的情況下，他沒有避免這種損害）並非作為 CEO 或創始人。或許更令人驚歎的是，他在保持一定程度的匿名性的同時取得了這些成就。每個人都認識馬斯克和扎克伯格，但拉格哈文只在互聯網的一個角落裏被人所知。至少他曾經是這樣。現在，拉加萬已經告訴那些從事搜索工作的人，他們的「新運營現實」是資源更少，交付事情的時間也更少。.rot 大師拉加萬在這裏，他要儘可能從被他親手打得半死的產品屍體中榨取更多。拉格哈萬是一位名人堂級的輪換經濟學家，也是眾多以增長和「股東價值」名義對互聯網造成無法估量損害的管理人員之一。我相信這些超級管理者——這些極端的官僚和增長獵犬——是破壞技術創新能力的力量。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;在我的下一封新聞通訊中，我將帶你瞭解一種非常特定的管理心態是如何毒害硅谷的，它讓職業失敗者變得難以置信地富有，而你的最愛科技產品卻在衰敗。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289270/the-men-who-killed-google</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289270/the-men-who-killed-google</guid>
            <pubDate>Wed, 24 Apr 2024 07:48:02 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>Mozilla 用 Rust 重寫 Firefox 的崩潰報告程序</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Mozilla 正在用 Rust 編程語言重寫 Firefox 的崩潰報告程序。Mozilla 工程師 Alex Franchuk 在 Mozilla Hacks 上撰文，詳細介紹了他們如何使用 Rust 編程語言將崩潰報告器重寫為跨平台 GUI 應用程序。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;雖然時至今日 Firefox 崩潰的情況已經有所減少，但 Mozilla 工程師認為，重寫崩潰報告程序對深入瞭解崩潰情況非常重要。由於現有的崩潰報告器錯誤庫&quot;困難且容易出錯&quot;，他們決定用 Rust 進行重寫。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;崩潰報告程序有意不使用現有的 Firefox 代碼庫，並根據崩潰報告的性質保持最小的代碼庫，同時提供跨平台的原生外觀，Linux 上的新崩潰報告程序則將繼續使用 GTK 工具包。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在詳細介紹了基於 Rust 實現的所有有趣的技術細節後，他們展示了新的崩潰報告 GUI：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;300&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e8281052fa3bed36c8e1fff522c982932ca.png&quot; width=&quot;416&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;通過這一新的、清理過的崩潰報告程序，項目團隊解除了對許多功能請求和錯誤報告的限制，例如：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1821414&quot; target=&quot;_blank&quot;&gt;檢測安裝是否損壞並告訴用戶重新安裝 Firefox&lt;/a&gt;，&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1565033&quot; target=&quot;_blank&quot;&gt;檢查崩潰系統上是否存在有故障的內存硬件&lt;/a&gt;，以及&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1866863&quot; target=&quot;_blank&quot;&gt;首次嘗試使用 Firefox 網絡堆棧提交崩潰信息（遵循用戶的網絡設置，如代理）&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;更多詳細信息，可訪問 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhacks.mozilla.org%2F2024%2F04%2Fporting-a-cross-platform-gui-application-to-rust%2F&quot; target=&quot;_blank&quot;&gt;Mozilla Hacks 博客&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289258/mozilla-rust-crash-reporter</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289258/mozilla-rust-crash-reporter</guid>
            <pubDate>Wed, 24 Apr 2024 07:05:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
    </channel>
</rss>