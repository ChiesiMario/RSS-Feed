<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - industry - 繁體中文（台灣）</title>
    <link>https://www.oschina.net/news/industry</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/industry" rel="self" type="application/rss+xml"/>
    <description>已對該 RSS 進行格式化操作：中英字符之間插入空格、使用直角引號、標點符號修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 09 Sep 2025 07:41:32 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>IBM 將整合 Red Hat 後台支持部門，削減重複支出</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2025%2F09%2F08%2Fred_hatters_to_be_big%2F" target="_blank"&gt;根據 The Register 的報道&lt;/a&gt;，IBM 已通知從 2026 年起，將把 Red Hat 的後台支持部門（法律、人力資源、財務和會計等 G&amp;amp;A 團隊，General &amp;amp; Administrative）併入 IBM 體系，以減少重複職能和運營成本。&lt;/p&gt; 
&lt;p&gt;雖然相關部門領導仍留在 Red Hat，但多數普通員工和支持崗位將轉入 IBM，部分國家可能因法律原因延遲執行。&lt;/p&gt; 
&lt;p&gt;IBM 長期通過整合和裁撤來優化成本，曾預計此類措施每年可節省 35 億美元。目前 Red Hat 擁有約 1.9 萬名員工，G&amp;amp;A 部門佔比較小。此次調整對 Red Hat 工程、銷售和技術支持等核心業務的直接影響有限，但部分員工擔憂公司文化進一步被稀釋。&lt;/p&gt; 
&lt;p&gt;IBM 強調，Red Hat 在 2024 年的年收入達到約 65 億美元，並繼續作為其雲戰略的重要組成部分。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371118</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371118</guid>
      <pubDate>Tue, 09 Sep 2025 07:30:28 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Vidu Q1 上線「參考生圖」功能，可支持 7 張參考圖輸入</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;生數科技旗下視頻大模型 Vidu 今天正式推出 Vidu Q1 參考生圖功能，能夠支持 7 張參考圖輸入。&lt;/p&gt; 
&lt;p&gt;據介紹，Vidu &amp;nbsp;Q1 參考生圖以「參考夠多，還原夠真」為核心，主要包括五大亮點：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;參考數量行業領先同時支持 7 張參考圖輸入，可控性強。&lt;/li&gt; 
 &lt;li&gt;主體一致性更強在多人、多場景、多次生成下，依舊保證人物/主體的面貌與特徵不跑偏。&lt;/li&gt; 
 &lt;li&gt;高還原度，真實感更強在保持參考圖特徵的同時，還原度高，更貼近用戶原始輸入，真正做到「所見即所得」。&lt;/li&gt; 
 &lt;li&gt;創作自由度極高一張圖 + 一句提示詞，就能自由換裝、換背景、自由合成。支持多人同場景或者多人多場景，滿足複雜劇情、合影、多角色電商等場景。&lt;/li&gt; 
 &lt;li&gt;支持 1080P 高清分辨率，中文語義理解更強，審美更適合本地&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img height="1280" src="https://static.oschina.net/uploads/space/2025/0909/151432_p44y_2720166.png" width="960" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1280" src="https://static.oschina.net/uploads/space/2025/0909/151536_Ou1Y_2720166.png" width="960" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1280" src="https://static.oschina.net/uploads/space/2025/0909/151609_Prxr_2720166.png" width="960" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;使用示例&lt;/p&gt; 
&lt;p&gt;&lt;img height="912" src="https://static.oschina.net/uploads/space/2025/0909/151641_ikfF_2720166.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1080" src="https://static.oschina.net/uploads/space/2025/0909/151806_vv9e_2720166.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;體驗：&lt;em&gt;https://www.vidu.cn/&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371114</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371114</guid>
      <pubDate>Tue, 09 Sep 2025 07:19:28 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>我如何用 Prompt 工程將大模型調教成風控專家</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;作為一個交易風控的算法工程師，在日常工作中，我常常與海量的數據和複雜的模型打交道，試圖在看似平靜的水面下，捕捉那些隱藏的風險暗流。最近，我嘗試將大語言模型（LLM）引入到我的工作流中，這段經歷充滿了波折、頓悟和驚喜。 今天，我想覆盤整個過程，分享我如何通過一套循序漸進的「Prompt 工程心法」，將一個「什麼都懂一點，但什麼都不精」的通用大模型，一步步調教成能夠精準識別複雜電商風控風險的「AI 專家」。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_1"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一、 引言：當算法工程師遇見「猜不透」的 AI&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;故事的起點，是我近期做的一個項目。我通過用戶的行為序列 Embedding 進行聚類，希望能發現一些未知的、有組織的風險模式。算法跑完，我得到了上百個「疑似風險簇」，每個簇裏都包含了行為高度相似的用戶訂單。 問題來了：如何高效、準確地甄別這些聚類結果？ 傳統的人工審核，不僅耗時耗力，而且每個人的判斷標準難以統一，效率和準確性都無法保證。於是，我自然而然地想到了正當紅的大模型。 我最初的想象非常美好：把一個簇的數據丟給 AI，它就能告訴我這羣用戶有沒有問題。但現實很快給了我一記重拳。 我最初的嘗試，Prompt 大概是這樣的：「幫我看看這個用戶簇有沒有風險」。 得到的結果五花八門：模型要麼像個「老好人」，對明顯的異常視而不見；要麼像個「懷疑狂」，把正常的用戶促銷活動也標記為高風險。它就像一個剛入職的實習生，知識淵博，但完全不懂業務，無法勝任真正的工作。 我很快意識到：問題不在於模型本身，而在於我與模型溝通的方式。 我不能把它當成一個全知的黑盒，而要把它當成一個需要悉心「帶教」的、潛力巨大的「實習生」。我的任務，就是設計一份完美的「崗前培訓手冊」——也就是我們的主角：Prompt。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_2"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;二、 第一階段：從 0 到 1，給 AI 一本「操作手冊」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;要讓一個實習生能幹活，首先得讓他知道「幹什麼」和「怎麼幹」。我需要將我作為風控專家的「隱性知識」顯性化，為 AI 提供一個結構化的分析框架。 我的關鍵動作有三步：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1. 角色扮演 (Role-Playing)：這是最簡單也最有效的一步。我在 Prompt 的開頭加入了一句魔法咒語：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;「你是一名資深的電商風控專家...」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;這能有效地為 AI 設定身份，激活它龐大知識庫中與該角色最相關的能力和知識。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2. 定義分析維度 (Defining Dimensions)：我把我人工審核時會關注的點，明確地列為指令，引導 AI 從這幾個方面入手：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;◦&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;收貨人信息分析&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;◦&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;收貨地址分析&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;◦&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;商品組合與價值分析&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3. 結構化輸入輸出 (Structured I/O)：為了實現高效、準確的人機協作，我規範了數據的「進」和「出」。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;◦&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;輸入：考慮到 Token 的消耗效率和成本，我選擇了 CSV 格式來組織和輸入一個簇內的多個訂單數據。相比 JSON 或 Markdown 表格，CSV 格式最緊湊，能在有限的上下文中傳入最多的信息。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;◦&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;輸出：我要求 AI 必須以嚴格的 JSON 格式返回分析結果。這便於我的後端程序直接解析，實現真正的自動化。 經過這番改造，我的 V1 版 Prompt 誕生了。它就像一本清晰的操作手冊，讓 AI 的輸出從雜亂無章的自然語言，變成了結構化的分析報告。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;階段小結：我們邁出了從 0 到 1 的關鍵一步，實現了流程自動化。但此時的 AI，更像一個只會照本宣科的「初級分析員」，它有了流程，但沒有靈魂，更缺乏對業務複雜性的理解，誤報率依然很高。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_3"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;三、 第二階段：注入業務常識，讓 AI 學會「具體問題具體分析」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;很快，我發現這個「初級分析員」開始頻繁地「犯教條主義錯誤」。它會把一些業務中的正常現象，當作風險信號上報。我意識到，我不僅要給它規則，更要給它「規則背後的邏輯」。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我開始為 Prompt 注入一系列的「豁免規則」和「背景知識」：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;挑戰 1：高折扣 ≠ 風險&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;◦&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;AI 的誤判：AI 看到用戶實付金額極低，就判定為「薅羊毛」。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;◦&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我的「補丁」：在 Prompt 中明確指出：「本次分析的很多訂單是【新用戶首單】，平台會提供高額補貼，因此高折扣是正常現象，不能僅憑此點判斷風險。」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;挑戰 2：隨機串 ≠ 假姓名&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;◦&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;AI 的誤判：AI 看到 w1e8192vf4rwz 這樣的用戶 ID，就認為是「亂碼、虛假信息」。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;◦&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我的「補丁」：明確定義「用戶 ID 是系統自動生成的隨機字符串，其格式本身不代表風險。你需要分析的是用戶自己填寫的【收貨人姓名】是否存在異常模式。」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;挑戰 3：0 元 ≠ 異常；暱稱 ≠ 虛假；權益商品 ≠ 風險&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;◦&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我舉一反三，陸續加入了更多「豁免規則」：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;▪&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;「價格為 0 的商品通常是【贈品】，本身無風險。」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;▪&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;「用戶出於隱私保護，使用暱稱或非全名（如‘李先生’）是普遍現象，單筆訂單不應視為風險。」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;▪&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;「‘省錢卡’等權益商品是平台推廣的正常模式，與主商品一併購買不意味着風險。」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;階段小結：經過這一輪「業務培訓」，AI 的「情商」和「業務感」顯著提升，誤報率大幅下降。它不再是一個只會執行命令的機器，而是成長為瞭解我們業務的「中級分析師」。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_4"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;四、 第三階段：提升分析深度，教會 AI「像偵探一樣思考」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;解決了誤報問題後，我開始追求更高的目標：提升模型的「洞察力」，讓它能發現更深層次、更隱蔽的風險。我發現，AI 能處理「單點」的異常，但看不透「協同」作案。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;瓶頸 1：忽略低價值商品風險&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;◦&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;AI 的認知停留在「高價值=高風險」，只對手機、顯卡等商品敏感。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;◦&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我的「升級」：拓寬風險定義，明確指出「【遠超個人合理消費範疇】的低價值、高流通性快消品（如成百箱的飲料），是小微商戶囤貨套利的重要信號。」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;瓶頸 2：缺乏「一致性」視角&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;◦&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;當多個不同賬號的地址並不完全相同時，AI 很難將它們關聯起來。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;◦&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我的「升級」：引入「購物車一致性」概念，告訴 AI：「多個不同用戶，如果購買的商品列表【完全相同或高度雷同】，這種‘抄作業’式的行為是腳本化或有組織行為的強力證據。」 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;階段小結：通過教會 AI 識別「行為指紋」，它的分析視角成功地從「訂單級」提升到了「團夥級」。它學會了「串聯證據」，具備了識別有組織、規模化風險的能力，成長為一名「高級分析師」。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_5"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;五、 第四階段：終極進化，讓 AI 在模糊中做出「法官式裁決」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;這是整個旅程中最具挑戰、也最有價值的一步。我面臨一個終極難題：如何區分「真團夥」與「假聚集」？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我的聚類算法本身，可能就會把一些無辜的用戶圈在一起。例如，平台在某個城市搞了一場營銷活動，給所有新用戶發了同一張券，導致大量真實用戶在相近的時間購買了同款促銷品。他們的行為高度相似，但他們彼此之間毫無關聯。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果 AI 無法分辨這種情況，那麼之前的努力都將付諸東流。我需要將它從一個「分析師」或「偵探」，升級為一位「法官」，能夠在模糊的信息中做出審慎的裁決。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我的解決方案是：引入「雙假設裁決框架」。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我在 Prompt 中，要求 AI 在兩個核心假設之間進行權衡和判斷：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;假設 A：協同風險團夥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;假設 B：良性特徵客羣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;並且，我為它定義了做出裁決的關鍵依據——「硬鏈接」證據。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;「硬鏈接是指能將不同賬號背後指向同一個實體的決定性證據，例如【完全相同的非公共收貨地址】。你的首要任務是尋找硬鏈接。如果找到，則基本可判定為風險團夥。如果找不到，再評估其行為是否能被營銷活動等良性原因完美解釋。」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;同時，我為它提供了正反兩方面的完整 Few-Shot 示例，一個是有硬鏈接的風險團夥，另一個是由營銷活動導致的良性客羣，為它的「裁決」樹立了清晰的標杆。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;階段小結：至此，我們的 Prompt 不再是一系列零散的指令，而是一個完整的、包含世界觀和方法論的【專家系統】。AI 最終進化成了一位能夠在複雜模糊的信息中，基於證據、權衡不同可能性，並做出審慎判斷的「風控專家」。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_6"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;六、 總結與思考：我的 Prompt 工程心法&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2025-07-04-10-490PpYchBnHOMz64r.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;回顧這段從 V1 到 V4 的進化之路，我將我的經驗提煉為幾點「心法」，希望能對大家有所啓發：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;始於模仿，終於框架：從模仿你自己的專家思考過程開始，逐步將零散的規則，抽象和沉澱為普適的、可複用的分析框架。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;規則是骨架，背景是血肉：只給規則，AI 是冰冷的機器；為規則注入業務背景、用戶心理等「常識」，AI 才有智能的靈魂。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;反例是最好的老師：教會 AI「什麼不是風險」和「什麼是風險」同等重要。精心設計的「豁免規則」和「良性示例」，是降低誤報率、提升模型可用性的關鍵。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;從「指令」到「思維模型」：最高級的 Prompt，不是告訴 AI 一步步做什麼，而是教會它一套思考問題的方法論（比如我們的「雙假設裁決框架」），讓它自己去分析和判斷。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;這次探索讓我深刻地體會到，在 AI 時代，Prompt 工程絕不僅僅是「提問的藝術」，它更是一門連接領域專家與通用人工智能的、充滿創造性的交叉學科。我們每個工程師，都可以通過它，將自己的專業知識和智慧，賦能給這個強大的新夥伴，去解決更多過去難以解決的問題。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;希望我的這段經歷，能為你打開一扇新的大門。感謝閲讀！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4090830/blog/18690981</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18690981</guid>
      <pubDate>Tue, 09 Sep 2025 07:14:28 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>MCP 官方註冊中心來了：MCP Registry 預覽版發佈</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Model Context Protocol（MCP）團隊近日發佈了 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.modelcontextprotocol.io%2Fposts%2F2025-09-08-mcp-registry-preview%2F" target="_blank"&gt;MCP Registry 預覽版&lt;/a&gt;，這是一個集中式目錄與 API 平台，旨在解決 MCP 服務器分發與發現問題，成為可信賴的「單一事實來源」。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0909/150221_B8yG_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;該項目由 MCP 創始人 David Soria Parra 與 Justin Spahr-Summers 發起，聯合 PulseMCP、Goose、GitHub、Anthropic、Microsoft 等多方協作者共同推動。&lt;/p&gt; 
&lt;p&gt;新平台支持 &lt;strong&gt;公共子註冊表&lt;/strong&gt;（如第三方 MCP 市場、客戶端專屬目錄）和 &lt;strong&gt;私有子註冊表&lt;/strong&gt;（企業內部自建、安全可控），為開發者和組織提供靈活擴展的能力。&lt;/p&gt; 
&lt;p&gt;MCP Registry 採用社區驅動治理：任何人都可通過 issue 舉報垃圾或惡意條目，管理員可將其下架，以維護生態健康。&lt;/p&gt; 
&lt;p&gt;MCP Registry：&lt;em&gt;https://github.com/modelcontextprotocol/registry&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;目前版本為預覽階段，不保證穩定性或數據持久性，團隊鼓勵社區積極提交反饋和改進建議。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371109/mcp-registry-preview</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371109/mcp-registry-preview</guid>
      <pubDate>Tue, 09 Sep 2025 07:07:28 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>AlmaLinux 10 將默認啓用 CRB 倉庫，提供更豐富的軟件包</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;AlmaLinux &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Falmalinux.org%2Fblog%2F2025-09-08-enabling-crb-by-default-for-almalinux10%2F" target="_blank"&gt;官方宣佈&lt;/a&gt;，從 AlmaLinux OS 10.0 起，系統將默認啓用 &lt;strong&gt;CRB（CodeReady Builder）倉庫&lt;/strong&gt;。這一調整旨在解決長期以來用戶在安裝 EPEL（Extra Packages for Enterprise Linux）軟件時常遇到的依賴缺失問題，例如安裝 KDE Plasma 桌面時的錯誤。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-6efb7e3b802f4da9b9dda2d1218314477a2.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;目前，&lt;strong&gt;AlmaLinux Kitten 10&lt;/strong&gt; 已通過 8 月底的更新啓用了 CRB，後續在 &lt;strong&gt;AlmaLinux 10.1&lt;/strong&gt; 發佈前，現有系統也會逐步收到更新。&lt;/p&gt; 
&lt;p&gt;CRB 倉庫包含許多企業級 Linux 默認未啓用的軟件包，包括開發工具和 EPEL 依賴組件。啓用後，用戶在安裝額外軟件時將更少遇到失敗提示。同時，10.1 版本還會引入 &lt;strong&gt;selinux-policy-extra&lt;/strong&gt; 包，進一步提升 SELinux 環境下的 EPEL 兼容性。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-533daf9ec1cc0dd068167cdb0910c926c44.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;用戶如需關閉該倉庫，可手動運行 &lt;code&gt;dnf config-manager --disable crb&lt;/code&gt;。AlmaLinux 團隊也呼籲用戶積極反饋使用體驗，以便進一步完善系統。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371107</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371107</guid>
      <pubDate>Tue, 09 Sep 2025 06:57:28 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>深圳 AI 產業規模突破 3600 億元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;2024 年，深圳全市人工智能產業規模突破 3600 億元，匯聚企業超 2800 家。目前，深圳已形成從算法研發、硬件製造到場景應用的完整產業鏈。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;深圳市人工智能產業協會統計數據顯示，2024 年深圳市企業、院校等主體全球範圍內共申請人工智能相關專利 3.74 萬件，其中發明專利 3.59 萬件佔 95.9%，實用新型專利 0.13 萬件佔 3.4%，外觀設計專利 0.02 萬件佔 0.6%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;據&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F4L37G1_AAZRhhK7uQ5Lhag" target="_blank"&gt;介紹&lt;/a&gt;，從 2023 年 5 月開始，深圳在先進製造、低空經濟、金融服務、政務服務、城市治理、交通運輸、公共安全等領域，陸續開放了近 200 個「城市+AI」應用場景。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="336" src="https://oscimg.oschina.net/oscnet/up-b9bd4acba183f0a941ee03db60d912c3b6e.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此外，《深圳市打造人工智能先鋒城市的若干措施》還提出「每年發放最高 5 億元‘訓力券’，最高 1 億元‘模型券’，最高 1 億元支持人工智能行業應用，最高 5000 萬元‘語料券’」，精準支持人工智能企業的算力使用、研發創新和場景落地。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;從數據上看，由深圳市人工智能行業協會、深圳市投控數字科技有限公司聯合編制的《2025 人工智能發展白皮書》顯示，截至 2024 年底，深圳市政府數據開放平台累計提供開放數據目錄 4065 個，累計開放數據總量 28.2 億多條；深圳數據交易所數據交易規模約 167 億元，其中跨境交易 3.1 億元，均居全國首位。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;目前，深圳已發行首期規模 20 億元的「深圳市人工智能和具身機器人產業基金」以及規模 50 億元的「深圳市人工智能終端產業投資基金」，構建「引導基金+天使基金+種子基金+集羣基金」投資生態。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371102</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371102</guid>
      <pubDate>Sun, 07 Sep 2025 06:30:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>騰訊發佈 AI CLI 工具 CodeBuddy Code</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;騰訊&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FtwmCoGDSr7Sv6UxQUBvRmg" target="_blank"&gt;宣佈&lt;/a&gt;正式推出全新 AI CLI 工具 CodeBuddy Code，號稱「用它 90% 以上的代碼都可以讓 AI 生成」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;同時，CodeBuddy IDE 國際版已開啓公測，無需邀請碼，面向所有用戶開放使用。用戶可免費使用 CodeBuddy 國內版全系列產品，無縫調用 DeepSeek 等大模型；國際版支持 GPT、Gemini 等主流模型，IDE 與 CLI 共用額度（測試期間贈送部分體驗額度）。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="280" src="https://oscimg.oschina.net/oscnet/up-5b0a643c4c5b2ab555a3908c5f255fb4c03.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;根據介紹，早在去年，騰訊雲就推出 IDE 插件「代碼助手 CodeBuddy」。2025 年 7 月，「CodeBuddy IDE」作為獨立產品內測，主打「對話即編程」，用戶無需代碼基礎，通過自然語言即可完成應用從構思到部署的全流程。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e3e3e; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;此次發佈的&amp;nbsp;&lt;strong&gt;CodeBuddy Code&lt;/strong&gt;，則是一款面向專業工程師的 AI CLI 工具，支持在命令行中用自然語言驅動開發全流程，實現極致自動化。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e3e3e; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;CodeBuddy Code 不是一款普通的命令行工具，而是一款深度集成 AI 能力的智能終端助手。它的核心優勢可概括為：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;無縫融入現有流程：&lt;/strong&gt;支持通過管道與 Git、npm 等工具鏈銜接，不改變開發者習慣；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;開箱即用，擴展性強：&lt;/strong&gt;內置文件編輯、命令運行等工具，支持 MCP 協議靈活擴展；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;自動化複雜任務：&lt;/strong&gt;適合重構、調試、CI/CD 等批量處理場景，提升效率。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#3e3e3e; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;同步上線的 CodeBuddy IDE 公測版也迎來更新：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;理解能力升級：&lt;/strong&gt;增強複雜場景下的代碼生成質量，尤其優化數據庫交互、API 邏輯等後端能力；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;&amp;nbsp;&lt;strong&gt;騰訊生態深度集成：&lt;/strong&gt;可直接連接雲開發 CloudBase，快速搭建數據庫、雲函數，並一鍵部署至 Web、APP、小程序；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;堅持普惠模式：&lt;/strong&gt;國內版免費，國際版 Pro 額度與 CLI 通用。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;CodeBuddy Code 安裝指令：npm install -g @tencent-ai/codebuddy-code（完成安裝後，國際版選擇 Google/GitHub 登錄，國內版微信登錄）&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e3e3e; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;CodeBuddy IDE（海內外版本安裝包不同）&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.codebuddy.ai%2F" target="_blank"&gt;下載國際版&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcopilot.tencent.com%2Fide" target="_blank"&gt;下載國內版&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371096</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371096</guid>
      <pubDate>Sun, 07 Sep 2025 06:14:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>百度文心 X1.1 深度思考模型上線</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;9 月 9 日，在 WAVE SUMMIT 深度學習開發者大會 2025 期間，百度首席技術官、深度學習技術及應用國家工程研究中心主任王海峯正式發佈了文心大模型 X1.1 深度思考模型，該模型在事實性、指令遵循、智能體等能力上均有顯著提升。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-e79bee7ce3d353f0b180715b3d5821bc30d.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;當前，用戶可以通過文心一言官網和文小言 APP 上體驗並使用文心大模型 X1.1。此外，文心大模型 X1.1 已正式登陸百度智能雲千帆平台，面向企業客戶以及開發者全面開放應用。&lt;/p&gt; 
&lt;p&gt;據王海峯現場介紹，文心大模型 X1 是基於文心大模型 4.5 訓練而來的深度思考模型，升級後的 X1.1 主要採用了迭代式混合強化學習訓練框架，一方面通過混合強化學習，同時提升通用任務和智能體任務的效果；另一方面通過自蒸餾數據的迭代式生產及訓練，不斷提升模型整體效果。相比文心 X1，X1.1 的事實性提升 34.8%，指令遵循提升 12.5%，智能體提升 9.6%。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-aa7ae4fd1c672e36cf29a1e67ee68fa267e.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在多個權威基準評測中，文心 X1.1 整體表現超越 DeepSeek R1-0528，在部分任務上展現出領先優勢。同時，在與國際頂尖模型 GPT-5 和 Gemini 2.5 Pro 相比，效果持平。&lt;/p&gt; 
&lt;p&gt;文心大模型能夠實現能力範圍的拓展與運行效率的顯著提升，這離不開飛槳文心二者聯合優化所發揮的關鍵作用。在大會現場，百度重磅發佈了飛槳核心框架 3.2 版本，該版本在大模型訓練、硬件適配以及生態支持等多個關鍵領域實現了全方位升級。&lt;/p&gt; 
&lt;p&gt;與此同時，百度還對大模型開發套件 ERNIEKit 和高效部署套件 FastDeploy 進行了同步升級。值得注意的是，百度方面的最新數據顯示，飛槳文心生態開發者達到 2333 萬，服務企業達到 76 萬家。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371093</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371093</guid>
      <pubDate>Sun, 07 Sep 2025 06:09:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Anthropic 支持加州 AI 安全法案</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="background-color:#ffffff; color:#242424"&gt;AI 公司 Anthropic 正式支持加州州長斯科特・維納（Scott Wiener）提出的 SB53 法案。該法案計劃對全球&lt;/span&gt;&lt;span style="background-color:#ffffff; color:#242424"&gt;最大&lt;/span&gt;&lt;span style="background-color:#ffffff; color:#242424"&gt;的 AI 模型開發者施加前所未有的透明度要求，成為美國首個針對 AI 安全的立法嘗試。然而，矛盾的是，許多硅谷科技公司和聯邦政府對此法案表示強烈反對。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="282" src="https://oscimg.oschina.net/oscnet/up-af08d19dd5268877bf8bf5dfd8ea3188746.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Anthropic 在一篇博客中指出：「儘管我們認為前沿 AI 安全問題應在聯邦層面解決，而不是由各州自行規定，但強大的 AI 技術發展不會等待華盛頓的共識。」 該公司強調，制定 AI 治理標準是當務之急，而 SB53 提供了一條合理的路徑。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;如果 SB53 法案獲得通過，像 Anthropic、OpenAI、谷歌和 xAI 等 AI 模型開發者將需要制定安全框架，並在部署強大 AI 模型前，發佈公開的安全和安保報告。此外，該法案還將為舉報安全問題的員工提供保護。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;該法案特別關注於限制 AI 模型對 「災難性風險」 的貢獻，定義為導致至少 50 人死亡或造成超過 10 億美元損失的事件。SB53 側重於防範極端 AI 風險，例如防止 AI 模型被用於生物武器的開發或網絡攻擊，而不涉及更近一步的 AI 深度偽造或過度迎合等問題。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;加州參議院已經通過了 SB53 的初步版本，但仍需進行最終投票，才能將其送交州長簽署。儘管加州州長紐森尚未對該法案表態，但他曾否決過類似的 SB1047 法案。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;反對聲音主要來自硅谷及特朗普政府，認為此類法案可能限制美國在與中國競爭中的創新。安德森・霍洛維茨（Andreessen Horowitz）和 Y Combinator 等投資者對此法案進行了強烈反對，認為州政府不應幹預 AI 安全問題，應該將此事交給聯邦政府。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;儘管存在這些反對意見，政策專家認為 SB53 相較於之前的 AI 安全法案顯得更為溫和。加州立法者在該法案的制定過程中顯示了對技術現實的尊重以及一定的立法剋制。Anthropic 的聯合創始人傑克・克拉克（Jack Clark）表示，儘管希望有聯邦標準，但現有法案為 AI 治理提供了一份不可忽視的藍圖。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371092</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371092</guid>
      <pubDate>Sun, 07 Sep 2025 06:07:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>上海 AI 實驗室開源 XTuner V1 訓練引擎</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;上海人工智能實驗室（上海 AI 實驗室）&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F_ThFxekq291-y5iuxkc55A" target="_blank"&gt;宣佈&lt;/a&gt;開源書生大模型新一代訓練引擎 XTuner V1。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;根據介紹，XTuner V1 是伴隨上海 AI 實驗室「通專融合」技術路線的持續演進，以及書生大模型研發實踐而成長起來的新一代訓練引擎。相較於傳統的 3D 並行訓練引擎，XTuner V1 不僅能應對更加複雜的訓練場景，還具備更快的訓練速度，尤其在超大規模稀疏混合專家（MoE）模型訓練中優勢顯著。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="291" src="https://oscimg.oschina.net/oscnet/up-ff1375d90f151fe21298719b380e9eae9c0.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;XTuner V1 基於 PyTorch FSDP 進行開發，並針對 FSDP 通信量大的固有缺陷，進行了系列優化，可支持 1T 參數量級 MoE 模型訓練，並首次在 200B 以上量級的混合專家模型上，實現訓練吞吐超越傳統的 3D 並行訓練方案。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;針對當前主流的 MoE 後訓練需求，XTuner V1 不使用序列並行就能實現 200B 量級 MoE 模型單次 forward-backward 可處理 64k 序列長度，更適合當下流行的強化學習訓練場景；對專家並行依賴小，長序列訓練時受專家不均衡影響小，200B 量級 MoE 無需專家並行，600B MoE 只需節點內專家並行，更適合現代 MoE Dropless 訓練模式；大規模長短序列混訓場景提速 2 倍以上，數據並行負載均衡，大幅減小因需序列長度不均衡導致的計算空泡。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;同時，為了進一步挖掘 XTuner V1 訓練方案的上限，研究團隊與華為昇騰技術團隊在 Ascend A3 NPU 超節點上進行聯合優化，充分利用超節點硬件特性，實現了更高的 MFU（Model FLOPS Utilization，模型浮點運算利用率）。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在理論算力落後 NVIDIA H800 近 20% 的情況下，最終實現訓練吞吐超過 H800 近 5%，MFU 反超 20% 以上，該項研究成果技術報告也將於近期發佈。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="325" src="https://oscimg.oschina.net/oscnet/up-112050849bc1465fa1733568599509e5451.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;除了訓練框架，書生大模型研發中使用的 AIOps 工具 DeepTrace 與 ClusterX 也將一併開源，為大規模分佈式訓練提供全方位保障。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371074</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371074</guid>
      <pubDate>Sun, 07 Sep 2025 03:49:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>B 站（嗶哩嗶哩）語音團隊開源新一代語音合成模型 IndexTTS2</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;嗶哩嗶哩語音團隊發佈並開源了新一代零樣本語音合成模型 IndexTTS2。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-12ac8ed6b44ae691d1764b19b32b2adb355.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;相關論文《IndexTTS2: A Breakthrough in Emotionally Expressive and Duration-Controlled Auto-Regressive Zero-Shot Text-to-Speech》已在 arXiv 上線，代碼與模型權重也同步在 GitHub 與 Hugging Face 公開。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;https://arxiv.org/abs/2506.21619&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;https://github.com/index-tts/index-tts&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;該模型首次在自迴歸架構中引入了「時間編碼」機制，支持通過顯式指定 token 數量來實現毫秒級的時長控制，也可以自由生成以保留原始韻律。&lt;/p&gt; 
&lt;p&gt;IndexTTS2 由三個核心模塊組成：Text-to-Semantic（T2S） 、Semantic-to-Mel（S2M） 以及 BigVGANv2 聲碼器 。首先，T2S 模塊基於輸入的源文本、風格提示、音色提示以及一個可選的目標語音 token 數，生成對應的語義 token 序列。然後，S2M 模塊以語義 token 和音色提示作為輸入，進一步預測出梅爾頻譜圖。最後，BigVGANv2 聲碼器將梅爾頻譜圖轉換為高質量的語音波形，完成端到端的語音合成過程。&lt;/p&gt; 
&lt;p&gt;&lt;img height="228" src="https://static.oschina.net/uploads/space/2025/0909/112919_2T8p_2720166.png" width="877" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;IndexTTS2 整體框架&lt;/p&gt; 
&lt;p&gt;模型訓練數據包含了 55K 小時的中英雙語語音以及 135 小時的情感數據。在 LibriSpeech-test-clean、SeedTTS test-zh/en、AISHELL-1 等基準測試中，IndexTTS2 在詞錯誤率和説話人相似度方面均取得了 SOTA 成績。主觀 MOS 評測顯示，其情感保真度達到 4.22，情感相似度為 0.887，時長控制誤差低於 0.07%。&lt;/p&gt; 
&lt;p&gt;項目已提供 WebUI 與 Python 接口，支持普通零樣本合成與情緒引導模式，可即插即用於 AI 配音、有聲讀物、視頻翻譯、播客等多種場景。官方還同步上線了內測版的「原聲視頻翻譯」功能，讓用戶可以體驗定長語音合成的效果。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371073</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371073</guid>
      <pubDate>Sun, 07 Sep 2025 03:31:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>極光 GPTBots 重磅升級 AI 工作空間，以應用市場開」AI 全員化」新篇章</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;極光 GPTBots 重磅升級 AI 工作空間，以應用市場 (Marketplace) 開啓「AI 全員化」新篇章&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;企業級 AI 智能體構建平台 GPTBots 近日宣佈，其 AI 工作空間（Workspace）完成重磅升級，並同步推出全新的&lt;strong&gt;應用市場（Marketplace）&lt;/strong&gt;。此次升級標誌着 GPTBots 從一個專業的 AI 開發工具，戰略性地演變為一個「人人可用」的企業級 AI 生產力平台，旨在將強大的 AI 能力安全、便捷地融入日常工作的每一個環節。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;一、 核心升級：更強大的 AI 工作空間，賦能每一位員工&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;升級後的 AI 工作空間 (Workspace)&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;旨在將強大的 AI 能力轉化為企業全員觸手可及的生產力工具。&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;其能力通過兩大維度得到革命性增強：強大的內置基礎應用和開放的應用市場生態。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1. 內置能力全面增強，覆蓋高頻核心場景&lt;/strong&gt;Workspace 內置的核心功能板塊得到全面升級，為員工日常工作提供了強大的基礎能力：&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;企業級 AI Search：&lt;/strong&gt;&amp;nbsp;作為一個強大的企業智能搜索入口，員工可上傳圖片、音頻、文檔進行多模態檢索，並可自定義模型與提示詞，快速、精準地從企業海量數據中獲取洞察。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;零代碼自動化 Workflow：&lt;/strong&gt;&amp;nbsp;作為一個強大的業務流程自動化引擎，員工只需通過填寫表單，即可驅動複雜的業務流程自動化，輕鬆獲得結構化報告與數據。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2. 全新應用市場 (Marketplace) 上線，開啓無限擴展可能&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;本次升級的最大亮點，是正式推出的「應用市場 (Marketplace)」&lt;strong&gt;。作為一個開放的 AI 應用分發平台，它將全球頂尖的 AI 能力封裝為即插即用**的應用，&lt;/strong&gt;企業可按需選用，持續為工作空間注入新的活力。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;首發應用「Live Speechly」（智能會議助手）：&lt;/strong&gt;&amp;nbsp;作為 Marketplace 的首發重磅應用，「Live Speechly」不僅能實時翻譯會議內容，還能智能總結要點、自動生成行動計劃，並可配置與企業 CRM 或任務系統聯動，讓每一次會議的價值都能量化落地。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;未來，Marketplace 將持續上架更多官方及第三方合作伙伴的 AI 應用，覆蓋從通用效率工具到垂直行業解決方案的廣泛需求。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;二、 專業賦能：為開發者打造的強大構建空間&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;在賦能全員的同時，GPTBots 持續強化其面向開發者的&lt;strong&gt;開發空間&lt;/strong&gt;。它為企業中的 AI 開發者、技術專家提供了從構建、調試到部署的全流程 AI 應用開發能力。現在，開發者可選擇從零開始，&lt;strong&gt;也可直接調用官方預置的業務模板（如「智能客服」、「商機挖掘」等），基於最佳實踐快速啓動項目，為企業打造定製化的 AI 解決方案。&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;三、 平台基石：企業級的集成與安全治理&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;強大的應用生態離不開堅實的平台能力。GPTBots 在本次升級中同樣強化了其底層支撐：&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;豐富的平台集成：&lt;/strong&gt;&amp;nbsp;與&lt;strong&gt;Telegram&lt;/strong&gt;的深度集成得到優化，企業現在能用一個 AI 智能體同時管理多個客服機器人，並 7x24 小時在海量羣聊中主動捕捉商機或服務請求。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;全面的企業級治理：&lt;/strong&gt;&amp;nbsp;升級後的「空間管理」功能為企業提供了強大的後台治理能力，包括應用審核發佈、精細化權限管理、成本控制以及定製化的無縫集成，確保 AI 應用在企業內的使用既高效又安全可控。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;「我們的願景是讓 AI 普惠化，成為像 Office 套件一樣無處不在的生產力工具。」GPTBots 創始人兼首席執行官羅偉東表示，「過去，AI 是少數開發者的專屬。今天，通過全面升級的工作空間和全新的應用市場，我們為每一位員工打開了通往 AI 世界的大門。」&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;四、未來展望：Multi-Agent 系統預覽，揭示 AI 協同作業的廣闊前景&lt;/strong&gt;最後，GPTBots 在本次更新中正式公開了&lt;strong&gt;Multi-Agent（多智能體）系統&lt;/strong&gt;的創建入口。它允許企業組建一個由多個專業 AI 構成的「AI 專家團隊」，自主規劃並協同執行如市場研究等複雜任務，標誌着平台正向「智慧 AI 團隊」邁進。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;關於 GPTBots：&lt;/strong&gt;GPTBots.ai 是企業級 AI 智能體平台，支持構建從高效的單個智能體到能夠自主規劃、協同執行復雜任務的 Multi-Agent「智慧 AI 團隊」。通過無代碼/低代碼的操作體驗、豐富的應用市場 (Marketplace) 和企業級的安全治理，GPTBots 助力全球企業在 AI 時代實現效率躍升、成本優化與業務創新。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371065</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371065</guid>
      <pubDate>Sun, 07 Sep 2025 03:10:00 GMT</pubDate>
      <author>作者: 開源科技</author>
    </item>
    <item>
      <title>周鴻禕：大模型可能成為新的攻擊載體和攻擊入口</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;在 ISC.AI 2025 上海大模型安全論壇上，360 集團創始人周鴻禕在致辭中指出，AI 發展面臨着惡意利用、內容安全、「幻覺」問題、提示詞攻擊等風險，大模型既是生產力工具，也可能成為新的攻擊載體和攻擊入口，政府和企業的數據資產、商業機密面臨着前所未有的暴露風險，保障 AI 安全是一項長期而艱鉅的任務，需要各方協同努力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;會上，360 還發布了國內首個多智能體協同的大模型安全衞士。具體來看，其內容安全智能體通過垂直領域專業模型訓練，提供智能判定、風險內容檢測及安全回覆代答等關鍵能力。通過建立五道「內容防線」，提供超過 100 個風險類目識別能力，確保輸入輸出雙向安全。同時以測促防，持續對模型回覆內容進行評測，識別潛在攻擊風險。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;AI Agent 安全智能體通過原生安全機制，全面保障 AI Agent 在執行任務過程中的數據安全與權限控制，有效防範自動規劃與執行中可能出現的行為失控問題，把大模型能力「關在籠子裏」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;幻覺抑制智能體通過搜索增強、知識增強與對齊增強技術，提升大模型推理過程的準確性，有效抑制因內容時效性缺失、數據過時等因素引發的大模型「幻覺」問題，確保生成內容真實可信。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;軟件安全智能體能夠高效識別開源軟件，精準定位 AI 軟件的安全漏洞。覆蓋從模型訓練到推理的全鏈路安全檢測，支持識別模型服務相關組件、生態鏈漏洞掃描與多語言代碼審計，保障 AI 軟件供應鏈生命週期的安全性。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此外，360 將大模型安全衞士融入安全運營體系，通過整合安全大模型、安全大腦平台、大模型安全衞士及終端探針工具的核心能力，構建「網數模一體化」安全運營平台，實現安全運營系統性重塑與升級。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;360 數字安全集團副總裁餘凱表示，AI 安全是一個高門檻的技術領域，需要同時具備 AI 技術積澱、安全實戰經驗、真實場景驗證和海量語料積累。360 通過自身大規模 AI 業務場景驗證產品能力，同時沉澱了海量安全語料，構建起核心競爭力。目前，360 大模型安全衞士已在公司內外多項業務中實現深度應用。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371063</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371063</guid>
      <pubDate>Sun, 07 Sep 2025 03:00:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>社區造數服務接入 MCP</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;strong&gt;一、背景&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;今年 MCP 的概念非常火，市面上也湧現出了一大批 MCP 相關工具。作為技術一線者，都會按捺不住地去實操一下，很早的時候就有個設想，如果把我們的測試工具都改造為符合 MCP 服務協議標準，然後全部接入 AI Agent，打造一個集萬千工具於一體的智能管家來幫助我們提效，是不是一個很完美的設想。很多宏偉或者天馬行空的想法想要真正的落地，必然需要不斷向下，拆解成可落地的任務模塊，這裏我們先從造數開始。&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_2"&gt;&lt;/span&gt; 
&lt;h1 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;二、AI 造數設想&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;在實際業務需求測試中，我們依賴的測試數據需要很多前置的數據要求，這時候會涉及到分步使用不同的造數腳本。比如團長拉新做任務，需要一個 30 天內沒發過動態的賬號，加入團隊，發一篇動態，動態過一審，過二審，閲讀數滿足 300 個。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;為了完成這個場景的造數，我們需要去造數工廠、接口自動化、腳本代碼等平台找對應的造數工具，分別去執行才能完成這一系列的操作。可以從下圖中看到，總計需要 6 個步驟才能完成。如果不是熟悉所有的業務，哪怕有現成的造數腳本，組合起來使用還是有一定的門檻。&lt;/span&gt;&lt;/p&gt; 
&lt;div style="text-align:left"&gt; 
 &lt;img height="1128" src="https://oscimg.oschina.net/oscnet/up-3b7fa7c586340ba3f1c00d782b0ac7c6c9d.png" width="2206" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;那麼在 AI 風行的年代，我們想要實現的是：按照用戶輸入的測試數據要求，能夠按照已有造數能力自動編排，生成對應的測試數據給用戶使用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;最終實現效果案例：&lt;strong&gt;&lt;u&gt;我需要一個團長拉新的測試數據，要求是 30 天內沒有發過動態，進入團隊 A，然後發佈一條動態，需要過一審風控審核，二審標註，最後需要獲得 300 個閲讀數。&lt;/u&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;AI 造數自動去造數池子中尋找對應的造數接口，按照提問的順序要求來依次執行造數，最後返回給用戶對應的測試賬號。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;這裏不再重複介紹 MCP 的概念，我們參考官方給出的 client-server 通用架構圖來畫一個 AI 造數的架構圖，便於理解在落地到 AI 造數的場景，我們可以做哪些事。本篇文章主要就講解了圖中的其中一環，落地社區造數服務的 MCP 接入。&lt;/span&gt;&lt;/p&gt; 
&lt;div style="text-align:left"&gt; 
 &lt;img height="1394" src="https://oscimg.oschina.net/oscnet/up-465e37c8cde5953f6ad51fd69a1bd676304.png" width="2030" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;span id="OSC_h1_3"&gt;&lt;/span&gt; 
&lt;h1 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;三、社區造數服務 tools&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;span id="OSC_h2_4"&gt;&lt;/span&gt; 
&lt;h2 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;框架介紹&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;社區的造數服務技術棧是基於&amp;nbsp;&lt;/span&gt;&lt;span&gt;FastAPI&amp;nbsp;&lt;/span&gt;&lt;span&gt;框架實現的，通過 uv 工具來管理依賴庫、虛擬環境等，這個工具親測的確比傳統的 pip 或者 poetry 等工具更好用。從安裝 uv 到啓動項目，只要 4 步就能無痛搞定環境，不用擔心本地其他環境的幹擾。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-auto"&gt;## uv 命令
1.&amp;nbsp;安裝 uv ：&amp;nbsp;`curl -LsSf https://astral.sh/uv/install.sh | sh`
2.&amp;nbsp;創建環境 - 自定義環境名稱和 Python 版本 &amp;nbsp;&amp;nbsp;`uv venv tools_venv --python 3.12`
3.&amp;nbsp;激活環境 &amp;nbsp; &amp;nbsp;`source tools_venv/bin/activate`
4.&amp;nbsp;安裝依賴包 &amp;nbsp; &amp;nbsp;`uv pip install -r pyproject.toml`


## 本地啓動項目
直接運行 main.py 文件中的 main 方法即可，debug 模式自己 pycharm 中設置
if&amp;nbsp;__name__&amp;nbsp;== "__main__":
&amp;nbsp; &amp;nbsp; import uvicorn
&amp;nbsp; &amp;nbsp; uvicorn.run(app, host="0.0.0.0", port=8000)&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;中間件相關配置全部通過 ARK 來管理，項目結構如下：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-auto"&gt;## 項目結構


```bash
├── main.py &amp;nbsp;# 啓動 APP 入口文件
├── README.md &amp;nbsp;# 開發手冊
├── Dockerfile &amp;nbsp;# Docker 鏡像文件
├── alembic &amp;nbsp;# alembic 遷移 DB 自動生成的相關文件
│ &amp;nbsp; ├── README
│ &amp;nbsp; ├── .env.py
│ &amp;nbsp; ├── script.py.mako
│ &amp;nbsp; └── versions &amp;nbsp;# 存放每次遷移的版本，可用於回滾 DB 版本
├── alembic.ini &amp;nbsp;# alembic 配置文件
├── app
│ &amp;nbsp; ├── __init__.py &amp;nbsp;# 註冊 app
│ &amp;nbsp; ├── api &amp;nbsp;# api 開發目錄
│ &amp;nbsp; ├── core &amp;nbsp;# app 的全局配置
│ &amp;nbsp; ├── crud &amp;nbsp;# 每個 table 的增刪改查操作
│ &amp;nbsp; ├── db &amp;nbsp;# db 配置
│ &amp;nbsp; ├── models &amp;nbsp;# 存放表結構
│ &amp;nbsp; ├── schemas &amp;nbsp;# pydantic 模型
│ &amp;nbsp; └── utils &amp;nbsp;# 工具類
├── .pre-commit-config.yaml &amp;nbsp;# 配置 git commit 時自動檢測工具
└── pyproject.toml &amp;nbsp;# 依賴庫管理
```&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;統一部署到公司的發佈平台，通過&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;http://{造數服務域名}/tools/docs#/&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color:#3e3e3e"&gt;，地址可以訪問目前社區所有的造數接口。同時也對接了造數工廠，可以直接去造數工廠使用。&lt;/span&gt;&lt;/p&gt; 
&lt;div style="text-align:left"&gt; 
 &lt;img height="661" src="https://oscimg.oschina.net/oscnet/up-eabd0a4c0427f46b6285a9eae28abc181e1.png" width="1280" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;div style="text-align:left"&gt; 
 &lt;img height="653" src="https://oscimg.oschina.net/oscnet/up-caeee8fd4c3d5779f5a578bc285ced9acfd.png" width="1280" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;span id="OSC_h2_5"&gt;&lt;/span&gt; 
&lt;h2 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;改造思路&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;老方案-基於 MCP Python SDK&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;早在出現&amp;nbsp;MCP 這個概念的時候，我就想過有天把我們的造數服務通過 MCP 工具暴露出來，這樣就可以非常方便的集成各種 Agent，打造 AI 造數。在出現這個&amp;nbsp;&lt;/span&gt;&lt;span&gt;FastAPI-MCP&lt;/span&gt;&lt;span&gt;&amp;nbsp;框架之前，想要把造數服務改造成支持&amp;nbsp;MCP ，就需要通過引入&amp;nbsp;MCP 依賴庫來實現。但這個方案對於已有的造數服務來説改造成本有些高，可以看老方案的案例。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;從官方文檔面向服務器開發者 - MCP 中文文檔中可以找到有對應的 MCP Python SDK，主要就是安裝&amp;nbsp;MCP 這個依賴庫。這裏舉一個簡單的 demo，通過手機號查詢用戶信息的方法。可以很清晰的看出來這個 SDK 的語法結構是需要&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;@mcp.tool()&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color:#3e3e3e"&gt;&amp;nbsp;這個裝飾器來修飾，那麼原有的造數服務暴露出來的所有接口方法是否都需要改造，這仍有一定的成本（未考慮其他複雜場景情況下）。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-auto"&gt;# server.py
from&amp;nbsp;mcp.server.fastmcp&amp;nbsp;import&amp;nbsp;FastMCP
from&amp;nbsp;tools.tools_set&amp;nbsp;import&amp;nbsp;get_user_info
import&amp;nbsp;uvicorn
# Create an MCP server
mcp = FastMCP("Demo")


@mcp.tool()
async&amp;nbsp;def&amp;nbsp;get_user_info_tool(mobile:&amp;nbsp;str) -&amp;gt;&amp;nbsp;Coroutine[Any,&amp;nbsp;Any,&amp;nbsp;Any]:
&amp;nbsp; &amp;nbsp;&amp;nbsp;"""根據輸入的手機號獲取用戶信息
&amp;nbsp; &amp;nbsp;&amp;nbsp;
&amp;nbsp; &amp;nbsp; Args:
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mobile: 手機號
&amp;nbsp; &amp;nbsp; """
&amp;nbsp; &amp;nbsp; info = get_user_info(mobile)
&amp;nbsp; &amp;nbsp;&amp;nbsp;return&amp;nbsp;info


if&amp;nbsp;__name__ ==&amp;nbsp;"__main__":
&amp;nbsp; &amp;nbsp;&amp;nbsp;"""Initialize and run the server"""
&amp;nbsp; &amp;nbsp;&amp;nbsp;# mcp.run(transport="sse")
&amp;nbsp; &amp;nbsp;&amp;nbsp;"""Start the FastAPI server with uvicorn"""
&amp;nbsp; &amp;nbsp; uvicorn.run(app, host="0.0.0.0", port=8003)&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;基於上述代碼 demo，我們通過&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;uvicorn&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color:#3e3e3e"&gt;啓動服務，當然也可以單獨啓動&amp;nbsp;MCP 服務。控制枱輸出如下，代表啓動成功，接下來我們就可以使用&amp;nbsp;MCP 客戶端工具進行連接使用了，這裏使用 Cursor 來做演示。&lt;/span&gt;&lt;/p&gt; 
&lt;div style="text-align:left"&gt; 
 &lt;img height="498" src="https://oscimg.oschina.net/oscnet/up-d7ddeff3b7a42bd3ace1f86742655b9e494.png" width="1276" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;看圖標顯示綠色，無報錯説明連接成功，這裏也能看到 demo 中的&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;get_user_info_tool&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color:#3e3e3e"&gt;方法作為&amp;nbsp;MCP 工具暴露了出來。演示到這裏，説明瞭該方案是可行的。因為本文重點講解採用的新方案，此處就不再多介紹，感興趣的可以去看官方文檔。&lt;/span&gt;&lt;/p&gt; 
&lt;div style="text-align:left"&gt; 
 &lt;img height="737" src="https://oscimg.oschina.net/oscnet/up-adb821aa5fb8f7f0c879620b4c8074fee0a.png" width="1280" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;span id="OSC_h1_6"&gt;&lt;/span&gt; 
&lt;h1 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;四、FastAPI-MCP&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;span id="OSC_h2_7"&gt;&lt;/span&gt; 
&lt;h2 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;安裝運行&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;「Expose your FastAPI endpoints as Model Context Protocol (MCP) tools, with Auth! 」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;這是引用官網介紹的第一句話，翻譯過來大概的意思就是：把你的 FastAPI 服務作為&amp;nbsp;MCP 工具暴露出來成為現實！&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;安裝&amp;nbsp;&lt;/span&gt;&lt;span&gt;FastAPI-MCP 庫&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;uv add fastapi-mcp&amp;nbsp;&lt;/strong&gt;&amp;nbsp;or&amp;nbsp;&lt;strong&gt;&amp;nbsp;uv pip install fastapi-mcp&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;使用 FastAPI-MCP，只需要 3 行代碼就能把 FastAPI 框架改造成一個&amp;nbsp;MCP 服務&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;通過&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;uvicorn&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;啓動服務器，使用 http://localhost:8000/mcp 來訪問 MCP server&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-auto"&gt;from&amp;nbsp;fastapi&amp;nbsp;import&amp;nbsp;FastAPI
import&amp;nbsp;uvicorn
from&amp;nbsp;fastapi_mcp&amp;nbsp;import&amp;nbsp;FastApiMCP


# Create (or import) a FastAPI app
app = FastAPI()


# Create an MCP server based on this app
mcp = FastApiMCP(app)


# Mount the MCP server directly to your app
mcp.mount()


if&amp;nbsp;__name__ ==&amp;nbsp;"__main__":
&amp;nbsp; &amp;nbsp; uvicorn.run(app, host="0.0.0.0", port=8000)&lt;/code&gt;&lt;/pre&gt; 
&lt;span id="OSC_h2_8"&gt;&lt;/span&gt; 
&lt;h2 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;用法介紹&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;自定義配置&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;通過看源碼 FastApi-MCP 類，基本能清晰的看出來各個參數的用處，這裏將介紹幾個常用的。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-auto"&gt;class&amp;nbsp;FastApiMCP:
&amp;nbsp; &amp;nbsp;&amp;nbsp;"""
&amp;nbsp; &amp;nbsp; Create an MCP server from a FastAPI app.
&amp;nbsp; &amp;nbsp; """
&amp;nbsp; &amp;nbsp;&amp;nbsp;
&amp;nbsp; &amp;nbsp;&amp;nbsp;def&amp;nbsp;__init__(
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; self,
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fastapi: Annotated[
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; FastAPI,
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Doc("The FastAPI application to create an MCP server from"),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ],
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; name: Annotated[
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Optional[str],
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Doc("Name for the MCP server (defaults to app.title)"),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ] =&amp;nbsp;None,
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; description: Annotated[
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Optional[str],
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Doc("Description for the MCP server (defaults to app.description)"),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ] =&amp;nbsp;None,
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; describe_all_responses: Annotated[
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;bool,
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Doc("Whether to include all possible response schemas in tool descriptions"),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ] =&amp;nbsp;False,
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; describe_full_response_schema: Annotated[
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;bool,
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Doc("Whether to include full json schema for responses in tool descriptions"),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ] =&amp;nbsp;False,
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; http_client: Annotated[
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Optional[httpx.AsyncClient],
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Doc(
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;"""
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Optional custom HTTP client to use for API calls to the FastAPI app.
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Has to be an instance of `httpx.AsyncClient`.
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; """
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ] =&amp;nbsp;None,
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; include_operations: Annotated[
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Optional[List[str]],
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Doc("List of operation IDs to include as MCP tools. Cannot be used with exclude_operations."),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ] =&amp;nbsp;None,
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; exclude_operations: Annotated[
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Optional[List[str]],
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Doc("List of operation IDs to exclude from MCP tools. Cannot be used with include_operations."),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ] =&amp;nbsp;None,
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; include_tags: Annotated[
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Optional[List[str]],
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Doc("List of tags to include as MCP tools. Cannot be used with exclude_tags."),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ] =&amp;nbsp;None,
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; exclude_tags: Annotated[
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Optional[List[str]],
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Doc("List of tags to exclude from MCP tools. Cannot be used with include_tags."),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ] =&amp;nbsp;None,
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; auth_config: Annotated[
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Optional[AuthConfig],
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Doc("Configuration for MCP authentication"),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ] =&amp;nbsp;None,
&amp;nbsp; &amp;nbsp; ):
&amp;nbsp; &amp;nbsp; ...&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;&lt;u&gt;※ Server metadata&lt;/u&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;name：MCP 服務名&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;description：對 MCP 服務的描述&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;&lt;u&gt;※ Tool and schema descriptions&lt;/u&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;創建 MCP 服務器時，可以通過修改&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;describe_all_responses&lt;/strong&gt;&lt;/span&gt;&lt;span style="color:#3e3e3e"&gt;&amp;nbsp;，把所有可能的響應模式包含在工具描述中，或通過更改&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;describe_full_response_schema&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color:#3e3e3e"&gt;把完整的 json 包含在工具描述中。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-auto"&gt;from&amp;nbsp;fastapi&amp;nbsp;import&amp;nbsp;FastAPI
from&amp;nbsp;fastapi_mcp&amp;nbsp;import&amp;nbsp;FastApiMCP


app = FastAPI()


mcp = FastApiMCP(
&amp;nbsp; &amp;nbsp; app,
&amp;nbsp; &amp;nbsp; name="My API MCP",
&amp;nbsp; &amp;nbsp; description="Very cool MCP server",
&amp;nbsp; &amp;nbsp; describe_all_responses=True,
&amp;nbsp; &amp;nbsp; describe_full_response_schema=True
)


mcp.mount()&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;&lt;u&gt;※ Customizing Exposed Endpoints&lt;/u&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;include_operations&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;， 暴露 operation_id=XXX 的接口&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;exclude_operations&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;， 排除 operation_id=XXX 的接口&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;include_tags&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;， 暴露 tags=XXX 的接口&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;exclude_tags&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，排除 tags=XXX 的接口&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;組合使用：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;include_operations&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;exclude_operations&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;不能同時使用&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;include_tags&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;exclude_tags&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;不能同時使用&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;include_operations&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;include_tags&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;可以組合使用，匹配任一個條件就滿足&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-auto"&gt;from fastapi import FastAPI
from fastapi_mcp import FastApiMCP


app = FastAPI()


# 案例 1：include_operations
mcp = FastApiMCP(
&amp;nbsp; &amp;nbsp; app,
&amp;nbsp; &amp;nbsp; include_operations=["get_user",&amp;nbsp;"create_user"]
)


# 案例 2：exclude_operations
mcp = FastApiMCP(
&amp;nbsp; &amp;nbsp; app,
&amp;nbsp; &amp;nbsp; exclude_operations=["delete_user"]
)


# 案例 3：include_tags
mcp = FastApiMCP(
&amp;nbsp; &amp;nbsp; app,
&amp;nbsp; &amp;nbsp; include_tags=["users",&amp;nbsp;"public"]
)


#案例 4：exclude_tags
mcp = FastApiMCP(
&amp;nbsp; &amp;nbsp; app,
&amp;nbsp; &amp;nbsp; exclude_tags=["admin",&amp;nbsp;"internal"]
)


# 案例 5：Combined
mcp = FastApiMCP(
&amp;nbsp; &amp;nbsp; app,
&amp;nbsp; &amp;nbsp; include_operations=["user_login"],
&amp;nbsp; &amp;nbsp; include_tags=["public"]
)


mcp.mount()&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;工具命名&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;FastAPI 中的路由通過&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;operation_id&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color:#3e3e3e"&gt;參數來作&amp;nbsp;MCP 工具名稱，如果沒有顯示命名，框架會自動生成一個。此處經測試，如果不顯示命名，自動生成的名字不僅會很奇怪，還會影響 AI 造數的準確性，所以這裏最好作好規範，必須要顯示命名。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-auto"&gt;# Auto-generated operation_id (something like "read_user_users__user_id__get")
@app.get("/users/{user_id}")
async&amp;nbsp;def&amp;nbsp;read_user(user_id:&amp;nbsp;int):
&amp;nbsp; &amp;nbsp;&amp;nbsp;return&amp;nbsp;{"user_id": user_id}


# Explicit operation_id (tool will be named "get_user_info")
@app.get("/users/{user_id}", operation_id="get_user_info")
async&amp;nbsp;def&amp;nbsp;read_user(user_id:&amp;nbsp;int):
&amp;nbsp; &amp;nbsp;&amp;nbsp;return&amp;nbsp;{"user_id": user_id}&lt;/code&gt;&lt;/pre&gt; 
&lt;span id="OSC_h1_9"&gt;&lt;/span&gt; 
&lt;h1 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;五、接入造數服務&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;span id="OSC_h2_10"&gt;&lt;/span&gt; 
&lt;h2 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;框架升級及改造&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;div style="text-align:left"&gt; 
 &lt;img height="158" src="https://oscimg.oschina.net/oscnet/up-6daf0b306f68eb26a818acbcd4bc1c97e0e.png" width="362" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;在接入的時候，要查一下官方文檔要求的 Python，FastAPI 等版本，先進行框架升級，防止出現不兼容的問題。這項通過管理工具安裝依賴庫時能自動校驗，其他一些兼容問題在啓動服務後根據實際場景一一去解決即可。這裏推薦使用 uv 工具進行管理，親測比之前的 poetry 更好用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;列幾個核心庫的版本，都是驗證過沒有兼容問題的。在過程中也是遇到一些兼容問題花了點時間，因為 FastAPI-MCP 框架比較新，網上資料還不全，遇到沒法解決的問題大家可以去項目 issue 中找，提升解決問題效率。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-auto"&gt;python&amp;nbsp;=&amp;nbsp;"^3.12"
fastapi&amp;nbsp;=&amp;nbsp;"0.115.12"
fastapi-mcp&amp;nbsp;="0.3.1"
mcp="1.7.0"
pydantic&amp;nbsp;=&amp;nbsp;"^2.11.0"
pydantic-settings&amp;nbsp;=&amp;nbsp;"^2.2.0"&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;步驟&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;第一步：&lt;/strong&gt;引入&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;fastapi-mcp&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;第二步：&lt;/strong&gt;main.py 中添加 MCP 服務&lt;/span&gt;&lt;/p&gt; 
&lt;div style="text-align:left"&gt; 
 &lt;img height="1742" src="https://oscimg.oschina.net/oscnet/up-ce1141e73e95f28018c491ceb00fdda983f.png" width="3024" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;第三步：&lt;/strong&gt;也是工作量最大的一步，將每個造數接口都做顯示命名，並且做好文檔註釋，寫的越清楚 AI 造數的準確率越高，需要對應編寫造數場景測試，共同完成&lt;/span&gt;&lt;/p&gt; 
&lt;div style="text-align:left"&gt; 
 &lt;img height="737" src="https://oscimg.oschina.net/oscnet/up-0e83a066f4c13f56252bb062799edc7c522.png" width="1280" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;最後一步：&lt;/strong&gt;啓動服務&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;uvicorn.run('main:app', host='0.0.0.0', port=8023, reload=True, workers=2)&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color:#3e3e3e"&gt;，無報錯基本就沒有問題了。再通過 MCP 客戶端工具連接使用即可&lt;/span&gt;&lt;/p&gt; 
&lt;div style="text-align:left"&gt; 
 &lt;img height="828" src="https://oscimg.oschina.net/oscnet/up-127999129cd482f6ef6ddfd7c16fff98e4c.png" width="1924" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;span id="OSC_h2_11"&gt;&lt;/span&gt; 
&lt;h2 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;接入 Cursor&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;改造完之後的造數服務成功對外暴露了 MCP 服務，現在我們可以通過 MCP 客戶端去連接使用了，這裏選用了 Cursor，因為 Cursor 使用的人比較多，同時集成了市面上的主流大模型。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;步驟&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;第一步：&lt;/strong&gt;創建一個 mcp.json，按照標準 json 配置即可&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-auto"&gt;{
&amp;nbsp;&amp;nbsp;"mcpServers":&amp;nbsp;{
&amp;nbsp; &amp;nbsp;&amp;nbsp;"fastapi-mcp":&amp;nbsp;{
&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;"url":&amp;nbsp;"http://localhost:8022/mcp",
&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;"description":&amp;nbsp;"本地開發環境 MCP 服務配置"
&amp;nbsp; &amp;nbsp;&amp;nbsp;},
&amp;nbsp; &amp;nbsp;&amp;nbsp;"tools-mcp":&amp;nbsp;{
&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;"url":&amp;nbsp;"http://localhost:8011/mcp",
&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;"description":&amp;nbsp;"本地開發環境 MCP 服務配置"
&amp;nbsp; &amp;nbsp;&amp;nbsp;},&amp;nbsp; &amp;nbsp;&amp;nbsp;
&amp;nbsp; &amp;nbsp;&amp;nbsp;"demo-mcp":&amp;nbsp;{
&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;"url":&amp;nbsp;"http://localhost:8001/sse",
&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;"description":&amp;nbsp;"本地開發環境 MCP 服務配置"
&amp;nbsp; &amp;nbsp;&amp;nbsp;},
&amp;nbsp; &amp;nbsp;&amp;nbsp;"tools-mcp-prod":&amp;nbsp;{
&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;"url":&amp;nbsp;"http://XXXXXX/mcp",
&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;"description":&amp;nbsp;"線上"
&amp;nbsp; &amp;nbsp;&amp;nbsp;}
}
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;第二步：點擊右上角設置 icon，進入 Cursor Settings，選擇 MCP&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div style="text-align:left"&gt; 
 &lt;img height="737" src="https://oscimg.oschina.net/oscnet/up-e405f6c3b39c76fefb42ed99b65eaef9493.png" width="1280" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;第三步：&lt;/strong&gt;這裏可以看到，在剛才 mcp.json 中配置的 MCP 工具均加載過來，打開開關，運行狀態顯示為綠色，無報錯並説明瞭服務接入正常，接下來就可以正常使用 Cursor 中的 Agent 進行對話了&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_12"&gt;&lt;/span&gt; 
&lt;h2 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;實操演練&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;我們現在只希望使用造數能力，因此我們可以指定剛才配置的&amp;nbsp;MCP 工具。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;場景化案例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;需求：&lt;strong&gt;&lt;u&gt;給手機號為 11120210001 的用戶發佈一個點評動態，並且通過風控一審。&lt;/u&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;這裏注意一下提問方式，因為我們沒有對大模型進行特別的訓練，AI 不一定知道 111 開頭的是我們測試使用的虛擬手機號，有可能會誤解為 userId，所以我們需要告訴 AI 這是一個手機號。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;可以看到在這個 demo 中， Agent 自動幫我們分了三步去調用對應的 MCP tool，第一步通過我們輸入的手機號去獲取 userId，第二步通過 userId 去發佈點評動態，第三步通過點評動態 id 去通過風控一審。原本需要三步完成的造數場景，現在通過一句話描述就完成了。&lt;/span&gt;&lt;/p&gt; 
&lt;div style="text-align:left"&gt; 
 &lt;img height="516" src="https://oscimg.oschina.net/oscnet/up-43ff74f8e9a0982ee59ab299ca26dcf2e1a.png" width="1280" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;調優案例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;需求：&lt;strong&gt;&lt;u&gt;隨機創建 10 個測試賬號&lt;/u&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;&lt;u&gt;※ &amp;nbsp;調優之前&lt;/u&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;造數代碼，主要看文檔註釋內容。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-auto"&gt;@router.post('/create-account', operation_id="create_account",summary="創建測試賬號")
async&amp;nbsp;def&amp;nbsp;c_create_account(
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; env:&amp;nbsp;str&amp;nbsp;= Body(..., description='環境'),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; phonenumber:&amp;nbsp;str&amp;nbsp;= Body(..., description='手機號'),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pwd:&amp;nbsp;str&amp;nbsp;= Body(..., description='密碼'),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; usernum:&amp;nbsp;str&amp;nbsp;= Body(None, description='數量'),
) -&amp;gt;&amp;nbsp;Any:
&amp;nbsp; &amp;nbsp;&amp;nbsp;"""
&amp;nbsp; &amp;nbsp; 創建測試賬號，默認 111 開頭
&amp;nbsp; &amp;nbsp;
&amp;nbsp; &amp;nbsp; args
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; env: 環境，默認：t1
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; phonenumber: 手機號
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pwd: 密碼，默認：test123
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; usernum: 數量
&amp;nbsp; &amp;nbsp; """
&amp;nbsp; &amp;nbsp;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;把這個造數需求發送給 AI，發現報錯了。我們去代碼中看下為何返回了 false，原來是因為接口返回非 200，排查下來是因為 t1 環境測試賬號造數默認填了 111，不需要再加 111，所以接口直接 500 了。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;這裏 AI 犯了兩個錯誤：&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;因為默認手機號都是 11 位的，這裏 AI 不知道只需要傳 8 位就行。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;我沒有輸入具體的手機號，所以按照代碼邏輯應該是支持自動隨機生成的，但是 AI 也不知道這個邏輯，「自作主張」給我傳入了一個手機號。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;div style="text-align:left"&gt; 
 &lt;img height="357" src="https://oscimg.oschina.net/oscnet/up-a687a3ba5d6e43d967a1df706e061309d3c.png" width="1280" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;&lt;u&gt;※ &amp;nbsp;調優後&lt;/u&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;通過排查我們已經明確知道 AI 犯了哪些錯誤，那麼我們針對這些錯誤去調優即可。所謂的調優主要就是修改文檔註釋，可以前後對比下注釋內容。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-auto"&gt;"""
創建測試賬號，默認 111 開頭，不用填寫 111，只需要後面 8 位
不傳手機號 phonenumber，默認隨機生成手機號


args
&amp;nbsp; &amp;nbsp; env: 環境，默認：t1
&amp;nbsp; &amp;nbsp; phonenumber: 手機號，非必填，不填自動生成
&amp;nbsp; &amp;nbsp; pwd: 密碼，默認：test123
&amp;nbsp; &amp;nbsp; usernum: 數量
"""&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;&lt;u&gt;※ &amp;nbsp;最終效果&lt;/u&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div style="text-align:left"&gt; 
 &lt;img height="841" src="https://oscimg.oschina.net/oscnet/up-661edd41c61d2a9a6839eff382484e4eb7f.png" width="1280" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;通過這個案例可以看到，準確率依賴我們對造數接口的文檔註釋，所以在實際使用過程中，前期需要我們不斷地去調優，才能達到我們想要的效果。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;當然隨着後續迭代，可能可以用更優雅的方式完成這個工作，比如再引入靜態代碼分析工具，通過 AI 編程自動完成註釋。&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_13"&gt;&lt;/span&gt; 
&lt;h1 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;六、總結&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;span id="OSC_h2_14"&gt;&lt;/span&gt; 
&lt;h2 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;技術實踐成果&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;通過將社區造數服務改造成符合 MCP（Model Context Protocol） 標準的工具，我們成功實現了以下目標：&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;AI 驅動的測試數據自動化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;用戶通過自然語言描述需求，AI Agent 可自動編排造數接口生成複雜測試數據，將原本需手動執行 3 步的操作簡化為一步指令。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;低成本框架升級&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;基於&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;fastapi-mcp&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color:#3e3e3e"&gt;框架，僅需少量代碼改造即可將 FastAPI 服務快速接入 MCP 協議，解決了傳統 SDK 方案的高適配成本問題。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;工具鏈整合&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;通過對接 Cursor 等 AI 工具平台，驗證了 MCP 協議在跨平台協作中的可行性，為後續構建「社區智能管家」奠定技術基礎。&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_15"&gt;&lt;/span&gt; 
&lt;h2 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;核心實踐經驗&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;註釋即規範&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;AI 調用接口的準確性高度依賴代碼註釋的清晰度。通過優化接口文檔（如參數默認值、輸入格式説明），可顯著提升 Agent 的任務解析成功率。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;漸進式調優&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;初期需通過人工幹預優化 Agent 的接口調用邏輯，未來可引入代碼靜態分析工具自動生成標準化註釋。&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_16"&gt;&lt;/span&gt; 
&lt;h2 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;未來優化方向&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;動態編排增強&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;當前接口調用為線性執行，後續可探索基於依賴關係的動態編排（如並行執行獨立步驟、自動重試失敗操作）。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;多 Agent 協作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;結合領域知識庫與測試斷言工具，實現從「造數」到「驗證」的全鏈路 AI 自治。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;協議擴展性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;探索 MCP 與更多協議（如 OpenAPI）的互操作性，提升工具服務的跨平台複用能力。&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_17"&gt;&lt;/span&gt; 
&lt;h2 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;價值與啓示&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;本次實踐印證了 「AI+協議化工具」 在測試領域的巨大潛力：降低技術門檻 （非技術人員可直接描述需求）、提升執行效率 （分鐘級操作秒級完成）、釋放創新空間 （複雜場景的自動化長鏈路測試）。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;隨着 MCP 生態的完善，測試工程將逐步從「工具堆砌」走向「智能協作」，為研發效能帶來質的突破。&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_18"&gt;&lt;/span&gt; 
&lt;h1 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;七、感想&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;「我不是英雄，只是一個拿錘子的約德爾人」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;站在巨人的肩膀上總是能看的更高更遠，追隨技術大牛們的步伐，把 AI 應用到工作中、生活中。回想九年前初入測試行業時捧讀的《Google 軟件測試之道》，書中「人類智慧的最後一英尺」已然越來越近。重讀了 2022 年在公司內部博客發表的《Google 軟件測試之道：結合實踐的總結》一文，發現僅僅過了 3 年，如果現在再去寫，又是完全不一樣的想法了，技術的發展已發生翻天覆地的變化。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;此刻回望測試領域的演進曲線，愈發感到：「拿錘者」的價值不在於揮舞工具的姿態，而在於持續校準認知座標的能力 。當 AI 重構測試鏈路的每個環節時，唯以「錘者」的務實與「巨人」的視野雙軌並行，方能在技術洪流中錨定價值支點。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;加油吧！不忘初心，你我終將能抵達一個又一個「終點」！&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;往期回顧&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;1.CSS 闖關指南：從手寫地獄到「類」積木之旅｜得物技術&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;2.從零實現模塊級代碼影響面分析方案｜得物技術&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;3.以細節詮釋專業，用成長定義價值——對話@孟同學 ｜得物技術&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;4.得物可觀測平台架構升級：基於 GreptimeDB 的全新監控體系實踐&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;5.得物自研 DGraph4.0 推薦核心引擎升級之路&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;span style="color:#3e3e3e"&gt;文 / 阿凱&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;span style="color:#3e3e3e"&gt;關注得物技術，每週更新技術乾貨&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;span style="color:#3e3e3e"&gt;要是覺得文章對你有幫助的話，歡迎評論轉發點贊～&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;span style="color:#3e3e3e"&gt;未經得物技術許可嚴禁轉載，否則依法追究法律責任。&lt;/span&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/5783135/blog/18499385</link>
      <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/18499385</guid>
      <pubDate>Sun, 07 Sep 2025 02:45:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>字節 Seedream 4.0 圖像創作模型正式發佈</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;字節跳動 Seed 團隊正式發佈新一代圖像創作模型&amp;nbsp;Seedream 4.0。&lt;/p&gt; 
&lt;p&gt;&lt;img height="720" src="https://static.oschina.net/uploads/space/2025/0909/103623_g73z_2720166.jpg" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據介紹，Seedream 4.0&amp;nbsp;採用同一套構架實現文生圖與通用編輯能力，融合常識和推理能力，相比前代模型 Seedream 3.0 和 SeedEdit 3.0，在多模態效果、速度和可用性上均實現顯著突破。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0909/104012_jgFB_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;p&gt;使用同樣 prompt，分別用 Seedream 3.0 和 Seedream 4.0 生成送貨機器人的手繪草圖，Seedream 4.0 在文字渲染和排版上更精緻。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img height="1084" src="https://static.oschina.net/uploads/space/2025/0909/103843_HlqK_2720166.jpg" width="1170" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1084" src="https://static.oschina.net/uploads/space/2025/0909/103856_vWOi_2720166.jpg" width="1170" referrerpolicy="no-referrer"&gt;&lt;br&gt; Seedream 4.0 主要亮點&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;多模態玩法拓展：靈活支持文本、圖像的組合輸入，允許文生圖、圖生圖、圖像編輯、多圖編輯、組圖生成等創作模式，玩法創意多樣。&lt;/li&gt; 
 &lt;li&gt;風格化美感提升：支持高度自由的藝術風格遷移，從巴洛克到賽博朋克風，風格百變，更可組合創造全新風格，美感突出。&lt;/li&gt; 
 &lt;li&gt;邏輯理解力增強：結合世界知識，提升了多模態輸入理解，會「畫」，更會先「想」，在涉及物理和時間約束、解謎填字、續寫漫畫等任務中，展現出推理生成能力。&lt;/li&gt; 
 &lt;li&gt;自適應與 4K 生成：可根據指令或參考圖生成最佳比例圖片，也支持用戶自定義尺寸，最高分辨率從 2K 擴展至 4K 超高清。&lt;/li&gt; 
 &lt;li&gt;推理速度躍升：通過全新高效的架構設計，以及極致的蒸餾加速，DiT 生圖的推理速度較 Seedream 3.0 提升超 10 倍。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;目前，Seedream 4.0 已正式上線，可通過即夢、豆包、火山方舟等平台直接體驗。&lt;/p&gt; 
&lt;p&gt;項目主頁：https://seed.bytedance.com/seedream4_0&lt;/p&gt; 
&lt;p&gt;體驗入口：&lt;/p&gt; 
&lt;p&gt;（1）即夢網頁端-圖片生成-上傳參考圖-選擇圖片 4.0 模型-輸入 Prompt；&lt;br&gt; （2）豆包 App 對話框-AI 生圖/生視頻-上傳參考圖-輸入 Prompt；&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371058</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371058</guid>
      <pubDate>Sun, 07 Sep 2025 02:37:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>知名 Android 第三方桌面 Nova Launcher 將停止維護</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;知名 Android 第三方桌面&lt;span&gt;啓動器 Nova Launcher 創始人和原始開發者 Kevin Barry 宣佈，他已經離開收購 Nova Launcher 的分析公司 Branch，並不再參與該項目。&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img height="1658" src="https://static.oschina.net/uploads/space/2025/0909/103239_Hnwx_2720166.png" width="1502" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;https://teslacoilapps.com/nova/solong.html&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;據悉，Nova Launcher 由 Kevin Barry 帶隊開發，於 2022 年被 Branch 收購。當時，Branch 承諾不會將 Nova Launcher 變為訂閲式付費、帶有廣告的普通 Android 桌面啓動器。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-d68adf6667956ed5f537c0b8b93ebbb0b93.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據 Kevin Barry 透露，其在過去幾個月不斷為 Nova Launcher 的開源進行付出。其表示，雖然 Branch 曾在收購 Nova Launcher 時承諾，其若離職，Nova Launcher 最終則會開源，但 Barry 現被要求停止開發 Nova Launcher 和終止進行開源工作。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371057</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371057</guid>
      <pubDate>Sun, 07 Sep 2025 02:34:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>阿里通義發佈語音識別模型 Qwen3-ASR-Flash</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;通義千問系列最新的語音識別模型 Qwen3-ASR-Flash 已正式發佈，它基於 Qwen3 基座模型，經海量多模態數據以及千萬⼩時規模的 ASR（自動語音識別）數據訓練構建而成。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0909/101857_EGZg_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Qwen3-ASR-Flash 實現了⾼精度⾼魯棒性的語⾳識別性能，⽀持 11 種語⾔和多種⼝⾳。與眾不同的是，Qwen3-ASR-Flash⽀持⽤戶以任意格式提供⽂本上下⽂，從⽽獲得定製化的 ASR 結果，同時還⽀持歌聲識別。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0909/101903_kNR1_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img height="664" src="https://static.oschina.net/uploads/space/2025/0909/101933_MOCR_2720166.png" width="1280" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1395" src="https://static.oschina.net/uploads/space/2025/0909/101944_O6J2_2720166.png" width="1280" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Qwen3-ASR-Flash 單模型支持多種語言、方言和口音的精準轉錄：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;中文：包括普通話以及四川話、閩南語、吳語、粵語等主要方言。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;英語：支持英式、美式及多種其他地區口音。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;其他支持語言：法語、德語、俄語、意大利語、西班牙語、葡萄牙語、日語、韓語和阿拉伯語。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Qwen3-ASR-Flash 的核心特性：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;領先的識別準確率：Qwen3-ASR-Flash 在多箇中英文，多語種 benchmark 測試中表現最優。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;驚豔的歌聲識別能力：支持歌唱識別,包括清唱與帶 bgm 的整歌識別，實測錯誤率低於 8%。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;定製化識別：用戶可以以任意格式 (如詞彙表、段落或完整文檔) 提供背景文本，模型能智能利用該上下文識別並匹配命名實體和其他關鍵術語，輸出定製化的識別結果。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;語種識別與非人聲拒識：模型能精確分辨語音的語種，自動過濾非語音片段，包括靜音和背景噪聲。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;魯棒性：面對長難句、句中語言切換和重複詞語等困難文本模式，以及在複雜的聲學環境中，模型仍能保持高準確率。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;體驗方式：&lt;/p&gt; 
&lt;p&gt;ModelScope&lt;strong&gt;：&lt;/strong&gt;https://modelscope.cn/studios/Qwen/Qwen3-ASR-Demo&lt;/p&gt; 
&lt;p&gt;HuggingFace:&amp;nbsp;https://huggingface.co/spaces/Qwen/Qwen3-ASR-Demo&lt;/p&gt; 
&lt;p&gt;阿里雲百鍊 API&lt;strong&gt;：&lt;/strong&gt;https://bailian.console.aliyun.com/?tab=doc#/doc/?type=model&amp;amp;url=2979031&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371054</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371054</guid>
      <pubDate>Sun, 07 Sep 2025 02:20:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Databricks 融資 10 億美元，估值超 1000 億美元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;Databricks &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.databricks.com%2Fcompany%2Fnewsroom%2Fpress-releases%2Fdatabricks-surpasses-4b-revenue-run-rate-exceeding-1b-ai-revenue" target="_blank"&gt;宣佈&lt;/a&gt;即將完成 10 億美元的 K 輪融資，對應估值超過 1000 億美元。此輪融資由 Andreessen Horowitz、Insight Partners、MGX、Thrive Capital 和 WCM Investment Management 共同領投。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Databricks 表示，將利用這筆新資金加速其 AI 戰略——擴展 Agent Bricks，推出全新 Lakebase 產品線，並推動全球增長。以及支持 Databricks 未來的 AI 收購，並深化 AI 研究。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="245" src="https://oscimg.oschina.net/oscnet/up-ba2a1094a2ce8345cb7359294aa377ea3d0.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在公告中，Databricks 還透露了部分財務狀況，披露其第二季度的年收入運行率超過 40 億美元，同比增長 50%，並在過去 12 個月中實現了正自由現金流。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;該公司還表示，其人工智能產品的年營收運行率近期已超過 10 億美元，淨留存率超過 140%，目前有超過 650 家客戶使用 Databricks 的產品，年收入超過 100 萬美元。目前，共有超過 2 萬家企業和組織在使用其軟件。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Databricks 聯合創始人兼首席執行官 Ali Ghodsi 在公告中表示：「我們的團隊正在構建企業未來幾十年將依賴的數據和 AI 基礎設施，從而取得這些成果。有了這筆新資金，我們將能夠加快 Agent Bricks 的發展步伐，幫助各行各業的客戶將其數據轉化為生產級 AI 代理，並在創建新的 Lakebase 類別、為 AI 代理重塑數據庫的過程中獲得更大的發展動力。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Databricks 還指出，在前兩個季度中，該公司已與微軟、谷歌雲、Anthropic、SAP 和 Palantir 建立或擴大了合作伙伴關係。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371049</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371049</guid>
      <pubDate>Sun, 07 Sep 2025 02:07:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>🔥🔥造物分享：流浪地球 550W（MOSS）小智 AI 生態中樞</title>
      <description/>
      <link>https://www.oschina.net/ai-creation/details/2186</link>
      <guid isPermaLink="false">https://www.oschina.net/ai-creation/details/2186</guid>
      <pubDate>Sun, 07 Sep 2025 01:48:00 GMT</pubDate>
    </item>
    <item>
      <title>李彥宏頒發「百度最高獎」：心流團隊獲 100 萬美元獎勵</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;今日，百度創始人李彥宏在內部活動上為技術團隊頒發「百度最高獎」，獲獎團隊得到 100 萬美元獎勵，合人民幣超 700 萬元。「百度最高獎」已歷經 15 屆，語音識別、深度學習平台、大模型等大量 AI 技術均曾獲獎，獎金總金額將近 4 億元人民幣。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-322339010570111171fc427256170f32b22.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據瞭解，「百度最高獎」於 2010 年 7 月設立，鼓勵「小團隊做出大事業」，是百度公司最高級別的獎項，給予每個獲獎團隊 100 萬美元獎勵。獎項評選需滿足三項條件：項目意義重大；成果遠超預期；團隊足夠小，必須是小於等於 10 人。&lt;/p&gt; 
&lt;p&gt;本次百度最高獎的獲獎團隊為「心流」團隊。據介紹，「心流」團隊率先實現了端到端的多模態內容理解與序列生成技術。李彥宏在頒獎時表示，到今天，模型發展已經非常接近臨界點，很快就會有各種有價值的應用被創造出來，「我們生活在一個非常令人興奮、非常令人期待的環境當中」。&lt;/p&gt; 
&lt;p&gt;李彥宏稱，百度搜索已有近 70% 結果含有 AI 生成內容，且通過「百看」帶來富媒體形式，是全球所有的搜索引擎當中改造最激進的，這也代表搜索引擎的未來。&lt;/p&gt; 
&lt;p&gt;同時，百度慧博星數字人已達到「以假亂真」的地步，「很多人看不出是數字人還是真人」；百度蘿蔔快跑已覆蓋全球 16 座城市，代表着最新一代的無人駕駛技術。&lt;/p&gt; 
&lt;p&gt;頒獎典禮現場，李彥宏在談及 AI 發展時指出，「AI 大模型發展到今天，其實已接近了臨界點，很快就會有各種各樣非常有價值的應用能夠創造出來，我們正生活在一個非常令人興奮、非常令人期待的市場環境當中。」&lt;/p&gt; 
&lt;p&gt;「我們所從事的每一項工作都代表着未來，我也希望大家和我一起去期待，去迎接、去奮鬥出一個創新在 C 位的社會。」李彥宏表示。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/370987</link>
      <guid isPermaLink="false">https://www.oschina.net/news/370987</guid>
      <pubDate>Sat, 06 Sep 2025 11:28:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
  </channel>
</rss>
