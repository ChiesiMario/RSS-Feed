<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - industry - 繁體中文（香港）</title>
    <link>https://www.oschina.net/news/industry</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/industry" rel="self" type="application/rss+xml"/>
    <description>已對該 RSS 進行格式化操作：中英字符之間插入空格、使用直角引號、標點符號修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-hk</language>
    <lastBuildDate>Mon, 23 Jun 2025 16:46:45 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>宇樹王興興為高考生送上報考建議</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;隨着高考成績、分數線陸續公佈，對於那些想投身具身智能行業的考生，宇樹科技創始人王興興發文結合自身的經歷給出一些專業報考建議。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="264" src="https://oscimg.oschina.net/oscnet/up-513fc7219a635ce3cbb2d6d3d7ae7738440.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;如果你從小喜歡拆解維修一些電子產品，或者動手 DIY 做點東西，推薦學習機械或電子相關專業。具體的專業細分名字很多，請注意區分，對於自己感興趣的學校和專業，大家最好直接去對應學院的官網，直接看看具體的詳細介紹，看看老師們在做什麼課題或項目。哪怕專業名字一模一樣，每個學校的差別也非常大。中間如果想多學習 AI，也可以多花時間自學。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;如果你對智能如何產生感興趣、如果你有 AGI 的夢想，且數學還不錯，推薦直接學習計算機科學/人工智能相關專業，也一併請直接多查查對應學院的詳細信息，甚至可以直接先去對應實驗室看看。當然，還是建議中間可以稍微花一些時間，學習一些硬件相關的原理，比如自己動手畫個 PCB 板子等，簡單實用。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;當然，現實裏，大多數同學沒有那麼幸運，能直接進入自己理想的學校和專業，或者進入以後發現不適合自己或者不喜歡。這其實完全不是大問題，非常常見和正常。請不要放棄努力尋找自己喜歡和擅長的事，尋找新的方向，並請一定努力去實踐。你可以轉專業，哪怕轉不了，也一點問題沒有，你可以直接去找自己感興趣方向的老師，直接溝通去他的實驗室做事，甚至完全可以直接全都自學。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;後續上學時，請大家也不要侷限於書本和論文，具身智能是物理世界的智能，一定要多動手，擰螺絲、調電路、寫程序、debug，馬上自己動手編程，進入實驗室、參與機器人比賽等等，在實戰中迅速提升自己。我自己至今，也還會自己直接上手拆裝零部件，敲敲代碼等。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;如果你想成為最頂尖的人才，一定要超脱課本，主動持續學習，學習當下最前沿的科技領域。持續關注頂級學術會議最新論文等；積極參與最具探索性的開源項目並嘗試復現和改進；與同樣渴望挑戰邊界的同學、研究者組建小組，共同探討前沿問題，碰撞思想。每個同學，都有機會成為全人類未來科技方向的探索者和實踐者。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;最後，我想説，在未來的學業中，你們或許會感到迷茫，不知前進的方向，但不要擔心，每個人都會迷茫，我也一樣。在大學期間，要較多的探索自己的多種可能性，多嘗試，找到愛好點和擅長點。如果你的愛好恰巧也是你擅長的，那恭喜你，你找到了可以為之奮鬥一生的目標。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;在成長過程中，你們可能目睹了一次又一次的時代浪潮，見證了一個又一個商業奇蹟，外貿、房地產、基建、互聯網、消費電子、移動互聯網、新能源汽車，等等。可能你們會羨慕前人，覺得機會變少了，覺得宇宙的科技樹沒有太多可以探索的了。但請不要灰心，AI 和機器人的時代才剛剛開始，還有大量的挑戰和機會在等你們。&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356888</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356888</guid>
      <pubDate>Sat, 10 May 2025 10:18:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>網易有道開源首個專注數學教育的模型 Confucius3-Math</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;網易有道宣佈正式開源「子曰 3」系列大模型的數學模型（英文名稱 Confucius3-Math），這是國內首個專注於數學教育，可在單塊消費級 GPU 上高效運行的開源推理模型。&lt;/p&gt; 
&lt;p&gt;據瞭解，Confucius3-Math 是由網易有道 AI 團隊開發的&lt;strong&gt;140 億參數開源推理大語言模型&lt;/strong&gt;，專門針對 K-12 數學教育場景進行優化。與通用模型不同，Confucius3-Math 具有以下特點：&lt;/p&gt; 
&lt;p&gt;✅&lt;strong&gt;數學任務上的頂尖性能&lt;/strong&gt;&lt;br&gt; 通過專門的強化學習訓練，在中文 K-12 數學問題上的表現超越了參數規模更大的模型&lt;/p&gt; 
&lt;p&gt;✅&lt;strong&gt;高性價比的部署方案&lt;/strong&gt;&lt;br&gt; 可在單張消費級 GPU（如 RTX 4090D）上高效運行&lt;/p&gt; 
&lt;p&gt;✅&lt;strong&gt;文化與課程體系的深度契合&lt;/strong&gt;&lt;br&gt; 針對中國國家數學課程標準和解題方法論進行了優化&lt;/p&gt; 
&lt;p&gt;Confucius3-Math 採用純強化學習的後期訓練流程，結合創新的數據調度策略和改進的組相對優勢估計器開發而成。Confucius3-Math 在解決國內數學問題任務中展現出了顯著優勢。其通過大規模增強學習以及一系列的創新算法，訓練成本僅為 2.6 萬美元，推理性能約為 DeepSeek R1 的 15 倍。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-8732b5278351553b8f60ad1d228c44e8d50.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;附 1：Demo 地址，歡迎試用&lt;br&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fconfucius.youdao.com%2F" target="_blank"&gt;https://confucius.youdao.com/&lt;/a&gt;&lt;br&gt; 附 2：模型開源地址&lt;br&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnetease-youdao%2FConfucius3-Math" target="_blank"&gt;https://github.com/netease-youdao/Confucius3-Math&lt;/a&gt;&lt;br&gt; 附 3：論文地址&lt;br&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnetease-youdao%2FConfucius3-Math%2Fblob%2Fmain%2FConfucius3-Math.pdf" target="_blank"&gt;https://github.com/netease-youdao/Confucius3-Math/blob/main/Confucius3-Math.pdf&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356885</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356885</guid>
      <pubDate>Sat, 10 May 2025 09:50:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>ChinaTextbook —— 所有小初高、大學 PDF 教材</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                        
                                                                                    &lt;p&gt;&lt;span style="background-color:#ffffff; color:#1f2328"&gt;雖然國內教育網站已提供免費資源，但大多數普通人獲取信息的途徑依然受限。有些人利用這一點，在某站上銷售這些帶有私人水印的資源。為了應對這種情況，將這些資源集中並開源，以促進義務教育的普及和消除地區間的教育貧困。&lt;/span&gt;&lt;/p&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;小學數學&lt;/h3&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%20%C2%B7%20%E6%95%B0%E5%AD%A6%E4%B8%80%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;一年級上冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%B8%80%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;一年級下冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%20%C2%B7%20%E6%95%B0%E5%AD%A6%E4%BA%8C%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;二年級上冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%BA%8C%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;二年級下冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%20%C2%B7%20%E6%95%B0%E5%AD%A6%E4%B8%89%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;三年級上冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%B8%89%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;三年級下冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%20%C2%B7%20%E6%95%B0%E5%AD%A6%E5%9B%9B%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;四年級上冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E5%9B%9B%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;四年級下冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%20%C2%B7%20%E6%95%B0%E5%AD%A6%E4%BA%94%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;五年級上冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%BA%94%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;五年級下冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%20%C2%B7%20%E6%95%B0%E5%AD%A6%E5%85%AD%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;六年級上冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E5%85%AD%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;六年級下冊&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;初中數學&lt;/h3&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%88%9D%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88-%E4%BA%BA%E6%B0%91%E6%95%99%E8%82%B2%E5%87%BA%E7%89%88%E7%A4%BE/%E4%B8%83%E5%B9%B4%E7%BA%A7/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%B8%83%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;初一上冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%88%9D%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88-%E4%BA%BA%E6%B0%91%E6%95%99%E8%82%B2%E5%87%BA%E7%89%88%E7%A4%BE/%E4%B8%83%E5%B9%B4%E7%BA%A7/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%B8%83%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;初一下冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%88%9D%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88-%E4%BA%BA%E6%B0%91%E6%95%99%E8%82%B2%E5%87%BA%E7%89%88%E7%A4%BE/%E5%85%AB%E5%B9%B4%E7%BA%A7/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E5%85%AB%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;初二上冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%88%9D%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88-%E4%BA%BA%E6%B0%91%E6%95%99%E8%82%B2%E5%87%BA%E7%89%88%E7%A4%BE/%E5%85%AB%E5%B9%B4%E7%BA%A7/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E5%85%AB%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;初二下冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%88%9D%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88-%E4%BA%BA%E6%B0%91%E6%95%99%E8%82%B2%E5%87%BA%E7%89%88%E7%A4%BE/%E4%B9%9D%E5%B9%B4%E7%BA%A7/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%B9%9D%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;初三上冊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%88%9D%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88-%E4%BA%BA%E6%B0%91%E6%95%99%E8%82%B2%E5%87%BA%E7%89%88%E7%A4%BE/%E4%B9%9D%E5%B9%B4%E7%BA%A7/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%B9%9D%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;初三下冊&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;高中數學&lt;/h3&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/tree/master/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88%EF%BC%88A%E7%89%88%EF%BC%89%EF%BC%88%E4%B8%BB%E7%BC%96%EF%BC%9A%E7%AB%A0%E5%BB%BA%E8%B7%83%26%E6%9D%8E%E5%A2%9E%E6%B2%AA%EF%BC%89-%E4%BA%BA%E6%B0%91%E6%95%99%E8%82%B2%E5%87%BA%E7%89%88%E7%A4%BE"&gt;目錄&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;大學數學&lt;/h3&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/tree/master/%E5%A4%A7%E5%AD%A6/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E5%90%8C%E6%B5%8E%E5%A4%A7%E5%AD%A6%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E7%AC%AC%E4%B8%83%E7%89%88"&gt;高等數學&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/tree/master/%E5%A4%A7%E5%AD%A6/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0"&gt;線性代數&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/tree/master/%E5%A4%A7%E5%AD%A6/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6"&gt;離散數學&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/tree/master/%E5%A4%A7%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA"&gt;概率論&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.dxsx.net/index.php"&gt;更多數學資料-(大學數學網)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div style="text-align:start"&gt;
&lt;h2&gt;問題：如何合併被拆分的文件？&lt;/h2&gt;
&lt;/div&gt;

&lt;p style="color:#1f2328; text-align:start"&gt;由於 GitHub 對單個文件的上傳有最大限制，超過 100MB 的文件會被拒絕上傳，超過 50MB 的文件上傳時會收到警告。因此，文件大小超過 50MB 的文件會被拆分成每個 35MB 的多個文件。&lt;/p&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;示例&lt;/h3&gt;
&lt;/div&gt;

&lt;p style="color:#1f2328; text-align:start"&gt;文件被拆分的示例：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;義務教育教科書 · 數學一年級上冊.pdf.1&lt;/li&gt;
&lt;li&gt;義務教育教科書 · 數學一年級上冊.pdf.2&lt;/li&gt;
&lt;/ul&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;解決辦法&lt;/h3&gt;
&lt;/div&gt;

&lt;p style="color:#1f2328; text-align:start"&gt;要合併這些被拆分的文件，您只需執行以下步驟 (其他操作系統同理)：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;將合併程序&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;mergePDFs-windows-amd64.exe&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;下載到包含 PDF 文件的文件夾中。&lt;/li&gt;
&lt;li&gt;確保&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;mergePDFs-windows-amd64.exe&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;和被拆分的 PDF 文件在同一目錄下。&lt;/li&gt;
&lt;li&gt;雙擊&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;mergePDFs-windows-amd64.exe&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;程序即可自動完成文件合併。&lt;/li&gt;
&lt;/ol&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;下載方式&lt;/h3&gt;
&lt;/div&gt;

&lt;p style="color:#1f2328; text-align:start"&gt;您可以通過以下鏈接，下載文件合併程序：&lt;/p&gt;

&lt;p style="color:#1f2328; text-align:start"&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook-tools/releases"&gt;下載文件合併程序&lt;/a&gt;&lt;/p&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;文件和程序示例&lt;/h3&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;mergePDFs-windows-amd64.exe&lt;/li&gt;
&lt;li&gt;義務教育教科書 · 數學一年級上冊.pdf.1&lt;/li&gt;
&lt;li&gt;義務教育教科書 · 數學一年級上冊.pdf.2&lt;/li&gt;
&lt;/ul&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/chinatextbook</link>
      <guid isPermaLink="false">https://www.oschina.net/p/chinatextbook</guid>
      <pubDate>Sat, 10 May 2025 09:43:00 GMT</pubDate>
    </item>
    <item>
      <title>谷歌 AI 編程工具 Gemini Code Assist 發佈更新，增強上下文管理能力</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;谷歌 AI 編程助手&amp;nbsp;Gemini Code Assist 近日&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2FGoogleCloudTech%2Fstatus%2F1936136971849441648" target="_blank"&gt;發佈更新&lt;/a&gt;&lt;/u&gt;，集成了最新的&amp;nbsp;Gemini 2.5&amp;nbsp;模型，帶來了更強的個性化和更靈活的上下文管理。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0623/174100_cmzw_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;用户現在可以創建自定義快捷命令來處理重複性任務，並在&amp;nbsp;VS Code&amp;nbsp;或&amp;nbsp;JetBrains IDE&amp;nbsp;的&amp;nbsp;Gemini&amp;nbsp;設置中配置項目編碼規範，這些規則在每次生成代碼時自動生效。&lt;/p&gt; 
&lt;p&gt;上下文管理方面，Gemini Code Assist&amp;nbsp;支持將整個文件夾或工作區加入上下文，上下文窗口可達&amp;nbsp;100 萬 tokens，並可通過「@」符號精確添加特定文件或目錄。&lt;/p&gt; 
&lt;p&gt;此外，新增的上下文抽屜（Context Drawer）可視化面板能顯示當前參與對話的文件與路徑，支持一鍵添加/移除。聊天窗口右上角現可開啓多個會話，所有歷史對話會自動保存並支持一鍵恢復。&lt;/p&gt; 
&lt;p&gt;同時，Google 的&amp;nbsp;Jules 異步編碼代理也將登陸&amp;nbsp;AI Studio，未來可能以「Vibe coding」桌面應用的形式推出。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356882</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356882</guid>
      <pubDate>Sat, 10 May 2025 09:41:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>開源鴻蒙代碼規模突破 1.3 億行</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FEGCrwLfPlELGTq0DGmeTZw" target="_blank"&gt;據 OpenAtom OpenHarmony 分享&lt;/a&gt;，2025 年 6 月 21 日，由開源鴻蒙項目羣工作委員會主辦的開源鴻蒙社區年中技術會議在東莞三丫坡盛大召開。&lt;/p&gt; 
&lt;p&gt;開源鴻蒙項目羣工作委員會主席、華為終端 BG 軟件部總裁龔體為本次大會致辭。他表示，&lt;strong&gt;開源四年多來，開源鴻蒙實現全面生態躍遷：代碼規模突破 1.3 億行，凝聚 8700 多位開發者智慧&lt;/strong&gt;；社區治理持續升級，新增 8 個關鍵 SIG，系統性補齊路由、北斗、Web 等關鍵技術版圖；400 餘家生態夥伴的 1200 餘款產品通過兼容性測評，覆蓋金融、交通、教育、醫療、航天等多個行業領域。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-a8c873b452dab8e67e8a87ad3868acef8dc.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;消費端同步跨越升級 —— 鴻蒙 PC、Pura X 及 nova 系列設備全面搭載 HarmonyOS 5 操作系統，2 萬多個原生應用與元服務成功上架，標誌着萬物智聯生態正式進入規模化落地新階段。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356872</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356872</guid>
      <pubDate>Sat, 10 May 2025 09:13:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>百度文心快碼 AI IDE 上線</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;百度文心快碼宣佈上線獨立 AI 原生開發環境工具 Comate AI IDE。根據介紹，Comate AI IDE 是行業首個多模態、多智能體協同 AI IDE，首創設計稿一鍵轉代碼，模型已接入文心 4.0 X1 Turbo，開箱即用。目前百度每天新增的代碼中，文心快碼生成的代碼佔比已超過 43%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="271" src="https://oscimg.oschina.net/oscnet/up-933809d1b828cf04041454b88391e408dd4.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#1a1a1a; text-align:justify"&gt;&lt;span style="color:#000000"&gt;不同於當前主流 AI 代碼助手以插件形態附着在 VS Code、JetBrains 等開發平台，Comate AI IDE 完全自研，重構從編輯器交互到底層邏輯的全鏈路開發體驗。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#1a1a1a; text-align:justify"&gt;&lt;span style="color:#000000"&gt;核心技術上，Comate AI IDE 集成了文心 4.0 X1 Turbo 模型與升級版 Zulu 智能體，支持自動任務拆解與自主決策執行。開發者可通過自然語言或語音輸入複雜需求，由智能體自主生成代碼、實時預覽、持續優化。例如，開發者上傳 Figma 設計稿，系統可自動生成高還原度前端代碼，省去大量重複性編寫工作。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356871</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356871</guid>
      <pubDate>Sat, 10 May 2025 09:09:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>馬斯克：xAI 計劃用 Grok 3.5 重寫人類知識庫</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近日，馬斯克在 X&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Felonmusk%2Fstatus%2F1936333964693885089" target="_blank"&gt;宣佈&lt;/a&gt;，旗下 AI 公司 xAI 將用新一代大模型 Grok 3.5（或許直接叫 Grok 4）重寫整個人類知識庫，添加缺失信息，刪除錯誤內容，然後基於這個「純淨版」知識庫重新訓練模型。&lt;/p&gt; 
&lt;p&gt;馬斯克認為，在任何基於未修正數據訓練的基礎模型中，都有太多的垃圾。&lt;/p&gt; 
&lt;p&gt;AI 為了迎合用户的要求，會自己加戲，從而憑空想象出很多不存在，或者還未發生的細節，直接當成真實事件嵌入到文章裏。而一旦這樣的內容多了，這些看似真實的內容甚至會被 AI 重新咀嚼回去訓練，再被下一次輸出時引用。這時候，真真假假就更難以分辨了。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-b1fa8925a68e196d59d0eb4bed7287ebb5b.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;簡單來説，馬斯克想讓 Grok 成為人類知識的審核員和補全者。據悉，新一代 Grok 擁有高級推理能力，能夠識別知識庫中的錯誤和缺失。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356867</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356867</guid>
      <pubDate>Sat, 10 May 2025 08:48:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>《鴻蒙智能體框架白皮書》發佈</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;華為正式發佈了鴻蒙智能體框架（Harmony Agent Framework，HMAF）以及《Agent 時代，鴻蒙應用生而智能 —— 鴻蒙智能體框架白皮書》，全面且系統地定義了在鴻蒙系統下，操作系統、鴻蒙應用 / 元服務與智能體之間相互交互以及協同合作的全新範式。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1660" src="https://static.oschina.net/uploads/space/2025/0623/162018_MUZn_2720166.png" width="1316" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;鴻蒙智能體框架的核心目標是建立一個具備自主決策、羣體協作能力的 AI 生態系統，全面賦能應用智能化升級。&lt;/p&gt; 
&lt;p&gt;無論是手機、手錶、PC，還是其他智能終端，鴻蒙智能體都能夠在各設備之間高度協同與互動。系統級智能體小藝和應用 Agent 的深度融合，能夠實現無縫協作，讓用户的需求和意圖可以通過智能體間的協作流暢實現。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1664" src="https://static.oschina.net/uploads/space/2025/0623/162449_PJXg_2720166.png" width="2234" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0623/162552_RABO_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;與此同時，華為還推出了小藝智能體開放平台，旨在全方位賦能開發者，驅動智能體開發的蓬勃開展。通過小藝智能體開放平台，開發者可以快速構建符合自己需求的智能體，並藉助鴻蒙系統級的分發入口，精準觸達目標用户。平台還提供了豐富的插件、新手引導指南等，將開發門檻降低到新手開發者也能夠迅速上手的程度。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0623/163017_fsUG_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;更多內容查看&amp;nbsp;&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Fdoc%2Fguidebook%2Fai-agent-0000002355199797" target="_blank"&gt;https://developer.huawei.com/consumer/cn/doc/guidebook/ai-agent-0000002355199797&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;閲讀更多：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/news/356477" target="news"&gt;《鴻蒙編程語言白皮書》發佈&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356864</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356864</guid>
      <pubDate>Sat, 10 May 2025 08:31:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>第二屆壁仞科技 「飛翔杯」 AI 應用創新挑戰賽</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;6 月 20 日，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;由上海市計算機行業協會、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;上海&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;壁仞科技&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;股份有限公司&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主辦&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;上海臨港浦江國際科技城&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;發展有限公司&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;、浙江大學&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;上海&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;高等研究院、模力方舟（ Gitee AI ）、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;杭州&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一驀&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;信息&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;科技&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;有限公司&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;承辦&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;上海農村商業銀行股份有限公司協辦的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#c00000"&gt;&lt;strong&gt;第二屆壁仞科技「飛翔杯」 AI 應用創新挑戰賽&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;正式啓幕。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:center"&gt;&lt;img height="4146" src="https://oscimg.oschina.net/oscnet/up-8adee0809261b27666b62893ecf019e0589.png" width="2160" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本屆大賽以&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;「智領創新應用，芯啓 AI 藍圖」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;為主題，基於壁仞科技自主研發的高性能 GPU ，通過「技術賦能+場景驅動」的雙輪機制，聚焦智能政務、醫療健康、教育科技、金融法律等八大重點行業領域，面向企業開發者、高校科研團隊及個人創客徵集具備商業價值與社會效益的 AI 應用，旨在促進國產算力基礎設施與實體經濟深度融合。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;據悉，本屆大賽獲得了重點高校、場景企業、投資機構、金融機構等 12 家單位支持。壁仞科技更是攜手合作夥伴向參賽選手提供了「五重驚喜」，打造國產 GPU 背景下的更宏偉的 AI 應用藍圖。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;第二屆壁仞科技「飛翔杯」AI 應用創新挑戰賽&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:center"&gt;&lt;strong&gt;&lt;a href="https://www.oschina.net/biren_fxcup/" rel="nofollow"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;報，名&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;賽事日程&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;table cellspacing="0" style="border-collapse:collapse; border:none; font-family:&amp;quot;Times New Roman&amp;quot;; font-size:10pt; margin-left:-0.6000pt; width:427.8000pt"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-bottom:none; border-left:none; border-right:none; border-top:none; height:59.0500pt; vertical-align:top; width:71.3000pt"&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;報，名 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;6 月 20 日&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-bottom:none; border-left:none; border-right:none; border-top:none; height:59.0500pt; vertical-align:top; width:76.2500pt"&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;開，始 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;提，交 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;7 月 11 日&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-bottom:none; border-left:none; border-right:none; border-top:none; height:59.0500pt; vertical-align:top; width:80.5000pt"&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;截，止&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;提，交&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;8 月 15 日&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-bottom:none; border-left:none; border-right:none; border-top:none; height:59.0500pt; vertical-align:top; width:57.1500pt"&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;復，審&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;- 9&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;月&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-bottom:none; border-left:none; border-right:none; border-top:none; height:59.0500pt; vertical-align:top; width:71.3000pt"&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;決，賽 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;8 - &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;月&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-bottom:none; border-left:none; border-right:none; border-top:none; height:59.0500pt; vertical-align:top; width:71.3000pt"&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;頒，獎&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;9 月&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;參賽對象&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;面向企業開發者、高校科研團隊及個人創客，並以團體賽形式報名，每隊限定 1~5 個人。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;賽題設置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本次大賽設置揭榜賽題和常規賽題兩類賽題。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;揭榜賽題由壁仞科技、華山醫院、一驀科技出題，聚焦 AI4S、智慧醫療、實訓項目三大場景。揭榜賽題直接匹配企業現有需求，更有機會直接獲取合作機會及資金支持。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;常規賽題聚焦智慧政務、醫療健康、教育科技、金融法律、文化傳媒、具身智能、先進製造、互聯網電商等八大重點行業領域。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;報名方式&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;即日起，第二屆壁仞科技「飛翔杯」AI 應用創新挑戰賽正式開啓報名啦！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;報名方式一：&lt;/span&gt;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fruw9xpnpiv.feishu.cn%2Fshare%2Fbase%2Fform%2Fshrcnp5GagUPERraQX0KsrkqHIc" rel="nofollow" target="_blank"&gt;&lt;u&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#0000ff"&gt;&lt;u&gt;&lt;span&gt;https://ruw9xpnpiv.feishu.cn/share/base/form/shrcnp5GagUPERraQX0KsrkqHIc&lt;/span&gt;&lt;/u&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;報名方式二：掃描下方二維碼，獲取報名信息。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;img height="252" src="https://oscimg.oschina.net/oscnet/up-a9e468acbf6bd697baae4d8393b3e2d3616.png" width="257" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;作品提交&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;報名成功後，行業組與高校組作品分不同的平台進行提交。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;行業組作品提交&lt;/strong&gt;：模力方舟平台；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;高校組作品提交&lt;/strong&gt;：浙大智海 Mo 平台；&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;提交內容為 zip 壓縮包，包含在線演示視頻錄製、應用介紹 PPT、DEMO 體驗地址、代碼工程（可選）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;參賽即可獲得五重驚喜！&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;1、高性能算力支持：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;依託壁仞科技自主研發的高性能 GPU，大賽組織方已上線 8 大類近 20 種典型模型的 API 接口，並提供大量免費算力券！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;2、全棧式技術指導：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;強大技術團隊坐鎮！參賽者可獲得來自壁仞科技及合作伙伴提供的 GPU 算力支持及模型調用專業指導。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;3、專業評審團隊：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;由行業專家、資深工程師、學術界大咖、資深投資人組成的評審委員會，確保比賽的公正性和專業性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;4、&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;最高可獲 5 萬元獎勵：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本屆「飛翔杯」大賽設立豐厚獎金池！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本次大賽分為卓越、標杆、創新、潛力四大等級，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;行業組最高獎勵可達 5 萬元，高校組最高獎勵 3 萬元！&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;值得一提的是，所有獲獎團隊將會獲得賽事組織方頒發的獲獎證書，獲獎團隊隊員可獲得壁仞科技提供的優秀 AI 應用開發者證書！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;5、&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;超豪華曝光大禮包：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;投資人面對面：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;進入決賽的團隊可獲得與投資機構交流的機會！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;OFFER 請查收：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;優勝者將有機會獲得壁仞科技合作機會、實習就業直通卡！參與技術社區線下沙龍活動，與大咖深入交流！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;大商機強曝光：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;參與揭榜題及有意商業化的項目，主辦方將於賽事結束後為團隊對接感興趣的企業，為項目提供業務合作機會！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;趕快報名「飛翔杯」AI 應用創新挑戰賽吧，讓夢想在這裏啓航！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#8f959e"&gt;*大賽解釋權歸大賽組委會&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;關於壁仞科技：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;壁仞科技成立於 2019 年，致力於研發高性能通用 GPU，打造自主原創的高性能 GPU 軟硬件體系，構建國產智能計算產業生態。首代壁仞通用 GPU 產品基於原創訓推一體芯片架構，已在多地智算中心落地。新一代全國產產品研發正全面推進。近期，壁仞科技實現中國首個四種及以上異構芯片混訓技術落地，突破了大模型算力孤島難題，引領業界異構混訓技術發展趨勢。合作伙伴包括中國移動、中國電信、中興通訊等。截至目前，壁仞科技在全球多個國家和地區累計申請專利近 1200 項，獲得專利授權 430 餘項&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;想了解壁仞科技更多信息，請前往&lt;/span&gt;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.birentech.com%2F%25E8%258E%25B7%25E5%258F%2596%25E3%2580%2582" rel="nofollow" target="_blank"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3370ff"&gt;https://www.birentech.com/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;獲取。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4806939/blog/18633161</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4806939/blog/18633161</guid>
      <pubDate>Sat, 10 May 2025 08:03:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>模力方舟 17 款 Embedding 和 Reranker 模型全部免費使用</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;為了讓更多開發者和企業能夠零門檻體驗最前沿的 AI 能力，模力方舟攜手國產 GPU 夥伴，已將模型廣場中 17 款 Embedding 與 Reranker 模型全部開放免費使用——其中包括最新的 4096 維 Qwen3-Embedding-8B。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0623/160005_Q4xj_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;RAG 架構必備的檢索向量和重排序能力，即刻零成本上手！&lt;/p&gt; 
&lt;p&gt;更多免費模型，盡在模力方舟模型廣場：&lt;em&gt;&lt;strong&gt;&lt;a href="https://ai.gitee.com/serverless-api" target="_blank"&gt;https://ai.gitee.com/serverless-api&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356859</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356859</guid>
      <pubDate>Sat, 10 May 2025 08:00:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Anthropic 發佈 Claude Code 的 VS Code 擴展</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Anthropic 已為&amp;nbsp;VS Code&amp;nbsp;發佈了&amp;nbsp;Claude Code&amp;nbsp;擴展。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0623/155007_jjcF_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據介紹，它能自動檢測並安裝，通過自動添加選定文本到&amp;nbsp;Claude&amp;nbsp;的上下文、在&amp;nbsp;VSCode&amp;nbsp;的差異查看器中顯示代碼更改、支持快捷鍵以及查看編輯器中打開的文件等功能來提升編碼體驗。&lt;/p&gt; 
&lt;p&gt;Claude Code for VSCode 插件主要特性：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;集成緊密&lt;/strong&gt; ：安裝後，Claude Code 能與 VSCode 緊密集成， Claucte 提出的編輯建議以內聯方式在文件中顯示，簡化代碼審查和跟蹤過程。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;操作便捷&lt;/strong&gt; ：在 VSCode 中，使用 &lt;code&gt;Cmd+Esc&lt;/code&gt;（Mac）或 &lt;code&gt;Ctrl+Esc&lt;/code&gt;（Windows/Linux）可直接從編輯器打開 Claude Code，也可點擊 UI 中的相應按鈕；使用 &lt;code&gt;Cmd+Option+K&lt;/code&gt;（Mac）或 &lt;code&gt;Alt+Ctrl+K&lt;/code&gt;（Linux/Windows）可插入文件引用。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;功能實用&lt;/strong&gt; ：如代碼片段所述，該插件支持自動檢測已安裝插件，可通過快捷鍵將選中代碼發送至 Claude，還能在 VSCode 的 Diff 視圖中直接查看代碼變更。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下載地址：&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Danthropic.claude-code" target="_blank"&gt;https://marketplace.visualstudio.com/items?itemName=anthropic.claude-code&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356857/claude-code-for-vs-code</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356857/claude-code-for-vs-code</guid>
      <pubDate>Sat, 10 May 2025 07:56:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>MiniMax 宣佈 Hailuo Video Agent 開啓 Beta 公測</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;MiniMax 宣佈旗下視頻創作 Agent 產品——Hailuo Video Agen&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FyphAy5SDzmOzUsNB21lsvA" target="_blank"&gt;t 已開放 Beta 版本&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-118191fd968c50acaec868448d58c4508b0.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據介紹，在 Hailuo Video Agent 中，為了提供足夠大的創意空間，且保證好的質量， MiniMax 做了以下設計：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;拋棄傳統工作流+節點的工具模式，通過 LLM 語言模型的工具調用能力，創新性地支持用户在自然語言描述中構建完整視頻；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;打造視頻構思、資料收集、分鏡製作、剪輯、配音等視頻製作全流程工具集，並通過 Agent 模型在不同階段實現自動調用。為了提高短片創作的質量，我們遴選了所有視頻創作需要的最佳工具集；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Agent 思維鏈可視化，用户實時查看 Agent 創作流程，為自定義編輯功能提供可視窗口與操作空間。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Web 端登錄 https://hailuoai.com/ 即可體驗。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356853</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356853</guid>
      <pubDate>Sat, 10 May 2025 07:41:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>圖挖掘在反作弊場景的應用</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;本文全面探討了營銷活動反作弊與電商反作弊的圖算法應用。首先介紹了黑產薅取活動獎勵、刷單等作弊行為的背景，隨後深入講解了同人挖掘技術，包括同人建模、挖掘步驟及穩定性處理。接着，依次介紹了標籤傳播算法、Fraudar 算法、GCN 網絡的原理、優缺點及應用。最後，文章展望了未來圖算法在風控反作弊應用的發展方向，如多模態數據融合與動態圖實時計算，旨在應對黑產的快速演化，確保營銷活動的公平性與數據真實性。&lt;/p&gt; 
&lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
&lt;h1&gt;01 業務背景&lt;/h1&gt; 
&lt;p&gt;在營銷活動場景中，黑產團夥通過自動化手段大規模獲取活動獎勵，擠佔真實用户權益造成營銷資金浪費，並污染數據指標導致活動效果失真，從而影響運營決策準確性。&lt;/p&gt; 
&lt;p&gt;以當前主流作弊模式為例，黑產實施路徑如下：&lt;/p&gt; 
&lt;p&gt;1. 資源準備階段：通過虛擬機登錄批量購買的百度賬號。&lt;/p&gt; 
&lt;p&gt;2. 任務執行階段：部署自動化腳本模擬用户行為，如視頻播放、廣告點擊等。&lt;/p&gt; 
&lt;p&gt;3. 資金變現階段：使用分散的真實微信賬號進行提現操作。&lt;/p&gt; 
&lt;p&gt;在與反作弊的對抗中，黑產工具持續升級（如改機工具、IP 池輪換等），傳統特徵採集數據趨於分散。我們的反作弊體系從兩個方向不斷提升防禦能力：&lt;/p&gt; 
&lt;p&gt;1. 多維特徵挖掘，包括設備指紋、行為特徵以及環境特徵。&lt;/p&gt; 
&lt;p&gt;2. 關聯團夥分析，包括用户操作模式量化、暱稱相似度分析以及基於賬號-設備-提現賬户等信息建立關聯圖譜。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-b567c76d759b133c58127296b4127e848a9.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上圖為雲手機工具示例。&lt;/p&gt; 
&lt;p&gt;在電商場景中，存在着類似於營銷活動的批量團夥作弊，典型的即刷單。刷單作弊即非真實有購買需求的用户（機器或眾包真人）為了提升店鋪的銷量、評分，替店鋪虛假的下單、評價，然後收取店鋪報酬的一種作弊方式。&lt;/p&gt; 
&lt;span id="OSC_h1_2"&gt;&lt;/span&gt; 
&lt;h1&gt;02 同人挖掘&lt;/h1&gt; 
&lt;span id="OSC_h2_3"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.1 同人建模&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;黑產為了節省成本往往存在賬號、設備共用的情況，因此我們定義「同人」概念：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;若參與活動的賬號、設備背後的主體相同，則為一個同人團夥。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在賬號之外，增加一個同人粒度進行數據監控和風險控制。例如，某人使用 5 個手機號分別註冊 5 個 uid，並使用 2 個身份證進行實名認證，每天在 3 個設備上參與活動，並將收益提取到 2 個微信賬號中，我們希望通過構圖將其歸類為一個同人團夥。&lt;/p&gt; 
&lt;span id="OSC_h3_4"&gt;&lt;/span&gt; 
&lt;h3&gt;2.1.1 同人挖掘&lt;/h3&gt; 
&lt;p&gt;挖掘步驟可分為以下 3 步：&lt;/p&gt; 
&lt;p&gt;1. 以用户百度賬號為節點，共設備 ID/手機號/提現 ID/身份證號（加密）為邊構圖&lt;/p&gt; 
&lt;p&gt;2. 挖掘極大連通子圖，即有邊的強連通判為同人關係&lt;/p&gt; 
&lt;p&gt;3. 在多天參與活動的用户上挖掘同人關係，並與歷史挖掘結果進行拼接，做同人 ID 穩定性處理&lt;/p&gt; 
&lt;span id="OSC_h3_5"&gt;&lt;/span&gt; 
&lt;h3&gt;2.1.2 穩定性處理&lt;/h3&gt; 
&lt;p&gt;在與歷史同人結果拼接時，可將情況分為以下幾類：&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-ab1a6ef3b27b0b9b955c9dc6b8740c0fc75.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;經過穩定性處理後，整體同人 ID 穩定性達 96.8%，排除已知合併等不穩定因素穩定性達 99.3%。&lt;/p&gt; 
&lt;span id="OSC_h2_6"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.2 挖掘結果&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;由於線上已有一對多業務規則，同人團夥會採用多對多打散以繞過規則。&lt;/p&gt; 
&lt;p&gt;以下展示部分典型團夥構圖：&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-7ce79c7f88211177a7133e1a96d8e3daec7.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_7"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.3 同人應用&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;作弊識別&lt;/strong&gt;&lt;/strong&gt;：按照團大小逐漸收斂，從同人作弊株連、團內作弊風險濃度高、同人且有作弊風險幾個思路進行策略迭代。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;發放打壓&lt;/strong&gt;&lt;/strong&gt;：對於作弊風險較低的羊毛黨用户，業務側可根據情況進行獎勵發放打壓。&lt;/p&gt; 
&lt;span id="OSC_h1_8"&gt;&lt;/span&gt; 
&lt;h1&gt;03 標籤傳播算法及其應用&lt;/h1&gt; 
&lt;span id="OSC_h2_9"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.1 標籤傳播算法&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;標籤傳播算法（Label Propagation Algorithm，LPA）是一種基於圖的&lt;strong&gt;&lt;strong&gt;半監督&lt;/strong&gt;&lt;/strong&gt;學習算法，常用於社區檢測和節點分類任務。它通過迭代傳播標籤信息，利用數據結構的相似性來推斷未知節點的標籤。&lt;/p&gt; 
&lt;span id="OSC_h3_10"&gt;&lt;/span&gt; 
&lt;h3&gt;3.1.1 算法流程&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;輸入&lt;/strong&gt;：圖&lt;span class="math-tex"&gt;\(G=(V,E)\)&lt;/span&gt;，已知標籤節點集合&lt;span class="math-tex"&gt;\(V_L\)&lt;/span&gt;，未知標籤節點集合&lt;span class="math-tex"&gt;\(V_U\)&lt;/span&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;輸出&lt;/strong&gt;：所有節點預測標籤&lt;span class="math-tex"&gt;\({\{y_i\}}_{i\in V}\)&lt;/span&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;初始化階段&lt;/strong&gt;：為每個已標記節點&lt;span class="math-tex"&gt;\(v\in V_L\)&lt;/span&gt;分配固定標籤&lt;span class="math-tex"&gt;\(y_v\)&lt;/span&gt;，為每個未標記節點&lt;span class="math-tex"&gt;\(v\in V_U\)&lt;/span&gt;隨機分配標籤（或按先驗分佈分配）。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;迭代傳播階段&lt;/strong&gt;：對於每個未標記節點，將出現頻率最高的鄰居標籤作為自己的新標籤。&lt;/p&gt; 
&lt;p&gt;定義&lt;span class="math-tex"&gt;\(N(v)\)&lt;/span&gt;為節點&lt;span class="math-tex"&gt;\(v\)&lt;/span&gt;的鄰居集合，&lt;span class="math-tex"&gt;\(y_v^{(t)}\)&lt;/span&gt;為節點&lt;span class="math-tex"&gt;\(v\)&lt;/span&gt;在迭代&lt;span class="math-tex"&gt;\(t\)&lt;/span&gt;時的標籤，Ⅱ為指示函數（當&lt;span class="math-tex"&gt;\(y_u=l\)&lt;/span&gt;時為 1，否則為 0）。&lt;/p&gt; 
&lt;p&gt;無權圖標籤更新規則&lt;span class="math-tex"&gt;\(y_v^{(t+1)} = \argmax_l \displaystyle\sum_{u\in N(v)} \Pi(y_u^{t}=l)\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;加權圖標籤更新規則&amp;nbsp;&lt;span class="math-tex"&gt;\(y_v^{(t+1)} = \argmax_l \displaystyle\sum_{u\in N(v)} w_{uv} \cdot\Pi(y_u^{t}=l)\)&lt;/span&gt;，其中&lt;span class="math-tex"&gt;\(w_{uv}\)&lt;/span&gt;為邊權重。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;終止條件&lt;/strong&gt;：當迭代不再改變任何節點的標籤時；或達到最大迭代次數。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-9f71c1149e2ddfb7d9ae359bbdbcd6fc955.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上圖為標籤傳播示例。&lt;/p&gt; 
&lt;span id="OSC_h3_11"&gt;&lt;/span&gt; 
&lt;h3&gt;3.1.2 實踐細節&lt;/h3&gt; 
&lt;p&gt;最高頻率標籤不唯一時：隨機選擇（結果可能不穩定），或結合其他信息（如節點度數等）。&lt;/p&gt; 
&lt;p&gt;傳播順序：同步更新（所有節點同時更新，可能振盪），或異步更新（按隨機或度排序等順序逐個更新）。&lt;/p&gt; 
&lt;span id="OSC_h3_12"&gt;&lt;/span&gt; 
&lt;h3&gt;3.1.3 無監督改進&lt;/h3&gt; 
&lt;p&gt;在&lt;strong&gt;&lt;strong&gt;完全無監督&lt;/strong&gt;&lt;/strong&gt;的情況下，仍然可以通過改進方法實現社區檢測或聚類任務。面對局部最優問題，使用模塊度作為目標函數多次運行。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;算法流程：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1. 隨機初始化所有節點的標籤（如 1 到 K，K 為社區數）&lt;/p&gt; 
&lt;p&gt;2. 執行標準 LPA 迭代，直到收斂，計算模塊度 Q&lt;/p&gt; 
&lt;p&gt;3. 重複多次，選擇模塊度最高的劃分結果&lt;/p&gt; 
&lt;p&gt;模塊度指標的核心思想：社區內部的連接應顯著高於隨機情況&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(Q = \frac{1}{2m} \sum_{i,j}\Big[A_{ij}-\frac{k_ik_j}{2m}\Big]\delta(c_i,c_j)\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;其中&lt;span class="math-tex"&gt;\(A_{ij}\)&lt;/span&gt;為鄰接矩陣元素（節點&lt;span class="math-tex"&gt;\(i\)&lt;/span&gt;和&lt;span class="math-tex"&gt;\(j\)&lt;/span&gt;相連時為 1，否則為 0），&lt;span class="math-tex"&gt;\(k_i\)&lt;/span&gt;為節點&lt;span class="math-tex"&gt;\(i\)&lt;/span&gt;的度數，&lt;span class="math-tex"&gt;\(m\)&lt;/span&gt;為圖中總邊數&lt;span class="math-tex"&gt;\(m=\frac{1}{2}\sum_iki\)&lt;/span&gt;，&lt;span class="math-tex"&gt;\(c_i\)&lt;/span&gt;節點&lt;span class="math-tex"&gt;\(i\)&lt;/span&gt;所屬的社區，&lt;span class="math-tex"&gt;\(\delta(c_i,c_j)\)&lt;/span&gt;若&lt;span class="math-tex"&gt;\(c_i=c_j\)&lt;/span&gt;則為 1，否則為 0。&lt;/p&gt; 
&lt;span id="OSC_h3_13"&gt;&lt;/span&gt; 
&lt;h3&gt;3.1.4 算法優缺點&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;優點：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1. 計算高效：每輪迭代複雜度&lt;span class="math-tex"&gt;\(O(|E|)\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;2. 無需參數調優：完全基於圖結構&lt;/p&gt; 
&lt;p&gt;3. 自然並行化：節點更新可並行執行&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;侷限性：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1. 結果可能不穩定：受初始化順序影響&lt;/p&gt; 
&lt;p&gt;2. 僅利用拓撲結構：忽略節點特徵信息&lt;/p&gt; 
&lt;p&gt;3. 對稀疏圖效果差：鄰居信息不足時傳播受限&lt;/p&gt; 
&lt;span id="OSC_h2_14"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.2 在營銷活動場景的應用&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;在營銷活動場景中，黑產在資源準備和任務執行階段存在批量化的賬號生成和活動行為，在挖掘結果中也經常發現存在暱稱、行為序列等相似的聚集特徵。&lt;/p&gt; 
&lt;span id="OSC_h3_15"&gt;&lt;/span&gt; 
&lt;h3&gt;3.2.1 構圖&lt;/h3&gt; 
&lt;p&gt;以用户賬號為節點，以暱稱與活動點位行為序列為例，分別採用針對字符串、序列相似度的建邊算法。&lt;/p&gt; 
&lt;p&gt;暱稱相似度：兩兩計算用户暱稱的編輯距離，編輯距離越小説明兩個暱稱越相似。&lt;/p&gt; 
&lt;p&gt;序列相似度：拼接用户活動點位（活動行為類型標記）-時間作為行為序列，將序列中的打點轉換為詞頻矩陣，使用 MinHash 估計 Jaccard 相似度。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;實踐細節&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1. 預處理，如做暱稱長度分桶、異常用户篩選等，減少相似度計算量。&lt;/p&gt; 
&lt;p&gt;2. 使用局部敏感哈希（LSH）進行優化，減少搜索空間。&lt;/p&gt; 
&lt;p&gt;3. 可結合業務場景做相似度閾值過濾，縮減構圖輸入。&lt;/p&gt; 
&lt;span id="OSC_h3_16"&gt;&lt;/span&gt; 
&lt;h3&gt;3.2.2 團夥挖掘&lt;/h3&gt; 
&lt;p&gt;使用無監督的 LPA 算法進行團夥挖掘，設定團夥閾值、或結合業務場景添加其他特徵進行作弊識別。&lt;/p&gt; 
&lt;p&gt;下表為實際應用中，通過用户行為序列相似挖掘出的一個團夥部分數據，其設備和地域並不聚集，但暱稱可看出為批量操作。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-cd8efca074b9009b15bde0cbb5f30c8cc46.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_17"&gt;&lt;/span&gt; 
&lt;h1&gt;04 Fraudar 算法及其應用&lt;/h1&gt; 
&lt;p&gt;在電商場景中，用户-店鋪之間天然形成一種二部圖的結構，二部圖是指圖中的節點有兩類、邊有一類，兩類節點互相連接，每類節點本身之間沒有連接。Fraudar 算法是一種適用於二部圖結構的算法，下文詳細介紹我們在電商場景的應用。&lt;/p&gt; 
&lt;span id="OSC_h2_18"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;4.1 Fraudar 算法原理&lt;/strong&gt;&lt;/h2&gt; 
&lt;span id="OSC_h3_19"&gt;&lt;/span&gt; 
&lt;h3&gt;4.1.1 全局可疑度度量&lt;/h3&gt; 
&lt;p&gt;Fraudar 定義了一個全局度量&lt;span class="math-tex"&gt;\(g(S) = \frac{f(S)}{|S|}\)&lt;/span&gt;，其中：&lt;br&gt; ● &lt;span class="math-tex"&gt;\(f(S) = f_v(S) + f_{\epsilon}(S)\)&lt;/span&gt;：子網絡&lt;span class="math-tex"&gt;\(S\)&lt;/span&gt;中節點的可疑度之和（&lt;span class="math-tex"&gt;\(f_v\)&lt;/span&gt;）與邊的可疑度之和（&lt;span class="math-tex"&gt;\(f_{\epsilon}\)&lt;/span&gt;）；&lt;br&gt; ● 假設在一個用户-商品二部圖中，那麼&lt;span class="math-tex"&gt;\(f_v(S)\)&lt;/span&gt;可以理解為用户或商品的獨立可疑度，&lt;span class="math-tex"&gt;\(f_{\epsilon}(S)\)&lt;/span&gt;可以理解為用户在商品下的訂單/評論的可疑度。&lt;br&gt; ● &lt;span class="math-tex"&gt;\(|S|\)&lt;/span&gt;：子網絡的規模（節點數）。&lt;br&gt; &lt;span class="math-tex"&gt;\(g(S)\)&lt;/span&gt;表示一個網絡的平均可疑度，滿足以下四個屬性：&lt;/p&gt; 
&lt;p&gt;1. （節點可疑度）當節點總數、邊可疑度保持一致時，由較高可疑度的節點組成的網絡比由較低可疑度節點組成的網絡更可疑。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(|S| = |S'| \land f_{\epsilon}(S) = f_{\epsilon}(S') \land f_v(S) &amp;gt; f_v(S') \Rightarrow g(S) &amp;gt; g(S')\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;2. （邊可疑度）其他條件不變，在網絡中添加邊會增加該網絡的可疑度。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(e \notin \epsilon \Rightarrow g(S(v, \epsilon \cup \{e\})) &amp;gt; g(S(v, \epsilon))\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;3. （大小）假設節點和邊的權重都相等，邊的密度也相等，那麼更大的網絡比小的網絡更可疑。其中邊的密度$\rho(S)$定義為網絡中的邊數除以它可能的最大邊數。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(|S| &amp;gt; |S'| \land S \supset S' \land \rho(S) = \rho(S') \Rightarrow g(S) &amp;gt; g(S')\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;4. (集中度) 較小的網絡比相同總可疑度但規模更大的網絡更可疑。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(|S| &amp;lt; |S'| \land f(S) = f(S') \Rightarrow g(S) &amp;gt; g(S')\)&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_20"&gt;&lt;/span&gt; 
&lt;h3&gt;4.1.2 抗偽裝設計&lt;/h3&gt; 
&lt;p&gt;即使虛假賬户添加大量正常連接（偽裝），算法仍能通過識別局部密集子網絡發現異常，因為偽裝行為會導致整體網絡稀疏化，而欺詐子網絡仍保持高密度。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-12ea6c9656a0117fc3f04e647772db3cd0d.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上圖是虛假賬户常用的偽裝方法，假設為用户-商品網絡，那麼（a）刷單用户通過向正常商品隨機下單偽裝；（b）刷單用户通過向正常商品添加有偏的偽裝；（c）刷單用户劫持一些正常賬户。&lt;/p&gt; 
&lt;p&gt;算法使用了列權重作為邊權的方式來抗偽裝，即利用商品的邊數來定義邊權。在一個用户商品圖中，算法先確定商品節點的數量，利用 1/log(商品節點邊數+5) 確定邊權 （邊可疑度），然後按照邊權彙總求取商品節點、用户節點的權重（節點可疑度）。&lt;/p&gt; 
&lt;span id="OSC_h3_21"&gt;&lt;/span&gt; 
&lt;h3&gt;4.1.3 算法實現流程&lt;/h3&gt; 
&lt;p&gt;利用列權重定義邊權能夠抵抗虛假賬户向正常商品增加邊的偽裝，因為是往正常商品增加邊，不會影響欺詐商品的邊數，也即三種偽裝方式的欺詐塊仍然是高權重的/密集的。而如果使用行權重，那麼一個用户通過向正常商品增加邊，就可以稀釋自己的欺詐邊的可疑度，達到偽裝的目的。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-3f0893250a1894485d2ba5248e81434106c.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上圖是 Fraudar 算法的步驟。迭代移除當前優先級最高的節點（可疑度貢獻最低的節點），逐步縮小網絡規模，直至所有節點被移除。每一步記錄剩餘子網絡的全局可疑度&lt;span class="math-tex"&gt;\(g(S)\)&lt;/span&gt;。在所有迭代步驟中，&lt;span class="math-tex"&gt;\(g(S)\)&lt;/span&gt;值會先增大後減小，算法保留每一步的迭代結果，選擇&lt;span class="math-tex"&gt;\(g(S)\)&lt;/span&gt;達到最大值的子網絡作為最可疑的欺詐團夥。&lt;/p&gt; 
&lt;p&gt;由於遍歷刪除圖中可疑度最低的節點是個&lt;span class="math-tex"&gt;\(O(|V|^2)\)&lt;/span&gt;的操作（迭代&lt;span class="math-tex"&gt;\(|V|\)&lt;/span&gt;次，每次找到可疑度最低的節點&lt;span class="math-tex"&gt;\(O(|V|)\)&lt;/span&gt;），因此算法引入了優先樹（小頂堆），葉子節點對應圖中的節點，父節點記錄子節點中的最高優先級，以此實現快速訪問和更新優先級。優化後算法需要迭代邊數次，每次查找和更新節點優先級的複雜度變為&lt;span class="math-tex"&gt;\(O(log|V|)\)&lt;/span&gt;，算法的總時間複雜度為&lt;span class="math-tex"&gt;\(O(|\epsilon| log|V|)\)&lt;/span&gt;。&lt;/p&gt; 
&lt;p&gt;另外，在實際應用中，只獲得可疑度最大的子圖可能並不夠用，可以在獲取一個可疑度最大子圖後將其中原始圖中刪除，然後再在剩餘的圖中獲取次可疑的子圖，循環往復得到多個可疑子圖。&lt;/p&gt; 
&lt;span id="OSC_h3_22"&gt;&lt;/span&gt; 
&lt;h3&gt;4.1.4 優缺點及改進方向&lt;/h3&gt; 
&lt;p&gt;優勢：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 抗偽裝能力&lt;/strong&gt;&lt;/strong&gt;通過全局度量而非局部密度，算法能抵抗虛假賬户添加正常連接的行為，即使部分節點被「污染」，仍能準確識別核心欺詐簇。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 高效性與可擴展性&lt;/strong&gt;&lt;/strong&gt;利用優先樹結構優化節點移除操作，時間複雜度為&lt;span class="math-tex"&gt;\(O(|\epsilon| log |V|)\)&lt;/span&gt;，適用於大規模網絡。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 實際應用場景&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;電商刷單檢測&lt;/strong&gt;&lt;/strong&gt;：識別虛假評論形成的密集用户-商品子網絡。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;社交網絡反欺詐&lt;/strong&gt;&lt;/strong&gt;：檢測偽卡交易或虛假關注關係。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;金融反洗錢&lt;/strong&gt;&lt;/strong&gt;：發現異常交易團夥。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_23"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;4.2 Fraudar 算法應用&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-928573e7eca9a5c3ce222a41201de5f7d3a.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_24"&gt;&lt;/span&gt; 
&lt;h3&gt;4.2.1 構圖與關係降噪&lt;/h3&gt; 
&lt;p&gt;實踐中，我們利用用户-店鋪的訂單關係構建二部圖，並且為了提升二部圖中的風險濃度，對低風險店鋪等做了剪枝實現關係的降噪，然後輸入 Fraudar 算法挖掘異常子圖。&lt;/p&gt; 
&lt;p&gt;原始的 Fraudar 算法只能挖掘出風險最高的一個子圖，但實際業務中，一般不止一個作弊團夥，因此我們在每次運行 Fraudar 算法產生一個子圖後，就將這個子圖從原始圖中裁剪掉，再次運行 Fraudar 算法得到次可疑的子圖，即循環 Fraudar。通過這種方法，我們可以獲得期望數量的異常子圖。&lt;/p&gt; 
&lt;span id="OSC_h3_25"&gt;&lt;/span&gt; 
&lt;h3&gt;4.2.2 結合監督模型&lt;/h3&gt; 
&lt;p&gt;挖掘出的風險子圖由用户和店鋪構成，而實際業務的識別目標是訂單，且風險子圖中會摻雜少量正常用户的訂單。為了進一步提升算法識別結果的準確率，我們將挖掘出的風險子圖輸入到 LR 模型進行精細判別。LR 模型使用用户、店鋪的特徵作為輸入，異常訂單為正樣本、正常訂單為負樣本訓練，最後在風險子圖的用户、店鋪的訂單上區分出異常訂單並落地到業務。&lt;/p&gt; 
&lt;span id="OSC_h1_26"&gt;&lt;/span&gt; 
&lt;h1&gt;05 GCN 模型及其應用&lt;/h1&gt; 
&lt;p&gt;上文提到 Fraudar 模型為了提升圖的風險濃度做了剪枝降噪，這樣提升算法精準的同時會損失一部分召回。並且 Fraudar 本身是無監督模型，還需要結合監督模型做精細化判別。因此我們嘗試了端到端的 GCN 模型，提升召回的同時簡化了識別鏈路。&lt;/p&gt; 
&lt;span id="OSC_h2_27"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;5.1 GCN 模型原理&lt;/strong&gt;&lt;/h2&gt; 
&lt;span id="OSC_h3_28"&gt;&lt;/span&gt; 
&lt;h3&gt;5.1.1 GCN 的核心思想：消息傳遞與聚合&lt;/h3&gt; 
&lt;p&gt;GCN 的核心是通過鄰域聚合更新節點特徵，其本質是讓每個節點從鄰居節點中提取有效信息：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 基礎聚合公式：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(H^{(l+1)} = \sigma\left(\hat{D}^{-1/2} \hat{A} \hat{D}^{-1/2} H^{(l)} W^{(l)}\right)\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;其中：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span class="math-tex"&gt;\(\hat{A} = A + I\)&lt;/span&gt;：鄰接矩陣加入自連接，防止節點自身信息丟失。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span class="math-tex"&gt;\(\hat{D}\)&lt;/span&gt;：度矩陣的對稱歸一化，解決節點度數差異導致的權重偏差。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span class="math-tex"&gt;\(W^{(l)}\)&lt;/span&gt;：可學習的權重矩陣，用於特徵變換，即卷積核。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span class="math-tex"&gt;\(H^{(l)}\)&lt;/span&gt;：激活值，對於輸入層可以理解成特徵矩陣。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 關鍵設計：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;歸一化：通過&lt;span class="math-tex"&gt;\(\hat{D}^{-1/2} \hat{A} \hat{D}^{-1/2}\)&lt;/span&gt;避免度數高的節點主導信息傳播，使模型更穩定。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;非線性激活：如 ReLU 函數，增強模型的表達能力。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_29"&gt;&lt;/span&gt; 
&lt;h3&gt;5.1.2 數學視角：從拉普拉斯矩陣到頻譜域卷積&lt;/h3&gt; 
&lt;p&gt;GCN 的理論基礎源自圖譜理論，通過將圖信號轉換到頻域進行卷積操作，核心概念：&lt;/p&gt; 
&lt;p&gt;1. 拉普拉斯矩陣：定義為&lt;span class="math-tex"&gt;\(L = D - A\)&lt;/span&gt;，其特徵分解&lt;span class="math-tex"&gt;\((L = U \Lambda U^T)\)&lt;/span&gt;將圖結構映射到頻域空間。&lt;/p&gt; 
&lt;p&gt;2. 圖傅裏葉變換：利用特徵向量矩陣&lt;span class="math-tex"&gt;\(U\)&lt;/span&gt;對節點特徵進行頻域投影，卷積操作簡化為頻域的乘積。&lt;/p&gt; 
&lt;p&gt;a. 卷積定理：函數卷積的傅裏葉變換是函數傅裏葉變換的乘積，即對於函數&lt;span class="math-tex"&gt;\(f(t)\)&lt;/span&gt;與&lt;span class="math-tex"&gt;\(h(t)\)&lt;/span&gt;兩者的卷積是其函數傅裏葉變換乘積的逆變換。&lt;br&gt; b. 圖傅裏葉變換把圖上定義的任意向量，表示成了拉普拉斯矩陣特徵向量的線性組合。&lt;/p&gt; 
&lt;p&gt;3. 切比雪夫近似：為降低計算複雜度，GCN 採用一階近似（僅考慮直接鄰居），公式退化為經典聚合形式。&lt;br&gt; 第一代 GCN：將輸入特徵通過圖傅裏葉變換從空域映射到譜域，做卷積運算後再映射回空域。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(Y = U \cdot g_\theta(\Lambda) \cdot U^T X\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;第二代 GCN：利用切比雪夫多項式近似&lt;span class="math-tex"&gt;\(g_\theta(\Lambda)\)&lt;/span&gt;，避免&lt;span class="math-tex"&gt;\(O(N^3)\)&lt;/span&gt;複雜度的拉普拉斯矩陣分解。&lt;br&gt; 卷積核用 K 階段切比雪夫多項式展開：&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(g_\theta(\Lambda) = \sum_{k=0}^K \theta_k T_k(\tilde{\Lambda})\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;最終 GCN 公式：&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(Y = \sum_{k=0}^K \theta_k T_k(\tilde{L}) X\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;第三代 GCN：只保留一階切比雪夫多項式，並加入自環和歸一化。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(H^{(l+1)} = \sigma \left( \hat{A} H^{(l)} W^{(l)} \right)\)&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_30"&gt;&lt;/span&gt; 
&lt;h3&gt;5.1.3 模型結構：輕量化與高效性&lt;/h3&gt; 
&lt;p&gt;GCN 的典型結構通常僅需 2-4 層即可完成高效學習，原因在於：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 層數限制&lt;/strong&gt;&lt;/strong&gt;：過深的網絡會導致&lt;strong&gt;&lt;strong&gt;過平滑（圖中同一連通分量的節點特徵趨同）&lt;/strong&gt;&lt;/strong&gt;，因此實踐中常用淺層架構。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 參數共享&lt;/strong&gt;&lt;/strong&gt;：每層共享權重矩陣，大幅減少參數量，適合處理大規模圖數據。（相對於一個節點一個權重矩陣的全連接形式）&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 應用場景&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;節點分類&lt;/strong&gt;&lt;/strong&gt;（如電商刷單用户檢測）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;圖分類&lt;/strong&gt;&lt;/strong&gt;（如分子屬性判斷）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;鏈接預測&lt;/strong&gt;&lt;/strong&gt;（如推薦系統好友關係推斷）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_31"&gt;&lt;/span&gt; 
&lt;h3&gt;5.1.4 GCN 的優缺點與改進方向&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 優勢&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;天然融合圖結構與節點特徵，適合複雜關係建模。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;計算高效，支持稀疏矩陣優化。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 侷限&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;過平滑問題&lt;/strong&gt;&lt;/strong&gt;：深層網絡性能下降。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;靜態圖假設&lt;/strong&gt;&lt;/strong&gt;：難以處理動態變化的圖結構。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_32"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;5.2 GCN 模型應用&lt;/strong&gt;&lt;/h2&gt; 
&lt;span id="OSC_h3_33"&gt;&lt;/span&gt; 
&lt;h3&gt;5.2.1 構圖&lt;/h3&gt; 
&lt;p&gt;利用訂單作為節點、訂單之間的屬性關聯關係構建同構圖。特徵上採用用户、 店鋪等風險屬性刻畫訂單，異常訂單為正樣本、正常訂單為負樣本。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-e413211583231cf96809e8be84b96306075.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_34"&gt;&lt;/span&gt; 
&lt;h3&gt;5.2.2 風險訂單挖掘&lt;/h3&gt; 
&lt;p&gt;由於實際業務中有標籤的風險訂單、正常訂單僅是全量訂單的一小部分，因此我們採用了半監督的方式訓練 GCN 模型，利用有標籤的訂單對無標籤的訂單進行推理。GCN 模型設計上針對的是靜態圖，應用中我們採用了隨着時間窗口滾動構圖的方式來適應動態變化的數據，滾動過程中排除了 GCN 模型本身推理的標籤，防止對模型自身結果過擬合。&lt;/p&gt; 
&lt;p&gt;這裏解釋下，為什麼我們不採用一個訓練好的模型在線上不斷的推理，而是滾動的訓練推理。這是因為 GCN 模型從原理上屬於直推式模型，通常的訓練好一個模型後不斷的對新數據推理的模型是歸納式模型。GCN 的直推式，本質上是因為卷積計算用到了圖的拉普拉斯矩陣，圖發生了變化，那麼這個拉普拉斯矩陣也就發生變化，訓練的模型也就失效了。&lt;/p&gt; 
&lt;p&gt;既然 GCN 是直推式的，這裏又產生一個問題，為什麼我們不使用歸納式模型呢？事實上，我們對比了 GraphSage 等模型在同樣圖結構、特徵數據上的效果，在我們的場景中比 GCN 效果差，為了保證業務效果我們最終採用的是 GCN。&lt;/p&gt; 
&lt;span id="OSC_h1_35"&gt;&lt;/span&gt; 
&lt;h1&gt;06 總結和展望&lt;/h1&gt; 
&lt;p&gt;在風控反作弊的業務中，我們落地了 LPA、Fraudar、GCN 等算法並取得了良好的效果，未來我們希望做的更多。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 多模態數據融合：從單一圖譜到全域關聯&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;未來風控需整合圖數據、時序數據（如交易頻率）、文本數據（如聊天記錄）等多模態信息。例如，通過圖嵌入技術將設備、IP、地理位置等實體統一表徵，構建全域風險畫像。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 動態圖實時計算：應對黑產快速演化&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;當前黑產通過「少邊構造」（刻意斷開部分關聯）繞過靜態圖檢測，需引入動態圖算法（如時序 GNN）實時捕捉行為演變，並結合增量計算優化性能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 可解釋性與對抗防禦：提升算法可信度&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;探索可視化工具（如子圖歸因分析）解釋 GCN 決策邏輯，並研發對抗訓練技術抵禦黑產對模型的逆向攻擊。&lt;/p&gt; 
&lt;p&gt;圖算法正從「輔助工具」升級為風控系統的核心引擎，而未來的挑戰在於如何平衡技術效能、業務合規與用户體驗。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4939618/blog/18627800</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/18627800</guid>
      <pubDate>Sat, 10 May 2025 07:21:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>JDK 高版本特性總結與 ZGC 實踐</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;blockquote&gt; 
 &lt;p&gt;美團信息安全技術團隊核心服務升級 JDK 17 後，性能與穩定性大幅提升，機器成本降低了 10%。高版本 JDK 與 ZGC 技術令人驚豔，且 Java AI SDK 最低支持 JDK 17。本文總結了 JDK 17 的主要特性，然後重點分享了 JDK 17+ZGC 在安全領域的一些實踐，希望能對大家有所幫助或啓發。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-31d46a32fb835d661ed43d399296dac8a92.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;從一句調侃的話 "你發任你發，我用 Java 8！" 可以看出，在開發新項目時，Java 8 依然是大家的首選。美團 Java 8 服務佔比超過 70%，可以説 Java 8 依然是絕對的主流。但是，我們在多個核心服務上遇到較多的性能問題，這些問題無法通過 JVM 參數微調來解決，為此我們對部分核心服務使用了 JDK 17，升級後服務性能和穩定性指標也得到巨大的飛躍，同時機器成本可以下降約 10%，升級 JDK 版本收益十分明顯。另外，目前正處在 AI 時代的爆發期，Java AI SDK 的最小支持版本為 JDK 17，這讓升級 JDK 版本變得更具價值。接下來，期望跟大家一起探索 JDK 高版本和 ZGC 技術的奧秘，開啓優化 Java 應用的新徵程。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;JDK 17 的主要特性&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;包含 JDK 9~17 等中間版本的特性。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;從 JDK 8 直接升級到 JDK 17，以下是需要重點關注的特性，這些特性對開發效率、代碼風格、性能優化和安全性都有顯著影響。&lt;/p&gt; 
&lt;h3&gt;1.1 語言特性[1]&lt;/h3&gt; 
&lt;h4&gt;1.1.1 局部變量類型推斷&lt;/h4&gt; 
&lt;p&gt;使用 var 關鍵字來聲明局部變量，而無需顯式指定變量的類型。在 Java 17 中，可以使用局部變量類型推斷的擴展來編寫更簡潔的代碼。其他語言如 Golang 很早就支持了 var 變量。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// JDK8
String str = "Hello world";

// JDK17
var str = "Hello world";
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;需要注意的是，var 類型的局部變量仍然具有靜態類型，一旦被推斷出來，類型就會固定下來，並且不能重新賦值為不兼容的類型。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;1.1.2 密封類&lt;/h4&gt; 
&lt;p&gt;它允許我們將類或接口的繼承限制為一組有限的子類。如果想將類或接口的繼承限制為一組有限的子類時，這非常有用。在下面的示例中，可以看到我們如何使用 sealed 關鍵字將類的繼承限制為一組有限的子類。我們可以通過在類的聲明前加上 sealed 關鍵字來將該類聲明為密封類。然後，可以使用 permits 關鍵字列出該密封類允許繼承的子類。這些子類必須直接或間接地繼承自密封類。這樣，只有在這個預定義的子類中，才能繼承該密封類。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;//使用 permits 關鍵字列出了允許繼承的子類 Circle、Rectangle 和 Triangle
public sealed class Shape permits Circle, Rectangle, Triangle {
    // 省略實現
}

// 在與密封類相同的模塊或包中，定義以下三個允許的子類， Circle，Square 和：Rectangle
public final class Circle extends Shape {
    public float radius;
}
 
public non-sealed class Square extends Shape {
   public double side;
}   
 
public sealed class Rectangle extends Shape permits FilledRectangle {
    public double length, width;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.1.3 Record 類&lt;/h4&gt; 
&lt;p&gt;Record 類的主要目的是提供一種更簡潔、更安全的方式來定義不可變的數據載體類。它自動實現了常見的方法（如&lt;code&gt;equals()&lt;/code&gt;、&lt;code&gt;hashCode()&lt;/code&gt;、&lt;code&gt;toString()&lt;/code&gt;和構造函數），從而減少了樣板代碼。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;特點&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;不可變性&lt;/strong&gt; ：Record 類的字段默認是&lt;code&gt;final&lt;/code&gt;的，因此 Record 類是不可變的。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;簡潔性&lt;/strong&gt; ：Record 類自動提供了構造函數、&lt;code&gt;equals()&lt;/code&gt;、&lt;code&gt;hashCode()&lt;/code&gt;和&lt;code&gt;toString()&lt;/code&gt;方法，無需手動編寫。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;組件訪問&lt;/strong&gt; ：Record 類的字段可以通過&lt;code&gt;recordName.fieldName&lt;/code&gt;的方式直接訪問。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;模式匹配&lt;/strong&gt; ：Record 類支持模式匹配（Pattern Matching），可以與&lt;code&gt;instanceof&lt;/code&gt;和&lt;code&gt;switch&lt;/code&gt;表達式結合使用。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Record 類的定義非常簡單，只需要使用&lt;code&gt;record&lt;/code&gt;關鍵字，並聲明字段類型和名稱即可。例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// 這裏有一個包含兩個字段的記錄類
record Rectangle(double length, double width) { }

// 這個簡潔的矩形聲明等同於以下普通類
public final class Rectangle {
    private final double length;
    private final double width;

    public Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }

    double length() { return this.length; }
    double width()  { return this.width; }

    // ...
    public boolean equals...
    public int hashCode...

    // ...
    public String toString() {...}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.1.4 switch 表達式優化&lt;/h4&gt; 
&lt;p&gt;在 Java 17 中使用 switch 表達式時，不必使用關鍵字 break 來跳出 switch 語句，或 return 在每個 switch case 上使用關鍵字來返回值；相反，我們可以返回整個 switch 表達式。這種增強的 switch 表達式使整體代碼看起來更清晰，更易於閲讀。switch 打印一週中某一天的字母數量的語句。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;JDK 8&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;public enum Day { SUNDAY, MONDAY, TUESDAY,
    WEDNESDAY, THURSDAY, FRIDAY, SATURDAY; }

// ...

    int numLetters = 0;
    Day day = Day.WEDNESDAY;
    switch (day) {
        case MONDAY:
        case FRIDAY:
        case SUNDAY:
            numLetters = 6;
            break;
        case TUESDAY:
            numLetters = 7;
            break;
        case THURSDAY:
        case SATURDAY:
            numLetters = 8;
            break;
        case WEDNESDAY:
            numLetters = 9;
            break;
        default:
            throw new IllegalStateException("Invalid day: " + day);
    }
    System.out.println(numLetters);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;JDK 17&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Day day = Day.WEDNESDAY;    
    System.out.println(
        switch (day) {
            case MONDAY, FRIDAY, SUNDAY -&amp;gt; 6;
            case TUESDAY                -&amp;gt; 7;
            case THURSDAY, SATURDAY     -&amp;gt; 8;
            case WEDNESDAY              -&amp;gt; 9;
            default -&amp;gt; throw new IllegalStateException("Invalid day: " + day);
        }
    ); 
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.1.5 文本塊&lt;/h4&gt; 
&lt;p&gt;在不使用轉義序列的情況下創建多行字符串。在創建 SQL 查詢或 JSON 字符串時非常有用。在下面的示例中，可以看到使用文本塊時代碼看起來更加簡潔。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// JDK8
String message = "'The time has come,' the Walrus said,\n" +
                 "'To talk of many things:\n" +
                 "Of shoes -- and ships -- and sealing-wax --\n" +
                 "Of cabbages -- and kings --\n" +
                 "And why the sea is boiling hot --\n" +
                 "And whether pigs have wings.'\n";

// 使用文本塊可以消除大部分混亂：
String message = """
    'The time has come,' the Walrus said,
    'To talk of many things:
    Of shoes -- and ships -- and sealing-wax --
    Of cabbages -- and kings --
    And why the sea is boiling hot --
    And whether pigs have wings.'
    """;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;SQL 註解描述&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// JDK8    
@Select("select distinct ta.host_name from tb_agent_info tai, tb_agent ta where 1=1 " +
        "and ta.host_name=tai.host_name and ta.status=1 and ta.master=1 and tai.report_pid_count &amp;gt; 0")
Set&amp;lt;String&amp;gt; queryAllJavaHost();

// JDK17
@Select("""
    SELECT DISTINCT ta.host_name
    FROM tb_agent_info tai, tb_agent ta
    WHERE 1=1
      AND ta.host_name = tai.host_name
      AND ta.status = 1
      AND ta.master = 1
      AND tai.report_pid_count &amp;gt; 0
 """)
 Set&amp;lt;String&amp;gt; queryAllJavaHost2();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;可讀性更強&lt;/strong&gt;：文本結構清晰可見，無需處理轉義字符或字符串連接。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;減少錯誤&lt;/strong&gt;：不需要手動添加換行符（\n），降低了出錯的可能性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;易於編輯&lt;/strong&gt;：可以直接複製粘貼格式化好的 JSON，而不需要額外的處理。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;保留縮進&lt;/strong&gt;：文本塊會保留的縮進，使得其在 Java 代碼中的呈現更加美觀。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1.1.6 模式匹配 instanceof 優化&lt;/h4&gt; 
&lt;p&gt;它允許將 instanceof 運算符用作返回已轉換對象的表達式。當我們使用嵌套的 if-else 語句時，這非常有用。在下面的示例中，可以看到我們如何使用 instanceof 運算符來捕獲對象，而不是進行顯式轉換。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;JDK 8&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Object obj = ...;

if (obj instanceof String) {
    String str = (String) obj;
    int length = str.length();
    System.out.println("字符串長度：" + length);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;JDK 17&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Object obj = ...;

if (obj instanceof String str) {
    int length = str.length();
    System.out.println("字符串長度：" + length);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.1.7 NullPointerExceptions 的優化&lt;/h4&gt; 
&lt;p&gt;對象空指針在日常開發中遇到的比較多，一般代碼報錯只能精確的某一行，如果該行的代碼比較複雜，涉及到多個對象，往往不能直接確定是哪一個對象為空。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;public class NpeDemo { 
  public static void main(String[] args) { 
    Address address=new Address();
    User user=new User();
    user.setAddress(address);
    log.info(user.getAddress().getCity().toLowerCase()); 
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;上面代碼中的第 6 行鏈式調用，如果某一個環節出現空指針，將會拋出空指針的異常：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Exception in thread "main" java.lang.NullPointerException 
at NpeDemo.main(Main.java:6)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;使用 JDK 17&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Exception in thread "main" java.lang.NullPointerException: 
Cannot invoke "String.toLowerCase()" because the return value of "Address.getCity()" is null 
  at NpeDemo.main(Main.java:6)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.1.8 集合、Stream 和 Optional 的增強&lt;/h4&gt; 
&lt;p&gt;Java 在集合（Collections）、Stream API 和 Optional 類方面引入了許多增強功能。主要有：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;集合增強&lt;/strong&gt;：不可變集合： 引入了創建不可變集合的便捷方法，如 List.of()、Set.of() 和 Map.of()。這些方法用於快速創建不可變集合，減少了代碼量並提高了安全性。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import java.util.*;

public class CollectionsDemo {
    public static void main(String[] args) {
        // 創建不可變 list
        List&amp;lt;String&amp;gt; list = List.of("Java", "Golang", "Python");
        // 創建不可變 set
        Set&amp;lt;String&amp;gt; set = Set.of("Java", "Golang", "Python");
        // 創建不可變 map
        Map&amp;lt;String, Integer&amp;gt; map = Map.of("Java", 1, "Golang", 2, "Python", 3);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;集合工廠方法&lt;/strong&gt;：Java 17 還引入了集合工廠方法，如 List.copyOf()、Set.copyOf() 和 Map.copyOf()，用於從現有集合創建不可變副本。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Stream API 增強&lt;/strong&gt; ：&lt;code&gt;takeWhile&lt;/code&gt;和&lt;code&gt;dropWhile&lt;/code&gt;：基於條件截取或跳過元素；&lt;code&gt;iterate&lt;/code&gt;：支持終止條件的迭代；&lt;code&gt;ofNullable&lt;/code&gt;：將可能為&lt;code&gt;null&lt;/code&gt;的值轉換為 Stream。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Optional 增強&lt;/strong&gt; ： &lt;code&gt;ifPresentOrElse&lt;/code&gt;：值存在時執行操作，否則執行另一個操作；&lt;code&gt;or&lt;/code&gt;：在值不存在時提供替代值；&lt;code&gt;stream&lt;/code&gt;：將&lt;code&gt;Optional&lt;/code&gt;轉換為 Stream。&lt;/p&gt; 
&lt;h3&gt;1.2 新 API 和工具&lt;/h3&gt; 
&lt;h4&gt;1.2.1 新的 HttpClient&lt;/h4&gt; 
&lt;p&gt;可以使用&lt;code&gt;HttpClient&lt;/code&gt;使用來發送請求並檢索其響應。 &lt;code&gt;HttpClient&lt;/code&gt;可以通過&lt;code&gt;builder&lt;/code&gt;來創建。該&lt;code&gt;newBuilder&lt;/code&gt;方法返回一個構建器，用於創建默認&lt;code&gt;HttpClient&lt;/code&gt;實現的實例。該構建器可用於配置每個客户端的狀態，例如：首選協議版本（HTTP/1.1 或 HTTP/2）、是否遵循重定向、代理、身份驗證器等。 構建完成後，&lt;code&gt;HttpClient&lt;/code&gt;是不可變的，可用於發送多個請求。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// 同步示例
HttpClient client = HttpClient.newBuilder()
        .version(Version.HTTP_1_1)
        .followRedirects(Redirect.NORMAL)
        .connectTimeout(Duration.ofSeconds(20))
        .proxy(ProxySelector.of(new InetSocketAddress("proxy.example.com", 80)))
        .authenticator(Authenticator.getDefault())
        .build();
   HttpResponse&amp;lt;String&amp;gt; response = client.send(request, BodyHandlers.ofString());
   System.out.println(response.statusCode());
   System.out.println(response.body());  

// 異步示例
HttpRequest request = HttpRequest.newBuilder()
        .uri(URI.create("https://foo.com/"))
        .timeout(Duration.ofMinutes(2))
        .header("Content-Type", "application/json")
        .POST(BodyPublishers.ofFile(Paths.get("file.json")))
        .build();
   client.sendAsync(request, BodyHandlers.ofString())
        .thenApply(HttpResponse::body)
        .thenAccept(System.out::println);  
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;如果不希望引入三方依賴（三方依賴漏洞和 Bug 等需要經常升級），可以使用 JDK 提供的原生的 httpClient API，適用場景&lt;code&gt;中間件&lt;/code&gt;。&lt;/p&gt; 
&lt;h4&gt;1.2.2 打包工具 jpackage[2]&lt;/h4&gt; 
&lt;p&gt;該工具將以 Java 應用程序和 Java 運行時鏡像作為輸入，生成包含所有必要依賴項的 Java 應用程序鏡像。它能夠生成特定平台格式的原生軟件包，例如 Windows 上的 exe 文件或 macOS 上的 dmg 文件。每種格式都必須在其運行的平台上構建，不支持跨平台。該工具將提供一些選項，允許以各種方式定製打包的應用程序。該工具最大特點是無需單獨安裝 JDK 環境，例如用 JDK17 寫了一個 MCP Server 工具，直接打包為可執行文件安裝即可，減少環境依賴安裝。&lt;/p&gt; 
&lt;h4&gt;1.2.3 進程相關 API[3]&lt;/h4&gt; 
&lt;p&gt;進程管理功能得到了顯著增強，&lt;code&gt;ProcessHandle&lt;/code&gt;提供了更強大的功能來創建、監控和管理本地進程。這些改進使得 Java 程序能夠更靈活地與操作系統交互，同時提供了更詳細的進程信息和更強大的生命週期管理功能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1.創建進程&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 Java 中，創建新進程通常使用&lt;code&gt;ProcessBuilder&lt;/code&gt;或&lt;code&gt;Runtime.getRuntime().exec()&lt;/code&gt;。而 Java 17 上&lt;code&gt;ProcessHandle&lt;/code&gt;提供了更強大的功能來管理這些進程。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ProcessBuilder pb = new ProcessBuilder("echo", "Hello World!");
Process p = pb.start();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2.監控進程&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;public class ProcessTest {

  // ...

  static public void startProcessesTest() throws IOException, InterruptedException {
    List&amp;lt;ProcessBuilder&amp;gt; greps = new ArrayList&amp;lt;&amp;gt;();
    greps.add(new ProcessBuilder("/bin/sh", "-c", "grep -c \"java\" *"));
    greps.add(new ProcessBuilder("/bin/sh", "-c", "grep -c \"Process\" *"));
    greps.add(new ProcessBuilder("/bin/sh", "-c", "grep -c \"onExit\" *"));
    ProcessTest.startSeveralProcesses (greps, ProcessTest::printGrepResults);      
    System.out.println("\nPress enter to continue ...\n");
    System.in.read();  
  }

  static void startSeveralProcesses (
    List&amp;lt;ProcessBuilder&amp;gt; pBList,
    Consumer&amp;lt;Process&amp;gt; onExitMethod)
    throws InterruptedException {
    System.out.println("Number of processes: " + pBList.size());
    pBList.stream().forEach(
      pb -&amp;gt; {
        try {
          Process p = pb.start();
          System.out.printf("Start %d, %s%n",
            p.pid(), p.info().commandLine().orElse("&amp;lt;na&amp;gt;"));
          p.onExit().thenAccept(onExitMethod);
        } catch (IOException e) {
          System.err.println("Exception caught");
          e.printStackTrace();
        }
      }
    );
  }
  
  static void printGrepResults(Process p) {
    System.out.printf("Exit %d, status %d%n%s%n%n",
      p.pid(), p.exitValue(), output(p.getInputStream()));
  }

  private static String output(InputStream inputStream) {
    String s = "";
    try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {
      s = br.lines().collect(Collectors.joining(System.getProperty("line.separator")));
    } catch (IOException e) {
      System.err.println("Caught IOException");
      e.printStackTrace();
    }
    return s;
  }

  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;3.獲取進程信息&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;public static void getInfoTest() throws IOException {
        ProcessBuilder pb = new ProcessBuilder("echo", "Hello World!");
        String na = "&amp;lt;not available&amp;gt;";
        Process p = pb.start();
        ProcessHandle.Info info = p.info();
        System.out.printf("Process ID: %s%n", p.pid());
        System.out.printf("Command name: %s%n", info.command().orElse(na));
        System.out.printf("Command line: %s%n", info.commandLine().orElse(na));

        System.out.printf("Start time: %s%n",
            info.startInstant().map((Instant i) -&amp;gt; i
                .atZone(ZoneId.systemDefault()).toLocalDateTime().toString())
                .orElse(na));

        System.out.printf("Arguments: %s%n",
            info.arguments().map(
                (String[] a) -&amp;gt; Stream.of(a).collect(Collectors.joining(" ")))
                .orElse(na));

        System.out.printf("User: %s%n", info.user().orElse(na));
}

輸出
Process ID: 18761
Command name: /usr/bin/echo
Command line: echo Hello World!
Start time: 2017-05-30T18:52:15.577
Arguments: &amp;lt;not available&amp;gt;
User: administrator
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.2.4 AI 工具最低版本為 JDK17&lt;/h4&gt; 
&lt;p&gt;最近火熱的 AI 大模型工具，JDK 8 不再兼容，運行的最低版本為 JDK 17，例如 Spring AI 工具。&lt;/p&gt; 
&lt;h3&gt;1.3 性能優化與 Bug 修復&lt;/h3&gt; 
&lt;h4&gt;1.3.1 垃圾回收器改進 ZGC&lt;/h4&gt; 
&lt;p&gt;ZGC 作為新一代的垃圾回收器，主要目標：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;支持 TB 級內存&lt;/li&gt; 
 &lt;li&gt;停頓時間控制在 10ms 之內&lt;/li&gt; 
 &lt;li&gt;對程序吞吐量影響小於 15%&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;據官方測評數據，在內存為 128GB 的機器上，相比於 G1 來説，性能提高 30%，停頓時間減少 99%。&lt;/p&gt; 
&lt;h4&gt;1.3.2 NIO 重寫與優化&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;支持 Unix-Domain 套接字&lt;/strong&gt;：在 JDK8 上如果想要使用 UDS，一般使用 Netty 或者開源的 Juds 庫，JDK 17 支持了該功能，無需使用第三方庫；&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;文件通道的優化&lt;/strong&gt;：可以將文件的某個區域直接映射到內存中，從而實現高效的讀寫操作。這種方式利用了操作系統的內存映射機制，減少了 I/O 操作的開銷；&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;零拷貝支持&lt;/strong&gt;：允許數據直接從磁盤的一個位置複製到另一個位置，而無需經過用户態內存。這減少了數據在用户態和內核態之間的拷貝次數，從而顯著提高了性能。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1.3.3 Java SDK 模塊化設計&lt;/h4&gt; 
&lt;p&gt;JVM 的模塊化是 Java 9 引入的一個重要特性，通過 Java Platform Module System (JPMS) 實現。這一特性旨在解決 Java 應用在可擴展性和維護上的問題，提供更高級別的封裝和依賴管理機制。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;減少環境資源開銷&lt;/strong&gt;：在 JDK 9 之前，每次啓動 JVM 都要耗費至少 30MB 到 60MB 的內存空間，因為 JVM 需要加載整個 rt.jar。模塊化允許 JVM 選擇性地加載必需的模塊，從而減少內存佔用。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;提升開發效率和運行速度&lt;/strong&gt;：隨着代碼庫的複雜性增加，開發效率和運行速度會受到影響。模塊化通過規範化路徑和依賴關係，使系統更安全、更高效。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;規範化路徑及依賴關係&lt;/strong&gt;：JDK 9 之前，系統沒有對不同 JAR 之間的依賴或敏感路徑進行限制，導致所有 JAR 都可以被訪問，暴露了安全問題。模塊化通過管理模塊間的依賴關係，隱藏不必要的模塊，提高了安全性和空間利用率。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1.3.4 Java Agent 機制的 Attach Bug 修復&lt;/h4&gt; 
&lt;p&gt;Java Attach Socket 文件被刪除後會導致 Java Agent 注入失敗，在 JDK 8 上只能通過重啓解決，而 JDK 17 會重新創建一個新的文件。&lt;/p&gt; 
&lt;h4&gt;1.3.5 彈性元空間[4]&lt;/h4&gt; 
&lt;p&gt;更及時地將未使用的元空間內存回收，減少元空間佔用的內存。&lt;/p&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;JDK17+ZGC 在安全領域的實踐&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;h3&gt;2.1 美團 JDK 的現狀&lt;/h3&gt; 
&lt;p&gt;在美團信息安全部，JDK8（Oracle JDK8u201）依然是主流版本，其次是 Open JDK17，剩下為 Open JDK 11。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//741b89994a9cb115f8cfa24e32a8c514.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;2.2 ZGC 適用場景&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//63b1d3093a63550bd74f5489a0c68462.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;服務器成本壓力大：服務器數量大於 100 台、單機配置大於 16C16G、Java 堆內存超過 16G 等。&lt;/li&gt; 
 &lt;li&gt;單機 CPU 高：峯值大約在 50%&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//33bd0463bac3ff69b941c53beb498801.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;性能火焰圖中 GC 佔比高&lt;/li&gt; 
 &lt;li&gt;高峯期故障雷達、監控大盤和服務日誌等告警頻繁&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2.3 ZGC 效果&lt;/h3&gt; 
&lt;h4&gt;2.3.1 性能壓測效果&lt;/h4&gt; 
&lt;p&gt;在測試服務不同接口中，ZGC 在高 QPS 場景中收益較大（服務的 QPS 超過 1 萬）：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;TP9999&lt;/strong&gt;：下降 220~380ms，下降幅度 18%~74%。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;TP999&lt;/strong&gt;：下降 60-125ms，下降幅度 10%~63%。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;TP99&lt;/strong&gt;：下降 3ms-20ms，下降幅度 0%-25%。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;一些重度依賴外部的接口中性能優化不大，原因是這些服務的響應時間瓶頸不是 GC，而是外部依賴的性能，在一些低 QPS 接口中對比不太明顯。&lt;/p&gt; 
&lt;h4&gt;2.3.2 案例 1：智能決策系統（JDK 11+ZGC 升級到 JDK 17+ZGC）&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;峯值 cpu.busy 指標下降&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;升級前: 47.8565%&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//f718dd4d745bb448173cbe960ab78a8f.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;升級後: 41.4933%&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//6da00d3b35876b2f54ef3da8ce680972.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;系統長期運行時 TP9999 性能穩定&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;運行 15 天，JDK11 機器長時間不重啓三九、四九線會逐漸升高，JDK 17 機器較為穩定。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//a82620036e2172e5eed80eede0944f36.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;服務失敗率顯著降低&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;UGC 集羣升級效果：錯誤數量由峯值 6000 下降到 349。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//9d6499c78dd50077ab3a09c8b9a5fded.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;JVM 元空間使用降低&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//14e0e2f136345f99ea5521fe4de3de52.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;單機維度高峯期性能指標&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//1b3e2d500a2966651ec0ac9ecd2a5663.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h4&gt;2.3.3 案例 2：內容安全核心服務 (JDK 8+CMS 升級到 JDK 17+ZGC）&lt;/h4&gt; 
&lt;p&gt;該服務是內容安全的代理層，主要負責匹配請求的分發、輔助功能支撐（日誌、監控、熔斷）以及一些個性化業務需求。當前該服務 GC 是 CMS，該服務線上的 Young GC 平均耗時是 17ms，平均每分鐘 GC 次數是 6 次，該服務接口平均響應時間是 2.6ms。&lt;/p&gt; 
&lt;p&gt;根據文章《&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.meituan.com%2F2017%2F12%2F29%2Fjvm-optimize.html" target="_blank"&gt;從實際案例聊聊 Java 應用的 GC 優化&lt;/a&gt;》中提供的計算方式，受到 Young GC 影響的請求佔比是：&lt;/p&gt; 
&lt;p&gt;$$受 GC 影響請求佔比 = \frac{N * \left ( GC 時間 + 接口響應時間 \right ) }{T} = \frac{6 * \left ( 17 + 2.6 \right ) }{60000} = 0.196%$$&lt;/p&gt; 
&lt;p&gt;即有 0.196% 的請求收到 GC 時間 0-17ms 不等的影響。其中收到 GC 停頓完整影響的請求佔比：&lt;/p&gt; 
&lt;p&gt;$$受 GC 完整影響請求佔比 = \frac{N * \left (接口響應時間 \right ) }{T} = \frac{6 * 2.6}{60000} = 0.026%$$&lt;/p&gt; 
&lt;p&gt;即其中有 0.026% 的請求受到完整的 GC 停頓時間影響，即耗時增加 17ms，可以大致理解為請求響應的 9999 線會因 GC 停頓而導致 17ms 的上漲。&lt;/p&gt; 
&lt;p&gt;根據 ZGC 的 STW 的耗時在毫秒甚至亞毫秒級別，因此理論上升級後服務的 9999 線可以降低 17ms 左右。在實際生產中，還會有 Full GC 的影響，會帶來耗時的進一步提升，ZGC 在該部分可以避免 Full GC 帶來的影響。&lt;/p&gt; 
&lt;p&gt;服務升級採用的是 Tomcat 9+JDK 17 的配置，錄製線上流量進行壓測，使用同樣的流量對先前採用 CMS 垃圾回收的以及採用 ZGC 垃圾回收方式的同時進行壓測。服務器配置均為 8C16G，800QPS 的壓測，通過 2h 左右的壓測，&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;分析接口耗時統計&lt;/strong&gt;：可得到以下數據，發現耗時均有明顯下降，9999 線的下降量低於理論的 17ms，由於實際環境中其他因素的影響也基本符合預期。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//56b4d79c7da3403c9fde82947bf34f88.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;分析 CPU 和 JVM 佔用情況：CPU 和 JVM 佔用情況發現，CPU 佔用在峯值處會提升 10% 左右，JVM 佔用情況基本一致。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//5c62be54cdd72cde90060ce5bf8c78cc.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;2.4 ZGC 實現原理簡介&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;更多詳情，可參考《&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.meituan.com%2F2020%2F08%2F06%2Fnew-zgc-practice-in-meituan.html" target="_blank"&gt;新一代垃圾回收器 ZGC 的探索與實踐&lt;/a&gt;》一文。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;2.4.1 CMS 與 G1 停頓時間瓶頸&lt;/h4&gt; 
&lt;p&gt;在介紹 ZGC 之前，首先回顧一下 CMS 和 G1 的 GC 過程以及停頓時間的瓶頸。CMS 新生代的 Young GC、G1 和 ZGC 都基於標記-複製算法，但算法具體實現的不同就導致了巨大的性能差異。&lt;/p&gt; 
&lt;p&gt;標記-複製算法應用在 CMS 新生代（ParNew 是 CMS 默認的新生代垃圾回收器）和 G1 垃圾回收器中。標記-複製算法可以分為三個階段：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;標記階段&lt;/strong&gt;，即從 GC Roots 集合開始，標記活躍對象；&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;轉移階段&lt;/strong&gt;，即把活躍對象複製到新的內存地址上；&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;重定位階段&lt;/strong&gt;，因為轉移導致對象的地址發生了變化，在重定位階段，所有指向對象舊地址的指針都要調整到對象新的地址上。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下面以 G1 為例，通過 G1 中標記-複製算法過程（G1 的 Young GC 和 Mixed GC 均採用該算法），分析 G1 停頓耗時的主要瓶頸。G1 垃圾回收週期如下圖所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//475b53df8e7a764b5b232636407dfcaa.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;G1 的混合回收過程可以分為標記階段、清理階段和複製階段：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;標記階段停頓分析&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;初始標記階段&lt;/strong&gt;：初始標記階段是指從根節點（GC Roots）出發標記全部直接子節點的過程，該階段是 STW 的。由於 GC Roots 數量不多，通常該階段耗時非常短。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;併發標記階段&lt;/strong&gt;：併發標記階段是指從 GC Roots 開始對堆中對象進行可達性分析，找出存活對象。該階段是併發的，即應用線程和 GC 線程可以同時活動。併發標記耗時相對長很多，但因為不是 STW，所以我們不太關心該階段耗時的長短。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;再標記階段&lt;/strong&gt;：重新標記那些在併發標記階段發生變化的對象。該階段是 STW 的。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;清理階段停頓分析&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;清理階段清點出有存活對象的分區和沒有存活對象的分區，該階段不會清理垃圾對象，也不會執行存活對象的複製。該階段是 STW 的。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;複製階段停頓分析&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;複製算法中的轉移階段需要分配新內存和複製對象的成員變量。轉移階段是 STW 的，其中內存分配通常耗時非常短，但對象成員變量的複製耗時有可能較長，這是因為複製耗時與存活對象數量與對象複雜度成正比。對象越複雜，複製耗時越長。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;四個 STW 過程中，初始標記因為只標記 GC Roots，耗時較短。再標記因為對象數少，耗時也較短。清理階段因為內存分區數量少，耗時也較短。轉移階段要處理所有存活的對象，耗時會較長。因此，G1 停頓時間的瓶頸主要是標記-複製中的轉移階段 STW。為什麼轉移階段不能和標記階段一樣併發執行呢？主要是 G1 未能解決轉移過程中準確定位對象地址的問題。&lt;/p&gt; 
&lt;h4&gt;2.4.2 ZGC 原理&lt;/h4&gt; 
&lt;p&gt;與 CMS 中的 ParNew 和 G1 類似，ZGC 也採用標記-複製算法，不過 ZGC 對該算法做了重大改進：&lt;strong&gt;ZGC 在標記、轉移和重定位階段幾乎都是併發的&lt;/strong&gt;，這是 ZGC 實現停頓時間小於 10ms 目標的最關鍵原因。&lt;/p&gt; 
&lt;p&gt;ZGC 垃圾回收週期如下圖所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//ff472f97b6b955687ebeabd32e9a9ee7.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;ZGC 只有三個 STW 階段：&lt;strong&gt;初始標記，再標記，初始轉移&lt;/strong&gt;。其中，初始標記和初始轉移分別都只需要掃描所有 GC Roots，其處理時間和 GC Roots 的數量成正比，一般情況耗時非常短；再標記階段 STW 時間很短，最多 1ms，超過 1ms 則再次進入併發標記階段。即，ZGC 幾乎所有暫停都只依賴於 GC Roots 集合大小，停頓時間不會隨着堆的大小或者活躍對象的大小而增加。與 ZGC 對比，G1 的轉移階段完全 STW 的，且停頓時間隨存活對象的大小增加而增加。&lt;/p&gt; 
&lt;h4&gt;2.4.3 主要特點&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;單代&lt;/strong&gt;：ZGC 沒有分代，基於"大部分對象朝生夕死"的假設，沒有 Young GC 的概念（這裏僅指 JDK 17，JDK 21 支持分代回收，性能更高）。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;基於 Region&lt;/strong&gt;： G1 的每個 Region 大小是完全一樣的，而 ZGC 的 Region 更靈活，其中大型 Region 大小不固定,可以動態變化，也不會被重分配，因為複製一個大對象代價太高。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;部分壓縮&lt;/strong&gt;： 基於 Region，"標記-整理"，相對 CMS 壓縮時間更短。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;支持 NUMA&lt;/strong&gt;： 對應有 UMA，每個 CPU 對應有一塊內存，每個 CPU 優先訪問這塊內存。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//addc3e92b946e1d9221a8cb50eff2b94.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;染色指針&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//143532af9ea5101d47ac6e49dec629eb.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;以前的垃圾回收器的 GC 信息都保存在對象頭中，ZGC 將 GC 信息保存在了染色指針上,無需進行對象訪問就可以獲得 GC 信息。這就是 ZGC 在標記和轉移階段速度更快的原因。Marked0、Marked1 和 Remapped 這三個虛擬內存作為 ZGC 的三個視圖空間，在同一個時間點內只能有一個有效。ZGC 就是通過這三個視圖空間的切換，來完成併發的垃圾回收。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;讀屏障&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;讀屏障，在標記和移動對象的階段，每次從堆裏對象的引用類型中讀取一個指針的時候，都需要加上一個 Load Barriers。用於確定對象的引用地址是否滿足條件，並作出相應動作。&lt;/p&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;JDK 17 升級實踐過程&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;p&gt;主要分為三個階段：安裝部署、解決兼容性問題、性能測試與參數優化。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;如果公司的中間件大部分基於 JDK 8，工程代碼編譯可以基於 JDK 8，運行環境使用 JDK 17。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;3.1 安裝與兼容性問題&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;1.主要的問題舉例&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;JVM 運行的報錯信息：module java.base does not "opens java.util.concurrent.locks" to unnamed module&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[ERROR] main JsonUtil Json parse failed
java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock java.util.concurrent.locks.ReentrantReadWriteLock.readerLock accessible: module java.base does not "opens java.util.concurrent.locks" to unnamed module @1ba9117e
at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
at com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(ClassUtil.java:939)
at com.fasterxml.jackson.databind.deser.impl.FieldProperty.fixAccess(FieldProperty.java:104)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2.原因&lt;/strong&gt;：JDK9 之後 Java API 使用了模塊化設計方案，用户模塊無法反射調用 Java 代碼，需要使用開啓對應模塊訪問權限（沒有引入新的安全問題，相當於沒有用模塊隔離的功能）。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.解決方式&lt;/strong&gt;：　JVM 參數增加如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/java.math=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-opens java.base/java.security=ALL-UNNAMED --add-opens java.base/java.text=ALL-UNNAMED --add-opens java.base/java.time=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.util.concurrent=ALL-UNNAMED --add-opens java.base/java.util.concurrent.locks=ALL-UNNAMED --add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED --add-opens java.base/jdk.internal.access=ALL-UNNAMED --add-opens java.base/jdk.internal.misc=ALL-UNNAMED
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;其他軟件等兼容性問題，根據自身服務報錯，對應解決問題。&lt;/p&gt; 
&lt;h3&gt;3.2 性能壓測&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;基準&lt;/strong&gt;： JDK 8+CMS&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;壓測&lt;/strong&gt;：實驗組和對照組壓測後重啓避免性能優化為結果影響並取平均值&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;指標監控&lt;/strong&gt;： 峯值 CPU、平均 CPU、TP9999、報錯數量、GC 總時間和次數、JVM 堆內存和元空間變化等&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;其他&lt;/strong&gt;：性能火焰圖&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3.3 JVM 參數&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;-Xmx18g -Xms18g 堆大小&lt;/li&gt; 
 &lt;li&gt;-XX:MaxDirectMemorySize=2G 直接內存&lt;/li&gt; 
 &lt;li&gt;-XX:+HeapDumpOnOutOfMemoryError 當 JVM 發生 OOM 時，自動生成 DUMP 文件。&lt;/li&gt; 
 &lt;li&gt;-XX:ReservedCodeCacheSize=256m -XX:InitialCodeCacheSize=256m 設置 codecache 大小，默認 128m&lt;/li&gt; 
 &lt;li&gt;-XX:+UseZGC 使用 ZGC&lt;/li&gt; 
 &lt;li&gt;-XX:ZAllocationSpikeTolerance=2 ZGC 觸發自適應算法的修正係數，默認 2，數值越大，越早的觸發 ZGC&lt;/li&gt; 
 &lt;li&gt;-XX:ZCollectionInterval=0 ZGC 的週期。默認值為 0，表示不需要觸發垃圾回收。固定週期垃圾回收。ZGC 發生的最小時間間隔，單位秒&lt;/li&gt; 
 &lt;li&gt;-XX:ConcGCThreads=4 併發階段的 GC 線程數，默認是總核數的 12.5%&lt;/li&gt; 
 &lt;li&gt;-XX:ZStatisticsInterval=10 控制統計信息輸出的間隔，默認 10s&lt;/li&gt; 
 &lt;li&gt;-XX:ParallelGCThreads=16 並行工作線程數據，STW 階段使用線程數，默認是總核數的 60%&lt;/li&gt; 
 &lt;li&gt;-Xlog:safepoint,classhisto*=trace,age*,gc*=info:file=/opt/logs/logs/gc-%t.log:time,tid,tags:filecount=5,filesize=50m' 設置 GC 日誌中的內容、格式、位置以及每個日誌的大小&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;本服務 prod 機器 16c，16g 成功運行起來的 JVM 參數（還在調整中，僅供參考）：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;-server -Xmx12g -Xms12g -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+UseZGC -XX:+UseDynamicNumberOfGCThreads -XX:ConcGCThreads=3 -XX:ParallelGCThreads=8 -XX:ZCollectionInterval=130 -XX:ZAllocationSpikeTolerance=1 -XX:MaxDirectMemorySize=460m -XX:MetaspaceSize=330m -XX:MaxMetaspaceSize=330m -XX:ReservedCodeCacheSize=256m -XX:InitialCodeCacheSize=256m -XX:+UseCountedLoopSafepoints -XX:+SafepointTimeout -XX:SafepointTimeoutDelay=500 -XX:GuaranteedSafepointInterval=0 -XX:+DisableExplicitGC -XX:+HeapDumpOnOutOfMemoryError -XX:ZStatisticsInterval=130 -XX:+PrintGCDetails -Xlog:safepoint,class+load=info,class+unload=info,classhisto*=trace,age*,gc*=info:file=/opt/logs/logs/gc-%t.log:time,tid,tags:filecount=5,filesize=50m --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/java.math=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-opens java.base/java.security=ALL-UNNAMED --add-opens java.base/java.text=ALL-UNNAMED --add-opens java.base/java.time=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.util.concurrent=ALL-UNNAMED --add-opens java.base/java.util.concurrent.locks=ALL-UNNAMED --add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED --add-opens java.base/jdk.internal.access=ALL-UNNAMED --add-opens java.base/jdk.internal.misc=ALL-UNNAMED --add-opens java.base/sun.reflect.generics.reflectiveObjects=ALL-UNNAMED --add-opens java.base/jdk.internal.perf=ALL-UNNAMED --add-opens java.base/java.instrument=ALL-UNNAMED --add-opens jdk.attach/sun.tools.attach=ALL-UNNAMED 
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;總結&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li&gt;ZGC 作為新一代垃圾回收器，各項性能指標都比較突出，升級之後，機器成本和性能收益明顯；&lt;/li&gt; 
 &lt;li&gt;Spring AI SDK 支持的 JDK 版本最小為 17，升級到 JDK 17 能更好地擁抱 AI 新技術；&lt;/li&gt; 
 &lt;li&gt;直接從 JDK 8 升級到 JDK 17 跨度較大，需要解決的兼容性問題較多，如果公司的基礎組件不支持 JDK 17，可以考慮先升級到 JDK 11 做一個過渡；&lt;/li&gt; 
 &lt;li&gt;如果在升級與實踐的過程中遇到了一些問題，可以結合 AI 大模型來給出解決方案，幫助提高升級效率。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;註釋&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[1] &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fen%2Fjava%2Fjavase%2F17%2Flanguage%2Fjava-language-changes-summary.html" target="_blank"&gt;語言特性&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[2] &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fen%2Fjava%2Fjavase%2F17%2Fdocs%2Fspecs%2Fman%2Fjpackage.html" target="_blank"&gt;打包工具 jpackage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[3] &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fen%2Fjava%2Fjavase%2F17%2Fcore%2Fprocess-api1.html" target="_blank"&gt;進程相關 API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[4] &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F387" target="_blank"&gt;彈性元空間&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[5] TP999：指的是 OctoService.TP999&lt;/li&gt; 
 &lt;li&gt;[6] &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmalloc.se%2Fblog%2Fzgc-jdk16" target="_blank"&gt;TP9999&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;閲讀更多&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;| 關注「美團技術團隊」微信公眾號，在公眾號菜單欄對話框回覆【2024 年貨】、【2023 年貨】、【2022 年貨】、【2021 年貨】、【2020 年貨】、【2019 年貨】、【2018 年貨】、【2017 年貨】等關鍵詞，可查看美團技術團隊歷年技術文章合集。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//99197a0cda5599168313884ca25c4fd6.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;| 本文系美團技術團隊出品，著作權歸屬美團。歡迎出於分享和交流等非商業目的轉載或使用本文內容，敬請註明 "內容轉載自美團技術團隊"。本文未經許可，不得進行商業性轉載或者使用。任何商用行為，請發送郵件至 &lt;a href="https://www.oschina.net/action/GoToLink?url=mailto%3Atech%40meituan.com" target="_blank"&gt;tech@meituan.com&lt;/a&gt; 申請授權。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/meituantech/blog/18627969</link>
      <guid isPermaLink="false">https://my.oschina.net/meituantech/blog/18627969</guid>
      <pubDate>Sat, 10 May 2025 03:41:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>深圳程序員住車裏，被質疑佔用公共資源</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;今年 4 月，深圳程序員張運來因不租房住車裏引發大量關注。報道稱，張運來工作日期間天天睡車裏，週五晚上再開車約 300 公里回陽江老家陪家人，週一一早再開車回深圳上班。利用公園的公共衞生間洗漱，每晚只需花費 6 元停車費，每日消費僅 100 元上下。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;通過住進車裏，「三年多省了差不多十萬塊錢」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="416" src="https://oscimg.oschina.net/oscnet/up-a27f5633fe69b3d829c02629eb8616161d2.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;但該行為也引來了許多網友的質疑，認為他佔用了公共資源。對此，紅星新聞記者近日專訪張運來。張運來解釋稱，自己並沒有不文明行為。深圳灣晚上的空閒車位很多，他只是剛好利用空閒時間在那邊過夜，最多也只是在公園的洗手間進行刷牙洗臉。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356800</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356800</guid>
      <pubDate>Sat, 10 May 2025 03:20:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>羅永浩：3 個月後發佈新 AI 產品，梁文鋒建議我「靠嘴吃飯」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;羅永浩近日以「科技創業者」身份出席線下活動時表示，接下來兩三個月內，他會發布一款與郵件等場景相關的提高工作效率的 AI 生產力軟件工具。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;羅永浩表示，他認為用 AI 做圖片生成、視頻生成等技術比較驚豔。但他認為，具體到 Email 場景中，無論是雅虎還是谷歌，當前很多 Email 和 AI 結合的 AI 郵件產品體驗做得不好。而且，很多相關的美國明星創業公司也融了不少錢，但產品做得很差。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;「然後我就感覺，我們可以把 AI 郵件這塊做得更好，這個過程裏我們雖然沒有資源和錢去做預訓練，但基於第一批的用户不斷優化，我們是有信心的。而且我不擔心這個事兒會被大公司覆蓋掉。所以我們想要做得更好，被收費也是一個好的出路。」羅永浩表示，用 GUI 設計出來的工作流可以處理海量的郵件，如果利用 AI 把郵件產品優化的話，可以節省掉 2/3 以上的時間。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="335" src="https://oscimg.oschina.net/oscnet/up-ccc7ab26346d316e69b64e6f303f93227d1.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;談到 AI 取代人類話題，羅永浩表示，「我經常被非科技行業的人問，AI 替代了人怎麼辦。為什麼都問我呢？畢竟我也還沒做出來 AI 產品」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;羅永浩説，AI 並不意味着所有人都會失業，但是每個人都要學會 AI，哪怕是在辦公室裏偷懶，也要把更多的時間用在 AI 上，否則被裁員而失業了，你們也不知道該怎麼辦。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;「我們以前招了幾個人做戰略分析，寫 15000 字戰略報告那種，現在用 AI 很快能寫出來，15 分鐘做到之前一週內的水平，質量還好。結果還沒裁這幾個人，他們就自己走了。去了哪裏呢？去了那些對 AI 還不懂的傳統公司。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此外，羅永浩也談到 DeepSeek，他曾在去年見過一次梁文鋒。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;羅永浩表示，他在酒店大堂裏面和梁文鋒見面攀談，他認為梁文鋒不像是老闆，而像一名學生，甚至像是「沒找到工作的博士後」，非常樸素。對於 AI 創業，梁文鋒給羅永浩提了意見，問他為什麼要做 AI，説他用嘴説話的能力是中國前三，就應該專注在用嘴這件事，建議去做個播客節目。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;「他説我沒有別的意思，我説我只是覺得一個人在任何領域裏，如果能做到全國前幾名，應該要堅持做這件事。」因此，羅永浩現場表示，2025 今年底前，他將可能創立一個 AI 領域的播客節目。而梁文鋒對於羅永浩做 AI 應用稱「結果我不好判斷」。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356791</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356791</guid>
      <pubDate>Sat, 10 May 2025 03:01:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>網信辦整治 AI 濫用，3500 餘款違規 AI 產品被處置</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;「清朗·整治 AI 技術濫用」專項行動於 2025 年 4 月啓動。第一階段累計處置違規小程序、應用程序、智能體等 AI 產品 3500 餘款，清理違法違規信息 96 萬餘條，處置賬號 3700 餘個，各項工作取得積極進展。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="245" src="https://oscimg.oschina.net/oscnet/up-61fa8623f6acb022a23177614c906e2d7ea.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;其中，在處置違規 AI 產品方面，騰訊規範應用程序管理，提高准入門檻，優化巡查機制，駁回、處置違規小程序、應用程序等共計 570 餘款。在清理違規 AI 產品教程和商品方面，微博通過策略識別、用户舉報等多渠道審核，累計處置違規內容 4800 餘條，並公佈典型案例。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在加強訓練語料管理方面，通義平台圍繞數據生命週期建立安全管理體系，在數據採集、訓練、使用等階段加強訓練語料管理。在強化安全管理措施方面，抖音建立「紅藍對抗」機制，模擬攻擊案例，修復潛在安全漏洞，優化模型對虛假信息的識別能力。在落實內容標識要求方面，阿里、快手、稀宇等重點平台積極推進元數據隱式標識落地落實。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在防範重點領域安全風險方面，小紅書在模型後置訓練階段輸入專業領域數據，提升模型對醫療、金融、未成年人等重點領域問題的理解能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;據悉，下一步，中央網信辦將聚焦 AI 造謠、低俗內容等 7 類突出問題，開展「清朗·整治 AI 技術濫用」專項行動第二階段工作，構建技術監測體系，形成處置處罰規範，推動內容標識如期落地，形成長效工作機制，着力維護清朗網絡生態，推動人工智能向善向好。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356788</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356788</guid>
      <pubDate>Sat, 10 May 2025 02:44:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>月之暗面 Kimi 首個 Agent 開始灰度測試</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;Kimi 首個 Agent Kimi-Researcher（深度研究）已於日前開始小範圍灰度測試。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FYV4M8YNZ5hnzfxaFQ7PL9A" target="_blank"&gt;公告&lt;/a&gt;稱，Kimi-Researcher 是基於端到端自主強化學習（end-to-end agentic RL）技術訓練的新一代 Agent 模型，也是一個專為深度研究任務而生的 Agent 產品。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;接下來，Kimi 還計劃逐步開源 Kimi-Researcher 基礎預訓練模型、以及強化學習後的模型。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;根據介紹，對於每一個問題，Kimi-Researcher 都會自主規劃任務執行流程，最終交付完整結果：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;澄清問題（clarification）：理解問題時主動反問，構建更清晰的問題空間；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;深入思考：每個任務平均進行 23 步推理，自主梳理並解決需求；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;主動搜索：每個任務，平均規劃 74 個關鍵詞，找到 206 個網址，由模型判斷並篩選出信息質量最高的前 3.2% 內容，剔除冗餘、低質信息；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;調用工具，交付結果：自主調用瀏覽器、代碼等工具，處理原始數據、自動生成分析結論，端到端完成交付。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;為了保證輸出的質量和信息覆蓋度，Kimi-Researcher 採用異步執行方式，用更多時間逐步推理、檢索和撰寫內容。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img alt="" height="250" src="https://oscimg.oschina.net/oscnet/up-7bf271cbc490315d0514136f703d2363fc1.gif" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:#000000"&gt;在完全&lt;/span&gt;&lt;strong style="color:#000000"&gt;零結構、無流程設計&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#000000"&gt;的設置下，&lt;/span&gt;&lt;span style="color:#000000"&gt;Kimi-Researcher 的&amp;nbsp;&lt;/span&gt;&lt;span style="background-color:#ffffff; color:#000000"&gt;Humanity’s Last Exam（HLE）基準測試得分如下：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;Pass@1 準確率：26.9%&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;Pass@4 準確率：40.17%&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;這一表現超過了 Claude 4 Opus（10.7%）、Gemini 2.5 Pro（21.6%），略高於 OpenAI Deep Research（26.6%），和 Gemini-Pro 的 Deep Research Agent（26.9%）打平，是目前已知最高水平之一。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:#000000"&gt;在紅杉中國發布的 xbench 基準測試中 —— 一套對齊真實任務場景的 AI 能力評估體系，Kimi-Researcher 在 DeepSearch 任務中取得 69% 的平均通過率。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="331" src="https://oscimg.oschina.net/oscnet/up-34b4836de3fd3cf3656ab62331a137ccf11.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong style="color:rgba(0, 0, 0, 0.9)"&gt;&lt;span style="color:#000000"&gt;可訪問&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#0080ff"&gt;&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.kimi.com%2F" target="_blank"&gt;&lt;u&gt;&lt;strong&gt;&lt;u&gt;kimi.com&lt;/u&gt;&lt;/strong&gt;&lt;/u&gt;&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&lt;strong style="color:rgba(0, 0, 0, 0.9)"&gt;&lt;span style="color:#000000"&gt;申請內測。&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#000000"&gt;對於獲得&lt;/span&gt;&lt;span style="background-color:#ffffff; color:#000000"&gt;內測權限的用户：只需打開 Kimi 對話框下方的「深度研究」按鈕，即可開始使用（每月 20 次額度，同時支持 1 條任務併發）。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356787</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356787</guid>
      <pubDate>Sat, 10 May 2025 02:37:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>比爾·蓋茨與 Linus 共同參加晚宴，50 年來首次會面</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近日，微軟創始人比爾·蓋茨與 Linux 內核創始人林納斯·託瓦茲在微軟 Azure 首席技術官馬克·魯西諾維奇家中出席晚宴，這是二人 50 年來首次同框。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-8a55b472cfd2df4a60c8160a72ba060d705.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據 The Verge 報道，馬克·魯西諾維奇在 LinkedIn 上&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linkedin.com%2Fposts%2Fmarkrussinovich_i-had-the-thrill-of-a-lifetime-hosting-dinner-activity-7341857033932914691-f5Kw%2F" target="_blank"&gt;分享&lt;/a&gt;了一張四人合照，除蓋茨和託瓦茲外，還包括戴維·卡特勒和他自己。他發文表示，能舉辦這次晚宴是一生的榮幸，託瓦茲從未見過蓋茨，戴維也從未見過託瓦茲。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-9676330f0dec6a2dc99200788e85e70504f.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Tom's Hardware 的報道&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.tomshardware.com%2Fsoftware%2Foperating-systems%2Flong-time-rivals-bill-gates-and-linus-torvalds-meet-for-the-first-time-have-dinner-no-major-kernel-decisions-were-made-but-maybe-next-dinner" target="_blank"&gt;指出&lt;/a&gt;，這次會面是一次歷史性突破，二人坐在一起暢談，而幾十年前這樣的場景可能會引發激烈爭吵，但現在時間讓一切變得包容。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356781/bill-gates-linus-torvalds-meeting-photo</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356781/bill-gates-linus-torvalds-meeting-photo</guid>
      <pubDate>Sat, 10 May 2025 02:24:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>tlmqtt：如何基於責任鏈模式進行高效認證</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;strong&gt;tlmqtt&lt;/strong&gt;是一款基於&lt;code&gt;Java&lt;/code&gt;開發的輕量級高併發&lt;code&gt;MQTT Broker&lt;/code&gt;，採用&lt;code&gt;Netty&lt;/code&gt;和&lt;code&gt;Project Reactor&lt;/code&gt;實現異步通信，完整支持&lt;strong&gt;MQTT 3.1.1&lt;/strong&gt;協議，包括&lt;strong&gt;QoS&lt;/strong&gt;消息分級、主題通配符、消息持久化等核心功能。項目採用模塊化設計，&lt;strong&gt;提供認證（文件/數據庫/HTTP）&lt;/strong&gt;、&lt;strong&gt;數據橋接（Kafka/MySQL&lt;/strong&gt;）和&lt;strong&gt;存儲（內存/Redis）&lt;strong&gt;等可擴展組件，支持&lt;/strong&gt;MQTT&lt;/strong&gt;和&lt;strong&gt;WebSocket&lt;/strong&gt;雙協議接入。具備生產級特性如&lt;strong&gt;SSL&lt;/strong&gt;加密、會話恢復及高併發處理能力，適用於物聯網和實時通信場景。&lt;/p&gt; 
&lt;h1&gt;認證&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;mqtt&lt;/code&gt;協議規定了&lt;strong&gt;CONNECT&lt;/strong&gt;包含有&lt;code&gt;Username&lt;/code&gt;和&lt;code&gt;Password&lt;/code&gt;字段。實現可以選擇如何使用這些字段的內容。他們也可能提供自己的認證機制，使用額外的認證系統。 而&lt;strong&gt;tlmqtt&lt;/strong&gt;實現了&lt;strong&gt;基本文件&lt;/strong&gt;，&lt;strong&gt;mysql&lt;/strong&gt;和&lt;strong&gt;http 接口&lt;/strong&gt;的 3 種認證方式，並且提供了擴展讓用户自行去實現認證方式並添加到認證鏈中，其中只要有任何一個認證通過了，那麼此次客户端連接就是通過的&lt;/p&gt; 
&lt;h1&gt;tlmqtt 認證原理&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;tlmqtt&lt;/strong&gt;存在一個抽象類&lt;code&gt;AbstractTlAuthentication&lt;/code&gt;它定義了認證相關的抽象方法，有具體的認證器去實現&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;nbsp; /**
&amp;nbsp; &amp;nbsp; &amp;nbsp;* 認證接口
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @author hszhou
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @datetime: 2025-05-10 10:51:55
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @param username 用户名
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @param password 密碼
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @return boolean 是否成功
&amp;nbsp; &amp;nbsp; &amp;nbsp;**/
&amp;nbsp; &amp;nbsp; abstract public boolean authenticate(String username, String password);

&amp;nbsp; &amp;nbsp; /**
&amp;nbsp; &amp;nbsp; &amp;nbsp;* 是否啓用了該認證器
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @author hszhou
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @datetime: 2025-05-12 10:11:26
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @return boolean 是否啓用
&amp;nbsp; &amp;nbsp; &amp;nbsp;**/
&amp;nbsp; &amp;nbsp; abstract public boolean enabled();


&amp;nbsp; &amp;nbsp; /**
&amp;nbsp; &amp;nbsp; &amp;nbsp;* 添加新的認證主體
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @author hszhou
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @datetime: 2025-05-15 17:53:17
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @param object 添加的認證實體
&amp;nbsp; &amp;nbsp; &amp;nbsp;**/
&amp;nbsp; &amp;nbsp; abstract public void add(Object object);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;NoneAuthenticationService&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;tlmqtt&lt;/strong&gt; 是可以通過一個配置來進行關閉客户端的認證的。 &amp;nbsp;&lt;code&gt;yml &amp;nbsp;auth: &amp;nbsp; enabled: true #是否開啓認證 false 就是關閉認證&lt;/code&gt; &amp;nbsp;其實現原理就是通過&lt;code&gt;NoneAuthenticationService&lt;/code&gt;這個認證器。也是認證鏈中的第一個認證器。 &amp;nbsp;&lt;code&gt;@Override &amp;nbsp; &amp;nbsp; public boolean authenticate(String username, String password) { &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return true; &amp;nbsp; &amp;nbsp; }&lt;/code&gt; 其主要實現了&lt;code&gt;authenticate&lt;/code&gt;方法返回的是&lt;code&gt;true&lt;/code&gt;。&lt;code&gt;NoneAuthenticationService&lt;/code&gt;並不關心客户端的用户名和密碼，也就是無論用户名和密碼是什麼，他都不會在意，只會返回&lt;code&gt;true&lt;/code&gt;。表示認證通過，而&lt;code&gt;enabled&lt;/code&gt;方法返回的就是是否開啓，一旦開啓了，那麼這個&lt;code&gt;authenticate&lt;/code&gt;就會執行。由於處於認證鏈的首位。只要通過了就不會執行其他的認證了。&lt;/p&gt; 
&lt;h2&gt;FixTlAuthentication&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;FixTlAuthentication&lt;/code&gt;是基於固定用户的認證方式。其固定的用户的配置方式有 2 種， 第一種是基於文件的,這種方式是提前將用户寫入到配置文件中&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;auth:
&amp;nbsp; enabled: true #是否開啓認證 false 就是關閉認證
&amp;nbsp; user: #開啓認證後 fix 的認證信息
&amp;nbsp; &amp;nbsp; - username: watson
&amp;nbsp; &amp;nbsp; &amp;nbsp; password: 12345
&amp;nbsp; &amp;nbsp; - username: zhouhs
&amp;nbsp; &amp;nbsp; &amp;nbsp; password: 12345
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;第二種方式是基於編程的&lt;strong&gt;tlmqtt&lt;/strong&gt;啓動引導類支持動態添加用户&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;tlBootstrap.setFixUser(Collections.singletonList(new TlUser("admin","12345")))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;FixTlAuthentication&lt;/code&gt;的內部維護了一個用户列表，&lt;code&gt;authenticate&lt;/code&gt;方法就是將客户端的用户名與密碼將內部的用户列表繼續依次匹配。只要有任何一個匹配成功就返回。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&amp;nbsp; &amp;nbsp; public boolean authenticate(String username, String password) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if(users.isEmpty()){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return false;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for (TlUser user : users) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (user.getUsername().equals(username) &amp;amp;&amp;amp; user.getPassword().equals(password)) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log.debug("username = 【{}】,password = 【{}】 pass",username,password);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return true;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return false;
&amp;nbsp; &amp;nbsp; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;而編程式的添加用户就是往內部的用户列表中添加用户&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&amp;nbsp; &amp;nbsp; @Override
&amp;nbsp; &amp;nbsp; public void add(Object object) {

&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if( object instanceof TlUser){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log.debug("join fix authentication user 【{}】",object);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.users.add((TlUser) object);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; }

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;HttpTlAuthentication&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;HttpTlAuthentication&lt;/code&gt;認證器是基於&lt;code&gt;http&lt;/code&gt;請求的認證器。也是&lt;strong&gt;tlmqtt&lt;/strong&gt;的內置認證器之一。通過將用户名與密碼當做參數請求第三方的 API 進行認證。只要&lt;code&gt;API&lt;/code&gt;返回的狀態碼為&lt;strong&gt;200&lt;/strong&gt;，注意的是這裏的狀態碼&lt;strong&gt;200&lt;/strong&gt;是&lt;code&gt;HTTP&lt;/code&gt;的狀態碼，而不是第三方系統自己定義的&lt;strong&gt;200&lt;/strong&gt;. &lt;strong&gt;tmqtt&lt;/strong&gt;將&lt;code&gt;http&lt;/code&gt;請求封裝成一個對象&lt;code&gt;HttpEntityInfo&lt;/code&gt;。裏面有&lt;code&gt;API&lt;/code&gt;的地址，參數等等信息&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;public class HttpEntityInfo {

&amp;nbsp; &amp;nbsp; /**請求的地址*/
&amp;nbsp; &amp;nbsp; private String url;
&amp;nbsp; &amp;nbsp; /**方法類型 post 或者 get*/
&amp;nbsp; &amp;nbsp; private String method;
&amp;nbsp; &amp;nbsp; /**請求頭*/
&amp;nbsp; &amp;nbsp; private HashMap&amp;lt;String, String&amp;gt; headers;
&amp;nbsp; &amp;nbsp; /**用户的參數，例如，參數是 uname 與 pwd 那麼這個 params 的參數就是 ("username","uname") ("password","pwd")*/
&amp;nbsp; &amp;nbsp; private HashMap&amp;lt;String,String&amp;gt; params;

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;HttpTlAuthentication&lt;/code&gt;將認證接口大致分為 3 類，&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;POST&lt;/code&gt;請求的&lt;code&gt;form&lt;/code&gt;表單提交&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;POST&lt;/code&gt;請求的&lt;code&gt;json&lt;/code&gt;數據提交&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET&lt;/code&gt;請求&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;最終只要請求返回的是&lt;strong&gt;200&lt;/strong&gt;就認證認證成功&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;HttpTlAuthentication&lt;/code&gt;認證過濾器不單單可以設置一個&lt;code&gt;API&lt;/code&gt;。可以通過多個&lt;code&gt;API&lt;/code&gt;接口組成的集合進行認證。其內部維護了一個&lt;code&gt;HttpEntityInfo&lt;/code&gt;的集合。只要任何一個 API 通過，及認證通過&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&amp;nbsp; &amp;nbsp;private final List&amp;lt;HttpEntityInfo&amp;gt; httpEntityInfos;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;HttpTlAuthentication&lt;/code&gt;提供了動態添加&lt;code&gt;http&lt;/code&gt;接口的方式&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&amp;nbsp; &amp;nbsp; @Override
&amp;nbsp; &amp;nbsp; public void add(Object object) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (object instanceof HttpEntityInfo) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.httpEntityInfos.add((HttpEntityInfo) object);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;使用方式&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&amp;nbsp; HttpEntityInfo entityInfo = AuthenticationHttpProvider.formLogin();
&amp;nbsp; HttpEntityInfo login = AuthenticationHttpProvider.getLogin();
&amp;nbsp; tlBootstrap.addAuthEntity(entityInfo)
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .addAuthEntity(login)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;SqlTlAuthentication&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;SqlTlAuthentication&lt;/code&gt;認證器是基於 mysql 數據庫的認證，&lt;strong&gt;tlmqtt&lt;/strong&gt;將&lt;code&gt;SqlTlAuthentication&lt;/code&gt;的數據封裝成了一個 SQL 對象&lt;code&gt;SqlEntityInfo&lt;/code&gt;。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&amp;nbsp; /**地址*/
&amp;nbsp; &amp;nbsp; private String host;

&amp;nbsp; &amp;nbsp; /**端口號*/
&amp;nbsp; &amp;nbsp; private String port;

&amp;nbsp; &amp;nbsp; /**用户名*/
&amp;nbsp; &amp;nbsp; private String username;

&amp;nbsp; &amp;nbsp; /**密碼*/
&amp;nbsp; &amp;nbsp; private String password;

&amp;nbsp; &amp;nbsp; /**數據庫名*/
&amp;nbsp; &amp;nbsp; private String &amp;nbsp;database;

&amp;nbsp; &amp;nbsp; /**表名*/
&amp;nbsp; &amp;nbsp; private String table;

&amp;nbsp; &amp;nbsp; /**用户名字段*/
&amp;nbsp; &amp;nbsp; private String usernameColumn;

&amp;nbsp; &amp;nbsp; /**密碼字段*/
&amp;nbsp; &amp;nbsp; private String passwordColumn;

&amp;nbsp; &amp;nbsp; private String driverClassName;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;如果需要使用到&lt;code&gt;SqlTlAuthentication&lt;/code&gt;認證過濾器，就需要添加相應的&lt;code&gt;SqlEntityInfo&lt;/code&gt;。&lt;code&gt;SqlEntityInfo&lt;/code&gt;設置數據庫的地址，表名和用户名和密碼的字段。然後其內部維護了一個&lt;code&gt;SqlEntityInfo&lt;/code&gt;集合，與&lt;code&gt;http&lt;/code&gt;認證器一致，只要有任何一個認證通過即可，當用户設置成功後，&lt;strong&gt;tlmqtt&lt;/strong&gt;會執行內部的&lt;code&gt;sql&lt;/code&gt;語句並替換相應的參數&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;&amp;nbsp;private static final String SQL = "SELECT COUNT(*) FROM %s WHERE %s = ? AND %s = ?";
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;SqlTlAuthentication&lt;/code&gt;提供動態方法新增 SqlEntityInfo 的方式。使用方法&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;SqlEntityInfo sqlEntityInfo = AuthenticationMysqlProvider.providerDemo();
tlBootstrap .addAuthEntity(sqlEntityInfo) &amp;nbsp; &amp;nbsp;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;可擴展的認證鏈&lt;/h2&gt; 
&lt;p&gt;當上述認證器不滿足系統的認證方式，&lt;strong&gt;tlmqtt&lt;/strong&gt;提供了可擴展的認證器。是需要用户繼承&lt;code&gt;AbstractTlAuthentication&lt;/code&gt;類即可。然後實現&lt;code&gt;authenticate&lt;/code&gt;方法。然後通過輔助引導類&lt;code&gt;TlBootstrap&lt;/code&gt;的&lt;code&gt;addAuthentication&lt;/code&gt;方法即可。&lt;/p&gt; 
&lt;h3&gt;實現 AbstractTlAuthentication 類&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;@Slf4j
public class NoneA extends AbstractTlAuthentication {
&amp;nbsp; &amp;nbsp; @Override
&amp;nbsp; &amp;nbsp; public boolean authenticate(String username, String password) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return true;
&amp;nbsp; &amp;nbsp; }

&amp;nbsp; &amp;nbsp; @Override
&amp;nbsp; &amp;nbsp; public boolean enabled() {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return true;
&amp;nbsp; &amp;nbsp; }

&amp;nbsp; &amp;nbsp; @Override
&amp;nbsp; &amp;nbsp; public void add(Object object) {

&amp;nbsp; &amp;nbsp; }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;添加認證器&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&amp;nbsp;tlBootstrap.addAuthentication(new NoneA())
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;這樣就可以將自定義的認證器添加到&lt;code&gt;tlmqtt&lt;/code&gt;的整個認證體系中。&lt;/p&gt; 
&lt;h1&gt;結語&lt;/h1&gt; 
&lt;p&gt;歡迎通過以下方式參與項目共建：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;提交 Issue&lt;/strong&gt;：反饋 Bug 或提出功能建議&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;提交 PR&lt;/strong&gt;：優化代碼或新增功能（建議先創建 Issue 溝通方案）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Star/Fork&lt;/strong&gt;：支持項目持續發展&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;聯繫方式：&lt;/h1&gt; 
&lt;p&gt;項目地址 &amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FZHSQJM%2Ftlmqtt%23" target="_blank"&gt;https://github.com/ZHSQJM/tlmqtt&lt;/a&gt; &amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitee.com/PiQiHenHaoDeGangTieXia/tlmqtt"&gt;https://gitee.com/PiQiHenHaoDeGangTieXia/tlmqtt&lt;/a&gt; &amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;tlmqtt&lt;/strong&gt;致力於為物聯網開發者提供輕量、高效的 MQTT 消息服務，期待您的加入！ 🚀&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356775</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356775</guid>
      <pubDate>Sat, 10 May 2025 02:08:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
  </channel>
</rss>
