<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>開源中國-綜合資訊</title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="http://8.134.148.166:30044/oschina/news/industry" rel="self" type="application/rss+xml"></atom:link>
        <description>開源中國-綜合資訊 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Tue, 15 Apr 2025 07:35:55 GMT</lastBuildDate>
        <ttl>5</ttl>
        <item>
            <title>理想汽車發佈「理想星環 OS 技術架構白皮書」，4 月底開始逐步開放各模塊源代碼</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;4 月 15 日，理想汽車通過官方網站正式發佈&lt;strong&gt;「理想星環 OS 技術架構白皮書」，&lt;/strong&gt;系統闡述汽車操作系統定義、分析發展趨勢，結合創新場景案例，詳細介紹理想星環 OS 技術架構及核心系統，並公開其開源計劃。 &amp;nbsp; &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/152153_kvwb_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;官方介紹稱，該白皮書旨在為全球開發者提供技術指導，牽引產業鏈上下游企業共建理想星環 OS，加速實現從智能系統（Smart System）到智慧系統（Intelligent System）的跨越，向「空間智能操作系統」進化。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/152514_467q_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/152204_oOi8_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;根據白皮書內容，&lt;strong&gt;從 4 月底開始，理想汽車將在官方網站的「開源論壇」逐步開放各模塊源代碼&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;4 月 23 日開源星環 OS 0.1.0 版本，包括安全實時 RTOS、通信總線-Lite&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;6 月 30 日開源星環 OS 1.0.0 版本，包括完整的智能車控系統、智能駕駛系統基礎能力&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;7 月後開源完整的智能駕駛系統，包括虛擬化引擎&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/152220_QMrL_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;附「理想星環 OS 技術白皮書」鏈接：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.lixiang.com%2Ftech%2Fhaloos&quot; target=&quot;_blank&quot;&gt;https://www.lixiang.com/tech/haloos&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;相關閲讀：&lt;a href=&quot;https://www.oschina.net/news/341314&quot; target=&quot;news&quot;&gt;李想官宣開源整車操作系統「星環 OS」&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344690/lixiang-haloos-opensource-comming-soon</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344690/lixiang-haloos-opensource-comming-soon</guid>
            <pubDate>Tue, 15 Apr 2025 07:22:52 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>育碧開源色盲輔助工具 Chroma</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;育碧宣佈開源色盲輔助工具 Chroma，官方稱其為「&lt;strong&gt;檢測遊戲中色盲相關問題的一站式解決方案」&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-7819440d465fbba6c632ef6c97401fc8a25.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;開源地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fubisoft%2FUbiChroma&quot; target=&quot;_blank&quot;&gt;https://github.com/ubisoft/UbiChroma&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;根據介紹，Chroma 可將過濾器投射到遊戲屏幕上，&lt;strong&gt;模擬各種類型的色盲&lt;/strong&gt;，測試人員能夠實時標記可訪問性問題。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-97320765b814d48942ecc14258fe7b2d8e9.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;該工具使用 Color Oracle 算法，並可與單屏或雙屏設置集成；支持熱鍵，並提供可自定義的覆蓋層以調整設置。育碧官方表示，&lt;strong&gt;過濾器不會影響遊戲性能&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9338e0fb1d491d875e03988be195bf5e9e2.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;需要注意的是，這款軟件模擬了色盲人士玩遊戲時的體驗，但並不能修復任何問題，只是方便開發者進行適配。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344685/ubisoft-ubichroma</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344685/ubisoft-ubichroma</guid>
            <pubDate>Tue, 15 Apr 2025 07:16:52 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>Meta 反壟斷案開庭審理，若敗訴恐被強制拆分</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;美國聯邦貿易委員會（FTC）終於迎來了與 Meta Platforms Inc.對簿公堂的一天，指控該公司十多年前收購 Instagram 和 WhatsApp 之後非法壟斷社交媒體市場，因此必須進行拆分。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;287&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-14e9fc559b3fa542876e5b3e95d38218353.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;這起醖釀多年的案件本週一在首席法官 James Boasberg 主持下於華盛頓開庭。FTC 的律師在開庭陳述中援引了美國長期以來倡導維護競爭市場的傳統，其牽頭的審判律師 Daniel Matheson 指責 Meta 違反了這一原則。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;如果 FTC 勝訴、Instagram 和 WhatsApp 被強制剝離，這兩款應用多年以來的整合將功虧一簣，全球最受歡迎的兩款數字消費產品將受到衝擊，並可能抹去 Meta 數以千億美元的市值。這也將引發外界對政府如何評估和批准企業併購的嚴重質疑。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;該案的審理預計將耗時兩個月左右，Meta 首席執行官扎克伯格以及前高管 Sheryl Sandberg 最快本週就將出庭作證。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Meta 公司在庭審首日辯稱，自己正面臨來自多家服務商的激烈競爭，尤其是在社交媒體日益偏向娛樂化而非僅用於與朋友和家庭互動的當下，此外公司還為用户帶來了明顯的好處。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344674</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344674</guid>
            <pubDate>Mon, 14 Apr 2025 06:29:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>MCP 安全檢查清單：AI ⼯具⽣態系統安全指南</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;慢霧科技是全球領先的區塊鏈生態威脅情報公司，旨在幫助區塊鏈生態與 AI 生態相融合的過程中擁有更加深度的安全防護能力及保護用户擁有更高的隱私性。&lt;/p&gt; 
&lt;p&gt;近日，慢霧安全團隊發佈了一份 MCP 安全檢查清單，涵蓋了從&lt;strong&gt;用户交互界面、客户端組件、服務插件，到多 MCP 協作機制&lt;/strong&gt;及特定領域（如加密貨幣場景）的安全要點，旨在幫助開發者系統性地識別潛在風險並及時加以防範。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-573a44275abaa5a34bdb2f9e8a027d3c98b.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;▲ MCP 多組件交互流程與關鍵風險點示意圖&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;隨着大模型的迅猛發展，各種新的 AI 工具也在不斷湧現，當下代表性的 MCP（Model Context Protocol）標準實現的工具正逐漸成為連接大語言模型（LLM）與外部工具、數據源之間的關鍵橋樑。&lt;/p&gt; 
 &lt;p&gt;自 2024 年底發佈以來，MCP 已被廣泛應用於 Claude Desktop、Cursor 等主流 AI 應用中，MCP Server 的各種商店也在不斷出現，展現出強大的生態擴展能力。 &amp;nbsp;&lt;/p&gt; 
 &lt;p&gt;然而，MCP 的快速普及也帶來了新的安全挑戰。當前 MCP 架構中，系統由 Host（本地運行的 AI 應用環境）、Client（負責與 Server 通信與工具調用的組件） 以及 Server（MCP 插件所對應的服務端） 三部分構成。&lt;/p&gt; 
 &lt;p&gt;用户通過 Host 與 AI 交互，Client 將用户請求解析並轉發至 MCP Server，執行工具調用或資源訪問。在多實例、多組件協同運行的場景下，該架構暴露出一系列安全風險，尤其在涉及加密貨幣交易或 LLM 自定義插件適配等敏感場景中，風險更為突出，需要適當的安全措施來管理。 &amp;nbsp;&lt;/p&gt; 
 &lt;p&gt;在此背景下，制定和遵循一套全面的 MCP 安全檢查清單顯得尤為重要。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;完整內容查看：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fslowmist%2FMCP-Security-Checklist%2Fblob%2Fmain%2FREADME_CN.md&quot; target=&quot;_blank&quot;&gt;https://github.com/slowmist/MCP-Security-Checklist/blob/main/README_CN.md&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344672</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344672</guid>
            <pubDate>Mon, 14 Apr 2025 06:21:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>谷歌公佈 AI 模型 DolphinGemma，可理解海豚聲音</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;谷歌旗下 AI 研究實驗室 DeepMind &lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.google%2Ftechnology%2Fai%2Fdolphingemma%2F&quot; target=&quot;_blank&quot;&gt;公佈&lt;/a&gt;&lt;/u&gt;了一款名為「DolphinGemma」的 AI 模型，旨在幫助科學家理解海豚的聲音，並生成類似海豚的聲音序列。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/141017_ey2E_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;DolphinGemma 基於谷歌開放的 Gemma 系列模型構建，其訓練數據來源於專注於研究大西洋斑點海豚及其行為的非營利組織 Wild Dolphin Project（WDP）。該模型能夠生成類似海豚的聲音序列，並且非常高效，谷歌表示其可以在手機上運行。&lt;/p&gt; 
&lt;p&gt;今年夏天，WDP 計劃藉助谷歌的 Pixel 9 智能手機搭建一個平台，該平台能夠合成海豚的聲音，並且可以聆聽海豚的發聲以獲得匹配的「回應」。&lt;/p&gt; 
&lt;p&gt;谷歌透露，WDP 此前一直使用 Pixel 6 來進行相關研究工作，而升級到 Pixel 9 後，將使該組織的研究人員能夠同時運行 AI 模型和模板匹配算法，從而進一步提升研究效率。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344668/google-ai-dolphingemma</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344668/google-ai-dolphingemma</guid>
            <pubDate>Mon, 14 Apr 2025 06:11:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>中國科學院軟件所提出智能合約漏洞檢測新模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;近日，中國科學院軟件研究所集成創新中心研究團隊在智能合約漏洞檢測領域取得進展，提出了一種基於精準計算的檢測模型，顯著提升智能合約漏洞檢測的準確性與可解釋性。相關成果論文 Smart-LLaMA-DPO: Reinforced Large Language Model for Explainable Smart Contract Vulnerability Detection 被 CCF-A 類軟件工程領域國際頂級會議 ISSTA 2025 接收，第一作者為博士生於磊，通訊作者為楊立副研究員與張鳳軍研究員。&lt;/p&gt; 
&lt;p&gt;隨着區塊鏈技術在各領域的廣泛應用，智能合約的安全性日益受到重視。當前智能合約的漏洞檢測普遍存在兩方面問題：一是現有數據集覆蓋漏洞類型有限，且缺乏高質量解釋標註，導致模型難以精準學習漏洞模式；二是大語言模型對智能合約語義理解不足，易出現誤判或解釋邏輯錯誤，難以滿足實際漏洞檢測需求。&lt;/p&gt; 
&lt;p&gt;針對上述問題，研究團隊提出一種智能合約漏洞檢測新模型 Smart-LLaMA-DPO。該模型首先基於持續預訓練方法，嵌入智能合約語法、安全模式等專業領域知識，創建具有高質量解釋標註的數據集。然後以精準計算為核心，即採用監督微調與直接偏好優化策略相結合的多階段訓練方法，通過工程師在漏洞檢測中的實踐反饋，迭代優化模型輸出，確保模型對智能合約語義的充分理解，提升漏洞定位與解釋的精準性。此外，還引入了開源大模型進一步訓練 Smart-LLaMA-DPO，並支持私有化部署與自動化更新。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;253&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c62efc4141ba6a3816b4fec4b0209f31196.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Smart-LLaMA-DPO 模型框架圖&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;研究團隊在以太坊、Hyperledger Fabric 等主流區塊鏈平台的智能合約公開數據集上進行了大規模測試。實驗結果表明，Smart-LLaMA-DPO 在重入漏洞、時間戳依賴等複雜場景下的誤報率相較於最先進模型 DMT 仍分別降低了 6.18% 和 1.46%，生成的漏洞解釋在正確性、完整性和清晰度方面均獲得 81.15% 以上的人工評估專家認可，相關代碼與數據集已面向學術界和工業界開源。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;357&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-eab099f431579b7808249fd0d9a7350263c.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Smart-LLaMA-DPO 和各模型實驗效果對比&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;目前，研究團隊正與中科軟科技股份有限公司合作推進技術轉化，針對金融、供應鏈等場景開發定製化檢測工具，構建智能合約漏洞知識圖譜與自動化修復建議系統，助力實現企業智能合約全生命週期安全管理。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相關鏈接&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;論文地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyangli8953.github.io%2Fissta2025-ae-paper11.pdf&quot; target=&quot;_blank&quot;&gt;https://yangli8953.github.io/issta2025-ae-paper11.pdf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;論文代碼與數據集地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoi.org%2F10.5281%2Fzenodo.15200616&quot; target=&quot;_blank&quot;&gt;https://doi.org/10.5281/zenodo.15200616&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344667</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344667</guid>
            <pubDate>Mon, 14 Apr 2025 06:10:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>智譜啓動上市輔導</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;中國證監會官網信息顯示，北京智譜華章科技股份有限公司（以下簡稱「智譜」）4 月 14 日在北京證監局辦理輔導備案，輔導機構為中國國際金融股份有限公司。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;273&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-96a5cb6793f83b1b211bbf88058bff6b28a.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此舉意味着，智譜成為了第一家正式啓動 IPO 流程的「AI 六小虎」公司，也是第一家正式啓動 IPO 流程的大模型創業公司。去年 12 月以來，智譜已共計完成 48 億元融資。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此前，天眼查 App 信息&lt;a href=&quot;https://www.oschina.net/news/341522&quot;&gt;顯示&lt;/a&gt;，北京智譜華章科技有限公司發生工商變更，企業名稱變更為北京智譜華章科技股份有限公司，同時部分主要人員發生變更。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;相關閲讀：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/344598&quot; target=&quot;news&quot;&gt;智譜開源 32B/9B 系列 GLM 模型，極速版最高達到 200tokens/秒&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344631</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344631</guid>
            <pubDate>Mon, 14 Apr 2025 03:31:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>七牛雲 CEO 許式偉分享「怎麼做架構」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;七牛雲 CEO、Go+編程語言創始人許式偉近日在社交媒體的分享：「怎麼成長為優秀的工程師、怎麼做架構」。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/112207_MP0l_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fopen.qiniu.us%2Farch-camp-3rd%2Fhow-arch.pdf&quot; target=&quot;_blank&quot;&gt;http://open.qiniu.us/arch-camp-3rd/how-arch.pdf&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;摘錄部分內容如下：&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;架構設計的核心思想&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;模塊化設計&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;架構的本質是模塊拆解、連接與組合。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;模塊的規格高於實現，模塊之間應儘量正交（無耦合）。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;橋接代碼越少，架構設計越優秀（乘法效應）。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;乘法思維&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;每個模塊應是一個獨立的子業務，具有更大的需求邊界和前景。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;模塊化設計的目標是通過組合模塊實現複雜功能，而非直接堆疊功能。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;從 Go+的實現看架構拆解&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;模塊化拆解的案例&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Go+的實現過程：將複雜問題拆解為多個獨立模塊（如 scanner、parser、ast 等）。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;模塊之間通過橋接代碼組合，而非直接依賴需求。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;重要結論&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;模塊切分通常與需求不直接對應，過度依賴需求可能導致模塊劃分和團隊分工問題。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;需求分析的關鍵在於預判未來發展方向和洞察內在邏輯關聯。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;總結&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;架構設計的核心是模塊化和乘法思維，通過拆解複雜問題、組合獨立模塊來實現高效開發。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;頂級架構師的目標是通過最少的橋接代碼實現最大的功能擴展性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;需求分析和模塊化設計是架構設計的基礎，需避免過度依賴當前需求。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;相關閲讀：&lt;a href=&quot;https://www.oschina.net/news/343197/goplus-1-3&quot; target=&quot;news&quot;&gt;Go+ v1.3 新特性預覽：Go+ Mini Spec、領域文本及 TPL&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344630/how-arch</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344630/how-arch</guid>
            <pubDate>Mon, 14 Apr 2025 03:25:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>緩存之美：萬文詳解 Caffeine 實現原理（下）</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;div class=&quot;rich_media_content js_underline_content
                       autoTypeSetting24psection
            &quot; id=&quot;js_content&quot;&gt; 
 &lt;span id=&quot;OSC_h3_1&quot;&gt;&lt;/span&gt; 
 &lt;h3 data-nodeid=&quot;3&quot; data-pm-slice=&quot;0 0 []&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;getIfPresent&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p data-nodeid=&quot;4&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;現在我們對&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;126&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;put&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法有了基本瞭解，現在我們繼續深入&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;128&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;getIfPresent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;TestReadSourceCode&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;doRead&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// read constructor&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Cache&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;String&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;String&lt;/span&gt;&amp;gt; cache =&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Caffeine&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;newBuilder&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;span class=&quot;code-snippet__title&quot;&gt;maximumSize&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;10_000&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;span class=&quot;code-snippet__title&quot;&gt;build&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// read put&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cache.&lt;span class=&quot;code-snippet__title&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;key&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;value&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// read get&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cache.&lt;span class=&quot;code-snippet__title&quot;&gt;getIfPresent&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;key&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;4&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;對應源碼如下，關注註釋信息：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.DrainStatusRef&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;ConcurrentHashMap&amp;lt;Object, Node&amp;lt;K, V&amp;gt;&amp;gt; data;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; readBuffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&amp;nbsp;V&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;getIfPresent&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Object key,&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;recordStats)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 直接由 ConcurrentHashMap 獲取元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; node = data.get(nodeFactory.newLookupKey(key));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(node ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新統計未命中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(recordStats) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statsCounter().recordMisses(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 當前 drainStatus 為 REQUIRED 表示有任務需要處理則調度處理&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(drainStatusOpaque() == REQUIRED) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 這個方法在上文中介紹過，它會提交 PerformCleanupTask 執行維護方法 maintenance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; scheduleDrainBuffers();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;V&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;value&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;node.getValue();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;now&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;expirationTicker().read();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 判斷是否過期或者需要被回收且 value 對應的值為 null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(hasExpired(node, now) || (collectValues() &amp;amp;&amp;amp; (value ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;))) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新統計未命中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(recordStats) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statsCounter().recordMisses(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; scheduleDrainBuffers();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 檢查節點沒有在進行異步計算&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!isComputingAsync(node)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@SuppressWarnings(&quot;unchecked&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;K&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;castedKey&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(K) key;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新訪問時間&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setAccessTime(node, now);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新讀後過期時間&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tryExpireAfterRead(node, castedKey, value, expiry(), now);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 處理讀取後操作（主要關注）&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;V&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;refreshed&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;afterRead(node, now, recordStats);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;(refreshed ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) ? value : refreshed;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;4&quot; style=&quot;line-height: 1.6em;text-indent: 0px;margin-left: 0px;margin-right: 0px;margin-bottom: 8px;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;getIfPresent&lt;/span&gt;&lt;/span&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;方法中，部分內容我們已經在上文中介紹過，比如&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;133&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;scheduleDrainBuffers&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法。最後一步&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;135&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;afterRead&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法是我們本次關注的重點，從命名來看它表示「讀後操作」接下來看看它的具體流程：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; final&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;gt; readBuffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; V&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;afterRead&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Node&amp;lt;K, V&amp;gt; node, long now,&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;recordHit&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新統計命中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(recordHit) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;statsCounter&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;recordHits&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 注意這裏如果 skipReadBuffer 為 false，那麼它會執行 readBuffer.offer(node) 邏輯，向 ReadBuffer 中添加待處理元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;delayable =&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;skipReadBuffer&lt;/span&gt;() || (readBuffer.&lt;span class=&quot;code-snippet__title&quot;&gt;offer&lt;/span&gt;(node) !=&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;FULL&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 判斷是否需要延遲處理維護任務&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;shouldDrainBuffers&lt;/span&gt;(delayable)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;scheduleDrainBuffers&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 處理必要的刷新操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;refreshIfNeeded&lt;/span&gt;(node, now);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;skipReadBuffer&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// fastpath 方法訪問元素是否可以跳過「通知」驅逐策略，true 表示跳過&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 第二個判斷條件判斷頻率草圖是否初始化，如果「未初始化」則返回 true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;fastpath&lt;/span&gt;() &amp;amp;&amp;amp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;frequencySketch&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;isNotInitialized&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 狀態流轉，沒有滿 delayable 為 true 表示延遲執行維護任務&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;shouldDrainBuffers&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;delayable&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;switch&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;drainStatusOpaque&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__attr&quot;&gt;IDLE&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;!delayable;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 當前有任務需要處理則調度維護任務執行，否則均延遲執行 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__attr&quot;&gt;REQUIRED&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__attr&quot;&gt;PROCESSING_TO_IDLE&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__attr&quot;&gt;PROCESSING_TO_REQUIRED&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__attr&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;IllegalStateException&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Invalid drain status: &quot;&lt;/span&gt;&amp;nbsp;+ drainStatus);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;10&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;該方法非常簡單，都是熟悉的內容，只有數據結構&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;138&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;還沒深入瞭解過，它也是在 Caffeine 的構造方法中完成初始化的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h4_2&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-nodeid=&quot;11&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p data-nodeid=&quot;12&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;以下為&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;142&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;在 Caffeine 緩存中完成初始化的邏輯：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.DrainStatusRef&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; readBuffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Caffeine&amp;lt;K, V&amp;gt; builder,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&amp;nbsp;AsyncCacheLoader&amp;lt;K, V&amp;gt; cacheLoader,&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;isAsync) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果指定了過期策略或 key 定義了 week refenence value 定義了 week or soft reference 或定義了訪問後過期策略，則 創建 BoundBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; readBuffer = evicts() || collectKeys() || collectValues() || expiresAfterAccess()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ?&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedBuffer&lt;/span&gt;&amp;lt;&amp;gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : Buffer.disabled();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;14&quot;&gt;&lt;code data-nodeid=&quot;144&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer.disabled()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;會創建如下枚舉來表示&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;146&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;DisabledBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;enum&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;DisabledBuffer&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Object&lt;/span&gt;&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;INSTANCE&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;int&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;offer&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;e&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;SUCCESS&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainTo&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Consumer&amp;lt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;gt; consumer&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;long&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;size&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;long&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;reads&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;long&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;writes&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;14&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;滿足其中條件判斷時，&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;149&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的實際類型為&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;151&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;BoundedBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，它的類關係圖如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section data-nodeid=&quot;17&quot; nodeleaf=&quot;&quot;&gt; 
  &lt;img src=&quot;https://oscimg.oschina.net/oscnet/b3eb671f-0def-47fa-914a-0ba56147c405.png&quot; alt=&quot;BoundBuffer.drawio.png&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4787037037037037&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-imgfileid=&quot;100028823&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;18&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;157&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;接口的註釋聲明中，能獲取很多有效信息：它同樣也是&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;175&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;多生產者單消費者（MPSC）&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;緩衝區，上文我們在介紹&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;163&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;WriteBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;時，它的單消費者實現方式是加同步鎖，&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;165&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的實現單消費者的方式一樣，因為它們都是在維護方法&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;167&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;maintenance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中加同步鎖對元素進行消費。不同的是，如果&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;169&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;緩衝區滿了或者發生爭搶則會拒絕添加新元素，而且它不像隊列或棧，&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;176&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;不保證 FIFO 或 LIFO&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;20&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;background-color: rgb(214, 214, 214);font-weight: normal;&quot;&gt;A multiple-producer / single-consumer buffer that rejects new elements &amp;nbsp;if it is full or fails spuriously due to contention. Unlike a queue and &amp;nbsp;stack, a buffer does not guarantee an ordering of elements in either &amp;nbsp;FIFO or LIFO order.&lt;/span&gt;&lt;/span&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;background-color: rgb(214, 214, 214);font-weight: normal;&quot;&gt;Beware that it is the responsibility of the caller to ensure that a &amp;nbsp;consumer has exclusive read access to the buffer. This implementation &amp;nbsp;does not include fail-fast behavior to guard against incorrect consumer &amp;nbsp;usage.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;21&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在類關係圖中，抽象類&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;181&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;StripedBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的實現最值得學習，它採用了分段設計（Striped）和 CAS 操作實現高效併發寫入。分段是將緩衝區分成多個「段」，根據線程的探針值將它們哈希到不同的「段」，減少競爭，接下來我們看一下它具體的實現邏輯，首先是&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;183&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;StripedBuffer#offer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;StripedBuffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;[] table;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(E e)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 擾動函數計算 64 位，線程探針值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;z&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;mix64(Thread.currentThread().getId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 取高 32 位值，位或 1 保證它為奇數&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;increment&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;((&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;) (z &amp;gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;)) |&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 轉換為 int 32 位&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;h&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;) z;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 掩碼值為已分段的緩衝區數量-1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;mask;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 線程哈希到的具體緩衝區&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt; buffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 未競爭標誌位&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;uncontended&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt;[] buffers = table;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((buffers ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; || ((mask = buffers.length -&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &amp;lt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 位與運算獲取緩衝區&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; || ((buffer = buffers[h &amp;amp; mask]) ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 向緩衝區中添加元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; || !(uncontended = ((result = buffer.offer(e)) != Buffer.FAILED))) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 擴容或重試操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;expandOrRetry(e, h, increment, uncontended);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;23&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;186&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;StripedBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中我們能發現定義了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;188&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;volatile Buffer&amp;lt;E&amp;gt; @Nullable[] table&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;是數組的形式，這便對應了它「分段」的思想，將元素保存在多個緩衝區中。通過線程探針值哈希獲取對應的緩衝區，邏輯並不複雜。&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;190&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;expandOrRetry&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法我們稍後再介紹，我們先假設線程哈希到的具體緩衝區&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;192&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer&amp;lt;E&amp;gt; buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;對象已經被創建，那麼它會執行&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;194&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;buffer.offer(e)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法。&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;196&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer&amp;lt;E&amp;gt; buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;對應的實現類為定義在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;198&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;BoundedBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的靜態內部類&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;200&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;RingBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，它也實現了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;202&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;接口，源碼如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedBuffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;StripedBuffer&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;BUFFER_SIZE&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;16&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;MASK&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;BUFFER_SIZE -&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;RingBuffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BBHeader&lt;/span&gt;.ReadAndWriteCounterRef&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;VarHandle&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;BUFFER&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;MethodHandles.arrayElementVarHandle(Object[].class);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Object[] buffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 有參構造，這裏表示緩衝區是被延遲創建的，創建時第一個元素便為 e&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;RingBuffer&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(E e)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; buffer =&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Object&lt;/span&gt;[BUFFER_SIZE];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BUFFER.set(buffer,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; WRITE.set(&lt;span class=&quot;code-snippet__built_in&quot;&gt;this&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(E e)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ReadCounterRef#readCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;head&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;readCounter;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ReadAndWriteCounterRef#writeCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;tail&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;writeCounterOpaque();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 計算可操作容量 size&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;size&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(tail - head);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 超過緩存大小則證明它已經滿了&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(size &amp;gt;= BUFFER_SIZE) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;Buffer.FULL;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// CAS 更新 writeCounter 為 writeCounter+1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(casWriteCounter(tail, tail +&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 位與掩碼值獲取緩衝區中的索引&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;index&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;) (tail &amp;amp; MASK);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 將元素 e 更新在指定索引處&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BUFFER.setRelease(buffer, index, e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;Buffer.SUCCESS;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;Buffer.FAILED;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainTo&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Consumer&amp;lt;E&amp;gt; consumer)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ReadCounterRef#readCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;head&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;readCounter;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ReadAndWriteCounterRef#writeCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;tail&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;writeCounterOpaque();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 計算可操作容量 size&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;size&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(tail - head);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// size 為 0 表示無元素可操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(size ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 循環遍歷消費緩衝區中所有元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;do&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 計算具體的索引&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;index&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;) (head &amp;amp; MASK);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@SuppressWarnings(&quot;unchecked&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;E&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;e&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(E) BUFFER.getAcquire(buffer, index);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 索引處元素為空表示無元素可消費&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(e ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 獲取到具體元素後將緩衝區該元素位置更新成 null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BUFFER.setRelease(buffer, index,&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 執行消費邏輯&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; consumer.accept(e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// head 累加&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; head++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt;&amp;nbsp;(head != tail);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新讀索引的值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setReadCounterOpaque(head);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BBHeader&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@SuppressWarnings(&quot;PMD.AbstractClassWithoutAbstractMethod&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;PadReadCounter&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;byte&lt;/span&gt;&amp;nbsp;p000,&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;/*省略 118 字節佔位符...*/&lt;/span&gt;&amp;nbsp;p119;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;ReadCounterRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;PadReadCounter&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;readCounter;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;PadWriteCounter&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;ReadCounterRef&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;byte&lt;/span&gt;&amp;nbsp;p120,&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;/*省略 118 字節佔位符...*/&lt;/span&gt;&amp;nbsp;p239;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;ReadAndWriteCounterRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;PadWriteCounter&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;VarHandle READ, WRITE;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;writeCounter;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;25&quot; style=&quot;line-height: 1.6em;text-align: left;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;205&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;BBHeader&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;類中又看到了熟悉的 120 字節內存佔位，在上文中我們詳細介紹過，這樣能夠保證&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;207&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;readCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;和&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;209&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;writeCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;分佈在不同內存行，&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;227&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;避免了內存偽共享問題&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，保證不同線程讀取這兩個字段時互不影響。在添加元素的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;215&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;offer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法和消費元素的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;217&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;drainTo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法中，都能看見它使用了「讀索引 readCounter」和「寫索引 writeCounter」，這也對應了它命名中的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;228&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Ring&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;229&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Ring&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;表示環形，讀、寫索引在操作過程中會不斷累加，但是它會執行位與運算保證索引值一直落在緩衝區長度的有效範圍內，也就是説這兩個索引值會不斷在有效索引範圍內「轉圈」，則形成一個「環形」緩衝區。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;26&quot; style=&quot;text-align: left;&quot;&gt;&lt;code data-nodeid=&quot;230&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;RingBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;通過 CAS 操作來確保併發添加元素操作的安全，如果 CAS 操作失敗則返回&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;232&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer.FAILED&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，這時便會執行&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;234&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;StripedBuffer#expandOrRetry&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法，我們先來看一下它的方法註釋內容，它説：這個方法用於處理寫過程中發生的初始化、擴容、創建新緩存或競爭寫情況。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p data-nodeid=&quot;28&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Handles cases of updates involving initialization, resizing, creating new Buffers, and/ or contention.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p data-nodeid=&quot;29&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;具體源碼如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;StripedBuffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 最大嘗試 3 次&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;ATTEMPTS&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// table 的最大大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;MAXIMUM_TABLE_SIZE&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;&amp;nbsp;* ceilingPowerOfTwo(NCPU);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 1 表示忙碌（擴容或正在創建）0 表示緩衝區無操作，通過 CAS 操作進行更新&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;tableBusy;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;[] table;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;* 擴展或重試&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;* &amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*&amp;nbsp;&lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt;&amp;nbsp;e 元素&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*&amp;nbsp;&lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt;&amp;nbsp;h 調用該方法時為線程探針值高 32 位，但在方法中會變更&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*&amp;nbsp;&lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt;&amp;nbsp;increment 線程探針值高 32 位&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*&amp;nbsp;&lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt;&amp;nbsp;wasUncontended true 未發生競爭 false 發生競爭&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;expandOrRetry&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(E e,&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;h,&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;increment,&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;wasUncontended)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;result&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;Buffer.FAILED;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// true 標誌緩衝區中最後一個槽位非空 false 表示為空&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;collide&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;attempt&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; attempt &amp;lt; ATTEMPTS; attempt++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt;[] buffers;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt; buffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;n;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果緩衝區數組已經被創建&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(((buffers = table) !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; ((n = buffers.length) &amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 檢查具體的緩衝區是否為空&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((buffer = buffers[(n -&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &amp;amp; h]) ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 準備創建緩衝區，並更新 tableBusy 標誌為 1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((tableBusy ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; casTableBusy()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;created&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;&amp;nbsp;{&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt;[] rs;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;mask, j;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(((rs = table) !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; ((mask = rs.length) &amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; (rs[j = (mask -&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &amp;amp; h] ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 創建緩衝區 return new RingBuffer&amp;lt;&amp;gt;(e);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; rs[j] = create(e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; created =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tableBusy =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果創建成功&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(created) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; result = Buffer.SUCCESS;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 緩衝區已經被其他線程創建了，重新循環重試&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; collide =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果發生競爭，表示向緩衝區中 CAS 添加元素失敗&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!wasUncontended) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; wasUncontended =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果重試添加元素成功，結束循環&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((result = buffer.offer(e)) != Buffer.FAILED) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// table 超過最大大小或已完成擴容但未變更引用（stale）&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((n &amp;gt;= MAXIMUM_TABLE_SIZE) || (table != buffers)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; collide =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!collide) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; collide =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 擴容操作，將緩衝區數組擴容為原來的兩倍大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 擴容條件：未超過最大 table 限制且重試添加元素依然失敗&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((tableBusy ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; casTableBusy()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(table == buffers) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; table = Arrays.copyOf(buffers, n &amp;lt;&amp;lt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tableBusy =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; collide =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 變更探針哈希值，嘗試下一個索引位置&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; h += increment;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 緩衝區數組的初始化邏輯&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((tableBusy ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (table == buffers) &amp;amp;&amp;amp; casTableBusy()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;init&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(table == buffers) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 初始大小為 1，會隨着擴容不斷將容量擴大兩倍&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@SuppressWarnings({&quot;rawtypes&quot;, &quot;unchecked&quot;})&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt;[] rs =&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; rs[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] = create(e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; table = rs;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; init =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tableBusy =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 完成初始化，元素添加成功&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(init) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; result = Buffer.SUCCESS;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;30&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;根據註釋信息瞭解該方法的邏輯並不難，接下來我們再看一下它的消費方法&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code data-nodeid=&quot;239&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;drainTo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，非常簡單：&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;StripedBuffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; volatile&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;[] table;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainTo&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Consumer&amp;lt;E&amp;gt; consumer&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt;[] buffers = table;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(buffers ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 循環遍歷消費所有緩衝區&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt; buffer : buffers) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(buffer !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; buffer.&lt;span class=&quot;code-snippet__title&quot;&gt;drainTo&lt;/span&gt;(consumer);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;32&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p data-nodeid=&quot;33&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;總結一下，&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;242&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp; 是一個 MPSC &amp;nbsp;的緩衝區，採用了分段的設計，將緩衝區劃分為多份，根據線程的探針值哈希到不同的緩衝區，減少競爭的發生，並使用 CAS 操作來保證多線程下寫入操作高效執行。因為它沒有記錄元素的寫入順序，所以它並不會像棧或隊列一樣保證 &amp;nbsp;FIFO 或 &amp;nbsp;LIFO。隨着寫入競爭發生會不斷對緩衝區數組擴容，每次擴容為原來大小的兩倍，每個緩衝區為環形緩衝區，通過位與運算計算元素實際的索引，將被消費的元素標記為 &amp;nbsp;null 實現緩衝區中槽位的重用。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;34&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;現在讀寫方法已經瞭解差不多了，需要我們再次回到維護方法&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;245&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;maintenance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中，看一看消費讀緩衝區和其他邏輯。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h3_3&quot;&gt;&lt;/span&gt; 
 &lt;h3 data-nodeid=&quot;35&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;maintenance&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p data-nodeid=&quot;36&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;維護方法&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;249&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;maintenance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;如下所示，第 2 步中處理寫緩衝區任務的邏輯已在上文中介紹過，接下來我們會關注第 1 步的處理讀緩衝區任務，第 4 步驅逐策略和第 5 步的 「增值（climb）」操作。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;maintenance&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;Runnable task&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新狀態為執行中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;setDrainStatusRelease&lt;/span&gt;(&lt;span class=&quot;code-snippet__variable&quot;&gt;PROCESSING_TO_IDLE&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 1. 處理讀緩衝區中的任務&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainReadBuffer&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 2. 處理寫緩衝區中的任務&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainWriteBuffer&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(task !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; task.&lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 3. 處理 key 和 value 的引用&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainKeyReferences&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainValueReferences&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 4. 過期和驅逐策略&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;expireEntries&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;evictEntries&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 5. 「增值」 操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;climb&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 狀態不是 PROCESSING_TO_IDLE 或者無法 CAS 更新為 IDLE 狀態的話，需要更新狀態為 REQUIRED，該狀態會再次執行維護任務&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((&lt;span class=&quot;code-snippet__title&quot;&gt;drainStatusOpaque&lt;/span&gt;() !=&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;PROCESSING_TO_IDLE&lt;/span&gt;) || !&lt;span class=&quot;code-snippet__title&quot;&gt;casDrainStatus&lt;/span&gt;(&lt;span class=&quot;code-snippet__variable&quot;&gt;PROCESSING_TO_IDLE&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;IDLE&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;setDrainStatusOpaque&lt;/span&gt;(&lt;span class=&quot;code-snippet__variable&quot;&gt;REQUIRED&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;37&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;drainReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p data-nodeid=&quot;39&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;首先我們來看處理讀緩衝區的邏輯，源碼如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.DrainStatusRef&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; readBuffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Consumer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; accessPolicy;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainReadBuffer&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!skipReadBuffer()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; readBuffer.drainTo(accessPolicy);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;40&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p data-nodeid=&quot;41&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;它會執行到&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;254&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;StripedBuffer#drainTo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法，並且入參了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;256&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Consumer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; accessPolicy&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;消費者。前者會遍歷所有緩衝區中對象進行消費；後者在 caffeine 構造方法中完成初始化：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.DrainStatusRef&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; readBuffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Consumer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; accessPolicy;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Caffeine&amp;lt;K, V&amp;gt; builder,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&amp;nbsp;AsyncCacheLoader&amp;lt;K, V&amp;gt; cacheLoader,&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;isAsync) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessPolicy = (evicts() || expiresAfterAccess()) ?&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;this&lt;/span&gt;::onAccess : e -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;43&quot;&gt;&lt;code data-nodeid=&quot;258&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;onAccess&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法在上文中也提到過，具體邏輯我們在這裏贅述下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;onAccess&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Node&amp;lt;K, V&amp;gt; node&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;evicts&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; K key = node.&lt;span class=&quot;code-snippet__title&quot;&gt;getKey&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(key ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新訪問頻率&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;frequencySketch&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;increment&lt;/span&gt;(key);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果節點在窗口區，則將其移動到尾節點&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(node.&lt;span class=&quot;code-snippet__title&quot;&gt;inWindow&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;reorder&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderWindowDeque&lt;/span&gt;(), node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 在試用區的節點執行 reorderProbation 方法，可能會將該節點從試用區晉升到保護區&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(node.&lt;span class=&quot;code-snippet__title&quot;&gt;inMainProbation&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;reorderProbation&lt;/span&gt;(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 否則移動到保護區的尾結點&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;reorder&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderProtectedDeque&lt;/span&gt;(), node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新命中量&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;setHitsInSample&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;hitsInSample&lt;/span&gt;() +&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 配置了訪問過期策略&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;expiresAfterAccess&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;reorder&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderWindowDeque&lt;/span&gt;(), node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 配置了自定義時間過期策略&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;expiresVariable&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;timerWheel&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;reschedule&lt;/span&gt;(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;45&quot; style=&quot;text-align: left;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;簡單概括來説：&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;261&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中所有的元素都會被執行&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;263&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;onAccess&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的邏輯，頻率草圖會被更新，窗口區元素會被移動到該區的尾結點，試用區元素在滿足條件的情況下會被晉升到保護區。在原理圖中補充&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;265&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;相關邏輯，相比於原有&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;267&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;put&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法的邏輯，&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;269&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的消費並沒有引入特別「新穎」的內容：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section data-nodeid=&quot;46&quot; nodeleaf=&quot;&quot;&gt; 
  &lt;img src=&quot;https://oscimg.oschina.net/oscnet/ad5cad0c-ff08-4f21-a12e-0e313af3c976.png&quot; alt=&quot;caffeine-第 3 頁.drawio.png&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7194444444444444&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-imgfileid=&quot;100028825&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;47&quot; style=&quot;text-align: left;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;275&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;reorderProbation&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法中有一段註釋比較有意思，它説：如果保護區空間超過它的最大值，它會將其中的元素降級到試用區。但是這個操作被推遲到&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;277&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;maintenance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法的最後執行，也就是後續我們會介紹的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;279&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;climb&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法，相當於是對緩存元素的移動做了劇透。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p data-nodeid=&quot;49&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;If the protected space exceeds its maximum, the LRU items are demoted to the probation space.&lt;/span&gt;&lt;/span&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;This is deferred to the adaption phase at the end of the maintenance cycle.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;span id=&quot;OSC_h4_4&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-nodeid=&quot;50&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;evictEntries&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p data-nodeid=&quot;51&quot;&gt;&lt;code data-nodeid=&quot;285&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;evictEntries&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法註釋這麼描述：如果緩存超過最大值則將元素驅逐。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p data-nodeid=&quot;53&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Evicts entries if the cache exceeds the maximum&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p data-nodeid=&quot;54&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;它的主方法邏輯非常簡單：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;evictEntries&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!&lt;span class=&quot;code-snippet__title&quot;&gt;evicts&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 從窗口區「驅逐」&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt;&amp;nbsp;candidate =&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;evictFromWindow&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 從候選區或保護區進行驅逐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;evictFromMain&lt;/span&gt;(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;54&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;首先，先來看從窗口區「驅逐」的方法&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;290&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;evictFromWindow&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;evictFromWindow&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;K, V&amp;gt; first =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 獲取隊首元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;K, V&amp;gt; node =&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderWindowDeque&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;peekFirst&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 循環操作，直到窗口區權重小於窗口區權重最大限制&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;windowWeightedSize&lt;/span&gt;() &amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;windowMaximum&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(node ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 獲取隊首節點的下一個節點&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;K, V&amp;gt; next = node.&lt;span class=&quot;code-snippet__title&quot;&gt;getNextInAccessOrder&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果隊首節點權重不為 0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(node.&lt;span class=&quot;code-snippet__title&quot;&gt;getPolicyWeight&lt;/span&gt;() !=&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 標記為試用區節點並移動到試用區尾節點&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; node.&lt;span class=&quot;code-snippet__title&quot;&gt;makeMainProbation&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderWindowDeque&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;remove&lt;/span&gt;(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderProbationDeque&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;offerLast&lt;/span&gt;(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 記錄隊首節點引用&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(first ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; first = node;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新窗口區權重&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;setWindowWeightedSize&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;windowWeightedSize&lt;/span&gt;() - node.&lt;span class=&quot;code-snippet__title&quot;&gt;getPolicyWeight&lt;/span&gt;());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// node 記錄操作完成後的下一個頭節點&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; node = next;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 返回此時的頭節點&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;first;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;58&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;該方法會根據窗口區最大權重限制&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;301&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;將節點由窗口區移動到試用區&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，直到窗口區內元素小於最大值限制，並不是直接調用&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;297&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;evictEntry&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法真正地將元素驅逐。如果已經在窗口區中將元素移動到試用區，那麼接下來會以窗口區頭節點會作為入參執行&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;299&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;evictFromMain&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法，它有非常詳細的註釋內容：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;59&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;如果緩存超過最大容量限制，則將元素從主空間中移除。主空間通過頻率草圖決定從窗口區來的元素是被驅逐還是被保留，以便將使用頻率最低的元素移除。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;60&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;窗口區的元素被提升到試用區尾節點（MRU 位置），驅逐策略驅逐的元素從試用區頭節點（LRU &amp;nbsp;位置）開始。在需要執行驅逐策略時，元素會按照由頭節點到尾節點的順序進行評估，如果評估完試用區和保護區仍然需要驅逐元素，那麼則會從窗口區驅逐。相似地，如果試用區驅逐完元素後仍然不夠，則需要從保護區檢查元素進行驅逐。隊列按照從頭節點到尾節點的順序消費，使用頻率相對較低的元素先被驅逐，在相同頻率的情況下，優先保留主空間中的元素而不是窗口區元素。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;62&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;background-color: rgb(214, 214, 214);&quot;&gt;Evicts entries from the main space if the cache &amp;nbsp;exceeds the maximum capacity. The main space determines whether &amp;nbsp;admitting an entry (coming from the window space) is preferable to &amp;nbsp;retaining the eviction policy&#39;s victim. This decision is made using a &amp;nbsp;frequency filter so that the least frequently used entry is removed.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;63&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;background-color: rgb(214, 214, 214);&quot;&gt;The window space&#39;s candidates were previously &amp;nbsp;promoted to the probation space at its MRU position and the eviction &amp;nbsp;policy&#39;s victim starts at the LRU position. The candidates are evaluated &amp;nbsp;in promotion order while an eviction is required, and if exhausted then &amp;nbsp;additional entries are retrieved from the window space. Likewise, if &amp;nbsp;the victim selection exhausts the probation space then additional &amp;nbsp;entries are retrieved the protected space. The queues are consumed in &amp;nbsp;LRU order and the evicted entry is the one with a lower relative &amp;nbsp;frequency, where the preference is to retain the main space&#39;s victims &amp;nbsp;versus the window space&#39;s candidates on a tie.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;64&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;接下來我們看下源碼的具體實現：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__type&quot;&gt;K, V&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__type&quot;&gt;K, V&lt;/span&gt;&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;static&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;int WINDOW =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;static&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;int PROBATION =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;static&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;int PROTECTED =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; static&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;int ADMIT_HASHDOS_THRESHOLD =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 為了方便理解，定義 victim 為驅逐區，candidate 為候選驅逐區，實際上它們不對應區域，而是對應某個區域中的節點元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&lt;/span&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; void evictFromMain(&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&amp;nbsp;Node&amp;lt;K, V&amp;gt; candidate) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int victimQueue = PROBATION;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int candidateQueue = PROBATION;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 首先獲取試用區頭節點作為首先要被驅逐的區域&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; victim = accessOrderProbationDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果權重大小超過最大值，不斷地執行驅逐策略，直到滿足條件&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt;&amp;nbsp;(weightedSize() &amp;gt; maximum()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果候選驅逐區為空且候選驅逐區為試用區，則指定候選驅逐區為窗口區&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (candidateQueue == PROBATION)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 指定候選驅逐區為窗口區&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = accessOrderWindowDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidateQueue = WINDOW;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 候選驅逐區和驅逐區都為空&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (victim ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 當前驅逐區為試用區，指定保護區為驅逐區&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(victimQueue == PROBATION) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = accessOrderProtectedDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victimQueue = PROTECTED;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 當前驅逐區為保護區，指定驅逐區為窗口區&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(victimQueue == PROTECTED) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = accessOrderWindowDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victimQueue = WINDOW;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 沒有更多元素供驅逐，則退出循環&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 跳過權重為 0 的元素，權重為 0 表示無需驅逐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((victim !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (victim.getPolicyWeight() ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((candidate !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (candidate.getPolicyWeight() ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果要驅逐區為空，則從候選驅逐區中進行驅逐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(victim ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 驅逐當前節點並將指針指向下一個節點&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; previous = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = candidate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = previous;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 候選驅逐區為空，在驅逐區中驅逐元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = victim;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 驅逐區和候選驅逐區是同一個區的元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidate == victim) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(candidate, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果元素已經被垃圾回收，則驅逐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; K victimKey = victim.getKey();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; K candidateKey = candidate.getKey();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(victimKey ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = victim;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.COLLECTED,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidateKey ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = candidate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.COLLECTED,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果元素已經被標記為刪除，驅逐它們&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!victim.isAlive()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = victim;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!candidate.isAlive()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = candidate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果候選區節點元素超過最大權重，直接驅逐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidate.getPolicyWeight() &amp;gt; maximum()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = candidate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 驅逐頻率較低的元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(admit(candidateKey, victimKey)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = victim;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 變更候選區元素引用&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = candidate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&lt;/span&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; boolean admit(K candidateKey, K victimKey) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 獲取候選驅逐區中元素頻率&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int victimFreq = frequencySketch().frequency(victimKey);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int candidateFreq = frequencySketch().frequency(candidateKey);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 候選區元素頻率大於驅逐區中元素返回 true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidateFreq &amp;gt; victimFreq) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果候選區元素頻率大於 6&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidateFreq &amp;gt;= ADMIT_HASHDOS_THRESHOLD) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 計算隨機值來決定兩元素之間的去留&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int random = ThreadLocalRandom.current().nextInt();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;((random &amp;amp;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;127&lt;/span&gt;) ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 使用計算隨機值的方法來防止 HASH DOS 攻擊，攻擊者可能人為地將某些不被常用的緩存訪問頻率提高，如果不計算隨機性那麼會將真正有價值的元素驅逐，添加這種隨機性計算可能減少這種攻擊帶來的影響，保證緩存的有效命中率&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 候選驅逐區元素小於驅逐區元素頻率&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;65&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p data-nodeid=&quot;66&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;方法雖然很長，但是邏輯清晰明瞭，元素的驅逐流程根據註釋可以很明確的瞭解。窗口區中元素會優先被晉升到試用區，在試用區和保護區中不斷的驅逐節點直到滿足條件，如果驅逐完成之後還不滿足條件則會從窗口區中驅逐元素，此外，在邏輯中使用隨機驅逐的方式來減少 &amp;nbsp;HASH DOS 攻擊帶來的影響也很值得學習，更新原理圖如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section data-nodeid=&quot;67&quot; nodeleaf=&quot;&quot;&gt; 
  &lt;img src=&quot;https://oscimg.oschina.net/oscnet/34d9c5b2-c03f-46ca-8cc2-033416f49e49.png&quot; alt=&quot;caffeine-第 4 頁.drawio.png&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7842592592592592&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-imgfileid=&quot;100028824&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/section&gt; 
 &lt;span id=&quot;OSC_h4_5&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-nodeid=&quot;68&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;climb&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p data-nodeid=&quot;69&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;現在我們來到了維護方法的最後一個步驟&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;323&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;climb&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法，看看它是如何為緩存「增值（climb）」的，源碼如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.DrainStatusRef&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;HILL_CLIMBER_RESTART_THRESHOLD&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0.05d&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;HILL_CLIMBER_STEP_PERCENT&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0.0625d&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 步長值衰減比率&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;HILL_CLIMBER_STEP_DECAY_RATE&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0.98d&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;QUEUE_TRANSFER_THRESHOLD&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1_000&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;climb&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!evicts()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 確定要調整的量&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; determineAdjustment();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 將保護區中的元素降級到試用區&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; demoteFromMainProtected();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 獲取第一步計算完畢的調整大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;amount&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;adjustment();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 不調整則結束，否則根據正負增大或減小窗口大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(amount ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(amount &amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; increaseWindow();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; decreaseWindow();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;determineAdjustment&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 檢查頻率草圖是否被初始化&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(frequencySketch().isNotInitialized()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 沒有被初始化則重置命中率、命中和未命中樣本數&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setPreviousSampleHitRate(&lt;span class=&quot;code-snippet__number&quot;&gt;0.0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMissesInSample(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setHitsInSample(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 請求總數 = 命中樣本數 + 未命中樣本數&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;requestCount&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;hitsInSample() + missesInSample();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(requestCount &amp;lt; frequencySketch().sampleSize) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 計算命中率、命中率變化&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;hitRate&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;) hitsInSample() / requestCount;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;hitRateChange&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;hitRate - previousSampleHitRate();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 計算調整量，如果命中率增加獲取正的步長值，否則獲取負的步長值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;amount&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(hitRateChange &amp;gt;=&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) ? stepSize() : -stepSize();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 計算下一個步長值，如果變化量超過閾值，那麼重新計算步長，否則按照固定衰減率計算&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;nextStepSize&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(Math.abs(hitRateChange) &amp;gt;= HILL_CLIMBER_RESTART_THRESHOLD)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ? HILL_CLIMBER_STEP_PERCENT * maximum() * (amount &amp;gt;=&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&amp;nbsp;?&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&amp;nbsp;: -&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : HILL_CLIMBER_STEP_DECAY_RATE * amount;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 記錄本次命中率作為下一次計算的依據&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setPreviousSampleHitRate(hitRate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 記錄要調整的量&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setAdjustment((&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;) amount);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 記錄步長值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setStepSize(nextStepSize);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 重置未命中和命中數量&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMissesInSample(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setHitsInSample(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;demoteFromMainProtected&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 獲取保護區的最大值和當前值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;mainProtectedMaximum&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;mainProtectedMaximum();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;mainProtectedWeightedSize&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;mainProtectedWeightedSize();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 當前值沒有超過最大值則不處理&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(mainProtectedWeightedSize &amp;lt;= mainProtectedMaximum) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 每次從保護區轉換到試用區有 1000 個最大限制&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;i&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; QUEUE_TRANSFER_THRESHOLD; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 一旦不超過最大閾值則停止&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(mainProtectedWeightedSize &amp;lt;= mainProtectedMaximum) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 在保護區取出頭節點&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; demoted = accessOrderProtectedDeque().poll();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(demoted ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 標記為試用區&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; demoted.makeMainProbation();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 加入到試用區尾節點&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderProbationDeque().offerLast(demoted);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 計算變更後保護區權重大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mainProtectedWeightedSize -= demoted.getPolicyWeight();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新保護區權重&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedWeightedSize(mainProtectedWeightedSize);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;increaseWindow&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 保護區最大容量為 0 則沒有可調整的空間&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(mainProtectedMaximum() ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 窗口調整的變化量由保護區貢獻，取能夠變化額度 quota 為，調整量 adjustment 和，保護區最大值，中的小值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;quota&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;Math.min(adjustment(), mainProtectedMaximum());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 減小保護區大小增加窗口區大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedMaximum(mainProtectedMaximum() - quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowMaximum(windowMaximum() + quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 保護區大小變動後，需要操作元素由保護區降級到試用區&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; demoteFromMainProtected();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 窗口區增加容量之後，需要優先從試用區獲取元素將增加的容量填滿，如果試用區元素不夠，則從保護區獲取元素來填&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;i&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; QUEUE_TRANSFER_THRESHOLD; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 獲取試用區頭節點為「候選節點」&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; candidate = accessOrderProbationDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;probation&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果試用區元素為空或者窗口調整的變化量要比該節點所佔的權重小，那麼嘗試從保護區獲取節點&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) || (quota &amp;lt; candidate.getPolicyWeight())) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = accessOrderProtectedDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; probation =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 試用區和保護區均無節點，則無需處理，結束循環&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 獲取該候選節點的權重，如果可變化額度比候選權重小，那麼無需處理&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;weight&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;candidate.getPolicyWeight();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(quota &amp;lt; weight) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 每移除一個節點更新需要可變化額度&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; quota -= weight;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果是試用區節點，則直接在試用區移除&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(probation) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderProbationDeque().remove(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果是保護區節點，需要更新保護區權重大小，再將其從保護區中移除&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedWeightedSize(mainProtectedWeightedSize() - weight);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderProtectedDeque().remove(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 增加窗口區大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowWeightedSize(windowWeightedSize() + weight);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 將被移除的「候選節點」添加到窗口區中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderWindowDeque().offerLast(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 標記為窗口區節點&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate.makeWindow();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 可能存在 quota 小於，節點權重，的情況，那麼這些量無法再調整，需要重新累加到保護區，並在窗口區中減掉&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedMaximum(mainProtectedMaximum() + quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowMaximum(windowMaximum() - quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 將未完成調整的 quota 記錄在調整值中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setAdjustment(quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;decreaseWindow&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果窗口區大小小於等於 1 則無法再減少了&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(windowMaximum() &amp;lt;=&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 獲取變化量的額度（正整數），取調整值和窗口最大值減一中較小的值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;quota&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;Math.min(-adjustment(), Math.max(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, windowMaximum() -&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新保護區和窗口區大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedMaximum(mainProtectedMaximum() + quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowMaximum(windowMaximum() - quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;i&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; QUEUE_TRANSFER_THRESHOLD; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 從窗口區獲取「候選節點」&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; candidate = accessOrderWindowDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 未獲取到説明窗口區已經沒有元素了，不能再減小了，結束循環操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 獲取候選節點的權重&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;weight&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;candidate.getPolicyWeight();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 可變化的額度小於權重，則不支持變化，結束循環&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(quota &amp;lt; weight) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 隨着節點的移動，變更可變化額度&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; quota -= weight;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新窗口區大小並將元素從窗口區移除&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowWeightedSize(windowWeightedSize() - weight);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderWindowDeque().remove(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 將從窗口區中移除的元素添加到試用區&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderProbationDeque().offerLast(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 將節點標記為試用區元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate.makeMainProbation();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 此時 quote 為剩餘無法變更的額度，需要在保護區中減去在窗口區中加上&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedMaximum(mainProtectedMaximum() - quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowMaximum(windowMaximum() + quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 記錄未變更完的額度在調整值中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setAdjustment(-quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;70&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p data-nodeid=&quot;71&quot; style=&quot;text-align: left;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;現在我們瞭解了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;326&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;climb&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法的邏輯，正如它的註釋所述&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;328&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Adapts the eviction policy to towards the optimal recency / frequency configuration.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，它會根據訪問情況動態調整最佳的分區配置以適應驅逐策略。元素被添加時會優先被放在窗口區，窗口區越大則意味着短期內有大量緩存被添加，或元素添加後被再次訪問，緩存命中率提高，需要更大的窗口區來承接這部分新晉的元素。根據&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;330&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;climb&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp; 中的邏輯，窗口區增大也會有試用區/保護區的元素不斷被移動到窗口區；如果保護區越大意味着緩存中維護的元素都是訪問頻率較高的元素，命中率降低，並趨於某穩定值附近；試用區元素由窗口區元素晉升得來，再被訪問時會被晉升到保護區，它更像是 &amp;nbsp;JVM 分區的 survivor &amp;nbsp;區。緩衝區不同分區的動態調整可以適應不同的訪問模式，優化緩存的性能。接下來我們在原理圖中補充上各個分區間元素的變換路徑（元素也可由保護區直接降級到窗口區，但在圖中未標出），並根據圖示對 &amp;nbsp;Caffeine 的實現原理進行概括：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section data-nodeid=&quot;72&quot; nodeleaf=&quot;&quot;&gt; 
  &lt;img src=&quot;https://oscimg.oschina.net/oscnet/8d703c6e-0f66-4016-bda9-65cec66cc76d.png&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.712037037037037&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-imgfileid=&quot;100028827&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;73&quot; style=&quot;text-indent: 0px;text-align: left;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在圖示（1）中，&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;335&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;put&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法會直接將元素添加到&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;337&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中，並在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;339&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;WriteBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中添加任務，由單線程異步調用維護方法對任務進行消費，元素訪問頻率會被更新，試用區元素可能會被晉升到保護區；在圖示（2）調用&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;341&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;getIfPresent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法會直接從&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;343&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中獲取元素，並添加任務到&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;345&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp; 中由單線程異步消費，它相比於（1）並沒有什麼額外操作，兩個緩衝區均採用 MPSC 的設計模式，這種設計參考了 WAL（Write-Ahead &amp;nbsp;Logging）思想；圖示（3）和圖示（4）均發生在維護方法邏輯中，圖示（3）驅逐元素時，窗口區元素會被「驅逐」到試用區，而試用區和保護區元素可能被直接驅逐；圖示（4）「增值（climb）」操作會根據命中率調整窗口區和保護區的大小，合理分配分區間的元素。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;74&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在文中提到過每個分區的雙端隊列使用了 LRU &amp;nbsp;算法，被訪問過的元素會被放在尾節點，但對元素進行驅逐時並不以 LRU &amp;nbsp;的順序為準，而是會參考頻率草圖中記錄的元素頻率，保證使用頻率高的被保留，低的被驅逐。這和 LFU 算法很像，區別於 LFU 算法的是它採用了 &amp;nbsp;Count-Min Sketch 數據結構來記錄頻率，能夠在較小的內存開銷下實現對頻率較為精準（93.75%）的估計，這種算法實際被稱為&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;352&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;TinyLFU 算法&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，它結合了兩者的有點，在內存和計算開銷上達到更好的平衡。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h3_6&quot;&gt;&lt;/span&gt; 
 &lt;h3 data-nodeid=&quot;75&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;技術選型&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p data-nodeid=&quot;76&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;現在我們已經對 Caffeine &amp;nbsp;緩存有了一定的瞭解，那麼究竟什麼時候適合選擇使用它呢？那就要根據它的特點來了：首先，它是線程安全的，適合在多線程環境下使用；其次它的性能很好，使用了 &amp;nbsp;TinyLFU &amp;nbsp;算法並採用了高性能緩存的設計；再就是它提供了多種緩存管理機制，除了基於最大容量的驅逐策略，還支持基於時間、軟/虛引用等驅逐策略。所以&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;359&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;font-weight: bold;&quot;&gt;它適合在高併發環境並且需要高性能、支持多種緩存管理策略的場景下使用&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;font-weight: bold;&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;77&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;如果要在多種緩存中選取，可以以如下表格為參考：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section style=&quot;text-align: center;&quot; nodeleaf=&quot;&quot;&gt; 
  &lt;img src=&quot;https://oscimg.oschina.net/oscnet/379346e7-ba46-4b36-9d53-d55208cc938c.png&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3039332538736591&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;839&quot; type=&quot;block&quot; data-imgfileid=&quot;100028828&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;77&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;巨人的肩膀&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;ul class=&quot;list-paddingleft-1&quot;&gt; 
  &lt;li&gt;&lt;p data-nodeid=&quot;115&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Github - caffeine&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p data-nodeid=&quot;117&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;併發編程網 - 現代化的緩存設計方案&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p data-nodeid=&quot;119&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;博客園 - CPU Cache 與緩存行&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p data-nodeid=&quot;119&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;section style=&quot;text-align: center;margin-bottom: 8px;&quot; data-pm-slice=&quot;0 0 []&quot;&gt; 
  &lt;span style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;img alt=&quot;圖片&quot; class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;100028809&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/669ade14-6813-4577-9686-31c23198dffe.png&quot; data-type=&quot;webp&quot; data-w=&quot;396&quot; style=&quot;pointer-events: initial;width: 185px !important;visibility: visible !important;height: auto !important;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;span style=&quot;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box;overflow-wrap: break-word !important;font-size: 16px;border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);letter-spacing: normal;&quot;&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;text-align: center;margin-bottom: 8px;&quot;&gt; 
  &lt;span style=&quot;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box;overflow-wrap: break-word !important;font-size: 16px;border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);letter-spacing: normal;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;掃一掃，加入技術交流羣&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section&gt; 
  &lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;display: none;&quot;&gt; 
  &lt;mp-style-type data-value=&quot;3&quot;&gt;&lt;/mp-style-type&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color: #858585; font-size: 13px;&quot;&gt;本文分享自微信公眾號 - 京東雲開發者（JDT_Developers）。&lt;br&gt;如有侵權，請聯繫 support@oschina.cn 刪除。&lt;br&gt;本文參與「&lt;a href=&quot;https://www.oschina.net/sharing-plan&quot; target=&quot;_blank&quot;&gt;OSC 源創計劃&lt;/a&gt;」，歡迎正在閲讀的你也加入，一起分享。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/4090830/blog/18017722</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18017722</guid>
            <pubDate>Mon, 14 Apr 2025 03:12:00 GMT</pubDate>
            <author>原創</author>
        </item>
        <item>
            <title>Rust 迎來十週年，社區發起問卷調查：為了 Rust 的未來</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;Rust 迎來十週年，官方計劃撰寫 Rust 願景 RFC，&lt;strong&gt;目標是構建對現狀的共識並明確未來方向&lt;/strong&gt;，不涉及具體設計和特性推薦。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/110449_4OlU_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;其範圍涵蓋社區和技術多方面，通過&lt;strong&gt;調查和訪談收集數據&lt;/strong&gt;，對象包括不同層次的 Rust 用户、非用户、企業等。目前計劃在今年下半年發佈願景 RFC，4 月開展訪談，5 月準備初始報告。&lt;/p&gt; 
&lt;p&gt;公眾可通過&lt;strong&gt;填寫調查、分享調查鏈接&lt;/strong&gt;以及加入 Zulip 頻道參與其中。&lt;/p&gt; 
&lt;p&gt;Rust 願景 RFC 的目標不是提供具體設計或特性推薦，它側重於構建對 Rust 現狀的共識以及從宏觀層面明確未來方向，後續會有專門的詳細 RFC 來探討具體設計和特性。&lt;/p&gt; 
&lt;p&gt;本次調查問題是開放式和自由形式的，涵蓋的主題與年度 Rust 調查有所不同。並且本次調查可收集潛在訪談人員名單，而年度 Rust 調查通常不具備此功能。&lt;/p&gt; 
&lt;p&gt;公眾可通過填寫調查分享使用 Rust 的經歷、推薦訪談對象；還能分享調查鏈接，讓更多人蔘與進來；活躍於 Rust 維護者社區的人員可加入 Zulip 上的&lt;code&gt;#vision-doc-2025&lt;/code&gt;頻道參與討論。&lt;/p&gt; 
&lt;p&gt;問卷：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.surveyhero.com%2Fc%2Ffuznhxp3&quot; target=&quot;_blank&quot;&gt;https://www.surveyhero.com/c/fuznhxp3&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;原文：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.rust-lang.org%2F2025%2F04%2F04%2Fvision-doc-survey.html&quot; target=&quot;_blank&quot;&gt;https://blog.rust-lang.org/2025/04/04/vision-doc-survey.html&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344622/rust-vision-doc-survey</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344622/rust-vision-doc-survey</guid>
            <pubDate>Mon, 14 Apr 2025 03:05:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>Google Docs 代碼塊新增 14 種編程語言支持</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;在對 Google Docs 代碼塊的更新中，Google 增加了對 14 種新編程語言和其他代碼語言的支持，以便輕鬆地將代碼可視化並使其更具可讀性。&lt;/p&gt; 
&lt;p&gt;2022 年，Google 推出了一項新的智能畫布功能，允許用户通過代碼塊在文檔中格式化和顯示代碼。該功能有助於以行業標準可視化代碼，並應用所需的格式，從而簡化協作。&lt;/p&gt; 
&lt;p&gt;它還省去了將代碼粘貼到文檔中並通過高亮文本手動應用樣式的額外工作。這在記錄軟件項目、API 或編碼教程時非常有用，因為代碼片段對於提供示例至關重要。&lt;/p&gt; 
&lt;p&gt;智能畫布不僅限於代碼塊。它允許您插入各種內容，例如日曆邀請模板、@提及、電子郵件草稿、AI 摘要和模板，並使用無頁格式。它為項目管理任務提供了構建塊，例如審核跟蹤、團隊目錄、項目資產、內容發佈跟蹤器等。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9be575217cd9b78995c7650e7192971909a.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;通過新的更新，Google Docs 代碼塊支持以下語言：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;C#&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Go&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Kotlin&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;PHP&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Rust&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;TypeScript&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;HTML&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CSS&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;XML&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;JSON&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Protobuf&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Textproto&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;SQL&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Bash/Shell&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;要在 Google 文檔中顯示代碼塊，請點擊「插入」&amp;gt;「構建塊」&amp;gt;「代碼塊」。在這裏，您可以選擇所需的編程語言。工作區管理員無法控制此功能。&lt;/p&gt; 
&lt;p&gt;Google&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fworkspaceupdates.googleblog.com%2F2025%2F04%2Fadditional-programming-languages-code-blocks-google-docs.html&quot; target=&quot;_blank&quot;&gt;表示，&lt;/a&gt;該更新已開始逐步推出，預計需要幾周時間才能完成。更新將推送至 Workspace 各個套餐，包括 Business Standard/Plus、Enterprise Starter/Standard/Plus、Enterprise Essentials Plus 和 Education Standard/Plus。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344617/additional-programming-languages-code-blocks-google-docs.</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344617/additional-programming-languages-code-blocks-google-docs.</guid>
            <pubDate>Mon, 14 Apr 2025 02:54:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>開源 AI 平台 Hugging Face 收購法國開源機器人公司 Pollen Robotics</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;開源 AI 平台 Hugging Face 正式宣佈收購法國開源機器人公司 Pollen Robotics，旨在將開源機器人技術推向更廣闊的市場。這一舉措標誌着 Hugging Face 在開源機器人領域的佈局再進一步，未來或將徹底改變人機交互的生態。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-33dce35392b7449b2b186f7e06f0ce80183.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;自前特斯拉工程師 Rémi Cadene 加入 Hugging Face 後，該平台憑藉開源機器人軟件庫 LeRobot 和 Hugging Face Hub，迅速成為全球最受歡迎的開源機器人軟件平台。&lt;/p&gt; 
&lt;p&gt;如今，通過收購 Pollen Robotics，Hugging Face 正式進軍硬件領域，致力於打造&lt;strong&gt;開源、可定製、價格合理&lt;/strong&gt;的機器人解決方案。&lt;/p&gt; 
&lt;p&gt;Pollen Robotics 是全球少數幾家真正量產開源人形機器人的公司之一，其明星產品 Reachy 2 已在康奈爾大學、卡內基梅隆大學等頂尖實驗室投入使用。這款機器人不僅具備先進的人形設計，還支持 VR 操控，專為 AI 研究、教育和具身智能（Embodied AI）實驗打造。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Reachy 2：你的 AI 時代實驗室助手&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Reachy 2 是一款開源、模塊化、可編程的人形機器人，具備高度靈活的雙臂和頭部，能夠執行抓取、交互等多種任務。它的特點包括： &amp;nbsp;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;完全開源：硬件設計、軟件棧全部開放，開發者可自由修改和優化。 &amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;VR 兼容：支持虛擬現實遠程操控，探索人機協同新場景。 &amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;研究友好：已被全球多所頂尖高校和實驗室採用，加速 AI 與機器人技術的融合。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a829c0480c4ab02fe858bded5db645b1aac.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;目前，Reachy 2 的售價為 7 萬美元（約合人民幣 50 萬元）。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344615/hugging-face-buys-a-humanoid-robotics-startup-pollen-robotics</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344615/hugging-face-buys-a-humanoid-robotics-startup-pollen-robotics</guid>
            <pubDate>Mon, 14 Apr 2025 02:43:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>OpenAI 發佈 GPT-4.1 系列模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;OpenAI 在當地時間週一&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenai.com%2Findex%2Fgpt-4-1%2F&quot; target=&quot;_blank&quot;&gt;發佈&lt;/a&gt;了名為 GPT-4.1 的新模型系列，共包含：GPT-4.1、GPT-4.1 mini 和 GPT-4.1 nano。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;公告稱，這些模型的性能全面超越 GPT-4o 和 GPT-4o mini，在編碼和指令跟蹤方面均有顯著提升。它們擁有一個包含 100 萬個 token 的上下文窗口，這意味着它們可以一次性輸入大約 75 萬個單詞，並且能夠通過改進的長上下文理解更好地利用這些上下文，同時其知識截止日期已更新至 2024 年 6 月。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;這些多模態模型可以通過 OpenAI 的 API 獲取，但 ChatGPT 無法使用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;351&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-065cfc590086bc15c87619c5f627883137e.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;GPT-4.1 的到來正值 OpenAI 的競爭對手谷歌和 Anthropic 加緊構建複雜編程模型之際。谷歌最近發佈的 Gemini 2.5 Pro 也擁有 100 萬個 token 上下文窗口，在熱門編碼基準測試中名列前茅。Anthropic 的 Claude 3.7 Sonnet 和&amp;nbsp; DeepSeek 的升級版 V3 也同樣名列前茅。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;訓練能夠執行復雜軟件工程任務的 AI 編碼模型是包括 OpenAI 在內的許多科技巨頭的目標。OpenAI 的宏偉目標是打造「代理軟件工程師」，正如其首席財務官 Sarah Friar 上個月在倫敦舉行的一次科技峯會上所説。該公司聲稱，其未來的模型將能夠端到端地編寫整個應用程序，處理質量保證、錯誤測試和文檔編寫等方面的工作。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;GPT-4.1 是朝着這個方向邁出的一步。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;OpenAI 的一位發言人通過電子郵件告訴 &lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2025%2F04%2F14%2Fopenais-new-gpt-4-1-models-focus-on-coding%2F&quot; target=&quot;_blank&quot;&gt;TechCrunch&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;：「我們根據直接反饋對 GPT-4.1 進行了優化，使其更適合實際使用，從而改進了開發者最關心的領域：前端編碼、減少不必要的編輯、可靠地遵循格式、遵循響應結構和順序、保持一致的工具使用等等。這些改進使開發者能夠構建出在實際軟件工程任務中表現更出色的代理。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;OpenAI 聲稱，完整的 GPT-4.1 模型在包括 SWE-bench 在內的編碼基準測試中均優於其 GPT-4o 和 GPT-4o mini 模型。據稱，GPT-4.1 mini 和 nano 效率更高、速度更快，但準確性有所降低。OpenAI 表示，GPT-4.1 nano 是其迄今為止速度最快、成本最低的模型。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;GPT-4.1 每百萬輸入 token 成本為 2 美元，每百萬輸出 token 成本為 8 美元。GPT-4.1 mini 每百萬輸入 token 成本為 0.40 美元，每百萬輸出 token 成本為 1.60 美元；GPT-4.1 nano 每百萬輸入 token 成本為 0.10 美元，每百萬輸出 token 成本為 0.40 美元。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根據 OpenAI 的內部測試，GPT-4.1 可以一次性生成比 GPT-4o 更多的 token（32,768 對 16,384），在 SWE-bench Verified 上的得分在 52% 到 54.6% 之間。這些數字略低於谷歌和 Anthropic 在同一基準測試中分別報告的 Gemini 2.5 Pro（63.8%）和 Claude 3.7 Sonnet（62.3%）的得分。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;262&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0415/103510_dAsv_4252687.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在另一項評估中，OpenAI 使用 Video-MME 測試了 GPT-4.1，該模型旨在衡量模型「理解」視頻內容的能力。OpenAI 聲稱，GPT-4.1 在「長篇無字幕」視頻類別中達到了 72% 的最高準確率。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;雖然 GPT-4.1 在基準測試中得分相當不錯，並且「知識截止」時間也較新，使其能夠更好地參考時事（截至 2024 年 6 月），但必須牢記，即使是當今一些最好的模型，在處理一些專家不會犯錯的任務時也會遇到困難。例如，許多研究表明 ，代碼生成模型通常無法修復安全漏洞和 bug，甚至會引入這些漏洞。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;OpenAI 也承認，GPT-4.1 處理的輸入 token 越多，可靠性就越低（即更容易出錯）。在該公司自己的測試 OpenAI-MRCR 中，該模型的準確率從 8,000 個 token 時的 84% 左右下降到 100 萬個 token 時的 50%。該公司表示，GPT-4.1 也比 GPT-4o 更「直白」，有時需要更具體、更明確的提示。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344606/openais-gpt-4-1-models</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344606/openais-gpt-4-1-models</guid>
            <pubDate>Mon, 14 Apr 2025 02:26:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>智譜開源 32B/9B 系列 GLM 模型，極速版最高達到 200tokens/秒</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;智譜&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FpyeqH8jGvH_dVPmekOQ1VQ&quot; target=&quot;_blank&quot;&gt;宣佈&lt;/a&gt;將開源 32B/9B 系列 GLM 模型，涵蓋基座、推理、沉思模型，均遵循 MIT 許可協議。其中，推理模型 GLM-Z1-32B-0414 性能媲美 DeepSeek-R1 等頂尖模型，實測推理速度可達 200 Tokens/秒（MaaS 平台 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fbigmodel.cn&quot; target=&quot;_blank&quot;&gt;bigmodel.cn&lt;/a&gt;），目前國內商業模型中速度最快。此外，其價格僅為 DeepSeek-R1 的 1/30。&lt;/p&gt; 
&lt;p&gt;同時，該公司宣佈啓用全新域名 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2FZ.ai&quot; target=&quot;_blank&quot;&gt;Z.ai&lt;/a&gt;，目前該平台整合了 32B 基座、推理、沉思三類 GLM 模型，後續將作為智譜最新模型的交互體驗入口。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;283&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-75970a5c47cb53cb14c3d18e6c8ec7f20c1.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;根據介紹，&lt;strong style=&quot;color:#1f2329&quot;&gt;基座模型 GLM-4-32B-0414&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;&amp;nbsp;擁有 320 億參數，其性能可與國內、外參數量更大的主流模型相媲美。該模型利用 15T 高質量數據進行預訓練，特別納入了豐富的推理類合成數據，為後續的強化學習擴展奠定了基礎。在後訓練階段，除了進行面向對話場景的人類偏好對齊，我們還通過拒絕採樣和強化學習等技術，重點增強了模型在指令遵循、工程代碼生成、函數調用等任務上的表現，以強化智能體任務所需的原子能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;GLM-4-32B-0414 在工程代碼、Artifacts 生成、函數調用、搜索問答及報告撰寫等任務上均表現出色，部分 Benchmark 指標已接近甚至超越 GPT-4o、DeepSeek-V3-0324（671B）等更大模型的水平。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;img height=&quot;243&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5d11204c0200644789c18f48b49b6c892b9.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;GLM-4-32B-0414 進一步提升了代碼生成能力，可處理並生成結構更復雜的單文件代碼。&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong style=&quot;color:#245bdb&quot;&gt;Z.ai&lt;/strong&gt;&amp;nbsp;的&lt;/span&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;對話模式內建了預覽功能，支持對生成的 HTML 和 SVG 進行可視化查看，便於用户評估生成結果和進行迭代優化。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;GLM-Z1-32B-0414&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;&amp;nbsp;是一款具備深度思考能力的推理模型。該模型在 GLM-4-32B-0414 的基礎上，採用了冷啓動與擴展強化學習策略，並針對數學、代碼、邏輯等關鍵任務進行了深度優化訓練。與基礎模型相比，GLM-Z1-32B-0414 的數理能力和複雜問題解決能力得到顯著增強。此外，訓練中整合了基於對戰排序反饋的通用強化學習技術，有效提升了模型的通用能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;在部分任務上，&lt;/span&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;GLM-Z1-32B-0414 憑藉 32B 參數，其性能已能與擁有 671B 參數的 DeepSeek-R1 相媲美。&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;通過在 AIME 24/25、LiveCodeBench、GPQA 等基準測試中的評估，GLM-Z1-32B-0414 展現了較強的數理推理能力，能夠支持解決更廣泛複雜任務。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4d4a3d01b9d1462df525f8d6a9776a95eeb.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;GLM-Z1-9B-0414&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;&amp;nbsp;則沿用了上述一系列技術，訓練了一個 9B 的小尺寸模型。雖然參數量更少，GLM-Z1-9B-0414 在數學推理及通用任務上依然表現出色，整體性能已躋身同尺寸開源模型的領先水平。特別是在資源受限的場景下，該模型可以很好地在效率與效果之間取得平衡，為需要輕量化部署的用户提供強有力的選擇。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;img height=&quot;238&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a0f3496b2b94f35f8b92209b4662f043084.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;智譜方面稱，&lt;strong style=&quot;color:#1f2329&quot;&gt;沉思模型 GLM-Z1-Rumination&lt;/strong&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;-32B&lt;/strong&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;-0414&lt;/strong&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;&amp;nbsp;則&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;代表了&lt;/span&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;該公司&lt;/span&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;對&lt;/span&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;AGI&lt;/span&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;&amp;nbsp;未來形態的下一步探索。與一般推理模型不同，沉思模型通過更多步驟的深度思考來解決高度開放與複雜的問題。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;其關鍵創新在於，它能在深度思考過程中整合搜索工具處理複雜任務，並運用多種規則型獎勵機制來指導和擴展端到端的強化學習訓練。該模型支持「&lt;/span&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;自主提出問題—搜索信息—構建分析—完成任務&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;」的完整研究閉環，從而在&lt;/span&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;研究型寫作&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;和&lt;/span&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;複雜檢索任務&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;上的能力得到了顯著提升。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;除模型開源外，基座、推理兩類模型也已同步上線智譜 MaaS 開放平台（bigmodel.cn），面向企業與開發者提供 API 服務。 本次上線的基座模型提供兩個版本：GLM-4-Air-250414 和 GLM-4-Flash-250414，其中後者完全免費。 &lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;上線的推理模型分為三個版本，分別滿足不同場景需求：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;text-align:justify&quot;&gt;GLM-Z1-AirX（極速版）：定位國內最快推理模型，推理速度可達 200 tokens/秒，比常規快 8 倍；&lt;/li&gt; 
 &lt;li style=&quot;text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;GLM-Z1-Air（高性價比版）：價格僅為 DeepSeek-R1 的 1/30，適合高頻調用場景；&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;GLM-Z1-Flash（免費版）：支持免費使用，旨在進一步降低模型使用門檻。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;對應模型價格表：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;269&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-16d33a610a5d7b5afd3524e7f55816d7a1c.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344598</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344598</guid>
            <pubDate>Mon, 14 Apr 2025 02:00:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>高德發佈全球首個地圖領域 AI 導航智能體</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;高德地圖今日宣佈推出基於地圖的 AI 導航智能體（NaviAgent）。據技術負責人介紹，其核心架構採用 Planner-Executor 模式，通過感知、規劃、執行、表達四大模塊構建智能閉環，集成多項高德核心技術。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0414/191004_ga7U_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;官方表示，該智能體「更像經驗豐富的‘老司機’」，能實時感知路況、預判風險並主動調整策略。&lt;/p&gt; 
&lt;p&gt;據瞭解，以高速駕車場景為例，其支持通過&lt;strong&gt;感知車道級交通流變化、動態事件、事故佔道等信息&lt;/strong&gt;，結合用户路線，AI 導航智能體會&lt;strong&gt;自動開啓領航功能，推薦全局最優車道&lt;/strong&gt;，讓變道決策更從容高效。&lt;/p&gt; 
&lt;p&gt;同時，在停車場景中，&lt;strong&gt;超視距感知能力可覆蓋至「最後 100 米」&lt;/strong&gt;：當用户輸入目的地後，系統會在距離終點 5 公里時啓動智能分析，主動推薦目的地周邊的空閒停車位；基於時空感知和推理能力，補全停車後的步行導航指引，直達目的地入口，實現無縫銜接。&lt;/p&gt; 
&lt;p&gt;其紅綠燈 AI 領航功能已覆蓋全國，可結合實時交通信息與超視距感知技術，動態提供車速建議、車道選擇及起步提醒，大幅提升過燈效率。&lt;/p&gt; 
&lt;p&gt;AI 導航智能體還構建了包含情感識別、意圖理解、情緒表達在內的三維交互體系，突破性地將服務拓展至情緒價值領域。譬如，當用户完成優質的駕駛操作時，還會&lt;strong&gt;收到導航智能體的及時讚許&lt;/strong&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344517</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344517</guid>
            <pubDate>Sun, 13 Apr 2025 11:10:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>一次提交更新兩個倉庫，Get 更優雅的 GitHub/Gitee 倉庫鏡像同步</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;現在很多開發者都不滿足於只在一個代碼託管平台活躍，將項目同時託管於 Gitee 和 GitHub 是目前國內很多開發者的選擇，既擁有更快的訪問和代碼推拉速度，也可以和更多國際上的優秀開發者交流。&lt;/p&gt; 
&lt;p&gt;Gitee 的&lt;strong&gt;倉庫鏡像管理&lt;/strong&gt;功能在這兩天重新受到了開發者們的關注，今天馬建倉再次為大家介紹一下這個超方便的功能，方便各位開發者更優雅地將代碼在世界上最大的兩個代碼託管平台之間同步。&lt;/p&gt; 
&lt;h2&gt;什麼是倉庫鏡像管理&lt;/h2&gt; 
&lt;p&gt;倉庫鏡像管理功能用於配置和管理倉庫鏡像；配置倉庫鏡像可以實現不同平台之間倉庫分支、標籤和提交信息的自動同步。&lt;/p&gt; 
&lt;p&gt;簡單來説，就是你可以&lt;strong&gt;通過倉庫鏡像管理功能實現 Gitee 和 GitHub 兩個平台的雙向自動同步&lt;/strong&gt;。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;將 Gitee 的倉庫鏡像至 GitHub&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;配置此鏡像後，當你提交代碼到 Gitee 的倉庫時，Gitee 會自動向 GitHub 同步倉庫。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0414/184829_hrc3_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;將 GitHub 的倉庫鏡像至 Gitee&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;你可以根據自身需求選擇&lt;strong&gt;自動鏡像&lt;/strong&gt;或&lt;strong&gt;手動鏡像&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;自動鏡像&lt;/strong&gt;：當你提交代碼到 GitHub 鏡像倉庫時，Gitee 會自動從 GitHub 同步倉庫。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;手動鏡像&lt;/strong&gt;：只有你手動點擊更新按鍵時，Gitee 才會從 GitHub 同步倉庫。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0414/184845_9D4v_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;倉庫鏡像會同步以下內容：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;分支（Branches）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;標籤（Tags）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;提交記錄（Commits）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;如何為自己的倉庫設置鏡像&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;以將 GitHub 的倉庫鏡像至 Gitee 為例&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;進入需要使用鏡像功能的倉庫，進入「管理」找到「倉庫鏡像管理」選項，點擊「添加鏡像」按鈕，如果你還沒有綁定 GitHub 帳號，請根據彈窗提示綁定 GitHub 帳號；&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0414/184923_KLAZ_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;添加鏡像&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0414/184946_8GX5_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;在「鏡像方向」中選擇 Pull 方向；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在「鏡像倉庫」下拉列表中選擇需要鏡像的倉庫；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在「私人令牌」中輸入你的 GitHub 私人令牌；&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0414/184959_x8O7_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;私人令牌中必須包含對&amp;nbsp;&lt;code&gt;repo&lt;/code&gt;&amp;nbsp;的訪問授權，否則添加後鏡像不可用。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;根據自身需求選擇是否勾選「自動從 GitHub 同步倉庫」&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;勾選後，將會在鏡像倉庫中自動生成 webhook 用於實現自動鏡像。此功能需要你的個人令牌中包含對 admin:repo_hook 的訪問授權，否則會添加失敗。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;點擊「添加」保存鏡像配置。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;配置完成後，可以通過&lt;strong&gt;提交代碼到 Gitee 倉庫&lt;/strong&gt;或&lt;strong&gt;手動更新鏡像&lt;/strong&gt;的方式觸發鏡像操作。&lt;/p&gt; 
&lt;p&gt;一次提交，同步兩個倉庫，更優雅的倉庫鏡像姿勢你 Get 到了嗎？&lt;/p&gt; 
&lt;p&gt;點擊後面的鏈接瞭解更多功能細節：&lt;a href=&quot;https://gitee.com/help/articles/4336&quot;&gt;https://gitee.com/help/articles/4336&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;注意事項&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;鏡像觸發的最短間隔時間為 5 分鐘；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;只支持鏡像已綁定 GitHub 帳號授權訪問的倉庫；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;更新請求一旦發出，除非強制停止，否則將無法中斷；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;暫時不支持同步&lt;code&gt;Git-LFS&lt;/code&gt;；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;同步時間超過 30 分鐘視為超時，大型倉庫不建議使用鏡像方式同步；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;鏡像操作會覆蓋目標倉庫的分支、標籤和提交記錄；請注意備份並小心使用。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;單向導入同樣支持&lt;/h2&gt; 
&lt;p&gt;同時 Gitee 也支持從 GitHub 單向導入倉庫的操作。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0414/185026_lLHt_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;點擊右上角&lt;code&gt;+&lt;/code&gt;後選擇&lt;code&gt;從 GitHub/GitLab 導入倉庫&lt;/code&gt;，連接自己的 GitHub 賬號即可實現倉庫的一鍵導入。&lt;/p&gt; 
&lt;p&gt;歡迎使用 Gitee：&lt;a href=&quot;https://gitee.com/&quot;&gt;https://gitee.com/&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344514</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344514</guid>
            <pubDate>Sun, 13 Apr 2025 10:51:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>SSL/TLS 證書最長有效期縮短至 47 天</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;蘋果此前向 CA/B 論壇（負責管理 SSL/TLS 證書的行業組織）提議，將所有證書有效期縮短至 45 天。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;日前 CA/B 論壇服務器證書工作組投票通過 SC-081v3 提案，最終決定將 SSL/TLS 證書有效期從 398 天降至 47 天，SAN 數據重用週期縮短至 10 天。&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3fc44165410fc553ed10737b2c1f73744e1.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgroups.google.com%2Fa%2Fgroups.cabforum.org%2Fg%2Fservercert-wg%2Fc%2F9768xgUUfhQ%3Fpli%3D1&quot; target=&quot;_blank&quot;&gt;https://groups.google.com/a/groups.cabforum.org/g/servercert-wg/c/9768xgUUfhQ?pli=1&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;SSL/TLS 證書是一種用於網站的安全協議，通過加密網絡連接確保數據傳輸的安全性。&lt;/p&gt; 
&lt;p&gt;此前，SSL/TLS 證書最長有效期可達 8 年，經過多次調整，目前最長為 398 天，開發者和企業必須在這個時間內更新一次數字證書。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;蘋果給出的理由也非常簡單，有效期縮短後，即便證書泄露也很快就會過期而不會被長時間利用。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;此次投票中，證書頒發機構（CA）25 票贊成、0 票反對、5 票棄權；證書消費者（包括蘋果、谷歌、微軟、Mozilla 主要瀏覽器開發商）4 票贊成、0 票反對、0 票棄權。&lt;/p&gt; 
&lt;p&gt;提案通過後，將進入知識產權審查階段。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;該措施將從 2026 年 3 月開始逐步實施，到 2029 年 3 月結束，具體時間表如下：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;2026 年 3 月 14 日前：證書有效期最長為 398 天&lt;/li&gt; 
 &lt;li&gt;2027 年 3 月 14 日前：證書有效期最長縮短至 200 天&lt;/li&gt; 
 &lt;li&gt;2028 年 3 月 14 日前：證書有效期最長縮短至 100 天&lt;/li&gt; 
 &lt;li&gt;2028 年 3 月 15 日後：證書有效期最長縮短至 47 天&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;儘管 SSL/TLS 證書已經有很多便捷的工具可以實現自動化續簽，但並非每個網站和企業都可以輕鬆部署自動化續簽流程，尤其是有些複雜的系統切換數字證書本身就是個麻煩的事情。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;在 Reddit 論壇上有數百名系統管理員抱怨蘋果的這項提議，因為縮短證書有效期後剩餘的工作都要系統管理員承擔，尤其是如果管理多個網站那麼工作量將會顯著提升 (假如無法實現自動化續簽)。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344509</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344509</guid>
            <pubDate>Sun, 13 Apr 2025 10:30:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>量子計算機可能幫助解決的三個現實世界問題</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;今天是世界量子日，為了紀念這一天，谷歌發文&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.google%2Ftechnology%2Fresearch%2Fgoogle-quantum-computer-real-world-applications%2F&quot; target=&quot;_blank&quot;&gt;介紹&lt;/a&gt;了量子計算機可能幫助解決的三個現實世界問題。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1600&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-b44eb7465984c4826a24491d5324ee91f30.png&quot; width=&quot;1910&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;世界量子日（World Quantum Day），即 4 月 14 日，是世界各地量子科學家發起的一項倡議，於 2021 年 4 月 14 日啓動，並開始 2022 年 4 月 14 日首次全球慶祝活動的倒計時。&lt;/p&gt; 
 &lt;p&gt;「世界量子日」為什麼選在 4 月 14 日，這是源自普朗克常數。普朗克常數是支配量子物理的基本常數，其大小為為 4.135667696 × 10-15eV·s，其前幾位數字（四捨五入近似）即是「414」。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;藥物研發&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Google 表示，量子計算機預計將帶來的首個益處是藥物研發，從而改善健康結果。藉助這項技術，研究人員將能夠測試不同候選藥物的靶點和其他生物分子，從而幫助研發更有效的藥物。&lt;/p&gt; 
&lt;p&gt;Google 最近與勃林格殷格翰公司聯合發表了一篇研究論文，論文表明量子計算機將能夠更準確地模擬細胞色素 P450，這是一種決定藥物有效性的關鍵酶，因為它在血液中分解藥物。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;改進電池&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Google 希望量子計算機能夠造福人類的另一個途徑是開發改進型電池。這對於清潔能源交通（例如電動汽車和公交車）以及電網至關重要，因為多餘的能量可以儲存起來，以備無風或無陽光時使用。&lt;/p&gt; 
&lt;p&gt;為了改進電池，Google 設想利用量子計算機輔助設計新材料。該公司已與化學公司巴斯夫合作，確定量子計算機將能夠模擬鋰鎳氧化物 (LNO)，從而改善工業生產流程並生產出性能更佳的電池。目前，LNO 的生產難度較大，這阻礙了該領域的研究。LNO 的主要優勢之一是，與更常用的鈷酸鋰相比，其環境足跡更小。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;聚變能&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Google 表示量子計算機將受益的第三個也是最後一個領域是能源生產。如今，清潔可再生能源指的是太陽能或風能，但未來將意味着核聚變能。核聚變反應堆的技術仍在研發中，但 Google 相信量子計算機將用於設計反應堆，從而釋放核聚變能。&lt;/p&gt; 
&lt;p&gt;Google 表示，目前的計算機模型可能存在誤差，需要運行數十億個 CPU 小時。這家搜索巨頭已與桑迪亞國家實驗室合作，證明在容錯量子計算機上運行的量子算法可以「更有效地模擬持續聚變反應所需的機制」。&lt;/p&gt; 
&lt;p&gt;以科學為中心的人工智能模型的引入已經加速了藥物和材料的發現，因此，當它與量子計算機相結合時，這些發現的速度可能會進一步加快。&lt;/p&gt; 
&lt;p&gt;世界量子日快樂！&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;閲讀更多&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/324343/google-willow-quantum-chip&quot; target=&quot;news&quot;&gt;谷歌發佈 Willow 量子計算芯片&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/334836/microsofts-majorana-1-chip&quot; target=&quot;news&quot;&gt;微軟發佈首款量子計算芯片「Majorana 1」&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/336773/quantum-computing-aws-ocelot-chip&quot; target=&quot;news&quot;&gt;亞馬遜發佈首款量子計算芯片 「Ocelot」&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344503/google-quantum-computer-real-world-applications</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344503/google-quantum-computer-real-world-applications</guid>
            <pubDate>Sun, 13 Apr 2025 10:03:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>100% 議題火爆出爐！0425 GOPS 2025 · 深圳站即將啓幕！</title>
            <description>GOPS 2025 · 深圳站即將啓幕</description>
            <link>https://www.bagevent.com/event/8943887?bag_track=KYZG</link>
            <guid isPermaLink="false">https://www.bagevent.com/event/8943887?bag_track=KYZG</guid>
            <pubDate>Sun, 13 Apr 2025 09:19:00 GMT</pubDate>
        </item>
        <item>
            <title>頂級生成式 AI 用例揭曉：營銷任務排名較低</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根據最新的研究，生成性人工智能（Gen AI）在市場營銷領域的應用遠不如個人使用那麼普遍。一份由 Marc Zao-Sanders 發佈的《Top-100Gen AI Use Case》報告顯示，儘管人們在日常生活中越來越多地利用 AI 來獲得情感支持，市場營銷的相關任務，如廣告創作和社交媒體內容生成，卻位居使用排名的後列。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;報告分析了人們對生成性 AI 的使用情況，並指出，過去一年中，使用重點從技術驅動轉向了以情感和個人福祉為中心的應用。根據研究，前三名的應用包括:&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;心理治療和陪伴&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;生活組織&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;尋找生活目標&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;593&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-69816cfbe83380d0ed45a10da818b17fe37.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;報告指出，這一發現表明，用户更傾向於利用 AI 來滿足自身的情感需求，而不是單純提高工作效率。在營銷領域，相關應用的排名較低，包括:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;廣告 / 營銷文案（第 64 位）&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;撰寫博客文章（第 97 位）&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;社交媒體文案（第 98 位）&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;社交媒體系統（第 99 位）&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;這種差距反映出市場營銷人員尚未充分挖掘生成性 AI 的潛力。Zao-Sanders 在報告中指出，營銷人員可能錯誤判斷了 AI 的使用方向，很多專家原本預期 AI 將首先在技術領域取得成果，然而，研究表明 AI 在滿足人類情感需求方面同樣具有重要作用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;用户對生成性 AI 的使用也在不斷提高，特別是在撰寫有效提示方面。報告中提到的高排名應用可為營銷人員提供借鑑。人們喜愛能夠與他們建立情感聯繫的 AI，營銷工具可以更加註重對話性和同理心。除此之外，AI 在生活組織方面的應用也相當受歡迎，營銷工具可以集中精力在優化工作流程上，而不僅僅是內容創作。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在報告中，排名較高的營銷相關用例是 「生成創意」，位列第六，表明頭腦風暴可能是生成性 AI 的一個更佳切入點。營銷人員分享了一些生成性 AI 在實際應用中的成功案例，比如利用 AI 進行行業痛點分析、快速生成案例研究報告等。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;報告建議營銷人員應關注 AI 工具的個人利益，而不僅僅是生產力提升。透明的數據隱私保護措施也非常重要，這有助於增強用户的信任。Zao-Sanders 總結道，現在正是營銷人員學習和將這些工具融入日常工作中的最佳時機。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344484</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344484</guid>
            <pubDate>Sun, 13 Apr 2025 09:13:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
    </channel>
</rss>