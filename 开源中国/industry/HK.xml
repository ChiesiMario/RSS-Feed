<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - industry - 繁體中文（香港）</title>
    <link>https://www.oschina.net/news/industry</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/industry" rel="self" type="application/rss+xml"/>
    <description>已對該 RSS 進行格式化操作：中英字符之間插入空格、使用直角引號、標點符號修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-hk</language>
    <lastBuildDate>Tue, 02 Sep 2025 02:41:39 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>《上海合作組織成員國元首理事會關於進一步深化人工智能國際合作的聲明》發佈</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;《上海合作組織成員國元首理事會關於進一步深化人工智能國際合作的聲明》&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gov.cn%2Fyaowen%2Fliebiao%2F202509%2Fcontent_7038710.htm" target="_blank"&gt;發佈&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img height="298" src="https://oscimg.oschina.net/oscnet/up-c1e1998ec520ff1faa874f536b3ea15109a.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;其中提到，成員國將採取以下行動：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;在充分考慮成員國優先事項和各自國內法律法規的基礎上，支持聯合國在人工智能決策中的核心作用，歡迎聯合國大會通過的「加強人工智能能力建設國際合作」決議，以及「人工智能在為中亞可持續發展創造新機遇方面發揮的作用」的決議；&lt;/li&gt; 
 &lt;li&gt;歡迎提出《人工智能能力建設普惠計劃》，成立人工智能能力建設國際合作之友小組，舉辦「人工智能之旅」國際會議（「AI Journey」），以及其他上合組織成員國人工智能領域倡議；&lt;/li&gt; 
 &lt;li&gt;加強人工智能基礎設施合作，促進人工智能基礎設施聯通，在自願參加的基礎上推動人工智能應用國際合作；&lt;/li&gt; 
 &lt;li&gt;推動人工智能人才培養合作，擴大校際合作與學術交流，促進科研成果和教育資源交流；&lt;/li&gt; 
 &lt;li&gt;推動人工智能領域投資合作，發揮上合組織銀聯體的作用，充分挖掘上合組織成員國投資潛力，在自願參加的基礎上為成員國人工智能領域投資項目提供資源支持；&lt;/li&gt; 
 &lt;li&gt;在尊重國家主權的基礎上發展人工智能領域對話夥伴機制，加強發展戰略、治理規則、技術標準的對接協調，發展安全負責任的人工智能，開發可信賴的人工智能系統；&lt;/li&gt; 
 &lt;li&gt;在人工智能全球治理領域推動互惠理念，在人工智能國際監管方面始終堅持發展與安全並重。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;各成員國將努力推動人工智能向更加開放、包容、普惠、公平、向善的方向發展。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369799</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369799</guid>
      <pubDate>Tue, 02 Sep 2025 02:40:37 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>R8 疑難雜症分析實戰：外聯優化設計缺陷引起的崩潰</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
&lt;h1&gt;一、背景&lt;/h1&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;R8 作為谷歌官方的編譯優化工具，在編譯階段會對字節碼進行大規模修改，以追求包體優化和性能提升。但是 Android 應用開發者數量太過龐大，無論測試流程多麼完善，終究難以避免在一些特定場景下出現問題。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;近期我們在升級項目的 AGP，遇到了一個指向系統 SurfaceTexture 類的 native 崩潰問題。經反編譯分析發現問題最終指向了 smali 字節碼中多餘的一行 new-instance 指令。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//c5f08cf575756e08466c223dc6283005.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//1c03aaa90c06e347c22e752eeb0ccb1d.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;該指令創建了一個 SurfaceTexture 對象，但是並未調用其&amp;lt;init&amp;gt;方法，這意味着構造方法沒有執行，但是這個類重寫了 finalize 方法，後續被 gc 回收時會調用其中的 nativeFinalize 這個 JNI 方法，最終在 native 層執行析構函數時觸發了 SIGNALL 11 的內存訪問錯誤.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//d639c13a4be57106726e6ea52ee6c3f4.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//2210f4a541d54e36690a7e1fbfb16627.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;span id="OSC_h1_2"&gt;&lt;/span&gt; 
&lt;h1&gt;二、復現問題&lt;/h1&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;我們注意到多出來的 new-instance 指令下面緊接着的是對 a0.e 類中的靜態方法 i() 的調用，其內部實現就是 SurfaceTexture 的構造方法。這是典型的代碼外聯操作，即一段相同的代碼在工程中多次出現，則會被抽出來單獨作為一個靜態函數，原先的調用點則替換成該函數的調用，這樣可以減小代碼體積，是常見的編碼思路。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;例如：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;class&amp;nbsp;Activity{
&amp;nbsp; &amp;nbsp;&amp;nbsp;void&amp;nbsp;onCreate(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// ...
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;String&amp;nbsp;a = xx.xxx();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;String&amp;nbsp;b = xx.xxx();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Log.e("log",a+b);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;//...
&amp;nbsp; &amp;nbsp; }


&amp;nbsp; &amp;nbsp;&amp;nbsp;void&amp;nbsp;onReusme(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// ...
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;String&amp;nbsp;a = xx.xxx();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;String&amp;nbsp;b = xx.xxx();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Log.e("log",a+b);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;//...
&amp;nbsp; &amp;nbsp; }


}&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;class&amp;nbsp;Activity{
&amp;nbsp; &amp;nbsp;&amp;nbsp;void&amp;nbsp;onCreate(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// ...
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Activity$Outline.log();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;//...
&amp;nbsp; &amp;nbsp; }


&amp;nbsp; &amp;nbsp;&amp;nbsp;void&amp;nbsp;onReusme(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// ...
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Activity$Outline.log();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;//...
&amp;nbsp; &amp;nbsp; }
}
//外聯生成的類
class&amp;nbsp;Activity$Outline{
&amp;nbsp; &amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;log(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;String&amp;nbsp;a = xx.xxx();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;String&amp;nbsp;b = xx.xxx();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Log.e("log",a+b);
&amp;nbsp; &amp;nbsp; }
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;我們根據這個生成類的類名可以知道是 R8 中 ApiModelOutline 功能生成了這個類。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//832dad3a1078a82298590ae249e4c937.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;我們進到 R8 工程中檢索下相關的關鍵字，再加上 demo 多次嘗試，可以確認滿足以下條件能夠必現該問題:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;使用了高於當前 minSdkVersion 的系統函數/變量（僅限系統類，自己寫的無效）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;用 synchronized 或者 try 語句塊包裹了該調用，或者給該函數傳參時有任何計算行為（除了傳局部變量）。例如：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;new SurfaceTexture( getParmas() )&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;new SurfaceTexture( if(enable) 1 : 2)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;new SurfaceTexture ( (boolean) enable )&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;span id="OSC_h1_3"&gt;&lt;/span&gt; 
&lt;h1&gt;三、問題分析&lt;/h1&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;在確認復現條件之後，我們帶着幾個問題來逐個分析。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;ApiModel 外聯是什麼？&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#ffffff"&gt;R8 中的優化大多數跟包體優化有關，代碼外聯也是其中一種，但是外聯的前提是代碼重複的次數滿足一定閾值，但是 ApiModel 會對所有調用了高版本系統 API 的代碼做外聯，包括只調用一次的場景。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;ApiModel 並非為了包體優化，我們通過 R8 工程的 issueTracker&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;（https://issuetracker.google.com/issues/333477035）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;檢索到了相關的信息：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//5020bee9863c252049d9f1d8f055c200.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;譯：AGP 新增的 ApiModel 功能是為了防止在低版本設備上不可能執行的代碼引起類驗證錯誤，從而降低 App 啓動耗時。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;從這篇介紹 ART 虛擬機類驗證的文檔&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;（https://chromium.googlesource.com/chromium/src/+/HEAD/build/android/docs/class_verification_failures.md#chromium_s-solution）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;就能夠理解上面這句話的含義：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;ART 虛擬機會在 APK 安裝之後立刻執行 AOT class verification，即對 dex 文件中所有的類進行驗證，如果驗證成功則後續運行時將不需要再進行驗證，反之若失敗，則該 class 會被 ART 打上&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#e5e5e5"&gt;RetryVerificationAtRuntime&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#3e3e3e"&gt;的標記，後續運行時還得重新執行類驗證。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;同時這些失敗的類也將無法被 dex2oat 優化成 oat 格式的優化字節碼（oat 字節碼的加載和執行速度更快）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//5d3b99565c562dff751ba4ac636da574.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;如果是在 MainActivity，啓動任務中使用了這些高版本 API，那麼在低版本設備 App 啓動時就必須額外執行一次類驗證（比較耗時，有的類能到 8ms&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;&amp;nbsp;https://issues.chromium.org/issues/40574431&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;），而 ApiModel 外聯則是相當於將這些肯定驗證失敗的函數的調用單獨抽到一個生成類中，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;這樣運行時就能將類驗證失敗問題徹底隔離在生成類中，從而規避運行時的類驗證耗時。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;//安裝 apk 後驗證失敗，運行時驗證失敗，但是能正常執行
class&amp;nbsp;MainActivity{
&amp;nbsp; &amp;nbsp;&amp;nbsp;void&amp;nbsp;onCreate(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;if(android.sdk&amp;nbsp;&amp;gt;&amp;nbsp;26){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;new&amp;nbsp;SurfaceTexture(false);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; }
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;ApiModel 後&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;class&amp;nbsp;MainActivity{
&amp;nbsp; &amp;nbsp;&amp;nbsp;void&amp;nbsp;onCreate(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;if(android.sdk &amp;gt;&amp;nbsp;26){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; a0.b();&amp;nbsp;//這樣類驗證就能成功
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; }
}
//生成的外聯類，類驗證會失敗，但是運行時不可能走到，不影響
class&amp;nbsp;a0{
&amp;nbsp; &amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;b(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;new&amp;nbsp;SurfaceTexture(false);
&amp;nbsp; &amp;nbsp; }
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;更多關於 ApiModel 的詳細介紹，見這篇文章：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;https://medium.com/androiddevelopers/mitigating-soft-verification-issues-in-r8-and-d8-7e9e06827dfd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;為什麼會多生成一個&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;new-instance 指令?&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;介紹完 ApiModel 之後，我們已經知道了為什麼&amp;lt;init&amp;gt;方法的調用被替換成了一個生成函數的調用，接下來我們再分析下導致崩潰的罪魁禍首 new-instance 指令是如何出現的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;我們先來瞭解下 java 文件在編譯過程中的格式轉換過程，因為 ApiModel 是基於 IRCode 格式（R8 自定義的格式）來做外聯。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;文件轉換&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;javac&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#ffffff"&gt;javac 將 java 文件編譯成 class 文件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;值得一提的是 sychronized 語句塊在 javac 編譯之後會為其內部代碼生成 try-catch，這是為了確保在語句塊拋異常時能夠正常釋放鎖，因此和問題有關的是 try-catch 語句塊，和 synchronized 無關。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//36889c510c4d4a88957306d93cdf7d59.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;D8&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#ffffff"&gt;目前 R8 已經整合 D8，因此輸入 class 文件之後就會先通過 D8 轉為 dex 格式，並持有在內存中。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;轉換之後的指令基本和 class 字節碼基本類似。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//876e7cf561f3a8aa1ee57005986ae7f0.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;IRcode&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;為了做進一步的優化，會將 dex 格式的代碼轉化成 R8 自定義的 IRcode 格式，其特點是代碼分塊。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;案例：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//b04a46ddb675fd3446029e19aa3fc632.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;問題根因&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;在 R8 工程裏檢索 ApiModel 關鍵字，最終定位到針對構造函數生成外聯函數和指令替換的代碼：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#e5e5e5"&gt;InstanceInitializerOutliner-&amp;gt;rewriteCode&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;執行此方法之前的指令如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;java：
new&amp;nbsp;SurfaceTexture(false);&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;dex：
:&amp;nbsp;-1:&amp;nbsp;NewInstance &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;v1&amp;nbsp;&amp;lt;- &amp;nbsp;android.graphics.SurfaceTexture
: -1: ConstNumber &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;v2(0) &amp;lt;- &amp;nbsp;0 (INT)
: -1: Invoke-Direct &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;v1,&amp;nbsp;v2(0); method:&amp;nbsp;void&amp;nbsp;android.graphics.SurfaceTexture.&amp;lt;init&amp;gt;(boolean)&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;對整個方法中所有的指令從上往下進行遍歷，第一次遍歷主要是：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;檢索 &amp;lt;init&amp;gt;方法調用的指令&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;判斷該方法的 androidApiLevel 是否高於 minSDK&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;生成包含完整構造函數指令的外聯函數，並替換&amp;lt;init&amp;gt;函數調用為外聯函數調用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;執行完替換邏輯，就記錄信息到 map 中，key 是&amp;lt;init&amp;gt;對應的 new-instance 指令，value 是前一步中替換的新指令。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;經過這一步，字節碼會變成這樣：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//e6b105ab1ca583830e11bee8baafc4e5.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;具體替換邏輯如下（可以參考註釋理解）：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//c919c6ad05e651de339fb13da747bfaa.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;第二次遍歷則是對 new-instance 指令的處理：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;找到 new-instance 指令&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;查詢 map，確認&amp;lt;init&amp;gt;方法已完成替換&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;根據&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;canSkipClInit&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;方法返回的結果分為兩種場景：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;ul&gt; 
   &lt;li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;無類初始化邏輯：直接移除 new-instance 指令，不影響原代碼的語義。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//f1f56bfb61c5396de49e85cc7eec3a7e.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;ul&gt; 
   &lt;li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;有類初始化邏輯：生成外聯函數，只包含該 new-instance 指令，和前一次遍歷一樣進行指令替換。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//1959f35cfade28f57d11667c652bea3e.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;具體替換邏輯:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//fac201236889edc5ad19870621442c23.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;問題重點就在於&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;canSkipClInit&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;這個函數的實現。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;它會檢查 new-intance 指令和 invoke &amp;lt;init&amp;gt;指令之間是否存在任何局部變量聲明以外的指令，如果存在，他會認為這些指令是這個類初始化的邏輯，因此為了保留源代碼的執行順序，這種情況下就是需要額外執行一次 new-instance 指令來觸發類初始化。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//9fe3bbc584708c6a61e6b7a0d4e808bd.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;但是實際上，如果在調用這個構造函數傳參時執行了任何運算（和類加載無關），都會生成相關的指令插在中間，例如：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;java 寫法&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;new-intance 和 invoke &amp;lt;init&amp;gt;指令之間的指令&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;new SurfaceTexture( getParmas() )&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;invoke-virtual &amp;nbsp; v2 &amp;lt;-; method: void xx.xx.xx&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;new SurfaceTexture( if(enable) 1 : 2)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;StaticGet &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;v3 &amp;lt;- ; field: boolean &amp;nbsp;xxx.xxx.xx&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;new SurfaceTexture ( (boolean) enable )&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;: -1: CheckCast &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;v5 &amp;lt;- v3; java.lang.Boolean&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;: -1: Invoke-Virtual &amp;nbsp; &amp;nbsp; &amp;nbsp; v6 &amp;lt;- v5; method: boolean java.lang.Boolean.booleanValue()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;從作者留下的 todo 也能看出，後續準備擴展這個方法，實現對這些夾在中間的指令的判斷，如果是對類初始化無影響的入參計算邏輯，則也將正常移除 new-intance 指令。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//fa19a3d661f5f19c0bf5fdb01d8c8aba.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;值得一提的是，我們最終 APK 裏 new-intance 指令並沒有被外聯，這是因為 SurfaceTexture 這個類本身在安卓 21 之前的版本就已經存在，只是入參為 bool 類型的構造方法是在安卓 26 新增的，所以他其實是被外聯之後又被內聯回到了調用處，因此看起來像是沒有被外聯。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//48f375f6e8c147cd435c140b6c8864ba.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;小結&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;至此，我們就明白了多出來一個看似無用的 new-intance 指令，實際上是為了保全源代碼的語義，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;觸發類加載&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;用的，但是作者沒有考慮到這些被優化的類可能重寫了 finalize 方法來釋放一些本就不存在的資源。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;而且不侷限於調用 native 函數，只要是重寫了 finalize，並在裏面訪問一些在構造函數中初始化的成員變量，一樣可能造成 NPE 等崩潰。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;R8 是如何計算出 API 的版本？&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//d58a071ec92ca506d6e4f3e1ab4c7122.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;R83.3 版本開始，它編譯時會下載一個.ser 格式的數據庫文件，裏面記錄了所有系統 API、變量與安卓版本號的映射信息，在運行時通過行號和偏移量來尋找各自的版本號。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//9842b0b5f78805c080d71cbda30f1c44.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;為什麼 try-catch&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;也會導致該問題？&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;前面解釋了在構造函數入參中添加函數調用等寫法導致的字節碼異常原因，但是實際上這次我們遇到的崩潰場景是在 sychronized 裏 new 了一個 SurfaceTexture。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//cec26da2ccbd01a385a47d0914cbd615.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;前文中已經解釋過，sychronized 在編譯成 class 後會生成 try-catch 語句塊，這段代碼改成用 try-catch 語句塊包裹，一樣會復現崩潰，因此我們跟蹤 try-catch 在文件轉換過程中對字節碼的影響即可。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;回到 class 文件轉 dex 文件的階段，我們發現 try 語句塊中的每一行指令，都會在其後生成一條 FALLTHROUGH 指令。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;dex 格式：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//dc87199452140addbab0d7de45794ad8.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;FALLTHROUGH 是什麼指令，他是做什麼的？&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;FALLTHROUGH 指令表示指令自然流轉，沒有實際含義，它主要是為了幫助優化器識別哪些指令是可達的。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;例如下面這種寫法，case1 沒有寫 break，這樣會接着執行 case2 的代碼：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;switch&amp;nbsp;(value) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;case&amp;nbsp;1:
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.println("One");
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// 故意不寫 break
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;case&amp;nbsp;2:
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.println("Two");
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;break;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;case&amp;nbsp;3:
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.println("Three");
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;break;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;其字節碼如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;正常有 break 的話，會對應一條 GOTO 指令跳轉到 switch 語句塊最後一行，但是沒寫 break 的話，就會出現：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;在 12 行執行 goto 13 跳轉到 13 行的指令，這種指令毫無意義，且運行時會消耗性能，因此可以替換成 FALLTHROUGH 指令，這樣最終在生成 dex 文件時會被移除掉，從而避免浪費性能。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;switchWithFallthrough(int);
&amp;nbsp; Code:
&amp;nbsp; &amp;nbsp; stack=2, locals=1, args_size=1


&amp;nbsp; &amp;nbsp;&amp;nbsp;// 加載參數
&amp;nbsp; &amp;nbsp;&amp;nbsp;0: iload_0


&amp;nbsp; &amp;nbsp;&amp;nbsp;// 檢查 case 1
&amp;nbsp; &amp;nbsp;&amp;nbsp;1: iconst_1
&amp;nbsp; &amp;nbsp;&amp;nbsp;2: if_icmpne&amp;nbsp;13&amp;nbsp; &amp;nbsp;&amp;nbsp;// 如果不等於 1，跳轉到 case 2
&amp;nbsp; &amp;nbsp;&amp;nbsp;5: getstatic #2&amp;nbsp; &amp;nbsp;&amp;nbsp;// Field java/lang/System.out:Ljava/io/PrintStream;
&amp;nbsp; &amp;nbsp;&amp;nbsp;8: ldc #3&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// String One
&amp;nbsp; &amp;nbsp;&amp;nbsp;10: invokevirtual #4&amp;nbsp;// Method java/io/PrintStream.println:(Ljava/lang/String;)V
&amp;nbsp; &amp;nbsp;&amp;nbsp;12:&amp;nbsp;goto&amp;nbsp;13


&amp;nbsp; &amp;nbsp;&amp;nbsp;// case 2 (fallthrough 目標)
&amp;nbsp; &amp;nbsp;&amp;nbsp;13: iconst_2
&amp;nbsp; &amp;nbsp;&amp;nbsp;14: if_icmpne&amp;nbsp;28&amp;nbsp; &amp;nbsp;// 如果不等於 2，跳轉到 case 3
&amp;nbsp; &amp;nbsp;&amp;nbsp;17: getstatic #2&amp;nbsp; &amp;nbsp;// Field java/lang/System.out:Ljava/io/PrintStream;
&amp;nbsp; &amp;nbsp;&amp;nbsp;20: ldc #5&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// String Two
&amp;nbsp; &amp;nbsp;&amp;nbsp;22: invokevirtual #4&amp;nbsp;// Method java/io/PrintStream.println:(Ljava/lang/String;)V
&amp;nbsp; &amp;nbsp;&amp;nbsp;25:&amp;nbsp;goto&amp;nbsp;40&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// 跳轉到 switch 結束


&amp;nbsp; &amp;nbsp;&amp;nbsp;// case 3
&amp;nbsp; &amp;nbsp;&amp;nbsp;28: iconst_3
&amp;nbsp; &amp;nbsp;&amp;nbsp;29: if_icmpne&amp;nbsp;40&amp;nbsp; &amp;nbsp;// 如果不等於 3，跳轉到結束
&amp;nbsp; &amp;nbsp;&amp;nbsp;32: getstatic #2&amp;nbsp; &amp;nbsp;// Field java/lang/System.out:Ljava/io/PrintStream;
&amp;nbsp; &amp;nbsp;&amp;nbsp;35: ldc #6&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// String Three
&amp;nbsp; &amp;nbsp;&amp;nbsp;37: invokevirtual #4&amp;nbsp;// Method java/io/PrintStream.println:(Ljava/lang/String;)V


&amp;nbsp; &amp;nbsp;&amp;nbsp;// switch 結束
&amp;nbsp; &amp;nbsp;&amp;nbsp;40:&amp;nbsp;return&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;既然沒用為什麼還要加這個指令？&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;class 文件是通過 Exception table 來指定異常處理的指令範圍，而 dex 文件則是通過為每一行可能產生 throwable 的指令後面添加 FALLTHROUGH 指令來實現 try-catch。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;這裏會把每一行可能崩潰的指令都鏈接到 catch 指令所在的 block 中，確保任意位置的崩潰都能正常走到 catch 中。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//144f461c63929a79f8346da8a6731ecb.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;問題根因&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;在 R8 4.0.26 版本，IRCode 翻譯器新增了對 FALLTHROUGH 指令的處理，即新建一個 block 並&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;生成一條 GOTO 指令指向新的 block。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//941934987c5518db50e697aacc04d794.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;根據前文的結論，GOTO 指令一樣會被認為是類初始化相關的邏輯，因此 try-catch 語句塊一樣會導致最終多出來一個 new-instance 字節碼。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;為什麼只升級 AGP 會導致&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;R8 功能出問題？&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;我們在數個版本之前就已經單獨升級了 R8，正好涵蓋了 ApiModel 這個變更，但是直到近期才升級了 AGP。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;可以看到從 AGP7.3-beta 版本開始，才默認打開 ApiModel 功能，這就解釋了為什麼升級 AGP 之後才出現此崩潰。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//09bde1db3ff6dd55f96188f2c6337b24.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h1_4"&gt;&lt;/span&gt; 
&lt;h1&gt;四、解決方案&lt;/h1&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;禁用 ApiModel&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;ApiModel 通過犧牲些微包體，換來啓動階段類驗證耗時，但是從他覆蓋的類範圍來看，對啓動速度的收益微乎其微，因此可以直接通過配置開關關閉整個功能。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;System.setProperty("com.android.tools.r8.disableApiModeling",&amp;nbsp;"1")&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;雖説這是個實驗中的功能，且邏輯相對獨立，但是考慮到後續還有內聯優化等操作，貿然關閉整個功能無法評估影響面，潛在的穩定性風險較高。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;官方修復&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;該問題反饋給 R8 團隊後，官方提供了臨時規避的方案，即確保高版本 API 在單獨的函數中調用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;https://issuetracker.google.com/issues/441137561&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//358c6b1b9714ab22bdff45c27378289c.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;隨後不久就提了 MR 針對 SurfaceTexture 這個類禁用了 ApiModel，並未徹底解決此問題。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;https://r8-review.googlesource.com/c/r8/+/109044&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//403f68ae953ddd19b67dc90602d69475.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;官方的修復方案比較權威，且影響面較小，但是並未徹底解決問題。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;自行修復&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;如果要修復此問題，關鍵是要將多餘的 new-instance 指令替換成一個合適的觸發類加載的指令，根據 java 官方文檔裏的介紹，只有 new 對象，訪問靜態的成員變量或者函數的指令才能安全的觸發類加載，比較理想的方案是改成訪問靜態變量，但是很多類並沒有靜態變量，比如 SurfaceTexture 就沒有。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//168eeaad61d7b9e162730708773e256d.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;因此我們可以考慮結合 getStatic 指令和掃描 finalize 的方式來解決該問題：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//baa3977f849ce680a7684f38a4d68176.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;雖説可以通過打印日誌來約束此改動的影響面，但畢竟要自行修改並編譯 R8 的 jar 包，且需要自行長期維護，整體影響面還是偏大，對穩定性要求高的 App 不建議採用該方案。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;業務改造（推薦）&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;在前文中提到的外聯函數生成處打印日誌，即可感知到工程中有哪些類受 ApiModel 影響，如果數量不多，分別讓業務改造其相關的寫法，確保傳參時是局部變量且無 try-catch/synchronized 語句塊即可。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//a7fd6ee2c6b96d340b89116b8a76d5d5.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;考慮到 App 整體的穩定性，最終我們採用了業務改造的方式繞過了此問題，並在 R8 異常代碼處添加了日誌告警來預防後續增量問題，並仿照官方 MR 中的寫法補充了類的黑名單，用於應對無法編輯的三方庫引入此問題的場景。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h1_5"&gt;&lt;/span&gt; 
&lt;h1&gt;五、總結&lt;/h1&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;在 Android 開發中，即使是 AGP、R8 這樣的官方工具鏈升級，也要保持足夠的警惕。畢竟 Android 生態太過複雜，再加上開發者們千奇百怪的代碼寫法，不論多麼完善的測試流程都無法規避這類特定場景的 bug。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;這次的 ApiModel 外聯優化問題就是一個很好的例子——它只在特定條件下才會暴露，但一旦出現就是必現的 native 崩潰。所以對於這種影響面無法評估的重大升級，還是需要經過足夠長時間的獨立灰度驗證，才能合入主幹分支。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:24px; margin-right:24px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#ffffff"&gt;&lt;span style="background-color:#5caae9"&gt;往期回顧&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#e9faff"&gt;1.&amp;nbsp;可擴展系統設計的黃金法則與 Go 語言實踐｜得物技術&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#e9faff"&gt;2.&amp;nbsp;得物新商品審核鏈路建設分享&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#e9faff"&gt;3.&amp;nbsp;營銷會場預覽直通車實踐｜得物技術&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#e9faff"&gt;4.&amp;nbsp;基於 TinyMce 富文本編輯器的客服自研知識庫的技術探索和實踐｜得物技術&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#e9faff"&gt;5.&amp;nbsp;AI 質量專項報告自動分析生成｜得物技術&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;文 / 永樂&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;關注得物技術，每週更新技術乾貨&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;要是覺得文章對你有幫助的話，歡迎評論轉發點贊～&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;未經得物技術許可嚴禁轉載，否則依法追究法律責任。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/5783135/blog/18690286</link>
      <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/18690286</guid>
      <pubDate>Tue, 02 Sep 2025 02:30:37 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>我國智能算力規模達 788 百億億次/秒</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;人民日報北京 9 月 1 日電 &amp;nbsp;（記者劉温馨、鄭洋洋）截至今年 6 月底，我國在用算力中心機架總規模達 1085 萬標準機架，智能算力規模達 788 百億億次/秒 (EFLOPS)；存力規模超過 1680 艾字節 (EB)，相比 2023 年增長約 40%；已發佈 1509 個大模型，在全球位居前列。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="334" src="https://oscimg.oschina.net/oscnet/up-f7c4902ec7cb7f48c81c629fb38170914e5.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;近日，中國算力平台完成山西、遼寧、上海、江蘇、浙江、山東、河南、青海、寧夏、新疆 10 個省份分平台接入工作，實現「平台、主體、資源、生態、場景」全面貫通。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;作為國家級綜合性算力服務平台，中國算力平台集「供、需、服」於一體，可實現不同系統、平台和工具之間的兼容性和互操作性。截至 7 月底，平台運營層註冊企業用户超 1000 家，入駐算力服務商逾 100 家，上架優質算力產品 110 餘項，接入主流基礎大模型和垂類模型 90 餘個，累計沉澱數十億條算力監測大數據。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369793</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369793</guid>
      <pubDate>Tue, 02 Sep 2025 02:23:37 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>智譜上線 Claude Code 專屬包月套餐，月費低至 20 元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;智譜&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FJKSKSrjw3aqUODEN_LzRMg" target="_blank"&gt;宣佈&lt;/a&gt;，自 9 月 1 日起推出 Claude Code 專屬「GLM Coding Plan」限時套餐，月費低至 20 元。&lt;/p&gt; 
&lt;p&gt;該套餐適用於智譜最新旗艦模型 GLM-4.5 及 GLM-4.5-Air。用户可通過掃描活動海報二維碼，或者登錄智譜開放平台&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbigmodel.cn%2Fclaude-code" target="_blank"&gt;bigmodel.cn&lt;/a&gt;，直接購買並獲取詳細使用攻略。&lt;/p&gt; 
&lt;p&gt;首期主推 Claude Code，未來將拓展到更多 Coding 工具。目前，GLM-4.5 已接入包括 Claude Code、Cline、Gemini CLI、Grok CLI、CodeGeeX、Kilo Code、Roo Code、Trae 在內的多款主流編程工具，全面支持日常開發流程。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0902/101910_Nw8D_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369792</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369792</guid>
      <pubDate>Tue, 02 Sep 2025 02:20:37 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>騰訊開源 Hunyuan-MT-7B 翻譯模型</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;騰訊&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FrKcf7jXAYlCKcwan0o756Q" target="_blank"&gt;宣佈&lt;/a&gt;開源在國際機器翻譯比賽拿下 30 個第 1 名的翻譯模型 Hunyuan-MT-7B，除了中文、英語、日語等常見語種，也包含捷克語、馬拉地語、愛沙尼亞語、冰島語等小語種。&lt;/p&gt; 
&lt;p&gt;Hunyuan-MT-7B 總參數量僅 7B，支持 33 個語種、5 種民漢語言/方言互譯，是一個能力全面的輕量級翻譯模型。&lt;/p&gt; 
&lt;p&gt;&lt;img height="293" src="https://oscimg.oschina.net/oscnet/up-dfbb59995d2db0c828e006ce4d0041931a0.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;同時開源的還有一個翻譯集成模型 Hunyuan-MT-Chimera-7B （奇美拉），是業界首個翻譯集成模型，它能夠根據原文和多個翻譯模型給出的不同內容，再生成一個更優的翻譯結果，不僅原生支持 Hunyuan-MT-7B，也支持接入 deepseek 等模型，對於一些有專業翻譯需求的用户和場景，可以提供更加準確的回覆。&lt;/p&gt; 
&lt;p&gt;公告稱，在業界常用的翻譯能力測評數據集 Flores200 上，騰訊混元 Hunyuan-MT-7B 模型也有卓越的效果表現，明顯領先於同尺寸模型，與超大尺寸模型效果對比也不遜色。&lt;/p&gt; 
&lt;p&gt;取得全面領先的成績，離不開技術上的全面突破，針對翻譯場景，騰訊混元提出了一個完整的翻譯模型訓練範式，覆蓋從預訓練、到 CPT 再到監督調參、翻譯強化和集成強化全鏈條，使得模型的翻譯效果達到業界最優。&lt;/p&gt; 
&lt;p&gt;&lt;img height="188" src="https://oscimg.oschina.net/oscnet/up-66e18aed212fea1e14be8e0b31d401ea4a1.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Hunyuan-MT-7B 的特點在於僅用少量的參數，就達到甚至超過了更大規模模型的效果，這也為模型的應用帶來了眾多優勢。&lt;/p&gt; 
&lt;p&gt;首先是計算效率，7B 模型的推理速度明顯快於大型模型，在相同硬件條件下能夠處理更多的翻譯請求，並且，基於騰訊自研的 AngelSlim 大模型壓縮工具對 Hunyuan-MT-7B 進行 FP8 量化壓縮，推理性能進一步提升 30%。&lt;/p&gt; 
&lt;p&gt;其次是部署友好性，Hunyuan-MT-7B 能夠在更多樣化的硬件環境中部署，從高端服務器到邊緣設備都能良好運行，並且模型的部署成本、運行成本和維護成本都相對更低，在保證翻譯質量的前提下，為企業和開發者提供了更具吸引力的解決方案。&lt;/p&gt; 
&lt;p&gt;目前，騰訊混元翻譯模型已經接入騰訊多個業務，包括騰訊會議、企業微信、QQ 瀏覽器、翻譯君翻譯、騰訊海外客服翻譯等，助力產品體驗提升。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369791</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369791</guid>
      <pubDate>Tue, 02 Sep 2025 02:17:37 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>DeepSeek 公開模型原理與訓練方法説明</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;DeepSeek 發佈官方説明，披露了其大語言模型的訓練原理、數據來源等信息。DeepSeek 表示其線上服務基於深度神經網絡大模型，採用「預訓練—優化訓練」兩階段流程。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0902/100812_xXNj_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在預訓練階段，模型通過大規模自監督學習獲取通用語言能力；在優化訓練階段，則使用有監督微調（SFT）或強化學習（RL）對模型進行任務適配；最終部署的模型以自迴歸方式實時生成文本，而非簡單的信息檢索。&lt;/p&gt; 
&lt;p&gt;數據來源方面，預訓練語料由互聯網公開信息和第三方合作數據組成，不主動收集個人信息。優化訓練階段的數據由研究團隊自建問答對，少量樣本可能源自用户輸入，但均經過了去標識化、加密及匿名化處理，併為用户提供了退出機制。&lt;/p&gt; 
&lt;p&gt;完整內容查看：&lt;em&gt;https://cdn.deepseek.com/policies/zh-CN/model-algorithm-disclosure.html&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369790</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369790</guid>
      <pubDate>Tue, 02 Sep 2025 02:09:37 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>openKylin 嵌入式系統發力工業領域：與松科智能 AI 視覺小車、機械臂共拓應用新場景</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="margin-left:0; margin-right:0"&gt;近日，OpenAtom openKylin（簡稱「openKylin」）2025 年度開發者大會在北京盛大啓幕，活動現場展示區展演重要進展 —— 廣東松科智能科技有限公司（簡稱「松科智能」）研發的 AI 視覺小車與機械臂，已成功完成在 openKylin 操作系統的適配調試，兩款設備均搭載飛騰派作為主控板，標誌着 openKylin 嵌入式系統在工業場景的應用落地邁出關鍵一步。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;img height="300" src="https://oscimg.oschina.net/oscnet//3f891ad63f386e3bddc9553c544d82bc.png" width="" referrerpolicy="no-referrer"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;img height="300" src="https://oscimg.oschina.net/oscnet//b53797a3dbef4b7d205ff6c745551a4e.png" width="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;活動現場，openKylin 生態委員會主任李震寧現場開展技術演示，生動展現了 openKylin 操作系統的工業應用實力。演示中，搭載 openKylin 系統的松科 AI 視覺小車表現亮眼 —— 在無人駕駛模式下沿預設路線平穩行駛，面對手勢指令能快速響應轉向、啓停等操作，遇到障礙物時更是毫秒級完成識別與規避，全程運行流暢無卡頓；松科 AI 視覺機械臂則精準完成多場景任務，不僅能通過視覺識別快速區分不同顏色色塊並分類放置，還可基於算法進行路徑規劃與簡易計算。與會嘉賓近距離觀摩體驗，切實感受到 openKylin 系統在支持智能硬件協同控制、複雜場景實時響應等方面的強大能力，對系統的穩定性與兼容性給予高度認可。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;img height="300" src="https://oscimg.oschina.net/oscnet//d7932b9ac9366c3fcdd876fb19b54c8f.jpeg" width="" referrerpolicy="no-referrer"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;img height="300" src="https://oscimg.oschina.net/oscnet//6f0009e7b70cad7dbff147eb3403964d.jpeg" width="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;此次適配測試以搭載 Phytium E2000Q 處理器的飛騰派開發板為核心硬件（配置 4GB RAM 與 32GB 存儲），通過全流程驗證確認：openKylin 操作系統可穩定支持機械臂精準控制、神經網絡高效加速及視覺識別實時響應，三大核心能力的協同達標，為後續工業級設備的規模化應用掃清了系統適配障礙，也為開源操作系統在智能製造領域的實踐提供了技術參照。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;img height="350" src="https://oscimg.oschina.net/oscnet//472a37d180cf39403ebb951658c0965b.png" width="" referrerpolicy="no-referrer"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;img height="350" src="https://oscimg.oschina.net/oscnet//0dcd44a8185cf7f842f2128c2718f224.png" width="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;openKylin 以「為世界提供與人工智能技術深度融合的開源操作系統」為願景，致力於聚合產業及開發者力量共同打造全球領先的智能桌面開源操作系統根社區。社區構建的覆蓋 「芯片 - 系統 - 應用」 的認證體系，不僅推動了開源操作系統在 RISC-V 生態、AI 融合及跨平台兼容性領域的標準化進程，也吸引了眾多社區會員單位的積極參與，共同為 openKylin 生態的繁榮發展貢獻力量。此次與松科智能的攜手合作，將進一步加速中國開源操作系統在工業與人工智能交叉領域的滲透應用，助力產業數字化轉型中的技術突破。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;在本次開發者大會上，openKylin 2.0 SP2 版本重磅發佈，誠邀所有共建夥伴與開發者點擊&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.openkylin.top%2Fdownloads%2F" target="_blank"&gt;https://www.openkylin.top/downloads/&lt;/a&gt;&amp;nbsp; 下載安裝，親身體驗系統新能力，共促開源生態成長。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369774</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369774</guid>
      <pubDate>Mon, 01 Sep 2025 01:35:00 GMT</pubDate>
      <author>來源: 資訊</author>
    </item>
    <item>
      <title>飛致雲開源社區月度動態報告（2025 年 8 月）</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;自 2023 年 6 月起，中國領先的開源軟件公司飛致雲以月度為單位發佈《飛致雲開源社區月度動態報告》，旨在向廣大社區用户同步飛致雲旗下系列開源軟件的發展情況，以及當月主要的產品新版本發佈、社區運營成果等相關信息。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;飛致雲開源運營數據概覽（2025 年 8 月）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;2025 年 8 月飛致雲開源軟件運營數據概覽（統計時間為 2025.8.1～2025.8.29）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;img alt="" height="648" src="https://oscimg.oschina.net/oscnet/up-a8b0c9bef3a9289564d711fa8af1360d845.png" width="1070" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;strong&gt;&lt;span style="color:#3370ff"&gt;2025 年 8 月產品發佈事件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ SQLBot 智能問數系統&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;2025 年 8 月 7 日，DataEase 開源項目組發佈 SQLBot 開源項目（&lt;/span&gt;&lt;em&gt;&lt;span style="color:#010101"&gt;github.com/dataease/SQLBot&lt;/span&gt;&lt;/em&gt;&lt;span style="color:#010101"&gt;）。SQLBot 是一款基於大語言模型（Large Language Model，LLM）和 RAG（Retrieval Augmented Generation，檢索增強生成）的智能問數系統。藉助 SQLBot，用户可以實現數據的即問即答，快速提煉獲取所需的數據信息及可視化圖表，並且支持進一步的智能數據分析。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-a6f1da9e1e9331e8fdb267c8384b41b0bfd.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ DataEase 開源 BI 工具&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;2025 年 8 月 19 日，人人可用的開源 BI 工具 DataEase 正式發佈 v2.10.12 LTS 版本。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;這一版本的功能變動包括：圖表方面，圖表提示框的背景顏色支持配置透明度，桑基圖提示信息中支持配置總數佔比顯示項，線面圖的縱軸軸值自動分檔時可以根據實際使用的數據自動計算最小刻度，堆疊條形圖/柱狀圖可以設置圖例排序，基礎條形圖/柱狀圖支持點擊陰影部分執行下鑽、聯動、跳轉操作；查詢組件方面，下拉組件 Tag 支持自定義背景顏色；儀錶板/數據大屏方面，圖片組支持設置刷新頻率；數據源方面，API 數據源接口參數可以調用已創建的接口參數。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;X-Pack 增強包的功能變動包括：同步管理方面，增量同步設置支持指定正負偏移量，新增支持 CTE（Common Table Expression，通用表表達式）查詢；數據填報方面，批量上傳的內容增加單條記錄的提交信息；外觀設置方面，增加是否顯示 Slogan 的配置項。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ MaxKB 開源企業級智能體平台&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;2025 年 8 月 7 日，MaxKB 開源企業級智能體平台正式發佈 v2.0.2 版本。在 MaxKB v2.0.2 版本中，社區版方面，高級編排應用新增會話變量功能，適用於用户在多次對話中進行數據暫存、邏輯判斷的場景，能夠有效增強系統的邏輯處理能力。X-Pack 增強包方面，在對話用户登錄時，MaxKB 新增企業微信、釘釘、飛書等第三方平台掃碼登錄支持；在系統資源管理中，新增支持系統管理員對系統內所有工作空間的應用、知識庫、工具、模型等資源進行統一管理。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;2025 年 8 月 21 日，MaxKB 開源企業級智能體平台正式發佈 v1.10.10 LTS 版本。這一版本在知識庫方面，針對數據量較大的複雜場景，提升了知識庫檢索性能；問答頁面方面，支持用户直接發送文件或者圖片進行提問。此外，MaxKB 開源項目組還進行了一些問題修復的工作。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ JumpServer 開源堡壘機&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;2025 年 8 月 21 日，廣受歡迎的開源堡壘機 JumpServer 發佈了 v4.10.5 LTS 版本。在這一版本中，JumpServer 的新增功能包括添加報表以支持可視化數據分析和導出、改進命令記錄和過濾功能以及支持 Proxmox 雲主機同步等，另外，JumpServer 項目組還進行了 3 項功能優化和問題修復工作。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;2025 年 8 月 28 日，JumpServer 開源堡壘機正式發佈 v3.10.19 LTS 版本。在這一版本中，Lion 組件在連接 Windows 資產時新增會話分享功能，JumpServer 新增用户與授權規則的默認過期時間設置，同時優化了授權規則、端點規則等功能，提升了運維管理的便捷性。此外，這一版本還增強了 Ansible 任務超時設置和 SSO 用户登錄的 MFA 校驗機制，進一步強化了系統的安全性與穩定性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ 1Panel 開源面板&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;2025 年 8 月，現代化、開源的 Linux 服務器運維管理面板 1Panel 持續迭代，發佈了多個新版本。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;在網站管理方面，1Panel 新增 HTTPS 防竄站功能；計劃任務方面，支持任務一鍵導入/導出，計劃任務報告頁新增日誌追蹤和下載功能，同時還新增了任務分組功能；SSH 管理方面，1Panel 增強了 SSH 密鑰管理功能，進一步提升遠程運維的安全性和易用性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;此外，1Panel 開源項目組還完成了超過 60 項功能優化與問題修復，持續提升產品的穩定性和使用體驗。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;strong&gt;&lt;span style="color:#3370ff"&gt;其他重要事件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ MaxKB 在企業環境中實現 AI 落地的具體場景盤點&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;目前，「DeepSeek+MaxKB」的組合正在被包括高等教育院校和中小學教育機構在內的用户羣體所深度使用。在教育行業，MaxKB 擁有廣泛的用户基礎，並且持續獲得認可。近期，MaxKB 新增的教育行業用户包括：浙江師範大學、上海應用技術大學、廣西外國語學院、廣東醫科大學、張家口職業技術學院機電工程學院、天津商業大學、河南醫藥健康技師學院、湖南大學非洲研究院和常州信息職業技術學院。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;高等院校主要將 MaxKB 用於在本地部署的大模型之上構建 AI 助手或智能體，使用場景包括行政辦公、校園服務、教學科研、技能培訓、就業指導等，與已有的統一身份認證體系進行對接，面向校內師生提供服務。在此基礎上，MaxKB 開始被一些院校應用在國際化辦學與合作領域。同時，MaxKB 正在被越來越多的高校及中小學教師用於教學科研，有多篇教研文章公開發表。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ 1Panel 漏洞通知&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;2025 年 8 月 1 日，1Panel 開源項目組發佈 CVE 編號為 CVE-2025-54424 的漏洞通知及修復方案。請用户儘快將 1Panel 升級至 v2.0.6 及以後的版本。1Panel V1 版本不受影響。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ 1Panel 應用商店下載趨勢及下載排名情況&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;為了方便廣大用户快捷安裝部署相關軟件應用，1Panel 特別開通應用商店，精選各類高質量的開源工具和應用軟件，為用户的應用安裝與升級操作提供便利。目前，1Panel 應用商店已經上架了超過 190 款精品軟件並且定期更新維護，基本涵蓋了大部分用户的裝機需求。&lt;strong&gt;&lt;span style="color:#ff8124"&gt;2025 年 8 月，1Panel 應用商店軟件下載量達到 229,212 次。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;img alt="" height="938" src="https://oscimg.oschina.net/oscnet/up-334a20f906cd0fceeedc245cf7870c724a5.png" width="1380" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;▲圖 1 1Panel 應用商店月下載總量統計&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;img alt="" height="1008" src="https://oscimg.oschina.net/oscnet/up-2281427408194ff8bc02b05441ac04ac373.png" width="1454" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;▲圖 2 1Panel 應用商店軟件下載排名 Top 20（2025 年 8 月）&lt;/span&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4736111/blog/18690227</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4736111/blog/18690227</guid>
      <pubDate>Sun, 31 Aug 2025 11:34:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>「世界最輕量網站」阿部寬官網將採用 HTTPS</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;以 「網頁加載速度極快」 聞名的日本演員阿部寬官方網站，近日因一則技術變更預告，意外在社交平台引發廣泛討論。&lt;/p&gt; 
&lt;p&gt;這個被網友親切稱作 「阿部寬的首頁」 的網站，設計極度簡潔復古，圖片稀少，風格宛如回溯至 1990 年代網絡初期，也正因如此，它在任何網絡環境下都能瞬間載入，還被譽為 「世界最輕量的網站」。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1856" src="https://static.oschina.net/uploads/space/2025/0901/191845_J1jw_2720166.png" width="3360" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;http://abehiroshi.la.coocan.jp/&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;不過，支撐該網站的託管商 Nifty LaCoocan 日前宣佈，為強化安全防護，將從今年 10 月 1 日起支持 https 加密連接，且預計在 2026 年 7 月後全面強制轉換。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;這意味着，未來所有訪問舊版 「http://」 網址的請求，都將自動跳轉至新的 「https://」 頁面。 &amp;nbsp;儘管 https 化能顯著提升網頁瀏覽的安全性，卻也讓網友們既熱議又惋惜。過去，不少人會利用這個仍採用 http 協議的網站，測試老舊電腦、PDA，或是 PlayStation 2、3DS 等不支持 https 的遊戲機能否正常連網。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;如今網站即將切換至 https，這個獨特的 「網絡聯機測試頁」 也將正式退出歷史舞台。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;消息傳開後，網絡上迅速湧現大量討論。有網友感慨：「沒想到阿部寬的首頁也要跟上時代浪潮了，舊設備用户要哭了」。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;與此同時，這次事件也讓許多人首次認識到這個特別的網站，有人忍不住讚歎：「居然還有純 HTML 打造的網站，速度是真的快」「這種簡約風格放在現在看，反而有種新潮感」。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369726</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369726</guid>
      <pubDate>Sun, 31 Aug 2025 11:21:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>用 deepin 的人，也是吃上好的了</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;p&gt;deepin 搞了個 AI 助手，叫 UOS AI。&lt;/p&gt; 
&lt;p&gt;應該沒有人不知道 deepin （&lt;span&gt;&lt;span&gt;深度操作系統&lt;/span&gt;&lt;/span&gt;）吧？&lt;span&gt;&lt;span&gt;它是中國第一個具備國際影響力的&lt;span&gt;&amp;nbsp;Linux&amp;nbsp;&lt;/span&gt;發行版本，支持全球&lt;span&gt;33&lt;/span&gt;種語言，在國際&lt;span&gt;&amp;nbsp;Linux&lt;/span&gt;&amp;nbsp;發行版排行榜中穩居前十。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;你是不是也跟我一樣好奇，搞操作系統的，為什麼也要來搞 AI 助手？&lt;/p&gt; 
&lt;p&gt;跟其他大部分只會聊天、寫文章，最多生成 PPT 文件相比的 AI 小助手相比，UOS AI&amp;nbsp;有什麼不一樣，是不是會有更多系統級別的能力？&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;答案就是當然有 ！這就是搞操作系統的人搞 AI 的優勢了。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;目前大部分的 AI 助手，能回答問題，寫文章、生成圖片，但它動不了我們的電腦——想整理文件、調個設置、裝個軟件，還是得自己動手，它始終活聊天框裏。&lt;/p&gt; 
&lt;p&gt;而 UOS AI，像是這個電腦系統的大管家。它長在了系統裏，擁有其他 AI 助手所沒有的權限，你動動嘴，它就能直接動手幫你操作。&lt;/p&gt; 
&lt;p&gt;比如，你想批量整理系統文件，只需打開 UOS AI 助手，跟它説「把項目資料文件夾的所有文件，命名為 UOS 項目資料，按數字順序排好」，UOS MCP 立刻識別文件，幾秒鐘就能完成批量重命名。&lt;/p&gt; 
&lt;p&gt;或者你説「把屏幕調亮點兒，再幫我連一下藍牙音箱」，它不用教、不用你動手，幾秒鐘就能直接幫你搞定。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;簡單説，最大的不一樣就是：別的 AI 是説説而已，UOS AI 可以説到做到。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;就算是複雜操作，也能完成。這都是因為 deepin 開發了系統級的 MCP 服務器，高達 120+ 項系統控制，一鍵就能完成系統設置、應用管理、文件管理、聯網搜索等。&lt;/p&gt; 
&lt;p&gt;此外，UOS AI 還支持快速接入第三方 MCP 工具或智能體，不管是想用它辦公、學習，還是娛樂都可以。&lt;/p&gt; 
&lt;p&gt;總之就是別人有的，它也有了。&lt;/p&gt; 
&lt;p&gt;比如，你想要續寫文檔，根本不需要打開文檔，對 UOS AI 説「續寫桌面上的 AI 技術報告第三章，要 3 個分論點」，它就能順着前文風格生成邏輯連貫的內容，直接保存到文檔。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;也是沒想到，用 deepin 系統的人吃得這麼好！&lt;/strong&gt;感興趣的朋友可以，前往官網下載最新版 deepin 體驗：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh" target="_blank"&gt;https://www.deepin.org/index/zh&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;另外，我們也想探究一下， UOS AI 的 AI 能力是怎麼實現的？以後還會有哪些令人期待的地方？&lt;/p&gt; 
&lt;p&gt;9 月 5 日晚，開源中國將邀請 UOS AI 產品負責人姜琬瑩，做客《技術領航》欄目直播間，跟大家分享&amp;nbsp;UOS AI 的能力及實現。&lt;br&gt; &lt;br&gt; &lt;img height="740" src="https://oscimg.oschina.net/oscnet/up-210deaf87c39f1459061b78f9bfd676f627.jpg" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;&lt;strong&gt;直播福利：&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;福袋抽獎：直播中將有 5 輪抽獎，參與就有機會獲得 OSC T 恤、馬建倉蛇年公仔（限量版）、代碼聖盃、馬克杯、冰箱貼、前沿技術書籍等。&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img alt="up-d0ddd08ceeff2b5526d3def6537a6ac649b.png" height="253" src="https://oscimg.oschina.net/oscnet/up-d0ddd08ceeff2b5526d3def6537a6ac649b.png" width="400" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;hr&gt; 
 &lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;《技術領航》是開源中國 OSCHINA 推出的一檔直播欄目，旨在為&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;開源軟件、商業產品、前沿技術、知名品牌活動等各類項目&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;提供一個展示平台，基本上每週五晚上開播&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;欄目邀請項目的創始人、核心團隊成員或資深用户作為嘉賓，通過路演式直播分享項目的亮點和經驗，有助於提高項目的知名度，吸引更多的用户和開發者關注。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果你手上也有好的項目，想要跟同行交流分享，歡迎聯繫我，欄目隨時開放～&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"&gt;&lt;img height="537" src="https://oscimg.oschina.net/oscnet/up-4dd54c1b0b817689ceefa15aa66d79cfae8.png" width="400" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;/div&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/3859945/blog/18690242</link>
      <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/18690242</guid>
      <pubDate>Sun, 31 Aug 2025 10:40:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>Firecrawl 將於 9 月 8 日開源 AI 適應性檢測工具</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;網頁抓取與數據處理解決方案提供商 Firecrawl &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2FCalebPeffer%2Fstatus%2F1962183698306179345" target="_blank"&gt;宣佈&lt;/a&gt;將於 2025 年 9 月 8 日開源其 AI 適應性檢測工具。&lt;/p&gt; 
&lt;p&gt;主要功能&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;符合 LLMs.txt 規範&lt;/li&gt; 
 &lt;li&gt;AI 可讀的內容質量&lt;/li&gt; 
 &lt;li&gt;合理的站點地圖結構&lt;/li&gt; 
 &lt;li&gt;以及 10 多項其他檢查&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0901/183141_3H9U_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據介紹，該工具通過 12 項技術指標診斷網站的 AI 搜索生態適配度，涵蓋 LLMs.txt 規範、站點地圖完整性和移動端響應效率等維度。&lt;/p&gt; 
&lt;p&gt;Firecrawl 專注於 AI 時代網站基礎設施優化，其工具可識別索引失效問題並生成 SEO 優化建議，支持 React 和 Django 等開發框架。行業認為其開源策略將降低企業應對 AI 搜索變革的技術門檻，解決傳統 CMS 語義化支持不足等痛點。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369714</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369714</guid>
      <pubDate>Sun, 31 Aug 2025 10:32:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>宇樹科技推出數字孿生機器人運動控制技術</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;杭州宇樹科技股份有限公司申請的專利 「一種基於數字孿生的機器人運動控制方法和電子設備」 於近日正式公佈。這項新技術旨在通過數字孿生技術提升機器人在舞台表演中的靈活性和適應性，進而實現複雜而精彩的舞蹈表演。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="331" src="https://oscimg.oschina.net/oscnet/up-185be11f97770d6539d0801b40b9ac9b5b0.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;這項發明的核心在於構建了多個功能模塊，包括環境採集模塊、地圖處理模塊、數字舞台孿生模塊、舞蹈動作設計模塊、軌跡規劃模塊以及舞蹈合成模塊。這些模塊通過數據交互和功能協同，有效提升了機器人的舞蹈設計和執行能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;首先，環境採集模塊能夠實時收集舞台環境的信息，確保機器人及時瞭解周圍的變化。接着，地圖處理模塊則將這些信息進行處理和分析，為機器人的運動提供精確的背景數據。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;數字舞台孿生模塊是這項技術的關鍵，它能夠創建舞台的數字化模型，幫助機器人更好地理解和適應環境。舞蹈動作設計模塊則讓藝術家能夠設計出更為複雜和富有表現力的舞蹈動作，而軌跡規劃模塊則負責將這些動作與實時環境相結合，確保機器人的舞蹈表演與舞台環境的完美匹配。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;通過舞蹈合成模塊，所有的舞蹈動作得以整合，形成一套完整且流暢的表演。這種高效、可擴展的舞蹈設計方案，不僅確保機器人在表演時能夠精準感知和適應環境的變化，還避免了機器人動作與環境脱節的問題。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369713</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369713</guid>
      <pubDate>Sun, 31 Aug 2025 10:32:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>微軟 Copilot Labs 上線「音頻表達式」功能</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微軟在 Copilot Labs 上線了名為「音頻表達式（Audio Expression）」的實驗性功能，用户可輸入提示並讓 AI 以不同語音風格朗讀文本，該功能僅限文本轉語音。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1856" src="https://static.oschina.net/uploads/space/2025/0901/180307_ik24_2720166.png" width="3360" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;https://copilot.microsoft.com/labs/audio-expression&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;據介紹，Copilot Audio Expressions 的功能是讓輸出的音頻更接近真人，並可根據需求加入創意潤色。用户無需註冊即可直接體驗，並可下載 MP3 格式音頻，方便在任何設備播放。&lt;/p&gt; 
&lt;p&gt;該工具目前提供 Emotive（情感表達）和 Story（故事創作）兩種模式。&lt;/p&gt; 
&lt;p&gt;在 Emotive 模式下，生成的音頻不僅朗讀了文字，還自動增添細節、調整措辭，讓表達更生動。單段音頻最長 59 秒，支持十餘種聲音與風格組合。在 Story 模式下，系統自動選擇音色和風格，用户僅需提供主題提示。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369702</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369702</guid>
      <pubDate>Sun, 31 Aug 2025 10:07:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>WhisperLiveKit - 實時、完全本地語音轉文</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                        
                                                                                    &lt;p&gt;實時、完全本地語音轉文本，支持説話人識別。實時語音轉錄直接發送到你的瀏覽器，帶有可立即使用的後端+服務器和簡單的前端。&lt;/p&gt;

&lt;p&gt;&lt;img height="272" src="https://static.oschina.net/uploads/space/2025/0828/135735_EKWx_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;架構&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img height="175" src="https://static.oschina.net/uploads/space/2025/0828/135747_DGD3_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

&lt;p style="text-align:start"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;後端支持多個併發用户。語音活動檢測功能可在未檢測到語音時減少開銷。&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;安裝和快速啓動&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;/div&gt;

&lt;div style="text-align:start"&gt;
&lt;pre&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#f6f8fa"&gt;&lt;span style="color:#1f2328"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;&lt;span style="background-color:#f6f8fa"&gt;&lt;span&gt;&lt;span&gt;pip install whisperlivekit&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;需要 FFmpeg&lt;/strong&gt;，必須在使用 WhisperLiveKit 之前安裝&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#59636e; display:block; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Segoe UI&amp;quot;,&amp;quot;Noto Sans&amp;quot;,Helvetica,Arial,sans-serif,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;; font-size:16px; font-style:normal; font-variant:tabular-nums; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; max-width:100%; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:max-content; word-spacing:0px"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="border-color:#d1d9e0"&gt;OS&lt;/th&gt;
&lt;th style="border-color:#d1d9e0"&gt;How to install&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="border-color:#d1d9e0; border-image:none 100% / 1 / 0 stretch; border-style:solid; border-width:0.666667px"&gt;Ubuntu/Debian&lt;/td&gt;
&lt;td style="border-color:#d1d9e0; border-image:none 100% / 1 / 0 stretch; border-style:solid; border-width:0.666667px"&gt;&lt;code&gt;sudo apt install ffmpeg&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="border-color:#d1d9e0; border-image:none 100% / 1 / 0 stretch; border-style:solid; border-width:0.666667px"&gt;MacOS&lt;/td&gt;
&lt;td style="border-color:#d1d9e0; border-image:none 100% / 1 / 0 stretch; border-style:solid; border-width:0.666667px"&gt;&lt;code&gt;brew install ffmpeg&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="border-color:#d1d9e0; border-image:none 100% / 1 / 0 stretch; border-style:solid; border-width:0.666667px"&gt;Windows&lt;/td&gt;
&lt;td style="border-color:#d1d9e0; border-image:none 100% / 1 / 0 stretch; border-style:solid; border-width:0.666667px"&gt;Download .exe from&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://ffmpeg.org/download.html"&gt;https://ffmpeg.org/download.html&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;and add to PATH&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/whisperlivekit</link>
      <guid isPermaLink="false">https://www.oschina.net/p/whisperlivekit</guid>
      <pubDate>Sun, 31 Aug 2025 09:55:00 GMT</pubDate>
    </item>
    <item>
      <title>GP Batteries 攜手 GPTBots 打造全球智能客服網絡</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:center"&gt;GP Batteries 攜手 GPTBots 打造全球智能客服網絡&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;在數字化轉型浪潮中，傳統製造企業如何突破邊界，構建更智能、高效的客户服務體系？全球領先的電池製造商 GP Batteries（超霸電池）與企業級無代碼 AI 智能體平台 GPTBots.ai 的合作，給出了行業範例。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img src="https://oscimg.oschina.net/oscnet//bb7db9d869ac1e17b95804901a3b155c.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;電池專家的「客服難題」：複雜產品 + 多語言市場&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;總部位於香港的 GP Batteries，成立於上世紀六十年代，業務遍佈全球 50 多個國家和地區。公司旗下產品包括 AA、AAA、CR2032、CR2025、充電電池、特種電池等數十種型號，廣泛應用於家用電器、工具、電子產品等領域。然而，正是由於產品線的複雜與全球化佈局，也給客户服務帶來了前所未有的挑戰：&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;消費者難以分辨電池型號及適用場景；&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;客服需記憶龐雜知識，重複解答佔用大量時間；效率難以提升；&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;跨語言、跨地區的服務響應緩慢，影響客户滿意度。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;「即使是我們的員工，有時候也記不清各種型號的區別，更別説消費者了。」GP Batteries 市場負責人坦言。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;攜手 GPTBots：打造「電池顧問」+「全球客服大使」&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;GPTBots 提供的解決方案融合了企業知識庫、AI 問答、自然語言處理與多通道接入等能力。通過拖拽式配置，GP Batteries 團隊無需代碼開發，即可構建具備電池型號推薦、常見問題解答、位置引導等功能的智能客服系統。目前系統已具備以下核心能力：&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;即時推薦最優電池型號&lt;/strong&gt;：過訓練企業知識，消費者可直接提問如「Makita 工具用哪種電池？」系統即時給出推薦型號及應用場景説明；&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;覆蓋多個國家語言&lt;/strong&gt;：系統支持泰語、馬來語、繁體中文等語種，原本需多團隊翻譯的流程可「一鍵完成」；&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;結合位置數據推薦購買渠道&lt;/strong&gt;：結合用户地理位置與渠道數據，推薦最近的線上/線下購買地點，打通「問-選-買」的服務閉環；&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;多渠道部署&lt;/strong&gt;：系統已在官網、社交媒體平台（如 Instagram、Facebook）、線下信息終端同步上線，實現消費者隨時隨地觸達。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img src="https://oscimg.oschina.net/oscnet//7be1a1e9c973d1951b26feb6a4285d76.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;圖片來源：https://nl.gpbatteries.com/en&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;在荷蘭上線不到兩個月，該系統就已覆蓋超千個銷售渠道相關用户諮詢，客服工作量減少一半以上。聊天機器人成為首層客服接口，人工客服只處理複雜個案，整體效率大幅提升。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;運營成本下降超 50%，服務體驗大升級&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;GPTBots 上線後，GP Batteries 客服自動應答率超 50%，運營成本降低 50% 以上，服務時間延展至 7×24 小時，客户滿意度和響應速度顯著提升。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;「我們不是 AI 專家，但 GPTBots 提供的可視化平台非常友好，支持團隊幾乎 24 小時在線協助，讓我們的構想快速落地成產品。」項目負責人表示，「從 IT、市場、到高管層，GPTBots 的專業支持讓我們團隊內部的溝通、共識和推進效率都提升了。」&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;AI 賦能全鏈條，製造業數字化轉型新範式&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;GPTBots 的應用不止於客户服務。GP Batteries 正在與 GPTBots 團隊合作，將 AI 能力拓展至企業運營的多個關鍵環節：&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;銷售預測與供應鏈優化：&lt;/strong&gt;通過 AI 分析歷史數據和市場趨勢，提升全球銷售預測的準確性，優化供應鏈管理，提升工廠產能利用率。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;新員工多語種培訓系統：&lt;/strong&gt;基於 AI 多語種問答能力，為來自不同國家的員工統一推送標準化培訓內容，極大降低溝通與培訓成本。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;內部流程自動化：&lt;/strong&gt;AI 智能體參與訂單處理、渠道管理、庫存調度等流程，實現業務流轉自動化，提升整體運營效率。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;GP Batteries 市場負責人表示：「AI 的多語種能力讓我們的全球團隊培訓和服務實現了統一標準，溝通成本大幅下降。」&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;GPTBots.ai 創始人兼首席執行官羅偉東表示：「我們不僅是工具，更是企業 AI 落地的長期夥伴。很榮幸與 GP Batteries 攜手，共同推動製造業服務智能化、運營數智化。」&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;結語&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;從客服自動化到企業全鏈條智能化，GP Batteries 與 GPTBots 的合作，展現了製造企業數字化轉型的全新範式。GPTBots 也將持續以企業級無代碼 AI 解決方案，助力更多企業低門檻、高效率邁向智能化未來。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369692</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369692</guid>
      <pubDate>Sun, 31 Aug 2025 09:41:00 GMT</pubDate>
      <author>作者: 開源科技</author>
    </item>
    <item>
      <title>極光月狐數據參展 2025 人民數據大會，以數據智能驅動決策新未來</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;極光月狐數據參展&lt;/strong&gt;&lt;strong&gt;2025&lt;/strong&gt;&lt;strong&gt;人民數據大會，以數據智能驅動決策新未來&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;近日，以"生態互聯，價值共創"為主題的 2025 人民數據大會在深圳圓滿落幕。本次大會由人民網·人民數據主辦，旨在打造數據要素領域的前沿觀察站、市場風向標和合作新樞紐。中國領先的全場景數據洞察與分析服務專家，極光月狐數據攜旗下全線產品重磅參展，其產品副總經理劉洋航在 「生態路演」 專場發表《從 AI 生態到投資組合，數據智能時代的決策引擎》主題演講成為大會亮點。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;聚焦數據智能，驅動商業決策&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;在大會主題演講中，極光月狐數據產品副總經理劉洋航深入分享了數據智能時代的前沿洞察。他指出，隨着人工智能技術的快速發展，AI Agent 正成為 AI 行業的核心賽道，預計到 2030 年，全球 AI Agent 市場規模達到 471 億美元。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img src="https://oscimg.oschina.net/oscnet//e68967198d81bf85c924e944750c2b2b.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;"我們正處在一個數據智能驅動決策的新時代。"劉洋航表示，"極光月狐數據通過整合線上平台用户活躍度、線下門店客流、工廠產能及社交媒體輿情等多維動態數據，構建了量化金融數據的監測體系，能夠提前 1-1.5 月預測企業營收趨勢，為投資決策提供有力支持。"&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;四大產品體系全面亮相，展現數據實力&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;展會期間，極光月狐數據全面展示了其四大標準產品體系：&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;移動應用數據（&lt;/strong&gt;&lt;strong&gt;iAPP&lt;/strong&gt;&lt;strong&gt;）：&lt;/strong&gt;提供移動應用、小程序和手機品牌市場的覆蓋與分析，幫助客户進行產品競爭分析與商業投資決策。該產品覆蓋 100 萬+APP，監測 14.6 億+月獨立活躍設備，累計 SDK 安裝量達 625 億+。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;營銷洞察數據（&lt;/strong&gt;&lt;strong&gt;iMarketing&lt;/strong&gt;&lt;strong&gt;）：&lt;/strong&gt;專注於多維度人羣洞察，解決市場數據混亂、目標客户畫像模糊等痛點，助力企業精準刻畫消費者全貌、實現精準營銷。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;品牌洞察數據（&lt;/strong&gt;&lt;strong&gt;iBrand&lt;/strong&gt;&lt;strong&gt;）：&lt;/strong&gt;助力企業洞察品牌表現，打造品牌生態，包括目標客羣分析、用户標籤制定、人羣洞察等。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;金融另類數據：&lt;/strong&gt;為金融、證券投資客户提供市場研究、行業分析，幫助投資者瞭解行業發展現狀及趨勢，抓住投資風口。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img src="https://oscimg.oschina.net/oscnet//7ecacccf169e6a3f26dc33793b2fa241.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;獨特優勢引領行業創新&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;極光月狐數據通過融合線上流量數據與線下行為偏好，公司能夠多角度分析目標用户，為客户提供更加全面和精準的數據服務。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;此次展會中，極光月狐數據的展位（B09）吸引了大量參會者駐足交流，不少與會者對其數據產品表現出濃厚興趣，並進行了深入的業務洽談。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;賦能數據生態，共創行業未來&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;本次人民數據大會打造了"數據+場景+交易"三位一體對接平台，極光月狐數據通過這一平台與眾多政府機構和企業進行了多維度溝通，推動了政企項目的精準對接和合作交易的高效落地。&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:left"&gt;未來，極光月狐數據將繼續秉承"讓每一次數據握手，都成為價值流動的起點"的大會理念，持續深化數據智能技術研發，為繁榮數據產業生態賦能增勢，助力各地各領域高質量發展。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369691</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369691</guid>
      <pubDate>Sun, 31 Aug 2025 09:41:00 GMT</pubDate>
      <author>作者: 開源科技</author>
    </item>
    <item>
      <title>具身智能高質量合成數據集開源發佈</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;國家數據局發文&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FSi6YQUzRwOgNjN29YaOQqg" target="_blank"&gt;宣佈&lt;/a&gt;，具身智能靈巧手多樣抓取仿真數據集（DexonomySim）已開源發佈。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;具身智能靈巧手多樣抓取仿真數據集（DexonomySim）是在國家數據局數字科技和基礎設施建設司指導下，由銀河通用介紹發佈。DexonomySim 專為具身智能機器人靈巧抓取任務設計，包含超過 950 萬條高質量抓取姿態，覆蓋超 1 萬個物體與 31 種常用抓握類型，涵蓋人類抓握分類法中約 94% 的類型，是當前具身智能領域開源的最大規模靈巧手操作高質量合成數據集。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;該數據集適用於多指靈巧手在高自由度操作場景下的模型訓練與算法驗證，其生成方式基於高效優化的物理仿真，具有數據格式規範統一、真實可溯、內容優質、模型適配性高等優勢，且多樣性與規模均遠超已有數據集，有效滿足模型泛化需求，助力人形機器人實現對外形不規則或需精細操作物體的穩定、多樣化抓取，提升複雜環境下的操作適應性與任務成功率。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="191" src="https://oscimg.oschina.net/oscnet/up-087f340a737ec99d0fd59df16c8f689f257.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;具身智能高質量合成數據集的開源，將為全球研究者和產業開發者提供關鍵的基礎設施和生產要素支撐，加速推動人形機器人在商超零售、工業分揀、家庭服務、醫療康養等多元場景落地應用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此次成果的開源，體現出行業企業在高質量數據集建設上的積極探索，也為推動數據要素價值釋放提供了鮮活實踐。下一步，國家數據局將持續推進高質量數據集建設，推動人工智能與具身智能等前沿領域加速發展，助力新質生產力培育與應用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;具身智能靈巧手多樣抓取仿真數據集開源鏈接可查看&lt;/span&gt;&lt;span style="color:rgba(0, 0, 0, 0.9)"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdisk.pku.edu.cn%2Fanyshare%2Fzh-cn%2Flink%2FAA126F20CCF8EC44DC819FFB494FFD96AD%3F_tb%3Dnone%26expires_at%3D2045-08-30T23%253A56%253A30%252B08%253A00%26item_type%3Dfolder%26password_required%3Dfalse%26title%3D%25E5%2585%25B7%25E8%25BA%25AB%25E6%2599%25BA%25E8%2583%25BD%25E7%2581%25B5%25E5%25B7%25A7%25E6%2589%258B%25E5%25A4%259A%25E6%25A0%25B7%25E6%258A%2593%25E5%258F%2596%25E4%25BB%25BF%25E7%259C%259F%25E6%2595%25B0%25E6%258D%25AE%25E9%259B%2586%25EF%25BC%2588DexonomySim%25EF%25BC%2589%26type%3Danonymous%26verify_mobile%3Dfalse" target="_blank"&gt;此處&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#000000"&gt;。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369688</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369688</guid>
      <pubDate>Sun, 31 Aug 2025 09:28:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>微軟發佈開源數學推理模型 rStar2-Agent</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微軟近日發佈了名為「rStar2-Agent」的開源模型，這是一個 14B 參數的數學推理模型，通過智能而非冗長的思考，實現了與 671B DeepSeek-R1 相當的性能&lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;該模型通過自主規劃、推理和使用代碼工具來高效地探索、驗證和反思複雜問題的解決方案。其能力依賴於三大創新：GRPO-RoC 算法、可擴展的高效 RL 基礎設施，以及從非推理 SFT 開始的 Agent 訓練方案。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-9b6d7c27cd2a66813c3797df2919819a9cc.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;rStar2-Agent 的核心在於實現更智能的思考而非單純延長推理時間，通過純粹的智能體強化學習，其性能可媲美 6710 億參數的 DeepSeek-R1 模型。&lt;/p&gt; 
&lt;p&gt;該模型能自主規劃、推理並運用編碼工具，高效完成探索、驗證與反思以解決更復雜問題。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GRPO-RoC 算法——採用創新的「正確時重採樣」推演策略，優化編碼工具使用，通過選擇性保留高質量成功軌跡（同時完整保存失敗案例）實現更短更智能的推理；&lt;/li&gt; 
 &lt;li&gt;可擴展高效的 RL 基礎設施，支持高吞吐量工具調用執行，同時降低智能體 RL 推演的高成本，使有限 GPU 資源（64 塊 MI300X GPU）也能實現高效訓練；&lt;/li&gt; 
 &lt;li&gt;Agent 訓練方案：從非推理式 SFT 起步，通過多階段 RL 逐步推進，各階段採用精簡的最大響應長度並逐步提升數據集難度。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;為此，rStar2-Agent 僅用一週時間通過 510 步 RL 訓練，將預訓練的 140 億參數模型提升至頂尖水平，在 AIME24 和 AIME25 數據集上分別實現 80.6% 和 69.8% 的平均通過率，以更短響應超越 DeepSeek-R1（6710 億參數）。除數學領域外，rStar2-Agent-14B 在對齊、科學推理及智能體工具使用任務中也展現出強大的泛化能力。&lt;/p&gt; 
&lt;p&gt;開源地址：&lt;em&gt;https://github.com/microsoft/rStar&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369674</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369674</guid>
      <pubDate>Sun, 31 Aug 2025 08:48:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>騰訊開源混元翻譯模型 Hunyuan-MT</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;騰訊混元團隊正式開源了面向翻譯場景的 Hunyuan-MT 系列模型。該系列目前包含兩個版本：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Hunyuan-MT-7B&lt;/strong&gt;：單模型版本，支持 33 種語言之間的雙向翻譯，覆蓋中、英、日、法等主流語種以及藏、維、蒙、哈、朝 5 種中國少數民族語言；在 WMT25 競賽的 31 個語言方向上取得領先成績 。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hunyuan-MT-Chimera-7B&lt;/strong&gt;：集成模型，通過融合多路翻譯結果進一步提升譯文質量 。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Hunyuan-MT-7B 在同等規模下達到了業界領先的翻譯性能，而 Hunyuan-MT-Chimera-7B 通過集成多路翻譯輸出進一步提升了質量。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;核心特性與優勢&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;WMT25 參賽 31 語種之中 30 語種獲得第一名的成績。&lt;/li&gt; 
 &lt;li&gt;Hunyuan-MT-7B 同尺寸業界效果最優&lt;/li&gt; 
 &lt;li&gt;Hunyuan-MT-Chimera-7B 是業界首個開源翻譯集成模型，可以將翻譯效果再拉高一個檔次&lt;/li&gt; 
 &lt;li&gt;提出了一個完整的翻譯模型訓練範式，從 Pretrain-&amp;gt;CPT-&amp;gt;SFT-&amp;gt; 翻譯強化 -&amp;gt; 集成強化，翻譯效果達到同尺寸 SOTA。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;效果&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-5bd2919794ff20550f3ce6d3102fb6d0fae.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;開源地址：&lt;em&gt;https://github.com/Tencent-Hunyuan/Hunyuan-MT&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369672</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369672</guid>
      <pubDate>Sun, 31 Aug 2025 08:29:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>AI 網關代理 RAG 檢索：Dify 輕鬆對接外部知識庫的新實踐</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;p&gt;作者：趙源筱、王灝廷&lt;/p&gt; 
&lt;p&gt;Dify 是一款開源的 AI 應用開發平台，旨在幫助開發者和非技術人員快速構建和運營基於生成式 AI 的應用。截至目前，Dify 開源 Star 數量已經突破 11 萬，具有龐大的用户羣體，已成為構建生成式 AI 應用的熱門選擇之一。&lt;/p&gt; 
&lt;p&gt;然而，隨着 Dify 在實際生產實踐中持續落地，根據雲上客户以及社區反饋，其內置的 RAG 引擎逐漸暴露出複雜文本分塊處理能力低、檢索功能薄弱、配置不夠簡潔智能等問題，這些問題直接導致 Dify 內置 RAG 的召回質量不理想，進而影響了大模型生成內容的準確性與可靠性，難以滿足企業級生產環境對高精度知識檢索的需求。&lt;/p&gt; 
&lt;p&gt;為解決上述雲上客户以及社區用户反饋的問題，Higress AI 網關通過提供關鍵橋樑作用，支持 Dify 應用便捷對接業界成熟的 RAG 引擎。通過 AI 網關將 Dify 的高效編排能力與專業 RAG 引擎的檢索效能結合，企業可在保留現有 Dify 應用資產的同時，有效規避其內置 RAG 的侷限，顯著提升知識驅動型 AI 應用的生產環境表現。&lt;/p&gt; 
&lt;h2&gt;Dify 內置 RAG 引擎的侷限&lt;/h2&gt; 
&lt;p&gt;通過分析 Dify 開源社區近幾個月的 Issue，同時結合雲上客户以及內部的 Dify 生產實踐，儘管目前 Dify 提供了開箱即用的內置 RAG 引擎，但在實際落地中，依然會遇到一些問題，其中被雲上以及社區客户反饋比較多的問題包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;複雜文檔處理能力不足：對含圖片、圖表、PDF 等非結構化文檔的解析與分塊能力較弱，信息提取精度有限。&lt;/li&gt; 
 &lt;li&gt;檢索功能薄弱：內置檢索策略在複雜查詢或大型知識庫場景下，召回效果和相關性排序表現欠佳，導致關鍵信息遺漏或排序不當。&lt;/li&gt; 
 &lt;li&gt;配置不夠簡潔智能：分塊策略、參數調整等配置項繁多，缺乏自適應優化，用户需較高技術門檻才能調優，易用性不足。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;這些問題導致 Dify 內置 RAG 引擎和業界被廣泛認可的高質量 RAG 引擎相比，仍存在一定的提升空間。從開源視角來看，Dify 內置 RAG 能力的提升，是一項需要持續迭代和優化的過程。&lt;/p&gt; 
&lt;h2&gt;通過 AI 網關幫助 Dify 應用"開掛"&lt;/h2&gt; 
&lt;p&gt;目前，市面上的 RAG 引擎層出不窮，但易用性和運行效果上也良莠不齊，想要構建一套優秀的 RAG 引擎，並不僅僅是向量化、向量存儲與向量匹配那麼簡單，還需要優質的內容理解與處理算法以及檢索優化策略，並且持續不斷的調優。&lt;/p&gt; 
&lt;p&gt;好在市面上已經逐漸湧現了許多優秀的 RAG 引擎，逐漸得到越來越多的開發者認可。例如阿里雲百鍊知識庫以其配置簡潔、開箱即用的特性，加之以底層持續調優，其 RAG 效果也得到越來越多企業用户的認可；以深度文檔理解能力著稱的 RagFlow，作為一款開源的專業 RAG 引擎，得到許多對數據存儲有安全和隱私性要求用户的青睞，目前能夠通過阿里雲 SAE 一鍵部署高可用的 RagFlow 實例，極大降低自部署和運維的成本。&lt;/p&gt; 
&lt;p&gt;因此，快速打通更專業更優質的 RAG 引擎，現階段也不失為一個更優解。&lt;/p&gt; 
&lt;p&gt;為了突破 Dify 內置知識庫的限制，Higress AI 網關支持 Dify 應用快速對接外部優質 RAG 引擎，以更高質量的 RAG 能力替代其原生功能，從而實現讓用户在使用 Dify 強大的 Workflow、Agent 編排能力同時，獲得更專業的文本處理與信息檢索體驗。&lt;/p&gt; 
&lt;p&gt;根據用户對檢索結果處理方式的不同需求，Higress AI 網關提供了兩種靈活的集成方案：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;方案一&lt;/strong&gt;：RAG 檢索代理。Higress AI 網關僅做檢索並返回給用户，由用户自主處理檢索結果，並更新到 Context 中。適用於場景相對複雜，用户對信息整合有自定義訴求的場景。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;方案二&lt;/strong&gt;：自動檢索注入。在調用 LLM 的鏈路中，Higress AI 網關自動執行 RAG 檢索結果並將接入注入到 Context 中。適用於場景相對簡單，用户只關注 LLM 調用結果，無信息自主處理的場景。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;方案一：RAG 檢索代理&lt;/h3&gt; 
&lt;p&gt;基於 Dify 外部知識庫擴展功能，通過 Higress AI 網關代理，能夠實現在 Dify 知識庫中創建並連接 RagFlow 以及百鍊知識庫。對於 Workflow，可以使用知識檢索節點選擇對應外部知識庫獲取檢索結果；對於 Agent，可以直接選擇對應外部知識庫實現檢索。詳細介紹請見 AI RAG 檢索代理 &lt;strong&gt;[&lt;/strong&gt; &lt;strong&gt;1]&lt;/strong&gt; 。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-50022f9250479a4f65adce4098314a7590e.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;這種方式專門針對 Dify 應用設計，更符合 Dify 的標準用法，通過 Dify 知識庫擴展的能力實現了對外部知識庫的訪問，同時能夠便捷的通過 Dify 內置的觀測能力觀察知識檢索節點的輸入輸出信息。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-029a85347f2c8716ec6d005e559f008df57.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;方案二：自動檢索注入&lt;/h3&gt; 
&lt;p&gt;Dify 應用訪問 LLM 時，使用 Higress AI 網關的 Model API 代理，Higress AI 網關在發起 LLM 調用前，自動執行 RAG 檢索並把結果寫入到調用模型的 Context 中。其中，Context 的寫入方式包括：追加新的系統提示詞；添加到用户指定的 Prompt 模版位置中。詳細介紹請見 AI 檢索增強生成（加強版） &lt;strong&gt;[&lt;/strong&gt; &lt;strong&gt;2]&lt;/strong&gt; 。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-37317d346525f1308d6134a70522562da3c.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;這種方式能夠實現對應用開發者透明，無需手動實現複雜的知識庫檢索步驟，只需直接調用模型即可自動獲得開箱即用的 RAG 能力。此外，該方式同樣適用於 Spring AI Alibaba、N8N 等不同平台或框架。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-f5fcf65535c2b10d24ede8cf7f01f19f366.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;實操指南與效果展示&lt;/h2&gt; 
&lt;p&gt;接下來，本文將分別以使用 RAG 檢索代理方案打通 Dify 與百鍊知識庫、使用自動檢索注入方案打通 Dify 與 RagFlow 為例，詳細介紹上述兩種方案的操作方式，並展示實際效果。&lt;/p&gt; 
&lt;h3&gt;實踐案例一：Dify 知識檢索節點訪問百鍊知識庫&lt;/h3&gt; 
&lt;p&gt;本節將以 Dify 應用打通已經存在的百鍊知識庫為例，介紹 RAG 檢索代理方案的操作方式與實際效果。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;AI 網關創建百鍊服務、自定義 Agent API 路由，作為 Dify 外部知識庫 API。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;a. AI 網關創建百鍊檢索服務。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-148c0d00f39b5199dbbe46389c47176625c.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;b. 創建自定義 Agent API。點擊 Agent API-創建 Agent API，域名和 Base Path 可按需自定義，協議選擇自定義，如下圖所示。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-9ac33d5851e7f877d84b253346380a98137.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;c. 創建 Agent API 路由。進入已經創建的 Agent API，點擊創建路由，注意需要確保路徑後綴為/retrieval，服務選擇前述步驟創建的百鍊服務。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-bbba2ddbeb01cd5832aabdb6901806eeade.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;AI 網關配置插件。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;a. 獲取百鍊 API KEY。登錄阿里雲百鍊平台 API Key &lt;strong&gt;[&lt;/strong&gt; &lt;strong&gt;3]&lt;/strong&gt; 並獲取 API Key。&lt;/p&gt; 
&lt;p&gt;b. 配置插件。在網關實例控制枱，點擊插件-安裝插件-AI，選擇 &lt;strong&gt;AI RAG 檢索代理&lt;/strong&gt;插件，點擊安裝並配置規則，設置啓用並點擊保存後，插件即可生效，如下圖所示。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-4a71365d273d7a1b2712ce0c66cf6e6469c.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Dify 創建百鍊知識庫。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;a. Dify 知識庫創建外部 API。在 Dify 控制枱，點擊知識庫-外部知識庫 API-添加外部知識庫 API，配置示例如下圖所示。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-0e30fc4c4aed2179bbbe9e15426f8734feb.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;b. 獲取知識庫 ID。前往百鍊知識庫控制枱，選擇待檢索的知識庫並獲取 ID，如下圖所示。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-979d1e29b06fadfeae2c16c4b78e7061058.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;c. 配置知識庫信息。在 Dify 控制枱，點擊知識庫-連接外部知識庫，配置示例如下圖所示。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-68e17e5fed0881b2794e4a7fd4958ee09a4.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;驗證檢索連通性。在 Dify 知識庫頁面點擊上述步驟創建的知識庫，在召回測試輸入源文本進行驗證，能夠根據召回設置返回文本分塊，即説明實現連通。接下來就可以在 Workflow 和 Agent 中通過訪問已創建好的知識庫進行百鍊 RAG 檢索。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-df8b970e03130d997af9f92ecc9ca27d8db.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-c245fbe79de6ea728d6f3e612e6a256640b.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;實踐案例二：模型調用前自動檢索 RagFlow&lt;/h3&gt; 
&lt;p&gt;接下來，本節以 Dify 應用打通已經存在的 RagFlow 知識庫為例，介紹自動檢索注入方案的操作方式與實際效果。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;部署 RagFlow 、創建知識庫並上傳知識。對於企業級場景，推薦使用阿里雲 SAE 一鍵部署高可用版本 RagFlow 服務，降低部署和運維成本，詳情請見 RAGFlow 社區版-Serverless 部署 &lt;strong&gt;[&lt;/strong&gt; &lt;strong&gt;4]&lt;/strong&gt; 。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在 AI 網關創建 AI 服務和文本生成場景 Model API，讓 Dify 應用通過調用該 API 訪問模型。使用 AI 網關代理 Dify 模型流量操作方式可參考&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzUzNzYxNjAzMg%3D%3D%26mid%3D2247576813%26idx%3D1%26sn%3Dc515eb8c39eb3133e9b44a0d7ad17610%26scene%3D21%23wechat_redirect" target="_blank"&gt;Dify 性能瓶頸？Higress AI 網關為它注入「高可用之魂」！&lt;/a&gt;。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;AI 網關插件配置。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;a. AI 網關創建 RagFlow 服務，同時獲取 RagFlow 服務的 FQDN 和 Port。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-5d60d80f89f735da7cd3fefbd597bd60c57.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;b. 獲取 RagFlow API Key。進入 RAGFlow 控制枱，點擊右上角用户頭像 -&amp;gt; 左側選擇 API -&amp;gt; API KEY，獲取 API Key。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-e3eeaa4a2170349a024e49c3fc7f7fada21.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;c. 獲取 RagFlow 知識庫 ID。在 RAGFlow 知識庫頁面，點擊對應知識庫，網頁 url 中的 id 即為知識庫 ID。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-03c3db5ccb6253879a352c39e8ce0210888.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;d. 配置網關插件。在網關實例控制枱，點擊插件-安裝插件-AI，選擇 &lt;strong&gt;AI 檢索增強生成（&lt;strong&gt;加強版&lt;/strong&gt;）&lt;/strong&gt; 插件，點擊安裝並配置規則，配置到對應的生效範圍，將前述步驟獲取的參數添入到指定參數位置，配置示意如下圖所示。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-33412f7f370eb15f0f7377949cdf26f703a.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;調試並驗證效果。在 AI 網關實例控制枱，點擊插件作用生效的 Model API 並調試，驗證添加自動檢索能力之後的模型返回結果。驗證無誤後，在 Dify 中通過訪問該 API 進行模型訪問，即可具備打通 RagFlow 知識庫的 RAG 能力。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-2cd4c8b2cd0eea653b1f45d4cd259cd2078.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;總結與展望&lt;/h2&gt; 
&lt;p&gt;由於 Dify 內置 RAG 引擎在生產實踐中的效果侷限，許多 Dify 應用開發者期望能便捷的為 Dify 系統打通更多外部知識庫，豐富 RAG 系統的選型。Higress AI 網關提供了快速打通外部 RAG 引擎的方案，將 Dify 的高效編排能力與專業 RAG 引擎的檢索效能結合。通過幫助 Dify 應用"開外掛"，主要帶來以下增益：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;效果躍升：通過集成 RAGFlow、百鍊知識庫等專業引擎，顯著提升知識分塊質量與檢索準確性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;無縫增強：配置化實現，無需改造 Dify 應用代碼即可獲得高階 RAG 能力，0 開發成本。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;靈活適配：支持開源引擎私有化部署或 SaaS 化服務的 RAG 引擎選型，滿足多樣化場景需求。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;目前，該能力已經上線至阿里云云原生 AI 網關 &lt;strong&gt;[&lt;/strong&gt; &lt;strong&gt;5]&lt;/strong&gt; 中，除此以外，Higress AI 網關還提供了安全、高可用治理等其他豐富能力，提升 Dify 應用安全性和可用性。在 RAG 方面， Higress AI 網關將持續深化 RAG 能力，在多模態、生態擴展、場景擴展等方面持續探索，幫助 Dify 等 AI 應用從"可用"走向"高精度、高可靠"的企業級知識中樞。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相關鏈接：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;[1] AI RAG 檢索代理&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fapi-gateway%2Fai-gateway%2Fuser-guide%2Fai-retrieval-agent" target="_blank"&gt;https://help.aliyun.com/zh/api-gateway/ai-gateway/user-guide/ai-retrieval-agent&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;[2] AI 檢索增強生成（加強版）&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fapi-gateway%2Fai-gateway%2Fuser-guide%2Fai-retrieval-enhanced-generation-enhanced-version" target="_blank"&gt;https://help.aliyun.com/zh/api-gateway/ai-gateway/user-guide/ai-retrieval-enhanced-generation-enhanced-version&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;[3] API Key&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbailian.console.aliyun.com%2F%3Ftab%3Dmodel%23%2Fapi-key" target="_blank"&gt;https://bailian.console.aliyun.com/?tab=model#/api-key&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;[4] RAGFlow 社區版-Serverless 部署&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsaenext.console.aliyun.com%2Fcn-hangzhou%2Fscene-market%2Fmarket%2Fdetail%2Fservice-611f1d5343924329a69e%3Ftab%3Ddocument%26name%3DRAGFlow%25E7%25A4%25BE%25E5%258C%25BA%25E7%2589%2588-Serverless%25E9%2583%25A8%25E7%25BD%25B2%26dataSource%3DcomputeNest" target="_blank"&gt;https://saenext.console.aliyun.com/cn-hangzhou/scene-market/market/detail/service-611f1d5343924329a69e?tab=document&amp;amp;name=RAGFlow%E7%A4%BE%E5%8C%BA%E7%89%88-Serverless%E9%83%A8%E7%BD%B2&amp;amp;dataSource=computeNest&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;[5] 阿里云云原生 AI 網關&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.aliyun.com%2Fproduct%2Fapigate" target="_blank"&gt;https://www.aliyun.com/product/apigate&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;🔥🔥擁抱 AI 原生！&lt;/p&gt; 
&lt;p&gt;8 月 29 日深圳，企業實踐工作坊火熱報名中！&lt;/p&gt; 
&lt;p&gt;阿里雲誠摯邀請您參加【AI 原生，智構未來------AI 原生架構與企業實踐】工作坊，從開發範式到工程化實踐，全鏈路解析 AI 原生架構奧秘，與 AI 先行者共探增長新機遇。&lt;/p&gt; 
&lt;p&gt;⬇️ 點擊&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.aliyun.com%2Farticle%2F1678323" target="_blank"&gt;此處&lt;/a&gt;，立即瞭解完整議程！&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/3874284/blog/18690020</link>
      <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/18690020</guid>
      <pubDate>Sun, 31 Aug 2025 08:17:00 GMT</pubDate>
      <author>原創</author>
    </item>
  </channel>
</rss>
