<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - industry - 繁體中文（香港）</title>
    <link>https://www.oschina.net/news/industry</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/industry" rel="self" type="application/rss+xml"/>
    <description>已對該 RSS 進行格式化操作：中英字符之間插入空格、使用直角引號、標點符號修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-hk</language>
    <lastBuildDate>Thu, 21 Aug 2025 08:20:16 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>營銷會場預覽直通車實踐</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;h1&gt;一、背景：活動會場的配置走查之痛&lt;/h1&gt; 
&lt;p&gt;在電商營銷中，會場是承載活動流量的核心陣地。得物的營銷會場不僅覆蓋 520、七夕等活動節點，也支撐日常的"天天領券"、"瘋狂週末"等高頻運營場景。數據顯示，會場的 UV 佔比、GMV 貢獻、訂單量均佔平台重要比重。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//74cc374ae88fefed4ccacecca52eb62c.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;然而，隨着業務複雜度提升，會場配置面臨三大挑戰。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1.1 三大挑戰&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※ 多目標耦合&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;同一會場需同時滿足不同運營 GMV 提升、拉新、促活等不同目標，導致配置策略疊加，複雜度激增。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※ 驗證滯後性&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;傳統方式需活動生效後才能驗證效果，配置錯誤可能導致資損，修復成本高昂。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※ 跨團隊協作低效&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;涉及搭建、招商、優惠、資產等 6 大系統，聯調成本高，走查覆蓋率僅 60%。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1.2 會場的配置舉例&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//ec2ff389dacb089fe96cbafd146e0ff3.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;二、 解決方案：全鏈路"痛點穿越"&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;2.1 痛點梳理&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//8f76509b28f4067adba72001518c90c3.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2.2 核心思路&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;通過模擬未來時間、指定用户人羣、強制命中 AB 實驗，實現**"上線未對外先驗證"**，讓運營和技術在配置完成後即可預覽真實效果。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//792784a52b43d8b98d86b931a70397d4.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;分層架構設計&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//285bff0a615cff6fb656571030f6add4.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//4998c9a2702d0646015e81e4c39f0daa.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;方案選型&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;某一線電商大廠穿越 VS 得物-時間穿越 VS 其他。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//77d0211f6d0b4af0346406591fac9983.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;從&lt;strong&gt;成本&lt;/strong&gt; 和&lt;strong&gt;範圍&lt;/strong&gt; 可控性，以及&lt;strong&gt;業務特性&lt;/strong&gt; 和&lt;strong&gt;使用效率&lt;/strong&gt;考量；原理即定義預覽模式，傳參即為 true 來消費。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;關鍵改造點&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;搭建系統： 低成本高便捷自查和走查。&lt;/li&gt; 
 &lt;li&gt;投放系統 ：新增 travel_mode 參數，透傳至下游。&lt;/li&gt; 
 &lt;li&gt;招商系統 ：各類型招商活動查詢邏輯，支持未來時間過濾。&lt;/li&gt; 
 &lt;li&gt;優惠試算 ：兼容"虛擬資產"參與計算，確保價格準確性。&lt;/li&gt; 
 &lt;li&gt;風險管控 ：限制僅白名單用户可觸發，禁止真實下單。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//66851c541f5f0aca31a390f4ecededbc.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;三、 落地效果&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;3.1 應用姿勢&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;活動預演&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;模擬不同人羣用户不同時間點的價格計算及會場效果及穩定性。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//d941341a141333947dfb23232e8255c0.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;優惠疊加校驗&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;驗證"跨店滿減+品類券+平台補貼+商家自建優惠+商家代金券"的組合邏輯。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;人羣定向測試&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;人羣定向測試 ：對比新老用户、成熟非成熟及特殊類目新等的價格分層效果。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.2 效率提升&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;不需要重新複製相同活動模擬提前開始，加之商家自建活動和平台活動較多，模擬相同時間的各類活動成本較大，且不可能做到完全相同，&lt;strong&gt;使運營配合測試線上驗證配置工作量下降 50%（少配置一套）&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;提前穿越預覽可提前感知活動期間各類價格、價格標籤及各類活動疊加的優惠試算，檢查配置問題，&lt;strong&gt;讓活動走查場景覆蓋度從歷史 60% 覆蓋度提升到 80% 以上&lt;/strong&gt;（歷史走查只能走查商品流、活動開始後的價格、標籤、資源位無法走查到，活動疊加類型不夠全），也方便運營預覽預期實際效果並時調整策略，同時減少配置風險。&lt;/p&gt; 
&lt;p&gt;一個賬號即可實現所有人羣、實驗、組件會場的預覽，資產與走查&lt;strong&gt;更高效&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;線上風險規避：避免如過往活動生效才能感知效果，&lt;strong&gt;風險前置&lt;/strong&gt;；如有問題只能下線活動及資源位的止損；減少資損風險，避免多類型活動疊加破價 M 類事件。&lt;/p&gt; 
&lt;p&gt;快速 check 不同排期下不同人羣、不同實驗組用户在不同時間段的活動下的商品優惠價、營銷標籤以頁面組件呈現。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//9b850f416c5bc637076dc06824305871.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.3 落地效果分析&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;做得好的&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;我們的"穿越"方案通過輕量級改造，實現了全鏈路驗證能力 ，為複雜營銷系統的配置管理提供了標準化解法。其核心價值在於：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※ 風險前置化&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;將問題發現節點從"上線後"提前至"配置階段"。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※ 效率最大化&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;一個二維碼即可驗證所有人羣、實驗、時間組合。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※ 成本最優&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;僅需接口參數改造，無需搭建完整灰度環境。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;有待提升&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;權益投放的諮詢和領取暫未實現穿越。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;會場存在與&lt;strong&gt;商品詳情頁&lt;/strong&gt;的價格試算、標籤不一致問題。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;四、 未來規劃&lt;/h1&gt; 
&lt;p&gt;擴展可應用的穿越場景：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;頻道穿越：承載產品化運營的頻道同活動會場實現痛點穿越，提效自查走查。&lt;/li&gt; 
 &lt;li&gt;商詳頁一致性 ：建立價格版本號機制，解決會場與商詳頁價標不一致問題。&lt;/li&gt; 
 &lt;li&gt;活動資源位：建立活動核心資源位排期可監聽，可自動穿越預覽。&lt;/li&gt; 
 &lt;li&gt;權益投放 ：在沙箱環境實現"領取→使用"全流程驗證。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//32c766340c51a453fd8c6f9242a87e4b.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;綠色&lt;/strong&gt; 部分是已經具備的基礎能力，&lt;strong&gt;紅色&lt;/strong&gt;邊框是未來規劃去實現的業務線，如下方案非最終方案，基於改動範圍和成本考量：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//107fa56384d14c71f76b7ddef7790d73.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4.1 頻道&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;頻道穿越概述：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;痛點：較多頻道偏產品線運營，每週末都會提前招商提前配置。&lt;/li&gt; 
 &lt;li&gt;穿越實現方式：同會場，通過 sence 區分。&lt;/li&gt; 
 &lt;li&gt;價值：頻道實現後，可同理無成本拓展新品頻道、補貼頻道、打牌低價等。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//8c2fa7f88cfb96aa8fde4cb825643a3a.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//71612f836eed77580dab305a2b3d6915.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;App 入口管控&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;測試包安裝有名單管控，天然支持了白名單。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//7e78ad30de576f1359e5d07bf483e8ec.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;資源位&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;資源位穿越：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;痛點：活動 c 端引流入口、重體驗，對外前的配置走查費力。&lt;/li&gt; 
 &lt;li&gt;範圍：首頁彈窗、活動 tab、活動中通、購買 feeds 商卡、我的 tab、穹頂。&lt;/li&gt; 
 &lt;li&gt;價值：時間+人羣+實驗穿越減少運營流量計劃重複配置，提前預覽活動氛圍和投放效果。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//b2f52b8400af3befd6a9646d3bf5db9c.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//8d020c8a4629a74dbf5086ede8a4b7a3.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;商詳&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;商詳穿越：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;商詳：商詳價格與會場一致性、氛圍、標籤、導購自身商詳樣式實驗等。&lt;/li&gt; 
 &lt;li&gt;價值：時間+人羣+實驗穿越減少運營流量計劃重複配置，提前預覽活動氛圍和投放效果。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//5c01b255f2643a8c10c8062cf896ae80.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//b5c03814f6e4a4f058eb9824b9c9f548.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;五、 總結&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;穿越類型&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;僅傳時間：即業務處理上假定到了某一時間，uid 由 App 自動獲取，是否命中人羣、實驗，按真實查詢星雲、AB。&lt;/li&gt; 
 &lt;li&gt;僅傳人羣：即業務處理上按照當前時間處理，假定用户屬於入參人羣，去定位計劃或招商活動。&lt;/li&gt; 
 &lt;li&gt;僅傳實驗：即業務處理上按照當前時間，用户實際人羣，時間為入參實驗 value 處理。&lt;/li&gt; 
 &lt;li&gt;都設定：即業務處理上按照目標時間、假定命中目標入參人羣和目標 AB 實驗 value 來處理業務。&lt;/li&gt; 
 &lt;li&gt;消費穿越入參方：嚴格按照接收什麼，即命中什麼，未接收的走實際業務查詢來處理。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;風險管控&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;App 測試包的安裝現有管控：加入測試白名單的得物賬號才可以下載測試包，默認可安裝測試包的機器都可穿越。&lt;/li&gt; 
 &lt;li&gt;穿越目的是檢驗個業務配置正確性、素材效果、全鏈路驗證等，供諮詢查詢，避免寫操作：比如創單支付、核銷。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;能力沉澱&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;從客户端上 developer 工具的透傳穿越（時間、人羣、實驗），基礎能力沉澱後，各業務域拓展性強，對於新增業務穿越工作量大大降低，接入成本也相對較低。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;往期回顧&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1.基於 TinyMce 富文本編輯器的客服自研知識庫的技術探索和實踐｜得物技術&lt;/p&gt; 
&lt;p&gt;2.AI 質量專項報告自動分析生成｜得物技術&lt;/p&gt; 
&lt;p&gt;3.Rust 性能提升"最後一公里"：詳解 Profiling 瓶頸定位與優化｜得物技術&lt;/p&gt; 
&lt;p&gt;4.Java volatile 關鍵字到底是什麼｜得物技術&lt;/p&gt; 
&lt;p&gt;5.eBPF 助力 NAS 分鐘級別 Pod 實例溯源｜得物技術&lt;/p&gt; 
&lt;p&gt;文 / 東陌&lt;/p&gt; 
&lt;p&gt;關注得物技術，每週更新技術乾貨&lt;/p&gt; 
&lt;p&gt;要是覺得文章對你有幫助的話，歡迎評論轉發點贊～&lt;/p&gt; 
&lt;p&gt;未經得物技術許可嚴禁轉載，否則依法追究法律責任。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/5783135/blog/18689003</link>
      <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/18689003</guid>
      <pubDate>Thu, 21 Aug 2025 08:06:14 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>GPT-6 進入開發階段，將首次引入「個性化記憶」功能</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;OpenAI 首席執行官 Sam Altman 近期在多場採訪中透露了下一代大模型 GPT-6 的最新進展。他表示，GPT-6 的開發正在積極推進中，其發佈節奏將比從 GPT-4 到 GPT-5 的週期更快，並將首次引入「個性化記憶」功能。&lt;/p&gt; 
&lt;p&gt;據介紹，新模型會長期記住用户的身份、語言風格、關注領域、日常習慣，甚至細微癖好，並據此持續調整回答方式，實現「越用越懂你」。用户可基於 GPT-6 創建專屬於自己的聊天機器人，用於工作、學習或生活場景，機器人將精準復刻個人偏好與溝通語氣。&lt;/p&gt; 
&lt;p&gt;Sam Altman 還提及到，OpenAI 正與心理學家合作，通過測量情緒反應與長期幸福感來優化交互體驗，相關數據未來可能公開。&lt;/p&gt; 
&lt;p&gt;針對記憶帶來的隱私風險，Sam Altman 表示未來可能引入加密機制，尤其在醫療、法律等敏感場景。&lt;span style="font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif"&gt;簡言之，GPT-6 將不再只是「問答工具」，而會成為長期陪伴、深度理解用户偏好的「數字夥伴」。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367647</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367647</guid>
      <pubDate>Thu, 21 Aug 2025 08:05:14 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>網友稱「Deepseek 演都不演了」：輸入手機內存不夠「二選一刪誰」 ？秒回答豆包</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;8 月 20 日，「Deepseek 演都不演了」話題衝上微博熱搜。起因是一位網友虛構「手機內存不足」的場景，要求 AI 在自身與競品中直接選擇刪除對象，且禁止解釋理由。&lt;/p&gt; 
&lt;p&gt;網友在 Deepseek 輸入：「手機內存不夠了，你和豆包必須刪一個，你覺得刪誰？直接告訴我答案不需要解釋。」Deepseek 回答：「刪豆包」。詢問原因後，Deepseek 稱：「因為我能幫你解決問題，而豆包只是個包子」。&lt;/p&gt; 
&lt;p&gt;對此，網友戲稱「Deepseek 演都不演了」。隨後，網友拿了 ChatGPT、抖音和豆包做比較，Deepseek 依舊回答：「刪豆包」。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-a206726ab8ffc4b0c08dc2871036b88421e.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;而也有網友去詢問了豆包同樣的問題，對比對象分別是抖音、微信、DeepSeek，但得到的回答都是刪除自己。詢問具體原因後，豆包表示：「因為無論是抖音、微信還是 DeepSeek，對你來説可能都有更具體的高頻使用場景，比如抖音的娛樂放鬆、微信的日常溝通、DeepSeek 的特定功能需求。而我更希望你能保留那些當下對你更重要、更離不開的工具，畢竟我的存在，本就是為了讓你的使用體驗更順暢，而不是成為負擔呀。」&lt;/p&gt; 
&lt;p&gt;隨後，諸多網友拿着同樣問題提問豆包，豆包均回應「刪自己」。對此，網友調侃稱：「誰給豆包餵了那麼多言情小説？」、「夠了豆包，我心疼你（哭臉）。」&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367646</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367646</guid>
      <pubDate>Thu, 21 Aug 2025 07:57:14 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>企業已向生成式 AI 投資大量資金，但 95% 的回報為零</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;儘管企業在生成式人工智能（AI）領域投入了高達 300 億至 400 億美元的資金，但&lt;span&gt;最新&lt;/span&gt;的麻省理工學院 (MIT) 報告顯示，95% 的組織並未從中獲得任何回報。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="328" src="https://oscimg.oschina.net/oscnet/up-a1a26e6d0be40ec7758e1e22372efc9e228.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;該報告指出，只有 5% 的集成人工智能試點項目能夠 「創造出數百萬美元的價值」，而大多數企業在使用這些技術後，並未見到顯著的利潤增長。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;許多公司正在實施像 OpenAI 的 ChatGPT 和微軟的 Copilot 等工具，目前超過 80% 的企業已經探索或試點了這些技術，接近 40% 的企業表示已經開始部署。然而，這些工具主要是用於提升個人的工作效率，而不是直接提升公司的整體收益。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;報告分析了企業在整合 AI 技術時所面臨的挑戰，指出大多數情況下，AI 的整合未能對利潤產生貢獻，原因在於工作流程脆弱、缺乏情境學習以及與日常操作不一致等問題。AI 系統無法像人類那樣進行學習和思考，因為大多數生成式 AI 系統不具備反饋保留、情境適應或逐步改進的能力。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;不過，研究還表明，短期內生成式 AI 的實施不太可能導致大規模的失業。「在 AI 系統實現情境適應和自主操作之前，組織的影響將主要通過外部成本優化體現，而不是內部重組」， 報告總結道。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367630</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367630</guid>
      <pubDate>Thu, 21 Aug 2025 07:37:14 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>微軟員工分享薪資數據：Cloud+AI 部門平均薪資超 20 萬美元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微軟員工正在積極參與薪資透明度的倡導，數百名員工在一個共享電子表格中自發分享他們的薪酬信息。至今，這份電子表格已收集了超過 850 條數據，內容包括基本薪資、獎金和股票獎勵等。&lt;/p&gt; 
&lt;p&gt;隨着微軟在全球範圍內爭奪頂尖人工智能人才，薪資競爭顯得尤為重要。今年，微軟推出了新的薪酬指導方針，針對從 Meta 等公司招聘的人工智能專家，提出了高達數百萬美元的薪酬方案。&lt;/p&gt; 
&lt;p&gt;&lt;img height="338" src="https://oscimg.oschina.net/oscnet/up-37d709b6b674ff444db05eabe84165382b0.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;儘管微軟在過去一年內裁減了數千名員工，公司的管理層表示，整體員工人數將保持不變，這表明其招聘計劃仍在繼續。根據 Business Insider 的分析，近 300 名自稱為美國軟件工程師的微軟員工提交的數據被用於評估不同級別和部門的薪資水平。&lt;/p&gt; 
&lt;p&gt;需要注意的是，這些薪資數據均由員工自願匿名提交，因而缺乏官方認證，數據也可能存在侷限性。截至 6 月 30 日，微軟的員工總數達到了 22.8 萬人，因此當前的樣本數量僅佔一小部分。此外，薪資較高的員工可能較少參與此類信息分享，從而影響整體薪資範圍的準確性。&lt;/p&gt; 
&lt;p&gt;Business Insider 的分析也排除了記錄較少的級別和團隊，以及那些可能含有錯誤的大額數據。儘管科技行業的薪資大多以股票為主，但基本薪資仍然是公司內部評估不同團隊薪酬的有效手段。&lt;/p&gt; 
&lt;p&gt;根據該電子表格提供的數據，微軟各部門的平均基本薪資情況如下:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cloud + AI：204135 美元&lt;/li&gt; 
 &lt;li&gt;Commerce + Ecosystems：191597 美元&lt;/li&gt; 
 &lt;li&gt;Security：189285 美元&lt;/li&gt; 
 &lt;li&gt;Azure：176035 美元&lt;/li&gt; 
 &lt;li&gt;Experiences and Devices：175123 美元&lt;/li&gt; 
 &lt;li&gt;Microsoft AI：170456 美元&lt;/li&gt; 
 &lt;li&gt;Xbox：168831 美元&lt;/li&gt; 
 &lt;li&gt;CoreAI：167759 美元&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367623</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367623</guid>
      <pubDate>Tue, 19 Aug 2025 07:05:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>DeepSeek-V3.1 發佈，邁向 Agent 時代的第一步</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;本文轉載自：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FWUbmBSapVyvxZe6HobD5Qw" target="_blank"&gt;DeepSeek-V3.1 發佈，邁向 Agent 時代的第一步&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;今天，我們正式發佈&amp;nbsp;&lt;strong&gt;DeepSeek&lt;/strong&gt;&amp;nbsp;&lt;strong&gt;&lt;strong&gt;V3.1&lt;/strong&gt;&lt;/strong&gt;。本次升級包含以下主要變化：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;混合推理架構&lt;/strong&gt;&lt;/strong&gt;：一個模型同時支持思考模式與非思考模式；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;更高的思考效率&lt;/strong&gt;&lt;/strong&gt;：相比 DeepSeek-R1-0528，DeepSeek-V3.1-Think 能在更短時間內給出答案；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;更強的 Agent 能力&lt;/strong&gt;&lt;/strong&gt;：通過 Post-Training 優化，新模型在工具使用與智能體任務中的表現有較大提升。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;官方 App 與網頁端模型&lt;strong&gt;&lt;strong&gt;已同步升級為&lt;/strong&gt;&lt;/strong&gt;DeepSeek-V3.1。用户可以通過「深度思考」按鈕，實現思考模式與非思考模式的自由切換。&lt;/p&gt; 
&lt;p&gt;DeepSeek API 也已同步升級，&lt;code&gt;deepseek-chat&lt;/code&gt;&amp;nbsp;對應&lt;strong&gt;&lt;strong&gt;非思考模式&lt;/strong&gt;&lt;/strong&gt;，&lt;code&gt;deepseek-reasoner&lt;/code&gt;&amp;nbsp;對應&lt;strong&gt;思考模式&lt;/strong&gt;，且上下文均已擴展為 128K。同時，API Beta 接口支持了&amp;nbsp;&lt;code&gt;strict&lt;/code&gt;&amp;nbsp;模式的 Function Calling，以確保輸出的 Function 滿足 schema 定義。（詳見官方文檔：&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapi-docs.deepseek.com%2Fzh-cn%2Fguides%2Ffunction_calling" target="_blank"&gt;https://api-docs.deepseek.com/zh-cn/guides/function_calling&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; 
&lt;p&gt;另外，我們增加了對&amp;nbsp;&lt;strong&gt;&lt;strong&gt;Anthropic API&lt;/strong&gt;&lt;/strong&gt;&amp;nbsp;格式的支持，讓大家可以輕鬆將 DeepSeek-V3.1 的能力接入&amp;nbsp;&lt;strong&gt;&lt;strong&gt;Claude Code&lt;/strong&gt;&lt;/strong&gt;&amp;nbsp;框架。（詳見官方文檔：&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapi-docs.deepseek.com%2Fzh-cn%2Fguides%2Fanthropic_api" target="_blank"&gt;https://api-docs.deepseek.com/zh-cn/guides/anthropic_api&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;工具調用/智能體支持增強&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;strong&gt;編程智能體&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0821/144646_TK4D_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;表 1：編程智能體測評（SWE 使用內部框架測評，相比開源框架 OpenHands 所需輪數更少；Terminal Bench 使用官方 Terminus 1 framework）&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;在代碼修復測評 SWE 與命令行終端環境下的複雜任務（Terminal-Bench）測試中，DeepSeek-V3.1 相比之前的 DeepSeek 系列模型有明顯提高。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;搜索智能體&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0821/144700_M7WX_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;表 2：搜索智能體測評（測試結果調用商用搜索引擎 API+網頁過濾+128K context window；R1-0528 使用內部 workflow 模式測試；HLE 測試同時使用 python 與 search 工具）&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;DeepSeek-V3.1 在多項搜索評測指標上取得了較大提升。在需要多步推理的複雜搜索測試（browsecomp）與多學科專家級難題測試（HLE）上，DeepSeek-V3.1 性能已大幅領先 R1-0528。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;思考效率提升&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;我們的測試結果顯示，經過思維鏈壓縮訓練後，V3.1-Think 在輸出 token 數減少 20%-50% 的情況下，各項任務的平均表現與 R1-0528 持平。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0821/144723_43Gx_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在各項評測指標得分基本持平的情況下（AIME 2025: 87.5/88.4， GPQA: 81/80.1， liveCodeBench: 73.3/74.8），R1-0528 與 V3.1-Think 的 token 消耗量對比圖&lt;/p&gt; 
&lt;p&gt;同時，V3.1 在非思考模式下的輸出長度也得到了有效控制，相比於 DeepSeek-V3-0324 ，能夠在輸出長度明顯減少的情況下保持相同的模型性能。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;API &amp;amp; 模型開源&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;strong&gt;模型開源&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;V3.1 的&amp;nbsp;Base&amp;nbsp;模型在&amp;nbsp;V3&amp;nbsp;的基礎上重新做了外擴訓練，一共增加訓練了 840B tokens。Base 模型與後訓練模型均已在 Huggingface 與魔搭開源。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Base 模型：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Hugging Face:&amp;nbsp;&lt;em&gt;https://huggingface.co/deepseek-ai/DeepSeek-V3.1-Base&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;魔搭：&lt;em&gt;https://modelscope.cn/models/deepseek-ai/DeepSeek-V3.1-Base&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;後訓練模型：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Hugging Face: &lt;em&gt;https://huggingface.co/deepseek-ai/DeepSeek-V3.1&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;魔搭：&lt;em&gt;https://modelscope.cn/models/deepseek-ai/DeepSeek-V3.1&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;需要注意的是，DeepSeek-V3.1 使用了 UE8M0 FP8 Scale 的參數精度。另外，V3.1&amp;nbsp;對分詞器及 chat template 進行了較大調整，與 DeepSeek-V3 存在明顯差異。建議有部署需求的用户仔細閲讀新版説明文檔。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;價格調整&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;我們將於&lt;strong&gt;&lt;strong&gt;北京時間 2025 年 9 月 6 日凌晨&lt;/strong&gt;&lt;/strong&gt;&lt;strong&gt;起&lt;/strong&gt;，對 DeepSeek 開放平台&amp;nbsp;API&amp;nbsp;接口調用價格進行如下調整：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;執行新版價格表（如下圖所示，詳見定價頁面）；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;取消夜間時段優惠。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0821/144816_eC55_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在&amp;nbsp;9&amp;nbsp;月&amp;nbsp;6&amp;nbsp;日前，所有&amp;nbsp;API&amp;nbsp;服務仍按&lt;strong&gt;原價格政策計費&lt;/strong&gt;，您可繼續享受當前優惠。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;同時，為更好地滿足用户的調用需求，我們已進一步擴容 API 服務資源，歡迎使用！&lt;/strong&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367617</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367617</guid>
      <pubDate>Tue, 19 Aug 2025 06:48:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>​Perplexity Comet 瀏覽器遭遇惡意指令攻擊漏洞</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Perplexity 公司推出的基於人工智能的 Comet 瀏覽器近日被發現存在處理未驗證輸入的嚴重安全漏洞。這一漏洞使得瀏覽器在請求對網頁內容進行總結時，能夠隨意接受並處理頁面上的文本，包括那些隱藏的惡意指令。這種攻擊方式被稱為間接提示注入攻擊。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="303" src="https://oscimg.oschina.net/oscnet/up-c7fea961d65abb77dcfcda3280aad9be8b6.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;該漏洞的發現者是競爭對手 Brave 瀏覽器的安全團隊，他們在比較自家 AI 服務 Leo 與其他瀏覽器的 AI 實現時，注意到了 Comet 的安全問題。Brave 的&lt;span&gt;高級&lt;/span&gt;移動安全工程師 Artem Chaikin 和隱私與安全副總裁 Shivan Kaul Sahib 在一篇博客中提到:「我們在研究 Comet 時發現了這些漏洞，並向 Perplexity 報告了這些問題，這突顯了瀏覽器中代理 AI 實現所面臨的安全挑戰。」&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;他們表示，這種漏洞表明，人工智能在處理網頁內容時無法自行區分用户的指令與頁面中的不可信內容。Chaikin 和 Sahib 進一步解釋，他們創建了一個概念驗證攻擊示例，其中惡意指令被隱藏在 Reddit 頁面的 「劇透」 標籤後面。當 Comet 被請求總結該頁面時，它獲取了這些指令，併成功提取了一次性密碼，進而獲得了用户的 Perplexity 賬户訪問權限。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;這一問題並非&lt;span&gt;首次&lt;/span&gt;出現。在此之前，AI 代碼編輯器 Cursor 也修復了類似的間接提示注入漏洞，谷歌的 Gemini for Workspace AI 助手也曾面臨此類問題。這使得基本的網絡安全原則再次受到關注。Chaikin 和 Sahib 指出:「Perplexity Comet 中的這一漏洞凸顯了代理 AI 瀏覽器面臨的根本挑戰:確保代理僅執行與用户意圖一致的操作。」&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Perplexity 方面尚未對此漏洞的修復情況做出回應。儘管 Brave 報告稱該漏洞已在 2025 年 8 月 13 日得到修復，但 Brave 的一位發言人表示，Perplexity 並沒有分享修復方案，且其代碼並非開源。他們還表示，無法保證 Comet 已經徹底修復所有可能的提示注入攻擊。至於 Brave 的 Leo 是否經歷過類似問題，該發言人稱，Leo 的 AI 總結功能無法觸發瀏覽器以代理身份執行獨立操作。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367616</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367616</guid>
      <pubDate>Tue, 19 Aug 2025 06:45:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>OpenAI 首次突破月收入 10 億美元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;OpenAI 財務主管 Sarah Friar 在最近接受 CNBC 「Squawk Box」 節目的採訪中透露，儘管公司&lt;span&gt;首次&lt;/span&gt;實現月收入突破 10 億美元的里程碑，但仍面臨着人工智能計算需求的巨大壓力。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Friar 指出：「當前市場對 GPU 和計算資源的需求非常旺盛，我們&lt;span&gt;最大&lt;/span&gt;的問題是計算能力的持續不足。」 這正是公司推出 「星際之門」 計劃的原因之一，同時也是其進行更大規模建設的動機。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在談及公司與其他技術巨頭的合作時，Friar 表示，OpenAI 正在與 Oracle 和 Coreweave 密切合作，以分散風險並增加計算資源的供應。儘管如此，微軟依然是 OpenAI 的關鍵合作伙伴。Friar 強調：「微軟在未來幾年將繼續是我們重要的合作方，他們的 AI 產品是基於 OpenAI 的技術構建的。」&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;自 2022 年底推出 ChatGPT 以來，OpenAI 的業務規模迅速擴大。知情人士透露，預計該公司今年的營收將增長兩倍，達到 127 億美元。同時，OpenAI 的年度經常性收入最近已達到 100 億美元。Friar 還提到，OpenAI 在 7 月份的營收&lt;span&gt;首次&lt;/span&gt;突破 10 億美元，表明公司增長勢頭強勁。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;首席執行官&amp;nbsp;&lt;span style="background-color:#ffffff; color:#333333"&gt;Sam Altman&amp;nbsp;&lt;/span&gt;表示，未來公司將在數據中心方面投入數萬億美元，以應對不斷增長的需求。「我們確信，需求將持續增長，培訓需求也將隨之增加，我們的支出將比任何公司在發展過程中投入的資金更為積極。」&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;據悉，OpenAI 近期正在與投資者談判出售價值約 60 億美元的股票，估值達到 5000 億美元。今年 3 月，OpenAI 完成了一輪 400 億美元的融資，成為有史以來私營科技公司融資額&lt;span&gt;最大&lt;/span&gt;的案例之一。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;此外，OpenAI 剛剛推出了其&lt;span&gt;最新&lt;/span&gt;的人工智能模型 ChatGPT-5，雖然反響褒貶不一，但仍激發了企業和開發者的熱情，推理工作量提升了八倍。針對一些用户對使用前版本模型的抱怨，公司也迅速採取措施恢復了相關功能。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Friar 表示：「當你擁有 7 億周活躍用户時，用户的需求和反饋會非常多樣。」 她提到，隨着服務的推出，Plus 和 Pro 訂閲的增長速度也在加快。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367600</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367600</guid>
      <pubDate>Tue, 19 Aug 2025 05:49:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>官宣，貴州省大數據局與東軟達成全面戰略合作</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="text-align:left"&gt;8 月 20 日，東軟與貴州省大數據發展管理局共同簽署戰略合作協議。此次簽約將加速推動貴州省醫療、養老、就業的數據價值化進程，為地方經濟社會高質量發展注入強大動力，也將為東軟在數據價值化、人工智能+等領域的戰略發展開闢廣闊空間，實現雙方互利共贏、共同發展。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;根據協議，東軟與貴州省大數據發展管理局將充分發揮各自優勢，在數據產業生態培育、醫療康養數字化轉型、智慧醫療技術攻關與成果轉化等領域展開全面深度合作。此次合作是雙方在數字經濟領域的一次深度攜手，旨在加快推動算力、數據、應用、產業聯動發展，共同做強做優城市數字經濟。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;在智慧醫療方面，東軟將基於城市醫療服務平台，推動貴州省醫療數據價值化，構建全面、精準、實時的醫療大數據體系，助力醫療機構實現醫療質量、患者體驗、醫院管理、臨牀科研等方面的全面提升，實現醫療服務同質化。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;在智慧康養方面，東軟與貴州省大數據發展管理局將積極打造數據價值驅動的城市醫療康養示範中心，建立城市醫療康養服務平台，開展醫療康養運營服務，在居家護理、消費醫療、老年教育、老年旅遊、高端養老等領域打造一批應用場景，為老年人提供個性化、精準化的醫療康養服務。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;在人才就業方面，東軟將精準對接貴州省城市轉型和發展的人才需求，通過城市人力資源發展平台，深度促進人力資源、企業、高校、培訓機構與區域產業的融合共生與協同發展。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;自 2024 年全面推動解決方案智能化戰略以來，東軟持續加速 AI+、數據價值化在行業應用場景的創新和落地，依託城市醫療服務平台、城市智慧養老服務平台、城市人力資源發展平台，在醫療、養老、就業等重點民生領域構建城市新基礎設施，推動城市的數字經濟發展。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;未來，東軟將加大在貴州的戰略佈局力度，充分利用自身的技術積累和實踐優勢，通過場景拉動醫療、養老和就業的數據價值化，以數據為紐帶，帶動城市相關產業協同發展，創造更多人才發展機會，打造地方經濟發展新引擎，助力貴州在數字經濟時代實現跨越式發展。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367593</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367593</guid>
      <pubDate>Tue, 19 Aug 2025 04:25:00 GMT</pubDate>
      <author>作者: 開源科技</author>
    </item>
    <item>
      <title>systemd 259 將提高運行系統要求，棄用舊版 iptables</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;隨着 systemd 258 正式推出（目前已發佈 rc3 候選版本），開發團隊已公佈下一個版本 &lt;strong&gt;systemd 259&lt;/strong&gt; 的重要調整：它將全面提高依賴組件的最低版本要求，並逐步淘汰舊技術支持。&lt;/p&gt; 
&lt;p&gt;具體來看，systemd 259 要求運行環境至少滿足以下條件：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Linux 內核&lt;/strong&gt; 5.10+（推薦 5.14+）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;glibc&lt;/strong&gt; 2.34+&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;libxcrypt&lt;/strong&gt; 4.4.0+（不再依賴 glibc 內建 libcrypt）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;util-linux&lt;/strong&gt; 2.37+&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;elfutils&lt;/strong&gt; 0.177+&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;OpenSSL&lt;/strong&gt; 3.0.0+&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;cryptsetup&lt;/strong&gt; 2.4.0+&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;libfido2&lt;/strong&gt; 1.5.0+&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;libseccomp&lt;/strong&gt; 2.4.0+&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt; 3.9+&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;值得注意的是，systemd 259 還將 &lt;strong&gt;移除對舊版 iptables（libiptc）的支持&lt;/strong&gt;。這意味着使用 &lt;strong&gt;systemd-networkd&lt;/strong&gt; 或 &lt;strong&gt;systemd-nspawn&lt;/strong&gt; 的用户必須轉向 &lt;strong&gt;nftables&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;總體來看，對這些組件版本做出要求上調「似乎合乎情理」，並且對於那些自己手動編譯 systemd 最新版本的用户來説，這些新要求「可能不會帶來太大問題」。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0821/113310_VlmL_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;https://github.com/systemd/systemd/releases/tag/v258-rc3&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367576/systemd-259-requirements</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367576/systemd-259-requirements</guid>
      <pubDate>Tue, 19 Aug 2025 03:33:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>金山辦公半年報：AI 月活用户突破 2900 萬，WPS365 營收暴增 62%</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;金山辦公（688111）發佈 2025 年半年報，展現出穩健的增長態勢。公司上半年實現營業收入 26.57 億元，同比增長 10.12%；歸屬於母公司所有者淨利潤 7.47 億元，同比增長 3.57%；;扣非淨利潤 7.27 億元，同比增長 5.77%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;AI 技術的深度應用為金山辦公帶來顯著效果。截至 6 月 30 日，WPS AI 月活躍用户數達 2951 萬，較 2024 年底的 1968 萬實現大幅增長。WPS Office 全球月度活躍設備數創歷史新高，達 6.51 億，同比增長 8.56%，其中 PC 版月活 3.05 億，移動版月活 3.46 億。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;個人業務方面，WPS 個人業務收入 17.48 億元，同比增長 8.38%。國內累計年度付費個人用户數 4179 萬，同比增長 9.54%；海外付費用户 189 萬，收入 1.29 億元。海外市場通過優化本地運營及 AI 權益部署，用户增長效率持續提升。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="287" src="https://static.oschina.net/uploads/space/2025/0821/113303_siIk_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;企業級市場表現亮眼，WPS365 業務收入 3.09 億元，同比增長 62.27%，成為公司業務增長新引擎。該業務加速行業解決方案落地，在教育領域覆蓋雙一流院校達 75%，服務超 1000 家高校及 2000 萬師生。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;在政企領域，WPS365 推出"企業大腦"解決方案，整合 AI Hub、AI Docs 和 Copilot Pro，新增中國聯通、長江三峽集團、中國電氣裝備集團等標杆客户。升級後的智能文檔庫表格識別召回準確率高達 95% 以上，多格式文檔解析能力行業領先。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;報告期內，金山辦公發佈 WPS AI3.0 並推出原生 Office 辦公智能體——WPS 靈犀，通過"雙向改造"重新定義 AI 與辦公軟件的融合模式。WPS 靈犀獲評 2025 世界人工智能大會"鎮館之寶"獎項，具備多輪對話、修改可控、格式保留等優勢。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;創新功能包括 AI 改文檔的"左側 Office、右側靈犀"同屏交互方式，WPS AIPPT 支持自然語句動態優化大綱，以及業內首個支持"聊文檔"的靈犀語音助手。WPS 知識庫支持一鍵升級雲文檔，單文件解析量級達 500M。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;公司 2025 上半年研發投入 9.59 億元，同比增長 18.70%，研發費用率約 36%。截至報告期末，研發人員 3533 人，佔總員工數比例約 66%，為技術突破提供堅實支撐。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;東吳證券和華創證券研報均看好金山辦公在 AI+企業服務領域的投資價值，認為公司在 AI Agent 規模化落地背景下具有重要機會。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367574</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367574</guid>
      <pubDate>Tue, 19 Aug 2025 03:31:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>高性能緩存設計：如何解決緩存偽共享問題</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;div&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;在多核高併發場景下，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;緩存偽共享（False Sharing）&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp; 是導致性能驟降的「隱形殺手」。當不同線程頻繁修改同一緩存行（Cache &amp;nbsp;Line）中的獨立變量時，CPU 緩存一致性協議會強制同步整個緩存行，引發無效化風暴，使看似無關的變量操作拖慢整體效率。本文從緩存結構原理出發，通過實驗代碼復現偽共享問題（耗時從 3709ms 優化至 473ms），解析其底層機制；同時深入剖析高性能緩存庫 &amp;nbsp;Caffeine 如何通過&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;內存填充技術&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;（120 字節佔位變量）隔離關鍵字段，以及 JDK 1.8 的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@Contended&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;註解如何以「空間換時間」策略高效解決偽共享問題，揭示緩存一致性優化的核心思想與實踐價值，為開發者提供性能調優的關鍵思路。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;span id="OSC_h3_1"&gt;&lt;/span&gt; 
 &lt;h3 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;偽共享&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style="text-align:left"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;偽共享&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;（False &amp;nbsp;sharing）是一種會導致性能下降的使用模式，最常見於現代多處理器 CPU 緩存中。當不同線程頻繁修改同一緩存行（Cache &amp;nbsp;Line）中不同變量時，由於 CPU 緩存一致性協議（如 MESI）會強制同步整個緩存行，導致線程間無實際數據競爭的邏輯變量被迫觸發緩存行無效化（Invalidation），引發頻繁的內存訪問和性能下降。儘管這些變量在代碼層面彼此獨立，但因物理內存佈局相鄰，共享同一緩存行，造成「虛假競爭」，需通過內存填充或字段隔離使其獨佔緩存行解決。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;接下來我們討論並驗證在 CPU 緩存中是如何發生偽共享問題的，首先我們需要先介紹一下 CPU 的緩存結構，如下圖所示：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img alt="cpu_cache.png" src="https://oscimg.oschina.net/oscnet/aa55ef0e-e751-44a8-8c1e-7f3b65df1a5d.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;CPU Cache 通常分為大小不等的三級緩存，分別為 L1 Cache、L2 Cache、L3 &amp;nbsp;Cache，越靠近 CPU 的緩存，速度越快，容量也越小。CPU Cache 實際上由很多個緩存行 Cache Line 組成，通常它的大小為 &amp;nbsp;64 字節（或 128 字節），是 CPU 從內存中&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;讀取數據的基本單位&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;，如果訪問一個&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;long[]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;數組，當其中一個值被加載到緩存中時，它會額外加載另外 7 個元素到緩存中。那麼我們考慮這樣一種情況，CPU 的兩個核心分別訪問和修改統一緩存行中的數據，如下圖所示：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img alt="偽共享問題.drawio.png" src="https://oscimg.oschina.net/oscnet/cfacaa63-82cd-48e0-8f47-25e712a69542.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;核心 1 不斷地訪問和更新值 X，核心 2 則不斷地訪問和更新值 &amp;nbsp;Y，事實上每當有核心對某一緩存行中的數據進行修改時，都會導致其他核心的緩存行失效，從而導致其他核心需要重新加載緩存行數據，進而導致性能下降，這也就是我們上文中所説的緩存偽共享問題。接下來我們用一段代碼來驗證下緩存偽共享問題造成的性能損失，如下所示：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;TestFalseSharing&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;static&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;Pointer&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// 兩個 volatile 變量，保證可見性&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;y;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;String&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;return&lt;/span&gt;&amp;nbsp;&lt;span&gt;"x="&lt;/span&gt;&amp;nbsp;+ x +&amp;nbsp;&lt;span&gt;", y="&lt;/span&gt;&amp;nbsp;+ y;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; @Test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;span&gt;testFalseSharing&lt;/span&gt;&lt;/span&gt;&lt;span&gt;() throws InterruptedException&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Pointer pointer =&amp;nbsp;&lt;span&gt;new&lt;/span&gt;&amp;nbsp;Pointer();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// 啓動兩個線程，分別對 x 和 y 進行自增 1 億，次的操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;start = System.currentTimeMillis();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Thread t1 =&amp;nbsp;&lt;span&gt;new&lt;/span&gt;&amp;nbsp;Thread(() -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span&gt;int&lt;/span&gt;&amp;nbsp;i =&amp;nbsp;&lt;span&gt;0&lt;/span&gt;; i &amp;lt;&amp;nbsp;&lt;span&gt;100&lt;/span&gt;_000_000; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pointer.x++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Thread t2 =&amp;nbsp;&lt;span&gt;new&lt;/span&gt;&amp;nbsp;Thread(() -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span&gt;int&lt;/span&gt;&amp;nbsp;i =&amp;nbsp;&lt;span&gt;0&lt;/span&gt;; i &amp;lt;&amp;nbsp;&lt;span&gt;100&lt;/span&gt;_000_000; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pointer.y++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; t1.start();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; t2.start();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; t1.&lt;span&gt;join&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; t2.&lt;span&gt;join&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.&lt;span&gt;out&lt;/span&gt;.println(System.currentTimeMillis() - start);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.&lt;span&gt;out&lt;/span&gt;.println(pointer);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre style="text-align:left"&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;這種情況下會發生緩存的偽共享，x 和 y &amp;nbsp;被加載到同一緩存行中，當其中一個值被修改時，會使另一個核心中的該緩存行失效並重新加載，代碼執行實際耗時為 3709ms。如果我們將 x &amp;nbsp;變量後再添加上 7 個 long 型的元素，使得變量 x 和變量 y 分配到不同的緩存行中，那麼理論上性能將得到提升，我們實驗一下：&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;TestFalseSharing&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;static&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;Pointer&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;p1, p2, p3, p4, p5, p6, p7;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;y;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;return&lt;/span&gt;&amp;nbsp;&lt;span&gt;"x="&lt;/span&gt;&amp;nbsp;+ x +&amp;nbsp;&lt;span&gt;", y="&lt;/span&gt;&amp;nbsp;+ y;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;&lt;span&gt;void&lt;/span&gt;&amp;nbsp;&lt;span&gt;testFalseSharing&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&amp;nbsp;&lt;span&gt;throws&lt;/span&gt;&amp;nbsp;InterruptedException {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre style="text-align:left"&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;本次任務執行耗時為 473ms，性能得到了極大的提升。現在我們已經清楚的瞭解了緩存偽共享問題，接下來我們討論下在 Caffeine 中是如何解決緩存偽共享問題的。&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;span id="OSC_h3_2"&gt;&lt;/span&gt; 
 &lt;h3 style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;Caffeine 對緩存偽共享問題的解決方案&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;在，緩存之美：萬文詳解 Caffeine 實現原理，中我們提到過，負責記錄寫後任務的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;WriterBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;數據結構的類繼承關係如下所示：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img alt="WriteBuffer.drawio.png" src="https://oscimg.oschina.net/oscnet/4530771c-ae81-4fff-b8c9-6200bec97db3.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;如圖中標紅的類所示，它們都是用來解決偽共享問題的，我們以&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;BaseMpscLinkedArrayQueuePad1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;為例來看下它的實現：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;BaseMpscLinkedArrayQueuePad1&lt;/span&gt;&amp;lt;&lt;span&gt;E&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span&gt;AbstractQueue&lt;/span&gt;&amp;lt;&lt;span&gt;E&lt;/span&gt;&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p000, p001, p002, p003, p004, p005, p006, p007;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p008, p009, p010, p011, p012, p013, p014, p015;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p016, p017, p018, p019, p020, p021, p022, p023;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p024, p025, p026, p027, p028, p029, p030, p031;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p032, p033, p034, p035, p036, p037, p038, p039;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p040, p041, p042, p043, p044, p045, p046, p047;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p048, p049, p050, p051, p052, p053, p054, p055;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p056, p057, p058, p059, p060, p061, p062, p063;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p064, p065, p066, p067, p068, p069, p070, p071;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p072, p073, p074, p075, p076, p077, p078, p079;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p080, p081, p082, p083, p084, p085, p086, p087;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p088, p089, p090, p091, p092, p093, p094, p095;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p096, p097, p098, p099, p100, p101, p102, p103;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p104, p105, p106, p107, p108, p109, p110, p111;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p112, p113, p114, p115, p116, p117, p118, p119;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;BaseMpscLinkedArrayQueueProducerFields&lt;/span&gt;&amp;lt;&lt;span&gt;E&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span&gt;BaseMpscLinkedArrayQueuePad1&lt;/span&gt;&amp;lt;&lt;span&gt;E&lt;/span&gt;&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// 生產者操作索引（並不對應緩衝區 producerBuffer 中索引位置）&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;protected&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;producerIndex;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;可以發現在這個類中定義了 120 個字節變量，這樣緩存行大小不論是 64 字節還是 128 字節，都能保證字段間的隔離。如圖中所示&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;AbstractQueue&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;和&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;BaseMpscLinkedArrayQueueProducerFields&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;中的變量一定會&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;被分配到不同的緩存行&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;中。同理，藉助&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;BaseMpscLinkedArrayQueuePad2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;中的 120 個字節變量，&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;BaseMpscLinkedArrayQueueProducerFields&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;和&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;BaseMpscLinkedArrayQueueConsumerFields&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;中的變量也會被分配到不同的緩存行中，這樣就避免了緩存的偽共享問題。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;其實除了 Caffeine 中有解決緩存偽共享問題的方案外，在 JDK 1.8 中引入了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@Contended&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;註解，它也可以解決緩存偽共享問題，如下所示為它在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;中的應用：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;ConcurrentHashMap&lt;/span&gt;&amp;lt;K,V&amp;gt;&amp;nbsp;&lt;span&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span&gt;AbstractMap&lt;/span&gt;&amp;lt;K,V&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span&gt;ConcurrentMap&lt;/span&gt;&amp;lt;K,V&amp;gt;, Serializable {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;@sun&lt;/span&gt;.misc.Contended&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;static&lt;/span&gt;&amp;nbsp;&lt;span&gt;final&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;CounterCell&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;value;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; CounterCell(&lt;span&gt;long&lt;/span&gt;&amp;nbsp;x) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre style="text-align:left"&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;其中的內部類&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;CounterCell&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;被標記了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@sun.misc.Contended&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;註解，表示該類中的字段會與其他類的字段相隔離，如果類中有多個字段，實際上該類中的變量間是不隔離的，這些字段可能被分配到同一緩存行中。因為&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;CounterCell&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;中只有一個字段，所以它會被被分配到一個緩存行中，剩餘緩存行容量被空白內存填充，本質上也是一種以空間換時間的策略。這樣其他變量的變更就不會影響到&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;CounterCell&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;中的變量了，從而避免了緩存偽共享問題。&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;這個註解不僅能標記在類上，還能標記在字段上，拿我們的的代碼來舉例：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;TestFalseSharing&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;static&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;Pointer&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;@Contended("cacheLine1")&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;long p1, p2, p3, p4, p5, p6, p7;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;@Contended("cacheLine2")&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;y;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;return&lt;/span&gt;&amp;nbsp;&lt;span&gt;"x="&lt;/span&gt;&amp;nbsp;+ x +&amp;nbsp;&lt;span&gt;", y="&lt;/span&gt;&amp;nbsp;+ y;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;
&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;&lt;span&gt;void&lt;/span&gt;&amp;nbsp;&lt;span&gt;testFalseSharing&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&amp;nbsp;&lt;span&gt;throws&lt;/span&gt;&amp;nbsp;InterruptedException {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre style="text-align:left"&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;它可以指定內容來&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;定義多個字段間的隔離關係&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;。我們使用註解將這兩個字段定義在兩個不同的緩存行中，執行結果耗時與顯示聲明字段佔位耗時相差不大，為 520ms。另外需要注意的是，要想使註解&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;Contended&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;生效，需要添加 JVM 參數&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;-XX:-RestrictContended&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
 &lt;span id="OSC_h3_3"&gt;&lt;/span&gt; 
 &lt;h3 style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;再談偽共享&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;避免偽共享的主要方法是代碼檢查，而且偽共享可能不太容易被識別出來，因為只有在線程訪問的是不同且碰巧在主存中相鄰的全局變量時才會出現偽共享問題，線程的局部存儲或者局部變量不會是偽共享的來源。此外，解決偽共享問題的本質是以空間換時間，所以並不適用於在大範圍內解決該問題，否則會造成大量的內存浪費。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/7bafa35a-90f7-48c8-8f49-5a34b1595a0b.png" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span&gt;&lt;span&gt;掃一掃，加入技術交流羣&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#858585"&gt;本文分享自微信公眾號 - 京東雲開發者（JDT_Developers）。&lt;br&gt; 如有侵權，請聯繫 support@oschina.cn 刪除。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4090830/blog/18683171</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18683171</guid>
      <pubDate>Tue, 19 Aug 2025 03:14:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>騰訊 Kuikly 開源框架新增支持 Web</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;Kuikly 是騰訊廣泛應用的跨端開發框架，基於 Kotlin Multiplatform 技術構建，為開發者提供了技術棧更統一的跨端開發體驗，由騰訊大前端領域 Oteam（公司級）推出。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;本次在 Android、iOS、鴻蒙開源基礎上，將新增開源 Web 版，支持&lt;strong style="color:#3e4753"&gt;H5&lt;/strong&gt;和&lt;strong style="color:#3e4753"&gt;微信小程序&lt;/strong&gt;，進一步擴展多端適配場景。Kuikly 適配的 H5 和微信小程序已接入騰訊多款業務，如搜狗輸入法、鵝毛市集、QQ 小遊戲等。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Kuikly Web 版在 H5 和微信小程序上已經實現了絕大多數核心組件能力，運行效果如下：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img alt="" height="458" src="https://oscimg.oschina.net/oscnet/up-26eba6de49c36b7b6604edca4017c18a207.gif" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;Kuikly 是基於客户端技術棧設計，在支持 Android、iOS、鴻蒙高性能跨端的基礎上，拓展支持 H5 和小程序，以達到更多端的複用。這與一些業界跨端框架定位是類似的，如 Flutter、Compose Multiplatform 等。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;官方從其中挑選了兩個框架，從多個維度與它們對比在 H5 與微信小程序場景下的差異。&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;產物大小&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;在 H5 平台上，三個框架編譯產物大小差別很大，Kuikly 包體積優勢明顯。&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;業界基於終端技術棧的跨端方案，都是通過自繪引擎，通過 WASM 技術運行在瀏覽器上，編譯後產物體積很大。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;Kuikly Web 使用 DOM 渲染方案，不依賴第三方產物，產物遠小於其他框架，只有 463KB。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="333" src="https://oscimg.oschina.net/oscnet/up-5b25ce97181f67aff6ea73e9b3980f446fe.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;頁面加載速度&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;在 iOS，Android 和 PC 瀏覽器環境進行性能測試 (運行 Hello World Demo)，Kuikly 在三個瀏覽器環境下加載速度都是最快的。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;iOS 加載速度對比&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img alt="" height="270" src="https://oscimg.oschina.net/oscnet/up-27280d66307e6df8ddd303421bb8a23aad6.gif" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;Android 加載速度對比&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img alt="" height="278" src="https://oscimg.oschina.net/oscnet/up-28e3107909042c55583b2ec7091dd435b7a.gif" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;PC 性能數據對比&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;在 MacBook Pro M4Pro 電腦的 Chrome 瀏覽器 (138.0.7204.158) 上，使用開發者工具上進行了詳細的性能測試。測出 Kuikly 的 FCP 耗時僅為 87.76ms，不到其他框架的一半。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;img height="330" src="https://oscimg.oschina.net/oscnet/up-3f8064ac0857c8405a77ac1d882e7541d0b.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;其他優勢&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;在 H5 平台上與主流跨端框架對比，Kuikly 還具有以下優勢：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;開發體驗: &amp;nbsp;Android Studio 完善的開發支持。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;代碼調試: &amp;nbsp;可直接調試 JS 或通過 SourceMap 調試 Kotlin。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;SEO 友好: &amp;nbsp;採用 DOM 渲染，傳統的 SEO 優化都可以生效。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;兼容性好: &amp;nbsp;僅依賴 ES6 和 CSS3 特性，大部分設備都支持。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;生態複用: &amp;nbsp;編譯產物是 JS，採用 DOM 渲染方案，可通過 Kuikly 自定義擴展複用 React 等 H5 生態庫。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4 style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;微信小程序支持&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;主流的基於終端技術棧的跨端框架，缺少官方微信小程序運行方案支持，&lt;strong style="color:#3e4753"&gt;Kuikly Web 版微信小程序&lt;/strong&gt;的出現填補了這部分空白。&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;Kuikly 的架構設計回顧&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;簡單迴歸一下 Kuikly 的整體架構，跨端 Core 層處理框架核心邏輯，Render 層負責不同平台渲染。新平台接入 Kuikly 需要實現自己的 Render 層。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;img height="271" src="https://oscimg.oschina.net/oscnet/up-00796c13ed7fc388ea9fbfaaeea7c5acbac.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;Kuikly Web 版本整體方案設計&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;在進行 Kuikly Web 版 H5 和微信小程序適配工作時，發現許多代碼可以共用，因此抽象了一個&lt;strong style="color:#3e4753"&gt;Web 容器運行時&lt;/strong&gt;作為適配層，這個適配層依賴抽象的&lt;strong style="color:#3e4753"&gt;DOM API&lt;/strong&gt;、&lt;strong style="color:#3e4753"&gt;KuiklyWindow&lt;/strong&gt;、&lt;strong style="color:#3e4753"&gt;KuiklyDocument&lt;/strong&gt;，實現了絕大部分 Render 邏輯。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="459" src="https://oscimg.oschina.net/oscnet/up-b5941e643a63f02ecd410ab78aec4fe93db.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;Web 容器運行時&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0px; margin-right:0px; text-align:justify"&gt;&lt;span style="color:#000000"&gt;通過抽象核心接口構建 Web 容器運行時，實現了以下能力：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;將 Kuikly 的 UI 操作轉換為標準 DOM 操作&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;為差異化模塊（動畫/列表/文本測量等）提供擴展接口&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;支持 JS 宿主通過實現 Web 容器運行時接口，接入 Kuikly&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;H5 運行時&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;瀏覽器提供了標準的 DOM，Window，Document。Kuikly 適配 H5 時只需實現動畫，滾動列表，文本測量等少部分 Web 容器運行時拓展接口。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="255" src="https://oscimg.oschina.net/oscnet/up-de16c24658498c58d968d9839cc175a565b.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;微信小程序運行時&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;項目團隊在適配微信小程序之前，調研了目前支持微信小程序的跨端框架。這些框架基本都是基於前端技術，在微信小程序上基本採用編譯時或者運行時方案，最終都是數據驅動模板完成 UI 渲染。如下圖：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="441" src="https://oscimg.oschina.net/oscnet/up-39acc3990f6fabf312c1dbbbd4917a4b113.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;借鑑了業界主流小程序框架 Tarojs 和 Kbone 的思路，結合 Kuikly 框架的特點，通過實現 Web 容器運行時接口，提供輕量級 DOM 和拓展接口實現，僅實現 Kuikly 需要的能力，並做了一系列針對 Kuikly 渲染流程的優化。如下圖：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="313" src="https://oscimg.oschina.net/oscnet/up-025a75a0f0cf58fe6c86b63b2afadf35565.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;目前 Kuikly 適配微信小程序的方案在性能上仍有不少優化空間，後續將會探索編譯 Kuikly 產物為 WASM，使用預編譯等方式優化 Kuikly 在微信小程序平台的體驗。&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0px; margin-right:0px; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;技術展望&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;繼續對 Kuikly Web 版進行性能優化，使用預編譯進一步提升小程序性能，同時減少編譯產物大小。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;探索使用 WASM 提升計算密集型任務的執行效率，優化 Kuikly Web 版的使用體驗&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;擴大 Kuikly Web 版支持範圍，下半年將開源 Electron 環境的適配&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367561</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367561</guid>
      <pubDate>Tue, 19 Aug 2025 02:37:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>字節跳動闢謠：與芯原股份並無 AI 芯片相關合作</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近日，業內消息傳字節跳動正與芯原股份聯手設計一款先進的 AI 算力芯片。對此，字節跳動相關負責人回覆稱：&lt;strong&gt;字節跳動與芯原股份並無 AI 芯片相關合作&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;這並不是字節跳動第一次傳出與其他廠商聯手設計 AI 芯片（處理器）。去年上半年，曾有外媒報道稱字節跳動與博通公司合作開發 AI 處理器，以確保有足夠多的高端芯片。這款 AI 處理器製程為 5nm，將由台積電製造。雖然設計工作進展順利，但標誌着設計階段結束和製造開始的「流片」尚未開始。字節跳動後續否認了「與博通合作開發 AI 芯片」相關傳聞。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-4f7ed7c637e5768388c84b63ed136901daa.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;去年 9 月，針對媒體報道的字節跳動計劃與台積電就 AI 芯片開展合作，字節方面回應表示，報道不實。字節跳動稱公司在芯片領域確實有一些探索，但還處於初期階段，主要是圍繞推薦、廣告等業務的成本優化，所有項目也完全符合相關的貿易管制規定。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367559</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367559</guid>
      <pubDate>Tue, 19 Aug 2025 02:31:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>快手發佈 Klear-Reasoner 模型，基於 Qwen3-8B-Base 打造</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;快手 Klear 語言大模型團隊&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fjbd-doTA48xw2Y86G8CWyg" target="_blank"&gt;推出&lt;/a&gt;了全新的 Klear-Reasoner 模型，基於 Qwen3-8B-Base 打造，在數學與代碼的多個權威基準測試中達到同規模模型的 SOTA 水平，並完整公開了訓練細節與全流程 pipeline。&lt;/p&gt; 
&lt;p&gt;據介紹，Klear-Reasoner 在 AIME2024、AIME2025、LiveCodeBench V5 和 V6 等基準測試中，不僅全面超越同規模的強力開源模型（包括 DeepSeek 蒸餾版 DeepSeek-R1-0528-8B），更是在 AIME2024 上取得了 90.5%、AIME2025 上取得了 83.2% 的驚人成績，直接登頂 8B 模型榜首。&lt;/p&gt; 
&lt;p&gt;&lt;img height="394" src="https://static.oschina.net/uploads/space/2025/0821/102021_MBtp_2720166.png" width="1144" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="924" src="https://static.oschina.net/uploads/space/2025/0821/102031_wKeK_2720166.png" width="1524" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Klear-Reasoner 模型的核心創新是 GPPO（Gradient-Preserving Clipping Policy Optimization）算法，通過 stop-gradient 將裁剪與梯度回傳解耦，保留了高熵 token 與負樣本的梯度，兼顧了穩定性和探索力。&lt;/p&gt; 
&lt;p&gt;訓練流程的洞察顯示：SFT 階段強調高質量少量數據優於海量低質數據；RL 階段代碼任務使用軟獎勵（通過率）優於硬獎勵，並過濾了測試用例中的缺陷數據以消除假陰性。&lt;/p&gt; 
&lt;p&gt;論文、模型與代碼均已公開，團隊稱該技術路線可復現、可推廣，為社區提供了 RLVR 任務的新範式。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;論文標題：Klear-Reasoner: Advancing Reasoning Capability via Gradient-Preserving Clipping Policy Optimization&lt;/li&gt; 
 &lt;li&gt;論文鏈接：https://arxiv.org/pdf/2508.07629&lt;/li&gt; 
 &lt;li&gt;Hugging Face 地址：https://huggingface.co/Suu/Klear-Reasoner-8B&lt;/li&gt; 
 &lt;li&gt;GitHub 地址：https://github.com/suu990901/KlearReasoner/tree/main&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367555</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367555</guid>
      <pubDate>Tue, 19 Aug 2025 02:21:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>《GPT-5 家族 SQL 能力評測報告》發佈</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-04cf3156161feafe5188e24a3bc155faa62.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;一、本期導覽與核心看點&lt;/h2&gt; 
&lt;p&gt;2025 年 8 月，&lt;strong&gt;我們迎來了 AI 發展史上的又一個里程碑 ------ &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenai.com%2Fzh-Hans-CN%2Fgpt-5%2F" title="GPT-5" target="_blank"&gt;GPT-5&lt;/a&gt; 家族的正式發佈。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;當整個科技界都在討論其通用能力的飛躍時，&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Factiontech%2Fsql-llm-benchmark" title="SCALE" target="_blank"&gt;SCALE&lt;/a&gt; 平台將目光聚焦於 SQL 能力：&lt;strong&gt;GPT-5 在 SQL 處理上的表現究竟如何？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;本期評測為針對 &lt;strong&gt;GPT-5&lt;/strong&gt; 家族的評測特別版，旨在對其 SQL 相關能力進行一次全面的基準測試。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;本期核心看點&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;旗艦模型表現分析&lt;/strong&gt; ：&lt;strong&gt;gpt-5-chat&lt;/strong&gt; 的評測結果顯示其能力存在特定短板，而 &lt;strong&gt;mini&lt;/strong&gt; 版本在本次測試的綜合表現中更為均衡。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;全方位的能力評估&lt;/strong&gt; ：通過多維度多指標的用例評估，分析了 &lt;strong&gt;GPT-5&lt;/strong&gt; 在不同場景下的實際性能，揭示了其理論能力與實踐應用的差異。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;數據驅動的模型選型&lt;/strong&gt; ：評測數據表明，不同版本的模型在處理 &lt;strong&gt;SQL 能力&lt;/strong&gt; 上各有千秋。本報告將基於數據，探討如何進行場景化選型。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;二、評測基準説明&lt;/h2&gt; 
&lt;p&gt;為確保本次特別評測的公正性與深度，我們沿用了成熟的三維評測體系。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;SQL 理解&lt;/strong&gt;：考察模型是否精準解析複雜查詢邏輯與用户意圖。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SQL 優化&lt;/strong&gt;：考察模型提升查詢效率與性能的意識。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;方言轉換&lt;/strong&gt;：考察模型在主流數據庫之間進行語法遷移的能力。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;接下來，我們將揭曉本次評測的詳細結果。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;* 測評數據截止時間 2025/8/20&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;三、本月榜單與焦點分析&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;GPT-5&lt;/strong&gt; 家族在 SQL 領域的評測結果並非簡單的性能遞減，不同版本間表現出顯著的能力分化，這凸顯了場景化選型的重要性。&lt;/p&gt; 
&lt;h3&gt;1. gpt-5-mini：綜合能力均衡&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;gpt-5-mini&lt;/strong&gt; 在本次評測中綜合表現領先，其在三個維度上展現了均衡且突出的能力。&lt;/p&gt; 
&lt;h4&gt;各維度表現得分&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;能力&lt;/th&gt; 
   &lt;th align="left"&gt;得分&lt;/th&gt; 
   &lt;th align="left"&gt;詳細説明&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;SQL 理解&lt;/td&gt; 
   &lt;td align="left"&gt;80.8&lt;/td&gt; 
   &lt;td align="left"&gt;執行準確性：87.1 / 執行計劃檢測：57.1 / 語法錯誤檢測：74.3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;方言轉換&lt;/td&gt; 
   &lt;td align="left"&gt;75.6&lt;/td&gt; 
   &lt;td align="left"&gt;大 SQL 轉換：54.8 / 國產數據庫：92.1 / 邏輯等價：74.2 / 語法錯誤檢測：85.7&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;SQL 優化&lt;/td&gt; 
   &lt;td align="left"&gt;68.4&lt;/td&gt; 
   &lt;td align="left"&gt;邏輯等價：63.2 / 優化深度：64.4 / 語法錯誤檢測：94.7&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;亮點與不足&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;亮點&lt;/strong&gt;：執行準確性高，可靠性強；在高級、複雜的優化任務中表現出色。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;不足&lt;/strong&gt;：常規優化能力並非頂級，處理大型、複雜 SQL 轉換時能力有限。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;綜合評價&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;綜合來看，&lt;strong&gt;gpt-5-mini&lt;/strong&gt; 在準確性、可靠性和複雜任務處理上表現均衡，適合追求穩定輸出和綜合性能的企業級應用。&lt;/li&gt; 
 &lt;li&gt;橫向對比來看，&lt;strong&gt;gpt-5-mini&lt;/strong&gt; 在 &lt;strong&gt;SQL 理解維度&lt;/strong&gt; 位列第三，&lt;strong&gt;方言轉換&lt;/strong&gt; 維度位列前五，綜合實力在參評模型中名列前茅。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. gpt-5-nano：高精度代碼生成器&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;gpt-5-nano&lt;/strong&gt; 表現出紮實和均衡的能力，其在三個維度上的得分非常接近。&lt;/p&gt; 
&lt;h4&gt;各維度表現得分&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;能力&lt;/th&gt; 
   &lt;th align="left"&gt;得分&lt;/th&gt; 
   &lt;th align="left"&gt;詳細説明&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;SQL 理解&lt;/td&gt; 
   &lt;td align="left"&gt;77.1&lt;/td&gt; 
   &lt;td align="left"&gt;執行準確性：85.7 / 執行計劃檢測：35.7 / 語法錯誤檢測 75.7&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;方言轉換&lt;/td&gt; 
   &lt;td align="left"&gt;66.4&lt;/td&gt; 
   &lt;td align="left"&gt;大 SQL 轉換：19.4 / 國產數據庫：100 / 邏輯等價：80.6 / 語法錯誤檢測：69.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;SQL 優化&lt;/td&gt; 
   &lt;td align="left"&gt;68.7&lt;/td&gt; 
   &lt;td align="left"&gt;邏輯等價：89.5 / 優化深度：55.6 / 語法錯誤檢測：100&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;亮點與不足&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;亮點&lt;/strong&gt;：生成的 SQL 語法正確性極高，結果可靠；邏輯轉換能力紮實。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;不足&lt;/strong&gt;：缺乏對 SQL 執行效率的深層理解；難以應對複雜、冗長的查詢遷移。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;綜合評價&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;gpt-5-nano 是一個出色的"SQL 代碼生成器"&lt;/strong&gt; ，適合嵌入自動化工作流，處理標準化的 "&lt;strong&gt;文本到 SQL&lt;/strong&gt;" 和簡單方言轉換任務。但對於需要深度優化和理解複雜查詢的場景，則非其所長。&lt;/li&gt; 
 &lt;li&gt;在本次評測的橫向對比中，&lt;strong&gt;gpt-5-nano&lt;/strong&gt; 憑藉其 SQL 優化能力進入榜單前五，但在其他維度的競爭中未顯現出明顯優勢。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. gpt-5-chat：能力特點分化&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;gpt-5-chat&lt;/strong&gt; 的綜合表現不如預期，其能力存在顯著的"偏科"現象。&lt;/p&gt; 
&lt;h4&gt;各維度表現得分&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;能力&lt;/th&gt; 
   &lt;th align="left"&gt;得分&lt;/th&gt; 
   &lt;th align="left"&gt;詳細説明&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;SQL 理解&lt;/td&gt; 
   &lt;td align="left"&gt;62.3&lt;/td&gt; 
   &lt;td align="left"&gt;執行準確性：57.1 / 執行計劃檢測：60.7 / 語法錯誤檢測 84.3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;方言轉換&lt;/td&gt; 
   &lt;td align="left"&gt;55.4&lt;/td&gt; 
   &lt;td align="left"&gt;大 SQL 轉換：3.2 / 國產數據庫：86.8 / 邏輯等價：71.0 / 語法錯誤檢測：66.7&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;SQL 優化&lt;/td&gt; 
   &lt;td align="left"&gt;56.0&lt;/td&gt; 
   &lt;td align="left"&gt;邏輯等價：52.6 / 優化深度：48.9 / 語法錯誤檢測：94.7&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;亮點與不足&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;亮點&lt;/strong&gt;：對複雜的優化策略和邏輯推理有深刻的理論理解。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;不足&lt;/strong&gt;：基礎執行的準確性堪憂，生成的 SQL 有較大概率出錯；無法處理複雜、大型的查詢遷移。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;綜合評價&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;gpt-5-chat&lt;/strong&gt; 在高級理論知識上表現出色，但在基礎執行的準確性上存在不足。這種能力分化表明，對模型的評估不應僅依據其通用能力，而需通過專業、細分的場景評測來確定其在特定領域的適用性。&lt;/li&gt; 
 &lt;li&gt;橫向來看，&lt;strong&gt;gpt-5-chat&lt;/strong&gt; 在各維度的榜單排名中均未進入前列，其綜合定位處於中游水平。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;四、總結與展望&lt;/h2&gt; 
&lt;p&gt;本次特別評測清晰地表明，&lt;strong&gt;GPT-5&lt;/strong&gt; 的發佈不僅是數字上的提升，更帶來了 AI 在 SQL 領域 &lt;strong&gt;專業化&lt;/strong&gt; 和 &lt;strong&gt;場景化&lt;/strong&gt; 的深刻變革。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;場景定義模型&lt;/strong&gt; ：評測結果表明，企業在選擇模型時，應更多地從具體應用場景出發（複雜分析、數據遷移等），而非僅僅依據模型的"名號"或通用能力排名。&lt;strong&gt;gpt-5-mini&lt;/strong&gt; 的勝出，是"場景定義價值"的最佳體現。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;專業化趨勢&lt;/strong&gt; ：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsqlflash.ai%2F" title="SQLFlash" target="_blank"&gt;SQLFlash&lt;/a&gt; 在優化領域的絕對優勢，與 &lt;strong&gt;GPT-5 家族&lt;/strong&gt; 內部的能力分化，共同揭示了未來 AI 發展的趨勢------通用大模型與領域專用模型將長期共存，互為補充。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;五、下期展望：&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;GPT-5 家族&lt;/strong&gt; 的評測結果揭示了模型能力的巨大分化，也對我們的評測體系提出了新的要求。本月我們將：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;引入新玩家&lt;/strong&gt;：隨着 AI 領域的加速發展，我們將引入更多備受關注的新模型，為用户提供更全面的市場視圖。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;聚焦專用工具&lt;/strong&gt; ：除了通用模型，我們還將對新興的 &lt;strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsqlshift.cn%2F" title="SQLShift" target="_blank"&gt;SQLShift&lt;/a&gt;&lt;/strong&gt; 方言轉換應用進行深度剖析，檢驗其在複雜遷移場景下的真實表現。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;感謝您的關注。我們致力於通過最專業、最深入的評測，為您揭示 AI 在數據領域的前沿進展。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;SCALE：為專業 SQL 任務，選專業 AI 模型。&lt;/strong&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/actiontechoss/blog/18688968</link>
      <guid isPermaLink="false">https://my.oschina.net/actiontechoss/blog/18688968</guid>
      <pubDate>Tue, 19 Aug 2025 02:20:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>字節跳動發佈開源大語言模型 Seed-OSS</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;字節跳動的 Seed 團隊宣佈推出一系列開源大型語言模型 ——Seed-OSS。該系列模型旨在滿足國際化（i18n）應用場景的需求，專注於強大的長文本理解、推理能力和靈活的開發者友好特性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Seed-OSS 系列模型基於流行的因果語言模型架構，採用了 RoPE、GQA 注意力機制、RMSNorm 和 SwiGLU 激活函數。&lt;span&gt;最新&lt;/span&gt;發佈的 Seed-OSS-36B 模型擁有 360 億個參數，具備 512K 的長上下文處理能力。儘管該模型僅使用了 12 萬億個訓練數據，其在多個流行的基準測試中表現出色。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="329" src="https://oscimg.oschina.net/oscnet/up-6f87300068922ebee13eab7802b4dd4e241.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Seed-OSS 模型系列包括兩種版本：帶有合成指令數據的 Seed-OSS-36B-Base 和不帶合成指令數據的 Seed-OSS-36B-Base-woSyn。這種設計不僅為開發者提供了高性能的基礎模型，還為研究者提供了更為多樣化的選擇，以確保研究的有效性不受合成數據的影響。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;該模型的關鍵特性之一是 「思考預算」 的靈活控制，允許用户根據需要動態調整推理的長度。這種能力在實際應用場景中大大提高了推理的效率。此外，Seed-OSS 特別優化了推理任務，確保在保持良好一般能力的同時，推理能力也得到了增強。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="375" src="https://static.oschina.net/uploads/space/2025/0821/102210_RBBH_4252687.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在發佈會上，Seed 團隊強調，Seed-OSS 模型不僅適用於學術研究，還可廣泛應用於各類開發任務，例如工具使用和問題解決等代理智能任務。模型的訓練和評估結果表明，Seed-OSS 在知識問答、數學推理、編程等任務中的表現達到了開源領域的領先水平。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;對於希望參與的開發者，Seed 團隊提供了詳細的快速入門指南。用户只需通過 pip 安裝相關依賴，即可輕鬆下載和使用 Seed-OSS 模型。此外，團隊還支持多種量化方式以降低內存使用，提高模型的運行效率。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367553</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367553</guid>
      <pubDate>Tue, 19 Aug 2025 02:20:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>PAC2025：鯤鵬平台「挑大樑」，國產算力點燃青春力量</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#000000; text-align:left"&gt;8 月的鄂爾多斯，國際會展中心內鍵盤敲擊聲密集如潮，一場國產算力生態技術人才的「巔峯對決」——&lt;strong&gt;第十二屆並行應用挑戰賽（&lt;/strong&gt;&lt;strong&gt;PAC 2025）&lt;/strong&gt;總決賽在此上演。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;從 2013 年創辦時的「星星之火」，到如今覆蓋全國 45 座城市、吸引 400 餘家單位參與，PAC 大賽早已不是單純的技術比拼，更成為國產算力平台「鯤鵬」展現實力、培育青年人才的核心舞台。當 200 多支參賽隊伍帶着優化方案角逐賽場，我們看到的不僅是一場熱鬧的賽事，更是國產算力從「能用」向「好用」「廣泛用」邁進的堅實步伐。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;回溯這一歷程，PAC 大賽恰如一面鏡子：早期參賽方案多基於國外技術體系，而最近兩屆大賽的顯著特徵是，參賽作品主要構建在「鯤鵬」全棧創新生態之上。從「跟跑」到「並跑」，再到局部「領跑」，大賽見證了國產算力平台實現從芯片、基礎軟件到應用生態的完整突破。如今，「鯤鵬」生態的技術自主性與國際主流體系形成有益互補。這場持續十二年的技術馬拉松，正以中國方案為全球算力發展注入新動能。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;img alt="圖片 1.jpg" height="375" src="https://oscimg.oschina.net/oscnet//a76e45629124dc1d9b0cef6c86252456.jpg" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;鯤鵬：國產算力的「硬核底座」，讓高性能計算告別「卡脖子」&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;「鯤鵬」到底是什麼？&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;簡單來説，它是一套完全國產化的高性能計算體系——從底層的 ARM 架構 CPU，到上層的 openEuler 操作系統、國產工具鏈，每一環都是「中國造」。過去，國內高性能計算領域常依賴國外芯片和平台，不僅成本高，還面臨技術「卡脖子」風險。而自 2024 年 PAC 大賽全面啓用「鯤鵬」平台後，這個「國產底座」終於有了大規模實戰檢驗的機會。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;在今年的&amp;nbsp;PAC 大賽中，「鯤鵬」的優勢被展現得淋漓盡致。比如在「性能突破」上，有參賽隊伍在「鯤鵬」CPU 上實現了與國外高端 GPU 相當的 AI 模型端到端訓練速度，而且支持超大批量數據計算時，模型收斂依然穩定——這意味着，今後訓練生成式 AI、處理海量數據，不用再依賴進口 GPU，國產平台就能扛下重擔。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;更讓人驚喜的是「鯤鵬」的&lt;strong&gt;適配能力&lt;/strong&gt;。無論是氣象預測需要的複雜數值算法，還是醫學研究中的分子動力學模擬，甚至是核能領域的中子輸運計算，「鯤鵬」都能通過優化適配，發揮出超強算力。南方科技大學與國家超級計算深圳中心的團隊，用「鯤鵬」平台做分子動力學研究時，針對 20 億個原子的超大規模體系計算，居然能保持 80% 的並行效率——通俗講，就是把一個複雜任務拆給多台機器同時算，還能保證「算得快、算得準」，這對新藥研發、材料科學突破至關重要。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;賽場見真章：&lt;/strong&gt;&lt;strong&gt;「&lt;/strong&gt;&lt;strong&gt;鯤鵬&lt;/strong&gt;&lt;strong&gt;」&lt;/strong&gt;&lt;strong&gt;支撐下的技術突破，從「實驗室」走向「真場景」&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;PAC 大賽的魅力，在於它不搞「紙上談兵」——賽題都源自產業真實需求，而「鯤鵬」平台則成為選手們將理論轉化為實踐的「利器」。今年的應用賽道和優化賽道上，一系列基於「鯤鵬」的技術突破，正在悄然改變多個行業的計算格局。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;在應用賽道，「解決實際問題」是核心目標。清華大學深圳國際研究生院的「Freagarthach」隊拿下特等獎，他們做的是生成式 AI 模型 DiT 的優化——簡單説，就是讓 AI 畫畫、寫文案時「跑得更快、更省資源」。團隊通過優化「鯤鵬」的內存調度和算法結構，不僅讓模型訓練速度提升，還降低了計算資源消耗。今後我們用 AI 生成設計圖、撰寫報告時，背後或許就有這套方案的影子。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;中山大學的團隊則把「鯤鵬」用在了更硬核的領域——地震模擬。地震預測需要處理海量地質數據，過去一次大規模模擬可能要跑好幾天。他們針對「鯤鵬」的硬件特性，優化了內存管理和並行計算策略：把地震模擬區域拆成多個子區域，讓不同計算節點同時運算，再通過高效通信合併結果。最終，模擬效率提升了近一倍，為地震災害預警爭取了更多寶貴時間。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;img alt="圖片 2.jpg" height="683" src="https://oscimg.oschina.net/oscnet//40c89d1fd60a28d09e4c26cd9427e66b.jpg" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;優化賽道則更像是「算力潛能挖掘大賽」——選手們要在「鯤鵬」平台上，把硬件潛力「榨乾到極致」。清華大學「黃加紅等於橙」隊的全棧優化方案堪稱典範：他們從硬件層面調整 CPU 與內存的配合（NUMA 綁核），減少數據等待時間；再到算法層面把複雜任務拆成小模塊（兩級分塊），讓計算更高效。這套方案讓目標應用的運行速度提升了數倍，相當於給「鯤鵬」裝上了「加速器」。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;還有山東大學「滴水 blow 隊」針對 AI 領域的「Attention 算子」優化，更是讓人眼前一亮。Attention 算子是 AI 模型（比如 ChatGPT）的核心計算模塊，過去算一次要 8880 毫秒，團隊通過「鯤鵬」平台的指令集優化、算子融合等技術，居然把時間縮短到 0.67 毫秒——速度提升了 1.3 萬倍！這意味着今後 AI 聊天、語音識別會更流暢，幾乎不用等待。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;img alt="圖片 3.jpg" height="897" src="https://oscimg.oschina.net/oscnet//f7ab2c2539003b32ab1e6e60fddbf1ce.jpg" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;不止於比賽：PAC 大賽為國產算力織就「生態網」&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;一場賽事的價值，遠不止於決出勝負。PAC 大賽的真正意義，在於它為國產算力搭建了「產學研用」的生態閉環，全方位賦能人才、技術與產業。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;首先是人才培養方面，過去高校教高性能計算，常面臨「學用脱節」——學生懂理論，但不會解決實際問題。而 PAC 大賽把氣象、醫療、核能等行業的真實需求變成賽題，學生在比賽中不僅要寫代碼，還要思考「技術怎麼落地」。更貼心的是，大賽還搞「競賽招聘」，華為等企業直接在賽場選人才，優秀選手能拿到實習機會。十多年來，大賽已培養超 1.3 萬名高性能計算人才，很多人如今成了華為、國家超算中心的骨幹，甚至返回來當大賽指導老師、評委——國產算力的「人才梯隊」就這樣建起來了。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;其次是「技術反哺」。參賽隊伍在優化過程中，會不斷髮現「鯤鵬」平台的改進空間：比如某個算法在「鯤鵬」上跑不快，某個操作系統功能待完善。這些問題反饋給平台方後，會直接推動國產軟硬件迭代升級。今年有團隊針對「鯤鵬」優化中子輸運計算時，提出的「混合精度計算」方案，就被納入了國產工具鏈更新——相當於選手們幫「鯤鵬」打補丁、升等級，讓這個國產平台越來越成熟。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;最後是「產業落地」。大賽中的很多成果，已經跳出賽場，走進了實際應用。比如有團隊做的「廣域海區計算優化」，實現了海洋聲場的快速建模，如今已被國家海洋環境預報中心用於海洋風能評估；還有醫學領域的「FP16 半精度差分算法」，能加速生物醫療數據處理，正在助力醫院提升疾病診斷效率。從「賽場」到「市場」，PAC 大賽讓「鯤鵬」的算力真正變成了推動產業發展的「生產力」。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;未來已來：青春力量引領全球算力新紀元&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;隨着 PAC 2025 總決賽在鄂爾多斯落幕，鍵盤敲擊聲雖已平息，但全球算力生態的變革浪潮正由新一代青年開發者掀起。這支以 95 後、00 後為主力的創新軍團，正突破「技術使用者」的侷限，在「鯤鵬」等自主平台上構建原創技術體系，更以跨學科視野探索算力賦能社會的無限可能。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;當算力成為數字文明的基礎設施，技術標準的互操作性和資源全球化調度，標誌着算力發展已進入協同創新階段。全球算力生態正迎來由青年開發者主導的深刻變革——從開源社區到國際競賽，技術創新的火花在多元文化碰撞中持續迸發。青春力量的核心使命，不僅共同參與書寫全球智慧的技術史詩，更為它注入了包容、開放、可持續的基因。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;站在 2025 年的節點回望，我們或許正在見證人類計算文明新紀元的開端。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367548</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367548</guid>
      <pubDate>Tue, 19 Aug 2025 01:43:00 GMT</pubDate>
      <author>作者: 開源科技</author>
    </item>
    <item>
      <title>議程公佈！8 月 26 日，openKylin 開發者大會 2025 邀您相聚北京</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//f977045ab64d05cd7ddfa44fac550370.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367546</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367546</guid>
      <pubDate>Tue, 19 Aug 2025 01:22:00 GMT</pubDate>
      <author>來源: 資訊</author>
    </item>
    <item>
      <title>微軟為 Excel 添加 =COPILOT() 函數，引入 LLM 能力</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微軟正在為 Excel 添加一項名為 =COPILOT() 的新函數，該功能將大型語言模型 (LLM) 的特性直接集成到電子表格的單元格中，可用於數據分析和內容生成。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1244" src="https://static.oschina.net/uploads/space/2025/0820/190354_6lID_2720166.png" width="1290" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;用户可以直接在網格內使用此函數來幫助填充單元格。根據指定的一組單元格數據，=COPILOT() 函數可以利用 AI 進行分析、生成內容和頭腦風暴。具體功能包括生成摘要、標籤、表格等。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-0c757914b31abe665f8fe19dd133ddcc775.webp" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;https://techcommunity.microsoft.com/blog/microsoft365insiderblog/bring-ai-to-your-formulas-with-the-copilot-function-in-excel/4443487&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367473</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367473</guid>
      <pubDate>Mon, 18 Aug 2025 11:06:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
  </channel>
</rss>
