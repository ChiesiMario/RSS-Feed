<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - industry - 繁體中文（香港）</title>
    <link>https://www.oschina.net/news/industry</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/industry" rel="self" type="application/rss+xml"/>
    <description>已對該 RSS 進行格式化操作：中英字符之間插入空格、使用直角引號、標點符號修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-hk</language>
    <lastBuildDate>Wed, 04 Jun 2025 21:40:29 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>快手開源</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;快手 Kwaipilot 團隊&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FEcH4GMRtVkvGByonRU5H-Q" target="_blank"&gt;宣佈開源 &lt;/a&gt;&lt;/u&gt;KwaiCoder-AutoThink-preview 自動思考大模型，針對近期深度思考大模型存在的「過度思考」問題進行了深入研究。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0604/191858_01w7_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;團隊不僅提出了一種全新的自動思考模型訓練範式，還基於傳統強化學習算法（GRPO），創新性地提出了帶有過程監督的強化學習方法 Step-SRPO，以進一步提升模型在複雜任務中的表現。&lt;/p&gt; 
&lt;p&gt;該模型融合了」思考「和」非思考「能力，並具備根據問題難度自動切換思考形態的能力。通過進行這種思考形態訓練，模型在多個「思考」和「非思考」評測榜單上均實現了性能提升，其中在部分代碼和數學類的任務上，開啓自動思考模式下的模型得分提升高達 20 分左右。更有趣的是，在部分榜單中，即使模型沒有開啓思考模式，受益於更優的推理形態，性能也有小幅上漲。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0604/191933_Ixbf_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif"&gt;Kwaipilot 團隊表示，&lt;/span&gt;未來&lt;span style="font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif"&gt;將基於 preview 版本模型，進一步增強推理能力，支持更完善的思考中工具使用能力，並將全部技術細節、訓練方法開源。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;模型開源地址：&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2FKwaipilot%2FKwaiCoder-AutoThink-preview" target="_blank"&gt;https://huggingface.co/Kwaipilot/KwaiCoder-AutoThink-preview&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353578</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353578</guid>
      <pubDate>Sat, 10 May 2025 11:21:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>WWDC25 看點：iOS 26、設備端 AI 模型開放、全新 UI</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;蘋果正式&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIwOTA2MzYwNA%3D%3D%26mid%3D2247517452%26idx%3D1%26sn%3D2892dc9e8dbe37d550f0589e5c6e934c%26scene%3D142%23wechat_redirect" target="_blank"&gt;宣佈&lt;/a&gt;將在北京時間 6 月 10 日至 14 日舉行年度全球開發者大會（WWDC25）。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0604/184449_HkMX_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;蘋果將帶來自 2013 年 iOS 7 發佈以來最重大的變革，從操作系統命名規則的歷史性調整到界面設計的全面革新，再到人工智能服務的深度整合。&lt;/p&gt; 
&lt;p&gt;據多個信源的知情人士透露，在 WWDC25 上，蘋果將宣佈改變其沿用多年的系統命名方式——&lt;a href="https://www.oschina.net/news/352495/apple-to-rebrand-device-operating-systems-ios-26"&gt;用年份標識取代順序版本號&lt;/a&gt;。這一調整將適用於蘋果所有的操作系統，包括 iOS、iPadOS、macOS、watchOS、tvOS 和 visionOS。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0604/184601_kL4m_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;系統外觀方面，蘋果將採用代號為"Solarium"的全新 UI。&lt;/p&gt; 
&lt;p&gt;新 UI 特點包括：明亮、半透明的玻璃質感元素、浮動式控件和彈出式菜單、更圓潤的圖標設計，接近「圓角方形」形態、以及統一的導航邏輯。&lt;/p&gt; 
&lt;p&gt;Solarium 意為「陽光房」，總體將會更光滑、現代，其借鑑了 visionOS 的大量元素，也就是會使用更多三維立體毛玻璃的設計。&lt;/p&gt; 
&lt;p&gt;此前的消息指出只有 iOS、iPadOS 和 macOS 會採用這個新 UI，而實際上它將拓展到所有蘋果的操作系統上，包括 tvOS 和 watchOS 都將全部進行重新設計，以保持體驗一致。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0604/184626_3MJt_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;蘋果在去年的 WWDC 重磅推出 Apple Intelligence——然而卻是畫了一張大餅。&lt;/p&gt; 
&lt;p&gt;所以今年 WWDC 將不會有太多 AI 上的大更新，在用户體驗層面，可能會帶來 Apple 智能驅動的全新省電功能以及 AI 健康功能，並且將會為 Siri 語音助手引入 Google Gemini 助手。&lt;/p&gt; 
&lt;p&gt;對了，在 iOS 18 上延期的個人助理版 Siri 預計將於今年秋季配合 iPhone 17 系列最終發佈。&lt;/p&gt; 
&lt;p&gt;另一個比較大的更新是&lt;a href="https://www.oschina.net/news/350896"&gt;蘋果將開放其設備端的 AI 模型接口&lt;/a&gt;，允許開發者將 Apple 智能的大語言模型集成到自己的應用之中。&lt;/p&gt; 
&lt;p&gt;儘管 WWDC 主要聚焦軟件，但硬件新品仍有可能亮相。在 WWDC25 上，蘋果可能公佈的硬件有：配備 M4 系列芯片的新款 Mac Pro；配備攝像頭、支持手勢控制的新款 AirPods Pro 3。&lt;/p&gt; 
&lt;p&gt;相關來源&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkyNjU2ODM2NQ%3D%3D%26mid%3D2247613651%26idx%3D2%26sn%3Dd7d365a18fd87761a6e3e1e9eebc7d54%26scene%3D142%23wechat_redirect" target="_blank"&gt;WWDC25 前瞻：iOS 19 跳至 26，iPad 全面「Mac 化」&lt;/a&gt;&lt;br&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMjgzMTAwODI0MA%3D%3D%26mid%3D2652410254%26idx%3D1%26sn%3D0cdc786424018e5234810b65e28de7ef%26scene%3D142%23wechat_redirect" target="_blank"&gt;iPhone 新系統「陽光房」：毛玻璃設計，打通蘋果全家桶&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353573</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353573</guid>
      <pubDate>Sat, 10 May 2025 10:47:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>通用型 AI 智能體 Manus 新增「文字生成視頻」功能</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;通用型 AI 智能體 Manus 新增了原生的「文字生成視頻」功能，目前已經面向付費會員用户開放搶先體驗，Basic、Plus、Pro 用户現可使用文本指令生成視頻。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img height="994" src="https://static.oschina.net/uploads/space/2025/0604/162810_kMej_2720166.png" width="1266" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Manus 在 X 平台上&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2FManusAI_HQ%2Fstatus%2F1929913745503072551" target="_blank"&gt;表示&lt;/a&gt;&lt;/u&gt;，其 AI 智能體可以在幾分鐘內根據文本提示詞生成結構化、井然有序的視頻故事，後續將面向所有人推出。&lt;/p&gt; 
&lt;p&gt;&lt;img height="956" src="https://static.oschina.net/uploads/space/2025/0604/163121_BzOt_2720166.png" width="1904" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0604/163210_3iIk_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FGAfTx0wXC4vFYgQAyLaGLQ" target="_blank"&gt;據介紹&lt;/a&gt;，Manus 視頻生成功能建立在大型行動模型（LAM）技術基礎上。不同於傳統 AI 僅專注於單一任務，Manus 採用向量化處理方式，通過跨應用調用工具來實現從用户指令到最終成果的完整流程。&lt;/p&gt; 
&lt;p&gt;當用户需要生成視頻時，系統並非直接生成，而是智能調度各類資源，整合多種技術手段，最終呈現高質量視頻內容。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353537/manus-video-generation</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353537/manus-video-generation</guid>
      <pubDate>Sat, 10 May 2025 08:33:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>中國 AI Coding 市場在 2025 年迎來應用爆發期</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;國際數據公司（IDC）於近日發佈了《中國市場代碼生成產品評估，1H25》，報告對 AI Coding 產品進行了市場分析和調研，並測試了中國市場的主流產品，從核心代碼實現、註釋質量、工程化引導三個維度進行模型打分，並對產品整體能力進行評估，來為市場用户提供選型參考。&lt;/p&gt; 
&lt;p&gt;根據報告數據，AI Coding 市場在 2025 年迎來應用爆發期，更多技術供應商基於代碼工程化優勢發佈和更新產品，&lt;strong&gt;AI 編碼助手在產品界限上逐漸模糊，集成編程助手、工具、模型、對話交互界面等多種能力&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;此外，各個模型之間的差距在縮小，已經可以幫助開發者完成簡單任務的端到端實現，並對複雜任務搭建框架，在 RAG / 知識庫、聯網搜索、跨文件檢索上持續更新，各家廠商的競爭也逐漸收斂到用户入口和獨立 IDE 產品上。&lt;/p&gt; 
&lt;p&gt;中國市場仍有極大發展空間，AI 編程助手對開發者的覆蓋率在 30%。而美國已有 91% 的開發者使用 AI 工具，且超過 50% 的受訪者表示採用 OpenAI ChatGPT 來創建生產級應用程序。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0604/152404_eUUg_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0604/152711_rUXz_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0604/152733_keWG_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;另一項調研顯示，使用 AI 編碼助手的開發人員平均生產力提高了 35%，其中超過 20% 的受訪者表示對其生產效率的提升超過 50%。&lt;/p&gt; 
&lt;p&gt;開發者使用 AI 編程助手可以執行各種與開發相關的任務，不僅是代碼生成和補全，還包括單元測試生成、代碼版本自動升級以及自定義企業編碼規範。約 50% 的開發者認為增強團隊協作、提高工作滿意度、加快問題解決速度是編程助手的主要優勢，當前 AI 的核心能力在於提高開發者的生產效率，並非創新。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353521</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353521</guid>
      <pubDate>Sat, 10 May 2025 07:28:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>「互聯網女皇」發佈 340 頁 AI 趨勢報告</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;被稱為「互聯網女皇」的 Mary Meeker 在沉寂數年後，於 2025 年 5 月 30 日再次發佈了其標誌性的深度趨勢報告 &lt;em&gt;《Trends – Artificial Intelligence》。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;這位曾經的摩根士丹利明星分析師，如今的風險投資公司 Bond Capital 創始合夥人，通過這份長達 340 頁的重磅報告詳細介紹了 AI 的發展現況、未來趨勢等內容。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-ffbb618303f41e093ce8bb8a50c8fd50dc7.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0604/151307_ToP4_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;如果用一個詞來形容這份報告，會是「史無前例」，即 AI 史無前例的發展速度和普及度：AI 的用户增長、技術迭代和全球擴散速度遠超以往任何技術浪潮，如互聯網。&lt;/p&gt; 
&lt;p&gt;報告稱：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ChatGPT 在 17 個月內用户數就突破了 8 億，這是史無前例的；&lt;/li&gt; 
 &lt;li&gt;AI 公司數量以及如此多的公司實現高年經常性收入的速度是史無前例的；&lt;/li&gt; 
 &lt;li&gt;AI 模型的推理成本下降速度是史無前例的——雖然訓練一個大模型的成本最高要 10 億美元，但推理成本兩年內下降了 99%；&lt;/li&gt; 
 &lt;li&gt;AI 公司以極低成本匹配競爭對手模型功能的速度也是史無前例的。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0604/151356_jTsS_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0604/151448_ufHT_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0604/151723_EMvF_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;報告指出，AI 唯一沒有超越其它科技革命的領域是財務回報，暫時還不知道哪些公司能成長為長期盈利的下一代科技巨頭。&lt;/p&gt; 
&lt;p&gt;Mary 在報告中提到，目前主流的 AI 企業其估值與收入的差距過大。具體來看，Perplexity 在估值/收入倍數中，達到了約 75 倍的差距，而 OpenAI 則以 92 億美元的年收入、預計 3000 億美元的估值獲得了 33 倍的差距。&lt;/p&gt; 
&lt;p&gt;而在近一年時間中，中國的模型通過低成本的方式，打破了各大 AI 企業的高昂價格「泡沫」。Mary 對此表示：「投資人，請只投你願意損失的金額」。&lt;/p&gt; 
&lt;p&gt;更多報告內容查看：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bondcap.com%2Freports%2Ftai" target="_blank"&gt;https://www.bondcap.com/reports/tai&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353516/trends%E2%80%93artificial-intelligence</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353516/trends%E2%80%93artificial-intelligence</guid>
      <pubDate>Sat, 10 May 2025 07:15:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>SQL 優化：提升數據庫性能的藝術</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;隨着大數據時代的到來，數據庫在處理海量數據和複雜查詢時的重要性愈發凸顯。而對於開發人員和數據庫管理員來説，SQL 優化是一個必須掌握的技能。SQL 優化不僅能提高查詢效率，減少資源消耗，還能提升整個應用系統的響應速度和用户體驗。在本文中，我們將深入探討 SQL 優化的常見技巧和策略，幫助你在實際工作中應對各種性能瓶頸。&lt;/p&gt; 
&lt;h2&gt;什麼是 SQL 優化？&lt;/h2&gt; 
&lt;p&gt;SQL 優化指的是通過一系列方法和技巧，使得 SQL 查詢語句的執行更加高效，減少系統資源的消耗，進而提升數據庫的整體性能。SQL 優化可以從多個層面進行，包括數據庫設計優化、查詢語句優化、索引優化以及硬件資源的合理利用等。&lt;/p&gt; 
&lt;h2&gt;SQL 優化的基本原則&lt;/h2&gt; 
&lt;p&gt;在進行 SQL 優化之前，我們需要理解幾個基本的優化原則：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;減少 I/O 操作&lt;/strong&gt;：每次查詢都需要訪問磁盤，因此減少不必要的磁盤 I/O 操作是提高性能的關鍵。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;減少數據掃描量&lt;/strong&gt;：儘量避免全表掃描，選擇性地讀取數據，能夠有效減少查詢的開銷。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;避免不必要的排序和計算&lt;/strong&gt;：排序和計算會消耗大量的 CPU 和內存資源，儘量避免不必要的計算和排序。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;使用合適的索引&lt;/strong&gt;：合理的索引可以大大提高查詢效率，但索引的創建也需要謹慎，過多的索引會增加數據庫的寫入開銷。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;考慮執行計劃&lt;/strong&gt;：通過分析查詢的執行計劃，可以幫助識別出性能瓶頸所在。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;常見的 SQL 優化技巧&lt;/h2&gt; 
&lt;h3&gt;1. 使用索引優化查詢&lt;/h3&gt; 
&lt;p&gt;索引是數據庫優化中最常用的工具之一。通過索引，數據庫可以更快速地查找到目標數據，避免全表掃描。但索引的使用也要講究方法，濫用索引會導致性能下降。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;選擇性字段&lt;/strong&gt;：對於高選擇性的字段（例如主鍵、唯一鍵），索引效果最好。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;避免在小表上創建索引&lt;/strong&gt;：小表查詢的速度通常較快，創建索引可能得不償失。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;合理使用聯合索引&lt;/strong&gt;：聯合索引可以提升多列查詢的效率，但過多的聯合索引會增加數據庫的負擔。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. 優化 SQL 查詢語句&lt;/h3&gt; 
&lt;p&gt;編寫高效的 SQL 語句是 SQL 優化的基礎，下面是一些常見的優化建議：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;**避免 SELECT ***：在查詢時，儘量明確指定需要的列，而不是使用&lt;code&gt;SELECT *&lt;/code&gt;，這樣可以減少不必要的數據傳輸。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;避免在 WHERE 子句中使用函數&lt;/strong&gt;：在&lt;code&gt;WHERE&lt;/code&gt;子句中使用函數（例如&lt;code&gt;DATE()&lt;/code&gt;、&lt;code&gt;LOWER()&lt;/code&gt;等）會導致全表掃描，儘量避免。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;合理使用 JOIN&lt;/strong&gt;：JOIN 操作有時會導致大表之間的全表掃描，儘量避免連接大量數據，必要時使用&lt;code&gt;INNER JOIN&lt;/code&gt;替代&lt;code&gt;LEFT JOIN&lt;/code&gt;，因為&lt;code&gt;INNER JOIN&lt;/code&gt;效率更高。&lt;/li&gt; 
 &lt;li&gt;**避免在子查詢中使用 SELECT ***：子查詢中如果使用了&lt;code&gt;SELECT *&lt;/code&gt;，會導致不必要的數據計算，儘量只選擇需要的列。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;限制返回的行數&lt;/strong&gt;：通過使用&lt;code&gt;LIMIT&lt;/code&gt;或&lt;code&gt;TOP&lt;/code&gt;限制返回的數據行數，避免返回大量無用的數據。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. 合理設計數據庫表&lt;/h3&gt; 
&lt;p&gt;數據庫的設計對性能有着直接的影響。良好的數據庫設計能夠減少查詢時的數據冗餘，並提高數據的可訪問性。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;規範化與反規範化&lt;/strong&gt;：數據庫表的規範化可以減少數據冗餘，提高數據一致性；但在某些場景下，反規範化（例如合併表）能夠減少 JOIN 的次數，提升查詢效率。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;數據類型選擇&lt;/strong&gt;：選擇合適的數據類型可以有效減少存儲空間，進而提高查詢效率。例如，使用&lt;code&gt;INT&lt;/code&gt;代替&lt;code&gt;VARCHAR&lt;/code&gt;存儲數字類型數據。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;避免使用過長的文本字段&lt;/strong&gt;：過長的&lt;code&gt;TEXT&lt;/code&gt;或&lt;code&gt;BLOB&lt;/code&gt;字段在查詢時可能會佔用大量資源，儘量避免在查詢中直接使用。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;4. 優化索引的使用&lt;/h3&gt; 
&lt;p&gt;合理使用索引能夠顯著提高 SQL 查詢性能，但過多的索引會導致數據庫更新操作變慢，甚至影響數據庫的寫入性能。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;單列索引與複合索引&lt;/strong&gt;：在創建索引時，儘量使用複合索引，特別是對於多列查詢的情況。複合索引在涉及多個字段的查詢時，會顯著提高性能。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;定期維護索引&lt;/strong&gt;：隨着數據的不斷更新，索引可能會變得低效。定期重建或優化索引可以保持查詢效率。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;避免在頻繁更新的列上創建索引&lt;/strong&gt;：索引的創建和維護會增加寫操作的開銷，因此在寫入頻繁的字段上不要創建索引。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;5. 使用查詢緩存&lt;/h3&gt; 
&lt;p&gt;許多數據庫管理系統（如 MySQL）提供查詢緩存功能。如果一個查詢請求的結果已經被緩存，那麼在後續相同查詢請求時，數據庫可以直接返回緩存中的結果，而不需要重新計算。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;開啓查詢緩存&lt;/strong&gt;：在適當的場合，可以啓用數據庫的查詢緩存功能，減少數據庫的計算壓力。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;定期清理緩存&lt;/strong&gt;：緩存中的數據有時會失效，需要定期清理和更新緩存。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;6. 分區表與分庫分表&lt;/h3&gt; 
&lt;p&gt;對於海量數據表，分區表與分庫分表是一種常見的優化方式。通過將數據分佈到多個物理存儲位置，可以提高查詢性能，降低單一數據庫的壓力。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;分區表&lt;/strong&gt;：將大表按某些規則（如時間、ID 範圍等）劃分為多個分區，每個分區可以單獨存儲和查詢。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;分庫分表&lt;/strong&gt;：將數據庫按照一定規則（如按用户 ID、地理區域等）進行拆分，減少單一數據庫的壓力，提高查詢效率。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;SQL 優化的監控與分析&lt;/h2&gt; 
&lt;p&gt;在進行 SQL 優化時，除了優化策略外，監控和分析執行計劃同樣重要。常見的分析工具包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;EXPLAIN 命令&lt;/strong&gt;：在執行 SQL 語句時，使用&lt;code&gt;EXPLAIN&lt;/code&gt;命令可以查看查詢的執行計劃，幫助開發者瞭解查詢是如何執行的，以及可能存在的瓶頸。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;慢查詢日誌&lt;/strong&gt;：通過開啓慢查詢日誌，可以記錄所有執行時間超過閾值的查詢，幫助開發者找到性能瓶頸並進行針對性優化。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;數據庫性能監控工具&lt;/strong&gt;：例如，MySQL 的&lt;code&gt;Percona Toolkit&lt;/code&gt;、Oracle 的&lt;code&gt;AWR 報告&lt;/code&gt;，以及 PostgreSQL 的&lt;code&gt;pg_stat_statements&lt;/code&gt;等工具，能夠幫助開發者實時監控數據庫的性能，並提供優化建議。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;結語&lt;/h2&gt; 
&lt;p&gt;SQL 優化是一項系統化的工作，需要從數據庫設計、查詢語句、索引策略以及硬件資源等多個方面入手。通過掌握常見的 SQL 優化技巧和策略，我們可以在開發過程中有效提升數據庫的性能，確保系統能夠應對高併發、大數據量的挑戰。&lt;/p&gt; 
&lt;p&gt;當然，SQL 優化並非一蹴而就，它需要不斷的實踐和經驗積累。在優化過程中，合理平衡查詢效率與系統資源消耗，始終是我們追求的目標。希望本文的分享能為你的 SQL 優化之路提供一些幫助和啓發。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353509</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353509</guid>
      <pubDate>Sat, 10 May 2025 06:56:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>Anthropic 「封殺」 Windsurf</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;AI 編程工具 Windsurf 開發商&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwindsurf.com%2Fblog%2Fanthropic-models" target="_blank"&gt;發佈公告稱&lt;/a&gt;&lt;/u&gt;，Anthropic 在幾乎沒有預先通知的情況下切斷了 Windsurf 的 API 訪問權限。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0604/143502_jh84_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;根據 Windsurf 的聲明，Anthropic 在提前不到一週的通知時間內，切斷了其幾乎所有 Claude 3.x 模型的直接訪問權限 (first-party capacity)，具體涉及的模型包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Claude 3.5 Sonnet&lt;/li&gt; 
 &lt;li&gt;Claude 3.7 Sonnet&lt;/li&gt; 
 &lt;li&gt;Claude 3.7 Sonnet Thinking&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;由於 Windsurf 從未獲得 Claude 4 的直接訪問權限，等於直接被 Anthropic 徹底封殺了。&lt;/p&gt; 
&lt;p&gt;Windsurf CEO Varun Mohan&amp;nbsp;表示，Windsurf 一直希望支付服務費用以獲得完整訪問權限，對 Anthropic 這一決定和通知時間之短感到失望。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0604/144530_0dYo_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Windsurf 目前雖有部分第三方算力資源，但遠不能滿足需求，短期內可能影響用户訪問 Claude 模型的穩定性。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353506</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353506</guid>
      <pubDate>Sat, 10 May 2025 06:42:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>QuantumGuard OS 發佈：全球首個融合後量子加密的物聯網邊緣操作系統</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;QuantumGuard OS 發佈：全球首個融合後量子加密的物聯網邊緣操作系統，通過 FIPS 140-3 認證&amp;nbsp;&lt;em&gt;在物聯網安全威脅日益嚴峻的背景下，QuantumGuard OS 的發佈標誌着邊緣計算安全進入新紀元。這款全球首個融合後量子加密技術的物聯網操作系統，不僅通過嚴苛的 FIPS 140-3 認證，更重新定義了設備級數據保護標準。本文將深度解析其架構特性、加密原理及行業應用價值。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;QuantumGuard OS 發佈：全球首個融合後量子加密的物聯網邊緣操作系統，通過 FIPS 140-3 認證&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;後量子加密技術的革命性突破&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;QuantumGuard OS 的核心突破在於其集成的格基加密（Lattice-based Cryptography）算法，這種被 NIST 選為後量子加密標準的技術，能夠有效抵抗量子計算機的暴力破解。傳統 RSA 加密在量子計算面前僅需數分鐘即可被攻破，而格基加密的數學複雜性使其破解時間預估超過 1000 年。在邊緣計算場景中，系統採用混合加密模式，既兼容現有 AES-256 標準，又無縫銜接抗量子算法，這種雙重保障機制為智能電錶、工業傳感器等設備提供了前所未有的安全基線。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;FIPS 140-3 認證的深層意義&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;獲得美國聯邦信息處理標準（FIPS）最高級別認證，意味着 QuantumGuard OS 的加密模塊經受了包括物理防篡改、側信道攻擊防禦等 11 類嚴苛測試。特別值得注意的是其"零信任密鑰派生"機制，每個設備在啓動時都會動態生成專屬加密種子，即使同一批次的設備也不會存在密鑰重複問題。對於醫療物聯網中的胰島素泵、工業控制系統的 PLC 等關鍵設備，這種認證級別的安全保障能有效阻斷供應鏈攻擊。認證過程中，系統在-40℃至 85℃的極端温度範圍內仍保持加密穩定性，這為户外物聯網設備部署掃清了障礙。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;邊緣計算架構的獨特設計&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;區別於傳統物聯網操作系統，QuantumGuard OS 採用微內核架構將安全域（Security Domain）與功能域嚴格隔離。其內存保護單元（MPU）可實現亞毫秒級的上下文切換，使得加密運算對設備性能的影響降至 5% 以下。在智慧城市的路況監測場景中，系統表現出驚人的能效比——處理 1080P 視頻流時的功耗僅為同類系統的 1/3。獨特的"安全飛地"設計允許敏感數據在加密狀態下直接進行邊緣計算，這種隱私增強技術（PET）完美解決了人臉識別等場景的數據合規難題。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;抗量子攻擊的實際防禦能力&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;通過模擬量子攻擊環境的壓力測試，QuantumGuard OS 展現出令人信服的防禦能力。其採用的 CRYSTALS-Kyber 密鑰封裝機制，在模擬 1000 量子比特（Qubit）攻擊時仍保持加密有效性。對於智能電網中的電錶數據採集，系統實現了端到端的量子安全隧道，每個數據包都經過獨立加密且具備前向安全性。更值得關注的是其"加密敏捷性"設計，當監測到異常解密請求時，系統可在 50ms 內自動切換至備用的 SIKE 加密算法，這種動態防禦機制遠超傳統物聯網系統的響應速度。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;跨行業應用場景解析&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在工業 4.0 領域，QuantumGuard OS 已成功部署於西門子新一代 PLC 控制器，其安全啓動（Secure Boot）功能可檢測 0.1% 的固件篡改。車聯網方面，系統支持 V2X 通信的毫秒級密鑰輪換，滿足自動駕駛對實時安全的需求。農業物聯網中，結合國密 SM9 算法特別優化了傳感器節點的能耗表現，使得土壤監測設備的電池壽命延長至 5 年。醫療行業應用更具突破性，系統通過"分片加密"技術實現了 ECG 數據在邊緣端的匿名化處理，既滿足 HIPAA 合規要求，又保留了數據分析價值。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;QuantumGuard OS 的誕生不僅解決了物聯網設備面臨的量子計算威脅，其通過 FIPS 140-3 認證更樹立了行業安全新標杆。從加密算法革新到邊緣架構優化，這套系統為智能城市、工業互聯網等關鍵領域提供了面向未來的安全基座。隨着量子計算時代的臨近，這種融合經典加密與後量子防禦的混合方案，或將成為物聯網操作系統的標準配置。&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353495</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353495</guid>
      <pubDate>Sat, 10 May 2025 06:10:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>得物自研 DScript 2.0 腳本能力從 0 到 1 演進</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;h1&gt;一、前言&lt;/h1&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;在高併發推薦引擎場景中，C++的極致性能往往以開發效率為妥協，尤其在業務頻繁迭代時，C++的開發效率流程成為顯著瓶頸。傳統嵌入式腳本（如 Lua）雖支持動態加載，但其與 C++的交互成本（如虛擬棧數據中轉、類型轉換）仍會帶來額外性能損耗。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;為此，我們探索設計 DScript2.0——一種與 C++內存佈局及調用約定深度兼容的動態腳本語言，通過自研編譯器實現即時編譯與無縫嵌入，嘗試在保留腳本靈活性的同時，儘可能貼近 C++的原生性能，為性能與效率的平衡提供了輕量化解決方案。&lt;/span&gt;&lt;/p&gt; 
&lt;h1&gt;二、動態腳本在引擎中的引用&lt;/h1&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;span style="color:#000000"&gt;C++引擎的迭代效率瓶頸&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;在搜推引擎中的實踐中，出於對高併發場景下極致性能的追求，使用 C++進行引擎自研成為了一種業界常態。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;眾所周知，C++通過開放底層控制權限（如內存分配，指令優化等），提升了可達的性能上限，但這種提升伴隨了大量底層細節的處理，消耗了更多的開發時間，追求性能優先的同時，卻又限制了開發效率。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;我們希望能夠在保持性能的同時，提升引擎的開發效率。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;span style="color:#000000"&gt;利用嵌入式腳本提升迭代效率&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;我們的目標是尋求一種平衡性能與迭代效率的方案，一種主流方案是在 C++中嵌入腳本語言。例如，在遊戲引擎和 Nginx 開發中集成 Lua，在 C/C++代碼中實現性能需求，結合腳本代碼中實現控制邏輯，從而提升開發效率。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;嵌入式腳本對迭代效率的提升&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;支持動態加載，無需編譯部署。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;無需 C/C++經驗，腳本學習成本低，提升參與迭代的人力總量。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;引擎的迭代拆解&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;引擎內部的技術性迭代&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;業務側的需求支持&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;業務側的需求非常適合引入嵌入式腳本，實現對易變需求的自迭代，提升開發效率，這也是一種業界主流方案。例如，一些搜索中台中，對於相關性和粗排邏輯封裝為插件，業務側的算法工程師使用 Lua 開發計算邏輯，可以極大地提升迭代效率。&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style="color:#000000"&gt;嵌入式腳本的額外性能開銷&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;在引擎中嵌入腳本，雖然可以提升迭代效率，但並非全無代價，高階語言與低階語言的交互存在着額外的性能開銷。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;例如，Lua 和 C++的交互機制基於 Lua 提供的虛擬棧來實現，這個棧是兩者進行數據交換的核心通道。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;使用虛擬棧實現語言交互存在額外的開銷，包括但不限於壓棧和彈棧操作、棧空間管理、類型檢查和轉換、複雜數據結構的處理等。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//3e6d8349d3c8b462cc5a9df4bd5e9d57.webp" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style="color:#000000"&gt;更加極致的方案&amp;nbsp;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;基於以上的瓶頸，我們期望一種更加極致的方案，實現性能與效率的平衡。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;嵌入式腳本的額外性能開銷&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;（主要源於兩種語言在 ABI 層面的不一致）&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;函數調用約定不一致，需要一個虛擬棧進行中轉。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;數據類型內存佈局不一致，需要額外的檢查和轉換。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;一個直觀的解決方案就是我們設計一種編程語言，在底層實現上與 C++具有一致內存佈局與調用約定，從而消除額外的轉換開銷。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;同時，這種編程語言可以在 C++嵌入，也支持即時編譯，提升效率的同時，也擁有與原生 C++近似的執行性能。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;以上是我們規劃 DScript2.0 項目初衷。&lt;/span&gt;&lt;/p&gt; 
&lt;h1&gt;三、DScript2.0 的編譯器實現&lt;/h1&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;span style="color:#000000"&gt;語法設計&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;DScript2.0 被設計為一種輕量級面向過程的編程語言，同時它也是靜態類型的編譯語言。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;在語法支持上，包含了基礎數據類型、變量、運算符、控制流和函數，額外支持了與 C++的語言互操作。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;數據類型&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;int，long，bool，float，double，void&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;變量&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&amp;nbsp;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;自定義變量，隱式類型轉換。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;C++變量：支持訪問和操作外部註冊的 C++變量，支持 C++的結構體部分操作。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;運算符&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&amp;nbsp;&lt;/p&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&amp;nbsp;&lt;/p&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&amp;nbsp;&lt;/p&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&amp;nbsp;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;算術運算符：+，-，*，/，%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;關係運算符：==，!=，&amp;gt;=，&amp;gt;，&amp;lt;=，&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;邏輯運算符：!，&amp;amp;&amp;amp;，||&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;賦值運算符：=，+=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;自增自減運算符：++i，--i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;控制流&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;分支語句：if (...) else if (...) else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;循環語句: for 循環&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;函數&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&amp;nbsp;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;自定義函數：基礎類型值傳遞，對象類型引用傳遞。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;C++API：支持調用外部註冊的 C++函數。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;span style="color:#000000"&gt;淺析編譯器架構&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//0002b3da20c2712954db692af8d1c91b.webp" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#a0a0a0"&gt;（編譯器的三段結構）&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;一個完整的編譯器通常由三個主要部分組成：前端、優化器和後端。&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;前端：&lt;/strong&gt;負責詞法分析、語法分析、語義分析、生成中間代碼。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;優化器（中端）：&lt;/strong&gt;負責對中間代碼進行優化。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;後端：&lt;/strong&gt;負責將中間代碼轉換成目標機器的的機器碼。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;基於 LLVM 實現 DScript2.0 編譯器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//afd841f8ba9fca992d5f2b6f32ec9dcc.jpeg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;LLVM 是一個模塊化且高度可重用的編譯器基礎設施項目。它提供了前端、優化器和後端工具鏈，已支持多種編程語言和平台。LLVM 具有跨平台性，允許開發者靈活定製編譯流程，提供高級優化能力，支持即時編譯，被廣泛用於編譯器開發、虛擬機和代碼分析工具場景。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;u&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;※ &amp;nbsp;採用 LLVM 實現 DScript2.0 的優勢&lt;/strong&gt;&lt;/span&gt;&lt;/u&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;提升開發效率：&lt;/strong&gt;LLVM 的前端、中端和後端採用了模塊化設計，每個部分都可以獨立替換或擴展，這種靈活性使得 LLVM 非常適合定製編譯器，&lt;strong&gt;我們可以複用 LLVM 的中端與後端，專注於前端開發，減少開發成本。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;支持高級優化：&lt;/strong&gt;LLVM 提供了一套強大的優化工具，能夠對代碼進行靜態和動態優化。這些優化不僅能夠提高代碼的執行效率，還可以減少代碼體積。&lt;strong&gt;這是 DScript2.0 理論上可能提供接近原生 C++性能的關鍵因素之一。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;支持即時編譯：&lt;/strong&gt;LLVM 支持即時編譯（JIT），通過 JIT 編譯，LLVM 能夠在運行時生成和執行代碼，大大提升了執行效率。通過運行時進行編譯後運行，&lt;strong&gt;這是 DScript2.0 理論上可能提供接近原生 C++性能的關鍵因素之二&lt;/strong&gt;。支持在線的即時編譯能力，&lt;strong&gt;同時也是算子開發與分發效率的保障。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;DScript2.0 編譯器架構&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//972c134f7ea81077c7a1ed3e97e7c6c6.webp" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;DScript2.0 編譯器同樣包含前端、中端、後端三部分，前端能力自研，優化器和後端基於 LLVM 的 Pass 和 JIT 實現。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;編譯器最終輸出為 x86_64 平台的可執行二進制，以 JIT 實例的方式常駐內存，通過入口函數地址執行。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;編譯器支持注入 C++類型與函數參與編譯，實現 DScript2.0 對 C++的調用。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;span style="color:#000000"&gt;編譯器前端實現&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;前端的實現流程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;編譯器前端的任務是&lt;strong&gt;將源碼轉換為優化器可處理的中間代碼&lt;/strong&gt;，這個轉換的流程通常包含 4 個步驟：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;詞法分析&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;語法分析&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;語義分析&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;中間代碼生成&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//34e7a033f0a4360ff25f44ea62bd08ad.webp" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#a0a0a0"&gt;（編譯器前端架構）&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;詞法分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;原理：&lt;/strong&gt;源代碼是一堆連續的字符，計算機要先識別出這些字符組成的基本單元，才能進一步理解代碼含義。就像讀句子先得認出單詞一樣，這是理解程序的第一步。詞法分析的本質是&lt;strong&gt;將代碼的字符流，轉換為更易處理的 token 流。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;輸入與輸出：字符流-&amp;gt;記號流（Tokens）。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;u&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;※ &amp;nbsp;詞法分析器&lt;/strong&gt;&lt;/span&gt;&lt;/u&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;DScript2.0 中了使用 Flex，可以根據自定義的正則表達式規則，自動生成詞法分析的掃描器，減少手工編寫詞法分析器的工作量。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;&amp;nbsp;Flex 工作流程&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//4f5ea2329f5f69d9eee567e4741fa745.webp" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;&amp;nbsp;Flex 語法&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;在 Flex 的定義文件中包含三部分：&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;定義段：&lt;/strong&gt;包含頭文件和全局變量，如輸入和輸出流的定義。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;規則段：&lt;/strong&gt;由模式和對應的動作組成。當掃描器匹配到模式時，執行對應的動作。例如，匹配到"int"字符串時，將其識別為 INT 標識。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;用户代碼段：&lt;/strong&gt;通常可以在此區域定義&lt;strong&gt;&amp;nbsp;main()&amp;nbsp;&lt;/strong&gt;函數，它調用&lt;strong&gt;&amp;nbsp;yylex()&amp;nbsp;&lt;/strong&gt;，啓動詞法分析過程。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/* 定義段段開始 */
/* 引入的 c/c++代碼 */
%{
#include &amp;lt;string&amp;gt;
%}


/* 正則表達式的宏定義 */
LineTerminator &amp;nbsp; &amp;nbsp; &amp;nbsp; \n|\r|\r\n
WhiteSpace &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [ \t\f]|{LineTerminator}
Identifier &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [a-zA-Z_][a-zA-Z0-9_]*
/* 定義段結束 */


%%




/* 規則段開始 */
/* 規則：正則表達式 { return 傳遞給語法分析器的記號類型 } */
"int"&amp;nbsp;{&amp;nbsp;return&amp;nbsp;INT; }
"float"&amp;nbsp;{&amp;nbsp;return&amp;nbsp;FLOAT; }
"void"&amp;nbsp;{&amp;nbsp;return&amp;nbsp;VOID; }


{Identifier} {
&amp;nbsp; &amp;nbsp; yylval.identifier = new std::string(yytext);
&amp;nbsp; &amp;nbsp;&amp;nbsp;return&amp;nbsp;IDENTIFIER;
}
{LineTerminator} {}
{WhiteSpace} {}


&amp;lt;&amp;lt;EOF&amp;gt;&amp;gt; {
&amp;nbsp; &amp;nbsp;&amp;nbsp;return&amp;nbsp;END;
}
/* 規則段結束 */




%%




/* 用户代碼段開始 */
/* 用户代碼段結束 */&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;匹配規則&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;最長匹配：當多個規則可匹配時，Flex 選擇&lt;strong&gt;最長匹配&lt;/strong&gt;的詞素。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;最先定義：若多個規則長度相同，則選擇&lt;strong&gt;最先定義&lt;/strong&gt;的規則。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;語法分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;原理：&lt;/strong&gt;語法分析的原理是根據上下文無關文法（CFG）對輸入的 tokens 序列進行分析，驗證其是否符合某種語言的語法規則，並構建對應的抽象語法樹。其核心在於建立程序的分層邏輯結構，並確保這種結構符合語法約束。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;輸入與輸出：記號流-&amp;gt;抽象語法樹（AST）。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;由語法分析原理拆分&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;結構驗證：&lt;/strong&gt;檢查記號流的排列是否符合語法規則，DScript2.0 的語法規則由上下文無關文法（CFG）描述，驗證算法採用了自底向上的 LR 算法。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;// 示例：分支語法規則：if (conditon) { stmts }
// 符合語法規則
if&amp;nbsp;(a &amp;lt;&amp;nbsp;1) {


// 不符合語法規則
if&amp;nbsp;a &amp;lt;&amp;nbsp;1&amp;nbsp;{&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;層次構建：&lt;/strong&gt;將線性的記號流轉換為樹狀或嵌套的語法結構，以抽象語法樹為例：&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;int&amp;nbsp;func(int&amp;nbsp;a)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;int&amp;nbsp;b = a +&amp;nbsp;1;
&amp;nbsp;&amp;nbsp;return&amp;nbsp;b;
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;FunctionDefinition
&amp;nbsp; ├── ReturnType:&amp;nbsp;int
&amp;nbsp; ├── FunctionName: func
&amp;nbsp; ├── Parameters
&amp;nbsp; │ &amp;nbsp; └── Parameter
&amp;nbsp; │ &amp;nbsp; &amp;nbsp; &amp;nbsp; ├──&amp;nbsp;Type:&amp;nbsp;int
&amp;nbsp; │ &amp;nbsp; &amp;nbsp; &amp;nbsp; └── Name: a
&amp;nbsp; └── Body
&amp;nbsp; &amp;nbsp; &amp;nbsp; ├── VariableDeclaration
&amp;nbsp; &amp;nbsp; &amp;nbsp; │ &amp;nbsp; ├──&amp;nbsp;Type:&amp;nbsp;int
&amp;nbsp; &amp;nbsp; &amp;nbsp; │ &amp;nbsp; ├── Name: b
&amp;nbsp; &amp;nbsp; &amp;nbsp; │ &amp;nbsp; └── InitialValue
&amp;nbsp; &amp;nbsp; &amp;nbsp; │ &amp;nbsp; &amp;nbsp; &amp;nbsp; └── +
&amp;nbsp; &amp;nbsp; &amp;nbsp; │ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ├── Variable: a
&amp;nbsp; &amp;nbsp; &amp;nbsp; │ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; └── Constant:&amp;nbsp;1
&amp;nbsp; &amp;nbsp; &amp;nbsp; └── ReturnStatement
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; └── Variable: b
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;u&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;※ &amp;nbsp;上下文無關文法（CFG)&lt;/strong&gt;&lt;/span&gt;&lt;/u&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;上下文無關文法（CFG） 是編譯器語法分析的核心工具，用於形式化描述編程語言的語法結構。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;其核心要素包括：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;終結符&lt;/strong&gt;（如標識符、運算符），對應詞法分析的 Token，不可再分解。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;非終結符&lt;/strong&gt;（如表達式、語句），需通過產生式規則展開為終結符或其他非終結符。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;產生式規則（如 E → E + T）&lt;/strong&gt;&amp;nbsp;，定義語法結構的生成方式。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;起始符號&lt;/strong&gt;（如&lt;strong&gt;&amp;nbsp;Program&amp;nbsp;&lt;/strong&gt;），代表語法分析的入口。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;產生式規則定義示例：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/* 局部變量聲明 -&amp;gt; 類型，變量聲明 */
/* 例如&amp;nbsp;int&amp;nbsp;a =&amp;nbsp;1&amp;nbsp;*/
/* Type 對應 int&amp;nbsp;*/
/* Variable_Declartor 對應 a =&amp;nbsp;1&amp;nbsp;*/
Local_Variable_Declartor -&amp;gt;
&amp;nbsp; &amp;nbsp; Type Variable_Declartor;


/* 變量聲明 -&amp;gt; 變量 ID 或，變量 ID = 變量初始化 */
Variable_Declartor -&amp;gt;&amp;nbsp;
&amp;nbsp; &amp;nbsp; Variable_ID
&amp;nbsp; &amp;nbsp; | Variable_ID EQ Variable_Initializer;


/* 變量 ID -&amp;gt; 標識符 */ &amp;nbsp; &amp;nbsp;
Variable_ID -&amp;gt; IDENTIFIER;


/* 變量初始化 -&amp;gt; 任意表達式 */
Variable_initializer -&amp;gt; expression;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;示例中根據形式化的語法，描述了變量定義和變量初始化規則。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;示例中包含 4 條產生式規則：&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;局部變量聲明規則&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;變量聲明表達式規則&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;變量 ID 規則&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;變量初始化規則&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;終止符：&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Type 對應一個 C++的 TypeNode&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;IDENTIFIER 對應詞法定義的 Token&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;u&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;※ &amp;nbsp;語法分析器&lt;/strong&gt;&lt;/span&gt;&lt;/u&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;語法分析器採用 Bison 來實現，Bison 可以與 Flex 進行協作，將詞法分析器生成的記號序列解析為語法樹，供編譯器進一步處理。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;通過與 Flex 協同工作，Bison 可以自動化地處理複雜的語法分析任務，使編譯器的開發更加高效和靈活。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;語義分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;原理：&lt;/strong&gt;通過遍歷抽象語法樹，實現上下文相關的文法檢查，對程序的類型、作用域和標識符等進行詳細檢查，&lt;strong&gt;確保程序在邏輯上符合編程語言的規則，同時生成中間表示代碼&lt;/strong&gt;，作為優化器或後端的輸入。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;輸入與輸出：&lt;/strong&gt;抽象語法樹-&amp;gt;中間代碼。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;語法分析與語義分析的區別：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;輸出目標不同：語法分析的主要任務是將記號流轉換為結構化信息，語義分析是將結構化信息翻譯為優化器可以處理的中間表示語言。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;語法正確的語句，語義未必正確：&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;例如，有函數原型&lt;strong&gt;&amp;nbsp;void echo(int a)&amp;nbsp;&lt;/strong&gt;，在調用時&lt;strong&gt;&amp;nbsp;int b = echo("a")&amp;nbsp;&lt;/strong&gt;，這是符合語法的，但不符合語義。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;再比如，語言要求使用變量前先定義，在未定義變量&lt;strong&gt;&amp;nbsp;a&amp;nbsp;&lt;/strong&gt;的前提下，執行賦值&lt;strong&gt;&amp;nbsp;a = 1;&amp;nbsp;&lt;/strong&gt;，這樣也是符合語法但不符合語義的。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;u&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;※ &amp;nbsp;語義分析的主要任務&lt;/strong&gt;&lt;/span&gt;&lt;/u&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;符號表管理&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;作用域解析&lt;/strong&gt;：追蹤變量/函數的作用域（如塊級作用域、全局作用域）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;符號綁定：&lt;/strong&gt;將標識符與其聲明關聯（如變量類型、函數簽名）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;重複定義檢查：&lt;/strong&gt;禁止同一作用域內同名符號的重複聲明。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;類型系統校驗&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;類型推斷與檢查：&lt;/strong&gt;驗證表達式和操作的合法性，如&lt;strong&gt;&amp;nbsp;int a = "str";&amp;nbsp;&lt;/strong&gt;類型不匹配。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;隱式類型轉換：&lt;/strong&gt;處理類型提升，如&lt;strong&gt;&amp;nbsp;int + float&amp;nbsp;&lt;/strong&gt;自動轉為浮點運算。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;函數簽名匹配：&lt;/strong&gt;檢查實參與形參的個數、類型一致性。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;控制流合法性&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;語句上下文檢查：&lt;/strong&gt;確保&lt;strong&gt;&amp;nbsp;break&amp;nbsp;&lt;/strong&gt;僅在循環內、&lt;strong&gt;&amp;nbsp;return&amp;nbsp;&lt;/strong&gt;與函數返回類型一致。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;可達性分析：&lt;/strong&gt;檢測不可達代碼（如&lt;strong&gt;&amp;nbsp;return&amp;nbsp;&lt;/strong&gt;後的語句）。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;常量表達式求值&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;優化常量計算（如&lt;strong&gt;&amp;nbsp;const x = 2 + 3*4; &amp;nbsp;&lt;/strong&gt;直接計算為&lt;strong&gt;&amp;nbsp;14&amp;nbsp;&lt;/strong&gt;）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;用於數組長度、條件編譯等需編譯期確定值的場景。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;u&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;※ &amp;nbsp;中間代碼生成&lt;/strong&gt;&lt;/span&gt;&lt;/u&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;中間代碼的生成流程是通過遞歸遍歷 AST 完成的，將語義檢查無誤的邏輯，轉換為中間表示語言，這是編譯器前端工作的最後一步。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;DScript2.0 中使用了&lt;strong&gt;LLVM IR&lt;/strong&gt;作為中間代碼語言，它介於高級語言和目標代碼之間，既能表達高級語言的抽象概念，又能適應底層機器代碼的生成需求。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;LLVM IR 提供了豐富的指令集，涵蓋了從基本運算到複雜控制流、內存操作、同步操作等各種編程需求。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;LLVM IR 指令集示例&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//fffc0e15f1be962695432d3b2b69989a.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;轉換示例：&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;int&amp;nbsp;func(int&amp;nbsp;a)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;int&amp;nbsp;b = a +&amp;nbsp;1;
&amp;nbsp;&amp;nbsp;return&amp;nbsp;b;
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#a0a0a0"&gt;（源代碼）&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;; 函數定義: 函數名為 func，返回類型為 i32（32 位整數），參數為 i32 類型的 a
define i32 @func(i32 %a) {
entry:
&amp;nbsp; ; 定義局部變量 b，並將其初始化為 a +&amp;nbsp;1&amp;nbsp;的結果
&amp;nbsp; %b = add i32 %a,&amp;nbsp;1


&amp;nbsp; ; 返回 b 的值
&amp;nbsp; ret i32 %b
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#a0a0a0"&gt;（與之對應的 LLVM 的中間代碼）&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style="color:#000000"&gt;編譯器中端：中間代碼優化&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//4427d784ffc7bf64021b597373528883.webp" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;在 DScript2.0 中，優化器是通過&lt;strong&gt;複用 LLVM 的中端優化能力&lt;/strong&gt;來實現的，通過一系列 LLVM 預置的優化遍 (Pass)，對程序生成的中間代碼進行優化，以&lt;strong&gt;提高代碼的性能。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;中端的輸出為優化過後的 IR 指令，這些 IR 指令需要提供給後端進行編譯。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;在 LLVM 中，優化遍是指按照一定順序執行的一個或多個優化算法。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;以下是一些常用的優化算法：&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//aa73fe5a522d09fac64f469c9f1c016a.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;span style="color:#000000"&gt;編譯器後端：即時編譯&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//7ffd47a0be70b88382e468d14fe98757.webp" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;DScript2.0 使用 LLVM 的 ORC JIT 作為即時編譯器的實現，支持在程序運行時編譯腳本，並通過查找函數地址的方式執行腳本。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;採用即時編譯器的優勢：&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;避免了開發調試過程中，頻繁的啓停程序，&lt;strong&gt;提升迭代效率。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;且經過編譯的代碼，在執行時能夠顯著&lt;strong&gt;提升運行性能。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span style="color:#000000"&gt;語言互操作性&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;語言互操作性是指不同編程語言能夠相互調用、協同工作的能力。通過這種能力，開發者可以在同一項目中結合多種語言的優勢。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;例如，&lt;strong&gt;C++ 與 Lua 的結合&lt;/strong&gt;是就互操作的經典場景，常見於遊戲開發、搜推引擎、嵌入式系統等領域。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;在我們的需求中，要支持動態腳本訪問引擎的表列資源，就需要 DScript2.0 也能具備與 C++交互操作的能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;DScript2.0 與 C++的語言互操作性體現在&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;DScript2.0 可以調用 C++的函數，並向 C++傳遞數據。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;C++可以調用 DScript2.0 的函數，並向 DScript 腳本傳遞數據。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;DScript2.0 可以訪問和操作 C++傳遞的基礎類型和結構體類型變量。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span style="color:#000000"&gt;調試能力&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;span style="color:#3e3e3e"&gt;DScript2.0 基於 GDB 實現了基本的調試能力：&lt;/span&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;支持通過 Attach 進程進行實時調試&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持在 coredump 中保留棧信息&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;調試能力的實現主要基於 GDB 的通用調試接口，在編譯 DScript2.0 源碼時，生成調試信息，插入到 LLVM IR 的元數據中，然後通過 JIT 的監聽器掛載 GDB 調試接口，並注入調試信息，最終實現調試能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//712d0be95e399fdf471e33364f57da3d.webp" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style="color:#000000"&gt;異常處理&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;DScript2.0 中也實現了異常處理能力，主要包括了硬件異常的主動防禦和跨 C++與 DScript2.0 邊界的異常傳播。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;硬件異常防禦&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;程序異常可以劃分為硬件異常和主動異常：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;硬件異常&lt;/strong&gt;是底層不可控錯誤，硬件異常的處理需依賴信號鈎子或語言運行時封裝。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;典型例子：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;段錯誤（SIGSEGV）：&lt;/strong&gt;非法內存訪問&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;浮點運算錯誤（SIGFPE）：&lt;/strong&gt;如整數除零或浮點運算異常&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;非法指令（SIGILL）：&lt;/strong&gt;執行未定義的機器指令&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;總線錯誤 （SIGBUS）：&lt;/strong&gt;如未對齊的內存訪問&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;主動異常&lt;/strong&gt;是代碼邏輯的一部分，用於可控的錯誤處理與資源管理，主動異常由開發者顯式拋出，也可由語言運行時隱式轉換。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;u&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;※ &amp;nbsp;硬件異常的主動防禦&lt;/strong&gt;&lt;/span&gt;&lt;/u&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;DScript2.0 在語言層面上，對代碼引發的硬件異常進行了主動防禦。實現上，是在語義分析階段，對中間代碼添加防禦邏輯，防禦策略則採用了可被捕獲的主動異常拋出。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;例如下圖所示，在編譯階段，編譯器對於結構體指針進行了空引用檢查邏輯，將硬件異常轉換為了主動異常，而主動異常可以通過捕獲來進行處理，避免了進程崩潰。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//6c7e8cac4f4f5824c798faa662322910.webp" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;跨語言邊界傳播&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;因為 DScript2.0 的語言互操作性特性，會涉及到 C++與 DScript2.0 的函數互相調用（如下圖所示），就會涉及到異常處理時，異常在 C++和 DScript2.0 之間傳播，即所謂跨語言邊界。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;DScript2.0 主要實現瞭如下的異常傳播機制：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;腳本調用 C++ 函數時若拋出異常，在腳本端不進行捕獲，但支持異常傳播到 C++端，同時正常完成棧回退。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;C++ 調用腳本函數時若拋出異常，可以在 C++ 端捕獲。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//4ca2105f8da79d27155676715456951f.webp" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;四、DScript2.0 在線開發工作流&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//304b49d4719757821cbf6154aa5b5807.webp" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;DScript2.0 通過平台化實現了在線開發的工作流：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;引擎集成：以 SDK 方式與引擎進行集成，提供在線編譯和加載的能力。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在線 IDE：實現編輯、編譯的在線開發環境。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在線工作流：通過平台化支持腳本的在線分發與管理。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;五、總結&lt;/h1&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;DScript2.0 的實踐為推薦引擎的敏捷迭代探索了一條新路徑。通過編譯器架構與 C++底層機制的高度兼容設計，它在降低跨語言交互成本、支持動態加載等方面展現出潛力，同時保持了接近原生 C++的運行時性能。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;其即時編譯能力與在線開發流程，使業務團隊能獨立完成邏輯更新，減少對傳統 C++開發中編譯部署的依賴，初步驗證了兼顧性能與效率的可能性。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;未來，我們計劃進一步完善調試工具鏈與異常處理機制，並探索其在混合語言場景下的擴展性，以更輕量的方式推動引擎架構的持續優化。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;&lt;strong&gt;算法團隊大量 HC，歡迎加入我們：&lt;/strong&gt;得物技術大量算法崗位多地上線，「職」等你來！&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;往期回顧&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#586c90"&gt;1.&lt;/span&gt;社區造數服務接入 MCP｜得物技術&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#586c90"&gt;2.&lt;/span&gt;CSS 闖關指南：從手寫地獄到「類」積木之旅｜得物技術&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#586c90"&gt;3.&lt;/span&gt;從零實現模塊級代碼影響面分析方案｜得物技術&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#586c90"&gt;4.&lt;/span&gt;以細節詮釋專業，用成長定義價值——對話@孟同學 ｜得物技術&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#586c90"&gt;5.&lt;/span&gt;得物可觀測平台架構升級：基於 GreptimeDB 的全新監控體系實踐&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;文 / 明遠&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;關注得物技術，每週更新技術乾貨&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;要是覺得文章對你有幫助的話，歡迎評論轉發點贊～&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#3e3e3e"&gt;未經得物技術許可嚴禁轉載，否則依法追究法律責任。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353485</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353485</guid>
      <pubDate>Sat, 10 May 2025 05:46:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>NebulaFlow 重構邊緣計算：分佈式 AI 推理框架正式開源，低延遲賦能工業物聯網</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;em&gt;在工業物聯網 (IIoT) 與邊緣計算深度融合的今天，NebulaFlow 開源框架的發佈標誌着分佈式 AI 推理技術邁入新階段。本文深度解析該框架如何通過創新的數據流編排機制，在工業質檢、設備預測性維護等場景中實現毫秒級響應，同時揭示其三層異構計算架構如何平衡算力成本與推理精度。&lt;/em&gt;&lt;/p&gt; 
&lt;h1&gt;NebulaFlow 重構邊緣計算：分佈式 AI 推理框架正式開源，低延遲賦能工業物聯網&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;邊緣計算範式下的 AI 推理困境與破局&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;傳統雲計算架構在工業物聯網場景中面臨的根本矛盾，在於數據傳輸延遲與集中式算力分配間的不可調和性。NebulaFlow 創新性地採用邊緣節點協同推理策略，將 AI 模型拆解為可動態部署的微服務單元。通過實時監控網絡帶寬波動和設備算力狀態，系統能自主決策將 ResNet-34 等視覺模型的卷積層部署在網關設備，而全連接層下沉至邊緣服務器。這種混合精度推理機制使得汽車焊接質量檢測的端到端延遲從傳統方案的 800ms 降至驚人的 93ms，同時保持 99.2% 的缺陷識別準確率。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;三層異構架構的算力編排奧秘&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;NebulaFlow 框架最核心的競爭力在於其"終端-邊緣-近雲"三級計算架構設計。在半導體晶圓檢測的實際部署中，框架的資源調度器會智能識別：輕量級 YOLOv5 模型的前處理階段適合部署在帶 NPU(神經網絡處理單元) 的工業相機，特徵提取層分配至工廠級邊緣服務器集羣，而複雜的分類決策則交由廠區級 GPU 節點完成。這種動態負載均衡策略使得單台注塑機的狀態監測年運維成本降低 47%，而分佈式推理過程中的梯度同步開銷控制在總耗時的 15% 以內。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;數據流編排引擎的技術突破&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;框架內置的 Fluid DAG 引擎徹底改變了傳統 AI 流水線的剛性結構。當處理風力發電機組的振動信號時，系統能根據傳感器數據的信噪比動態調整 STFT(短時傅裏葉變換) 的窗口參數，並智能跳過噪聲幹擾嚴重時段的數據預處理。這種具有容錯能力的流式計算模式，使得 200ms 時間窗內的特徵提取完成率從固定管道的 82% 提升至 98.7%。特別值得注意的是，引擎支持 TensorRT 和 ONNX Runtime 的混合部署，這讓同一套 LSTM 模型能在不同代際的工業設備上保持一致的預測性能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;開源生態帶來的產業變革機遇&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;NebulaFlow 選擇 Apache 2.0 協議開源的戰略決策，正在催生工業 AI 領域的"安卓時刻"。其模塊化設計允許西門子等設備廠商快速集成私有協議棧，同時保持核心調度算法的持續升級。在首批試點項目中，某鋼鐵集團通過複用框架的模型分片功能，僅用 3 周就完成了軋鋼温度預測系統的跨廠區部署。更值得關注的是社區貢獻的 ROS2-Nebula 適配器，這使 AGV 調度系統的路徑規劃延遲突破性地降至 50ms 量級。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;工業級可靠性的實現路徑&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;為滿足製藥行業 GMP(藥品生產質量管理規範) 的嚴苛要求，框架創新性地引入了雙通道容錯機制。當檢測到某邊緣節點心跳丟失時，不僅會立即觸發鄰近節點的模型熱遷移，還會自動啓用壓縮感知技術對缺失數據進行重建。在疫苗灌裝產線的 72 小時連續測試中，系統在模擬 20% 節點故障的情況下仍保持 99.99% 的批次合格判定準確率。這種魯棒性很大程度上源於其獨特的聯邦式檢查點機制，該技術將模型狀態同步的帶寬消耗降低了 60%。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;NebulaFlow 的開源標誌着邊緣 AI 推理進入"生產就緒"階段，其價值不僅體現在技術參數上的突破，更在於重構了工業智能化的實施範式。從半導體到能源裝備，該框架證明分佈式推理完全可以兼顧實時性與準確性，而其開放的架構更將加速工業元宇宙的生態構建。隨着 5G-Advanced 網絡的普及，這套框架有望成為連接物理世界與數字孿生的神經網絡。&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353481</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353481</guid>
      <pubDate>Sat, 10 May 2025 04:49:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>騰訊開源跨平台框架 ovCompose，助力全端應用開發</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#4d4f53; margin-left:0; margin-right:0; text-align:start"&gt;近日，騰訊開源平台正式推出了由騰訊視頻團隊主導開發的跨平台框架 ovCompose。該框架基於 Compose Multiplatform 生態構建，旨在解決 JetBrains Compose Multiplatform 當前不支持鴻蒙系統的問題，並改善 iOS 平台上佈局受限的情況，從而幫助開發者更高效地打造全平台應用。&lt;/p&gt; 
&lt;p style="color:#4d4f53; margin-left:0; margin-right:0; text-align:start"&gt;在騰訊大前端 Oteam 的推動下，騰訊視頻團隊還推出了 KuiklyBase，涵蓋 Kotlin/Native 對鴻蒙系統的適配、組件生態建設、編譯流程優化、堆棧還原以及工具鏈完善等多個方面。這一系列技術方案有效提升了 Kotlin Multiplatform（KMP）開發者在鴻蒙平台上的開發效率。目前，ovCompose 與 KuiklyBase 已在 GitHub 上開源發佈。&lt;/p&gt; 
&lt;p style="color:#4d4f53; margin-left:0; margin-right:0; text-align:start"&gt;現階段，ovCompose 已在騰訊視頻的鴻蒙平台全面應用，成為首個實現全跨端覆蓋的 App。而 KuiklyBase 的核心能力也已在包括騰訊視頻、QQ 瀏覽器、騰訊體育在內的十餘款 App 中落地使用。&lt;/p&gt; 
&lt;p style="color:#4d4f53; margin-left:0; margin-right:0; text-align:start"&gt;通過採用一套代碼覆蓋 Android、iOS 與鴻蒙三大平台的開發模式，業務開發效率明顯提升。隨着鴻蒙系統的持續演進，ovCompose 與 KuiklyBase 的應用範圍也將逐步拓展至電視端與 PC 端。&lt;/p&gt; 
&lt;p style="color:#4d4f53; margin-left:0; margin-right:0; text-align:start"&gt;值得關注的是，近年來 Kotlin Multiplatform（KMM）生態不斷成熟，Kotlin-Native 在多個場景下的執行性能已超越 Kotlin-JVM。然而，Compose Multiplatform 在跨平台方面的技術尚未完全成熟。未來，ovCompose 與 KuiklyBase 將繼續圍繞以下方向進行優化：提升垃圾回收機制在實際業務中的表現、推進 Kotlin-Native 的組件化能力、優化 Kotlin-Native 的開發體驗，以及進一步統一 UIKit 與 Skia 的渲染模式，力求為開發者提供更流暢、更高效的跨端開發體驗。&lt;/p&gt; 
&lt;p&gt;https://github.com/Tencent-TDS/ovCompose-sample/blob/main/README-zh_CN.md&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353476</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353476</guid>
      <pubDate>Sat, 10 May 2025 04:04:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>Yandex 發佈全球最大開源音樂推薦數據集 Yambda</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;Yandex &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsspai.com%2Flink%3Ftarget%3Dhttps%253A%252F%252Fwww.prnewswire.com%252Fnews-releases%252Fyandex-releases-worlds-largest-event-dataset-for-advancing-recommender-systems-302468616.html" target="_blank"&gt;發佈&lt;/a&gt;開源音樂推薦數據集 Yambda，包含近 50 億次匿名用户與流媒體平台 Yandex Music 音軌的互動數據。&lt;/p&gt; 
&lt;p&gt;Yandex 表示，該數據集來自旗下流媒體音樂服務的 My Wave 推薦系統，所有用户和跟蹤數據都使用數字標識符匿名化處理：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;包含了跨度 10 個月、47.9 億次匿名用户交互，擁有來自 100 萬用户的數據和 939 萬個曲目的匿名描述符&lt;/li&gt; 
 &lt;li&gt;包括隱式交互（偵聽）和顯式交互（喜歡、不喜歡和刪除）兩種反饋類型，並提供 50 億、5 億和 5000 萬三種數據集大小，&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height="1154" src="https://static.oschina.net/uploads/space/2025/0604/112437_dqLB_2720166.png" width="2026" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;相比現有的 Spotify Million Playlists、Netflix Prize dataset 等數據集，Yambda 在數據規模和時效性方面都更為出色。&lt;/p&gt; 
&lt;p&gt;Yambda 可作為通用基準用於電子商務、社交網絡和短視頻平台的推薦系統測試，現已在 Hugging Face 上提供：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fdatasets%2Fyandex%2Fyambda" target="_blank"&gt;https://huggingface.co/datasets/yandex/yambda&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353465/yandex-releases-worlds-largest-event-dataset</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353465/yandex-releases-worlds-largest-event-dataset</guid>
      <pubDate>Sat, 10 May 2025 03:25:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>AI 造物社區作品分享——超 mini 的 1.54 寸墨水屏多功能閲讀器</title>
      <description/>
      <link>https://www.oschina.net/ai-creation/details/2005</link>
      <guid isPermaLink="false">https://www.oschina.net/ai-creation/details/2005</guid>
      <pubDate>Sat, 10 May 2025 03:09:00 GMT</pubDate>
    </item>
    <item>
      <title>階躍星辰 C 端產品「冒泡鴨」停運，業務重心轉向終端 Agent</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Ft6j6Wk5ekwdtbxvKP6HwmA" target="_blank"&gt;根據《智能湧現》的獨家報道&lt;/a&gt;，大模型「六小虎」之一的階躍星辰近半年在其 C 端應用佈局上進行了一系列調整：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;2024 年 12 月，角色扮演類 Agent 產品「冒泡鴨」停止大範圍投入，團隊合併至對話產品「躍問」（現更名為「階躍 AI」），目前僅留部分員工運維。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0604/110406_jreC_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;針對上述信息，階躍星辰回覆稱，早期團隊基於當時的模型能力進行了一些產品探索；&lt;strong&gt;2025 年，隨着多模態和推理能力的成熟，團隊對產品進行收斂，聚焦 Agent 方向&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;公司方面還表示，「躍問」改名為「階躍 AI」，意味着它從 Chat 類的產品到 Agent 能力的轉變。&lt;/p&gt; 
&lt;p&gt;而據階躍星辰員工透露，經過一年以來的探索，團隊現在在產品佈局上學到的深刻一課是：不要在已有頭部玩家的領域，參與競爭。&lt;/p&gt; 
&lt;p&gt;報道指出，2025 年以來，階躍星辰的戰略，也是將資源從短板，集中到長板業務上：重心從 C 端，轉移到模型研發和 ToB/G 上。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353456</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353456</guid>
      <pubDate>Sat, 10 May 2025 03:04:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>智源研究院開源 Video-XL-2：輕量級超長視頻理解模型</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;近日，智源研究院聯合上海交通大學等機構，正式發佈新一代超長視頻理解模型：&lt;strong&gt;Video-XL-2&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;相較於上一版本的 Video-XL，該模型在多個維度全面優化了多模態大模型對長視頻內容的理解能力：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;效果更佳&lt;/strong&gt;：Video-XL-2 在長視頻理解任務中表現出色，在 MLVU、Video-MME、LVBench 等主流評測基準上達到了同參數規模開源模型的領先水平。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;長度更長&lt;/strong&gt;：新模型顯著擴展了可處理視頻的時長，支持在單張顯卡上高效處理長達萬幀的視頻輸入。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;速度更快&lt;/strong&gt;：Video-XL-2 大幅提升了處理效率，編碼 2048 幀視頻僅需 12 秒，顯著加速長視頻理解流程。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Video-XL-2 的模型架構示意圖：&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0604/104152_Zepa_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在模型架構設計上，Video-XL-2 主要由三個核心組件構成：視覺編碼器（Visual Encoder）、動態 Token 合成模塊（Dynamic Token Synthesis, DTS）以及大語言模型（LLM）。&lt;/p&gt; 
&lt;p&gt;目前，Video-XL-2 的模型權重已全面向社區開放。未來，該模型有望在影視內容分析、異常行為監測等多個實際場景中展現重要應用價值。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;項目主頁：&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Funabletousegit.github.io%2Fvideo-xl2.github.io%2F" target="_blank"&gt;https://unabletousegit.github.io/video-xl2.github.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;模型 hf 鏈接：&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2FBAAI%2FVideo-XL-2" target="_blank"&gt;https://huggingface.co/BAAI/Video-XL-2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;倉庫鏈接：&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FVectorSpaceLab%2FVideo-XL" target="_blank"&gt;https://github.com/VectorSpaceLab/Video-XL&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353446</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353446</guid>
      <pubDate>Sat, 10 May 2025 02:44:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>「鴻蒙創想·創新場景共建挑戰賽」開啓，等你來戰！</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;科技領域，生態競爭愈發激烈。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;HarmonyOS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;憑藉全場景戰略，推動原生應用全面普及，構建更安全、更智能、更開放的操作系統生態，已成為國產操作系統生態的核心力量之一。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2025 年，開源中國攜手 Harmony&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;OS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;誠邀各路開發者一起&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;共建&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;HarmonyOS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;開發者場景技術能力&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;並推出&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;鴻蒙創想·創新場景共建挑戰賽&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;希望通過本次大賽，進一步加速 Harmony&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;OS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;應用開發進程，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;推動 H&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;armonyOS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;開發者場景技術能力生態&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，激發各路開發 OG 的無限創造力和創新力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;讓我們以代碼為筆，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;共築&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;HarmonyOS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;開發者場景技術能力的盛景繁花&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:center"&gt;&lt;img height="162" src="https://static.oschina.net/uploads/space/2025/0604/103456_a3qU_4806939.png" width="553" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;鴻蒙創想 · 創新場景共建挑戰賽&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;活動時間： 2025.5.30-2025.6.30&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;報名鏈接：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fqaxb95n3g50.feishu.cn%2Fshare%2Fbase%2Fform%2FshrcnaQjWtDMJvkU62QaXkuZyld" target="_blank"&gt;&lt;u&gt;&lt;span&gt;&lt;span style="color:#0000ff"&gt;&lt;u&gt;&lt;span&gt;https://qaxb95n3g50.feishu.cn/share/base/form/shrcnaQjWtDMJvkU62QaXkuZyld&lt;/span&gt;&lt;/u&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="484" src="https://static.oschina.net/uploads/space/2025/0604/103551_WbZW_4806939.png" width="389" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;核心命題&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;於&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;HarmonyOS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&amp;nbsp;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;最新版本能力&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;共&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;建&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;三方開源代碼庫，可提交開源代碼、SDK 接口、API 接口、插件、邊緣工具集成、智能工具以及場景解決方案等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;提交方向參考&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;多設備適配&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：基於 Harmony&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;OS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;以及 ArkUI/RN/Flutter 技術棧，提供各種不同場景下的多設備響應式/自適應組件；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;跨平台框架&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：針對 RN/Flutter 等跨平台框架，提供鴻蒙特色能力的實現，例如：華為賬號一鍵登錄、碰一碰分享等；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;AI 輔助&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：基於 AI 輔助，提升 Harmony&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;OS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;應用開發效率、問題定位效率等各類場景的能力或方案；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;4、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;性能功耗&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：①開發或移植高性能的數據庫 ORM/Helper 、序列化/反序列化、後台任務管理等開源庫 ②開發各類複雜場景的高性能 UI 組件；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;5、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;媒體方向&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：開發或移植功能完善的圖片處理、音視頻處理等開源庫；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;6、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;網絡方向&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：開發或移植高質量、功能完善的 http、websocket 等各類網絡協議庫。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#646a73"&gt;*提交內容廣泛多樣，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#8f959e"&gt;如果與 Harmony&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#8f959e"&gt;OS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#8f959e"&gt;&amp;nbsp;相關的開源庫代碼、組件、接口均可參與。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span style="display:none"&gt;&amp;nbsp;&lt;/span&gt;&lt;span style="color:#000000"&gt;學習資料：&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Fforum%2Fblock%2Fapplication%3Fha_linker%3DeyJ0cyI6MTcyMDU3ODU3MTQ0MywiaWQiOiJiZGMyZWVmNWU4MDFhYjI2OTA1YzM4ZWI0Y2QxYWFhMiJ9" target="_blank"&gt;&lt;u&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#0000ff"&gt;&lt;u&gt;&lt;span&gt;https://developer.huawei.com/consumer/cn/forum/block/application?ha_linker=eyJ0cyI6MTcyMDU3ODU3MTQ0MywiaWQiOiJiZGMyZWVmNWU4MDFhYjI2OTA1YzM4ZWI0Y2QxYWFhMiJ9&lt;/span&gt;&lt;/u&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;參賽要求&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;提交的作品必須緊扣核心命題，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;且&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;與 Harmony&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;OS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;相關&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;可使用【&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.qq.com%2Fsheet%2FDS0FqQXBDRU10VWVJ%3Ftab%3D35fdxw" target="_blank"&gt;&lt;u&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#245bdb"&gt;&lt;u&gt;&lt;span&gt;HarmonyOS 工具包&lt;/span&gt;&lt;/u&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;】參與開發&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;並不適配最新&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;HarmonyOS &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;系統&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;作品將無法通過審核；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;作品提交併通過審核後，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;名稱和描述將不可更改&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，請在提交作品前謹慎操作；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;3、提交的作品為可以直接複用的開源組件，便於評審；&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;4、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;提交的作品（包含標題、描述、內容）要求正向積極，且必須遵守相關法律法規，確保內容安全合法合規&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;活動流程&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、填寫並提交【&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fqaxb95n3g50.feishu.cn%2Fshare%2Fbase%2Fform%2FshrcnaQjWtDMJvkU62QaXkuZyld" target="_blank"&gt;&lt;u&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#0070c0"&gt;&lt;u&gt;&lt;span&gt;活動報名錶&lt;/span&gt;&lt;/u&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;】，即為報名成功&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、提交活動作品：完成開發、適配後，進入【&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href="https://gitee.com/gao-zhanr/harmony-os-third-party-library"&gt;&lt;u&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#0070c0"&gt;&lt;u&gt;&lt;span&gt;提交入口&lt;/span&gt;&lt;/u&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;】，提交自己的作品，作品需要包含源代碼、demo 演示和簡要介紹&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3、提交截止後，三方庫內的開源作品經由官方評選，最後結果公示&amp;amp;獎勵發放&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;活動獎項&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="display:none"&gt;&amp;nbsp;&lt;/span&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="310" src="https://static.oschina.net/uploads/space/2025/0604/103836_17T3_4806939.png" width="552" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="171" src="https://static.oschina.net/uploads/space/2025/0604/103854_5c4s_4806939.png" width="503" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;評選維度&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;命題準確（20%）————緊扣核心命題，適配&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;最新&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;Harmony&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;OS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&amp;nbsp;&lt;span&gt;&lt;span&gt;&lt;span&gt;系統&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;業務價值（35%）————貼合需求、市場價值及推廣性，有明顯的效率提升&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;開發能力（35%）————綜合技術能力，良好的作品運行效果&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;文檔規範（10%）————流程文檔規範、工程質量優良、資料齊全&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;評選委員會將根據技術性、創新性、應用價值、用户體驗、頁面設計、使用體驗、輸出效果、體驗流暢絲滑等維度綜合評選出獲獎作品。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#8f959e"&gt;通過參加本次活動，參與者表明其理解並同意遵守以下條款和條件：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#8f959e"&gt;數據安全與第三方權益：參與者應獨立保證和承擔活動期間所涉及數據的合規及安全責任，並保證其活動不侵害任何第三方的合法權利和利益。參與者活動期間所獲得任何數據不得用於本次活動之外的其他任何目的，不得向任何第三人提供或披露本次活動數據及任何信息。參與者不得從事任何違反適用的法律、法規、規章或活動協議的活動。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#8f959e"&gt;提交作品的審查與評估：活動組織者保留對提交的模型和代碼進行全面審查和評估的權利，以確保符合活動規則和標準，但不因此免除參與者任何責任。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#8f959e"&gt;活動規則和決策權：關於活動的所有相關事宜，包括但不限於活動規則、評估標準、獎勵設定以及最終結果的決定，均由主辦方全權決定。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#8f959e"&gt;最終解釋權：主辦方擁有對所有活動相關內容的最終解釋權。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#8f959e"&gt;規則修改與調整：主辦方保留根據實際情況對未盡事宜進行解釋和處理的權利，並保留隨時修改活動規則、調整活動流程或取消活動的權利。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#8f959e"&gt;官方信息發佈：請所有參與者密切關注活動官方網站或其他公告渠道，以便及時獲取最新的活動信息。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#8f959e"&gt;版權聲明：參與者保證提交作品的創作不得侵犯任何第三方的合法權利，其作品版權歸其作者及主辦方共同所有。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353442</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353442</guid>
      <pubDate>Sat, 10 May 2025 02:40:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>ChatGPT 輕量級記憶功能已向所有免費用户開放</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;OpenAI CEO Sam Altman &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fsama%2Fstatus%2F1930007155723415560" target="_blank"&gt;宣佈&lt;/a&gt;，從現在開始，將為 ChatGPT 的免費用户提供輕量級記憶功能，同時他自己也表示該功能是其最喜歡的 ChatGPT 功能，未來也將大幅改進這一功能。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0604/103431_rXKj_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據介紹，ChatGPT 的記憶功能能記住用户最近的聊天內容，從而用户不必再經常重複表述自己的內容，GPT 也能回答更加個性化、更加符合用户偏好的內容，以及記住用户的部分信息、數據等內容。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-d7727d9f7a35e0da218a4455d9ff43c9038.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;即日起，打開 ChatGPT 即可收到「全新改進型記憶功能上線」的相關推送消息。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353439</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353439</guid>
      <pubDate>Sat, 10 May 2025 02:35:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>OpenAI 計劃今年夏天發佈 GPT-5</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bleepingcomputer.com%2Fnews%2Fartificial-intelligence%2Fopenai-is-hopeful-gpt-5-will-compete-a-little-more%2F" target="_blank"&gt;據 BleepingC&lt;/a&gt;&lt;/u&gt;&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bleepingcomputer.com%2Fnews%2Fartificial-intelligence%2Fopenai-is-hopeful-gpt-5-will-compete-a-little-more%2F" target="_blank"&gt;omputer 報道&lt;/a&gt;&lt;/u&gt;，OpenAI 的兩位高管近日在出席在墨西哥舉行的人工智能峯會上證實，GPT-5 確實正在研發中，並且它將比現有的 OpenAI 模型強大得多。OpenAI 目前仍在開發 GPT-5，尚未確定其成本。&lt;/p&gt; 
&lt;p&gt;一名 OpenAI 代表表示，他們希望藉助 GPT-5 進一步提升競爭力，但未透露具體細節。&lt;/p&gt; 
&lt;p&gt;據悉，GPT-5 有望在今年夏季某個時間點發布，但具體時間尚不明確。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;值得一提的是，OpenAI CEO Sam Altman 就在剛剛疑似對新模型進行預告。其表示「火爆的 AI 夏天」，並透露 OpenAI 即將發佈許多精彩內容。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-2c222639a50749ed14090c376008a28b88e.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據 AI 工程師 Tibor Blaho 近期透露，OpenAI 將在 7 月發佈一個大規模模型。此前，Tibor Blaho 曾在 o3、o4 mini 系列模型發佈前，在 ChatGPT 的網頁中挖出相關信息。另據投資者「Chris（chatgpt21）」消息透露，GPT-5 發佈時間有望定於 7 月。&lt;/p&gt; 
&lt;p&gt;今年 4 月，Altman 在 X 上宣佈新模型發佈計劃的調整：GPT-5 將在幾個月內發佈。當時 Altman 解釋了這次調整的原因，是要把 GPT-5 做得比最初預期的還要好得多，同時在整合上遇到了比想象中要大的困難。&lt;/p&gt; 
&lt;p&gt;今年 2 月，Altman 還曾公佈了 GPT-5 的發展路線，並表示未來 OpenAI 旗下產品將簡化分類：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;在 GPT-4.5 發佈後，OpenAI 將會推出集成化模型系統，來統一 O 系列模型以及 GPT 系列模型。據 Altman 透露，GPT-5 將作為一個集成了 OpenAI 多項技術的系統進行發佈，其中包含 o3 模型，同時 o3 模型將不再單獨進行發佈。&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353433</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353433</guid>
      <pubDate>Sat, 10 May 2025 02:23:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Quarkdown 橫空出世：當 Markdown 遇上 LaTeX，排版世界迎來新變革</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;在科技圈，每隔一段時間就會出現試圖「重新發明輪子」的項目。但當這個輪子確實比原來的更圓、更好用時，我們是否應該給它一個機會？最近在 GitHub 上爆火的 Quarkdown 項目，就是這樣一個野心勃勃的「造輪子」工程——它想要結合 Markdown 的簡潔與 LaTeX 的強大，創造一個全新的排版系統。&lt;/p&gt; 
&lt;h2&gt;從一個痛點説起&lt;/h2&gt; 
&lt;p&gt;如果你曾經寫過學術論文或技術文檔，一定對這個場景不陌生：用 Markdown 寫作時覺得功能太少，想要更復雜的排版；切換到 LaTeX 後又被滿屏的反斜槓和 begin/end 弄得頭暈眼花。正如 HackerNews 用户 blenderob 所説：「LaTeX 的語法就像是在懲罰用户。」&lt;/p&gt; 
&lt;p&gt;Quarkdown 的誕生，正是為瞭解決這個兩難困境。它的核心理念很簡單：保持 Markdown 的易讀性，同時提供 LaTeX 級別的排版控制能力。&lt;/p&gt; 
&lt;h2&gt;魔法般的函數系統&lt;/h2&gt; 
&lt;p&gt;Quarkdown 最引人注目的特性是其函數調用系統。想象一下，你可以在 Markdown 中這樣寫：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-markdown"&gt;.function {greet}
    to from:
    **Hello, .to** from .from!

.greet {world} from:{iamgio}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;結果會渲染為：&lt;strong&gt;Hello, world&lt;/strong&gt; from iamgio！&lt;/p&gt; 
&lt;p&gt;這種設計讓 Markdown 瞬間變成了一門圖靈完備的編程語言。你可以定義變量、創建循環、實現條件判斷，甚至構建自己的函數庫。用户 jamesgill 形象地比喻道：「這就像給自行車裝上了發動機！」&lt;/p&gt; 
&lt;h2&gt;與 Typst 的正面交鋒&lt;/h2&gt; 
&lt;p&gt;説到現代排版系統，就不得不提到近期大熱的 Typst。有趣的是，Quarkdown 的對比表中最初竟然沒有包含 Typst，這在 HackerNews 上引發了不小的爭議。用户 structural 直言：「Typst 最近獲得了大量關注，不把它列入對比表令人驚訝。」&lt;/p&gt; 
&lt;p&gt;兩者的核心差異在於設計哲學。Typst 更像是「LaTeX 的現代化重製版」，它有自己完整的語法體系，學習曲線相對陡峭，但功能強大且專業。而 Quarkdown 則選擇了「漸進式增強」的路線——你的 Markdown 文檔依然是 Markdown，只是在需要時可以調用強大的函數功能。&lt;/p&gt; 
&lt;p&gt;用户 krick 精闢地總結道：「Quarkdown 傾向於『比 Markdown 稍微強大一點』，而不是『替代 LaTeX』。」這種定位差異決定了兩者的不同受眾。Typst 吸引的是那些想要徹底擺脱 LaTeX 但又需要專業排版能力的用户，而 Quarkdown 則更適合那些已經在使用 Markdown，但偶爾需要更強大功能的人。&lt;/p&gt; 
&lt;p&gt;從實用角度看，Typst 目前已經支持 HTML 輸出（雖然還在實驗階段），而且有着更成熟的生態系統。但 Quarkdown 的優勢在於更低的學習門檻——如果你已經熟悉 Markdown，上手 Quarkdown 幾乎沒有額外成本。&lt;/p&gt; 
&lt;h2&gt;實際應用：不只是紙上談兵&lt;/h2&gt; 
&lt;p&gt;Quarkdown 不僅支持傳統的文檔輸出，還能生成幻燈片（基於 reveal.js）、分頁文檔（書籍、文章，基於 paged.js）以及 PDF 導出（通過 Chrome 的打印功能）。項目還提供了一個令人印象深刻的實時預覽功能。你可以一邊編寫，一邊看到渲染結果，這對於調試複雜的排版來説簡直是福音。&lt;/p&gt; 
&lt;p&gt;用户 speerer 興奮地表示：「我可能終於找到了替代我那些 rickety 的模板和 pandoc 轉換管道的工具了！」這種熱情反映了許多技術寫作者的心聲——他們一直在尋找一個既簡單又強大的解決方案。&lt;/p&gt; 
&lt;h2&gt;爭議與討論&lt;/h2&gt; 
&lt;p&gt;當然，任何新技術都會引發爭議。在 HackerNews 的討論中，幾個核心問題被反覆提及。&lt;/p&gt; 
&lt;p&gt;首先是 Java 依賴問題。Quarkdown 基於 Kotlin 開發，需要 Java 17+運行環境。用户 akagusu 直接表示：「看到需要 Java 17 或更高版本，我就失去興趣了。」這種反應代表了相當一部分開發者的心聲。正如用户 francislavoie 所説：「CLI 工具還要 JVM 語言？要是有靜態二進制文件，我會更願意嘗試。」&lt;/p&gt; 
&lt;p&gt;其次是語法設計爭議。函數參數需要縮進的設計引發了激烈討論。用户 krick 認為這會導致整個文檔都變成縮進的，破壞了 Markdown 的簡潔性：「我的主要問題是函數參數需要製表符縮進。看起來這會導致整個文檔都被製表符縮進。」&lt;/p&gt; 
&lt;p&gt;最具挑戰性的是生態系統問題。用户 behnamoh 作為一名學者直言不諱：「作為學術工作者，我不會使用這個，因為我看不到我的合作者會用它。」這道出了所有新排版系統面臨的雞生蛋問題——沒有用户就沒有生態，沒有生態就吸引不到用户。&lt;/p&gt; 
&lt;h2&gt;技術亮點與創新&lt;/h2&gt; 
&lt;p&gt;拋開爭議，Quarkdown 確實有一些值得稱道的技術創新。其媒體存儲系統能自動管理文檔中的圖片和其他媒體資源，項目創建嚮導可以通過命令行工具快速搭建項目結構，而標準庫系統則提供了佈局構建器、I/O 操作、數學函數等豐富功能。&lt;/p&gt; 
&lt;p&gt;特別值得一提的是其實時編譯功能。文件變化時自動重新編譯，配合預覽功能體驗極佳。這種開發體驗的提升，可能是吸引用户嘗試新工具的重要因素。&lt;/p&gt; 
&lt;h2&gt;未來展望：理想與現實&lt;/h2&gt; 
&lt;p&gt;Quarkdown 代表了一種理想：讓複雜的排版變得簡單，讓簡單的文檔保持簡潔。但理想能否照進現實，還需要時間檢驗。&lt;/p&gt; 
&lt;p&gt;支持者認為，隨着 AI 助手的普及，複雜的語法不再是障礙。用户 sgt 充滿期待地説：「如果 LLM 開始默認輸出 Quarkdown 格式——哪怕只是一個提供商（比如 OpenAI），這個項目就會像野火一樣蔓延。Markdown 的侷限性確實有點過時了。」&lt;/p&gt; 
&lt;p&gt;反對者則指出，LaTeX 已經統治學術界幾十年，任何替代品都需要提供足夠的價值才能説服用户遷移。用户 slashdave 質疑道：「我有二十年前寫的 LaTeX 文檔，現在還能完美渲染。當這個潮流過去後，10 年後 Quarkdown 文檔會怎樣？」&lt;/p&gt; 
&lt;p&gt;用户 coliveira 更是直接：「這就是為什麼這些東西都走不遠。如果我需要寫格式化細節，最好使用 LaTeX，這是一個經過充分測試的穩定語言，還能再用 30 年。」&lt;/p&gt; 
&lt;h2&gt;結語：給創新一個機會&lt;/h2&gt; 
&lt;p&gt;在這個「重複造輪子」被視為貶義的時代，Quarkdown 的出現提醒我們：有時候，重新思考既有方案也許能帶來意想不到的突破。&lt;/p&gt; 
&lt;p&gt;無論你是被 LaTeX 折磨的研究生，還是覺得 Markdown 功能不夠的技術寫作者，Quarkdown 都值得一試。即使它最終無法撼動 LaTeX 的地位，至少它展示了一種可能性：排版系統可以既強大又友好。&lt;/p&gt; 
&lt;p&gt;正如項目名稱的寓意——夸克是構成物質的基本粒子，輕盈卻藴含無限可能。也許，Quarkdown 真的能成為下一代排版系統的基石。或者，它至少能激發更多人思考：我們真的需要忍受那些設計於幾十年前的工具嗎？&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353418</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353418</guid>
      <pubDate>Sat, 10 May 2025 01:23:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>​​字節跳動開源 Computer Use Agent：引領人機交互新革命​</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;div class="ckeditor-html5-video"&gt; 
 &lt;video controlslist="nodownload"&gt;
  &amp;nbsp;
 &lt;/video&gt; 
&lt;/div&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;字節跳動開源 Computer Use Agent：引領人機交互新革命&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;在人工智能技術日新月異的今天，字節跳動再次以創新者的姿態，宣佈開源其自主研發的 Computer Use Agent（以下簡稱 CUA）。這一舉措不僅標誌着字節跳動在 AI 領域的又一重大突破，更為全球開發者提供了一個強大的工具，以前所未有的方式與計算機進行交互。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;CUA：從對話到行動的跨越&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;傳統的 AI 助手往往停留在「對話式人工智能」的層面，即通過自然語言處理理解用户意圖，並給出相應的回答或建議。然而，CUA 則實現了從「對話」到「行動」的跨越。它不僅能夠理解用户的指令，更能通過自研的 Doubao 1.5 UI-TARS 模型，直接與計算機的圖形用户界面（GUI）進行交互，執行復雜的任務。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;Doubao 1.5 UI-TARS 模型融合了視覺能力與高級推理，能夠精準捕捉用户指令背後的場景意圖。無論是視頻剪輯、演示文稿製作，還是自媒體賬號運維，CUA 都能輕鬆應對，極大地提升了用户的工作效率。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;強大的技術支撐&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;CUA 的強大背後，是字節跳動在 AI 領域的深厚積累。其核心技術包括：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;感知能力&lt;/strong&gt;：CUA 能夠截取計算機屏幕圖像，對數字環境中的內容進行情境化處理，為決策提供依據。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;推理能力&lt;/strong&gt;：藉助思維鏈推理，CUA 能夠評估觀察結果，跟蹤中間步驟的進展，動態適應新的挑戰和不可預見的變化。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;行動能力&lt;/strong&gt;：利用虛擬鼠標和鍵盤，CUA 能夠執行鍵入、點擊和滾動等操作，實現與計算機的無縫交互。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;多系統支持與極致性能&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;CUA 不僅支持 Windows 操作系統，還兼容 Linux 系統，滿足了不同用户的需求。Windows 系統擁有豐富的傳統軟件生態，而 Linux 系統則更加輕量與靈活，適合企業級計算環境。此外，依託字節跳動分佈式架構的底層技術積累，CUA 實現了雲主機實例的秒級啓動響應，動態負載均衡機制可根據業務流量實時調整資源分配，構建從資源申請到服務就緒的極致彈性鏈路。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;靈活的服務組合&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;CUA 採用高內聚低耦合的微服務架構設計，支持全棧式部署與組件化調用。對於大型互聯網客户，可以按需編排 Agent Planer、MCP Server、Sandbox Manager 等服務；對於小型客户，則提供全棧式的一體化解決方案，滿足不同規模用户的需求。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;開源與社區支持&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;字節跳動此次開源 CUA，不僅是為了分享技術成果，更是為了與全球開發者共同構建一個更加智能、高效的人機交互生態。開發者可以通過 GitHub 輕鬆獲取 CUA 的代碼，並參與到其開發與優化中來。此外，字節跳動還提供了豐富的文檔和社區支持，幫助開發者快速上手並充分利用 CUA 的強大功能。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;展望未來&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;隨着人工智能技術的不斷發展，人機交互將變得更加自然、高效。字節跳動開源 CUA，無疑為這一趨勢注入了新的動力。未來，CUA 有望在更多領域得到應用，如智能家居、遠程辦公、教育培訓等，為用户帶來更加便捷、智能的體驗。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;結語&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;字節跳動開源 Computer Use Agent，是其在 AI 領域的一次重要佈局，也是對全球開發者的一份厚禮。通過開源 CUA，字節跳動不僅分享了其技術成果，更與全球開發者共同探索人機交互的未來。讓我們期待 CUA 在未來的發展中，為用户帶來更多驚喜與便利。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;開源鏈接&lt;/strong&gt;：&lt;span style="background-color:#f3f3f3; color:rgba(0, 0, 0, 0.9)"&gt;https://github.com/volcengine/ai-app-lab/tree/main/demohouse/computer_use&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353373</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353373</guid>
      <pubDate>Fri, 09 May 2025 11:42:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
  </channel>
</rss>
