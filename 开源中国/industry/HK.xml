<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>開源中國-綜合資訊</title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="http://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml"></atom:link>
        <description>開源中國-綜合資訊 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Thu, 05 Sep 2024 13:24:33 GMT</lastBuildDate>
        <ttl>180</ttl>
        <item>
            <title>開源日報 | Qwen 在 GitHub 上顯示 404；KK 預測人工智能三大趨勢；IBM 敗走中國；智譜 AI 又融資了；OpenBMC 成服務器固件發展的「事實標準」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;歡迎閲讀 OSCHINA 編輯部出品的開源日報，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.9.5&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要聞&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/310448/qwenlm-github-repo-404&quot;&gt;阿里通義千問全系列大模型被 GitHub 下架，所有倉庫頁面「404」&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p&gt;9 月 5 日早上，有開發者在社交平台上稱在 GitHub 上打開阿里雲 Qwen 頁面後顯示 404。&lt;/p&gt; 
 &lt;p&gt;阿里高級算法專家林俊暘在社交媒體上表示：「GitHub 因未知原因標記了我們的組織，我們正在嘗試與他們聯繫以尋求解決方案。」&lt;/p&gt; 
 &lt;p&gt;直到當天下午，阿里通義千問全系列大模型的開源代碼倉庫恢復正常訪問。&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FQwenLM&quot; target=&quot;_blank&quot;&gt;https://github.com/QwenLM&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0905/175943_6ZHA_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/310410/01-ai-yi-coder&quot;&gt;零一萬物開源 Yi-Coder 系列編程助手模型&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;零一萬物正式開源了 Yi-Coder 系列編程模型。Yi-Coder 系列模型專為編碼任務而生，提供 1.5B 和 9B 兩種參數。其中，Yi-Coder-9B 的表現號稱 「優於其他 10B 參數以下的模型」，如 CodeQwen1.5 7B 和 CodeGeex4 9B，甚至能夠 「與 DeepSeek-Coder 33B 相媲美」。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Yi-Coder 能夠處理最長 128K tokens 的上下文內容，適用於複雜項目級代碼的理解和生成。Yi-Coder 還支持 52 種主要編程語言。&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FtcuQJ56sxH8dL_2NJ3sUiw&quot; target=&quot;_blank&quot;&gt;微軟在 Windows 11 集成中國開源大模型架構 RWKV、裝機量近 5 億&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;2024 年 9 月 ，RWKV 社區成員發現：Office 系統在自動更新後（版本 2407 及以後）已自帶 RWKV 運行庫。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;在 Windows 系統的&amp;nbsp;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;C:\Program Files\Microsoft Office\root\vfs\ProgramFilesCommonX64\Microsoft Shared\OFFICE16&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;目錄，可以找到一系列&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;rwkv&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;dll（動態鏈接庫） 文件。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;RWKV dll in Windows&quot; src=&quot;https://oscimg.oschina.net/oscnet/RWKV-dll-in-windows-os.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;由於正版 Windows 大多預裝了 Office 365，因此，全球大多數 Windows 10 和 11 機器現已搭載 RWKV，包括線下商店中售賣的 Windows 機器。這意味着 RWKV 的裝機量可達幾億台。&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;RWKV 是真正的開源架構（目前在&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flfaidata.foundation%2Fprojects%2Frwkv%2F&quot; target=&quot;_blank&quot;&gt;Linux Foundation 旗下&lt;/a&gt;），遵循 Apache 2.0 協議，可用於商業，歡迎大家在各個項目使用。&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;RWKV 的最新架構為 RWKV-6，且 RWKV-7 即將公佈。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/310590&quot; target=&quot;news&quot;&gt;著名未來學家凱文·凱利（KK）預測人工智能三大趨勢&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;2024 Inclusion・外灘大會今天在上海黃浦世博園區開幕。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;著名未來學家、《連線》雜誌創始主編、《5000 天后的世界》作者凱文・凱利（Kevin Kelly，「KK」）在開幕主論壇上的演講中指出，當人工智能深刻影響經濟和文化，必將湧現三大趨勢：&lt;strong&gt;全球主義、創新加速和 AI 驅動生成&lt;/strong&gt;。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-971603e73b5d38d489dc052d6f0f031beb7.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日觀察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交觀察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fxueqiu.com%2F3261990793%2F303707299&quot; target=&quot;_blank&quot;&gt;大魚吃小魚!AI 芯片初創公司，前景不妙 &lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;p&gt;從谷歌的 TPU、蘋果的 M1 和 M2、微軟 Maia 100 和 Cobalt 100、Meta 的 MTIA、亞馬遜的 Trainium 和 Inferentia、特斯拉的 Dojo，到英特爾的 FPGA 系列、AMD 的 MI300 系列……巨頭們一次次衝擊着英偉達的帝國圍牆。&lt;/p&gt; 
        &lt;p&gt;而在 AI 競速的大時代裏，湧現了一大批初創 GPU、AI 芯片公司，這些從業者和科技廠商們無不在找尋突破口。全球初創企業如今正試圖證明它們可以在某些應用領域提供比行業巨頭英偉達更好的芯片解決方案。雖然英偉達的 GPU 繼續主導人工智能（AI）領域，但 AI 初創企業認為，GPU 的高能耗和龐大的設計留下了市場空隙，供新興企業填補，希望分享 AI 技術繁榮帶來的利益。&lt;/p&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;&lt;span&gt;- &lt;strong&gt;半導體產業縱橫&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1658606840%2FOvw3582XP%3Frefer_flag%3D1001030103_&quot; target=&quot;_blank&quot;&gt;RWKV.cpp 是底層 C++實現通過傳統 C 接口暴露帶 Python 調用入口的 loader&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;p&gt;所以 RWKV 是基於 RNN 但達到 Transformer 性能的模型架構，而這個 RWKV.cpp 是底層 C++實現通過傳統 C 接口暴露帶 Python 調用入口的 loader。特點就是可以在 CPU 上通過 SSE 啊 NEON 啊這些指令集跑得飛快，當然也兼容 GPU，所以低耗高效。好的好的，C++項目我喜歡，不管三七二十一先 fork 一個先&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;&lt;span&gt;wingc&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2Fttarticle%2Fp%2Fshow%3Fid%3D2309405075207596671014&quot; target=&quot;_blank&quot;&gt;第一個 100% 開源的 MoE 大模型，7B 的參數，1B 的推理成本&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;訓練代碼、中間 checkpoint、訓練日誌和訓練數據都已經開源。&lt;/p&gt; 
    &lt;p&gt;儘管大語言模型 (LM) 在各種任務上取得了重大進展，但在訓練和推理方面，性能和成本之間仍然需要權衡。&lt;/p&gt; 
    &lt;p&gt;對於許多學者和開發人員來説，高性能的 LM 是無法訪問的，因為它們的構建和部署成本過高。改善成本 - 性能的一種方法是使用稀疏激活混合專家 (MoE)。MoE 在每一層都有幾個專家，每次只激活其中的一個子集（參見圖 2）。這使得 MoE 比具有相似參數量的密集模型更有效，因為密集模型為每個輸入激活所有參數。&lt;/p&gt; 
    &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;&lt;span&gt;機器之心&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F7825731473%2FOvtOXuNy0&quot; target=&quot;_blank&quot;&gt;LakeSoul 提供了原生的 Python 接口&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     LakeSoul 提供了原生的 Python 接口，可以很方便地將數據湖的數據跟模型訓練進行掛鈎；LakeSoul 也支持向量檢索，對外會提供一個融合檢索服務層，支持向量檢索、sql 檢索、文件檢索於一體的多模態融合檢索，能極致賦能大模型在行業應用的落地。
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;朱亞東-數元靈&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒體觀察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.com.cn%2Farticle_6192937794_17120bb4202002b75s.html&quot; target=&quot;_blank&quot;&gt;IBM 敗走中國&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;p&gt;在過去二十年間，IBM 犯了一系列戰略錯誤，包括在雲計算領域的佈局起步較晚，錯過利用開源生態系統構建其產品和服務的機遇；傳統業務市場被雲計算和現代化服務替代者搶佔；備受期待的人工智能平台 Watson 商業化應用不達預期。&lt;/p&gt; 
       &lt;p&gt;2012 年開始，IBM 全年營收開始逐年下降，2013 年營收跌破千億。到 2023 年，IBM 營收僅有 618 億美元。&lt;/p&gt; 
       &lt;p&gt;業績下滑原因系傳統硬件業務銷售下滑，雲計算和軟件業務逐漸成為 IBM 的核心收入來源，新興業務雖然增長迅速，但未能完全彌補傳統業務下滑的影響。&lt;/p&gt; 
       &lt;p&gt;而在中國，IBM 要面臨更為複雜的境況。&lt;/p&gt; 
       &lt;p&gt;美國對中國的技術出口限制、對中國企業的制裁，導致外企在中美之間的研發合作、技術轉移和跨境數據流動變得比以往更加困難。在移動互聯網興起的十年前，人們認為世界會越來越「平」，隨着信息高速流通，國家之間的鴻溝將被逐漸彌合。但十年後的今天，全球化開始退潮，「地球村」的暢想已成明日黃花。&lt;/p&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;-&amp;nbsp;&lt;strong&gt;界面新聞&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8cd4fMakARr&quot; target=&quot;_blank&quot;&gt;智譜 AI，又融資了&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;今日，伴隨中關村科學城公司通過公眾號宣佈以投前 200 億元估值，領投智譜新一輪融資，方才塵埃落定。&lt;/p&gt; 
  &lt;p&gt;對於投後估值以及更多融資信息，智譜官方未給予置評。而這也是智譜，連續兩年，年內被曝完成 3 輪融資。去年至今，該公司已完成 6 輪融資。&lt;/p&gt; 
  &lt;p&gt;值得一提的是，智譜先後獲得阿里、騰訊、美團、小米等諸多互聯網大廠押注，以及紅杉、高瓴、君聯、順為等知名機構的投資，在 AI 大模型公司中，可謂一枝獨秀。&lt;/p&gt; 
  &lt;p&gt;成立至今，智譜一直是市場上炙手可熱的存在。早在 2019 年 8 月，成立僅 2 個月，華控基金、中科創星等就已火速入股。2021-2021 年，該公司則先後在 9 月份獲得 A、B 輪融資。&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;獵雲網&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.prnasia.com%2Fstory%2F459676-1.shtml&quot; target=&quot;_blank&quot;&gt;阿里雲、字節、浪潮信息、英特爾、電標院：OpenBMC 成服務器固件發展的「事實標準」&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;傳統 BMC 雖然可以實現部分管理，但是在快速迭代的當今尤其是在 AI 技術的驅動下，存在開發週期長、交付困難、應用單一等難題，並且由於其代碼閉源也會導致隱藏的安全漏洞無法及時識別，限制了用户定製開發。OpenBMC 憑藉領先的開源理念、可擴展的軟件架構，被大型互聯網廠商廣泛應用，並帶動了產業連上下游共同探索，逐步成為服務器固件發展的&quot;事實標準&quot;。&lt;/p&gt; 
 &lt;p&gt;在日前召開的 2024 開放計算中國峯會上，來自阿里雲、字節跳動、浪潮信息、英特爾以及電子標準院的專家，從自身探索和實踐的角度，現身説法各家在 OpenBMC 方面的最新進展及未來規劃。&lt;/p&gt; 
 &lt;div&gt; 
  &lt;div style=&quot;text-align:right&quot;&gt;
   &lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt; 
   &lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;美通社&lt;/span&gt;&lt;/strong&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcj.sina.com.cn%2Farticles%2Fview%2F2853016445%2Faa0d937d02000ztnm&quot; target=&quot;_blank&quot;&gt;通信效率超 98%！壁仞科技實現中國首個三種異構芯片混訓技術&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;為瞭解決用户需求和技術挑戰，壁仞科技團隊攻堅異構 GPU 訓練難點，自主研發出原創異構 GPU 協同訓練方案 HGCT，通過異構調度、異構通信、異構拆分三層架構，實現了一套統一方案支持多種不同型號、不同廠商的 GPU，業界首次支持 3 種及以上異構 GPU 混合訓練同一個大模型。&lt;/p&gt; 
 &lt;p&gt;壁仞科技表示，這一異構 GPU 協同訓練方案對於行業端有兩個意義：1、該方案最終價值實現了國產 GPU 和英偉達 GPU 的異構共存，突破異構算力孤島難題，加快國產 GPU 的落地遷移，助力國產大模型落地；2、該方案賦能整個算力產業發展，壁仞 HGCT 方案具備普適性、易用性、兼容性，助力最終客户實現多種異構算力聚合，最大化異構 GPU 集羣利用效率。&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt; &lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;鈦媒體&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F19LhsTqTbrK4mlnnBB6JHA&quot; target=&quot;_blank&quot;&gt;「稚暉君」 停更這一年：想贏下人形機器人，要像運營大公司那樣去創業&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p&gt;「在學校裏學習更多是自底向上，先打好基礎然後做上層應用，出了校園之後更多是自頂向下，以項目導向，缺啥學啥。」 彭志輝説。聊到時間管理方法，他説是 「操作系統中的搶佔式調度」，動態調整任務優先級，允許打斷，但是任何時間都專注於當前的任務。&lt;/p&gt; 
   &lt;p&gt;他不喜歡 「天才少年」 的稱呼，他覺得教科書中那些能改變人類發展進程的科學家才是天才。&lt;/p&gt; 
   &lt;p&gt;相比過去用幾個月就能獨自完成的小型項目，參與創辦一家公司開發成功的產品要難得多。他要從單兵作戰走向帶團隊協作，做出來的東西不能只是酷，還要能賺錢。這是一場新的、更復雜的學習。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;晚點 LatePost&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推薦&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://my.oschina.net/u/5783135/blog/15671421&quot; target=&quot;news&quot;&gt;深入理解 Babel - 微內核架構與 ECMAScript 標準化&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p&gt;隨着瀏覽器版本的持續更新，瀏覽器對 JavaScript 的支持越來越強大，Babel 的重要性顯得較低了。但 Babel 的設計思路、背後依賴的 ECMAScript 標準化思想仍然值得借鑑。&lt;/p&gt; 
   &lt;p&gt;本文涉及的 Babel 版本主要是 V7.16 及以下，截至發文時，Babel 最新發布的版本是 V7.25.6，未出現大版本更新，近 2 年也進入了穩定迭代期，本文的分析思路基本適用目前的 Babel 設計。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;開源之聲&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户觀點&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F98boIfNzaXHKZpvBC8Wt_g&quot; target=&quot;_blank&quot;&gt;Vue 3.5「天元突破紅蓮螺巖」正式發佈&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：還在用 vue2.x， 也挺好&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 2：上月入職一公司。我之前學了 vue3，但公司項目是 vue2，寫的我真難受，很不習慣&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FtL1KN4cMEUcGcMzwDy1KcA&quot; target=&quot;_blank&quot;&gt;阿里通義千問 (QwenLM) 全系列大模型被 GitHub 下架，訪問 repo 顯示「404」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：已經快 5 年不用 github 了，中心化的東西一蹦全癱瘓了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 2：應該是美國當局懷疑大模型背後有暗門，當心他們本國用户下載使用後被標記定位或外傳數據，他們自己的大模型可是嚴格管控的。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 3：嚇得我立刻備份 github 所有私有庫&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最後，歡迎掃碼下載「開源中國 APP」，閲讀海量技術報告、程序員極客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310600</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310600</guid>
            <pubDate>Thu, 05 Sep 2024 11:53:54 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>著名未來學家凱文·凱利（KK）預測人工智能三大趨勢</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;2024 Inclusion·外灘大會今天在上海黃浦世博園區開幕。&lt;/p&gt; 
&lt;p&gt;著名未來學家、《連線》雜誌創始主編、《5000 天后的世界》作者凱文·凱利（Kevin Kelly，「KK」）在開幕主論壇上的演講中指出，當人工智能深刻影響經濟和文化，必將湧現三大趨勢：&lt;strong&gt;全球主義、創新加速和 AI 驅動生成&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-971603e73b5d38d489dc052d6f0f031beb7.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;全球主義&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;全球正在共同構建一個基於技術的「超級有機體」，將全球的設備連接成巨大的計算系統，所有數字技術包括人工智能都運行在這個新平台上。&lt;/li&gt; 
 &lt;li&gt;全球主義推進推動了新興的全球文化，人們的生活方式和穿着逐漸趨同，底層需求達成一致。&lt;/li&gt; 
 &lt;li&gt;人工智能將實現真正的「實時翻譯」，打破全球語言障礙，加上增強現實（VR）技術，全球化「勞動力」將第一次出現。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;創新加速&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;AI 技術加速了創新的步伐，體現在新發明和新思想傳播速度加快，通過增強現實（AR）和虛擬現實（VR）技術提高學習效率，AI 通過機器及其他傳感器感知世界，以及 ChatGPT 等人工智能工具加快人們學習速度。&lt;/li&gt; 
 &lt;li&gt;當答案易得時，提出正確問題和掌握正確思維方式變得更有價值，「學會如何學習」將成為未來畢業生的核心技能。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;AI 驅動生成&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;人工智能能幫助人們擺脱機械、枯燥的工作，完成無法獨立完成的任務，甚至生成超乎人類想象的全新事物。&lt;/li&gt; 
 &lt;li&gt;人工智能系統正在生成新事物且不斷完善，人工智能是多樣的，將填補許多智能領域。&lt;/li&gt; 
 &lt;li&gt;從人工智能工具中獲益最多的是表現一般或較差的員工，人工智能工具能幫助他們更好地完成工作。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;回答中國網友提問：人類正在通過人工智能重塑文明&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 2024 外灘大會開幕之前，凱文·凱利通過外灘大會官方微信，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FpIyyX-CR3HQs51Ot90H1TQ&quot; target=&quot;_blank&quot;&gt;向中國讀者徵集了關於 AI 的問題&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;5 日，外灘大會官方公佈了凱文·凱利的回答。&lt;/p&gt; 
&lt;p&gt;對於&lt;strong&gt;人工智能是不是人類的下一個進化階段&lt;/strong&gt;，凱文·凱利給出了肯定的答案，他認為，人工智能的重要性不亞於火、印刷術和工業革命，這將是廣泛而巨大的變革。但至少需要一個世紀的時間來實現，甚至可能更長，不可能一蹴而就。&lt;/p&gt; 
&lt;p&gt;「人類正在通過人工智能重塑文明。」凱文·凱利説，也許一百萬年來，我們一直是這個星球上唯一的智慧物種。但如今，我們正在創造人造「外星人」，就像他們來自遙遠的星球，前來拜訪我們一樣。這些「外星人」的思想將被引入我們的世界，從而創造出一種新的文化。&lt;/p&gt; 
&lt;p&gt;對於&lt;strong&gt;如何確保人工智能帶來的未來是有益的，而不是加劇不平等&lt;/strong&gt;，凱文·凱利表示，我們有理由對任何新技術保持謹慎，人工智能也不例外。「我認為，未來最大的問題之一可能會源自人工智能。但我們今天所擔心的許多問題，或許並不是最難解決的，那些問題是可以應對的。真正的挑戰可能是我們還未曾想象到的未知問題。」&lt;/p&gt; 
&lt;p&gt;他認為，首先要利用技術去引導它的發展，要實現我們期望的由人工智能驅動的未來，最好的途徑之一就是積極參與其中，而不是試圖禁止它或將其排斥在外。其次，應儘可能推動人工智能技術的開源化。開源模式賦予更多人蔘與的機會，形成一種更具包容性的技術生態系統。&lt;/p&gt; 
&lt;p&gt;在回答&lt;strong&gt;「未來哪些工作不會被人工智能取代」&lt;/strong&gt;時，凱文·凱利表示，正如當今就像幾乎沒有工作是不需要使用某種能源一樣，未來幾乎所有的工作都會使用某種程度的人工智能，但這並不意味着它們會被人工智能完全取代。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310590</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310590</guid>
            <pubDate>Thu, 05 Sep 2024 10:43:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>深入理解 Babel - 微內核架構與 ECMAScript 標準化｜得物技術</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;p&gt;&lt;em&gt;隨着瀏覽器版本的持續更新，瀏覽器對 JavaScript 的支持越來越強大，Babel 的重要性顯得較低了。但 Babel 的設計思路、背後依賴的 ECMAScript 標準化思想仍然值得借鑑。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;本文涉及的 Babel 版本主要是 V7.16 及以下，截至發文時，Babel 最新發布的版本是 V7.25.6，未出現大版本更新，近 2 年也進入了穩定迭代期，本文的分析思路基本適用目前的 Babel 設計。&lt;/em&gt;&lt;/p&gt; 
&lt;h1&gt;一、Babel 簡介&lt;/h1&gt; 
&lt;h2&gt;Babel 是什麼&lt;/h2&gt; 
&lt;p&gt;Babel 是 JavaScript 轉譯器，通過 Babel，開發者可以自由使用下一代 ECMAScript 語法。高版本 ECMAScript 語法將被轉譯為低版本語法，以便順利運行在各類環境，如低版本瀏覽器、低版本 Node.js 等。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Babel 是轉譯器，不是編譯器。下面是轉譯和編譯的區別:&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;編譯，一般指將一種語言轉換為另一種語法和抽象程度等都不同的語言，常見的比如 gcc 編譯器。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;轉譯，一般指將一種語言轉換為不同版本或者抽象程度相同的語言，比如 Babel 可以把 ECMAScript 6 語法轉譯為 ECMAScript 5 語法。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;利用 Babel，開發者可以使用 ECMAScript 的各種新特性進行開發，同時花極少的精力關注瀏覽器或其他 JS 運行環境對新特性的支持。甚至，開發者可以根據自身需要，創造屬於自己的 JavaScript 語法。&lt;/p&gt; 
&lt;p&gt;Babel 在轉譯的時候，會對源碼進行以下處理: 語法轉譯 (Syntax) 和添加 API Polyfill。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/01_1725449415228.jpg&quot; alt=&quot;01.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;語法 (Syntax) 部分 Babel 支持識別高版本語法，並通過插件將源碼從高版本語法轉譯為低版本語法，如:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;箭頭函數 () =&amp;gt; {} 轉為普通函數 function() {}。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;const / let 轉譯為 var&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;API Polyfill&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;有些運行時相關的 API，語法轉譯無法解決它們對低版本瀏覽器等環境的兼容性問題，因此 Babel 通過與 core-js 等工具的配合，實現 API 部分對目標環境 (通常是低版本瀏覽器等) 的兼容。&lt;/p&gt; 
&lt;p&gt;例如[1, 2, 3].include、Promise 等 API，Babel 在處理時，如果目標環節可能不支持原生的 include / Promise 的話，Babel 會在轉譯結果中嵌入 include / Promise 的自定義實現。&lt;/p&gt; 
&lt;p&gt;有多種方式可以使用 Babel，如: 命令行 (babel-cli、babel-node)、瀏覽器 (babel-standalone)、API 調用 (babel-core)、webpack loader(babel-loader) 等。&lt;/p&gt; 
&lt;h2&gt;轉譯過程&lt;/h2&gt; 
&lt;p&gt;和多數轉譯器相同，Babel 運行的生命週期主要是 3 個階段: 解析、轉換、代碼生成。&lt;/p&gt; 
&lt;p&gt;這個過程涉及抽象語法樹:&lt;/p&gt; 
&lt;p&gt;抽象語法樹 (Abstract Syntax Tree，AST)，或簡稱語法樹 (Syntax tree)，是源代碼語法結構的一種抽象表示。&lt;/p&gt; 
&lt;p&gt;AST 是樹形對象，以結構化的形式表示編程語言的語法結構，樹上的每個節點都表示源代碼中的一種結構。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/02_1725514960565.jpg&quot; alt=&quot;02.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;源碼字符串需要經轉譯器生成 AST，轉譯器有很多種，不同轉譯器，生成的 AST 對象格式細節可能有差異，但共同點為: 都是樹形對象、該樹形對象描述了節點特徵、各節點之間的關係（兄弟、父子等）。&lt;/p&gt; 
&lt;p&gt;以下是 Babel 生命週期的三個過程:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;解析 (Parsing): Code1 ==&amp;gt; 抽象語法樹 1 解析過程包括 2 個環節: 詞法解析、語法解析，最終生成抽象語法樹。 詞法解析階段，代碼字符串被解析為 token 令牌數組，數組項是一個對象，包括: 代碼字符碎片的值、位置、類型等信息。 token 數組是平鋪式的數組，沒有嵌套的結構信息，它是為語法解析階段做準備的。 語法解析階段，token 令牌數組被解析為結構化的抽放語法樹對象 (AST)。 babel-parser 完成該階段的主要功能。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/03_1725515016480.jpg&quot; alt=&quot;03.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;轉換 (Transformation): AST1 ==&amp;gt; AST2 Babel 生成 AST 後，會對 AST 進行遍歷，遍歷過程中，各類插件對原 AST 對象進行增刪改查等操作，AST 結構被修改。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/04_1725515063201.jpg&quot; alt=&quot;04.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;代碼生成 (Generation): AST2 ==&amp;gt; Code2 Babel 將修改後的 AST 對象轉目標代碼字符串。 babel-generator 完成該階段的主要功能。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/05_1725515093407.jpg&quot; alt=&quot;05.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;二、Babel 微內核架構&lt;/h1&gt; 
&lt;h2&gt;微內核架構&lt;/h2&gt; 
&lt;p&gt;Babel 採用微內核架構，其內核保留核心功能，其餘功能利用外部工具和插件機制實現，也體現了&quot;開放-封閉&quot;的設計原則。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/06_1725515126255.jpg&quot; alt=&quot;06.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;除了微內核設計架構，Babel 的模塊設計也可以做如下分類:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/07_1725515157896.jpg&quot; alt=&quot;07.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;轉譯模塊&lt;/h2&gt; 
&lt;p&gt;轉譯模塊位於 Babel 微內核架構的&quot;微內核&quot;部分，該部分主要負責代碼轉譯，也就是上面提到的&quot;解析-轉換-代碼生成&quot;過程。&lt;/p&gt; 
&lt;p&gt;該模塊主要包括: babel-parser、babel-traverse、babel-generator。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;babel-parser 負責將代碼字符串轉為 AST 對象。 有 2 點值得一提:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;babel-parser 本身並不會對 AST 做轉換操作，只是負責解析出 AST。AST 轉換部分交由各類 plugins 和 presets 處理。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;babel-parser 內置了對 ESNext/TypeScript/JSX/Flow 最新版本語法的支持，但很多默認是不開啓的，目前沒有開放插件機制擴展新語法。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-traverse 在轉譯過程中，babel-traverse 負責遍歷 AST 節點，並根據配置的 plugins/presets，在遍歷過程中，對各個 AST 節點進行增刪改查的操作。 AST 是一個樹形對象，遍歷 AST 對象的過程也是一個深度優先遍歷的過程。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-generator 負責將 AST 節點，轉為代碼字符串，同時也可以生成 source-map。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;插件模塊&lt;/h2&gt; 
&lt;p&gt;插件模塊包括 plugins、presets。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;plugins 豐富的插件，幫助 Babel 成為一個非常成功的轉譯工具。 對 AST 的遍歷、轉換是 Babel 轉譯的核心功能，但 Babel 本身並不參與該過程，將這些功能作為插件引入到運行時。 具體來説，babel-core 作為核心工具，不提供對 AST 的修改邏輯，通過調用各類插件，實現對 AST 的修改。 Babel 的插件分為語法插件和轉換插件。&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;語法插件，值得注意的是，babel-parser 負責將 JavaScript 代碼解析出抽象語法樹 (AST)，它支持全面識別 ESNext/TypeScript/JSX/Flow 等語法，目前由 Babel 團隊開發維護，不支持插件化。 Babel 插件生態中的語法插件，其功能就是作為&quot;開關&quot;，配置是否開啓 babel-parser 的某些語法轉譯功能。 語法插件在 Babel 源碼中，以 babel-plugin-syntax 開頭。 舉個例子:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;babel-plugin-syntax-decorators 負責開啓 babel-parser 對裝飾器的語法支持。&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;babel-plugin-syntax-dynamic-import 負責開啓 babel-parser 對 import 語句的語法支持。&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;babel-plugin-syntax-jsx 負責開啓 babel-parser 對 jsx 語法的支持。&lt;/p&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;轉換插件，轉換插件就是社區裏常説的 Babel 插件，負責轉換 AST 節點。 在介紹 babel-traverse 時提到，它負責遍歷 AST 對象，每個 AST 節點會被訪問到，等待轉換，轉換的部分，由&quot;轉換插件&quot;負責。 轉換插件會提供一個叫做&quot;Visitor&quot;的對象，該對象的 Key 為節點名稱，Value 部分提供進入該節點時、離開該節點時的回調函數，在回調函數裏，可以對該節點進行一系列操作。 &quot;Visitor&quot; 又稱為 &quot;訪問者&quot;。&lt;/p&gt; &lt;p&gt;// plugin 提供 visitor，在 visitor 中對 AST 節點操作 const visitor = { Program: { enter() {}, exit() {}, },&lt;/p&gt; &lt;pre&gt;&lt;code&gt;CallExpression: {
    enter() {},
    exit() {},
},

NumberLiteral: {
    enter() {},
    exit() {},
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;}; traverse(ast, visitor);&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;轉換插件在 Babel 源碼中，以 babel-plugin-transform 開頭。&lt;/p&gt; 
&lt;p&gt;舉個例子:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-plugin-transform-strict-mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;該插件攔截 Program 節點，也就是整個程序的根節點，添加 &quot;use strict&quot;指令。&lt;/p&gt; 
&lt;p&gt;visitor 節點值為函數時，是 enter 回調的快捷方式。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
    name: &quot;transform-strict-mode&quot;,

    visitor: {
      Program(path) {
        const { node } = path;

        for (const directive of node.directives) {
          if (directive.value.value === &quot;use strict&quot;) return;
        }

        path.unshiftContainer(
          &quot;directives&quot;,
          t.directive(t.directiveLiteral(&quot;use strict&quot;)),
        );
      },
    },
  };
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-plugin-transform-object-assign&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;該插件負責攔截函數調用表達式節點 CallExpression，將 Object.assign 轉為 extends 寫法。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
    name: &quot;transform-object-assign&quot;,

    visitor: {
      CallExpression(path, file) {
        if (path.get(&quot;callee&quot;).matchesPattern(&quot;Object.assign&quot;)) {
          path.node.callee = file.addHelper(&quot;extends&quot;);
        }
      },
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Presets&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Babel 插件的功能是細粒度的，大部分插件承擔了單一功能。&lt;/p&gt; 
&lt;p&gt;而在實際開發過程中，往往需要支持對各類語法的支持。此時，有兩種做法:&lt;/p&gt; 
&lt;p&gt;A. 需要支持哪些特性，就分別引入支持該特性的插件&lt;/p&gt; 
&lt;p&gt;B. 直接引入一個插件集合，涵蓋所需的各類插件功能&lt;/p&gt; 
&lt;p&gt;很顯然，第一種做法是相對麻煩的。針對第二種做法，Babel 提供了插件集 preset。&lt;/p&gt; 
&lt;p&gt;preset 在 Babel 源碼中，以 babel-preset 開頭。&lt;/p&gt; 
&lt;p&gt;例如，Babel 已經提供了幾種常用的 preset 供開發者使用:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;babel-preset-env&lt;/li&gt; 
 &lt;li&gt;babel-preset-react&lt;/li&gt; 
 &lt;li&gt;babel-preset-flow&lt;/li&gt; 
 &lt;li&gt;babel-preset-typescript&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;插件運行順序&lt;/strong&gt; Babel 配置項中，plugins 和 presets 均以數組的形式配置，執行時有先後順序。&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;plugins 在 presets 之前運行&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;plugins 按照數組正序執行&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;presets 按照數組倒序執行&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/08_1725519262475.jpg&quot; alt=&quot;08.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;工具模塊&lt;/h2&gt; 
&lt;p&gt;工具模塊提供 Babel 相關模塊所需的各類工具，以下一一簡要介紹:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;babel-core babel-core 對外提供了 Babel 多項功能的 API，如轉譯文件、轉譯代碼、創建/獲取配置等，在 Babel 官方文檔介紹的比較詳細，不再贅述。 值得注意的是，轉譯類的 API 均提供了同步和異步版本，如 transformSync/transfomAsync、parseSync/parseAsync。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-cli Babel 的命令行工具，可以直接轉譯文件夾/文件，它也提供了很多配置項做其他工作，官方文檔介紹的比較詳細，感興趣的同學可以去 Babel 官網查看詳細配置。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-standalone Babel 對外服務的很多包是基於 node 環境下使用的，babel-standalone 提供了瀏覽器下轉譯的方案。 babel-standalone 內置了所有 Babel 插件，所以體積還是比較大的，而且在瀏覽器端轉譯需要時間，比較適合開發、學習使用，不適合在生產環境使用。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;舉個例子:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;
    &amp;lt;title&amp;gt;test babel-standalone&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/babel&quot;&amp;gt;
      const arr = [1, 2, 3];
      console.log(...arr);
&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在瀏覽器運行該 html，可以看到，頁面結構變成了:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;
    &amp;lt;title&amp;gt;test babel-standalone&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/babel&quot;&amp;gt;
      const arr = [1, 2, 3];
      console.log(...arr);
&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
      &quot;use strict&quot;;
      var _console;
      var arr = [1, 2, 3];
      (_console = console).log.apply(_console, arr); //# sourceMappingURL=data:application/json;charset=utf-8;base64...
&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-node 提供在命令行執行高級語法的環境。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;例如:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// index.js 裏可以使用高級語法     
babel-node -e index.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;index.js 文件以及被其引入的其他文件均可以使用高級語法了。和 babel-cli 不同的是，babel-cli 只負責轉換，不在 node 運行時執行；babel-node 會在 node 運行時執行轉換，不適合生產環境使用。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-register&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在源文件中，引入 babel-register，如 index.js:&lt;/p&gt; 
&lt;p&gt;index.js&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;require(&#39;babel-register&#39;);     
require(&#39;./run&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;run.js&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import fs from &#39;fs&#39;;     
console.log(fs);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;執行 node index 時，run.js 就不需要被轉碼了。&lt;/p&gt; 
&lt;p&gt;babel-register 通過攔截 node require 方法，為 node 運行時引入了 Babel 的轉譯能力。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-loader&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;babel-loader 是利用 babel-core 的 API 封裝的 webpack loader，用於 webpack 構建過程。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-types&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;babel-types 是一個非常強大的工具集合，它集成了節點校驗、增刪改查等功能，是 Babel 核心模塊開發、插件開發等場景下不可或缺的工具。&lt;/p&gt; 
&lt;p&gt;例如:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const t = require(&#39;@babel/types&#39;);
const binaryExpression = t.binaryExpression(&#39;+&#39;, t.numericLiteral(1), t.numericLiteral(2));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-template&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;模板引擎，負責將代碼字符串轉為 AST 節點對象。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    import { smart as template } from &#39;@babel/template&#39;;
    import generate from &#39;@babel/generator&#39;;
    import * as t from &#39;@babel/types&#39;;

    const buildRequire = template(      var %%importName%% = require(%%source%%);    );

    const ast = buildRequire({
        importName: t.identifier(&#39;myModule&#39;),
        source: t.stringLiteral(&quot;my-module&quot;),
    });

    const code = generate(ast).code

    console.log(code)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;運行結果:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;var myModule = require(&quot;my-module&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-code-frame&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;負責打印出錯的代碼位置，例如:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const { codeFrameColumns } = require(&#39;@babel/code-frame&#39;);

const testCode = `
class Run {
    constructor() {}
}
`;

const location = {
    start: {
        line: 2,
        column: 2,
    }
};

const result = codeFrameColumns(testCode, location);

console.log(result);

  1 | class Run {
&amp;gt; 2 |     constructor() {}
    |  ^
  3 | }
  4 |
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-highlight&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;向控制枱輸出有顏色的代碼片段。該工具可以識別 JavaScript 中的操作符號、標識符、保留字等類型的詞法單元，並在終端環境下顯示不同的顏色。&lt;/p&gt; 
&lt;h2&gt;運行時相關模塊&lt;/h2&gt; 
&lt;p&gt;Babel 配合其插件可以對靜態代碼進行轉譯，但有一些遺漏點:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;對於運行時涉及的一些高版本 API，並沒有提供兼容目標環境的 Polyfill。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;轉譯產物代碼可能有些臃腫。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;為此，運行時模塊 (runtime) 關注的是轉譯產物的運行時環境，對運行時提供 API polyfill、代碼優化等，該模塊涉及幾個子包:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;babel-preset-env&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-plugin-transform-runtime&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-runtime&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-runtime-corejs2/3&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;core-js&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;接下來以案例解釋 runtime 模塊的作用。&lt;/p&gt; 
&lt;p&gt;源碼文件 index.js 的內容:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const a = 1; // const 為語法部分
class Base {} // class 為語法部分
new Promise() // Promise 為 API 部分
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;這段源碼包含了語法和 API 部分:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;const、class 為語法部分&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Promise 為 API 部分&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;如果希望這段源碼轉為 ES5 版本，使構建產物可以運行在不支持 ES6 和 Promise 的環境裏，該怎麼做呢？&lt;/p&gt; 
&lt;p&gt;用 babel 命令行執行轉譯，其中源文件為 index.js，轉譯產物文件為 index-compiled.js。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npx babel index.js --out-file index-compiled.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;需要配置.babelrc 幫助 Babel 完成語法和 API 部分的轉譯:&lt;/p&gt; 
&lt;p&gt;.babelrc:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
    &quot;presets&quot;: [
        [ 
            &quot;@babel/preset-env&quot;
        ]
    ],
    &quot;plugins&quot;: [
        [
            &quot;@babel/plugin-transform-runtime&quot;,
            {
                &quot;corejs&quot;: 3
            }
        ]
    ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;簡要解釋下該配置的原理:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;babel-preset-env 可以完成語法部分轉譯，即 const 轉譯為 var 但構建產物中，有些輔助代碼如 _classCallCheck 是以硬編碼的形式直接寫入轉譯產物的:&lt;/p&gt; &lt;p&gt;&quot;use strict&quot;;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(&quot;Cannot call a class as a function&quot;); } }

  var a = 1;

  var Base = function Base() {
      _classCallCheck(this, Base);
  };

  new Promise();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;這樣的後果就是構建產物比較臃腫。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;babel-plugin-transform-runtime 可以將上述 _classCallCheck 置於通用包中，以引用的形式寫入轉譯產物:&lt;/p&gt; &lt;p&gt;&quot;use strict&quot;;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  var _interopRequireDefault = require(&quot;@babel/runtime/helpers/interopRequireDefault&quot;);

  var _classCallCheck2 = _interopRequireDefault(require(&quot;@babel/runtime/helpers/classCallCheck&quot;));

  var a = 1;

  var Base = function Base() {
      (0, _classCallCheck2[&quot;default&quot;])(this, Base);
  };

  new Promise();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-plugin-transform-runtime 的配置參數 corejs 用於轉譯 API 部分，如 Promsie&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  &quot;use strict&quot;;

  var _interopRequireDefault = require(&quot;@babel/runtime-corejs3/helpers/interopRequireDefault&quot;);

  var _promise = _interopRequireDefault(require(&quot;@babel/runtime-corejs3/core-js-stable/promise&quot;));

  var _classCallCheck2 = _interopRequireDefault(require(&quot;@babel/runtime-corejs3/helpers/classCallCheck&quot;));

  var a = 1;

  var Base = function Base() {
      (0, _classCallCheck2[&quot;default&quot;])(this, Base);
  };

  new _promise&quot;default&quot;;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Babel 轉譯過程的運行時優化是一個繁瑣的過程，為此將單獨用一章講解運行時優化，感興趣的同學可以直接閲讀 &quot;Babel Runtime&quot; 章節詳細瞭解。&lt;/p&gt; 
&lt;h1&gt;三、標準化&lt;/h1&gt; 
&lt;p&gt;Babel 生態涉及的一些標準化組織。無論是 JavaScript、HTML、DOM、URL 等領域，均需要統一的標準，才能在不同的運行環境下有統一的表現。Babel 轉譯也需要遵循這些標準，包括 ECMAScript、web 標準等。&lt;/p&gt; 
&lt;h2&gt;ECMAScript&lt;/h2&gt; 
&lt;h3&gt;JavaScript 誕生&lt;/h3&gt; 
&lt;p&gt;1995 年，JavaScript 的第一個版本發佈。用時間線的方式描述 JavaScript 的誕生過程會更清晰:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/09_1725519904874.jpg&quot; alt=&quot;09.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;ECMAScript 發佈&lt;/h3&gt; 
&lt;p&gt;1996 年，微軟模仿 JavaScript 實現了 JScript 並內置在 IE3.0，隨後，Netscape 公司着手推動 JavaScript 標準化。&lt;/p&gt; 
&lt;p&gt;這裏涉及幾個組織:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Ecma International Ecma International 是一家國際性會員制度的信息和電信標準組織。1994 年之前，名為歐洲計算機製造商協會（European Computer Manufacturers Association）。因為計算機的國際化，組織的標準牽涉到很多其他國家，因此組織決定改名錶明其國際性。 Ecma International 的任務包括與有關組織合作開發通信技術和消費電子標準、鼓勵準確的標準落實、和標準文件與相關技術報告的出版。 Ecma International 負責多個國際標準的制定:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;CD-ROM 格式（之後被國際標準化組織批准為 ISO 9660）&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;C# 語言規範&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;C++/CLI 語言規範&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;通用語言架構（CLI）&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Eiffel 語言&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;電子產品環境化設計要素&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Universal 3D 標準&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;OOXML&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Dart 語言規範&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;ECMAScript 語言規範（以 JavaScript 為基礎）ECMA-262 其中就包括 JavaScript 標準語言規範 ECMAScript。 cma International 擁有 ECMAScript 的商標。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ECMA TC39 「TC39」全稱「Technical Committee 39」譯為「第 39 號技術委員會」，是 Ecma International 組織架構中的一部分。 TC39 負責迭代和發展 ECMAScript，它的成員由各個主流瀏覽器廠商的代表組成，通常每年召開約 6 次會議來討論未決提案的進展情況，會議的每一項決議必須得到大部分人的贊同，並且沒有人強烈反對才可以通過。 TC39 負責:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;維護和更新 ECMAScript 語言標準&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;識別、開發、維護 ECMAScript 的擴展功能庫&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;開發測試套件&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;為 ISO/IEC JTC 1 提供標準&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;評估和考慮新添加的標準&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ISO&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;國際標準化組織（英語: International Organization for Standardization，簡稱: ISO）成立於 1947 年 2 月 23 日，制定全世界工商業國際標準的國際標準建立機構。&lt;/p&gt; 
&lt;p&gt;ISO 的國際標準以數字表示，例如: &quot;ISO 11180:1993&quot; 的 &quot;11180&quot; 是標準號碼，而 &quot;1993&quot; 是出版年份。&lt;/p&gt; 
&lt;p&gt;ISO/IEC JTC 1 是國際標準化組織和國際電工委員會聯合技術委員會。其目的是開發、維護和促進信息技術以及信息和通信技術領域的標準。JTC 1 負責了許多關鍵的 IT 標準，從 MPEG 視頻格式到 C++ 編程語言。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/10_1725520572128.jpg&quot; alt=&quot;10.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMAScript 發展過程中的關鍵節點&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/11_1725520594519.jpg&quot; alt=&quot;11.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;ECMAScript 各版本&lt;/h3&gt; 
&lt;p&gt;ECMAScript 經歷了多個版本，每個版本有自己的特點，簡單列舉如下:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/12_1725520728091.jpg&quot; alt=&quot;12.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/13_1725520738100.jpg&quot; alt=&quot;13.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;ECMAScript 迭代過程&lt;/h3&gt; 
&lt;p&gt;一個 ECMAScript 標準的製作過程，包含了 Stage 0 到 Stage 4 共 5 個階段，每個階段提交至下一階段都需要 TC39 審批通過。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/14_1725520848631.jpg&quot; alt=&quot;14.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/15_1725520864402.jpg&quot; alt=&quot;15.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;特性進入 Stage-4 後，才有可能被加入標準中，還需要 ECMA General Assembly 表決通過才能進入下一次的 ECMAScript 標準中。&lt;/p&gt; 
&lt;h2&gt;如何閲讀 ECMAScript&lt;/h2&gt; 
&lt;h3&gt;ECMAScript 文檔結構&lt;/h3&gt; 
&lt;p&gt;ECMAScript 的規格，可以在 ECMA 國際標準組織的官方網站免費下載和在線閲讀。&lt;/p&gt; 
&lt;p&gt;查看 ECMAScript 不同版本的地址：&lt;em&gt;++&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fecma-international.org%2Fpublications-and-standards%2Fstandards%2Fecma-262%2F%2B%2B&quot; target=&quot;_blank&quot;&gt;https://ecma-international.org/publications-and-standards/standards/ecma-262/++&lt;/a&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;截至 2023 年底，已發佈的版本如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262 5.1 edition, June 2011&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F5.1%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/5.1/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 6th edition, June 2015&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F6.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/6.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 7th edition, June 2016&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F7.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/7.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 8th edition, June 2017&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F8.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/8.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 9th edition, June 2018&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F9.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/9.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 10th edition, June 2019&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F10.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/10.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 11th edition, June 2020&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F11.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/11.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 12th edition, June 2021&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F12.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/12.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 13th edition, June 2022&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F13.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/13.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 14th edition, June 2023&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F14.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/14.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;每個版本有獨立的網址，格式為: &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F%7Bversion%7D%2F%EF%BC%8C%E6%AF%94%E5%A6%82&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/{version}/，比如&lt;/a&gt; ECMAScript 14.0 版本的網址為 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F14.0%2F%E3%80%82&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/14.0/。&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;從章節數量上，ECMAScript 6.0、ECMAScript 7.0 有 26 章，之後的版本有 27-29 章，雖然章節數量不同，規格章節的分佈是保持一定規律的，以 ECMAScript 11.0 版本為例:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Introduction: 介紹部分&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;該章節簡要描述了: JavaScript 和 ECMAScript 的發展歷史、不同 ECMAScript 規格的主要更新內容。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;第 1 章到第 3 章: 描述了規格文件本身，而非語言&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;第 1 章用一句話描述了該規格的描述範圍。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;第 2 章描述了基於規格的&quot;實現&quot;的一致性要求:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;&quot;實現&quot;必須支持規格中描述的所有類型、值、對象、屬性、函數以及程序的語法和語義&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;&quot;實現&quot;必須按照 Unicode 標準和 ISO/IEC 10646 的最新版本處理文本輸入&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;&quot;實現&quot;如果提供了應用程序編程接口（API），那麼該 API 需要適應不同的人文語言和國家差異，且必須實現最新版本的 ECMA-402 所定義的與本規範相兼容的接口&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;&quot;實現&quot;可以支持該規格中沒有提及的類型、值、對象、屬性、函數、正則表達式語法以及其他編程寫法&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;&quot;實現&quot;不能實現該規格中禁止的寫法&lt;/p&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;第 3 章描述了該規格的一些參考資料:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;ISO/IEC 10646&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;ECMA-402&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;EMCA-404 JSON 數據交換格式規範&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;第 4 章: 對這門語言總體設計的描述。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;第 5 章到第 8 章: 語言宏觀層面的描述。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;第 6 章介紹數據類型。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;第 7 章介紹語言內部用到的抽象操作。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;第 8 章介紹代碼如何運行。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;第 9 章到第 27 章: 介紹具體的語法。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;一般而言，除非寫編譯器，開發者無需閲讀 ECMAScript 的規格，規格的內容非常多，如無必要也無需通讀。只是在遇到一些奇怪的問題時，閲讀官方規格，是最穩妥的辦法。&lt;/p&gt; 
&lt;h3&gt;通過閲讀規格解決一些問題（以 ECMAScript 11.0 為例）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;識別關鍵詞和保留字，並高亮 Babel 工具集中的 babel-highlight，可以實現在終端對代碼塊中的目標字符單元顯示不同的顏色。這裏需要識別不同字符單元的類型，如關鍵字、保留字、標識符、數字、字符串等。 標識符、數字、字符串都很好理解和識別，但哪些字符應該被識別為關鍵字、保留字，而不是標識符呢？ 此時可以閲讀 ECMAScript 規格了，ECMAScript 11.0 規格的 11.6.2 節介紹了關鍵詞和保留字列表。&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;關鍵詞（keywords） 關鍵詞首先是標識符，同時有語義，包括 if、while、async、await...，個別關鍵詞是可以用作變量名的。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;保留字（reserved word） 保留字首先是標識符，但不能用作變量名。 部分關鍵詞是保留字，但部分不是: if、while 是保留字；await 只有在 async 方法和模塊中才是保留字；async 不是保留字，它可以作為普通的變量名使用。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;保留字列表&lt;/p&gt; &lt;p&gt;await break case catch class const continue debugger default delete do else enum export extends false finally for function if import in instanceof new null returns uper switch this throw true try typeof var void while with yield&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;讀完上述規格，也就知道哪些字符單元是需要識別為保留字與關鍵詞，並高亮的了。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;識別全局對象，並高亮，繼續使用 babel-highlight 實現代碼塊中的全局對象高亮，那麼，我們需要知道哪些是規格中描述的全局變量。 規格的 18 章介紹了全局對象，通過該章的描述，可以知道:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;全局屬性，全局屬性有: globalThis、Infinity、NaN、    。&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;全局方法，全局方法有: eval(x)、isFinite、isNaN、parseFloat、parseInt、decodeURIComponent、encodeURIComponent 等。&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;全局構造函數，全局的構造函數有:&lt;/p&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;p&gt;Array ArrayBuffer BigInt BigInt64Array BigUnit64Array Boolean DataView Date Error EvalError Float32Array Float64Array Function Int8Array Int16Array Int32Array Map Number Object Promise Proxy RangeError ReferenceError RegExp Set SharedArrayBuffer String Symbol SyntaxError TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array URIError WeakMap WeakSet&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;其他的全局屬性 Atomics、JSON、Math、Reflect。 很顯然，當字符單元的名稱是上述名稱中的一員時，我們可以對其進行高亮處理了（若上下文中無重新定義的同名變量）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;自定義 Error babel-loader 自身維護了私有的 LoaderError 對象，該對象繼承自原生 Error 類，並且訂製了部分實例屬性。代碼如下:&lt;/p&gt; &lt;p&gt;class LoaderError extends Error { constructor(err) { super();&lt;/p&gt; &lt;pre&gt;&lt;code&gt;      const { name, message, codeFrame, hideStack } = format(err);

      this.name = &quot;BabelLoaderError&quot;;

      this.message = ${name ? ${name}: ` : &quot;&quot;}${message}\n\n${codeFrame}\n`;

      this.hideStack = hideStack;

      Error.captureStackTrace(this, this.constructor);
  }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;}&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;可以看到，babel-loader 自定義了錯誤實例的 name、message、hideStack 屬性，那麼，問題是，原生的 Error 類有哪些屬性和方法，哪些是開發者可以自定義的呢？&lt;/p&gt; 
&lt;p&gt;規格的 19.5 章節，詳細介紹了 Error 的各類規範:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Error 作為函數被調用時（Error(...)），表現和 new Error(...) 一致，均會創建並返回 Error 的新實例&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Error 可以被繼承，比如通過 extends 的方式，子類必須提供 constructor 方法，且該方法內必須提供 super() 調用&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Error 構造函數必須有 prototype 屬性&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Error.prototype 屬性需有以下屬性：&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;Error.prototype.constructor: 指向構造函數&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Error.prototype.message: 描述錯誤信息，默認是空字符串&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Error.prototype.name: 描述錯誤名稱，默認值是 Error&lt;/p&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;從 LoaderError 的源碼可以看到，LoaderError 做了以下幾件事情:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;LoaderError 繼承自 Error&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;實例自定義了 name、message 屬性，明確 babel-loader 的信息&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;實例自定義的 hideStack 屬性是非標準屬性，用於 babel-loader 內部&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;web 標準&lt;/h2&gt; 
&lt;p&gt;是在解決 API Polyfil 的時候，Babel 配合使用的 core-js 除了提供 ECMAScript 標準下的 JavaScript API 實現，也提供了 DOM/URL 等實現。而 DOM/URL 所屬的 web 標準，由 W3C/WHATWG 制定。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/16_1725521927064.jpg&quot; alt=&quot;16.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;經過多年發展，WHATWG 和 W3C 目前是合作關係，其中，WHATWG 維護 HTML 和 DOM 標準，W3C 使用 WHATWG 存儲庫中的 HTML 和 DOM 標準描述，W3C 在 HTML 部分的工作集中在 XHTML/XML 上。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/17_1725521957624.jpg&quot; alt=&quot;17.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;總結&lt;/h1&gt; 
&lt;p&gt;本文介紹了 Babel 的概述/微內核架構/ECMAScript 標準化方面的設計思想和部分實現原理。&lt;/p&gt; 
&lt;p&gt;上述內容其實在很早之前就已經成型了，筆者也查看了 Babel 最近的迭代內容，發現並沒有太大的變化。至於代碼轉譯領域，目前是 Babel 還是其他工具哪個更有優勢，不在本文的討論範圍內。除了比較社區哪些工具更好而言，&quot;Babel 的設計思路、其與標準規範是怎麼配合的&quot;等也是很值得學習的地方，也是這篇文章的產生背景。&lt;/p&gt; 
&lt;p&gt;希望本文對你有所幫助！&lt;/p&gt; 
&lt;p&gt;*&lt;strong&gt;文 / hoperyy&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;本文屬得物技術原創，更多精彩文章請看：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com%2F&quot; target=&quot;_blank&quot;&gt;得物技術&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;未經得物技術許可嚴禁轉載，否則依法追究法律責任！&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/5783135/blog/15671421</link>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/15671421</guid>
            <pubDate>Thu, 05 Sep 2024 07:49:12 GMT</pubDate>
            <author>得物技術</author>
        </item>
        <item>
            <title>《中國 MaaS（模型即服務）平台市場概覽報告》發佈</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;OSCHINA 發佈了《中國 MaaS（模型即服務）平台市場概覽報告》。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1540&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0905/150111_ySdv_2720166.png&quot; width=&quot;2728&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;主要內容包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;國內 MaaS 平台在互聯網平台的聲量對比&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;開發者對 MaaS 平台的關注度與需求分析&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;中國主流 MaaS 平台營銷活動形式&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#16a085&quot;&gt;&lt;strong&gt;報告亮點速覽&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;我們發現，當前 MaaS 平台的主要用户羣體是開發者和技術負責人，他們的關注點集中在平台的技術創新性、使用門檻、算力資源支持以及實際的開發應用能力上。&lt;/p&gt; 
&lt;p&gt;搜索關鍵詞分析則進一步強化了這一點，用户普遍關心的是 MaaS 平台的先進技術、資源配備以及實際的應用價值。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0905/150702_R0dY_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://report.oschina.net/api/files/jhim80u9qm1ofsw/jljf6vr8m1tlk9m/maa_s_dAgI0VpoJH.pdf&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;在線閲讀地址&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;div&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;該報告已上傳至開源中國 APP，歡迎前往&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#27ae60&quot;&gt;「開源中國 APP - 報告模塊」&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;查看更多深度內容。&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img height=&quot;1426&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0905/151256_svsk_2720166.png&quot; width=&quot;2540&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;p style=&quot;text-align:center&quot;&gt;「開源中國 APP」下載地址：&lt;br&gt; &lt;a href=&quot;https://www.oschina.net/app&quot; target=&quot;_blank&quot;&gt;https://www.oschina.net/app&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8ab7bb9f45ecaae87f7a862ea446ae1dacf.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310487</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310487</guid>
            <pubDate>Thu, 05 Sep 2024 07:28:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>阿里通義千問全系列大模型被 GitHub 下架，所有倉庫頁面「404」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;阿里通義千問 (QwenLM) 全系列大模型的代碼倉庫被 GitHub 下架，訪問其 repo 頁面和 GitHub 主頁均顯示「404」。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FQwenLM%2FQwen2&quot; target=&quot;_blank&quot;&gt;https://github.com/QwenLM/Qwen2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FQwenLM%2F&quot; target=&quot;_blank&quot;&gt;https://github.com/QwenLM/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height=&quot;1162&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0905/120524_ghDH_2720166.png&quot; width=&quot;2482&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1250&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0905/121025_Yi1H_2720166.png&quot; width=&quot;2438&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;阿里雲通義千問負責人回應稱沒有跑路，顯示「404」原因是突然被 GitHub 官方標記。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0905/120307_MIcX_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1230&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0905/133245_4Ie4_2720166.png&quot; width=&quot;1274&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;span&gt;來源：&lt;/span&gt;&lt;/em&gt;&lt;span style=&quot;color:#888888&quot;&gt;&lt;em&gt;&lt;span&gt;https://x.com/JustinLin610/status/1831489956512198862&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310448/qwenlm-github-repo-404</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310448/qwenlm-github-repo-404</guid>
            <pubDate>Thu, 05 Sep 2024 04:15:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>RWKV 模型已部署到 5 億台 Windows 電腦？真正開源的新一代 AI 架構</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;2024 年 9 月 ，RWKV 社區成員發現：Office 系統在自動更新後（版本 2407 及以後）已自帶 RWKV 運行庫。&lt;/p&gt; 
&lt;p&gt;在 Windows 系統的&amp;nbsp; &lt;code&gt;C:\Program Files\Microsoft Office\root\vfs\ProgramFilesCommonX64\Microsoft Shared\OFFICE16&lt;/code&gt; 目錄，可以找到一系列 &lt;code&gt;rwkv&lt;/code&gt; dll（動態鏈接庫） 文件。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;RWKV dll in Windows&quot; src=&quot;https://oscimg.oschina.net/oscnet/RWKV-dll-in-windows-os.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;由於正版 Windows 大多預裝了 Office 365，因此，全球大多數 Windows 10 和 11 機器現已搭載 RWKV，包括線下商店中售賣的 Windows 機器。這意味着 RWKV 的裝機量可達幾億台。&lt;/p&gt; 
 &lt;p&gt;RWKV 是真正的開源架構（目前在 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flfaidata.foundation%2Fprojects%2Frwkv%2F&quot; target=&quot;_blank&quot;&gt;Linux Foundation 旗下&lt;/a&gt;），遵循 Apache 2.0 協議，可用於商業，歡迎大家在各個項目使用。&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;RWKV 的最新架構為 RWKV-6，且 RWKV-7 即將公佈。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;從 dll 的文件屬性，可以明確這是 RWKV 模型的加載器：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;dll 文件屬性&quot; src=&quot;https://oscimg.oschina.net/oscnet/RWKV-dll-property.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;此外，微軟提供的協議中也明確出現了 rwkv.cpp 的倉庫地址 ：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;帶 rwkv.cpp 的許可證&quot; src=&quot;https://oscimg.oschina.net/oscnet/RWKV-cpp-license.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;隨後，社區開發者對 dll 文件進行解析，發現 dll 中的函數確實是來自 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FRWKV%2Frwkv.cpp&quot; target=&quot;_blank&quot;&gt;rwkv.cpp 庫&lt;/a&gt;中的 RWKV 模型相關函數：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;dll 文件中的函數&quot; src=&quot;https://oscimg.oschina.net/oscnet/RWKV-dll-export.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;該發現在多方社交媒體上引起了激烈的討論：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;RWKV 官方推文&quot; src=&quot;https://oscimg.oschina.net/oscnet/RWKV-dll-x-rwkv-ai.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/RWKV-dll-x-wangtiezhen.webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;知乎上的討論：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F666097016&quot; target=&quot;_blank&quot;&gt;https://www.zhihu.com/question/666097016&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;RWKV 在 Windows 系統中的角色&lt;/h3&gt; 
&lt;p&gt;目前，微軟方面未公佈 RWKV 模型會用於 Windows 系統中的哪些功能。&lt;/p&gt; 
&lt;p&gt;儘管 RWKV 系列 dll 文件存放在 Microsoft Office 目錄中，但它們其實是操作系統的一部分，而不僅限於 Microsoft Office 。&lt;/p&gt; 
&lt;p&gt;出於 RWKV 恆定的顯存/內存佔用、支持全球 100 多種語言、「能耗最低的模型」等特性，我們推測 RWKV 可能會用於以下 Windows 系統功能：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;本地 copilot&lt;/li&gt; 
 &lt;li&gt;作為 Windows 系統的本地記憶回調器&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;code&gt;Local memory recall&lt;/code&gt; 是讓操作系統記住你過去的操作或輸入信息，在需要時再次使用這些記憶。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;RWKV 的 llama.cpp 用法&lt;/h2&gt; 
&lt;p&gt;隨着 RWKV 社區成員 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMollySophia&quot; target=&quot;_blank&quot;&gt;@MollySophia&lt;/a&gt; 的工作，llama.cpp 現已適配 &lt;code&gt;RWKV-6&lt;/code&gt; 模型。&lt;/p&gt; 
&lt;p&gt;接下來，我們一起看看如何在 llama.cpp 中使用 RWKV-6 模型進行推理：&lt;/p&gt; 
&lt;h3&gt;第一步：獲取 gguf 格式模型&lt;/h3&gt; 
&lt;p&gt;llama.cpp 支持 &lt;code&gt;.gguf&lt;/code&gt; 格式的模型，但 RWKV 官方僅發佈了 &lt;code&gt;.pth&lt;/code&gt; 格式模型。因此，我們需要使用以下兩種方法獲取 gguf 格式的 RWKV 模型。&lt;/p&gt; 
&lt;h4&gt;方法 1：從 HF 下載現成 gguf 模型（推薦）&lt;/h4&gt; 
&lt;p&gt;可以從 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Flatestissue&quot; target=&quot;_blank&quot;&gt;https://huggingface.co/latestissue&lt;/a&gt; 下載已量化並轉化成 gguf 格式的 RWKV 模型&lt;/p&gt; 
&lt;h4&gt;方法 2：從 HF 格式轉換成 &lt;code&gt;.gguf&lt;/code&gt; 格式&lt;/h4&gt; 
&lt;p&gt;首先，從 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2FRWKV&quot; target=&quot;_blank&quot;&gt;RWKV 官方 HF 倉庫&lt;/a&gt;下載一個 Hugging Face 格式的 RWKV 模型，如 &lt;code&gt;RWKV/v6-Finch-1B6-HF&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;然後在 llama.cpp 目錄運行此命令，將 Hugging Face 模型轉成 gguf 格式：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python llama.cpp/convert_hf_to_gguf.py ./v6-Finch-1B6-HF

&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;量化方法：（可選）&lt;/h4&gt; 
&lt;p&gt;運行以下命令，對 .gguf 模型進行量化：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./build-cuda-rel/bin/llama-quantize v6-Finch-1B6-HF/v6-Finch-1.6B-HF-F16.gguf（量化前的 gguf 模型路徑） ./v6-Finch-1B6-HF/v6-Finch-1.6B-HF-Q5_1.gguf（量化後的 gguf 模型路徑） Q5_1（量化精度）

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;所有可選的量化精度：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;可選的量化精度&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-quantization-type.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;建議使用以下兩種量化精度： &lt;code&gt;Q5_1&lt;/code&gt;、 &lt;code&gt;Q8_0&lt;/code&gt;。&lt;/p&gt; 
&lt;h3&gt;第二步：本地構建 llama.cpp&lt;/h3&gt; 
&lt;p&gt;可以選擇從 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fggerganov%2Fllama.cpp%2Freleases&quot; target=&quot;_blank&quot;&gt;llama.cpp 的 release 頁面&lt;/a&gt;下載已編譯的 llama.cpp 程序。&lt;/p&gt; 
&lt;p&gt;也可以參照 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fggerganov%2Fllama.cpp%2Fblob%2Fmaster%2Fdocs%2Fbuild.md&quot; target=&quot;_blank&quot;&gt;llama.cpp 官方構建文檔&lt;/a&gt;，選擇適合的方法本地編譯構建。&lt;/p&gt; 
&lt;h3&gt;第三步：運行 RWKV 模型推理&lt;/h3&gt; 
&lt;p&gt;在 llama.cpp 目錄運行以下命令，可驅動 RWKV 模型基於 prompt 生成文本：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./build/bin/llama-cli -m ./v6-Finch-1B6-HF/v6-Finch-1.6B-HF-F16.gguf --no-warmup -p &quot;User: Write me a poem\n\nAssistant:&quot; -t 8 -ngl 25 -n 500

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;這條命令通過 llama-cli 運行 RWKV 模型，使用 8 個線程、跳過預熱、並根據給定的 prompt 生成最多 500 個 token。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;RWKV 模型推理&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-RWKV-inference-single-prompt.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;參數解釋：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;./build/bin/llama-cli&lt;/code&gt;：編譯好的 llama-cli 程序，打開命令化界面&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-m ./v6-Finch-1B6-HF/v6-Finch-1.6B-HF-F16.gguf&lt;/code&gt;：模型的路徑參數&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--no-warmup&lt;/code&gt;：跳過「預熱」階段，直接開始生成文本（以少量性能換取速度）&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-p &quot;User: Write me a poem\n\nAssistant:&quot;&lt;/code&gt;： prompt 參數，模型根據該提示詞生成文本。&quot;User: Write me a poem\n\nAssistant:&quot; 是符合 RWKV 模型格式的 prompt，更多 RWKV prompt 格式請在&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frwkv.cn%2FRWKV-Prompts%2FChat-Prompts&quot; target=&quot;_blank&quot;&gt;RWKV 文檔-提示詞指南&lt;/a&gt;中查看。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-t 8&lt;/code&gt;：-t 指定線程數，建議根據可用的物理 CPU 核心數調整&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;- ngl&lt;/code&gt;：指定模型使用的 n-gpu-layers ，25 是在 GPU 上運行 25 層（1.6B 的 24 層 + head 算一層）。可以無腦設定 &lt;code&gt;-ngl 99&lt;/code&gt;，使 llama.cpp 加載 RWKV 模型所有層&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-n 500&lt;/code&gt;：-n 參數表示生成的最大 token 數&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;完整的參數列表可以在 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fggerganov%2Fllama.cpp%2Fblob%2Fmaster%2Fexamples%2Fmain%2FREADME.md&quot; target=&quot;_blank&quot;&gt;llama.cpp 參數文檔&lt;/a&gt;中查看。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;批量推理生成&lt;/h4&gt; 
&lt;p&gt;使用以下命令，以進行批量推理：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;使用 &lt;code&gt;\n&lt;/code&gt; 隔開不同的 prompt&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;./build/bin/llama-parallel -ns 4 -np 4 -m v6-Finch-1B6-HF/v6-Finch-1.6B-HF-F16.gguf --no-warmup -ngl 25 -n 500 -p &quot;Who are you?\nWhat do we have for dinner?\nWhat&#39;s the meaning of life\nHello\nWhat is the end of the universe?&quot;

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img alt=&quot;批量推理生成&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-RWKV-inference-parallel.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;參數解釋：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-ns 4&lt;/code&gt;: n_sequence，推理序列的數量&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-np 4&lt;/code&gt;: n_parallel，並行推理的數量&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;啓動 Web 服務&lt;/h3&gt; 
&lt;p&gt;使用以下命令，以啓動 llama.cpp 的 Web 服務：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./build/bin/llama-server -m v6-Finch-1B6-HF/v6-Finch-1.6B-HF-F16.gguf --no-warmup -ngl 25

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img alt=&quot;llama.cpp 的 Web 服務&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-start-webui.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;啓動後，可以訪問 &lt;code&gt;http://127.0.0.1:8080&lt;/code&gt; 以檢查 Web 頁面：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;WebUI&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-webui-old-version.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;chatUI&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-chatui-old-version.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;點擊右上方的 &lt;code&gt;New Ul&lt;/code&gt;按鈕，或者直接訪問 &lt;code&gt;http://127.0.0.1:8080/index-new.html&lt;/code&gt;，可以打開新版本的 WebUI&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;新版本的 WebUI&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-webui-new-version.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;新版本的 chatUI&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-chatui-new-version.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;RWKV 模型介紹&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;RWKV 是一種創新的深度學習網絡架構，它將 Transformer 與 RNN 各自的優點相結合，同時實現高度並行化訓練與高效推理，時間複雜度為線性複雜度，在長序列推理場景下具有優於 Transformer 的性能潛力。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;RWKV 模型架構論文：&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;RWKV 4：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2305.13048&quot; target=&quot;_blank&quot;&gt;https://arxiv.org/abs/2305.13048&lt;/a&gt;&lt;br&gt; RWKV-5/6（Eagle &amp;amp; Finch）：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2404.05892%C2%A0&quot; target=&quot;_blank&quot;&gt;https://arxiv.org/abs/2404.05892&amp;nbsp;&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;RWKV 模型的最新版本是 RWKV-6 ，架構圖如下：&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;1496&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-b5e602a3b0574972f4d3e381acae509c1f0.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#444444&quot;&gt;相對&amp;nbsp;&lt;span&gt;Transformer 架構，&lt;/span&gt;RWKV 架構的推理成本降低 2~10 倍，訓練成本降低 2~3 倍。&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;加入 RWKV 社區&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&amp;nbsp;RWKV 中文文檔：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.rwkv.cn&quot; target=&quot;_blank&quot;&gt;https://www.rwkv.cn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;QQ 頻道：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpd.qq.com%2Fs%2F9n21eravc&quot; target=&quot;_blank&quot;&gt;https://pd.qq.com/s/9n21eravc&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310440</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310440</guid>
            <pubDate>Thu, 05 Sep 2024 03:47:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>WPS Office for Linux 12 個人版上線 deepin 23 商店！</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fwps-office-for-linux-12-deepin-23%2F&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;查看原文&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;全新 WPS Office For Linux 個人版（12.1.0.17881）與 deepin 23 的 AI 功能深度融合，正式上架在社區商店啦！&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;383&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/WHLUG%E6%B4%BB%E5%8A%A8900x383.png&quot; width=&quot;900&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;這是 Linux 版本的一次里程碑式的重大更新。在產品能力層面上，在 deepin 23 上 WPS Office 幾乎實現了與 Windows 版本的無縫對接，無論是界面佈局、功能實現還是操作流暢度，都為用户帶來了高度一致且卓越的體驗。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;718&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905094056.jpg&quot; width=&quot;1280&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;亮點功能&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;UI 視覺重構升級：新版本使用全新的視覺設計，在延續了 WPS 設計風格的同時，通過調整佈局、模塊化設計等方式，在視覺效果、使用邏輯方面進行了深度優化，幫助用户以更低的學習成本快速掌握使用技巧。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;892&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905094100-1.jpg&quot; width=&quot;1527&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;WPS 演示&lt;/h2&gt; 
&lt;p&gt;1、支持「主題生成」「大綱生成」「文檔生成」多種模式一鍵生成並美化 PPT。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;675&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905103211.png&quot; width=&quot;1205&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;2、輸出為圖片：支持文件批量輸出為圖片，支持逐頁輸出或輸出為長圖。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;667&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905103322.png&quot; width=&quot;1201&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;3、輸出為視頻：演示組件支持將 PPT 輸出為視頻。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;672&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905103326.png&quot; width=&quot;1202&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;WPS 文字&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;文字支持「幫我寫」「幫我改」，AI 快速生成和潤色文本。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;672&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905103326-1.png&quot; width=&quot;1202&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;WPS 表格&lt;/h2&gt; 
&lt;p&gt;表格 AI 寫公式：一鍵生成複雜公式，快速解決數據處理難題。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;491&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/5-%E8%A1%A8%E6%A0%BCAI%E5%86%99%E5%85%AC%E5%BC%8F.gif&quot; width=&quot;873&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;文檔雲同步&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;支持本地文檔同步至雲端，實現實時保存，多端共享、跨端編輯。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1078&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/6-%E6%96%87%E6%A1%A3%E4%BA%91%E5%90%8C%E6%AD%A5.gif&quot; width=&quot;1918&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;協作編輯&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;支持本地編輯與在線編輯模式切換，實時與團隊共同編輯文檔。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1078&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/7-%E5%8D%8F%E4%BD%9C%E7%BC%96%E8%BE%91.gif&quot; width=&quot;1918&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;稻殼資源&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;提供文字、表格、演示等多組件模板；覆蓋圖片、圖標、字體等素材。&lt;img alt=&quot;&quot; height=&quot;676&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905103550.png&quot; width=&quot;1201&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;PDF 轉換&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;新增增值服務選項卡，支持 PDF 轉換、輸出為圖片等增值功能，解決了 23 下無法查看 PDF 的問題。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;738&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905103318.png&quot; width=&quot;1315&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;更多功能等你發現啦&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;注：本次提供的增值功能 / 增值服務均需登錄會員賬號後使用，無會員權益時不會展示對應功能入口；Linux 個人版暫不支持會員購買，可在 WPS 官網購買後，在 deepin 23 端上使用。&lt;/p&gt; 
&lt;p&gt;針對此版本的 WPS AI，UOS AI 也進行了深度調優並與 WPS 表格、WPS 文字、WPS 演示、WPS PDF 等應用進行了緊密適配。通過利用 UOS AI 的 AI 端側模型搭載本地向量數據庫用户可以將保存本地的 WPS 辦公格式文檔做成個人知識庫實現智能化的知識管理、檢索和應用。這一創新功能不僅提高了用户的知識管理效率還為用户提供了更加便捷、智能的辦公體驗。&lt;/p&gt; 
&lt;p&gt;我們相信，在未來的日子裏，deepin 與 WPS Office 將攜手並進，共同堅守創新、開放、共享的理念，致力於為更廣泛的用户羣體打造更加卓越、智能的辦公體驗。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;相關閲讀：&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;（1）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdistrowatch.com%2Ftable.php%3Fdistribution%3Ddeepin&quot; target=&quot;_blank&quot;&gt;deepin 全版本鏡像（含 deepin V15）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;（2）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-community-monthly-report-2024-08%2F&quot; target=&quot;_blank&quot;&gt;deepin（社區）8 月月度彙報&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;（3）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-use-minicom-and-cutecom%2F&quot; target=&quot;_blank&quot;&gt;網絡工程師使用 deepin 必需掌握的兩個工具 minicom 和 cutecom&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310425/wps-office-for-linux-12-deepin-23</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310425/wps-office-for-linux-12-deepin-23</guid>
            <pubDate>Thu, 05 Sep 2024 03:07:32 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>智譜完成新一輪數十億元融資</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F36kr.com%2Fp%2F2936418849201025&quot; target=&quot;_blank&quot;&gt;根據 36 氪的獨家報道&lt;/a&gt;&lt;/u&gt;，近日中國大模型獨角獸智譜以 200 億元的投前估值，完成了新一輪融資，金額達數十億元。&lt;/p&gt; 
&lt;p&gt;本輪領投方為中關村科學城公司，其為海淀區政府設立的市場化投資平台。&lt;/p&gt; 
&lt;p&gt;對上述消息，對方表示不予置評。&lt;/p&gt; 
&lt;p&gt;根據公開信息，新一輪融資是 2024 年以來智譜完成的第三筆。目前，智譜的股東陣容包括高瓴資本、啓明創投、君聯資本等知名投資機構以及美團、阿里、騰訊、小米在內的互聯網大廠。&lt;/p&gt; 
&lt;p&gt;目前智譜的商業化，在 B 端主要有幾種模式：API，雲端私有化，以及本地私有化。根據智譜在 6 月 Open Day 上公開的訊息，其面向開發者和企業客户的大模型開放平台 bigmodel.cn 擁有超過 50 萬客户。&lt;/p&gt; 
&lt;p&gt;相關人士對 36 氪透露，目前智譜在 B 端的商業化成績是獨角獸企業中最好的，並且營收領先了第二名一個數量級。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;而在 C 端，2024 年，智譜在 ToC 產品「智譜清言」上，也做了訂閲付費的試水。根據官方數據，在「智譜清言」上線的視頻生成模型「清影」也啓用了「付費會員」，2 周內有 100 萬人使用。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310414</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310414</guid>
            <pubDate>Thu, 05 Sep 2024 02:25:42 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>零一萬物開源 Yi-Coder 系列編程助手模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;零一萬物正式開源了 Yi-Coder 系列編程模型。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/img/202409/05101606_4Poj.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Yi-Coder 系列模型專為編碼任務而生，提供 1.5B 和 9B 兩種參數。其中，Yi-Coder-9B 的表現號稱「優於其他 10B 參數以下的模型」，如 CodeQwen1.5 7B 和 CodeGeex4 9B，甚至能夠「與 DeepSeek-Coder 33B 相媲美」。&lt;/p&gt; 
&lt;p&gt;Yi-Coder 能夠處理最長 128K tokens 的上下文內容，適用於複雜項目級代碼的理解和生成。Yi-Coder 還支持 52 種主要編程語言。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;模型簡介&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Yi-Coder 系列模型&lt;strong&gt;專為編碼任務而生&lt;/strong&gt;，提供 1.5B 和 9B 兩種參數。其中，Yi-Coder-9B 的表現優於其他 10B 參數以下的模型，如 CodeQwen1.5 7B 和 CodeGeex4 9B，甚至能夠與 DeepSeek-Coder 33B 相媲美。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;模型特點&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;小參數，強性能&lt;/strong&gt;：儘管 Yi-Coder 的參數量相對較小，但它在各種任務，包括代碼生成、代碼理解、代碼調試和代碼補全中的表現十分出色。10B 以下的大小也讓它易於使用，方便端側部署。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;128K 長序列建模&lt;/strong&gt;：Yi-Coder 能夠處理長達 128K tokens 的上下文內容，有效捕捉長期依賴關係，適用於複雜項目級代碼的理解和生成。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;強大的代碼生成能力&lt;/strong&gt;：支持 52 種主要編程語言，Yi-Coder 在代碼生成和跨文件代碼補全方面表現優異。&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310410/01-ai-yi-coder</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310410/01-ai-yi-coder</guid>
            <pubDate>Thu, 05 Sep 2024 02:16:42 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>開源日報 | 2024 年最流行的編程語言；微軟程序員基本工資 12 萬美元起；Vue 3.5 發佈；Win11 集成國產開源大模型；K8s 深淵圖</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;歡迎閲讀 OSCHINA 編輯部出品的開源日報，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.9.4&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要聞&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/310263/vue-3-5&quot;&gt;Vue 3.5 正式發佈，代號「天元突破紅蓮螺巖」&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;Vue 3.5 「天元突破紅蓮螺巖」(Tengen Toppa Gurren Lagann) 版本發佈！&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;在 3.5 中，Vue 的響應式系統經歷了又一次重大重構，實現了更好的性能和顯著減少了內存佔用 (-56%)，且沒有行為變化。這次重構還解決了 SSR 過程中由於懸掛的計算屬性導致的過時計算值和內存問題。&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnbeta.com.tw%2Farticles%2Ftech%2F1444541.htm&quot; target=&quot;_blank&quot;&gt;2024 年最流行的編程語言&lt;/a&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#a1a1aa; text-align:start&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-0fe9f9b6dcf72228ffb3c19032539db8583.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/310261/firefox-130-released&quot;&gt;Mozilla 發佈 Firefox 130&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Mozilla 正式發佈了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;Firefox 130&lt;/strong&gt;，引入了一系列新功能，以提升用户體驗。其中最引人注目的新增功能是&lt;strong&gt;自動畫中畫（Picture-in-Picture, PiP）模式&lt;/strong&gt;。該功能允許用户在切換標籤頁時，視頻可以自動繼續在一個單獨的可調整大小的窗口中播放，使得用户在進行多任務處理時不會錯過內容。&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/310283/recall-uninstall-option-in-windows-11-is-just-a-bug&quot;&gt;微軟稱 Windows 11 中出現「Recall」卸載選項是 Bug&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#424242&quot;&gt;上週用户在微軟最新的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;Windows 11&lt;span style=&quot;background-color:#ffffff; color:#424242&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;版本中發現，&lt;/span&gt;&lt;strong&gt;可在 「打開和關閉 Windows 功能」 設置中刪除備受爭議的 Recall 功能&lt;/strong&gt;。然而對於這個功能選項，微軟稱這是 Bug 而不是特性——因為 Recall 功能在正式發佈後將無法卸載。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;微軟高級產品經理 Brandon LeBlanc 向 The Verge 透露，公司「意識到一個問題，即在控制面板的‘打開或關閉 Windows 功能’對話框中，Recall 被錯誤地列為一個選項，這個問題將在即將發佈的更新中得到修復。」&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0904/152812_zWUZ_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日觀察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交觀察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6105753431%2FOvqIkrPhl&quot; target=&quot;_blank&quot;&gt;微軟 Win11 中發現國產開源大模型&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;p&gt;微軟正嘗試在 Office 中集成國產開源大模型 RWKV！RWKV 官方甚至直接發了個推文表示：RWKV.cpp，現已在全球五億系統中部署。&lt;/p&gt; 
      &lt;p&gt;之所以這麼説，是因為他們發現最新版 Windows 11 系統的 Office 文件夾中有以 rwkv 命名的 DLL 文件，包含 GPU、CPU 版本。&lt;/p&gt; 
      &lt;p&gt;人人都可以將 Windows 11 更新到最新版本，通過以下路徑自行驗證：C:\Program Files\Microsoft Office\root\vfs\ProgramFilesCommonX64\Microsoft Shared\OFFICE16&lt;/p&gt; 
      &lt;p&gt;或者，也可以在 IT 商店的任何「copilot Windows 11」設備上搜索系統文件中的 rwkv。&lt;/p&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;&lt;span&gt;- 微信&amp;nbsp;&lt;strong&gt;量子位&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2194035935%2FOvpPSjdal&quot; target=&quot;_blank&quot;&gt;K8s 深淵圖&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ce6a5610a28eeb3addac6c6e5e5cdb3539d.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;&lt;span&gt;蟻工廠&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F7616053865%2FOvnMdge7e%3Fpagetype%3Dprofilefeed&quot; target=&quot;_blank&quot;&gt;IT 大廠裏面，最厲害的人不是拿最高績效的&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;p&gt;我覺得在 IT 大廠裏面，最厲害的人不是拿最高績效的，而是每天相對清閒拿中等績效且還能保持不被炒的。&lt;/p&gt; 
   &lt;p&gt;這樣的人既保住了基本飯碗，又不至於為了一個工作而賣命，甚至可以在工作之餘追求自己的夢想——而不是在資本設置的單一評判體系裏面拼命內鬥。&lt;/p&gt; 
   &lt;p&gt;此狀態實際操作難度較大，因為要達成（1）不被炒（2）不太賣命這兩個有點衝突的目標，對平衡能力、審時度勢能力、人際關係等都有着很高的要求。&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;業餘早睡選手&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F7817295402%2FOvcqh3ybk&quot; target=&quot;_blank&quot;&gt;青少年編程入門什麼語言比較合適？&lt;/a&gt;&lt;/h4&gt; 
  &lt;p&gt;不知道題主孩子多大，編程語言和自然語言也有相通的地方，如果自然語言能力和數學/邏輯能力比較強，編程就更容易上手一些。很多 syntax 的問題如果不是拼寫 typo，那就是理解的還不到位，邏輯上沒搞明白，變量 scope 不清楚之類的。&lt;/p&gt; 
  &lt;p&gt;Block 編程當然可以的，能學一些基本概念，不過最終還是要學編程語言的，如果 debug 嫌麻煩可以用 chatGPT 幫忙，會給你講的很詳細，學編程的過程肯定夠用了。&lt;/p&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博 &lt;strong&gt;recky_yy&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2144454703%2FOvnWRFwQ2&quot; target=&quot;_blank&quot;&gt;1% 的網絡丟包率就會帶來 50% 的算力損失&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     1， 1% 的網絡丟包率就會帶來 50% 的算力損失
     &lt;br&gt; 2，傳輸距離每增加 10km，通信時延增加 10ms
     &lt;br&gt; 3，數據顯示，當網絡的丟包率大於 10-3 時，RDMA 有效吞吐將急劇下降；2% 的丟包率會使 RDMA 吞吐率下降為 0。因此，要使得 RDMA 吞吐不受影響，丟包率必須保證在十萬分之一以下，最好為零丟包
     &lt;br&gt; ～～～from 中國電信，分佈式智算中心無損網絡技術白皮書 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博 &lt;strong&gt;WinnieS 的微博&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒體觀察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.leiphone.com%2Fcategory%2Fai%2FGE0YVTuWYCVqrbUp.html&quot; target=&quot;_blank&quot;&gt;賈揚清一吐為快:要想賺錢，AI 模型到底該大該小?&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;對於賈揚清這樣的 AI Infra 創業者，模型大小的潮流變化對他的商業模式有什麼影響？這個問題，要分不同情況分析。&lt;/p&gt; 
     &lt;p&gt;如果模型參數量越大，提供模型服務的門檻越高（參考 Llama 405B），其客單價自然也就越大；另一方面，由於很多小模型實際是在大模型的基礎上蒸餾而得到，模型小了，所需的計算資源並沒有等幅度減少；&lt;/p&gt; 
     &lt;p&gt;由於較小的模型更容易部署在不同的設備和平台上，這可能會帶來應用場景的增加，雖然客單價可能降低，但在需求數量上的增加反而可能使得總收入增加；對於賈揚清來説，META 的開源路線使得賈揚清的服務對象擴大，因此開源對他來説更有利。&lt;/p&gt; 
     &lt;p&gt;看來不管未來模型規模怎麼不變化，賈揚清都有機會憑藉技術升級穩坐釣魚台。這有點像之前的中國股市，不管什麼消息，都是「利好茅台」啊。&lt;/p&gt; 
     &lt;p&gt;這恐怕就是賈揚清最近在推特上為什麼這麼活躍發表看法的原因？你看好賈揚清這種 AI Infra 的創業路線嗎？&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;-&amp;nbsp;&lt;strong&gt;雷峯網&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.com.cn%2Froll%2F2024-09-04%2Fdoc-incmyqsn9641727.shtml&quot; target=&quot;_blank&quot;&gt;對話 MiniMax 創始人閆俊傑：打不贏，就應該被淘汰&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;p&gt;在 MiniMax 成立以來的第一場媒體見面會，創始人閆俊傑分享了基於 MOE（混合專家模型）+ Linear Attention（線性注意力）的新一代模型技術的應用，並展示了 MiniMax 最新音樂模型、視頻模型的研發成果。&lt;/p&gt; 
       &lt;p&gt;最為引人關注的是，MiniMax 發佈了一支名為《魔法硬幣》的 2 分鐘視頻。其所有場景畫面全部由大模型生成，沒有進行任何人類加工，效果驚豔。&lt;/p&gt; 
       &lt;p&gt;「科學技術是第一生產力，這是 MiniMax 堅持技術創新的最底層原因。」閆俊傑説，MiniMax 將持續通過技術突破推動 AI 加速發展，拓展人類智慧的邊界，真正實現 Intelligence with Everyone。&lt;/p&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;網易科技&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.thepaper.cn%2FnewsDetail_forward_28627514&quot; target=&quot;_blank&quot;&gt;人工智能大模型開源面臨的問題及數據保護&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;在人工智能發展過程中，人工智能大模型研製已成為科技創新重要內容之一。人工智能大模型技術的運作原理主要是以海量數據為依託，並通過數據訓練、算法優化等技術捕捉和學習更復雜的內容，從而促進人工智能大模型持續優化與性能提升。&lt;/p&gt; 
 &lt;p&gt;然而，人工智能大模型開源的數據不可避免地存在「原罪」，即，直接體現為部分訓練數據未獲得合法授權，簡稱數據「原罪」。它主要指在人工智能大模型訓練過程中，所使用的大量數據可能來源於未經授權的數據或數據集。這些數據可能涉及個人隱私或受版權保護。未經授權使用這些數據可能侵犯相關主體的合法權益，易引發法律和倫理問題。&lt;/p&gt; 
 &lt;div&gt; 
  &lt;div style=&quot;text-align:right&quot;&gt;
   &lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;
   &lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;澎湃新聞&lt;/span&gt;&lt;/strong&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.huxiu.com%2Farticle%2F3431358.html&quot; target=&quot;_blank&quot;&gt;一個人，13 年，70 個創業項目，獨立開發的超級傳奇&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;一人公司正在成為一種趨勢，Pieter Levels 是這個領域裏的超級玩家。&lt;/p&gt; 
 &lt;p&gt;自學成才，獨立開發，從 2012 年到 2021 年，啓動了 70 個創業項目，成功運營 40 個，其中只有 4 個讓他賺了很多錢。最成功的，Nomad List，一年盈利 210 萬美金。2021 年後，做了幾個 AI 產品，MRR 十幾萬美元。&lt;/p&gt; 
 &lt;p&gt;95% 的項目都失敗了，他自我總結，5% 的「命中率」，所以只要做得夠多就行。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;極客公園&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推薦&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://my.oschina.net/u/4090830/blog/15656404&quot;&gt;萬字長文淺談三高系統建設方法論和實踐&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt;
   整個軟件的發展歷程是一部軟件複雜性對抗史，軟件的複雜性分為技術複雜性和業務複雜性，業務複雜性主要是建模和抽象設計，技術複雜性主要是三高（高性能，高併發，高可用）的應對，C 端的業務一般以技術複雜性為主，業務複雜性為輔，而 B 端或者 M 端的業務通常以業務複雜性為主，技術複雜性為輔。本篇文章主要是從後端研發的視角結合自己多年的 B C 端系統建設實踐談下三高系統的建設方法論和實踐。
   &lt;br&gt; &amp;nbsp;
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;開源之聲&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户觀點&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FBkQTxsxqmUnFb4yOoNuXvA&quot; target=&quot;_blank&quot;&gt;微軟程序員基本工資 12 萬美元起&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：微軟中國只有 1/4 都不到&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 2：要符合國內國情，工資高了不利於我們努力[旺柴]&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FPH7MQ_L9e_vWzFdfraphXQ&quot; target=&quot;_blank&quot;&gt;中科院女工程師開源 AI 模型對抗 deepfake：用 AI 打敗 AI &lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：只要稍微瞭解一些人工智能和對抗性訓練的知識，就會知道這種對抗會把 deepfake 模型訓練得越來越聰明，越來越逼真。&lt;br&gt; 這不是解決問題的根本之道。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 2：蹭熱度罷了。監測出是 fake 的又怎樣，合成的和看的人會在乎麼。社會實踐、法律問題和技術層面基本無關。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 3：會用模型的多嗎&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最後，歡迎掃碼下載「開源中國 APP」，閲讀海量技術報告、程序員極客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310339</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310339</guid>
            <pubDate>Wed, 04 Sep 2024 11:39:44 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>微軟稱 Windows 11 中出現「Recall」卸載選項是 Bug</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#424242&quot;&gt;上週用户在微軟最新的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;Windows 11&lt;span style=&quot;background-color:#ffffff; color:#424242&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;版本中發現，&lt;/span&gt;&lt;strong&gt;可在「打開和關閉 Windows 功能」設置中刪除備受爭議的 Recall 功能&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1156&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0904/152812_zWUZ_2720166.png&quot; width=&quot;1374&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Recall 是微軟在今年 5 月首次宣佈的 AI 功能，它會每 5 秒鐘截屏 1 次，由此記錄用户操作電腦的行為，讓大模型記憶並隨時幫助用户回憶，因為涉及到個人隱私和商業機密，Recall 功能引發了巨大爭議。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-89e1e1875216c7caeef77deb084816df26c.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;雖然微軟表示 Recall 收集的數據不會上傳到雲端或與微軟或第三方共享，但這些數據以未加密的形式存儲在本地目錄中，容易被潛在攻擊者訪問。&lt;/p&gt; 
&lt;p style=&quot;color:#424242; margin-left:0; margin-right:0; text-align:justify&quot;&gt;這一發現導致微軟推遲了 Recall 功能的發佈，&lt;strong&gt;直到最近才確認該功能將於今年 10 月開始公開預覽&lt;/strong&gt;。微軟承諾，當 Recall 功能正式發佈時，其將更加安全且完全可選。&lt;/p&gt; 
&lt;p style=&quot;color:#424242; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5300b891d866738283f6f50df3a018e0031.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#424242; margin-left:0; margin-right:0; text-align:justify&quot;&gt;然而對於 Windows 11 最新版可卸載「Recall」的功能選項，微軟稱這是 Bug 不是特性。&lt;/p&gt; 
&lt;p style=&quot;color:#424242; margin-left:0; margin-right:0; text-align:justify&quot;&gt;微軟高級產品經理 Brandon LeBlanc &lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theverge.com%2F2024%2F9%2F2%2F24233992%2Fmicrosoft-recall-windows-11-uninstall-feature-bug&quot; target=&quot;_blank&quot;&gt;向 The Verge 透露&lt;/a&gt;&lt;/u&gt;，公司「意識到一個問題，即在控制面板的‘打開或關閉 Windows 功能’對話框中，&lt;strong&gt;Recall 被錯誤地列為一個選項，這個問題將在即將發佈的更新中得到修復&lt;/strong&gt;。」&lt;/p&gt; 
&lt;p style=&quot;color:#424242; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;strong&gt;這並不意味着 Recall 功能將強制安裝，只是該應用程序本身無法從系統中輕鬆刪除&lt;/strong&gt;。&lt;/p&gt; 
&lt;p style=&quot;color:#424242; margin-left:0; margin-right:0; text-align:justify&quot;&gt;用户仍然可以在設置 PC 時選擇禁用 Recall 功能，並隨時通過開始菜單中的 Recall 應用程序啓用。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310283/recall-uninstall-option-in-windows-11-is-just-a-bug</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310283/recall-uninstall-option-in-windows-11-is-just-a-bug</guid>
            <pubDate>Wed, 04 Sep 2024 07:24:39 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>Rust 開發的高成長性的數據服務平台 —— GrowthStore 發佈</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f1f1f&quot;&gt;GrowthStore 是一個基於 Rust 體系的成長型的企業級後台服務的開發框架。它提供了 「約定大於配置，配置即服務」 的開發理念，採用統一的約定、靈活的配置來實現絕大多數的業務，通過靈活高效的擴展體系，來滿足各種特殊化的業務需求，快速應對企業的業務成長需要。GrowthStore 的出現，為企業級後端開發注入了新鮮的血液。&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt;
  GrowthStore 有一套統一的服務語言，即它的 InvokeURI 統一調用服務語言，使得它的各種功能可以使用一套統一化的 URI 來進行表示，而前端只需要根據這些 URI 的規範即可知道 GrowthStore 的具體提供服務。因此，GrowthStore 可以為前端開發人員提供更好的開發範式，讓前端開發人員與後台服務開發更容易達成一致。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  GrowthStore 提供了支持多種關係型數據庫的映射能力，如 MySQL、PostgreSQL、MSSQL Server 等，GrowthStore 提供了可配置性的數據庫表及查詢的映射方式，可以支持類似於 1..1, 1..N， N..N 之類的表與表之間的關係型映射，並提供基於 CRUD 的 11 種操作和查詢模式。我們可以使用 GrowthStore 快速開發數據庫應用，而無需寫後台的代碼。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  同樣的，GrowthStore 提供了對 MQTT、Kafka、Redis、ElasticSearch 等多種流行的第三方應用提供了支持，並通過插件形式，提供了基於 RESTful 接口的支持，以滿足各種業務系統的對接需求。GrowthStore 可以很方便的開發對各種第三方軟件的支持插件，並通過腳本語方、Hook 機制、事件機制等多種形式完成與第三方軟件的集成，進而與企業的 IT 整體架構共同成長。
 &lt;/div&gt; 
&lt;/div&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310267</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310267</guid>
            <pubDate>Wed, 04 Sep 2024 03:42:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>2024 年，向量數據庫「涼涼」了？</title>
            <description>《從零構建向量數據庫》是市面上首本原創的「向量數據庫」圖書，因為封面上的主圖是珊瑚得名而來。</description>
            <link>https://mp.weixin.qq.com/s/aa-bC7Hg_tEinVjJc2ipXA</link>
            <guid isPermaLink="false">https://mp.weixin.qq.com/s/aa-bC7Hg_tEinVjJc2ipXA</guid>
            <pubDate>Wed, 04 Sep 2024 02:31:26 GMT</pubDate>
        </item>
        <item>
            <title>開源日報 | 女工程師開源 AI 模型對抗 deepfake；蘋果回應 iPhone 16 不支持微信；Python 開發者調查；「天」系列工業軟件</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;歡迎閲讀 OSCHINA 編輯部出品的開源日報，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.9.3&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要聞&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F5666579547%2FOuXW94G8R&quot; target=&quot;_blank&quot;&gt;中科院女工程師開源 AI 模型對抗 deepfake：用 AI 打敗 AI&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;近日「深度偽造」犯罪在韓國引起女性恐慌，中科院女工程師張欣怡（微博名「啦啦啦啦啦啦啦 0-0」）表示：&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;經團隊同意，已將近期參加在上海舉辦的外灘大會 AI 創新賽·全球 Deepfake（深度偽造技術）攻防挑戰賽的 AI 模型向全球開源，讓所有有需要的人都可以免費使用模型來對抗 deepfake，希望通過技術手段，為每一個可能受到傷害的人提供保護。&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;後續還會盡快開發相關應用，降低大家的使用門檻。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-ec7fa44426d2ac1d2734b706417228d7a67.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/310110/making-a-3d-modeler-in-in-a-week&quot;&gt;C 語言，一週，寫一個 3D 建模器&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#a1a1aa; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;開發者 Daniel Hooper 在一週內使用 C 語言和 raylib 庫完成了一個 3D 建模器項目 ShapeUp，代碼行數：&lt;/span&gt;&lt;/p&gt; 
 &lt;ul style=&quot;list-style-type:disc; margin-left:0; margin-right:0&quot;&gt; 
  &lt;li style=&quot;text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;2024 行 C 代碼&lt;/span&gt;&lt;/li&gt; 
  &lt;li style=&quot;text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;250 行 GLSL 代碼&lt;/span&gt;&lt;/li&gt; 
  &lt;li style=&quot;text-align:start&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;總數 2274 行&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Daniel Hooper 發佈了一篇關於他在一週內使用 C 語言創建 3D 模型器 ShapeUp 的文章。ShapeUp 使用了 signed distance fields (SDFs) 和 ray marching 技術來快速實現 3D 渲染，這使得在短時間內從頭開始創建 3D 項目成為可能。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;898&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0903/104721_Xrho_3820517.png&quot; width=&quot;1362&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/310109&quot;&gt;WPS Office for Linux 12（個人版）正式上線&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;WPS Office for Linux 12 個人版現已在&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flinux.wps.cn%2F&quot; target=&quot;_blank&quot;&gt;WPS&amp;nbsp;Office 官網上線&lt;/a&gt;，迎來 UI 視覺重構升級，以及新增多項 AI 功能，具體版本號為&amp;nbsp;&lt;strong&gt;12.1.0.17881&lt;/strong&gt;。&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8ca8e9ca03f572cdbf8d385808afd877a1f.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.pingwest.com%2Fw%2F297982&quot; target=&quot;_blank&quot;&gt;蘋果中國回應 iPhone 16 不支持微信：正與騰訊積極溝通應用商店抽成事宜&lt;/a&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;p&gt;據貝殼財經報道，針對網傳 iPhone 16 不支持微信這一傳聞，蘋果中國區技術顧問表示，目前蘋果正在與騰訊積極溝通，來確認後續騰訊是否還會繼續向蘋果應用商店提供軟件下載的抽成。 iPhone16 不支持微信的説法，蘋果目前沒有得到官方的通知。&lt;/p&gt; 
  &lt;p&gt;該顧問表示，微信作為一個比較大眾的軟件，雙方也都會為了自己相應的效益做出一定處理，所以暫時不用擔心。微信是客户非常常用的一個 APP，iPhone 新品不會把之前顧客正常使用的 APP 權限關閉剝奪。&lt;/p&gt; 
  &lt;p&gt;根據蘋果的規定，APP 開發者在蘋果應用商店上架軟件，當軟件達到一定下載量後，後續只要有用户下載一次這個軟件，開發者就得向蘋果支付一定費用。&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.pingwest.com%2Fw%2F298019&quot; target=&quot;_blank&quot;&gt;階躍星辰上線圖像生成大模型 Step-1X&lt;/a&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p&gt;階躍星辰今天宣佈，推出 step-1x 系列生圖模型。該模型擁有強大的圖像生成能力，支持文本描述作為輸入方式。具備原生的中文支持，能夠更好的理解和處理中文文本描述，並且能夠更準確地捕捉文本描述中的語義信息，並將其轉化為圖像特徵，從而實現更精準的圖像生成。模型能夠根據輸入生成高分辨率、高質量的圖像，並具備一定的風格遷移能力。&lt;/p&gt; 
   &lt;p&gt;需要注意的是，step-1x 系列模型限制了單次請求生成的圖像數量，單次最多可請求生成 1 張圖像。同時根據輸入的複雜性和模型的計算能力，生成圖像可能需要一些時間。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日觀察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交觀察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FmUoeQv6lrSX-M0w8LNqH7w&quot; target=&quot;_blank&quot;&gt;對談硅基流動創始人袁進輝與獨立開發者 idoubi&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;p&gt;AI 正在以前所未有的速度重塑各行各業, 而站在這場變革最前沿的, 莫過於 AI 工程師們。&lt;/p&gt; 
      &lt;p&gt;在這一期內容中, 從底層技術到應用開發, 從大公司到獨立創業, 袁進輝和 idoubi 為我們全方位解析了 AI 工程師的現狀與未來、機遇與挑戰，以及如何在這個快速變化的領域保持競爭力。&lt;/p&gt; 
      &lt;p&gt;此外, 兩位嘉賓還分享了他們對 AI 未來發展趨勢的預測。他們認為, 儘管短期內 AI 工具類應用將迎來爆發, 但從長遠來看, AI Native 應用才是未來的主流。無論你是已經身在 AI 行業, 還是正考慮轉型成為 AI 工程師, 相信這期內容都會給你帶來啓發。&lt;/p&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;&lt;span&gt;- 微信&amp;nbsp;&lt;strong&gt;十字路口 Crossing&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6306053186%2FOuwrcaeCj&quot; target=&quot;_blank&quot;&gt;開源中文字體有多了一種選擇，還是字重可變&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;p&gt;微軟更新為終端和編程設計的開源字體家族 Cascadia，新增了支持簡繁中文和日文的 Cascadia Next。Cascadia Next 簡體中文的字符集包含 ASCII、GB2312 以及大量網絡常用漢字。&lt;/p&gt; 
        &lt;p&gt;該字體以 SIL 開源協議發佈，可以在 Github 上下載 https://github.com/microsoft/cascadia-code/releases/tag/cascadia-next&lt;/p&gt; 
        &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-89425c442d9910d1774b52bb4ecd9d44d37.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;&lt;span&gt;美和園字社&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnew.qq.com%2Frain%2Fa%2F20240903A0148W00&quot; target=&quot;_blank&quot;&gt;Python 開發者調查：55% 使用 Linux，6% 仍在使用 Python 2&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     儘管 Python 2 在 2020 年 4 月已經達到了「生命週期結束」的狀態，但去年的調查發現仍有 7% 的受訪者在使用 Python 2。今年的調查發現，這一數字終於下降了——但只是降到了 6%。
     &lt;br&gt; 調查結果指出：「幾乎一半的 Python 2 堅持者年齡在 21 歲以下，三分之一是學生。也許課程仍在使用 Python 2？」
     &lt;br&gt; 與此同時，73% 的開發者正在使用 Python 的最後三個版本之一（3.10、3.11 或 3.12）。 &amp;nbsp; &amp;nbsp;
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;-&amp;nbsp;&lt;strong&gt;水哥&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F5198011111%2FOuwfq69S4%3Frefer_flag%3D1001030103_&quot; target=&quot;_blank&quot;&gt;免費開源的卡片工具&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;p&gt;流光卡片：https://fireflycard.shushiai.com/&lt;/p&gt; 
   &lt;p&gt;一個免費開源的卡片工具，可以將文字、圖片、代碼等內容包裝成精美的卡片，能直接下載或分享。&lt;/p&gt; 
   &lt;p&gt;它有 6 種不同的卡片模板和豐富的顏色主題可選，可自定義尺寸、邊距和字體大小樣式；還支持修改圖標、日期、標題、作者、字數等內容，非常便捷。&lt;/p&gt; 
   &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-74895a77f4d8d13179fd121def90d4b1e83.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博 &lt;strong&gt;班叔&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒體觀察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8cZMHUriY8V&quot; target=&quot;_blank&quot;&gt;獨家對話生成式 AI 之父：中國將在幾年內縮小差距&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p&gt;心智觀察所：中國的生成式 AI 產業仍處於早期發展階段，但成長迅速，並且中國推出了越來越多的大語言模型。您認為中國應該怎麼做才能縮小與美國在 AI 加速器（用於訓練和 AI 推理的 GPU）方面的差距？&lt;/p&gt; 
   &lt;p&gt;尤爾根·施密德胡貝爾：我認為中國已經在大力投資建設自己的自主可控的 AI 硬件，試圖模仿目前只有荷蘭的 ASML 能夠做到的事情，因為美國政府在阻止 ASML 向中國交付其最新的芯片製造所需要的光刻機。&lt;/p&gt; 
   &lt;p&gt;總體而言，歷史證明，一個主要大國在技術上追趕另一個大國可能只需要幾年時間。例如，德國在 1938 年發現了核裂變（原子彈的原理），僅僅 7 年後，美國就擁有了可用的核武器。而再過 4 年，蘇聯也有了核武器。到如今，許多國家都擁有核武器。值得注意的是，中國目前在人工智能領域發表的論文和獲得的專利數量超過了其他任何國家。如果中國在未來幾年內沒有縮小硬件差距，我會對此感到十分驚訝。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;-&amp;nbsp;&lt;strong&gt;觀察者網&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gkong.com%2Fnews%2F118288.html&quot; target=&quot;_blank&quot;&gt;航天領域公佈 12 款「天」系列工業軟件&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;從 8 月 31 日舉辦的第二屆「領航杯」工業軟件科技創新設計大賽決賽上獲悉，我國 12 款「天」系列工業軟件和航天領域首款智慧物聯操作系統——「天鴻」操作系統成功發佈。&lt;/p&gt; 
     &lt;p&gt;工業軟件作為關鍵軟件的核心組成，已經成為型號研製必不可少的工具手段。「天」系列工業軟件是中國航天科技集團有限公司第一研究院第一設計部（以下簡稱「第一設計部」）基於豐富的航天系統工程研製經驗，結合通用型號研發設計需求，圍繞專業特色設計、通用工程仿真和數字主線貫通三個方向孵化的軟件產品，也是第一設計部首次將自研自用工具作為數字產品對外推廣，並依託工業軟件搭建了「產、學、研、用」的生態平台，在滿足型號研製需求的基礎上，推動軟件的產品化，催生數字化產業，打造數字化能力輸出的新窗口。&lt;/p&gt; 
     &lt;p&gt;「天鴻」操作系統，是北京航天萬源科技有限公司專為航天應用場景打造的操作系統，可實現航天領域萬物互聯智能協作，推動航天裝備的協同能力邁向新高度，其技術底座源自開源鴻蒙。&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;光明日報&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6105753431%2FOv5XjjLOL&quot; target=&quot;_blank&quot;&gt;開源提示詞讓 LLM 更具創造力&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;GitHub 上開源了一個提示詞，用户只需將這些提示詞輸入 LLM，就能解鎖 LLM 的「思維發散」模式，讓 LLM 提出更多新穎的想法，當你做需要做創作力的任務時，尤為好用。&lt;/p&gt; 
 &lt;p&gt;這就是 Rohan Paul 花費好幾個月製作的「SuperPrompt」項目，如果你看不懂提示詞也沒關係，其本質就是使用&#39;&amp;lt;&amp;gt;&#39;標籤，定義了 LLM 的一系列行為，包括其想法、動作、內核、分析、驗證等過程。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;量子位&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推薦&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://my.oschina.net/u/2340880/blog/15616643&quot; target=&quot;news&quot;&gt;UIInteraction：iOS 中強大的視圖交互能力&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;UIInteraction 是 iOS 開發框架中提供的一個協議，此協議可以為視圖增加非常強大的交互能力，例如進行文字的識別和提取，圖片的分析、物理按鍵的拍攝處理等等。本章將總結目前系統提供的遵守了 UIInteraction 協議的交互類，介紹這些系統交互的使用方法，希望可以對你有所啓發，將這些能力應用到具體的業務場景中去。&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;開源之聲&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户觀點&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fb8vfN98LeG3FBjgleQJfZQ&quot; target=&quot;_blank&quot;&gt;FreeBSD 社區正在為是否「鏽化」而激辯&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：你説得對，但是 Rust 是由 Mozilla 自主研發的一款全新內存安全編程語言。編譯將發生在一個被稱作「卡爾構」的構建系統，在這裏，被引用的指針將被授予「生命週期」，導引安全之力。你將扮演一位名為「開發者」的神秘角色在編程的搏鬥中邂逅骨骼驚奇的報錯，繞開它們通過編譯同時，逐步發掘「Rust」的真相。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 2：直覺告訴我，現在如火如荼的鏽化旨在解決 rust 程序員就業問題，除此之外折騰來折騰去沒有實際意義的事情&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 3：對於內核編寫而言，C 已經足夠好，而不需要更好的 Rust 語言，但是對於應用編寫而言，Rust 相比其他更加容易上手的語言又不夠好&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FY_YLr06PnGgB9yAdY3Uffg&quot; target=&quot;_blank&quot;&gt;「微信、iPhone 二選一？」——多年前的代碼已經給出了答案&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：「關於推廣大眾消費領域智能手機所搭載操作系統的若干意見」&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 2：蘋果不會放棄微信的，畢竟裝了微信 256GB 的 iPhone 才能賣得出去&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 3：都是些軟蛋，瞅瞅歐盟&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最後，歡迎掃碼下載「開源中國 APP」，閲讀海量技術報告、程序員極客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310215</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310215</guid>
            <pubDate>Tue, 03 Sep 2024 13:15:15 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>UIInteraction：iOS 中強大的視圖交互能力</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;h1&gt;UIInteraction：iOS 中強大的視圖交互能力&lt;/h1&gt; 
&lt;p&gt;UIInteraction 是 iOS 開發框架中提供的一個協議，此協議可以為視圖增加非常強大的交互能力，例如進行文字的識別和提取，圖片的分析、物理按鍵的拍攝處理等等。本章將總結目前系統提供的遵守了 UIInteraction 協議的交互類，介紹這些系統交互的使用方法，希望可以對你有所啓發，將這些能力應用到具體的業務場景中去。&lt;/p&gt; 
&lt;h2&gt;概覽&lt;/h2&gt; 
&lt;p&gt;AVCaptureEventInteraction：相機拍照事件捕獲交互（物理按鍵）。&lt;/p&gt; 
&lt;p&gt;ImageAnalysisInteraction：為圖片添加識別文本，條形碼和其他對象的交互。&lt;/p&gt; 
&lt;p&gt;UIContextMenuInteraction：顯示與用户關注點內容相關的菜單交互，例如進行長按時彈出交互菜單。&lt;/p&gt; 
&lt;p&gt;UIEditMenuInteraction：編輯類菜單交互，主要用在文本輸入類的組件上。&lt;/p&gt; 
&lt;p&gt;UIFindInteraction：進行文本查找與替換的交互。&lt;/p&gt; 
&lt;p&gt;UILargeContentViewerInteraction：大內容查看交互，例如將某個小組件進行方法查看。&lt;/p&gt; 
&lt;p&gt;UIFeedbackGenerator：用户交互反擊的生成器類，用來統一的處理用户的交互返回（各種震動效果），後續詳細介紹。&lt;/p&gt; 
&lt;p&gt;UIDragInteraction：對組件進行拖拽交互，是可以支持跨應用的。&lt;/p&gt; 
&lt;p&gt;UIDropInteraction：將組件拖拽放置的交互，是可以支持跨應用的。&lt;/p&gt; 
&lt;p&gt;UITextInteraction：對自定義的文本組件提供原生體驗一致的手勢交互，如文本選擇。&lt;/p&gt; 
&lt;p&gt;UITextSelectionDisplayInteraction：選中文本展示的 UI 交互。&lt;/p&gt; 
&lt;p&gt;UISpringLoadedInteraction：拖拽時提供動態導航交互，簡單説就是當拖轉組件到一個元素時，可以動態的觸發元素的點擊跳轉。&lt;/p&gt; 
&lt;p&gt;UIBandSelectionInteraction：跟蹤指針位置選中項目的交互，在有鼠標或其他指針的場景中需要用到此種交互，本文不做探討。&lt;/p&gt; 
&lt;p&gt;UIToolTipInteraction：指針懸停在組件上展示提示 UI 的交互，本文不做討論。&lt;/p&gt; 
&lt;p&gt;UIPencilInteraction：Apple Pencil 的交互，某些型號的筆可以進行擠壓和雙擊交互，本文不做討論。&lt;/p&gt; 
&lt;p&gt;UIIndirectScribbleInteraction：非常規的輸入類視圖的用户交互，主要是手寫跟蹤，本文不做討論。&lt;/p&gt; 
&lt;p&gt;UIPointerInteraction：定義鼠標指針外觀的交互，本文不做討論。&lt;/p&gt; 
&lt;p&gt;UIScribbleInteraction：提供塗寫交互能力，本文不做討論。&lt;/p&gt; 
&lt;p&gt;GCEventInteraction：GameController 交互，涉及到 GameController 框架，這裏不做討論。&lt;/p&gt; 
&lt;p&gt;BETextInteraction：瀏覽器文本視圖相關交互，涉及到 BrowserEngineKit 框架，iOS17.4 之後支持三方開發瀏覽器軟件，這不再本篇文章的討論範圍&lt;/p&gt; 
&lt;p&gt;上面所列舉出的類都是遵守了 UIInteraction 類，並提供了相關交互能力。本篇文章主要介紹其中與 iPhone 設備上應用體驗相關的交互，對 Vision 設備，iPad 和 Mac 等可以手寫和處理指針的交互不做過多的討論。下面我們會逐一對這些交互能力的使用進行介紹。&lt;/p&gt; 
&lt;h2&gt;AVCaptureEventInteraction 相機拍照事件捕獲交互&lt;/h2&gt; 
&lt;p&gt;在 iPhone 設備上，系統的相機有一個非常好用的功能，即可以通過按下任意的音量鍵來執行拍照動作，這也是自拍杆之所以無需點擊虛擬拍照按鈕就可以控制系統相機拍照的原因。AVCaptureEventInteraction 提供了交互接口，可以讓用户在自己的應用中實現這一功能。首先 AVCaptureEventInteraction 提供的本質上是物理按鍵的監聽能力，因此必須要求在應用捕獲攝像頭的視頻流時才能使用。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;非常重要：AVCaptureEventInteraction 的相關 API 只能用在相機捕獲實時影像的場景中，只有當攝像頭正在使用時系統才會正常的發送硬件事件，在後台的應用以及沒有使用攝像頭的應用都無法接收到這個事件。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;示例代碼：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import UIKit
import AVKit

class ViewController: UIViewController, AVCaptureVideoDataOutputSampleBufferDelegate {

    /// A capture event interaction to handle hardware button presses.
    private var eventInteraction: AVCaptureEventInteraction!
    
    
    var captureSession: AVCaptureSession!
    var videoPreviewLayer: AVCaptureVideoPreviewLayer!
     
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
        // Configure the app to take a photo on hardware button press.
        configureHardwareInteraction()
        // 設置相機會話
        captureSession = AVCaptureSession()
        captureSession.beginConfiguration()
        captureSession.sessionPreset = .high
 
        guard let videoDevice = AVCaptureDevice.default(for: .video) else { return }
        guard let videoInput = try? AVCaptureDeviceInput(device: videoDevice) else { return }
 
        if captureSession.canAddInput(videoInput) {
            captureSession.addInput(videoInput)
        }
 
        let videoOutput = AVCaptureVideoDataOutput()
        videoOutput.setSampleBufferDelegate(self, queue: DispatchQueue(label: &quot;videoQueue&quot;))
        if captureSession.canAddOutput(videoOutput) {
            captureSession.addOutput(videoOutput)
        }
 
        captureSession.commitConfiguration()
        captureSession.startRunning()
 
        // 創建視頻預覽層
        videoPreviewLayer = AVCaptureVideoPreviewLayer(session: captureSession)
        videoPreviewLayer.frame = view.bounds
        view.layer.addSublayer(videoPreviewLayer)
    }
 
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        videoPreviewLayer.frame = view.bounds
    }
    
    private func configureHardwareInteraction() {
        // 處理硬件事件觸發邏輯的邏輯
        // 可以讀取當前的視頻流進行拍攝
        eventInteraction = AVCaptureEventInteraction { event in
            print(&quot;事件階段狀態 - &quot;, event.phase)
        } secondary: { event in
            print(&quot;事件階段狀態 - &quot;, event.phase)
        }
        eventInteraction.isEnabled = true
        view.addInteraction(eventInteraction)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&amp;nbsp;AVCaptureEventInteraction 類的定義本身非常簡單：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@available(iOS 17.2, *)
open class AVCaptureEventInteraction : NSObject, UIInteraction {
    // 初始化方法，註冊一個事件回調
    public init(handler: @escaping (AVCaptureEvent) -&amp;gt; Void)
    // 初始化方法，註冊一個事件回調，回調中的兩個參數分別對應音量上和下兩個按鈕的點擊
    public init(primary primaryHandler: @escaping (AVCaptureEvent) -&amp;gt; Void, secondary secondaryHandler: @escaping (AVCaptureEvent) -&amp;gt; Void)
    // 設置此交互行為是否生效
    open var isEnabled: Bool
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;其回調中的 AVCaptureEvent 會標識事件的狀態：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@available(iOS 17.2, *)
open class AVCaptureEvent : NSObject {
    // 事件的狀態
    open var phase: AVCaptureEventPhase { get }
}

@available(iOS 17.2, *)
public enum AVCaptureEventPhase : UInt, @unchecked Sendable {
    // 點擊開始
    case began = 0
    // 點擊結束
    case ended = 1
    // 事件取消
    case cancelled = 2
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;需要注意，所有的 AVCaptureEventInteraction 接口都在 iOS17.2 之後可用。&lt;/p&gt; 
&lt;h2&gt;ImageAnalysisInteraction 圖片識別交互&lt;/h2&gt; 
&lt;p&gt;圖片中往往包含了許多標準化的信息，如文本信息，二維碼信息等。在使用 iOS 系統的圖庫軟件時，用户可以直接長按圖片來提取圖片中的信息，如進行文本的複製，二維碼的識別等。ImageAnalysisInteraction 類即可提供這種交互能力。&lt;/p&gt; 
&lt;p&gt;ImageAnalysisInteraction 交互有很多應用場景，可以複製圖片中的文本，可以快捷撥打電話、翻譯、識別鏈接和二維碼等。ImageAnalysisInteraction 是基於 VersionKit 框架實現的，VersionKit 是 Apple 提供的一套與視覺處理相關功能的框架。&lt;/p&gt; 
&lt;p&gt;需要注意，ImageAnalysisInteraction 本身只是提供了一套識別後的用户交互，具體的分析任務是由 ImageAnalyzer 類實現的。ImageAnalyzer 只能在 A12 及以上的芯片設備上使用，因此在使用此功能前，需要先做下可用性判斷。&lt;/p&gt; 
&lt;p&gt;ImageAnalysisInteraction 的交互官網示例圖如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-70723799539872d29f6cf73c33367d017a0.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;當 ImageAnalyzer 對圖片分析完成後，可以將結果傳遞給 ImageAnalysisInteraction，此時 UIImageView 的組件的右下角會顯示一個掃描樣式的圖標，單擊此圖標即可查看分析的結果，圖片中會將識別出的元素區域進行高亮，並支持用户操作。&lt;/p&gt; 
&lt;p&gt;示例代碼如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import VisionKit
class ViewController: UIViewController, ImageAnalysisInteractionDelegate {
    
    let interaction = ImageAnalysisInteraction()
    let imageDataAnalyzer = ImageAnalyzer()
    let imageView = UIImageView(image: UIImage(named: &quot;img&quot;))
    
    override func viewDidLoad() {
        super.viewDidLoad()
        imageView.contentMode = .scaleAspectFit
        view.addSubview(imageView)
        imageView.frame = view.bounds
        if ImageAnalyzer.isSupported {
            imageView.addInteraction(interaction)
            interaction.delegate = self
            // 設置預期接收的交互
            interaction.preferredInteractionTypes = [.automatic]
            Task {
                // 配置 configuration 對象
                let configuration = ImageAnalyzer.Configuration([.text, .machineReadableCode])
                do {
                    // 開始執行分析
                    let analysis = try await imageDataAnalyzer.analyze(imageView.image!, configuration: configuration)
                    // 分析信息結果接收
                    interaction.analysis = analysis
                } catch {
                 // 處理異常
                }
            }
        }
    }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;找一測試圖片進行識別，效果如下圖所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-e88a623f3ae3fc9192c6934dafb91271751.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;下面，我們再來詳細解析下 ImageAnalysisInteraction 接口的功能，ImageAnalyzer 的識別能力本身，這裏就不再贅述，&lt;/p&gt; 
&lt;p&gt;ImageAnalysisInteraction 交互可以直接添加在 UIImageView 上，如果我們不使用 UIImageView 組件來展示圖片，也可以手動設置圖片渲染的區域，ImageAnalysisInteraction 會將交互內容映射到對應組件的正確位置上。&lt;/p&gt; 
&lt;p&gt;ImageAnalysisInteraction 類中的核心屬性和方法如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@available(iOS 16.0, macCatalyst 17.0, *)
@MainActor @objc final public class ImageAnalysisInteraction : NSObject, UIInteraction {
    // 設置代理
    @MainActor weak final public var delegate: (any ImageAnalysisInteractionDelegate)?
    // 圖片分析的結果，分析完成後對此屬性進行賦值
    @MainActor final public var analysis: ImageAnalysis?
    // 設置期望支持的交互的類型
    @MainActor final public var preferredInteractionTypes: ImageAnalysisInteraction.InteractionTypes
    // 目前所激活的交互類型
    @MainActor final public var activeInteractionTypes: ImageAnalysisInteraction.InteractionTypes { get }
    // 可選擇的元素是否高亮，內部會自己管理此屬性的值
    @MainActor final public var selectableItemsHighlighted: Bool
    // 是否有激活被選中的文本
    @MainActor final public var hasActiveTextSelection: Bool { get }
    // 清空所有選中的文本
    @MainActor final public func resetTextSelection()
    // 圖片中的文本
    @MainActor final public var text: String { get }
    // 被選中的文本
    @MainActor final public var selectedText: String { get }
    // 選中的文本的 attribute 屬性
    @MainActor final public var selectedAttributedText: AttributedString { get }
    // 選中的文本的範圍
    @MainActor final public var selectedRanges: [Range&amp;lt;String.Index&amp;gt;]
    // 當不使用 UIImageView 來展示圖片時，圖片的渲染區域如果有修改，需要調用此方法通知交互層來對應的更新
    @MainActor final public func setContentsRectNeedsUpdate()
    // 單位空間內的描述交互區域的矩形
    @MainActor final public var contentsRect: CGRect { get }
    // 視圖的某個位置是否有可交互元素
    @MainActor final public func hasInteractiveItem(at point: CGPoint) -&amp;gt; Bool
    // 視圖的某個位置是否有文本
    @MainActor final public func hasText(at point: CGPoint) -&amp;gt; Bool
    // 視圖的某個位置是否有檢測到數據
    @MainActor final public func hasDataDetector(at point: CGPoint) -&amp;gt; Bool
    // 實時文本按鈕是否可見，右下角的按鈕
    @MainActor final public var liveTextButtonVisible: Bool { get }
    // 識別出的所有主題的集合
    @MainActor final public var subjects: Set&amp;lt;ImageAnalysisInteraction.Subject&amp;gt; { get async }
    // 高亮的主題集合
    @MainActor final public var highlightedSubjects: Set&amp;lt;ImageAnalysisInteraction.Subject&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;通過 InteractionTypes 可以設置預期支持的交互類型以及可以獲取到最終識別出的交互類型，此類型定義如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;public struct InteractionTypes : OptionSet {
    // 自動，支持任意類型
    public static let automatic: ImageAnalysisInteraction.InteractionTypes
    // 文本類的所有類型
    public static let automaticTextOnly: ImageAnalysisInteraction.InteractionTypes
    // 文本選擇類，包括選中，拷貝和翻譯
    public static let textSelection: ImageAnalysisInteraction.InteractionTypes
    // 數據類，包括鏈接，郵箱，地址
    public static let dataDetectors: ImageAnalysisInteraction.InteractionTypes
    // 圖片主題類，包括摳圖等
    public static let imageSubject: ImageAnalysisInteraction.InteractionTypes
    // 支持更多的圖片選項，如圖片的分類
    public static let visualLookUp: ImageAnalysisInteraction.InteractionTypes
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;開發者也可以參與到交互的流程中，通過 ImageAnalysisInteractionDelegate 協議可以更精細化的控制交互行為:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@available(iOS 16.0, macCatalyst 17.0, *)
public protocol ImageAnalysisInteractionDelegate : AnyObject {
    // 返回一個布爾值，可以控制某個位置是否允許交互
    func interaction(_ interaction: ImageAnalysisInteraction, shouldBeginAt point: CGPoint, for interactionType: ImageAnalysisInteraction.InteractionTypes) -&amp;gt; Bool
    // 對於非 UIImageView 的組件，此代理可以返回一個渲染區域，用來告訴交互層要渲染的位置
    func contentsRect(for interaction: ImageAnalysisInteraction) -&amp;gt; CGRect
    // 自定義設置用來渲染圖片的視圖
    func contentView(for interaction: ImageAnalysisInteraction) -&amp;gt; UIView?
    // 設置一個視圖控制器用來承接可交互元素的彈出跳轉，默認為 Window 的根視圖
    func presentingViewController(for interaction: ImageAnalysisInteraction) -&amp;gt; UIViewController?
    // 當實時文本的可見性變化時會回調
    func interaction(_ interaction: ImageAnalysisInteraction, liveTextButtonDidChangeToVisible visible: Bool)
    // 選中的高亮元素變化時回調
    func interaction(_ interaction: ImageAnalysisInteraction, highlightSelectedItemsDidChange highlightSelectedItems: Bool)
    // 選中的文本變化時回調
    func textSelectionDidChange(_ interaction: ImageAnalysisInteraction)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;UIContextMenuInteraction 上下文菜單交互&lt;/h2&gt; 
&lt;p&gt;當我們在系統的瀏覽器中對某個鏈接觸發 3D Touch 或長按操作時，可以看到會在當前頁面彈出一個浮層，浮層會對超鏈接進行預覽展示，並提供一些操作菜單項。這其實就是 UIContextMenuInteraction 提供的交互能力。&lt;/p&gt; 
&lt;p&gt;UIContextMenuInteraction 可以為某個可交互控件提供浮層預覽和菜單能力。&lt;/p&gt; 
&lt;p&gt;先來看一個示例：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class ViewController: UIViewController, UIContextMenuInteractionDelegate {
    func contextMenuInteraction(_ interaction: UIContextMenuInteraction, configurationForMenuAtLocation location: CGPoint) -&amp;gt; UIContextMenuConfiguration? {
        return .init(identifier: nil) {
            // 設置預覽控制器，返回空則不展示額外的預覽
            nil
        } actionProvider: { elements in
            // 設置菜單項
            let favoriteAction = UIAction(title: &quot;喜歡&quot;, image: UIImage(systemName: &quot;heart.fill&quot;), state: .off) { (action) in
                }
            let shareAction = UIAction(title: &quot;分享&quot;, image: UIImage(systemName: &quot;square.and.arrow.up.fill&quot;), state: .off) { (action) in
                
            }
            let deleteAction = UIAction(title: &quot;刪除&quot;, image: UIImage(systemName: &quot;trash.fill&quot;),
                                        attributes: [.destructive], state: .on) { (action) in
                
            }
            return UIMenu(title: &quot;菜單&quot;, children: [favoriteAction, shareAction, deleteAction])
        }
    }
    
    
    let imageView = UIImageView(image: UIImage(named: &quot;img&quot;))
    
    override func viewDidLoad() {
        super.viewDidLoad()
        imageView.isUserInteractionEnabled = true
        imageView.contentMode = .scaleAspectFill
        view.addSubview(imageView)
        imageView.frame = CGRect(x: view.frame.width / 2 - 150, y: view.frame.height / 2 - 150, width: 300.0, height: 300.0)
        let interaction = UIContextMenuInteraction(delegate: self)
        // 為圖片控件添加 UIContextMenuInteraction 交互
        imageView.addInteraction(interaction)
    }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;運行代碼效果如下圖所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-71f5661070fe1d816cbef1762732bcac944.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在代碼配置中，並沒有設置預覽控制器，因此其觸發 UIContextMenuInteraction 交互時，會將原組件進行高亮，並將其他背景進行模糊。需要注意，UIContextMenuInteraction 交互需要在 iOS13 及以上系統重使用。UIContextMenuInteraction 本身比較簡單，定義如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@available(iOS 13.0, *)
@MainActor open class UIContextMenuInteraction : NSObject, UIInteraction {
    // 代理
    weak open var delegate: (any UIContextMenuInteractionDelegate)? { get }
    // 菜單當前是否正在展示
    @available(iOS 14.0, *)
    open var menuAppearance: UIContextMenuInteraction.appearance { get }
    // 初始化方法
    public init(delegate: any UIContextMenuInteractionDelegate)
    // 這是一個抽象方法，子類可以重寫，從而控制菜單彈出的位置
    open func location(in view: UIView?) -&amp;gt; CGPoint
    // 這是一個抽象方法，更新菜單可見性時會調用
    @available(iOS 14.0, *)
    open func updateVisibleMenu(_ block: (UIMenu) -&amp;gt; UIMenu)
    // 將當前已經顯示的菜單隱藏掉
    open func dismissMenu()
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;具體彈出的預覽視圖和菜單項，需要在代理方法中進行設置，UIContextMenuInteractionDelegate 中定義的方法如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@available(iOS 13.0, *)
@MainActor public protocol UIContextMenuInteractionDelegate : NSObjectProtocol {
    // 配置菜單和預覽項，UIContextMenuConfiguration 後面介紹
    func contextMenuInteraction(_ interaction: UIContextMenuInteraction, configurationForMenuAtLocation location: CGPoint) -&amp;gt; UIContextMenuConfiguration?
    @available(iOS 16.0, *)
    // 上下文交互開始時回調
    optional func contextMenuInteraction(_ interaction: UIContextMenuInteraction, configuration: UIContextMenuConfiguration, highlightPreviewForItemWithIdentifier identifier: any NSCopying) -&amp;gt; UITargetedPreview?
    // 上下文交互消失時回調
    @available(iOS 16.0, *)
    optional func contextMenuInteraction(_ interaction: UIContextMenuInteraction, configuration: UIContextMenuConfiguration, dismissalPreviewForItemWithIdentifier identifier: any NSCopying) -&amp;gt; UITargetedPreview?
    // 預覽操作開始時回調
    optional func contextMenuInteraction(_ interaction: UIContextMenuInteraction, willPerformPreviewActionForMenuWith configuration: UIContextMenuConfiguration, animator: any UIContextMenuInteractionCommitAnimating)
    // 菜單開始顯示時回調
    optional func contextMenuInteraction(_ interaction: UIContextMenuInteraction, willDisplayMenuFor configuration: UIContextMenuConfiguration, animator: (any UIContextMenuInteractionAnimating)?)
    // 交互結束時回調
    optional func contextMenuInteraction(_ interaction: UIContextMenuInteraction, willEndFor configuration: UIContextMenuConfiguration, animator: (any UIContextMenuInteractionAnimating)?)
    // 配置菜單高亮時使用的預覽視圖
    @available(iOS, introduced: 13.0, deprecated: 16.0)
    optional func contextMenuInteraction(_ interaction: UIContextMenuInteraction, previewForHighlightingMenuWithConfiguration configuration: UIContextMenuConfiguration) -&amp;gt; UITargetedPreview?
    // 配置菜單隱藏時使用的預覽視圖
    @available(iOS, introduced: 13.0, deprecated: 16.0)
    optional func contextMenuInteraction(_ interaction: UIContextMenuInteraction, previewForDismissingMenuWithConfiguration configuration: UIContextMenuConfiguration) -&amp;gt; UITargetedPreview?
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;其中 UIContextMenuConfiguration 類用來做具體的交互配置，如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@available(iOS 13.0, *)
@MainActor open class UIContextMenuConfiguration : NSObject {
    // 唯一標識
    open var identifier: any NSCopying { get }
    // 一組標識符，標識每個副項
    @available(iOS 16.0, *)
    open var secondaryItemIdentifiers: Set&amp;lt;AnyHashable&amp;gt;
    // 徽章數
    @available(iOS 16.0, *)
    open var badgeCount: Int
    // 排序
    @available(iOS 16.0, *)
    open var preferredMenuElementOrder: UIContextMenuConfiguration.ElementOrder
}

@available(iOS 13.0, tvOS 17.0, *)
extension UIContextMenuConfiguration {
    // 初始化方法，配置預覽視圖與一組菜單項
    @MainActor public convenience init(identifier: (any NSCopying)? = nil, previewProvider: UIContextMenuContentPreviewProvider? = nil, actionProvider: UIContextMenuActionProvider? = nil)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;UIEditMenuInteraction 編輯類菜單交互&lt;/h2&gt; 
&lt;p&gt;UIEditMenuInteraction 是對 UIMenuController 的一種代替，UIEditMenuInteraction 的整體設計架構更加合理，使用也更加直觀簡單。默認 UITextView 與 UITextField 已經集成了 UIEditMenuInteraction 交互。UIEditMenuInteraction 交互用來提供諸如剪切、拷貝、粘貼等編輯選項。&lt;/p&gt; 
&lt;p&gt;示例如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class ViewController: UIViewController, UIEditMenuInteractionDelegate {
    
    func editMenuInteraction(_ interaction: UIEditMenuInteraction, menuFor configuration: UIEditMenuConfiguration, suggestedActions: [UIMenuElement]) -&amp;gt; UIMenu? {
        // 進行菜單項的配置
        let favorite = UIAction(title: &quot;Favorite&quot;) { _ in
            print(&quot;favorite&quot;)
        }
        let share = UIAction(title: &quot;Share&quot;) { _ in
            print(&quot;share&quot;)
        }
        let delete = UIAction(title: &quot;Delete&quot;, attributes: [.destructive]) { _ in
            print(&quot;delete&quot;)
        }
        return UIMenu(children: [favorite, share, delete])
    }
    
    let imageView = UIImageView(image: UIImage(named: &quot;img&quot;))
    var interaction: UIEditMenuInteraction!
    override func viewDidLoad() {
        super.viewDidLoad()
        interaction = UIEditMenuInteraction(delegate: self)
        imageView.isUserInteractionEnabled = true
        imageView.layer.masksToBounds = true
        imageView.contentMode = .scaleAspectFill
        view.addSubview(imageView)
        imageView.frame = CGRect(x: view.frame.width / 2 - 150, y: view.frame.height / 2 - 150, width: 300.0, height: 300.0)
        // 為圖片控件添加 UIEditMenuInteraction 交互
        imageView.addInteraction(interaction)
        let longPress = UILongPressGestureRecognizer(target: self, action: #selector(didLongPress(_:)))
        imageView.addGestureRecognizer(longPress)
    }
    
    @objc func didLongPress(_ recognizer: UIGestureRecognizer) {
        let location = recognizer.location(in: imageView)
        let configuration = UIEditMenuConfiguration(identifier: nil, sourcePoint: location)
        // 使用交互對象彈出菜單
        interaction.presentEditMenu(with: configuration)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;上面代碼中，對 UIImageView 視圖添加了一個長按手勢，手勢觸發時，彈出編輯菜單。效果如下圖：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-eb33ad55714e3e6798125142a5ae30c5662.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;UIEditMenuInteraction 類解析如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@available(iOS 16.0, *)
@MainActor open class UIEditMenuInteraction : NSObject, UIInteraction {
    // 初始化方法，設置代理
    public init(delegate: (any UIEditMenuInteractionDelegate)?)
    // 彈出編輯菜單
    open func presentEditMenu(with configuration: UIEditMenuConfiguration)
    // 隱藏菜單
    open func dismissMenu()
    // 刷新可見的菜單
    open func reloadVisibleMenu()
    // 刷新可見菜單位置，可以帶動畫
    open func updateVisibleMenuPosition(animated: Bool)
    // 獲取交互點的座標
    open func location(in view: UIView?) -&amp;gt; CGPoint
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;UIEditMenuInteractionDelegate 代理對菜單的數據源進行提供，並有生命週期的相關回調：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@available(iOS 16.0, *)
public protocol UIEditMenuInteractionDelegate : NSObjectProtocol {
    // 配置菜單
    optional func editMenuInteraction(_ interaction: UIEditMenuInteraction, menuFor configuration: UIEditMenuConfiguration, suggestedActions: [UIMenuElement]) -&amp;gt; UIMenu?
    // 配置菜單展示的位置
    optional func editMenuInteraction(_ interaction: UIEditMenuInteraction, targetRectFor configuration: UIEditMenuConfiguration) -&amp;gt; CGRect
    // 交互即將彈出菜單時的回調
    optional func editMenuInteraction(_ interaction: UIEditMenuInteraction, willPresentMenuFor configuration: UIEditMenuConfiguration, animator: any UIEditMenuInteractionAnimating)
    // 交互即將隱藏菜單時的回調
    optional func editMenuInteraction(_ interaction: UIEditMenuInteraction, willDismissMenuFor configuration: UIEditMenuConfiguration, animator: any UIEditMenuInteractionAnimating)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;UIFindInteraction 文本查找替換交互&lt;/h2&gt; 
&lt;p&gt;UIFindInteraction 顧名思義，用來進行查找相關的交互，其提供了一個系統的查找面板，可以在文本展示類控件中進行文本的查找或替換操作。默認系統的 UITextView，WKWebView 與 PDFView 都集成了此交互，只需要將其 isFindInteractionEnabled 屬性設置為 true 即可。另外，對於完全自定義的文本渲染類組件，如果要實現此交互，則需要手動實現一個文本查找的協議，這裏我們只看下如何使用系統提供的這些類來實現 UIFindInteraction 交互。&lt;/p&gt; 
&lt;p&gt;示例代碼如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class ViewController: UIViewController {
    lazy var textView: UITextView = {
        let textView = UITextView(frame: CGRect(x: 0, y: 200, width: view.bounds.width, height: 600))
        textView.text = &quot;&quot;&quot;
        UIInteraction 是 iOS 開發框架中提供的一個協議，此協議可以為視圖增加非常強大的交互能力，例如進行文字的識別和提取，圖片的分析、物理按鍵的拍攝處理等等。本章將總結目前系統提供的遵守了 UIInteraction 協議的交互類，介紹這些系統交互的使用方法，希望可以對你有所啓發，將這些能力應用到具體的業務場景中去。
        &quot;&quot;&quot;
        textView.center = view.center
        // 打開 UIFindInteraction
        textView.isFindInteractionEnabled = true
        // 添加長按手勢
        let longPress = UILongPressGestureRecognizer(target: self, action: #selector(didLongPress))
        textView.addGestureRecognizer(longPress)
        return textView
    }()

    override func viewDidLoad() {
        super.viewDidLoad()
        view.addSubview(textView)
    }

    // MARK: 長按手勢響應事件
    @objc func didLongPress(_ recognizer: UIGestureRecognizer) {
        // 彈出查找和替換面板，會彈出鍵盤
        textView.findInteraction?.presentFindNavigator(showingReplace: true)
    }

    override func touchesBegan(_ touches: Set&amp;lt;UITouch&amp;gt;, with event: UIEvent?) {
        // 退出面板
        textView.findInteraction?.dismissFindNavigator()
    }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;運行代碼，在文本區域長按，效果如下圖所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-d2e3457f23b3375d56b8c87391eacab9345.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;如果進行文本替換，會直接對 UITextView 中的內容進行修改。UIFindInteraction 相對複雜，其中常用屬性方法列舉如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@available(iOS 16.0, *)
@MainActor open class UIFindInteraction : NSObject, UIInteraction {
    // 查找的交互 UI 是否可見
    open var isFindNavigatorVisible: Bool { get }
    // 當前激活的 UIFindSession，UIFindSession 具體用來進行管理查找功能
    open var activeFindSession: UIFindSession? { get }
    // 要查找的文本
    open var searchText: String?
    // 替換為的文本
    open var replacementText: String?
    // 可選的菜單
    open var optionsMenuProvider: (([UIMenuElement]) -&amp;gt; UIMenu?)?
    // 代理與初始化方法
    weak open var delegate: (any UIFindInteractionDelegate)? { get }
    public init(sessionDelegate: any UIFindInteractionDelegate)
    // 彈出查找面板，可選是否支持替換
    open func presentFindNavigator(showingReplace: Bool)
    // 隱藏查找面板
    open func dismissFindNavigator()
    // 使用代碼查找下一個結果
    open func findNext()
    // 使用代碼查找上一個結果
    open func findPrevious()
    // 更新結果數量
    open func updateResultCount()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;UIFindInteractionDelegat 定義如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@available(iOS 16.0, *)
@MainActor public protocol UIFindInteractionDelegate : NSObjectProtocol {
    // 提供 UIFindSession 對象，管理查找
    func findInteraction(_ interaction: UIFindInteraction, sessionFor view: UIView) -&amp;gt; UIFindSession?
    // 交互開始時的回調
    optional func findInteraction(_ interaction: UIFindInteraction, didBegin session: UIFindSession)
    // 交互結束時的回調
    optional func findInteraction(_ interaction: UIFindInteraction, didEnd session: UIFindSession)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;其中 UIFindSession 一般無需我們單獨實現，如果使用的文本組件非上述的三種，則需要手動實現 UIFindSession 功能。&lt;/p&gt; 
&lt;h2&gt;UILargeContentViewerInteraction 大內容查看交互&lt;/h2&gt; 
&lt;p&gt;UILargeContentViewerInteraction 會用在無障礙相關的功能中，iOS 設備會為視覺障礙用户提供無障礙功能，在系統的設置中可以使用放大字體，如此設置後，即可對動態大小的字體進行放大，但是動態字體的放大功能並非會作用於所有的元素，在某些元素上動態字體功能是不生效的，例如導航欄上的文字、TabBar 欄上的文字等，針對這種場景，我們可以對某些視圖設置 UILargeContentViewerInteraction 交互，在開啓動態放大字體功能時，設置了 UILargeContentViewerInteraction 的組件產生用户行為時，會顯示一個大的內容面板，此面板上的圖標和文案可以提示用户此按鈕的功能。&lt;/p&gt; 
&lt;p&gt;示例如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;class ViewController: UIViewController, UILargeContentViewerInteractionDelegate {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        let l = UIButton(type: .system)
        l.titleLabel?.font = .systemFont(ofSize: 10)
        l.setTitle(&quot;文字很小&quot;, for: .normal)
        l.setTitleColor(.red, for: .normal)
        l.frame = CGRect(x: view.frame.width / 2 - 50.0, y: 600, width: 100, height: 30)
        view.addSubview(l)
        // 設置開啓大內容交互，以及要顯示的內容和圖標
        l.showsLargeContentViewer = true
        l.largeContentTitle = &quot;放大&quot;
        l.largeContentImage = UIImage(systemName: &quot;star.fill&quot;)
        // 直接添加交互即可
        l.addInteraction(UILargeContentViewerInteraction(delegate: self))
    }
    
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;UILargeContentViewerInteraction 的使用非常簡單：&lt;/p&gt; 
&lt;p&gt;1. 對需要的組件開啓 showsLargeContentViewer 屬性&lt;/p&gt; 
&lt;p&gt;2. 對要展示的大內容標題和圖片進行設置&lt;/p&gt; 
&lt;p&gt;3. 為對應組件添加 UILargeContentViewerInteraction 交互&lt;/p&gt; 
&lt;p&gt;showsLargeContentViewer 屬性實際上是 UILargeContentViewerItem 協議中約定的，協議如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension UIView : UILargeContentViewerItem {
    // 是否要開啓大內容展示功能
    open var showsLargeContentViewer: Bool
    // 設置標題
    open var largeContentTitle: String?
    // 設置圖片
    open var largeContentImage: UIImage?
    // 設置圖片是否縮放
    open var scalesLargeContentImage: Bool
    // 設置圖片邊距
    open var largeContentImageInsets: UIEdgeInsets
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;UIView 類默認實現了 UILargeContentViewerItem 協議，因此理論上所有 UIView 的子類都可以直接使用 UILargeContentViewerInteraction 交互。&lt;/p&gt; 
&lt;p&gt;要對 UILargeContentViewerInteraction 進行測試也很簡單，我們可以在真機上開啓無障礙來進行測試，也可以在模擬器上運行，在 Debug 時對環境進行覆蓋，選擇動態字體，如下圖：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-6f4cf30b95cc2b68dd7294455a2dd3e6987.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;此時，在模擬器中對示例的按鈕進行按住不放，即可看到大內容面板的展示效果，如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-cc23a1770e063a3d482abdf5cce1bba1edb.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;UILargeContentViewerInteractionDelegate 協議中定義了大內容面板展示的相關生命週期，如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@available(iOS 13.0, *)
@MainActor public protocol UILargeContentViewerInteractionDelegate : NSObjectProtocol {
    // 大內容交互手勢結束時回調
    optional func largeContentViewerInteraction(_ interaction: UILargeContentViewerInteraction, didEndOn item: (any UILargeContentViewerItem)?, at point: CGPoint)
    // 出發交互時的位置回調，可以返回一個實現了 UILargeContentViewerItem 的對象
    optional func largeContentViewerInteraction(_ interaction: UILargeContentViewerInteraction, itemAt point: CGPoint) -&amp;gt; (any UILargeContentViewerItem)?
    // 設置要展示大內容面板的 controller
    optional func viewController(for interaction: UILargeContentViewerInteraction) -&amp;gt; UIViewController
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;UIFeedbackGenerator 用户觸感反饋交互&lt;/h2&gt; 
&lt;p&gt;UIFeedbackGenerator 是 iOS 系統提供的一套觸感反饋，其預定義了一些震動模式，開發者可以在不同的場景觸發不同的觸感反饋，增強用户的使用體驗。&lt;/p&gt; 
&lt;p&gt;需要注意，UIFeedbackGenerator 是一個抽象類，我們不能對它直接進行實例化使用，也不可以自定義其子類。系統預置了幾種震動模式的子類：&lt;/p&gt; 
&lt;p&gt;1.&amp;nbsp;UIImpactFeedbackGenerator&lt;/p&gt; 
&lt;p&gt;撞擊類反饋，例如用户界面發生碰撞、卡槽入位等場景可以使用。&lt;/p&gt; 
&lt;p&gt;2.&amp;nbsp;UISelectionFeedbackGenerator&lt;/p&gt; 
&lt;p&gt;選中反饋，例如選擇器選項的更改。&lt;/p&gt; 
&lt;p&gt;3.&amp;nbsp;UINotificationFeedbackGenerator&lt;/p&gt; 
&lt;p&gt;通知反饋，收到通知產生反饋。&lt;/p&gt; 
&lt;p&gt;4.&amp;nbsp;UICanvasFeedbackGenerator&lt;/p&gt; 
&lt;p&gt;畫布的反饋，如參考線和標尺的到位等。&lt;/p&gt; 
&lt;p&gt;這幾種子類的解析如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;@MainActor open class UIImpactFeedbackGenerator : UIFeedbackGenerator {
    // 反饋類型，強度不同
    public enum FeedbackStyle : Int, @unchecked Sendable {
        case light = 0
        case medium = 1
        case heavy = 2
        @available(iOS 13.0, *)
        case soft = 3
        @available(iOS 13.0, *)
        case rigid = 4
    }
    // 初始化方法
    public convenience init(style: UIImpactFeedbackGenerator.FeedbackStyle, view: UIView)
    public init(style: UIImpactFeedbackGenerator.FeedbackStyle)
    // 觸發反饋
    open func impactOccurred()
    open func impactOccurred(at location: CGPoint)
    open func impactOccurred(intensity: CGFloat)
    open func impactOccurred(intensity: CGFloat, at location: CGPoint)
}


@MainActor open class UISelectionFeedbackGenerator : UIFeedbackGenerator {
    // 觸發反饋
    open func selectionChanged()
    open func selectionChanged(at location: CGPoint)
}

@MainActor open class UINotificationFeedbackGenerator : UIFeedbackGenerator {
    public enum FeedbackType : Int, @unchecked Sendable {
        case success = 0
        case warning = 1
        case error = 2
    }
    // 觸發反饋
    open func notificationOccurred(_ notificationType: UINotificationFeedbackGenerator.FeedbackType)
    open func notificationOccurred(_ notificationType: UINotificationFeedbackGenerator.FeedbackType, at location: CGPoint)
}

@MainActor open class UICanvasFeedbackGenerator : UIFeedbackGenerator {
    // 觸發反饋
    open func alignmentOccurred(at location: CGPoint)
    open func pathCompleted(at location: CGPoint)
}


&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;UIDragInteraction 與 UIDropInteraction 拖拽交互&lt;/h2&gt; 
&lt;p&gt;這兩個交互分別處理組件的拖拽與放置，其可以在不同的應用程序間實現拖拽傳輸數據，非常方便。關於這兩個交互的用法，在之前的文章中有詳細介紹，可以參閲：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/u/2340880/blog/1554045&quot;&gt;https://my.oschina.net/u/2340880/blog/1554045&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;其他&lt;/h2&gt; 
&lt;p&gt;UITextInteraction 與 UITextSelectionDisplayInteraction 的功能都是對文本編輯類組件添加交互，UITextInteraction 可以讓自定義的文本輸入控件實現類似系統 UITextView 類似的手勢體驗。自定義文本編輯組件需要對 UITextInput 協議進行實現，本身比較複雜，這裏不在討論。另外，與 Apple Pencil、帶鼠標指針等相關外設的交互功能，也不再繼續討論，有機會後面再聊。最後，感謝你花時間閲讀本文，希望能帶給你預期的收穫。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/2340880/blog/15616643</link>
            <guid isPermaLink="false">https://my.oschina.net/u/2340880/blog/15616643</guid>
            <pubDate>Tue, 03 Sep 2024 08:11:10 GMT</pubDate>
            <author>原創</author>
        </item>
        <item>
            <title>deepin 社區月報｜deepin 23 正式發佈、DistroWatch 國際排名第 9......</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-community-monthly-report-2024-08%2F&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;查看原文&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;8 月社區數據總覽&lt;/strong&gt;&lt;/h1&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;720&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240903100618.jpg&quot; width=&quot;1280&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;社區產品&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;1、deepin 23 正式發佈&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;2024 年 8 月 15 日，deepin 23 發佈，集成 Linux 6.6 LTS 內核及 6.9 主線雙內核、AI 技術，帶來 200 多項優化和新功能，旨在提供個性化和智能化的操作系統體驗。&lt;/p&gt; 
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-23-is-officially-released%2F&quot; target=&quot;_blank&quot;&gt;查看 deepin 23 發行註記&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2、deepin IDE 全新版本重磅更新&lt;/strong&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;deepin-IDE 研發團隊根據用户的反饋和需求，推出的全新版本 deepin IDE 對 AI 智能化和頂部導航以及各種工具進行升級，也已支持玲瓏構建。&lt;/p&gt; 
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-ide-update-2024-08%2F&quot; target=&quot;_blank&quot;&gt;查看 deepin-IDE 更新詳情&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3、deepin 深度適配 RISC-V 架構，打造全面兼容與高性能的開源桌面操作系統&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdistrowatch.com%2Ftable.php%3Fdistribution%3Ddeepin&quot; target=&quot;_blank&quot;&gt;作為目前國際 Linux 發行版排名最高的國產操作系統，&lt;/a&gt;deepin 一直致力於為用户提供廣泛的硬件支持。自 2022 年 2 月起，deepin 就開始了 RISC-V 架構的適配工作，現已成功支持了 x86、ARM、LoongArch 以及 RISC-V 等主流 CPU 架構。在 RISC-V 硬件生態方面，deepin 已與多家領先的板卡廠商完成了適配合作，進一步拓寬了其支持的硬件範圍。&lt;/p&gt; 
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdownload%2F&quot; target=&quot;_blank&quot;&gt;deepin 23 RISC-V 各架構鏡像（LicheePi 4A、VisionFive2 等）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4、深度適配龍架構，國產 CPU 與開源操作系統新融合&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;deepin 23 版本已完成龍架構 (LoongArch) 適配，龍架構是由國內自主 CPU 引領者龍芯中科所研發處理器使用的指令集架構，其產品包括 3A6000、3A5000、3B5000 等多款高性能多核心桌面處理器。這一重要里程碑不僅標誌着國產 CPU 與開源操作系統的融合邁上了新的台階，同時也為龍架構計算機用户提供了更加穩定、高效的操作系統選擇。&lt;/p&gt; 
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-v23-loongarch%2F&quot; target=&quot;_blank&quot;&gt;deepin 23 與 LoongArch 深度適配成果&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;5、deepin 23 攜手 Intel Ultra 平台，引領 AI PC 技術創新&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在數字化轉型的浪潮中，操作系統作為連接硬件與軟件的橋樑，其性能與兼容性的每一次飛躍，都標誌着計算技術邁出了堅實的一步。deepin 23 版本將支持 Intel 最新的 Ultra 平台，這使得 deepin 23 有望成為當前市場最適合 AI PC 的操作系統之一，在推動開源操作系統與先進硬件技術融合方面邁出了歷史性的一步。&lt;/p&gt; 
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-v23-with-intel-ultra%2F&quot; target=&quot;_blank&quot;&gt; deepin 23 &amp;amp; Intel Ultra 強強聯合&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;6、deepin 23 獲得海外 13 家科技媒體報道，DistroWatch 國際排名第 9，國際影響力大幅提升！&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;deepin&amp;nbsp;23&amp;nbsp;發佈的消息被國外多家新聞媒體報道，包括&amp;nbsp;&lt;strong&gt;It&#39;s&amp;nbsp;Foss&lt;/strong&gt;、&lt;strong&gt;LinuxMagazine&lt;/strong&gt;、&lt;strong&gt;LinuxJournal&lt;/strong&gt; 和 &lt;strong&gt;MeuLinux&lt;/strong&gt; 等 &lt;strong&gt;Linux &lt;/strong&gt;領域知名媒體平台。&lt;/p&gt; 
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdistrowatch.com%2Ftable.php%3Fdistribution%3Ddeepin&quot; target=&quot;_blank&quot;&gt;查看 deepin 實時國際排名&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;7、深度之家&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;2024 年 8 月，深度之家共收到用户 bug 及需求反饋 733 條：當中 bug 反饋 596 個，需求反饋 137 個，已修復 64 個，確認系統 bug 118 個；&lt;/li&gt; 
 &lt;li&gt;已修復的 bug 包括用户反饋的&lt;strong&gt;【工作區切換無效】、【 dde-shell 內存泄漏嚴重】、【玲瓏版本 QQ 輸入異常】&lt;/strong&gt;等問題。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;SIG 組 8 月進展&lt;/strong&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;strong&gt;8 月 SIG 組重點動態&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;deepin LoongArch SIG：舊世界固件支持介紹&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;來自安同開源社區的王邈實現了 Linux 內核和 GRUB 引導器的「舊世界」固件引導兼容性，支持在聯想開天 M540z 及國光 4C5LG 服務器等早期龍架構設備上引導與啓動 deepin 23 正式版，讓這些本「無緣」使用「新世界」的設備通過更新「新世界」系統享受到了更強大的軟件和硬件兼容性。此外，LoongArch SIG 還為 deepin 適配了 os-prober 相關修改，支持 deepin 23（「新世界」）和 UOS V20 （「舊世界」）系統的雙啓動，讓用户更自由地選用自己需要的系統環境。&lt;/p&gt; 
&lt;p&gt;如同 libLoL 和內核方面的工作，這一兼容性機制的引入和完善將進一步降低「新世界」生態的入門門檻，讓更多用户有信心、有能力、有動力切換到性能更高、兼容性更強和更開放可持續的「新世界」生態中。&lt;/p&gt; 
&lt;p&gt;SIG 詳情：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh%2Fdocs%2Fsig%2Fsig%2Fdeepin-LoongArch%2FREADME.md&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;https://www.deepin.org/index/zh/docs/sig/sig/deepin-LoongArch/README.md&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;其他小組動態&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1、deepin-ports SIG:&lt;/strong&gt;&amp;nbsp; 逐步支持各大 RISCV 設備硬件編解碼&lt;/p&gt; 
&lt;p&gt;SIG 詳情：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh%2Fdocs%2Fsig%2Fsig%2Fdeepin-ports%2FREADME.md&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;https://www.deepin.org/index/zh/docs/sig/sig/deepin-ports/README.md&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2、deepin-sysdev-team：&lt;/strong&gt;與各個 SIG 協同，持續維護與更新倉庫軟件包&lt;/p&gt; 
&lt;p&gt;SIG 詳情：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh%2Fdocs%2Fsig%2Fsig%2Fdeepin-sysdev-team%2FREADME.md&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;https://www.deepin.org/index/zh/docs/sig/sig/deepin-sysdev-team/README.md&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3、DDE SIG：&lt;/strong&gt;集成最終供發佈的 deepin 23 DDE 項目&lt;/p&gt; 
&lt;p&gt;SIG 詳情：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh%2Fdocs%2Fsig%2Fsig%2Fdde%2FREADME.md&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;https://www.deepin.org/index/zh/docs/sig/sig/dde/README.md&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4、dde-port SIG：&lt;/strong&gt;持續推進&amp;nbsp;dde&amp;nbsp;在各個發行版的移植&lt;/p&gt; 
&lt;p&gt;SIG 詳情：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh%2Fdocs%2Fsig%2Fsig%2Fdde-porting%2FREADME.md&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;https://www.deepin.org/index/zh/docs/sig/sig/dde-porting/README.md&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;5、deepin-kernel SIG：&lt;/strong&gt;完善現有硬件支持情況；為&amp;nbsp;deepin&amp;nbsp;內核提供更好的國產化硬件支持&lt;/p&gt; 
&lt;p&gt;SIG 詳情：&lt;em&gt;https://www.deepin.org/index/zh/docs/sig/sig/deepin-kernel/README.md&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;社區生態&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;8 月，deepin 應用商店共完成&lt;strong&gt; 693&lt;/strong&gt;&amp;nbsp;個應用上架，其中玲瓏包 &lt;strong&gt;239 &lt;/strong&gt;個，原生 deb 應用 &lt;strong&gt;454&lt;/strong&gt; 個；&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;新應用上架&lt;strong&gt; 599 &lt;/strong&gt;款，其中 163 款玲瓏應用上架社區 deepin 23 ；新上架多款包含 AI 功能的應用，包括 X-AI 、稿定 AI、小智搜搜等；&lt;/li&gt; 
 &lt;li&gt;更新應用 &lt;strong&gt;94&lt;/strong&gt; 個，其中包括嗶哩嗶哩 bilibili，印象筆記、Duolingo 多鄰國、UOS 應用遷移助手（ wine 運行器）、GIMP-圖像處理、Chrome-谷歌瀏覽器、雷鳥郵件客户端等。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;社區活動&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;1、deepin 23 發佈會&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;8 月 15 日 deepin 23 成功發佈！本次版本圍繞「聚 AI 而生，大有不同」為主題進行了國內外線上直播發布，這次更新帶來了全新 DDE 視界、AI For OS、「如意玲瓏」應用生態、「 deepin IDE 」等重要更新。同時配合此次版本也設計系列宣發內容與活動，全網整體曝光量 1520W+。&lt;/p&gt; 
&lt;p&gt;來自中國、意大利、美國、丹麥、菲律賓、法國和荷蘭的開源愛好者在社交媒體平台上分享了他們對 deepin 23 的積極評價：在性能、界面設計、新功能等方面得到較大的提升，但同時也存在一些需要改進的地方，如穩定性和兼容性問題。社區的積極響應和修復問題的態度也贏得了用户的肯定。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2、deepin 23 Release Party 暨 WHLUG 8 月活動&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;2024 年 8 月 24 日，deepin 23 Release Party 暨 WHLUG 8 月活動在龍芯中科（武漢）技術有限公司的支持下成功舉辦，本次活動邀請到了來自統信軟件、deepin（深度）社區、龍芯中科的各位專業的技術老師為到場的 30 餘位開源愛好者們做分享和交流。&lt;/p&gt; 
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2F2024-08-whlug%2F&quot; target=&quot;_blank&quot;&gt;deepin 23 Release Party 活動回顧&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fcategory%2Fnews%25ef%25bc%2588chinese%25ef%25bc%2589%2Fwhlug-news%2F&quot; target=&quot;_blank&quot;&gt;往期 WHLUG 活動回顧&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3、產品面對面&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;隨着 8 月 deepin 23 的正式發佈，產品面對面也將本次 deepin 23 發佈的亮點之一&lt;strong&gt;「全新的 DDE 桌面環境」&lt;/strong&gt;作為 8 月欄目的主題。本次，邀請到了 deepin 社區高級產品經理梅毅翔，通過論壇發文以及微信視頻號&amp;amp;B 站直播間雙平台直播的方式，為廣大 deepin 用户來帶 deepin 23 託盤及新增插件功能的分享。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;deepin 論壇&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;8 月 deepin 論壇共發佈了 &lt;strong&gt;14950&lt;/strong&gt; 帖子，共發佈主題帖 &lt;strong&gt;2224 &lt;/strong&gt;個，超過&lt;strong&gt; 1100+ &lt;/strong&gt;新朋友加入到 deepin 論壇。&lt;/p&gt; 
&lt;p&gt;當中，最受論壇用户歡迎的帖子 Top5 為：&lt;/p&gt; 
&lt;p&gt;1. &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F276603&quot; target=&quot;_blank&quot;&gt;2024 年 8 月 15 日 deepin 23 正式版發佈公告&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;2. &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F276491&quot; target=&quot;_blank&quot;&gt;聚 AI 而生，大有不同 —— deepin 23 正式發佈直播倒計時！&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;3.&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F276621&quot; target=&quot;_blank&quot;&gt; 寫在 deepin 23 發佈之前&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;4.&amp;nbsp; &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F276254&quot; target=&quot;_blank&quot;&gt;[詳細介紹]玲瓏是什麼?它從哪裏來，又要到哪裏去?&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;5. &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F277352&quot; target=&quot;_blank&quot;&gt;全網刷屏的《黑神話：悟空》，在 deepin 23 上玩是一種什麼樣的體驗&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;社區鳴謝&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;論壇最活躍小夥伴&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;阿尼櫻奈奈&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;neko&lt;/li&gt; 
 &lt;li&gt;晚秋（lateautumn）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;內測最活躍小夥伴&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;hotime&lt;/li&gt; 
 &lt;li&gt;鮮衣怒馬&lt;/li&gt; 
 &lt;li&gt;autty&lt;/li&gt; 
 &lt;li&gt;tagerw&lt;/li&gt; 
 &lt;li&gt;fslong&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;PR 貢獻最活躍小夥伴&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ice909&lt;/li&gt; 
 &lt;li&gt;leoliu-oc&lt;/li&gt; 
 &lt;li&gt;Cherrling&lt;/li&gt; 
 &lt;li&gt;wojiaohamliyang&lt;/li&gt; 
 &lt;li&gt;alongnice&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;相關閲讀：&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;（1）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdistrowatch.com%2Findex.php%3Fdistribution%3Ddeepin&quot; target=&quot;_blank&quot;&gt;deepin 全版本鏡像下載（含 deepin V15）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;（2）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fcategory%2Fnews%25ef%25bc%2588chinese%25ef%25bc%2589%2Fdeepin-monthly-report%2F&quot; target=&quot;_blank&quot;&gt;deepin（社區）月度彙報&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310114</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310114</guid>
            <pubDate>Tue, 03 Sep 2024 03:12:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>不多逼逼，C 語言，一週，寫一個 3D 建模器</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#a1a1aa; margin-left:.5rem; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;開發者 Daniel Hooper 在一週內使用 C 語言和 raylib 庫完成了一個 3D 建模器項目 ShapeUp，代碼行數：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;color: rgb(161, 161, 170); margin-left: 0.5rem; margin-right: 0px; text-align: start;&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;2024 行 C 代碼&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;color: rgb(161, 161, 170); margin-left: 0.5rem; margin-right: 0px; text-align: start;&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;250 行 GLSL 代碼&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;color: rgb(161, 161, 170); margin-left: 0.5rem; margin-right: 0px; text-align: start;&quot;&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;總數 2274 行&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1 style=&quot;margin-left:.5rem; margin-right:0; text-align:start&quot;&gt;&lt;img height=&quot;898&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0903/104721_Xrho_3820517.png&quot; width=&quot;1362&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Daniel Hooper 發佈了一篇關於他在一週內使用 C 語言創建 3D 模型器 ShapeUp 的文章。ShapeUp 使用了 signed distance fields (SDFs) 和 ray marching 技術來快速實現 3D 渲染，這使得在短時間內從頭開始創建 3D 項目成為可能。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Daniel 選擇 C 語言是因為它的編譯速度快，語法簡潔明瞭，且易於理解和記憶，同時可以輕鬆編譯成原生代碼和 WebAssembly。他的 「日常工作項目」 使用了大量的 C 和 Objective-C 代碼，而 ShapeUp 項目相比之下非常簡單，只有一個小的 C 文件。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在 ShapeUp 中，模型由 Shapes 結構體組成，這些結構體存儲在一個靜態分配的數組中，這樣可以避免內存分配失敗和內存泄漏的問題。儘管 raylib 庫在快速啓動項目方面表現良好，但它的設計選擇和缺乏文檔等問題給開發帶來了不便。Daniel 還提到了 raylib 的一些問題，如使用&amp;nbsp;&lt;code&gt;int&lt;/code&gt;&amp;nbsp;而非枚舉類型、缺乏參數驗證、依賴管理問題以及 raygui UI 庫的侷限性。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;ShapeUp 的開發分為四個主要部分：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;用户界面&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;GLSL 着色器生成器&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;光線追蹤渲染器&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;基於 GPU 的鼠標選擇&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;用於導出的 marching cubes 算法&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Daniel 強調了正確的優先級設定和避免分心的重要性，以及通過簡單有效的解決方案來應對複雜問題的方法。他的開發策略是確保在任何時刻都有一個可工作的 3D 模型器，並隨着時間的推移不斷改進它。最終，他在一週內完成了一個能夠創建有意義 3D 模型並導出為 .obj 文件的程序，該程序也能在多個平台上運行。&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;The project is 2024 lines of C and 250 lines GLSL. Kind of surprising that a somewhat useful 3D modeler can be expressed in ~2300 lines.&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;這個項目包含 2024 行 C 代碼和 250 行 GLSL 代碼。令人驚訝的是，一個相對實用的 3D 建模工具竟然可以在大約 2300 行中實現。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;最後還給作者他裝起來了：&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Other jam participants seemed impressed by ShapeUp but I don’t feel like I achieved much. It’s a relatively simple project. If there is anything special about what I did, it is that I had the taste to choose what to make, the knowledge to make it, and the discipline to do it in a week.&lt;/p&gt; 
 &lt;p&gt;其他參與者似乎對 ShapeUp 印象深刻，但我覺得自己並沒有取得太多成就。這是一個相對簡單的項目。如果説我做的有什麼特別之處，那就是我有品味去選擇製作什麼，有知識去實現它，還有在一週內完成它的自律。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;原文鏈接：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdanielchasehooper.com%2Fposts%2Fshapeup%2F&quot; target=&quot;_blank&quot;&gt;https://danielchasehooper.com/posts/shapeup&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310110/making-a-3d-modeler-in-in-a-week</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310110/making-a-3d-modeler-in-in-a-week</guid>
            <pubDate>Tue, 03 Sep 2024 02:57:51 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>WPS Office for Linux 12（個人版）正式上線：UI 視覺重構，新增多項 AI 功能</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;WPS Office for Linux 12 個人版現已在&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flinux.wps.cn%2F&quot; target=&quot;_blank&quot;&gt;WPS&amp;nbsp;Office 官網上線&lt;/a&gt;，迎來 UI 視覺重構升級，以及新增多項 AI 功能，具體版本號為&amp;nbsp;&lt;strong&gt;12.1.0.17881&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8ca8e9ca03f572cdbf8d385808afd877a1f.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;WPS Office for Linux 12 個人版更新日誌如下：&lt;/p&gt; 
&lt;h3&gt;WPS 公共：&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;UI 視覺重構升級&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;新建功能整體優化，支持新建智能文檔、智能表格、輕維表&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;首頁文件篩選項新增智能文檔、智能表格、輕維表、思維導圖、流程圖&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;新增增值服務選項卡，支持 PDF 轉換、輸出為圖片等增值功能&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;搜索能力升級，支持搜索本地和雲端文件，提供全文檢索增值服務&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;新增稻殼增值服務，支持使用海量模板和素材資源&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;優化本地文檔分享上雲和進入協作的流程&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;優化登錄流程，支持多賬號登錄和切換&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;解決打印預覽卡頓問題&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;解決自動創建系統默認下載目錄的問題&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;解決特定系統下設置頁面、登錄頁面亂碼問題&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;解決特定系統下 PDF 文件卡頓，無法打開的問題&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;注：本次提供的增值功能 / 增值服務均需登錄會員賬號後使用，&lt;strong&gt;無會員權益時不會展示對應功能入口&lt;/strong&gt;；Linux 個人版暫不支持會員購買，可在其他平台購買後，在 Linux 端上使用。&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;WPS 文字：&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;新增 AI 幫我寫、幫我改功能&lt;/strong&gt;，支持 AI 快速生成和潤色文檔&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;新增樣式集功能&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;解決輸出為 PDF 亂碼問題&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;優化圖片裁剪、替換邏輯&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;新增對象組內對齊功能&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;優化智能目錄的算法模型&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;WPS 演示：&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;新增 AI 生成 PPT 功能&lt;/strong&gt;，支持主題生成、大綱生成和文檔生成&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;新增母版支持自定義字體功能&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;優化新建幻燈片版式&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;優化不同顯卡下視頻播放效果&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;優化參考線的交互體驗，提升排版效率&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;放映工具欄支持摺疊和展開&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;新增切頁動畫-頁面捲曲&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;WPS 表格：&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;新增 AI 寫公式功能&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;新增 ARRAYTOTEXT 等若干函數&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;優化引擎，解決卡頓問題&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;新增動態數組&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;優化數據篩選、導出功能&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;優化取消隱藏的交互，提升取消效率&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;查找對話框支持排序&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;粘貼圖片時支持內嵌到單元格&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;詳情：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flinux.wps.cn%2Fwpslinuxlog&quot; target=&quot;_blank&quot;&gt;https://linux.wps.cn/wpslinuxlog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310109</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310109</guid>
            <pubDate>Tue, 03 Sep 2024 02:54:51 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>RISC-V 官方力贊！openKylin 創新成果獲國際關注</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg2MDc5MDU1OQ%3D%3D%26mid%3D2247499304%26idx%3D1%26sn%3D31264c6cf2e0716bcfaf5968a8e136f4%26chksm%3Dce23b458f9543d4e4ced1fd125958c017153d979fc26d24195bd839f4c7cd36b72dd7462048a%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;在近日於杭州舉行的 2024 RISC-V 中國峯會上，openKylin 社區憑藉卓越的表現和創新成果成為全場焦點。&lt;/u&gt;&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;此次盛會匯聚了 RISC-V 領域的精英翹楚，openKylin 展示的社區成果，贏得了與會者的高度關注，&lt;span style=&quot;color:#000000&quot;&gt;RISC-V 國際基金會及其 CEO Calista Redmond&lt;/span&gt;在社交平台為社區點贊互動。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;此次峯會期間，openKylin 不僅積極參與各項活動，還通過社交媒體平台分享了其在 RISC-V 技術上的最新進展與創新應用。這些動態迅速引起了廣泛關注，不僅&lt;strong&gt;被 RISC-V 國際基金會官方賬號轉發&lt;/strong&gt;，還&lt;strong&gt;得到了基金會 CEO Calista Redmond 的點贊&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;339&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-430a80c79cee5bb652db5513dbb2f4c2e59.png&quot; width=&quot;894&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin 在峯會期間的社交媒體動態收穫了數千次瀏覽量，得到了 RISC-V 官方和行業內外的廣泛點贊，並吸引了業界多位資深人士的積極互動。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;在國內桌面操作系統發行版中，openKylin 社區率先佈局基於 RISC-V 架構的新一代桌面應用場景，完成國內釘釘、搜狗輸入法和福昕等商用軟件原生移植；並積極開展&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;二進制翻譯&lt;/span&gt;&lt;span&gt;研究工作，向上遊提交合並 20 餘個 PR，所提交的相關 PR 得到 box64 項目作者 ptitSeb 點贊。此外，全球首款 RISC-V 筆記本電腦 DC-ROMA 也默認搭載 openKylin 操作系統發佈。未來，openKylin 將繼續秉持開源精神，推動技術創新，與全球合作伙伴共同推動 RISC-V 技術的發展，為開源社區注入更多活力與可能性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;&lt;img alt=&quot;&quot; height=&quot;702&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-22d28964d9cdda391f3b67344e70b22368e.jpg&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;519&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6fdf3fead033d64b6d863a4a17b82dc30f6.png&quot; width=&quot;778&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;strong&gt;歡迎下載體驗 openKylin RISC-V 版本&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin 2.0 緊跟 RISC-V 硬件平台發展步伐，完成如意 BOOK 筆記本、算能 Milk-V、進迭時空 K1、DW1000（RV64G）等多個新產品適配，目前支持市面大部分 RISC-V SoC 硬件平台，包括 ROMA 筆記本、阿里玄鐵、賽昉、LicheePi4A、HiFive Unmatched 等 10 餘款硬件產品。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;在軟件生態方面，搭載最新的 UKUI4.0 桌面環境，融入 openKylin 自研軟件，包括影音、音樂、天氣、管家、刻錄、看圖、視頻等；適配&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;Libreoffice&lt;/span&gt;&lt;span&gt;、FireFox、釘釘、搜狗、福昕 OFD 辦公套件等多款開源和商業軟件；提供 AI 基礎庫，支持 PyTorch、TensorFlow 等常用 AI 開發框架，滿足用户在辦公、上網、開發等多場景使用需求。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin 系統下載鏈接：&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#0052ff&quot;&gt;https://www.openkylin.top/downloads&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310094</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310094</guid>
            <pubDate>Tue, 03 Sep 2024 01:42:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>🔥 骨靈冷火！Solon Cloud Gateway 照面發佈</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;骨靈冷火，是練藥的好火喲。極冷，又極熱。在冰凍中被燒死：）&lt;/p&gt; 
&lt;h3&gt;1、認識 Solon Cloud Gateway&lt;/h3&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;Solon Cloud Gateway 是基於 Solon Cloud、Vert.X 和 Solon Rx(reactive-streams) 接口實現。小特點：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;純響應式的接口體驗&lt;/li&gt; 
 &lt;li&gt;流式代理轉發（又快，又省內存）&lt;/li&gt; 
 &lt;li&gt;可改寫所有請求數據，以及所有響應數據&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;打包大小為 6Mb 左右，「併發」 比同類友商高 200%。一個簡單的「對比」應用示例：&lt;/p&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;&lt;a href=&quot;https://gitee.com/opensolon/demo_solon_and_spring-gateway&quot;&gt;https://gitee.com/opensolon/demo_solon_and_spring-gateway&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;2、經典架構（也是老氣的架構）&lt;/h3&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/ea0cbe2611344fe0b36c89a855cafcee.png&quot; width=&quot;600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;3、Helloworld&lt;/h3&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;有沒有註冊與發佈服務，都可以用哦。不管是 php 或者 node.js 或得 java，只要是 http 服務都可互通。&lt;/p&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;假如我們有個 node.js 的「功能服務」，接口請求地址為：&lt;code&gt;http://localhost:8080/demo/hello?name=dami&lt;/code&gt;。如何配置代理網關呢？&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;1) 新建個空的 solon-lib 項目，添加 maven 依賴：&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;span style=&quot;color:#e45649&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style=&quot;color:#e45649&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.noear&lt;span&gt;&amp;lt;/&lt;span style=&quot;color:#e45649&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style=&quot;color:#e45649&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;solon-cloud-gateway&lt;span&gt;&amp;lt;/&lt;span style=&quot;color:#e45649&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;span style=&quot;color:#e45649&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;2) 添加分佈式網關的應用配置（app.yml）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span style=&quot;color:#986801&quot;&gt;server.port:&lt;/span&gt; &lt;span style=&quot;color:#986801&quot;&gt;9090&lt;/span&gt;

&lt;span style=&quot;color:#986801&quot;&gt;solon.cloud.gateway:&lt;/span&gt;
  &lt;span style=&quot;color:#986801&quot;&gt;routes:&lt;/span&gt;
    &lt;span style=&quot;color:#4078f2&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color:#986801&quot;&gt;id:&lt;/span&gt; &lt;span style=&quot;color:#50a14f&quot;&gt;demo&lt;/span&gt;
      &lt;span style=&quot;color:#986801&quot;&gt;target:&lt;/span&gt; &lt;span style=&quot;color:#50a14f&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt; &lt;em&gt;# 或 &quot;lb://user-service&quot;&lt;/em&gt;
      &lt;span style=&quot;color:#986801&quot;&gt;predicates:&lt;/span&gt;
        &lt;span style=&quot;color:#4078f2&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color:#50a14f&quot;&gt;&quot;Path=/demo/**&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;3) 啓動網關後，現在可以用網關地址了：&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;&lt;code&gt;http://localhost:9090/demo/hello?name=dami&lt;/code&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310019/solon-cloud-gateway</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310019/solon-cloud-gateway</guid>
            <pubDate>Mon, 02 Sep 2024 11:35:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
    </channel>
</rss>