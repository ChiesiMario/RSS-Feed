<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>開源中國-綜合資訊</title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="http://8.134.148.166:30044/oschina/news/industry" rel="self" type="application/rss+xml"></atom:link>
        <description>開源中國-綜合資訊 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Fri, 10 Jan 2025 07:36:25 GMT</lastBuildDate>
        <ttl>5</ttl>
        <item>
            <title>谷歌和 Linux 基金會啓動基金，支持基於 Chromium 的開源瀏覽器</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.chromium.org%2F2025%2F01%2Fannouncing-supporters-of-chromium-based.html&quot; target=&quot;_blank&quot;&gt;谷歌&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;和 &lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linuxfoundation.org%2Fpress%2Flinux-foundation-announces-the-launch-of-supporters-of-chromium-based-browsers&quot; target=&quot;_blank&quot;&gt;Linux 基金會&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;宣佈合作成立「&lt;/span&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linuxfoundation.org%2Fsupporters-of-chromium-based-browsers&quot; target=&quot;_blank&quot;&gt;Supporters of Chromium-based Browsers&lt;/a&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;」基金，旨在營造一個可持續發展的開源貢獻環境，促進 Chromium 生態系統的健康發展，併為希望為該項目做出貢獻的開發者社區提供資金支持。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Chromium 項目在 2008 年由谷歌推出，至今已被全球數百個不同的項目所使用。2024 年，谷歌方面向 Chromium 提交了超過&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fchrome-commit-tracker.arthursonzogni.com%2Forganizations%2Fcommits%3Frepositories%3Dchromium%26organizations%3Dall%26grouping%3Dyearly%26colors%3Dorganizations%26kind%3Dauthor%26metric%3Dcommit%26chart%3Dline%26dates%3D2000-01-01%2C2024-12-05&quot; target=&quot;_blank&quot;&gt;100,000 份代碼&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;，佔總貢獻的約 94%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;286&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-925359894615dfdffb220270df3cfd8e24b.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根據介紹，Supporters of Chromium-Based Browsers&amp;nbsp;將提供一箇中立的空間，讓開發人員和更廣泛的開源社區能夠合作支持&amp;nbsp;Chromium 生態系統內的項目。「通過促進協作，該集體的目標是消除創新障礙，擴大采用範圍，並確保 Chromium 生態系統內的項目獲得蓬勃發展所需的資源。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Supporters of Chromium-Based Browsers 遵循開放治理模式，將優先考慮透明度、包容性和社區驅動的發展。其計劃成立一個技術諮詢委員會 (TAC) 來指導發展，以確保可以滿足更廣泛的 Chromium 社區的需求。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;該基金將由&amp;nbsp;Linux 基金會管理，Chromium 項目本身將繼續遵循現有的治理結構。&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前，Meta、Microsoft 和 Opera 已經成為首批承諾&lt;/span&gt;&lt;span style=&quot;color:#080a12&quot;&gt;支持這一計劃的&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;成，&lt;/span&gt;&lt;span style=&quot;color:#080a12&quot;&gt;他們將共同為基於 Chromium 的瀏覽器相關的開源項目提供關鍵的資金和開發支持。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329145/supporters-of-chromium-based</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329145/supporters-of-chromium-based</guid>
            <pubDate>Fri, 10 Jan 2025 07:28:20 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>商湯推出「日日新」融合大模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;商湯宣佈正式推出「日日新」融合大模型，實現原生融合模態，深度推理能力與多模態信息處理能力均大幅提升。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根據國內大模型測評機構 SuperCLUE 最新發布的《中文大模型基準測評 2024 年度報告》：商湯「日日新」融合大模型以總分 68.3 的成績，與 DeepSeek V3 一起並列國內榜首。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;175&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1f7bd5607b103427d1ab4972576d097f675.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在 SuperCLUE 年度評測中，商湯「日日新」融合大模型文科成績以 81.8 分位列全球第一，超越 OpenAI 的 o1 模型；理科成績奪得金牌，其中計算維度以 78.2 分位列國內第一。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在近期另一個權威綜合評測機構 OpenCompass 的多模態評測中，商湯以同一款模型同樣取得了榜單第一，分數大幅領先 GPT-4o。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;238&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e8f77c04f7114441dbb48d61a865e57cc0f.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;公告指出，在實際應用場景中，相較於傳統大語言模型僅支持單一文本輸入的模式，&quot;日日新&quot;融合大模型展現出顯著優勢，尤其是在自動駕駛、視頻交互、辦公教育、金融、園區管理、工業製造等天然擁有豐富模態信息的場景中。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「日日新&quot;融合大模型能夠有效滿足用户對圖像、視頻、語音、文本等多源異構信息的綜合處理與識別需求。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329139</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329139</guid>
            <pubDate>Fri, 10 Jan 2025 07:06:20 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>16GB 內存版樹莓派 5 正式上市，售價 120 美元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;樹莓派基金會正式&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.raspberrypi.com%2Fnews%2F16gb-raspberry-pi-5-on-sale-now-at-120%2F&quot; target=&quot;_blank&quot;&gt;宣佈推出&lt;/a&gt; 16GB 內存版樹莓派 5，售價 120 美元（約 881 元人民幣），並同步推出「樹莓派碳移除信用額度」，用於抵消生產和處置樹莓派過程中產生的碳排放。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0110/140136_7Xv3_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;官方表示相比較樹莓派 4，樹莓派 5 的性能提升了 3 倍，為了滿足大型語言模型、計算流體力學等對內存需求較高的應用場景，以及支持運行 Ubuntu 等 Linux 發行版，推出了 16GB 內存版本，售價為 120 美元。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c833aa4179b41f18eda632bcfbb9b860538.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;樹莓派 5 開發板搭載博通 BCM2712 芯片，其優化的 D0 步進版本支持大於 8GB 的內存，官方聯合美光公司，封裝了 8 個 16Gbit LPDDR4X 芯片，從而首次提供 16GB 內存版本。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8f4a8a92d3cfe89ea7ec97c793db7d2b762.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;16GB 內存版樹莓派 5 開發板規格如下：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;SoC：Broadcom BCM2712 D0 處理器&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CPU：四核 Arm Cortex-A76 處理器 @ 2.4 GHz，帶加密擴展，每核 512KB L2 緩存，2MB 共享 L3 緩存&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;GPU：VideoCore VII GPU @ 800 MHz，支持 OpenGL ES 3.1、Vulkan 1.2、4Kp60 HEVC 解碼器&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;系統內存：16GB LPDDR4X-4267 SDRAM&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;存儲：支持高速 SDR104 模式的 MicroSD 卡插槽&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;視頻輸出 / 輸入&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;2 個 HDMI 端口，最高 4Kp60，支持 HDR&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2 個 4 通道 MIPI 攝像頭 / 顯示器收發器&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;連接&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;通過 Broadcom BCM54213PE 收發器的千兆以太網 RJ45 端口; 通過 Raspberry Pi PoE+ HAT 提供可選的 PoE+ 支持&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;雙頻 802.11ac Wi-Fi 5&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;藍牙 5.0 / 低功耗藍牙（BLE）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;USB：2 個 USB 3.0 端口，支持同步 5Gbps 操作，2 個 USB 2.0 端口&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;拓展包&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;40 針 Raspberry Pi GPIO 接頭&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;PCIe 2.0/3.0 x1 FFC 接口（需要單獨的 M.2 HAT 或其他適配器）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;其他：由外部電池、電源按鈕、UART 調試連接器供電的實時時鐘（RTC）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;電源：通過 USB-C 提供 5V / 5A 直流電源，支持 Power Delivery&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;尺寸：85 x 56 毫米&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;詳情：&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.raspberrypi.com%2Fproducts%2Fraspberry-pi-5%2F&quot; target=&quot;_blank&quot;&gt;https://www.raspberrypi.com/products/raspberry-pi-5/&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329128/16gb-raspberry-pi-5-on-sale-now-at-120</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329128/16gb-raspberry-pi-5-on-sale-now-at-120</guid>
            <pubDate>Tue, 07 Jan 2025 06:03:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>PostgreSQL 擴展竟有 350 個？怎麼選？</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;僅僅在過去一年，數據庫老司機馮若航&lt;span&gt;&lt;span&gt;&lt;span&gt;在 PG 生態裏打包維護了 150 個 PG 擴展插件，已經超過 PG 官方維護的一百多個擴展了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;&lt;span style=&quot;color:#3f3f3f&quot;&gt;如今，PG 生態開箱即用的總可用擴展數量達到驚人的 350&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color:#3f3f3f&quot;&gt;個。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;&lt;span&gt;那麼，PostgreSQL 擴展到底能做什麼？別説用户了，就連絕大多數數據庫廠商都沒有一個直觀的認知 —— 平均的認知程度大概是這樣的：&lt;/span&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;PostgreSQL 有一個 &lt;/span&gt;&lt;span&gt;PostGIS&lt;/span&gt;&lt;span&gt; 擴展做地理信息系統還不錯，還有一個 PGVECTOR 可以替代專用向量數據庫也不錯&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;。除此之外，沒了！&lt;/p&gt; 
&lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;其實呢，PostgreSQL 生態中還有許多強力的擴展插件。不論是時間序列還是地理空間，不論是向量數據庫 &lt;/span&gt;&lt;span&gt;RAG&lt;/span&gt;&lt;span&gt; 還是 AI 機器學習；不論是 OLAP 數據分析 / 數倉湖倉，還是二十多種存儲過程語言，還有全文檢索，圖，消息隊列，FDW ，甚至兼容 SQL Server / Oracle / MongoDB 等異構數據庫等擴展。有諸多強大的功能尚不為廣大開發者所熟悉。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;&lt;img height=&quot;500&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8f76bd44f432c8be78f278955e948e4f087.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;&lt;span style=&quot;color:#3f3f3f&quot;&gt;如何用好這些擴展，如何挑選所需的擴展，乃至於如何獲取並安裝這些擴展，都是需要解決的問題。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;&lt;span style=&quot;color:#3f3f3f&quot;&gt;1 月 15 日晚，開源中國邀請到 Pigsty 創始人馮若航做客《開源項目老牌與新秀》欄目直播間，聊一聊 PG 擴展是如何吞噬數據庫世界的，順便給大夥 show 一下馮若航新搞的好東西 —— &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODAyNTM5Ng%3D%3D%26mid%3D2247488830%26idx%3D1%26sn%3D5657d698692bbea315c552e0bd2c3ca5%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;PostgreSQL 包管理器 pig&lt;/a&gt;&amp;nbsp; —— 如果你對使用 PG 擴展感興趣，相信這個工具一定可以幫到你。&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;直播主題：&lt;/strong&gt;PostgreSQL 擴展吞噬數據庫世界？聊聊 PG 包管理器 pig 以及本地 PG RDS 發行版 Pigsty 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;直播時間：&lt;/strong&gt;1 月 15 日週三 19:00-20:00 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;直播平台：&lt;/strong&gt;視頻號 「OSC 開源社區」 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;直播嘉賓：&lt;/strong&gt;馮若航，Pigsty 創始人，Pig 作者，公眾號《非法加馮》主理人。專欄：數據庫老司機，雲計算泥石流。 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;直播亮點：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;PG 如何用擴展吞噬數據庫世界&lt;/li&gt; 
 &lt;li&gt;數據庫老司機帶逛 PG 擴展大觀園&lt;/li&gt; 
 &lt;li&gt;上手實戰，玩轉 PG 包管理器工具 pig&lt;/li&gt; 
 &lt;li&gt;高級玩法，開箱即用的 PG 發行版&lt;/li&gt; 
 &lt;li&gt;展望未來，打造新一代擴展分發標準&lt;/li&gt; 
 &lt;li&gt;Q &amp;amp; A ，直播答疑&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;掃碼預約直播&lt;/strong&gt;&lt;br&gt; &lt;br&gt; &lt;img height=&quot;263&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-28b057539b0d3aa1d737decb908b1ddff70.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;另外，我們還建了一個交流羣，一起聊聊自己喜歡的開源項目～～當然啦，如果你有什麼特別棒的開源項目，可以推薦過來呀～&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-0e7c43c0b0553350855a379af00c6c7c15d.jpg&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;「&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;開源項目老牌與新秀&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;是開源中國 OSCHINA 推出的一檔直播欄目，旨在為開源項目提供一個展示平台，每週五晚上開播&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;欄目邀請開源項目的作者、核心團隊成員或資深用户作為嘉賓，通過路演式直播分享項目的亮點和經驗，有助於提高項目的知名度，吸引更多的用户和開發者關注。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果你手上也有好的開源項目，想要跟同行交流分享，歡迎聯繫我，欄目隨時開放～&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img height=&quot;537&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-aeeec97bc896bc61c715698bd6acc1f83b3.jpg&quot; width=&quot;400&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;&amp;nbsp;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/3859945/blog/17139142</link>
            <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/17139142</guid>
            <pubDate>Tue, 07 Jan 2025 03:45:00 GMT</pubDate>
            <author>原創</author>
        </item>
        <item>
            <title>如何開發一個支持海量分佈式鎖的應用庫</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;blockquote&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;分佈式鎖是一種用於控制分佈式系統中資源訪問的同步機制，確保在任意時刻只有一個客户端能夠獲取到鎖，並對共享資源進行操作。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;作用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span&gt;1.&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;保證數據一致性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：在多個節點併發執行的情況下，分佈式鎖可以防止同時修改同一份數據，從而避免數據不一致的問題。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;2.&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;協調任務執行&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：確保特定的任務不會被重複執行，特別是在需要冪等性（idempotent）保證的時候。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;應用場景例如&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;庫存扣減&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：在電商系統中，當用户下單時需要扣減庫存，為了避免超賣現象，必須確保每次扣減操作都是原子性的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;定時任務調度&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：在分佈式環境中，確保同一個定時任務只在一個節點上運行，防止重複執行。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;緩存更新&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：當多個服務實例試圖更新同一個緩存項時，使用分佈式鎖可以確保更新過程的線程安全。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;秒殺活動&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：對於高併發的搶購活動，如秒殺，使用分佈式鎖來控制對有限商品資源的訪問是至關重要的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;文件上傳&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：在分佈式文件系統中，確保同一文件不會被多次上傳或覆蓋。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;常見實現方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基於數據庫：可以使用數據庫的唯一索引來實現簡單的分佈式鎖，也可以通過 for update 等機制來實現分佈式鎖。例如，在嘗試獲取鎖時插入一條記錄，如果插入成功則表示獲取到鎖；如果違反了唯一索引約束，則説明鎖已經被其他客户端持有。這種方法簡單直接，但性能可能不如其他專門設計的解決方案，並且需要處理死鎖和鎖的自動釋放等問題。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基於 Redis：Redis 是一個內存中的鍵值存儲系統，它提供了原子性的 SETNX（Set if Not Exists）命令來設置一個鍵，只有當該鍵不存在時才會成功。結合 EXPIRE 或 PEXPIRE 命令，可以為鎖設置一個過期時間，防止死鎖的發生。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基於 Zookeeper：Zookeeper 支持臨時順序節點，這使得它可以實現複雜的分佈式鎖邏輯，如公平鎖、重入鎖以及讀寫鎖。客户端創建一個臨時順序節點作為鎖對象，然後檢查自己創建的節點是否是最小編號的節點，以此判斷是否獲得鎖。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基於 Etcd：Etcd 是一個高可用的分佈式鍵值存儲系統，它也能夠提供分佈式鎖功能。與 Zookeeper 類似，etcd 使用臨時鍵和租約機制來實現鎖。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基於 Consul：同樣可以用來實現分佈式鎖。Consul 利用 KV 存儲和會話機制，可以方便地構建出分佈式鎖的應用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本文將利用 raftx，用簡單的方法，編寫一個分佈式鎖的應用庫，它的特點是：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;使用方式簡單並且可用性強&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;支持海量創建分佈式鎖，可以同時創建幾十萬甚至上百萬個分佈式鎖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;佔用極少量的系統資源&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;無自旋阻塞策略，不佔用 CPU 資源&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;搶佔式獲取鎖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;支持 TTL(time to live), 防止集羣節點宕機造成死鎖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;raftx 的分佈式易失性數據擴展模塊實現分佈式鎖，有比常見分佈式鎖的實現較為明顯的特點&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;1.&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;高效，它基於內存。獲取與釋放分佈式鎖過程更快&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;2.&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;可以創建海量分佈式鎖。如果系統需要創建海量分佈式鎖，比如售票系統，電商秒殺活動等， &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;對於 Zookeeper，Etcd，redis 等，在創建海量分佈式鎖時，可能面臨大量日誌與大量觸發機制，導致系統負載過大的問題。而&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;raftx&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;則&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;不會有這個問題。可以通過以下的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;的實現過程，詳細瞭解。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;什麼是&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Fraftx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Raftx&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Fraftx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;raftx&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#080808&quot;&gt; 是一種對經典 Raft 協議的擴展，結合了 Multi-Paxos、ZAB（Zookeeper Atomic Broadcast）和 Raft 協議的優勢。RaftX 具備快速選舉、併發提案、數據同步、數據回滾以及易失性數據同步等特性，適用於高併發和大規模分佈式系統場景。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fwiki%2Fraftx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;raftx wiki&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Flockx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 分佈式鎖應用庫，支持創建海量分佈式鎖&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#080808&quot;&gt;Lockx 是依賴 raftx 實現的一個分佈式鎖應用庫，實現方式簡單，代碼量少，100 行左右代碼，但是它的功能卻十分強大，主要表現在：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#080808&quot;&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#080808&quot;&gt;高效性與及時性&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;資源佔用極少&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;支持海量創建分佈式鎖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;API 使用簡單方便&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx 支持一次性創建成千上萬，甚至數十萬或數百萬個分佈式鎖，它的實現機制保證了它不會大量佔用 CPU 資源和內存資源；它的鎖動作變更觸發機制針對的是鎖資源，而非分佈式對象鎖本身，也就是説，即使節點中有 100 萬個鎖競爭一個鎖資源，每次也只會觸發一次鎖的釋放與競爭的指令；比如鎖資源&quot;lockmux&quot;,那麼在分佈式系統中，當資源 「lockmux」被釋放時，它將觸發節點中的 「lockmux」綁定事件一次，並讓等待的資源隨機發送一條競爭鎖的指令競爭該資源鎖，而不是觸發 100 萬個等待中的鎖對象競爭事件。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Flockx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 實現方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;lockx 主要依賴 raftx 的易失性數據 API 實現，它的特點是高效，強一致性，並且可以綁定鍵值的增刪改的觸發事件；利用這些特性，可以輕鬆實現分佈式鎖的邏輯。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;MemWatch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lockstr&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;key&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; value &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; watchType raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;WatchType&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//獲取鎖成功與否&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; watchType &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;==&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ADD &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; mb&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ok &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;mp&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Get&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;util&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;BytesToInt64&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;value&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ok &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;del&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;key&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; util&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;BytesToInt64&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;value&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;close&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;mb&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ctx&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//鎖釋放，阻塞代碼再次重新獲取分佈式鎖&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; watchType &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;==&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;DELETE &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;mux&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Lock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;defer&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;mux&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Unlock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ids&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; b &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;rmap&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;key&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; b &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; k &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;range&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ids &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;MemCommand&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;key&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; util&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Int64ToBytes&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;k&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; timeout&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;MEM_PUT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;break&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//TryLock 獲取鎖失敗觸發&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; watchType &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;==&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;UPDATE &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; mb&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ok &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;mp&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Get&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;util&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;BytesToInt64&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;value&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ok &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; mb&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;isTry &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;del&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;key&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; util&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;BytesToInt64&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;value&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mb&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ctx &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;close&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;mb&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ctx&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;false&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ADD&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;DELETE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;UPDATE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;這是 lockx 實現的核心代碼，主要通過監聽 raftx 易失性數據主鍵的增刪改事件來實現資源鎖的鎖定與釋放&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;raft.ADD 這是資源鎖新增的觸發事件，通過它判斷哪個對象獲取到分佈式鎖，同時關閉相應阻塞的通道，讓獲取鎖的程序繼續執行。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;raft.DELETE 這是資源鎖刪除的觸發事件，同時它將再次發送獲取資源鎖的指令，搶佔資源鎖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;raft.UPDATE 這是資源鎖更新的觸發事件，它表示資源鎖獲取失敗，用於 TryLock，同時關閉相應阻塞的通道並返回 false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Flockx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 使用方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx 的使用非常簡單，並且它可以支持大量創建分佈式鎖，它一共有 3 個方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;strong&gt;&lt;span&gt;Lock(string,int)&lt;/span&gt;&lt;/strong&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 獲取指定資源的分佈式鎖並設置過期時間，阻塞&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;strong&gt;&lt;span&gt;TryLock(string,int)bool&lt;/span&gt;&lt;/strong&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 獲取指定資源的分佈式鎖並設置過期時間，若獲取不到返回 false，不阻塞&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;strong&gt;&lt;span&gt;UnLock(string)&lt;/span&gt;&lt;/strong&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 釋放指定資源的分佈式鎖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;以下模擬 3 個集羣節點&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//節點 1，創建分佈式鎖管理器 mutex1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex1 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NewMutex&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;:20001&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20001&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20002&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20003&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//節點 2，創建分佈式鎖管理器 mutex2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex2 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NewMutex&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;:20002&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20001&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20002&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20003&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//節點 3，創建分佈式鎖管理器 mutex3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex3 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NewMutex&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;:20003&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20001&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20002&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20003&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;第一個參數 raftx 服務地址&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;第二個參數是所有集羣節點都相同的，為所有節點的訪問地址 []string{&quot;127.0.0.1:20001&quot;, &quot;127.0.0.1:20002&quot;, &quot;127.0.0.1:20003&quot;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;這樣就完成了分佈式鎖管理器的創建，並可以直接獲取各個自定義資源的分佈式鎖，這裏的資源指的是字符串，比如 「test」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;示例&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//節點 1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex1 lock%d lock.....&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Lock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;test&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex1 lock%d get lock successful&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
time&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Sleep&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; time&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Second&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Unlock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;test&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex1 lock%d unlock&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//節點 2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex2 lock%d lock.....&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Lock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;test&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex2 lock%d get lock successful&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//節點 3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex3 lock%d lock.....&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Lock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;test&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex3 lock%d get lock successful&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
time&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Sleep&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; time&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Second&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Unlock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;test&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex3 lock%d unlock&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;測試調用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Test_lock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;t &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;testing&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;T&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;go&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;go&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;go&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;select&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;執行結果：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;可以看到：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;2024/12/31 22:34:35&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 三個節點的同時搶佔分佈式鎖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;節點 mutex2 獲取到了鎖，由於 mutex2 沒有主動釋放鎖，mutex2.Lock(&quot;test&quot;, 10) 這裏表示 10 秒後 ，集羣自動釋放鎖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;2024/12/31 22:34:45&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; mutex2 持有的分佈式鎖被服務自動釋放，同時 mutex1 節點獲取到分佈式鎖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;2024/12/31 22:34:47&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; mutex1 在 2 秒後顯式調用 UnLock 釋放鎖，同時 mutex3 節點獲取到分佈式鎖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;2024/12/31 22:34:49&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; mutex3 在 2 秒後顯式調用 UnLock 釋放鎖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Flockx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 可以海量創建分佈式鎖，如：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Test_multi_lock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;t &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;testing&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;T&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;15&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;++&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//mutex1 節點創建 32768 個併發任務&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;go&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;15&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;++&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//mutex2 節點創建 32768 個併發任務&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;go&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;15&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;++&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//mutex3 節點創建 32768 個併發任務&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;go&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;select&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;每個節點同時併發創建 32768 個分佈式鎖對象&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;執行結果：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;div&gt;
 &amp;nbsp;
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;可以看到，每 2 秒有一個對象獲取到分佈式鎖，按順序依次執行獲取分佈式鎖與解鎖。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（注意：mutex2 增加了 2 秒後釋放鎖，否則 mutex2 節點獲取鎖後，將等待 10 秒後有 raftx 集羣釋放鎖）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Flockx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx 的源碼地址&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;可以直接將其當成第三方分佈式鎖庫在工程中使用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;程序中調用示例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;github.com/donnie4w/lockx&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//創建分佈式鎖管理器 mutex1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; mutex1 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; lockx&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NewMutex&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;:20001&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20001&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20002&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20003&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;結論&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;Lockx&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 利用了 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;raftx&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 的高效特性和易失性數據存儲能力，提供了一種簡潔而強大的分佈式鎖解決方案。它不僅適合常規的分佈式鎖需求，還能夠在高併發環境下保持性能優勢，確保系統的穩定性和可靠性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果你考慮在項目中引入這樣的分佈式鎖庫，可以參考上述信息進行評估和集成。此外，也可以根據自己的具體需求調整 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;Lockx&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 的實現，例如實現更復雜的鎖行為（如公平鎖等）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329113</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329113</guid>
            <pubDate>Tue, 07 Jan 2025 03:44:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>必應偽裝成 Google 搜索，谷歌高管公開炮轟微軟：太 Low 了！</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;近日，微軟的必應搜索引擎被指控在用户搜索「Google」時，其結果頁面模仿谷歌的首頁設計，這一行為引發了廣泛爭議。&lt;/p&gt; 
&lt;p&gt;當用户在 Edge 或 Chrome 瀏覽器中使用必應搜索「Google」時，頁面會呈現出類似谷歌的界面，讓人誤以為自己正在使用谷歌搜索。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0110/112354_O5QI_2720166.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;這一做法甚至引起了谷歌高管的關注，谷歌 Chrome 副總裁 Parisa Tabriz 罕見地&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Flaparisa%2Fstatus%2F1876343944700887223&quot; target=&quot;_blank&quot;&gt;公開指責微軟&lt;/a&gt;&lt;/u&gt;，稱其欺騙用户，非常 Low。他表示：「模仿是最真誠的恭維，但微軟模仿谷歌主頁是其長期欺騙用户和限制選擇的歷史中的又一策略。新的一年、微軟新低（New year；new low）」並在最後直接@了微軟。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img height=&quot;706&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0110/112549_kb6O_2720166.png&quot; width=&quot;1270&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;分析人士指出，儘管 Bing 在搜索「Google」時的頁面設計確實與谷歌主頁高度相似，且 Bing 的品牌標識在頁面加載時被部分遮擋，但目前尚無證據表明這是微軟故意欺騙用户的行為。&lt;/p&gt; 
&lt;p&gt;此外，谷歌自身在搜索引擎和瀏覽器市場的主導地位也曾被批評為通過不公平手段限制用户選擇，因此谷歌在指責微軟時也需避免被指責為「雙標」。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329104/ms-bing-search-results-google-design-trick</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329104/ms-bing-search-results-google-design-trick</guid>
            <pubDate>Tue, 07 Jan 2025 03:26:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>胡潤研究院發佈《2024 胡潤中國人工智能企業 50 強》</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;1 月 9 日，胡潤研究院&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.hurun.net%2Fzh-CN%2FInfo%2FDetail%3Fnum%3DAFXL5ISUYV63&quot; target=&quot;_blank&quot;&gt;發佈&lt;/a&gt;《2024 胡潤中國人工智能企業 50 強》，按照企業價值進行排名。&lt;/p&gt; 
&lt;p&gt;上市公司市值按照 2024 年 12 月 18 日的收盤價計算，非上市公司估值參考同行業上市公司或者根據最新一輪融資情況進行估算。這是胡潤研究院首次發佈該榜單。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-b3008f46ae6de5fe8f6fd0fa5e3c564461a.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;該榜單聚焦於專注於 AI 算力或算法的中國企業。需要注意的是，本榜單隻包括非具身智能企業，而不包括具身智能企業，例如機器人（如優必選）、智能汽車（如小鵬汽車）、智能飛行器（如大疆）和智能家居（如科沃斯）。&lt;/p&gt; 
&lt;p&gt;此外，那些在 AI 領域表現突出但 AI 非其核心業務的企業（如字節跳動、阿里巴巴、騰訊、百度等）也未被納入本榜單評選範圍。&lt;/p&gt; 
&lt;p&gt;成立於 2016 年，總部北京的 AI 芯片企業&lt;strong&gt;寒武紀以 2380 億的價值位居榜首&lt;/strong&gt;，智能語音企業科大訊飛以 1160 億的價值排名第二，機器視覺和大模型企業商湯科技以 500 億的價值排名第三。&lt;/p&gt; 
&lt;p&gt;榜單顯示，&lt;strong&gt;北京和上海的上榜企業佔據了六成，一線城市的企業超過八成&lt;/strong&gt;。其中，北京以 20 家上榜企業領先，其中包括寒武紀、月之暗面和第四範式等；上海有 9 家上榜企業，以商湯科技、巖山科技和滴滴自動駕駛為代表；深圳上榜 8 家，雲天勵飛、奧比中光和晶泰科技等；廣州有 4 家上榜企業，以小馬智行、文遠知行和雲從科技為代表。&lt;/p&gt; 
&lt;p&gt;按照分類來看，視覺識別類企業有 13 家，自動駕駛類企業有 11 家，內容生成類企業有 8 家，數據分析決策類企業有 7 家，語音識別類企業有 6 家，算力硬件類企業有 5 家。&lt;/p&gt; 
&lt;p&gt;據瞭解，上榜企業平均成立於 2012 年。&lt;strong&gt;最年輕的上榜企業是月之暗面、百川智能和零一萬物&lt;/strong&gt;，它們均成立於 2023 年，均為北京的大模型企業。&lt;/p&gt; 
&lt;p&gt;來源：&lt;u&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FT3U9RsjBSLrNEepLAfEfEw&quot; target=&quot;_blank&quot;&gt;《2024 胡潤中國人工智能企業 50 強》重磅發佈&lt;/a&gt;&lt;/em&gt;&lt;/u&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329091</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329091</guid>
            <pubDate>Tue, 07 Jan 2025 02:52:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>抖音集團李亮：抖音推薦算法和行業相比並無特殊之處、平台沒動力製造「繭房」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;抖音集團副總裁李亮近日接受了鳳凰網科技的獨家訪談。&lt;/p&gt; 
&lt;p&gt;據李亮分享，&lt;strong&gt;抖音、頭條推薦算法的原理和行業相比並無特殊之處&lt;/strong&gt;，不同的是每個平台為算法定製的目標，即更看重什麼。抖音更為看重的指標是用户的長期留存。&lt;/p&gt; 
&lt;p&gt;其認為，信息繭房一詞在推薦算法誕生前就已出現，從商業邏輯上來講，平台沒有動力去製造所謂的「繭房」，也最有動力打破「信息繭房」。&lt;/p&gt; 
&lt;p&gt;摘錄部分採訪內容如下：&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#e67e22&quot;&gt;&lt;strong&gt;《浪潮》：外界總説抖音的算法神秘，實際上是否如此？抖音採用的也是協同過濾這類經典推薦算法嗎？還是已經歷經了幾番迭代，升級的重點是什麼？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;李亮：&lt;strong&gt;推薦系統是非常多算法和策略的集合，協同過濾是其中重要的一種，現在業界主流的推薦系統依然會採用協同過濾的技術思路，但在實現的細節上，例如如何利用協同數據做好向量表徵的學習，如何把這種向量表徵用在內容推薦上，學界和業界一直在迭代。&lt;/strong&gt;除了上述技術思路，我們也會應用其他有效的算法，例如過去我們做過對視頻內容本身進行理解而進行的推薦，現在學界業界也有很多基於大模型的推薦的嘗試。&lt;/p&gt; 
 &lt;p&gt;總體上説，&lt;strong&gt;抖音推薦算法的原理和行業相比並無特殊之處，不同的是每個平台為算法定製的目標，即更看重什麼&lt;/strong&gt;。&lt;/p&gt; 
 &lt;p&gt;抖音真正的北極星指標是用户的長期留存，所謂北極星指標，就是指引大方向的指標。留存是一種「人數」上的概念，也就是我們希望有更多人使用抖音，更多人認可抖音。&lt;/p&gt; 
 &lt;p&gt;長短期不僅僅是時間上的不同，在結果上也會有不一樣的導向，比如長期留存會更關注興趣探索、長期使用，而短期留存會更關注點贊、完播時長等目標。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span style=&quot;color:#e67e22&quot;&gt;&lt;strong&gt;《浪潮》：有人説信息繭房是因為人性本惰，不願意思考，所以主動接受了算法投餵的信息，這才是思維固化的真相，你怎麼看待這個觀點？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;李亮：「信息繭房」 這個詞在推薦算法成熟之前就出現了，算法不是 「信息繭房」 形成的先決因素。&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;現在普遍對 「信息繭房」 的擔心，其實是所謂的信息偏食，即信息來源單一。事實上，每個渠道分發信息都有侷限性，比如公眾號關注列表來源於我們自己的喜好，過去門户網站是根據編輯的價值判斷，朋友圈的信息則是被我們的好友關係過濾。只看公眾號，門户或者朋友圈，都會陷入所謂的 「繭房」。但實際上，大部分人都是看朋友圈，也看抖音，也看新聞客户端，信息來源是很綜合的&lt;/strong&gt;。&lt;/p&gt; 
 &lt;p&gt;另外從商業邏輯上來講，平台沒有動力去製造所謂的 「繭房」，也最有動力打破 「信息繭房」，業界和學界的研究都表明了多元化內容有益於用户的長期留存。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;來源：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F6YVp_1Q4EqoyHiIB9rH2wg&quot; target=&quot;_blank&quot;&gt;https://mp.weixin.qq.com/s/6YVp_1Q4EqoyHiIB9rH2wg&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329089</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329089</guid>
            <pubDate>Tue, 07 Jan 2025 02:35:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>WePhone 創始人自殺事件迎來新進展</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;WePhone 創始人蘇享茂自殺事件將迎來新進展，蘇享茂的哥哥蘇享龍發微博稱，接到法院通知，翟欣欣涉嫌敲詐勒索一案，定於 2025 年 1 月 21 日上午 9 點 30 分在北京市海淀區人民法院山後人民法庭開庭審理。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0110/102853_ak98_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;另據紅星新聞 1 月 7 日報道，從相關知情人士處瞭解到，蘇享茂的家屬已提起刑事附帶民事訴訟，並已接到案件將於 1 月 21 日開庭的通知。&lt;/p&gt; 
&lt;p&gt;該媒體 2024 年 3 月曾報道，記者在 2024 年 3 月 25 日從一可靠信源處獲悉，翟欣欣被抓後認罪認罰，本案涉嫌敲詐的金額巨大，翟欣欣或將獲刑 10 年以上。2023 年 5 月 12 日，蘇享茂的哥哥蘇享龍稱，被告翟欣欣撤銷了對其中一起相關民事案件判決的上訴申請，原告家屬於 5 月 12 日確認收到翟欣欣的 660 萬元還款。&lt;/p&gt; 
&lt;p&gt;2017 年 9 月 7 號凌晨 3 點 46 分，蘇享茂在自己研發的產品 WePhone 推送了一條 「公司法人被毒妻翟某害死，WePhone 即將停止運營」 的消息後，凌晨 4 點多，從西二旗的家中跳樓自殺。&lt;/p&gt; 
&lt;p&gt;自殺前一天，他在自己的社交賬號上寫道：「我是 WePhone 的開發者，今天我就要走了，App 以後無法運營了，抱歉。我從來沒想過我是這樣的結局，我竟然被我極其歹毒的前妻翟某欣給逼死了。」&lt;/p&gt; 
&lt;p&gt;2023 年 6 月 9 日，蘇享茂的哥哥蘇享龍發文稱，翟欣欣已被逮捕，羈押在看守所。根據蘇享龍在微博發佈的立案告知書，翟欣欣涉嫌敲詐勒索，刑事立案時間為 2023 年 5 月 20 日。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329087</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329087</guid>
            <pubDate>Tue, 07 Jan 2025 02:29:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>Chat2DB 實現：Spring AI MCP 直連數據庫</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;h2&gt;引言&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/giegie/blog/17113995&quot; title=&quot;在上一篇文章中，我們初步探討了 Spring AI MCP（Model Context Protocol）的基礎概念，並通過操作本地文件的示例，展示瞭如何使用 MCP 讓 AI 模型理解和處理文件內容&quot;&gt;在上一篇文章中，我們初步探討了 Spring AI MCP（Model Context Protocol）的基礎概念，並通過操作本地文件的示例，展示瞭如何使用 MCP 讓 AI 模型理解和處理文件內容&lt;/a&gt;。本文將進一步深入，探討 MCP 的進階應用 ------ 通過 Chat2DB 實現與數據庫的自然語言交互。&lt;/p&gt; 
&lt;p&gt;相比於文件操作，數據庫交互往往涉及更復雜的結構和更嚴格的安全要求。通過 Chat2DB 和 MCP 的結合，我們將展示如何安全、高效地實現 AI 驅動的數據庫查詢功能。讓我們一起看看如何將自然語言查詢能力擴展到數據庫領域。&lt;/p&gt; 
&lt;h2&gt;什麼是 Chat2DB？&lt;/h2&gt; 
&lt;p&gt;Chat2DB 是一個創新的數據庫交互方式，它允許我們使用自然語言來查詢和操作數據庫。通過結合大語言模型（LLM）的能力，Chat2DB 使得與數據庫的交互變得更加直觀和高效。用户可以用日常語言提問，系統會自動將這些問題轉換為相應的數據庫查詢語句。&lt;/p&gt; 
&lt;h2&gt;MCP (Model Context Protocol) 簡介&lt;/h2&gt; 
&lt;p&gt;MCP（Model Context Protocol）是一個專門設計的協議，用於為大語言模型提供數據庫訪問能力。它的主要特點包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;提供只讀數據庫訪問接口&lt;/li&gt; 
 &lt;li&gt;允許 LLM 檢查數據庫架構&lt;/li&gt; 
 &lt;li&gt;支持執行只讀查詢&lt;/li&gt; 
 &lt;li&gt;確保數據安全性&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在 PostgreSQL 場景中，MCP 服務器充當了數據庫和 LLM 之間的橋樑，使得 AI 模型能夠安全地理解和查詢數據庫結構。&lt;/p&gt; 
&lt;h2&gt;Spring AI 集成實現&lt;/h2&gt; 
&lt;h3&gt;依賴配置&lt;/h3&gt; 
&lt;p&gt;首先，需要在項目中添加必要的依賴：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-ai-openai-spring-boot-starter&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.experimental&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-ai-mcp&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.4.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;模型信息配置&lt;/h3&gt; 
&lt;p&gt;筆者這裏使用 deepseek v3 模型，只需要在 application.properties 中添加以下配置：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;spring.ai.openai.chat.options.model=deepseek-chat
spring.ai.openai.base-url=https://api.deepseek.com
spring.ai.openai.api-key=sk-XXX
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;核心配置實現&lt;/h3&gt; 
&lt;p&gt;以下是實現 MCP 客户端和聊天功能的核心代碼：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Bean
public CommandLineRunner predefinedQuestions(ChatClient.Builder chatClientBuilder,
        List&amp;lt;McpFunctionCallback&amp;gt; functionCallbacks, ConfigurableApplicationContext context) {
    return args -&amp;gt; {
        var chatClient = chatClientBuilder
                .defaultFunctions(functionCallbacks.toArray(new McpFunctionCallback[0]))
                .build();
        String question1 = &quot;你能鏈接我的 postgres 數據庫，然後告訴我這個數據庫有多少張表嗎？&quot;;
        System.out.println(&quot;ASSISTANT: &quot; + chatClient.prompt(question1).call().content());

        String question2 = &quot;你能鏈接我的 postgres 數據庫，然後告訴我這個商品表裏面哪個車最貴嗎？&quot;;
        System.out.println(&quot;ASSISTANT: &quot; + chatClient.prompt(question2).call().content());
        context.close();
    };
}

@Bean
public List&amp;lt;McpFunctionCallback&amp;gt; functionCallbacks(McpSyncClient mcpClient) {
    return mcpClient.listTools(null)
            .tools()
            .stream()
            .map(tool -&amp;gt; new McpFunctionCallback(mcpClient, tool))
            .toList();
}

@Bean(destroyMethod = &quot;close&quot;)
public McpSyncClient mcpClient() {
    var stdioParams = ServerParameters.builder(&quot;npx&quot;)
            .args(&quot;-y&quot;, &quot;@modelcontextprotocol/server-postgres&quot;,
                  &quot;postgresql://postgres:lengleng@localhost:5432&quot;)
            .build();

    var mcpClient = McpClient.using(new StdioClientTransport(stdioParams))
            .requestTimeout(Duration.ofSeconds(10)).sync();

    var init = mcpClient.initialize();
    System.out.println(&quot;MCP Initialized: &quot; + init);
    return mcpClient;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;業務表如下&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://minio.pigx.vip/oss/202501/1736307613.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;測試執行&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//6660330605b9323c1ec0cc46f9fe3469.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;工作原理&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;MCP 服務器初始化&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;通過 &lt;code&gt;McpSyncClient&lt;/code&gt; 建立與數據庫的連接&lt;/li&gt; 
   &lt;li&gt;配置連接參數和超時設置&lt;/li&gt; 
   &lt;li&gt;初始化 MCP 協議&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;功能回調註冊&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;獲取可用的數據庫工具&lt;/li&gt; 
   &lt;li&gt;將工具轉換為功能回調&lt;/li&gt; 
   &lt;li&gt;註冊到聊天客户端&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;自然語言交互&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;用户提供自然語言問題&lt;/li&gt; 
   &lt;li&gt;Spring AI 處理並轉換為數據庫查詢&lt;/li&gt; 
   &lt;li&gt;通過 MCP 執行查詢並返回結果&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;使用場景&lt;/h2&gt; 
&lt;p&gt;Chat2DB 結合 Spring AI MCP 特別適用於以下場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;數據分析師快速查詢數據&lt;/li&gt; 
 &lt;li&gt;開發人員數據庫探索&lt;/li&gt; 
 &lt;li&gt;非技術人員數據庫訪問&lt;/li&gt; 
 &lt;li&gt;數據庫結構審查&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;安全考慮&lt;/h2&gt; 
&lt;p&gt;在使用 Chat2DB 和 MCP 時，需要注意以下安全事項：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MCP 默認只提供只讀訪問&lt;/li&gt; 
 &lt;li&gt;建議使用專門的只讀數據庫賬户&lt;/li&gt; 
 &lt;li&gt;定期審查訪問日誌&lt;/li&gt; 
 &lt;li&gt;設置適當的超時限制&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;執行流程分析&lt;/h2&gt; 
&lt;p&gt;以下是 Spring AI MCP 與數據庫交互的詳細執行流程：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//9f866e1ac969ecaef1532e06f4c392e7.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;執行步驟詳解&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;初始化階段&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Spring 應用啓動&lt;/li&gt; 
   &lt;li&gt;MCP Client 初始化，使用協議版本 2024-11-05&lt;/li&gt; 
   &lt;li&gt;服務器信息：example-servers/postgres v0.1.0&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;工具註冊階段&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;註冊 query 工具，用於執行只讀 SQL 查詢&lt;/li&gt; 
   &lt;li&gt;設置查詢超時時間為 10 秒&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;數據庫交互階段&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;執行數據庫連接檢查&lt;/li&gt; 
   &lt;li&gt;獲取數據庫表結構信息&lt;/li&gt; 
   &lt;li&gt;執行用户查詢並返回結果&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;響應處理階段&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;將數據庫查詢結果轉換為結構化 JSON&lt;/li&gt; 
   &lt;li&gt;AI 模型處理結果並生成自然語言回答&lt;/li&gt; 
   &lt;li&gt;返回格式化的響應給用户&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;示例查詢執行&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;-- 查詢表數量
SELECT COUNT(*) as count FROM information_schema.tables 
WHERE table_schema = &#39;public&#39;;

-- 查詢表結構
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name = &#39;products&#39;;

-- 查詢商品數據
SELECT id, name, price 
FROM products 
ORDER BY price DESC;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;這個執行流程展示了 Spring AI MCP 如何無縫地將自然語言查詢轉換為數據庫操作，並將結果轉換回用户友好的格式。整個過程是自動化的，用户無需瞭解底層的 SQL 查詢細節。&lt;/p&gt; 
&lt;h2&gt;總結&lt;/h2&gt; 
&lt;p&gt;Chat2DB 配合 Spring AI MCP 為數據庫交互提供了一個革新性的解決方案。通過自然語言處理和安全的協議設計，它既保證了易用性，又確保了數據安全。這種方案特別適合需要頻繁數據庫查詢但希望降低技術門檻的場景。&lt;/p&gt; 
&lt;p&gt;如果您對 Java AI 感興趣，歡迎訂閲我的頻道。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/giegie/blog/17138364</link>
            <guid isPermaLink="false">https://my.oschina.net/giegie/blog/17138364</guid>
            <pubDate>Tue, 07 Jan 2025 02:24:00 GMT</pubDate>
            <author>原創</author>
        </item>
        <item>
            <title>鴻蒙原生版微信正式上架鴻蒙應用市場</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;鴻蒙原生版微信已正式上架鴻蒙應用市場。微信更新説明中顯示，已支持包括基礎通訊、社交、微信支付、公眾號、小程序、視頻號、直播等主要功能。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;聊天和消息：支持單聊和羣聊發送文本、圖片、視頻、語音、表情等類型消息；&lt;/li&gt; 
 &lt;li&gt;音視頻通話：支持語音和視頻通話；&lt;/li&gt; 
 &lt;li&gt;朋友圈： 可與朋友分享不同類型的內容，且支持設置地理位置、選擇可見範圍等功能；&lt;/li&gt; 
 &lt;li&gt;青少年模式：可開啓青少年模式，設置可訪問的內容&lt;/li&gt; 
 &lt;li&gt;微信支付：支持收發紅包、轉賬、錢包管理等功能，可在小程序、網頁中便捷使用支付服務；&lt;/li&gt; 
 &lt;li&gt;更多功能：可使用公眾號、小程序、視頻號、直播、聽一聽等功能獲取內容和服務。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;不過，更新提示中也提示當前版本有部分功能受到限制或不可用。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;583&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-dcc37d3f4a3967b2e2abf2a4b98708cf589.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;據瞭解，微信鴻蒙版還可以直接調用系統原相機，在拍攝照片和視頻時可以變焦，拍照/錄製視頻時效果更佳。&lt;/p&gt; 
&lt;p&gt;目前，微信、支付寶、抖音、京東、淘寶、美團、WPS Office 等 TOP 應用均已上架，原生鴻蒙生態版圖的最後一塊 TOP 應用終於完成。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329080</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329080</guid>
            <pubDate>Tue, 07 Jan 2025 02:11:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>xAI 推出獨立 Grok 應用，上架蘋果商店</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;埃隆·馬斯克（Elon Musk）旗下人工智能公司 xAI 正在為其聊天機器人 Grok 測試獨立的 iOS 應用程序。目前該應用程序已在美國、澳大利亞和印度等多個國家的應用商店上線。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;243&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9030cd870b7e6bc5f524e8a6424c9ed6be2.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;獨立 App 的 Grok 可以訪問來自網絡和 X 的實時數據，並提供生成式 AI 功能，例如重寫文本、總結長段落、少量問答，還可以從文本提示生成圖像。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;應用介紹指出：「Grok 是一款人工智能助手，旨在最大限度地真實、實用和好奇。它可以回答任何問題，生成引人注目的圖像，並上傳圖片以更深入地瞭解你的世界。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;xAI 還在準備一個專門的網站 Grok.com，以便讓聊天機器人可以在網絡上使用。目前，該網站顯示「即將推出」。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329079</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329079</guid>
            <pubDate>Tue, 07 Jan 2025 02:05:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>Fluent Editor v3.25.0 正式發佈</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;你好，我是 Kagol，個人公眾號：&lt;code&gt;前端開源星球&lt;/code&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.github.io%2Ffluent-editor%2F&quot; target=&quot;_blank&quot;&gt;Fluent Editor&lt;/a&gt; 是一個基於 Quill 2.0 的富文本編輯器，在 Quill 基礎上擴展了豐富的模塊和格式，框架無關、功能強大、開箱即用。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;源碼：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ffluent-editor%2F&quot; target=&quot;_blank&quot;&gt;https://github.com/opentiny/fluent-editor/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;官網：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.github.io%2Ffluent-editor%2F&quot; target=&quot;_blank&quot;&gt;https://opentiny.github.io/fluent-editor/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;今天是 2025 年 1 月 2 日，也是 2025 年的第一個工作日，我們很高興地宣佈 Fluent Editor v3.25.0 正式發佈！&lt;/p&gt; 
&lt;p&gt;我們一起來看下都有哪些更新吧！&lt;/p&gt; 
&lt;h2&gt;新特性 🎉&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;增加標題列表導航 by&amp;nbsp;@zzxming&amp;nbsp;in&amp;nbsp;#146&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;增加分隔線格式 &amp;nbsp;@jany55555&amp;nbsp;in&amp;nbsp;#167&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持多圖片、多文件上傳 by&amp;nbsp;@qwangry&amp;nbsp;in&amp;nbsp;#168&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持上傳文件到服務器 by&amp;nbsp;&lt;a href=&quot;https://my.oschina.net/u/4863191&quot;&gt;@kagol&lt;/a&gt;&amp;nbsp;in&amp;nbsp;#163&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;優化重構 🎈&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;將 quill-header-list 和 quill-toolbar-tip 依賴抽離出去，減少包體積，用户可按需自行安裝和使用 by&amp;nbsp;@zzxming&amp;nbsp;in&amp;nbsp;#178&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;將 i18n 國際化功能抽離成單獨的模塊，便於維護 by&amp;nbsp;@zzxming&amp;nbsp;in&amp;nbsp;#176&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;網站增加 PeterCatAI 小貓咪助手，可以輔助答疑，提升使用體驗&amp;nbsp;@kagol&amp;nbsp;in&amp;nbsp;#181&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;詳細 Release Notes 請參考：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ffluent-editor%2Freleases%2Ftag%2Fv3.25.0&quot; target=&quot;_blank&quot;&gt;https://github.com/opentiny/fluent-editor/releases/tag/v3.25.0&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;貢獻者團隊&lt;/h2&gt; 
&lt;p&gt;目前 Fluent Editor 項目一共由 6 名核心貢獻者 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkagol&quot; target=&quot;_blank&quot;&gt;Kagol&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fzzxming&quot; target=&quot;_blank&quot;&gt;zzxming&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJanson1012&quot; target=&quot;_blank&quot;&gt;Janson1012&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkeray&quot; target=&quot;_blank&quot;&gt;keray&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjany55555&quot; target=&quot;_blank&quot;&gt;jany55555&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fqwangry&quot; target=&quot;_blank&quot;&gt;qwangry&lt;/a&gt; 共同維護（還有 2 只兢兢業業檢視代碼和答疑的小兔子🐰 Coderabbit AI 和小貓咪🐱 PeterCatAI，希望你們不要嫌它們煩😂）。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkagol&quot; target=&quot;_blank&quot;&gt;Kagol&lt;/a&gt;：Fluent Editor 發起人，基於 Quill 2.0 搭建了 Fluent Editor 基本框架，實現了表格、圖片、@提醒、文件、字符統計、代碼塊高亮、表情等基礎功能，增加 TypeScript 類型聲明，引入 Playwright 自動化測試。&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fzzxming&quot; target=&quot;_blank&quot;&gt;zzxming&lt;/a&gt;：Fluent Editor 核心貢獻者，從 8 月到 11 月持續參與貢獻，實現格式刷、截屏、國際化、工具欄 tooltip 提示、標題列表導航、mention 支持超鏈接等多個新特性，優化構建產物、減少包體積，並修復代碼 ESLint 問題。zzxming 對 Quill 很熟悉，曾創建 quill-table-up、quill-toolbar-tip 等多個 Quill 模塊。&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJanson1012&quot; target=&quot;_blank&quot;&gt;Janson1012&lt;/a&gt;：Fluent Editor 核心貢獻者，實現深色模式，補充文件上傳的 E2E 測試，並重構了表格單元格背景色邏輯。&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkeray&quot; target=&quot;_blank&quot;&gt;keray&lt;/a&gt;：引入 mathlive，為 Fluent Editor 帶來 LaTex 可編輯公式功能，有效地提升了 Fluent Editor 公式編輯的體驗。&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjany55555&quot; target=&quot;_blank&quot;&gt;jany55555&lt;/a&gt;：優化插入表格的交互，增加表格選擇器，之前通過工具欄按鈕只能插入 3x3 的表格，現在可以插入最多 10x10 的表格。除此之外，jany 還優化了表格右鍵菜單的體驗，菜單項太多時會出現滾動條，以及增加分隔線這個新的格式。&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fqwangry&quot; target=&quot;_blank&quot;&gt;qwangry&lt;/a&gt;：為 Fluent Editor 提供多圖片、多文件支持。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;貢獻者招募👏&lt;/h2&gt; 
&lt;p&gt;少數人的力量畢竟是有限的，我們希望更多小夥伴能參與進來，一起共建！&lt;/p&gt; 
&lt;p&gt;&amp;gt; 現在正式面向社區招募熱愛開源的小夥伴一起建設 Fluent Editor！&lt;/p&gt; 
&lt;p&gt;如果你是一名前端開發者，不管是經驗豐富的開發者、還是職場萌新、或者是在校學生；&lt;/p&gt; 
&lt;p&gt;不管你是 Vue，還是 React、Angular 技術棧，不管你使用 JavaScript，還是 TypeScript；&lt;/p&gt; 
&lt;p&gt;&amp;gt; 只要你有意願參與 Fluent Editor 的共建，我們都非常歡迎你的加入！👏&lt;/p&gt; 
&lt;p&gt;通過參與 Fluent Editor 項目，你將收穫：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;學習和實踐新技術&lt;/strong&gt;：由於 Fluent Editor 是一個純 &lt;code&gt;TypeScript&lt;/code&gt; 項目，你將學習如何編寫 TypeScript 類型聲明；學習如何使用 &lt;code&gt;pnpm&lt;/code&gt; + &lt;code&gt;monorepo&lt;/code&gt; 的方式管理代碼；如何使用 &lt;code&gt;Playwright&lt;/code&gt; 做 E2E 自動化測試。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;獲得社區導師的指導&lt;/strong&gt;：如果你參與進來，我們的前輩導師也會給予你充分的指導，認真檢視你的代碼，將來你也將有機會成為社區的導師，指導新來的開發者完成任務。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;獲得定製周邊禮品&lt;/strong&gt;：Fluent Editor 是 OpenTiny 組織下的倉庫，你將有機會參與 OpenTiny 年度貢獻者評選，贏取精美的 OpenTiny 定製禮物，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7320066005437956134&quot; target=&quot;_blank&quot;&gt;2023 年貢獻者榜單&lt;/a&gt;。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;與 OpenTiny 成員面對面交流&lt;/strong&gt;：也將有機會參加 OpenTiny 的各類線上線下活動，比如：參加 HDC 大會，並遊覽溪村；參加線下茶話會，與 OpenTiny 團隊成員面對面交流，共進午餐等&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;感興趣的小夥伴可以添加 OpenTiny 小助手的微信：opentiny-official（備註：共建），拉你進 Fluent Editor 核心開發羣。&lt;/p&gt; 
&lt;h2&gt;往期推薦文章&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7403618336952418314&quot; target=&quot;_blank&quot;&gt;👍Fluent Editor：一個基於 Quill 2.0 的富文本編輯器，功能強大、開箱即用！&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7430505409176289320&quot; target=&quot;_blank&quot;&gt;🎈Fluent Editor 富文本開源 2 個月的總結：增加格式刷、截屏、TypeScript 類型聲明等新特性&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7436030236784214068&quot; target=&quot;_blank&quot;&gt;🥳重磅更新！Fluent Editor 開源富文本支持 LaTeX 可編輯公式啦~&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7406347285901426728&quot; target=&quot;_blank&quot;&gt;🎉喜報！Fluent Editor 開源富文本迎來了第一位貢獻者&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7442330442606051338&quot; target=&quot;_blank&quot;&gt;👏讓我們一起來建設 Fluent Editor 開源富文本編輯器吧！&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;聯繫我們&lt;/h2&gt; 
&lt;p&gt;GitHub：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ffluent-editor&quot; target=&quot;_blank&quot;&gt;https://github.com/opentiny/fluent-editor&lt;/a&gt;（歡迎 Star ⭐）&lt;/p&gt; 
&lt;p&gt;官網：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.github.io%2Ffluent-editor&quot; target=&quot;_blank&quot;&gt;https://opentiny.github.io/fluent-editor&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;個人博客：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkagol.github.io%2Fblogs&quot; target=&quot;_blank&quot;&gt;https://kagol.github.io/blogs&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;小助手微信：opentiny-official&lt;/p&gt; 
&lt;p&gt;公眾號：OpenTiny&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/4863191/blog/17130478</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4863191/blog/17130478</guid>
            <pubDate>Tue, 07 Jan 2025 02:00:00 GMT</pubDate>
            <author>原創</author>
        </item>
        <item>
            <title>天天 AI-250110：今日熱點-字節豆包 Web 端反超百度文心一言，DeepSeek 也發力了</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;strong&gt;2AGI.NET：天天 AI-20250109&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;人工智能（AI）和硬件技術繼續以驚人的速度發展，不斷刷新我們對技術邊界的認知。從英偉達的 RTX 50 系列顯卡到清華團隊的數學推理突破，再到 AI 算力的多個利好，這些技術的發展正在推動我們進入一個全新的智能時代。本文將為您梳理近期的技術熱點，帶您一探究竟。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;strong&gt;英偉達發佈 RTX50 系顯卡和個人 AI 超算機&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;極客公園報道了英偉達發佈的 RTX 50 系列顯卡和個人 AI 超算機，這些產品展示了英偉達在硬件和 AI 領域的強大實力。同時，騰訊和寧德時代被列入美國防部黑名單，引發了廣泛關注。小米也公佈了 SU7 試駕事故的初步調查結果，顯示了企業在應對危機方面的積極態度。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FXcB4bnSeLkF8rDLcAQGBgg&quot; target=&quot;_blank&quot;&gt;來源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;突發！騰訊、寧德時代等被列入美國防部黑名單，曠視科技被放出！最新回應來了&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;AI 前線報道了騰訊和寧德時代被列入美國防部黑名單的消息，這一事件引發了對中美科技競爭的關注。曠視科技被移出黑名單，顯示了國際科技市場的複雜性和不確定性。各企業的回應也反映了他們在應對國際形勢變化中的策略和態度。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FRjAWRCwDl_026jnqrcieVw&quot; target=&quot;_blank&quot;&gt;來源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;僅用 8 張顯卡和一萬塊錢，清華團隊用 7B 模型打敗 GPT-4o 數學推理&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;AI 前線報道了清華大學團隊的最新研究成果，他們僅用 8 張顯卡和一萬塊錢就讓 7B 模型在數學推理能力上打敗了 GPT-4o。這一成就展示了強化學習在提升 AI 模型性能方面的潛力，為 AI 技術的創新和應用提供了新的思路。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FtmfDy1tLJp_uiSI3WDjPBQ&quot; target=&quot;_blank&quot;&gt;來源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;DeepSeek 的秘方是硅谷味兒的&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;硅星人 Pro 探討了 DeepSeek 的秘方，指出其具有濃厚的硅谷風格。DeepSeek 的成功不僅在於其技術創新，還在於其獨特的商業模式和企業文化，這為其他科技企業提供了借鑑和啓示。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FJmISYWRbCP6v0IvfJ-zd-w&quot; target=&quot;_blank&quot;&gt;來源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;黃仁勳的 CES 秀：強大 RTX 50，世界模型 Cosmos 和個人超算 Digits，英偉達還在指引未來&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;硅星人 Pro 報道了黃仁勳在 CES 上的演講，展示了英偉達的 RTX 50 顯卡、世界模型 Cosmos 和個人超算 Digits 等產品。這些產品的發佈不僅展示了英偉達的技術實力，也為未來硬件和 AI 技術的發展指明瞭方向。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FNmJlsr2hvFK1CgHJem7-1A&quot; target=&quot;_blank&quot;&gt;來源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;1/10 訓練數據超越 GPT-4o！清華等提出隱式過程獎勵模型 PRIME，在線刷 SOTA&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;硅星人 Pro 報道了清華大學等機構提出的隱式過程獎勵模型 PRIME，該模型僅用 1/10 的訓練數據就超越了 GPT-4o 的性能。這一突破展示了 AI 模型優化的巨大潛力，為 AI 技術的進一步發展提供了新的思路。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F3ktkwKxdlYsdgXqX9urgsA&quot; target=&quot;_blank&quot;&gt;來源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;AI 算力，迎來多個利好！&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;行業精選報道了 AI 算力領域迎來的多個利好消息，包括技術進步、市場需求增長和政策支持等。這些利好因素推動了 AI 算力市場的快速發展，為 AI 技術的應用和創新提供了堅實的基礎。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FDyPjpXViZJuBwX_YI0k8mw&quot; target=&quot;_blank&quot;&gt;來源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;字節豆包 Web 端反超百度文心一言，DeepSeek 也發力了｜量子位智庫月報&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;量子位智庫的月報指出，字節豆包在 Web 端的表現已經反超百度文心一言，顯示出其在 AI 領域的強勁競爭力。同時，DeepSeek 也在積極發力，進一步加劇了市場競爭。這一動態不僅反映了 AI 技術在搜索引擎領域的應用潛力，也預示着未來 AI 技術在信息檢索和處理方面的更大突破。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FTXiEQ2KpN1o9PXF-z1gJvg&quot; target=&quot;_blank&quot;&gt;來源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;「要點臉吧！」大模型巨頭「吸血」網站資源無底線，被惹怒的開發者來「復仇」了！&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;AI 前線報道了大模型巨頭在獲取網站資源時的爭議行為，引發了開發者的不滿和反擊。這一事件引發了對 AI 數據獲取倫理和隱私保護的廣泛討論，同時也提醒企業在 AI 技術應用中需更加註重數據的合法合規使用。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FibjX4c162ytuNAjxNp30tQ&quot; target=&quot;_blank&quot;&gt;來源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;北航&amp;amp;ZGCLAB 提出首個檢索增強生成基準測試工具庫 XRAG&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;AI 前線介紹了北航和 ZGCLAB 合作提出的首個檢索增強生成基準測試工具庫 XRAG。這一工具庫為 AI 生成模型的性能評估提供了新的標準和方法，有助於推動 AI 生成技術的進一步發展和應用。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FxaaagrodDsXEUUv5u49jWw&quot; target=&quot;_blank&quot;&gt;來源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;1/10 訓練數據超越 GPT-4o！清華等提出隱式過程獎勵模型 PRIME，在線刷 SOTA&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;硅星人 Pro 報道了清華大學等機構提出的隱式過程獎勵模型 PRIME，該模型僅用 1/10 的訓練數據就超越了 GPT-4o 的性能。這一突破展示了 AI 模型優化的巨大潛力，為 AI 技術的進一步發展提供了新的思路。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F3ktkwKxdlYsdgXqX9urgsA&quot; target=&quot;_blank&quot;&gt;來源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;AI Agent，下個機器人行業？&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;行業精選探討了 AI Agent 的潛力，認為其可能成為下一個機器人行業。AI Agent 在提高工作效率、優化決策和增強用户體驗方面具有巨大潛力，預示着 AI 技術在多個領域的廣泛應用。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FhSmT8mk3OowAm_Em3UHlmw&quot; target=&quot;_blank&quot;&gt;來源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;🔥 熱門文章推薦（2AGI.NET）&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fgoogle-ai-agent-whitepaper-detailed%2F&quot; target=&quot;_blank&quot;&gt;Google AI 智能體白皮書，超詳細解讀（內附下載）&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 9 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250109&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 9 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250108%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250108&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 8 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250107%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250107&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 7 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250106%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250106&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 6 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fexploring-musk-aurora-model-grok-2-technology-analysis-applications%2F&quot; target=&quot;_blank&quot;&gt;探索馬斯克的 Aurora 模型與 Grok-2 工具：技術解析與應用前景&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 5 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250103%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250103&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 3 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250102%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250102&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 2 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdeep-dive-deepseek-model-performance-advantages-limitations%2F&quot; target=&quot;_blank&quot;&gt;DeepSeek 3.0 大模型深度解析&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 1 日&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329072</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329072</guid>
            <pubDate>Tue, 07 Jan 2025 00:43:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>開源日報 | 微軟計劃裁員；WePhone 創始人自殺事件將迎來新進展；糾正大模型幻覺的工具框架；AI 輔助編程的真相；中國芯片的 2025</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;歡迎閲讀 OSCHINA 編輯部出品的開源日報，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2025.1.9&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要聞&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#245bdb&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/328947/remembering-and-thanking-steve-langasek&quot;&gt;Ubuntu 核心貢獻者 Steve Langasek 去世&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Ubuntu Linux 社區的靈魂人物 ——Steve Langasek，於 2025 年 1 月 1 日因病去世，享年 45 歲。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;378&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0109/111546_JP86_2720166.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Langasek 的開源之路始於 1996 年。當時他接觸了 Slackware，之後加入了 Red Hat，最終在 2000 年找到了自己的歸屬 ——Debian。2001 年，他正式成了 Debian 的開發者，之後的二十多年裏，他參與了多個重要版本的發佈，包括 Debian Sarge 和 Etch。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;2007 年，他加入 Canonical 公司，成為 Ubuntu 的發佈經理。從 Ubuntu 7.10（Gutsy Gibbon）開始，直至他去世，都發揮了不可替代的領導作用。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;除了在 Ubuntu 的貢獻，Langasek 還在 Linux-PAM、Samba 和 OpenLDAP 等關鍵項目中做出了巨大貢獻，這些貢獻至今仍影響着開源社區。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;即便在與病魔的長期抗爭中，Langasek 依然活躍在社區，幽默地面對着困境，他對開源的熱愛和付出從未改變。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;因此，他的離世，不僅讓 Ubuntu 和 Debian 失去了一位重量級人物，更讓整個開源世界失去了一盞指引方向的燈塔。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Ubuntu 創始人 Mark Shuttleworth 在一篇文章中，還將 Langasek 描述為&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;「Ubuntu 所有偉大之處的縮影 「&lt;/strong&gt;。他的專注、智慧和對開源理念的堅定信仰，使得無數開發者在他的指導下不斷成長。&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.pingwest.com%2Fw%2F301610&quot; target=&quot;_blank&quot;&gt;微軟計劃裁員，績效審查更加嚴厲&lt;/a&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;p&gt;據 Business Insider 報道，微軟正在計劃近期裁員。作為裁員計劃的一部分，微軟將對績效表現不佳的員工進行更嚴厲的審查。&lt;/p&gt; 
  &lt;p&gt;微軟發言人表示，微軟注重高效率人才，公司致力於幫助員工學習和成長。但當員工表現不佳時，公司會採取適當的措施。同時報道中指出，當員工因績效原因離職後，微軟會快速填補這些職位，因此公司整體員工數量可能變化不大。&lt;/p&gt; 
  &lt;p&gt;同時有不願透露身份的員工表示，微軟在過去的幾個月中一直在評估員工能力，並且多個部門都在進行裁員，包括最重要的安全部門。&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/328958&quot;&gt;通義靈碼 AI 程序員全面上線：同時支持 VS Code、JetBrains IDEs&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;此次升級後的通義靈碼 AI 程序員作為全球首個同時支持 VS Code、JetBrains IDEs 開發工具的 AI 程序員，可通過對話協作的方式輔助開發者完成複雜的編碼任務&lt;/strong&gt;。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;在能力升級方面，此次通義靈碼 AI 程序員首次引入多文件代碼修改能力。開發者可通過 AI 程序員自動完成多文件級編碼任務，如需求實現、問題修復、批量生成單元測試等。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;在開發者和 AI 程序員的協作過程中，雙方將以多輪對話的方式逐步完成編碼任務，並且會產生多個快照版本，開發者可任意切換、回退&lt;/strong&gt;。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;521&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0109/120923_RPYC_2720166.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/328933&quot;&gt;哪吒汽車回應官網異常事件：因服務器配置升級過程中出現技術故障&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;1 月 8 日，哪吒汽車法務部發文，回應近期其官網訪問異常事件，並表示對造謠抹黑的自媒體取證並採取法律手段。&lt;/p&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0109/103244_zCGj_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;文中，哪吒汽車正面回應了官方異常事件。其解釋，此次官網異常系因服務器配置升級過程中出現技術故障，導致網站暫時無法正常運行，並且經修復，哪吒官方於 1 月 6 日下午即已全面恢復正常訪問。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ithome.com%2F0%2F823%2F323.htm&quot; target=&quot;_blank&quot;&gt;翟欣欣涉嫌敲詐勒索案 1 月 21 日開庭審理，WePhone 創始人蘇享茂自殺事件將迎新進展&lt;/a&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;p&gt;1 月 8 日消息，WePhone 創始人蘇享茂自殺事件將迎來新進展，蘇享茂的哥哥蘇享龍發微博稱，接到法院通知，翟欣欣涉嫌敲詐勒索一案，定於 2025 年 1 月 21 日上午 9 點 30 分在北京市海淀區人民法院山後人民法庭開庭審理。&lt;/p&gt; 
  &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-020184116e8e0a7d77c8109864c52eb9fa3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p&gt;另據紅星新聞 1 月 7 日報道，從相關知情人士處瞭解到，蘇享茂的家屬已提起刑事附帶民事訴訟，並已接到案件將於 1 月 21 日開庭的通知。&lt;/p&gt; 
  &lt;p&gt;該媒體 2024 年 3 月曾報道，記者在 2024 年 3 月 25 日從一可靠信源處獲悉，翟欣欣被抓後認罪認罰，本案涉嫌敲詐的金額巨大，翟欣欣或將獲刑 10 年以上。2023 年 5 月 12 日，蘇享茂的哥哥蘇享龍稱，被告翟欣欣撤銷了對其中一起相關民事案件判決的上訴申請，原告家屬於 5 月 12 日確認收到翟欣欣的 660 萬元還款。&lt;/p&gt; 
  &lt;p&gt;2017 年 9 月 7 號凌晨 3 點 46 分，蘇享茂在自己研發的產品 WePhone 推送了一條「公司法人被毒妻翟某害死，WePhone 即將停止運營」的消息後，凌晨 4 點多，從西二旗的家中跳樓自殺。&lt;/p&gt; 
  &lt;p&gt;自殺前一天，他在自己的社交賬號上寫道：「我是 WePhone 的開發者，今天我就要走了，App 以後無法運營了，抱歉。我從來沒想過我是這樣的結局，我竟然被我極其歹毒的前妻翟某欣給逼死了。」&lt;/p&gt; 
  &lt;p&gt;2023 年 6 月 9 日，蘇享茂的哥哥蘇享龍發文稱，翟欣欣已被逮捕，羈押在看守所。根據蘇享龍在微博發佈的立案告知書，翟欣欣涉嫌敲詐勒索，刑事立案時間為 2023 年 5 月 20 日。&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日觀察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交觀察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2169039837%2FP8FxwbVjt&quot; target=&quot;_blank&quot;&gt;糾正大模型幻覺的工具框架：WikiChat&lt;/a&gt;&lt;/h4&gt; 
  &lt;p&gt;看到個可以糾正大模型幻覺的工具框架 WikiChat，簡單來講這是個 RAG 框架，針對用户提問它會檢索本地 Wiki（沒錯把 wikipedia 塞到了向量數據庫中）。然後 AI 生成後還會再次檢測生成後的內容是否正確。&lt;/p&gt; 
  &lt;p&gt;實際體驗，我問他 intel 12 代消費級 CPU 主頻最高的是什麼型號？AI 成功給出了 12900KS，並且給到了引用的 wiki 數據。&lt;/p&gt; 
  &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-2b7b2552b891c0d67c146400f82a16d3d13.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-94d574c017589fb89191bc6c2f1ef9f6e61.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p&gt;地址：github.com/stanford-oval/WikiChat&lt;br&gt; 在線使用：wikichat.genie.stanford.edu&lt;/p&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    （沒錯這個是個斯坦福大學的項目）
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微信&lt;strong&gt;&amp;nbsp;karminski-牙醫&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F6YVp_1Q4EqoyHiIB9rH2wg&quot; target=&quot;_blank&quot;&gt;獨家對話抖音集團李亮：平台沒動力製造「繭房」&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;《浪潮》：有人説信息繭房是因為人性本惰，不願意思考，所以主動接受了算法投餵的信息，這才是思維固化的真相，你怎麼看待這個觀點？&lt;/p&gt; 
    &lt;p&gt;李亮：「信息繭房」這個詞在推薦算法成熟之前就出現了，算法不是「信息繭房」形成的先決因素。&lt;/p&gt; 
    &lt;p&gt;現在普遍對「信息繭房」的擔心，其實是所謂的信息偏食，即信息來源單一。事實上，每個渠道分發信息都有侷限性，比如公眾號關注列表來源於我們自己的喜好，過去門户網站是根據編輯的價值判斷，朋友圈的信息則是被我們的好友關係過濾。只看公眾號，門户或者朋友圈，都會陷入所謂的「繭房」。但實際上，大部分人都是看朋友圈，也看抖音，也看新聞客户端，信息來源是很綜合的。&lt;/p&gt; 
    &lt;p&gt;另外從商業邏輯上來講，平台沒有動力去製造所謂的「繭房」，也最有動力打破「信息繭房」，業界和學界的研究都表明了多元化內容有益於用户的長期留存。&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;鳳凰網科技&lt;/strong&gt;&lt;/span&gt;
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1727858283%2FP8IJorflY%3Fpagetype%3Dprofilefeed&quot; target=&quot;_blank&quot;&gt;AI 輔助編程的真相&lt;/a&gt;&lt;/h4&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     這才是 AI 輔助編程的真相：「作為一名非專業工程師，以下是我對使用 AI 編程的真實感受：
    &lt;/div&gt; 
    &lt;div&gt;
     &lt;br&gt; 它能幫你完成 70% 的工作，但最後 30% 令人非常沮喪。每前進一步，就會因為新的 bug 和問題而後退兩步。如果我知道代碼是如何運作的，也許我自己就能修復這些問題。但由於我不懂，我開始懷疑自己是否真的學到了什麼。」 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5abdf22b590e17aa00171de6f1cf3bc1b31.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&lt;strong&gt; 寶玉 xp&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2Fttarticle%2Fp%2Fshow%3Fid%3D2309405120615697744168&quot; target=&quot;_blank&quot;&gt;老婆餅裏沒有老婆，RLHF 裏也沒有真正的 RL&lt;/a&gt;&lt;/h4&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;p&gt;老婆餅裏沒有老婆，夫妻肺片裏沒有夫妻，RLHF 裏也沒有真正的 RL。在最近的一篇博客中，德克薩斯大學奧斯汀分校副教授 Atlas Wang 分享了這樣一個觀點。他指出，RLHF（基於人類反饋的強化學習）和其他類似的方法並沒有為大型語言模型（LLM）帶來真正的強化學習（RL），因為它們缺乏 RL 的核心特徵：持續的環境交互和長期目標的追求。&lt;/p&gt; 
       &lt;p&gt;RLHF 主要通過單步或幾步優化來調整模型輸出，使其符合人類偏好，而不是在一個動態環境中進行多步驟的策略調整。此外，RLHF 通常是離線或半離線進行的，缺乏實時的環境反饋和策略更新。因此，儘管 RLHF 可以改善模型的對齊性和輸出質量，但它並不能賦予 LLM 真正的目標或意圖，讓它們「想要」贏得遊戲。LLM 仍然主要是一個基於上下文預測下一個 token 的統計系統。&lt;/p&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
    &lt;div&gt;
     &lt;span style=&quot;color:#000000&quot;&gt;- 微信&lt;strong&gt;&amp;nbsp;機器之心&lt;/strong&gt;&lt;/span&gt;
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒體觀察&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1820733826261788812%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;科學大模型：「上線」之路還有多遠&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;「科學大模型或許可以引發科研範式和方法上的革命。」北京智源人工智能研究院（以下簡稱「智源研究院」）院長王仲遠告訴記者，科學大模型作為一種新興工具，目前尚未在高校、科研院所以及企業進行大範圍應用，除了技術層面的原因，其推廣還面臨諸多挑戰。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;科技日報&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1820720864234241850%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;上海推進「人工智能＋」行動&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;上海市首批「模塑申城」行業應用示範基地，將推動「人工智能+」在金融、製造、教育、醫療、文旅、城市治理等重點行業的應用落地，帶動上下游協同創新，共促產業生態發展。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;人民日報&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1820721934660076950%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;中國量子計算產業按下「加速鍵」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;從 2024 年 1 月 6 日至今，「本源悟空」上線已超一週年。期間，「本源悟空」已為來自全球 139 個國家逾 1800 萬用户完成超 32 萬個量子計算任務。以「本源悟空」為代表的中國量子計算產業正在按下發展「加速鍵」，並在應用探索領域展現出廣闊前景。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;人民日報海外版&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.163.com%2Fdy%2Farticle%2FJLFGCDLR05118O8G.html&quot; target=&quot;_blank&quot;&gt;程序員出身的 AI 短片導演，用三個月拿下國際電影節的金獎&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#404040&quot;&gt;這是一個在獨立電影界有影響力的國際短片電影節，不是專為 AI 作品而設，所以對 Jim 來説意義非凡，「能讓評委忽略 AI 標籤，關注故事本身，這讓我感到欣慰」。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt; 愛範兒&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1820725489257422042%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;「芯片隊長」黃仁勳，遭遇「ASIC 時刻」？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;在代文亮看來，未來，小場景的 AI 應用、小參數模型會越來越多。「千億參數、萬卡集羣大部分時候是少數廠商玩家的遊戲，大多數功能和場景的實現並不需要這種量級的硬件支持。」此外，端側 AI，AI PC 和手機的概念越來越受關注，其實也側面印證了這個趨勢。所以，ASIC 定製化芯片可以説是「性價比」相當高的選擇。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;span style=&quot;color:#252525&quot;&gt;&lt;strong&gt;時代財經&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FG4tNLYsMngWQEr8YtY4J0g&quot; target=&quot;_blank&quot;&gt;中國芯片的 2025：洗牌、反圍堵、「死磕 28nm」練內功&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;從宏觀環境看，橫亙在中國半導體製造業的這場「沒有硝煙的科技戰」，正逐步走入「深水區」。與兩年前的芯片法案清單相比，來自美方的禁令，正在圍繞半導體生態鏈層層加碼、愈演愈烈；而中國在這場關於先進科技的競爭中，也不再只是被動接招。&lt;/span&gt;&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;硅基研究室&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推薦&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;開源項目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWasmEdge%2FWasmEdge&quot; target=&quot;_blank&quot;&gt;WasmEdge/WasmEdge&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;161&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-50eee106cb6541d74872c46a1ef25325381.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWasmEdge%2FWasmEdge&quot; target=&quot;_blank&quot;&gt;https://github.com/WasmEdge/WasmEdge&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;WasmEdge (之前名為 SSVM) 是為邊緣計算優化的輕量級、高性能、可擴展的 WebAssembly (Wasm) 虛擬機，可用於雲原生、邊緣和去中心化的應用。&lt;/span&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/u/4939618/blog/16971026&quot; target=&quot;_blank&quot;&gt;海量存儲的批量計算框架&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;本文介紹了百度針對海量存儲數據計算需求研發的 HTAP 表格存儲系統及計算調度架構。項目背景源於原有存儲系統難以滿足日益增長的 OLAP 業務需求，因此構建了集 OLTP 與 OLAP 於一體的 HTAP 系統，通過存算分離、Serverless 設計等創新點提升 IO 訪問能力和資源利用率。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;圖片&quot; height=&quot;242&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5e6ad4210b103b6c22ae648cce84082d5ba.jpg&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;開源之聲&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户觀點&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FRz-gvQ8uPBEiF0pH5rUvJw&quot; target=&quot;_blank&quot;&gt;難蚌，打工人要被 AI 整破防了——AI 技術竟用來漲房租！&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：價格歧視算法還需要 AI？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 2：這算是一種作惡了吧&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 3：國內是不是要開始學習了，現在賣房不掙錢，是不是開始炒租房了&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 4：大數據+人工分析&amp;nbsp;vs&amp;nbsp;AI 分析沒有本質區別&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 5：美團：這種操作我熟&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 6：從產品角度，realpage 是個巨大成功不是嗎&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 7：哪裏成功了，只會考慮金錢因素的單一模式垃圾 ai&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 8：有點像&amp;nbsp;RealPage&amp;nbsp;的廣告&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 9：典型的算法歧視&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 10：對部分羣體的區別對待才叫歧視，這個是單純的資本無限度逐利行為，無差別剝削所有租房者。&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 11：想到了之前谷歌的「技術不作惡」&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 12：論大數據殺熟用 AI 增強學習&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FqCl64EhomOHDP4Q3DAZjYg&quot; target=&quot;_blank&quot;&gt;效果媲美 Cursor 的開源替代：Roo-Cline&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：你替我，我替你，程序員們笑眯眯。自行腦補伴奏。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 2：所以被 fork 的那個 cline 輸了？&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 3：雙贏&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 4：這個插件沒有自動補全功能嗎？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 5：用了下，不知怎麼出一半會卡住&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 6：JB 系 ide 能用麼&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 7：JB 可以用阿里的通義靈碼，新版的已經有這些功能了，而且還是免費的&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0912/150800_DfGR_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329027</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329027</guid>
            <pubDate>Mon, 06 Jan 2025 11:18:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>海量存儲的批量計算框架</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;span id=&quot;OSC_h1_1&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;導讀&lt;/h1&gt; 
&lt;p&gt;本文介紹了百度針對海量存儲數據計算需求研發的 HTAP 表格存儲系統及計算調度架構。項目背景源於原有存儲系統難以滿足日益增長的 OLAP 業務需求，因此構建了集 OLTP 與 OLAP 於一體的 HTAP 系統，通過存算分離、Serverless 設計等創新點提升 IO 訪問能力和資源利用率。同時，自研的計算與調度系統實現了任務開發的 SQL 化和數據處理的 FaaS 化，簡化了業務使用成本，提高了開發效率。整體方案在存儲成本、IO 能力、IO 放大率等方面取得顯著成果，為海量存儲數據的計算提供了高效、靈活的解決方案。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_2&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;01 &lt;strong&gt;項目背景及目標&lt;/strong&gt;&lt;/h1&gt; 
&lt;span id=&quot;OSC_h2_3&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;1.1 項目背景&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;搜索內容存儲團隊主要負責各類數據，如網頁、圖片、網頁關係等，的在線存儲讀寫 (OLTP)、離線高吞吐計算 (OLAP) 等工作。&lt;/p&gt; 
&lt;p&gt;原有架構底層存儲系統普通採用百度自研表格存儲（Table）來完成數據的讀、寫、存工作，此存儲系統更偏向於 OLTP 業務場景。隨着近幾年大數據計算、AI 模型訓練的演進，對存儲系統 OLAP 業務場景的依賴越來越重，如數據關係分析、全網數據分析、AI 樣本數據管理篩選。在 OLTP 存儲場景的架構下，支持 OLAP 存儲需求對資源成本、系統吞吐、業務時效帶來了巨大挑戰。為此我們在百度自研表格存儲之外，結合業務實際 workflow 針對性優化，增加構建了一套符合業務需求的 HTAP 表格存儲系統以及相應的計算框架，共同組成面向海量存儲數據的大批量計算架構系統。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_4&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;1.2&amp;nbsp;項目目標&lt;/strong&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;提供海量存儲數據計算的超高 IO 訪問能力。當前內容存儲數據達幾十 P+，訪問頻率按照每週一輪估算，平均 IO 能力需要達到 34G/s，峯值 IO 能力需要達到 200G/s。面對如此龐大的 IO 訪問能力，需要從文件系統、存儲引擎、分佈式存儲系統、訪問模型等全方位進行深度優化來滿足需求；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;提供海量存儲數據計算的快速開發&amp;amp;部署能力。在提供海量訪問能力的同時，也需要為業務提供訪問配套的基礎設施，來滿足業務開發&amp;amp;部署計算任務的需求。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h1_5&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;02 現有研發條件和工作基礎&lt;/h1&gt; 
&lt;p&gt;搜索內容架構存儲團負責各類數據，如網頁、圖片、網頁關係等，的在線存儲讀寫 (OLTP)、離線高吞吐計算 (OLAP) 等工作。面對當前海量存儲數據的計算需求有清晰的技術和業務認知，第一視角明確清楚地知道系統瓶頸、技術難點、業務需求。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;系統瓶頸——當前存儲系統能提供的 IO 能力與業務計算需求之間的矛盾。隨着大數據、機器學習、大語言模型等新技術的興起，業務對數據的計算訪問需求越來越強烈，然而存儲系統的 IO 能力卻一直止步不前。為此，迫切需要一款面向數據計算的存儲系統；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;技術難點——數據表格存儲系統的數據訪問模型與計算模型之間的矛盾。當前架構底層存儲普遍採用百度自研表格存儲 (Table) 來完成數據的讀寫存工作，此存儲系統更偏向於 OLTP 業務場景。但隨着近幾年大數據計算、AI 模型訓練的演進，對存儲系統 OLAP 業務場景的依賴越來越重，如數據關係分析、全網數據分析、AI 樣本數據管理篩選。在 OLTP 存儲場景的架構下，支持 OLAP 存儲需求對資源成本、系統吞吐、業務時效帶來了巨大技術挑戰；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;業務需求——方便高效快速的任務開發&amp;amp;部署能力的需要。在大量搜索內容 OLAP workflow 中，從表格存儲系統中提取篩選數據只佔全部任務的一小部分，大量任務需要對數據進行加工處理得到需要的結果。常規的做法是多任務串聯，這樣做的缺陷是大量中間臨時數據存儲開銷。為此我們為 HTAP 表格存儲系統構建了一套計算與調度系統。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h1_6&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;03 整體方案&lt;/h1&gt; 
&lt;span id=&quot;OSC_h2_7&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.1 概覽&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;本項目擬研發面向海量存儲數據的大批量計算架構，主要分為兩大系統，HTAP 表格存儲系統、計算&amp;amp;調度架構。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.1.1 HTAP 表格存儲系統&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-e949997f0acdd80bcd50bc36a715723aea8.jpg&quot; alt=&quot;圖片&quot; referrerpolicy=&quot;no-referrer&quot;&gt; △圖 2.3&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;架構採用業界 HTAP 主流設計思想，將 OLTP 和 OLAP workflow 拆分到兩套存儲系統中，如 F1 Lightning、ByteHTAP，在 SDK 層根據任務類型分發到不同的存儲系統中；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OLTP 存儲系統——Neptune，採用 Multi-Raft 分佈式協議組建存儲集羣，採用本地磁盤 (SSD/HDD 等) + 百度分佈式文件系統 AFS 組成存儲介質；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OLAP 存儲系統——Saturn，Serverless 設計模式，無常駐 Server，即用即加載，貼合 OLAP workflow 的不確定性和間歇性；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OLTP 與 OLAP 存儲系統間，採用數據文件硬鏈的方式進行數據同步，全版本替換，成本低、速度快，充分貼合 Saturn Serverless 設計模式。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;如上架構設計圖，可將 OLTP 與 OLAP workflow 拆分到兩套獨立的系統中，解決上述提到的存算耦合問題。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;解決存儲空間放大問題。空間放大主要帶來的問題是存儲節點成本，Workflow 分離的架構將 OLAP 需要的數據文件採用 AFS 低成本存儲，減少了對存儲節點存儲空間的壓力。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-e478418391bd0091d3d46ed6b48fa5b3d34.jpg&quot; alt=&quot;圖片&quot; referrerpolicy=&quot;no-referrer&quot;&gt; △圖 2.4&lt;/p&gt; 
&lt;p&gt;OLAP 存儲系統的數據寫入並沒有使用常見的 log redo 或 raft learner 模式，最主要還是在保證 OLAP 存儲系統的 Serverless 特性的同時，又能實時感知到 OLTP 系統的最新寫入結果。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;解決存儲節點資源冗餘問題。拆分後，分佈式存儲節點將大量重型 OLAP workflow 轉移到 OLAP 存儲——Saturn 中，將極大減少存儲節點的計算壓力。同時，OLAP 存儲的 Serverless 設計模式又可貼合 workflow 的不確定性和間歇性。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-5e6ad4210b103b6c22ae648cce84082d5ba.jpg&quot; alt=&quot;圖片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;△圖 2.5&amp;nbsp;Saturn Serverless 模型&lt;/p&gt; 
&lt;p&gt;計算節點可以部署在任意計算集羣中，如 Map-Reduce、自研計算節點 Pioneer 等，在 SDK 中直接初始化存儲引擎，從 AFS 中訪問對應分片的數據文件。計算節點可充分利用雲原生系統（PaaS）的彈性資源，解決資源常駐冗餘問題。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.1.2&amp;nbsp;一次開發，多端部署&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-9753bf0618f4324ff67c4d7955cc1e571ed.jpg&quot; alt=&quot;圖片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;任務生成。自研 KQL 數據查詢語言。在任務生成階段將 KQL 語句解析優化成相關的調度任務，一個 Job 包含多個 Task。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任務調度。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任務調度的計算節點可以是 Map-Reduce，也可以是自研計算集羣 Pioneer，負責不同計算場景。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任務運行容器負責數據依賴部署和運行計算框架。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;計算框架採用插件化設計思想，依託 KQL 語言進行差異化描述。計算框架的最大特點是，可在數據處理節點執行用户自定義 FaaS 函數。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_8&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.2&amp;nbsp;詳細介紹&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;3.2.1&amp;nbsp;HTAP 表格存儲系統&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.2.1.1 OLTP 存儲系統——Neptune&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-8ddcc29e25489cf980c7f03838e3469bb8d.jpg&quot; alt=&quot;圖片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Neptune 引擎主要支持四類操作：寫、刪、讀、Scan。每一類操作都通過 RegionMapper 進行映射，對外隔離分區概念。&lt;/p&gt; 
&lt;p&gt;Neptune 存在兩類分區：索引分區、數據分區。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;索引分區。索引分區用於減少因為數據分區導致 Key 所在數據分區不明確導致的隨機訪問 IO 放大問題，提升隨機查性能。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;數據分區。Neptune 可配置多個數據分區，每個數據分區內包含多個 Locality-Group。分區間的數據理論上是互斥的。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Neptune 各類操作的流程：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;寫操作：&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;根據 RowWriter 中設置的 Region 信息找到需要寫入的 Region 的 Handle，按照列語義將數據序列化成 RawData。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;同時根據 Region 信息生成當前 Key 的 Region 索引信息。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;將 RawData 與 RegionIndex 作為一條操作記錄 Commit 到引擎中，整個操作為原子操作。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;刪操作：&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;由於存在 Region 的概念，刪除某個 Key 是需要明確當前 Key 所在的分區。目前的做法是查詢一遍分區索引獲取分區信息，再準確刪除對應分區的數據。這樣帶來一個問題，刪除操作會增加一次分區查詢操作，我們可以考慮將分區信息全部加載到內存提升性能。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;讀操作：&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;讀操作類似刪除操作，會首先查詢分區索引表，如果在分區索引中查詢不到則表明當前 Key 不存在，直接返回 NotFound。否則，根據分區索引查詢對應的分區即可。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Scan 操作：&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Scan 時業務可以指定對應的分區以及 CF 信息，RegionMapper 根據這些信息 Select 出合適的物理存儲 Handle，然後對這些物理存儲進行 Scan。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3.2.1.2 OLAP 存儲系統——Saturn&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-8afd5e190b48a006c8c80a4ce0b84907a2f.jpg&quot; alt=&quot;圖片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Saturn 主要分三層：&lt;strong&gt;文件系統&lt;/strong&gt;（File-System）、&lt;strong&gt;Table&lt;/strong&gt;（表級別的抽象，非 TG 的 Table）、&lt;strong&gt;訪問層&lt;/strong&gt;（SDK），Meta-Server 為每一層提供全局 Meta 信息支持。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;文件系統。Saturn 既可以支持 AFS，也支持本地文件系統，同時後續可以支持其他類型的文件系統。文件系統的類型對於 Saturn 來説是&lt;strong&gt;插件化可插拔的&lt;/strong&gt;。使用 AFS 作為文件系統相比於 Table 在成本層面有巨大優勢。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Table。一個抽象的 Table 包含多個 Slice，理論上每個 Slice 間的數據是互斥的，這裏引入數據模型的概念。當前支持兩種數據模型：&lt;strong&gt;哈希序 (hash order)、全局序 (global order)&lt;/strong&gt;，兩種模型與 Table 完全對等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;SDK。SDK 目前支持 Seek 和 Scan 功能，使用方式跟通用的列存儲系統保持一致，SDK 直接與文件系統（AFS）連接，對外提供存儲 Serverless 的訪問能力。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;同時，Table 數據的更新和構建包含兩種模式：&lt;strong&gt;全量構建、增量合併&lt;/strong&gt;。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;全量構建。全量構建通過完整 Dump Table 數據的方式對錶中的每個分片進行逐步替換，替換過程中採用多版本機制保證訪問的穩定性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;增量合併。增量合併通過控制 TG Table 做 Major Compaction 的時機，保證每次獲取增量數據前不會發生 Major Compaction。增量數據通過 Snapshot 的形式對外提供所有的操作記錄，這些記錄保存在 Table SST 文件中，Saturn 把這些 SST 文件 Transform 成自身協議的 SST，再發起 Ingest 操作即可。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3.2.1.3&amp;nbsp;存儲引擎優化——數據行分區&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;數據行分區思想在很多 OLAP 存儲系統中很常見，如當前比較流行的一些數據湖架構，ClickHouse、IceBerg 等。在表格存儲中，數據行分區的好處是可以極大減少在數據行篩選過程中 IO 放大率。以下是我們在存儲引擎中支持數據行分區的設計思路：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-7a49b8f4957e8f29bb1fadf0234c3dfd5e4.jpg&quot; alt=&quot;圖片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;△圖 2.6&lt;/p&gt; 
&lt;p&gt;數據行分區的思想在 OLTP 和 OLAP 存儲引擎中都有使用，OLTP 存儲引擎以數據行分區構建的數據文件可直接被 OLAP 存儲引擎加載，減少了 OLAP 存儲的數據構建工作。&lt;/p&gt; 
&lt;p&gt;數據行分區在 Write、Read、Scan 場景下的處理流程分別為：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Write 操作。Write 時會根據請求中的特殊 Region 描述，如分區鍵，找到需要寫入的 Region-Index 和 Region 上下文，前者保存 Key 的分區索引信息，後者中保存實際數據，操作記錄由 WAL 中保存。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Read 操作。Read 操作相比通常直接訪問數據，需要多進行一次分區索引訪問，為減少多一次訪問帶來的性能折損，我們將分區索引信息全內存化。由於索引數據非常小，因此全內存化是可接受的。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Scan 操作。Scan 操作相比之下沒有任何變更，但在 Scan 特殊分區場景下可大量減少 IO 放大。因為相比之前的行過濾模式，可直接跳過大量不需要的數據。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在業務存儲支持時，合理設置數據行分區，可極大減少數據行篩選過程中的 IO 放大率。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.2.1.4 存儲引擎優化——增量數據篩選&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在實際業務中，有很大一個場景是獲取近期（如近幾個小時、近一天）有值變化的數據，常規的做法是 Scan 全量數據，以時間區間作為過濾條件，篩選出符合條件的結果。但如此的篩選邏輯會帶來嚴重的 IO 放大，因為滿足條件的結果只佔全量結果的一小部分。為此，我們在引擎層調整優化 Compaction 時機以及調整篩選流程，減少增量數據篩選過程中需要訪問的數據文件集合，降低 IO 放大，業務提速。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-84ac7c8b96be9d99070040c4eb17a75965f.jpg&quot; alt=&quot;圖片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;△圖 2.7 LSMT&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.2.1.5&amp;nbsp;存儲引擎優化——動態列結構&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 OLAP 存儲引擎中，還存在一類訪問場景會帶來 IO 放大問題，數據列篩選。在表格存儲系統中，一個 Key 可以包含多個列族（Column Family），一個列族中可以包含任何多個數據字段，這些字段以行結構存儲在同一物理存儲（Locality Group）中，當篩選特定數據列時，需要進行整行讀取，然後過濾出需要的字段，這也將帶來 IO 放大問題。&lt;/p&gt; 
&lt;p&gt;同時，OLAP workflow 的訪問不確定性導致存儲層無法及時調整數據在物理存儲中的結構。為此，我們引入動態列結構的概念，在邏輯層對業務透明，在物理層根據近期 OLAP workflow 特性及時調整物理結構。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-d9ec229f4af7565d50eef414f7d262c570a.jpg&quot; alt=&quot;圖片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;△圖 2.8&lt;/p&gt; 
&lt;p&gt;如上圖，在邏輯存儲中，分為兩個 LG，根據 workflow 特性，把業務常用的訪問字段在 Compaction 階段存放在同一物理存儲結構中，反之，這樣可以減少字段篩選階段的 IO 放大率。&lt;/p&gt; 
&lt;p&gt;動態列結構只在 OLAP 存儲引擎中生效，我們在原有 OLAP 存儲中引入 workflow 收集以及 compaction 任務，將從 OLTP 存儲中同步的數據構建成更適合 OLAP 場景的存儲結構。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.2.2&amp;nbsp;計算與調度架構&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在本節，我們將介紹在此 HTAP 表格存儲系統基礎上，如何設計實現任務計算和調度系統，簡化業務使用成本，提升業務效率。&lt;/p&gt; 
&lt;p&gt;在大量搜索內容 OLAP workflow 中，從表格存儲系統中提取篩選數據只佔全部任務的一小部分，大量任務需要對數據進行加工處理得到需要的結果。常規的做法是多任務串聯，這樣做的缺陷是大量中間臨時數據存儲開銷。&lt;/p&gt; 
&lt;p&gt;為此我們為 HTAP 表格存儲系統構建了一套計算與調度系統，系統兩大特點：任務開發 SQL 化、數據處理 FaaS 化。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.2.2.1&amp;nbsp;SQL 化與 FaaS 化&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;我們充分貼合上述存儲系統特性，自研了一套數據查詢語言——KQL，KQL 類似於 SQL Server 語法。同時，又結合存儲系統特性以及計算框架，支持一些特殊語言能力，最主要的是能支持原生 FaaS 函數定義，當然也支持外部 FaaS 函數包依賴。&lt;/p&gt; 
&lt;p&gt;如下是一段 KQL 語句例子以及説明：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;function classify = { #定義一個 Python FaaS 函數
def classify(cbytes, ids):
    unique_ids=set(ids)
    classify=int.from_bytes(cbytes, byteorder=&#39;little&#39;, signed=False)
    while classify != 0:
        tmp = classify &amp;amp; 0xFF
        if tmp in unique_ids:
            return True
        classify = classify &amp;gt;&amp;gt; 8
    return False
}

declare ids = [2, 8];
declare ts_end = function@gettimeofday_us();      # 調用 Native Function 獲取時間
declare ts_beg = @ts_end - 24 * 3600 * 1000000;   # 四則運算

select * from my_table region in timeliness       # 利用存儲分區特性，從 my_table 中的 timeliness 分區獲取數據
where timestamp between @ts_beg and @ts_end       # 利用存儲增量區間特性，篩選增量數據
    filter by function@classify(@cf0:types, @ids) # 在 Filter 階段調用自定義 FaaS 函數
    convert by json outlet by row;
desc:                                             # 對計算框架進行特殊描述
    --multi_output=true;

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;3.2.2.2&amp;nbsp;任務生成與調度&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-bbb5474d9b9ec6a70e634e428e9e5350a9d.jpg&quot; alt=&quot;圖片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;任務生成與調度主要分為三層，任務解析層、任務調度執行層、任務執行容器。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;任務解析層。負責將 KQL 表達式解析成實際的任務執行計劃，並保存在任務存儲容器中。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任務調度執行層。負責將任務計劃分發到任務執行容器，並輪訓檢測任務狀態，執行探活、重試等操作。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任務執行容器。提供兩種任務執行容器，Pioneer、EMR。前者為自研任務執行容器，後者為公司 Map-Reduce 執行平台。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_9&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.3&amp;nbsp;技術經濟指標&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;通過上述的架構設計以及優化手段，我們在 IO 能力、訪問成本、開發效率等方面取得顯著成果。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-1b3d37c213c7b298a2e68cb556d3a199540.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_10&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;04 主要創新點&lt;/h1&gt; 
&lt;span id=&quot;OSC_h2_11&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;4.1&amp;nbsp;自研 HTAP 表格存儲系統&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;結合業務特性以及實際需求，構建符合業務場景的 HTAP 存儲系統。架構採用業界 HTAP 主流設計思想，將 OLTP 和 OLAP workflow 拆分到兩套存儲系統中，如 F1 Lightning、ByteHTAP，在 SDK 層根據任務類型分發到不同的存儲系統中。系統創新點如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;存算分離架構。解決 OLTP 存儲系統的空間放大問題，將 OLAP Workflow 從 OLTP 存儲中分離，分離的架構將 OLAP 需要的數據文件採用 AFS 低成本存儲，減少了對存儲節點存儲空間的壓力。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OLAP Serverless 設計。分佈式存儲節點將大量重型 OLAP workflow 轉移到 OLAP 存儲——Saturn 中，將極大減少存儲節點的計算壓力。同時，OLAP 存儲的 Serverless 設計模式又可貼合 workflow 的不確定性和間歇性。計算節點可以部署在任意計算集羣中，如 Map-Reduce、自研計算節點 Pioneer 等，在 SDK 中直接初始化存儲引擎，從 AFS 中訪問對應分片的數據文件。計算節點可充分利用雲原生系統（PaaS）的彈性資源，解決資源常駐冗餘問題。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;表格數據行分區。數據行分區思想在很多 OLAP 存儲系統中很常見，如當前比較流行的一些數據湖架構，ClickHouse、IceBerg 等。在表格存儲中，數據行分區的好處是可以極大減少在數據行篩選過程中 IO 放大率。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;增量數據篩選支持。在實際業務中，有很大一個場景是獲取近期（如近幾個小時、近一天）有值變化的數據，常規的做法是 Scan 全量數據，以時間區間作為過濾條件，篩選出符合條件的結果。但如此的篩選邏輯會帶來嚴重的 IO 放大，因為滿足條件的結果只佔全量結果的一小部分。為此，我們在引擎層調整優化 Compaction 時機以及調整篩選流程，減少增量數據篩選過程中需要訪問的數據文件集合，降低 IO 放大，業務提速。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;表格數據動態列結構。根據 workflow 特性，把業務常用的訪問字段在 Compaction 階段存放在同一物理存儲結構中，反之，這樣可以減少字段篩選階段的 IO 放大率。動態列結構只在 OLAP 存儲引擎中生效，我們在原有 OLAP 存儲中引入 workflow 收集以及 compaction 任務，將從 OLTP 存儲中同步的數據構建成更適合 OLAP 場景的存儲結構。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_12&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;4.2&amp;nbsp;自研任務生成與調度系統&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;在大量搜索內容 OLAP workflow 中，從表格存儲系統中提取篩選數據只佔全部任務的一小部分，大量任務需要對數據進行加工處理得到需要的結果。常規的做法是多任務串聯，這樣做的缺陷是大量中間臨時數據存儲開銷。&lt;/p&gt; 
&lt;p&gt;為此我們為 HTAP 表格存儲系統構建了一套計算與調度系統，系統兩大特點：任務開發 SQL 化、數據處理 FaaS 化。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;SQL 化。我們充分貼合上述存儲系統特性，自研了一套數據查詢語言——KQL，KQL 類似於 SQL Server 語法。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;FaaS 化。在 SQL 化的基礎上，同時結合存儲系統特性以及計算框架，支持原生 FaaS 函數定義能力，當然也支持外部 FaaS 函數包依賴。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;————END————&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;推薦閲讀&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247603678%26idx%3D1%26sn%3D4a1f215e3a4e2b578ad52375dc55e749%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;網頁多模態建模思考&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247603657%26idx%3D1%26sn%3D6ba08a7cf4a124c94c4cd51786217499%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;百度垂搜一站式研發平台演進實踐&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247603628%26idx%3D1%26sn%3Df75ddec65ee183dc0c3d48b7e1fdb1ea%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;初探圖譜 Embedding 用於異常檢測（一）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247603616%26idx%3D1%26sn%3D6f18533697c0a083f9c58373ac6b1a85%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;AIAPI - 轉向 AI 原生檢索&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247603585%26idx%3D1%26sn%3D1ea31a1565c49bc466ddb99b6d9e63d9%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;學校新來了一位 AI 作文老師：能看、會評、還教改寫&lt;/a&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/4939618/blog/16971026</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/16971026</guid>
            <pubDate>Mon, 06 Jan 2025 08:57:00 GMT</pubDate>
            <author>原創</author>
        </item>
        <item>
            <title>JetBrains Rider 2025.1 路線圖發佈</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;JetBrains Rider 2025.1 路線圖現已發佈。介紹了目前正在開發的一些特性和改進內容，主要包括：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;281&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a7421720fdf4edc70e688e9d75e9e7e71f6.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;Pain-free 性能分析&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;開發團隊決定重新思考 Rider 中的分析工作方式，旨在讓當前的工具套件（動態程序分析、監控工具以及集成的 dotTrace 和 dotMemory 分析器）變得更易於使用且更直觀。包括簡化界面、減少配置，以及將性能分析更深入地融入用户的日常工作流程。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「我們的目標很簡單：讓性能監控和分析感覺像是開發流程的自然延伸，而不是一項單獨的專門任務。」&lt;/span&gt;&lt;/p&gt; 
&lt;div style=&quot;text-align:start&quot;&gt; 
 &lt;h4 style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;Debugging&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;Mixed mode debugging&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Rider 2025.1 將着手實現&amp;nbsp;mixed mode debugging - 此功能可讓用户在單個會話中同時調試 .NET 和 C/C++ 代碼。這對使用 Unity 和 Unreal 等遊戲引擎的開發人員，以及那些通過 P/Invoke 使用&amp;nbsp;native Windows API 構建桌面應用程序的開發人員尤為剛需。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;實現後用户將能夠：&lt;/span&gt;&lt;/p&gt; 
&lt;ul style=&quot;margin-left:0; margin-right:0&quot;&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;在.NET 和 native code 之間無縫切換。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;檢查兩個環境中的變量。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;在代碼庫的任何地方設置斷點。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;無需切換上下文即可調試互操作場景。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;「我們相信，這一新增功能將顯著改善混合應用程序開發人員的調試體驗。雖然我們目前無法確定具體的發佈時間表，但我們很高興開始這項重要的工作，並將在此過程中分享我們的進展。」&lt;/span&gt;&lt;/p&gt; 
&lt;div style=&quot;text-align:start&quot;&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;C++ code debugging&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;項目團隊計劃在 2025 年着手全面改進整個 Rider 中的 C++ 調試體驗。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前正在進行的工作包括：優化 PDB 讀取，以便用户更快地進入調試會話；重新設計 collection evaluation，使其更加高效；實施一個更快的系統來處理條件斷點；改進 C++ 中的數據斷點，使其更加可靠和響應迅速。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;以及致力於讓調試感覺更自然、更可控。新的 stepping filters 可幫助用户精確地導航代碼庫，Rider handles debugger detachment 的方式也得到了改進，此外還有一系列較小的功能增強。&lt;/span&gt;&lt;/p&gt; 
&lt;div style=&quot;text-align:start&quot;&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;改進的數據可視化工具&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;在 Rider 2025.1 中將專注於改進 LINQ 表達式的數據可視化，使開發人員能夠更輕鬆地直接在調試器中理解和調試複雜的 LINQ 查詢。用户將能夠檢查查詢執行情況、查看中間結果，並更好地瞭解 LINQ 操作如何轉換數據。詳情可查看&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutrack.jetbrains.com%2Fissue%2FRIDER-3205%2FMethod-based-LINQ-chains-debugging&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;issue&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;div style=&quot;text-align:start&quot;&gt; 
 &lt;h4 style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;Windows 上的遠程開發&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;/div&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;允許 Windows 用户連接到遠程開發機器，同時保持其本地 Rider 實例響應迅速且熟悉。就像現有的 macOS 和 Linux 遠程開發支持一樣，能夠遠程運行、調試和測試應用程序，同時保持本地 IDE 的性能和體驗。&lt;/span&gt;&lt;/p&gt; 
&lt;div style=&quot;text-align:start&quot;&gt; 
 &lt;h4 style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;對 SQL 項目的支持&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;/div&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;2025 年將通過集成 SQL Tools API（與 Visual Studio Code 和 Azure Data Studio 採用的技術相同）來實現 Rider 的 SQL Server 支持現代化。這一轉變將企業級數據庫開發功能直接引入 Rider。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;升級後，用户可以在解決方案中無縫管理 SQL Server 項目、直接發佈數據庫，以及使用 IDE 已經提供的強大架構比較工具。藉助新的跨平台 SDK 支持，將能夠跨不同操作系統構建和管理 SQL 項目，從而使 Rider 成為適用於雲和混合環境的更通用的工具。&lt;/span&gt;&lt;/p&gt; 
&lt;div style=&quot;text-align:start&quot;&gt; 
 &lt;h4 style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;增強的 Roslyn 支持&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;/div&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;正在增加對 Roslyn-based suppressors 的支持，使得用户可以微調編譯器診斷在項目中的工作方式。此功能非常適用於想要更精細地控制警告和代碼分析的用户。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Roslyn 語法可視化工具則可以幫助準確瞭解 Roslyn 如何查看代碼結構，從而大大簡化自定義分析器和重構的開發。&lt;/span&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;總的來説，雖然&amp;nbsp;mixed mode debugging 等某&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#19191c&quot;&gt;些功能仍處於早期階段，但其他功能已初具規模。&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;更多詳情可&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fdotnet%2F2025%2F01%2F08%2Frider-2025-1-roadmap%2F&quot; target=&quot;_blank&quot;&gt;查看官方博客&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/328999/rider-2025-1-roadmap</link>
            <guid isPermaLink="false">https://www.oschina.net/news/328999/rider-2025-1-roadmap</guid>
            <pubDate>Mon, 06 Jan 2025 07:26:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>Bytebase 3.1.2 發佈</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;h2&gt;🚀 新功能&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;在 SQL 編輯器中為表、列和 PostgreSQL 的視圖註釋顯示鼠標懸浮提示。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-64cc82a99ef9ecac55d810f8ee3e2183f02.png&quot; alt=&quot;file&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;IM, Webhook 集成支持 Lark。&lt;/li&gt; 
 &lt;li&gt;展示 Redshift 表或視圖的定義。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-81fb66c24be3b9095ee5df479092a790ae6.png&quot; alt=&quot;file&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;🔔 API 重大變更&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;棄用脱敏策略 API &lt;code&gt;/v1/{instance}/{database}/policies/masking&lt;/code&gt;，改為調用 &lt;code&gt;/v1/{instance}/{database}/metadata&lt;/code&gt; 並修改參數 &lt;code&gt;columnConfigs&lt;/code&gt; 來實現。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🎄 改進&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;將顯式脱敏列頁面移到數據庫頁面。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-02b54ed3aa0bd12639c4ba7030c6f87cb1f.png&quot; alt=&quot;file&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Token 過期後會自動彈出登錄窗口。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-2f313f93d0edfc23bc430d45462f76a721e.png&quot; alt=&quot;file&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;🐞 Bug 修復&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;修復了在同一個實例上多租户數據庫分組情況下表名衝突的問題。&lt;/li&gt; 
 &lt;li&gt;修復了在 SSO 認證 (OIDC) 中遇到的跨域問題。&lt;/li&gt; 
 &lt;li&gt;修復了一個在 SQL 編輯器中導致 QuotaExceededError 錯誤的問題。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📕 安裝及升級&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;新安裝 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2Fdocs%2Fget-started%2Fself-host%2F&quot; target=&quot;_blank&quot;&gt;https://www.bytebase.com/docs/get-started/self-host/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;升級 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2Fdocs%2Fget-started%2Fupgrade%2F&quot; target=&quot;_blank&quot;&gt;https://www.bytebase.com/docs/get-started/upgrade/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;升級前請備份元數據庫，升級後無法回退版本。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;💡 更多資訊，請關注 Bytebase 公號：Bytebase&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/6148470/blog/17128196</link>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/17128196</guid>
            <pubDate>Mon, 06 Jan 2025 06:43:00 GMT</pubDate>
            <author>原創</author>
        </item>
        <item>
            <title>通義靈碼 AI 程序員全面上線：同時支持 VS Code、JetBrains IDEs</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;2024 雲棲大會期間，通義靈碼 AI 程序員正式發佈，實現幾句話就能完成需求理解、任務拆解、代碼編寫、修改 BUG、測試等開發任務，最快幾分鐘可從 0 到 1 完成應用開發，提升數十倍開發效率。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;此次升級後的通義靈碼 AI 程序員作為全球首個同時支持 VS Code、JetBrains IDEs 開發工具的 AI 程序員，可通過對話協作的方式輔助開發者完成複雜的編碼任務&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;在能力升級方面，此次通義靈碼 AI 程序員首次引入多文件代碼修改能力。開發者可通過 AI 程序員自動完成多文件級編碼任務，如需求實現、問題修復、批量生成單元測試等。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;在開發者和 AI 程序員的協作過程中，雙方將以多輪對話的方式逐步完成編碼任務，並且會產生多個快照版本，開發者可任意切換、回退&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;521&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0109/120923_RPYC_2720166.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;通義靈碼 AI 程序員還可打破開發者編程語言的邊界，Java 開發者也能使用 Python、JavaScript 等多種語言，快速編寫網頁、小工具、小遊戲。&lt;/p&gt; 
&lt;p&gt;以從 0 到 1 開發一個具有用户登錄、數據管理功能及美化的前端頁面為例，過去純人工開發需要前端及後端工程師配合，至少需要耗費半天時間，現在使用通義靈碼 AI 程序員，一名程序員僅需 10 分鐘就能完成整個開發過程，大幅提升業務開發效率。&lt;/p&gt; 
&lt;p&gt;下載地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flingma.aliyun.com%2Flingma%2Fdownload&quot; target=&quot;_blank&quot;&gt;https://lingma.aliyun.com/lingma/download&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/328958</link>
            <guid isPermaLink="false">https://www.oschina.net/news/328958</guid>
            <pubDate>Mon, 06 Jan 2025 04:12:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>Ubuntu 核心貢獻者 Steve Langasek 去世</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;Ubuntu Linux 社區的靈魂人物——Steve Langasek，於 2025 年 1 月 1 日因病去世，享年 45 歲。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;378&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0109/111546_JP86_2720166.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;無論你是否聽過 Langasek 的名字，如果你曾使用過 Ubuntu 或 Debian，那麼你已經從他的貢獻中獲益了。&lt;/p&gt; 
&lt;p&gt;Langasek 的開源之路始於 1996 年。當時他接觸了 Slackware，之後加入了 Red Hat，最終在 2000 年找到了自己的歸屬——Debian。&lt;/p&gt; 
&lt;p&gt;2001 年，他正式成了 Debian 的開發者，之後的二十多年裏，他參與了多個重要版本的發佈，包括 Debian Sarge 和 Etch。&lt;/p&gt; 
&lt;p&gt;2007 年，他加入 Canonical 公司，成為 Ubuntu 的發佈經理。&lt;/p&gt; 
&lt;p&gt;從 Ubuntu 7.10（Gutsy Gibbon）開始，直至他去世，都發揮了不可替代的領導作用。&lt;/p&gt; 
&lt;p&gt;除了在 Ubuntu 的貢獻，Langasek 還在 Linux-PAM、Samba 和 OpenLDAP 等關鍵項目中做出了巨大貢獻，這些貢獻至今仍影響着開源社區。&lt;/p&gt; 
&lt;p&gt;即便在與病魔的長期抗爭中，Langasek 依然活躍在社區，幽默地面對着困境，他對開源的熱愛和付出從未改變。&lt;/p&gt; 
&lt;p&gt;因此，他的離世，不僅讓 Ubuntu 和 Debian 失去了一位重量級人物，更讓整個開源世界失去了一盞指引方向的燈塔。&lt;/p&gt; 
&lt;p&gt;Ubuntu 創始人 Mark Shuttleworth 在一篇文章中，還將 Langasek 描述為&lt;strong&gt;「Ubuntu 所有偉大之處的縮影「&lt;/strong&gt;。他的專注、智慧和對開源理念的堅定信仰，使得無數開發者在他的指導下不斷成長。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;來源：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.ubuntu.com%2Ft%2Fremembering-and-thanking-steve-langasek%2F52665&quot; target=&quot;_blank&quot;&gt;https://discourse.ubuntu.com/t/remembering-and-thanking-steve-langasek/52665&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fthenewstack.io%2Fsteve-langasek-one-of-ubuntu-linuxs-leading-lights-has-died%2F&quot; target=&quot;_blank&quot;&gt;https://thenewstack.io/steve-langasek-one-of-ubuntu-linuxs-leading-lights-has-died/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.omgubuntu.co.uk%2F2025%2F01%2Flong-time-ubuntu-contributor-steve-langasek-has-passed-away&quot; target=&quot;_blank&quot;&gt;https://www.omgubuntu.co.uk/2025/01/long-time-ubuntu-contributor-steve-langasek-has-passed-away&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/328947/remembering-and-thanking-steve-langasek</link>
            <guid isPermaLink="false">https://www.oschina.net/news/328947/remembering-and-thanking-steve-langasek</guid>
            <pubDate>Mon, 06 Jan 2025 03:16:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
    </channel>
</rss>