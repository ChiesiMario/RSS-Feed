<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - industry - 简体中文</title>
    <link>https://www.oschina.net/news/industry</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/industry" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 25 Aug 2025 07:42:26 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>钉钉推出首款 AI 硬件：AI 录音产品 DingTalk A1</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;在钉钉十周年发布会上，钉钉 CEO 陈航宣布，钉钉推出 AI 录音产品 DingTalk A1。钉钉表示，这是其首款 AI 硬件。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="371" src="https://oscimg.oschina.net/oscnet/up-c10069d981c66aabcd63cd6a976d0226994.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;作为一款厚度仅 3.8 毫米的 AI 硬件产品，dingtalk A1 不仅小巧便携，更是提高工作效率的得力助手。dingtalk A1 的使用方式非常简单。对于 iOS 用户，只需将其贴在手机背面；而安卓用户则可以通过附赠的磁吸贴来体验同样的便捷。无论是在打电话、开会还是上课，dingtalk A1 都能将语音内容清晰地录制下来。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;dingtalk A1 支持在 8 米内清晰收音，并提供 10000 分钟的免费转写服务，转写准确率高达 97%。其内置的 36 个工作和生活 Agent 模板，为用户提供了多种选择，使得会议记录和工作总结更加轻松。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;dingtalk A1 还具备多维分析通话内容的能力。当客户拨打电话时，AI 小助理可以分析录音，帮助销售人员了解客户的购买意愿和竞争优势。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368336</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368336</guid>
      <pubDate>Mon, 25 Aug 2025 07:16:23 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Meta 与 Midjourney 达成授权合作</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Meta 首席 AI 官 Alexandr Wang&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Falexandr_wang%2Fstatus%2F1958983843169673367" target="_blank"&gt;宣布&lt;/a&gt;，Meta 已与 Midjourney 达成合作，将获得其美学技术 (Aesthetic Technology) 许可，将把 Midjourney 在图像与视频生成领域积累的美学技术整合到未来 Meta 的模型与产品中。&lt;/p&gt; 
&lt;p&gt;Wang 补充，此次合作由双方研究团队共同推进，旨在借助 Midjourney 在技术与美学上的卓越表现，让 「美」 触达数十亿用户。他强调，Meta 将坚持 all-of-the-above 策略，汇聚顶尖人才、扩展算力，并与行业最佳伙伴协作，以打造更优产品，后续进展将很快公布。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0825/151337_EXfZ_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;作为知名的 AI 图像和视频生成工具提供商，Midjourney 在相关领域技术先进。而 Meta 近期大力投入 AI 研发，试图追赶 OpenAI 和谷歌等竞争对手。公司创始人扎克伯格此前不惜重金从其他公司招揽 AI 人才，Alexandr Wang 正是在 Meta 以 143 亿美元收购他联合创立的 Scale AI 后，加入 Meta 担任要职。&lt;/p&gt; 
&lt;p&gt;Meta 的 AI 布局涵盖诸多服务。其 AI 应用围绕 AI 生成的图像和视频信息流构建；Facebook 发布新帖时设有 AI 图像创建按钮；WhatsApp 和 Instagram 的聊天功能中也具备生成 AI 图像的选项。此次与 Midjourney 合作，有望借助其技术提升 Meta 用户生成的照片和视频质量，进一步优化 AI 图像和视频功能。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368335</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368335</guid>
      <pubDate>Mon, 25 Aug 2025 07:15:23 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>DeepSeek 采用 UE8M0 FP8 标准：华为积极适配、彻底和英伟达决裂了</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;深度求索近日正式&lt;a href="https://www.oschina.net/news/367617"&gt;对外发布 DeepSeek-V3.1&lt;/a&gt;，官方提到 DeepSeek-V3.1 使用了 UE8M0 FP8 Scale 的参数精度。&lt;/p&gt; 
&lt;p&gt;在 DeepSeek 官方公众号文章页面，DeepSeek 进一步解释称：&lt;strong&gt;UE8M0 FP8 是针对即将发布的下一代国产芯片设计&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0821/170943_HWBZ_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;FP 英文全称为 Floating Point，是 IEEE 定义的标准浮点数类型。UE8M0 FP8 在 AI 模型领域代表一种模型精度。&lt;/p&gt; 
&lt;p&gt;人工智能领域的企业家与技术专家、清华大学计算机系人工智能所博士梁斌表示，UE8M0 FP8 和英伟达的 FP8 是两个东西，两套标准。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;DeepSeek 这次为什么非要强调 UE8M0 FP8 呢？这个和英伟达的 FP8 是两个东西，两套标准，正式决裂。&lt;/p&gt; 
 &lt;p&gt;显存的发展是有限的，而模型的发展是快速的，对每个参数的表达必须通过量化进行压缩，FP36 就是 36 位表达一个参数，FP8 就是 8 位表达一个参数，在可接受的范围内，肯定是越低的表达，在显存里面能装下更多的参数。而就是 FP8 有英伟达的 E4M3 / E5M2 方案和 DS 的这个 UE8M0 方案，主要区别就是前者有 3-2 位的小数表达，后者没有小数表达。&lt;/p&gt; 
 &lt;p&gt;前者精度好，后者功耗低，运算快，对芯片要求低。&lt;/p&gt; 
 &lt;p&gt;现在 DeepSeek 这么搞，加上国产芯片都向这个标准靠拢，这是彻底和英伟达决裂了，以后其他推理模型，要么选择 DS 这套体系，要么选择英伟达体系，国内芯片公司也积极向这套体系靠拢。&lt;/p&gt; 
 &lt;p&gt;现在华为他们那边真是为了适配这个标准，真是玩命干，干成了就是名垂千古，多大诱惑，而且我发现 DeepSeek 还真是有胆量，真是把国产大模型的发展推到了一个牛逼的高度上去，太了不起了。&lt;/p&gt; 
 &lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0825/145643_Tlcb_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;来源：&lt;em&gt;https://weibo.com/1497035431/Q1sKDAvWF&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368327</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368327</guid>
      <pubDate>Mon, 25 Aug 2025 06:57:23 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>基于 EventBridge 构筑 AI 领域高效数据集成方案</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;作者：肯梦&lt;/p&gt; 
&lt;h2&gt;引言：AI 时代的数据处理变革&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-8cc1e7a6bfb9dd797a7f1292d623a6f6e4c.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;人工智能技术的发展经历了从感知智能到生成智能，再到智能体和具身智能的跨越式演进。这一过程不仅体现在算法模型的不断突破，更深刻地反映在对数据处理能力要求的根本性变化。根据麦肯锡的调研数据显示，2022 年，全球有 50% 的公司部署了 AI 技术，投资超过总预算的 4%。生成式 AI（GenAI）的崛起进一步推动了企业转型，其在流程优化、个性化服务等方面的应用已经超越了传统 AI 的范畴。&lt;/p&gt; 
&lt;p&gt;在这一技术变革的浪潮中，数据处理能力的重要性愈发凸显。传统的数据处理架构主要围绕结构化数据的批量处理而设计，采用的是相对静态的 ETL 模式。然而，AI 时代的数据处理需求呈现出截然不同的特征：&lt;strong&gt;数据源更加多样化&lt;/strong&gt; ，包括文本、图像、音频、视频等多模态数据；&lt;strong&gt;处理要求更加实时化&lt;/strong&gt; ，需要支持流式数据的即时处理和响应；&lt;strong&gt;应用场景更加智能化&lt;/strong&gt;，需要结合大语言模型的推理能力进行数据的理解、转换和增强。&lt;/p&gt; 
&lt;p&gt;本文将从 AI 时代数据处理的挑战与机遇出发，深入分析事件驱动架构在 AI 数据处理中的技术优势，详细阐述 &lt;strong&gt;EventBridge for AI ETL&lt;/strong&gt; 的实践案例，展示其在不同应用场景中的价值。我们希望能够为企业在 AI 转型过程中的数据基础设施建设，提供有价值的技术指导和实践参考，推动 AI 技术在更广泛领域的落地应用。&lt;/p&gt; 
&lt;h2&gt;一、AI 时代数据处理的挑战与机遇&lt;/h2&gt; 
&lt;h3&gt;1. GenAI 的演进路径分析&lt;/h3&gt; 
&lt;p&gt;生成式 AI 的发展经历了从简单到复杂、从单一到多元的演进过程，每个阶段都对数据处理能力提出了不同的要求。深入理解这一演进路径，对于把握 AI 数据处理的发展趋势具有重要意义。&lt;/p&gt; 
&lt;h4&gt;最初起点：简单模型 API 调用阶段&lt;/h4&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-a124f78045e9adf466dfc06f6e7b3ac865a.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在生成式 AI 发展的初期阶段，应用架构相对简单直接。用户通过 Query 向大语言模型发送请求，模型基于预训练的知识生成 Response 并返回给用户。这种架构虽然现在看来可能过于"简陋"，但却是许多初期现象级 AI 应用产品的起点，如文本总结、AI 算命、AI 情感分析等应用都采用了这种直白的架构模式。&lt;/p&gt; 
&lt;p&gt;在这个阶段，数据处理的需求相对简单，主要集中在 Prompt 的优化上。开发者需要通过精心设计的提示词来引导模型生成期望的输出，数据处理更多体现在输入文本的预处理和输出结果的后处理上。然而，这种简单的架构很快就暴露出明显的局限性：模型的知识截止时间限制了其对最新信息的获取能力，缺乏领域专业知识导致在特定场景下的表现不佳，无法处理个性化和上下文相关的复杂查询。&lt;/p&gt; 
&lt;h4&gt;增强上下文：RAG 技术的兴起&lt;/h4&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-5d5b9498d0de35c167ba3f4e82d5bcb0b08.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;为了解决简单模型 API 调用的局限性，RAG（Retrieval-Augmented Generation）技术应运而生。RAG 的核心思想是在模型生成回答之前，先从外部知识库通过之前用于搜广推的向量检索技术方案，检索相关信息，然后将检索到的信息作为上下文提供给模型，从而增强模型的生成能力。&lt;/p&gt; 
&lt;p&gt;RAG 技术的引入标志着 AI 数据处理进入了一个新的阶段，数据处理需求显著增加，主要体现在两个方面：首先是问题域特有信息的处理，例如在分析用户在某个平台的购买喜好时，需要实时获取和处理用户在该平台的购买数据；其次是时效信息的处理，如股票信息、实时新闻等需要不断更新的动态数据。&lt;/p&gt; 
&lt;p&gt;RAG 技术的实现需要构建一个完整的数据处理管道，包括数据收集、预处理、向量化、存储、检索和后处理等多个环节。这对数据处理系统的实时性、准确性和可扩展性提出了更高的要求。根据 Menlo Ventures 发布的市场调研报告，RAG 以 51% 的市场份额在企业市场中占据绝对优势，充分说明其在实际应用中的重要地位。&lt;/p&gt; 
&lt;h4&gt;Agent 模式：智能体的规划与工具能力&lt;/h4&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-686c9ad4ec9e029054b610fae9f42473058.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;随着 AI 技术的进一步发展，单纯的检索增强已经无法满足复杂应用场景的需求。Agent 模式的出现代表了 AI 应用架构的又一次重大演进。Agent 是在特定环境下具备 plan+tools 能力的智能体，其中"特定环境"限制了 Agent 的创建面向特定的场景和问题域，"plan" 说明 Agent 具有思考和规划能力，且能够根据反馈进行循环迭代，"tools" 则是指 Agent 具备与外部交互的能力。&lt;/p&gt; 
&lt;p&gt;Agent 模式对事件驱动和数据处理提出了更加复杂和多样化的需求。Agent 需要能够动态地选择和调用不同的工具来完成任务，这要求事件驱动系统具备高度的灵活性和可扩展性。同时，Agent 的规划和决策过程需要基于实时的环境信息和历史数据，这对数据的实时性和一致性提出了严格要求。&lt;/p&gt; 
&lt;h3&gt;2. 数据种类的多样化挑战&lt;/h3&gt; 
&lt;p&gt;AI 时代的数据处理面临着前所未有的数据种类多样化挑战。与传统的以结构化数据为主的处理模式不同，AI 应用需要处理包括文本、图像、音频、视频在内的多模态数据，每种数据类型都有其独特的处理要求和技术挑战。&lt;/p&gt; 
&lt;h4&gt;结构化数据&lt;/h4&gt; 
&lt;p&gt;结构化数据具有固定的格式和明确的字段定义，是传统数据处理系统最擅长处理的数据类型。在 AI 应用中，结构化数据主要来源于数据库、数据仓库、业务系统等，包括用户信息、交易记录、日志数据等。这类数据的处理相对成熟，主要挑战在于如何高效地进行数据清洗、转换和集成。&lt;/p&gt; 
&lt;p&gt;然而，即使是结构化数据的处理，在 AI 时代也面临新的挑战。首先是数据量的急剧增长，根据 IDC 的预测，全球数据量将从 2020 年的 64.2ZB 增长到 2025 年的 175ZB 。其次是数据源的多样化，企业需要整合来自不同系统、不同格式的结构化数据。最后是实时性要求的提高，AI 应用往往需要基于最新的数据进行推理和决策。&lt;/p&gt; 
&lt;h4&gt;非结构化数据&lt;/h4&gt; 
&lt;p&gt;非结构化数据在 AI 应用中占据越来越重要的地位。文本数据是较为通用的非结构化数据类型，包括文档、邮件、社交媒体内容、客服对话等。这类数据的处理需要运用自然语言处理技术，包括分词、实体识别、情感分析、语义理解等。&lt;/p&gt; 
&lt;p&gt;图像和视频数据的处理更加复杂，需要运用计算机视觉技术进行特征提取、目标检测、图像分类等。音频数据的处理则涉及语音识别、音频分类、声纹识别等技术。每种非结构化数据都需要专门的预处理、特征提取和向量化技术，这大大增加了数据处理系统的复杂性。&lt;/p&gt; 
&lt;h4&gt;半结构化数据&lt;/h4&gt; 
&lt;p&gt;半结构化数据是介于完全结构化的数据和完全无结构的数据之间的一种数据形式。它不符合关系数据库或其他数据表形式的严格结构，但包含标签或其他标记，用于分隔语义元素和执行记录和字段的层次结构。这使得它比非结构化数据更容易分析，也更具灵活性。&lt;/p&gt; 
&lt;p&gt;AI 系统，特别是机器学习和深度学习模型，需要大量的、多样化的数据进行训练和推理。半结构化数据凭借其灵活性和丰富的上下文信息，在 AI 的多个关键环节中扮演着核心角色。譬如标注信息存储，特征工程，A2A Message Events 等等。&lt;/p&gt; 
&lt;h4&gt;多模态数据的融合处理&lt;/h4&gt; 
&lt;p&gt;随着 AI 技术的发展，越来越多的应用需要同时处理多种模态的数据。例如，智能客服系统需要同时处理文本、语音和图像信息；智能推荐系统需要结合用户的行为数据、内容特征和社交关系等多维信息。多模态数据的融合处理不仅需要处理每种模态的数据，还需要建立不同模态之间的关联和映射关系。&lt;/p&gt; 
&lt;p&gt;这种融合处理的挑战在于如何保证不同模态数据的时间同步、语义一致和质量统一。同时，多模态数据的存储和检索也需要专门的技术支持，传统的关系型数据库往往无法满足这种需求，需要采用向量数据库、图数据库等新型存储技术。&lt;/p&gt; 
&lt;h3&gt;3. 主流数据采集方式的演变&lt;/h3&gt; 
&lt;p&gt;AI 时代的数据采集方式相比传统模式发生了显著变化。传统的数据采集主要依赖定期的批量抽取，而 AI 应用往往需要实时或近实时的数据流。这种变化对数据采集系统的架构和性能提出了新的要求。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;实时数据流采集&lt;/strong&gt;成为主流趋势。通过消息队列、流处理框架等技术，系统能够实时捕获和处理数据变化。Apache Kafka、Apache RocketMQ 等流处理平台在 AI 数据采集中发挥着越来越重要的作用。根据市场研究数据，流处理技术已经成为 2024 年数据集成的关键趋势。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;API 驱动的数据采集&lt;/strong&gt;也变得越来越普遍。通过 RESTful API、GraphQL 等接口，系统能够按需获取外部数据源的信息。这种方式特别适合处理第三方服务的数据，如社交媒体数据、天气信息、金融数据等。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;事件驱动的数据采集&lt;/strong&gt;是另一个重要趋势。当特定事件发生时，系统自动触发数据采集和处理流程。这种方式能够大大提高数据处理的效率和实时性，特别适合处理用户行为数据、系统日志等事件型数据。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;4. AI 时代的数据集成挑战&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-8972399c6e10cb00422a0c0e42751db5008.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;（图源：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2FRLanceMartin%2Fstatus%2F1673380038274695169%EF%BC%89" target="_blank"&gt;https://x.com/RLanceMartin/status/1673380038274695169）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;上图是 Langchain 在 RAG 领域定义的数据集成。诚然它具有模块化、声明式设计，并为我们提供了大量实用程序和辅助功能，但是在工程化的复杂度依旧存在，我们依然会陷入针对 Data 领域的抽象和工程化实现。&lt;/p&gt; 
&lt;p&gt;所以，在 AI 与数据集成的实践过程中，我们总结出企业普遍面临三大核心痛点，这些痛点不仅影响了 AI 应用的开发效率，也制约了 AI 技术的规模化应用。&lt;/p&gt; 
&lt;h4&gt;扩展难：数据源异构性挑战&lt;/h4&gt; 
&lt;p&gt;随着企业数字化程度的提高，数据源的种类和数量呈爆炸式增长。企业需要整合来自 ERP、CRM、OA、电商平台、社交媒体、IoT 设备等各种系统的数据。这些数据源在数据格式、接口协议、更新频率、访问权限等方面存在巨大差异。&lt;/p&gt; 
&lt;p&gt;一个简单的数据集成项目在初期往往进展顺利，但随着需要接入的数据源增加，系统的复杂度呈指数级增长。每增加一个新的数据源，开发团队都需要了解其特定的数据格式和接口规范，开发相应的连接器和转换逻辑，并进行充分的测试和验证。这种线性增长的开发模式严重制约了 AI 项目的扩展能力。&lt;/p&gt; 
&lt;p&gt;更为严重的是，不同数据源之间往往存在数据格式不一致、字段命名不规范、数据质量参差不齐等问题。例如，同样是用户信息，不同系统可能使用不同的用户 ID 格式，时间字段可能采用不同的时区和格式，地址信息可能有不同的结构化程度。这些差异需要在数据集成过程中进行统一处理，进一步增加了系统的复杂性。&lt;/p&gt; 
&lt;h4&gt;运维难：业务复杂性增长&lt;/h4&gt; 
&lt;p&gt;AI 数据处理系统的运维复杂性远超传统的数据处理系统。首先，AI 应用对数据的实时性要求更高，任何数据延迟都可能影响模型的推理效果。其次，AI 数据处理涉及多个环节，包括数据采集、清洗、转换、向量化、存储、检索等，每个环节都可能出现问题。最后，AI 模型的迭代更新频繁，数据处理逻辑也需要相应调整。&lt;/p&gt; 
&lt;p&gt;在实际运维过程中，运维团队经常面临各种突发问题：数据源突然变更接口格式导致数据采集中断，数据质量问题导致模型推理结果异常，系统负载突增导致处理延迟，存储空间不足导致数据丢失等。这些问题往往需要跨团队协作解决，涉及数据工程师、算法工程师、运维工程师等多个角色。&lt;/p&gt; 
&lt;p&gt;传统的运维方式主要依赖人工监控和处理，这种方式在面对 AI 数据处理系统的复杂性时显得力不从心。企业迫切需要智能化的运维工具和自动化的故障处理机制，以降低运维成本和提高系统可靠性。&lt;/p&gt; 
&lt;h4&gt;稳定性差：数据链路可靠性问题&lt;/h4&gt; 
&lt;p&gt;数据链路的稳定性是 AI 应用能否成功上线生产环境的关键因素。在 AI 应用中，数据质量和处理链路的任何问题都可能导致模型推理结果的偏差甚至错误，进而影响业务决策和用户体验。&lt;/p&gt; 
&lt;p&gt;数据链路的稳定性问题主要体现在几个方面：数据丢失或重复，由于网络故障、系统异常等原因导致数据在传输过程中丢失或重复处理；数据延迟，由于处理能力不足、网络拥塞等原因导致数据处理延迟，影响 AI 应用的实时性；数据质量下降，由于数据源变更、处理逻辑错误等原因导致数据质量下降，影响模型的推理效果；系统故障，由于硬件故障、软件 bug 等原因导致整个数据处理链路中断。&lt;/p&gt; 
&lt;p&gt;这些稳定性问题的根本原因在于传统数据处理架构的紧耦合设计。在紧耦合架构中，任何一个组件的故障都可能影响整个系统的运行。同时，缺乏有效的监控和告警机制，问题往往在造成严重影响后才被发现。&lt;/p&gt; 
&lt;p&gt;为了解决这些问题，业界开始探索&lt;strong&gt;基于事件驱动架构的松耦合设计&lt;/strong&gt;。通过将数据处理流程分解为独立的事件和处理单元，系统能够实现更好的容错能力和可扩展性。同时，通过引入智能监控和自动恢复机制，系统能够及时发现和处理各种异常情况，保证数据链路的稳定运行。&lt;/p&gt; 
&lt;h2&gt;二、AI 数据处理的技术基石 - 事件驱动架构&lt;/h2&gt; 
&lt;h3&gt;1. 事件驱动架构的核心概念&lt;/h3&gt; 
&lt;p&gt;事件驱动架构（Event-Driven Architecture，EDA）作为一种现代软件架构模式，为解决 AI 时代数据处理的复杂性挑战提供了强有力的技术基础。&lt;/p&gt; 
&lt;h4&gt;Event 的本质：状态变化的数字化表达&lt;/h4&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-c23ddafbecbf58e1e1f100faae6584d1b30.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在事件驱动架构中，Event（事件）是系统的核心概念。简单来说，事件就是状态的显著变化，是一切能够输入计算机中且能被处理的符号的数字化表达。这种定义看似简单，但却蕴含着深刻的技术内涵。&lt;/p&gt; 
&lt;p&gt;以一个典型的 4S 店售卖汽车的业务场景为例，我们可以清晰地看到事件的本质特征。当客户购买汽车并且其状态从"For Sale"变为"Sold"时，这构成了一个销售事件。成功交易后，从账户中扣除金额形成了一个支付事件。用户点击预订试驾后，将预约信息添加到指定用户的操作产生了一个预约事件。甚至用户资料和预约单本身也可以被视为事件的载体。&lt;/p&gt; 
&lt;p&gt;这种事件化的思维方式具有重要的技术优势。首先，事件提供了系统状态变化的完整记录，使得系统具备了天然的审计和回溯能力。其次，事件的异步特性使得系统组件之间能够实现松散耦合，提高了系统的可扩展性和容错能力。最后，事件的标准化格式使得不同系统之间的集成变得更加简单和可靠。&lt;/p&gt; 
&lt;p&gt;在 AI 数据处理场景中，事件的概念得到了进一步的扩展和深化。&lt;strong&gt;数据的产生、变更、处理、存储等各个环节都可以被抽象为事件。&lt;/strong&gt; 例如，当新的训练数据上传到系统时，产生数据接收事件；当数据经过清洗和转换后，产生数据处理完成事件；当向量化处理完成后，产生向量生成事件；当数据成功存储到向量数据库后，产生数据入库事件。这种事件化的处理方式使得整个 AI 数据处理流程变得清晰、可控和可监控。&lt;/p&gt; 
&lt;h3&gt;2. EventBridge 架构深度解析&lt;/h3&gt; 
&lt;p&gt;阿里云 EventBridge 作为事件驱动架构的具体实现，在技术架构设计上充分体现了 EDA 的核心理念，同时针对 AI 数据处理的特殊需求进行了深度优化。&lt;/p&gt; 
&lt;h4&gt;源、过滤、转换、目标&lt;/h4&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-36fcd755cf41bdae351464035f803102931.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;EventBridge 的技术架构围绕四大核心能力构建：源（Source）、过滤（Filter）、转换（Transform）、目标（Sink）。这四大能力形成了完整的事件处理链路，为 AI 数据处理提供了全面的技术支撑。&lt;/p&gt; 
&lt;p&gt;源（Source）能力负责&lt;strong&gt;事件的接入和采集&lt;/strong&gt;。EventBridge 支持多种类型的事件源，包括结构化数据源和非结构化数据源。结构化数据源涵盖了消息队列（Kafka、RocketMQ 等）、数据库（关系型数据库、数据仓库）、可观测性平台（SLS、Prometheus）、API 接口等。非结构化数据源则包括对象存储（CSV、PDF、TXT 等文件格式）以及各种自定义数据源。这种多样化的数据源支持使得 EventBridge 能够适应 AI 应用中复杂多变的数据接入需求。&lt;/p&gt; 
&lt;p&gt;过滤（Filter）能力提供了&lt;strong&gt;灵活的事件筛选机制&lt;/strong&gt;。通过事件模式匹配，系统可以根据预定义的规则对事件进行筛选和路由。EventBridge 支持多种匹配模式，包括指定值匹配、前缀匹配、包含匹配、除外匹配、多模式匹配等。这种细粒度的过滤能力使得系统能够精确地控制事件的处理流程，避免不必要的计算资源消耗。&lt;/p&gt; 
&lt;p&gt;转换（Transform）能力是 &lt;strong&gt;EventBridge 在 AI 领域的核心创新&lt;/strong&gt;。系统支持多种转换方式，包括自定义代码转换、自定义模型转换、自定义 API 转换等。特别值得注意的是，EventBridge 集成了百炼模型服务，能够调用大语言模型进行智能化的数据转换。这种 AI 驱动的转换能力使得系统能够处理传统 ETL 工具难以处理的复杂数据转换任务。&lt;/p&gt; 
&lt;p&gt;目标（Sink）能力负责&lt;strong&gt;处理后事件的输出和存储&lt;/strong&gt;。EventBridge 支持多种目标类型，包括消息队列、数据库、数据仓库、可观测性平台、函数计算、API 接口、通知服务等。这种多样化的目标支持使得处理后的数据能够灵活地流向不同的下游系统，满足 AI 应用的多样化需求。&lt;/p&gt; 
&lt;h4&gt;事件总线模型：N:M 的灵活路由&lt;/h4&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-1f5e041eea91f019016746d410608279ec3.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;EventBridge 的事件总线模型采用了经典的 EDA（事件驱动）架构中的 N:M 模型，提供了多事件路由、事件匹配、事件转换等核心能力，帮助用户快速搭建事件驱动架构。&lt;/p&gt; 
&lt;p&gt;在事件总线模型中，多个事件源可以同时向事件总线发送事件，事件总线根据预定义的规则将事件路由到相应的目标服务。这种 N:M 的路由模式具有重要的技术优势。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;首先，它实现了事件源和目标服务之间的完全解耦，事件源不需要知道有哪些目标服务在消费事件，目标服务也不需要知道事件来自哪个源。&lt;/li&gt; 
 &lt;li&gt;其次，它支持动态的路由配置，可以在运行时添加或删除事件源和目标服务，而不影响系统的正常运行。&lt;/li&gt; 
 &lt;li&gt;最后，它提供了强大的事件复制和广播能力，一个事件可以同时被多个目标服务处理，实现了数据的多路分发。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在 AI 数据处理场景中，事件总线模型的这些特性具有重要价值。例如，当新的训练数据到达时，可以同时触发数据预处理、质量检查、备份存储等多个处理流程。当模型推理完成时，可以同时更新缓存、记录日志、发送通知等。这种并行处理能力大大提高了 AI 数据处理的效率。&lt;/p&gt; 
&lt;h4&gt;事件流模型：1:1 的高效传输&lt;/h4&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-f8ed565c46144128d0540b598ec6333a67a.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;除了事件总线模型，EventBridge 还提供了事件流模型，采用标准的 Streaming（1:1）流式处理场景。事件流模型没有总线概念，适用于端到端的数据转储、数据同步及数据处理等场景，帮助用户轻松构建云上数据管道服务。&lt;/p&gt; 
&lt;p&gt;事件流模型的核心优势在于其高效的点对点传输能力。在这种模型中，事件从源直接流向目标，中间经过匹配和转换处理，但不需要经过复杂的路由逻辑。这种简化的处理流程使得事件流模型在处理大量数据时具有更高的性能和更低的延迟。&lt;/p&gt; 
&lt;p&gt;在 AI 数据处理中，事件流模型特别适合处理实时数据流。例如，将实时产生的用户行为数据直接流式处理并存储到向量数据库中，或者将传感器数据实时转换为模型输入格式。这种高效的流式处理能力为实时 AI 应用提供了重要的技术支撑。&lt;/p&gt; 
&lt;h3&gt;3. 事件驱动架构在 AI 领域的应用价值&lt;/h3&gt; 
&lt;p&gt;事件驱动架构在 AI 领域的应用价值不仅体现在技术层面的优势，更重要的是它为 AI 应用的规模化部署和运营提供了坚实的基础。&lt;/p&gt; 
&lt;h4&gt;松散耦合设计&lt;/h4&gt; 
&lt;p&gt;松散耦合是事件驱动架构的核心特征，也是其在 AI 领域应用的重要价值所在。在 AI 系统中，不同的组件往往由不同的团队开发和维护，包括数据工程团队、算法团队、平台团队等。&lt;strong&gt;松散耦合的设计使得这些团队能够独立地开发和部署各自的组件，而不需要过多地考虑其他组件的实现细节。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;这种设计理念特别适合 AI 项目的迭代开发模式。AI 算法和模型往往需要频繁地更新和优化，如果系统采用紧耦合的设计，每次算法更新都可能需要修改多个组件。而在松散耦合的架构中，算法的更新只需要修改相应的事件处理逻辑，不会影响其他组件的正常运行。&lt;/p&gt; 
&lt;h4&gt;可扩展性/稳定性保障&lt;/h4&gt; 
&lt;p&gt;AI 应用的负载往往具有很强的不确定性和波动性。在某些时段，系统可能需要处理大量的数据和请求；而在其他时段，系统的负载可能相对较低。&lt;strong&gt;事件驱动架构的可扩展性特征使得系统能够根据实际负载动态调整资源配置。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在事件驱动架构中，每个组件都可以独立地进行扩展。当某个组件的处理能力不足时，可以增加该组件的实例数量，而不需要扩展整个系统。这种细粒度的扩展能力使得资源配置更加精确和高效。&lt;/p&gt; 
&lt;h4&gt;端到端的实时传输&lt;/h4&gt; 
&lt;p&gt;AI 应用往往对实时性有很高的要求，特别是在实时推理、智能客服等场景中。&lt;strong&gt;事件驱动架构的实时传输特性使得系统能够快速响应各种事件，大大提高了 AI 应用的实时性。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;采用事件驱动架构的系统在可扩展性、可维护性和可靠性方面都有显著提升&lt;/strong&gt; 。在 AI 领域，这些优势更加明显，因为 &lt;strong&gt;AI 应用往往需要处理更加复杂和多变的数据处理需求&lt;/strong&gt;。&lt;/p&gt; 
&lt;h2&gt;三、解决方案详解 EventBridge 多源 RAG 能力&lt;/h2&gt; 
&lt;p&gt;EventBridge 多源 RAG 能力代表了事件驱动架构在 AI 数据处理领域的重要突破。这一能力的核心价值在于将传统的数据处理流程与现代 AI 技术深度融合，为企业构建智能化的数据管道提供了全新的技术范式。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-123f71ea4cd228e5b9f78b033e0552adf8b.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;1. 多源数据接入&lt;/h3&gt; 
&lt;p&gt;在 AI 时代，数据源的多样性和复杂性达到了前所未有的程度。EventBridge 多源 RAG 能力通过统一的接入框架，实现了对各种异构数据源的无缝集成，为 AI 应用提供了丰富的数据基础。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-3c487855e59a3783e7f1da61b7b2e2f363c.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h4&gt;非结构化数据 Loader 技术&lt;/h4&gt; 
&lt;p&gt;非结构化数据在 AI 应用中占据越来越重要的地位，特别是在 RAG（检索增强生成）场景中。EventBridge 针对非结构化数据的处理需求，开发了一套完整的 Loader 技术体系，支持多种数据格式的智能解析和处理。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;分块处理策略是非结构化数据处理的关键技术。&lt;/strong&gt; 在 RAG 应用中，长文档需要被分割成适当大小的文本块，以便进行向量化和检索。&lt;strong&gt;EventBridge 提供了多种分块策略，包括基于字符数的固定分块、基于段落结构的逻辑分块等。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;单文档与批量加载是系统设计中的重要考虑因素。对于实时性要求较高的场景，系统支持单文档的即时加载和处理，确保新文档能够快速进入 RAG 系统。对于批量数据处理场景，系统提供了高效的批量加载机制，支持并行处理和断点续传，确保大规模数据的可靠处理。&lt;/p&gt; 
&lt;h4&gt;结构化数据源集成&lt;/h4&gt; 
&lt;p&gt;结构化数据源的集成是 EventBridge 多源 RAG 能力的另一个重要组成部分。与非结构化数据不同，结构化数据具有明确的格式定义和字段结构，但其集成挑战主要体现在数据源的多样性和实时性要求上。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;数据系统集成是结构化数据接入的重要方式。EventBridge 支持主流的消息队列（如 Kafka、RocketMQ、MQTT），日志服务（如 SLS，Simple Log Service），数据库服务（如 MySQL）等。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;实时流数据处理是 EventBridge 在结构化数据处理方面的重要创新。&lt;/strong&gt; 系统采用了流式处理架构，能够实时处理高吞吐量的数据流。&lt;strong&gt;可实现复杂的流式数据转换和聚合操作，为实时 RAG 应用提供丰富的事件源。&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;2. 向量数据库入库优化&lt;/h3&gt; 
&lt;p&gt;向量数据库是 RAG 应用的核心基础设施，EventBridge 在向量数据库入库方面的优化为 RAG 应用提供了高效、可靠的数据存储支撑。&lt;/p&gt; 
&lt;h4&gt;向量数据库支持&lt;/h4&gt; 
&lt;p&gt;随着 AI 技术的发展，向量数据库市场呈现出百花齐放的态势。不同的向量数据库在性能特征、功能特性、成本结构等方面各有优势。&lt;strong&gt;EventBridge 通过提供统一的向量数据库接入接口，支持 Dashvector、Milvus 等主流向量数据库产品&lt;/strong&gt;，为用户提供了灵活的选择空间。&lt;/p&gt; 
&lt;h4&gt;传统数据库向量插件兼容&lt;/h4&gt; 
&lt;p&gt;除了向量数据库，许多传统数据库也推出了向量扩展插件，如 PostgreSQL 的 PGvector、MySQL 的向量索引等。这些向量插件使得用户能够在现有的数据库基础设施上实现向量存储和检索功能，降低了系统的复杂度和成本。&lt;strong&gt;EventBridge 也即将支持向量插件方式入库&lt;/strong&gt;，为开发者带来更多选择。&lt;/p&gt; 
&lt;h4&gt;一键白屏化入库体验&lt;/h4&gt; 
&lt;p&gt;为了降低向量数据库使用的技术门槛，&lt;strong&gt;EventBridge 提供了一键白屏化的入库体验&lt;/strong&gt;。用户只需要通过简单的图形界面配置，就能够实现复杂的向量数据处理和入库流程。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;直观的拖拽式配置界面：用户可以通过拖拽的方式配置数据源、处理逻辑、目标数据库等，系统会自动生成相应的处理流程。这种可视化的配置方式大大降低了系统使用的复杂度。&lt;/li&gt; 
 &lt;li&gt;丰富的预置模板：涵盖常见的 RAG 应用场景，用户可以基于这些模板快速搭建自己的数据处理流程，然后根据具体需求进行定制化调整。&lt;/li&gt; 
 &lt;li&gt;完善的监控仪表板和告警机制：用户可以实时查看数据处理的状态、性能指标、错误信息等，及时发现和解决问题。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;四、解决方案详解实时推理与异步推理能力&lt;/h2&gt; 
&lt;p&gt;EventBridge 在推理接入方面提供了灵活的选择，支持实时推理和异步推理两种模式，以满足不同应用推理场景的需求。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-8f190f82a3a03b30828cb134e55685994ad.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;1. 智能数据转换能力&lt;/h3&gt; 
&lt;p&gt;数据转换是 ETL 流程中最复杂也是最关键的环节。EventBridge 多源 RAG 能力在数据转换方面的创新，主要通过深度集成大语言模型（LLM）的推理能力，将其自然语言理解和生成能力引入数据处理流程，实现传统 ETL 工具难以处理的复杂数据转换任务。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;在&lt;strong&gt;数据清洗&lt;/strong&gt;方面，LLM 能够智能识别和处理各种数据质量问题。例如，基于上下文自动纠错包含拼写错误的文本数据；将格式不规范的地址信息标准化为统一格式；将包含缩写和俚语的文本转换为标准的表达方式。&lt;/li&gt; 
 &lt;li&gt;在&lt;strong&gt;数据增强&lt;/strong&gt;方面，LLM 能够为原始数据添加语义信息，为 AI 应用提供更加丰富的数据基础。例如，从产品描述文本中自动提取产品的关键特征和属性；分析用户评论的情感倾向和关键观点；提取新闻文章的关键事件和实体信息。&lt;/li&gt; 
 &lt;li&gt;在&lt;strong&gt;数据转换&lt;/strong&gt;方面，LLM 能够实现复杂的格式转换和结构重组，大大降低了数据集成的复杂度。例如，将非结构化的文本转换为结构化的 JSON 格式；将表格数据转换为自然语言描述；将多种数据源的信息融合为统一的数据模型等。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. 结构化输出技术&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-ac9fde0573e27f999a7146f461853e0d542.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;结构化输出是 EventBridge 在 AI 数据处理方面提供的重要能力。传统的大语言模型输出通常是非结构化的自然语言文本，往往需要进行二次解析和处理（例如，使用正则表达式、自然语言处理工具等方法从模型输出中提取结构化信息），这个过程不仅复杂而且容易出错。EventBridge 支持结构化输出，使得大语言模型能够直接生成 JSON、XML 等结构化的数据格式，避免了二次解析的复杂性，大大简化了数据处理流程。&lt;/p&gt; 
&lt;p&gt;在实际应用中，结构化输出技术能够支持复杂的数据结构定义。用户可以定义包含嵌套对象、数组、枚举值等复杂结构的输出格式，模型会严格按照定义的格式生成输出。这种精确的格式控制使得 AI 数据处理能够与下游系统无缝集成。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;JsonSchema 原生支持：&lt;/strong&gt; JsonSchema 是 JSON 数据格式的标准化描述语言，广泛应用于 API 设计和数据验证。EventBridge 提供了对 JsonSchema 的原生支持，允许用户定义期望的输出格式，并确保模型输出严格符合定义的格式。JsonSchema 支持复杂的数据结构定义，包括字段类型、约束条件、默认值等详细信息，系统会在模型推理过程中进行实时验证和纠正，确保数据处理结果的一致性和可靠性。对于支持 JsonSchema 的模型，系统会优先使用其原生能力进行结构化输出，通常具有更好的性能和更高的准确性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;提示词注入优化：&lt;/strong&gt; 对于不支持 JsonSchema 原生能力的模型，EventBridge 采用智能提示词注入技术。系统会分析用户输出格式，并结合模型特性，生成相应的提示词模板并注入到模型的输入中，引导模型生成符合要求的结构化输出。系统将根据模型的输出质量动态调整提示词，优化输出效果。在多轮对话和上下文处理方面，系统能够智能管理提示词上下文，维护完整的对话历史，确保每轮输出的格式一致。因此，EventBridge 能够支持各类大语言模型，无论其是否原生支持结构化输出，都能生成高质量的结构化数据，为用户提供更广泛的模型兼容性和更大的选择空间。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;五、EventBridge for AI ETL 的最佳实践&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-f0e26cd6aafdad8a5d04ab44b70d07a64a8.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;EventBridge 通过丰富的应用场景实践，为不同行业和业务需求提供了完整的解决方案。这些最佳实践不仅验证了技术方案的可行性，更为企业在 AI 数据转型过程中提供了宝贵的经验参考。&lt;/p&gt; 
&lt;h3&gt;1. 数据预处理（Data Preprocessing）&lt;/h3&gt; 
&lt;p&gt;数据预处理是机器学习和 AI 应用中的关键环节，数据质量直接影响模型的训练效果和推理准确性。EventBridge 在数据预处理方面提供了全面的解决方案，特别是在 SFT（Supervised Fine-Tuning）训练数据准备方面展现出独特优势。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-b83f1fd008d901e4c8b765be1f2c2240d15.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h4&gt;训练数据准备&lt;/h4&gt; 
&lt;p&gt;监督微调（SFT）是大语言模型训练中的重要环节，需要高质量的标注数据来指导模型学习特定任务的能力。EventBridge 通过事件驱动的数据处理流程，能够高效地处理和准备 SFT 训练所需的数据集。&lt;/p&gt; 
&lt;p&gt;在数据收集阶段，系统能够从多个数据源实时收集原始数据，包括用户对话记录、文档库、知识库、API 响应等。通过事件驱动的方式，当新的数据产生时，系统能够立即触发数据处理流程，确保训练数据的时效性。例如，当客服系统产生新的对话记录时，系统会自动提取对话内容，进行格式标准化，并添加到训练数据集中。&lt;/p&gt; 
&lt;p&gt;在数据标注方面，EventBridge 集成了大语言模型的能力，能够实现半自动化的数据标注。系统可以使用预训练的模型对原始数据进行初步标注，然后通过人工审核和修正，形成高质量的训练样本。这种人机结合的标注方式大大提高了数据标注的效率和质量。&lt;/p&gt; 
&lt;p&gt;在数据格式转换方面，不同的模型训练框架往往需要特定的数据格式。EventBridge 能够借助中间函数计算节点，根据目标模型的要求，自动将数据转换为相应的格式。例如，将对话数据转换为 ChatML 格式，将问答数据转换为 Alpaca 格式等。这种自动化的格式转换能力大大简化了数据准备的工作量。&lt;/p&gt; 
&lt;h4&gt;数据错误处理&lt;/h4&gt; 
&lt;p&gt;数据错误是影响 AI 模型性能的重要因素，包括数据缺失、格式错误、逻辑错误等多种类型。EventBridge 通过 LLM 节点和函数节点，能够有效提高数据质量。&lt;/p&gt; 
&lt;p&gt;在数据缺失处理方面，系统采用了多种策略。对于数值型数据，可以使用均值、中位数、众数等统计方法进行填充；对于分类型数据，可以使用最频繁的类别进行填充；对于文本数据，可以使用语言模型生成合理的填充内容。系统会根据数据的特征和业务需求自动选择最合适的填充策略。&lt;/p&gt; 
&lt;p&gt;在格式错误处理方面，系统能够智能识别和修复各种格式问题。例如，对于日期时间数据，系统能够识别多种日期格式并统一转换为标准格式；对于数值数据，系统能够处理千分位分隔符、货币符号等格式问题；对于文本数据，系统能够处理编码问题、特殊字符等。&lt;/p&gt; 
&lt;p&gt;在逻辑错误处理方面，系统通过规则引擎和机器学习模型相结合的方式进行检测和修复。例如，检测年龄数据是否在合理范围内，检测地址信息是否符合地理逻辑，检测业务数据是否符合业务规则等。当发现逻辑错误时，系统会根据预定义的修复策略进行自动修复或标记为需要人工处理。&lt;/p&gt; 
&lt;h4&gt;数据重复去除&lt;/h4&gt; 
&lt;p&gt;数据重复是大规模数据处理中的常见问题，特别是在多源数据集成的场景中。EventBridge 提供了多过滤和中间过程转换，确保数据的唯一性和一致性。&lt;/p&gt; 
&lt;p&gt;在精确重复检测方面，系统通过哈希算法快速识别完全相同的记录。对于大规模数据集，系统采用了分布式哈希计算，能够在保证准确性的同时提高处理效率。&lt;/p&gt; 
&lt;p&gt;在近似重复检测方面，系统使用了多种相似度计算方法。对于文本数据，采用编辑距离、余弦相似度、Jaccard 相似度等方法；对于数值数据，采用欧氏距离、曼哈顿距离等方法；对于结构化数据，采用字段级别的相似度计算。系统会根据数据类型和业务需求自动选择最合适的相似度计算方法。&lt;/p&gt; 
&lt;p&gt;在重复处理策略方面，系统提供了多种选择。可以保留最新的记录，保留质量最高的记录，或者将重复记录合并为一条记录。系统还支持自定义的重复处理逻辑，用户可以根据具体的业务需求定义重复处理规则。&lt;/p&gt; 
&lt;h4&gt;数据缺失补全&lt;/h4&gt; 
&lt;p&gt;数据缺失是实际数据中的普遍现象，如何合理地处理缺失数据对模型性能有重要影响。EventBridge 可通过中间函数计算节点对数据进行处理和补全，提高数据的完整性和可用性。&lt;/p&gt; 
&lt;p&gt;在统计方法补全方面，系统支持多种经典的统计填充方法。对于数值型数据，可以使用均值、中位数、众数、线性插值、多项式插值等方法；对于分类型数据，可以使用众数、随机填充、基于分布的填充等方法。系统会根据数据的分布特征自动选择最合适的填充方法。&lt;/p&gt; 
&lt;p&gt;在机器学习方法补全方面，系统使用训练好的模型来预测缺失值。例如，使用回归模型预测数值型缺失值，使用分类模型预测分类型缺失值。这种方法能够考虑数据之间的复杂关系，通常能够获得更好的填充效果。&lt;/p&gt; 
&lt;p&gt;在深度学习方法补全方面，系统采用了自编码器、生成对抗网络等深度学习技术。这些方法能够学习数据的深层特征和复杂模式，对于高维数据和复杂缺失模式具有更好的处理效果。&lt;/p&gt; 
&lt;h3&gt;2. RAG 检索增强生成（Retrieval-augmented Generation）数据入库&lt;/h3&gt; 
&lt;p&gt;RAG 技术作为当前 AI 应用的重要范式，其数据入库过程的质量直接影响检索和生成的效果。如上文介绍 EventBridge 在 RAG 数据入库方面提供了从简单到复杂的完整解决方案。&lt;/p&gt; 
&lt;h4&gt;简易数据入库流程&lt;/h4&gt; 
&lt;p&gt;对於单一数据源的 RAG 应用场景，EventBridge 提供了简化的数据入库流程。这种流程特别适合快速原型开发和小规模应用部署。&lt;/p&gt; 
&lt;p&gt;在数据源配置方面，用户只需要指定数据源的类型和连接信息，系统会自动处理数据的读取和解析。支持的数据源包括对象存储（OSS）中的文档文件、数据库中的文本字段、API 接口返回的文本数据等。&lt;/p&gt; 
&lt;p&gt;在文档处理方面，系统提供了自动化的文档解析和分块处理。对于 PDF、Word、TXT 等常见文档格式，系统能够自动提取文本内容，并根据文档结构进行智能分块。分块策略可以基于段落、章节、固定长度等多种方式，用户可以根据具体需求进行配置。&lt;/p&gt; 
&lt;p&gt;在数据入库方面，系统支持多种向量数据库，用户可以选择最适合的存储方案。系统会自动处理向量数据的索引构建和存储优化，确保检索性能和存储效率。&lt;/p&gt; 
&lt;h4&gt;增强多源数据入库&lt;/h4&gt; 
&lt;p&gt;对于复杂的企业级 RAG 应用，往往需要整合来自多个数据源的信息。EventBridge 的增强多源数据入库能力能够处理这种复杂场景的需求。&lt;/p&gt; 
&lt;p&gt;在多源数据协调方面，系统提供了统一的数据处理框架。不同数据源的数据会被转换为统一的内部格式，然后进行统一的处理和存储。这种设计使得系统能够无缝地处理来自不同源的异构数据。&lt;/p&gt; 
&lt;p&gt;在数据融合方面，系统能够智能地合并来自不同源的相关信息。例如，将产品数据库中的产品信息与用户评论系统中的评论信息进行关联，形成更加完整的产品知识。系统使用实体识别和关系抽取技术来发现数据之间的关联关系。&lt;/p&gt; 
&lt;p&gt;在数据一致性方面，系统提供了多种一致性保证机制。包括数据版本管理、冲突检测和解决、数据同步等。当多个数据源包含相同实体的不同信息时，系统能够智能地进行信息合并和冲突解决。&lt;/p&gt; 
&lt;p&gt;在增量更新方面，系统支持实时的数据更新和同步。当源数据发生变化时，系统能够自动检测变化并更新相应的向量表示。这种增量更新能力确保了 RAG 系统能够获取最新的信息。&lt;/p&gt; 
&lt;h3&gt;3. 数据清洗与标准化 (Data Cleansing &amp;amp; Standardization)&lt;/h3&gt; 
&lt;p&gt;数据清洗与标准化是数据处理中的基础环节，EventBridge 通过集成大语言模型的能力，实现了智能化的数据清洗和标准化处理。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-3df87a70b68bd54dc14cdef67a33e9f367b.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;地址信息的标准化是一个典型的数据清洗场景。在实际应用中，来自不同渠道的地址信息往往格式不一、存在错别字、缺少关键信息等问题。EventBridge 通过 LLM 驱动的地址标准化能力，能够将各种格式的地址信息转换为统一的标准格式。&lt;/p&gt; 
&lt;p&gt;在地址解析方面，系统使用大语言模型来理解地址的语义结构。即使地址信息存在格式不规范、字段顺序混乱等问题，模型也能够准确识别出省、市、区、街道等各个组成部分。例如，对于"北京市海淀区中关村大街 1 号"这样的地址，系统能够准确解析出省份为"北京"，城市为"北京"，区县为"海淀区"，街道为"中关村大街 1 号"。&lt;/p&gt; 
&lt;p&gt;在错误纠正方面，系统能够自动识别和纠正地址中的错别字和格式错误。例如，将"北京市海定区"纠正为"北京市海淀区"，将"中关村大街一号"标准化为"中关村大街 1 号"。系统使用了地理知识库和语言模型相结合的方法，确保纠正的准确性。&lt;/p&gt; 
&lt;p&gt;在信息补全方面，系统能够根据已有的地址信息补全缺失的部分。例如，根据详细地址自动推断邮政编码，根据区县信息补全城市和省份信息。系统集成了完整的地理信息数据库，能够提供准确的地理信息补全。&lt;/p&gt; 
&lt;p&gt;在格式标准化方面，系统将所有地址信息转换为统一的标准格式。输出格式包括结构化的字段信息（省、市、区、街道、邮政编码等）和标准化的地址字符串。这种标准化的输出格式便于后续的数据处理和分析。&lt;/p&gt; 
&lt;h3&gt;4. 合规与隐私保护 (Compliance &amp;amp; Privacy Protection)&lt;/h3&gt; 
&lt;p&gt;在数据处理过程中，合规与隐私保护是不可忽视的重要方面。EventBridge 提供了全面的合规和隐私保护能力，确保数据处理符合相关法规要求。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-f4754e678d447efd2520ac1f756e6a15001.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;数据脱敏是保护隐私的重要技术手段，EventBridge 可借助大模型，实现隐私信息识别，隐私信息处理等多种数据脱敏处理场景。为用户提供端到端的数据处理能力。&lt;/p&gt; 
&lt;p&gt;通过这些全面的合规和隐私保护措施，EventBridge 可确保了企业应用中的数据处理过程的合法性和安全性，为企业数据提供可靠的合规安全保证。&lt;/p&gt; 
&lt;h2&gt;六、未来展望与发展路径&lt;/h2&gt; 
&lt;p&gt;AI 数据处理领域技术正处于快速发展的阶段，未来几年将会出现更多的技术创新和应用突破。EventBridge 作为这一领域的重要参与者，期待与更多开发者共同推动 AI 数据处理技术的发展和应用。&lt;/p&gt; 
&lt;h3&gt;AI 数据处理技术的发展方向&lt;/h3&gt; 
&lt;p&gt;在技术发展方向上，AI 数据处理将朝着更加智能化、自动化、实时化的方向发展。&lt;/p&gt; 
&lt;p&gt;智能化方面，未来的数据处理系统将更加依赖 AI 技术来实现自动化的数据理解、清洗、转换和增强。大语言模型的能力将进一步提升，能够处理更加复杂的数据处理任务。同时，多模态 AI 技术的发展将使得系统能够统一处理文本、图像、音频、视频等多种类型的数据。&lt;/p&gt; 
&lt;p&gt;自动化方面，数据处理流程将更加自动化，减少人工干预的需求。自动化的数据发现、数据治理、数据安全等功能将成为标准配置。机器学习技术将被广泛应用于数据处理流程的优化，系统能够自动学习和改进处理策略。&lt;/p&gt; 
&lt;p&gt;实时化方面，实时数据处理将成为主流需求。边缘计算技术的发展将使得数据处理能够在更接近数据源的地方进行，减少数据传输的延迟。流式处理技术将进一步成熟，能够支持更加复杂的实时数据处理场景。&lt;/p&gt; 
&lt;h3&gt;行业标准化趋势&lt;/h3&gt; 
&lt;p&gt;随着 AI 数据处理技术的成熟，行业标准化将成为重要趋势。标准化有助于降低技术门槛、促进技术交流、推动产业发展。在数据格式标准化方面，将出现更多的行业标准来规范数据的格式和结构，例如 CloudEvents 等。这些标准将有助于不同系统之间的数据交换和集成。&lt;/p&gt; 
&lt;p&gt;在 API 接口标准化方面，将出现统一的 API 规范来规范数据处理服务的接口。这些规范将有助于提高系统的互操作性和可移植性。&lt;/p&gt; 
&lt;h3&gt;技术挑战与解决方案&lt;/h3&gt; 
&lt;p&gt;未来的发展过程中，AI 数据处理技术仍将面临一些挑战，需要持续的技术创新来解决。&lt;/p&gt; 
&lt;p&gt;在数据质量挑战方面，随着数据源的增加和数据量的增长，数据质量问题将更加突出。需要开发更加智能的数据质量检测和修复技术，利用 AI 技术来自动识别和处理数据质量问题。&lt;/p&gt; 
&lt;p&gt;在性能挑战方面，随着数据处理需求的增长，系统的性能要求将更加严格。需要在算法优化、架构设计、硬件加速等方面持续创新，提升系统的处理能力。&lt;/p&gt; 
&lt;p&gt;在成本挑战方面，AI 数据处理的成本仍然较高，特别是大语言模型的调用成本。需要通过技术优化、资源调度、成本控制等手段来降低使用成本。&lt;/p&gt; 
&lt;p&gt;在安全挑战方面，数据安全和隐私保护的要求将更加严格。需要在数据加密、访问控制、隐私计算等方面持续投入，确保数据的安全性。&lt;/p&gt; 
&lt;h2&gt;结语：构筑 AI 时代的数据传输基础设施&lt;/h2&gt; 
&lt;p&gt;通过将事件驱动架构的技术优势与 AI 时代的数据处理需求深度融合，EventBridge 为企业构建智能化数据管道提供了全新的技术范式。&lt;/p&gt; 
&lt;p&gt;欢迎更多的数据侧伙伴加入 EventBridge 的生态体系，共同构建更多的数据源连接器、处理算法、应用模板等。通过开放的技术合作，更好地满足用户的多样化需求。AI 时代的数据基础设施建设是一个长期的过程，需要持续的技术创新和生态建设。我们相信，通过持续的努力和合作，我们能够构建更加智能、高效、可靠的 AI 数据集成基础设施，为人工智能技术的发展和应用提供强有力的支撑。&lt;/p&gt; 
&lt;p&gt;欢迎加入 EventBridge 用户交流群（钉钉群号：31481771）进行交流～&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/3874284/blog/18688934</link>
      <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/18688934</guid>
      <pubDate>Mon, 25 Aug 2025 06:52:23 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>Arch Linux 遭遇长达两周 DDoS 攻击，官网、论坛全波及</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Arch Linux 维护者 Cristian Heusel 在最近的一次更新中&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farchlinux.org%2Fnews%2Frecent-services-outages%2F" target="_blank"&gt;透露&lt;/a&gt;，过去两周 Arch Linux 项目遭受了 DDoS 攻击，导致这个流行的 Linux 发行版的服务多次中断。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-e8756c080b8daa1fc05190f53f70579f8e8.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Heusel 在帖子中表示：「Arch Linux 项目目前正在经历一场持续的 DDoS 攻击，这主要影响我们的主网页、Arch 用户仓库（AUR）和论坛。」&lt;/p&gt; 
&lt;p&gt;这场 DDoS 攻击不仅影响了 Arch Linux 的主网站，还波及了 AUR，这是一个收集用户提交的软件包描述文件的仓库。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0825/143023_lRTg_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Arch Linux 团队已经意识到这一问题，并正在与托管提供商合作，以减轻攻击的影响，同时也在调查 DDoS 防护措施。攻击的起源和动机的细节在调查继续进行期间被保密，与此同时 Arch 团队将通过服务状态页面提供定期更新。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368316</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368316</guid>
      <pubDate>Tue, 19 Aug 2025 06:30:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>【HarmonyOS 相机开发系列】折叠屏镜头切换优秀实践</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;div&gt;
 在 2025 华为开发者大会的图片和相机分论坛上，美颜相机分享了如何通过折叠屏镜头适配，打造多端一致的拍摄体验。随着华为折叠屏产品的不断丰富，相机开发在折叠屏上也面临独特技术难题，镜头选错导致黑屏、角度设置错误导致拉伸或者画面旋转的问题日益凸显。本文通过镜头选取、镜头接续、角度设置三个维度来探讨在 HarmonyOS 折叠屏设备上更多创新的使用方式和更丰富的布局样式。
&lt;/div&gt; 
&lt;div&gt;
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//4a547eb6c0bbcad4b4027199eb9ca565.jpeg" referrerpolicy="no-referrer"&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt;
 统一、简易的镜头选取
&lt;/div&gt; 
&lt;div&gt;
 HarmonyOS 基于折叠状态和镜头位置，精准描述每一颗镜头，并仅上报当前折叠状态下的前后置镜头集合。这种机制确保了应用能够按照直板机镜头的使用习惯，直接通过位置信息打开镜头，而 HarmonyOS 会自动映射为当前折叠状态下的镜头。这种设计保障了直板机和折叠机在镜头使用上的统一性和兼容性，极大简化了开发者的适配工作。
&lt;/div&gt; 
&lt;div&gt;
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//b8356630ee7bd6a364dc9b18e7a9d46f.jpeg" referrerpolicy="no-referrer"&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt;
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//d1160b906e5a247c0c7a16648b25e1a2.jpeg" referrerpolicy="no-referrer"&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt;
 快捷的镜头切换方式
&lt;/div&gt; 
&lt;div&gt;
 折叠设备形态各异，在相机应用的开发过程中需要统一的摄像头切换方案，以确保用户在拍照、录像过程中获得更好的体验。为了应对折叠屏设备的动态变化，HarmonyOS 提供了两种镜头切换方式，以满足不同场景的需求：
&lt;/div&gt; 
&lt;div&gt;
 方式 1：应用自主切换镜头
&lt;/div&gt; 
&lt;div&gt;
 ·适用场景：适用于需要精致拍照体验的场景，如美颜相机。
&lt;/div&gt; 
&lt;div&gt;
 ·实现方式：应用需监听折叠状态的变化，自主完成镜头的启停、切换，重新配置会话（涉及修改分辨率），重新查询镜头能力范围，并调整 UX 布局。
&lt;/div&gt; 
&lt;div&gt;
 ·优势：提供高度定制化的拍摄体验，满足复杂场景的需求。
&lt;/div&gt; 
&lt;div&gt;
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//dad4c281453b97313fda26aa3678c49a.jpeg" referrerpolicy="no-referrer"&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt;
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//aedf035c07febc1179ed1bdea69e1520.jpeg" referrerpolicy="no-referrer"&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt;
 方式 2：系统自动切换镜头
&lt;/div&gt; 
&lt;div&gt;
 ·适用场景：适用于简单场景，如人脸识别。
&lt;/div&gt; 
&lt;div&gt;
 ·实现方式：HarmonyOS 自动完成镜头切换、会话配置，应用使能自动切换镜头的能力时，在有多个前置镜头的折叠设备上，不同的折叠状态下可自动切换到当前可使用的前置镜头，避免前置镜头被折入内部导致黑屏。
&lt;/div&gt; 
&lt;div&gt;
 ·优势：简化开发流程，提升用户体验的一致性和便捷性。
&lt;/div&gt; 
&lt;div&gt;
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//3a42e649fb24221d436deb7425f0fe7c.jpeg" referrerpolicy="no-referrer"&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt;
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//8ca92c4f5f7884effebc40e1c561d3cd.jpeg" referrerpolicy="no-referrer"&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt;
 简单易用的角度查询设置能力
&lt;/div&gt; 
&lt;div&gt;
 为了确保在不同折叠状态下拍摄的照片和视频保持正确的方向和角度，HarmonyOS 相机采用了以下角度计算公式：
&lt;/div&gt; 
&lt;div&gt;
 预览：屏幕跟随镜头一起旋转，因此预览角度需考虑屏幕旋转角度。
&lt;/div&gt; 
&lt;div&gt;
 ·公式：旋转角度 = 镜头安装角度 + 屏幕旋转角度
&lt;/div&gt; 
&lt;div&gt;
 拍照/录像：要保证照片/视频正向存储，因此与设备旋转角度相关。
&lt;/div&gt; 
&lt;div&gt;
 ·公式：旋转角度 = 前置：镜头安装角度 – 设备旋转角度
&lt;/div&gt; 
&lt;div&gt;
 后置：镜头安装角度 + 设备旋转角度
&lt;/div&gt; 
&lt;div&gt;
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//bfa25aea5d807ec0592e56ff2366ff9f.jpeg" referrerpolicy="no-referrer"&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt;
 通过这些角度计算，美颜相机确保了在不同折叠状态下，用户能够获得一致且高质量的拍摄体验。
&lt;/div&gt; 
&lt;div&gt;
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//dcb52906f102fd4332764f2d27378f7f.jpeg" referrerpolicy="no-referrer"&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt;
 开发者可通过 HarmonyOS 开发者官网查询相关资料进行开发实践，通过以下官网链路进行体验参考（指南→媒体→相机服务→开发相机应用），助力开发更高效便捷。
&lt;/div&gt; 
&lt;div&gt;
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//9590b5cf29bb7deeff0a0f24644a03bf.jpeg" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368311</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368311</guid>
      <pubDate>Tue, 19 Aug 2025 06:13:00 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>醒醒吧，不要再做自嗨式开源了！</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;最近某上市公司旗下的 KubeSphere 项目宣布停止对开源版本的支持，瞬间在开源社区里引起了强烈反响。从项目的流行度角度来讲，该项目是很成功的，在 Github 上有 1.6 万的 Star。这次调整毫无征兆且生硬粗鲁，让社区的用户愤慨不止，纷纷到 Github 上吐槽抱怨。&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span&gt;过了几天，官方在他们的产品官网出了一个公告，但还是坚持这次的调整。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fask.kubesphere.com.cn%2Fforum%2Fd%2F24963-guan-yu-kubespherekai-yuan-xiang-mu-diao-zheng-de-gong-gao" target="_blank" rel="nofollow"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/a&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fask.kubesphere.com.cn%2Fforum%2Fd%2F24963-guan-yu-kubespherekai-yuan-xiang-mu-diao-zheng-de-gong-gao" rel="nofollow" target="_blank"&gt;&lt;u&gt;官方的声明&lt;/u&gt;&lt;/a&gt;如下：&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0px; margin-right:0px; text-align:center"&gt;&lt;img height="710" src="https://oscimg.oschina.net/oscnet/up-159a3473634e8adf84c285470ab6a85768f.png" width="776" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span style="background-color:#ffffff; color:#39485d"&gt;对官方做出的这种调整，我表示理解，毕竟企业做商业化策略调整，无可厚非。但行事上欠考虑，过于生硬，完全可以采取更温和的措施，帮助众多用户完成过渡，寻求商业化策略调整和社区稳定的平衡点。&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="background-color:#ffffff; color:#39485d"&gt;今天我不是来批评 KubeSphere 团队的，更想借这个事件，跟做开源的兄弟姐妹们说句掏心窝子的话：&lt;strong&gt;&lt;span style="color:#337fe5"&gt;醒醒吧，不要再做自嗨式的开源了&lt;/span&gt;&lt;/strong&gt;。KubeSphere 背后是一家上市公司在维护，都会遇到各种挑战，更何况我们这些小团队维护的开源项目呢？&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="background-color:#ffffff; color:#39485d"&gt;自嗨式开源这个说法会比较直接，可能会让有些朋友觉得不舒服。但确实是我的心里话，希望能够给到做开源的朋友们一些参考建议。&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="background-color:#ffffff; color:#39485d"&gt;&lt;strong&gt;&lt;span style="color:#337fe5"&gt;什么是自嗨式开源呢？&lt;/span&gt;&lt;/strong&gt;主要是凭兴趣做一个开源项目，选择最宽松的授权协议，一个 star 就会让自己高兴半天，一次几块钱的打赏捐助就能让自己满血复活。这样状态的开源，就是自嗨式开源。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;兴趣重要吗？重要，但兴趣是否等同于真实的用户场景呢？不一定。但我观察到还是有大量的开源软件作者凭兴趣出发，做了一个开源项目后，坚信一定会有人使用，并坚持不懈地完善软件。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;我曾经批评过一位朋友，他要做一个数据库的管理软件。我说数据库管理软件已经有很多开源的项目了，为啥要重新做一个呢？后来就没有再聊过天。看开源软件群里面，他现在不做数据库管理软件了，改做 UI 框架了。是因为在做数据库管理软件时，他把技术栈从原来的 C++换成了 C＃，但在用 C＃过程中发现没有好用的跨平台的 UI，然后又开始做 UI 框架了。对这位朋友的技术和热情我是非常钦佩的，但做开源项目也不能这样豪横任性吧。：）&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span style="background-color:#ffffff; color:#39485d"&gt;所以做开源，&lt;strong&gt;&lt;span style="color:#337fe5"&gt;兴趣不等同于真实场景，方向的选择上还是要慎重&lt;/span&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="background-color:#ffffff; color:#39485d"&gt;再来说协议。很多开源软件的作者认为开源项目一定要用最宽松的协议，这样软件的开放性才是最纯粹的。我猜很多开源软件作者会把采用严格模式的协议当成一件羞耻的事情。做开源，怎么可以用 GPL 这类的协议呢？但大家看赚钱的开源项目，都是采用严格模式的协议，或者在宽松协议基础上加了很多的附加条件。比如最近比较火的智能体相关的项目，Dify、n8n 都是如此。&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="background-color:#ffffff; color:#39485d"&gt;所以做开源，一定要慎重选择协议。KuberSphere 团队之所以停止对开源软件的支持，还不是因为有很多第三方的厂商拿着它去做项目嘛，从授权协议上来讲，你又禁止不了这种行为，这就尴尬了。&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="background-color:#ffffff; color:#39485d"&gt;再来说说 Star。很多开源软件的作者一直盯着 Star，觉得这是一个证明自己项目成功的关键标志。Star 是说明你的用户比较多，但用户多不一定会带来收益，带来的可能是更多的 Issue、Feature，以及更多的要求和支持的需求。这个世界上不缺高 Star 的开源项目，有很多的高 Star 的开源项目最后不了了之，创始人甚至因为维护开源项目导致自己穷困潦倒。更有甚者，有的作者会采取一些手段来提高自己的 Star，这不过是掩耳盗铃，自欺欺人而已。&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="background-color:#ffffff; color:#39485d"&gt;所以做开源，&lt;strong&gt;&lt;span style="color:#337fe5"&gt;Star 数量不重要，重要的是有商业诉求的真实用户&lt;/span&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="background-color:#ffffff; color:#39485d"&gt;最后来说说捐助？很多开源软件作者开通了打赏通道，还会在项目的显著位置感谢这些打赏者。很多开源软件作者看到有人捐助，就开心鼓舞，又动力满满了。有人打赏是好事情，我们也需要为这些打赏的网友们点个赞。但话说回来，做开源不可能只指望这些打赏啊，还是要靠能跑通的商业模式。&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="background-color:#ffffff; color:#39485d"&gt;所以做开源，&lt;strong&gt;&lt;span style="color:#337fe5"&gt;不能靠捐助，一定要跑通商业化这条路&lt;/span&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="background-color:#ffffff; color:#39485d"&gt;这就是我想就 KuberSphere 这件事情跟做开源的兄弟姐们说的话，不要再苦哈哈地做自嗨式创业了。要认真思考自己的产品的方向，围绕用户的真实场景设计自己的商业模式，跑通开源商业化之路，这样才能够更好地支持社区的用户，形成一个正向的循环。&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="background-color:#ffffff; color:#39485d"&gt;我之前有整理过系列的关于开源商业化的文章，大家可以参考：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fredirect-index-34578.html" rel="nofollow" target="_blank"&gt;&lt;span&gt;&lt;u&gt;关于开源软件的七大错误认知（上）&lt;/u&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fredirect-index-34579.html" target="_blank" rel="nofollow"&gt;&lt;u&gt;关于开源软件的七大错误认知（中）&lt;/u&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fredirect-index-34580.html" target="_blank" rel="nofollow"&gt;&lt;u&gt;关于开源软件的七大错误认知（下）&lt;/u&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fredirect-index-34581.html" rel="nofollow" target="_blank"&gt;&lt;span&gt;&lt;u&gt;人间清醒，开源一定要做商业化&lt;/u&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fredirect-index-34582.html" rel="nofollow" target="_blank"&gt;&lt;span&gt;&lt;u&gt;开源软件商业模式分析&lt;/u&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/easysoft/blog/18689380</link>
      <guid isPermaLink="false">https://my.oschina.net/easysoft/blog/18689380</guid>
      <pubDate>Tue, 19 Aug 2025 06:07:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>ICEPOS 开源收银系统新增语音播报助手</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;ICEPOS 开源收银系统新增语音播报助手，有需要提升系统结算后语音提示的小伙伴可到 Gitee 下载开源的代码&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://gitee.com/xmosnewone/voicehelper"&gt;https://gitee.com/xmosnewone/voicehelper&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" height="846" src="https://oscimg.oschina.net/oscnet/up-497aa3900ea9a22ecfabfbc405032df8220.png" width="1756" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"&gt;如上图，请将助手文件放在 ICE.POS 下的 Common 文件夹内，可直接调用&lt;/p&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"&gt;如播报，某支付方式 "paytype" （支付方式名称中文）， "totalAmount" 支付金额，可使用以下代码 VoiceNotificationHelper.Instance.PlayPaymentSuccess(payType, totalAmount);&lt;/p&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"&gt;更多使用方法，可阅读 VoiceNotificationHelper 助手代码&lt;/p&gt; 
&lt;p&gt;非常感谢&amp;nbsp;&amp;nbsp;&lt;span style="color:#d35400"&gt; "极速蜗牛"&lt;/span&gt; 的无私贡献！&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368306</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368306</guid>
      <pubDate>Tue, 19 Aug 2025 06:02:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>阿里开源 Mobile-Agent 3：强大的 GUI 代理家族</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;X-PLUG 团队正式开源发布了其&lt;span&gt;最新&lt;/span&gt;项目 Mobile-Agent-v3，这是一款基于 GUI-Owl 的跨平台多代理框架。Mobile-Agent-v3 具备强大的规划、进度管理、反思和记忆能力，旨在提升用户的 GUI 自动化体验。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;GUI-Owl 作为 Mobile-Agent-v3 的基础模型，融合了感知、基础、推理、规划和执行等多项功能，是一款原生的端到端多模态代理。它的设计使得跨平台交互和多回合决策变得更加流畅，具有明确的中间推理能力。这意味着用户在进行多任务操作时，可以获得更为稳定的性能表现。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="293" src="https://oscimg.oschina.net/oscnet/up-83d380e25ecc335b28118c2c52837a64d6e.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;X-PLUG 团队特别提到，Mobile-Agent-v3 不仅在功能上进行了优化，同时还加强了异常处理和反思能力，确保在面对弹窗和广告等干扰时依然能够保持高效的操作。此外，Mobile-Agent-v3 的关键信息记录功能，使得跨应用任务的执行变得更加便捷，极大地方便了用户的日常操作。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;同时，Mobile-Agent 的多个前身版本，如 Mobile-Agent-v2 和 PC-Agent，分别在 NeurIPS2024 和 ICLR2025 的会议上获得接受，显示出该项目在学术研究领域的广泛影响力。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;值得一提的是，X-PLUG 团队还提供了丰富的资源支持，包括技术报告、演示视频和代码库，使得开发者和研究人员能够更深入地探索 Mobile-Agent 的潜力。通过这些资源，用户不仅可以体验到 Mobile-Agent 的强大功能，还能够参与到其后续的开发和优化中。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368304</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368304</guid>
      <pubDate>Tue, 19 Aug 2025 05:56:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>维基百科编辑总结识别 AI 写作的关键特征</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;近年来，人工智能技术的发展为我们带来了许多便利，但同时也引发了关于其生成文本的准确性和可信度的讨论。特别是在学术界，AI 生成的文字常常被视为一种捷径，但这种捷径的潜在问题不容忽视。维基百科作为一个以信任和人类可靠性为基础的平台，明确禁止 AI 撰写的文章，并在编辑之间整理出了一份清单，列出了能够揭示 AI 写作特征的语言 「迹象」。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="328" src="https://oscimg.oschina.net/oscnet/up-39fa487950b41bb85349d0aec9efad5b09e.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;AI 生成的文本在语气上往往显得夸张，常常通过重复的措辞来强调某一内容的重要性。例如，AI 可能使用 「重要」 或 「具有历史意义」 等词汇，这种表达方式通常较为生硬。此外，AI 生成的段落常以简洁的结论或观点结束，给人一种像高中作文的感觉，而非专业百科全书的写作风格。许多常见的连接词如 「此外」、「还有」 等，使得文本显得更正式，甚至有些僵硬，而人类编辑的文本通常会使用更自然的表达。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;格式也是识别 AI 文本的重要线索。AI 生成的文章常常会出现过多的列表，有时还伴随不寻常的项目符号或编号方式。章节标题的书写也常采用标题大小写（每个主要单词都大写），而人类则更倾向于使用简单的样式。此外，AI 写作中粗体文本的过度使用来强调某些短语，也是人类编辑较少采用的方式。更有趣的是，AI 文本中常常出现一些如过度使用破折号、错误位置的引号，甚至标题中夹杂的表情符号。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;引用部分常常是 AI 文本的致命弱点。AI 可能会编造一些不真实的链接，生成不存在的 ISBN 或 DOI，甚至引用一些并未在文中出现的 「专家」。有时，虽然文本中提到了一些参考文献，但它们实际上并未在文章中列出。同时，维基百科特定标记中的错误，例如模板或类别使用不当，也能够暴露 AI 写作的痕迹。总的来说，AI 生成的文本通常比人类创作的内容更具可预测性，缺乏个性化的表达。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;尽管这些信号本身并不是确凿的证据，但如果在文本中发现了多个类似的特征，通常就值得引起关注。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368298</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368298</guid>
      <pubDate>Tue, 19 Aug 2025 05:47:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>【HarmonyOS】【进阶】鸿蒙原生实现应用间跳转之 Deep Linking</title>
      <description/>
      <link>https://www.oschina.net/news/368291</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368291</guid>
      <pubDate>Tue, 19 Aug 2025 05:08:00 GMT</pubDate>
    </item>
    <item>
      <title>鸿蒙开发 Hvigor 插件动态生成代码</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;踏入鸿蒙世界的敲门砖，标志着您在技术征途上的全新起点，提升就业竞争力，获得行业认可，点亮职业成长先机，快人一步抢占未来应用开发赛道！&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Ftraining%2Fdev-cert-detail%2F101666948302721398%3Fha_source%3Dhmosclass-bokeyuan%26ha_sourceId%3D89000444" target="_blank"&gt;https://developer.huawei.com/consumer/cn/training/dev-cert-detail/101666948302721398?ha_source=hmosclass-bokeyuan&amp;amp;ha_sourceId=89000444&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;Hvigor 允许开发者实现自己的插件，开发者可以定义自己的构建逻辑，并与他人共享。Hvigor 主要提供了两种方式来实现插件：基于 hvigorfile 脚本开发插件、基于 typescript 项目开发。下面以基于 hvigorfile 脚本开发插件进行介绍。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;基于 hvigorfile 脚本开发&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;基于 hvigorfile.ts 脚本开发的方式，其优点是可实现快速开发，直接编辑工程或模块下 hvigorfile.ts 即可编写插件代码，不足之处是在多个项目中，无法方便的进行插件代码的复用和共享分发。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1、导入模块依赖。&lt;/p&gt; 
&lt;p&gt;&lt;img height="94" src="https://oscimg.oschina.net/oscnet/up-8d508f8e9feebb83e4c4e12e16a169dc114.png" width="1846" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2、编写插件代码。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在 hvigorfile.ts 中定义插件方法，实现 HvigorPlugin 接口。&lt;/p&gt; 
&lt;p&gt;&lt;img height="442" src="https://oscimg.oschina.net/oscnet/up-12d71f825efbe43970449424d4f08699a3d.png" width="1844" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;3、在导出声明中使用插件。&lt;/p&gt; 
&lt;p&gt;&lt;img height="244" src="https://oscimg.oschina.net/oscnet/up-80f20dbdc9df2b764b8d34fe3935a6c75e9.png" width="1846" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;使用 hvigorfile 插件动态生成 navigation 防混淆文件&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;我们在使用 navigation 的系统路由表时，每次添加新页面，都需要配置一下 release 环境防混淆。若将这些页面放在一个固定的目录下，则与我们的模块化设计相违背，若命名使用固定的前缀或后缀，总感觉有点多余，手动一个一个的添加，虽然符合我们的代码规范设计，但就是有点繁琐。有没有更方便的方式来处理这个混淆配置呢？&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;其实我们可以在写一个 hvigorfilew 插件来自动生成混淆配置文件。我们自定义一个 HvigorPlugin 任务，通过 OhosHapContext 对象读取 module.json5 文件中的 routerMap 字段，可以获取系统路由表的名称，再读取 profile 目录下的路由表。解析 json 文件内存，并将页面路径写到一个混淆文件中，这样每次编译时，自动生成防混淆文件，我们只需要引入这个文件就可以了。示例如下&lt;/p&gt; 
&lt;p&gt;&lt;img height="1214" src="https://oscimg.oschina.net/oscnet/up-f6c707c8d982f83fe818762d19d47e29f57.png" width="1790" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;编译后会在 entry 目录下生成 obfuscation-router.txt 防混淆文件，只要引入这个文件就可以了。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;使用 hvigorfile 插件动态生成 navigation 页面枚举名称&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;我们在我们 navigation 的 push 跳转到新页面时，都得提前定义好系统路由表中的页面 name，因为使用的 name 与系统路由表中定义的 name 不相同时，跳转页面则会白屏。有了前面的经验，其它我们也可以动态生成一个 ets 文件，将系统路由表中的页面名称自动生成一个枚举，这样就不用每次配置系统路由表，还是复制一下名称了。例如我们的系统路由表是这样的&lt;/p&gt; 
&lt;p&gt;&lt;img height="768" src="https://oscimg.oschina.net/oscnet/up-b1cae131ec1889de59d132967421926b00d.png" width="1842" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;我们现在实现一个 hvigorfile 插件，来解析系统路由表中的 name 字段，并生成对应的枚举值。示例如下&lt;/p&gt; 
&lt;p&gt;&lt;img height="1320" src="https://oscimg.oschina.net/oscnet/up-85f1ee286768f3a1415303c4fc1870770cd.png" width="1944" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;我们在 ets 目录下生成了一个 Pages.ets 文件，并将所有 navigation 页面生成对应的枚举值，页面跳转时，使用这些枚举值就不怕出错了。Pages.ets 内容如下&lt;/p&gt; 
&lt;p&gt;&lt;img height="202" src="https://oscimg.oschina.net/oscnet/up-0bb727e10118745c623572eee9682951215.png" width="1846" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368290</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368290</guid>
      <pubDate>Tue, 19 Aug 2025 05:05:00 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>10 分钟带你体验 Solon 的状态机</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;h2&gt;一、介绍&lt;/h2&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;Solon 状态机，称为 Solon State Machine。它是一种可以管理状态、事件之间的关系，以及他们之间的转换。这是一个专门为应用程序中的状态管理和状态转换提供支持的框架。&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;它简化了事物对象在不同状态下，不同事件转化的代码管理，让其代码变得更加清晰明了。&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;本文将介绍 Solon State Machine 状态机在 Solon 框架下的使用，10 分钟带你理解并上手使用 Solon 状态机&lt;/p&gt; 
&lt;h2&gt;二、状态机的核心概念&lt;/h2&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;首先，我们必须要了解 Solon 状态机的几个核心概念，如下&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;状态（State）：代表着对象的当前状态&lt;/li&gt; 
 &lt;li&gt;事件（Event）：对象状态转变是因何而改变的&lt;/li&gt; 
 &lt;li&gt;转换（Transition）：定义了事物的状态是通过哪个事件变到了另一个状态&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;比如，最常见的就是订单系统，下面就简单模拟一下正常订单的状态流转：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;用户下单（状态为：待支付）&lt;/li&gt; 
 &lt;li&gt;用户支付成功（状态为：已支付待发货）&lt;/li&gt; 
 &lt;li&gt;仓库已发货（状态为：已发货待收货）&lt;/li&gt; 
 &lt;li&gt;用户成功收货（状态为：已收货）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;三、代码&lt;/h2&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;添加对应的 maven 依赖&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.noear&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;solon-statemachine&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.5.0&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;对于状态，由于非常固定，我们最好是使用枚举，如下 OrderStatus.java&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.statemachine.State;

&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;enum&lt;/span&gt; &lt;span style="color:#c18401"&gt;OrderStatusEnum&lt;/span&gt; &lt;span style="color:#a626a4"&gt;implements&lt;/span&gt; &lt;span style="color:#c18401"&gt;State&lt;/span&gt;{
    WAIT_PAY, &lt;em&gt;//待支付&lt;/em&gt;
    WAIT_DELIVER, &lt;em&gt;//已支付待发货&lt;/em&gt;
    WAIT_RECEIVE, &lt;em&gt;//已发货待收货&lt;/em&gt;
    RECEIVED; &lt;em&gt;//已收货&lt;/em&gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;还要定义一下事件的枚举&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.statemachine.Event;

&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;enum&lt;/span&gt; &lt;span style="color:#c18401"&gt;OrderStatusEventEnum&lt;/span&gt; &lt;span style="color:#a626a4"&gt;implements&lt;/span&gt; &lt;span style="color:#c18401"&gt;Event&lt;/span&gt;{
    ORDER, &lt;em&gt;//用户下单&lt;/em&gt;
    PAY, &lt;em&gt;//用户支付成功&lt;/em&gt;
    DELIVER, &lt;em&gt;//仓库已发货&lt;/em&gt;
    RECEIVE; &lt;em&gt;//用户成功收货&lt;/em&gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;接下来我们就能定义转换了，在 Solon 框架下，我们可以定义一个 OrderStateMachine 托管类&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#4078f2"&gt;@Managed&lt;/span&gt;
&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;class&lt;/span&gt; &lt;span style="color:#c18401"&gt;OrderStateMachine&lt;/span&gt; &lt;span style="color:#a626a4"&gt;extends&lt;/span&gt; &lt;span style="color:#c18401"&gt;StateMachine&lt;/span&gt;&amp;lt;OrderStatusEnum,OrderStatusEventEnum, OrderEntity&amp;gt; {
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#4078f2"&gt;OrderStateMachine&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; {
        &lt;em&gt;// 待支付 -&amp;gt; 已支付待发货（支付成功）&lt;/em&gt;
        addTransition(t -&amp;gt; t.
                from(OrderStatusEnum.WAIT_PAY)
                .to(OrderStatusEnum.WAIT_DELIVER)
                .on(OrderStatusEventEnum.PAY)
                .then(c -&amp;gt; c.getPayload().setStatus(c.getTo())));

        &lt;em&gt;// 已支付待发货 -&amp;gt; 已发货待收货（仓库已发货）&lt;/em&gt;
        addTransition(t -&amp;gt; t.
                from(OrderStatusEnum.WAIT_DELIVER)
                .to(OrderStatusEnum.WAIT_RECEIVE)
                .on(OrderStatusEventEnum.DELIVER)
                .then(c -&amp;gt; c.getPayload().setStatus(c.getTo())));

        &lt;em&gt;// 已发货待收货 -&amp;gt; 已收货（用户收货）&lt;/em&gt;
        addTransition(t -&amp;gt; t.
                from(OrderStatusEnum.WAIT_RECEIVE)
                .to(OrderStatusEnum.RECEIVED)
                .on(OrderStatusEventEnum.RECEIVE)
                .then(c -&amp;gt; c.getPayload().setStatus(c.getTo())));
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;是不是感觉还缺了什么呢，配置中还缺少一个下单事件，这没有关系，这是我们初始的一个事件，不参于配置&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;我们写对应的 OrderController 接口即可，这边模拟一下，创建订单进行落库&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#4078f2"&gt;@Controller&lt;/span&gt;
&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;class&lt;/span&gt; &lt;span style="color:#c18401"&gt;OrderController&lt;/span&gt; {
    &lt;span style="color:#4078f2"&gt;@Mapping("/create")&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; Result&amp;lt;Void&amp;gt; &lt;span style="color:#4078f2"&gt;create&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; {
        &lt;em&gt;// TODO 模拟订单落库&lt;/em&gt;
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; Result.succeed();
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;重点是在后面的，支付这一个阶段，我们应该如何接入状态机，如下&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#4078f2"&gt;@Controller&lt;/span&gt;
&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;class&lt;/span&gt; &lt;span style="color:#c18401"&gt;OrderController&lt;/span&gt; {
    &lt;span style="color:#4078f2"&gt;@Inject&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;private&lt;/span&gt; OrderStateMachine orderStatusMachine;

    &lt;span style="color:#4078f2"&gt;@Mapping("/create")&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; Result &lt;span style="color:#4078f2"&gt;create&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; {
        &lt;em&gt;// TODO 模拟订单落库&lt;/em&gt;
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; Result.succeed();
    }

    &lt;span style="color:#4078f2"&gt;@Post&lt;/span&gt;
    &lt;span style="color:#4078f2"&gt;@Mapping("/pay")&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; Result &lt;span style="color:#4078f2"&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; {
        &lt;em&gt;// TODO 模拟订单支付&lt;/em&gt;
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; Result.succeed();
    }

    &lt;span style="color:#4078f2"&gt;@Post&lt;/span&gt;
    &lt;span style="color:#4078f2"&gt;@Mapping("/payNotify")&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; Result &lt;span style="color:#4078f2"&gt;payNotify&lt;/span&gt;&lt;span&gt;(Integer orderId)&lt;/span&gt; {
        &lt;em&gt;// TODO 支付成功后，使用状态机&lt;/em&gt;

        &lt;em&gt;// 模拟通过 id 查找一个订单对象&lt;/em&gt;
        &lt;span style="color:#986801"&gt;OrderEntity&lt;/span&gt; &lt;span style="color:#986801"&gt;entity&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span style="color:#a626a4"&gt;new&lt;/span&gt; &lt;span style="color:#c18401"&gt;OrderEntity&lt;/span&gt;(orderId, OrderStatusEnum.WAIT_PAY);

        &lt;em&gt;// 使用状态机发送这个消息&lt;/em&gt;
        orderStatusMachine.sendEvent(OrderStatusEventEnum.PAY, EventContext.of(entity.getStatus(), entity));
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; Result.succeed();
    }
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368288</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368288</guid>
      <pubDate>Tue, 19 Aug 2025 05:02:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>为何精神控制类 Prompt 远胜普通事务性 Prompt？</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;研究人员发起了主题"&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjieyibu.net%2Fa%2F87962" target="_blank"&gt;为何精神控制类 Prompt 远胜普通事务性 Prompt&lt;/a&gt;"的研究，他们通过大量实验数据直观展示两类 Prompt 在关键指标上的显著差异。&lt;/p&gt; 
&lt;p&gt;以下数据基于最新公开文献（IJCAI-2024、ACL-2025、arXIV-2024 等）与作者实测，覆盖多个维度评估。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0825/120058_vuSy_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1110" src="https://static.oschina.net/uploads/space/2025/0825/115927_eS4R_2720166.png" width="1300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0825/120358_1Do5_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0825/120420_7B2F_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;最终得出如下结论：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;精神控制类 Prompt ≈ 把 RLHF 阶段学到的"人类情绪映射"重新激活，并叠加稀缺、竞争、权威三重杠杆，从而把 LLM 的生成分布强行压到高 reward 区域——这就是它碾压普通事务性 Prompt 的全部秘密。&lt;/strong&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368281</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368281</guid>
      <pubDate>Tue, 19 Aug 2025 04:04:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>苹果开源长视频多模态大语言模型 SlowFast-LLaVA-1.5</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;苹果研究团队开源了适配版 SlowFast-LLaVA 模型，在长视频分析理解任务上表现超越更大规模模型。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;该模型通过双流架构优化视频处理效率，慢流以低帧率捕捉场景细节，快流以高帧率追踪动作变化，解决了传统模型逐帧分析导致的信息冗余与上下文窗口溢出问题。其 10 亿、30 亿和 70 亿参数版本在 LongVideoBench 等长视频基准测试中均创佳绩，10 亿参数模型在 General VideoQA 任务中达 56.6 分，70 亿参数模型在 Long-Form Video Understanding 任务中获 71.5 分，且在图像理解任务如知识推理、OCR 等方面表现出色。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-08322866780d415ba4fea5af0db98695175.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;目前模型输入帧长限制为 128 帧，存在可能遗漏关键帧等局限。团队表示将探索内存优化技术提升性能。该模型基于公开数据集训练并开源，为长视频理解提供了新的高效解决方案。&lt;/p&gt; 
&lt;p&gt;https://github.com/apple/ml-slowfast-llava&lt;br&gt; https://huggingface.co/papers/2503.18943&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368273</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368273</guid>
      <pubDate>Tue, 19 Aug 2025 03:41:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>​OpenAI 提议为全体英国人免费提供 ChatGPT Plus，潜在成本高达 20 亿英镑</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;英国《衞报》近日报道了一项引人注目的提议：OpenAI 首席执行官萨姆・奥尔特曼与英国科技大臣彼得・凯尔讨论，希望为英国民众免费提供 ChatGPT Plus 订阅服务。这项提议的潜在成本高达 20 亿英镑（约合 193.22 亿元人民币），但最终未能实现。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0px; margin-right:0px"&gt;&lt;img height="301" src="https://oscimg.oschina.net/oscnet/up-a763f4398950d8f390fa8ac7293c95916d7.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;根据知情人士的透露，这一构想是在旧金山的一次会议上提出的，旨在寻求 OpenAI 与英国之间更广泛的合作机会。彼得・凯尔曾在今年 3 月和 4 月与奥尔特曼共进晚餐，并在 7 月签署了一份谅解备忘录，探索在英国公共服务中使用人工智能的可能性。该谅解备忘录并非法律约束，可能使 OpenAI 能够接触到部分政府数据，并将其软件应用于教育、国防、安全和司法等领域。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;彼得・凯尔在政府内一直积极推动人工智能的应用。今年 3 月，他曾直接向 ChatGPT 咨询关于政府工作的问题，包括为何英国企业对人工智能的采纳速度缓慢，以及他应该参加哪些播客节目。OpenAI 发言人表示，已有数百万英国用户在每日免费使用 ChatGPT，并强调他们与英国政府的合作旨在推动人工智能的普及，确保更多人能够从中受益。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;除了与英国的合作，OpenAI 近期还与多个国家的政府进行了接触。值得注意的是，OpenAI 与阿联酋达成协议，将在全国范围内启用 ChatGPT，并推动该技术在交通、医疗和教育等公共领域的应用。然而，生成式人工智能的发展也引发了一些争议，尤其是关于版权问题。一些艺术家对政府修订版权法的计划提出了批评，认为允许 AI 企业在未经授权的情况下使用受版权保护的作品将损害创作者权益。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;对此，英国人工智能行业协会表示，政府在政策制定上过于偏向大型科技公司，忽视了中小企业的利益。对此，英国政府发言人回应称，他们正在与 OpenAI 及其他领先的人工智能公司合作，探索在英国的投资机会，并在新技术公开之前严格测试其安全性。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368271</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368271</guid>
      <pubDate>Tue, 19 Aug 2025 03:35:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>关于 EMQX 开源版生命周期结束及未来发展的通告</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;EMQX 中文社区&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fa_NHnvvlpfYaWfNk0kROuw" target="_blank"&gt;发布&lt;/a&gt;了「关于 EMQX 开源版生命周期结束及未来发展的通告」表示，在&lt;span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"&gt;&lt;strong style="color:#343741"&gt;开源版本生命周期结束后，EMQX 开发工作将完成开源版和企业版的彻底融合&lt;/strong&gt;&lt;/span&gt;&lt;strong style="color:rgba(0, 0, 0, 0.9)"&gt;&lt;span&gt;&lt;strong style="color:#343741"&gt;。&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="315" src="https://oscimg.oschina.net/oscnet/up-d651756a602d70828a50956375ddd5ecf55.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;具体公告内容如下：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span style="color:#343741"&gt;尊敬的 EMQX 用户与社区伙伴，感谢您长期以来对 EMQX 的信任与支持。得益于全球开发者和企业用户的共同努力，始于 2013 年的开源项目 EMQX，现已发展成为全球领先的、专为实时智能设计的 MQTT 与 AI 一体化平台。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&lt;strong&gt;&lt;span&gt;&lt;span style="color:#343741"&gt;根据 EMQX 长期执行的版本维护政策，每一个主要版本均享有自发布之日起 18 个月的维护期。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;&lt;span&gt;&lt;span style="color:#343741"&gt;EMQX 5.8 开源版于 2024 年 8 月发布，将于 2026 年 2 月 28 日正式结束产品生命周期。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span style="color:#343741"&gt;为了提供更稳定、安全、高效的服务，并顺应软件行业的发展趋势，我们特此发布产&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style="color:#343741"&gt;品通告：&lt;/span&gt;&lt;strong style="color:#343741"&gt;开源版本生命周期结束后，EMQX 开发工作将完成开源版和企业版的彻底融合&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong style="color:#343741"&gt;，迈向统一产品战略新阶段。&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span style="color:#343741"&gt;在此日期之后，映云科技将不再为 EMQX 5.8 开源版提供任何形式的维护更新，包括但不限于 bug 修复、安全漏洞补丁和新功能开发。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span style="color:#343741"&gt;如果您使用的是 Apache 2.0 开源版本 EMQX，请务必注意 2026 年 2 月这个版本生命周期终结的时间点。以避免出现老版本 EMQX 软件漏洞无人修复的风险。&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span style="color:#343741"&gt;我们建议您在接下来的 6 个月中迁移至功能完备、持续更新的统一版本。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;官方建议用户可选择升级至 EMQX 企业版或 EMQX Cloud，同时为从开源版迁移至新版本的用户提供「无忧迁移」。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368262</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368262</guid>
      <pubDate>Tue, 19 Aug 2025 03:06:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>今年我国智能算力规模增长将超 40%</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;从 2025 中国算力大会上了解到，中国算力平台正加快建设。目前，已有山西、辽宁、上海、江苏等 10 个省区市的算力分平台正式接入。&lt;/p&gt; 
&lt;p&gt;中国信息通信研究院副院长魏亮表示：目前，中国算力平台实现了 100 多个算力服务商入驻，完成 1000 余家行业用户注册，接入主流基础大模型和垂类模型近百个，为 1000 多个开发者提供多元的在线调用服务。&lt;/p&gt; 
&lt;p&gt;工业和信息化部日前印发的《算力互联互通行动计划》提出，到 2026 年，建立完备的算力互联互通标准、标识和规则体系；到 2028 年，基本实现全国公共算力标准化互联，形成具备智能感知、实时发现、随需获取能力的算力互联网。&lt;/p&gt; 
&lt;p&gt;数据显示，近年来，我国算力总规模年增速达到 30% 左右。在人工智能的快速发展带动下，智能算力需求呈现迅猛增长态势。&lt;/p&gt; 
&lt;p&gt;中国电信研究院发布的《智算产业发展研究报告（2025）》显示，随着人工智能大模型加速赋能行业应用和智能终端，将进一步助力智能算力产业蓬勃发展。&lt;/p&gt; 
&lt;p&gt;中国电信研究院战略发展研究所所长饶少阳表示，到 2035 年，人工智能将为我国的 GDP 贡献超过 11 万亿，大概占到 GDP 的 4% 到 5%。这个可能带动算力的需求是十倍，甚至百倍的增长。&lt;/p&gt; 
&lt;p&gt;&lt;img height="255" src="https://oscimg.oschina.net/oscnet/up-464875f00f5deab54a2c320d4cccecb6766.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;工业和信息化部负责人表示，将引导各地合理布局智能算力设施，逐步提高智能算力供给质量，满足新兴产业和未来产业发展需要。目前，智能算力已经广泛应用于生成式大模型、自动驾驶、具身智能、智慧城市和工业制造等领域。通过算力应用大赛累计征集的创新算力项目已经超过 2.3 万个，在工业、金融、医疗、能源等领域实现了规模化复制推广。预计 2025 年，我国智能算力规模增长将超过 40%。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368261</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368261</guid>
      <pubDate>Tue, 19 Aug 2025 02:59:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>JakartaOne Livestream 2025</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;JakartaOne Livestream 是 Jakarta EE 工作组面向开发人员及技术负责人的线上会议，主要关注企业级 Java 应用、云原生技术，探讨 Jakarta EE 技术发展现状及未来趋势。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;本次会议将带领我们了解 Jakarta EE 规范最新进展，在 Azure 上的 MCP 优化和跟踪，如何在如何快速从 JavaEE 迁移到 Jakarta EE，Java 怎样适应云原生时代敏捷运行需求，IBM Liberty 的新特性，以及 Java 在 AI 时代的最新开发实践。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;在本次 JakartaOne Livestream 会议上，您将有机会与全球顶级技术专家、开发者共同探讨云原生、AI 时代 Java 的发展趋势。无论您是 Java 开发老手，还是新兴的云原生、AI 应用开发者，JakartaOne Livestream 都将是您不容错过的技术盛宴。立即报名，加入我们，共同探索云原生、AI 时代的无限可能！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;1. MicroProfile Telemetry&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;在 Azure 上的应用实践及基于 MCP 的性能优化&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;利用 Open Liberty MicroProfile Telemetry 2.0 在 Azure 上实现分布式追踪、指标收集和日志聚合。开发 MCP 工具读取遥测数据，集成到 VS Code GitHub Copilot 中，实现智能代码性能分析与优化建议，构建从监控到代码优化的完整闭环。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;2. CRaC &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;技术深度解析：Java 应用极速启动与性能优化新路径&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;解析 CRaC 技术如何通过快照与恢复机制，解决 Java 应用冷启动慢、预热久的痛点，对比 AOT 与 JIT 差异，解析底层实现与实战应用，展现其在微服务与 Serverless 场景的价值。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;3. JakartaEE &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;与微服务开发&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;介绍 JakartaEE 11 的新特性，结合微服务开发解析我们日常开发中使用的 JakartaEE 规范，进一步了解 JakartaEE 标准规范，学习 JakartaEE 先进设计理念，深入使用 JakartaEE 规范，积极参与 JakartaEE 标准推广，共促中国社区发展。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4. &lt;span&gt;&lt;span&gt;Jakarta EE &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;现状及未来展望&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;总结 Jakarta EE 11 规范改变，展现 Jakarta EE 12 的规划。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;5.&amp;nbsp;&lt;span&gt;&lt;span&gt;从 Java EE 到 Jakarta EE：零停机迁移 × 云原生弹性实战&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;10 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;年 Java 老兵现场演示 10 分钟零停机迁移老系统到 Jakarta EE 11；QPS +18 %、内存 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;−&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;12 %&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;；一键生成 OCI 镜像，接入 OpenTelemetry 与 KEDA，实现 Serverless 弹性到 0；开源 Maven 插件自动检测 javax.* 残留，PR 即时报错。全程 Live Demo，脚本与 Helm Chart 当场放送。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;6.&amp;nbsp;&lt;span&gt;&lt;span&gt;Java EE &amp;amp; Jakarta EE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;技术与 IBM Liberty 发展漫谈&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;漫谈企业级 Java 技术从 Java EE 到 Jakarta EE 演进历程，IBM WebSphere Liberty 在云原生场景下动态加载、秒级启动、InstantOn 等特性助力企业应用，以及与 MicroProfile、Service Mesh 的协同实践，并与开发者探讨 Jakarta EE 11 中虚拟线程集成等前瞻特性与技术方向。同时，IBM 提供免费的迁移工具，助力开发者应用上云或向高版本的 JDK 和 Java EE/Jakarta EE 规范进行升级演进！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368260</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368260</guid>
      <pubDate>Tue, 19 Aug 2025 02:55:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>EXCEL 导入 — 设计与思考</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;div&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;EXCEL 导入—设计与思考&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
  &lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、案例信息与设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
  &lt;span id="OSC_h2_2"&gt;&lt;/span&gt; 
  &lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.1、案例需求与背景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;B2BTC 同城二期有一个 Excel 导入的功能，单次数据量小于一千，使用频次不高。但涉及到多个字段组成唯一约束，即每条数据操作时要根据唯一性组合字段来操作，要确保数据表中的数据不违反唯一性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;每条数据涉及到多次查询其他业务 RPC 来校验、补充信息的诉求，即使有缓存，但也可能涉及到缓存不命中问题，即单条数据的校验和导入的时效性保障不了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;span id="OSC_h2_3"&gt;&lt;/span&gt; 
  &lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2、整体解决方案&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;以下四个方案为开发过程中依次思考的四个方案，没有绝对利弊。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;span id="OSC_h4_4"&gt;&lt;/span&gt; 
  &lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2.1、初始构思开发方案（同步导入）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;首先想到的方案为常用的同步导入，即在一台容器的一个线程中完成 Excel 中数据的解析、校验、导入、发送通知消息三部分流程。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;问题：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.当数据量过大时，在单台服务器上操作时对服务器造成比较大的内存压力。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.流程比较长，每条数据涉及多次 RPC 查询，总体时间很长。接口 TP99 会比较高 + 用户体验很差。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;优点：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.可以让前端同步获取导入结果。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;div&gt; 
   &lt;img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2024-09-30-15-18DCieuAaQnMb9JRw.jpg" referrerpolicy="no-referrer"&gt; 
  &lt;/div&gt; 
  &lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;p&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;span id="OSC_h4_5"&gt;&lt;/span&gt; 
  &lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2.2、方案二（改进版）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;由于方案一时效不可控制，在参考了另外一个 Excel 导入场景后设计了以下方案：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基于原有的方案，该方案使用了线程池来校验数据并通过 MQ 来异步地处理每条数据，这样基于原有的方案有一定的效率提升。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;但由于当时思考不充分，开发完成之后发现和实际场景不适配，并可能有 TP99 超时风险，只作为记录。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;问题：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.业务可以结束完全的异步，所有的导入结果都通过。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;优点：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.可以让前端同步获取校验结果。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.线程池和异步处理一定程度上提升了数据处理效率。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;适用场景：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;本方案适用于前端需要同步获取导入的结果，后端不涉及唯一性校验（有单号等唯一主键信息）的场景，可以校验数据之后进行批量插入（不用 MQ 来发消息异步处理数据）。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;方案本身没有什么问题，问题在于方案和引用场景不是最佳适配：本次导入不要求前端能即时获取到导入的结果，因此无需在这里同步获取到结果之后再异步处理数据，可以将 excel 解析 + 数据校验 + 处理消息统一均异步处理。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;div&gt; 
   &lt;img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2024-09-30-15-21wkOxjIXV21gNOl8Z.jpg" referrerpolicy="no-referrer"&gt; 
  &lt;/div&gt; 
  &lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;p&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;span id="OSC_h4_6"&gt;&lt;/span&gt; 
  &lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2.3、方案三（最终版）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;由于业务方没有同步获取导入结果或者校验结果的任何诉求&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，因此这里将 excel 解析 + 数据校验 + 处理消息统一均异步处理（JMQ 发消息给消费者来处理这些流程），只对必要的参数进行校验。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对于数据处理，将 Excel 数据拆分为每条的粒度，用，线程池来进行，数据校验并处理，最终由主线程统计结果。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;此外，在进行数据，查询唯一性数据 + 操作数据（增加\删除\修改） 的最小并发影响粒度加上 Redis 锁来保障数据表的唯一性不会被破坏。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;问题：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.所有的 excel 解析 + 数据校验 + 处理消息，均在一台服务器上执行，对服务器的压力会比较大。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;优点：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.用线程池处理消息，大大缩短了消息处理的时间，减少了单个服务器压力。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.有兜底策略，可确保数据不丢失，导入流程可以正常且按时结束，不会无上限等待。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.除必要校验的所有流程均异步处理，接口的 TP99 可靠且较快。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;适用场景：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.对数据完整性要求比较的业务。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.数据量不会太大的业务。（避免对单个容器造成较大压力）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;div&gt; 
   &lt;img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2024-09-30-15-21X6dCzL32YC39YXBg.jpg" referrerpolicy="no-referrer"&gt; 
  &lt;/div&gt; 
  &lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;p&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;span id="OSC_h4_7"&gt;&lt;/span&gt; 
  &lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2.4、方案四（理想版）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对于方案三，将所有的数据校验 + 处理的流程都给一台服务器执行，造成单台服务器压力比较大，且并发度不够高，总体流程时效性可能得不到保障。因此设想了一个较为理想的方案四场景，适用于数据量大、对数据可靠性要求不高、时效性要求高的场景。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;相比方案三，方案四减少了对应的对账、兜底机制，整体的流程还是异步进行。相比于线程池，用 JMQ 发送消息给，数据校验并处理的 consumer 来处理消息并记录结果到 Redis 来跟踪导入进度。此外，在进行数据，查询唯一性数据 + 操作数据（增加\删除\修改）+ 更新 Redis 中最终结果，的最小并发影响粒度加上 Redis 锁来保障数据表的唯一性不会被破坏。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;问题：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.没有兜底策略，数据校验处理的流程中可能出现有一条消息阻塞\丢失\意外结束，导致最终没有线程统计结果并发送咚咚消息。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;优点：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.除必要校验的所有流程均异步处理，接口的 TP99 可靠且较快。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.利用拆分导入数据 + 多个 Consumer 处理消息，大大缩短了消息处理的时间。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.拆分数据为消息异步处理，用了 JMQ 的重试机制来提升了数据处理的可靠性。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;适用场景：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.本方案适用于前端无需同步获取导入的结果，后端可以完全异步处理数据的场景。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.对数据可靠性要求不是极高的业务，可接受小概率容错。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.对导入结果失效有一定诉求的业务。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.数据量比较大或操作比较频繁的业务。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;div&gt; 
   &lt;img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2024-09-30-15-2326yJTIdAN30fObxBo.jpg" referrerpolicy="no-referrer"&gt; 
  &lt;/div&gt; 
  &lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;p&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;span id="OSC_h1_8"&gt;&lt;/span&gt; 
  &lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、持续思考&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
  &lt;span id="OSC_h2_9"&gt;&lt;/span&gt; 
  &lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2.1 中间件的合理使用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;合理利用 JMQ 来解耦、拆分业务逻辑可以 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;减少单台服务器实例内存或 CPU 的压力、提高数据处理并发量&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，同时可以利用 MQ 的重试机制来尽可能&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;保障对应业务的可用性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;同时，异步处理可能存在结果丢失的情况，在数据可靠性要求不高的场景可以合理舍弃这种小概率场景发生的问题（因为有重试还一直失败）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;但在数据可靠性要求比较高的场景，需要有对应的对账机制 + 兜底机制来统计数据的处理情况。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;（如 Excel 导入，可以将解析完成的数据，和 最终导入的数据进行一个数据对账，如果有数据丢失或者无响应，发出告警，让定时任务，或 人工进行二次核验来确保数据可靠不丢失）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;但中间件的过度使用使得服务过度依赖中间件的可靠性，问题追踪定位难度会进一步加大，需要结合实际业务场景综合权衡。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;span id="OSC_h2_10"&gt;&lt;/span&gt; 
  &lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2.2 业务充分适配场景&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在进行方案的技术设计时，不要只是照葫芦画瓢，要结合自己的业务场景、业务数据量、可靠性要求等场景充分考虑，借鉴其他方案的可用之处。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如本文档中方案二借鉴了之前的方案设计，但没有考虑自己的业务场景是不是与其适配，没有充分适配自己的实际业务，还可能引入新的问题。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;没有最好的技术方案，只有适配于当前业务场景的最佳方案。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4090830/blog/18688901</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18688901</guid>
      <pubDate>Tue, 19 Aug 2025 02:45:00 GMT</pubDate>
      <author>原创</author>
    </item>
  </channel>
</rss>
