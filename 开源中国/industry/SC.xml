<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - industry - 简体中文</title>
    <link>https://www.oschina.net/news/industry</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/industry" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 29 May 2025 16:41:43 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>​Netflix 联合创始人 Reed Hastings 加入 Anthropic 董事会</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;人工智能公司 Anthropic 最近宣布，Netflix 的联合创始人、董事长以及前首席执行官 Reed Hastings 正式加入其董事会。Hastings 在 2023 年卸任了 Netflix 的共同首席执行官职务；此外，他还曾在 Facebook、微软和彭博社等公司的董事会任职。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="372" src="https://oscimg.oschina.net/oscnet/up-112f5965a8035159bc73d8c94ddeb448fa3.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在公告中，Anthropic 表示，Hastings 不仅在 Netflix 的发展上表现卓越，同时他在教育改革和发展中国家的数字基础设施方面也投入了大量精力。这使得他对如何确保技术能够服务于更广泛的社会目标有着切实的理解。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Hastings 在一份声明中提到：Anthropic 对人工智能能为人类带来的益处持乐观态度，但也非常清楚经济、社会及安全方面的挑战。我加入 Anthropic 董事会是因为我相信他们在人工智能发展上的方法，并希望帮助人类进步。」&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Anthropic 的董事会还包括首席执行官 Dario Amodei、总裁 Daniela Amodei、Yasmin Razavi 和 Jay Kreps 等成员。最近，Anthropic 还发布了其&lt;span&gt;最新&lt;/span&gt;的 Claude4 人工智能模型。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352601</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352601</guid>
      <pubDate>Sat, 10 May 2025 09:55:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>HTAP 已死</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;本文翻译自：&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mooncake.dev%2Fblog%2Fhtap-is-dead" target="_blank"&gt;《HTAP is Dead》&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;这篇博客受到 Jordan Tigani 文章&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmotherduck.com%2Fblog%2Fbig-data-is-dead%2F" target="_blank"&gt;《Big Data is Dead》&lt;/a&gt;&lt;/em&gt;的启发。&lt;/p&gt; 
&lt;h2&gt;旧时代的岁月（70 年代）&lt;/h2&gt; 
&lt;p&gt;上世纪 70 年代，一个关系型数据库可以完成所有任务。白天处理事务（OLTP），晚上生成报表（OLAP）。像 Oracle V2 和 IBM DB2 这样的数据库在同一系统上运行 OLTP 和 OLAP，主要是因为数据集仍然可以装在几个磁盘上，而计算资源昂贵。&lt;/p&gt; 
&lt;p&gt;没有人称之为混合事务/分析处理（HTAP）；它只是&lt;strong&gt;数据库&lt;/strong&gt;而已。&lt;/p&gt; 
&lt;h2&gt;重大分歧（80 年代）&lt;/h2&gt; 
&lt;p&gt;随着企业拥有更多数据，并提出更复杂的问题，数据库开始显示出它的局限性。&lt;/p&gt; 
&lt;p&gt;事务型和分析型工作负载是朝着相反的方向发展的。OLTP 需要微秒级的插入和单行查找，而 OLAP 则需要全表扫描和大规模的聚合。这导致了持续的争用；分析型工作负载消耗 I/O 和缓存，这些资源对于低延迟的事务型工作负载来说是必需的，反之亦然。&lt;/p&gt; 
&lt;p&gt;解决方案是什么？隔离这些工作负载。到 20 世纪 80 年代初，这种「巨大分歧」已经开始出现。&lt;/p&gt; 
&lt;h2&gt;存储的分离（90 年代）&lt;/h2&gt; 
&lt;p&gt;推动这种分歧的一个关键技术因素是存储架构。OLTP 系统针对基于行的存储进行了优化（快速写入 + 点查询）。而 OLAP 系统则选择基于列的存储，以实现高效的扫描和聚合。&lt;/p&gt; 
&lt;p&gt;到 2000 年代中期，这种分离已经成为行业标准。数据库先驱迈克尔·斯托纳布勒（Michael Stonebraker）在他的论文《One Size Fits All：An Idea Whose Time Has Come and Gone》中标志着这一转变，该论文发表在 ACM Digital Library 上（https://dl.acm.org/doi/abs/10.1145/3226595.3226636）。数据库开始分裂成专门的引擎。&lt;/p&gt; 
&lt;h2&gt;OLTP 和 OLAP 都放弃了 SQL（2000–2010 年代）&lt;/h2&gt; 
&lt;p&gt;横向扩展推动了 OLTP 和 OLAP 之间的距离进一步拉大。&lt;/p&gt; 
&lt;p&gt;早期的分布式 OLTP 数据库（如 MongoDB 这类 NoSQL 引擎）完全摒弃了 SQL 和分析能力。在分析领域，我们看到了 MapReduce 和数据湖架构（Hadoop/HDFS）的采用：以牺牲传统关系型数据库的严格一致性为代价，换取巨大的吞吐量。&lt;/p&gt; 
&lt;h2&gt;意想不到的和解（2010 年代）&lt;/h2&gt; 
&lt;p&gt;在 2010 年代，两种不同的数据库运动逐渐兴起：&lt;/p&gt; 
&lt;p&gt;1. &lt;strong&gt;NewSQL&lt;/strong&gt;（Spanner、CockroachDB、Vitess）。OLTP 应该保持基于 SQL。&lt;br&gt; 2. &lt;strong&gt;云数据仓库&lt;/strong&gt;（Redshift、Snowflake）。OLAP 应该运行在具有更强一致性保证的 SQL 系统上。&lt;/p&gt; 
&lt;p&gt;从表面看，这些系统服务于完全不同的工作负载。但在底层，它们有很多共同点：分布式、MPP 风格的执行，以及 SQL。孤立来看，OLTP 和 OLAP 系统已经收敛于许多相同的架构原则。唯一一个大的不同点是：存储引擎。&lt;/p&gt; 
&lt;p&gt;我们问自己：如果可以将行存储引擎和列存储引擎结合到一个数据库中，会怎样？&lt;/p&gt; 
&lt;h2&gt;没错，就是 HTAP (2014)&lt;/h2&gt; 
&lt;p&gt;2014 年，Gartner &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gartner.com%2Fen%2Fdocuments%2F2657815%23%3A%7E%3Atext%3DSummary%2Cmemory%2520computing%2520technologies%2520as%2520enablers" target="_blank"&gt;引入&lt;/a&gt; 术语 HTAP（混合事务和分析处理）：下一代数据库架构。&lt;/p&gt; 
&lt;p&gt;目标是缩小操作系统和分析系统之间的差距。这对于新兴的工作负载，如定价、欺诈检测和个人化，都是必要的。即使在企业层面，决策者也希望获得实时数据。早期的 HTAP 系统展示了这是可以实现的。不过，大部分情况是如此。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdl.acm.org%2Fdoi%2F10.1145%2F3514221.3526055" target="_blank"&gt;SingleStoreDB&lt;/a&gt; 结合了内存中的行存储、基于磁盘的列存储以及向量化执行引擎——在一个系统中支持快速扫描、查找、过滤、聚合和更新。随着时间的推移，我们发现，在现代硬件的支持下，仅列存储就可以处理大量 OLTP 风格的查询，包括点查找和低延迟的访问模式。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.pingcap.com%2Ftidb%2Fstable%2Ftidb-architecture" target="_blank"&gt;TiDB&lt;/a&gt; 采取了不同的路线，将其 TiKV 行存储与基于 ClickHouse 的独立列式引擎相结合——保持数据的两个副本以服务两种工作负载。&lt;/p&gt; 
&lt;p&gt;所以，这样应该就是全部了，对吧？70 年代的数据乌托邦，唉，终究还是落空了。&lt;/p&gt; 
&lt;h2&gt;云数据仓库是 2020 年代的唯一赢家&lt;/h2&gt; 
&lt;p&gt;云数据仓库显然胜出。NewSQL 运动停滞了……HTAP 呢？它从未获得应有的关注。尽管有真正的技术进步，但它仍然处于预产品市场契合状态。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. 替换一个人的 OLTP 系统真的非常困难。&lt;/strong&gt; 请相信&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdb-engines.com%2Fen%2Franking" target="_blank"&gt;DBEngines&lt;/a&gt;的说法：Oracle 和 SQL Server 仍然分别排在第 1 和第 3 位。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. 大多数工作负载并不需要分布式 OLTP。&lt;/strong&gt; 硬件变得更快且更便宜了。单台性能强大的机器就可以处理大多数事务型工作负载。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D4jDQi9P9UIw" target="_blank"&gt;Cursor&lt;/a&gt;和&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.pixelstech.net%2Farticle%2F1747708863-openai%253a-scaling-postgresql-to-the-next-level" target="_blank"&gt;OpenAI&lt;/a&gt;都是由单台 Postgres 实例驱动的。你完全没问题。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3. 云原生架构更倾向于共享磁盘，而不是共享无磁盘。&lt;/strong&gt; 虽然 NewSQL 系统需要快速的本地存储（甚至需要内存持久性），但云平台则更倾向于对象存储和弹性计算。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4. OLTP 和 OLAP 由不同的团队负责。&lt;/strong&gt; OLTP 由产品工程团队负责；OLAP 属于数据团队。激励机制很少一致。没有人因为「整合堆栈」而被晋升。&lt;/p&gt; 
&lt;h2&gt;你的数据栈构成了 HTAP 数据库（今天）&lt;/h2&gt; 
&lt;p&gt;云技术也开始推动从紧密耦合的数据仓库向基于对象存储的模块化数据湖转变。&lt;/p&gt; 
&lt;p&gt;在试图摆脱传统数据仓库/数据库的模式时，数据团队开始自行构建定制系统。这些系统由「最佳组件」构成：&lt;/p&gt; 
&lt;p&gt;1. OLTP 系统和流处理器作为 WAL&lt;br&gt; 2. 开放表格格式如 Iceberg 作为存储引擎&lt;br&gt; 3. 查询引擎如 Spark 和 Trino 用于执行&lt;br&gt; 4. 实时系统如 ClickHouse 或 Elastic 作为索引&lt;/p&gt; 
&lt;p&gt;即使在今天解耦的数据栈中，需求依然不变：在最新的交易数据上实现快速的 OLAP 查询。这现在通过一系列流式管道、云数据湖和实时查询层的网络实现。&lt;/p&gt; 
&lt;p&gt;它仍然是 HTAP；但通过数据库的组合而非整合来实现。这归结为诸如：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. 如何将 WAL 应用到我的存储引擎上？&lt;/strong&gt; AKA: 如何高效地从 OLTP 系统将数据同步到数据湖？&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. 我能否在我的数据湖上构建一个低成本的索引，并保持同步？&lt;/strong&gt; AKA: 如何将实时数据摄入到湖中？或者如何使用 Postgres 或 Elastic 功能查询湖中的数据？&lt;/p&gt; 
&lt;p&gt;我们当前的 HTAP 挑战归根结底是让湖仓成为实时准备的系统。&lt;/p&gt; 
&lt;p&gt;在花费了我最好的 10 年时间，先是创立，然后是拯救之后，HTAP 作为一种数据库已经死了。&lt;/p&gt; 
&lt;p&gt;但让精神继续存在。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352600/htap-is-dead</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352600/htap-is-dead</guid>
      <pubDate>Sat, 10 May 2025 09:48:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Greenmask —— 转储匿名化和合成数据生成工具</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                            &lt;p&gt;&lt;strong style="color:#1f2328"&gt;Greenmask&amp;nbsp;&lt;/strong&gt;是一款功能强大的开源实用程序，专为逻辑数据库备份转储、匿名化、合成数据生成和恢复而设计。&lt;/p&gt;

&lt;p&gt;它已移植 PostgreSQL 库，因此非常可靠。它是无状态的，不需要对数据库架构进行任何更改。它设计为高度可定制，并与现有的 PostgreSQL 实用程序向后兼容，快速可靠。&lt;/p&gt;

&lt;p&gt;&lt;span style="background-color:#fbfbfb; color:#1d1d35"&gt;Greenmask 提供了一套安全的工具来转换你的数据库同时保持完整性，创建一个镜像生产数据的暂存环境并确保高效的测试而不损害信息。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img height="248" src="https://static.oschina.net/uploads/space/2025/0407/151056_sbRf_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style="background-color:#fbfbfb; color:#1d1d35"&gt;特点：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong style="color:#1f2328"&gt;&lt;a href="https://docs.greenmask.io/latest/database_subset/"&gt;Database subset&lt;/a&gt;&lt;/strong&gt;—市场上最先进的子集系统之一。它支持&lt;strong&gt;虚拟引用、可空列、多态引用，甚至可以使用&lt;/strong&gt;&lt;strong&gt;循环引用&lt;/strong&gt;对最复杂的架构进行子集化。&lt;/li&gt;
&lt;li&gt;&lt;strong style="color:#1f2328"&gt;&lt;a href="https://docs.greenmask.io/latest/built_in_transformers/transformation_engines/#hash-engine"&gt;Deterministic transformers&lt;/a&gt;&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#1f2328"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;— 使用哈希函数确保相同输入的输出一致。大多数转换器都支持&lt;code&gt;random&lt;/code&gt;和&amp;nbsp;&lt;code&gt;hash&lt;/code&gt;引擎，为各种用例提供灵活性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.greenmask.io/latest/built_in_transformers/dynamic_parameters/"&gt;动态参数&lt;/a&gt;&lt;/strong&gt;— 大多数转换器都支持动态参数，允许它们根据表列值进行调整。此功能有助于管理列之间的依赖关系并有效满足约束。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.greenmask.io/latest/built_in_transformers/transformation_condition/"&gt;转换条件&lt;/a&gt;&lt;/strong&gt;—仅在满足指定条件时应用转换，这对于定位特定行很有用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.greenmask.io/latest/commands/validate/"&gt;转换验证和轻松维护&lt;/a&gt;&lt;/strong&gt;— Greenmask 在配置期间提供验证警告、数据转换差异和架构差异，从而实现对转换的有效监控和维护。架构差异功能有助于防止架构更改时的数据泄漏。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.greenmask.io/latest/built_in_transformers/transformation_inheritance/"&gt;转换继承&lt;/a&gt;&lt;/strong&gt;&amp;nbsp;— 分区表和带外键的表的转换继承。定义一次，应用于全部。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无状态&lt;/strong&gt;—Greenmask 作为逻辑转储运行，不会影响您现有的数据库模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨平台&lt;/strong&gt;—由于其基于 Go 的架构消除了平台依赖性，因此可以在任何平台上轻松构建和执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库类型安全&lt;/strong&gt;—通过验证数据并使用数据库驱动程序进行编码和解码操作来确保数据完整性，从而保留准确的数据格式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;向后兼容&lt;/strong&gt;— 完全支持与标准 PostgreSQL 实用程序相同的功能和协议。Greenmask 创建的转储可以使用该&lt;code&gt;pg_restore&lt;/code&gt;实用程序无缝恢复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可扩展&lt;/strong&gt;—用户可以灵活地使用&amp;nbsp;任何编程语言&lt;a href="https://docs.greenmask.io/latest/built_in_transformers/standard_transformers/cmd/"&gt;实现基于领域的转换或使用&lt;/a&gt;&lt;a href="https://docs.greenmask.io/latest/built_in_transformers/advanced_transformers/"&gt;预定义的模板&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并行执行&lt;/strong&gt;—支持并行转储和恢复，以显著加快结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多种存储&lt;/strong&gt;—支持本地和远程存储，包括目录和 S3 兼容解决方案。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.greenmask.io/latest/commands/dump/?h=pgzip#pgzip-compression"&gt;Pgzip 支持更快的压缩&lt;/a&gt;&lt;/strong&gt;— 通过设置&lt;code&gt;--pgzip&lt;/code&gt;并行压缩来加速转储和恢复过程。&lt;/li&gt;
&lt;/ul&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/greenmask</link>
      <guid isPermaLink="false">https://www.oschina.net/p/greenmask</guid>
      <pubDate>Sat, 10 May 2025 09:24:00 GMT</pubDate>
    </item>
    <item>
      <title>65.4% 受访者期待建立全方位的 AI 法规体系</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;中国青年报社社会调查中心联合问卷网，对 1340 名受访者进行的一项调查显示，近八成受访者最近使用过人工智能工具。内容生成、教育辅助、效率工具是人们现阶段使用 AI 工具的主要用途。未来，让人工智能更好地服务于人，65.4% 的受访者希望建立覆盖伦理、算法等各方面的 AI 法规体系。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="338" src="https://oscimg.oschina.net/oscnet/up-2e1e4f7be33cd7ddeca06d21646cf2dd23a.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;调查显示，78.3% 的受访者使用过人工智能工具，其中，近三成（27.7%）频繁使用。交叉分析显示，受访在校大学生（90.2%）使用比最高，其次是党政机关/事业单位工作人员（83.8%），国有企业工作人员（82.0%）排在第三位。不同年龄段的受访者中，年龄越大使用人工智能的比例越低，00 后比例最高，为 85.1%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在各种不同的 AI 工具中，豆包是人们使用最普遍的工具，超六成受访者（61.0%）表示都在使用，其次是文心一言（48.6%），DeepSeek（44.1%）排在第三位。其他主要还有：腾讯元宝（17.9%）、讯飞星火（17.4%）、Kimi（16.5%）、ChatGPT（11.3%）、千问（10.7%）。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;人们现在使用 AI 工具主要是做什么？调查显示，内容生成（文案撰写/图像视频生成）（62.8%）是第一用途，其次是教育辅助（知识问答/学习路径规划）（56.2%），排在第三位的用途是作为效率工具（文档处理/数据分析/信息检索）（52.4%），其他还有：健康管理（饮食建议/医疗咨询）（44.7%）、情感交互（心理疏导/虚拟陪伴）（28.1%）、商业决策（市场分析/投资建议）（10.4%）。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;重庆大学法学院教授齐爱民提醒，虽然 AI 给我们的工作和生活带来了很多便利，但也需要注意，AI 系统通常依赖于使用大量用户的数据进行训练和优化，如果使用不当或缺乏监管，可能导致个人隐私的泄露和个人信息的滥用，甚至威胁公共安全。国家有关方面和社会的方方面面都应加强公众对 AI 技术的深入了解，广泛普及网络安全知识和法律常识，提高整体安全防范意识。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;未来，让人工智能更好地服务于人，65.4% 的受访者期待建立覆盖伦理、算法等各方面的 AI 法规体系；65.3% 的受访者指出应尽快出台 AI 安全技术强制标准；59.6% 的受访者呼吁重视人工智能教育培训，提升数字素养；35.5% 的受访者建议健全 AI 服务行业监督管理制度与标准。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;齐爱民指出，应在法律制度层面构建人工智能系统化的保障体系。首先，制定《人工智能基本法》，坚持以人为本，从整体上确定人工智能的基本规则，为各细分领域人工智能单行法的制定提供法律依据和立法基础。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;其次，针对人工智能的数据治理、算法歧视、算法黑箱等特殊法律问题，在《人工智能基本法》的基础上制定单行立法，针对性地解决人工智能数据治理问题与算法难题。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;「在人工智能法律制度的建设过程中，应贯彻分类分级的规范思维，同时坚持技术中立性原则，保持适度的规则弹性以适应技术迭代节奏，保障制度的科学性、稳定性与灵活性。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;受访者中，00 后占 9.5%，90 后占 48.4%，80 后占 34.4%，70 后占 6.1%，60 后占 1.4%，其他占 0.2%。中学生占 0.4%，在校大学生占 6.1%，党政机关/事业单位工作人员占 9.7%，国有企业工作人员占 20.3%，私营/外资企业工作人员占 47.2%，个体户占 7.7%，灵活就业/自由职业者占 7.5%，无业/失业人员占 0.6%，已退休占 0.1%，其他占 0.4%。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352568</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352568</guid>
      <pubDate>Sat, 10 May 2025 08:32:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Zadig v3.4.0 核能级发布：AI 提效 × 军工级防护 × 协作革命</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;&lt;img alt="" height="383" src="https://oscimg.oschina.net/oscnet/up-c7ea0a614026dc5c524ec1a92c7e359ec52.png" width="900" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;亲爱的开发者们，假期归来，效率拉满！&lt;/p&gt; 
&lt;p&gt;Zadig v3.4.0 携&lt;strong&gt; AI 黑科技 + 企业级防护 + 丝滑协作&lt;/strong&gt; 强势登场，免费版也能打，升级只需 5 分钟👇，四大超能升级，助你轻松应对节后工作高峰！&lt;/p&gt; 
&lt;span id="OSC_h2_1"&gt;&lt;/span&gt; 
&lt;h2&gt;🤖 AI 提效，Zadig Pilot 登场！&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;对话式解决工作流卡顿问题&lt;/li&gt; 
 &lt;li&gt;智能诊断效能瓶颈并生成优化方案&lt;/li&gt; 
 &lt;li&gt;产品文档秒级语义检索&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" height="1061" src="https://oscimg.oschina.net/oscnet/up-ddfaa4d79911c7a473c808799e8c7f9fe83.gif" width="2142" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;⚡ 效能四连暴击，甩锅时代终结！&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔥 资源消耗直降 50%！工作流自身运行效率翻倍&lt;/li&gt; 
 &lt;li&gt;⏮️ 生产事故 5 秒回滚：支持一键回滚备注溯源&lt;/li&gt; 
 &lt;li&gt;🔔 Teams 跨国告警：跨国团队零时差协同&lt;/li&gt; 
 &lt;li&gt;✅ 测试报告直通群聊：质量问题全员可见&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" height="1500" src="https://oscimg.oschina.net/oscnet/up-9ecd24ae14768629517bb89f2c4f48eefea.png" width="2928" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img alt="" height="1358" src="https://oscimg.oschina.net/oscnet/up-96df3282e967fbeae27bd7bd03cdbe680c2.png" width="2028" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;h2&gt;&lt;img alt="" height="1516" src="https://oscimg.oschina.net/oscnet/up-a41e653968fb28614bd8fc4e616758a87d8.png" width="2956" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;h2&gt;&lt;img alt="" height="1500" src="https://oscimg.oschina.net/oscnet/up-96c53c116b921d5cf0a4d6b780791ad7b86.png" width="1418" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;span id="OSC_h2_2"&gt;&lt;/span&gt; 
&lt;h2&gt;🛡️ 系统安全&amp;amp;性能双重升级&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;镜像漏洞扫描强化版（更新 CVE 库）&lt;/li&gt; 
 &lt;li&gt;智能拦截 0day 攻击（高危接口动态防护）&lt;/li&gt; 
 &lt;li&gt;工作流测试列表加载速度提升 300%&lt;/li&gt; 
 &lt;li&gt;高可用架构（HubServer 多副本部署）&lt;/li&gt; 
 &lt;li&gt;操作日志查询响应时间缩短 80%&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" height="751" src="https://oscimg.oschina.net/oscnet/up-c3a995eb5c21f831a2cbfd431a663abec64.png" width="757" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img alt="" height="2323" src="https://oscimg.oschina.net/oscnet/up-ad118a1d48a76645de295c98b1acf02ad00.png" width="2685" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;span id="OSC_h2_3"&gt;&lt;/span&gt; 
&lt;h2&gt;🔗 OpenAPI &amp;amp; 集成：打通企业工具链&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;CI/CD 融合数据库变更：OpenAPI 触发工作流自动执行 SQL 脚本&lt;/li&gt; 
 &lt;li&gt;操作日志审计 API：一键导出全量操作记录，合规审计无忧&lt;/li&gt; 
 &lt;li&gt;身份管理扩容：新增飞书/企业微信 SSO，千人团队一键登入&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" height="659" src="https://oscimg.oschina.net/oscnet/up-b98005a2e203e53ce90542195de6d3b2e98.png" width="1280" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-0cd12582e7c6c10bf017e0382bb3e7ff8a2.png" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;h2&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-f575cfc6da482d467e4784536fedbfc5fce.png" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;h2&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-cd2814f1f463a64dfd8e619c4861d8c6644.png" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;span id="OSC_h2_4"&gt;&lt;/span&gt; 
&lt;h2&gt;🎁 免费版超进化！小团队也能开航母&lt;/h2&gt; 
&lt;p&gt;为普惠开发者，免费版现已开放多项企业级能力：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;✅ 工作流通知含测试结果&lt;/li&gt; 
 &lt;li&gt;✅ Helm 服务部署状态检查&lt;/li&gt; 
 &lt;li&gt;✅ 全量安全加固 &amp;amp; 性能优化&lt;/li&gt; 
 &lt;li&gt;✅ 军工级资源优化（效能翻倍，成本减半）&lt;/li&gt; 
 &lt;li&gt;✅ HubServer 多副本高可用&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;💡 小团队也能稳如大厂！&lt;/p&gt; 
&lt;p&gt;让 Zadig 承包你的节后效率焦虑，现在升级👇&lt;/p&gt; 
&lt;p&gt;探索更多 Zadig v3.4 革新特性，敬请查阅：&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2FZadig%2520v3.4%2Frelease-notes%2Fv3.4.0%2F" target="_blank"&gt;Zadig v3.4 Release Notes&lt;/a&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/koderover/blog/18332270</link>
      <guid isPermaLink="false">https://my.oschina.net/koderover/blog/18332270</guid>
      <pubDate>Sat, 10 May 2025 08:03:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>我国科学家发明混合并行新算法，让 AI 训练速度翻倍</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近日，西北农林科技大学信息工程学院智能计算与农业信息系统团队刘斌教授携其课题组在国际计算机体系结构领域权威期刊《&lt;em&gt;IEEE Transactions on Computers&lt;/em&gt;》（TC，CCF A 类期刊）上发表研究论文。&lt;/p&gt; 
&lt;p&gt;该论文由西北农林科技大学携手美国纽约州立大学和云南大学联合发表。西北农林科技大学信息工程学院教授刘斌担任第一作者，纪泽宇老师与云南大学副教授何臻力共同担任通讯作者，纽约州立大学教授李克勤（欧洲科学院院士，并行与分布式计算领域公认的顶尖学者，国家特聘教授）作为重要合作者，使本次研究成果更具国际影响力。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;论文针对当前大规模深度卷积神经网络（DCNN）大模型训练中负载不均衡和高通信开销的难题，提出了一种创新的混合并行训练方法——GroPipe&lt;/strong&gt;。该方法首次将流水线模型并行与数据并行相融合，构建「组内流水线+组间数据并行」的分层训练架构，并通过自动模型划分算法（AMPA）实现计算负载的动态均衡调度，大幅提升 GPU 资源利用率。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-cc26042b68f375fc4655056cadeda8f3857.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;GroPipe 方法整体框架图。西北农林科技大学供图&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;为了进一步降低数据并行同步通信代价，GroPipe 在反向传播阶段引入「基于分组的延迟异步通信」策略，延迟梯度同步操作，有效减轻全局通信带宽压力，显著提升训练吞吐量。&lt;/p&gt; 
&lt;p&gt;实验证明，在 ImageNet 数据集上，GroPipe 方法相较于主流方案（如 DP、Torchgpipe、DAPPLE 和 DeepSpeed）表现出卓越优势：ResNet 系列平均加速比达 42.2%，VGG 系列达 79.2%；在 BERT-base 模型训练中，性能提升最高可达 51%。该成果展示了 GroPipe 在图像与文本领域的广泛适用性。&lt;/p&gt; 
&lt;p&gt;这一成果的发表标志着西北农林科技大学在计算机体系结构领域的 A 类国际顶级学术期刊——《&lt;em&gt;IEEE Transactions on Computers&lt;/em&gt;》（创刊于 1952 年）上实现了历史性突破。&lt;/p&gt; 
&lt;p&gt;相关论文信息：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoi.org%2F10.1109%2FTC.2025.3566869" target="_blank"&gt;https://doi.org/10.1109/TC.2025.3566869&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;转载自：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.sciencenet.cn%2Fhtmlnews%2F2025%2F5%2F544895.shtm" target="_blank"&gt;https://news.sciencenet.cn/htmlnews/2025/5/544895.shtm&lt;/a&gt;&lt;br&gt; 作者：李媛，来源：中国科学报&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352559</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352559</guid>
      <pubDate>Sat, 10 May 2025 08:01:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>快手可灵 2.1 上线，价格降 65%</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;AI 视频生成工具可灵 2.1 现已正式上线。这次更新不仅在性能上实现了显著提升，还大幅降低了价格。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="479" src="https://oscimg.oschina.net/oscnet/up-5e7135eb09f9596c74164e4a9a21a533fa6.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;可灵 2.1 在之前的 2.0 版本基础上进行了深入优化，推出了三个明确的模型质量体系：标准版、高品质版和大师版。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;标准版提供 720P 的画质，适合一般视频需求，一条视频仅需 20 灵感值；高品质版提供 1080P 的画质，性能卓越，一条视频需 35 灵感值；而大师版则是 1080P 的高端选择，适合影视级效果，价格为 100 灵感值。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;更新后的可灵 2.1 在效果上已经能够与之前的 2.0 大师版相媲美，价格却降低了 65%。虽然可灵 2.1 目前只支持图生视频，但其生成的效果已经能够满足大多数用户的需求。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;通过对比测试，不同版本之间的性能差异显著。可灵 2.1 的高品质版在生成速度上也相较于老版本有了明显的提升，用户的等待时间大幅缩短。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352553</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352553</guid>
      <pubDate>Sat, 10 May 2025 07:43:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>云从科技多模态大模型「CongRong-v2.0​​​​​​​」登顶 OpenCompass 全球多模态榜单</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近日，云从科技自主研发的「从容大模型」（CongRong-v2.0）在国际评测平台 OpenCompass 最新全球多模态榜单中，以 80.7 分的综合成绩登顶榜首。&lt;/p&gt; 
&lt;p&gt;&lt;img height="777" src="https://static.oschina.net/uploads/space/2025/0529/153339_ceUy_2720166.png" width="772" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1079" src="https://static.oschina.net/uploads/space/2025/0529/153443_hhxG_2720166.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frank.opencompass.org.cn%2Fleaderboard-multimodal%2F%3Fm%3DREALTIME" target="_blank"&gt;https://rank.opencompass.org.cn/leaderboard-multimodal/?m=REALTIME&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;据介绍，面对涵盖视觉感知、认知理解与跨领域应用的 8 大核心数据集，CongRong-v2.0 模型在医学健康、数理逻辑、艺术设计等十余个专业领域表现突出。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1222" src="https://static.oschina.net/uploads/space/2025/0529/153632_A0RS_2720166.png" width="1269" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;来源：&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F1qANK87j5VYqKSAvU2cjBw" target="_blank"&gt;https://mp.weixin.qq.com/s/1qANK87j5VYqKSAvU2cjBw&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352549</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352549</guid>
      <pubDate>Sat, 10 May 2025 07:35:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>图片授权公司 Getty Images 斥资数百万美元指控 Stability AI 侵权</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Getty Images 指控 Stability AI 在未经授权的情况下，使用其 1200 万张版权图片训练文生图模型 Stable Diffusion，并生成带有 Getty 水印的合成图像，构成版权侵权、商标侵权及不正当竞争。&lt;/p&gt; 
&lt;p&gt;Stability AI 则主张其行为符合「合理使用」原则，认为 AI 生成内容具有变革性，不直接复制原作品。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnbeta.com.tw%2Farticles%2Ftech%2F1502862.htm" target="_blank"&gt;相关报道称&lt;/a&gt;，Getty 已投入数百万美元在英美两国提起诉讼，CEO 克雷格·彼得斯坦承诉讼成本「高得令人却步」，但强调「证据非常有力」。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-00f36d49e30a8d04ce50ff97b625dbe7b55.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;彼得斯坦承这场斗争并不轻松：「我认为我方证据非常有力。但需要说明：我们不得不在英美两国分别起诉，而且坦白说，我们并不清楚其训练行为的具体发生地。有些环节需要耗费资金进行尽职调查，对方会抵抗，我们必须反击，双方反复拉锯。」&lt;/p&gt; 
&lt;p&gt;他补充道：「从全球范围的整体事实来看，优势绝对在我们这边。但这些事实如何在不同地域和法律框架下呈现，仍有待观察。」&lt;/p&gt; 
&lt;p&gt;案件将于 2025 年 6 月 9 日举行首次责任认定庭审。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352548</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352548</guid>
      <pubDate>Sat, 10 May 2025 07:30:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>NASA 内部使用的开源软件存在安全漏洞</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;网络安全初创公司 ThreatLeap 创始人、安全研究员 Leon Juranić&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.helpnetsecurity.com%2F2025%2F05%2F27%2Fnasa-open-source-software-vulnerabilities%2F" target="_blank"&gt;指出&lt;/a&gt;，美国宇航局（NASA）内部开发使用的开源软件存在漏洞，可能被攻击者利用入侵其系统。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0529/143431_zaKA_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;经分析确认，以下工具均因使用存在安全隐患的函数而存在缓冲区溢出漏洞：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;飞机工程分析工具 OpenVSP（开放式飞行器草图板）&lt;/li&gt; 
 &lt;li&gt;区域水文极端评估系统 RHEAS&lt;/li&gt; 
 &lt;li&gt;多仪器分析软件 OMINAS&lt;/li&gt; 
 &lt;li&gt;二维/三维网格适配工具 Refine&lt;/li&gt; 
 &lt;li&gt;包含数值分析库的 CFD 工具软件集（CFDTOOLS）&lt;/li&gt; 
 &lt;li&gt;knife 函数库&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Leon Juranić表示仅用 4 小时进行手动代码分析，就发现了 NASA 内部开发使用的多款开源软件中存在的一系列漏洞，并且&lt;span&gt;多次通过不同电子邮件向 NASA 报告漏洞，还打电话给 NASA 的安全运营中心，但未得到回复。因为 NASA 的官方政策规定不回复外部人员的漏洞报告。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352532/nasa-open-source-software-vulnerabilities</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352532/nasa-open-source-software-vulnerabilities</guid>
      <pubDate>Sat, 10 May 2025 06:39:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>​字节推出全新 AI 剪辑应用 「剪小映」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;字节跳动公司发布了一款名为 「剪小映」 的新应用，其宣传口号 「捕捉美好，智创影片」 引发了广泛关注。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="504" src="https://oscimg.oschina.net/oscnet/up-064c064581bd9831571c02a6b895dff4444.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;这也是字节继 「即梦 AI」 之后的又一力作。借助火山引擎的豆包大模型技术，「剪小映」 旨在为用户提供更加便捷、高效的视频创作体验。用户在使用这款应用时，无需具备专业的视频编辑技能，简单的操作就可以生成高质量的视频作品。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;应用背后的火山引擎豆包大模型，是 「剪小映」 最核心的技术支持。该模型拥有强大的数据处理和学习能力，使得视频的分析、剪辑和合成都表现得更加出色。通过智能化的处理方式，「剪小映」 能够在短时间内完成复杂的视频编辑任务，确保用户的创作效率。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352521</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352521</guid>
      <pubDate>Sat, 10 May 2025 05:55:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>九联开鸿基于 OpenHarmony 的机房动态环境监测场景解决方案</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;5 月 24 日，开源鸿蒙开发者大会 2025 在深圳隆重开幕。本次大会由开源鸿蒙项目群工作委员会主办，华为、润开鸿、中软国际、开鸿智谷、九联开鸿、鸿湖万联、深开鸿、诚迈科技、中国南方电网、中国科学院软件研究所、证通电子等合作单位提供支持。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;会上正式发布了开源鸿蒙 5.1 Release 版本，并进行开源鸿蒙应用技术组件共建启动、开源鸿蒙 AI Agent 技术共建启动等重要仪式，同时设立八大主题分论坛，邀请开源操作系统技术专家、前沿实践专家、开发者、生态伙伴代表等嘉宾汇聚一堂，共同探讨开源鸿蒙技术的未来发展、分享最前沿的开发经验。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;在会上，开源鸿蒙项目群工作委员会主席、华为终端 BG 软件部总裁龚体在大会上发表致辞。他表示，开源四年多来，开源鸿蒙代码规模已达 1.3 亿多行，代码贡献者达 8600 多位，超过 1100 款软硬件产品通过兼容性测评，覆盖金融、交通、教育、医疗、航天等多个行业领域，已成为发展速度最快的开源操作系统之一。开源鸿蒙项目群工作委员会委员、华为终端 BG 软件部副总裁章晓峰在会上发表《乘风破浪，共创开源鸿蒙未来》主旨报告，表示开源鸿蒙版本自开源以来持续迭代，已累计发布 8 个大版本，累计建设 1100 多个开源三方库，加速应用和设备的开发。未来，开源鸿蒙将持续推进全球化生态布局，推动千行百业规模化商用，构建具有全球影响力的开源操作系统生态。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;广东九联开鸿科技发展有限公司，作为母公司广东九联科技股份有限公司（股票代码：688609）持续深耕开源鸿蒙领域的全资子公司，致力于 OpenHarmony 生态产品与解决方案，提供基于 OpenHarmony 的物联网通讯模组、家庭多媒体信息终端、视频监控智能终端、智能通讯网关和路由设备、边缘计算类和信创类产品的研发、生产、销售与服务，参与了智慧城市、智慧电力、智慧医疗、智慧水利等行业解决方案，已经成为开源鸿蒙生态的重要贡献者。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;九联开鸿作为开源基金会的黄金捐赠人和 OpenHarmony 项目群的 A 类捐赠人，打造了在开源鸿蒙生态内南向适配+规模制造+核心产品+解决方案的复合竞争能力，建立了在开源鸿蒙生态领域的核心竞争力，俱备了生态及行业影响力，更好的实现研发成果的商业化落地。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;九联开鸿基于 OpenHarmony 的动态环境监测解决方案，实现了软硬件端到端全栈化，打造数字化运维领域的技术底座。对机房设备加强监控和管理，实现机房设备智能化和联网化集中管理，信息采集和处理的实时化，报警信息处理的自动化，提高机房设备低碳运行的安全性和稳定性，带来运维的管理和经济效益。广泛适用于各种室内或室外场所，如机房、配电房、配网台区、变电站、仓库等。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;img alt="1748492531192.jpg" src="https://oscimg.oschina.net/oscnet//14de8927c497c5799d25f99d7430a578.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;中国南方电网对深圳地区的 300 个数据机房和 45000 个配电机房进行信息化改造，引入九联开鸿基于 OpenHarmony 电力机房动态环境监测解决方案，基于 OpenHarmony 技术底座，充分发挥鸿蒙分布式软总线的技术特点，通过九联开鸿超高清发行版 HoloCeneOS 赋能的 AI 智能识别和人形追踪功能的摄像机，配合轻量级鸿蒙控制器，支持环境内 OpenHarmony 全栈端侧设备快速自组网、联动协同。通过视频监控+传感器相结合的融合感知能力，实现电力机房的无人值守，日常监测、低碳运行和全数字化辅助运维。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;img alt="图片 6.png" src="https://oscimg.oschina.net/oscnet//79c0ab0ce6b914ce9033f27eaa9d29cb.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;基于 OpenHarmony 的动态环境监测解决方案，针对机房所有的设备及内部环境进行集中监控和管理，动态环境监测包含机房环境内的设备、环境、能耗、消防、保安、网络等子系统，并实时监测各子系统设备的运行状态及工作参数，发现部件故障或参数异常，即时采取多媒体动画、语音、电话、短消息等多种报警方式，记录历史数据和报警事件。通过九联开鸿超高清发行版 HoloCeneOS 赋能的摄像机及应用 OpenHarmony 装载的各类网关、控制器对其他环境感知终端联动交互，实现集中管理、分散控制、能源管理、优化运行及高效管理，具备各机房的中央管理、监控及各子系统间的联动能力，并以简单易操作的用户界面提供优质服务。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;开源鸿蒙开发者大会 2025 的成功举办，不仅全面展示了开源鸿蒙技术革新及生态共建成果，也为行业发展注入澎湃动能。九联开鸿将继续秉承开源精神，深耕 OpenHarmony 生态共建，推动更多基于 OpenHarmony 的行业应用场景落地，为开源生态的发展贡献力量。面向全新的万物智联时代，九联开鸿希望携手更多开发者和生态伙伴继续秉持「共建、共治、共享」的理念，汇聚更多开发者与产业力量，共创万物智联世界的美好未来！&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352520</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352520</guid>
      <pubDate>Sat, 10 May 2025 05:26:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>Claude 向所有用户免费开放联网搜索功能</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;Anthropic 团队&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2FAnthropicAI%2Fstatus%2F1927440048930128089" target="_blank"&gt;宣布&lt;/a&gt; Claude 的联网搜索功能已面向所有用户免费开放。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;&lt;img height="1378" src="https://static.oschina.net/uploads/space/2025/0529/115507_zRvs_2720166.png" width="1288" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;该功能此前仅限美国付费用户使用。现在，免费用户也可以通过 Claude 访问实时网络信息，包括行业趋势、市场动态、学术文献等。&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;Claude 通过 Brave Search 提供搜索结果，并为每次回复提供内联引用以确保信息可验证。用户只需在 Claude 账户的个人资料设置中开启「网页搜索」开关即可使用。&lt;/p&gt; 
&lt;p&gt;相关阅读：&lt;a href="https://www.oschina.net/news/340196/anthropic-claude-web-search" target="news"&gt;Anthropic 为 Claude 增加联网搜索功能&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352510</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352510</guid>
      <pubDate>Sat, 10 May 2025 03:56:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>2025 年视频团队协作效率软件推荐之分秒帧</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#000000; text-align:left"&gt;分秒帧是由北京云为先科技有限公司 (成立于 2019 年) 研发的云端音视频生产协作平台,专注于解决音视频内容制作全流程的协同效率问题。作为新一代云原生 SaaS 工具,其核心定位为:&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;全链路协同枢纽:打通素材管理、在线审片、版本控制、交付归档等环节,支持跨部门、跨组织实时协作。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;数据驱动的生产力工具:通过在线视频批注、多版本对比、便捷安全分享等功能,实现从创意到交付的数字化转型。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;垂直行业解决方案:针对广告传媒、游戏、教育培训、电商、MCN 等领域的定制化需求,提供场景化协作模板和合规支持。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;一、在线视频协作平台&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;分秒帧 (&lt;/strong&gt;&lt;strong&gt;MediaTrack&lt;/strong&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;核心协作功能:精准到帧的批注系统:支持画笔、箭头、文字涂鸦等 10+标注工具,可针对视频画面的任意帧标记修改意见,团队成员实时同步查看并一键导出任务清单。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;多版本智能对比:自动记录视频版本历史,支持分屏对比不同版本的差异,快速定位修改点,减少重复沟通成本。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;云端资产库:提供团队共享空间和个人私有云盘,支持 4K 视频、PSD 工程文件等专业格式的在线预览和极速传输,下载速度可达 20Gbps。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;跨平台协作:适配 Web、客户端、小程序,移动端支持边播放边批注,适配弱网环境下的高清预览。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;适用场景:广告公司:多版本广告片审核、跨部门协作 (如创意部与制作部实时同步修改意见)。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;教育机构:慕课内容安全审核、学生视频作业批改 (支持逐帧批注和成绩自动汇总)。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;MCN 机构:短视频批量生产管理 (素材共享、脚本在线编辑、发布进度追踪)。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;游戏厂商:买量广告素材审核确认、外包供应商管理 (帮助美术团队打通素材生产到投放的闭环)。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet//36161cec98e21f93015217e885905727.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;在线协作平台分秒帧,帮助视频团队提升协作效率&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;二、垂直领域解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;教育行业:分秒帧+&lt;/strong&gt;&lt;strong&gt;WeVideo&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;协同模式:课前策划:教师通过分秒帧在线协作编辑课程脚本,学生同步参与讨论并添加素材建议。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;课中录制:使用 WeVideo 的互动视频功能插入测验和投票,学生观看时实时反馈学习效果。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;课后批改:教师在分秒帧上对学生视频作业进行逐帧批注,分析学生薄弱环节。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;核心优势:全流程闭环:从课程设计到学生反馈,无需切换工具,提升教学效率。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;安全合规:分秒帧通过教育行业数据安全认证,保障教学内容不泄露。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;广告行业:分秒帧+&lt;/strong&gt;&lt;strong&gt;Wipster&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;协同模式:创意提案:在分秒帧上上传故事板和参考视频,客户直接在画面上标记修改意见,实时同步至制作团队。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;制作执行:使用 Wipster 的品牌资产库确保视觉一致性,分秒帧的多版本管理功能支持 A/B 测试和客户多轮确认。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;交付验收:分秒帧生成带水印的预览链接,客户审批通过后一键导出高清文件,自动归档至云端。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;核心优势:效率提升:客户反馈周期从 3 天缩短至 8 小时,减少跨部门会议次数。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;三、协作效率提升技巧&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;标准化流程:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="color:#000000; text-align:left"&gt;1) &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;分秒帧模板库:创建常用项目模板 (如广告片、教育课程),包含预设标签、审批流程和团队权限,新成员可一键复用。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;2) &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;自动化工作流:通过 API 对接企业 OA 系统,视频上传后自动触发 AI 审核和邮件通知,减少人工干预。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;实时反馈优化:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="color:#000000; text-align:left"&gt;1) &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;批注优先级:在分秒帧上为批注设置「紧急」「建议」「参考」等标签,团队优先处理高优先级任务。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;数据驱动决策:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="color:#000000; text-align:left"&gt;1) &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;版本对比统计:多版本视频的修改次数、审批时间等数据可视化,帮助团队识别流程瓶颈。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;四、工具对比与选择建议&lt;/strong&gt;&lt;/p&gt; 
&lt;table cellpadding="0" cellspacing="0" style="-webkit-text-stroke-width:0px; color:#000000; font-family:宋体; font-size:14px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; orphans:2; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;&lt;strong&gt;场景&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;&lt;strong&gt;推荐工具&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;&lt;strong&gt;核心优势&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;&lt;strong&gt;分秒&lt;/strong&gt;&lt;strong&gt;帧&lt;/strong&gt;&lt;strong&gt;差异化功能&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;广告公司多版本审核&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;分秒帧+Frame.io&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;云端协作、品牌模板库&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;精准到帧的批注、AI 智能审核&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;教育机构视频作业管理&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;分秒帧+WeVideo&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;互动视频、数据分析&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;作业自动归档、逐帧批注&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;中小企业快速迭代内容&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;分秒帧+剪映&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;在线协作、AI 工具&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;多版本管理、极速传输&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;跨国团队跨境协作&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;分秒帧+Zoom&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;实时翻译、弱网优化&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="text-align:left"&gt;中文界面适配、本地化技术支持&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;五、分秒&lt;/strong&gt;&lt;strong&gt;帧&lt;/strong&gt;&lt;strong&gt;行业案例&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;广告行业:星驰广告使用分秒帧管理汽车品牌广告片制作,客户直接在视频上标记「更换车型颜色」「调整 LOGO 位置」等需求,制作周期缩短 40%。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="text-align:left"&gt;教育行业:中国石油大学教师通过分秒帧收集 120 名学生的视频作业,AI 自动生成成绩报告,每周节省 8 小时文件整理和批改时间。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="color:#000000; text-align:left"&gt;分秒帧通过「精准批注+智能审核+云端存储」的三位一体协作模式,已成为音视频行业数字化转型的核心工具。其教育行业解决方案和广告行业版本管理功能尤其突出,建议优先试用免费版 (支持 10GB 存储空间和 3 人协作),结合企业微信/钉钉实现深度集成。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352507</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352507</guid>
      <pubDate>Sat, 10 May 2025 03:50:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>Mistral AI 发布代码嵌入模型 Codestral Embed</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Mistral AI&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmistral.ai%2Fnews%2Fcodestral-embed"&gt;发布&lt;/a&gt;了其首款专门针对代码的嵌入模型 Codestral Embed。该模型在处理真实世界代码数据的检索用例时表现尤为出色，据称其性能显著优于市场上领先的代码嵌入器，包括 Voyage Code 3、Cohere Embed v4.0 以及 OpenAI 的大型嵌入模型。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-85599f31eba5292dd0346c0531e83ee1ca9.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0529/113410_KZv0_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;该模型的核心应用场景广泛。它可以为代码补全、编辑或解释任务提供快速高效的上下文检索，支持 AI 驱动的软件工程，例如 copilots 或编码代理框架。同时，它能通过自然语言或代码查询准确搜索相关代码片段，适用于开发者工具、文档系统和 copilots。&lt;/p&gt; 
&lt;p&gt;此外，Codestral Embed 能够识别功能相似或接近重复的代码段，即便是词汇差异较大的情况，这有助于识别可重用代码以避免重复，或检测复制粘贴以执行许可策略。它还能基于功能或结构对代码进行无监督分组，用于分析存储库组成、识别新兴架构模式或为自动化文档和分类系统提供支持。&lt;/p&gt; 
&lt;p&gt;Codestral Embed 目前通过 Mistral AI 的 API 提供，名称为 codestral-embed-2505。其价格为每百万 tokens 0.15 美元，批量 API 调用可享受 50% 的折扣。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;来源：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F92OEt-XuAxwtaBukkDAZbw" target="_blank"&gt;https://mp.weixin.qq.com/s/92OEt-XuAxwtaBukkDAZbw&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352503/mistral-ai-codestral-embed</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352503/mistral-ai-codestral-embed</guid>
      <pubDate>Sat, 10 May 2025 03:36:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>苹果操作系统大版本将采用年份命名</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2025-05-28%2Fapple-to-rebrand-device-operating-systems-ios-26-macos-26-watchos-26" target="_blank"&gt;彭博社报道称&lt;/a&gt;&lt;/u&gt;，苹果公司计划从今年开始，所有苹果操作系统的版本命名将&lt;strong&gt;统一采用年份标识&lt;/strong&gt;，而非此前混乱的版本体系。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0529/111852_wyvq_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;这意味着当前的 iOS 18 将直接跳跃至 "iOS 26"，同时 iPadOS 26、macOS 26、watchOS 26、tvOS 26 和 visionOS 26 也将同步亮相。&lt;/p&gt; 
&lt;p&gt;这一命名策略的核心逻辑在于统一性。目前苹果的操作系统呈现出令人困惑的数字差异：iOS 18、watchOS 12、macOS 15、visionOS 2—— 这种不一致源于各系统首版发布时间的差异，但对用户和开发者而言却构成了理解障碍。&lt;/p&gt; 
&lt;p&gt;报道指出，苹果将在 6 月 9 日的全球开发者大会上正式宣布这一变革。&lt;/p&gt; 
&lt;p&gt;新命名系统将伴随代号为"Solarium"的全新用户界面设计语言，覆盖 tvOS、watchOS 以及部分 visionOS 系统。这一设计理念旨在确保用户在不同设备间切换时获得更加统一的体验。&lt;/p&gt; 
&lt;p&gt;值得注意的是，苹果采用的是「未来年份」策略 —— 尽管新操作系统将于 2025 年 9 月前后发布，但却以 2026 年命名，这与汽车行业的营销手法如出一辙。如果这一策略得以延续，后续版本将依次使用 27、28 等年份标识。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352495/apple-to-rebrand-device-operating-systems-ios-26</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352495/apple-to-rebrand-device-operating-systems-ios-26</guid>
      <pubDate>Sat, 10 May 2025 03:19:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>日本出台首部人工智能法</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;日本参议院全体会议 28 日以多数赞成票通过首部专门针对人工智能（AI）的法律，旨在促进 AI 相关技术研发和应用并防止其滥用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;这部《人工智能相关技术研究开发及应用推进法》指出，AI 技术是日本经济社会发展的基础，从安全保障的角度来看也是重要的技术。依据这部新法，拟设立以日本首相为首、全体内阁成员参加的「AI 战略本部」作为日本 AI 政策的「司令部」，并制定「AI 基本计划」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;新法提出，日本应在 AI 领域保持研究开发能力，并提高相关产业的国际竞争力。日本政府有责任全面且系统地制定和实施推动 AI 研发和应用的措施。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;为防止 AI 技术被滥用而引发侵权问题，缓解公众对生成式 AI 制造虚假信息等的不安，新法规定，日本政府要对侵权行为展开调查，并给涉事企业以建议和指导，企业有义务配合相关调查。对于使用 AI 制作虚假视频、侵犯著作权等行为，日本政府将进行分析调查，并可公开相关企业的名称。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;根据日本总务省 2024 年版《信息通信白皮书》，使用或使用过生成式 AI 的日本国民仅占人口的 9.1%，远低于美国的 46.3% 和德国的 34.6%。（新华社）&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352493</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352493</guid>
      <pubDate>Sat, 10 May 2025 03:11:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>深入浅出 DDD：从理论到落地的关键</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;随着互联业务的发展、业务逐渐的复杂，传统代码架构在日常开发中存在的多种弊端，如代码混乱、补丁式开发、迭代成本高等问题，大大影响了迭代的效率。本文作者借助 DDD 的战略设计和战术设计，介绍了如何通过限界上下文、领域模型、聚合、资源库等概念，实现业务逻辑与技术的解耦，提升代码的可维护性、扩展性和稳定性。同时，文章作者结合团队在落地 DDD 时，遇到的卡点、痛点，创新性的提出一种 DDD 的分层实践，并在实际开发中取得了较好的效果&lt;/p&gt; 
&lt;h1&gt;01 背景&lt;/h1&gt; 
&lt;p&gt;不知不觉从事 To B 业务已经 3 年，笔者在工作中看了很多、也写了很多的代码，由此也产生很多的思考和感悟：在日常的工作中，&lt;em&gt;&lt;strong&gt;我们的主要矛盾在于日渐复杂、动态变化的业务诉求与有限的人力之间的矛盾&lt;/strong&gt;&lt;/em&gt;。而为了解决这一矛盾，我们要尽可能的保证代码的优雅。&lt;/p&gt; 
&lt;p&gt;但是传统的代码设计，如：面条式代码架构、基于面向对象+MVC 的代码架构，大部分无法保证在日趋复杂的业务中以优雅的代码架构持续发展。一旦迭代时间拉长，这类代码往往会或多或少地表现出以下特征：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;代码组织混乱（&lt;em&gt;&lt;strong&gt;数据的获取随意、业务逻辑与数据逻辑纠缠、结构随意&lt;/strong&gt;&lt;/em&gt;）;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;业务逻辑透传数据数据库（业务逻辑层层透传到数据库层）;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;隐式代码逻辑横行（&lt;em&gt;&lt;strong&gt;业务代码到处散落、对象的初始化通过隐式 init&lt;/strong&gt;&lt;/em&gt;）。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;笔者在这里画一下这套代码的逻辑组织结构：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-9dbec39118b18807bc8026ff0ce28dac508.jpg" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;具体来分析，笔者认为主要存在以下几种问题：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;稳定性&amp;amp;性能低下：由于代码组织结构的混乱，导致开发模式变成了打补丁，迭代方式变成了在原有的代码基础上继续填充 if else、或者新开辟一个 func 用于实现本次新加的代码逻辑。这往往会导致重复数据的获取、重复的数据校验、重复的对象创建.....，&lt;em&gt;&lt;strong&gt;从而导致性能的大幅下降&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;代码复杂程度高&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;a.补丁式的开发模式:&lt;/p&gt; 
&lt;p&gt;i. 由于补丁的开发，数据的获取随意从而导致代码的复用性降低，毕竟每同学在开发时，如果不全盘梳理代码已无法抽取合理的公共代码逻辑。而新添加的代码又会成为下一个同学的开发负担，从而导致_&lt;strong&gt;代码一直处于恶性循环，从而导致复杂度一直增长&lt;/strong&gt;&lt;em&gt;。笔者就见过一些超过 1500 行的函数，这些函数除了重新推倒重来基本无迭代的可能性，因此我们应该尽可能避免这种情况发生。除了以上问题，补丁式的开发缺少统一的规划，&lt;/em&gt;&lt;strong&gt;圈复杂度的急剧上升也是代码复杂度上升&lt;/strong&gt;_的一个重要原因。&lt;/p&gt; 
&lt;p&gt;b. 代码组织混乱:&lt;/p&gt; 
&lt;p&gt;i. 数据获取随意:由于没有统一的代码格式层级,数据的获取散列在整个代码的各处、赋值修改亦如此,导致数据污染。&lt;/p&gt; 
&lt;p&gt;ii.据获取通过 Map 结构：笔者见过一些代码通过 Map 获取数据，后续的开发的同学必须不仅要关注这个 map 的成员、还要关注 Map 中每个成员的生命周期是否有过修改、更新，迭代过程中十分痛苦。&lt;/p&gt; 
&lt;p&gt;iii .....&lt;/p&gt; 
&lt;p&gt;c. 隐式的业务逻辑:&lt;/p&gt; 
&lt;p&gt;i.代码只体现对数据修改、更新,而没有显示注明业务逻辑。&lt;/p&gt; 
&lt;p&gt;d. 业务逻辑透传数据数据库:&lt;/p&gt; 
&lt;p&gt;i. 笔者见过一些代码,请求的参数直接从 api 透传到 dao 层,导致对这段代码进行扩展十分困难。&lt;/p&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;迭代成本高:由于代码复杂度过高,导致迭代复杂度同比增加。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;从实际工作中来看，一旦代码选择这种架构，便只能沿着混乱继续一路狂奔，从而无法挽回直到业务无法忍受技术的短板，选择进行重构！笔者在这里截取一些代码片段，作为示例：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-1548a319bb4eb61341fb04b30e798aeca25.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;△map 获取&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-9dce13380b0ee46cab908ae166d4a306651.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;△超长代码&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;02 那什么才是好的代码架构？优雅的结构？&lt;/h1&gt; 
&lt;p&gt;从笔者的工作经验来看，好的代码结构一般具有以下几种特点：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;代码的可扩展性：&lt;em&gt;&lt;strong&gt;好的代码架构帮助代码开发人员将业务与技术解耦&lt;/strong&gt;&lt;/em&gt;，增加代码的扩展性;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;代码的可维护性：&lt;em&gt;&lt;strong&gt;好的代码架构能将业务和依赖进行解耦，增加代码的可维护性&lt;/strong&gt;&lt;/em&gt;；同时好的代码架构可以降低代码和文档的腐化程度;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;代码复用性高、可测试性强：&lt;em&gt;&lt;strong&gt;代码架构有助于提升代码的复用性、可测试性;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;锦上添花:&lt;/p&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;系统稳定性高:好的代码架构有助于提升系统的稳定性。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;很高兴的事情是 DDD 是从一种更高纬度的设计思想去思考问题，他以业务驱动为核心，从稳定性的角度去构建代码结构。某种意义而言，DDD 也许是一种更巧妙的解决方案，帮助我们去构建更优雅的结构，从一定维度上&lt;strong&gt;减缓&lt;/strong&gt;项目代码的腐化。&lt;/p&gt; 
&lt;h1&gt;03 什么是领域驱动设计&lt;/h1&gt; 
&lt;p&gt;DDD 是一种围绕领域建模来解决复杂业务交付的设计思想。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;什么是复杂？如何理解复杂？&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;复杂可能是现状业务就复杂，也可能是业务日渐演变成复杂&lt;/strong&gt;&lt;/em&gt;。复杂来自规模在变，比如几个业务对象的逻辑不复杂，几十上百个业务对象就会变得错综复杂;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;复杂来自结构化不足，例如结构化的中国结比非结构化的意大利面更有序、易于大脑理解。此外，如何协同不同团队完成软件交付也是一种复杂。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;什么是领域建模？&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;领域模型跟技术毫无关系，而是为了更有结构化的拆解和表达业务逻辑&lt;/strong&gt;&lt;/em&gt;。业务逻辑来自现实世界里的具体场景，涉及可视画面、操作动作和流程。要准确表达业务逻辑需要先讲清楚每个概念是什么，再建立概念之间的联系，基于这些关系再组合出更多的流程;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;概念、联系、流程就是领域模型。围绕领域模型去表达业务时也自然而然地把技术实现细节分离出去了。&lt;em&gt;&lt;strong&gt;后续代码实现就是将业务架构映射到系统架构的过程，以后业务架构调整了能快速的调整技术架构&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;DDD 用哪些领域概念表达业务？&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;表示业务逻辑的是：实体、值对象、领域服务、领域事件。这意味着所有领域逻辑都应该在这四种对象里，统一称为领域模型对象，这将极大_&lt;strong&gt;减少业务逻辑的蔓延;&lt;/strong&gt;_&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;引入聚合进一步封装实体和值对象，让领域逻辑更内聚，起到边界保护的作用。聚合的引入使得业务对象间的关联变少。如何设计聚合见下面实践部分;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;围绕聚合的操作引入工厂和资源库。工厂负责复杂聚合的创建，资源库负责聚合的加载、添加、修改、删除。聚合内的实体状态变更通过领域事件来推动;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;应用服务处于应用层，对领域逻辑编排、封装之后对上层接口层暴露。一次编排就是一个用户用例&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;04 领域驱动设计如何解决问题&lt;/p&gt; 
&lt;p&gt;DDD 包括&lt;strong&gt;战略设计&lt;/strong&gt;和&lt;strong&gt;战术设计&lt;/strong&gt;两部分。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;战略设计：主要从业务视角出发，建立业务领域模型，划分领域边界，建立通用语言的限界上下文，限界上下文可以作为微服务设计的参考边界。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;战术设计：从技术视角出发，侧重于领域模型的技术实现，完成软件开发和落地，包括：聚合根、实体、值对象、领域服务、应用服务和资源库等代码逻辑的设计和实现。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;strong&gt;4.1 战略设计：分割你的设计，以免无法控制&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;4.1.1 &lt;strong&gt;Bounded Context（限界上下文）&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;限界上下文是围绕应用程序和/或项目部分的概念边界，涉及业务领域、团队和代码。&lt;em&gt;&lt;strong&gt;它将相关组件和概念分组，避免歧义，因为其中一些可能在没有明确上下文的情况下具有相似的含义&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;比如电商领域的商品，商品在不同的阶段有不同的术语，在销售阶段是商品，而在运输阶段则变成了货物。同样的一个东西，由于业务领域的不同，赋予了这些术语不同的涵义和职责边界，这个边界就可能会成为未来微服务设计的边界。领域边界就是通过限界上下文来定义的。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;比如财务领域、审核领域。DDD 里的限界上下文（Bouded Context）是对广告领域的软件实现，比如钱包体系、账户体系就是财务领域内的限界上下文&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;限界上下文定义了解决方案的明显边界，边界里的每一个领域概念，包括领域概念内的属性和行为都有特殊含义。&lt;em&gt;&lt;strong&gt;出了限界上下文这个边界这层含义就不复存在。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;如何划分限界上下文？&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;根据相关性做归类。一般是优先考虑功能相关性而不是语义相关性，比如创建订单和支付订单都是订单语义，但功能相差比较大，应该划分为两个限界上下文。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;根据团队粒度做裁剪、根据技术特点做裁剪。&lt;strong&gt;一些通用的技术功能应该尽可能归拢到一个限界上下文&lt;/strong&gt;，比如每个业务限界上下文都有监控，但监控能力应该归拢到监控限界上下文。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;4.1.2 &lt;strong&gt;&lt;strong&gt;Context Mapping（上下文映射）&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;识别并以图形方式记录项目中的每个限界上下文称为上下文映射。上下文映射有助于更好地理解有界上下文和团队如何相互关联和沟通。它们给出了实际边界的清晰概念，并帮助团队直观地描述系统设计的概念细分。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-7afc8e9bf37035895215a3106b41c4c8a4b.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;受限上下文之间的关系可能会有所不同，这取决于设计要求和其他特定于项目的约束，本文将省略某些关系，但以下四种关系除外：&lt;/p&gt; 
&lt;h3&gt;4.1.3 &lt;strong&gt;&lt;strong&gt;&lt;strong&gt;Anti-corruption Layer（防腐层）:&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;下游限界上下文实现了一个转换来自上游上下文的数据或对象的层，确保它支持内部模型。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-cff8c39809109ce1fc7df41d063957ce788.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;4.1.4 &lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;Conformist（跟随者关系）:&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;下游有界上下文符合并适应上游上下文，如果需要，必须进行更改。在这种情况下，上游环境对满足下游需求不关心。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-c95bb76778a72702762ef67c3509f91cdcf.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;4.1.5 &lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;Customer/Supplier（&lt;strong&gt;&lt;strong&gt;客户/供应商关系&lt;/strong&gt;&lt;/strong&gt;）:&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;上游向下游提供服务，下游上下文充当客户，确定需求并向上游请求更改以满足其需求。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-c0c559fb2dc388d94f0271eceb521b387a2.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;4.1.6 &lt;strong&gt;&lt;strong&gt;&lt;strong&gt;Shared Kernel（共享内核）:&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;有时，两个（或更多）上下文不可避免地重叠，最终共享资源或组件。这种关系要求两个上下文在需要更改时保持连续同步，因此如果可能的话应该避免。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-92c12151b9f34174f0a252ebfff6f5a4448.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-30e17f45df9bce61e1c85a8ed8030c38922.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-705f22755d0aa7492bab6bc858e2829f710.jpg" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;4.2 战术设计:DDD 的螺母和螺栓&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-835d6524c9b91d09b90bb78330ee3e48cb1.jpg" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-714bf04fbcf74ee5b68d9e0a8724b54ddca.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;4.2.1 Entity（实体）&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;具有唯一标识并具有连续性的对象称为实体，它们不仅仅由属性定义，更多地由它们是谁定义&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;它们的属性可能会发生变异，它们的生命周期可能会发生剧烈变化，但它们的身份依然存在。&lt;strong&gt;身份通过唯一密钥或保证唯一的属性组合来维护&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;例如，在电子商务领域，订单有一个唯一的标识符，它经历几个不同的阶段：打开、确认、发货和其他，因此它被视为领域实体。&lt;/p&gt; 
&lt;p&gt;重点关注：Entity 最重要的设计原则是&lt;strong&gt;保证实体的不变性（Invariants）&lt;/strong&gt;，&lt;strong&gt;也就是说要确保无论外部怎么操作，一个实体内部的属性都不能出现相互冲突，状态不一致的情况。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;这里给出一些总结的规范：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;创建一致性 ，实体的创建尽量通过 Factory 或者规约进行创建;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在代码实践中，尽量保证实体的创建唯一性（避免过多的创建实体的方法）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;实体的属性尽量使用小写，避免外部直接对属性的操作，从而导致实体与业务出现不一致的情况;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;通过聚合根对子实体进行访问；&lt;strong&gt;子实体的一致性交由聚合根保证;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任何&lt;strong&gt;实体的行为只能直接影响到本实体&lt;/strong&gt;（和其子实体）。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;应当遵守的原则：&lt;em&gt;&lt;strong&gt;在一个系统里一个实体对象的所有变更操作应该都是预期内的，如果一个实体能随意被外部直接修改的话，会增加代码 bug 的风险&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;4.2.2 Value Object（值对象）&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;描述特征的对象，不具有任何唯一性的对象称为价值对象，它们只关心自己是什么，而不关心自己是谁，值对象是多个实体的属性，可以由多个实体共享。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;例如：两个客户可以具有相同的发货地址，尽管存在风险，但如果其中一个属性需要更改，则共享这些属性的所有实体都会受到影响。为了防止这种情况发生，&lt;strong&gt;值对象必须是不可变的，当需要更新时，强制系统用新实例替换它们&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;此外，&lt;strong&gt;价值对象的创建应始终取决于用于创建它们的数据的有效性，以及它如何尊重业务不变量&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;因此，如果数据无效，将不会创建对象实例。例如，在北美，带有非字母数字字符的邮政编码将违反业务不变量，并将触发地址创建异常。&lt;/p&gt; 
&lt;h3&gt;4.2.3 Aggregate（聚合）&lt;/h3&gt; 
&lt;p&gt;聚合是相关实体和值对象的集合，聚集在一起表示事务边界。&lt;em&gt;&lt;strong&gt;每个聚合都有一个朝外的实体，控制对边界内对象的所有访问，该实体称为聚合根，是其他对象可以交互的唯一对象。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;聚合中的任何对象都不能直接从外部世界调用，从而保持内部的一致性&lt;/strong&gt;。业务不变量是保证聚合及其内容完整性的业务规则，换句话说，它是一种确保其状态始终与业务规则一致的机制。例如，当某个产品的库存量为零时，就永远不能下订单。&lt;/p&gt; 
&lt;h3&gt;4.2.4 Repository（资源库）&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;为了能够从持久性中检索对象，无论是在内存、文件系统还是数据库中，我们需要提供一个对客户机隐藏实现细节的接口，以便它不依赖于基础架构细节，而仅仅依赖于抽象。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;存储库提供了一个接口，域层可以使用该接口来检索存储的对象，避免了与存储逻辑的紧密耦合，并使客户端产生了直接从内存检索对象的错觉。&lt;/p&gt; 
&lt;p&gt;值得一提的是，&lt;strong&gt;所有存储库接口定义都应该位于 domain 层，但它们的具体实现属于基础架构层&lt;/strong&gt;。&lt;/p&gt; 
&lt;h3&gt;4.2.5 Domain Event（领域事件）&lt;/h3&gt; 
&lt;p&gt;领域事件是过去时态的业务事实，当聚合根状态变更时触发，&lt;em&gt;&lt;strong&gt;它的核心职责是跨聚合/微服务的业务协同，我们将它定义在领域层，发布/处理可在应用层&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;例如订单创建后触发库存更新、通知等跨系统操作，它不需要强一致性保证，只需要保证最终一致性。&lt;/p&gt; 
&lt;h3&gt;4.2.6 Domain Service（领域服务）&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;在许多情况下，领域模型需要某些与实体或值对象不直接相关的动作或操作，将这些动作或操作强制到它们的实现中会导致它们的定义失真。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;如电商订单支付，需要协调订单、库存、支付三个实体完成事务。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;服务****应该精心设计，始终确保它们不会剥夺实体和价值对象的直接责任和行为&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;它们还应该是无状态的，这样客户机就可以使用服务的任何给定实例，而不考虑该实例在应用程序生命周期中的历史记录。&lt;/p&gt; 
&lt;h3&gt;4.2.7 Application Service（应用服务）&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;和领域服务的区别在于，应用服务处理流程编排、捕获异常，领域服务处理核心业务规则&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;应用服务是协调领域模型与外部系统交互的中间层，负责处理非业务逻辑的横切关注点，如事务管理、安全认证、参数校验、事件发布等。&lt;/p&gt; 
&lt;p&gt;通过一个应用服务，我们能够清晰地看出对哪些实体行为进行了调度，它依赖于领域服务和基础设施组件，进行日志记录、异常捕获、权限验证、数据转换等基础设施层交互，&lt;strong&gt;保持领域层与技术实现解耦&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;此外，应用服务还需要对外暴露 REST API 或 RPC 接口，对内将 DTO 转换为领域对象，隔离外部请求与内部模型。&lt;/p&gt; 
&lt;h1&gt;05 领域驱动设计分层架构&lt;/h1&gt; 
&lt;h2&gt;**&amp;nbsp;六边形架构**&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-b969e11d638db55ba81746ce300f1e9bc3f.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;从代码演进的角度来看/需求变更的速度来看，我们将各层按照变更速度排序：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Domain（领域）层&lt;/strong&gt;属于核心业务逻辑，属于经常被修改的地方；这部分的需求经常随着产品的迭代进行变更。&lt;em&gt;&lt;strong&gt;领域层不依赖其他层，通过资源库包下的接口定义做到依赖倒置，接口参数不能体现具体技术实现细节，领域模型里的实现逻辑只依赖接口&lt;/strong&gt;&lt;/em&gt;。这样做到对领域逻辑的一层防腐。本层里以聚合为单位放置代码，便于以后系统拆分，以聚合为单位。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Application（应用）层&lt;/strong&gt;属于 Use Case（业务用例）**。&lt;strong&gt;业务用例一般都是描述比较大方向的需求，接口相对稳定，特别是对外的接口一般不会频繁变更。&lt;em&gt;&lt;strong&gt;添加业务用例可以通过新增 Application Service 或者新增接口实现功能的扩展&lt;/strong&gt;&lt;/em&gt;&lt;/strong&gt;。**此外应用层还可以处理横切面事务比如启动数据库事务。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interface（接口）层&lt;/strong&gt;主要负责解决外部通信、协议等问题，将外部的定时任务、请求、rpc、事件消费都进行透明处理。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Infrastructure（基础设施）层&lt;/strong&gt;属于最低频变更的。&lt;em&gt;&lt;strong&gt;基础设施层完成资源库的实际实现，以及领域层定义的其他接口的实现如对外部服务的访问，领域事件发布到消息队列中间件等&lt;/strong&gt;&lt;/em&gt;。一般这个层的模块只有在外部依赖变更了之后才会跟着升级，而外部依赖的变更频率一般远低于业务逻辑的变更频率。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;&lt;strong&gt;5.1 DDD FrameWork（四层架构）&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;后文中，我们对于层的介绍将类比接口的概念进行介绍，重点关注 3 个概念：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;入参&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;出参&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;内容&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-a34a2ca1cc97836745db7b69c9da53746fd.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;5.1.1 用户接口层&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;定义：用户接口层负责向用户显示和解释用户指令。这里的用户可能是:用户、程序、自动化测试和批处理脚本等等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;目的：我们希望通过分层,来提升 application 层的稳定性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;构成结构&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;入参: &amp;nbsp;CQE 对象;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;出参：&lt;strong&gt;DTO 对象;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;内容 : 对玩不输入进行校验,输出内容的处理结果;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;笔者在这里给出一些落地规范:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;统一的鉴权&lt;/strong&gt;：比如在一些需要 AppKey+Secret 的场景，需要针对某个租户做鉴权的，包括一些加密串的校验;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;网络协议的转化&lt;/strong&gt;：这个尽量交给框架处理，我们主要的工作是关注如何将参数反序列化或者序列化;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Session 的管理&lt;/strong&gt;：一般在面向用户的接口或者有登陆态的，通过 Session 或者 RPC 上下文可以拿到当前调用的用户，以便传递给下游服务;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;限流配置&lt;/strong&gt;：对接口进行限流;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;**异常处理：**通常在接口层要避免将异常直接暴露给调用端，所以需要在接口层做统一的异常捕获，转化为调用端可以理解的数据格式;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;日志打印&lt;/strong&gt;：在该层进行日志的打印;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;CQE 的校验&lt;/strong&gt;：在该层进行业务无关的校验，推荐依赖框架本身实现;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;可选&lt;/strong&gt;：部分代码会在 interface 层引入缓存。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;补充：浅谈 CQE 模型和 CQRS&lt;/p&gt; 
&lt;p&gt;从笔者的经验来看，这两者概念上区别不大，他的思路就是将系统的 Input，根据语义拆分成 write 和 read。这里先只谈 CQE 模型：&lt;/p&gt; 
&lt;p&gt;Command 指令：指调用方明确想让系统执行的指令，他的预期是对一个系统进行影响，即写操作。通常来说，需要一个明确的返回值（如：同步的操作结构、异步的指令被接受）&lt;/p&gt; 
&lt;p&gt;Query 指令：指调用方明确想查询的东西，包括查询参数、过滤、分页等条件，其预期是对一个系统的数据完全不影响的，也就是只读操作&lt;/p&gt; 
&lt;p&gt;Event 指令：指一件已经发生过的事情，需要系统根据这个事实进行相应，通常都会伴随一个写操作。事件处理器不会有返回值。补充一下，Application 层的 Event 概念和 Domain 层的 DomainEvent 是类似的概念，但不一定是同一回事，这里的 Event 更多是外部一种通知机制而已。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-132ad2640ce20f6a9ed2eccfc0c56e240ee.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q：为什么使用 CQE 对象?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;这是一个好的问题，从笔者的经验来看，DDD 在于解决复杂的业务；&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;从某种意义上来说，笔者认为读不算真正的业务，读往往可以理解成数据的组装。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;因此，对问题进行拆分，分而治之，从工程学上来说是一种简单可行的方案。从完美的角度上来说，如果能有一种可以全治理的方案一定是最好的！But we live in the real world!&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;5.1.2&amp;nbsp;应用层（落地重点）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;定义：&lt;em&gt;应用层是很薄的一层，理论上不应该有业务规则或逻辑，&lt;strong&gt;主要面向用例和流程相关的操作&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;目的：应用层的核心是：Manage 或者 Orchestration，编排是应用层最关心的事情，他负责将业务编排到各个领域中。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;构成结构&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;入参: &amp;nbsp;CQE(Command、Query、Event) 对象&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;出参：&lt;strong&gt;DTO 对象&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;内容：&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;a.应用层位于领域层之上，可以协调&lt;strong&gt;多个聚合的服务和领域对象完成服务编排和组合&lt;/strong&gt;，协作完成业务操作。&lt;/p&gt; 
&lt;p&gt;b.应用层也是微服务之间交互的通道，它可以调用其它微服务的应用服务，完成微服务之间的服务组合和编排。&lt;/p&gt; 
&lt;p&gt;c.应用服务是在应用层的，&lt;em&gt;&lt;strong&gt;它负责服务的组合、编排和转发，负责处理业务用例的执行顺序以及结果的拼装，以粗粒度的服务通过 API 网关向前端发布&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;d.应用服务还可以进行安全认证、权限校验、事务控制、发送或订阅领域事件等。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;落地规范&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;a.应用层应该只包含业务流程的封装，不处理业务逻辑;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;b.避免进程内部的 EDA 驱动。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q:什么是 DTO？为什么要有 DTO？带来的额外成本是什么？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;DTO 存在的意义在于我们可以将实体与数据传输解耦，使得领域层只和应用层有关联性、对外透明；额外成本：性能&amp;amp;冗余&amp;amp;额外引入的 DTO Assembler 层（用于实体到 DTO 的转换）。一个基本的 DTO 对象，如下（简单的 pojo 对象）：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;type AdWalletDTO&amp;nbsp;struct&amp;nbsp;{
&amp;nbsp; &amp;nbsp; AdAccountID &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;string&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; `json:"ad_account_id"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;orm:"ad_account_id"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp;&amp;nbsp;// 子账户 ID
&amp;nbsp; &amp;nbsp; WalletStatus &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;uint&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; `json:"wallet_status"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;orm:"wallet_status"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp;&amp;nbsp;// 钱包状态：1-正常 2-欠费状态 3-关闭
&amp;nbsp; &amp;nbsp; DepositBalance &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;decimal.Decimal `json:"deposit_balance"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; orm:"deposit_balance"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; `&amp;nbsp;// 存款余额
&amp;nbsp; &amp;nbsp; FrozenDepositBalance&amp;nbsp;decimal.Decimal `json:"frozen_deposit_balance"&amp;nbsp;orm:"frozen_deposit_balance"&amp;nbsp;`&amp;nbsp;// 冻结存款余额
&amp;nbsp; &amp;nbsp; CreditBalance &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;decimal.Decimal `json:"credit_balance"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; orm:"credit_balance"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp;&amp;nbsp;// 信用余额
&amp;nbsp; &amp;nbsp; FrozenCreditBalance &amp;nbsp;decimal.Decimal `json:"frozen_credit_balance"&amp;nbsp;orm:"frozen_credit_balance"&amp;nbsp;` &amp;nbsp;&amp;nbsp;// 冻结信用余额
&amp;nbsp; &amp;nbsp; CouponBalance &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;decimal.Decimal `json:"coupon_balance"` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// 代金券余额
&amp;nbsp; &amp;nbsp; Title &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;string&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; `json:"title"` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// 名字
&amp;nbsp; &amp;nbsp; Currency &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;string&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; `json:"currency"` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// 货币
}



&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Q:CQE 和 DTO 有什么区别？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;ApplicationService 的入参是 CQE 对象，但是出参却是一个 DTO，从代码格式上来看都是简单的 POJO 对象，那么他们之间有什么区别呢？&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;可以简单做如下理解：&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;入水口的 pojo 是 CQE，出水口的是 DTO（因为入水口天然自带业务含义，因此需要严格的校验；出水口是安全的，只承担数据传输的载体）&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;复用性上而言：CQE 对象复用性更低，DTO 的复用性更强&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;CQE 对象：CQE 对象是 ApplicationService 层的输入，也可以是 interface 层的输入，有明确的意图，这个对象必须保证输入的正确性。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;DTO 对象：是负责承接数据的容器，不负责具体的业务，不包含任何逻辑，只是贫血对象&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;最重要的一点：因为 CQE 是」意图「，所以 CQE 对象在理论上可以有」无限「个，每个代表不同的意图；但是 DTO 作为模型数据容器，和模型一一对应，所以是有限的。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q:为什么出参应该返回 DTO 而不是 Entity?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;这个是一个非常好的问题，笔者在 DDD 落地实践的时候，笔者是这么去想的：&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;稳定性思考：Entity 里面通常会包含业务规则，如果 ApplicationService 返回 Entity，则会导致调用方直接依赖业务规则，如果内部规则变更可能直接影响到外部。&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;DTO 的不稳定性大于实体：业务经常会增加、改变一些字段，而实体的字段相对更加稳定，这也让我们尽量在 application 层的出参去屏蔽实体&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;领域边界稳定性：ApplicationService 的入参是 CQE 对象，出参是 DTO，这些基本上都属于简单的 POJO，来确保 Application 层的内外互相不影响。&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;通过 DTO 组合降低成本：Entity 是有限的，DTO 可以是多个 Entity、VO 的自由组合，一次性封装成复杂 DTO，或者有选择的抽取部分参数封装成 DTO 可以降低对外的成本。&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Q:在上述的过程中，我们似乎只解决了 C、E 对象，我们应该如何针对 Query 进行处理？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;在实践过程中，我们发现 Query 往往是复杂的、随意的、且交付对象是异变的，因此如果强行将 Query 作为业务来嵌入我们的 DDD 中，简直是自讨苦吃——我们很难保证一个操作既是高效读、又是高效写、同时还要兼顾一致性。因此我们的解决思路是，针对 Query 采用传统的开发模型，虽然不够优雅、但是足够有效，毕竟因为改动代码，导致读错的成本实在是太小了。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;在实践过程中，我们推荐使用调用链去尽量简化、复用读的场景，并且取得较好的实践效果。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;应用层，因为我们操作的对象是 Entity，但是输出的对象是 DTO，这里就需要一个专属类型的对象叫 DTO Assembler。DTO Assembler 的唯一职责是将一个或多个 Entity/VO，转化为 DTO。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;注意：DTO Assembler 通常不建议有反操作，也就是&lt;/strong&gt;&lt;em&gt;&lt;strong&gt;不会从 DTO 到 Entity&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;，因为通常一个 DTO 转化为 Entity 时是无法保证 Entity 的准确性的。&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;5.1.3&amp;nbsp;领域层&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;定义：领域层的作用是实现企业核心业务逻辑,通过各种校验手段保证业务的正确性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;目的：领域层的目的是完成业务的核心逻辑,降低实体之间的依赖性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;构成结构&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;入参: 实体、聚合根、基础的数据结构 (int、string......)......&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;出参：实体、聚合根、基础的数据结构&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;内容：&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;a.应领域层包含聚合根、实体、值对象、领域服务等领域模型中的领域对象，主要体现领域模型的业务能力，它用来表达业务概念、业务状态和业务规则。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;b.领域模型的业务逻辑主要是由实体和领域服务来实现的&lt;/strong&gt;&lt;/em&gt;，其中实体会采用充血模型来实现所有与之相关的业务功能。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;c.当领域中的某些功能，单一实体（或者值对象）不能实现时，我们就会将这样的逻辑放在领域服务里，&lt;/strong&gt;__&lt;strong&gt;通过领域服务组合聚合内的多个实体（或者值对象），实现复杂的业务逻辑&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;落地规范&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;a.避免领域事件的使用。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q:为什么我们要避免进程内部的领域事件的使用？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;进程内的领域事件，会导致显示的调度变成隐式，这种隐式的场景在测试阶段很难发现问题，从而导致线上问题的产生。从迭代的发展来看，隐式的事件驱动对于我们设计一个好的代码架构不是一件好事情，反而会大大提高代码的复杂度！因此，我们要尽量去避免进程内部级别的事件驱动~&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;5.1.4&amp;nbsp;基础设施层&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;定义：&lt;em&gt;&lt;strong&gt;基础层是贯穿所有层的，它的作用就是为其它各层提供通用的技术和基础服务&lt;/strong&gt;&lt;/em&gt;，包括第三方工具、驱动、消息中间件、网关、文件、缓存以及数据库等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;目的：对业务提供最基本的服务&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;落地规范&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;a.比较常见的功能还是提供数据库持久化&lt;/p&gt; 
&lt;p&gt;b.基础层包含基础服务，它采用依赖倒置设计，封装基础资源服务，实现应用层、领域层与基础层的解耦，降低外部资源变化对应用的影响。&lt;/p&gt; 
&lt;h3&gt;5.1.5 Data flow direction（数据链路）&lt;/h3&gt; 
&lt;p&gt;在数据链路维度，我们来看 DDD 的数据流转，可以更清晰地看出每一层之间的交互。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-9dee7244a7da8fbc9592919ffa82a7d3f60.jpg" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;数据持久化对象 PO(Persistent Object)，与数据库结构一一映射，是数据持久化过程中的数据载体。&lt;/p&gt; 
&lt;p&gt;领域对象 DO（Domain Object），微服务运行时的实体，是核心业务的载体。&lt;/p&gt; 
&lt;p&gt;数据传输对象 DTO（Data Transfer Object），用于前端与应用层或者微服务之间的数据组装和传输，是应用之间数据传输的载体。&lt;/p&gt; 
&lt;p&gt;视图对象 VO（View Object），用于封装展示层指定页面或组件的数据。&lt;/p&gt; 
&lt;h3&gt;5.1.6 附录：生产环境中项目结构&lt;/h3&gt; 
&lt;p&gt;目录结构：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-5097fcffa71cd055242a7f2fef2732018dd.jpg" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;5.2 领域驱动 VS 数据驱动&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;5.2.1 对比&lt;/h3&gt; 
&lt;p&gt;传统的接口-逻辑-数据访问三层架构里，往往是这么个逻辑。&lt;/p&gt; 
&lt;p&gt;前几行代码做 validation，接下来做 convert，然后是业务处理逻辑的代码，中间穿插着通过 RPC 或者 DAO 获取更多的数据，拿到数据后，又是 convert 代码，然后接着一段业务逻辑代码，最后可能还要落库，发消息等等。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;MVC 三层架构&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;用户界面层（View/Controller）**负责用户交互和界面展示，接收用户输入并传递至业务逻辑层，同时将处理结果返回给前端。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;业务逻辑层（Service）**包含核心业务逻辑，但常因过度集中而臃肿，容易成为「大泥球」。业务逻辑可能分散在多个 Service 类中，甚至通过 SQL 实现部分逻辑，导致耦合度高。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;数据访问层（DAO）**直接操作数据库，依赖 ORM 框架，与数据库表结构紧密绑定。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-86b21cba1182376b823e71bc6d78b89aecb.jpg" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;MVC VS DDD：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-3b5f86f8a24a83b70c8e81a7e877562eead.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;5.2.2 转化&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-6dbaa14bd6cd3dd8c0a0b10723cea84925b.jpg" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;三层架构向 DDD 分层架构演进，主要发生在业务逻辑层和数据访问层。&lt;/p&gt; 
&lt;p&gt;DDD 分层架构在用户接口层引入了 DTO，给前端提供了更多的可使用数据和更高的展示灵活性。&lt;/p&gt; 
&lt;p&gt;DDD 分层架构对三层架构的业务逻辑层进行了更清晰的划分，改善了三层架构核心业务逻辑混乱，代码改动相互影响大的情况。DDD 分层架构将业务逻辑层的服务拆分到了应用层和领域层。&lt;em&gt;&lt;strong&gt;应用层快速响应前端的变化，领域层实现领域模型的能力&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;另外一个重要的变化发生在数据访问层和基础层之间。三层架构数据访问采用 DAO 方式；&lt;em&gt;&lt;strong&gt;DDD 分层架构的数据库等基础资源访问，采用了仓储（Repository）设计模式，通过依赖倒置实现各层对基础资源的解耦&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;仓储又分为两部分：仓储接口和仓储实现。&lt;em&gt;&lt;strong&gt;仓储接口放在领域层中，仓储实现放在基础层&lt;/strong&gt;&lt;/em&gt;。原来三层架构通用的第三方工具包、驱动、Common、Utility、Config 等通用的公共的资源类统一放到了基础层。&lt;/p&gt; 
&lt;h3&gt;5.2.3 CQRS&lt;/h3&gt; 
&lt;p&gt;不得不提的 CQRS 结构（参考文档：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fzh-cn%2Fazure%2Farchitecture%2Fpatterns%2Fcqrs%25EF%25BC%2589" target="_blank"&gt;https://learn.microsoft.com/zh-cn/azure/architecture/patterns/cqrs）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;简介：CQRS 是「命令查询责任分离」（Command Query Responsibility Segregation）的缩写&lt;/p&gt; 
&lt;p&gt;定义：&lt;em&gt;&lt;strong&gt;CQRS 是一种设计模式，可将数据存储的读取和写入操作隔离到单独的数据模型中&lt;/strong&gt;&lt;/em&gt;。 此方法允许每个模型独立优化，并可以提高应用程序的性能、可伸缩性和安全性&lt;/p&gt; 
&lt;p&gt;核心：将外部系统的输入区分为：Cmd(包含 Event) 和 Qurey。&lt;/p&gt; 
&lt;p&gt;因为我们知道，在 DDD 的模式中，所有的操作都是以实体为基础的，一个实体很有可能很大，涵盖了多种数据来源组成。&lt;/p&gt; 
&lt;p&gt;那这里就出现了一个问题，业务中需要出一个接口，查询一个 account list，以 label value 的形式返回，我们该怎么做？&lt;/p&gt; 
&lt;p&gt;是先通过一系列工厂校验，拿到一个大实体，然后通过这个实体操作数据，拿到 account list，再处理成 dto 返回。&lt;/p&gt; 
&lt;p&gt;还是直接写一个简单的 mvc，查询然后拿结果组装返回。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;毫无疑问，我们选择后者&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;这就是 CQRS，用比较粗糙的说法：我们建议在业务逻辑的写入 Cmd(包含 Event) 用 DDD 来进行，也建议在业务逻辑的查询 Query 用 MVC 来进行。&lt;/p&gt; 
&lt;p&gt;一切模型或者框架，都是为了简化我们的工作，如果我们因为使用了某一种设计模式，而导致开发严重受限，那说明这种设计模式，并不适合我们。&lt;/p&gt; 
&lt;h1&gt;06 总结&lt;/h1&gt; 
&lt;p&gt;正如那句话说的，DDD 不是银弹，它不能解决所有问题，但是我们在尝试解决的路上，发现了这样一种模式。&lt;/p&gt; 
&lt;h3&gt;07 彩蛋&lt;/h3&gt; 
&lt;p&gt;看到了这里想必你的脑子里现在全是实体、领域等等这些理论概念，已经忘记了文章一开始我们要干什么，这其实也是在落地 DDD 时一大痛点。那就让我们不忘初心，再重新回顾和强调一下：我们的目的是要去写一个好的代码。&lt;/p&gt; 
&lt;p&gt;-----END-----&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592850%26idx%3D1%26sn%3D76f6451f3f149d210106dab1e036298c%26chksm%3Dc03f5beef748d2f8e47da9b2dec927af37b69d534958950e9bda1547645e2b9583acebd4335f%26scene%3D21%26token%3D1111915580%26lang%3Dzh_CN%23wechat_redirect" target="_blank"&gt;读友好的缓存淘汰算法&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592618%26idx%3D1%26sn%3D61740f39ea744e00280c70b638622b91%26chksm%3Dc03f5ad6f748d3c02b964f5f2d5c1b716c38c98c630d4741f4b687821c33d52f16b2cc8de612%26scene%3D21%23wechat_redirect" target="_blank"&gt;如何定量分析 Llama 3，大模型系统工程师视角的 Transformer 架构&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592237%26idx%3D1%26sn%3D99dff8b8971f210c69ee50fa7383b9ee%26chksm%3Dc03f5951f748d0470163cdd13a5ce7d591a2054840fe8278ef7d5f4ba8ce7c374813ba823daf%26scene%3D21%23wechat_redirect" target="_blank"&gt;微服务架构革新：百度 Jarvis2.0 与云原生技术的力量&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247591996%26idx%3D1%26sn%3Dc5b5f19bf8f26d43b923c953273fe8cf%26chksm%3Dc03f5840f748d156881e820c037d719ae43b8c5387a89f44300692dc0de9ad6d93b04a108dd2%26scene%3D21%23wechat_redirect" target="_blank"&gt;技术路线速通！用飞桨让京剧人物照片动起来&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247591982%26idx%3D1%26sn%3D33db28d92148841f38b91779f2469101%26chksm%3Dc03f5852f748d1444e421bafb73dbe22f27614bf98131dd39091e53f9b7c3170dea0a39b1349%26scene%3D21%23wechat_redirect" target="_blank"&gt;无需业务改造，一套数据库满足 OLTP 和 OLAP，GaiaDB 发布并行查询能力&lt;/a&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4939618/blog/18449959</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/18449959</guid>
      <pubDate>Sat, 10 May 2025 03:05:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>蚂蚁百灵团队开源统一多模态大模型 Ming-lite-omni</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;蚂蚁百灵大模型（Ling）团队正式开源统一多模态大模型 Ming-lite-omni。&lt;/p&gt; 
&lt;p&gt;官方介绍称，这是一款基于 Ling-lite 构建的 MoE 架构的全模态模型，其总参数 22B，激活参数 3B，在多项理解和生成能力评测中，性能与 10B 量级领先的多模态大模型相当或更优。这也是目前已知首个在模态支持方面能够与 GPT-4o 相媲美的开源模型。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0529/110325_pcpa_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;另外，蚂蚁百灵大模型团队还将持续优化 Ming-lite-omni 在全模态理解和生成任务上的效果，并提升 Ming-lite-omni 的多模复杂推理能力；同时也会训练更大尺寸的全模态模型 Ming-plus-omni， 以期进一步解决更多高度专业化或领域化的复杂交互问题。&lt;/p&gt; 
&lt;p&gt;Ming-lite-omni 当前模型权重和推理代码已开源，后续会陆续开源训练代码和训练数据。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GitHub:&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FinclusionAI%2FMing%2Ftree%2Fmain%2FMing-omni" target="_blank"&gt;https://github.com/inclusionAI/Ming/tree/main/Ming-omni&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hugging Face:&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2FinclusionAI%2FMing-Lite-Omni" target="_blank"&gt;https://huggingface.co/inclusionAI/Ming-Lite-Omni&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ModelScope:&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmodelscope.cn%2Fmodels%2FinclusionAI%2FMing-Lite-Omni" target="_blank"&gt;https://modelscope.cn/models/inclusionAI/Ming-Lite-Omni&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Project Page:&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flucaria-academy.github.io%2FMing-Omni%2F" target="_blank"&gt;https://lucaria-academy.github.io/Ming-Omni/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352489</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352489</guid>
      <pubDate>Sat, 10 May 2025 03:04:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>华为公布「盘古 Pro MoE」混合专家模型</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;日前，华为盘古团队正式公布了升腾原生的分组混合专家模型——「盘古 Pro MoE」。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0529/105705_hQ9O_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;据盘古团队介绍：&lt;/p&gt; 
&lt;p&gt;混合专家模型（MoE）在大语言模型（LLMs）中逐渐兴起，该架构能够以较低计算成本支持更大规模的参数，从而获得更强的表达能力。这一优势源于其稀疏激活机制的设计特点，即每个输入 token 仅需激活部分参数即可完成计算。然而，在实际部署中，不同专家的激活频率存在严重的不均衡问题，一部分专家被过度调用，而其他专家则长期闲置，导致系统效率低下。&lt;/p&gt; 
&lt;p&gt;为此，盘古团队提出了新型的分组混合专家模型（Mixture of Grouped Experts, MoGE），其在专家选择阶段对专家进行分组，并约束 token 在每个组内激活等量专家，从而实现专家负载均衡，显著提升模型在升腾平台的部署效率。&lt;/p&gt; 
&lt;p&gt;据悉，盘古 Pro MoE 模型基于 MoGE 架构，团队构建了总参数量 720 亿、激活参数量 160 亿，并针对升腾 300I Duo 和 800I A2 平台进行系统优化。&lt;/p&gt; 
&lt;p&gt;性能表现上，盘古 Pro MoE 在升腾 800I A2 上实现了单卡 1148 tokens/s 的推理吞吐性能，并可进一步通过投机加速等技术提升至 1528 tokens/s，显著优于同等规模的 320 亿和 720 亿参数的稠密模型；在升腾 300I Duo 推理服务器上，盘古团队也实现了极具性价比的模型推理方案。&lt;/p&gt; 
&lt;p&gt;团队研究表明，升腾 NPU 能够支持盘古 Pro MoE 的大规模并行训练。多项公开基准测试结果表明，盘古 Pro MoE 在千亿内总参数模型中处于领先地位。&lt;/p&gt; 
&lt;p&gt;从官方给出的对比表格来看，盘古 Pro MoE 与 Qwen3-32B、GLM-Z1-32B、Gemma3-27B、Llama4-Scout 对比，在中文、英文、推理等多个领域均有超越。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;模型技术报告（中文）：https://gitcode.com/ascend-tribe/pangu-pro-moe/blob/main/README.md&lt;/p&gt; 
&lt;p&gt;模型技术报告（英文）：https://arxiv.org/abs/2505.21411&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/352487/ascend-tribe-pangu-pro-moe</link>
      <guid isPermaLink="false">https://www.oschina.net/news/352487/ascend-tribe-pangu-pro-moe</guid>
      <pubDate>Sat, 10 May 2025 02:59:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
  </channel>
</rss>
