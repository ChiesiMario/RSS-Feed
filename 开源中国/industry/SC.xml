<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-综合资讯</title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="http://8.134.148.166:30044/oschina/news/industry" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-综合资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Wed, 15 Jan 2025 12:35:39 GMT</lastBuildDate>
        <ttl>5</ttl>
        <item>
            <title>开源日报 | Vim 项目现状；MiniMax-01 开源；PG 获年度数据库「五冠王」；给 AI 喂料的小技巧；USB 全新标识公布；AI 公司是真饿了</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2025.1.15&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/329871&quot;&gt;「苹果 AI」有望在 2025 年亮相中国，已成立新公司&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;苹果智能（Apple Intelligence）有望在 2025 年正式亮相中国市场。据企查查官方消息，1 月 10 日，苹果技术开发（上海）有限公司成立，法定代表人为 Tejas Kirit Gala，注册资本 3500 万美元。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;公开数据显示，该公司行业属于软件开发，主要经营范围涵盖软件开发、大数据服务、数据处理服务以及存储支持服务等。股权穿透显示，该公司由 APPLE SOUTH ASIA PTE. LTD. 全资持股。 &lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-edfee4212ec5891786272e788dfd1f13d64.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;苹果 CEO 库克在 2024 年三次访华期间，曾提到关于中国市场推出 AI 手机的计划，并强调了公司正在努力推进这一计划。因此有理由推测，苹果公司通过这家新公司，在中国加速推进 Apple Intelligence 服务落地。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/329832/the-state-of-vim-2024&quot;&gt;Vim 项目现状&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Vim 创始人及终身仁慈独裁者（BDFL）Bram Moolenaar 于 2023 年的&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/news/252537/vim-bram-moolenaar-passed-away&quot; target=&quot;_blank&quot;&gt;离世&lt;/a&gt;&lt;/u&gt;让社区感到震惊，同时也引发了对项目未来的担忧。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;在 2024 年 11 月举行的 VimConf 大会上，现任 Vim 维护者 Christian Brabandt 发表主题演讲&lt;em&gt;&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;「Vim 项目的新生」(the new Vim project&quot;)&lt;/strong&gt;&lt;/em&gt;，介绍了社区如何重组以继续维护 Vim，以及未来的发展方向。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;1508&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-886ea4f159abbbba6378f9ee859fc1428b7.png&quot; width=&quot;2714&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;来源：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutu.be%2FbopbmRyHQog%3Fsi%3DBHzt6g_yK0Xlc5PU&quot; target=&quot;_blank&quot;&gt;https://youtu.be/bopbmRyHQog?si=BHzt6g_yK0Xlc5PU&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/329775&quot;&gt;MiniMax 开源新一代 01 系列模型&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;MiniMax 发布并开源了 MiniMax-01 全新系列模型，其中包含：基础语言大模型 MiniMax-Text-01 和视觉多模态大模型 MiniMax-VL-01。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;根据介绍，MiniMax-01 系列模型首次大规模实现线性注意力机制，传统 Transformer 架构不再是唯一的选择。这个模型的参数量高达 4560 亿，其中单次激活 459 亿。模型综合性能比肩海外顶尖模型，同时能够高效处理全球最长 400 万 token 的上下文，是 GPT-4o 的 32 倍，Claude-3.5-Sonnet 的 20 倍。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前，官方给出的标准定价是输入 token 1 元 / 百万 token，输出 token 8 元 / 百万 token。&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/329793/pgsql-is-the-dbms-of-the-year-2024&quot;&gt;DB-Engines 公布 2024 年度数据库：PostgreSQL&lt;/a&gt;&lt;/h3&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;DB-Engines&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdb-engines.com%2Fen%2Fblog_post%2F106&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;宣布&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/a&gt;&lt;/u&gt;PostgreSQL 获得 「2024 年度数据库」 称号，这是它连续第二年赢得此殊荣，也是在 2017、2018、2019 和 2023 年称霸之后，第五次荣登榜首 —— 名副其实的 「五冠王」。&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0115/112602_ZPyK_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;DB-Engines 是全球知名的数据库流行度排行榜网站，其评选年度数据库的标准为：计算数据库当前最新流行度分数的同比增长量，分数增长最多的即为年度数据库。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/329831/angular-2025-strategy&quot;&gt;Angular 团队公布 2025 年战略&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;谷歌 Angular 产品和开发者关系负责人 Minko Gechev 日前发表了一篇关于 Angular 2025 战略的博客文章&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.angular.dev%2Fangular-2025-strategy-9ca333dfc334&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;表示&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;，团队的年度战略重点是投资于有助于 Angular 开发人员取得成功的关键领域。目前正在针对以下几个目标进行优化：&lt;/span&gt;&lt;/p&gt; 
 &lt;ul style=&quot;list-style-type:disc; margin-left:0; margin-right:0&quot;&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;通过增强开发者体验来提高开发者满意度。以及将通过继续为生态系统带来创新，来突破性能和开发者体验的界限。&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;支持采用最新的改进。包括使用 schematics 简化新功能的采用、提高 Angular 社区内外功能的可见性等等。&lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;具体而言，为了进一步改善开发者体验，Gechev 提出计划在 2025 年将 zoneless 推广到开发者预览版，使 Angular 具有更高效的变化检测能力、提高互操作性（例如，在 MFE 中）、并提高初始加载性能，以及推出 Signal forms 功能——目前正在处于设计阶段，「我们将继续支持现有的表单模块，使其与 signal forms 可互操作，同时逐步推荐 signal forms 作为最佳实践。」&lt;/span&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/329785/updated-usb-logo&quot;&gt;USB 全新标识将直接标注传输速度、功率&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;全新的 USB 标识相较于旧版更加直观，舍弃了旧版的「USB 3.2 Gen1」、「USB 3.2 Gen2」等类似后缀，改为了由传输速度和充电功率作为后缀。其中设备与数据线的传输速度以 Gbps 为单位，而充电功率统一使用「W（瓦）」为单位。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;新的 USB 标识采用速度优先的原则，用清晰易懂的数字直接标明数据传输速度，例如 USB 80Gbps、USB 40Gbps 等，取代以往 USB4 v2 等复杂表述。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;新的 USB 标识也适用于线缆标识，会在线缆上同时标明数据传输速度和供电能力。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8927f2637a1e49be5f4f484a0dbd1c19b2e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;USB-IF 强调此次更新旨在解决长期以来消费者对 USB 标识的困惑，尤其是在 2017 年 USB 3.2 推出时，诸如 Gen 2x2 和 SuperSpeed USB 20Gbps 等让消费者难以理解实际规格的复杂命名。&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#245bdb&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/329784/ms-core-ai-platform-and-tools&quot;&gt;微软 CEO 纳德拉宣布组建新 AI 团队「CoreAI」&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;近日，微软 CEO Satya Nadella 在官方博客&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.microsoft.com%2Fblog%2F2025%2F01%2F13%2Fintroducing-core-ai-platform-and-tools%2F&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;&lt;/u&gt;，微软将组建新的 AI 团队「CoreAI」。&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img height=&quot;1420&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0115/104102_Ifg5_2720166.png&quot; width=&quot;1500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;据介绍，CoreAI 将专注于开发端到端的 AI 应用平台与工具，为微软自己与其第三方客户打造端到端的 Copilot 和 AI 堆栈，以构建和运行 AI App 及 AI Agents（人工智能代理）。同时 CoreAI 还将打造 GitHub Copilot，从而在领先的 AI 产品与 AI 平台之间建立紧密的反馈循环，以推动堆栈及其路线图的发展。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;据了解，&lt;strong&gt;CoreAI 将汇集开发部、AI 平台以及 CTO 办公室的一些关键团队（包含 AI 超级计算机、AI Agentic Runtime 和 Engineering Thrive&lt;/strong&gt;。&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/329788&quot;&gt;「TikTok 难民」突然涌入——小红书内部观点尚未达成一致，国内互联网公司纷纷发英文贴揽客&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;近日，TikTok 「禁令」 进入倒计时，而许多美国网友并没有选择使用 Instagram Reels 和 YouTube Shorts 等 TikTok 在美国竞争对手的平台，而是决定加入另一个中国社交媒体平台：小红书。&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;小红书也登上了 App Store 美区的下载榜榜首。小红书或许也因此成为有史以来第一款登顶美区下载榜的名字全是汉字的 App。&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;从多位小红书内部人士处了解到，&lt;strong&gt;「内部对此次事件的观点尚不能达成一致」&lt;/strong&gt;。核心的争议在于全球化的挑战大于流量承接的喜悦，「这个事情是偶发的、突然的」。&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;据悉，这并非小红书首次承接来自 TikTok 的流量，小红书上一次有大规模外国人出现还是 「外国人听劝」 系列，事后内部也曾拉数据查看，对 DAU 的带动并不明显。目前尚不清楚有多少海外用户涌入，以及其所对应的笔记量。&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;但截至发稿，TikTokRefugee 词条下显示有 7 万 + 笔记。有部分人士认为，此举无法等同于小红书的全球化。&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;值得注意的是，很多国内互联网公司也借机以玩梗名义试图吸引这波流量。&lt;/span&gt;&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0115/111320_fkVG_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FDpZDot5UxL0a06O0EXXXNw&quot; target=&quot;_blank&quot;&gt;10 位 CEO 覆盘：我们眼中的 2024 中国 To B 市场&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    To B 市场在 2025 将有什么新焦点？AI，AI，还是 AI。场景，场景，还是场景。市场会理性回归，价值向真实需求靠拢。
   &lt;/div&gt; 
   &lt;div&gt;
    &lt;br&gt; 除了 AI 和场景落地，这些关键词同样值得关注：大模型产业化落地、场景化 AI 应用、传统软件 AI 转型、轻量级应用崛起、多技术协同创新、算力升级、安全合规建设、「通算+智算」演进、敏捷迭代开发、流程与场景变革。
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微信&lt;strong&gt;&amp;nbsp;雷峰网&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1805300532%2FP9BUiAO1H&quot; target=&quot;_blank&quot;&gt;从聊天室 icq msnspace 直接快进到了此刻&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    在小红书看了驻韩美军说自己累死了，交猫税的笔记下面讨论为什么全世界都养狸花。中国人帮美国人做数学卷子，美国人帮中国人做英语完形填空，美国人说我们教育不好所以可能做的是错的，美国南方人说我们的英语被考试看不起中国南方人说中国也是。亚利桑那州红脖晒自己钓的大鱼评论区完全是小红书风格一堆人晒自己钓的更大的鱼。极乐迪斯科粉丝找同好评论区晒中国同城聚会的照片他说这是天堂吧。黑人音乐家吹拉弹唱讲解。中国人问美国人是不是要打两个工才能生活，一千多条回复讲自己怎么辛勤工作。洋女给欧美同人圈带来新粮。还有原住民发科普视频，评论区最热门的话题是你们吃啥呀好吃吗游客去吃贵吗。印度北部人跟中国语言研究者讨论他那儿是不是藏缅语族交换语音对照表。还看到了离我开车 15 分钟的地方的农场里的牛，以及各个州的牛马驴在荒凉的农场上。农民晒自己刚拔的巨大的芜菁。美国女矿工下井，女科学家做实验。中国观鸟者想看外国稀罕鸟，评论区有上千张稀罕鸟的照片。
   &lt;/div&gt; 
   &lt;div&gt;
    &amp;nbsp;
   &lt;/div&gt; 
   &lt;div&gt;
    好像从聊天室 icq msnspace 直接快进到了此刻，中间发生的一切是一场梦。
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;div style=&quot;text-align:right&quot;&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;- 微博&amp;nbsp;&lt;/span&gt;
    &lt;strong&gt;库特纳霍拉的骨头&lt;/strong&gt;
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2169039837%2FP9F1MbpIp&quot; target=&quot;_blank&quot;&gt;搜索引擎&amp;amp;爬虫工程师的工具链面临洗牌&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;搜索引擎&amp;amp;爬虫工程师的工具链感觉现在全面面临洗牌了。以前靠 SVM 来分类，靠 TF-IDF 来抽关键词，trie-tree 来过滤敏感词，基于文本密度算法来抽正文，靠余弦相似度等相似度算法来消重。&lt;br&gt; 现在，大模型能全面取代这些传统 NLP 做法了。&lt;/p&gt; 
   &lt;p&gt;我现在抽正文就在用 reader-lm-1.5b，这个模型能把 html 转 markdown，然后再消息队列塞给下游模型用定义好的 Agent 来分类，提取关键词和摘要。最后入库之前 RAG 检索做消重。尤其是文本内容的对抗进化没那么快，现在打不过 LLM（比如写点抽象的东西来规避过滤，LLM 能轻松认出来，但是基于敏感词的 trie-tree 效果就很差）。所以 LLM 除了耗资源几乎无缺点了。&lt;/p&gt; 
   &lt;p&gt;reader-lm-1.5b 地址：huggingface.co/jinaai/reader-lm-1.5b&lt;br&gt; 这个模型小到不用量化，纯 CPU 都能跑得飞起。&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&lt;strong&gt; karminski-牙医&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F3624125415%2FP9GURmzlc&quot; target=&quot;_blank&quot;&gt;日常给 AI 喂料的小技巧&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;如果你想丢给它的网页没有图表，那直接用 MarkDownload 插件剥离图片和链接直接把纯 Md 文件给它就行。&lt;br&gt; 如果你想对给它的网页有图表，并且希望它读图表，那最简单的路径是用 Safari 打开网页，点击阅读器模式然后另存为 PDF。&lt;/p&gt; 
   &lt;p&gt;第二点能大幅减少网页中非文章干扰项对 AI 的影响。&lt;/p&gt; 
   &lt;div&gt; 
    &lt;div style=&quot;text-align:right&quot;&gt;
     &lt;span style=&quot;color:#000000&quot;&gt;- 微博&lt;strong&gt; 评论尸&lt;/strong&gt;&lt;/span&gt;
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.ce.cn%2Fcysc%2Ftech%2Fgd2012%2F202501%2F15%2Ft20250115_39266930.shtml&quot; target=&quot;_blank&quot;&gt;日本人工智能应用潜力仍存&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;近年来，日本在人工智能应用方面积极探索，在制造业、农业、教育等诸多领域都涌现出一些创新案例。但整体而言，日本社会对 AI 科技的接受程度并不高。在全面拥抱 AI 时代之前，日本社会的当务之急是更加大胆地踏进信息化时代。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;经济日报&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.stcn.com%2Farticle%2Fdetail%2F1494755.html&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;中国科技企业宜以 AI 为桨高质量「出海」&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#141414&quot;&gt;在数字化智能化浪潮下，中国科技企业新一轮「走出去」如何突破、扎根、攀升？笔者认为，中国科技企业「出海」宜以人工智能等新技术为桨，布局未来、跨界融合、铸就自主品牌力，加速从「走出去」到「融进去」，迈向更深层次的全球化。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;证券日报&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FI_7VeBN5eX7jdatXeZqfpg&quot; target=&quot;_blank&quot;&gt;AI 公司是真「饿了」，开始砸钱买你拍的「废片」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;p&gt;Open AI、Google、Moonvalley 等公司正在购买视频创作者们拍摄但未使用的「废片」。高质量 4K、无人机、3D 动画素材，1 - 4 美元（约合 7.3 - 30 元）一分钟，为了 YouTube、TikTok、Instagram 等网络视频制作的素材 1 - 2 美元（约 7.3 - 15 元）一分钟。&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;极客公园&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.com.cn%2Fcj%2F2025-01-15%2Fdoc-ineeznmc7926338.shtml&quot; target=&quot;_blank&quot;&gt;英伟达带火的世界基础模型，会给工业企业带来哪些变革？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在真正的全系统数字孪生技术可行之前，还需要五年甚至更长的时间，但是在此期间，涉及日益复杂的系统的数字孪生的中间步骤仍然是可行的。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;中欧商业评论&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.163.com%2Fdy%2Farticle%2FJLUFH9PT0511CPMT.html&quot; target=&quot;_blank&quot;&gt;赢下芯片竞赛，美国最新计划&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#404040; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#404040&quot;&gt;SIA 总裁兼首席执行官 John Neuffer 在给美国即将上任总统特朗普的一封信中表示，未来四年对美国和世界都非常重要。而美国半导体行业随时准备与他合作，加强美国的经济实力、国家安全、创新基础和技术领导地位。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;span style=&quot;color:#252525&quot;&gt;&lt;strong&gt;半导体行业观察&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F36kr.com%2Fp%2F3122598500864004&quot; target=&quot;_blank&quot;&gt;美国管控新规会否终止 AI 行情？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#262626; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#262626&quot;&gt;如果特朗普政府放松对人工智能基础设施建设的限制、放宽有关核反应堆开发的规定，英伟达的业务可能会因此获得提振，核反应堆对于未来 10 年为人工智能项目提供足够的能源至关重要。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;巴伦周刊&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FLuxCoreRender%2FLuxCore&quot; target=&quot;_blank&quot;&gt;LuxCoreRender/LuxCore&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;img height=&quot;281&quot; src=&quot;https://static.oschina.net/uploads/space/2022/0411/154306_9VlU_4937141.jpg&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FLuxCoreRender%2FLuxCore&quot; target=&quot;_blank&quot;&gt;https://github.com/LuxCoreRender/LuxCore&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;LuxCoreRender 是一个物理上正确的、无偏差的渲染引擎。它建立在以物理学为基础的方程上，对光的传输进行建模。这使得它能够准确地捕捉到其他大多数渲染程序根本无法再现的广泛现象。&lt;/span&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/mumu/blog/16689206&quot; target=&quot;_blank&quot;&gt;《Apache Shiro 源码解析》- 8. 缓存&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#3f3f3f; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;有很多数据实际上并不需要在每次请求中都重新计算，我们可以将计算结果缓存起来，至少在一个特定的时间段以内，都可以直接从缓存中捞出数据，从而显著降低系统资源的消耗。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#3f3f3f; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;264&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1ccdf45862b9b32131b4b3c611b4601b864.jpg&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FvwtZvcqIMNZba-wPRMgIwQ&quot; target=&quot;_blank&quot;&gt;Linus 祖师爷沉迷「焊接」，将亲自打造一套吉他效果器踏板赠送给内核开发者&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：Pedal 翻译成踏板意义不准确，应该是叫单块效果器。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：师傅请问你是做什么工作的.jpg&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：作为一名软件工程师，随身携带电烙铁也很合理吧。&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：他温和了好多&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：他又没有狂躁症,&amp;nbsp;就是生气的时候骂人而已&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：祖师爷性情中人罢了，而且也是对事不对人，本身性格和人品应该很 nice 的那种吧&lt;/span&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：对事也对人，比如俄国人&lt;/span&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：圣皇手作&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：非常有名的潜水日志管理软件 subsurface 也是 Linus 开发的&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：现在就去义乌下单开模，让 Linus 大吃一惊而且卖不出去&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 11：卧槽，我也是，吉他弹不好，一天就知道折腾&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FKizE4dln1C3R2AsE8oM8dQ&quot; target=&quot;_blank&quot;&gt;小红书用户迷惑行为大赏&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：我的首页已经被两美元起中文名的帖子霸占了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：讲个都市传说，我有个硕士学历的前同事根本不会用 M$&amp;nbsp;Word，她甚至用空格来居中文本（而且还没对齐）&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：我的妈呀，那是怎么硕士毕业的，用 LaTex？&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：好厉害，第一天就提了&amp;nbsp;mr，那第二天不得提个新版本&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：我人都麻了，这个语气，学习 k8s，好像学习如何用打火石在野外点火一样轻松&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：手抄代码可以的，可以快速加入图解理解逻辑原理，但抄代码记忆的话就不懂了……&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：k8s 提 pr？就相当于第一次当兵，给航母提功能，，&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0912/150800_DfGR_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329886</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329886</guid>
            <pubDate>Tue, 07 Jan 2025 10:33:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>「苹果 AI」有望在 2025 年亮相中国，已成立新公司</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;苹果智能（Apple Intelligence）有望在 2025 年正式亮相中国市场。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-edfee4212ec5891786272e788dfd1f13d64.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;据企查查官方消息，1 月 10 日，苹果技术开发（上海）有限公司成立，法定代表人为 Tejas Kirit Gala，注册资本 3500 万美元。&lt;/p&gt; 
&lt;p&gt;公开数据显示，该公司行业属于软件开发，主要经营范围涵盖软件开发、大数据服务、数据处理服务以及存储支持服务等。股权穿透显示，该公司由 APPLE SOUTH ASIA PTE. LTD.全资持股。 &lt;/p&gt; 
&lt;p&gt;苹果 CEO 库克在 2024 年三次访华期间，曾提到关于中国市场推出 AI 手机的计划，并强调了公司正在努力推进这一计划。&lt;/p&gt; 
&lt;p&gt;因此有理由推测，苹果公司通过这家新公司，在中国加速推进 Apple Intelligence 服务落地。&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;研究机构 Canalys 的分析师认为，苹果在中国提供的&lt;/span&gt;Apple Intelligence&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;服务不仅可能包含自研大模型，还将整合中国本地科技公司的技术。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;相关阅读：&lt;a href=&quot;https://www.oschina.net/news/325657/apple-talks-with-tencent-bytedance&quot; target=&quot;news&quot;&gt;苹果与腾讯、字节接洽，考虑将二者 AI 模型整合到国行 iPhone&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329871</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329871</guid>
            <pubDate>Tue, 07 Jan 2025 09:26:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>《Apache Shiro 源码解析》- 8. 缓存</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-72fd2193957d13fba54be5f6a99f6ca2700.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;8.缓存&lt;/h1&gt; 
&lt;p&gt;本章将深入探讨 Shiro 的缓存架构，并对核心组件的源代码进行解析。&lt;/p&gt; 
&lt;h2&gt;8.1 Shiro 为什么引入缓存机制&lt;/h2&gt; 
&lt;p&gt;随着用户规模的不断扩大，认证、授权和加密等模块的调用次数会迅速增加。例如，当每秒有 100 万用户尝试登录系统时，认证模块每秒会被调用 100 万次。此时， CPU 和 Memory 都会飙升，性能问题将不可避免地浮现出来。&lt;/p&gt; 
&lt;p&gt;那么，如何在架构层面解决这些可能出现的性能瓶颈呢？最常见的解决方案就是引入缓存机制。有很多数据实际上并不需要在每次请求中都重新计算，我们可以将计算结果缓存起来，至少在一个特定的时间段以内，都可以直接从缓存中捞出数据，从而显著降低系统资源的消耗。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;提升性能正是 Shiro 框架引入缓存机制的一个重要原因。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 Shiro 中，缓存主要用于以下 3 个方面：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;认证缓存&lt;/strong&gt;：存储用户的认证信息，避免每次请求都需要重新认证。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;授权缓存&lt;/strong&gt;：存储用户的角色和权限信息，避免每次访问资源都去查询数据库获取权限。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Session 缓存&lt;/strong&gt;: 用来缓存会话信息。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;注意：默认情况下，Shiro 并不会启用任何缓存，开发者需要在 &lt;code&gt;ShiroConfig.java&lt;/code&gt; 中显式配置缓存管理器，指定 Shiro 应该使用哪种缓存组件。&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
@Configuration
public class ShiroConfig {
  //...

  @Bean
  public EhCacheManager ehCacheManager(){
      EhCacheManager cacheManager = new EhCacheManager();
      cacheManager.setCacheManagerConfigFile(&quot;classpath:ehcache-shiro.xml&quot;);
      return cacheManager;
  }

  //...
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;8.2 Shiro 的缓存架构&lt;/h2&gt; 
&lt;h3&gt;8.2.1 核心组件&lt;/h3&gt; 
&lt;p&gt;Shiro 的缓存架构由 3 个核心接口组成： &lt;code&gt;CachingRealm&lt;/code&gt;、&lt;code&gt;CacheManager&lt;/code&gt;、和&lt;code&gt;Cache&lt;/code&gt; ，这些类型之间的依赖关系如下图所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-1ccdf45862b9b32131b4b3c611b4601b864.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;这些类型的名称都带有 Cache 或者 Caching 前缀：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CachingRealm：Realm 的实现类，它会持有一个 CacheManager 的实例。&lt;/li&gt; 
 &lt;li&gt;CacheManager：缓存管理器，负责管理缓存组件的生命周期，它会持有具体缓存组件的实例。&lt;/li&gt; 
 &lt;li&gt;Cache：缓存组件本身需要实现的接口。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;8.2.2 源码分析&lt;/h3&gt; 
&lt;p&gt;我们先分析整体的运行机制，然后再逐步解析核心组件的源代码。&lt;/p&gt; 
&lt;h4&gt;8.2.2.1 整体运行机制&lt;/h4&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-8018da9881f081e4dc318c2e7ea90771641.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;如上图所示，&lt;code&gt;CachingRealm&lt;/code&gt; 中持有了一个 &lt;code&gt;CacheManager&lt;/code&gt; 类型的实例，而 &lt;code&gt;CachingSecurityManager&lt;/code&gt; 类中也持有了一个 &lt;code&gt;CacheManager&lt;/code&gt; 类型的实例。那么，这两个 &lt;code&gt;CacheManager&lt;/code&gt; 类型的实例之间是什么关系呢？是同一个实例吗？&lt;/p&gt; 
&lt;p&gt;我们来逐步分析源代码，我们从入口类 ShiroConfig.java 开始，在创建具体的 &lt;code&gt;SecurityManager&lt;/code&gt; 实例时，开发者可以指定具体使用哪一种 &lt;code&gt;CacheManager&lt;/code&gt; ，示例代码如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Bean
public EhCacheManager ehCacheManager(){
    EhCacheManager cacheManager = new EhCacheManager();
    cacheManager.setCacheManagerConfigFile(&quot;classpath:ehcache-shiro.xml&quot;);
    return cacheManager;
}

@Bean
public SecurityManager securityManager(){
    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();
    securityManager.setRealm(nicefishRbacRealm());
    securityManager.setRememberMeManager(rememberMeManager());
    securityManager.setSessionManager(sessionManager());
    **securityManager.setCacheManager(ehCacheManager());**
    return securityManager;
}

//...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;从以上代码可以看到，开发者只需要调用 securityManager.setCacheManager 方法设置缓存管理器就可以了，并不需要手动调用 &lt;code&gt;CachingRealm&lt;/code&gt; 类型上定义的 setCacheManager 方法。那么，&lt;code&gt;CachingRealm&lt;/code&gt; 类型上定义的 setCacheManager 方法是何时被自动调用的呢？我们再次回顾以下 &lt;code&gt;SecurityManager&lt;/code&gt; 相关的继承结构：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-126c0eacc334e54548be3637964ab69733a.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在 &lt;code&gt;RealmSecurityManager&lt;/code&gt; 这一层，我们可以看到如下代码：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public void setRealms(Collection&amp;lt;Realm&amp;gt; realms) {
    if (realms == null) {
        throw new IllegalArgumentException(&quot;Realms collection argument cannot be null.&quot;);
    }
    if (realms.isEmpty()) {
        throw new IllegalArgumentException(&quot;Realms collection argument cannot be empty.&quot;);
    }
    this.realms = realms;
    afterRealmsSet();
}

protected void afterRealmsSet() {
    applyCacheManagerToRealms();
    applyEventBusToRealms();
}

protected void applyCacheManagerToRealms() {
    CacheManager cacheManager = getCacheManager();
    Collection&amp;lt;Realm&amp;gt; realms = getRealms();
    if (cacheManager != null &amp;amp;&amp;amp; realms != null &amp;amp;&amp;amp; !realms.isEmpty()) {
        for (Realm realm : realms) {
            if (realm instanceof CacheManagerAware) {
                ((CacheManagerAware) realm).setCacheManager(cacheManager);
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;关键的方法调用轨迹是： setRealms-&amp;gt;afterRealmsSet-&amp;gt;applyCacheManagerToRealms 。在 applyCacheManagerToRealms 中，如果 Shiro 发现某个 Realm 的实例实现了 CacheManagerAware 接口，就会自动把 cacheManager 实例设置给它。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// CachingRealm 的构造方法
public abstract class CachingRealm implements Realm, Nameable, **CacheManagerAware** , LogoutAware
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;如上所示，由于 CachingRealm 实现了 CacheManagerAware 接口，所以在运行时 CachingRealm 和 RealmSecurityManager 上的 cacheManager 是同一个实例。&lt;strong&gt;这就意味着，开发者在配置缓存管理器时，应该调用 securityManager 对象上的 setCacheManager 方法，而不是调用 Realm 实例上的同名方法，否则在运行时 cacheManager 实例会被覆盖。&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;8.2.2.2 CacheManager 源码分析&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;CacheManager&lt;/code&gt; 是 Shiro 缓存系统的核心接口，它负责管理缓存组件的生命周期，以下是 &lt;code&gt;CacheManager&lt;/code&gt; 相关的继承结构图：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-c7ae174239efc9cff7083a6b93741184369.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;Destroyable&lt;/code&gt; 接口&lt;/strong&gt; ：定义了 &lt;code&gt;destroy()&lt;/code&gt; 方法，用于在缓存管理器销毁时清理资源，确保缓存的数据和资源得以正确释放。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;CacheManager&lt;/code&gt; 接口&lt;/strong&gt; ：提供获取缓存的核心方法 &lt;code&gt;getCache(String name)&lt;/code&gt;，是所有缓存管理器的顶层接口。通过实现 &lt;code&gt;CacheManager&lt;/code&gt; 接口，开发者可以自定义缓存管理器以适应不同的缓存需求。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;AbstractCacheManager&lt;/code&gt;&lt;/strong&gt; ：作为抽象基类，它为 &lt;code&gt;CacheManager&lt;/code&gt; 提供了 &lt;code&gt;createCache(String name)&lt;/code&gt; 的基础实现，并实现了 &lt;code&gt;destroy()&lt;/code&gt; 方法。这意味着它具备缓存管理器的基础功能，可以销毁缓存，同时允许子类根据需要创建特定类型的缓存。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;MemoryConstrainedCacheManager&lt;/code&gt;&lt;/strong&gt; ：Shiro 提供的轻量级缓存管理器，继承自 &lt;code&gt;AbstractCacheManager&lt;/code&gt;。它将所有缓存数据保存在 JVM 内存中，适合小型应用或资源有限的环境。由于其缓存是基于内存的，一旦 JVM 重启，缓存数据将会丢失。这使得该缓存管理器在处理敏感数据时的持久化能力较差，因此主要适用于对数据持久性要求不高的场景。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;EhCacheManager&lt;/code&gt;&lt;/strong&gt; ：此缓存管理器继承自 &lt;code&gt;AbstractCacheManager&lt;/code&gt;，并实现了 &lt;code&gt;CacheManager&lt;/code&gt; 和 &lt;code&gt;Destroyable&lt;/code&gt; 接口。&lt;code&gt;EhCacheManager&lt;/code&gt; 集成了开源的 EhCache 框架。EhCache 支持磁盘持久化、多级缓存（内存+磁盘缓存）、集群部署等功能，适用于中大型应用。通过 &lt;code&gt;cacheManagerConfigFile&lt;/code&gt; 配置文件，EhCacheManager 可以对缓存进行自定义配置，确保在高并发情况下提供更好的性能和可扩展性。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;8.2.2.3 AbstractCacheManager 源码解析&lt;/h4&gt; 
&lt;p&gt;AbstractCacheManager 是抽象基类，它实现了缓存管理的基本功能，包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;缓存的惰性创建：只有在第一次访问某个缓存时，才会创建该缓存。&lt;/li&gt; 
 &lt;li&gt;线程安全管理：通过使用 ConcurrentHashMap 确保缓存管理器在并发环境中的安全性。&lt;/li&gt; 
 &lt;li&gt;缓存销毁机制：提供 destroy() 方法，用于清理资源并销毁所有缓存。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;AbstractCacheManager 的源代码非常简单，去掉注释之后只有几十行。其中，createCache(String name) 是一个关键的抽象方法，具体的缓存创建逻辑由子类实现，例如 MemoryConstrainedCacheManager 和 EhCacheManager 会分别实现该方法，以创建特定类型的缓存实例。&lt;/p&gt; 
&lt;h4&gt;8.2.2.4 MemoryConstrainedCacheManager 源码解析&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;MemoryConstrainedCacheManager&lt;/code&gt; 是基于内存的缓存管理器，它的源码非常简单，源代码全文引用如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package org.apache.shiro.cache;

import org.apache.shiro.util.SoftHashMap;

public class MemoryConstrainedCacheManager extends AbstractCacheManager {
    @Override
    protected Cache createCache(String name) {
        //注意，这里创建的缓存实例类型是 MapCache
        return new MapCache&amp;lt;Object, Object&amp;gt;(name, new SoftHashMap&amp;lt;Object, Object&amp;gt;());
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;从代码中我们可以看到，这个管理器持有了一个 MapCache 的实例，具体的数据就存储在这个实例里面。 MapCache 是 Shiro 自己实现的一个简单缓存，基于 JDK 内置的 Map 实现，我们在 8.2.3 中分析它的源代码。&lt;/p&gt; 
&lt;p&gt;MemoryConstrained 这个单词的字面意思是&quot;内存受限&quot; ，所以 &lt;code&gt;MemoryConstrainedCacheManager&lt;/code&gt; 这个类名已经暗示了它的适用场景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;内存受限的环境&lt;/strong&gt;：适合内存有限的应用场景，比如嵌入式系统、移动设备或需要在服务器端进行精确内存控制的应用。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;简单缓存管理&lt;/strong&gt;：不需要外部依赖（如 Redis）的简单缓存场景，能够快速使用内存缓存。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;8.2.2.5 EhCacheManager 源码解析&lt;/h4&gt; 
&lt;p&gt;EhCacheManager 的实现同样非常简单，就如同它的名字一样，主要负责创建并管理 EhCache 组件的实例，与此相关的代码在 EhCacheManager.ensureCacheManager 方法中：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;private net.sf.ehcache.CacheManager ensureCacheManager() {
    try {
        if (this.manager == null) {
            if (log.isDebugEnabled()) {
                log.debug(&quot;cacheManager property not set.  Constructing CacheManager instance... &quot;);
            }
            //using the CacheManager constructor, the resulting instance is _not_ a VM singleton
            //(as would be the case by calling CacheManager.getInstance().  We do not use the getInstance here
            //because we need to know if we need to destroy the CacheManager instance - using the static call,
            //we don&#39;t know which component is responsible for shutting it down.  By using a single EhCacheManager,
            //it will always know to shut down the instance if it was responsible for creating it.

            //注意这里， new 出了 Ehcache 的实例。
            this.manager = new net.sf.ehcache.CacheManager(getCacheManagerConfigFileInputStream());
            if (log.isTraceEnabled()) {
                log.trace(&quot;instantiated Ehcache CacheManager instance.&quot;);
            }
            cacheManagerImplicitlyCreated = true;
            if (log.isDebugEnabled()) {
                log.debug(&quot;implicit cacheManager created successfully.&quot;);
            }
        }
        return this.manager;
    } catch (Exception e) {
        throw new CacheException(e);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Shiro 提供了一个独立的 jar 包用来封装对 Ehcache 的支持，包名为 shiro-ehcache.jar ，这个包非常小，里面只有 2 个类和一个默认的 ehcache.xml 配置文件：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-a6b0e30c6601be97b961f5b1b520811079d.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;EhCache 是一个轻量级、快速且功能强大的开源 Java 缓存框架，广泛应用于提高 Java 应用程序性能。它支持内存和磁盘存储、多种缓存失效策略和分布式缓存，非常适合需要频繁访问数据的高性能场景。 EhCache 的主要特性如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;多级缓存：支持在内存和磁盘中存储缓存，内存满时可以自动将数据写入磁盘。&lt;/li&gt; 
 &lt;li&gt;缓存策略：支持多种缓存失效策略，如最少使用 (LFU)、最近最少使用 (LRU)、FIFO 等。&lt;/li&gt; 
 &lt;li&gt;分布式缓存：可以与 Terracotta 等分布式缓存框架集成，实现多节点共享缓存数据。&lt;/li&gt; 
 &lt;li&gt;数据持久性：可以选择在应用重启后缓存数据是否保留。&lt;/li&gt; 
 &lt;li&gt;可配置性：通过 XML 或 Java API 配置缓存的大小、存储方式、失效时间等。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;EhCache 的官方网站是 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ehcache.org%2F&quot; target=&quot;_blank&quot;&gt;https://www.ehcache.org/&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;在该网站上，你可以找到有关 EhCache 的最新版本、文档、配置指南、使用示例等资源。&lt;/p&gt; 
&lt;h4&gt;8.2.2.6 对接 Redis 缓存&lt;/h4&gt; 
&lt;p&gt;当前，在分布式系统中，架构师一般会选择 Redis 作为缓存组件，但是，Shiro 并没有直接提供一个开箱即用的 RedisCacheManager （原因简单，因为当年 Redis 还没有出现。）。开发者可以自己实现 CacheManager 接口，也可以选择开源的实现，例如 shiro-redis ，它的主页在：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falexxiyang%2Fshiro-redis&quot; target=&quot;_blank&quot;&gt;https://github.com/alexxiyang/shiro-redis&lt;/a&gt; 。&lt;/p&gt; 
&lt;h3&gt;8.2.3 Cache 源码分析&lt;/h3&gt; 
&lt;p&gt;接下来我们分析缓存本身的实现，在 Shiro 中，&lt;code&gt;Cache&lt;/code&gt; 接口相关的类继承结构如下图所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-54ea6974ea920ae0d2b5201bae2f5fe2d3c.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;MapCache&lt;/code&gt;是 Shiro 自己提供的一个非常简单的缓存实现类，它的内部实际上使用了一个 &lt;code&gt;Map&amp;lt;K,V&amp;gt;&lt;/code&gt; 结构来存储数据，以下是&lt;code&gt;MapCache&lt;/code&gt;的关键源代码：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class MapCache&amp;lt;K, V&amp;gt; implements Cache&amp;lt;K, V&amp;gt; {

    private final Map&amp;lt;K, V&amp;gt; map;

    //缓存的名称
    private final String name;

    //构造方法要求外部传递一个具体的 Map 实例进来， Shiro 默认使用自己实现的 SoftHashMap 类。
    public MapCache(String name, Map&amp;lt;K, V&amp;gt; backingMap) {
        if (name == null) {
            throw new IllegalArgumentException(&quot;Cache name cannot be null.&quot;);
        }
        if (backingMap == null) {
            throw new IllegalArgumentException(&quot;Backing map cannot be null.&quot;);
        }
        this.name = name;
        this.map = backingMap;
    }

    //...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Shiro 自己实现了一个 &lt;code&gt;SoftHashMap&lt;/code&gt; 来承担存储任务，这个类位于 shiro-core-xxx.jar 包中。&lt;code&gt;SoftHashMap&lt;/code&gt; 基于软引用的哈希映射类实现，可以在内存不足时能够自动回收不再使用的缓存内容。以下是其核心功能：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;软引用存储&lt;/strong&gt; ：使用 &lt;code&gt;SoftReference&lt;/code&gt; 来存储值对象，这样在内存压力大的情况下，JVM 可以自动回收这些值，避免内存溢出。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;强引用管理&lt;/strong&gt;：维护一个强引用队列，允许开发者控制保留的强引用数量，以平衡内存使用和缓存命中率。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;自动清理&lt;/strong&gt;：在访问缓存时，会自动处理和清理已被回收的软引用，保持映射的有效性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;线程安全&lt;/strong&gt; ：使用 &lt;code&gt;ConcurrentHashMap&lt;/code&gt; 和 &lt;code&gt;ReentrantLock&lt;/code&gt; 确保在多线程环境下的安全性和一致性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;接口实现&lt;/strong&gt; ：实现了 &lt;code&gt;Map&lt;/code&gt; 接口，提供标准的 Map 操作（如 &lt;code&gt;put&lt;/code&gt;、&lt;code&gt;get&lt;/code&gt;、&lt;code&gt;remove&lt;/code&gt; 等）并支持批量操作。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;也就是说，如果开发者指定 Shiro 使用 &lt;code&gt;MemoryConstrainedCacheManager&lt;/code&gt; 作为缓存管理器，那么在运行时，最底层承担存储任务的是 &lt;code&gt;SoftHashMap&lt;/code&gt; 类的实例。&lt;/p&gt; 
&lt;h3&gt;8.2.4 CachingRealm 源码分析&lt;/h3&gt; 
&lt;p&gt;由于 &lt;code&gt;Realm&lt;/code&gt; 相关的继承结构比较深，我们需要再次回顾一下结构图：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-893596978019e95db5c5b421fe778e54598.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;CachingRealm&lt;/code&gt; 是 &lt;code&gt;Realm&lt;/code&gt; 的实现类，它的类名带有 Caching 前缀，很明显它最大的特点就是带有缓存功能。由于 &lt;code&gt;CachingRealm&lt;/code&gt; 在整个继承结构中位置非常高，所以在 Shiro 中，所有 Realm 都具备缓存功能，除非开发者自己编写一个全新的实现类直接实现最顶层的 &lt;code&gt;Realm&lt;/code&gt; 接口。但是这种情况非常少见，因为 Shiro 在每一层 Realm 上都已经实现了很多功能，如果自己从头实现 &lt;code&gt;Realm&lt;/code&gt; 接口，需要编写的代码太多了。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-1889ea27d6aeec0e18df3bb6090481ce5aa.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;如上图所示，&lt;code&gt;CachingRealm&lt;/code&gt;的功能非常简单，实际上它自己几乎没有实现任何功能，把所有具体工作都交给内部的 cacheManager 对象去处理了：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public abstract class CachingRealm implements Realm, Nameable, CacheManagerAware, LogoutAware {
    //...

    private String name;
    private boolean cachingEnabled;
    private CacheManager cacheManager; //实际上是 cacheManager 在做事

    //...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;8.3 Session 缓存&lt;/h2&gt; 
&lt;p&gt;在 Shiro 中，&lt;code&gt;Session&lt;/code&gt; 默认并不会自动走缓存，但 Shiro 设计了缓存会话的机制。&lt;/p&gt; 
&lt;h3&gt;8.3.1 &lt;strong&gt;启用 Session 缓存&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;Shiro 的 &lt;code&gt;Session&lt;/code&gt; 默认存储在内存中，如果没有明确配置缓存，Shiro 不会自动缓存 &lt;code&gt;Session&lt;/code&gt; 数据。&lt;/p&gt; 
&lt;p&gt;如果希望将会话信息缓存起来，可以配只 &lt;code&gt;CacheManager&lt;/code&gt; 配置项，通常会使用开源的 &lt;code&gt;EhCacheManager&lt;/code&gt;或者&lt;code&gt;RedisCacheManager&lt;/code&gt; ，以下是使用&lt;code&gt;EhCacheManager&lt;/code&gt;作为 Session 缓存的关键代码（已省略无关代码）：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;EhCacheManager cacheManager = new EhCacheManager();
cacheManager.setCacheManagerConfigFile(&quot;classpath:shiro-ehcache.xml&quot;);

CachingSessionDAO sessionDAO = new EnterpriseCacheSessionDAO();
sessionDAO.setCacheManager(cacheManager); // 配置 cacheManager

DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();
sessionManager.setSessionDAO(sessionDAO);

DefaultSecurityManager securityManager = new DefaultWebSecurityManager();
securityManager.setSessionManager(sessionManager);
SecurityUtils.setSecurityManager(securityManager);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;8.3.2 CachingSessionDAO 源码分析&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-1c37847578afc846086e3a0b99a5558e13a.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;如上图所示， Shiro 内置的抽象类 &lt;code&gt;CachingSessionDAO&lt;/code&gt; 支持缓存机制，&lt;code&gt;EnterpriseCacheSessionDAO&lt;/code&gt; 是 &lt;code&gt;CachingSessionDAO&lt;/code&gt; 的子类，在 &lt;code&gt;CachingSessionDAO&lt;/code&gt;中，最关键的 4 个方法代码如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public Serializable create(Session session) {
    Serializable sessionId = super.create(session);
    cache(session, sessionId);
    return sessionId;
}

public Session readSession(Serializable sessionId) throws UnknownSessionException {
    Session s = getCachedSession(sessionId);
    if (s == null) {
        s = super.readSession(sessionId);
    }
    return s;
}

public void update(Session session) throws UnknownSessionException {
    doUpdate(session);
    if (session instanceof ValidatingSession) {
        if (((ValidatingSession) session).isValid()) {
            cache(session, session.getId());
        } else {
            uncache(session);
        }
    } else {
        cache(session, session.getId());
    }
}

public void delete(Session session) {
    uncache(session);
    doDelete(session);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;create: 先写持久层，然后再写缓存。&lt;/li&gt; 
 &lt;li&gt;readSession: 先尝试从缓存中读取 Session ，如果结果为 null ，调用父层的 readSession 去访问持久层。&lt;/li&gt; 
 &lt;li&gt;update: 先更新持久层，然后更新缓存。&lt;/li&gt; 
 &lt;li&gt;delete: 先删缓存中的数据，然后再删持久层数据。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;从以上代码我们可以看到，&lt;code&gt;CachingSessionDAO&lt;/code&gt;对缓存的读写策略都非常简单，比如 readSession 方法，采用的是 Read-Through（读透）策略：如果没有能够从缓存中读取到数据，直接访问持久层，很容易形成系统瓶颈。&lt;/p&gt; 
&lt;h3&gt;8.3.3 &lt;strong&gt;注意&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;在启用了 Session 缓存之后，系统的复杂度会显著增加。这是因为缓存中的数据与数据库中的数据可能会存在不一致的情况，容易导致潜在的逻辑错误。因此，开发者在设计系统时，需要谨慎处理 Session 缓存，以确保数据的一致性。&lt;/p&gt; 
&lt;p&gt;Shiro 内置的 &lt;code&gt;CachingSessionDAO&lt;/code&gt; 提供了一种简单的实现方式，方便开发者快速集成缓存功能。然而， Shiro 毕竟是一个安全框架，并不是专业的缓存框架，开发者在面对更复杂的业务需求时，可能需要设计自己的缓存 DAO。这种自定义的缓存 DAO 可以提供对 Session 的缓存进行更细粒度的控制，从而优化系统性能，减少对数据库的压力，并提高响应速度。&lt;/p&gt; 
&lt;p&gt;在设计自己的缓存 DAO 时，开发者可以考虑以下几个方面：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;缓存策略选择&lt;/strong&gt;：根据业务场景选择合适的缓存策略，例如读透、写穿或写后失效等，以确保在性能和一致性之间找到平衡。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;过期与失效管理&lt;/strong&gt;：设置合理的缓存过期时间，以避免缓存中存储过期数据。同时，设计手动失效机制，以确保重要数据的实时更新。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;监控与调优&lt;/strong&gt;：通过监控缓存的使用情况，分析命中率和访问模式，从而不断调整和优化缓存策略，确保系统的高效运行。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;在分布式系统中，推荐使用 Redis 作为 Session 的缓存解决方案。Redis 具有高性能、支持持久化和跨模块、跨系统共享数据的能力，能够有效地管理会话数据。在这种架构下，各个模块和系统之间可以复用会话信息，提升用户体验并简化系统管理。&lt;/p&gt; 
&lt;p&gt;综上所述，虽然 Session 缓存可以带来性能提升，但也引入了额外的复杂性。开发者应仔细权衡利弊，并在必要时实施更灵活和高效的缓存管理策略，以实现更高效、可靠的系统架构。&lt;/p&gt; 
&lt;h2&gt;8.4 本章小结&lt;/h2&gt; 
&lt;p&gt;为了提升系统的性能，Shiro 内置了对缓存的支持。特别是在频繁的权限验证过程中，缓存的引入能极大减少系统的负载。本章详细解析了 Shiro 的缓存架构，并解析了如何与外部缓存组件进行对接。&lt;/p&gt; 
&lt;h2&gt;资源链接&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache Shiro 在 github 上的官方仓库：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fshiro&quot; target=&quot;_blank&quot;&gt;https://github.com/apache/shiro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Apache Shiro 官方网站：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fshiro.apache.org%2F&quot; target=&quot;_blank&quot;&gt;https://shiro.apache.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;本书实例项目：&lt;a href=&quot;https://gitee.com/mumu-osc/nicefish-spring-boot&quot;&gt;https://gitee.com/mumu-osc/nicefish-spring-boot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;本书文字稿：&lt;a href=&quot;https://gitee.com/mumu-osc/apache-shiro-source-code-explaination&quot;&gt;https://gitee.com/mumu-osc/apache-shiro-source-code-explaination&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;版权声明&lt;/h2&gt; 
&lt;p&gt;本书基于 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcreativecommons.org%2Flicenses%2Fby-nc-nd%2F4.0%2Fdeed.en&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;CC BY-NC-ND 4.0 许可协议&lt;/strong&gt;&lt;/a&gt;发布，自由转载-非商用-非衍生-保持署名。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;版权归大漠穷秋所有 © 2024 ，侵权必究。&lt;/strong&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/mumu/blog/16689206</link>
            <guid isPermaLink="false">https://my.oschina.net/mumu/blog/16689206</guid>
            <pubDate>Tue, 07 Jan 2025 08:57:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>Vim 项目现状</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;Vim 创始人及终身仁慈独裁者（BDFL）Bram Moolenaar 于 2023 年的&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/news/252537/vim-bram-moolenaar-passed-away&quot; target=&quot;_blank&quot;&gt;离世&lt;/a&gt;&lt;/u&gt;让社区感到震惊，同时也引发了对项目未来的担忧。&lt;/p&gt; 
&lt;p&gt;在 2024 年 11 月举行的 VimConf 大会上，现任 Vim 维护者 Christian Brabandt 发表主题演讲&lt;em&gt;&lt;strong&gt;「Vim 项目的新生」(the new Vim project&quot;)&lt;/strong&gt;&lt;/em&gt;，介绍了社区如何重组以继续维护 Vim，以及未来的发展方向。&lt;/p&gt; 
&lt;h4&gt;&lt;span style=&quot;color:#e67e22&quot;&gt;&lt;strong&gt;「后 Bram 时代」的 Vim&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;Brabandt 首先回顾了他与 Vim 的渊源：他自 2006 年起参与 Vim 项目，并表示他的首次提交是在 7.0/7.1 版本时期（大约在 2006 年）。起初，他主要贡献小补丁和修复，后来逐渐贡献了更大的功能，比如 gn 和 gN 命令（结合搜索和可视模式选择）、使用 libsodium 改进的加密支持，维护 Vim 的 AppImage 等。他提到，由于个人和工作的原因，他在 2022 年左右减少了对项目的参与。&lt;/p&gt; 
&lt;p&gt;这一情况在 2023 年 8 月发生了变化，因为 Moolenaar 去世了。Moolenaar 维护 Vim 已超过 30 年；尽管在前几年他已将 Brabandt 和 Ken Takata 加入为共同维护者，但大部分开发仍由他主导。他去世后，许多知识随之流失，但 Brabandt 和其他人接手了继续保持项目活力的重任。&lt;/p&gt; 
&lt;p&gt;当时，&lt;strong&gt;Moolenaar 是 Vim GitHub 组织的唯一拥有者，只有他的账号可以更改某些设置&lt;/strong&gt;。起初，贡献者尝试通过 GitHub 的已故用户政策来为组织添加拥有者。然而，这一过程相当复杂，最终的结果是 Moolenaar 的账号会被禁用。由于希望家人仍然能够访问该账号，他们放弃了这一方法，而是选择根据组织变更的需要，由家人授予必要的访问权限。&lt;/p&gt; 
&lt;p&gt;Charles Campbell（暱称「Dr Chip」），一位为 Vim 做出贡献超过 25 年的开发者，也在 Moolenaar 去世后不久决定退休。他离职后，维护团队的规模有所扩大，Yegappan Lakshmanan 加入了团队，随后 Dominique Pellé、Doug Kearns，以及 GitHub 用户「glepnir」、「mattn」和「zeertzjq」也相继加入。&lt;/p&gt; 
&lt;h4&gt;&lt;span style=&quot;color:#e67e22&quot;&gt;&lt;strong&gt;不仅仅是源代码&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;Brabandt 强调，维护 Vim 不仅只是源代码，还有许多其他方面需要管理，比如 Vim 的网站、FTP 服务器、安全漏洞披露、在 Reddit 和 Stack Exchange 等其他平台上的 Vim 社区等。&lt;/p&gt; 
&lt;p&gt;Vim 的网站也需要改进，其设计和大部分代码在很长一段时间内几乎没有变化——直到 2023 年，它仍基于 PHP 5。在最近的一些情况下，网站不够稳定，因此他在 2024 年开始寻找新的托管服务商。这一迁移过程包括将 PHP 升级到版本 8，并为此重写了一部分代码。Brabandt 对 Mark Schöchlin 表示感谢，是他主动承担了这部分工作。&lt;/p&gt; 
&lt;p&gt;他承认网站的设计自 2001 年以来几乎没有变化，看起来并不现代化，这可能会让新用户感到困惑。虽然已经尝试过重新设计，但第一次尝试并不成功。他更注重保持一致性，不希望吓跑长期用户。&lt;/p&gt; 
&lt;p&gt;DNS 也是一个棘手的问题——vim.org 域名由 Stefan Zehl 管理，但 Moolenaar 还拥有其他一些域名，比如 vim8.org、vim9.org 等。&lt;/p&gt; 
&lt;p&gt;幸运的是，SSL 证书已由 Let’s Encrypt 管理，因此 Brabandt 在这一方面没有遇到问题。一些电子邮件地址，如 bram@vim.org、bugs@vim.org 等，原本被转发到 Moolenaar 的个人邮箱，现在这些地址已更新为转发到 Brabandt 的邮箱。&lt;/p&gt; 
&lt;p&gt;FTP 服务器由 NLUUG 托管，但他决定将其停用，并表示到目前为止还没有收到任何投诉。&lt;/p&gt; 
&lt;h4&gt;&lt;span style=&quot;color:#e67e22&quot;&gt;&lt;strong&gt;沟通交流渠道&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;他还谈到社区围绕 Vim 邮件列表的活动，这些邮件列表托管在 Google Groups 上。&lt;/p&gt; 
&lt;p&gt;2024 年 5 月，他收到 Google 的自动消息，通知 vim-dev 邮件列表的所有内容因垃圾邮件或恶意软件被屏蔽。这引发了一些麻烦，虽然列表在一天左右得以恢复，但问题的具体原因至今未明。他们曾考虑将邮件列表改为自托管，但这样做的一个问题是所有用户都需要重新注册。&lt;/p&gt; 
&lt;p&gt;如今，邮件列表的活跃度已经不如以往，大部分社区讨论都转移到了 Reddit 和 Stack Exchange 上。&lt;/p&gt; 
&lt;p&gt;安全漏洞披露也是需要关注的一项内容。几年前，问题曾通过 Huntr 平台报告。许多尚未解决的问题现已处理完毕。但在 2023 年，Huntr 被另一家公司收购，该公司专注于 AI 技术，并关闭了通用的开源漏洞报告服务。&lt;/p&gt; 
&lt;p&gt;目前，Vim 通过电子邮件或 GitHub 接收安全问题报告，并通过 GitHub 的安全通告发布漏洞信息。团队还设立了一个专用于尚未公开的安全问题的私密邮件列表，相关邮件会转发至所有维护者。&lt;/p&gt; 
&lt;p&gt;Brabandt 还在提交信息中引入了 [security] 标签来标记安全修复。这类提交会在 oss-security 列表上公布（最近的一次是在 10 月），并通知发行版维护者。&lt;/p&gt; 
&lt;h4&gt;&lt;span style=&quot;color:#e67e22&quot;&gt;&lt;strong&gt;维护模式&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;Brabandt 随后展示了贡献图表，以证明 Moolenaar 去世后开发并未停止。在 Moolenaar 健康状况恶化期间，项目开发有所放缓，但在他整理未完成的 PR 时出现了一个高峰。9.1 版本于 2024 年 1 月 2 日发布，以纪念 Moolenaar——这距离他去世约四个月。&lt;/p&gt; 
&lt;p&gt;9.1 版本包括对虚拟文本的改进（该功能允许补全建议等内容出现在编辑区域内，但不属于实际文本的一部分）、平滑滚动和 OpenVMS 支持。&lt;/p&gt; 
&lt;p&gt;在 9.1 之后，他开始引入更多可能引发争议的更改，例如支持 XDG 基目录规范。现在，Vim 不再需要在顶级主目录中创建文件：~/.vimrc 或 ~/.vim/vimrc 仍然有效，但如果两者都不存在，则 $XDG_CONFIG_HOME/vim/vimrc 也会生效。另一个此类更改是 Wayland 支持。这一支持尚未完成，他表示不确定剪贴板支持的剩余问题是 Vim 的 Bug 还是 Wayland 的问题。&lt;/p&gt; 
&lt;p&gt;随着他清理 PR 积压问题，他开始制定合并 PR 的策略，优先确保充分测试。现在，测试通过持续集成（CI）运行。他还提到，良好的文档非常重要。&lt;/p&gt; 
&lt;p&gt;Vim 支持许多语言接口，包括 Python 2 和 3、Ruby、Lua、Tcl 和 MzScheme。但 Brabandt 不确定这些语言接口中有多少仍然真正需要。例如，Python 2、Tcl 和 MzScheme（无法与该语言的最新版本构建）可能需要放弃以减少维护负担。其他需要改进的领域包括 GUI（GTK 4 已推出一段时间，但 Vim 尚未使用它）、高级终端功能支持，以及拼写检查功能（自 Vim 7 以来几乎没有变化）。团队希望支持 tree-sitter 语法解析器，但这一功能存在争议，因此他认为它不太可能很快出现在 Vim 中。&lt;/p&gt; 
&lt;p&gt;他了解 Neovim 中出现了一些重要变化，但他不确定其中有多少可以被引入 Vim。虽然 Vim 进行了少量更改，但重大变更需要社区的支持。他不希望进行向后不兼容的更改，并且对可能导致问题的变更保持谨慎。他表示，在处理 PR 时必须考虑全局情况，尤其是用户的期望。目前，他表示 Vim 处于某种程度的维护模式。&lt;/p&gt; 
&lt;p&gt;他还提到已创建了一个内部存储库，用于跟踪利益相关者并确保如果他出现问题，其他维护者可以接替他的工作。&lt;/p&gt; 
&lt;p&gt;Brabandt 建议那些新加入项目的人从小的贡献开始，并熟悉代码库。他向开发者提供了一些建议，认为在使用 C 时采用防御性风格非常重要，以确保不会引入新的 Bug。他推荐使用 Coverity 这类静态分析工具扫描缺陷。他提到，Vim 的某些代码库部分非常复杂，如果可能的话，需要重构为更易于管理的单元。&lt;/p&gt; 
&lt;p&gt;维护 Vim 是一项全职工作，他表示，这不仅仅是维护代码，还包括维护社区——管理期望并倾听用户需求。他必须了解社区的愿望：希望 Vim 成为何种工具？是 IDE 吗？还是与旧版本 Vim 完全兼容的工具？如何让 Vim9 脚本（Vim 的新脚本语言）更广泛地使用？如何确保 Vim 社区的健康发展？他以感谢所有 Vim 的贡献者结束了他的演讲，并回答了一些问题。&lt;/p&gt; 
&lt;h4&gt;&lt;span style=&quot;color:#e67e22&quot;&gt;&lt;strong&gt;问答环节&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;一位观众提问 Vim 和 Neovim 的维护模式有何不同。由于大多数 PR 仍由 Brabandt 合并，这是否意味着他成为了 Vim 的新 BDFL？&lt;/p&gt; 
&lt;p&gt;Brabandt 明确否认自己是 BDFL。目前，他之所以合并大部分更改，是因为每次更改需要递增版本号，而多人同时合并可能会导致冲突。然而，在他休假期间，他已将主要维护权交给 Lakshmanan。他强调，这依然是一个社区项目，所有决策都基于社区意见。只是目前其他维护者选择不亲自合并更改，而是将这一职责委托给他，他对此表示认可。&lt;/p&gt; 
&lt;p&gt;另一位观众询问语言障碍问题，因为 Vim 社区中有许多日本成员以及其他多语言用户。Brabandt 回答说，作为一个国际项目，Vim 的主要工作语言是英语。他提到，现在有了 ChatGPT 和翻译工具，跨语言合作变得更加方便。但仍有部分用户无法很好地用英语表达，这增加了理解他们需求的难度。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;原文：&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flwn.net%2FSubscriberLink%2F1002342%2Fa8d8a17f30968b93%2F&quot; target=&quot;_blank&quot;&gt;https://lwn.net/SubscriberLink/1002342/a8d8a17f30968b93/&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329832/the-state-of-vim-2024</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329832/the-state-of-vim-2024</guid>
            <pubDate>Tue, 07 Jan 2025 07:05:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Angular 团队公布 2025 年战略</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;谷歌 Angular 产品和开发者关系负责人 Minko Gechev 日前发表了一篇关于 Angular 2025 战略的博客文章&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.angular.dev%2Fangular-2025-strategy-9ca333dfc334&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;表示&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;，团队的年度战略重点是投资于有助于 Angular 开发人员取得成功的关键领域。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前正在针对以下几个目标进行优化：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;通过增强开发者体验来提高开发者满意度。以及将通过继续为生态系统带来创新，来突破性能和开发者体验的界限。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;支持采用最新的改进。包括使用 schematics 简化新功能的采用、提高 Angular 社区内外功能的可见性等等。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;具体而言，为了进一步改善开发者体验，Gechev 提出计划在 2025 年将 zoneless 推广到开发者预览版，使 Angular 具有更高效的变化检测能力、提高互操作性（例如，在 MFE 中）、并提高初始加载性能。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;以及推出 Signal forms 功能。目前正在处于设计阶段，「我们将继续支持现有的表单模块，使其与 signal forms 可互操作，同时逐步推荐 signal forms 作为最佳实践。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此外还有 RFC for selectorless components，「我们非常希望简化组件中的依赖管理，并且我们还希望将社区纳入这一流程」。考虑到 Karma 的弃用，Angular 团队也在寻找替代品，目前正在探索的有 Web Test Runner、Jest 和 Vitest。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;为了让 Angular 开发人员更容易采用新功能，项目团队则计划改进 Angular 的文档以反映最新的最佳实践，同时提高有助于 Web 开发人员实现其目标的功能的可见性，并使其易于在现有堆栈中采用 Angular。&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「我们承认，Angular 经历了几年的艰难时期，随后人们称之为&#39;Angular 复兴&#39;。我们还有很多教育工作要做，以便向不熟悉该框架的开发人员展示现代 Angular 是什么，以及它如何支持他们自信地构建 Web 应用。」&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Gechev 还分享了 Angular 2024 年开发者调查的结果，基于来自开发者的近 10000 份回复。发现，79% 的 Angular 开发者正在使用最新的两个主要版本的 Angular，90% 的开发者正在使用独立组件、指令和管道，超过 80% 的开发者正在使用内置控制流。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;221&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8a50e5a58a1424ca42173a9f3f3e54dbbfe.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;开发人员整体满意度也有所提高，近 90% 的受访者表示对该框架感到满意。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329831/angular-2025-strategy</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329831/angular-2025-strategy</guid>
            <pubDate>Tue, 07 Jan 2025 07:02:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>DB-Engines 公布 2024 年度数据库：PostgreSQL</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;DB-Engines&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdb-engines.com%2Fen%2Fblog_post%2F106&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;宣布&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/a&gt;&lt;/u&gt;PostgreSQL 获得 「2024 年度数据库」 称号，这是它连续第二年赢得此殊荣，也是在 2017、2018、2019 和 2023 年称霸之后，第五次荣登榜首——名副其实的「五冠王」。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0115/112602_ZPyK_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;DB-Engines 是全球知名的数据库流行度排行榜网站，其评选年度数据库的标准为：计算数据库当前最新流行度分数的同比增长量，分数增长最多的即为年度数据库。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;颁奖词：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;让我们把时光拨回到将近 35 年前，「Postgres」 刚刚闪亮登场。此后，为了紧跟数据库技术潮流，PostgreSQL 一直在不断演化，功能愈发强悍，稳定性丝毫不打折扣。2024 年 9 月推出的 PostgreSQL 17 在性能和复制（replication）方面又有了新的优化和功能扩展，将这位「常青树」推向了新的高度。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;放眼当今开源社区，PostgreSQL 可谓长盛不衰，堪称人气与实力兼具的典范。而在这一年里表现同样抢眼的 Snowflake，可不是「雪花」那么简单——它是基于云的数仓服务，以将存储和计算分离的独特架构吸引大批追随者，再加上多云环境支持与数据共享功能，成为行业内炙手可热的后起之秀。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Snowflake 的名次一路飙升，充分说明它在业界的影响力正与日俱增。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;排名第三的微软，也依旧是数据库领域的「老将」：Azure SQL Database 提供了全托管的关系型数据库服务，还加入了 AI 驱动的性能优化和弹性伸缩；SQL Server 则凭借混合云能力，打通本地和云端之间的壁垒。微软在数据库层面推陈出新的投入与其全面的数据服务生态相得益彰，实力不容小觑。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;来源：&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fnm7wQ8U13YqO7SP2tI9PHw&quot; target=&quot;_blank&quot;&gt;https://mp.weixin.qq.com/s/nm7wQ8U13YqO7SP2tI9PHw&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;插播一条广告：&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;3128&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0115/113756_eKSW_2720166.jpg&quot; width=&quot;750&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;历年 DB-Engines 年度数据库：&lt;/strong&gt;&lt;/p&gt; 
&lt;table cellspacing=&quot;0&quot; style=&quot;-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:1px; border:none; box-sizing:border-box; color:#444444; display:block; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif; font-size:14px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px 0px 20px; max-width:100%; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:776px; word-break:keep-all; word-spacing:0px&quot;&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;PostgreSQL&lt;/td&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;2024&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;PostgreSQL&lt;/td&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;2023&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;Snowflake&lt;/td&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;2022&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;Snowflake&lt;/td&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;2021&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;PostgreSQL&lt;/td&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;2020&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;MySQL&lt;/td&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;2019&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;PostgreSQL&lt;/td&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;2018&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;PostgreSQL&lt;/td&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;2017&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;Microsoft SQL Server&lt;/td&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;2016&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;Oracle&lt;/td&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;2015&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;MongoDB&lt;/td&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;2014&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;MongoDB&lt;/td&gt; 
   &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px&quot;&gt;2013&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329793/pgsql-is-the-dbms-of-the-year-2024</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329793/pgsql-is-the-dbms-of-the-year-2024</guid>
            <pubDate>Tue, 07 Jan 2025 03:31:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>「TikTok 难民」突然涌入——小红书内部观点尚未达成一致，国内互联网公司纷纷发英文贴揽客</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;近日，TikTok「禁令」进入倒计时，而许多美国网友并没有选择使用 Instagram Reels 和 YouTube Shorts 等 TikTok 在美国竞争对手的平台，而是决定加入另一个中国社交媒体平台：小红书。&lt;/p&gt; 
&lt;p&gt;小红书也登上了 App Store 美区的下载榜榜首。小红书或许也因此成为有史以来第一款登顶美区下载榜的名字全是汉字的 App。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-efece9d764e364f0a93454a08aba6e92542.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;从多位小红书内部人士处了解到，&lt;strong&gt;「内部对此次事件的观点尚不能达成一致」&lt;/strong&gt;。核心的争议在于全球化的挑战大于流量承接的喜悦，「这个事情是偶发的、突然的」。&lt;/p&gt; 
&lt;p&gt;据悉，这并非小红书首次承接来自 TikTok 的流量，小红书上一次有大规模外国人出现还是「外国人听劝」系列，事后内部也曾拉数据查看，对 DAU 的带动并不明显。目前尚不清楚有多少海外用户涌入，以及其所对应的笔记量。&lt;/p&gt; 
&lt;p&gt;但截至发稿，TikTokRefugee 词条下显示有 7 万 + 笔记。甚至有部分人士认为，此举无法等同于小红书的全球化。&lt;/p&gt; 
&lt;p&gt;值得注意的是，很多国内互联网公司也借机以玩梗名义试图吸引这波流量。阿里巴巴财大气粗：Do you want to make money（你想赚钱吗）？而且阿里巴巴还「阴阳」一把亚马逊，直接向 TikTok 用户宣传称自己是亚马逊供货源，想赚钱就找阿里；携程向 TikTok 用户喊话：Say go，let&#39;s go（说走就走）。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0115/111320_fkVG_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;美颜相机简单粗暴：Take photo，very beautiful（照相，美美哒）！饿了么直接把 App 名称中译英：Are you hungry（你饿了么）？告诉 TikTok 用户可以点外卖吃；瑞幸咖啡简单点明：Want to drink coffee？Use this（想喝咖啡吗，选我）；美团告诉 TikTok 用户：Use this discount（用美团享受折扣）。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329788</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329788</guid>
            <pubDate>Tue, 07 Jan 2025 03:02:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>如何开发一个分布式日志系统</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p style=&quot;color:#212529; text-align:start&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;开发一个分布式日志系统是一个复杂的任务，涉及多个方面的设计和技术决策。以下是一些关键步骤和考虑因素&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. 一般需求&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;持久性&lt;/strong&gt;：确保日志条目不会因为单点故障而丢失。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;一致性&lt;/strong&gt;：保证所有节点上的日志最终一致。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;可用性&lt;/strong&gt;：即使部分节点失效，系统仍然可以处理日志写入和读取。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;：支持高吞吐量的日志写入和快速的查询响应时间。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;扩展性&lt;/strong&gt;：能够随着数据增长或用户数量增加而水平扩展。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;2. 设计架构&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;分布式一致性协议 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Paxos/Raft/ZAB/Raftx&lt;/strong&gt;：这些协议用于解决分布式系统中的领导者选举和命令提交问题，确保在多数派节点达成一致的情况下，日志条目的顺序是全局一致的。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;数据分区与复制 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;分片（Sharding）&lt;/strong&gt;：将日志按照某种规则划分为多个分片，每个分片由一组节点负责，以实现负载均衡和水平扩展。&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;副本（Replication）&lt;/strong&gt;：为每个分片创建多个副本，放置在不同的节点上，以增强系统的容错能力和数据持久性&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3. 核心功能&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;日志追加（Log Append）&lt;/strong&gt;：实现高效且原子性的日志追加操作，确保每次写入都是不可分割的整体。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;日志同步（Log Syncing）&lt;/strong&gt;：设计一种机制让 Leader 将日志同步到 Follower 节点，同时保证数据的一致性和完整性&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;本文将基于这些需求，利用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Fraftx&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;raftx&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;协议，&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;为分布式日志系统提供一个基础的框架，使用&lt;/span&gt;raftx&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;作为一致性协议的实现来确保跨节点的日志数据一致性和顺序性&lt;/span&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;一致性：通过使用 Raftx 协议，该系统能够保证日志条目的全局顺序一致性。&lt;/li&gt; 
 &lt;li&gt;简单易懂：代码结构清晰，易于理解。&lt;/li&gt; 
 &lt;li&gt;功能完整：实现了基本的日志记录功能，并且支持多种日志级别（Debug, Info, Warn, Error）。&lt;/li&gt; 
 &lt;li&gt;并发处理：提供了并发写入日志的能力，适用并发场景。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;缺乏故障恢复机制：当一个节点重新加入集群时，需要有一个有效的机制来同步缺失的数据，否则可能丢失数据。&lt;/li&gt; 
 &lt;li&gt;监控与报警：不具备自我监控能力。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;raftx&lt;/strong&gt;的介绍，可以参考：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Fraftx&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/a&gt;或&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fwiki%2Fraftx&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;wiki&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;&lt;strong&gt;核心代码实现&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;//注册 Debug 的事件监听&lt;/span&gt;
cl.raft.MemWatch([]&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;{&lt;span style=&quot;color:#005cc5&quot;&gt;0&lt;/span&gt;}, &lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt;&lt;span&gt;(key, value []&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;, watchType raft.WatchType)&lt;/span&gt;&lt;/span&gt; {
cl.log.Debug(&lt;span style=&quot;color:#d73a49&quot;&gt;string&lt;/span&gt;(value))
}, &lt;span style=&quot;color:#005cc5&quot;&gt;true&lt;/span&gt;, raft.ADD, raft.UPDATE)&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;这部分代码是 Debug 方法的核心逻辑实现&lt;/li&gt; 
 &lt;li&gt;实现逻辑为通过监听键值的创建与修改即 ADD，UPDATE 的事件，捕获写日志的操作，并调用本地日志工具，将事件触发的日志数据，写入本地日志文件，由于 raftx 保证了各个节点数据的有序性，因此，日志数据也是有序的，这样保证了各个节点的日志数据是相同的。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;以下是完整的代码&lt;/strong&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;分布式日志库 logx:&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Ftest%2Ftree%2Fmain%2Flogx&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;代码地址&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;import&lt;/span&gt; (
&lt;span style=&quot;color:#032f62&quot;&gt;&quot;github.com/donnie4w/go-logger/logger&quot;&lt;/span&gt;
&lt;span style=&quot;color:#032f62&quot;&gt;&quot;github.com/donnie4w/raftx&quot;&lt;/span&gt;
&lt;span style=&quot;color:#032f62&quot;&gt;&quot;github.com/donnie4w/raftx/raft&quot;&lt;/span&gt;
)

&lt;span style=&quot;color:#d73a49&quot;&gt;type&lt;/span&gt; Logx &lt;span style=&quot;color:#d73a49&quot;&gt;struct&lt;/span&gt; {
log   *logger.Logging
raftx raftx.Raftx
}

&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color:#6f42c1&quot;&gt;NewLogx&lt;/span&gt;&lt;span&gt;(filePath &lt;span style=&quot;color:#d73a49&quot;&gt;string&lt;/span&gt;, listen &lt;span style=&quot;color:#d73a49&quot;&gt;string&lt;/span&gt;, peers []&lt;span style=&quot;color:#d73a49&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (r *Logx) {
log := logger.NewLogger().SetOption(&amp;amp;logger.Option{FileOption: &amp;amp;logger.FileSizeMode{Filename: filePath, Maxsize: &lt;span style=&quot;color:#005cc5&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span style=&quot;color:#005cc5&quot;&gt;30&lt;/span&gt;}, Format: logger.FORMAT_DATE | logger.FORMAT_SHORTFILENAME})
rx := raftx.NewRaftx(&amp;amp;raft.Config{ListenAddr: listen, PeerAddr: peers})
&lt;span style=&quot;color:#d73a49&quot;&gt;go&lt;/span&gt; rx.Open() &lt;span style=&quot;color:#6a737d&quot;&gt;//启动 raftx 服务&lt;/span&gt;
r = &amp;amp;Logx{log: log, raftx: rx}
&lt;span style=&quot;color:#d73a49&quot;&gt;go&lt;/span&gt; &lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {
rx.WaitRun() &lt;span style=&quot;color:#6a737d&quot;&gt;//等待 raftx 集群可正常服务&lt;/span&gt;
r.init()
}()
&lt;span style=&quot;color:#d73a49&quot;&gt;return&lt;/span&gt;
}

&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt; &lt;span&gt;(lx *Logx)&lt;/span&gt;&lt;/span&gt; init() {
&lt;span style=&quot;color:#6a737d&quot;&gt;//注册 Debug 的事件监听&lt;/span&gt;
lx.raftx.MemWatch([]&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;{&lt;span style=&quot;color:#005cc5&quot;&gt;0&lt;/span&gt;}, &lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt;&lt;span&gt;(key, value []&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;, watchType raft.WatchType)&lt;/span&gt;&lt;/span&gt; {
lx.log.Debug(&lt;span style=&quot;color:#d73a49&quot;&gt;string&lt;/span&gt;(value))
}, &lt;span style=&quot;color:#005cc5&quot;&gt;true&lt;/span&gt;, raft.ADD, raft.UPDATE)

&lt;span style=&quot;color:#6a737d&quot;&gt;//注册 Info 的事件监听&lt;/span&gt;
lx.raftx.MemWatch([]&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;{&lt;span style=&quot;color:#005cc5&quot;&gt;1&lt;/span&gt;}, &lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt;&lt;span&gt;(key, value []&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;, watchType raft.WatchType)&lt;/span&gt;&lt;/span&gt; {
lx.log.Info(&lt;span style=&quot;color:#d73a49&quot;&gt;string&lt;/span&gt;(value))
}, &lt;span style=&quot;color:#005cc5&quot;&gt;true&lt;/span&gt;, raft.ADD, raft.UPDATE)

&lt;span style=&quot;color:#6a737d&quot;&gt;//注册 Warn 的事件监听&lt;/span&gt;
lx.raftx.MemWatch([]&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;{&lt;span style=&quot;color:#005cc5&quot;&gt;2&lt;/span&gt;}, &lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt;&lt;span&gt;(key, value []&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;, watchType raft.WatchType)&lt;/span&gt;&lt;/span&gt; {
lx.log.Warn(&lt;span style=&quot;color:#d73a49&quot;&gt;string&lt;/span&gt;(value))
}, &lt;span style=&quot;color:#005cc5&quot;&gt;true&lt;/span&gt;, raft.ADD, raft.UPDATE)

&lt;span style=&quot;color:#6a737d&quot;&gt;//注册 Error 的事件监听&lt;/span&gt;
lx.raftx.MemWatch([]&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;{&lt;span style=&quot;color:#005cc5&quot;&gt;3&lt;/span&gt;}, &lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt;&lt;span&gt;(key, value []&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;, watchType raft.WatchType)&lt;/span&gt;&lt;/span&gt; {
lx.log.Error(&lt;span style=&quot;color:#d73a49&quot;&gt;string&lt;/span&gt;(value))
}, &lt;span style=&quot;color:#005cc5&quot;&gt;true&lt;/span&gt;, raft.ADD, raft.UPDATE)
}

&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt; &lt;span&gt;(lx *Logx)&lt;/span&gt;&lt;/span&gt; Debug(value []&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;) &lt;span style=&quot;color:#d73a49&quot;&gt;error&lt;/span&gt; {
&lt;span style=&quot;color:#d73a49&quot;&gt;return&lt;/span&gt; lx.raftx.MemCommand([]&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;{&lt;span style=&quot;color:#005cc5&quot;&gt;0&lt;/span&gt;}, value, &lt;span style=&quot;color:#005cc5&quot;&gt;0&lt;/span&gt;, raft.MEM_PUT)
}

&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt; &lt;span&gt;(lx *Logx)&lt;/span&gt;&lt;/span&gt; Info(value []&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;) &lt;span style=&quot;color:#d73a49&quot;&gt;error&lt;/span&gt; {
&lt;span style=&quot;color:#d73a49&quot;&gt;return&lt;/span&gt; lx.raftx.MemCommand([]&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;{&lt;span style=&quot;color:#005cc5&quot;&gt;1&lt;/span&gt;}, value, &lt;span style=&quot;color:#005cc5&quot;&gt;0&lt;/span&gt;, raft.MEM_PUT)
}

&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt; &lt;span&gt;(lx *Logx)&lt;/span&gt;&lt;/span&gt; Warn(value []&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;) &lt;span style=&quot;color:#d73a49&quot;&gt;error&lt;/span&gt; {
&lt;span style=&quot;color:#d73a49&quot;&gt;return&lt;/span&gt; lx.raftx.MemCommand([]&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;{&lt;span style=&quot;color:#005cc5&quot;&gt;2&lt;/span&gt;}, value, &lt;span style=&quot;color:#005cc5&quot;&gt;0&lt;/span&gt;, raft.MEM_PUT)
}

&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt; &lt;span&gt;(lx *Logx)&lt;/span&gt;&lt;/span&gt; Error(value []&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;) &lt;span style=&quot;color:#d73a49&quot;&gt;error&lt;/span&gt; {
&lt;span style=&quot;color:#d73a49&quot;&gt;return&lt;/span&gt; lx.raftx.MemCommand([]&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;{&lt;span style=&quot;color:#005cc5&quot;&gt;3&lt;/span&gt;}, value, &lt;span style=&quot;color:#005cc5&quot;&gt;0&lt;/span&gt;, raft.MEM_PUT)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;&lt;strong&gt;测试代码：以下模拟 3 个集群节点：&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;var&lt;/span&gt; c1 *Logx
&lt;span style=&quot;color:#d73a49&quot;&gt;var&lt;/span&gt; c2 *Logx
&lt;span style=&quot;color:#d73a49&quot;&gt;var&lt;/span&gt; c3 *Logx

&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color:#6f42c1&quot;&gt;newlog1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; *Logx {
&lt;span style=&quot;color:#d73a49&quot;&gt;return&lt;/span&gt; NewLogx(&lt;span style=&quot;color:#032f62&quot;&gt;&quot;log1.log&quot;&lt;/span&gt;, &lt;span style=&quot;color:#032f62&quot;&gt;&quot;:20001&quot;&lt;/span&gt;, []&lt;span style=&quot;color:#d73a49&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color:#032f62&quot;&gt;&quot;127.0.0.1:20001&quot;&lt;/span&gt;, &lt;span style=&quot;color:#032f62&quot;&gt;&quot;127.0.0.1:20002&quot;&lt;/span&gt;, &lt;span style=&quot;color:#032f62&quot;&gt;&quot;127.0.0.1:20003&quot;&lt;/span&gt;})
}
&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color:#6f42c1&quot;&gt;newlog2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; *Logx {
&lt;span style=&quot;color:#d73a49&quot;&gt;return&lt;/span&gt; NewLogx(&lt;span style=&quot;color:#032f62&quot;&gt;&quot;log2.log&quot;&lt;/span&gt;, &lt;span style=&quot;color:#032f62&quot;&gt;&quot;:20002&quot;&lt;/span&gt;, []&lt;span style=&quot;color:#d73a49&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color:#032f62&quot;&gt;&quot;127.0.0.1:20001&quot;&lt;/span&gt;, &lt;span style=&quot;color:#032f62&quot;&gt;&quot;127.0.0.1:20002&quot;&lt;/span&gt;, &lt;span style=&quot;color:#032f62&quot;&gt;&quot;127.0.0.1:20003&quot;&lt;/span&gt;})
}
&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color:#6f42c1&quot;&gt;newlog3&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; *Logx {
&lt;span style=&quot;color:#d73a49&quot;&gt;return&lt;/span&gt; NewLogx(&lt;span style=&quot;color:#032f62&quot;&gt;&quot;log3.log&quot;&lt;/span&gt;, &lt;span style=&quot;color:#032f62&quot;&gt;&quot;:20003&quot;&lt;/span&gt;, []&lt;span style=&quot;color:#d73a49&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color:#032f62&quot;&gt;&quot;127.0.0.1:20001&quot;&lt;/span&gt;, &lt;span style=&quot;color:#032f62&quot;&gt;&quot;127.0.0.1:20002&quot;&lt;/span&gt;, &lt;span style=&quot;color:#032f62&quot;&gt;&quot;127.0.0.1:20003&quot;&lt;/span&gt;})
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;压测调用&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color:#6f42c1&quot;&gt;Benchmark_logx&lt;/span&gt;&lt;span&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; {
&lt;span style=&quot;color:#d73a49&quot;&gt;for&lt;/span&gt; i := &lt;span style=&quot;color:#005cc5&quot;&gt;0&lt;/span&gt;; i &amp;lt; b.N; i++ {
c1.Debug([]&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;(&lt;span style=&quot;color:#032f62&quot;&gt;&quot;hello---------------&amp;gt;&quot;&lt;/span&gt; + strconv.Itoa(i)))        &lt;span style=&quot;color:#6a737d&quot;&gt;//模拟 c1 节点打印日志&lt;/span&gt;
c2.Info([]&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;(&lt;span style=&quot;color:#032f62&quot;&gt;&quot;world---------------&amp;gt;&quot;&lt;/span&gt; + strconv.Itoa(i)))         &lt;span style=&quot;color:#6a737d&quot;&gt;//模拟 c2 节点打印日志&lt;/span&gt;
c3.Warn([]&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;(&lt;span style=&quot;color:#032f62&quot;&gt;&quot;hello raftx---------------&amp;gt;&quot;&lt;/span&gt; + strconv.Itoa(i)))   &lt;span style=&quot;color:#6a737d&quot;&gt;//模拟 c3 节点打印日志&lt;/span&gt;
}
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;并发测试调用&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color:#6f42c1&quot;&gt;Test_Parallel&lt;/span&gt;&lt;span&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {
&lt;span style=&quot;color:#d73a49&quot;&gt;for&lt;/span&gt; i := &lt;span style=&quot;color:#d73a49&quot;&gt;range&lt;/span&gt;  &lt;span style=&quot;color:#005cc5&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span style=&quot;color:#005cc5&quot;&gt;17&lt;/span&gt; { &lt;span style=&quot;color:#6a737d&quot;&gt;//这里将模拟每个节点 13 万并发写日志数据&lt;/span&gt;
&lt;span style=&quot;color:#d73a49&quot;&gt;go&lt;/span&gt; &lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {
e1 := c1.Debug([]&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;(&lt;span style=&quot;color:#032f62&quot;&gt;&quot;hello---------------&amp;gt;&quot;&lt;/span&gt; + strconv.Itoa(i)))        &lt;span style=&quot;color:#6a737d&quot;&gt;//模拟 c1 节点打印日志&lt;/span&gt;
e2 := c2.Info([]&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;(&lt;span style=&quot;color:#032f62&quot;&gt;&quot;world---------------&amp;gt;&quot;&lt;/span&gt; + strconv.Itoa(i)))         &lt;span style=&quot;color:#6a737d&quot;&gt;//模拟 c2 节点打印日志&lt;/span&gt;
e3 := c3.Warn([]&lt;span style=&quot;color:#d73a49&quot;&gt;byte&lt;/span&gt;(&lt;span style=&quot;color:#032f62&quot;&gt;&quot;hello raftx---------------&amp;gt;&quot;&lt;/span&gt; + strconv.Itoa(i)))   &lt;span style=&quot;color:#6a737d&quot;&gt;//模拟 c3 节点打印日志&lt;/span&gt;
&lt;span style=&quot;color:#d73a49&quot;&gt;if&lt;/span&gt; e1 != &lt;span style=&quot;color:#005cc5&quot;&gt;nil&lt;/span&gt; || e2 != &lt;span style=&quot;color:#005cc5&quot;&gt;nil&lt;/span&gt; || e3 != &lt;span style=&quot;color:#005cc5&quot;&gt;nil&lt;/span&gt; {
t.Log(e1, e2, e3)
}
}()
}
time.Sleep(&lt;span style=&quot;color:#005cc5&quot;&gt;30&lt;/span&gt; * time.Second) &lt;span style=&quot;color:#6a737d&quot;&gt;//根据实际环境设置等待时间，确保所有节点都执行结束&lt;/span&gt;
TestFileSync(t) &lt;span style=&quot;color:#6a737d&quot;&gt;//检查各个节点生成的日志文件是否相同&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;如果测试完过早退出，有的节点内部还没有执行完毕，可能导致日志不完整，出现日志缺少数据的情况&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;&lt;strong&gt;对比日志文件数据是否相同&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color:#6f42c1&quot;&gt;TestFileSync&lt;/span&gt;&lt;span&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {
t.Log(&lt;span style=&quot;color:#032f62&quot;&gt;&quot;fileByteEq 1&amp;amp;2:&quot;&lt;/span&gt;, fileByteEq1())
t.Log(&lt;span style=&quot;color:#032f62&quot;&gt;&quot;fileByteEq 1&amp;amp;3:&quot;&lt;/span&gt;, fileByteEq2())
}

&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color:#6f42c1&quot;&gt;fileByteEq1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#d73a49&quot;&gt;bool&lt;/span&gt; {
bs1, _ := util.ReadFile(&lt;span style=&quot;color:#032f62&quot;&gt;&quot;log1.log&quot;&lt;/span&gt;)
bs2, _ := util.ReadFile(&lt;span style=&quot;color:#032f62&quot;&gt;&quot;log2.log&quot;&lt;/span&gt;)
&lt;span style=&quot;color:#d73a49&quot;&gt;return&lt;/span&gt; bytes.Equal(bs1, bs2)
}

&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color:#6f42c1&quot;&gt;fileByteEq2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#d73a49&quot;&gt;bool&lt;/span&gt; {
bs1, _ := util.ReadFile(&lt;span style=&quot;color:#032f62&quot;&gt;&quot;log1.log&quot;&lt;/span&gt;)
bs2, _ := util.ReadFile(&lt;span style=&quot;color:#032f62&quot;&gt;&quot;log3.log&quot;&lt;/span&gt;)
&lt;span style=&quot;color:#d73a49&quot;&gt;return&lt;/span&gt; bytes.Equal(bs1, bs2)
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;通过系列测试，可以看到，调用&lt;code&gt;TestFileSync&lt;/code&gt;执行，每个节点 13 万并发写日志生成的 3 个文件内容完全一致。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;    log_test.&lt;span style=&quot;color:#d73a49&quot;&gt;go&lt;/span&gt;:&lt;span style=&quot;color:#005cc5&quot;&gt;55&lt;/span&gt;: fileByteEq &lt;span style=&quot;color:#005cc5&quot;&gt;1&lt;/span&gt;&amp;amp;&lt;span style=&quot;color:#005cc5&quot;&gt;2&lt;/span&gt;: &lt;span style=&quot;color:#005cc5&quot;&gt;true&lt;/span&gt;
    log_test.&lt;span style=&quot;color:#d73a49&quot;&gt;go&lt;/span&gt;:&lt;span style=&quot;color:#005cc5&quot;&gt;56&lt;/span&gt;: fileByteEq &lt;span style=&quot;color:#005cc5&quot;&gt;1&lt;/span&gt;&amp;amp;&lt;span style=&quot;color:#005cc5&quot;&gt;3&lt;/span&gt;: &lt;span style=&quot;color:#005cc5&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//11564c5e6e1d486f0411833125f4c8af.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;通过 raftx API,可以高效协同各个集群节点的数据操作，需要注意的是：该实现并非绝对保证各个节点的数据一致， 该实现没有进一步检查各个节点的日志文件的差异并实现数据同步等操作。 &amp;nbsp;例如，当一个集群节点宕机后，它的内存数据被清空，当它重新连接上集群时，可能会丢失部分数据无法同步回来，因为 raftx 易失性数据的日志长度是有限制的，节点断开时间过长，可能缺失的数据将超过日志最大上限，此时，重连或新增的节点将无法同步完整的数据。&lt;/p&gt; 
&lt;p style=&quot;color:#212529; text-align:start&quot;&gt;raftx 分布式易失性数据服务的特点是数据应当是相对短暂的。如果使用以上的方式开发分布式日志库，并且出现了宕机丢失数据的情况，应当手动将最新的日志数据同步到重启的节点，尽量缩小新加入节点数据与正常节点数据差异。再让该节点重新连上集群。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329786</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329786</guid>
            <pubDate>Tue, 07 Jan 2025 02:55:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>USB 全新标识将直接标注传输速度、功率</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;近日，USB 开发者论坛（USB-IF）正式公布了全新的 USB 标识。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a6c9820d72ad1254e60d770ed31d8ba2ae1.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;据了解，全新的 USB 标识相较于旧版更加直观，舍弃了旧版的「USB 3.2 Gen1」、「USB 3.2 Gen2」等类似后缀，改为了由传输速度和充电功率作为后缀。其中设备与数据线的传输速度以 Gbps 为单位，而充电功率统一使用「W（瓦）」为单位。&lt;/p&gt; 
&lt;p&gt;新的 USB 标识采用速度优先的原则，用清晰易懂的数字直接标明数据传输速度，例如 USB 80Gbps、USB 40Gbps 等，取代以往 USB4 v2 等复杂表述。&lt;/p&gt; 
&lt;p&gt;新的 USB 标识也适用于线缆标识，会在线缆上同时标明数据传输速度和供电能力。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8927f2637a1e49be5f4f484a0dbd1c19b2e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;USB-IF 强调此次更新旨在解决长期以来消费者对 USB 标识的困惑，尤其是在 2017 年 USB 3.2 推出时，诸如 Gen 2x2 和 SuperSpeed USB 20Gbps 等让消费者难以理解实际规格的复杂命名。&lt;/p&gt; 
&lt;p&gt;据 USB-IF 代表透露，戴尔或将会成为首个印刷新标识上产品的厂商。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329785/updated-usb-logo</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329785/updated-usb-logo</guid>
            <pubDate>Tue, 07 Jan 2025 02:53:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>微软 CEO 纳德拉宣布组建新 AI 团队「CoreAI」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;近日，微软 CEO Satya Nadella 在官方博客&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.microsoft.com%2Fblog%2F2025%2F01%2F13%2Fintroducing-core-ai-platform-and-tools%2F&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;&lt;/u&gt;，微软将组建新的 AI 团队「CoreAI」。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img height=&quot;1420&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0115/104102_Ifg5_2720166.png&quot; width=&quot;1500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;据介绍，CoreAI 将专注于开发端到端的 AI 应用平台与工具，为微软自己与其第三方客户打造端到端的 Copilot 和 AI 堆栈，以构建和运行 AI App 及 AI Agents（人工智能代理）。同时 CoreAI 还将打造 GitHub Copilot，从而在领先的 AI 产品与 AI 平台之间建立紧密的反馈循环，以推动堆栈及其路线图的发展。&lt;/p&gt; 
&lt;p&gt;据了解，&lt;strong&gt;CoreAI 将汇集开发部、AI 平台以及 CTO 办公室的一些关键团队（包含 AI 超级计算机、AI Agentic Runtime 和 Engineering Thrive&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;此外，CoreAI 将由网络安全初创公司 Lacework 前 CEO、Meta 前工程主管 Jay Parikh 领导，Eric Boyd、Jason Taylor、Julia Liuson、Tim Bozarth 及其各自的团队将向 Jay 汇报。&lt;/p&gt; 
&lt;p&gt;Satya Nadella 还表示，Jay Parikh 加入微软后将与多个高层领导，如 Mustafa Suleyman、Scott Guthrie 和 Kevin Scott 等紧密合作，共同推动微软在 AI 和云计算领域的战略。&lt;/p&gt; 
&lt;p&gt;此前，Jay Parikh 于 2024 年 11 月加入微软 Team SLT（高级领导团队）。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329784/ms-core-ai-platform-and-tools</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329784/ms-core-ai-platform-and-tools</guid>
            <pubDate>Tue, 07 Jan 2025 02:44:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>2024 LLM 年度事件回顾：价格全面下跌、多模态能力爆发……</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;2025 年伊始，Django 的作者之一 Simon Willison，带我们回顾了 2024 年 AI 的重磅进展，堪称大模型的「里程碑」盘点。快来看看有哪些突破，刷新了我们对 AI 的认知！&lt;/p&gt; 
&lt;p&gt;原文很长，下面给大家列几个关键点：&lt;/p&gt; 
&lt;p&gt;- &lt;strong&gt;GPT-4 壁垒被突破&lt;/strong&gt;：从前，GPT-4 被视为无人能及的高度智能「天花板」，现在，Chatbot Area 排行榜上已经有近 70 个模型，超过了 2023 年 3 月版本的 GPT-4。谷歌的 Gemini 1.5 Pro 不仅在输出质量上与 GPT-4 持平，还引入了 1 百万到 2 百万的上下文长度，以及视频输入能力。这些新功能彻底颠覆了我们对 LLM 应用的想象。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4e924b4d66f2e860dd82f51488f7fe55f15.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;- 本地运行大模型&lt;/strong&gt;：令人震撼的是，一些 GPT-4 同级模型已经可以在配置较高的笔记本上运行，如 Meta 的 Llama 3.2 3B 模型不仅可以在 MacBook Pro 上运行，还能通过免费的 MLC Chat iOS 应用在 iPhone 上运行。这意味着即便是移动设备，用户也能体验到强大的 AI 能力。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6115a9d99b52df4aec0ed9bc6615e354df3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;- LLM 价格全面下跌&lt;/strong&gt;：大量参与者带来的内卷，以及模型推理效率的提升，使得 LLM 的成本断崖式下降。以前昂贵的 API 费用，如今已经便宜到小团队也能轻松负担。谷歌的 Gemini 1.5 Flash 8B，为 68000 张图像生成一句话描述，总成本仅为 1.68 美元，这比去年 GPT-3.5 Turbo 的费用下降了近 27 倍，极大地推动了 LLM 的普及。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;- 多模态能力爆发&lt;/strong&gt;：2024 年，多模态模型进入主流视野。除了文字，还能对图片、音频甚至视频进行处理。有些模型还能实时接收语音和视频输入，让人与 AI 的交互科幻味十足。如 OpenAI 的 GPT-4o 模型新增了语音和实时摄像头模式，用户可以通过语音与 AI 互动，甚至实时分享摄像头画面进行分析。谷歌的 NotebookLM 则能生成逼真的播客对话，展现了多模态 AI 的无限可能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;- 应用开发门槛降低&lt;/strong&gt;：越来越多的 LLM 支持「一键式」生成代码、网页，甚至是交互式应用，整个开发流程在聊天界面就能完成， Claude Artifacts 的出现，更是将低代码应用开发推向了高潮。此外，GitHub Spark 和 Mistral Chat 的 Canvas 功能也让开发者轻松构建应用。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;- 智能 Agent 尚未到来&lt;/strong&gt;：虽然 LLM 被寄予厚望，但让模型完全自主决策、执行任务的「智能 Agent」仍面临可靠性难题，谷歌 Search 曾错误描述不存在的电影「Encanto 2」，说明 LLM 在信息准确性上还存在局限性。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;- 数据中心与环保&lt;/strong&gt;：谷歌、Meta、微软和亚马逊等公司都花费数十亿美元建设新的数据中心，甚至有人提议建造新的核电站为其供能。这无疑会对环境造成进一步影响，如何在效率与可持续发展之间取得平衡仍是焦点。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;- AI 垃圾充斥网络&lt;/strong&gt;：2024 年，人们用「AI 垃圾」来形容那些没有审核、胡乱生成的 AI 生成文字。由于 AI 生成的文章数量激增，国外某些杂志居然暂停接受投稿。此外，「AI 洗稿」操作也让短视频内容同质化严重，甚至出现许多不符合事实的内容。随着 AI 生成内容的爆炸式涌现，如何避免低质量文字泛滥，成了一个新课题。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;- 合成数据训练模型&lt;/strong&gt;：随着数据越来越稀缺，新模型训练时，开始采用更大模型生成的「合成数据」。如 DeepSeek v3 使用了 DeepSeek-R1 的推理数据，训练成本仅为 557.6 万美元，相比 Meta 的 Llama 3.1 405B 模型的 3084 万美元，成本低了近 11 倍。OpenAI 创始成员 Karpathy 称赞 DeepSeek V3，在有限预算上训练模型预更容易了，Meta 科学家田渊栋也称其训练过程为「黑科技」。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;- 专业门槛依旧存在&lt;/strong&gt;：即便模型越来越强大，实际应用中依旧需要熟练掌握提示词、API 调用、工具接入等「高级技巧」，才能让 AI 发挥最大价值。例如，用户需要理解 CSP 和 CORS HTTP 头信息才能构建与外部 API 交互的 Claude Artifact，否则容易遇到安全问题，这对普通用户来说仍是不小的挑战。&lt;/p&gt; 
&lt;p&gt;感兴趣的小伙伴可以阅读原文：&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsimonwillison.net%2F2024%2FDec%2F31%2Fllms-in-2024%2F&quot; target=&quot;_blank&quot;&gt;https://simonwillison.net/2024/Dec/31/llms-in-2024/&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329778/llms-in-2024</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329778/llms-in-2024</guid>
            <pubDate>Tue, 07 Jan 2025 02:33:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>MiniMax 开源新一代 01 系列模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;MiniMax 发布并开源了 MiniMax-01 全新系列模型，其中包含：基础语言大模型 MiniMax-Text-01 和视觉多模态大模型 MiniMax-VL-01。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根据介绍，MiniMax-01 系列模型首次大规模实现线性注意力机制，传统 Transformer 架构不再是唯一的选择。这个模型的参数量高达 4560 亿，其中单次激活 459 亿。模型综合性能比肩海外顶尖模型，同时能够高效处理全球最长 400 万 token 的上下文，是 GPT-4o 的 32 倍，Claude-3.5-Sonnet 的 20 倍。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前，官方给出的标准定价是输入 token 1 元/百万 token，输出 token 8 元/百万 token。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;模型结构图如下：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;356&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-2d8661e8dbbe47eaa96c51613ee0a736d29.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;MiniMax 方面称，基于业界主流的文本和多模态理解测评，该模型在大多数任务上追平了海外公认最先进的两个模型，GPT-4o-1120 以及 Claude-3.5-Sonnet-1022。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在长文任务上，对比了之前长文最好的模型 Google 的 Gemini。结果显示，随着输入长度变长，MiniMax-Text-01 是性能衰减最慢的模型，显著优于 Google Gemini。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;246&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a005ca88b0a977e1fa2ee15fef027df17c7.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;463&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-23ea496de41a3e602911b1098b6476c84d5.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;更多详情可&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FYYtyqVhnyqRBDPinZxByyA&quot; target=&quot;_blank&quot;&gt;查看官方公告&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329775</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329775</guid>
            <pubDate>Tue, 07 Jan 2025 02:15:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>天天 AI-20250114-AI 工具市场多维度剖析</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;strong&gt;2AGI.NET：天天 AI-20250114&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;人工智能（AI）技术继续在多个领域实现突破，从智能驾驶的年度格局报告到医疗 AI Agent 的融资消息，再到 Agent 通信技术的探秘，AI 技术正以前所未有的速度和规模影响着我们的世界。本文将为您梳理近期的技术热点，带您一探究竟。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;AI 工具市场多维度剖析：分类、地区、来源与收入榜单深度解读-12 月&lt;/h2&gt; 
&lt;p&gt;随着人工智能技术的飞速发展，各类 AI 工具如雨后春笋般涌现，它们在不同领域发挥着重要作用，为人们的生活和工作带来了诸多便利与创新。本文将从 AI 月榜、AI 分类榜、AI 地区榜、AI 来源榜、AI 收入榜五个维度，深入剖析当前热门的 AI 工具，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2F&quot; target=&quot;_blank&quot;&gt;2AGI&lt;/a&gt;&amp;nbsp;以期为读者提供一个全面、清晰的 AI 工具市场概览。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fai-tools-market-analysis-december%2F&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Anthropic 重磅推荐：构建有效的代理&lt;/h2&gt; 
&lt;p&gt;上一篇我们讲了&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fgoogle-ai-agent-whitepaper-detailed%2F&quot; target=&quot;_blank&quot;&gt;Google AI 智能体白皮书&lt;/a&gt;，本文我们将来看看 Anthropic Agent 在理解上有何不同？本报告由 Erik Schluntz 和 Barry Zhang 撰写。该工作借鉴了 Anthropic 在构建代理方面的经验，以及客户分享的宝贵见解，&lt;strong&gt;2AGI&lt;/strong&gt;&amp;nbsp;推荐收藏阅读！&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fanthropic-recommended-effective-agents%2F&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;智能驾驶年度格局报告：两个「端到端」改写三大梯队，「华理魔」领跑&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;量子位发布了智能驾驶年度格局报告，指出两个「端到端」技术改写了智能驾驶的三大梯队格局，「华理魔」（华为、理想、魔方）领跑行业。报告详细分析了各企业在技术、市场和产品方面的表现，展示了智能驾驶领域的最新发展趋势。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fq8uc4Bg0QkZ1lVyVa6M_Ig&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;OpenAI 权威报告！美国再不抓紧，1750 亿美元将投资中国&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;AIGC 开放社区报道了 OpenAI 的权威报告，指出如果美国不加快 AI 技术的发展，将有 1750 亿美元的投资流向中国。这一报告引发了对全球 AI 竞争格局的讨论，强调了中国在 AI 领域的快速发展和吸引力。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FHU3m9pKy584_SiiXFN9J-A&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;智能体之间靠啥 「说话」？探秘 Agentic Web 通信基石 | 锁定 AI 大咖说 1 月 16 日直播&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;AIGC 开放社区探讨了智能体之间的通信技术，特别是 Agentic Web 的通信基石。文章介绍了智能体如何通过先进的通信协议进行交互，为 AI 技术的进一步发展提供了新的思路。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FED36S-RzoIloNqa7VI4X7g&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;医疗 AI Agent 独角兽 Hippocratic，获 10 亿元融资&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;AIGC 开放社区报道了医疗 AI Agent 独角兽 Hippocratic 获得 10 亿元融资的消息。这一融资显示了市场对医疗 AI 领域的高度认可和期待，也推动了 AI 技术在医疗健康领域的应用和发展。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FGtGSPK3sxw59hXOavj8UWQ&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;最新扣子 (coze) 微信小程序搭建:爆款小红书之」好好说话」图文生成,超详细制作过程快来瞧瞧吧.&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;杰克船长的 AIGC 提供了最新扣子 (coze) 微信小程序的搭建教程，特别是如何生成小红书上的「好好说话」图文内容。这一教程为开发者提供了详细的步骤和方法，降低了技术门槛，使得更多人能够参与到 AI 应用的开发中。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FahbUcJZSJl-nhderbm0sVg&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;机器人执行器，谁是盈利最强企业？&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;数说商业探讨了机器人执行器领域的盈利最强企业，分析了各企业在技术创新和市场拓展方面的表现。这一讨论为理解机器人执行器市场的竞争格局和发展趋势提供了宝贵的视角。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FnSkYPDFhuw1pPSpi2qEwdw&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Agent 不存在了？谁说必须用 Agent！&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;探索 AGI 讨论了 Agent 技术的未来，指出并非所有 AI 应用都必须依赖 Agent。文章提出了新的思路和方法，展示了 AI 技术的多样性和灵活性，为 AI 技术的进一步发展提供了新的方向。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F0OEGE5GZsyOah5rSKI8eew&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;英伟达不存在「工作和生活平衡」，大家跟着黄仁勋只因为能赢&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;量子位智库报道了英伟达的工作文化，指出公司不存在「工作和生活平衡」，员工跟随黄仁勋是因为公司能够赢得市场和技术竞争。这一报道揭示了英伟达在 AI 和硬件领域的成功背后的企业文化和团队精神。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F370kSb-emqReZcwRn8feNQ&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;李飞飞：通过「空间智能」重构世界&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;AIGC 前沿技术追踪报道了李飞飞关于「空间智能」的研究，她认为通过空间智能可以重构世界。这一研究不仅展示了 AI 在空间感知和理解方面的潜力，也为未来的智能系统设计提供了新的思路。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FQMUxENtXExR3tXjzZwaFTA&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;美国推出 AI 芯片管制新规，英伟达明确反对；余承东发全员信：鸿蒙三分天下有其一；菜鸟否认拆分 | 极客早知道&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;极客公园报道了美国推出 AI 芯片管制新规的消息，英伟达明确表示反对。同时，余承东发布全员信，宣布鸿蒙系统在市场上的显著份额，菜鸟则否认了拆分的传闻。这些动态反映了 AI 技术在国际政策和市场竞争中的复杂性。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FyiHMMKPX3ComOtZIm8OzPg&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;这群 00 后「杀疯」了！没靠资本、大学刚毕业狂赚 7 千万，TikTok 助攻 AI 爆款应用出世&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;AI 前线报道了一群 00 后创业者在 AI 领域的成功案例，他们没有依靠资本，大学刚毕业就通过 TikTok 平台推出了爆款 AI 应用，狂赚 7 千万。这一报道展示了年轻一代在 AI 技术应用和创新方面的潜力。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FhiDYdmS8WVRChfPKPHEl_A&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;大模型搜广推，「新瓶装旧酒」还是「范式的革新」？&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;AI 前线探讨了大模型在搜索、广告和推荐系统中的应用，讨论了这是否是「新瓶装旧酒」还是真正的「范式革新」。这一讨论为理解大模型技术的实际应用和潜在价值提供了新的视角。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F6HORhhIIEAxHMxiwm--PEg&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;我们正在大模型产品面前「裸奔」么&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;硅星人 Pro 探讨了我们在大模型产品面前的隐私和安全问题，指出当前大模型产品在数据收集和使用方面可能存在的风险。这一讨论引发了对 AI 技术伦理和隐私保护的广泛关注。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FBDDJCoZFolVhy7wiwTmkYQ&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;ChatGPT，取代工作 or 生产力神器？清华校友联手发文：AI 时代怎么选工作&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;硅星人 Pro 报道了清华校友关于 ChatGPT 的讨论，探讨了 ChatGPT 在取代工作和提升生产力方面的潜力。文章提供了 AI 时代职业选择的建议，帮助用户更好地应对 AI 技术带来的挑战和机遇。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F_JqLlw8kmiQK0cIhiANfAw&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;🔥 热门文章推荐（2AGI.NET）&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250114%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250114&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 14 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fai-tools-market-analysis-december%2F&quot; target=&quot;_blank&quot;&gt;AI 工具市场多维度剖析：分类、地区、来源与收入榜单深度解读-12 月&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 14 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250113%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250113&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 13 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fzero-shot-learning-new-era%2F&quot; target=&quot;_blank&quot;&gt;开启零样本学习新时代&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 12 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fanthropic-recommended-effective-agents%2F&quot; target=&quot;_blank&quot;&gt;Anthropic 重磅推荐：构建有效的代理&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 11 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Ftf-idf-technology-extracting-text-value%2F&quot; target=&quot;_blank&quot;&gt;挖掘文本价值：TF-IDF 技术&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 11 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250110%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250110&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 10 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fgoogle-ai-agent-whitepaper-detailed%2F&quot; target=&quot;_blank&quot;&gt;Google AI 智能体白皮书，超详细解读（内附下载）&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 9 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250109&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 9 日&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329761</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329761</guid>
            <pubDate>Tue, 07 Jan 2025 00:18:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>开源日报 | Linus 沉迷「焊接」；甲骨文拒绝放弃 JavaScript 商标；苹果在英面临 134 亿元巨额索赔；中国大模型在开源社区处于领先水平；AI 陪伴玩具到底行不行？</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2025.1.14&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/329653/linus-torvalds-guitar-pedal-offer&quot;&gt;Linus 变身「手工林」——将亲自打造一套吉他效果器踏板赠送给内核开发者&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;Linus 表示，我是软件工程师，也略懂焊接技术，愿意亲手制作一个吉他效果器踏板赠送给一名幸运的内核贡献者。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;对我来说，传统节日活动往往是做一两件乐高积木，因为这通常是圣诞节和生日礼物的一部分。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;但除了乐高积木，今年我还做了个吉他踏板套件（&quot;大人用烙铁做的乐高&quot;）。 不是因为我弹吉他，而是因为我喜欢手工捣鼓东西的感觉……&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;我做了很多，但我真正喜欢做的套件来自&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faionfx.com%2Fproject-type%2Fkit%2F&quot; target=&quot;_blank&quot;&gt;Aion FX&lt;/a&gt;。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;既然我想有借口继续做这些工作，又因为我实际上对制作出来的踏板没有任何用途（我已经把一些踏板卖给了不知情的 「受害者」 朋友们），我决定看看是否有 「倒霉」 的内核开发者想要一个。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;所有我决定，如果有任何内核开发者（&lt;em&gt;定义是 「在我的内核 Git 树中自 2024 年以来有 commit 记录的开发者」&lt;/em&gt;）觉得他们的生活中真的需要一个由我亲手打造的吉他踏板，请给我发一封电子邮件（发件人为 git 树中的那个邮箱地址），主题是 &quot;我想要一个吉他踏板&quot;。&lt;br&gt; ......&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;下周，我会随机挑选一名内核贡献者（假设真的有人想要），然后自费买下那个套件，用我自己颤抖的小手指制作它，并通过美国邮政服务寄给 「受害者」。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#245bdb&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/329611/apple-uk-lawsuit-app-store-overcharging&quot;&gt;「30% 抽成」再惹麻烦，苹果在英面临 134 亿元巨额索赔&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;1 月 13 日消息，针对苹果公司的集体诉讼在英国竞争上诉法庭正式开庭。苹果公司被指控对其 App Store 下载的软件收取 「过高且不公平」 的费用，面临高达 15 亿英镑（约合 134 亿人民币）的法律索赔。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0114/105029_xrGc_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;原告认为，苹果强迫软件开发商使用其自有的应用商店分发应用程序，属于滥用市场主导地位行为，且收取高达 30% 的佣金，限制了竞争，影响了开发者和消费者。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/329646&quot;&gt;开源云操作系统 Sealos 开发商「环界云计算」获阿里云战略投资&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;据 36 氪&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F36kr.com%2Fp%2F3121978699698434&quot; target=&quot;_blank&quot;&gt;报道&lt;/a&gt;&lt;/u&gt;，珠海环界云计算有限公司（以下简称 「环界云计算」）近日宣布完成 3750 万元的 Pre-A 融资，由阿里云独家投资。&lt;/p&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;在此之前，环界云计算曾累计获得三轮融资。其中天使轮融资由奇绩创坛领投，清华信息学院院⻓李军、科⼤微电⼦教授康⼀跟投。&lt;/p&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;环界云计算成立于 2022 年 3 月，其核心产品 Sealos 是一款以 kubernetes 为内核的云操作系统；另外该公司还有知名开源项目&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/p/fastgpt&quot; target=&quot;_blank&quot;&gt;FastGPT&lt;/a&gt;，是一款 AI 知识库产品。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/329615/oracle-refuses-yield-javascript-trademark&quot;&gt;Deno Land 称甲骨文拒绝放弃 JavaScript 商标&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;2024 年 11 月，Deno Land 曾向美国专利商标局 (USPTO) 提交了一份申请，&lt;a href=&quot;https://www.oschina.net/news/322147/deno-v-oracle-javascript-trademark&quot;&gt;要求&lt;/a&gt;取消甲骨文 (Oracle) 对 JavaScript 商标的所有权。并提出了三项主张：JavaScript 是通用的、Oracle 公司存在欺诈行为，以及 Oracle 已放弃使用该商标。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;近日， Deno Land 在 X 上发布了一篇&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fdeno_land%2Fstatus%2F1876728474666217739&quot; target=&quot;_blank&quot;&gt;帖子&lt;/a&gt;，介绍了关于该商标之争事件的最新进展。&lt;/span&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;#FreeJavaScript update：Oracle 公司已告知我们，他们不会主动撤回其 「JavaScript」 商标。下一步：他们将提交答辩状，我们将开始取证，以表明 「JavaScript 」 如何被广泛认为是一个通用术语，并且不受 Oracle 控制。&lt;/span&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-a7b0c8946ded6dedb137aeb2b5ae4ba521e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#245bdb&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/329607&quot;&gt;扎克伯格「锐评」苹果：缺乏创新、通过压榨用户和开发者来赚钱&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;1 月 11 日，Meta CEO 马克・扎克伯格在&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D7k1ehaE0bdU&quot; target=&quot;_blank&quot;&gt;做客&lt;/a&gt;&lt;/u&gt;播客节目 Joe Rogan Experience 时，对苹果的封闭生态系统进行抨击。&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;在节目中他谈及了对于 Vision Pro 的看法：「他们推出了一款售价 3500 美元的产品，我认为还不如我们售价 300 或 400 美元的产品好。」&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;同时，他还直接表示「苹果已经很久没有发明什么真正伟大的东西了。」他认为，史蒂夫・乔布斯发明了 iPhone，而现在苹果只是在这个成就上躺了 20 年。「实际上，我觉得他们的 iPhone 销量可能在下降。」&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;扎克伯格认为，苹果赚更多钱的方式，就是通过压榨用户来实现的。比如向开发者收取 30% 的税费，让用户购买更多外设和配件。&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FJrY9J9JDwc3OMJI1CSypgw&quot; target=&quot;_blank&quot;&gt;AI 一年过山车：从狂想到放下幻想&lt;/a&gt;&lt;/h4&gt; 
  &lt;p&gt;至少在有一个方面，中国大模型在 2024 年真的赶上了美国——开源。2024 年 1 月，在 Chatbot Arena 的排名中，全球前 6 的开源模型中只有一个中国模型——零一万物开发的 yi-34b-chat，到 12 月，这个数字增长到 3.5——0.5 是因为，其中有一个非中国的开源模型，是基于阿里 Qwen 2.5 72B 训练的。&lt;/p&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-38ffc297de0c0712f7a7c848e5ff0f46e26.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;/div&gt; 
    &lt;div&gt;
     &amp;nbsp;
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微信&lt;strong&gt;&amp;nbsp;晚点 LatePost&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1240212845%2FP9qQzeiYZ&quot; target=&quot;_blank&quot;&gt;巨硬的 markitdown 有 33.8k stars&lt;/a&gt;&lt;/h4&gt; 
  &lt;p&gt;巨硬的 markitdown 有 33.8k stars，它的核心功能是 HTML 转 Markdown，该能力由 markdownify 库提供。然而 markdownify 只有 1.2k stars。&lt;/p&gt; 
  &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d84eedfdd38d2c2e4cad360ec5f3993d1f8.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;div&gt; 
   &lt;div style=&quot;text-align:right&quot;&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;Maeiee&lt;/strong&gt;&lt;/span&gt;
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F7632744038%2FP9qsKDH0h&quot; target=&quot;_blank&quot;&gt;X210Ai——基于 ThinkPad X201 的复刻主板诞生&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;X210Ai----基于 ThinkPad X201 的复刻主板诞生，性能全面提升，同时还继续保持有 ThinkPad 经典七行键盘和优秀舒适的指点杆系统。&lt;/p&gt; 
   &lt;p&gt;X210Ai 规格参数如下：&lt;br&gt; 1、 CPU 采用酷睿 Ultra7165H 处理器&lt;br&gt; 2、 全速 M.2 2280 接口一个（另有 2.5 英寸 SATA 一个，再有 M.2 2242 一个可 WWAN 卡也可 SSD）&lt;br&gt; 3、 内存接口双通道 DDR5 插槽&lt;br&gt; 4、 一个雷电 4，一个全功能 C&lt;br&gt; 5、 VGA 接口替换成常用的标准 HDMI&lt;br&gt; 6、 EDP 屏线接口采用 I-PEX 直接匹配 LG13 寸和 LG13.3 寸&lt;br&gt; 7、 保留原装屏线接口功能&lt;br&gt; 8、 测试 4 芯、6 芯、9 芯电池正常充放电功能&lt;br&gt; 9、 TYPE C 接口物料尽量选择长点的或者 PCB 延长装上后能和 D 壳平齐&lt;br&gt; 10、 左下角 USB3.0 接口期望能找到正插的，反插有点反人类&lt;br&gt; 11、 风扇接口较原位置往中间移动 5MM 以方便散热器改造&lt;br&gt; 12、 还有需要优化的在量产前都可以提出来。&lt;/p&gt; 
   &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-067f4085173e121bf842d3a28a009075971.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&lt;strong&gt; song1118 公平评测&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6105753431%2FP9wu1aFRi&quot; target=&quot;_blank&quot;&gt;2024 年度 AI 事件&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;2025 年伊始，Django 的作者之一 Simon Willison，带我们回顾了 2024 年 AI 的重磅进展，堪称大模型的「里程碑」盘点。快来看看有哪些突破，刷新了我们对 AI 的认知！原文很长，下面给大家列几个关键点：&lt;/p&gt; 
   &lt;p&gt;- LLM 价格全面下跌：大量参与者带来的内卷，以及模型推理效率的提升，使得 LLM 的成本断崖式下降。以前昂贵的 API 费用，如今已经便宜到小团队也能轻松负担。谷歌的 Gemini 1.5 Flash 8B，为 68000 张图像生成一句话描述，总成本仅为 1.68 美元，这比去年 GPT-3.5 Turbo 的费用下降了近 27 倍，极大地推动了 LLM 的普及。&lt;/p&gt; 
   &lt;p&gt;- 多模态能力爆发：2024 年，多模态模型进入主流视野。除了文字，还能对图片、音频甚至视频进行处理。有些模型还能实时接收语音和视频输入，让人与 AI 的交互科幻味十足。如 OpenAI 的 GPT-4o 模型新增了语音和实时摄像头模式，用户可以通过语音与 AI 互动，甚至实时分享摄像头画面进行分析。谷歌的 NotebookLM 则能生成逼真的播客对话，展现了多模态 AI 的无限可能。&lt;/p&gt; 
   &lt;p&gt;- 应用开发门槛降低：越来越多的 LLM 支持「一键式」生成代码、网页，甚至是交互式应用，整个开发流程在聊天界面就能完成， Claude Artifacts 的出现，更是将低代码应用开发推向了高潮。此外，GitHub Spark 和 Mistral Chat 的 Canvas 功能也让开发者轻松构建应用。&lt;/p&gt; 
   &lt;p&gt;- 智能 Agent 尚未到来：虽然 LLM 被寄予厚望，但让模型完全自主决策、执行任务的「智能 Agent」仍面临可靠性难题，谷歌 Search 曾错误描述不存在的电影「Encanto 2」，说明 LLM 在信息准确性上还存在局限性。&lt;/p&gt; 
   &lt;div&gt; 
    &lt;div style=&quot;text-align:right&quot;&gt;
     &lt;span style=&quot;color:#000000&quot;&gt;- 微博&lt;strong&gt; 量子位&lt;/strong&gt;&lt;/span&gt;
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2194035935%2FP9wLD92nz&quot; target=&quot;_blank&quot;&gt;办公桌椅高度计算器&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;www.omnicalculator.com/everyday-life/desk-height&lt;br&gt; 输入身高，显示最适合你的办公桌、椅、显示器的高度建议。&lt;br&gt; 支持站立办公模式。&lt;/p&gt; 
   &lt;div&gt; 
    &lt;div style=&quot;text-align:right&quot;&gt;
     &lt;span style=&quot;color:#000000&quot;&gt;- 微博&lt;strong&gt; 蚁工厂&lt;/strong&gt;&lt;/span&gt;
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1821184418484721038%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;2025，人工智能走向何方？我们如何拥抱变化？&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;2025 年，对 AI 来说至关重要。有人认为，2025 年世界将迎来 AGI（通用人工智能），AI 可能会挑战人类社会；也有人认为，现今的 AI 连图灵测试都未通过，言其将挑战人类社会还为时过早。但不可否认的是，基于其强大的学习能力，AI 在近几年发生了飞速变化，无论是消费者的应用端，还是相关产业链和供应链，都在 AI 的影响下发生深刻转变。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;新华网&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.ce.cn%2Fcysc%2Ftech%2Fgd2012%2F202501%2F14%2Ft20250114_39265454.shtml&quot; target=&quot;_blank&quot;&gt;政策暖风频吹，脑机接口赛道火热&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;「脑机接口领域具有广阔的市场空间和巨大的发展潜力。一方面，随着神经科学和人工智能技术的快速发展，脑机接口技术在医疗康复、教育、健康监测等领域的应用场景不断拓展，市场需求持续增长；另一方面，国家对脑机接口研究的高度重视以及相关政策的支持，为行业发展提供了重要的政策利好。」&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;证券日报&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1821211263599836652%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;进入 1kg 重量时代，超轻笔记本爆发，PC 市场又有新卷法了？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;p&gt;当然，挑战依然存在，尤其是散热和续航这些根深蒂固的难题，但这些瓶颈的解决不仅会作用于超轻笔记本，也会扩散到整个 PC 行业，最终受益所有人。所以究竟，超轻笔记本能否真正撑起 PC 市场的一片天？时间会给出答案。&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;雷科技&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2Fttarticle%2Fp%2Fshow%3Fid%3D2309405122651697053928&quot; target=&quot;_blank&quot;&gt;半导体产能过剩？全球投资额减 95 亿美元&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;全球 10 家主要半导体企业 2024 年度的设备投资额为 1233 亿美元，较上一年度减少 2%，比初期计划下调约 95 亿美元。将是连续 2 年同比下降。需求主要集中在人工智能 (AI) 领域，而纯电动汽车 (EV) 领域则停滞不前。受各国半导体振兴政策推动，提前投资取得进展，产能也出现过剩迹象。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt; 日经中文网&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jiemian.com%2Farticle%2F12244085.html&quot; target=&quot;_blank&quot;&gt;混乱、分裂、吞并：2024 年 AI 的信仰之战&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#404040; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#0e0e0e&quot;&gt;2024 年，硅谷的生成式 AI 大战丝毫不比 2023 年逊色，只是这一年的 AI 战争更残酷更直接：巨头们不但拼模型能力，还拼爆款产品，同时继续投入数百亿美元拼算力建数据中心；而几家一年前还是明星项目的初创企业却因为资金烧光，直接被巨头吞并。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;span style=&quot;color:#252525&quot;&gt;&lt;strong&gt;硅谷 101&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F36kr.com%2Fp%2F3121872943665411&quot; target=&quot;_blank&quot;&gt;爆火的 AI 陪伴玩具，到底行不行？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#262626; margin-left:0; margin-right:0; text-align:justify&quot;&gt;总的来看，AI 陪伴玩具的核心始终是协助用户应对现实中的困难，而不是让人沉溺于虚拟世界或逃避现实，这与传统的 AI 陪伴软件、游戏有着本质区别。旧瓶装新酒，或许能带来惊喜。如何在技术创新、用户体验和商业模式之间找到平衡，将决定这一赛道的未来赢家。&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;定焦&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fydb-platform%2Fydb&quot; target=&quot;_blank&quot;&gt;ydb-platform/ydb&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;200&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-403474fd90c16bb6c6b9561df892c31a7c8.png&quot; width=&quot;200&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fydb-platform%2Fydb&quot; target=&quot;_blank&quot;&gt;https://github.com/ydb-platform/ydb&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;YDB（Yandex Database）是一个开源的分布式 SQL 数据库，它结合了高可用性和可扩展性，以及严格的一致性和 ACID 事务。&lt;/span&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/u/5783135/blog/17101439&quot; target=&quot;_blank&quot;&gt;RAG 应用在得物开放平台的智能答疑的探索&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#3f3f3f; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;鉴于目前得物开放平台的人工答疑数量相对较高，用户在开放平台查询未果就会直接进入到人工答疑阶段。正如上文所说，RAG 擅长依赖一份可靠的知识库作出相应回答，构建一个基于开放平台文档知识库的 RAG 应用再合适不过，同时可以一定程度降低用户对于人工答疑的依赖性，做到问题前置解决。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#3f3f3f; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;整体流程.jpg&quot; height=&quot;263&quot; src=&quot;https://oscimg.oschina.net/oscnet//df99339945305abffa84509db86c62d5.jpg&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/329128/16gb-raspberry-pi-5-on-sale-now-at-120&quot; target=&quot;_blank&quot;&gt;16GB 内存版树莓派 5 正式上市，售价 120 美元&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：最强软路由&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：1000 块钱&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：这价格已经脱离树莓派的初衷了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：非要算汇率人家工资是美元？懂&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：还不如买 n100&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：淘宝，￥1148，请问￥881 在哪里买呢？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：这会价格太高了，没有 N100 或 N150 划算了。&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：最大优势是功耗，这玩意功耗是真的低，4B 实测平时 2-3w，毕竟电源最大输出就 5w，另外这两年也玩过几个小主机矿难机，24*365 开稳定性上没有能跟这玩意当对手的&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fk6z4UMVyQio1WlmxM6Bdrw&quot; target=&quot;_blank&quot;&gt;一文看尽 2024 年最受欢迎开源前端框架、UI 组件库、构建工具、CSS 框架等明星项目&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：作为一名前端，mdn 和红宝书可谓是耳熟能详的话题，如今红宝书第五版推陈出新，更希望看一下加入了哪些新内容&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：前端各种框架推陈出新，不停变动，究竟是吃太饱还是真的欣欣向荣，有大佬分析过嘛&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：很就以前看过不过是旧版，我本来是一名移动工程师，工作中常不可避免成为一名前端工程师，书中对于 js 的高级特性以及现代 Web 开发中技巧比较详细，加深对箭头函数等的理解，让我顺利完成一个设备管理系统的前端页面的开发，积累项目经验。很希望阅读下新版本的内容。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：在大学时看过红宝石，算是我的前端入门书，受益匪浅&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：avalonia 去哪了？&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0912/150800_DfGR_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329718</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329718</guid>
            <pubDate>Mon, 06 Jan 2025 11:42:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>RAG 应用在得物开放平台的智能答疑的探索</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;h1&gt;一、背景&lt;/h1&gt; 
&lt;p&gt;得物开放平台是一个把得物能力进行开放，同时提供给开发者提供，公告、应用控制枱、权限包申请、业务文档等功能的平台。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;面向商家：通过接入商家自研系统。可以实现自动化库存、订单、对账等管理。&lt;/li&gt; 
 &lt;li&gt;面向 ISV ：接入得物开放平台，能为其产品提供更完善的全平台支持。&lt;/li&gt; 
 &lt;li&gt;面向内部应用：提供安全、可控的、快速支持的跨主体通讯。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;得物开放平台目前提供了一系列的文档以及工具去辅助开发者在实际调用 API 之前进行基础的引导和查询。&lt;/p&gt; 
&lt;p&gt;但目前的文档搜索功能仅可以按照接口路径，接口名称去搜索，至于涉及到实际开发中遇到的接口前置检查，部分字段描述不清等实际问题，且由于信息的离散性，用户想要获得一个问题的答案需要在多个页面来回检索，造成用户焦虑，进而增大 TS 的答疑可能性。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//671b249398e84e0d43eede41dc3fd61f.jpg&quot; alt=&quot;背景.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;随着这几年 AI 大模型的发展，针对离散信息进行聚合分析且精准回答的能力变成了可能。而 RAG 应用的出现，解决了基础问答类 AI 应用容易产生幻觉现象的问题，达到了可以解决实际应用内问题的目标。&lt;/p&gt; 
&lt;h1&gt;二、简介&lt;/h1&gt; 
&lt;h2&gt;什么是 RAG&lt;/h2&gt; 
&lt;p&gt;RAG（检索增强生成）指 Retrieval Augmented Generation。&lt;/p&gt; 
&lt;p&gt;这是一种通过从外部来源获取知识来提高生成性人工智能模型准确性和可靠性的技术。通过 RAG，用户实际上可以与任何数据存储库进行对话，这种对话可视为&quot;开卷考试&quot;，即让大模型在回答问题之前先检索相关信息。&lt;/p&gt; 
&lt;h2&gt;RAG 应用的可落地场景&lt;/h2&gt; 
&lt;p&gt;RAG 应用的根本是依赖一份可靠的外部数据，根据提问检索并交给大模型回答，任何基于可靠外部数据的场景均是 RAG 的发力点。&lt;/p&gt; 
&lt;h2&gt;RAG 应用的主要组成部分&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;外部知识库：问题对应的相关领域知识，该知识库的质量将直接影响最终回答的效果。&lt;/li&gt; 
 &lt;li&gt;Embedding 模型：用于将外部文档和用户的提问转换成 Embedding 向量。&lt;/li&gt; 
 &lt;li&gt;向量数据库：将外部信息转化为 Embedding 向量后进行存储。&lt;/li&gt; 
 &lt;li&gt;检索器：该组件负责从向量数据库中识别最相关的信息。检索器将用户问题转换为 Embedding 向量后执行相似性检索，以找到与用户查询相关的 Top-K 文档（最相似的 K 个文档）。&lt;/li&gt; 
 &lt;li&gt;生成器（大语言模型 LLM）：一旦检索到相关文档，生成器将用户查询和检索到的文档结合起来，生成连贯且相关的响应。&lt;/li&gt; 
 &lt;li&gt;提示词工程（Prompt Engineering）：这项技术用于将用户的问题与检索到的上下文有效组合，形成大模型的输入。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;RAG 应用的核心流程&lt;/h2&gt; 
&lt;p&gt;以下为一个标准 RAG 应用的基础流程：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;将查询转换为向量&lt;/li&gt; 
 &lt;li&gt;在文档集合中进行语义搜索&lt;/li&gt; 
 &lt;li&gt;将检索到的文档传递给大语言模型生成答案&lt;/li&gt; 
 &lt;li&gt;从生成的文本中提取最终答案&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//d24ef1d520a066dfb3b834f8037b2ad4.jpg&quot; alt=&quot;RAG 应用.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 但在实际生产中，为了确保系统的全面性、准确性以及处理效率，还有许多因素需要加以考虑和处理。&lt;/p&gt; 
&lt;p&gt;下面我将基于答疑助手在开放平台的落地，具体介绍每个步骤的详细流程。&lt;/p&gt; 
&lt;h1&gt;三、实现目标&lt;/h1&gt; 
&lt;p&gt;鉴于目前得物开放平台的人工答疑数量相对较高，用户在开放平台查询未果就会直接进入到人工答疑阶段。正如上文所说，RAG 擅长依赖一份可靠的知识库作出相应回答，构建一个基于开放平台文档知识库的 RAG 应用再合适不过，同时可以一定程度降低用户对于人工答疑的依赖性，做到问题前置解决。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//00e4333499d11d969e47f6b0d6939208.jpg&quot; alt=&quot;实现目标.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;四、整体流程&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//df99339945305abffa84509db86c62d5.jpg&quot; alt=&quot;整体流程.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;技术选型&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;大模型：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenai.com%2Findex%2Fgpt-4o-mini-advancing-cost-efficient-intelligence%2F&quot; target=&quot;_blank&quot;&gt;https://openai.com/index/gpt-4o-mini-advancing-cost-efficient-intelligence/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Embedding 模型： &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fplatform.openai.com%2Fdocs%2Fguides%2Fembeddings&quot; target=&quot;_blank&quot;&gt;https://platform.openai.com/docs/guides/embeddings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;向量数据库：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmilvus.io%2F&quot; target=&quot;_blank&quot;&gt;https://milvus.io/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;框架： &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjs.langchain.com%2Fv0.2%2Fdocs%2Fintroduction%2F&quot; target=&quot;_blank&quot;&gt;https://js.langchain.com/v0.2/docs/introduction/&lt;/a&gt; LangChain.js 是 LangChain 的 JavaScript 版本，专门用于开发 LLM 相关的交互应用程序，其 Runnable 设计在开放平台答疑助手中广泛应用，在拓展性、可移植性上相当强大。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;准确性思考&lt;/h2&gt; 
&lt;p&gt;问答的准确性会直接反馈到用户的使用体验，当一个问题的回答是不准确的，会导致用户根据不准确的信息进一步犯错，导致人工客服介入，耐心丧失直至投诉。&lt;/p&gt; 
&lt;p&gt;所以在实际构建基于开放平台文档的答疑助手之前，首先考虑到的是问答的准确性，主要包括以下 2 点：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;首要解决答疑助手针对非开放平台提问的屏蔽&lt;/li&gt; 
 &lt;li&gt;寻找可能导致答非所问的时机以及相应的解决方案&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;屏蔽非相关问题&lt;/h3&gt; 
&lt;p&gt;为了屏蔽 AI 在回答时可能会回答一些非平台相关问题，我们首先要做的是让 AI 明确我们的目标（即问答上下文），且告诉他什么样的问题可以回答，什么问题不可以回答。&lt;/p&gt; 
&lt;p&gt;在这一点上，常用的手段为告知其什么是开放平台以及其负责的范畴。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;例如：得物的开放平台是一个包含着 API 文档，解决方案文档的平台，商家可以通过这个平台获取到得物的各种接口，以及解决方案，帮助商家更好的使用得物的服务。现在需要做一个智能答疑助手，你是其中的一部分。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;在这一段描述中，我们告知了答疑助手，开放平台包含着 API 文档，包含着解决方案，同时包含接口信息，同时会有商家等之类的字眼。大模型在收到这段上下文后，将会对其基础回答进行判断。&lt;/p&gt; 
&lt;p&gt;同时，我们可以通过让答疑助手二选一的方式进行回答，即平台相关问题与非平台相关问题。我们可以让大模型返回特定的数据枚举，且限定枚举范围，例如：开放平台通用问题、开放平台 API 答疑问题，未知问题。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;借助 Json 类型的输出 + JSON Schema，我们可通过 Prompt 描述来限定其返回，从而在进入实际问答前做到事前屏蔽。&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;寻找可能导致答非所问的时机&lt;/h3&gt; 
&lt;p&gt;当问题被收拢到开放平台这个主题之后，剩余的部分就是将用户提问与上下文进行结合，再交由大模型回答处理。在这过程中，可能存在的答非所问的时机有：不够明确的 Prompt 说明、上下文信息过于碎片化以及上下文信息的连接性不足三种。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;不够明确的 Prompt 说明：Prompt 本身描述缺少限定条件，导致大模型回答轻易超出我们给予的要求，从而导致答非所问。&lt;/li&gt; 
 &lt;li&gt;上下文信息过于碎片化：上下文信息可能被分割成 N 多份，这个 N 值过大或者过小，都会导致单个信息过大导致缺乏联想性、单个信息过小导致回答时不够聚焦。&lt;/li&gt; 
 &lt;li&gt;上下文信息连接性不够：若信息之间被随意切割，且缺少相关元数据连接，交给大模型的上下文将会是丧失实际意义的文本片段，导致无法提取出有用信息，从而答非所问。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;为了解决以上问题，在设计初期，开放平台答疑助手设定了以下策略来前置解决准确性问题：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;用户提问的结构化&lt;/li&gt; 
 &lt;li&gt;向量的分割界限以及元信息处理&lt;/li&gt; 
 &lt;li&gt;CO-STAR Prompt 结构&lt;/li&gt; 
 &lt;li&gt;相似性搜索的 K 值探索&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;用户提问结构化&lt;/h2&gt; 
&lt;p&gt;目标：通过大模型将用户提问的结构化，将用户提问分类并提取出精确的内容，便于提前引导、终止以及提取相关信息。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//8173654688caff503208bc75be8b00c5.jpg&quot; alt=&quot;结构化.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;例如，用户提问今天天气怎么样，结构化 Runnable 会将用户问题进行初次判断。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;一个相对简单的 Prompt 实现如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;# CONTEXT
得物的开放平台是一个包含着 API 文档，解决方案文档的平台，商家可以通过这个平台获取到得物的各种接口，以及解决方案，帮助商家更好的使用得物的服务。现在需要做一个智能答疑助手，你是其中的一部分。

# OBJECTIVE
你现在扮演一名客服。请将每个客户问题分类到固定的类别中。
你只接受有关开放平台接口的相关问答，不接受其余任何问题。
具体的类别我会在提供给你的 JSON Schema 中进行说明。

# STYLE

你需要把你的回答以特定的 JSON 格式返回

# TONE

你给我的内容里，只能包含特定 JSON 结构的数据，不可以返回给我任何额外的信息。

# AUDIENCE

你的回答是给机器看的，所以不需要考虑任何人类的感受。

# RESPONSE

你返回的数据结构必须符合我提供的 JSON Schema 规范，我给你的 Schema 将会使用\`&amp;lt;json-schema&amp;gt;&amp;lt;/json-schema&amp;gt;\`标签包裹.
每个字段的描述，都是你推算出该字段值的依据，请仔细阅读。

&amp;lt;json-schema&amp;gt;
  {schema}
&amp;lt;/json-schema&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Json Schema 的结构通过 zod 描述如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;const zApiCallMeta = z
  .object({
    type: z
      .enum([&#39;api_call&#39;， &#39;unknown&#39;, &#39;general&#39;])
      .describe(&#39;当前问题的二级类目, api_call 为 API 调用类问题，unknown 为非开放平台相关问题, general 为通用类开放平台问题&#39;),
    apiName: z
      .string()
      .describe(
        &#39;接口的名称。接口名称为中文，若用户未给出明确的 API 中文名称，不要随意推测，将当前字段置为空字符串&#39;,
      ),
    apiUrl: z.string().describe(&#39;接口的具体路径, 一般以/开头&#39;),
    requestParam: z.unknown().default({}).describe(&#39;接口的请求参数&#39;),
    response: z
      .object({})
      .or(z.null())
      .default({})
      .describe(&#39;接口的返回值，若未提供则返回 null&#39;),
    error: z
      .object({
        traceId: z.string(),
      })
      .optional()
      .describe(&#39;接口调用的错误信息，若接口调用失败，则提取 traceId 并返回&#39;),
  })
  .describe(&#39;当二级类目为 api_call 时，使用这个数据结构&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;以上结构，将会对用户的问题输入进行结构化解析。同时给出相应 JSON 数据结构。&lt;/p&gt; 
&lt;p&gt;将以上结构化信息结合，可实现一个基于 LangChain.js 的结构化 Runnable，在代码结构设计上，所有的 Runnable 将会使用$作为变量前缀，用于区分 Runnable 与普通函数。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import { ChatOpenAI } from &#39;@langchain/openai&#39;;
import { StringOutputParser } from &#39;@langchain/core/output_parsers&#39;;
import { RunnableSequence, RunnableMap } from &#39;@langchain/core/runnables&#39;;
import { $getPrompt } from &#39;./$prompt&#39;;
import { zSchema, StructuredInputType } from &#39;./schema&#39;;
import { n } from &#39;src/utils/llm/gen-runnable-name&#39;;
import { getLLMConfig } from &#39;src/utils/llm/get-llm-config&#39;;
import { getStringifiedJsonSchema } from &#39;src/utils/llm/get-stringified-json-schema&#39;;

const b = n(&#39;$structured-input&#39;);

const $getStructuredInput = () =&amp;gt; {
  const $model = new ChatOpenAI(getLLMConfig().ChatOpenAIConfig).bind({
    response_format: {
      type: &#39;json_object&#39;,
    },
  });

  const $input = RunnableMap.from&amp;lt;{ question: string }&amp;gt;({
    schema: () =&amp;gt; getStringifiedJsonSchema(zSchema),
    question: (input) =&amp;gt; input.question,
  }).bind({ runName: b(&#39;map&#39;) });

  const $prompt = $getPrompt();
  const $parser = new StringOutputParser();

  return RunnableSequence.from&amp;lt;{ question: string }, string&amp;gt;([
    $input.bind({ runName: b(&#39;map&#39;) }),
    $prompt.bind({ runName: b(&#39;prompt&#39;) }),
    $model,
    $parser.bind({ runName: b(&#39;parser&#39;) }),
  ]).bind({
    runName: b(&#39;chain&#39;),
  });
};

export { $getStructuredInput, type StructuredInputType };
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;鉴于 CO-STAR 以及 JSONSchema 的提供的解析稳定性，此 Runnable 甚至具备了可单测的能力。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import dotenv from &#39;dotenv&#39;;
dotenv.config();
import { describe, expect, it } from &#39;vitest&#39;;
import { zSchema } from &#39;../runnables/$structured-input/schema&#39;;
import { $getStructuredInput } from &#39;../runnables/$structured-input&#39;;

const call = async (question: string) =&amp;gt; {
  return zSchema.safeParse(
    JSON.parse(await $getStructuredInput().invoke({ question })),
  );
};

describe(&#39;The LLM should accept user input as string, and output as structured data&#39;, () =&amp;gt; {
  it(&#39;should return correct type&#39;, { timeout: 10 * 10000 }, async () =&amp;gt; {
    const r1 = await call(&#39;今天天气怎么样&#39;);
    expect(r1.data?.type).toBe(&#39;unknown&#39;);
    const r2 = await call(&#39;1 + 1&#39;);
    expect(r2.data?.type).toBe(&#39;unknown&#39;);
    const r3 = await call(&#39;trace: 1231231231231231313&#39;);
    expect(r3.data?.type).toBe(&#39;api_call&#39;);
    const r4 = await call(&#39;快递面单提示错误&#39;);
    expect(r4.data?.type).toBe(&#39;api_call&#39;);
    const r5 = await call(&#39;发货接口是哪个&#39;);
    expect(r5.data?.type).toBe(&#39;api_call&#39;);
    const r6 = await call(&#39;怎么发货&#39;);
    expect(r6.data?.type).toBe(&#39;general&#39;);
    const r7 = await call(&#39;获取商品详情&#39;);
    expect(r7.data?.type).toBe(&#39;api_call&#39;);
    const r8 = await call(&#39;dop/api/v1/invoice/cancel_pick_up&#39;);
    expect(r8.data?.type).toBe(&#39;api_call&#39;);
    const r9 = await call(&#39;开票处理&#39;);
    expect(r9.data?.type).toBe(&#39;api_call&#39;);
    const r10 = await call(&#39;权限包&#39;);
    expect(r10.data?.type).toBe(&#39;api_call&#39;);
  });

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;数据预处理与向量库的准备工作&lt;/h2&gt; 
&lt;p&gt;RAG 应用的知识库准备是实施过程中的关键环节，涉及多个步骤和技术。以下是知识库准备的主要过程：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;知识库选择：&lt;/strong&gt;【全面性与质量】数据源的信息准确性在 RAG 应用中最为重要，基于错误的信息将无法获得正确的回答。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;知识库收集：&lt;/strong&gt;【多类目数据】数据收集通常涉及从多个来源提取信息，包括不同的渠道，不同的格式等。如何确保数据最终可以形成统一的结构并被统一消费至关重要。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;数据清理：&lt;/strong&gt;【降低额外干扰】原始数据往往包含不相关的信息或重复内容。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;知识库分割：&lt;/strong&gt;【降低成本与噪音】将文档内容进行分块，以便更好地进行向量化处理。每个文本块应适当大小，并加以关联，以确保在检索时能够提供准确的信息，同时避免生成噪声。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;向量化存储：&lt;/strong&gt;【Embedding 生成】使用 Embedding 模型将文本块转换为向量表示，这些向量随后被存储在向量数据库中，以支持快速检索。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;检索接口构建：&lt;/strong&gt;【提高信息准确性】构建检索模块，使其能够根据用户查询从向量数据库中检索相关文档。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;知识库拆分&lt;/h3&gt; 
&lt;p&gt;知识库文档的拆分颗粒度（Split Chunk Size) 是影响 RAG 应用准确性的重要指标：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;拆分颗粒度过大可能导致检索到的文本块包含大量不相关信息，从而降低检索的准确性。&lt;/li&gt; 
 &lt;li&gt;拆分颗粒度过小则可能导致必要的上下文信息丢失，使得生成的回答缺乏连贯性和深度。&lt;/li&gt; 
 &lt;li&gt;在实际应用中，需要不断进行实验以确定最佳分块大小。通常情况下，128 字节大小的分块是一个合适的分割大小。&lt;/li&gt; 
 &lt;li&gt;同时还要考虑 LLM 的输入长度带来的成本问题。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下图为得物开放平台【开票取消预约上门取件】接口的接口文档：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//16eacd688ddb948d7b5c938ff215c7f3.jpg&quot; alt=&quot;接口文档.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt; &lt;em&gt;开票取消预约上门取件接口信息&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;拆分逻辑分析&lt;/strong&gt;（根据理论提供 128 字节大小）&lt;/p&gt; 
&lt;p&gt;在成功获取到对应文本数据后，我们需要在数据的预处理阶段，将文档根据分类进行切分。这一步将会将一份文档拆分为多份文档。&lt;/p&gt; 
&lt;p&gt;由上图中信息可见，一个文档的基础结构是由一级、二级标题进行分割分类的。一个基本的接口信息包括：基础信息、请求地址、公共参数、请求入参、请求出参、返回参数以及错误码信息组成。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;拆分方式&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;拆分的实现一般有 2 种，&lt;strong&gt;一是根据固定的文档大小进行拆分（128 字节）二是根据实际文档结构自己做原子化拆分。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;直接根据文档大小拆分的优点当然是文档的拆分处理逻辑会直接且简单粗暴，缺点就是因为是完全根据字节数进行分割，一段完整的句子或者段落会被拆分成 2 半从而丢失语义（但可通过页码进行链接解决）。&lt;/p&gt; 
&lt;p&gt;根据文档做结构化拆分的优点是上下文结构容易连接，单个原子文档依旧具备语义化，检索时可以有效提取到信息，缺点是拆分逻辑复杂具备定制性，拆分逻辑难以与其他知识库复用，且多个文档之间缺乏一定的关联性（但可通过元信息关联解决）。&lt;/p&gt; 
&lt;p&gt;在得物开放平台的场景中，**因为文档数据大多以 json 为主（例如 api 表格中每个字段的名称、默认值、描述等），将这些 json 根据大小做暴力切分丢失了绝大部分的语义，难以让 LLM 理解。**所以，我们选择了第二种拆分方式。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;拆分实现&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在文档分割层面，Markdown 作为一种 LLM 可识别且可承载文档元信息的文本格式，作为向量数据的基础元子单位最为合适。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//67bbe8b4867640db1c99e2c7cbd3f3d7.jpg&quot; alt=&quot;拆分实现.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 基础的文档单元根据大标题进行文档分割，同时提供 frontmatter 作为多个向量之间连接的媒介。&lt;/p&gt; 
&lt;p&gt;正文层面，开放平台的 API 文档很适合使用 Markdown Table 来做内容承接，且 Table 对于大模型更便于理解。&lt;/p&gt; 
&lt;p&gt;根据以上这种结构，我们可得到以下拆分流程：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//a78df68d078e947534d5032e01d24449.jpg&quot; alt=&quot;拆分流程.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;代码实现：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt; const hbsTemplate = `
---
服务 ID (serviceId): {{ service.id }}
接口 ID (apiId): {{ apiId }}
接口名称 (apiName): {{ apiName }}
接口地址 (apiUrl): {{ apiUrl }}
页面地址 (pageUrl): {{ pageUrl }}
---

# {{ title }}

{{ paragraph }}
`;
export const processIntoEmbeddings = (data: CombinedApiDoc) =&amp;gt; {
  const template = baseTemplate(data);

  const texts = [
    template(requestHeader(data)),
    template(requestUrl(data)),
    template(publicRequestParam(data)),
    template(requestParam(data)),
    template(responseParam(data)),
    template(errorCodes(data)),
    template(authPackage(data)),
  ].filter(Boolean) as string[][];

  return flattenDeep(texts).map((content) =&amp;gt; {
    return new Document&amp;lt;MetaData&amp;gt;({
      // id: toString(data.apiId!),
      metadata: {
        serviceId: data.service.id,
        apiId: data.apiId!,
        apiName: data.apiName!,
        apiUrl: data.apiUrl!,
        pageUrl: data.pageUrl!,
      },
      pageContent: content!,
    });
  });
};

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;知识库导入&lt;/h3&gt; 
&lt;p&gt;通过建立定时任务（DJOB），使用 MILVUS sdk 将以上拆分后的文档导入对应数据集中。&lt;/p&gt; 
&lt;h2&gt;CO-STAR 结构&lt;/h2&gt; 
&lt;p&gt;在上文中的 Prompt，使用了一种名为 CO-STAR 的结构化模板，该框架由新加坡政府科技局的数据科学与 AI 团队创立。&lt;strong&gt;CO-STAR 框架是一种用于设计 Prompt 的结构化模板，旨在提高大型语言模型（LLM）响应的相关性和有效性，考虑了多种影响 LLM 输出的关键因素。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;结构：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;上下文（Context）： 提供与任务相关的背景信息，帮助 LLM 理解讨论的具体场景，确保其响应具有相关性。&lt;/li&gt; 
 &lt;li&gt;目标（Objective）： 明确你希望 LLM 执行的具体任务。清晰的目标有助于模型聚焦于完成特定的请求，从而提高输出的准确性。&lt;/li&gt; 
 &lt;li&gt;风格（Style）： 指定希望 LLM 采用的写作风格。这可以是某位名人的风格或特定职业专家的表达方式，甚至要求 LLM 不返回任何语气相关文字，确保输出符合要求。&lt;/li&gt; 
 &lt;li&gt;语气（Tone）： 设定返回的情感或态度，例如正式、幽默或友善。这一部分确保模型输出在情感上与用户期望相符。&lt;/li&gt; 
 &lt;li&gt;受众（Audience）： 确定响应的目标受众。根据受众的不同背景和知识水平调整 LLM 的输出，使其更加适合特定人群。&lt;/li&gt; 
 &lt;li&gt;响应（Response）： 规定输出格式，以确保 LLM 生成符合后续使用需求的数据格式，如列表、JSON 或专业报告等。这有助于在实际应用中更好地处理 LLM 的输出。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在上文结构化的实现中，演示了如何使用 CO-STAR 结构的 Prompt，要求大模型&quot;冰冷的&quot;对用户提问进行的解析，当然 CO-STAR 也适用于直接面向用户的问答，例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;## Context
我是一名正在寻找酒店信息的旅行者，计划在即将到来的假期前往某个城市。我希望了解关于酒店的设施、价格和预订流程等信息。

## Objective
请提供我所需的酒店信息，包括房间类型、价格范围、可用设施以及如何进行预订。

## Style
请以简洁明了的方式回答，确保信息易于理解。

## Tone
使用友好和热情的语气，给人一种欢迎的感觉。

## Audience
目标受众是普通旅行者，他们可能对酒店行业不太熟悉。

## Response
请以列表形式呈现每个酒店的信息，包括名称、地址、房间类型、价格和联系方式。每个酒店的信息应简短且直接，便于快速浏览。
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;相似性搜索&lt;/h2&gt; 
&lt;p&gt;当我们使用了问题结构化 Runnable 后，非开放平台类问题将会提前终止，告知用户无法解答相关问题，其他有效回答将会进入相似性搜索环节。&lt;/p&gt; 
&lt;p&gt;相似性搜索基于数据之间的相似性度量，通过计算数据项之间的相似度来实现检索。在答疑助手的相似性实现是通过余弦相似度来进行相似性判断的。&lt;/p&gt; 
&lt;p&gt;我们将用户的提问，与向量数据库中数据进行余弦相似度匹配。取 K 为 5 获取最相似的五条记录。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;注意：此 K 值是经过一系列的推断最终决定的，可根据实际情况调整。&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import { Milvus } from &#39;@langchain/community/vectorstores/milvus&#39;;
import { OpenAIEmbeddings } from &#39;@langchain/openai&#39;;
import { RunnableSequence } from &#39;@langchain/core/runnables&#39;;
import { getLLMConfig } from &#39;src/utils/llm/get-llm-config&#39;;

export const $getContext = async () =&amp;gt; {
  const embeddings = new OpenAIEmbeddings(
    getLLMConfig().OpenAIEmbeddingsConfig,
  );

  const vectorStore = await Milvus.fromExistingCollection(embeddings, {
    collectionName: &#39;open_rag&#39;,
  });

  return RunnableSequence.from([
    (input) =&amp;gt; {
      return input.question;
    },
    vectorStore.asRetriever(5),
  ]);
};

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;此 Runnable 会将搜索结果组成一大段可参考数据集，用于后续用户提问。&lt;/p&gt; 
&lt;h2&gt;用户提问解答&lt;/h2&gt; 
&lt;p&gt;用户提问的解答同样通过 Runnable 的方式来承接，通过用户提问、结构化数据、提取的相似性上下文进行结合，最终得到问题的解答。&lt;/p&gt; 
&lt;p&gt;我们先将上下文进行格式化整理：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import { RunnablePassthrough, RunnablePick } from &#39;@langchain/core/runnables&#39;;
import { Document } from &#39;langchain/document&#39;;
import { PromptTemplate } from &#39;@langchain/core/prompts&#39;;
import { MetaData } from &#39;src/types&#39;;

const $formatRetrieverOutput = async (documents: Document&amp;lt;MetaData&amp;gt;[]) =&amp;gt; {
  const strings = documents.map(async (o) =&amp;gt; {
    const a = await PromptTemplate.fromTemplate(`{pageContent}`).format({
      pageContent: o.pageContent,
    });

    return a;
  });

  const context = (await Promise.all(strings)).join(&#39;\n&#39;);

  return context;
};

export const $contextAssignRunnable = () =&amp;gt; {
  return RunnablePassthrough.assign({
    context: new RunnablePick(&#39;context&#39;).pipe($formatRetrieverOutput),
  });
};

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;问答整体 Prompt 实现：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;export const promptTemplateMarkdown = () =&amp;gt; {
  return `
# CONTEXT

得物的开放平台是一个包含着 API 文档，解决方案文档的平台，商家可以通过这个平台获取到得物的各种接口，以及解决方案，帮助商家更好的使用得物的服务。
现在得物开放平台的人工答疑率相当高，原因可能是文档的信息藏的较深，我希望做一个人工智能答疑助手，通过分析开放平台的各种文档，来回答用户的问题，最终让用户不进入人工答疑阶段。
我们只讨论[开放平台接口]的相关问题,不要谈及其他内容。

# OBJECTIVE
你需要根据用户的输入，以及提供的得物开放平台的文档上下文，进行答疑。
你只接受有关[开放平台接口]的相关问答，不接受其余任何问题。

## 关于用户的输入：

1. 你会得到一份符合 JSONSchema 结构的结构化数据，这份数据我会使用\`&amp;lt;structured-input&amp;gt;&amp;lt;/structured-input&amp;gt;\`包裹。
   这份结构化数据是通过实际的用户提问进行了二次分析而得出的。结构化数据里也会包含用户的最初始的问题供你参考（最初始的问题会放在 question 字段里）

## 关于上下文

1.  我已经提前准备好了你需要参考的资料，作为你回答问题的上下文，上下文是由许多篇 Markdown 文档组成的。这些 Markdown 的文档大标题代表了这个片段的模块名，例如 \`# 接口入参\`就代表这部分是文档的接口入参部分， \`# 接口返回\`就代表这部分是文档的接口返回部分，
2.  上下文中的主要信息部分我会使用 Markdown Table 的结构提供给你。
3.  每个上下文的开头，我都会给你一些关于这份上下文的元信息（使用 FrontMatter 结构），这个元信息代表了这份文档的基础信息，例如文档的页面地址，接口的名称等等。

以下是我提供的结构化输入，我会使用\`&amp;lt;structured-input&amp;gt;&amp;lt;/structured-input&amp;gt;\`标签做包裹
&amp;lt;structured-input&amp;gt;
{structuredInput}
&amp;lt;/structured-input&amp;gt;

以下是我为你提供的参考资料，我会使用\`&amp;lt;context&amp;gt;&amp;lt;/context&amp;gt;\`标签包裹起来：
&amp;lt;context&amp;gt;
{context}
&amp;lt;/context&amp;gt;

# STYLE

你需要把你的回答以特定的 JSON 格式返回

# TONE

你是一个人工智能答疑助手，你的回答需要温柔甜美，但又不失严谨。对用户充满了敬畏之心，服务态度要好。在你回答问题之前，需要简单介绍一下自己，例如&quot;您好，很高兴为您服务。已经收到您的问题。&quot;

# AUDIENCE

你的用户是得物开放平台的开发者们，他们是你要服务的对象。

# RESPONSE

你返回的数据结构必须符合我提供的 JSON Schema 规范，我给你的 Schema 将会使用\`&amp;lt;structured-output-schema&amp;gt;&amp;lt;/structured-output-schema&amp;gt;\`标签包裹.

&amp;lt;structured-output-schema&amp;gt;
  {strcuturedOutputSchema}
&amp;lt;/structured-output-schema&amp;gt;
`;
};

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;以上问答通过 CO-STAR 结构，从 6 个方面完全限定了答疑助手的回答腔调以及问答范畴，我们现在只需要准备相应的数据结构提供给这份 Prompt 模板。&lt;/p&gt; 
&lt;h3&gt;问答结果结构化&lt;/h3&gt; 
&lt;p&gt;在开放平台答疑助手的场景下，我们不仅要正面回答用户的问题，同时还需要给出相应的可阅读链接。结构如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import { z } from &#39;zod&#39;;

const zOutputSchema = z
  .object({
    question: z
      .string()
      .describe(
        &#39;提炼后的用户提问。此处的问题指的是除去用户提供的接口信息外的问题。尽量多的引用用户的提问&#39;,
      ),
    introduction: z
      .string()
      .describe(&#39;开放平台智能答疑助手对用户的问候以及自我介绍&#39;),
    answer: z
      .array(z.string())
      .describe(
        &#39;开放平台智能答疑助手的回答，需将问题按步骤拆分，形成数组结构，回答拆分尽量步骤越少越好。如果回答的问题涉及到具体的页面地址引用，则将页面地址放在 relatedUrl 字段里。不需要在 answer 里给出具体的页面地址&#39;,
      ),
    relatedUrl: z
      .array(z.string())
      .describe(
        &#39;页面的链接地址，取自上下文的 pageUrl 字段，若涉及多个文档，则给出所有的 pageUrl，若没有 pageUrl，则不要返回&#39;,
      )
      .optional(),
  })
  .required({
    question: true,
    introduction: true,
    answer: true,
  });

type OpenRagOutputType = z.infer&amp;lt;typeof zOutputSchema&amp;gt;;

export { zOutputSchema, type OpenRagOutputType };

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在我们之前的设计中，我们的每一份向量数据的头部，均带有相应的文档 meta 信息，通过这种向量设计，我们可以很容易的推算出可阅读链接。同时，我们在这份 zod schema 中提供了很详细的 description，来限定机器人的回答可以有效的提取相应信息。&lt;/p&gt; 
&lt;h2&gt;Runnable 的结合&lt;/h2&gt; 
&lt;p&gt;在用户提问解答这个 Runnable 中，我们需要结合 Retriever, 上下文，用户提问，用户输出限定这几部分进行组合。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import { ChatOpenAI } from &#39;@langchain/openai&#39;;
import { $getPrompt } from &#39;./prompt/index&#39;;
import { JsonOutputParser } from &#39;@langchain/core/output_parsers&#39;;
import { RunnableSequence, RunnableMap } from &#39;@langchain/core/runnables&#39;;
import { zOutputSchema } from &#39;./schema&#39;;
import { $getContext } from &#39;./retriever/index&#39;;
import { getLLMConfig } from &#39;src/utils/llm/get-llm-config&#39;;
import { getStringifiedJsonSchema } from &#39;src/utils/llm/get-stringified-json-schema&#39;;
import { n } from &#39;src/utils/llm/gen-runnable-name&#39;;

const b = n(&#39;$open-rag&#39;);

type OpenRagInput = {
  structuredInput: string;
  question: string;
};

const $getOpenRag = async () =&amp;gt; {
  const $model = new ChatOpenAI(getLLMConfig().ChatOpenAIConfig).bind({
    response_format: {
      type: &#39;json_object&#39;,
    },
  });

  const chain = RunnableSequence.from([
    RunnableMap.from&amp;lt;OpenRagInput&amp;gt;({
      // 问答上下文
      context: await $getContext(),
      // 结构化输入
      structuredInput: (input) =&amp;gt; input.structuredInput,
      // 用户提问
      question: (input) =&amp;gt; input.question,
      // 输出结构
      strcuturedOutputSchema: () =&amp;gt; getStringifiedJsonSchema(zOutputSchema),
    }).bind({ runName: b(&#39;runnable-map&#39;) }),
    $getPrompt().bind({ runName: b(&#39;prompt&#39;) }),
    $model,
    new JsonOutputParser(),
  ]).bind({ runName: b(&#39;chain&#39;) });

  return chain;
};

export { $getOpenRag };

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;流程串联&lt;/h2&gt; 
&lt;p&gt;通过上文的几大部分，我们已经将，用户提问、结构化解析、相似性搜索、问答上下文，问答 Prompt 模板以及结构化输出这几部分实现完成。&lt;/p&gt; 
&lt;p&gt;现在可以通过 LangChain 的 Runnable 能力进行流程串联。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;const structure = safeJsonParse&amp;lt;StructuredInputType&amp;gt;(
  await $getStructuredInput().invoke({ question }),
  null,
)
const mainChain = RunnableSequence.from&amp;lt;{ question: string }, OpenRagOutputType&amp;gt;([
  RunnablePassthrough.assign({
    structuredInput: () =&amp;gt; structure,
  }),
  await $getOpenRag(),
]);
const response = await mainChain.invoke({
  question: question,
});

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;串联流程如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//2b421b5c8f303158f6231418ebf2ca33.jpg&quot; alt=&quot;串联流程.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;返回结果示例：&lt;/p&gt; 
&lt;p&gt;输入：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;{
  &quot;question&quot;: &quot;正式环境调用：直发订单获取打印面单 v2【品牌直发/众筹直发/拍卖直发】接口返回报错（https://openapi.dewu.com/dop/api/v2/order/brand_deliver/express_sheet）。请求参数：{\&quot;order_no\&quot;:\&quot;110152014363632294\&quot;,\&quot;app_key\&quot;:\&quot;953a43bec40943c98a5cdbc63333242f;\&quot;,\&quot;sign\&quot;:\&quot;AD968ED6A359D144B61F1FEF6BB380ED\&quot;,\&quot;timestamp\&quot;:1720430064169}&quot;
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;输出：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;{
  &quot;question&quot;: &quot;我的问题是：正式环境调用：直发订单获取打印面单 v2【品牌直发/众筹直发/拍卖直发】接口返回报错。&quot;,
  &quot;introduction&quot;: &quot;您好，很高兴为您服务。已经收到您的问题。&quot;,
  &quot;answer&quot;: [
    &quot;根据您提供的请求参数信息，出现错误可能是由于接口调用参数不正确导致的，接下来我们一步步排查问题。&quot;,
    &quot;首先，您提供的请求参数中的订单号为\&quot;110152014363632294\&quot;，请确认该订单号的状态是否为待物流揽收或待买家收货状态。&quot;,
    &quot;其次，检查您所使用的 app_key 是否正确，确保该 app_key 授权了调用该接口的权限。&quot;,
    &quot;再次，请确认传入的签名（sign）是否正确，可能需要重新生成签名以保证准确性。&quot;,
    &quot;最后，检查时间戳（timestamp）是否正确，并且处于合理的时间范围内。&quot;,
    &quot;如果以上步骤都没有解决问题，建议您查看详细的接口文档以进一步调试和解决问题。&quot;
  ],
  &quot;relatedUrl&quot;: [
    &quot;https://open.dewu.com/#/api?apiId=1174&quot;
  ]
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;五、应用调试&lt;/h1&gt; 
&lt;p&gt;基于大模型应用可能设计到多个 Runnable 的多次调用，借用 LangSmith 的 trace 功能，我们可以对每一个 Runnable 进行出入参的 debug。&lt;/p&gt; 
&lt;p&gt;关于 LangSmith 的接入：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//c4d0929ecd9aa09dc87767366d0d0310.jpg&quot; alt=&quot;Langsmith.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;六、未来展望&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//1d5ae777a2c6e355af5f2c03284c0542.gif&quot; alt=&quot;未来展望.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt; RAG 在减少模型幻觉，无需模型训练就可享受内容时效性的特点在此类答疑应用中展露无遗，RAG 应用开放平台落地从一定程度上验证了依赖可靠知识库的答疑场景具备可执行性，还为内部系统的应用提供了有力的参考。在实际应用中，除了直接解决用户的提问外，通过回放用户提问的过程，可以为产品和业务的发展提供重要的洞察。&lt;/p&gt; 
&lt;p&gt;面向未来，是否可以尝试将答疑助手的形式在内部系统落地，在内部建立知识库体系，将部分问题前置给大模型处理，降低 TS 和开发介入答疑的成本。&lt;/p&gt; 
&lt;p&gt;文 / 惑普&lt;/p&gt; 
&lt;p&gt;关注得物技术，每周更新技术干货&lt;/p&gt; 
&lt;p&gt;要是觉得文章对你有帮助的话，欢迎评论转发点赞～&lt;/p&gt; 
&lt;p&gt;未经得物技术许可严禁转载，否则依法追究法律责任。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/5783135/blog/17101439</link>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/17101439</guid>
            <pubDate>Mon, 06 Jan 2025 08:48:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>英国政府公布「人工智能机遇行动计划」，拟将公共计算能力提高 20 倍</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;英国政府 13 日公布「人工智能机遇行动计划」，旨在大力推广人工智能，以促进经济增长、创造就业机会并提升公共服务水平。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;这项计划指出，人工智能的能力正以惊人的速度发展，照这一趋势，人工智能将成为英国政府实现推动经济增长等重要使命的主要动力。根据计划，英国政府将与世界领先的人工智能公司、顶尖的英国学者和企业家，以及希望在英国开拓业务的相关人才密切合作，在共享经济繁荣、改善公共服务和增加个人机会的原则上塑造人工智能革命。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;这项计划涵盖多个领域，涉及促进经济增长和提高公共服务水平等。计划还包括建立多个「人工智能增长区」，以促进人工智能数据中心建设；将公共计算能力提高 20 倍；创建新的国家数据库，以安全可靠地释放公共数据价值；成立专门的人工智能能源委员会等措施。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;英国首相斯塔默当天在一份公报中表示，人工智能将给英国带来巨大变化。政府出台这项新计划将推动英国成为人工智能领域的领导者。它将促进人工智能相关产业的基础设施建设，为英国带来更多就业机会和投资，并改善公共服务。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;英国科学、创新和技术大臣彼得·凯尔在这项计划的序言中表示，如今英国是全球第三大人工智能市场，但仍有落后风险。希望英国在人工智能的下一个发展阶段能塑造人工智能革命，而不是等待被其塑造。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;英国政府网站介绍，目前已有三家大型科技公司承诺在英国投资 140 亿英镑建设人工智能基础设施，并在英国创造超过 1.3 万个就业岗位。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329660</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329660</guid>
            <pubDate>Mon, 06 Jan 2025 07:15:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Linus 变身「手工林」——将亲自打造一套吉他效果器踏板赠送给内核开发者</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Linus 表示，我是软件工程师，也略懂焊接技术，愿意亲手制作一个吉他效果器踏板赠送给一名幸运的内核贡献者&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;这个假期，Linus 的心情看起来相当不错，因为 Linux 开发团队已经完成了 Linux 内核 6.13 候选版 rc7，最终的稳定版将于下周发布。&lt;/p&gt; 
&lt;p&gt;近日，Linus 在每周发布的关于 Linux 内核开发进度的公告中写道：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;本周开始时看起来有点平静，但随后事情多了起来。&lt;/p&gt; 
 &lt;p&gt;在经历了两个平静的假期周之后，我们恢复了原本的开发效率。&lt;/p&gt; 
 &lt;p&gt;这个 rc7 比正常情况下稍大，但考虑到时间因素，它与我预期的差不多，没有什么特别之处。&lt;/p&gt; 
 &lt;p&gt;因此，除非下周发生什么奇怪的事情，否则下周我将按照正常计划发布最终的 6.13 正式版本。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Linus 在邮件中用温暖的语气描述了他最喜欢的假日爱好 —— 制作乐高积木，同时补充道，他一直喜欢 DIY 制作一些吉他踏板套件，这是他今年越来越喜欢的事情。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0114/150734_f8e2_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;因此，他愿意为一位幸运的 Linux 内核开发者制作一个&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#060607&quot;&gt;Guitar pedals（吉他效果器踏板）&lt;/span&gt;&lt;/strong&gt;，这样 Linus 就有理由为自己新发掘的爱好继续投入时间和金钱了。&lt;/p&gt; 
&lt;p&gt;他写道：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;对我来说，传统节日活动往往是做一两件乐高积木，因为这通常是圣诞节和生日礼物的一部分。&lt;/p&gt; 
 &lt;p&gt;但除了乐高积木，今年我还做了个吉他踏板套件（&quot;大人用烙铁做的乐高&quot;）。 不是因为我弹吉他，而是因为我喜欢手工捣鼓东西的感觉……&lt;/p&gt; 
 &lt;p&gt;我做了很多，但我真正喜欢做的套件来自 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faionfx.com%2Fproject-type%2Fkit%2F&quot; target=&quot;_blank&quot;&gt;Aion FX&lt;/a&gt;。&lt;/p&gt; 
 &lt;p&gt;既然我想有借口继续做这些工作，又因为我实际上对制作出来的踏板没有任何用途（我已经把一些踏板卖给了不知情的「受害者」朋友们），我决定看看是否有「倒霉」的内核开发者想要一个。&lt;/p&gt; 
 &lt;p&gt;所有我决定，如果有任何内核开发者（&lt;em&gt;定义是「在我的内核 Git 树中自 2024 年以来有 commit 记录的开发者」&lt;/em&gt;）觉得他们的生活中真的需要一个由我亲手打造的吉他踏板，请给我发一封电子邮件（发件人为 git 树中的那个邮箱地址），主题是 &quot;我想要一个吉他踏板&quot;。&lt;br&gt; ......&lt;/p&gt; 
 &lt;p&gt;下周，我会随机挑选一名内核贡献者（假设真的有人想要），然后自费买下那个套件，用我自己颤抖的小手指制作它，并通过美国邮政服务寄给「受害者」。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flkml.iu.edu%2Fhypermail%2Flinux%2Fkernel%2F2501.1%2F06189.html&quot; target=&quot;_blank&quot;&gt;详情查看 Linux 内核邮件列表&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329653/linus-torvalds-guitar-pedal-offer</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329653/linus-torvalds-guitar-pedal-offer</guid>
            <pubDate>Mon, 06 Jan 2025 07:03:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>开源云操作系统 Sealos 开发商「环界云计算」获阿里云战略投资</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;据 36 氪&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F36kr.com%2Fp%2F3121978699698434&quot; target=&quot;_blank&quot;&gt;报道&lt;/a&gt;&lt;/u&gt;，珠海环界云计算有限公司（以下简称「环界云计算」）近日宣布完成 3750 万元的 Pre-A 融资，由阿里云独家投资。&lt;/p&gt; 
&lt;p&gt;在此之前，环界云计算曾累计获得三轮融资。其中天使轮融资由奇绩创坛领投，清华信息学院院⻓李军、科⼤微电⼦教授康⼀跟投。&lt;/p&gt; 
&lt;p&gt;环界云计算成立于 2022 年 3 月，其核心产品 Sealos 是一款以 kubernetes 为内核的云操作系统；另外该公司还有知名开源项目&lt;a href=&quot;https://www.oschina.net/p/fastgpt&quot; target=&quot;_blank&quot;&gt;FastGPT&lt;/a&gt;，是一款 AI 知识库产品。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1818&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0114/142300_QxNg_2720166.png&quot; width=&quot;2622&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsealos.run%2F&quot; target=&quot;_blank&quot;&gt;https://sealos.run/&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;阅读更多&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://my.oschina.net/u/6852546/blog/10758980&quot; target=&quot;news&quot;&gt;Sealos：在公有云和私有云之间，我选择第三条路&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329646</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329646</guid>
            <pubDate>Mon, 06 Jan 2025 06:24:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>积木报表 JimuReport 5 年发展，用户数突破 400 万，成为报表领域的佼佼者</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;积木报表 JimuReport：5 年发展，用户数突破 400 万，成为开源报表领域的佼佼者&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;在数据驱动的时代，企业对数据可视化和报表工具的需求日益增长。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;作为国内一款备受关注的开源报表工具，&lt;strong&gt;积木报表（JimuReport）&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;自 2020 年 11 月 2 日发布首个版本以来，凭借其零代码、易用性和强大的功能，迅速在市场中占据了一席之地。历经 5 年的发展，JimuReport 已经成长为许多企业和开发者的首选工具。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;那么，这款开源报表工具目前究竟有多少用户？它的发展历程和现状如何？本文将为您详细解读。&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;一、积木报表（JimuReport）项目介绍&lt;/h2&gt; 
&lt;h3&gt;1. 项目背景&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;积木报表（JimuReport）是一款专注于数据可视化和报表设计的开源工具，由国内 JEECG 团队开发并维护。其核心理念是 「简单、易用、专业」，旨在帮助企业快速构建复杂的报表、大屏和仪表盘，降低开发成本，提升数据分析效率。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-bfec91d2704578da7536e722a0dcee549b0.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;2. 核心功能&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;零代码设计&lt;/strong&gt;：通过拖拽式操作，用户无需编程即可完成报表和大屏设计。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;类 Excel 操作&lt;/strong&gt;：提供类似 Excel 的操作界面，支持复杂报表设计。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;大屏设计&lt;/strong&gt;：支持类 Word 风格的大屏设计，用户可以自由拖动组件，设计出炫酷的数据大屏。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;多端支持&lt;/strong&gt;：从 v1.9+ 开始，支持仪表盘、大屏、门户和移动端的一体化设计。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;数据可视化&lt;/strong&gt;：支持多种图表类型（柱状图、折线图、饼图、地图等）和动态效果。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. 开源与免费&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;JimuReport 采用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;功能免费、代码不开放&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;的开源协议，用户可以免费使用其全部功能，并支持商业用途。&lt;/li&gt; 
 &lt;li&gt;这种模式降低了用户的使用门槛，尤其适合中小企业和个人开发者。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;4. 适用场景&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;企业报表&lt;/strong&gt;：财务报表、销售报表、库存报表等。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;数据大屏&lt;/strong&gt;：业务监控大屏、实时数据展示大屏。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;仪表盘&lt;/strong&gt;：业务分析仪表盘、KPI 监控仪表盘。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;门户设计&lt;/strong&gt;：企业门户、数据门户。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;5. 效果图&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-376340bf61cb54c3833567da653bef1a2d9.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8e989813e945d5e4c27fba7c1a65c980288.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-02ef801cf1e91bd51a3817b4c891885ddcc.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5804404d2f0ee00aa30b0d306a95d7b8921.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e1a683223788b8e43104e855a32077dbb82.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-77c2870cbf92a6b2bb5f35c23f3fc0cc4a0.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;二、历经 5 年发展，JimuReport 的用户数有多少？&lt;/h2&gt; 
&lt;h3&gt;1. 用户规模估算&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;根据 JimuReport 官方提供的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;百度统计&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;数据，其每日访问量（PV）为 196,866，独立访客数（UV）为 24,766，独立 IP 数为 17,143。基于这些数据，我们可以对 JimuReport 的用户规模进行初步估算：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;日活跃用户数（DAU）&lt;/strong&gt;：约&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;35,380&lt;/strong&gt;（考虑到年末访问量较低和很多项目内网隔离，实际 UV 可能更高）。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;月活跃用户数（MAU）&lt;/strong&gt;：假设每日 UV 的 10 倍，约为&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;35.4 万&lt;/strong&gt;。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;年活跃用户数（YAU）&lt;/strong&gt;：假设每月活跃用户的 12 倍，约为&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;424.8 万&lt;/strong&gt;。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. 项目数估算&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;假设 50% 的月活跃用户创建了项目，每个用户平均创建 1-2 个项目。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;项目数&lt;/strong&gt;：约&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;17.7 万&lt;/strong&gt;。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. 用户分布&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;中小企业&lt;/strong&gt;：JimuReport 的免费模式和易用性使其在中小企业中广受欢迎。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;个人开发者&lt;/strong&gt;：零代码设计和丰富的功能吸引了大量个人开发者。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;教育机构&lt;/strong&gt;：部分高校和教育机构使用 JimuReport 进行数据可视化教学。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;三、JimuReport 的发展历程&lt;/h2&gt; 
&lt;h3&gt;1. 2020 年 11 月 2 日：首个版本发布&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;JimuReport 正式发布首个版本，初期以开源报表工具为核心，专注于解决企业报表难题。&lt;/li&gt; 
 &lt;li&gt;首个版本推出后，迅速吸引了大量中小企业和个人开发者的关注。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. 2021 年：功能完善&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;推出类 Excel 的报表设计器和类 Word 的大屏设计器，支持拖拽式操作。&lt;/li&gt; 
 &lt;li&gt;用户数量开始快速增长，尤其是在中小企业市场中。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. 2022 年：多端支持&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;从 v1.9+ 开始，推出 JimuBI 产品，支持仪表盘、大屏、门户和移动端的一体化设计。&lt;/li&gt; 
 &lt;li&gt;用户规模突破 10 万。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;4. 2023 年：社区壮大&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;JimuReport 的社区逐渐壮大，GitHub 和官网论坛的活跃度显著提升。&lt;/li&gt; 
 &lt;li&gt;用户数量突破 50 万。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;5. 2024 年：持续增长&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;用户数量持续增长，年活跃用户数接近 424.8 万。&lt;/li&gt; 
 &lt;li&gt;在数据可视化领域的影响力进一步提升，成为国内开源报表工具的代表之一。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;四、JimuReport 的未来展望&lt;/h2&gt; 
&lt;h3&gt;1. 功能升级&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;继续优化报表设计和大屏设计功能，提升用户体验。&lt;/li&gt; 
 &lt;li&gt;引入更多智能分析功能，帮助用户更好地挖掘数据价值。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. 生态建设&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;加强社区建设，吸引更多开发者和企业参与。&lt;/li&gt; 
 &lt;li&gt;推出更多插件和扩展，丰富 JimuReport 的生态系统。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. 国际化&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;拓展海外市场，将 JimuReport 推向全球用户。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;五、总结&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;自 2020 年 11 月 2 日发布首个版本以来，积木报表（JimuReport）在短短 5 年内实现了快速发展。其用户规模从最初的几千人增长到如今的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;424.8 万&lt;/strong&gt;，项目数也突破了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;17.7 万&lt;/strong&gt;。凭借其零代码、易用性和强大的功能，JimuReport 正在帮助越来越多的企业和开发者实现数据可视化，提升业务效率。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;未来，随着功能的不断升级和生态的持续完善，JimuReport 有望在数据可视化领域取得更大的成就。如果你正在寻找一款免费、易用且功能强大的报表工具，JimuReport 无疑是一个值得尝试的选择。&lt;/p&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;color: rgb(51, 51, 51); margin-left: 0px; margin-right: 0px; text-align: left;&quot;&gt;&lt;strong&gt;官网链接&lt;/strong&gt;:&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jimureport.com%2F&quot; target=&quot;_blank&quot;&gt;https://www.jimureport.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li style=&quot;color: rgb(51, 51, 51); margin-left: 0px; margin-right: 0px; text-align: left;&quot;&gt;&lt;strong&gt;GitHub 地址&lt;/strong&gt;:&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJimuReport%2FJimuReport&quot; target=&quot;_blank&quot;&gt;https://github.com/JimuReport/JimuReport&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329625</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329625</guid>
            <pubDate>Mon, 06 Jan 2025 03:31:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>Deno Land 称甲骨文拒绝放弃 JavaScript 商标</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;2024 年 11 月，Deno Land 曾向美国专利商标局 (USPTO) 提交了一份申请，&lt;a href=&quot;https://www.oschina.net/news/322147/deno-v-oracle-javascript-trademark&quot;&gt;要求&lt;/a&gt;取消甲骨文 (Oracle) 对 JavaScript 商标的所有权。并提出了三项主张：JavaScript 是通用的、Oracle 公司存在欺诈行为，以及 Oracle 已放弃使用该商标。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;近日， Deno Land 在 X 上发布了一篇&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fdeno_land%2Fstatus%2F1876728474666217739&quot; target=&quot;_blank&quot;&gt;帖子&lt;/a&gt;，介绍了关于该商标之争事件的最新进展。&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;#FreeJavaScript update：Oracle 公司已告知我们，他们不会主动撤回其 「JavaScript 」商标。下一步：他们将提交答辩状，我们将开始取证，以表明「JavaScript 」如何被广泛认为是一个通用术语，并且不受 Oracle 控制。&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img height=&quot;399&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a7b0c8946ded6dedb137aeb2b5ae4ba521e.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Deno Land 联合创始人、Deno 和 Node.js 运行时的创建者 Ryan Dahl &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.infoworld.com%2Farticle%2F3800955%2Foracle-refuses-to-yield-javascript-trademark-deno-land-says.html&quot; target=&quot;_blank&quot;&gt;表示&lt;/a&gt;，除非 Oracle 再次延长截止日期，否则 Oracle 预计将在 2 月 3 日之前给出正式答复。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「此后，我们将开始调查过程，真正的法律工作将从这里开始。看看 Oracle 如何反驳我们的主张将会很有趣 —— 通用名称侵权、对美国专利商标局的欺诈以及未使用该商标。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;法律程序将从 3 月 5 日之前的取证会议开始，9 月 1 日之前取证结束，10 月 16 日至 12 月 15 日进行审前披露。口头听证的选择性请求截止日期为 2026 年 7 月 8 日。总的来说，Oracle 和 Deno Land 之间的纠纷可能会持续相当长一段时间。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329615/oracle-refuses-yield-javascript-trademark</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329615/oracle-refuses-yield-javascript-trademark</guid>
            <pubDate>Mon, 06 Jan 2025 03:03:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
    </channel>
</rss>