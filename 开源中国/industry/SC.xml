<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - industry - 简体中文</title>
    <link>https://www.oschina.net/news/industry</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/industry" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 07 Jun 2025 16:41:00 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>ElevenLabs 新 TTS 模型支持音频标签丨日报</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-7a618e9a2e3343034299192287bbd4034c8.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;开发者朋友们大家好：&lt;/p&gt; 
&lt;p&gt;这里是 &lt;strong&gt;「RTE 开发者日报」&lt;/strong&gt; ，每天和大家一起看新闻、聊八卦。我们的社区编辑团队会整理分享 RTE（Real-Time Engagement） 领域内「有话题的 &lt;strong&gt;技术&lt;/strong&gt; 」、「有亮点的 &lt;strong&gt;产品&lt;/strong&gt; 」、「有思考的 &lt;strong&gt;文章&lt;/strong&gt; 」、「有态度的 &lt;strong&gt;观点&lt;/strong&gt; 」、「有看点的 &lt;strong&gt;活动&lt;/strong&gt; 」，但内容仅代表编辑的个人观点，欢迎大家留言、跟帖、讨论。&lt;/p&gt; 
&lt;p&gt;本期编辑：@赵怡岭、@鲍勃&lt;/p&gt; 
&lt;h2&gt;01 有话题的技术&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1、Bland TTS 推出突破性声音克隆技术，仅需 3-6 个语音样本即可完美复制说话风格&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Bland TTS 推出突破性声音克隆技术，仅需 3-6 个语音样本即可完美复制说话风格，并能根据文本内容自动调整情感表达。该技术颠覆传统 TTS 流水线模式，采用大语言模型直接预测「音频 Token」，实现语音风格控制、音效生成、语音混合和情绪理解四大核心功能：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;语音风格控制（Style Transfer）：&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;上下文学习： 模型能自动理解何为「兴奋」或「冷静」的语气；&lt;/p&gt; 
&lt;p&gt;标签控制： 可手动添加如或等标签精准控制语气；&lt;/p&gt; 
&lt;p&gt;低样本学习： 仅需 3-6 个语音样本，即可完美复制说话风格。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;音效生成（Sound Effects）：&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;生成各类音效： 从&amp;lt;dog_bark&amp;gt;（狗叫）到（笑声）；&lt;/p&gt; 
&lt;p&gt;自定义声音： 只要提供标注好的样本，它就能记住并重现；&lt;/p&gt; 
&lt;p&gt;混合应用： 可在对话中穿插各种音效，增强表现力。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;语音混合（Voice Blending）&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;声音融合： 提供多个声音样本，系统自动融合出新声音；&lt;/p&gt; 
&lt;p&gt;特征保留： 既保留原始声音的独特性，又确保输出连贯自然；&lt;/p&gt; 
&lt;p&gt;应用场景：包括品牌专属语音设计、多语种统一发声人、虚拟人物角色音色定制等。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;语音情绪理解（Emotionally Aware）&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;情境感知： 不再是机械「照字念」，而是理解文本情感；&lt;/p&gt; 
&lt;p&gt;适应性表达：技术内容表达更专业冷静；情感内容传递更温暖共情；问答互动更自然流畅。（@AIMCP、@腾讯研究院）&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2、肖像驱动框架 Playmate：趣丸研发新型人脸动画技术，声音+指令精准控制表情&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;趣丸科技团队提出了一种新颖的肖像驱动框架 Playmate，该算法能够根据音频和各种可选的控制条件生成高质量的肖像视频。通俗来讲，就是给定一张照片和一段音频，就可以生成对应的视频，同时还能精准控制人物的表情和头部姿态。相关研究成果已被人工智能顶会 ICML 2025 收录，项目代码开源计划正在筹备中。&lt;/p&gt; 
&lt;p&gt;Playmate 是一种由广州趣丸科技团队提出的基于 3D 隐式空间引导扩散模型的双阶段训练框架，旨在生成高质量且可控的肖像动画视频。该方法通过解耦面部属性（如表情、唇部动作和头部姿态），结合情绪控制模块，实现了对生成视频的精细控制。&lt;/p&gt; 
&lt;p&gt;Playmate 的核心思想是通过 3D 隐式空间解耦面部属性，并利用双阶段训练框架实现高质量生成。通过引入运动解耦模块和情感控制模块，该框架不仅能够生成高质量的动态视频，还能实现对情感和姿态的独立控制，从而为肖像动画的生成提供了更高的定制性和适应性。&lt;/p&gt; 
&lt;p&gt;论文标题：&lt;/p&gt; 
&lt;p&gt;Playmate: Flexible Control of Portrait Animation via 3D-Implicit Space Guided Diffusion&lt;/p&gt; 
&lt;p&gt;论文地址：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fpdf%2F2502.07203" target="_blank"&gt;https://arxiv.org/pdf/2502.07203&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;项目网站：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fplaymate111.github.io%2FPlaymate%2F" target="_blank"&gt;https://playmate111.github.io/Playmate/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;GitHub 地址：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FPlaymate111%2FPlaymate" target="_blank"&gt;https://github.com/Playmate111/Playmate&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;ICML 介绍：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaike.baidu.com%2Fitem%2FICML%2F14479665" target="_blank"&gt;https://baike.baidu.com/item/ICML/14479665&lt;/a&gt; （@机器之心）&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3、ElevenLabs 推出高表现力 TTS 模型 Eleven v3（alpha）：支持 70 多种语言、多说话人对话和音频标签&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;ElevenLabs 推出了全新一代文本转语音模型 Eleven v3（Alpha 版），这是目前表现力最强的 TTS 模型之一，支持 70 多种语言、多个角色间的自然对话，以及通过 [sad]、[whispers]、[laughs] 等音频标签精准控制语音情绪与非语言表达。&lt;/p&gt; 
&lt;p&gt;与旧版本相比，v3 拥有更强的文本理解能力，可以模拟真实对话中的中断、情感变化与语气调整。这使得它非常适合用于视频创作、有声书制作和媒体工具开发。&lt;/p&gt; 
&lt;p&gt;特点：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;支持 70+ 语言&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持，多角色对话&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持音频标签（如 [sad]、[laughs]、[whispers] 等）来控制情绪和表现力；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;v3 是研究预览版，需要更高水平的提示工程，但生成效果非常出色；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;新架构对文本理解更深，可实现更具表现力的语音；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;可模拟现实对话中的情感、打断、语气变化；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;即将开放 API 接口，支持创作者和开发者。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;官方介绍：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Felevenlabs.io%2Fv3" target="_blank"&gt;https://elevenlabs.io/v3&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;相关链接：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ft.co%2FRHi7prurqm" target="_blank"&gt;https://t.co/RHi7prurqm&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;（@elevenlabsio@X、@小互 AI）&lt;/p&gt; 
&lt;h2&gt;02 有亮点的产品&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1、NotebookLM 前创始产品经理新项目 Huxe 曝光：将邮件、日历、新闻转化为可互动音频&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-c18478661ab3f925af7a02331fdf67a6975.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Huxe 是一款由 NotebookLM 创始产品经理推出的个人音频陪伴产品，旨在将任何话题、想法或趋势实时转化为互动且个性化的播客内容。用户只需输入感兴趣的内容，Huxe 即可即时生成定制化的互动音频体验。它能够从电子邮件、日历及最新新闻中提取信息，创建智能语音概览，同时支持实时对话互动，随时跟进、深入探讨或切换话题。&lt;/p&gt; 
&lt;p&gt;具体功能：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;每日简报&lt;/strong&gt;：连接您的日历、电子邮件和兴趣领域，生成个性化的音频日程摘要；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;DeepCast&lt;/strong&gt;：输入任意主题或问题，例如「野兽派建筑简史」或「人们对最新 OpenAI 模型的看法」，即可获得为每位用户量身定制、深入研究的个性化音频体验；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;智能互动&lt;/strong&gt;：用户可随时提出问题或反馈，内容会实时调整，并根据用户反馈优化后续生成的内容；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;生成式用户界面&lt;/strong&gt;：提供与音频体验相辅相成的屏幕展示。用户在聆听时瞥一眼屏幕，即可看到根据当前内容自动呈现的相关信息，进一步丰富体验。( @raizamrtn@X、@APP Store)&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;2、不仅仅是语音 AI，更是「AI 员工」，Toma 获得 a16z 领投 1700 万美元 A 轮融资&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-766691af8258043a2279d8ec308dc56592f.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;AI 初创公司 Toma 近日宣布完成由 a16z 领投的 1700 万美元 A 轮融资，这笔融资不仅是对 Toma 团队的认可，更预示着 AI 技术在汽车经销领域的巨大潜力正被资本市场高度关注。Toma 的两位联合创始人 Monik 和 Anthony 是资深 AI 工程师，曾在 Scale AI、Uber、Lyft 和亚马逊等科技巨头积累了超过十年的产品与 AI 研发经验。&lt;/p&gt; 
&lt;p&gt;Toma 的解法：不仅仅是语音 AI，更是「AI 员工」&lt;/p&gt; 
&lt;p&gt;Toma 的愿景不止于一个简单的语音应答系统。他们致力于构建下一代 AI 智能体（AI Agents），这些智能体具备以下核心特点：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;高度个性化：为每个经销商定制独一无二的 AI 智能体；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;数据驱动：基于特定经销商的数据和工作流程进行训练；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;客户导向：能够提供令客户满意的交互体验；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;效率提升：为员工节省数百小时的工作时间。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Toma 强调其 AI 座席的核心目标是「解决问题，而非转接」。它们并非简单的第一道防线，而是能够直接处理和解决客户的咨询、问题和担忧。当然，优秀的 AI 也深知其边界，在遇到复杂情况时，会迅速将问题升级给人工处理，避免客户不满。&lt;/p&gt; 
&lt;p&gt;正如 Toma 所言：「只有当客户喜欢它，员工信任它，并且业务能从中受益时，AI 才真正有用。」&lt;/p&gt; 
&lt;p&gt;(@AGI 2035、@Tech Crunch)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3、Google Labs 推出 Portraits：通过 AI 呈现作家的知识、个性、沟通风格、外貌和声音&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-61c9e1174ce1ea28d53ec9157b27083e9e8.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;谷歌推出了一款全新的 AI 实验工具——Portraits，允许用户与基于真实专家的虚拟形象进行互动。首个版本以《Radical Candor》一书的作者 Kim Scott 为特色，使用她的原声和内容为用户提供建议。目前，该功能已在美国向 18 岁以上用户开放。&lt;/p&gt; 
&lt;p&gt;对于像 Kim Scott 这样的专家而言，Portraits 是一个强大的新渠道。Kim 的 Portrait 是她的知识、个性、沟通风格、外貌和声音的 AI 化身。通过 Portraits，专家们能够分享专业知识，与粉丝建立更深层次的联系，并塑造自己的在线形象。而对于用户来说，Portraits 提供了一个通过互动、个性化的对话与顶尖专家交流的机会。&lt;/p&gt; 
&lt;p&gt;Portraits 结合了专家提供的知识内容与谷歌的 AI 模型（包括 Gemini）。当用户提出问题时，AI 会优先以创作者上传的内容作为主要信息来源，随后利用自身的语言理解和推理能力生成相关回应，并以创作者本人的声音进行呈现。&lt;/p&gt; 
&lt;p&gt;官方链接：&lt;/p&gt; 
&lt;p&gt;labs.google/portraits&lt;/p&gt; 
&lt;p&gt;相关报道：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ft.co%2FKBxQ0NZr4H%25EF%25BC%2588%40News9Tweets%40X%25E3%2580%2581%40GoogleLabs%40X%25EF%25BC%2589" target="_blank"&gt;https://t.co/KBxQ0NZr4H（@News9Tweets@X、@GoogleLabs@X）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4、Luma 推出 Modify Video，原视频精髓不变角色环境任意换&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Luma AI 推出「Modify Video」功能，能在保留原视频动作和运镜的同时，完全改变场景、角色和环境。同时，该功能支持视频动捕、风格迁移和单元素编辑三种操作，可精确控制只编辑想要的元素而不篡改原动作。&lt;/p&gt; 
&lt;p&gt;官方测评显示 Luma 在观看愉悦度、结构相似度、运动轨迹跟随等多个维度上均超越同行 Runway V2V。&lt;/p&gt; 
&lt;p&gt;此外，官方博客还介绍了 Modify Video 的更多优点：&lt;/p&gt; 
&lt;p&gt;1.使用姿势、口型同步和面部跟踪等高级性能信号最大程度上保留动作形态；&lt;/p&gt; 
&lt;p&gt;2.可以从同一动作中快速生成多种风格，满足用户个性需求；&lt;/p&gt; 
&lt;p&gt;3.采用视觉参考、第一帧图像或 Prompt 指导输出；&lt;/p&gt; 
&lt;p&gt;4.支持 16:9（720p）格式分辨率，实现无缝集成；&lt;/p&gt; 
&lt;p&gt;5.能在三个结构化预设上进行自由选择，包括粘贴、弯曲和重构。&lt;/p&gt; 
&lt;p&gt;粘贴是指同步原始视频的动作结构；&lt;/p&gt; 
&lt;p&gt;弯曲可以在保留关键元素的同时进行控制转换；&lt;/p&gt; 
&lt;p&gt;重构则是创意神器，全场景都能得以重塑，例如将人类变异成哥斯拉、蜥蜴人……&lt;/p&gt; 
&lt;p&gt;参考链接：&lt;/p&gt; 
&lt;p&gt;[1]&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Flumalabsai%2Fstatus%2F1930271899420111132" target="_blank"&gt;https://x.com/lumalabsai/status/1930271899420111132&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;[2]&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flumalabs.ai%2Fblog%2Fnews%2Fintroducing-modify-video" target="_blank"&gt;https://lumalabs.ai/blog/news/introducing-modify-video&lt;/a&gt; （@量子位、@腾讯研究院）&lt;/p&gt; 
&lt;h2&gt;03 有态度的观点&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1、OpenAI 高管：AI 意识正在形成&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-43e19934cc5a7aa71d4e3fe5183b243cac2.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;今日凌晨，OpenAI 模型行为主管 Joanne Jang 发布了长篇博文，分析了 ChatGPT 目前与用户之间的情感关系，并分享了部分 ChatGPT 未来在「意识」上的处理方式。&lt;/p&gt; 
&lt;p&gt;Joanne 指出，最近越来越多用户反映称，与 ChatGPT 聊天就如同跟一个「有生命」的人类对话一样。因此也引发了 ChatGPT 团队的思考——要如何预防和应对「人类与 AI 的关系偏离，走向歧途」。&lt;/p&gt; 
&lt;p&gt;Joanne 认为，人类对于 AI 的情感产生是天生存在的。她提到，我们不仅仅对 AI 会表达感谢，也会自然而然地拟人化周围的一切事物。对此，Joanne 则表示，大家现在应该思考一个极具争议性但即将面临的问题——AI 意识。&lt;/p&gt; 
&lt;p&gt;对于上述情况，Joanne 将 AI 意识分为了「本体意识」和「感知意识」。Joanne 表示，其中感知意识能够通过社会科学研究来探索，结合 OpenAI「为人类构建模型」这一理念，团队将优先关注感知意识，并且她强调，这也是最直接影响到人类的。&lt;/p&gt; 
&lt;p&gt;另外，对于 OpenAI 团队来讲，大家一直在试图平衡意识与规范。Joanne 表示，ChatGPT 始终想打造一个具有亲和力，但又不会令模型表现出自己有感情、欲望的 AI。&lt;/p&gt; 
&lt;p&gt;Joanne 透露，未来几个月，OpenAI 将会扩大可能影响到用户情绪的模型行为的针对性评估，深化社会科学研究，听取用户意见，并将这些见解融入模型规范和产品体验中。&lt;/p&gt; 
&lt;p&gt;原文链接：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fjoannejang%2Fstatus%2F1930702341742944589" target="_blank"&gt;https://x.com/joannejang/status/1930702341742944589&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;（@APPSO、@joannejang@X）&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2、OpenAI CEO：AI 时代，敢于试错才会更出色&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;近日，OpenAI CEO Sam Altman 在 Snowflake 峰会上，分享大量关于 AI 在社会生活中的应用场景、发展趋势，其中也提到了目前大热的 AGI。&lt;/p&gt; 
&lt;p&gt;在 AI 无处不在的时代，Altman 指出「不少人还在犹豫观望，看 AI 的发展趋势」，但他表示，在快速变化的时代下，赢家往往是那些迭代速度快、敢于试错、学习能力强的团队。他进一步解释道，以过往的 AI 发展来看，越早投入、越快迭代的企业，最终成果远比那些「等等看」的人要更加出色。&lt;/p&gt; 
&lt;p&gt;对于今时往日的 AI 质量，Altman 则认为现在的模型在可靠性、能力表现上已经进入了一个新阶段，而突破点可能就在去年某个时刻悄然来到。对此，Altman 也向未来发出提问：明年我们是否还会问出一样的问题，回答一样的内容同时，Altman 也表示，未来的 AI 不只是自动化，而是能够解决团队核心问题的得力助手。&lt;/p&gt; 
&lt;p&gt;AGI 会不会是某个时刻？对于这个问题，Altman 觉得并没有那么重要，并且他更多的认为，大家问出这个问题的时候，实际上是想表达「AI 在某个时刻会不会有了意识？」&lt;/p&gt; 
&lt;p&gt;从上面的话题，Altman 也引出了下一代模型的预测。他表示，未来一两年内新模型会变得非常震撼，类似出现 GPT-3 跳跃到 GPT-4 的进步。而到了那时，可能 AGI 时刻它就悄然到来了。&lt;/p&gt; 
&lt;p&gt;原对话视频：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutu.be%2FqhnJDDX2hhU%3Ffeature%3Dshared" target="_blank"&gt;https://youtu.be/qhnJDDX2hhU?feature=shared&lt;/a&gt; （@APPSO）&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-263853266c83c9c62a980e7492d85778fce.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;更多 Voice Agent 学习笔记：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FSqXLZvq_zwWDcOVKbAb7HQ" target="_blank"&gt;级联 vs 端到端、全双工、轮次检测、方言语种、商业模式…语音 AI 开发者都在关心什么？丨 Voice Agent 学习笔记&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F7QPgzp8kDR_9iHUa4oFeiA" target="_blank"&gt;a16z 最新报告：AI 数字人应用层即将爆发，或将孕育数十亿美金市场丨 Voice Agent 学习笔记&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FUM1qs2IT1S6kJ4sZf_k3uA" target="_blank"&gt;a16z 合伙人：语音交互将成为 AI 应用公司最强大的突破口之一，巨头们在 B2C 市场已落后太多丨 Voice Agent 学习笔记&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FWI0gE4x-TZG0gdgSV_bVSA" target="_blank"&gt;ElevenLabs 33 亿美元估值的秘密：技术驱动+用户导向的「小熊软糖」团队丨 Voice Agent 学习笔记&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FSVsgDF8F1hxy3-e5-ntGbw" target="_blank"&gt;端侧 AI 时代，每台家居设备都可以是一个 AI Agent 丨 Voice Agent 学习笔记&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F4K5wdUEDxrs1afHZSAIuqg" target="_blank"&gt;世界最炙手可热的语音 AI 公司，举办了一场全球黑客松，冠军作品你可能已经看过&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FJCYzc1Ig-HFFAN3sTQDYbw" target="_blank"&gt;多模态 AI 怎么玩？这里有 18 个脑洞&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FrN9poD_X6SDxRLMsudg_xg" target="_blank"&gt;AI 重塑宗教体验，语音 Agent 能否成为突破点？&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FeFS1mnAbUpAJdiLSSGWpSA" target="_blank"&gt;对话 TalktoApps 创始人：Voice AI 提高了我五倍的生产力，语音输入是人机交互的未来&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fr2z1bilamX6YWTg90F8xYA" target="_blank"&gt;a16z 最新语音 AI 报告：语音将成为关键切入点，但非最终产品本身（含最新图谱）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;写在最后：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;我们欢迎更多的小伙伴参与 &lt;strong&gt;「RTE 开发者日报」&lt;/strong&gt; 内容的共创，感兴趣的朋友请通过开发者社区或公众号留言联系，记得报暗号「共创」。&lt;/p&gt; 
&lt;p&gt;对于任何反馈（包括但不限于内容上、形式上）我们不胜感激、并有小惊喜回馈，例如你希望从日报中看到哪些内容；自己推荐的信源、项目、话题、活动等；或者列举几个你喜欢看、平时常看的内容渠道；内容排版或呈现形式上有哪些可以改进的地方等。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-7c12a794b7469ce8ff2b8ec98a4f07536e3.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;素材来源官方媒体/网络新闻&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354016</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354016</guid>
      <pubDate>Fri, 09 May 2025 12:24:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>关于 PHP 的最新资讯和发展方向</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;h3&gt;1. &lt;strong&gt;PHP 8.x 的新特性&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;PHP 8.x 是 PHP 语言的最新版本，带来了很多新特性和性能改进，主要包括以下几个方面：&lt;/p&gt; 
&lt;h4&gt;1.1 &lt;strong&gt;JIT（即时编译器）&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;PHP 8 引入了 &lt;strong&gt;JIT（Just-In-Time Compiler）&lt;/strong&gt;，这个特性旨在提高 PHP 的性能，尤其是在处理计算密集型任务时。JIT 通过将 PHP 代码编译为机器码，绕过传统的解释过程，从而加快了执行速度。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;适用于算法密集型的任务，如数据处理、计算、大型应用中的复杂运算。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;对 Web 开发的常见应用可能不会有巨大提升，但对于 CPU 密集型操作（如图像处理、加密操作等）性能提高显著。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1.2 &lt;strong&gt;Union Types（联合类型）&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;PHP 8 引入了 &lt;strong&gt;Union Types&lt;/strong&gt;，允许函数参数和返回值声明多个类型。&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt;
  &lt;code class="language-php"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;add&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;$a&lt;/span&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;$b&lt;/span&gt;&lt;/span&gt;&lt;span&gt;): &lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt; { &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;$a&lt;/span&gt;&lt;/span&gt;&lt;span&gt; + &lt;/span&gt;&lt;span&gt;&lt;span&gt;$b&lt;/span&gt;&lt;/span&gt;&lt;span&gt;; } &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;这种类型的声明提供了更多的灵活性，使得函数能够接受多种类型的输入，并返回多种类型的结果。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1.3 &lt;strong&gt;Named Arguments（命名参数）&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;PHP 8 允许通过命名参数来传递函数参数，使代码更加清晰和易于维护。&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt;
  &lt;code class="language-php"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;greet&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;$name&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&lt;span&gt;$age&lt;/span&gt;&lt;/span&gt;&lt;span&gt;) { &lt;/span&gt;&lt;span&gt;&lt;span&gt;echo&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;"Hello &lt;span&gt;$name&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;, you are &lt;/span&gt;&lt;span&gt;&lt;span&gt;$age&lt;/span&gt;&lt;/span&gt;&lt;span&gt; years old."; } &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 使用命名参数&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;greet&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;age&lt;/span&gt;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;&lt;span&gt;30&lt;/span&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&lt;span&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;&lt;span&gt;"Alice"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;这种方式增强了代码可读性，特别是在函数有多个参数时，避免了参数顺序错误的问题。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1.4 &lt;strong&gt;Attributes（注解）&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;PHP 8 引入了 &lt;strong&gt;Attributes&lt;/strong&gt;，这是一种元数据机制，类似于其他语言中的注解（例如 Java 的注解）。它允许开发者为类、方法、属性等添加元信息。&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt;
  &lt;code class="language-php"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;#[Route&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;"/home"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;HomeController&lt;/span&gt;&lt;/span&gt;&lt;span&gt; { &lt;/span&gt;&lt;span&gt;&lt;span&gt;// 类定义&lt;/span&gt;&lt;/span&gt;&lt;span&gt; } &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;这对于框架开发者尤其有用，可以替代 PHPDoc 注释，提高代码的可读性和可维护性。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1.5 &lt;strong&gt;Constructor Property Promotion（构造器属性提升）&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;PHP 8 使得类的构造函数中的属性可以直接通过构造器来初始化，减少了冗余代码。&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt;
  &lt;code class="language-php"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;User&lt;/span&gt;&lt;/span&gt;&lt;span&gt; { &lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;__construct&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;$name&lt;/span&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;$age&lt;/span&gt;&lt;/span&gt;&lt;span&gt; ) {} } &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;这样可以在构造函数中直接声明并初始化类的属性，简化了代码。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. &lt;strong&gt;PHP 框架的趋势与发展&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;PHP 框架不断进化，以下是一些常用 PHP 框架的最新发展动态：&lt;/p&gt; 
&lt;h4&gt;2.1 &lt;strong&gt;Laravel&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;Laravel 是 PHP 中最流行的框架之一，已经发展成为全栈解决方案。Laravel 提供了很多开箱即用的功能，如：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Eloquent ORM&lt;/strong&gt;：简洁而强大的数据库操作工具，提供了流畅的查询构建器。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Blade 模板引擎&lt;/strong&gt;：高效的模板引擎，支持组件化的界面设计。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Laravel Sail&lt;/strong&gt;：一个轻量级的 Docker 开发环境，帮助开发者快速构建和部署应用。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Laravel 还在不断增强其对现代 Web 开发的支持，例如与前端框架（如 Vue.js 和 React）的集成，以及通过 &lt;strong&gt;Laravel Octane&lt;/strong&gt; 加速性能。&lt;/p&gt; 
&lt;h4&gt;2.2 &lt;strong&gt;Symfony&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;Symfony 是另一个流行的 PHP 框架，它被许多大型企业和项目所采用。Symfony 提供了一套可重用的 PHP 组件，适用于开发各种 Web 应用和复杂的企业级系统。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Flex 2&lt;/strong&gt;：Symfony 4 引入的 Symfony Flex 是一个面向 Symfony 的现代化项目管理工具，它大大简化了项目设置。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;API Platform&lt;/strong&gt;：一个用于构建 RESTful 和 GraphQL API 的强大工具，已经成为 Symfony 生态系统的一部分。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Symfony 强调灵活性和可扩展性，是很多高性能企业应用和微服务架构的首选框架。&lt;/p&gt; 
&lt;h4&gt;2.3 &lt;strong&gt;CodeIgniter 和 Yii&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;CodeIgniter&lt;/strong&gt;：一个轻量级的 PHP 框架，虽然功能不如 Laravel 和 Symfony 强大，但它非常适合小型项目和快速原型开发。CodeIgniter 4 的发布进一步提高了其现代化水平。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Yii&lt;/strong&gt;：另一个高性能的 PHP 框架，特别适用于开发大型 Web 应用程序。Yii2 的特点是内置了许多常用的功能，如 RBAC（角色和权限控制）、缓存、Gii（代码生成工具）等。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. &lt;strong&gt;PHP 与现代 Web 开发&lt;/strong&gt;&lt;/h3&gt; 
&lt;h4&gt;3.1 &lt;strong&gt;与 JavaScript 和前端框架的结合&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;现代 Web 开发强调前后端分离的架构，PHP 在与 &lt;strong&gt;JavaScript&lt;/strong&gt; 前端框架（如 React、Vue.js 和 Angular）结合时，提供了强大的后端支持。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;RESTful API 与 GraphQL&lt;/strong&gt;：PHP 可以通过框架（如 Laravel、Symfony）提供 RESTful API 或 GraphQL 服务，使前端和后端通过 API 进行通信。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;服务器渲染 vs 客户端渲染&lt;/strong&gt;：虽然 PHP 主要用于服务器端渲染，但也可以与 JavaScript 前端框架配合，实现客户端渲染。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;3.2 &lt;strong&gt;Microservices 和容器化&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;PHP 越来越多地与 &lt;strong&gt;微服务架构&lt;/strong&gt; 和 &lt;strong&gt;容器化&lt;/strong&gt; 技术（如 Docker）结合。使用微服务架构可以使 PHP 应用更具扩展性和灵活性。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;：为 PHP 开发者提供了一种隔离和可复用的开发环境。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;：在容器化应用中，PHP 与 Kubernetes 结合使得自动化部署和管理变得更加简便。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;3.3 &lt;strong&gt;PHP 与云计算&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;PHP 仍然在 &lt;strong&gt;云计算平台&lt;/strong&gt; 中扮演重要角色，许多开发者将 PHP 应用部署到云环境中，使用服务如 &lt;strong&gt;AWS&lt;/strong&gt;、&lt;strong&gt;Google Cloud&lt;/strong&gt; 和 &lt;strong&gt;Microsoft Azure&lt;/strong&gt; 来提供托管、自动扩展、负载均衡等功能。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;：通过 PHP 与 AWS Lambda 或其他无服务器计算服务结合，可以简化开发流程并降低基础设施成本。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;4. &lt;strong&gt;PHP 社区与支持&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;PHP 拥有一个庞大的开发者社区，每年都会举行许多技术大会、研讨会和在线活动。PHP 团队和社区致力于推动 PHP 的发展和改进，以下是一些重要的资源：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;PHP 官方网站&lt;/strong&gt;：提供 PHP 语言的最新版本、文档和教程。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;PHP Internals&lt;/strong&gt;：是 PHP 核心开发者的沟通平台，开发者可以通过这里提交问题、建议新特性、讨论语言发展方向。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Packagist 和 Composer&lt;/strong&gt;：Packagist 是 PHP 的包管理工具，通过 &lt;strong&gt;Composer&lt;/strong&gt; 可以轻松管理第三方库和依赖。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;5. &lt;strong&gt;PHP 的未来&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;PHP 作为一种成熟的语言，虽然面临一些竞争（如 Node.js、Python 等），但它仍然在 Web 开发领域占据着重要地位。随着 &lt;strong&gt;PHP 8.x&lt;/strong&gt; 版本的推出，PHP 的性能和功能得到了进一步提升，预计会有更多的企业和开发者继续依赖 PHP 开发 Web 应用。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;PHP 9.0&lt;/strong&gt;：尽管目前还没有正式发布，PHP 社区已经在讨论 PHP 9 的新特性。主要的目标是进一步优化性能和简化语法。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;PHP 未来的趋势&lt;/strong&gt;：PHP 将继续支持更多现代化的 Web 开发技术，如微服务、容器化、Serverless 等，保持其在企业级应用中的优势。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354002</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354002</guid>
      <pubDate>Fri, 09 May 2025 10:06:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>预测：2030 年 ChatGPT 广告收入将达千亿美元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;富国银行的证券分析师 Ken Gawrelski 在最新的报告中提出了一个引人瞩目的预测：到 2030 年，ChatGPT 将占据全球搜索广告市场的 30% 份额，年收入将接近 1000 亿美元。这一预测意味着，OpenAI 与谷歌之间的竞争将在搜索市场上愈演愈烈。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;报告中指出，整个搜索广告市场预计将在未来几年内以 8% 的年复合增长率增长，到 2030 年将达到 3400 亿美元。而 ChatGPT 的快速增长主要将影响谷歌的市场份额。目前，OpenAI 的收入主要依赖于用户的订阅费用。早在今年 3 月，就有消息人士透露，OpenAI 预计今年的营收将同比增长三倍，达到 127 亿美元。同时，尽管预计到 2029 年营收可达 1250 亿美元，但 OpenAI 在 2029 年前仍无法实现正向现金流。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="271" src="https://oscimg.oschina.net/oscnet/up-0c88b1d1ddc7ad456d5da21854b2ca9aaae.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;目前，ChatGPT 已占全球近 8% 的搜索查询量，但尚未对搜索广告市场产生直接影响。Gawrelski 认为这一情况即将改变。他们预计 OpenAI 将在未来 12 个月内将赞助广告融入 ChatGPT 中。值得注意的是，这款热门 AI 工具的每周活跃用户已超过 5 亿，但付费用户仅占 5%。在 OpenAI 内部的营收预测中，2026 年的 「免费用户变现收入」 预计将达到 10 亿美元，而这一数字无疑主要来自广告收入。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;报告同时指出，随着 ChatGPT 在整体搜索量中的占比逐步上升，预计到 2025 年底将达到约 17%，到 2030 年则接近三分之一。然而，短期内广告份额的增长将滞后于使用量的增长，预计在预测周期末尾二者将趋于平衡。Gawrelski 将 ChatGPT 的商业化进程与 TikTok 相提并论，后者也经历了类似的广告收入增长过程。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;目前，谷歌在搜索广告领域占据了超过 90% 的市场份额，但预计到 2030 年，这一数字将下降至约 60%。报告还警告称，ChatGPT 的入局可能会对当前热门的按点击付费广告（CPC 广告）价格产生下行压力。分析师指出，谷歌的广告价格每下降一个百分点，可能会导致 2026 财年每股收益下降 1 个百分点。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;为了加速进军广告市场，ChatGPT 或将通过与手机制造商达成新分销协议以及美国法院对谷歌反垄断案的裁决等关键催化剂来推动这一进程。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353999</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353999</guid>
      <pubDate>Fri, 09 May 2025 09:59:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>重磅！支持鸿蒙！腾讯视频 ovCompose 跨平台框架发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="text-align:center"&gt;&lt;img height="386" src="https://oscimg.oschina.net/oscnet/up-f8d70184eb16acfb3610dee103ef9e44ff3.png" width="832" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;背景&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;随着鸿蒙的推出，客户端跨平台需求被推到了前所未有的高度，单纯的 UI 跨端已无法满足业务诉求，构建 Android/iOS/鸿蒙平台的全跨端 APP 能够最大幅度的降低业务开发成本，提升人效。并且行业内研发模式的逐步改进，单周发版已经成为常态，对于常规 APP，动态化的诉求并不是很强。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#262626"&gt;开发者普遍希望在保持原生优良性能的同时，使用行业通用的 UI 开发语言，从而最大程度降低学习成本。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;与 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Compose &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;是 Google 官方推荐的 Android 开发语言与 UI 框架，也是深受开发者喜爱&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;应用开发方案。与其他跨端方案相比，Kotlin Multiplatform 还具备高性能，与原生交互更灵活等优点。因此腾讯视频选择了 Compose Multiplatform 作为全跨端 APP 的基础。当然，这套方案也存在不支持鸿蒙、iOS 平台混排能力受限、GC 性能表现一般等一系列问题，使得落地的过程充满了挑战。经过不懈努力，上述问题均已得到妥善解决，现在我们希望将这些解决方案开源，期待与全行业一同推动 Compose 跨端生态走向成熟。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="201" src="https://oscimg.oschina.net/oscnet/up-04f661d1e45cf7c86ff9630a1e8906b222e.png" width="832" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;特性优势&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;ovCompose 已经在腾讯视频鸿蒙平台全面落地，成为鸿蒙平台首个全跨端 APP。同时 KuiklyBase 基础能力已在腾讯视频、QQ 浏览器、腾讯体育等 10+款 APP 广泛落地。Android、iOS、鸿蒙三端一码的开发方式，使得业务的开发效率得到大幅度&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;地&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;提升。随着鸿蒙系统的发展，ovCompose 和 KuiklyBase 也会在未来进一步扩展到 TV 和 PC 端。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;鸿蒙高性能&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin 鸿蒙适配有 JS 与 Native 两种技术方案可供选择，KuiklyBase 最终选择了 Native 方案。因为 KN 相比 JS 有更快的执行速度，更好的三端一致性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="303" src="https://oscimg.oschina.net/oscnet/up-6a496678ea2121c823332adad5611d81c20.png" width="841" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;关于 JS 和 KN 的性能测试的数据如上图所示。我们对 KN 和 Compose 两者都进行了性能优化，在 Compose "小球碰撞" Demo 中。以 30 FPS 为最低极限，经优化小球数量由 600 提升到 1500（Android 1600 球），绘制性能提升 150%。后续将开放更多优化策略。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;相关资料如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;JS 和 KN 性能测试详细数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;https://docs.qq.com/sheet/DQXB4YmxQaENSdkpD?u=255d89f8184e4be69e865ce6001f298b&amp;amp;no_promotion=1&amp;amp;tab=BB08J2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;ovCompose 小球碰撞 Demo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;https://github.com/Tencent-TDS/ovCompose-sample&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin 官方的 Benchmark &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;https://github.com/JetBrains/kotlin/tree/master/kotlin-native/performance/ring&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;鸿蒙三明治架构支持混排&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;鸿蒙平台采用了 Skia 的渲染方案，能够 100% 支持 Compose 语法和渲染能力。Skia 渲染使用 XComponent 组件作为画布，通过三明治镂空结构，很好&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;地&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;解决了与原生组件的混排问题，原生 UI 可以展示在 Compose 上层或下层，满足了绝大部分的业务需求。同时支持了 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;粘贴按钮 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;等安全组件的混排，使得 Compose 无需申请权限也能使用系统能力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="638" src="https://oscimg.oschina.net/oscnet/up-a1cb206040d8039fe5bd852425034fd81c4.png" width="596" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;三端高一致性&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;对于逻辑运行&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;：由于在鸿蒙平台采取 Kotlin-Native 方案，解决了 Kotlin-JS 使用 TaskPool 时，Kotlin 语法无法约束跨线程访问的问题，保持了高度的三端一致性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;对于 UI 绘制：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;iOS、鸿蒙平台均采用 Skia 渲染，Android 底层使用 Skia 渲染，应用层暴露了 Paragraph/Canvas 的绘制接口。所以基于 Skia 封装后的 Skiko 可以完美还原 Android 绘制效果，达到三端一致的效果。三平台均可以 100% 使用 Compose 的控件与绘制能力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;三端高一致性&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;对于逻辑运行&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;：由于在鸿蒙平台采取 Kotlin-Native 方案，解决了 Kotlin-JS 使用 TaskPool 时，Kotlin 语法无法约束跨线程访问的问题，保持了高度的三端一致性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;对于 UI 绘制：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;iOS、鸿蒙平台均采用 Skia 渲染，Android 底层使用 Skia 渲染，应用层暴露了 Paragraph/Canvas 的绘制接口。所以基于 Skia 封装后的 Skiko 可以完美还原 Android 绘制效果，达到三端一致的效果。三平台均可以 100% 使用 Compose 的控件与绘制能力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="687" src="https://oscimg.oschina.net/oscnet/up-4d9de997bd770b372a4ebe86eaafae316f1.png" width="876" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;iOS 多模态渲染解放混排能力&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span style="background-color:#fcfcfc"&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;iOS 端大量存量业务模块高度依赖 Compose 与原生 UI 的混合编排能力，其灵活混排的技术实现及与原生 UI 性能标准的精准对齐，是业务 Compose 化改造成功推进的核心前提。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Compose Multiplatform 官方在 iOS 端上使用 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Skia + CAMetaLayer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&amp;nbsp;实现 UI 的渲染能力，这种方案的好处是与其他端表现完全一致，缺点就是与原生 UI 的混排能力较弱，且内存占用较高，不适合多个 Compose 实例并存。因此我们必须考虑以下两种方案：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;指令映射&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;，即使用 UIKit 实现 Compose Canvas 。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;组件映射&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;：即将 Compose 组件映射为 Native 组件。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;组件映射方案在组件层进行映射实现，是业内最常见的跨端 UI 框架设计方案，实现难度相对较低，但存在后期维护成本高，多端不一致等问题。指令映射在画布层进行映射实现，实现的逻辑层级更低也更加抽象，虽然开发难度相对较高，但却可以充分利用 UIKit 丰富的渲染能力对 Compose 的绘制效果实现较高的还原度。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;因此我们最终采用了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;指令映射&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;的自研实现方案解决了 Compose 在 iOS 上面临的诸多难题。这套方案也成功地在腾讯视频 iOS 端核心业务场景落地。事实上，业务团队甚至可以根据实际应用场景在基于 UIKit 实现的自研指令映射方案或官方的 Skia 渲染方案之间进行自由切换，并且可以在 Runtime 期共存。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;关于 UI 的多端一致性，文本渲染较为复杂，我们采取 Skia 将文本渲染成图片，利用 CALayer 进行展示的方案，保持了高度的一致性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="511" src="https://oscimg.oschina.net/oscnet/up-f656d4ee74ea74191f595bfcbf27f975d72.png" width="842" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin Native 内存优化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;GC 优化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;GC 抑制&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;当 APP 处于滑动等对帧率要求较高的场景，我们会短暂抑制 GC，来换取更好的流畅度。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;GC 分段&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;不影响帧率情况下，进行更高频次的 GC，降低 PSS 水位。通过分析 CMS（Concurrent Mark-Sweep）垃圾回收算法，发现其存在两次 Stop-The-World（STW）暂停，并且第一次 STW 时间较短，第二次 Sweep 期间的 STW 较长。利用 GC 挂起的能力，我们在 Vsync 时进行 GC 挂起，在 idle 时进行 GC 恢复。具体效果如下图：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="483" src="https://oscimg.oschina.net/oscnet/up-448a548403539f2bde31ccd796f10e9aceb.png" width="809" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Sweep 优化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin Native GC 在 Sweep 阶段，会有大量的 munmap 系统调用，导致 STW 时间过长，从而影响主线程。为此，我们将 munmap 移出 STW 阶段，在 STW 阶段仅做 Page 收集。在 Resume 后再进行集中 munmap。将第二次 STW 时间降低到 1ms 以内。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="173" src="https://oscimg.oschina.net/oscnet/up-6e52e581fda35deadc8d833e01caf92f670.png" width="834" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;KN 堆 Dump 优化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin Native（KN）支持生成堆内存转储文件，用于内存泄漏排查（类似 Android Profiler），但 Dump 过程需暂停所有 KN 线程，导致秒级界面冻结。针对不同平台特性我们采用了不同优化方案，从而达成线上可用的目标。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;鸿蒙系统&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基于 Linux 内核的 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;fork()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&amp;nbsp;系统调用特性，采用「父进程无感知-子进程异步转储」方案实现零延迟内存快照。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;iOS 系统&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;针对 iOS 系统无法支持 fork 的限制，我们重新设计了堆内存分析流程，在保持性能的同时显著降低主线程阻塞时间。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;堆冻结阶段：将堆内存数据保存到缓存文件，这里的堆内存是指 KN 堆用来分配对象内存的几种 Page 类，粒度很大，一种 Page 可能会有上千个对象，写文件时无需解析 Page 内容，所以耗时很少且不会因为对象数量的增加而显著增加耗时。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;线程恢复后：异步地从缓存文件中读取对象内容并写到 Dump 文件，由于每次从文件读取的只是对象大小数据，所以内存消耗很低。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;优化后 450MB 堆内存转储耗时从 2.8 秒降低到 410 毫秒达到线上可用水平。该功能预计 6 月份上线。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;方案对比&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="270" src="https://oscimg.oschina.net/oscnet/up-1000b2e58fbc61f95d080d57d8fc537ed49.png" width="832" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;KuiklyBase 组件生态&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin Native 堆栈还原组件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;提供 Kotlin 异常堆栈还原，方便定义 Kotlin 异常对应的 Kotlin 代码行号、方法名等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin Native/ ArkTS 互调用组件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;提供 ArkTS 与 Kotlin Native 跨语言访问场景的解决方案，支持基础类型、闭包、ArrayBuffer 等类型互转，统一的生命周期管理，支持跨线程同步调用，支持跨 Runtime 的服务发现，为开发者提供简便的跨语言互调用能力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;资源管理组件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;本项目基于 Kotlin Multiplatform 技术，构建了一套跨平台原生资源管理解决方案，支持 Android、iOS 及 HarmonyOS 三大移动端平台。通过构建时同步生成类型安全的资源访问类（Resource Class），结合 Kotlin/Native（klib）/ Kotlin/Jvm（aar）的标准化资源封装机制，实现了多平台资源统一管理与&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;编译器&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;强校验，为开发者提供与 Android R 类相仿的资源调用体验。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;原子操作组件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基于 Kotlin 官方提供的多平台原子操作库，旨在以高效且符合 Kotlin 惯用语法的方式实现线程安全的并发编程，提供轻量级的原子类型（如 AtomicInt、AtomicReference），支持原子读写、CAS（Compare-And-Swap）等操作，无需显式锁即可实现线程安全。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;协程组件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基于 Kotlin 官方提供的协程库，旨在简化异步和并发编程，通过轻量级协程替代传统线程和回调机制。支持协程构建器、调度器、挂起函数、结构化并发、流处理、通信与同步、异常处理、超时控制等能力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;序列化组件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基于 Kotlin 官方提供的多平台序列化库。专为 Kotlin 语言设计，支持高效、类型安全的对象序列化与反序列化。多格式支持、编译器插件集成、兼容 Kotlin 类型安全与空安全。支持嵌套对象、泛型类、密封类（sealed class）等复杂类型。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;日期时间处理库&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基于 Kotlin 官方提供的多平台日期时间处理库，简化跨平台的日期和时间操作。支持时区处理、时间运算。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;IO 库&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基于 Square 提供的高效 I/O 库，旨在简化输入输出操作。提供高效缓冲区管理、同一流抽象、智能数据移动。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;不可变集合库&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基于 Kotlin 官方提供的不可变集合库，专注于为开发提供线程安全、高效且符合函数式编程范式的数据结构。提供不可变的集合接口，确保集合创建后不可修改，避免意外数据变更。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;并发集合库&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基于 StatelyConcurrency 提供的并发集合库，简化跨平台开发中的状态管理和并发控制设计。支持线程安全集合、并发控制、同步机制。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;针对&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&amp;nbsp;Kotlin/Native 的严格内存模型优化，减少线程切换开销。简化状态管理。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Lottie 动画库&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基于 Airbnb 开源的跨平台动画渲染库，能够将 Adobe After Effects 设计的动画转换为轻量级 JSON 文件，并在多平台上高效渲染。提供丰富的动画控制、动态属性修改、轻量高效。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;PAG 动画流解决方案&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;腾讯开源的一套跨平台动画工作流解决方案，专注于将 Adobe After Effects (AE) 动画高效转换为轻量级文件，并在多终端渲染。支持 AE 动画无缝导出、运行时编辑、高性能渲染、配套工具链完善。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;数据库&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基于 SQLite 封装的轻量级、嵌入式的关系型数据库，嵌入式设计、标准 SQL 支持、事务与 ACID 合规。轻量高效、弱类型系统&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;，并且&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;支持高级功能扩展（索引、触发器、视图等）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;工具库&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;屏蔽 Android/iOS/Harmony 系统平台差异，对外部统一提供常用的工具 api 集合作为业务开发的强力支撑。包括不限于 App 信息管理 (名称、版本号、安装时间、更新时间、包名等)、设备信息管理 (设备类型、品牌、制造商、系统版本、电池状态、亮度、内存信息等)、屏幕信息管理（宽度、高度、分辨率、是否亮屏、锁屏、屏幕旋转、状态栏、安全区域获取、全屏模式等）、传感器管理（重力、震动、陀螺仪、加速度）、前后台状态管理、音频及音频焦点管理、加解密管理 (3DES、RSA、AES)、字符编码（UTF-8、UTF-16、BASE64）、存储空间管理、网络状态监听、沙盒目录获取、监听分屏/浮窗等状态、图片保存相册能力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;网络库&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;提供基于 HTTP 协议的 POST、GET 请求能力以及关键信息采集。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;实现原理&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;KN 鸿蒙平台适配&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;kotlin 1.9 使用的 LLVM 11，kotlin 2.1 升级到 LLVM 16，但是鸿蒙平台能够支持的版本在 LLVM 12 ~ 15，苹果和鸿蒙都是基于公共版本的 LLVM 进行修改，增加了自己的特性优化，苹果相对好的点在于公共版本的 LLVM 中包含有苹果的 target，所以鸿蒙版本的 LLVM 既可以支持 iOS，又可以支持鸿蒙平台。（KukilyBase-Kotlin 当前基于 2.0.21 进行鸿蒙适配）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;常规方案：常规的 Kotlin 适配思路是分别使用鸿蒙和苹果的 LLVM 进行编译，这种方案的好处是修改简单，且不存在兼容性问题。缺点是由于 Kotlin 本身不支持多 llvm 架构，导致鸿蒙平台的 kotlin 和 iOS 平台要进行分别编译，需要依赖不同的 Kotlin 版本。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;KuiklyBase 方案：在第一步 Kotlin IR 转 LLVM IR 时采用苹果的 LLVM 11，在 LLVM IR 生成可执行文件时使用鸿蒙的 LLVM 12，这样既可以满足诉求，Kotlin 本身也无需进行架构调整。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="382" src="https://oscimg.oschina.net/oscnet/up-bd747f6707bdda01232f5cfe58e100aad88.png" width="848" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;KN 性能优化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;完成适配后，我们发现卡顿情况非常严重，从而进一步对 Kotlin-Native 性能进行评估，我们采用了官方 Benchmark 进行对比，测试发现鸿蒙耗时是 iOS 相同性能机器的 2.48 倍。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="253" src="https://oscimg.oschina.net/oscnet/up-3666432185a744a6d7a106b801c346a7312.png" width="698" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;我们需要针对鸿蒙平台进行一系列的优化，经过初步分析，我们也规划了性能优化的初步优化思路。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="805" src="https://oscimg.oschina.net/oscnet/up-54854c300951cfe8df58f5b20a3e01b7569.png" width="695" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;内联优化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;我们分别对比了相同 benchmark 生成的 Kotlin IR、LLVM IR 文件。发现 LLVM IR 在内敛上更加充分，特别是对于关键函数，例如 EnterFrame 等，反观鸿蒙平台此类优化更&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;少&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="287" src="https://oscimg.oschina.net/oscnet/up-7c2c890d0645c2a2b2fe6db5b65cfac790c.png" width="832" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;尝试添加 always inline 后，发现程序性能得到了较为显著的影响。但相对 iOS 仍然有一定差距。通过分析 LLVM 的内联 pass 发现，在处理 EnterFame 等函数时，会对比 cpu feature 的兼容性，Kotlin 和框架内部 C++代码在生成 LLVM 的函数时，他们各自携带的 cpu feature 不一致，导致无法进行内联。配置正确的属性后，此问题得到修复。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="419" src="https://oscimg.oschina.net/oscnet/up-eab30cb89a126d1445aabbab2a42ba6856a.png" width="846" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;ThreadLocal 引发的性能低&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;通过对 Benchmark 中耗时超 iOS 的 case 进行深度分析，最终发现如下高频堆栈。线程私有数据的性能测试结果表明 Ohos 耗时波动较大。Ohos 耗时是 iOS 的 2-3 倍。（展示 0ns 是由于初期鸿蒙 trace 工具不完善导致，现已修复）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="337" src="https://oscimg.oschina.net/oscnet/up-f0911eefa365ad7cf3f63373aa9fca2baed.png" width="756" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;由于 Kotlin-Native 在内存分配时都依赖 ThreadLocal 来访问线程独立的 Page，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;故&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;访问频率极高，导致性能低下。分析发现鸿蒙平台默认采用了软件模拟的 thread_local。所以我们在编译时通过参数强制使用硬件 thread_local，整体性能提升了 30%。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;协程性能优化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;将 Jetbrains 的 Compose 成功适配到 Ohos 后，长列表的滑动过程中频繁出现卡顿现象。trace 分析发现异常的处理花费了大量的时间。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="402" src="https://oscimg.oschina.net/oscnet/up-f2d9cfc592a3f29b871ab4d5028e01fd551.png" width="849" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;经技术架构分析，Compose Multiplatform 框架的协程调度机制深度依赖异常处理模型实现任务恢复与取消控制。其底层实现中，KN 运行时将异常处理桥接至 C++异常体系，该设计在运行时会产生显著性能损耗：当异常触发时，系统需沿调用栈进行逐级回溯以定位匹配的异常捕获点，其时间复杂度与调用栈深度呈正相关。更值得注意的是，该过程伴随大量 C++异常对象的动态构建与析构操作，频繁的内存分配与释放行为进一步加剧了执行时延，导致关键路径上的协程调度效率受限于异常处理机制的性能瓶颈。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;同时鸿蒙系统 libhilog.so 捕获了抛出的异常进行处理，造成了大量延迟，与鸿蒙专家沟通后得到妥善优化。最终长列表在滑动场景能够稳定在 120Hz，处理方式如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;缓存或放弃部分关键位置的异常，降低异常处理的耗时与频率。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;解决 libhilog.so 系统库对于异常的非法捕获。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;调试性能优化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;使用 Jetbrains 的 Kotlin Native debuging 脚本后，调试断点及打印变量耗时远超 Native 。通过 trace 分析发现其 KDS 与 LLDB 交互极为原始和简单。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="255" src="https://oscimg.oschina.net/oscnet/up-d6e41a97c0596ea36e2b6d54fc7ab558cc0.png" width="638" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;经技术架构分析与处理，在 KDS 与 LLDB 上运用流程合并、复用、缓存、预加载潜在下一跳、局部调试的可容错优化等手段提高其通信和处理效率。整体性能视实际情况提升数倍至几十倍（提升幅度随调试栈的变量加密加深等因素影响），近似 Native。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;鸿蒙绘制不同步问题解决&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;由于两种组件属于独立的绘制层，在鸿蒙系统中存在不同步的问题。整体效果如图，Compose 的列表混排 ArkUI 的元素进行滚动，两个同步向上进行运动，由于不同步，UI 衔接处会展现出空白区域，出现割裂的现象。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="452" src="https://oscimg.oschina.net/oscnet/up-82edc7b40785e81987cd2304d2558f3ebbf.png" width="248" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;核心问题时鸿蒙采用的是集中渲染架构，XComponent 的独立绘制模式与 ArkUI 的绘制发生在不同的进程，无法保证完全不同。所以我们采用 XComponent 的 Texture 模式，将内容绘制到 FBO 中，由 FBO 参与原有的 ArkUI 的绘制节奏，来保证完全的同步。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="491" src="https://oscimg.oschina.net/oscnet/up-97f8aa5c28232e780f413fc51aee9fe01eb.png" width="904" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;iOS 多模态渲染&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;在基于 UIKit 进行渲染的基础思路上，我们也发现了如 CALayer 重叠、未正确放置、无法复用等问题。对于 Android 来说，其是独立绘制架构，每个进程自己完成内容的绘制，所以画布是一整块，内容都绘制在其中，通过 Skia 的 PictureRecorder 命令录制功能进行命令的快速回放。但这种模式在 iOS 集中渲染架构上就不太适用了，需要有一个工具来进行差量处理绘制命令。所以我们设计了基于 iOS 的 PictureRecorder 局部更新架构。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="322" src="https://oscimg.oschina.net/oscnet/up-1424f44ca855ce5030e5d32696b72a2e20c.png" width="836" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;在 PictureRecorder 中，我们对绘制命令进行差量，只更新变化的部分，从而提升绘制效率。PictureRecorder 核心就是我们通过 hash 来判断绘制指令是否发生变化，常规的这种方式能够提升绘制效率，但当页面无比复杂时，hash 计算偶尔也会变成一种负担。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;PictureRecorder 进行了进一步升级&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;我们优化的核心思路是，通过增量 hash 来减少 hash 的计算量。每一个 draw 函数执行的时候，都会&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;对&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;当前的 hash 和，指令 id 进行一次合并。并计算出最终的 hash。这个 hash 记录了一次完整&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;地&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;使用。增量 hash 的目的是减少 diff 操作，这种方式可以有效&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;地&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;减少，两次指令相同的比较。在压力测试中还发现 OC 对象的创建和释放耗时也会被放大。这种情况在腾讯视频复杂页面回迁的过程中尤其明显，因此，这里还将原先由 OC 对象代表的指令，改为了非常简单的 C 结构体。之前的 OC 闭包也去掉了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="328" src="https://oscimg.oschina.net/oscnet/up-a9df7dea5c471908dbbfdc754231c24cee7.png" width="836" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="414" src="https://oscimg.oschina.net/oscnet/up-5aba3bd8fa3844ca4cd20e6d01c68d0774f.png" width="344" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;优化效果：以腾讯视频的视频播放页面为例，首次渲染耗时&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#de3c36"&gt;降低 13%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;，再次渲染耗时&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#de3c36"&gt;降低 56%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;与 KuiklyUI 的差异&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span style="background-color:#fcfcfc"&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;跨端框架自渲染与原生渲染在性能表现与多端适配层面各具优势。为满足业务场景的差异化需求，腾讯大前端 Oteam 同时进行两个方案探索。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;原生渲染方案 KuiklyUI：侧重于静态化+动态化双运行模式，采用轻量原生渲染保持原生 UI 体验并具备高度一致性，并基于原生组件映射的方式支持 Compose API（&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;本次已同步推出&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;），支持 H5 和小程序（6 月底推出）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;自渲染方案 ovCompose：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#262626"&gt;专注于全面对齐 Compose Multiplatform 标准 API，采用自渲染方式实现鸿蒙平台的适配，确保三端高度一致性。针对 iOS 上较多的存量业务，提出了多模态渲染方案解决低端 iPhone 内存紧张、混排原生视图、手势等问题。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;开源说明&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;此次开源共包含 5 个仓库，包含了 ovCompose 和 KuiklyBase。仓库 Group 地址为：https://github.com/Tencent-TDS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="469" src="https://oscimg.oschina.net/oscnet/up-2ed51165e56a4efa9b7c6987ec47ac84ff3.png" width="832" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;计划&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;随着这几年的快速发展，KMM 生态得到了长足的发展，Kotlin-Nativ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;e 的执行性能在很多方面已经超越了 Kotlin-JVM，但目前 Compose Multiplatform 跨平台技术还没有达到成熟的状态（特别是 GC），ovCompose&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;&amp;nbsp;&amp;amp; KuiklyBase 将持续优化，为开发者带来体验更好、性能更强的跨端开发体验。以下是我们重点优化的方向：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;GC 在业务场景的表现&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;Kotlin-Native 组件化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;Kotlin-Native 的开发体验优化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;UIKit 渲染模式进一步对齐 Skia 的渲染&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353990</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353990</guid>
      <pubDate>Fri, 09 May 2025 09:39:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>Snow 编程语言心路历程</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;h1&gt;&lt;span&gt;&lt;/span&gt;1. Snow 心路历程&lt;/h1&gt; 
&lt;h2&gt;1.1 Snow 简介&lt;/h2&gt; 
&lt;p&gt;由 Java 语言编写的虚拟机与编译器，专为大型语言模型（LLM）量身定制的编程语言。&lt;a href="https://gitee.com/jcnc-org/snow"&gt;项目链接&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;1.2 背景与目标读者&lt;/h2&gt; 
&lt;p&gt;自 ChatGPT 3.5 诞生以来，越来越多的个人和企业将 LLM 生成的代码融入日常开发与自动化。然而，实践证明：LLM 生成的代码虽然「看起来没问题」，却常因对底层语言细节把握不准导致微妙 Bug——比如运算符优先级混淆、作用域处理错误、甚至基础库调用都无法编译通过。&lt;/p&gt; 
&lt;p&gt;于是，我萌生了这样一个想法：&lt;strong&gt;能否设计一门编程语言，让 LLM 在「语法层面」能够更精准、高效地理解和生成代码？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;传统编程语言的设计多偏重「计算机」的执行效率，程序员往往在抽象表达和底层性能之间不断权衡。Ruby 之父松本行弘提出「为人而不是为机器编程」的理念。而在 LLM 日益普及的今天，我们应当承认：大型模型正成为「超级程序员」，它们不仅是助手，更是「代码生产的中介」。如果一门语言的语法和设计能最大化发挥 LLM 的推理与生成能力，人机协作的效率将被极大提升。&lt;/p&gt; 
&lt;p&gt;因此，&lt;strong&gt;Snow&lt;/strong&gt; 的使命是：让脚本语言不再「让人头疼」，而是「让 LLM 更加从容地书写」。目标受众涵盖 LLM 爱好者、开发者、对编译原理感兴趣的学生，以及对性能有追求的工程师甚至是初学者——每个人都能在 Snow 中找到乐趣与成长。&lt;/p&gt; 
&lt;h2&gt;1.3 文章目的&lt;/h2&gt; 
&lt;p&gt;本文将带你完整体验 Snow 从零到 v0.1 的诞生历程，围绕四个核心目标：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;兴趣驱动的坚持&lt;/strong&gt;：用真实经历激励更多人相信「兴趣是最好的动力」，哪怕工作再忙，也能靠热爱坚持探索。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;从规划到实践的拆解&lt;/strong&gt;：详解在有限资源下，如何一步步拆解出词法分析、语法解析、AST 构建、解释执行等关键模块，以「先可用后完备」为原则，稳步推进。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;经验与反思&lt;/strong&gt;：不仅有「成功输出 1+1=2」的成就感，也有调试死循环、运算符冲突等踩坑经历，全方位展示编程语言设计的挑战与思考。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;激励与号召&lt;/strong&gt;：希望 Snow 成为开源社区的新起点，邀请更多伙伴参与，见证从 v0.2、v1.0 甚至到未来并发、标准库、包管理等更大梦想的实现。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h1&gt;2. 项目缘起与动机&lt;/h1&gt; 
&lt;h2&gt;2.1 现有工具的痛点&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;脚本语言过于灵活，缺乏规范&lt;/strong&gt; 常见的脚本语言如 Python、PHP、Ruby，虽然语法简洁、上手快，但「灵活性」本身也带来了不少隐患：变量类型可以随意变化，作用域和命名规则宽松，团队协作时代码风格极易失控，隐蔽 Bug 难以及时发现。自动化运维和日常数据处理脚本往往随手一写，维护与交接时却漏洞百出、沟通成本高。许多开发者都在思考：如果有一门语法严谨、行为可预测，并天然适合团队协作与 LLM 生成的脚本语言，是不是能让代码质量和工程效率都上一个台阶？&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;缺乏专为 LLM 设计的脚本语言&lt;/strong&gt; 当下主流编程语言，基本都是「为人类程序员」而设计，很少考虑 LLM 的生成和推理习惯。比如：部分语法容易混淆，作用域和可见性规则不直观，LLM 在生成时不仅需要大量提示，结果还常常不理想。缺少一门语法清晰、特征单一、对 LLM 友好的脚本语言，导致自动化和智能生成代码场景下，仍然存在很多不可控和效率瓶颈。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;2.2 触发想法的场景&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;对高效与规范的需求日益突出&lt;/strong&gt; 在实际开发和运维工作中，我们经常要写各种自动化脚本。由于编程语言过于灵活，代码风格极易失控，维护起来痛苦不堪。团队中常常讨论：能否有一门语法严谨、易于规范化、适合团队协作的脚本语言？大家都希望提升代码质量，减少后期返工。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;自研编程语言的大胆设想&lt;/strong&gt; 随着 LLM 在自动化、辅助编程中的应用普及，越来越多场景下希望直接「让 LLM 写代码」。但事实是，不管是让 LLM 生成 Python 还是 PHP，总要写很多提示，还要人工修正各种细节。由此引发思考：如果有一门对 LLM 友好的脚本语言，语法特征清晰、行为可预测，能不能大幅提升代码自动生成与落地的效率？&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;2.3 项目愿景&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;语法严谨、协作友好，降低维护成本&lt;/strong&gt; Snow 的首要目标是打造一门结构清晰、语法规范的编程语言，让团队成员在协作开发、交接维护脚本时，不再被各式各样的「灵活写法」困扰。通过约定明确、易读易写的语法，让代码风格自然统一，极大降低维护与沟通成本。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;为 LLM 生成量身设计，提升自动化与智能化编程体验&lt;/strong&gt; Snow 从设计之初就充分考虑大型语言模型（LLM）的生成与理解特性，语法特征清晰、指令表达直观，方便 LLM 高效、准确地生成编程语言。无论是日常自动化、数据处理，还是和 LLM 配合进行代码批量生产、校验，都能极大提升人机协作效率。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;轻量高效，逐步扩展性能与生态&lt;/strong&gt; 在保证「开箱即用」的体验前提下，Snow 注重执行效率，力争做到比传统解释型脚本更快、资源占用更低。随着版本迭代，将逐步引入并发机制、标准库扩展以及跨平台支持，让 Snow 既可嵌入大型系统、也适合高效开发微服务或日常自动化脚本，最终发展为既利于团队协作，也能支撑 LLM 驱动智能开发的现代编程语言。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h1&gt;3. 开源决策与第一次公开&lt;/h1&gt; 
&lt;h2&gt;3.1 为什么开源&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;获得社区反馈，检验设计思路&lt;/strong&gt;：闭门造车易「自嗨」，开源能快速获得用户和专家的多视角建议。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;边开源边完善，更吸引贡献者&lt;/strong&gt;：功能精简但可用时就发布，容易吸引早期用户参与共建。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;3.2 开源准备工作&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;许可证选择&lt;/strong&gt;： 采用 &lt;a href="https://gitee.com/jcnc-org/snow/blob/main/LICENSE"&gt;Apache-2.0&lt;/a&gt;，最大程度降低贡献门槛。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;3.3 项目运行输出&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-Snow"&gt;## 源代码 (main.snow)
module: Main
    import:Math
    function: main
        parameter:
        return_type: int
        body:
            Math.factorial(6L,1L)

            return 0
        end body
    end function

end module

## 源代码 (test.snow)
module: Math
    function: factorial
        parameter:
            declare n1: long
            declare n2: long
        return_type: long
        body:
           return n1+n2
        end body
    end function
end module

## 编译器输出
### AST
[
  {
    "type": "Module",
    "name": "Main",
    "imports": [
      {
        "module": "Math",
        "type": "Import"
      }
    ],
    "functions": [
      {
        "type": "Function",
        "name": "main",
        "parameters": [
          
        ],
        "returnType": "int",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "Math"
                },
                "member": "factorial"
              },
              "arguments": [
                {
                  "type": "NumberLiteral",
                  "value": "6L"
                },
                {
                  "type": "NumberLiteral",
                  "value": "1L"
                }
              ]
            }
          },
          {
            "type": "Return",
            "value": {
              "type": "NumberLiteral",
              "value": "0"
            }
          }
        ]
      }
    ]
  },
  {
    "type": "Module",
    "name": "Math",
    "imports": [
      
    ],
    "functions": [
      {
        "type": "Function",
        "name": "factorial",
        "parameters": [
          {
            "type": "long",
            "name": "n1"
          },
          {
            "type": "long",
            "name": "n2"
          }
        ],
        "returnType": "long",
        "body": [
          {
            "type": "Return",
            "value": {
              "type": "BinaryExpression",
              "left": {
                "type": "Identifier",
                "name": "n1"
              },
              "operator": "+",
              "right": {
                "type": "Identifier",
                "name": "n2"
              }
            }
          }
        ]
      }
    ]
  }
]
### IR
func main() {
  %0 = CONST 6
  %1 = CONST 1
  %2 = CALL Math.factorial, %0, %1
  %3 = CONST 0
  RET %3
}
func factorial(%0, %1) {
  %2 = ADD_L64 %0, %1
  RET %2
}

### VM code
112 6
152 0
112 1
152 1
162 0
162 1
201 12 2
152 2
111 0
151 3
161 3
255
162 0
162 1
11
152 2
162 2
202
Calling function at address: 12
Return 7
Process has ended


### VM Local Variable Table:
0: 6
1: 1
2: 7
3: 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h1&gt;4. 从 v0.1 到 v0.2 / v1.0 的计划与展望&lt;/h1&gt; 
&lt;h2&gt;4.1 v0.2 初步目标&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;完善变量作用域与高级函数调用&lt;/strong&gt;： 支持函数参数、返回值、本地与全局变量隔离，以及闭包基础，为并发/异步打基础。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;完善错误提示与调试信息&lt;/strong&gt;： 报错更精准，方便新手调试。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;预计发布日期：2025 年 7 月 30 日&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;4.2 v0.3 目标&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;IDE 的支持&lt;/strong&gt; 重构和优化&lt;a href="https://gitee.com/jcnc-org"&gt;JCNC 开源社区&lt;/a&gt;的&lt;a href="https://gitee.com/jcnc-org/JNotepad"&gt;JNotepad&lt;/a&gt;,实现 Snow 官方 IDE 的发布。 &lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-d22e932084b5001fb490fd1b969b9954f74.png" referrerpolicy="no-referrer"&gt; &lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-20483b06cc294637cbe3b20009f0d42ed37.png" referrerpolicy="no-referrer"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-0148d345fbcc1d3c35e8353e1eaf7ae5e01.png" referrerpolicy="no-referrer"&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;4.3 v1.0 长期规划&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;初步标准库&lt;/strong&gt;： I/O、字符串、JSON、文件系统，满足日常脚本需求。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;包管理与模块加载&lt;/strong&gt;： 设计 &lt;code&gt;snowpkg&lt;/code&gt;，支持一键安装依赖、自动模块导入。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;社区协作与贡献&lt;/strong&gt;： 开设设计讨论区、每月线上分享，鼓励贡献代码与案例，让更多人参与 Snow 的成长。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;h1&gt;5. 个人感言与号召&lt;/h1&gt; 
&lt;h2&gt;5.1 学习收获与成就感&lt;/h2&gt; 
&lt;p&gt;回望从零到 v0.1 的历程,我最开始设计了虚拟机,然后设计的编译器，最震撼的是：让一个想法变成可运行的代码，哪怕只输出一句「Hello, Snow!」也足以令人热血沸腾。每一次 Snow 在屏幕上输出，都让我更深刻理解了编译原理的乐趣。&lt;/p&gt; 
&lt;h2&gt;5.2 技术敬畏与情感共鸣&lt;/h2&gt; 
&lt;p&gt;也许有人会说「输出一句话算什么」，但其实，每一个简单的表达式背后，都凝结了无数技术细节：多字符运算符的处理、优先级解析、AST 与符号表、作用域管理、底层 GC 可行性……每一环都让人敬畏计算机科学之美。&lt;/p&gt; 
&lt;h2&gt;5.3 欢迎你的加入&lt;/h2&gt; 
&lt;p&gt;真诚邀请所有对编程语言、编译原理、LLM 应用感兴趣的小伙伴：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;在 Gitee 提交 Issue，反馈使用体验和建议；&lt;/li&gt; 
 &lt;li&gt;Fork 仓库、贡献 PR，参与语法和功能共建；&lt;/li&gt; 
 &lt;li&gt;加入讨论群，与社区探讨 Snow 如何更适配 LLM 未来需求；&lt;/li&gt; 
 &lt;li&gt;撰写教程、录制视频，让更多人了解 Snow 的故事。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt;
 联系方式 (直接和作者对话和加入群聊): 微信: xuxiaolankaka QQ: 1399528359
&lt;/blockquote&gt; 
&lt;p&gt;对于从未写过语言的初学者，我想说：&lt;strong&gt;不要害怕，从 Hello World 开始，你会发现编译原理其实很有趣。&lt;/strong&gt; 让我们一起，把 Snow 打造为兼顾 LLM 友好和人类易用的创新编程语言。也许，下一个改变编程世界的创举，就在我们手中诞生。&lt;/p&gt; 
&lt;hr&gt; 
&lt;blockquote&gt;
 &lt;strong&gt;致谢&lt;/strong&gt; 感谢每一位为 Snow 提出建议、陪我深夜调试的朋友。是你们的批评与鼓励，让 Snow 一路成长。让我们共同期待 Snow 走得更远、更高、更强！
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353986</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353986</guid>
      <pubDate>Fri, 09 May 2025 09:31:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>小米 Mi-BRAG 获中国信通院可信 AI RAG 评估最高等级</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;小米技术官博&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2Fttarticle%2Fp%2Fshow%3Fid%3D2309405174583971152010" target="_blank"&gt;发文称&lt;/a&gt;，2025 年 5 月，小米自研智能知识库问答框架—Mi-BRAG 顺利通过中国信息通信研究院（以下简称「中国信通院」）组织的「可信 AI 检索增强生成（RAG）」评估，并获当前最高评级 4+级。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img alt="" height="423" src="https://oscimg.oschina.net/oscnet/up-191f17da83d85c142df6d2a600df8a7defc.jpg" width="300" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Mi-BRAG 是小米大模型团队自主研发的智能知识库问答框架，该框架通过四大核心技术体系重构知识处理范式，支持多场景定制化的智能知识问答技术方案。目前 Mi-BRAG 已在公司多个场景中落地，包括小爱同学的个人信息问答、汽车问答助手、商品问答等。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此次评估依据中国信通院发布的《检索增强生成技术要求与评估方法》标准进行，该标准体系覆盖 RAG 技术的两大核心能力（技术能力与应用能力）、六个关键能力子域及二十余项能力项。在 25 项能力评估中，Mi-BRAG 表现亮眼，23 项能力获得 5 分，尤其在知识接入、检索、生成、优化等核心技术能力，以及调用方式、安全性等应用能力上均获满分。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此外，2025 年 4 月 Mi-BRAG 在第三方评测机构 SuperCLUE-RAG 的评估中取得第一名的成绩。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="282" src="https://oscimg.oschina.net/oscnet/up-5354364f22a2508bca43054664501042fda.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353981</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353981</guid>
      <pubDate>Fri, 09 May 2025 09:13:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Gitee Test：驱动软件工厂 DevSecOps 落地，保障关键领域安全稳定</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;作者：Gitee DevSecOps 团队，李颖萍，罗婷&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;在国家关键领域，软件系统已成为核心战斗力的重要组成部分。然而，与通用商业软件不同，关键领域软件在安全性、复杂性、实时性、保密性等方面都提出了极高要求。如何在保障安全合规的前提下，提升测试效率、确保系统稳定，成为当前软件质量保障体系中的核心挑战。&lt;/p&gt; 
&lt;p&gt;本文将围绕关键领域软件测试的主要痛点展开分析，并介绍 Gitee Test 在应对这些挑战中的实践探索与技术能力。&lt;/p&gt; 
&lt;h2&gt;关键领域软件测试的痛点与挑战&lt;/h2&gt; 
&lt;h3&gt;安全合规要求极高&lt;/h3&gt; 
&lt;p&gt;关键领域软件涉及国家军事机密和安全，需要严格遵循信息安全等级保护、关键领域行业安全规范等多项安全标准和法规。测试过程中需对每个功能模块、每行代码进行深度安全审查，确保无安全漏洞或隐患。由于安全标准复杂多变，测试人员需不断学习更新知识，以满足合规要求。&lt;/p&gt; 
&lt;h3&gt;系统复杂性大&lt;/h3&gt; 
&lt;p&gt;关键领域软件通常集成多种复杂系统，包括硬件、操作系统、通信协议等。系统间交互复杂，可能引发兼容性和潜在故障问题。例如，不同硬件型号可能影响软件性能，不同操作系统版本可能导致功能异常。此外，关键领域软件还可能与指挥控制、情报分析等军事系统集成，进一步增加测试复杂性。&lt;/p&gt; 
&lt;h3&gt;数据保密性强&lt;/h3&gt; 
&lt;p&gt;关键领域软件处理大量敏感军事数据，数据保密性至关重要。测试环境搭建及测试数据使用管理需采取严格保密措施，防止数据泄露。实际操作中，完全保障数据安全非常困难，数据泄露将带来严重后果。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;Gitee Test 如何应对关键领域软件测试挑战&lt;/h2&gt; 
&lt;h3&gt;用例一站式管理&lt;/h3&gt; 
&lt;p&gt;Gitee Test 专注解决用例沉淀难题，提供强大的用例库管理功能。测试团队能快速前置数据、步骤和结果，实现用例高效维护。支持脑图视图，使用例结构直观，便于团队理解和维护。&lt;/p&gt; 
&lt;p&gt;用户可直接在脑图中添加、删除、修改用例，大幅提升用例创建和更新速度，确保测试用例与最新产品需求保持同步，避免频繁切换界面或工具。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0606/171100_hd0h_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;详尽规划与执行&lt;/h3&gt; 
&lt;p&gt;系统提供清晰完善的测试计划制定和跟踪流程。测试团队可制定详尽测试计划，明确任务分配，并记录测试任务与需求或开发任务的对应关系，确保测试紧扣需求开展。借助实时进度更新，团队能精准掌控测试阶段进展，及时了解完成情况、问题及隐患。&lt;/p&gt; 
&lt;p&gt;一旦发现延误风险，可迅速调整资源或协调相关部门，保障测试与开发同步，减少重复劳动和时间浪费，提高软件交付效率和质量。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0606/171112_VWk6_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;多维度质量分析&lt;/h3&gt; 
&lt;p&gt;系统内置丰富组件模板，功能齐全，满足多场景需求，且支持用户自定义测试报告模板。完成设置后，系统自动生成详尽准确的测试报告。通过多维度统计指标，如用例覆盖率、缺陷密度、缺陷趋势等，帮助团队全面了解软件质量状况。测试报告支持识别质量瓶颈，分析缺陷根因，制定优化措施，助力提升软件稳定性和用户体验。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0606/171122_RNFe_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;总结与展望&lt;/h2&gt; 
&lt;p&gt;关键领域软件测试面临安全合规要求高、系统复杂、实时性强、数据保密性严和测试成本高等多重挑战。实际应用表明，Gitee Test 在提升测试效率、降低成本、发现并解决软件问题方面取得显著成效。&lt;/p&gt; 
&lt;p&gt;随着国内关键领域发展，对软件质量和安全要求日益提升。Gitee Test 将持续技术创新和功能升级，满足关键领域测试需求。未来将加强人工智能、大数据等新兴技术应用，提升测试智能化水平；完善安全扫描规则和算法，应对复杂安全威胁；拓展云测试服务，为关键领域企业提供更加便捷、高效的国产化测试解决方案。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:left"&gt;Gitee DevSecOps 的现代化研发生态&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;Gitee DevSecOps 是一站式国产化研发与交付平台，集成了代码托管（Code）、项目协作（Team）、持续集成（CI）、持续部署（CD）、代码安全（Scan）、数据洞察（Insight）等多项能力，致力于打造具备全生命周期管控能力的现代软件工厂。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0523/174619_MpFL_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgitee.cn%2Ffactory" target="_blank"&gt;https://gitee.cn/factory&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;平台设计充分考虑关键领域行业对安全性、可控性、合规性的极高要求，具备以下核心特征：&lt;/p&gt; 
&lt;ul style="list-style-type:disc; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;国产化适配与私有化部署能力：全面兼容国产操作系统与基础设施，支持灵活部署于内网环境，保障数据主权；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;全流程 DevSecOps 管控体系：代码从提交、审核、构建、扫描、部署到发布全流程可视、可追溯、安全可控；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;模块化产品结构：各能力模块（如 Code、Team、Repo、Pipe、Scan、Insight 等）可灵活组合、渐进集成，适配多样化团队与流程要求；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;深度可观测与度量体系：内置研发效能度量与数据洞察引擎，支撑管理者宏观掌控项目态势与交付健康度。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0516/162046_MD15_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;在多个国家级重大项目与关键领域单位落地实践中，Gitee DevSecOps 已成为构建「自主、可控、高效、安全」的软件工程体系的重要基石。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-825957ffbed1798ea7b6a37079fd6c99d18.gif" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353978</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353978</guid>
      <pubDate>Fri, 09 May 2025 09:11:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>可灵 AI 月度付费金额连续两月破 1 亿元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;6 月 6 日，快手旗下可灵 AI 上线一周年。快手官网信息显示，可灵 AI 在推出 10 个月之后（即今年 3 月）的年化收入运行率（Annualized Revenue Run Rate）突破 1 亿美金，其今年 4 月和 5 月的月度付费金额均超过 1 亿元。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="310" src="https://oscimg.oschina.net/oscnet/up-b9463ede2c362ab326f9367f3ccb8310a8c.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;从收入构成来看，目前 P（Prosumer）端付费订阅会员贡献可灵 AI 将近 70% 的营业收入。P 端付费订阅会员指自媒体视频创作者和广告营销从业者等专业用户，他们兼具 C 端用户的传播属性和 B 端用户的付费能力，是目前视频生成大模型的核心受众群体。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;作为全球首个用户可用的 DiT 视频生成模型，可灵 AI 在一年时间内，已累计完成超 20 次迭代，全球用户规模突破 2200 万，为超过 1 万家的企业客户提供 API 服务。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;近日，可灵 AI 还宣布与热门手游《逆水寒》达成深度合作，将 AI 视频生成能力内置于游戏中，上线「图生动图」互动玩法。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353974</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353974</guid>
      <pubDate>Fri, 09 May 2025 09:01:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>破解搜索质量的关键：判断列表的作用</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;作者：来自 Elastic&amp;nbsp;Daniel Wrigley&lt;/p&gt; 
&lt;p&gt;&lt;img height="559" src="https://oscimg.oschina.net/oscnet/up-7653b2bca5b8fe2a261e9f020834cb43f84.png" width="1047" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;探索为什么判断列表（udgment list）是必不可少的、判断的不同类型，以及定义搜索质量的关键因素。&lt;/p&gt; 
&lt;p&gt;Elasticsearch 拥有大量新功能，帮助你为你的使用场景构建最佳的搜索解决方案。现在就深入我们的&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felastic%2Felasticsearch-labs%3Ftab%3Dreadme-ov-file%23python-notebooks%3Fcta%3Dread-notebook%26tech%3Dgithub%26plcmt%3Dcross%2520module%26pg%3Dsearch-labs" target="_blank"&gt;示例笔记本&lt;/a&gt;了解更多内容，开始&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.elastic.co%2Fregistration%3Fonboarding_token%3Dsearch%26cta%3Dcloudregistration%26tech%3Dtrial%26plcmt%3Dcross%2520module%26pg%3Dsearch-labs" target="_blank"&gt;免费云试用&lt;/a&gt;，或者在你的&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Felasticstack.blog.csdn.net%2Farticle%2Fdetails%2F143747798" target="_blank"&gt;本地机器&lt;/a&gt;上试用 Elastic。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;在当今数字时代，搜索引擎是我们获取信息的支柱。无论是网页搜索引擎、电商网站、企业内部搜索工具，还是 RAG （ Retrieval Augmented Generation ）系统，搜索结果的质量直接影响用户的满意度和参与度。但是什么能确保搜索结果符合用户的期望？这就需要判断列表（&lt;strong&gt;judgment list&lt;/strong&gt;） —— 一个用于评估和优化搜索结果质量的工具。在 OpenSource Connections，我们的专家经常帮助客户创建和使用判断列表，以提升用户的搜索体验。本文将探讨判断列表为何必不可少、判断的不同类型，以及定义搜索质量的关键因素。&lt;/p&gt; 
&lt;span id="OSC_h2_1"&gt;&lt;/span&gt; 
&lt;h2&gt;为什么需要判断列表？&lt;/h2&gt; 
&lt;p&gt;判断列表在持续改进搜索结果质量的循环中扮演着关键角色。它们通过提供一组精心整理的评估，来判断搜索结果是否真正满足用户需求，从而为评估搜索相关性提供可靠的基准。如果没有高质量的判断列表，搜索团队将难以解读来自用户和自动化信号的反馈，也就难以验证提升搜索效果的假设。例如，如果某个团队假设混合搜索会提高相关性，并预计点击率（ CTR ）会提升 2%，他们就需要判断列表来对比调整前后的表现，才能得出有意义的结论。&lt;/p&gt; 
&lt;p&gt;这些列表有助于将实验结果建立在客观标准之上，确保在大规模上线之前，改动确实对业务结果有积极影响。通过维护强大的判断列表，搜索团队可以更有信心地进行迭代，从而以结构化、数据驱动的方式优化搜索体验。&lt;/p&gt; 
&lt;p&gt;判断列表是一组搜索查询与其对应结果的相关性评分组合，也被称为测试集合。利用该列表计算的指标可作为衡量搜索引擎性能的基准。以下是判断列表不可或缺的原因：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;评估搜索算法&lt;/strong&gt;：帮助确定搜索算法是否为给定查询返回了最相关的结果。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;衡量改进或退步&lt;/strong&gt;：当你对搜索引擎进行更改时，判断列表可以量化这些更改对结果质量的影响。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;提供用户满意度洞察&lt;/strong&gt;：通过模拟期望结果，判断列表能让系统性能更贴近用户需求。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;帮助产品开发&lt;/strong&gt;：通过明确产品需求，判断列表支持搜索工程师实现这些目标。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;例如，当用户搜索 「500 美元以下的最佳智能手机」 时，判断列表可以判断结果是否不仅列出了相关产品，还能满足查询中 「价格实惠」 和 「质量优秀」 的意图。&lt;/p&gt; 
&lt;p&gt;判断列表用于离线测试。离线测试可以在不耗费时间进行 A/B 测试等线上实验之前，实现快速、低成本的迭代。理想情况下，结合线上和离线测试可以最大限度地提升实验效率，并确保搜索质量稳步提升。&lt;/p&gt; 
&lt;span id="OSC_h2_2"&gt;&lt;/span&gt; 
&lt;h2&gt;什么是判断？&lt;/h2&gt; 
&lt;p&gt;从本质上讲，判断是一种对某个搜索结果在特定查询下的相关性进行评分的方式。判断主要分为两种类型：&lt;strong&gt;二元判断&lt;/strong&gt;和&lt;strong&gt;等级判断&lt;/strong&gt;。&lt;/p&gt; 
&lt;span id="OSC_h3_3"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;strong&gt;二元判断&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;结果被标记为相关（1）或不相关（0）。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：针对查询 「无线耳机」 返回的产品页面，要么符合查询意图，要么不符合。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：二元判断简单，适用于答案明确的查询。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_4"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;strong&gt;等级判断&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;结果被赋予一个范围内的相关性分数（例如 0 到 3），每个数值表示不同的相关程度： 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;：完全不相关&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;：可能不相关&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;：可能相关&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;：完全相关&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：对于查询 「最适合玩游戏的笔记本电脑」，搜索结果可能评分如下： 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;：专为游戏设计的笔记本电脑页面&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;：可能适合玩游戏的笔记本电脑页面&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;：与游戏相关的配件&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;：与游戏笔记本无关的内容&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;评分也可以是分类而不是数字，例如： 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;完全匹配&lt;/strong&gt;（Exact）&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;可替代&lt;/strong&gt;（Substitute）&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;补充&lt;/strong&gt;（Complement）&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;不相关&lt;/strong&gt;（Irrelevant）&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;使用场景：等级判断适用于需要细致评估相关性的查询，超出 「相关/不相关」 的简单判断。这种方式适合受多个因素影响的相关性场景。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;有些评估指标明确要求使用非二元判断。当我们希望在评估指标中模拟用户特定的信息检索行为和期望时，会使用等级判断。例如：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;增益类指标，如，折扣累计增益（ &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensourceconnections.com%2Fblog%2F2019%2F12%2F09%2Fdemystifying-ndcg-and-err%2F" target="_blank"&gt;DCG&lt;/a&gt; ）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;归一化折扣累计增益（ &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensourceconnections.com%2Fblog%2F2019%2F12%2F09%2Fdemystifying-ndcg-and-err%2F" target="_blank"&gt;nDCG&lt;/a&gt; ）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;预期倒数排名（ &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensourceconnections.com%2Fblog%2F2019%2F12%2F09%2Fdemystifying-ndcg-and-err%2F" target="_blank"&gt;ERR&lt;/a&gt; ）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;这些指标可以建模出用户对结果满意程度存在差异但仍然相关的情况，这对于那些在做决策前进行研究和信息收集的用户特别有用。&lt;/p&gt; 
&lt;span id="OSC_h2_5"&gt;&lt;/span&gt; 
&lt;h2&gt;判断列表示例&lt;/h2&gt; 
&lt;p&gt;我们来看一个用于电商搜索引擎的判断列表示例：&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Query&lt;/th&gt; 
   &lt;th&gt;Result URL&lt;/th&gt; 
   &lt;th&gt;Relevance&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;wireless headphones&lt;/td&gt; 
   &lt;td&gt;/products/wireless-headphones-123&lt;/td&gt; 
   &lt;td&gt;3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;wireless headphones&lt;/td&gt; 
   &lt;td&gt;/products/noise-cancelling-456&lt;/td&gt; 
   &lt;td&gt;3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;best laptops for gaming&lt;/td&gt; 
   &lt;td&gt;/products/gaming-laptops-789&lt;/td&gt; 
   &lt;td&gt;3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;best laptops for gaming&lt;/td&gt; 
   &lt;td&gt;/products/ultrabook-321&lt;/td&gt; 
   &lt;td&gt;2&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;在这个列表中：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;查询 「 wireless headphones 」 用来评估两个产品页面的相关性，分数表示结果满足用户意图的程度。&lt;/li&gt; 
 &lt;li&gt;得分为 3 表示高度相关，非常匹配，而较低的得分表示结果不够理想。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;这种结构化的方法让搜索团队能够客观地评估和优化他们的搜索算法。&lt;/p&gt; 
&lt;span id="OSC_h2_6"&gt;&lt;/span&gt; 
&lt;h2&gt;不同类型的判断&lt;/h2&gt; 
&lt;p&gt;要创建一个 judgment list，你需要评估搜索结果的相关性，而这个评估可以来自不同的来源。每种类型都有其优点和局限性：&lt;/p&gt; 
&lt;span id="OSC_h3_7"&gt;&lt;/span&gt; 
&lt;h3&gt;1. 明确判断&lt;/h3&gt; 
&lt;p&gt;由人工评估者根据预定义的指南来评估搜索结果。通常会优先选择领域专家（Subject Matter Experts - SMEs）作为评估者，因为他们具备专业知识。明确判断具有很高的准确性和细致的洞察力，但也存在一些挑战。它在评估文档对查询的实际相关性方面非常有效。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;优点：&lt;/strong&gt; 准确性高、能细致理解意图、能解释复杂查询。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;局限性：&lt;/strong&gt; 对于大规模数据集来说耗时高、成本高，并存在一些挑战。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;挑战：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;差异性&lt;/strong&gt;：不同评估者可能对同一结果的判断不同，造成不一致。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;位置偏差&lt;/strong&gt;：排名靠前的结果往往被认为更相关，无论其实际质量如何。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;专业程度&lt;/strong&gt;：并非所有评估者都具有相同的领域或技术知识，可能导致不准确。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;理解偏差&lt;/strong&gt;：用户意图或查询背后的信息需求可能不清晰或难以理解。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;多任务处理&lt;/strong&gt;：评估者可能同时处理多个任务，导致注意力不集中。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;疲劳&lt;/strong&gt;：判断过程可能较耗神，随着时间推移判断质量下降。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;实际相关性 vs 感知相关性&lt;/strong&gt;：一些结果乍看似乎相关（例如误导性的产品图片），但仔细审查后并不相关。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;可扩展性&lt;/strong&gt;：随着数据集增长，如何高效收集足够的判断成为一个后勤难题。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;最佳实践：&lt;/strong&gt;&lt;br&gt; 为应对这些挑战，请遵循以下指南：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;明确定义信息需求和任务，减少评估者评分的差异。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;对评估者进行充分培训，并提供详细指导。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;避免在列表视图中进行判断，以减少位置偏差。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;比较不同群体（例如领域专家 vs 一般评估者）的判断结果，找出差异。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用众包或专业评估机构来高效扩展评估流程。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_8"&gt;&lt;/span&gt; 
&lt;h3&gt;2. 隐式判断&lt;/h3&gt; 
&lt;p&gt;隐式判断是通过用户行为数据推断得出的，例如点击率（click-through rates - CTR）、停留时间和跳出率。虽然它们具有显著优势，但也面临一些独特挑战。除了相关性，隐式判断还能反映与用户偏好相关的搜索结果质量因素（例如价格、配送时间），以及能满足用户某些需求或吸引用户注意的因素（例如产品的可持续性特征）。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;优点：&lt;/strong&gt; 可扩展且基于真实使用场景，可在无需人工干预的情况下收集大量数据。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;局限性：&lt;/strong&gt; 容易受到偏差等问题影响，降低判断的可靠性。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;挑战：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;点击数据较嘈杂&lt;/strong&gt;：用户可能因搜索结果页面信息缺失或不清晰而点击某结果，而非因为该结果真正相关。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;偏差&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;位置偏差&lt;/strong&gt;：用户更倾向于点击排名靠前的结果，而不考虑实际相关性。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;展示偏差&lt;/strong&gt;：用户无法点击未展示的内容，导致一些潜在相关结果缺乏交互数据。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;概念偏差&lt;/strong&gt;：例如，在网格视图中，用户往往更频繁地与边缘位置的结果交互。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;稀疏性问题&lt;/strong&gt;：像 CTR 这样的指标在数据较少时容易失真（例如仅 1 次展示和 1 次点击时 CTR = 1.0）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;无自然扩展点&lt;/strong&gt;：基本模型如 CTR 缺乏处理复杂用户行为或反馈的机制。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;最佳实践：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;为缓解上述挑战并最大化隐式判断的价值，请遵循以下方法：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;避免过度依赖容易受位置偏差影响的指标&lt;/strong&gt;：将隐式信号与其他数据点结合使用，形成更全面的评估方式。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;将隐式判断与明确反馈进行比对&lt;/strong&gt;：将用户行为数据与人工评分的相关性数据对比，识别一致性与偏差。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;谨慎训练模型&lt;/strong&gt;：使用能&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dwa88XShl7hs" target="_blank"&gt;考虑用户行为数据偏差并整合不同信号（如点击与购买）的模型来训练&lt;/a&gt;，以减少偏差影响并提升评估质量。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_9"&gt;&lt;/span&gt; 
&lt;h3&gt;3. AI 生成的判断&lt;/h3&gt; 
&lt;p&gt;AI 生成的判断利用大型语言模型（LLMs），如 OpenAI 的 GPT-4o，对查询-文档对进行评判。这种判断因其可扩展性和成本效益正在逐渐流行。LLMs 作为评判者能较好地捕捉文档对给定查询的实际相关性。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;优点：&lt;/strong&gt; 成本效益高、可扩展、在大规模数据集上保持一致，能快速评估大量结果。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;局限性：&lt;/strong&gt; AI 生成的判断可能缺乏特定上下文理解，带有训练数据中的偏见，且对极端案例处理不佳。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;挑战：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;训练数据偏差&lt;/strong&gt;：AI 模型的输出质量取决于训练数据，可能继承或放大偏见。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;上下文细微差别&lt;/strong&gt;：AI 可能难以处理需要人类理解的主观或模糊查询。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;可解释性&lt;/strong&gt;：理解模型为何做出特定判断较困难，降低系统信任度。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;可扩展性权衡&lt;/strong&gt;：虽然 AI 容易扩展，但确保所有评估质量需要大量计算资源和可能的微调。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;成本&lt;/strong&gt;：虽然 LLM 判断可扩展，但并非免费，应密切监控费用。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;最佳实践：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;为应对这些挑战并充分利用 AI 生成的判断，请采取以下措施：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;融入人工监督&lt;/strong&gt;：定期将 AI 判断与人工明确评估进行比对，发现错误和极端案例，并用此信息优化提示词。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;提升可解释性&lt;/strong&gt;：使用可解释 AI 技术提升对 LLM 决策的理解和信任，让 LLMs 在提示中解释其判断理由。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;优化计算资源&lt;/strong&gt;：投资平衡可扩展性与成本效益的基础设施。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;结合其他判断类型&lt;/strong&gt;：将 AI 生成判断与显式和/或隐式判断结合，形成全面的评估体系。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;提示词设计&lt;/strong&gt;：花时间优化提示词，即使是小改动也能显著提升判断质量。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_10"&gt;&lt;/span&gt; 
&lt;h2&gt;搜索质量的不同因素&lt;/h2&gt; 
&lt;p&gt;不同类型的判断涵盖搜索质量的不同方面或因素。我们可以将搜索结果质量因素分为三类：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;搜索相关性：&lt;/strong&gt; 衡量文档与查询中表达的信息需求的匹配程度。例如： 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;二元判断：文档是否满足查询（相关或不相关）？&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;分级判断：文档在细微尺度上满足查询的程度如何？&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;显式判断和 AI 生成的判断在捕捉搜索相关性方面表现良好。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;相关性因素：&lt;/strong&gt; 关注文档是否符合特定用户偏好。例子包括： 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;价格：结果是否负担得起或在指定范围内？&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;品牌：是否属于用户偏好的品牌？&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;可用性：物品是否有库存或可立即使用？&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;隐式判断能够很好地捕捉相关性因素。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&amp;nbsp;满足度方面：&lt;/strong&gt; 超越相关性和偏好，考虑文档如何契合更广泛的用户价值或目标。例子包括： 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;可持续性：产品或服务是否促进环境责任？&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;道德规范：公司或提供商是否以公平贸易或道德标准著称？&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;满足度方面是最难以衡量和量化的。了解你的用户是关键，而隐式反馈是朝这个方向迈进的最佳方式。注意隐式反馈中的偏见，并采用技术尽可能地对抗这些偏见，例如&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutu.be%2Fwa88XShl7hs%3Fsi%3D7aao9oQzBSdmwazk" target="_blank"&gt;在基于隐式反馈建模判断时&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;通过系统地解决这些因素，搜索系统能够确保对结果质量进行全面的评估和提升。&lt;/p&gt; 
&lt;span id="OSC_h2_11"&gt;&lt;/span&gt; 
&lt;h2&gt;判断列表在搜索质量改进周期中的位置&lt;/h2&gt; 
&lt;p&gt;搜索质量改进是一个迭代过程，涉及评估和优化搜索算法以更好地满足用户需求。判断列表在&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensourceconnections.com%2Fblog%2F2023%2F10%2F18%2Fcontinuous-experimentation-for-search-improvement%2F" target="_blank"&gt;离线实验中（下图中较小的左侧循环）起着核心作用&lt;/a&gt;，在这里，搜索结果根据预定义的相关性评分进行测试，不涉及实时用户。这使团队能够对性能进行基准测试，识别弱点，并在部署更改之前进行调整。离线实验是一种快速且低风险的方式，用于探索潜在改进，然后再在在线实验中验证。&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="601" src="https://oscimg.oschina.net/oscnet/up-5d05cc72ded9f9712795bd343568c5a2d69.png" width="1269" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在线实验（较大、右侧循环）利用实时用户交互，如 A/B 测试，收集对系统更新的真实反馈。离线实验通过判断列表确保基础质量，在线实验捕捉动态的现实细节和用户偏好。两者相辅相成，构成了一个全面的搜索质量改进框架。&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img src="https://www.elastic.co/search-labs/_next/image?url=https%3A%2F%2Fcdn.sanity.io%2Fimages%2Fme0ej585%2Fsearch-labs-import-testing%2F0d0f5a038c7d1e6f4077e669f6f6dd829b4df632-1600x1211.png&amp;amp;w=3840&amp;amp;q=75" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
  来源：Peter Fries。《 
 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhaystackconf.com%2F2018%2Fsearch-quality%2F" target="_blank"&gt;搜索质量 —— 以业务为导向的视角&lt;/a&gt;》。 
&lt;/div&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h2_12"&gt;&lt;/span&gt; 
&lt;h2&gt;创建判断列表的工具&lt;/h2&gt; 
&lt;p&gt;创建判断列表的核心是一个标注任务，最终目的是为查询-文档对添加相关性标签。现有的一些服务包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapp.quepid.com%2F" target="_blank"&gt;Quepid&lt;/a&gt;：一个开源解决方案，支持从创建查询集到用判断列表衡量搜索结果质量的整个离线实验生命周期，判断列表可在 Quepid 中创建。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flabelstud.io%2F" target="_blank"&gt;Label Studio&lt;/a&gt;：一个数据标注平台，主要用于生成训练数据或验证 AI 模型。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faws.amazon.com%2Fde%2Fsagemaker-ai%2Fgroundtruth%2F" target="_blank"&gt;Amazon SageMaker Ground Truth&lt;/a&gt;：一个云服务，提供数据标注以在机器学习生命周期中应用人工反馈。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fprodi.gy%2F" target="_blank"&gt;Prodigy&lt;/a&gt;：一个完整的数据开发体验，带有数据标注功能。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_13"&gt;&lt;/span&gt; 
&lt;h2&gt;展望未来：使用 Quepid 创建判断列表&lt;/h2&gt; 
&lt;p&gt;这篇文章是搜索质量评估系列的第一篇。下一篇我们将深入讲解如何使用一个叫 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapp.quepid.com%2F" target="_blank"&gt;Quepid&lt;/a&gt; 的特定工具一步步创建显式判断。Quepid 简化了构建、管理和完善判断列表的流程，使团队能够协作提升搜索质量。敬请期待关于如何利用这个工具提升搜索结果质量的实用技巧和见解。&lt;/p&gt; 
&lt;span id="OSC_h2_14"&gt;&lt;/span&gt; 
&lt;h2&gt;总结&lt;/h2&gt; 
&lt;p&gt;判断列表是搜索质量评估的基石，提供了衡量性能和指导改进的可靠基准。通过结合显式、隐式和 AI 生成的判断，组织能够全面覆盖搜索质量的多方面 —— 从相关性和准确性到个性化和多样性。结合这些方法可以确保一个全面且稳健的评估策略。&lt;/p&gt; 
&lt;p&gt;投入完善的搜索质量策略不仅提升用户满意度，还能让你的搜索系统成为可信赖的工具。无论你是在管理搜索引擎还是优化内部搜索功能，认真对待判断和搜索质量因素对成功至关重要。&lt;/p&gt; 
&lt;p&gt;与 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensourceconnections.com%2F" target="_blank"&gt;Open Source Connections&lt;/a&gt; 合作，提升你的搜索能力，赋能团队持续进化。我们有全球客户成功案例，持续带来搜索质量、团队能力和业务绩效的显著提升。欢迎&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensourceconnections.com%2Fcontact%2F" target="_blank"&gt;联系我们&lt;/a&gt;了解更多。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;原文：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fsearch-labs%2Fblog%2Fjudgment-lists" target="_blank"&gt;Cracking the code on search quality: The role of judgment lists - Elasticsearch Labs&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/3343882/blog/18513695</link>
      <guid isPermaLink="false">https://my.oschina.net/u/3343882/blog/18513695</guid>
      <pubDate>Fri, 09 May 2025 08:47:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>智源研究院推出 Emu3 等「悟界」系列大模型</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;继「悟道」系列大模型之后，智源研究院推出「悟界」系列大模型。其中包括原生多模态世界模型 Emu3、脑科学多模态通用基础模型见微 Brainμ、跨本体具身大小脑协作框架 RoboOS 2.0 与具身大脑 RoboBrain 2.0 以及全原子微观生命模型 OpenComplex2。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;其中，Emu3 旨在让机器更好地理解和感知世界，通过整合不同类型的数据，如视觉、听觉和触觉等，为未来的智能应用提供更为丰富的基础。Brainμ 基于 Emu3 架构，引入脑信号这一新的模态数据，实现了单一模型完成多种神经科学任务的大一统。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;RoboOS 2.0 与 RoboBrain 2.0 在初代版本基础上，原有性能大幅提升，并新增多机协作规划与物理常识驱动的空间推理能力。OpenComplex2 可在原子分辨率层面捕捉分子相互作用及平衡构象，探索微观构象波动与宏观生物功能的跨尺度关联。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;根据介绍，Emu3 基于下一个 token 预测范式统一多模态学习，无需扩散模型或组合式架构的复杂性，通过研发新型视觉 tokenizer 将图像/视频编码为与文本同构的离散符号序列，构建模态无关的统一表征空间，实现文本、图像、视频的任意组合理解与生成。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Emu3 支持多模态输入、多模态输出的端到端映射，验证了自回归框架在多模态领域的普适性与先进性，为跨模态交互提供了强大的技术基座。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="281" src="https://oscimg.oschina.net/oscnet/up-84c03e83183cb3e6fbfe38f5c40eb7dc805.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;基于 Emu3 的底层架构，将 fMRI、EEG、双光子等神经科学与脑医学相关的脑信号统一 token 化，利用预训练模型多模态对齐的优势，可以实现多模态脑信号与文本、图像等模态的多向映射，并实现跨任务、跨模态、跨个体的统一通用建模，以单一模型完成多种神经科学的下游任务。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Brainμ整合了神经科学领域多个大型公开数据集和多个合作实验室的高质量神经科学数据，完成了超过 100 万单位的神经信号预训练，模型可以支持神经科学领域从基础研究到临床研究和脑机接口应用的不同方向，有望成为脑科学的 「AlphaFold」模型。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;更多详情可&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FclAKUO1EcL9fDw1OqF1Kkw" target="_blank"&gt;查看官方公告&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353960</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353960</guid>
      <pubDate>Fri, 09 May 2025 08:31:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>UFO² —— 桌面 AgentOS</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                            &lt;p&gt;UFO 现已升级为&lt;strong style="color:#404040"&gt;UFO²&lt;/strong&gt;（Desktop AgentOS），这是可在 Windows 桌面操作系统上运行的新一代代理框架。它旨在跨多个应用程序&lt;strong style="color:#404040"&gt;自动化&lt;/strong&gt;和&lt;strong style="color:#404040"&gt;协调&lt;/strong&gt;任务，使用户能够使用自然语言命令与其操作系统无缝交互，而不仅仅是&lt;strong style="color:#404040"&gt;UI 自动化&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img height="310" src="https://static.oschina.net/uploads/space/2025/0427/143355_ifCv_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

&lt;h2 style="text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#404040"&gt;关键功能&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;div style="text-align:start"&gt;
&lt;table border="1" cellspacing="0" class="docutils" style="border-collapse:collapse; border-spacing:0px; border:1px solid #e1e4e5 !important; box-sizing:border-box; display:block; empty-cells:show; margin-bottom:24px; overflow:auto; width:696.458px"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;特性&lt;/span&gt;&lt;/th&gt;
&lt;th style="white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;描述&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="background-color:#f3f6f6; border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:0px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;strong style="color:#404040"&gt;Deep OS&amp;nbsp;&lt;/strong&gt;&lt;span style="color:#404040"&gt;&lt;strong&gt;集成&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td style="background-color:#f3f6f6; border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:1px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;结合 Windows UIA、Win32 和 WinCOM，实现一流的控制检测和本机命令。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:0px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;&lt;strong&gt;画中画桌面&lt;/strong&gt;&amp;nbsp;（即将推出）&lt;/span&gt;&lt;/td&gt;
&lt;td style="border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:1px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;自动化在沙盒虚拟桌面中运行，因此您可以继续使用主屏幕。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="background-color:#f3f6f6; border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:0px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;a href="https://microsoft.github.io/UFO/automator/overview/"&gt;&lt;strong&gt;Hybrid GUI + API Actions&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style="background-color:#f3f6f6; border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:1px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;在可用时选择本机 API，在不可用时则回退到点击/击键——快速且强大。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:0px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;a href="https://microsoft.github.io/UFO/advanced_usage/multi_action/"&gt;&lt;strong&gt;Speculative Multi‑Action&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style="border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:1px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;将几个预测步骤捆绑到一次 LLM 调用中，并进行实时验证——查询量&lt;strong&gt;减少高达 51%&lt;/strong&gt;。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="background-color:#f3f6f6; border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:0px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;a href="https://microsoft.github.io/UFO/advanced_usage/reinforce_appagent/overview/"&gt;&lt;strong&gt;Continuous Knowledge Substrate&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style="background-color:#f3f6f6; border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:1px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;通过 RAG 混合文档、Bing 搜索、用户演示和执行跟踪，供代理随着时间推移进行学习。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="border-bottom:0px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:0px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;&lt;a href="https://microsoft.github.io/UFO/advanced_usage/control_detection/hybrid_detection/"&gt;&lt;strong&gt;UIA+视觉控制检测&lt;/strong&gt;&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td style="border-bottom:0px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:1px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;使用混合 UIA + 视觉管道检测标准和自定义控件。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h2 style="text-align:start"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span style="color:#404040"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#fcfcfc"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;架构概述&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img height="329" src="https://static.oschina.net/uploads/space/2025/0427/143509_ctMS_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

&lt;p style="margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#404040"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#fcfcfc"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;UFO² 作为&lt;strong&gt;桌面代理操作系统&lt;/strong&gt;运行，包含一个多代理框架，其中包括：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ol style="margin-left:0; margin-right:0"&gt;
&lt;li&gt;&lt;strong&gt;HostAgent &lt;/strong&gt;—&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;解析自然语言目标，启动必要的应用程序，启动/协调 AppAgents，并引导全局有限状态机 (FSM)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AppAgents&lt;/strong&gt;&amp;nbsp;— 每个应用程序一个；每个运行一个 ReAct 循环，具有多模式感知、混合控制检测、检索增强知识以及在 GUI 操作和本机 API 之间进行选择的&lt;strong&gt;Puppeteer&lt;/strong&gt;执行器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;知识基础&amp;nbsp;&lt;/strong&gt;— 将离线文档、在线搜索、演示和执行跟踪融合到可在推理时动态检索的矢量存储中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推测执行器&amp;nbsp;&lt;/strong&gt;— 通过预测批量可能的操作并一次性根据实时 UIA 状态进行验证，大幅减少 LLM 延迟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;画中画桌面&lt;/strong&gt;&amp;nbsp;&lt;em&gt;（即将推出）&lt;/em&gt;— 在独立的虚拟桌面中运行代理，这样您的主工作区和输入设备就不会受到影响。&lt;/li&gt;
&lt;/ol&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/microsoft-ufo</link>
      <guid isPermaLink="false">https://www.oschina.net/p/microsoft-ufo</guid>
      <pubDate>Fri, 09 May 2025 08:00:00 GMT</pubDate>
    </item>
    <item>
      <title>谷歌搜索「AI 模式」可提供数据可视化和自定义图表支持</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;谷歌搜索「AI 模式」现在可以提供数据可视化和自定义图表支持&lt;span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"&gt;，让用户能用自然语言提示分析复杂数据集和创建自定义图表。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.google%2Fproducts%2Fsearch%2Fai-mode-data-visualization%2F" target="_blank"&gt;据介绍&lt;/a&gt;，更新后的&lt;/span&gt;「AI 模式」&lt;span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"&gt;能比较分析特定时期的信息，生成交互式图表并提供全面解释，借助 Gemini 多模式功能和多步骤推理方法理解问题意图，访问相关历史和实时信息，还能在图表生成后选择时间段提后续问题。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;例如，您无需手动研究单个公司及其股价，而是可以使用 AI 模式比较特定年份不同公司的股票表现。图表生成后，您可以使用鼠标光标选择所需的时间段，并根据呈现的数据提出后续问题。这些用于财务查询的新数据可视化可供&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flabs.google.com%2Fsearch%2Fexperiment%2F22" target="_blank"&gt;在实验室中启用 AI 模式实验&lt;/a&gt;的用户使用。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1454" src="https://static.oschina.net/uploads/space/2025/0606/150602_Vutt_2720166.png" width="2176" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;5 月 20 日，谷歌在 I/O 大会上正式&lt;a href="https://www.oschina.net/news/350975/google-search-ai-mode-update" target="_blank"&gt;宣布&lt;/a&gt;谷歌搜索&lt;strong&gt;「AI Mode」（AI 模式）&lt;/strong&gt;面向美国市场全面上线。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-c9869b0fb5d8a6f2ee4277970e616b67169.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;AI Mode 是 Google 搜索中的一个新选项卡，允许用户使用 Gemini AI 聊天机器人进行网络搜索，支持自然语言多轮对话式搜索。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;AI Mode 基于 Gemini 2.5 打造，利用 "query fan-out" 技术将用户问题分解为更小的部分，同时在多样化来源中启动搜索，组装详细答案并提供相关来源。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353943/google-search-ai-mode-data-visualization</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353943/google-search-ai-mode-data-visualization</guid>
      <pubDate>Fri, 09 May 2025 07:16:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>2025 年 AI 面试工具：提升招聘效率的助手</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#000000; text-align:left"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2025 年,AI 面试软件已成为企业招聘和求职者备战面试的「标配」。从自动化初筛到深度模拟训练,AI 技术正重塑招聘流程。在这场技术变革中,哪些 AI 面试软件最值得关注?本文将介绍 3 款主流产品,解析它们的核心优势与功能。&lt;/p&gt; 
&lt;h3&gt;猎聘·Doris&lt;/h3&gt; 
&lt;p style="color:#000000; text-align:left"&gt;猎聘·Doris 是猎聘自主研发的 AI 面试产品,融合了大语言模型、自然语言处理等前沿技术,覆盖冰山模型 7 个层级的 140+评估维度,可应用于招聘、晋升、试用期评估、人才盘点等全流程人才管理,旨在为企业提供高效、智能、标准化的面试解决方案。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;核心优势&lt;/strong&gt;:&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;精准甄别:面试评价与资深面试官评分一致性大于 95%;全方位智能防作弊作弊检测准确率达 95%。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;智能高效:四步轻松创建 AI 面试,个性化自定义面试官,支持多语言面试,智能输出面试报告,帮助招聘方更加科学有据的筛选人才。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;高性价比:更低成本,更高到面率,为企业节约 90% 以上成本,平均面试执行周期较传统面试,提效 500%&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;‌职徒简历&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;职徒简历是一款智能简历制作工具,专注于帮助求职者高效创建专业简历,并提供从简历优化到面试辅导的全流程求职服务。该平台结合 AI 技术与行业资源,为用户提供海量模板、一键排版、智能评测等功能,旨在提升求职竞争力&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;核心优势&lt;/strong&gt;:&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;智能简历制作:提供超过 10,000 份简历模板,涵盖金融、互联网、快消、房地产等多个行业,适用于应届生、留学生、职场人士等不同求职场景&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;AI 简历优化:基于 200+因子分析模型,对简历进行评分,指出问题并提供优化建议&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;求职辅助服务&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;:&lt;/strong&gt;提供行业专家 1v1 简历修改、面试辅导及职业规划服务&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;壹面&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;壹面是一款 AI 面试工具,旨在通过人工智能技术优化企业招聘流程,提升面试效率。该产品利用自然语言处理 (NLP)、语音识别、情感分析等技术,模拟真实面试场景,为企业提供高效、标准化的初面筛选解决方案&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;核心优势&lt;/strong&gt;:&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;AI 面试官:采用 AI 真人合成技术,生成虚拟面试官,减少求职者与机器交互的不适感&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;智能评估:基于简历与面试回答,评估知识、技能、经验匹配度&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;自动化报告:面试结束后生成 CEL 特质分析报告,包括职业风险预测、胜任力评分等,供 HR 快速筛选&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;AI 面试软件的目标从来不是取代人类智慧,而是作为企业与求职者之间的 「智能桥梁」。将 HR 从海量简历与基础面试的重复劳动中解放,让专业判断聚焦于战略决策与团队适配;同时化身求职者的「数字教练」,帮助候选人展现真实实力与职业潜力。在数字化与人性化深度融合的未来,这场招聘领域的技术变革,终将构建起更高效、更透明、更具温度的职场生态。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353939</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353939</guid>
      <pubDate>Fri, 09 May 2025 07:06:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>智源发布 RoboOS 2.0，支持 MCP 机制</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;北京智源人工智能研究院正式&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FclAKUO1EcL9fDw1OqF1Kkw" target="_blank"&gt;发布&lt;/a&gt;跨本体具身大小脑协作框架 RoboOS 2.0 与具身大脑 RoboBrain 2.0，并全面开源，包括框架代码、模型权重、数据集与评测基准。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;跨本体具身大小脑协作框架 RoboOS 2.0 是全球首个基于具身智能 SaaS 平台、支持无服务器一站式轻量化机器人本体部署的开源框架。同时，RoboOS 2.0 也是全球首个支持 MCP 的跨本体具身大小脑协作框架，旨在构建具身智能领域的「应用商店」生态。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在该框架下，可一键下载并部署来自全球开发者创建的相同型号机器人本体的小脑技能，完成大小脑的无缝整合。RoboOS 2.0 实现了小脑技能的免适配注册机制，显著降低开发门槛，典型场景下，相关代码量仅为传统手动注册方式的 1/10。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;相较于 1.0，RoboOS 2.0 对端到端推理链路进行了系统级优化，整体性能提升达 30%，全链路平均响应时延低至 3ms 以下，端云通信效率提升 27 倍。在功能层面，新增了多本体时空记忆场景图（Scene Graph）共享机制，支持动态环境下的实时感知与建模；同时引入多粒度任务监控模块，实现任务闭环反馈，有效提升机器人任务执行的稳定性与成功率。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img alt="" height="304" src="https://oscimg.oschina.net/oscnet/up-081600d63647d2cafbe1b04f885046a8ecd.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;RoboBrain 2.0 是开源具身大脑大模型。在任务规划方面，RoboBrain 2.0 相比于 RoboBrain 1.0 的基于 Prompt 的多机任务规划机制和初级空间理解能力，进一步扩展了基于多本体-环境动态建模的多机协同规划能力，可实时构建包含本体定位的场景图（Scene Graph），并自动完成跨本体的任务规划。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;实验数据显示，RoboBrain 2.0 的任务规划准确率相较 RoboBrain 1.0 实现了 74% 的效果提升。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在空间智能方面，RoboBrain 2.0 在原有可操作区域（Affordance）感知与操作轨迹（Trajectory）生成能力的基础上，实现了 17% 的性能提升。同时，RoboBrain 2.0 增加了空间推理能力（Spatial Referring），既包含机器人对相对空间位置（如前后、左右、远近）及绝对距离的基础感知与理解能力，也实现了对复杂空间的多步推理能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此外，RoboBrain 2.0 还新增了闭环反馈以及具身智能的深度思考能力。智源方面表示，已与全球 20 多家具身智能企业达成合作，共同打造开放、繁荣、协同的智能机器人生态体系。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353938</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353938</guid>
      <pubDate>Fri, 09 May 2025 06:56:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>ElevenLabs 发布文本转语音模型 Eleven v3（Alpha 版）</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;ElevenLabs&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Felevenlabs.io%2Fv3" target="_blank"&gt;发布&lt;/a&gt;了其最新、最先进的文本转语音模型 Eleven v3 的 Alpha 版本。该模型在生成具有高情感范围和跨多种语言的上下文理解能力的自然、逼真语音方面达到了业界领先水平。&lt;/p&gt; 
&lt;p&gt;Eleven v3 亮点如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;地表最强文本转语音模型之一，能「演戏」的 AI 声音&lt;/li&gt; 
 &lt;li&gt;支持 70+语言（包括中文）、多角色自然对话、情绪和非语言标签控制（如 [sad]、[whispers]）&lt;/li&gt; 
 &lt;li&gt;文本理解力大幅增强，能模拟真实对话中的情感变化与语气中断&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-ec19766cbfba0e31aa01cb50cba3c10daa6.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Eleven v3 特别适用于需要多个角色互动的角色讨论、具有复杂情感传递的长篇旁白（如有声书制作）以及需要自然逼真、情感丰富的对话场景。&lt;/p&gt; 
&lt;p&gt;目前，Eleven v3 模型处于 Alpha 阶段，可能会发生变化，且不适用于对话式 AI 等实时应用。开发者在集成时，建议生成多个样本供用户选择最佳效果。API 访问权限目前尚未公开，需要通过联系销售团队申请。模型 ID 为 eleven_v3，同时提供格式为 eleven_v3_preview_YYYY_MM_DD 的预览版本，以便用户体验最新功能。&lt;/p&gt; 
&lt;p&gt;https://elevenlabs.io/docs/models#eleven-v3-alpha&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353936/eleven-v3-alpha</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353936/eleven-v3-alpha</guid>
      <pubDate>Fri, 09 May 2025 06:50:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>AI 视频生成平台 PixVerse 发布国内版：拍我 AI</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;全球用户量最大的 AI 视频生成平台 PixVerse&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FW2FuLYkhpK1KuoUSA9pE-Q" target="_blank"&gt;正式推出&lt;/a&gt;国内版产品——「拍我 AI」，同步上线网页端及移动端应用，并开放最新 V4.5 模型供用户使用。&lt;/p&gt; 
&lt;p&gt;「拍我 AI」采用「App+网页端」双端策略，满足不同用户群体的需求：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;App 端主打趣味化、低门槛体验，内置百余种创意模板，如「宠物跳舞」「喷火特效」等，用户上传一张照片即可一键生成高质量短视频，极大降低 AI 视频创作的技术门槛。&lt;/li&gt; 
 &lt;li&gt;网页端则面向专业创作者，提供更精细的参数调节功能，支持多主体运动控制、动态运镜及智能音效匹配，适用于短剧制作、广告创意、游戏开发等高阶需求。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;获取地址：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;网页端：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpai.video" target="_blank"&gt;https://pai.video&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;App 端：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpai.video%2Fapp-download" target="_blank"&gt;https://pai.video/app-download&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;（也可各大应用商店搜索「拍我 AI」下载哦~）&lt;/li&gt; 
 &lt;li&gt;API 开放平台：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fplatform.pai.video" target="_blank"&gt;https://platform.pai.video&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0606/143932_gJZQ_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;据了解，PixVerse 自海外上线以来，已累计吸引全球超 6000 万用户，月活跃用户（MAU）突破 1600 万，稳居 AI 视频生成领域第一梯队。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353935</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353935</guid>
      <pubDate>Fri, 09 May 2025 06:40:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>字节跳动发布图像编辑模型 SeedEdit 3.0</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;字节跳动 Seed 团队宣布正式发布了图像编辑模型 SeedEdit3.0，技术报告对外公开，模型同步在即梦网页端开启测试，豆包 App 也即将上线。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;SeedEdit3.0 基于文生图模型 Seedream3.0 开发，通过引入多样化的数据融合方法和特定奖励模型，解决了以往图像编辑模型在主体与背景保持、指令遵循等方面的不足。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;根据介绍，该模型可处理并生成 4K 图像，在精细且自然地处理编辑区域的同时，还能高保真地维持其他信息。尤其针对图像编辑「哪里改与哪里不改」的取舍，该模型表现出更佳的理解力和权衡力，可用率相应提高。当用户需要去掉图片内一众行人，模型不仅可以准确识别并移除场景内的无关人物，连影子也能一并去掉。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;评测结果显示，SeedEdit 3.0 在编辑保持效果、指令响应能力上领先于此前版本 SeedEdit 1.0，以及引入新数据源的 SeedEdit 1.5、进一步加入数据合并策略的 SeedEdit 1.6。对比 Gemini 2.0 和 Step1X，SeedEdit 3.0 也有一定优势。我们同时观察到，GPT-4o 位于右下角，表明其图像保持能力较 SeedEdit 3.0 有差距，但指令遵循更为出色。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="324" src="https://oscimg.oschina.net/oscnet/up-d3986b88e304819cd3a4f853f409a1ac201.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="327" src="https://oscimg.oschina.net/oscnet/up-21b49d3b4f6dc629f8a851e58a6305928f3.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"&gt;在综合测评中，SeedEdit 3.0 的图像保持能力最为突出，保持能力得分达到 4.07 分（满分 5 分），较此前版本 SeedEdit 1.6 得分提升 1.19 分；SeedEdit 3.0 可用率达 56.1%，较 SeedEdit 1.6 绝对值增加 17.46 个百分点。同时，SeedEdit 3.0 的指令遵循、生成质量表现也处于行业前列。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="280" src="https://oscimg.oschina.net/oscnet/up-78252977e4e8b4dfbd8a8829ddcc621107d.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;尽管 SeedEdit 3.0 在图像保持、可用率等方面表现不错，但项目团也承认，其在指令遵循方面仍有一定提升空间。未来除进一步优化编辑性能外，团队还将探索更丰富的编辑操作，让模型拥有连续多图生成、多张图像合成、故事性内容生成等能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;更多详情可&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FkFeUSeC6U0L2wkWXjYzREA" target="_blank"&gt;查看官方公告&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353934</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353934</guid>
      <pubDate>Fri, 09 May 2025 06:36:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>花旗上海、大连 IT 部门裁员 3500 人，补偿金最高达「N+6」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;2025 年 6 月 5 日，花旗集团宣布精简其位于上海和大连的全球技术解决中心，裁员约 3500 名技术人员，同时影响约 500 名第三方人员，预计 2025 年四季度完成调整。&lt;/p&gt; 
&lt;p&gt;据媒体报道，被裁员工在 2025 年 6 月 25 日前签署协商解除协议，公司将支付「N+6」作为离职补偿金，N 为过去 12 个月月平均收入乘以在花旗的服务年限，月平均收入和服务年限均无封顶，加 6 部分基数为 2025 年 5 月基本工资。&lt;/p&gt; 
&lt;p&gt;6 月 26 日—7 月 16 日签约，公司将支付「N+3」作为离职补偿金；7 月 17 日—9 月 19 日签约，公司将支付「N+1」作为离职补偿金。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0606/142909_XjVH_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;花旗称，此番调整旨在帮助技术和业务支持部门推动精简运营的整体战略，包括简化组织架构，降低依赖第三方机构提供的人员和缩减软件数量规模等。该调整已被涵盖在花旗 2025 年度的财务计划当中。&lt;/p&gt; 
&lt;p&gt;在此次调整之外，花旗位于广州的全球技术解决中心—花旗金融信息服务（中国）有限公司广州分公司不受影响。&lt;/p&gt; 
&lt;p&gt;花旗称，花旗金融信息服务（中国）有限公司为花旗在全球的业务提供相关 IT 服务（软件技术开发、测试与维护）和运营服务。一些岗位将不再保留，另一些岗位将整合迁移到花旗全球网络的其他技术解决中心，以贴近所支持的业务与产品。留任员工将负责支持花旗在中国内地及香港市场的业务及发展。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;相关来源&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FnHBdX1frLw1wvojA3AgAkw" target="_blank"&gt;https://mp.weixin.qq.com/s/nHBdX1frLw1wvojA3AgAkw&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F6RLx-HybibgkhkkQSWeXyg" target="_blank"&gt;https://mp.weixin.qq.com/s/6RLx-HybibgkhkkQSWeXyg&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353933</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353933</guid>
      <pubDate>Fri, 09 May 2025 06:29:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>清华大学与蚂蚁集团发布异步强化学习训练平台 AReaL-boba²</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;清华大学与蚂蚁集团 InclusionAI 团队联合发布了一款名为 AReaL-boba²的异步强化学习（RL）训练平台。该平台专为大型语言模型设计，与传统的同步强化学习训练方法相比，它能在保持相似训练结果的同时，大幅缩短训练时间。&lt;/p&gt; 
&lt;p&gt;这得益于 AReaL 中实现的「版本感知」算法，该算法使得异步训练成为可能，并简化了多轮次智能体任务的强化学习过程。&lt;/p&gt; 
&lt;p&gt;AReaL-boba²最大的亮点是完全解耦了模型生成与训练，实现了不间断的流式数据生成和并行训练。在效果不变的前提下，其训练速度达到了上一版本的 2.77 倍。研究团队还在 Qwen3 系列模型的基础上，使用 AReaL-boba²进行强化学习训练，并将相关模型开源。&lt;/p&gt; 
&lt;p&gt;&lt;img height="735" src="https://static.oschina.net/uploads/space/2025/0606/142041_FKjW_2720166.png" width="1000" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在多项编程领域权威基准测试上，强化学习后的 8B 和 14B 参数模型，实现了同尺寸模型中的 SOTA 水准。&lt;/p&gt; 
&lt;p&gt;团队已将该项目的端到端代码、数据集以及一个业界领先的编码模型完全开源。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;开源地址：&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FinclusionAI%2FAReaL%2F" target="_blank"&gt;https://github.com/inclusionAI/AReaL/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;论文链接：&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fpdf%2F2505.24298" target="_blank"&gt;https://arxiv.org/pdf/2505.24298&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;SOTA 模型下载链接：&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fcollections%2FinclusionAI%2Fareal-boba-2-683f0e819ccb7bb2e1b2f2d5" target="_blank"&gt;https://huggingface.co/collections/inclusionAI/areal-boba-2-683f0e819ccb7bb2e1b2f2d5&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353929</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353929</guid>
      <pubDate>Fri, 09 May 2025 06:21:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>OpenAI「宫斗戏」将被改编成电影</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.hollywoodreporter.com%2Fmovies%2Fmovie-news%2Fluca-guadagnino-to-direct-openai-movie-1236236357%2F" target="_blank"&gt;据媒体报道&lt;/a&gt;，亚马逊米高梅影业正在筹备一部聚焦 OpenAI 高层震荡事件的电影，暂命名为《Artificial》。电影将重现 2023 年 11 月那场震惊科技界的"五日政变"——创始人兼 CEO 山姆·奥特曼突遭董事会解雇，又在员工集体抗议下戏剧性复职的全过程。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;影片计划今年夏日在美国旧金山和意大利开拍。主演团队方面，安德鲁·加菲尔德、莫妮卡·巴巴罗、尤拉·鲍里索夫正在为主演角色进行商谈。&lt;/p&gt; 
&lt;p&gt;值得玩味的是，曾担任《周六夜现场》编剧的西蒙·里奇加盟剧本创作，暗示这部作品或将用黑色幽默的笔触，解构这场融合了权力博弈、理想主义碰撞的科技界"宫斗"。&lt;/p&gt; 
&lt;p&gt;当时董事会以"沟通不坦诚"为由罢免奥特曼，却引发 700 名员工联名威胁辞职，最终在微软等资本方介入下，这场闹剧以奥特曼回归收场。现实中的戏剧张力，已然为电影提供了最精彩的剧本蓝本。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353925/the-openai-board-drama-is-reportedly-turning-into-a-movie</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353925/the-openai-board-drama-is-reportedly-turning-into-a-movie</guid>
      <pubDate>Fri, 09 May 2025 06:12:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
  </channel>
</rss>
