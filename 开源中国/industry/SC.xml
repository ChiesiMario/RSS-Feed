<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-综合资讯</title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="http://8.134.148.166:30044/oschina/news/industry" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-综合资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Tue, 15 Apr 2025 07:35:55 GMT</lastBuildDate>
        <ttl>5</ttl>
        <item>
            <title>理想汽车发布「理想星环 OS 技术架构白皮书」，4 月底开始逐步开放各模块源代码</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;4 月 15 日，理想汽车通过官方网站正式发布&lt;strong&gt;「理想星环 OS 技术架构白皮书」，&lt;/strong&gt;系统阐述汽车操作系统定义、分析发展趋势，结合创新场景案例，详细介绍理想星环 OS 技术架构及核心系统，并公开其开源计划。 &amp;nbsp; &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/152153_kvwb_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;官方介绍称，该白皮书旨在为全球开发者提供技术指导，牵引产业链上下游企业共建理想星环 OS，加速实现从智能系统（Smart System）到智慧系统（Intelligent System）的跨越，向「空间智能操作系统」进化。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/152514_467q_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/152204_oOi8_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;根据白皮书内容，&lt;strong&gt;从 4 月底开始，理想汽车将在官方网站的「开源论坛」逐步开放各模块源代码&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;4 月 23 日开源星环 OS 0.1.0 版本，包括安全实时 RTOS、通信总线-Lite&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;6 月 30 日开源星环 OS 1.0.0 版本，包括完整的智能车控系统、智能驾驶系统基础能力&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;7 月后开源完整的智能驾驶系统，包括虚拟化引擎&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/152220_QMrL_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;附「理想星环 OS 技术白皮书」链接：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.lixiang.com%2Ftech%2Fhaloos&quot; target=&quot;_blank&quot;&gt;https://www.lixiang.com/tech/haloos&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;相关阅读：&lt;a href=&quot;https://www.oschina.net/news/341314&quot; target=&quot;news&quot;&gt;李想官宣开源整车操作系统「星环 OS」&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344690/lixiang-haloos-opensource-comming-soon</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344690/lixiang-haloos-opensource-comming-soon</guid>
            <pubDate>Tue, 15 Apr 2025 07:22:52 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>育碧开源色盲辅助工具 Chroma</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;育碧宣布开源色盲辅助工具 Chroma，官方称其为「&lt;strong&gt;检测游戏中色盲相关问题的一站式解决方案」&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-7819440d465fbba6c632ef6c97401fc8a25.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;开源地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fubisoft%2FUbiChroma&quot; target=&quot;_blank&quot;&gt;https://github.com/ubisoft/UbiChroma&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;根据介绍，Chroma 可将过滤器投射到游戏屏幕上，&lt;strong&gt;模拟各种类型的色盲&lt;/strong&gt;，测试人员能够实时标记可访问性问题。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-97320765b814d48942ecc14258fe7b2d8e9.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;该工具使用 Color Oracle 算法，并可与单屏或双屏设置集成；支持热键，并提供可自定义的覆盖层以调整设置。育碧官方表示，&lt;strong&gt;过滤器不会影响游戏性能&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9338e0fb1d491d875e03988be195bf5e9e2.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;需要注意的是，这款软件模拟了色盲人士玩游戏时的体验，但并不能修复任何问题，只是方便开发者进行适配。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344685/ubisoft-ubichroma</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344685/ubisoft-ubichroma</guid>
            <pubDate>Tue, 15 Apr 2025 07:16:52 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Meta 反垄断案开庭审理，若败诉恐被强制拆分</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;美国联邦贸易委员会（FTC）终于迎来了与 Meta Platforms Inc.对簿公堂的一天，指控该公司十多年前收购 Instagram 和 WhatsApp 之后非法垄断社交媒体市场，因此必须进行拆分。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;287&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-14e9fc559b3fa542876e5b3e95d38218353.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;这起酝酿多年的案件本周一在首席法官 James Boasberg 主持下于华盛顿开庭。FTC 的律师在开庭陈述中援引了美国长期以来倡导维护竞争市场的传统，其牵头的审判律师 Daniel Matheson 指责 Meta 违反了这一原则。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;如果 FTC 胜诉、Instagram 和 WhatsApp 被强制剥离，这两款应用多年以来的整合将功亏一篑，全球最受欢迎的两款数字消费产品将受到冲击，并可能抹去 Meta 数以千亿美元的市值。这也将引发外界对政府如何评估和批准企业并购的严重质疑。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;该案的审理预计将耗时两个月左右，Meta 首席执行官扎克伯格以及前高管 Sheryl Sandberg 最快本周就将出庭作证。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Meta 公司在庭审首日辩称，自己正面临来自多家服务商的激烈竞争，尤其是在社交媒体日益偏向娱乐化而非仅用于与朋友和家庭互动的当下，此外公司还为用户带来了明显的好处。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344674</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344674</guid>
            <pubDate>Mon, 14 Apr 2025 06:29:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>MCP 安全检查清单：AI ⼯具⽣态系统安全指南</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;慢雾科技是全球领先的区块链生态威胁情报公司，旨在帮助区块链生态与 AI 生态相融合的过程中拥有更加深度的安全防护能力及保护用户拥有更高的隐私性。&lt;/p&gt; 
&lt;p&gt;近日，慢雾安全团队发布了一份 MCP 安全检查清单，涵盖了从&lt;strong&gt;用户交互界面、客户端组件、服务插件，到多 MCP 协作机制&lt;/strong&gt;及特定领域（如加密货币场景）的安全要点，旨在帮助开发者系统性地识别潜在风险并及时加以防范。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-573a44275abaa5a34bdb2f9e8a027d3c98b.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;▲ MCP 多组件交互流程与关键风险点示意图&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;随着大模型的迅猛发展，各种新的 AI 工具也在不断涌现，当下代表性的 MCP（Model Context Protocol）标准实现的工具正逐渐成为连接大语言模型（LLM）与外部工具、数据源之间的关键桥梁。&lt;/p&gt; 
 &lt;p&gt;自 2024 年底发布以来，MCP 已被广泛应用于 Claude Desktop、Cursor 等主流 AI 应用中，MCP Server 的各种商店也在不断出现，展现出强大的生态扩展能力。 &amp;nbsp;&lt;/p&gt; 
 &lt;p&gt;然而，MCP 的快速普及也带来了新的安全挑战。当前 MCP 架构中，系统由 Host（本地运行的 AI 应用环境）、Client（负责与 Server 通信与工具调用的组件） 以及 Server（MCP 插件所对应的服务端） 三部分构成。&lt;/p&gt; 
 &lt;p&gt;用户通过 Host 与 AI 交互，Client 将用户请求解析并转发至 MCP Server，执行工具调用或资源访问。在多实例、多组件协同运行的场景下，该架构暴露出一系列安全风险，尤其在涉及加密货币交易或 LLM 自定义插件适配等敏感场景中，风险更为突出，需要适当的安全措施来管理。 &amp;nbsp;&lt;/p&gt; 
 &lt;p&gt;在此背景下，制定和遵循一套全面的 MCP 安全检查清单显得尤为重要。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;完整内容查看：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fslowmist%2FMCP-Security-Checklist%2Fblob%2Fmain%2FREADME_CN.md&quot; target=&quot;_blank&quot;&gt;https://github.com/slowmist/MCP-Security-Checklist/blob/main/README_CN.md&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344672</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344672</guid>
            <pubDate>Mon, 14 Apr 2025 06:21:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>谷歌公布 AI 模型 DolphinGemma，可理解海豚声音</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;谷歌旗下 AI 研究实验室 DeepMind &lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.google%2Ftechnology%2Fai%2Fdolphingemma%2F&quot; target=&quot;_blank&quot;&gt;公布&lt;/a&gt;&lt;/u&gt;了一款名为「DolphinGemma」的 AI 模型，旨在帮助科学家理解海豚的声音，并生成类似海豚的声音序列。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/141017_ey2E_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;DolphinGemma 基于谷歌开放的 Gemma 系列模型构建，其训练数据来源于专注于研究大西洋斑点海豚及其行为的非营利组织 Wild Dolphin Project（WDP）。该模型能够生成类似海豚的声音序列，并且非常高效，谷歌表示其可以在手机上运行。&lt;/p&gt; 
&lt;p&gt;今年夏天，WDP 计划借助谷歌的 Pixel 9 智能手机搭建一个平台，该平台能够合成海豚的声音，并且可以聆听海豚的发声以获得匹配的「回应」。&lt;/p&gt; 
&lt;p&gt;谷歌透露，WDP 此前一直使用 Pixel 6 来进行相关研究工作，而升级到 Pixel 9 后，将使该组织的研究人员能够同时运行 AI 模型和模板匹配算法，从而进一步提升研究效率。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344668/google-ai-dolphingemma</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344668/google-ai-dolphingemma</guid>
            <pubDate>Mon, 14 Apr 2025 06:11:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>中国科学院软件所提出智能合约漏洞检测新模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;近日，中国科学院软件研究所集成创新中心研究团队在智能合约漏洞检测领域取得进展，提出了一种基于精准计算的检测模型，显著提升智能合约漏洞检测的准确性与可解释性。相关成果论文 Smart-LLaMA-DPO: Reinforced Large Language Model for Explainable Smart Contract Vulnerability Detection 被 CCF-A 类软件工程领域国际顶级会议 ISSTA 2025 接收，第一作者为博士生于磊，通讯作者为杨立副研究员与张凤军研究员。&lt;/p&gt; 
&lt;p&gt;随着区块链技术在各领域的广泛应用，智能合约的安全性日益受到重视。当前智能合约的漏洞检测普遍存在两方面问题：一是现有数据集覆盖漏洞类型有限，且缺乏高质量解释标注，导致模型难以精准学习漏洞模式；二是大语言模型对智能合约语义理解不足，易出现误判或解释逻辑错误，难以满足实际漏洞检测需求。&lt;/p&gt; 
&lt;p&gt;针对上述问题，研究团队提出一种智能合约漏洞检测新模型 Smart-LLaMA-DPO。该模型首先基于持续预训练方法，嵌入智能合约语法、安全模式等专业领域知识，创建具有高质量解释标注的数据集。然后以精准计算为核心，即采用监督微调与直接偏好优化策略相结合的多阶段训练方法，通过工程师在漏洞检测中的实践反馈，迭代优化模型输出，确保模型对智能合约语义的充分理解，提升漏洞定位与解释的精准性。此外，还引入了开源大模型进一步训练 Smart-LLaMA-DPO，并支持私有化部署与自动化更新。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;253&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c62efc4141ba6a3816b4fec4b0209f31196.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Smart-LLaMA-DPO 模型框架图&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;研究团队在以太坊、Hyperledger Fabric 等主流区块链平台的智能合约公开数据集上进行了大规模测试。实验结果表明，Smart-LLaMA-DPO 在重入漏洞、时间戳依赖等复杂场景下的误报率相较于最先进模型 DMT 仍分别降低了 6.18% 和 1.46%，生成的漏洞解释在正确性、完整性和清晰度方面均获得 81.15% 以上的人工评估专家认可，相关代码与数据集已面向学术界和工业界开源。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;357&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-eab099f431579b7808249fd0d9a7350263c.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Smart-LLaMA-DPO 和各模型实验效果对比&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;目前，研究团队正与中科软科技股份有限公司合作推进技术转化，针对金融、供应链等场景开发定制化检测工具，构建智能合约漏洞知识图谱与自动化修复建议系统，助力实现企业智能合约全生命周期安全管理。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相关链接&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;论文地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyangli8953.github.io%2Fissta2025-ae-paper11.pdf&quot; target=&quot;_blank&quot;&gt;https://yangli8953.github.io/issta2025-ae-paper11.pdf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;论文代码与数据集地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoi.org%2F10.5281%2Fzenodo.15200616&quot; target=&quot;_blank&quot;&gt;https://doi.org/10.5281/zenodo.15200616&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344667</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344667</guid>
            <pubDate>Mon, 14 Apr 2025 06:10:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>智谱启动上市辅导</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;中国证监会官网信息显示，北京智谱华章科技股份有限公司（以下简称「智谱」）4 月 14 日在北京证监局办理辅导备案，辅导机构为中国国际金融股份有限公司。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;273&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-96a5cb6793f83b1b211bbf88058bff6b28a.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此举意味着，智谱成为了第一家正式启动 IPO 流程的「AI 六小虎」公司，也是第一家正式启动 IPO 流程的大模型创业公司。去年 12 月以来，智谱已共计完成 48 亿元融资。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此前，天眼查 App 信息&lt;a href=&quot;https://www.oschina.net/news/341522&quot;&gt;显示&lt;/a&gt;，北京智谱华章科技有限公司发生工商变更，企业名称变更为北京智谱华章科技股份有限公司，同时部分主要人员发生变更。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;相关阅读：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/344598&quot; target=&quot;news&quot;&gt;智谱开源 32B/9B 系列 GLM 模型，极速版最高达到 200tokens/秒&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344631</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344631</guid>
            <pubDate>Mon, 14 Apr 2025 03:31:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>七牛云 CEO 许式伟分享「怎么做架构」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;七牛云 CEO、Go+编程语言创始人许式伟近日在社交媒体的分享：「怎么成长为优秀的工程师、怎么做架构」。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/112207_MP0l_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fopen.qiniu.us%2Farch-camp-3rd%2Fhow-arch.pdf&quot; target=&quot;_blank&quot;&gt;http://open.qiniu.us/arch-camp-3rd/how-arch.pdf&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;摘录部分内容如下：&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;架构设计的核心思想&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;模块化设计&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;架构的本质是模块拆解、连接与组合。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;模块的规格高于实现，模块之间应尽量正交（无耦合）。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;桥接代码越少，架构设计越优秀（乘法效应）。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;乘法思维&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;每个模块应是一个独立的子业务，具有更大的需求边界和前景。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;模块化设计的目标是通过组合模块实现复杂功能，而非直接堆叠功能。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;从 Go+的实现看架构拆解&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;模块化拆解的案例&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Go+的实现过程：将复杂问题拆解为多个独立模块（如 scanner、parser、ast 等）。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;模块之间通过桥接代码组合，而非直接依赖需求。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;重要结论&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;模块切分通常与需求不直接对应，过度依赖需求可能导致模块划分和团队分工问题。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;需求分析的关键在于预判未来发展方向和洞察内在逻辑关联。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;架构设计的核心是模块化和乘法思维，通过拆解复杂问题、组合独立模块来实现高效开发。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;顶级架构师的目标是通过最少的桥接代码实现最大的功能扩展性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;需求分析和模块化设计是架构设计的基础，需避免过度依赖当前需求。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;相关阅读：&lt;a href=&quot;https://www.oschina.net/news/343197/goplus-1-3&quot; target=&quot;news&quot;&gt;Go+ v1.3 新特性预览：Go+ Mini Spec、领域文本及 TPL&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344630/how-arch</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344630/how-arch</guid>
            <pubDate>Mon, 14 Apr 2025 03:25:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>缓存之美：万文详解 Caffeine 实现原理（下）</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;div class=&quot;rich_media_content js_underline_content
                       autoTypeSetting24psection
            &quot; id=&quot;js_content&quot;&gt; 
 &lt;span id=&quot;OSC_h3_1&quot;&gt;&lt;/span&gt; 
 &lt;h3 data-nodeid=&quot;3&quot; data-pm-slice=&quot;0 0 []&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;getIfPresent&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p data-nodeid=&quot;4&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;现在我们对&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;126&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;put&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法有了基本了解，现在我们继续深入&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;128&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;getIfPresent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;TestReadSourceCode&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;doRead&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// read constructor&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Cache&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;String&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;String&lt;/span&gt;&amp;gt; cache =&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Caffeine&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;newBuilder&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;span class=&quot;code-snippet__title&quot;&gt;maximumSize&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;10_000&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;span class=&quot;code-snippet__title&quot;&gt;build&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// read put&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cache.&lt;span class=&quot;code-snippet__title&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;key&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;value&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// read get&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cache.&lt;span class=&quot;code-snippet__title&quot;&gt;getIfPresent&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;key&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;4&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;对应源码如下，关注注释信息：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.DrainStatusRef&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;ConcurrentHashMap&amp;lt;Object, Node&amp;lt;K, V&amp;gt;&amp;gt; data;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; readBuffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&amp;nbsp;V&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;getIfPresent&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Object key,&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;recordStats)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 直接由 ConcurrentHashMap 获取元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; node = data.get(nodeFactory.newLookupKey(key));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(node ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新统计未命中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(recordStats) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statsCounter().recordMisses(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 当前 drainStatus 为 REQUIRED 表示有任务需要处理则调度处理&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(drainStatusOpaque() == REQUIRED) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 这个方法在上文中介绍过，它会提交 PerformCleanupTask 执行维护方法 maintenance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; scheduleDrainBuffers();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;V&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;value&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;node.getValue();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;now&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;expirationTicker().read();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 判断是否过期或者需要被回收且 value 对应的值为 null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(hasExpired(node, now) || (collectValues() &amp;amp;&amp;amp; (value ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;))) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新统计未命中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(recordStats) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statsCounter().recordMisses(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; scheduleDrainBuffers();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 检查节点没有在进行异步计算&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!isComputingAsync(node)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@SuppressWarnings(&quot;unchecked&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;K&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;castedKey&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(K) key;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新访问时间&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setAccessTime(node, now);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新读后过期时间&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tryExpireAfterRead(node, castedKey, value, expiry(), now);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 处理读取后操作（主要关注）&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;V&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;refreshed&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;afterRead(node, now, recordStats);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;(refreshed ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) ? value : refreshed;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;4&quot; style=&quot;line-height: 1.6em;text-indent: 0px;margin-left: 0px;margin-right: 0px;margin-bottom: 8px;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;getIfPresent&lt;/span&gt;&lt;/span&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;方法中，部分内容我们已经在上文中介绍过，比如&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;133&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;scheduleDrainBuffers&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法。最后一步&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;135&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;afterRead&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法是我们本次关注的重点，从命名来看它表示「读后操作」接下来看看它的具体流程：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; final&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;gt; readBuffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; V&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;afterRead&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Node&amp;lt;K, V&amp;gt; node, long now,&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;recordHit&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新统计命中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(recordHit) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;statsCounter&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;recordHits&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 注意这里如果 skipReadBuffer 为 false，那么它会执行 readBuffer.offer(node) 逻辑，向 ReadBuffer 中添加待处理元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;delayable =&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;skipReadBuffer&lt;/span&gt;() || (readBuffer.&lt;span class=&quot;code-snippet__title&quot;&gt;offer&lt;/span&gt;(node) !=&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;FULL&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 判断是否需要延迟处理维护任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;shouldDrainBuffers&lt;/span&gt;(delayable)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;scheduleDrainBuffers&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 处理必要的刷新操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;refreshIfNeeded&lt;/span&gt;(node, now);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;skipReadBuffer&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// fastpath 方法访问元素是否可以跳过「通知」驱逐策略，true 表示跳过&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 第二个判断条件判断频率草图是否初始化，如果「未初始化」则返回 true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;fastpath&lt;/span&gt;() &amp;amp;&amp;amp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;frequencySketch&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;isNotInitialized&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 状态流转，没有满 delayable 为 true 表示延迟执行维护任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;shouldDrainBuffers&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;delayable&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;switch&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;drainStatusOpaque&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__attr&quot;&gt;IDLE&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;!delayable;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 当前有任务需要处理则调度维护任务执行，否则均延迟执行 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__attr&quot;&gt;REQUIRED&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__attr&quot;&gt;PROCESSING_TO_IDLE&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__attr&quot;&gt;PROCESSING_TO_REQUIRED&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__attr&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;IllegalStateException&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Invalid drain status: &quot;&lt;/span&gt;&amp;nbsp;+ drainStatus);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;10&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;该方法非常简单，都是熟悉的内容，只有数据结构&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;138&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;还没深入了解过，它也是在 Caffeine 的构造方法中完成初始化的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h4_2&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-nodeid=&quot;11&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p data-nodeid=&quot;12&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;以下为&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;142&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;在 Caffeine 缓存中完成初始化的逻辑：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.DrainStatusRef&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; readBuffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Caffeine&amp;lt;K, V&amp;gt; builder,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&amp;nbsp;AsyncCacheLoader&amp;lt;K, V&amp;gt; cacheLoader,&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;isAsync) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果指定了过期策略或 key 定义了 week refenence value 定义了 week or soft reference 或定义了访问后过期策略，则 创建 BoundBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; readBuffer = evicts() || collectKeys() || collectValues() || expiresAfterAccess()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ?&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedBuffer&lt;/span&gt;&amp;lt;&amp;gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : Buffer.disabled();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;14&quot;&gt;&lt;code data-nodeid=&quot;144&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer.disabled()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;会创建如下枚举来表示&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;146&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;DisabledBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;enum&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;DisabledBuffer&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Object&lt;/span&gt;&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;INSTANCE&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;int&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;offer&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;e&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;SUCCESS&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainTo&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Consumer&amp;lt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;gt; consumer&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;long&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;size&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;long&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;reads&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;long&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;writes&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;14&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;满足其中条件判断时，&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;149&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的实际类型为&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;151&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;BoundedBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，它的类关系图如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section data-nodeid=&quot;17&quot; nodeleaf=&quot;&quot;&gt; 
  &lt;img src=&quot;https://oscimg.oschina.net/oscnet/b3eb671f-0def-47fa-914a-0ba56147c405.png&quot; alt=&quot;BoundBuffer.drawio.png&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4787037037037037&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-imgfileid=&quot;100028823&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;18&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;157&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;接口的注释声明中，能获取很多有效信息：它同样也是&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;175&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;多生产者单消费者（MPSC）&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;缓冲区，上文我们在介绍&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;163&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;WriteBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;时，它的单消费者实现方式是加同步锁，&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;165&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的实现单消费者的方式一样，因为它们都是在维护方法&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;167&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;maintenance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中加同步锁对元素进行消费。不同的是，如果&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;169&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;缓冲区满了或者发生争抢则会拒绝添加新元素，而且它不像队列或栈，&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;176&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;不保证 FIFO 或 LIFO&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;20&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;background-color: rgb(214, 214, 214);font-weight: normal;&quot;&gt;A multiple-producer / single-consumer buffer that rejects new elements &amp;nbsp;if it is full or fails spuriously due to contention. Unlike a queue and &amp;nbsp;stack, a buffer does not guarantee an ordering of elements in either &amp;nbsp;FIFO or LIFO order.&lt;/span&gt;&lt;/span&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;background-color: rgb(214, 214, 214);font-weight: normal;&quot;&gt;Beware that it is the responsibility of the caller to ensure that a &amp;nbsp;consumer has exclusive read access to the buffer. This implementation &amp;nbsp;does not include fail-fast behavior to guard against incorrect consumer &amp;nbsp;usage.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;21&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在类关系图中，抽象类&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;181&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;StripedBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的实现最值得学习，它采用了分段设计（Striped）和 CAS 操作实现高效并发写入。分段是将缓冲区分成多个「段」，根据线程的探针值将它们哈希到不同的「段」，减少竞争，接下来我们看一下它具体的实现逻辑，首先是&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;183&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;StripedBuffer#offer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;StripedBuffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;[] table;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(E e)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 扰动函数计算 64 位，线程探针值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;z&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;mix64(Thread.currentThread().getId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 取高 32 位值，位或 1 保证它为奇数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;increment&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;((&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;) (z &amp;gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;)) |&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 转换为 int 32 位&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;h&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;) z;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 掩码值为已分段的缓冲区数量-1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;mask;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 线程哈希到的具体缓冲区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt; buffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 未竞争标志位&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;uncontended&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt;[] buffers = table;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((buffers ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; || ((mask = buffers.length -&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &amp;lt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 位与运算获取缓冲区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; || ((buffer = buffers[h &amp;amp; mask]) ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 向缓冲区中添加元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; || !(uncontended = ((result = buffer.offer(e)) != Buffer.FAILED))) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 扩容或重试操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;expandOrRetry(e, h, increment, uncontended);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;23&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;186&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;StripedBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中我们能发现定义了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;188&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;volatile Buffer&amp;lt;E&amp;gt; @Nullable[] table&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;是数组的形式，这便对应了它「分段」的思想，将元素保存在多个缓冲区中。通过线程探针值哈希获取对应的缓冲区，逻辑并不复杂。&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;190&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;expandOrRetry&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法我们稍后再介绍，我们先假设线程哈希到的具体缓冲区&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;192&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer&amp;lt;E&amp;gt; buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;对象已经被创建，那么它会执行&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;194&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;buffer.offer(e)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法。&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;196&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer&amp;lt;E&amp;gt; buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;对应的实现类为定义在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;198&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;BoundedBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的静态内部类&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;200&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;RingBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，它也实现了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;202&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;接口，源码如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedBuffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;StripedBuffer&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;BUFFER_SIZE&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;16&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;MASK&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;BUFFER_SIZE -&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;RingBuffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BBHeader&lt;/span&gt;.ReadAndWriteCounterRef&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;VarHandle&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;BUFFER&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;MethodHandles.arrayElementVarHandle(Object[].class);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Object[] buffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 有参构造，这里表示缓冲区是被延迟创建的，创建时第一个元素便为 e&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;RingBuffer&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(E e)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; buffer =&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Object&lt;/span&gt;[BUFFER_SIZE];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BUFFER.set(buffer,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; WRITE.set(&lt;span class=&quot;code-snippet__built_in&quot;&gt;this&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(E e)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ReadCounterRef#readCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;head&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;readCounter;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ReadAndWriteCounterRef#writeCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;tail&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;writeCounterOpaque();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算可操作容量 size&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;size&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(tail - head);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 超过缓存大小则证明它已经满了&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(size &amp;gt;= BUFFER_SIZE) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;Buffer.FULL;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// CAS 更新 writeCounter 为 writeCounter+1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(casWriteCounter(tail, tail +&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 位与掩码值获取缓冲区中的索引&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;index&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;) (tail &amp;amp; MASK);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 将元素 e 更新在指定索引处&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BUFFER.setRelease(buffer, index, e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;Buffer.SUCCESS;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;Buffer.FAILED;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainTo&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Consumer&amp;lt;E&amp;gt; consumer)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ReadCounterRef#readCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;head&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;readCounter;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ReadAndWriteCounterRef#writeCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;tail&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;writeCounterOpaque();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算可操作容量 size&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;size&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(tail - head);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// size 为 0 表示无元素可操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(size ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 循环遍历消费缓冲区中所有元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;do&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算具体的索引&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;index&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;) (head &amp;amp; MASK);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@SuppressWarnings(&quot;unchecked&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;E&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;e&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(E) BUFFER.getAcquire(buffer, index);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 索引处元素为空表示无元素可消费&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(e ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取到具体元素后将缓冲区该元素位置更新成 null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BUFFER.setRelease(buffer, index,&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 执行消费逻辑&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; consumer.accept(e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// head 累加&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; head++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt;&amp;nbsp;(head != tail);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新读索引的值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setReadCounterOpaque(head);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BBHeader&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@SuppressWarnings(&quot;PMD.AbstractClassWithoutAbstractMethod&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;PadReadCounter&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;byte&lt;/span&gt;&amp;nbsp;p000,&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;/*省略 118 字节占位符...*/&lt;/span&gt;&amp;nbsp;p119;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;ReadCounterRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;PadReadCounter&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;readCounter;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;PadWriteCounter&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;ReadCounterRef&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;byte&lt;/span&gt;&amp;nbsp;p120,&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;/*省略 118 字节占位符...*/&lt;/span&gt;&amp;nbsp;p239;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;ReadAndWriteCounterRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;PadWriteCounter&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;VarHandle READ, WRITE;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;writeCounter;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;25&quot; style=&quot;line-height: 1.6em;text-align: left;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;205&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;BBHeader&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;类中又看到了熟悉的 120 字节内存占位，在上文中我们详细介绍过，这样能够保证&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;207&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;readCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;和&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;209&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;writeCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;分布在不同内存行，&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;227&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;避免了内存伪共享问题&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，保证不同线程读取这两个字段时互不影响。在添加元素的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;215&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;offer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法和消费元素的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;217&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;drainTo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法中，都能看见它使用了「读索引 readCounter」和「写索引 writeCounter」，这也对应了它命名中的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;228&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Ring&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;229&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Ring&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;表示环形，读、写索引在操作过程中会不断累加，但是它会执行位与运算保证索引值一直落在缓冲区长度的有效范围内，也就是说这两个索引值会不断在有效索引范围内「转圈」，则形成一个「环形」缓冲区。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;26&quot; style=&quot;text-align: left;&quot;&gt;&lt;code data-nodeid=&quot;230&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;RingBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;通过 CAS 操作来确保并发添加元素操作的安全，如果 CAS 操作失败则返回&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;232&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer.FAILED&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，这时便会执行&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;234&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;StripedBuffer#expandOrRetry&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法，我们先来看一下它的方法注释内容，它说：这个方法用于处理写过程中发生的初始化、扩容、创建新缓存或竞争写情况。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p data-nodeid=&quot;28&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Handles cases of updates involving initialization, resizing, creating new Buffers, and/ or contention.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p data-nodeid=&quot;29&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;具体源码如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;StripedBuffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 最大尝试 3 次&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;ATTEMPTS&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// table 的最大大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;MAXIMUM_TABLE_SIZE&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;&amp;nbsp;* ceilingPowerOfTwo(NCPU);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 1 表示忙碌（扩容或正在创建）0 表示缓冲区无操作，通过 CAS 操作进行更新&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;tableBusy;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;[] table;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;* 扩展或重试&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;* &amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*&amp;nbsp;&lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt;&amp;nbsp;e 元素&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*&amp;nbsp;&lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt;&amp;nbsp;h 调用该方法时为线程探针值高 32 位，但在方法中会变更&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*&amp;nbsp;&lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt;&amp;nbsp;increment 线程探针值高 32 位&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*&amp;nbsp;&lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt;&amp;nbsp;wasUncontended true 未发生竞争 false 发生竞争&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;expandOrRetry&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(E e,&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;h,&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;increment,&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;wasUncontended)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;result&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;Buffer.FAILED;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// true 标志缓冲区中最后一个槽位非空 false 表示为空&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;collide&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;attempt&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; attempt &amp;lt; ATTEMPTS; attempt++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt;[] buffers;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt; buffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;n;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果缓冲区数组已经被创建&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(((buffers = table) !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; ((n = buffers.length) &amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 检查具体的缓冲区是否为空&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((buffer = buffers[(n -&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &amp;amp; h]) ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 准备创建缓冲区，并更新 tableBusy 标志为 1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((tableBusy ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; casTableBusy()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;created&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;&amp;nbsp;{&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt;[] rs;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;mask, j;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(((rs = table) !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; ((mask = rs.length) &amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; (rs[j = (mask -&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &amp;amp; h] ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 创建缓冲区 return new RingBuffer&amp;lt;&amp;gt;(e);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; rs[j] = create(e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; created =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tableBusy =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果创建成功&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(created) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; result = Buffer.SUCCESS;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 缓冲区已经被其他线程创建了，重新循环重试&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; collide =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果发生竞争，表示向缓冲区中 CAS 添加元素失败&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!wasUncontended) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; wasUncontended =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果重试添加元素成功，结束循环&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((result = buffer.offer(e)) != Buffer.FAILED) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// table 超过最大大小或已完成扩容但未变更引用（stale）&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((n &amp;gt;= MAXIMUM_TABLE_SIZE) || (table != buffers)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; collide =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!collide) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; collide =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 扩容操作，将缓冲区数组扩容为原来的两倍大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 扩容条件：未超过最大 table 限制且重试添加元素依然失败&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((tableBusy ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; casTableBusy()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(table == buffers) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; table = Arrays.copyOf(buffers, n &amp;lt;&amp;lt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tableBusy =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; collide =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 变更探针哈希值，尝试下一个索引位置&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; h += increment;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 缓冲区数组的初始化逻辑&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((tableBusy ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (table == buffers) &amp;amp;&amp;amp; casTableBusy()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;init&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(table == buffers) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 初始大小为 1，会随着扩容不断将容量扩大两倍&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@SuppressWarnings({&quot;rawtypes&quot;, &quot;unchecked&quot;})&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt;[] rs =&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; rs[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] = create(e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; table = rs;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; init =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tableBusy =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 完成初始化，元素添加成功&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(init) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; result = Buffer.SUCCESS;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;30&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;根据注释信息了解该方法的逻辑并不难，接下来我们再看一下它的消费方法&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code data-nodeid=&quot;239&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;drainTo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，非常简单：&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;StripedBuffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; volatile&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;[] table;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainTo&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Consumer&amp;lt;E&amp;gt; consumer&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt;[] buffers = table;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(buffers ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 循环遍历消费所有缓冲区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt; buffer : buffers) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(buffer !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; buffer.&lt;span class=&quot;code-snippet__title&quot;&gt;drainTo&lt;/span&gt;(consumer);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;32&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p data-nodeid=&quot;33&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;总结一下，&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;242&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp; 是一个 MPSC &amp;nbsp;的缓冲区，采用了分段的设计，将缓冲区划分为多份，根据线程的探针值哈希到不同的缓冲区，减少竞争的发生，并使用 CAS 操作来保证多线程下写入操作高效执行。因为它没有记录元素的写入顺序，所以它并不会像栈或队列一样保证 &amp;nbsp;FIFO 或 &amp;nbsp;LIFO。随着写入竞争发生会不断对缓冲区数组扩容，每次扩容为原来大小的两倍，每个缓冲区为环形缓冲区，通过位与运算计算元素实际的索引，将被消费的元素标记为 &amp;nbsp;null 实现缓冲区中槽位的重用。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;34&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;现在读写方法已经了解差不多了，需要我们再次回到维护方法&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;245&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;maintenance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中，看一看消费读缓冲区和其他逻辑。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h3_3&quot;&gt;&lt;/span&gt; 
 &lt;h3 data-nodeid=&quot;35&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;maintenance&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p data-nodeid=&quot;36&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;维护方法&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;249&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;maintenance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;如下所示，第 2 步中处理写缓冲区任务的逻辑已在上文中介绍过，接下来我们会关注第 1 步的处理读缓冲区任务，第 4 步驱逐策略和第 5 步的 「增值（climb）」操作。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;maintenance&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;Runnable task&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新状态为执行中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;setDrainStatusRelease&lt;/span&gt;(&lt;span class=&quot;code-snippet__variable&quot;&gt;PROCESSING_TO_IDLE&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 1. 处理读缓冲区中的任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainReadBuffer&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 2. 处理写缓冲区中的任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainWriteBuffer&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(task !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; task.&lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 3. 处理 key 和 value 的引用&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainKeyReferences&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainValueReferences&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 4. 过期和驱逐策略&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;expireEntries&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;evictEntries&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 5. 「增值」 操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;climb&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 状态不是 PROCESSING_TO_IDLE 或者无法 CAS 更新为 IDLE 状态的话，需要更新状态为 REQUIRED，该状态会再次执行维护任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((&lt;span class=&quot;code-snippet__title&quot;&gt;drainStatusOpaque&lt;/span&gt;() !=&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;PROCESSING_TO_IDLE&lt;/span&gt;) || !&lt;span class=&quot;code-snippet__title&quot;&gt;casDrainStatus&lt;/span&gt;(&lt;span class=&quot;code-snippet__variable&quot;&gt;PROCESSING_TO_IDLE&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;IDLE&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;setDrainStatusOpaque&lt;/span&gt;(&lt;span class=&quot;code-snippet__variable&quot;&gt;REQUIRED&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;37&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;drainReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p data-nodeid=&quot;39&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;首先我们来看处理读缓冲区的逻辑，源码如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.DrainStatusRef&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; readBuffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Consumer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; accessPolicy;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainReadBuffer&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!skipReadBuffer()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; readBuffer.drainTo(accessPolicy);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;40&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p data-nodeid=&quot;41&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;它会执行到&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;254&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;StripedBuffer#drainTo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法，并且入参了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;256&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Consumer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; accessPolicy&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;消费者。前者会遍历所有缓冲区中对象进行消费；后者在 caffeine 构造方法中完成初始化：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.DrainStatusRef&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; readBuffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Consumer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; accessPolicy;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Caffeine&amp;lt;K, V&amp;gt; builder,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&amp;nbsp;AsyncCacheLoader&amp;lt;K, V&amp;gt; cacheLoader,&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;isAsync) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessPolicy = (evicts() || expiresAfterAccess()) ?&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;this&lt;/span&gt;::onAccess : e -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;43&quot;&gt;&lt;code data-nodeid=&quot;258&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;onAccess&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法在上文中也提到过，具体逻辑我们在这里赘述下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;onAccess&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Node&amp;lt;K, V&amp;gt; node&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;evicts&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; K key = node.&lt;span class=&quot;code-snippet__title&quot;&gt;getKey&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(key ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新访问频率&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;frequencySketch&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;increment&lt;/span&gt;(key);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果节点在窗口区，则将其移动到尾节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(node.&lt;span class=&quot;code-snippet__title&quot;&gt;inWindow&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;reorder&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderWindowDeque&lt;/span&gt;(), node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 在试用区的节点执行 reorderProbation 方法，可能会将该节点从试用区晋升到保护区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(node.&lt;span class=&quot;code-snippet__title&quot;&gt;inMainProbation&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;reorderProbation&lt;/span&gt;(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 否则移动到保护区的尾结点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;reorder&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderProtectedDeque&lt;/span&gt;(), node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新命中量&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;setHitsInSample&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;hitsInSample&lt;/span&gt;() +&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 配置了访问过期策略&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;expiresAfterAccess&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;reorder&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderWindowDeque&lt;/span&gt;(), node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 配置了自定义时间过期策略&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;expiresVariable&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;timerWheel&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;reschedule&lt;/span&gt;(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;45&quot; style=&quot;text-align: left;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;简单概括来说：&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;261&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中所有的元素都会被执行&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;263&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;onAccess&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的逻辑，频率草图会被更新，窗口区元素会被移动到该区的尾结点，试用区元素在满足条件的情况下会被晋升到保护区。在原理图中补充&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;265&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;相关逻辑，相比于原有&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;267&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;put&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法的逻辑，&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;269&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的消费并没有引入特别「新颖」的内容：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section data-nodeid=&quot;46&quot; nodeleaf=&quot;&quot;&gt; 
  &lt;img src=&quot;https://oscimg.oschina.net/oscnet/ad5cad0c-ff08-4f21-a12e-0e313af3c976.png&quot; alt=&quot;caffeine-第 3 页.drawio.png&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7194444444444444&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-imgfileid=&quot;100028825&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;47&quot; style=&quot;text-align: left;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;275&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;reorderProbation&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法中有一段注释比较有意思，它说：如果保护区空间超过它的最大值，它会将其中的元素降级到试用区。但是这个操作被推迟到&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;277&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;maintenance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法的最后执行，也就是后续我们会介绍的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;279&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;climb&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法，相当于是对缓存元素的移动做了剧透。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p data-nodeid=&quot;49&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;If the protected space exceeds its maximum, the LRU items are demoted to the probation space.&lt;/span&gt;&lt;/span&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;This is deferred to the adaption phase at the end of the maintenance cycle.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;span id=&quot;OSC_h4_4&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-nodeid=&quot;50&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;evictEntries&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p data-nodeid=&quot;51&quot;&gt;&lt;code data-nodeid=&quot;285&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;evictEntries&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法注释这么描述：如果缓存超过最大值则将元素驱逐。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p data-nodeid=&quot;53&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Evicts entries if the cache exceeds the maximum&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p data-nodeid=&quot;54&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;它的主方法逻辑非常简单：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;evictEntries&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!&lt;span class=&quot;code-snippet__title&quot;&gt;evicts&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 从窗口区「驱逐」&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt;&amp;nbsp;candidate =&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;evictFromWindow&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 从候选区或保护区进行驱逐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;evictFromMain&lt;/span&gt;(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;54&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;首先，先来看从窗口区「驱逐」的方法&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;290&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;evictFromWindow&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;evictFromWindow&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;K, V&amp;gt; first =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取队首元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;K, V&amp;gt; node =&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderWindowDeque&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;peekFirst&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 循环操作，直到窗口区权重小于窗口区权重最大限制&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;windowWeightedSize&lt;/span&gt;() &amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;windowMaximum&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(node ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取队首节点的下一个节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;K, V&amp;gt; next = node.&lt;span class=&quot;code-snippet__title&quot;&gt;getNextInAccessOrder&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果队首节点权重不为 0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(node.&lt;span class=&quot;code-snippet__title&quot;&gt;getPolicyWeight&lt;/span&gt;() !=&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 标记为试用区节点并移动到试用区尾节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; node.&lt;span class=&quot;code-snippet__title&quot;&gt;makeMainProbation&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderWindowDeque&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;remove&lt;/span&gt;(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderProbationDeque&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;offerLast&lt;/span&gt;(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 记录队首节点引用&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(first ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; first = node;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新窗口区权重&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;setWindowWeightedSize&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;windowWeightedSize&lt;/span&gt;() - node.&lt;span class=&quot;code-snippet__title&quot;&gt;getPolicyWeight&lt;/span&gt;());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// node 记录操作完成后的下一个头节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; node = next;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 返回此时的头节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;first;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;58&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;该方法会根据窗口区最大权重限制&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;301&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;将节点由窗口区移动到试用区&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，直到窗口区内元素小于最大值限制，并不是直接调用&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;297&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;evictEntry&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法真正地将元素驱逐。如果已经在窗口区中将元素移动到试用区，那么接下来会以窗口区头节点会作为入参执行&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;299&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;evictFromMain&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法，它有非常详细的注释内容：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;59&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;如果缓存超过最大容量限制，则将元素从主空间中移除。主空间通过频率草图决定从窗口区来的元素是被驱逐还是被保留，以便将使用频率最低的元素移除。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;60&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;窗口区的元素被提升到试用区尾节点（MRU 位置），驱逐策略驱逐的元素从试用区头节点（LRU &amp;nbsp;位置）开始。在需要执行驱逐策略时，元素会按照由头节点到尾节点的顺序进行评估，如果评估完试用区和保护区仍然需要驱逐元素，那么则会从窗口区驱逐。相似地，如果试用区驱逐完元素后仍然不够，则需要从保护区检查元素进行驱逐。队列按照从头节点到尾节点的顺序消费，使用频率相对较低的元素先被驱逐，在相同频率的情况下，优先保留主空间中的元素而不是窗口区元素。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;62&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;background-color: rgb(214, 214, 214);&quot;&gt;Evicts entries from the main space if the cache &amp;nbsp;exceeds the maximum capacity. The main space determines whether &amp;nbsp;admitting an entry (coming from the window space) is preferable to &amp;nbsp;retaining the eviction policy&#39;s victim. This decision is made using a &amp;nbsp;frequency filter so that the least frequently used entry is removed.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;63&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;background-color: rgb(214, 214, 214);&quot;&gt;The window space&#39;s candidates were previously &amp;nbsp;promoted to the probation space at its MRU position and the eviction &amp;nbsp;policy&#39;s victim starts at the LRU position. The candidates are evaluated &amp;nbsp;in promotion order while an eviction is required, and if exhausted then &amp;nbsp;additional entries are retrieved from the window space. Likewise, if &amp;nbsp;the victim selection exhausts the probation space then additional &amp;nbsp;entries are retrieved the protected space. The queues are consumed in &amp;nbsp;LRU order and the evicted entry is the one with a lower relative &amp;nbsp;frequency, where the preference is to retain the main space&#39;s victims &amp;nbsp;versus the window space&#39;s candidates on a tie.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;64&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;接下来我们看下源码的具体实现：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__type&quot;&gt;K, V&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__type&quot;&gt;K, V&lt;/span&gt;&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;static&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;int WINDOW =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;static&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;int PROBATION =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;static&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;int PROTECTED =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; static&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;int ADMIT_HASHDOS_THRESHOLD =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 为了方便理解，定义 victim 为驱逐区，candidate 为候选驱逐区，实际上它们不对应区域，而是对应某个区域中的节点元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&lt;/span&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; void evictFromMain(&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&amp;nbsp;Node&amp;lt;K, V&amp;gt; candidate) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int victimQueue = PROBATION;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int candidateQueue = PROBATION;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 首先获取试用区头节点作为首先要被驱逐的区域&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; victim = accessOrderProbationDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果权重大小超过最大值，不断地执行驱逐策略，直到满足条件&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt;&amp;nbsp;(weightedSize() &amp;gt; maximum()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果候选驱逐区为空且候选驱逐区为试用区，则指定候选驱逐区为窗口区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (candidateQueue == PROBATION)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 指定候选驱逐区为窗口区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = accessOrderWindowDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidateQueue = WINDOW;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 候选驱逐区和驱逐区都为空&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (victim ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 当前驱逐区为试用区，指定保护区为驱逐区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(victimQueue == PROBATION) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = accessOrderProtectedDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victimQueue = PROTECTED;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 当前驱逐区为保护区，指定驱逐区为窗口区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(victimQueue == PROTECTED) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = accessOrderWindowDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victimQueue = WINDOW;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 没有更多元素供驱逐，则退出循环&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 跳过权重为 0 的元素，权重为 0 表示无需驱逐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((victim !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (victim.getPolicyWeight() ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((candidate !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (candidate.getPolicyWeight() ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果要驱逐区为空，则从候选驱逐区中进行驱逐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(victim ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 驱逐当前节点并将指针指向下一个节点&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; previous = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = candidate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = previous;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 候选驱逐区为空，在驱逐区中驱逐元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = victim;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 驱逐区和候选驱逐区是同一个区的元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidate == victim) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(candidate, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果元素已经被垃圾回收，则驱逐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; K victimKey = victim.getKey();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; K candidateKey = candidate.getKey();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(victimKey ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = victim;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.COLLECTED,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidateKey ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = candidate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.COLLECTED,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果元素已经被标记为删除，驱逐它们&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!victim.isAlive()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = victim;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!candidate.isAlive()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = candidate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果候选区节点元素超过最大权重，直接驱逐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidate.getPolicyWeight() &amp;gt; maximum()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = candidate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 驱逐频率较低的元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(admit(candidateKey, victimKey)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = victim;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 变更候选区元素引用&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = candidate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&lt;/span&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; boolean admit(K candidateKey, K victimKey) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取候选驱逐区中元素频率&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int victimFreq = frequencySketch().frequency(victimKey);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int candidateFreq = frequencySketch().frequency(candidateKey);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 候选区元素频率大于驱逐区中元素返回 true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidateFreq &amp;gt; victimFreq) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果候选区元素频率大于 6&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidateFreq &amp;gt;= ADMIT_HASHDOS_THRESHOLD) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算随机值来决定两元素之间的去留&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int random = ThreadLocalRandom.current().nextInt();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;((random &amp;amp;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;127&lt;/span&gt;) ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 使用计算随机值的方法来防止 HASH DOS 攻击，攻击者可能人为地将某些不被常用的缓存访问频率提高，如果不计算随机性那么会将真正有价值的元素驱逐，添加这种随机性计算可能减少这种攻击带来的影响，保证缓存的有效命中率&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 候选驱逐区元素小于驱逐区元素频率&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;65&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p data-nodeid=&quot;66&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;方法虽然很长，但是逻辑清晰明了，元素的驱逐流程根据注释可以很明确的了解。窗口区中元素会优先被晋升到试用区，在试用区和保护区中不断的驱逐节点直到满足条件，如果驱逐完成之后还不满足条件则会从窗口区中驱逐元素，此外，在逻辑中使用随机驱逐的方式来减少 &amp;nbsp;HASH DOS 攻击带来的影响也很值得学习，更新原理图如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section data-nodeid=&quot;67&quot; nodeleaf=&quot;&quot;&gt; 
  &lt;img src=&quot;https://oscimg.oschina.net/oscnet/34d9c5b2-c03f-46ca-8cc2-033416f49e49.png&quot; alt=&quot;caffeine-第 4 页.drawio.png&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7842592592592592&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-imgfileid=&quot;100028824&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/section&gt; 
 &lt;span id=&quot;OSC_h4_5&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-nodeid=&quot;68&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;climb&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p data-nodeid=&quot;69&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;现在我们来到了维护方法的最后一个步骤&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;323&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;climb&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法，看看它是如何为缓存「增值（climb）」的，源码如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.DrainStatusRef&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;HILL_CLIMBER_RESTART_THRESHOLD&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0.05d&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;HILL_CLIMBER_STEP_PERCENT&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0.0625d&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 步长值衰减比率&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;HILL_CLIMBER_STEP_DECAY_RATE&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0.98d&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;QUEUE_TRANSFER_THRESHOLD&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1_000&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;climb&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!evicts()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 确定要调整的量&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; determineAdjustment();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 将保护区中的元素降级到试用区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; demoteFromMainProtected();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取第一步计算完毕的调整大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;amount&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;adjustment();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 不调整则结束，否则根据正负增大或减小窗口大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(amount ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(amount &amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; increaseWindow();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; decreaseWindow();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;determineAdjustment&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 检查频率草图是否被初始化&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(frequencySketch().isNotInitialized()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 没有被初始化则重置命中率、命中和未命中样本数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setPreviousSampleHitRate(&lt;span class=&quot;code-snippet__number&quot;&gt;0.0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMissesInSample(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setHitsInSample(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 请求总数 = 命中样本数 + 未命中样本数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;requestCount&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;hitsInSample() + missesInSample();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(requestCount &amp;lt; frequencySketch().sampleSize) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算命中率、命中率变化&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;hitRate&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;) hitsInSample() / requestCount;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;hitRateChange&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;hitRate - previousSampleHitRate();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算调整量，如果命中率增加获取正的步长值，否则获取负的步长值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;amount&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(hitRateChange &amp;gt;=&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) ? stepSize() : -stepSize();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算下一个步长值，如果变化量超过阈值，那么重新计算步长，否则按照固定衰减率计算&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;nextStepSize&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(Math.abs(hitRateChange) &amp;gt;= HILL_CLIMBER_RESTART_THRESHOLD)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ? HILL_CLIMBER_STEP_PERCENT * maximum() * (amount &amp;gt;=&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&amp;nbsp;?&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&amp;nbsp;: -&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : HILL_CLIMBER_STEP_DECAY_RATE * amount;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 记录本次命中率作为下一次计算的依据&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setPreviousSampleHitRate(hitRate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 记录要调整的量&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setAdjustment((&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;) amount);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 记录步长值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setStepSize(nextStepSize);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 重置未命中和命中数量&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMissesInSample(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setHitsInSample(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;demoteFromMainProtected&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取保护区的最大值和当前值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;mainProtectedMaximum&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;mainProtectedMaximum();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;mainProtectedWeightedSize&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;mainProtectedWeightedSize();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 当前值没有超过最大值则不处理&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(mainProtectedWeightedSize &amp;lt;= mainProtectedMaximum) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 每次从保护区转换到试用区有 1000 个最大限制&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;i&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; QUEUE_TRANSFER_THRESHOLD; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 一旦不超过最大阈值则停止&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(mainProtectedWeightedSize &amp;lt;= mainProtectedMaximum) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 在保护区取出头节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; demoted = accessOrderProtectedDeque().poll();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(demoted ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 标记为试用区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; demoted.makeMainProbation();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 加入到试用区尾节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderProbationDeque().offerLast(demoted);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算变更后保护区权重大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mainProtectedWeightedSize -= demoted.getPolicyWeight();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新保护区权重&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedWeightedSize(mainProtectedWeightedSize);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;increaseWindow&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 保护区最大容量为 0 则没有可调整的空间&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(mainProtectedMaximum() ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 窗口调整的变化量由保护区贡献，取能够变化额度 quota 为，调整量 adjustment 和，保护区最大值，中的小值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;quota&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;Math.min(adjustment(), mainProtectedMaximum());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 减小保护区大小增加窗口区大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedMaximum(mainProtectedMaximum() - quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowMaximum(windowMaximum() + quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 保护区大小变动后，需要操作元素由保护区降级到试用区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; demoteFromMainProtected();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 窗口区增加容量之后，需要优先从试用区获取元素将增加的容量填满，如果试用区元素不够，则从保护区获取元素来填&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;i&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; QUEUE_TRANSFER_THRESHOLD; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取试用区头节点为「候选节点」&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; candidate = accessOrderProbationDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;probation&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果试用区元素为空或者窗口调整的变化量要比该节点所占的权重小，那么尝试从保护区获取节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) || (quota &amp;lt; candidate.getPolicyWeight())) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = accessOrderProtectedDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; probation =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 试用区和保护区均无节点，则无需处理，结束循环&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取该候选节点的权重，如果可变化额度比候选权重小，那么无需处理&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;weight&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;candidate.getPolicyWeight();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(quota &amp;lt; weight) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 每移除一个节点更新需要可变化额度&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; quota -= weight;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果是试用区节点，则直接在试用区移除&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(probation) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderProbationDeque().remove(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果是保护区节点，需要更新保护区权重大小，再将其从保护区中移除&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedWeightedSize(mainProtectedWeightedSize() - weight);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderProtectedDeque().remove(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 增加窗口区大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowWeightedSize(windowWeightedSize() + weight);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 将被移除的「候选节点」添加到窗口区中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderWindowDeque().offerLast(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 标记为窗口区节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate.makeWindow();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 可能存在 quota 小于，节点权重，的情况，那么这些量无法再调整，需要重新累加到保护区，并在窗口区中减掉&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedMaximum(mainProtectedMaximum() + quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowMaximum(windowMaximum() - quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 将未完成调整的 quota 记录在调整值中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setAdjustment(quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;decreaseWindow&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果窗口区大小小于等于 1 则无法再减少了&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(windowMaximum() &amp;lt;=&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取变化量的额度（正整数），取调整值和窗口最大值减一中较小的值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;quota&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;Math.min(-adjustment(), Math.max(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, windowMaximum() -&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新保护区和窗口区大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedMaximum(mainProtectedMaximum() + quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowMaximum(windowMaximum() - quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;i&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; QUEUE_TRANSFER_THRESHOLD; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 从窗口区获取「候选节点」&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; candidate = accessOrderWindowDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 未获取到说明窗口区已经没有元素了，不能再减小了，结束循环操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取候选节点的权重&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;weight&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;candidate.getPolicyWeight();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 可变化的额度小于权重，则不支持变化，结束循环&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(quota &amp;lt; weight) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 随着节点的移动，变更可变化额度&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; quota -= weight;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新窗口区大小并将元素从窗口区移除&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowWeightedSize(windowWeightedSize() - weight);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderWindowDeque().remove(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 将从窗口区中移除的元素添加到试用区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderProbationDeque().offerLast(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 将节点标记为试用区元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate.makeMainProbation();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 此时 quote 为剩余无法变更的额度，需要在保护区中减去在窗口区中加上&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedMaximum(mainProtectedMaximum() - quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowMaximum(windowMaximum() + quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 记录未变更完的额度在调整值中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setAdjustment(-quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;70&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p data-nodeid=&quot;71&quot; style=&quot;text-align: left;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;现在我们了解了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;326&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;climb&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法的逻辑，正如它的注释所述&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;328&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Adapts the eviction policy to towards the optimal recency / frequency configuration.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，它会根据访问情况动态调整最佳的分区配置以适应驱逐策略。元素被添加时会优先被放在窗口区，窗口区越大则意味着短期内有大量缓存被添加，或元素添加后被再次访问，缓存命中率提高，需要更大的窗口区来承接这部分新晋的元素。根据&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;330&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;climb&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp; 中的逻辑，窗口区增大也会有试用区/保护区的元素不断被移动到窗口区；如果保护区越大意味着缓存中维护的元素都是访问频率较高的元素，命中率降低，并趋于某稳定值附近；试用区元素由窗口区元素晋升得来，再被访问时会被晋升到保护区，它更像是 &amp;nbsp;JVM 分区的 survivor &amp;nbsp;区。缓冲区不同分区的动态调整可以适应不同的访问模式，优化缓存的性能。接下来我们在原理图中补充上各个分区间元素的变换路径（元素也可由保护区直接降级到窗口区，但在图中未标出），并根据图示对 &amp;nbsp;Caffeine 的实现原理进行概括：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section data-nodeid=&quot;72&quot; nodeleaf=&quot;&quot;&gt; 
  &lt;img src=&quot;https://oscimg.oschina.net/oscnet/8d703c6e-0f66-4016-bda9-65cec66cc76d.png&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.712037037037037&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-imgfileid=&quot;100028827&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;73&quot; style=&quot;text-indent: 0px;text-align: left;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在图示（1）中，&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;335&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;put&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法会直接将元素添加到&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;337&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中，并在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;339&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;WriteBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中添加任务，由单线程异步调用维护方法对任务进行消费，元素访问频率会被更新，试用区元素可能会被晋升到保护区；在图示（2）调用&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;341&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;getIfPresent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法会直接从&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;343&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中获取元素，并添加任务到&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;345&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp; 中由单线程异步消费，它相比于（1）并没有什么额外操作，两个缓冲区均采用 MPSC 的设计模式，这种设计参考了 WAL（Write-Ahead &amp;nbsp;Logging）思想；图示（3）和图示（4）均发生在维护方法逻辑中，图示（3）驱逐元素时，窗口区元素会被「驱逐」到试用区，而试用区和保护区元素可能被直接驱逐；图示（4）「增值（climb）」操作会根据命中率调整窗口区和保护区的大小，合理分配分区间的元素。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;74&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在文中提到过每个分区的双端队列使用了 LRU &amp;nbsp;算法，被访问过的元素会被放在尾节点，但对元素进行驱逐时并不以 LRU &amp;nbsp;的顺序为准，而是会参考频率草图中记录的元素频率，保证使用频率高的被保留，低的被驱逐。这和 LFU 算法很像，区别于 LFU 算法的是它采用了 &amp;nbsp;Count-Min Sketch 数据结构来记录频率，能够在较小的内存开销下实现对频率较为精准（93.75%）的估计，这种算法实际被称为&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;352&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;TinyLFU 算法&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，它结合了两者的有点，在内存和计算开销上达到更好的平衡。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h3_6&quot;&gt;&lt;/span&gt; 
 &lt;h3 data-nodeid=&quot;75&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;技术选型&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p data-nodeid=&quot;76&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;现在我们已经对 Caffeine &amp;nbsp;缓存有了一定的了解，那么究竟什么时候适合选择使用它呢？那就要根据它的特点来了：首先，它是线程安全的，适合在多线程环境下使用；其次它的性能很好，使用了 &amp;nbsp;TinyLFU &amp;nbsp;算法并采用了高性能缓存的设计；再就是它提供了多种缓存管理机制，除了基于最大容量的驱逐策略，还支持基于时间、软/虚引用等驱逐策略。所以&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;359&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;font-weight: bold;&quot;&gt;它适合在高并发环境并且需要高性能、支持多种缓存管理策略的场景下使用&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;font-weight: bold;&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;77&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;如果要在多种缓存中选取，可以以如下表格为参考：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section style=&quot;text-align: center;&quot; nodeleaf=&quot;&quot;&gt; 
  &lt;img src=&quot;https://oscimg.oschina.net/oscnet/379346e7-ba46-4b36-9d53-d55208cc938c.png&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3039332538736591&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;839&quot; type=&quot;block&quot; data-imgfileid=&quot;100028828&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;77&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;巨人的肩膀&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;ul class=&quot;list-paddingleft-1&quot;&gt; 
  &lt;li&gt;&lt;p data-nodeid=&quot;115&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Github - caffeine&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p data-nodeid=&quot;117&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;并发编程网 - 现代化的缓存设计方案&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p data-nodeid=&quot;119&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;博客园 - CPU Cache 与缓存行&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p data-nodeid=&quot;119&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;section style=&quot;text-align: center;margin-bottom: 8px;&quot; data-pm-slice=&quot;0 0 []&quot;&gt; 
  &lt;span style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;img alt=&quot;图片&quot; class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;100028809&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/669ade14-6813-4577-9686-31c23198dffe.png&quot; data-type=&quot;webp&quot; data-w=&quot;396&quot; style=&quot;pointer-events: initial;width: 185px !important;visibility: visible !important;height: auto !important;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;span style=&quot;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box;overflow-wrap: break-word !important;font-size: 16px;border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);letter-spacing: normal;&quot;&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;text-align: center;margin-bottom: 8px;&quot;&gt; 
  &lt;span style=&quot;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box;overflow-wrap: break-word !important;font-size: 16px;border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);letter-spacing: normal;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;扫一扫，加入技术交流群&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section&gt; 
  &lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;display: none;&quot;&gt; 
  &lt;mp-style-type data-value=&quot;3&quot;&gt;&lt;/mp-style-type&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color: #858585; font-size: 13px;&quot;&gt;本文分享自微信公众号 - 京东云开发者（JDT_Developers）。&lt;br&gt;如有侵权，请联系 support@oschina.cn 删除。&lt;br&gt;本文参与「&lt;a href=&quot;https://www.oschina.net/sharing-plan&quot; target=&quot;_blank&quot;&gt;OSC 源创计划&lt;/a&gt;」，欢迎正在阅读的你也加入，一起分享。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/4090830/blog/18017722</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18017722</guid>
            <pubDate>Mon, 14 Apr 2025 03:12:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>Rust 迎来十周年，社区发起问卷调查：为了 Rust 的未来</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;Rust 迎来十周年，官方计划撰写 Rust 愿景 RFC，&lt;strong&gt;目标是构建对现状的共识并明确未来方向&lt;/strong&gt;，不涉及具体设计和特性推荐。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/110449_4OlU_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;其范围涵盖社区和技术多方面，通过&lt;strong&gt;调查和访谈收集数据&lt;/strong&gt;，对象包括不同层次的 Rust 用户、非用户、企业等。目前计划在今年下半年发布愿景 RFC，4 月开展访谈，5 月准备初始报告。&lt;/p&gt; 
&lt;p&gt;公众可通过&lt;strong&gt;填写调查、分享调查链接&lt;/strong&gt;以及加入 Zulip 频道参与其中。&lt;/p&gt; 
&lt;p&gt;Rust 愿景 RFC 的目标不是提供具体设计或特性推荐，它侧重于构建对 Rust 现状的共识以及从宏观层面明确未来方向，后续会有专门的详细 RFC 来探讨具体设计和特性。&lt;/p&gt; 
&lt;p&gt;本次调查问题是开放式和自由形式的，涵盖的主题与年度 Rust 调查有所不同。并且本次调查可收集潜在访谈人员名单，而年度 Rust 调查通常不具备此功能。&lt;/p&gt; 
&lt;p&gt;公众可通过填写调查分享使用 Rust 的经历、推荐访谈对象；还能分享调查链接，让更多人参与进来；活跃于 Rust 维护者社区的人员可加入 Zulip 上的&lt;code&gt;#vision-doc-2025&lt;/code&gt;频道参与讨论。&lt;/p&gt; 
&lt;p&gt;问卷：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.surveyhero.com%2Fc%2Ffuznhxp3&quot; target=&quot;_blank&quot;&gt;https://www.surveyhero.com/c/fuznhxp3&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;原文：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.rust-lang.org%2F2025%2F04%2F04%2Fvision-doc-survey.html&quot; target=&quot;_blank&quot;&gt;https://blog.rust-lang.org/2025/04/04/vision-doc-survey.html&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344622/rust-vision-doc-survey</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344622/rust-vision-doc-survey</guid>
            <pubDate>Mon, 14 Apr 2025 03:05:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Google Docs 代码块新增 14 种编程语言支持</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;在对 Google Docs 代码块的更新中，Google 增加了对 14 种新编程语言和其他代码语言的支持，以便轻松地将代码可视化并使其更具可读性。&lt;/p&gt; 
&lt;p&gt;2022 年，Google 推出了一项新的智能画布功能，允许用户通过代码块在文档中格式化和显示代码。该功能有助于以行业标准可视化代码，并应用所需的格式，从而简化协作。&lt;/p&gt; 
&lt;p&gt;它还省去了将代码粘贴到文档中并通过高亮文本手动应用样式的额外工作。这在记录软件项目、API 或编码教程时非常有用，因为代码片段对于提供示例至关重要。&lt;/p&gt; 
&lt;p&gt;智能画布不仅限于代码块。它允许您插入各种内容，例如日历邀请模板、@提及、电子邮件草稿、AI 摘要和模板，并使用无页格式。它为项目管理任务提供了构建块，例如审核跟踪、团队目录、项目资产、内容发布跟踪器等。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9be575217cd9b78995c7650e7192971909a.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;通过新的更新，Google Docs 代码块支持以下语言：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;C#&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Go&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Kotlin&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;PHP&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Rust&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;TypeScript&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;HTML&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CSS&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;XML&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;JSON&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Protobuf&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Textproto&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;SQL&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Bash/Shell&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;要在 Google 文档中显示代码块，请点击「插入」&amp;gt;「构建块」&amp;gt;「代码块」。在这里，您可以选择所需的编程语言。工作区管理员无法控制此功能。&lt;/p&gt; 
&lt;p&gt;Google&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fworkspaceupdates.googleblog.com%2F2025%2F04%2Fadditional-programming-languages-code-blocks-google-docs.html&quot; target=&quot;_blank&quot;&gt;表示，&lt;/a&gt;该更新已开始逐步推出，预计需要几周时间才能完成。更新将推送至 Workspace 各个套餐，包括 Business Standard/Plus、Enterprise Starter/Standard/Plus、Enterprise Essentials Plus 和 Education Standard/Plus。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344617/additional-programming-languages-code-blocks-google-docs.</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344617/additional-programming-languages-code-blocks-google-docs.</guid>
            <pubDate>Mon, 14 Apr 2025 02:54:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>开源 AI 平台 Hugging Face 收购法国开源机器人公司 Pollen Robotics</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;开源 AI 平台 Hugging Face 正式宣布收购法国开源机器人公司 Pollen Robotics，旨在将开源机器人技术推向更广阔的市场。这一举措标志着 Hugging Face 在开源机器人领域的布局再进一步，未来或将彻底改变人机交互的生态。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-33dce35392b7449b2b186f7e06f0ce80183.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;自前特斯拉工程师 Rémi Cadene 加入 Hugging Face 后，该平台凭借开源机器人软件库 LeRobot 和 Hugging Face Hub，迅速成为全球最受欢迎的开源机器人软件平台。&lt;/p&gt; 
&lt;p&gt;如今，通过收购 Pollen Robotics，Hugging Face 正式进军硬件领域，致力于打造&lt;strong&gt;开源、可定制、价格合理&lt;/strong&gt;的机器人解决方案。&lt;/p&gt; 
&lt;p&gt;Pollen Robotics 是全球少数几家真正量产开源人形机器人的公司之一，其明星产品 Reachy 2 已在康奈尔大学、卡内基梅隆大学等顶尖实验室投入使用。这款机器人不仅具备先进的人形设计，还支持 VR 操控，专为 AI 研究、教育和具身智能（Embodied AI）实验打造。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Reachy 2：你的 AI 时代实验室助手&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Reachy 2 是一款开源、模块化、可编程的人形机器人，具备高度灵活的双臂和头部，能够执行抓取、交互等多种任务。它的特点包括： &amp;nbsp;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;完全开源：硬件设计、软件栈全部开放，开发者可自由修改和优化。 &amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;VR 兼容：支持虚拟现实远程操控，探索人机协同新场景。 &amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;研究友好：已被全球多所顶尖高校和实验室采用，加速 AI 与机器人技术的融合。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a829c0480c4ab02fe858bded5db645b1aac.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;目前，Reachy 2 的售价为 7 万美元（约合人民币 50 万元）。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344615/hugging-face-buys-a-humanoid-robotics-startup-pollen-robotics</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344615/hugging-face-buys-a-humanoid-robotics-startup-pollen-robotics</guid>
            <pubDate>Mon, 14 Apr 2025 02:43:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>OpenAI 发布 GPT-4.1 系列模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;OpenAI 在当地时间周一&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenai.com%2Findex%2Fgpt-4-1%2F&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;了名为 GPT-4.1 的新模型系列，共包含：GPT-4.1、GPT-4.1 mini 和 GPT-4.1 nano。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;公告称，这些模型的性能全面超越 GPT-4o 和 GPT-4o mini，在编码和指令跟踪方面均有显著提升。它们拥有一个包含 100 万个 token 的上下文窗口，这意味着它们可以一次性输入大约 75 万个单词，并且能够通过改进的长上下文理解更好地利用这些上下文，同时其知识截止日期已更新至 2024 年 6 月。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;这些多模态模型可以通过 OpenAI 的 API 获取，但 ChatGPT 无法使用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;351&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-065cfc590086bc15c87619c5f627883137e.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;GPT-4.1 的到来正值 OpenAI 的竞争对手谷歌和 Anthropic 加紧构建复杂编程模型之际。谷歌最近发布的 Gemini 2.5 Pro 也拥有 100 万个 token 上下文窗口，在热门编码基准测试中名列前茅。Anthropic 的 Claude 3.7 Sonnet 和&amp;nbsp; DeepSeek 的升级版 V3 也同样名列前茅。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;训练能够执行复杂软件工程任务的 AI 编码模型是包括 OpenAI 在内的许多科技巨头的目标。OpenAI 的宏伟目标是打造「代理软件工程师」，正如其首席财务官 Sarah Friar 上个月在伦敦举行的一次科技峰会上所说。该公司声称，其未来的模型将能够端到端地编写整个应用程序，处理质量保证、错误测试和文档编写等方面的工作。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;GPT-4.1 是朝着这个方向迈出的一步。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;OpenAI 的一位发言人通过电子邮件告诉 &lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2025%2F04%2F14%2Fopenais-new-gpt-4-1-models-focus-on-coding%2F&quot; target=&quot;_blank&quot;&gt;TechCrunch&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;：「我们根据直接反馈对 GPT-4.1 进行了优化，使其更适合实际使用，从而改进了开发者最关心的领域：前端编码、减少不必要的编辑、可靠地遵循格式、遵循响应结构和顺序、保持一致的工具使用等等。这些改进使开发者能够构建出在实际软件工程任务中表现更出色的代理。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;OpenAI 声称，完整的 GPT-4.1 模型在包括 SWE-bench 在内的编码基准测试中均优于其 GPT-4o 和 GPT-4o mini 模型。据称，GPT-4.1 mini 和 nano 效率更高、速度更快，但准确性有所降低。OpenAI 表示，GPT-4.1 nano 是其迄今为止速度最快、成本最低的模型。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;GPT-4.1 每百万输入 token 成本为 2 美元，每百万输出 token 成本为 8 美元。GPT-4.1 mini 每百万输入 token 成本为 0.40 美元，每百万输出 token 成本为 1.60 美元；GPT-4.1 nano 每百万输入 token 成本为 0.10 美元，每百万输出 token 成本为 0.40 美元。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根据 OpenAI 的内部测试，GPT-4.1 可以一次性生成比 GPT-4o 更多的 token（32,768 对 16,384），在 SWE-bench Verified 上的得分在 52% 到 54.6% 之间。这些数字略低于谷歌和 Anthropic 在同一基准测试中分别报告的 Gemini 2.5 Pro（63.8%）和 Claude 3.7 Sonnet（62.3%）的得分。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;262&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0415/103510_dAsv_4252687.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在另一项评估中，OpenAI 使用 Video-MME 测试了 GPT-4.1，该模型旨在衡量模型「理解」视频内容的能力。OpenAI 声称，GPT-4.1 在「长篇无字幕」视频类别中达到了 72% 的最高准确率。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;虽然 GPT-4.1 在基准测试中得分相当不错，并且「知识截止」时间也较新，使其能够更好地参考时事（截至 2024 年 6 月），但必须牢记，即使是当今一些最好的模型，在处理一些专家不会犯错的任务时也会遇到困难。例如，许多研究表明 ，代码生成模型通常无法修复安全漏洞和 bug，甚至会引入这些漏洞。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;OpenAI 也承认，GPT-4.1 处理的输入 token 越多，可靠性就越低（即更容易出错）。在该公司自己的测试 OpenAI-MRCR 中，该模型的准确率从 8,000 个 token 时的 84% 左右下降到 100 万个 token 时的 50%。该公司表示，GPT-4.1 也比 GPT-4o 更「直白」，有时需要更具体、更明确的提示。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344606/openais-gpt-4-1-models</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344606/openais-gpt-4-1-models</guid>
            <pubDate>Mon, 14 Apr 2025 02:26:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>智谱开源 32B/9B 系列 GLM 模型，极速版最高达到 200tokens/秒</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;智谱&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FpyeqH8jGvH_dVPmekOQ1VQ&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;将开源 32B/9B 系列 GLM 模型，涵盖基座、推理、沉思模型，均遵循 MIT 许可协议。其中，推理模型 GLM-Z1-32B-0414 性能媲美 DeepSeek-R1 等顶尖模型，实测推理速度可达 200 Tokens/秒（MaaS 平台 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fbigmodel.cn&quot; target=&quot;_blank&quot;&gt;bigmodel.cn&lt;/a&gt;），目前国内商业模型中速度最快。此外，其价格仅为 DeepSeek-R1 的 1/30。&lt;/p&gt; 
&lt;p&gt;同时，该公司宣布启用全新域名 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2FZ.ai&quot; target=&quot;_blank&quot;&gt;Z.ai&lt;/a&gt;，目前该平台整合了 32B 基座、推理、沉思三类 GLM 模型，后续将作为智谱最新模型的交互体验入口。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;283&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-75970a5c47cb53cb14c3d18e6c8ec7f20c1.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;根据介绍，&lt;strong style=&quot;color:#1f2329&quot;&gt;基座模型 GLM-4-32B-0414&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;&amp;nbsp;拥有 320 亿参数，其性能可与国内、外参数量更大的主流模型相媲美。该模型利用 15T 高质量数据进行预训练，特别纳入了丰富的推理类合成数据，为后续的强化学习扩展奠定了基础。在后训练阶段，除了进行面向对话场景的人类偏好对齐，我们还通过拒绝采样和强化学习等技术，重点增强了模型在指令遵循、工程代码生成、函数调用等任务上的表现，以强化智能体任务所需的原子能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;GLM-4-32B-0414 在工程代码、Artifacts 生成、函数调用、搜索问答及报告撰写等任务上均表现出色，部分 Benchmark 指标已接近甚至超越 GPT-4o、DeepSeek-V3-0324（671B）等更大模型的水平。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;img height=&quot;243&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5d11204c0200644789c18f48b49b6c892b9.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;GLM-4-32B-0414 进一步提升了代码生成能力，可处理并生成结构更复杂的单文件代码。&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong style=&quot;color:#245bdb&quot;&gt;Z.ai&lt;/strong&gt;&amp;nbsp;的&lt;/span&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;对话模式内建了预览功能，支持对生成的 HTML 和 SVG 进行可视化查看，便于用户评估生成结果和进行迭代优化。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;GLM-Z1-32B-0414&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;&amp;nbsp;是一款具备深度思考能力的推理模型。该模型在 GLM-4-32B-0414 的基础上，采用了冷启动与扩展强化学习策略，并针对数学、代码、逻辑等关键任务进行了深度优化训练。与基础模型相比，GLM-Z1-32B-0414 的数理能力和复杂问题解决能力得到显著增强。此外，训练中整合了基于对战排序反馈的通用强化学习技术，有效提升了模型的通用能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;在部分任务上，&lt;/span&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;GLM-Z1-32B-0414 凭借 32B 参数，其性能已能与拥有 671B 参数的 DeepSeek-R1 相媲美。&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;通过在 AIME 24/25、LiveCodeBench、GPQA 等基准测试中的评估，GLM-Z1-32B-0414 展现了较强的数理推理能力，能够支持解决更广泛复杂任务。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4d4a3d01b9d1462df525f8d6a9776a95eeb.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;GLM-Z1-9B-0414&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;&amp;nbsp;则沿用了上述一系列技术，训练了一个 9B 的小尺寸模型。虽然参数量更少，GLM-Z1-9B-0414 在数学推理及通用任务上依然表现出色，整体性能已跻身同尺寸开源模型的领先水平。特别是在资源受限的场景下，该模型可以很好地在效率与效果之间取得平衡，为需要轻量化部署的用户提供强有力的选择。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;img height=&quot;238&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a0f3496b2b94f35f8b92209b4662f043084.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;智谱方面称，&lt;strong style=&quot;color:#1f2329&quot;&gt;沉思模型 GLM-Z1-Rumination&lt;/strong&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;-32B&lt;/strong&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;-0414&lt;/strong&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;&amp;nbsp;则&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;代表了&lt;/span&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;该公司&lt;/span&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;对&lt;/span&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;AGI&lt;/span&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;&amp;nbsp;未来形态的下一步探索。与一般推理模型不同，沉思模型通过更多步骤的深度思考来解决高度开放与复杂的问题。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;其关键创新在于，它能在深度思考过程中整合搜索工具处理复杂任务，并运用多种规则型奖励机制来指导和扩展端到端的强化学习训练。该模型支持「&lt;/span&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;自主提出问题—搜索信息—构建分析—完成任务&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;」的完整研究闭环，从而在&lt;/span&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;研究型写作&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;和&lt;/span&gt;&lt;strong style=&quot;color:#1f2329&quot;&gt;复杂检索任务&lt;/strong&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;上的能力得到了显著提升。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;除模型开源外，基座、推理两类模型也已同步上线智谱 MaaS 开放平台（bigmodel.cn），面向企业与开发者提供 API 服务。 本次上线的基座模型提供两个版本：GLM-4-Air-250414 和 GLM-4-Flash-250414，其中后者完全免费。 &lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2329; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;上线的推理模型分为三个版本，分别满足不同场景需求：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;text-align:justify&quot;&gt;GLM-Z1-AirX（极速版）：定位国内最快推理模型，推理速度可达 200 tokens/秒，比常规快 8 倍；&lt;/li&gt; 
 &lt;li style=&quot;text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;GLM-Z1-Air（高性价比版）：价格仅为 DeepSeek-R1 的 1/30，适合高频调用场景；&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;text-align:justify&quot;&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;GLM-Z1-Flash（免费版）：支持免费使用，旨在进一步降低模型使用门槛。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#1f2329&quot;&gt;对应模型价格表：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;269&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-16d33a610a5d7b5afd3524e7f55816d7a1c.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344598</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344598</guid>
            <pubDate>Mon, 14 Apr 2025 02:00:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>高德发布全球首个地图领域 AI 导航智能体</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;高德地图今日宣布推出基于地图的 AI 导航智能体（NaviAgent）。据技术负责人介绍，其核心架构采用 Planner-Executor 模式，通过感知、规划、执行、表达四大模块构建智能闭环，集成多项高德核心技术。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0414/191004_ga7U_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;官方表示，该智能体「更像经验丰富的‘老司机’」，能实时感知路况、预判风险并主动调整策略。&lt;/p&gt; 
&lt;p&gt;据了解，以高速驾车场景为例，其支持通过&lt;strong&gt;感知车道级交通流变化、动态事件、事故占道等信息&lt;/strong&gt;，结合用户路线，AI 导航智能体会&lt;strong&gt;自动开启领航功能，推荐全局最优车道&lt;/strong&gt;，让变道决策更从容高效。&lt;/p&gt; 
&lt;p&gt;同时，在停车场景中，&lt;strong&gt;超视距感知能力可覆盖至「最后 100 米」&lt;/strong&gt;：当用户输入目的地后，系统会在距离终点 5 公里时启动智能分析，主动推荐目的地周边的空闲停车位；基于时空感知和推理能力，补全停车后的步行导航指引，直达目的地入口，实现无缝衔接。&lt;/p&gt; 
&lt;p&gt;其红绿灯 AI 领航功能已覆盖全国，可结合实时交通信息与超视距感知技术，动态提供车速建议、车道选择及起步提醒，大幅提升过灯效率。&lt;/p&gt; 
&lt;p&gt;AI 导航智能体还构建了包含情感识别、意图理解、情绪表达在内的三维交互体系，突破性地将服务拓展至情绪价值领域。譬如，当用户完成优质的驾驶操作时，还会&lt;strong&gt;收到导航智能体的及时赞许&lt;/strong&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344517</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344517</guid>
            <pubDate>Sun, 13 Apr 2025 11:10:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>一次提交更新两个仓库，Get 更优雅的 GitHub/Gitee 仓库镜像同步</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;现在很多开发者都不满足于只在一个代码托管平台活跃，将项目同时托管于 Gitee 和 GitHub 是目前国内很多开发者的选择，既拥有更快的访问和代码推拉速度，也可以和更多国际上的优秀开发者交流。&lt;/p&gt; 
&lt;p&gt;Gitee 的&lt;strong&gt;仓库镜像管理&lt;/strong&gt;功能在这两天重新受到了开发者们的关注，今天马建仓再次为大家介绍一下这个超方便的功能，方便各位开发者更优雅地将代码在世界上最大的两个代码托管平台之间同步。&lt;/p&gt; 
&lt;h2&gt;什么是仓库镜像管理&lt;/h2&gt; 
&lt;p&gt;仓库镜像管理功能用于配置和管理仓库镜像；配置仓库镜像可以实现不同平台之间仓库分支、标签和提交信息的自动同步。&lt;/p&gt; 
&lt;p&gt;简单来说，就是你可以&lt;strong&gt;通过仓库镜像管理功能实现 Gitee 和 GitHub 两个平台的双向自动同步&lt;/strong&gt;。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;将 Gitee 的仓库镜像至 GitHub&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;配置此镜像后，当你提交代码到 Gitee 的仓库时，Gitee 会自动向 GitHub 同步仓库。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0414/184829_hrc3_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;将 GitHub 的仓库镜像至 Gitee&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;你可以根据自身需求选择&lt;strong&gt;自动镜像&lt;/strong&gt;或&lt;strong&gt;手动镜像&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;自动镜像&lt;/strong&gt;：当你提交代码到 GitHub 镜像仓库时，Gitee 会自动从 GitHub 同步仓库。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;手动镜像&lt;/strong&gt;：只有你手动点击更新按键时，Gitee 才会从 GitHub 同步仓库。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0414/184845_9D4v_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;仓库镜像会同步以下内容：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;分支（Branches）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;标签（Tags）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;提交记录（Commits）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;如何为自己的仓库设置镜像&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;以将 GitHub 的仓库镜像至 Gitee 为例&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;进入需要使用镜像功能的仓库，进入「管理」找到「仓库镜像管理」选项，点击「添加镜像」按钮，如果你还没有绑定 GitHub 帐号，请根据弹窗提示绑定 GitHub 帐号；&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0414/184923_KLAZ_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;添加镜像&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0414/184946_8GX5_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;在「镜像方向」中选择 Pull 方向；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在「镜像仓库」下拉列表中选择需要镜像的仓库；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在「私人令牌」中输入你的 GitHub 私人令牌；&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0414/184959_x8O7_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;私人令牌中必须包含对&amp;nbsp;&lt;code&gt;repo&lt;/code&gt;&amp;nbsp;的访问授权，否则添加后镜像不可用。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;根据自身需求选择是否勾选「自动从 GitHub 同步仓库」&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;勾选后，将会在镜像仓库中自动生成 webhook 用于实现自动镜像。此功能需要你的个人令牌中包含对 admin:repo_hook 的访问授权，否则会添加失败。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;点击「添加」保存镜像配置。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;配置完成后，可以通过&lt;strong&gt;提交代码到 Gitee 仓库&lt;/strong&gt;或&lt;strong&gt;手动更新镜像&lt;/strong&gt;的方式触发镜像操作。&lt;/p&gt; 
&lt;p&gt;一次提交，同步两个仓库，更优雅的仓库镜像姿势你 Get 到了吗？&lt;/p&gt; 
&lt;p&gt;点击后面的链接了解更多功能细节：&lt;a href=&quot;https://gitee.com/help/articles/4336&quot;&gt;https://gitee.com/help/articles/4336&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;注意事项&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;镜像触发的最短间隔时间为 5 分钟；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;只支持镜像已绑定 GitHub 帐号授权访问的仓库；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;更新请求一旦发出，除非强制停止，否则将无法中断；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;暂时不支持同步&lt;code&gt;Git-LFS&lt;/code&gt;；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;同步时间超过 30 分钟视为超时，大型仓库不建议使用镜像方式同步；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;镜像操作会覆盖目标仓库的分支、标签和提交记录；请注意备份并小心使用。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;单向导入同样支持&lt;/h2&gt; 
&lt;p&gt;同时 Gitee 也支持从 GitHub 单向导入仓库的操作。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0414/185026_lLHt_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;点击右上角&lt;code&gt;+&lt;/code&gt;后选择&lt;code&gt;从 GitHub/GitLab 导入仓库&lt;/code&gt;，连接自己的 GitHub 账号即可实现仓库的一键导入。&lt;/p&gt; 
&lt;p&gt;欢迎使用 Gitee：&lt;a href=&quot;https://gitee.com/&quot;&gt;https://gitee.com/&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344514</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344514</guid>
            <pubDate>Sun, 13 Apr 2025 10:51:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>SSL/TLS 证书最长有效期缩短至 47 天</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;苹果此前向 CA/B 论坛（负责管理 SSL/TLS 证书的行业组织）提议，将所有证书有效期缩短至 45 天。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;日前 CA/B 论坛服务器证书工作组投票通过 SC-081v3 提案，最终决定将 SSL/TLS 证书有效期从 398 天降至 47 天，SAN 数据重用周期缩短至 10 天。&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3fc44165410fc553ed10737b2c1f73744e1.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgroups.google.com%2Fa%2Fgroups.cabforum.org%2Fg%2Fservercert-wg%2Fc%2F9768xgUUfhQ%3Fpli%3D1&quot; target=&quot;_blank&quot;&gt;https://groups.google.com/a/groups.cabforum.org/g/servercert-wg/c/9768xgUUfhQ?pli=1&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;SSL/TLS 证书是一种用于网站的安全协议，通过加密网络连接确保数据传输的安全性。&lt;/p&gt; 
&lt;p&gt;此前，SSL/TLS 证书最长有效期可达 8 年，经过多次调整，目前最长为 398 天，开发者和企业必须在这个时间内更新一次数字证书。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;苹果给出的理由也非常简单，有效期缩短后，即便证书泄露也很快就会过期而不会被长时间利用。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;此次投票中，证书颁发机构（CA）25 票赞成、0 票反对、5 票弃权；证书消费者（包括苹果、谷歌、微软、Mozilla 主要浏览器开发商）4 票赞成、0 票反对、0 票弃权。&lt;/p&gt; 
&lt;p&gt;提案通过后，将进入知识产权审查阶段。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;该措施将从 2026 年 3 月开始逐步实施，到 2029 年 3 月结束，具体时间表如下：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;2026 年 3 月 14 日前：证书有效期最长为 398 天&lt;/li&gt; 
 &lt;li&gt;2027 年 3 月 14 日前：证书有效期最长缩短至 200 天&lt;/li&gt; 
 &lt;li&gt;2028 年 3 月 14 日前：证书有效期最长缩短至 100 天&lt;/li&gt; 
 &lt;li&gt;2028 年 3 月 15 日后：证书有效期最长缩短至 47 天&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;尽管 SSL/TLS 证书已经有很多便捷的工具可以实现自动化续签，但并非每个网站和企业都可以轻松部署自动化续签流程，尤其是有些复杂的系统切换数字证书本身就是个麻烦的事情。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;在 Reddit 论坛上有数百名系统管理员抱怨苹果的这项提议，因为缩短证书有效期后剩余的工作都要系统管理员承担，尤其是如果管理多个网站那么工作量将会显著提升 (假如无法实现自动化续签)。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344509</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344509</guid>
            <pubDate>Sun, 13 Apr 2025 10:30:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>量子计算机可能帮助解决的三个现实世界问题</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;今天是世界量子日，为了纪念这一天，谷歌发文&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.google%2Ftechnology%2Fresearch%2Fgoogle-quantum-computer-real-world-applications%2F&quot; target=&quot;_blank&quot;&gt;介绍&lt;/a&gt;了量子计算机可能帮助解决的三个现实世界问题。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1600&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-b44eb7465984c4826a24491d5324ee91f30.png&quot; width=&quot;1910&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;世界量子日（World Quantum Day），即 4 月 14 日，是世界各地量子科学家发起的一项倡议，于 2021 年 4 月 14 日启动，并开始 2022 年 4 月 14 日首次全球庆祝活动的倒计时。&lt;/p&gt; 
 &lt;p&gt;「世界量子日」为什么选在 4 月 14 日，这是源自普朗克常数。普朗克常数是支配量子物理的基本常数，其大小为为 4.135667696 × 10-15eV·s，其前几位数字（四舍五入近似）即是「414」。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;药物研发&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Google 表示，量子计算机预计将带来的首个益处是药物研发，从而改善健康结果。借助这项技术，研究人员将能够测试不同候选药物的靶点和其他生物分子，从而帮助研发更有效的药物。&lt;/p&gt; 
&lt;p&gt;Google 最近与勃林格殷格翰公司联合发表了一篇研究论文，论文表明量子计算机将能够更准确地模拟细胞色素 P450，这是一种决定药物有效性的关键酶，因为它在血液中分解药物。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;改进电池&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Google 希望量子计算机能够造福人类的另一个途径是开发改进型电池。这对于清洁能源交通（例如电动汽车和公交车）以及电网至关重要，因为多余的能量可以储存起来，以备无风或无阳光时使用。&lt;/p&gt; 
&lt;p&gt;为了改进电池，Google 设想利用量子计算机辅助设计新材料。该公司已与化学公司巴斯夫合作，确定量子计算机将能够模拟锂镍氧化物 (LNO)，从而改善工业生产流程并生产出性能更佳的电池。目前，LNO 的生产难度较大，这阻碍了该领域的研究。LNO 的主要优势之一是，与更常用的钴酸锂相比，其环境足迹更小。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;聚变能&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Google 表示量子计算机将受益的第三个也是最后一个领域是能源生产。如今，清洁可再生能源指的是太阳能或风能，但未来将意味着核聚变能。核聚变反应堆的技术仍在研发中，但 Google 相信量子计算机将用于设计反应堆，从而释放核聚变能。&lt;/p&gt; 
&lt;p&gt;Google 表示，目前的计算机模型可能存在误差，需要运行数十亿个 CPU 小时。这家搜索巨头已与桑迪亚国家实验室合作，证明在容错量子计算机上运行的量子算法可以「更有效地模拟持续聚变反应所需的机制」。&lt;/p&gt; 
&lt;p&gt;以科学为中心的人工智能模型的引入已经加速了药物和材料的发现，因此，当它与量子计算机相结合时，这些发现的速度可能会进一步加快。&lt;/p&gt; 
&lt;p&gt;世界量子日快乐！&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;阅读更多&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/324343/google-willow-quantum-chip&quot; target=&quot;news&quot;&gt;谷歌发布 Willow 量子计算芯片&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/334836/microsofts-majorana-1-chip&quot; target=&quot;news&quot;&gt;微软发布首款量子计算芯片「Majorana 1」&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/336773/quantum-computing-aws-ocelot-chip&quot; target=&quot;news&quot;&gt;亚马逊发布首款量子计算芯片 「Ocelot」&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344503/google-quantum-computer-real-world-applications</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344503/google-quantum-computer-real-world-applications</guid>
            <pubDate>Sun, 13 Apr 2025 10:03:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>100% 议题火爆出炉！0425 GOPS 2025 · 深圳站即将启幕！</title>
            <description>GOPS 2025 · 深圳站即将启幕</description>
            <link>https://www.bagevent.com/event/8943887?bag_track=KYZG</link>
            <guid isPermaLink="false">https://www.bagevent.com/event/8943887?bag_track=KYZG</guid>
            <pubDate>Sun, 13 Apr 2025 09:19:00 GMT</pubDate>
        </item>
        <item>
            <title>顶级生成式 AI 用例揭晓：营销任务排名较低</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根据最新的研究，生成性人工智能（Gen AI）在市场营销领域的应用远不如个人使用那么普遍。一份由 Marc Zao-Sanders 发布的《Top-100Gen AI Use Case》报告显示，尽管人们在日常生活中越来越多地利用 AI 来获得情感支持，市场营销的相关任务，如广告创作和社交媒体内容生成，却位居使用排名的后列。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;报告分析了人们对生成性 AI 的使用情况，并指出，过去一年中，使用重点从技术驱动转向了以情感和个人福祉为中心的应用。根据研究，前三名的应用包括:&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;心理治疗和陪伴&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;生活组织&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;寻找生活目标&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;593&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-69816cfbe83380d0ed45a10da818b17fe37.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;报告指出，这一发现表明，用户更倾向于利用 AI 来满足自身的情感需求，而不是单纯提高工作效率。在营销领域，相关应用的排名较低，包括:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;广告 / 营销文案（第 64 位）&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;撰写博客文章（第 97 位）&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;社交媒体文案（第 98 位）&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;社交媒体系统（第 99 位）&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;这种差距反映出市场营销人员尚未充分挖掘生成性 AI 的潜力。Zao-Sanders 在报告中指出，营销人员可能错误判断了 AI 的使用方向，很多专家原本预期 AI 将首先在技术领域取得成果，然而，研究表明 AI 在满足人类情感需求方面同样具有重要作用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;用户对生成性 AI 的使用也在不断提高，特别是在撰写有效提示方面。报告中提到的高排名应用可为营销人员提供借鉴。人们喜爱能够与他们建立情感联系的 AI，营销工具可以更加注重对话性和同理心。除此之外，AI 在生活组织方面的应用也相当受欢迎，营销工具可以集中精力在优化工作流程上，而不仅仅是内容创作。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在报告中，排名较高的营销相关用例是 「生成创意」，位列第六，表明头脑风暴可能是生成性 AI 的一个更佳切入点。营销人员分享了一些生成性 AI 在实际应用中的成功案例，比如利用 AI 进行行业痛点分析、快速生成案例研究报告等。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;报告建议营销人员应关注 AI 工具的个人利益，而不仅仅是生产力提升。透明的数据隐私保护措施也非常重要，这有助于增强用户的信任。Zao-Sanders 总结道，现在正是营销人员学习和将这些工具融入日常工作中的最佳时机。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344484</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344484</guid>
            <pubDate>Sun, 13 Apr 2025 09:13:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
    </channel>
</rss>