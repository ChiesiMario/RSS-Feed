<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-综合资讯</title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="http://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-综合资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Fri, 16 Aug 2024 14:30:02 GMT</lastBuildDate>
        <ttl>180</ttl>
        <item>
            <title>开源日报 | 网传海思可能脱离华为；滴滴开源 Unify；deepin V23 发布；Transformer 的可视化解释；谷歌前 CEO 演讲大爆料</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.8.16&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/307354/didi-unify-flutter&quot;&gt;滴滴开源 Flutter 混合开发框架 Unify&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;滴滴近日开源了自研 Unify 框架，旨在解决大规模跨端落地场景下，Flutter 与原生模块之间的通信问题。Unify 通过平台无关的模块抽象、灵活的实现注入、自动代码生成等特性，为开发者提供高效、灵活、易用的 Flutter 混合通信能力。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;开源地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdidi%2FUnify&quot; target=&quot;_blank&quot;&gt;https://github.com/didi/Unify&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Unify 是一个 Flutter 混合开发框架，由滴滴出行国际化外卖团队自研，亮点特性包括:&lt;/p&gt; 
&lt;ul style=&quot;list-style-type:disc; margin-left:0; margin-right:0&quot;&gt; 
 &lt;li&gt;&lt;strong&gt;平台无关的模块抽象&lt;/strong&gt;: 允许开发者使用 Dart 语言声明与平台无关的模块接口与实体。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;灵活的实现注入&lt;/strong&gt;: 开发者可以灵活地选择注入原生实现（Android/iOS）或 Flutter 实现。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;自动代码生成&lt;/strong&gt;: 借助强大的代码生成引擎，Unify 可以自动生成 Flutter、Android、iOS 多平台下统一调用的 SDK。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/307293/deepin-v23-released&quot;&gt;deepin V23 正式发布&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;8 月 15 日，国际知名开源社区 deepin（深度）社区在线上举办了主题为 「聚 AI 而生，大有不同」 新品发布会，正式对外发布开源操作系统 deepin V23，带来了全新 DDE 视界、 AI For OS、「如意玲珑」 应用生态、「deepin IDE」 集成开发环境等诸多重磅更新。&lt;/p&gt; 
 &lt;p&gt;deepin V23 研发耗时三年，上线了 200 余个产品优化和新增需求，迭代了 9 个版本、51 次内测，自研了 8 款开发工具。&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/307420&quot; target=&quot;news&quot;&gt;学生篡改同学高考志愿被刑拘，构成「破坏计算机系统罪」&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0816/120920_ymfD_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2703634217%2FOso7kapwK&quot; target=&quot;_blank&quot;&gt;Processing 是一种开源编程语言，专门为电子艺术和视觉交互设计而创建&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;它由 MIT 媒体实验室的 Casey Reas 和 Benjamin Fry 于 2001 年发起。Processing 的目的是通过可视化的方式辅助编程教学，并在此基础上表达数字创意。&lt;/p&gt; 
    &lt;p&gt;Processing 语言的语法简易，基于 Java 语言，但更适合艺术家、设计师等非程序员群体。它广泛应用于艺术、交互、动画、数据可视化、视觉设计和原型开发等领域。&lt;/p&gt; 
    &lt;p&gt;下面为它的一段代码示例&lt;/p&gt; 
    &lt;p&gt;f=0,draw=a=&amp;gt;{for(f||createCanvas(W=400,W,WEBGL),background(P=PI/150),R=rotate,R(f+=.001),N=sin,u=0;u&amp;lt;TAU;u+=P)for(v=0;v&amp;lt;TAU;v+=P)push(r=200*N(v)),S=(Z=tan(U=u+f)*N(v)*r)*cos(U+v)*9,rotateX(U),R(U),translate(N(v)*W,N(Z/W)*tan(v)*Z,2*-Z),pop(sphere(S/600,W))};&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div style=&quot;text-align:right&quot;&gt;
   &lt;span&gt;- 微博&amp;nbsp;&lt;strong&gt;物理芝士数学酱&lt;/strong&gt;&lt;/span&gt;
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1554710050%2FOsoZHtJT3&quot; target=&quot;_blank&quot;&gt;马斯克的梗图满天飞&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     马斯克的最新大模型刚上线，就把自家老板玩坏了，现在已经梗图满天飞了。
    &lt;/div&gt; 
    &lt;div&gt;
     &amp;nbsp;
    &lt;/div&gt; 
    &lt;div&gt;
     &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-6f88fdfc75aff8f45fc0007dc9a4daf721e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;&lt;span&gt;傅盛&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1144393351%2FOsv7Ro3Wf%3Frefer_flag%3D1001030103_&quot; target=&quot;_blank&quot;&gt;网传海思可能会脱离华为，成为独立的芯片公司&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     网传海思可能会脱离华为，成为独立的芯片公司，这样海思就可以向全球各厂商供货，而不是华为独占。对于海思的发展壮大可是个很好的推动，各手机厂商都可以推出基于麒麟处理器以及开源鸿蒙系统（就像安卓一样，可以自主打造 UI）的手机，除了高通、联发科技，要有了新的选择，而这个选择是完全自主可控的，不会受到外部威胁，而且可以对高通狠狠地压价，这对于国产芯片产业和信息产业将是巨大利好。如果真能如此，那么华为等于是把培养好的优秀的孩子为国贡献了，更加值得敬佩！（以上仅为预测）
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;通信老柳&lt;/strong&gt;&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1233486457%2FOslP9BqBx%3Fpagetype%3Dprofilefeed&quot; target=&quot;_blank&quot;&gt;Transformer 的可视化解释&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    关于 Transformer 的可视化解释，已经有不少了，但是科普永远不嫌多。这个可视化网站，模拟了实际 Token 的运行，很写实了。链接：https://poloclub.github.io/transformer-explainer/
   &lt;/div&gt; 
   &lt;div style=&quot;text-align:right&quot;&gt;
    - 微博&amp;nbsp;
    &lt;strong&gt;高飞&lt;/strong&gt;
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1560906700%2FOsvmtkAq5&quot; target=&quot;_blank&quot;&gt;前 Google CEO 声称远程工作导致了 Google 在 AI 竞争中落后&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;曾经担任谷歌 CEO 长达 10 年之久的 Eric Schmidt 前几天去斯坦福大学受邀计算机学院的会议，他的演讲全程各种放飞自我，中途语重心长的告诉台下学生，这场会议是保密的，自己说的那些话千万不要外传。&lt;/p&gt; 
    &lt;p&gt;然而，主办方对 Eric Schmidt 说，这场会议有摄像头正在全程直播……他的表情就凝固了。虽然斯坦福大学后来把视频从 YouTube 撤了下去，但已经有很多人都做了存档，Github 上也有全文备份：transcripts&lt;br&gt; /Stanford_ECON295⧸CS323_I_2024_I_The_Age_of_AI,_Eric_Schmidt.txt&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;阑夕&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnew.qq.com%2Frain%2Fa%2F20240815A08XLJ00&quot; target=&quot;_blank&quot;&gt;ETH 总供应量突破 1.2 亿枚&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt;
  &lt;span style=&quot;background-color:#ffffff; color:#1f1f1f&quot;&gt;去中心化的开源区块链平台以太坊最近达到重要里程碑，ETH 总供应量突破 1.2 亿枚，Ultrasound.money 的最新数据，过去 30 天内发行了 77,091 个 ETH，当前以太坊代币供应量已增加至约 1.2028 亿枚 ETH。除了过去 30 天内发行的 77,091 ETH 之外，还有 19,438 ETH 通过销毁机制被销毁，导致净供应量增加约 57,653 ETH。&lt;/span&gt;
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;币界网&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F3g.k.sohu.com%2Ft%2Fn814024429%3FserialId%3Df180c7ac8bc4269e03b11d09af63d811&quot; target=&quot;_blank&quot;&gt;美国 AI 法案大削弱！AI 圈炸锅，李飞飞公开谴责，国内 AI 企业关心的全在这了&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;饱受争议的加州《前沿 AI 模型安全创新法案》（后称加州 AI 安全法案）在大幅度削弱后，顺利通过加州众议院拨款委员会的审核。在国家层面监管法律难产的困局中，这成为了美国在 AI 监管上迈出的重要一步，然而科技界部分人士认为这最终将会损害加州乃至美国在 AI 领域的领先地位。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;智东西&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F36kr.com%2Fp%2F2908069089549185&quot; target=&quot;_blank&quot;&gt;半年亏 30 亿，「硅片王」没扛住，退二线了&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;小刘有些紧张了，他是 TCL 中环天津基地的一名工程师。两周前，这个硅片巨头的 CEO 沈浩平的突然辞任，开始在内部产生影响。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;据他说，目前公司已经开始有基地部分停工，该消息并未得到 TCL 中环的确认。公开数据显示，这家公司的硅片业务开工率在今年上半年维持在 95% 左右，而老对手隆基绿能只有 50%。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;中国企业家杂志&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.com.cn%2Fstock%2Fusstock%2Fc%2F2024-08-16%2Fdoc-inciuums2788305.shtml&quot; target=&quot;_blank&quot;&gt;谷歌前 CEO 建议买入英伟达：AI 芯片领先地位很难被超越&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;施密特在斯坦福大学本周发布、但后来被删除的一段视频中表示，大型科技公司正计划对基于英伟达的人工智能数据中心进行越来越大的投资，建设成本可能高达 3000 亿美元。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#212121&quot;&gt;环球市场播报&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.cn%2Farticle_2853016445_aa0d937d02000zqde.html&quot; target=&quot;_blank&quot;&gt;破解 AI 大模型落地成本难题，开源开放是「必修课」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;虽然开源大模型相关产品比闭源大模型的产品问世的时间较晚，但是其增长速度迅猛，而开源大模型的能力当下也足以媲美最先进的闭源大模型。例如，Meta 最新发布的 Llama3.1 模型的参数规模达到 403B，是目前参数规模最大的开源模型。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span&gt;钛媒体 APP&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8c5hSlbWELg&quot; target=&quot;_blank&quot;&gt;国泰君安：算力需求高增 AI ASIC 突围在即&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;国泰君安证券发布研报认为，ASIC 针对特定场景设计，有配套的通信互联和软件生态，虽然目前单颗 ASIC 算力相比最先进的 GPU 仍有差距，但整个 ASIC 集群的算力利用效率可能会优于可比的 GPU，同时还具备明显的价格、功耗优势，有望更广泛地应用于 AI 推理与训练。其软硬件生态体系日趋成熟，未来有望实现高速增长。国泰君安证券看好 ASIC 的大规模应用带来云厂商 ROI 提升，同时也建议关注定制芯片产业链相关标的。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;智通财经 APP&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.cn%2Farticle_1650111241_625ab309020019r6g.html&quot; target=&quot;_blank&quot;&gt;阿里调整仍「在路上」 淘天加速商业化是重中之重&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;另据国信证券统计的电商企业 2023 年的货币化率数据，2023 年抖音电商的货币化率飙高至 9%，拼多多货币化率超过了 4.5%，淘宝天猫的货币化率约为 3.77%。具体将淘宝与拼多多做对比，2023 年淘宝的货币化率约为 1.1%，拼多多的货币化率则是淘宝的 4 倍，约为 4.4%。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;由此可见，此前淘宝对商家加收基础软件服务费，目的在于提升淘宝货币化率，在接下来一段时间也会成为阿里巴巴增加营收的重要手段之一。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;- &lt;/span&gt;&lt;strong&gt;中国经营报&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnwtgck%2Fpiping-server&quot; target=&quot;_blank&quot;&gt;nwtgck/piping-server&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;272&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a8fc6c0e93a2411f0115ee7fc6c0c9ea725.gif&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnwtgck%2Fpiping-server&quot; target=&quot;_blank&quot;&gt;https://github.com/nwtgck/piping-server&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Piping 是轻量级的开源文件传输工具，支持自托管，支持使用 curl、wget 下载，支持更广泛地在无浏览器的设备上使用，也可以用于不同设备间传输文本或者文件，或者在不同用户间传递资料等场景。&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/u/4939618/blog/15330069&quot; target=&quot;_blank&quot;&gt;基于飞桨框架的稀疏计算使用指南&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;本文将详细介绍如何基于飞桨框架进行稀疏计算，包括稀疏数据格式的基础知识、如何创建和操作稀疏张量，以及如何开发和训练稀疏神经网络模型，特别是如何实现和应用稀疏 ResNet。通过这些知识，我们可以更有效地利用计算资源，加速模型训练过程，同时提高模型处理大规模稀疏数据的能力。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;图片&quot; height=&quot;251&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c6086b15bb71ba6ac953c90ab8894148b7f.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FLx1y1-XGEnHVjr8QZFuI6A&quot; target=&quot;_blank&quot;&gt;deepin V23 正式发布：全新 DDE 桌面环境、「原子更新」能力、全栈自研矩阵、「如意玲珑」软件包格式&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：deepin 的界面我真感觉不错&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：挺好的。争取后面慢慢把桌面软件闭环，形成一个统一的系统。提供统一的体验。而不再是积木一样拼装。尤其是 api，abi，慢慢沉淀稳固下来，不轻易变动。linux 桌面世界，太碎片化了，导致应用开发分发是个老大难问题。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：新版桌面是基于 Wayland 的吗？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：有类似 xrdp 这样的软件吗？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：可惜是旧世界&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：emm Allure 的报告，加把劲吧，别在文章上下功夫&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：浏览器是自研的吗，那前端不是要多适配一种（还是基于 chromium 封装的&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：对哪些笔记本做了兼容性测试，有没有推荐清单？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：一会 Deepin v23，一会 Deepin V23，一会又 Deepin 23。你这个系统一点不讲究。版本号乱的一塌糊涂。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：openkylin 追的很紧，又搞一套标准，都在抢信创这块蛋糕，但技术上说还是看好 deepin 的方案&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F8ov7oRIn4qw2Xt4DAdraWA&quot; target=&quot;_blank&quot;&gt;前谷歌 CEO 大实话：远程工作导致谷歌在 AI 竞争中输得一塌糊涂、开源负担不起 AI 行业的成本&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：受教了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：google 觉得让员工尽早下班取得工作生活平衡比赢得竞争更重要，什么神仙公司&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：台积电的流水线可不是一般的流水线&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：分布式电源改造了车间才使生产力大幅提高？AI Agent？&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：现在的 ai 是电灯取代蜡烛，聊胜于无，真正的第二次工业革命是电动机和电动化设备大规模投入使用。&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：其说是谷歌的选择不如说是美国替他做了选择，因为美国需要这样的价值观来吸引人才&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FfvoLhtfh5a-DFEWphEjmgw&quot; target=&quot;_blank&quot;&gt;32 岁女生学编程，为 k8s 开源社区贡献代码——结果被群嘲&lt;/a&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：我认为没问题，格式错误也是错误，是错误就可以被修复，这很难理解吗，程序员的严谨哪里去了？不要告诉我文档贡献者不是贡献者哈&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：小红书上已经开始有跟风的模仿者了，这就真无语了。想参加开源就认真一些，即使带着功利心也请维护开源社区的环境。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：前两天我还就此喷了一个感觉像是为她洗的博主，说什么她这种新人提交 pr 就不该喷，那我寻思着转码 20 天就开始看 k8s，提交了一个没什么用的 pr，这种新人不该被喷？20 天一个语言就刚学完，都没熟练就搞这种，活该被骂，属于是纯粹作秀&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：看似学编程， 实则是搞自媒体&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：大家喷的是她的技术吗？喷的是这种人投机取巧，冶容诲淫的行为。因为那些混子项目经理早就这么干了，这个新来脸还没混熟，门路倒是摸透了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：bro 看起来更适合稻壳儿开源社区&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：不是语雀文档？&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：这自我营销意识，行业热门关键词的抓取能力，不愧是国内 985 的头脑&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：这博主确实心态很有问题。「第一次为开源社区做贡献」，这么说吧，是不是真的做了贡献，这个事情自己说了不算，别人说了才算。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：openkylin 追的很紧，又搞一套标准，都在抢信创这块蛋糕，但技术上说还是看好 deepin 的方案&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 11：加个换行没问题，但吹就有点过分了…&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 12：什么时候说实话都成网曝了？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 13：你看看搞底层的，搞单片机的，搞硬件的就不会有这么多骂战，出这些事儿的都是浮于应用层上的，为啥?&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 14：因为不用这东西，怎么会去关注他呢&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 15：健身房拍照打卡一个意思&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 16：英语专业转 IT 很适合，很多技术文档都需要英语外翻，而且公司壮大跨国业务，也都需要会英语的技术支持！&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 17：现在 AI 翻译效果很好了，是了微信读书会员看英文书双语翻译技术书的效果让我吃惊。&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 18：这么提交的话以后看提交的得忙死&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 19：我觉得网友喷她是因为她虚荣心太胜又没匹配的贡献&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307463</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307463</guid>
            <pubDate>Fri, 16 Aug 2024 11:01:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>基于飞桨框架的稀疏计算使用指南</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;blockquote&gt; 
 &lt;p&gt;本文作者-是 Yu 欸，华科在读博士生，定期记录并分享所学知识，博客关注者 5w+。本文将详细介绍如何在 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;PaddlePaddle&lt;/a&gt; 中利用稀疏计算应用稀疏 ResNet，涵盖稀疏数据格式的础知识、如何创建和操作稀疏张量，以及如何开发和训练稀疏神经网络模型。&lt;/p&gt; 
 &lt;p&gt;项目完整代码已上传至&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;星河社区：&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faistudio.baidu.com%2Fprojectdetail%2F8055035&quot; target=&quot;_blank&quot;&gt;https://aistudio.baidu.com/projectdetail/8055035&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;在现代计算框架中，为了高效地处理和存储大规模的数据集，尤其是在这些数据集中存在大量零值的情况下，采用稀疏数据结构变得尤为重要。&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;是一个领先的深度学习平台，提供了强大的稀疏计算能力，支持从基本的稀疏张量操作到构建复杂的稀疏神经网络。这些工具主要通过 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse 命名空间来实现，使得开发者能够高效处理大量包含零值的数据集，从而优化内存使用和计算速度&lt;/p&gt; 
&lt;p&gt;本文将详细介绍如何基于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架进行稀疏计算，包括稀疏数据格式的基础知识、如何创建和操作稀疏张量，以及如何开发和训练稀疏神经网络模型，特别是如何实现和应用稀疏 ResNet。通过这些知识，我们可以更有效地利用计算资源，加速模型训练过程，同时提高模型处理大规模稀疏数据的能力。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_1&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;01 稀疏格式简介&lt;/h1&gt; 
&lt;p&gt;稀疏格式是一种特殊的数据存储方式，旨在有效存储和处理其中大部分元素为零的矩阵或张量。这种方法可以显著减少存储空间的需求，并提高数据处理的效率。常见的稀疏格式包括 COO（座标列表格式）、CSR（压缩稀疏行格式）等。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎COO（Coordinate Format）&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 COO 格式中，只记录非零元素的位置和值。这种格式由三个主要组件组成：indices、values 和 shape。indices 是一个二维数组，其中的每一列代表一个非零元素的座标；values 存储对应的非零元素值；shape 则描述了张量的维度。如下图所示。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-c6086b15bb71ba6ac953c90ab8894148b7f.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎CSR（Compressed Sparse Row Format）&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;CSR 格式是一种更为紧凑的稀疏表示，专为快速的行访问和矩阵乘法运算优化。在 CSR 中，通过三个数组 crows、cols 和 values 来表示稀疏矩阵。crows 存储每一行第一个非零元素的索引，cols 存储非零元素的列索引，而 values 则直接存储这些非零元素的值。如下图所示。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-a641c55c94be8c7aa02b9589bb0052d4b99.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_2&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;02 基于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的稀疏张量支持&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架提供了完整的支持来创建和操作 COO 和 CSR 格式的稀疏张量。以下是基于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架创建和操作这些张量的具体方法。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎创建 COO&amp;nbsp;格式的&amp;nbsp;SparseTensor&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;COO 格式（Coordinate List）：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;这是一种常用的稀疏表示格式，其中非零元素通过其座标列表进行存储。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.sparse_coo_tensor(indices,values, shape)&amp;nbsp;可以创建 COO 格式的稀疏张量，其中 indices 是一个二维整数张量，表示非零元素的座标；values 是一个张量，包含与 indices 对应的值；shape 是一个定义张量形状的整数列表或张量。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;结构特点：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;COO 格式通过一个座标列表存储非零元素的位置和相应的值。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;它使用三个数组：一个数组存储行索引，一个存储列索引，第三个存储元素值。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;适用场景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;数据添加频繁：当稀疏矩阵需要频繁添加新的非零元素时，COO 格式是较好的选择，因为它允许直接添加数据而不需重新构造整个数据结构。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;简单结构：适合于那些结构简单的矩阵，特别是在非零元素分布较为随机时。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;示例代码：&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架中， sparse_coo_tensor 函数可用来创建 COO 格式的稀疏张量。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import paddle

indices = [[0, 1, 2], [1, 2, 0]]
values = [1.0, 2.0, 3.0]
dense_shape = [3, 3]
coo = paddle.sparse.sparse_coo_tensor(indices, values, dense_shape)
print(coo)


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;输出：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Tensor(shape=[3, 3], dtype=paddle.float32, place=Place(cpu), stop_gradient=True,
       indices=[[0, 1, 2],
                [1, 2, 0]],
       values=[1., 2., 3.])


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在这个例子中，indices 定义了非零元素的位置，其中每个子数组的两个数字分别代表行和列的座标。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-39925ba44c4990271396b9d312242fbf22c.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎创建&amp;nbsp;CSR 格式的&amp;nbsp;SparseTenso&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;CSR 格式（Compressed Sparse Row）&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;这是另一种常用的稀疏表示格式，主要用于优化行访问的性能，其中非零元素通过行的压缩方式进行存储。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.sparse_csr_tensor(crows, cols, values, dense_shape) 可以创建 CSR 格式的稀疏张量，其中 crows 定义了每一行非零元素开始的位置在 values 数组中的索引，这有助于快速定位行的起始点和终点。cols 则指示了非零元素在各自行中的列位置，values 提供了相应的值。dense_shape 指定了张量的整体形状，即行数和列数。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;结构特点：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;CSR 格式通过行来压缩存储，使用三个数组：行指针数组、列索引数组、以及非零元素值数组。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;行指针数组的大小比实际行数多一个，用于表示每行的起始位置和结束位置。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;适用场景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;行操作优化：当需要高效地进行行相关的操作（如行切片、行求和）时，CSR 格式提供更优的性能。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;矩阵乘法：对于稀疏矩阵与稀疏或密集矩阵的乘法运算，CSR 格式通常会提供更好的性能。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;大规模数据处理：在处理大规模稀疏数据时，CSR 格式因其压缩特性而节省内存。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;示例代码：为了创建 CSR 格式的稀疏张量，&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架提供了 sparse_csr_tensor 函数。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import paddle

crows = [0, 2, 3, 5]
cols = [1, 3, 2, 0, 1]
values = [1, 2, 3, 4, 5]
dense_shape = [3, 4]
csr = paddle.sparse.sparse_csr_tensor(crows, cols, values, dense_shape)
print(csr)


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;输出：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Tensor(shape=[3, 4], dtype=paddle.int64, place=Place(cpu), stop_gradient=True, 
       crows=[0, 2, 3, 5], 
       cols=[1, 3, 2, 0, 1], 
       values=[1, 2, 3, 4, 5])


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在这个例子中，crows 定义了每一行非零元素开始的位置在 values 数组中的索引，这有助于快速定位行的起始点和终点。&lt;/p&gt; 
&lt;p&gt;这种 CSR 格式的表示方式适用于数据稀疏且行访问频繁的场景。它通过压缩行索引来减少内存使用，优化了对稀疏矩阵行的操作，使得行级操作更加高效。在处理行密集型操作（如行切片或行求和）时特别高效，也适合于稀疏矩阵的乘法等计算密集任务。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎创建稀疏张量的相关参数详解&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在基于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架创建稀疏张量 API 中，参数的设计允许用户灵活定义和操作稀疏数据结构。对于两种类型的稀疏张量创建函数，参数主要涉及初始化数据的类型和结构，其中：&lt;/p&gt; 
&lt;p&gt;■&amp;nbsp;&lt;strong&gt;共通参数&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;对于 sparse_coo_tensor 和 sparse_csr_tensor 函数，存在一些共通的参数，这些参数允许用户指定如何构建和处理稀疏张量：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;values (list|tuple|ndarray|Tensor)：&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;表示非零元素的实际数值。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;类似于索引参数，可以是 list、tuple、NumPy ndarray 或 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;Paddle&lt;/a&gt; Tensor。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;shape (list|tuple, 可选)：&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;定义稀疏张量的形状，如果未提供，则会根据 indices 或 crows 和 cols 的最大值自动推断。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;必须是一个整数列表或元组，指定张量在每个维度的大小。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;dtype (str|np.dtype, 可选)：&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;指定张量元素的数据类型，如&amp;nbsp;&#39;float32&#39;, &#39;int64&#39; 等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如果未指定，则从 values 的数据类型自动推断。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt;place (CPUPlace|CUDAPinnedPlace|CUDAPlace|str, 可选)：&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;决定张量的存储设备，例如 CPU 或 GPU。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如果未指定，则使用当前环境的默认设备。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;5&quot;&gt; 
 &lt;li&gt;stop_gradient (bool, 可选)：&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;指示是否对该张量进行梯度计算。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在大多数深度学习应用中，非模型权重的张量通常设置为 True 以提高计算效率。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;■&amp;nbsp;&lt;strong&gt;特定格式的参数细节&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;除了上述共通参数外，COO 和 CSR 格式因其数据结构的不同而在参数应用上有所区别。&lt;/p&gt; 
&lt;p&gt;indices, crows, cols (list|tuple|ndarray|Tensor)：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;对于 COO 格式，indices 参数是一个二维数组，用于直接指定每个非零元素的多维座标。主要用于数据的随机访问和转换操作，适用于那些非零元素分布相对均匀的场景。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;对于 CSR 格式，crows 表示每一行的起始非零元素索引，而 cols 存储这些非零元素的列索引。CSR 格式优化了行的连续访问，非常适合矩阵乘法和其他行优先操作。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;这些参数可以是 Python 的 list 或 tuple，也可以是 NumPy ndarray 或 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;Paddle&lt;/a&gt; Tensor。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;通过这些参数的灵活使用，&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架允许开发者以高效且灵活的方式处理大规模稀疏数据集，从而在保持性能的同时减少内存消耗。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎COO 格式和 CSR 格式的选择建议&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;如果应用主要涉及构建稀疏矩阵和逐项添加数据，COO 格式会更简单且直接。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如果应用需要高效的行操作或频繁进行矩阵乘法，特别是在稀疏矩阵较大的情况下，CSR 格式是更好的选择。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;选择哪种格式应基于具体应用需求，如操作类型、数据规模和性能要求。在&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架中，你可以根据需要轻松地在两种格式之间转换，以适应不同的计算需求。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎稀疏与稠密 Tensor&amp;nbsp;互转&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架提供了一套简单易用的接口，使得稀疏张量的使用与传统的稠密张量操作体验高度一致，从而降低了学习成本并便于开发者快速上手。这种设计允许在同一个模型中灵活地使用稠密和稀疏数据结构，而且方便转换，这对于处理大规模数据集尤其重要，在深度学习、图像处理和自然语言处理等领域有着广泛的应用。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架支持通过几个简单的 API，实现稀疏与稠密之间的转换，这些操作保证了数据处理的灵活性和效率。如 Tensor.to_dense() 可以将稀疏张量转换为标准的密集张量, Tensor.to_sparse_coo(), 和 Tensor.to_sparse_csr() 可以将密集张量转换为 COO 格式、CSR 格式的稀疏张量。&lt;/p&gt; 
&lt;p&gt;以下为稠密到稀疏的转换代码示例：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import paddle

# 创建一个稠密的 Tensor
dense = paddle.to_tensor([[0, 1, 0, 2], 
                          [0, 0, 3, 4]], dtype=&#39;float32&#39;)

# 将稠密 Tensor 转换为 COO 格式的稀疏 Tensor
coo = dense.to_sparse_coo(sparse_dim=2)
print(coo)
# 输出：
# Tensor(shape=[2, 4], dtype=paddle.float32, place=Place(gpu:0), stop_gradient=True, 
#       indices=[[0, 0, 1, 1],
#                [1, 3, 2, 3]], 
#       values=[1., 2., 3., 4.])

# 将稠密 Tensor 转换为 CSR 格式的稀疏 Tensor
csr = dense.to_sparse_csr()
print(csr)
# 输出：
# Tensor(shape=[2, 4], dtype=paddle.float32, place=Place(gpu:0), stop_gradient=True, 
#       crows=[0, 2, 4], 
#       cols=[1, 3, 2, 3], 
#       values=[1., 2., 3., 4.])


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这些转换非常直观，仅需要简单的一步操作就可以完成，使得稀疏和稠密格式之间的交互变得简洁高效。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-37f3327578ae5384e619c7421156f42be56.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_3&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;03 基于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架进行稀疏计算的设计优势&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的设计目标之一是提供一致的用户体验，无论是处理稀疏数据还是稠密数据。这意味着即便是在处理包含大量零值的数据集时，开发者也可以利用熟悉的接口和模式来构建和训练模型。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎API 设计的一致性&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的稀疏模块提供了与常规稠密操作相似的 API 接口，开发者无需学习新的 API 就能处理稀疏数据。例如：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;稀疏卷积层：稀疏模块中的 SubmConv3D 直接对应常规卷积操作中的 Conv3D。二者参数非常相似，如 in_channels, out_channels, stride, padding 等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;批归一化和激活函数：稀疏模块同样提供了批归一化和激活函数，如 BatchNorm3D 和 ReLU，其用法与常规模块中的相同。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;▎集成度：训练和推理的处理流程&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;无论是稀疏还是稠密模型，&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架中的训练和推理流程保持一致。稀疏操作可以与&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的其他特性（如自动微分和优化器）无缝集成，使得构建和训练稀疏模型与常规模型几乎无异。&lt;/p&gt; 
&lt;p&gt;1)&amp;nbsp;定义模型：无论选择稀疏还是稠密模型，模型定义的方式都是相似的，使用 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.nn.Layer 类来构建网络层。&lt;/p&gt; 
&lt;p&gt;2)&amp;nbsp;编译模型：使用 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.Model 对象来包装定义好的网络，然后编译，包括设置优化器、损失函数和评估指标。&lt;/p&gt; 
&lt;p&gt;3)&amp;nbsp;训练和评估：通过调用 .fit 和 .evaluate 方法来进行训练和评估，这与处理稠密数据的流程完全一致。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_4&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;04 基于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的稀疏神经网络层支持&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;▎稀疏 ResNet 的应用场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在处理点云数据、图像识别或自然语言处理任务时，输入数据通常具有很高的维度和稀疏性。例如，3D 点云数据往往是非结构化的，大部分体积内没有有效信息（即大部分体积是空的）。使用传统的密集（dense）卷积网络处理这类数据会带来两个主要问题：效率低下：对于大量的空白区域依然进行计算，消耗计算资源；存储浪费：需要为大量的零值分配存储资源。&lt;/p&gt; 
&lt;p&gt;稀疏 ResNet 解决了这些问题，通过仅在非零数据点上进行操作，从而大幅提高了计算和存储效率。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎构建稀疏 ResNet 模型&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架中，稀疏 ResNet 可以通过 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse 模块中的稀疏卷积层（如 SubmConv3D）来实现。这些层专门用来处理稀疏数据。稀疏卷积层接受包含非零元素座标和值的稀疏张量，并只在这些非零元素上执行卷积运算。通过构建包含这些稀疏卷积层的网络（如 ResNet 结构中的基础块），可以高效处理稀疏数据。&lt;/p&gt; 
&lt;p&gt;创建稀疏 ResNet 主要涉及以下几个步骤：&lt;/p&gt; 
&lt;p&gt;1)&amp;nbsp;创建稀疏张量：首先需要从稀疏数据（即大部分值为零的数据）中创建稀疏张量。这通常涉及指定非零数据点的座标和相应的值。&lt;/p&gt; 
&lt;p&gt;2)&amp;nbsp;定义稀疏网络结构：设计一个网络结构，它包含适用于处理稀疏数据的特殊卷积层（如 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;Paddle&lt;/a&gt; 的 SubmConv3D）。这些层特别优化了内存和计算资源，只在数据非零的地方进行计算。&lt;/p&gt; 
&lt;p&gt;3)&amp;nbsp;前向传播：将稀疏张量输入到网络中，执行前向传播，网络会在内部处理稀疏数据，并输出结果。&lt;/p&gt; 
&lt;p&gt;4)&amp;nbsp;训练和评估：就像使用常规神经网络一样，定义损失函数和优化器，然后在训练数据上训练网络，最后在验证数据上评估网络的性能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎稀疏 ResNet 的关键组件&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse 模块提供了对稀疏数据操作的支持，包括稀疏张量的创建、转换和计算功能。这些神经网络层针对稀疏数据的特点进行了优化，以减少对零值的计算和存储需求，提高处理效率。&lt;/p&gt; 
&lt;p&gt;1)&amp;nbsp;稀疏张量（Sparse Tensor）:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;稀疏张量是一种特殊的数据结构，主要用于有效存储和处理大部分元素为零的数据。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架中，可以使用 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.sparse_coo_tensor 来创建稀疏张量，需要提供非零元素的座标和值。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;2)&amp;nbsp;稀疏卷积层（Sparse Convolution）:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.Conv3D：标准的三维卷积层，支持在稀疏数据上的操作，适用于处理体积大的三维数据。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.SubmConv3D：子流形三维卷积层，用于处理 3D 数据的稀疏子矩阵卷积层。该层允许在 3D 体积数据中有效地进行卷积操作，无需将整个数据转换为密集格式，特别适用于医学影像和三维扫描等领域。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;3)&amp;nbsp;批归一化层（Batch Normalization）&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.BatchNorm3D：批归一化层，专为三维数据设计，可以与稀疏卷积层结合使用，以优化稀疏数据的特征归一化过程。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;4)&amp;nbsp;池化层（Pooling Layers）&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.MaxPool3D：三维最大池化层，用于在稀疏三维数据上执行池化操作，有助于降低数据的维度和提高模型的抽象能力。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;5)&amp;nbsp;激活层（Activation Layers）&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.ReLU、&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.ReLU6：标准 ReLU 和 ReLU6 激活函数，支持在稀疏数据路径中使用，与常规的激活函数使用方法相同，但针对稀疏数据进行了优化。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.LeakyReLU：LeakyReLU 激活层，包含小负斜率的 ReLU 变体，适用于在稀疏数据中增强模型的非线性处理能力。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.Softmax：Softmax 激活层，适用于稀疏数据路径，使用方法与常规密集数据的 Softmax 相同，但特别针对稀疏数据进行了优化，常用于处理多分类问题。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;▎构建稀疏 ResNet 模型的示例代码&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架中，稀疏 ResNet 的实现和使用与传统的稠密网络相似，这得益于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架稀疏模块的设计，使得调用体验与稠密高度一致，非常容易上手。通过利用稀疏技术，可以有效处理大规模稀疏数据集，提高计算效率，降低存储需求，这在处理现代大数据应用时显得尤为重要。&lt;/p&gt; 
&lt;p&gt;下面以稀疏 ResNet 为例，说明&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架对稀疏神经网络层的支持：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import paddle
from paddle import sparse
from paddle.sparse import nn as sparse_nn

# 定义 3D 稀疏卷积块
def sparse_conv_block(in_channels, out_channels, stride=1, padding=1, key=None):
    block = paddle.nn.Sequential(
        sparse_nn.SubmConv3D(in_channels, out_channels, kernel_size=3, stride=stride, padding=padding, bias_attr=False, key=key),
        sparse_nn.ReLU()
    )
    return block

# 定义一个简单的稀疏 3D ResNet 模型
class SparseResNet(paddle.nn.Layer):
    def __init__(self, in_channels):
        super(SparseResNet, self).__init__()
        self.layer1 = sparse_conv_block(in_channels, 16, key=&#39;layer1&#39;)
        self.layer2 = sparse_conv_block(16, 32, stride=2, key=&#39;layer2&#39;)
        self.layer3 = sparse_conv_block(32, 64, stride=2, key=&#39;layer3&#39;)

    def forward(self, x):
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        return x

# 假设输入数据
batch_size = 1
channels = 1
depth = 100
height = 100
width = 100

# 创建稀疏张量的座标和值
coords = paddle.to_tensor([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 1, 2, 1, 1], [0, 2, 2, 1, 2], [0, 1, 2, 2, 0]], dtype=&#39;int64&#39;)  # 5D 座标 (batch, channel, depth, height, width)
values = paddle.to_tensor([1.0, 1.5, 2.0, 3.0, 3.5], dtype=&#39;float32&#39;)  # 每个值对应一个座标
shape = paddle.to_tensor([batch_size, channels, depth, height, width], dtype=&#39;int64&#39;)  # 5D 形状

# 创建稀疏张量
x = sparse.sparse_coo_tensor(coords, values, shape)

# 实例化模型
model = SparseResNet(channels)

# 使用模型进行预测
output = model(x)
print(output)


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-742ad74be6ed19437fb7b514f6e4cfe8239.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;模型打印结果：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;SparseResNet(
  (layer1): Sequential(
    (0): SubmConv3D(3, 16, kernel_size=[3, 3, 3], padding=1, data_format=NDHWC)
    (1): BatchNorm(num_features=16, momentum=0.9, epsilon=1e-05, data_format=NDHWC)
    (2): ReLU()
    (3): SubmConv3D(16, 16, kernel_size=[3, 3, 3], padding=1, data_format=NDHWC)
    (4): BatchNorm(num_features=16, momentum=0.9, epsilon=1e-05, data_format=NDHWC)
    (5): ReLU()
  )
  (layer2): Sequential(
    (0): SubmConv3D(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=1, data_format=NDHWC)
    (1): BatchNorm(num_features=32, momentum=0.9, epsilon=1e-05, data_format=NDHWC)
    (2): ReLU()
    (3): SubmConv3D(32, 32, kernel_size=[3, 3, 3], padding=1, data_format=NDHWC)
    (4): BatchNorm(num_features=32, momentum=0.9, epsilon=1e-05, data_format=NDHWC)
    (5): ReLU()
  )
  (layer3): Sequential(
    (0): SubmConv3D(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=1, data_format=NDHWC)
    (1): BatchNorm(num_features=64, momentum=0.9, epsilon=1e-05, data_format=NDHWC)
    (2): ReLU()
    (3): SubmConv3D(64, 64, kernel_size=[3, 3, 3], padding=1, data_format=NDHWC)
    (4): BatchNorm(num_features=64, momentum=0.9, epsilon=1e-05, data_format=NDHWC)
    (5): ReLU()
  )
)


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;输出：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Tensor(shape=[1, 1, 100, 100, 64], dtype=paddle.float32, place=Place(cpu), stop_gradient=False, 
       indices=[[0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 1, 1, 2],
                [0, 1, 2, 2]], 
       values=[[0.        , 0.        , 0.08977110, 0.        , 0.        ,
                0.        , 0.        , 0.16325581, 0.        , 0.        ,
                0.08592274, 0.        , 0.        , 0.        , 0.07656589,
                ……
                0.12824626, 0.38880903, 0.        , 0.        , 0.23209766,
                0.        , 0.        , 0.        , 0.24539268, 0.17324814,
                0.        , 0.        , 0.        , 0.        ]])


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的稀疏模块可以创建类似于常规 ResNet 的模型架构，但使用的是稀疏卷积层替换传统的密集卷积层。每个稀疏卷积层后通常跟随一个批归一化层和 ReLU 激活函数，形成一个基础的稀疏残差块。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_5&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;05 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;Paddle&lt;/a&gt;3D 应用实例解读：稀疏 ResNet&lt;/h1&gt; 
&lt;p&gt;代码来源：&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;Paddle&lt;/a&gt;3D 的 sparse_resnet.py&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎代码注释&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;这段代码定义了一个基于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的稀疏 3D 残差网络（SparseResNet3D），主要用于处理 3D 点云数据，如自动驾驶系统中的激光雷达扫描数据。它通过稀疏卷积层对体素化（voxelized）的点云数据进行特征提取和处理。&lt;/p&gt; 
&lt;p&gt;&quot;&quot;&quot;该符号内代码注释为新增&quot;&quot;&quot;&lt;/p&gt; 
&lt;p&gt;导入所需库和模块：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import numpy as np
import paddle
from paddle import sparse
from paddle.sparse import nn
from paddle3d.apis import manager
from paddle3d.models.layers import param_init


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这些库包括 numpy 用于数学运算，&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架及其稀疏模块用于深度学习操作，以及 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;3d 的 API 和模型层初始化。&lt;/p&gt; 
&lt;p&gt;定义卷积函数：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;def conv3x3(in_out_channels, out_out_channels, stride=1, indice_key=None, bias_attr=True):
    &quot;&quot;&quot;3x3 convolution with padding, specifically for SubM sparse 3D convolution.&quot;&quot;&quot;
    return nn.SubmConv3D(
        in_out_channels, out_out_channels, kernel_size=3, stride=stride, padding=1, bias_attr=bias_attr, key=indice_key)

def conv1x1(in_out_channels, out_out_channels, stride=1, indice_key=None, bias_attr=True):
    &quot;&quot;&quot;1x1 convolution, also for SubM sparse 3D convolution.&quot;&quot;&quot;
    return nn.SubmConv3D(
        in_out_channels, out_out_channels, kernel_size=1, stride=stride, padding=1, bias_attr=bias_attr, key=indice_key)


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;conv3x3 和 conv1x1 是用于创建 3D 稀疏卷积层的帮助函数，它们使用了&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的 SubmConv3D，这是一种专门处理稀疏数据的 3D 卷积。&lt;/p&gt; 
&lt;p&gt;定义稀疏基础块类：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;class SparseBasicBlock(paddle.nn.Layer):
&quot;&quot;&quot; A basic building block for constructing sparse 3D ResNet with two convolutional layers.&quot;&quot;&quot;

    expansion =1

def__init__(self, in_channels, out_channels, stride=1, downsample=None, indice_key=None):
super(SparseBasicBlock, self).__init__()

self.conv1 = conv3x3(in_channels, out_channels, stride, indice_key, True)
self.bn1 = nn.BatchNorm(out_channels, epsilon=1e-3, momentum=0.01)
self.relu = nn.ReLU()
self.conv2 = conv3x3(out_channels, out_channels, indice_key=indice_key, bias_attr=True)
self.bn2 = nn.BatchNorm(out_channels, epsilon=1e-3, momentum=0.01)
self.downsample = downsample
self.stride = stride

def forward(self, x):
        identity = x

        out =self.conv1(x)
        out =self.bn1(out)
        out =self.relu(out)
        out =self.conv2(out)
        out =self.bn2(out)

ifself.downsample isnotNone:
            identity =self.downsample(x)

        out = sparse.add(out, identity)
        out =self.relu(out)
return out


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;SparseBasicBlock 是 SparseResNet3D 的核心模块，包括两个稀疏卷积层、批归一化和 ReLU 激活函数，以及可选的下采样，用于残差连接。&lt;/p&gt; 
&lt;p&gt;定义 SparseResNet3D 网络：&lt;/p&gt; 
&lt;p&gt;@manager.MIDDLE_ENCODERS.add_component&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;class SparseResNet3D(paddle.nn.Layer):
    &quot;&quot;&quot; The main Sparse 3D ResNet class, designed for processing voxelized point cloud data.&quot;&quot;&quot;
    
    def __init__(self, in_channels, voxel_size, point_cloud_range):
        super(SparseResNet3D, self).__init__()

        # Initial conv layer
        self.conv_input = paddle.nn.Sequential(
            nn.SubmConv3D(in_channels, 16, 3, bias_attr=False, key=&#39;res0&#39;),
            nn.BatchNorm(16), nn.ReLU())

        # Subsequent layers with increasing channel depth and decreasing spatial dimensions
        self.conv1 = paddle.nn.Sequential(
            SparseBasicBlock(16, 16, indice_key=&#39;res0&#39;),
            SparseBasicBlock(16, 16, indice_key=&#39;res0&#39;),)

        self.conv2 = paddle.nn.Sequential(
            nn.Conv3D(16, 32, 3, 2, padding=1, bias_attr=False),  # downsample
            nn.BatchNorm(32), nn.ReLU(),
            SparseBasicBlock(32, 32, indice_key=&#39;res1&#39;),
            SparseBasicBlock(32, 32, indice_key=&#39;res1&#39;),)

        self.conv3 = paddle.nn.Sequential(
            nn.Conv3D(32, 64, 3, 2, padding=1, bias_attr=False),  # downsample
            nn.BatchNorm(64), nn.ReLU(),
            SparseBasicBlock(64, 64, indice_key=&#39;res2&#39;),
            SparseBasicBlock(64, 64, indice_key=&#39;res2&#39;),)

        self.conv4 = paddle.nn.Sequential(
            nn.Conv3D(64, 128, 3, 2, padding=[0, 1, 1], bias_attr=False),  # downsample
            nn.BatchNorm(128), nn.ReLU(),
            SparseBasicBlock(128, 128, indice_key=&#39;res3&#39;),
            SparseBasicBlock(128, 128, indice_key=&#39;res3&#39;),)

        # Extra conv layer to further process features
        self.extra_conv = paddle.nn.Sequential(
            nn.Conv3D(128, 128, (3, 1, 1), (2, 1, 1), bias_attr=False),  # Adjust the spatial dimensions
            nn.BatchNorm(128), nn.ReLU(),)

        # Calculate the grid size for the 3D data based on the provided voxel size and point cloud range
        point_cloud_range = np.array(point_cloud_range, dtype=np.float32)
        voxel_size = np.array(voxel_size, dtype=np.float32)
        grid_size = (point_cloud_range[3:] - point_cloud_range[:3]) / voxel_size
        grid_size = np.round(grid_size).astype(np.int64)
        self.sparse_shape = np.array(grid_size[::-1]) + [1, 0, 0]
        self.in_channels = in_channels
        self.init_weight()

    def init_weight(self):
        &quot;&quot;&quot; Initialize weights for convolutional layers and batch normalization layers.&quot;&quot;&quot;
        for layer in self.sublayers():
            if isinstance(layer, (nn.Conv3D, nn.SubmConv3D)):
                param_init.reset_parameters(layer)
            if isinstance(layer, nn.BatchNorm):
                param_init.constant_init(layer.weight, value=1)
                param_init.constant_init(layer.bias, value=0)

    def forward(self, voxel_features, coors, batch_size):
        &quot;&quot;&quot; The forward pass for processing input voxel features and coordinates.&quot;&quot;&quot;
        # Setup the sparse tensor with the specified shape and input features
        shape = [batch_size] + list(self.sparse_shape) + [self.in_channels]
        sp_x = sparse.sparse_coo_tensor(
            coors.transpose((1, 0)),
            voxel_features,
            shape=shape,
            stop_gradient=False)

        # Pass the sparse tensor through the sequential layers
        x = self.conv_input(sp_x)
        x_conv1 = self.conv1(x)
        x_conv2 = self.conv2(x_conv1)
        x_conv3 = self.conv3(x_conv2)
        x_conv4 = self.conv4(x_conv3)

        # Final extra convolutional processing
        out = self.extra_conv(x_conv4)

        # Convert the output back to a dense tensor and adjust dimensions for further processing
        out = out.to_dense()
        out = paddle.transpose(out, perm=[0, 4, 1, 2, 3])
        N, C, D, H, W = out.shape
        out = paddle.reshape(out, shape=[N, C * D, H, W])
        return out


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;此类中定义了一系列卷积层和残差块，用于逐步处理和提取输入点云数据的特征。网络通过逐层降采样来增加特征深度并减小空间维度，最终输出密集的特征张量，适合后续的处理或学习任务。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_6&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;06 小结&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架不仅支持自定义稀疏神经网络结构，也可以通过提供的 API 轻松地实现已有的经典结构，如 ResNet、VGG 等。对于这些经典网络，通过替换标准的卷积层为相应的稀疏卷积层，可以使其适应稀疏数据的处理，从而拓展其应用到新的领域，如 3D 点云处理。&lt;/p&gt; 
&lt;p&gt;总的来说，&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架在提供稀疏计算支持的同时，确保了开发体验的一致性和直观性，方便开发者在稀疏和稠密数据操作之间切换，同时保证数据处理高效。&lt;/p&gt; 
&lt;p&gt;——————END——————&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;[1]官网 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse 目录&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.paddlepaddle.org.cn%2Fdocumentation%2Fdocs%2Fzh%2Fapi%2Fpaddle%2Fsparse%2FOverview_cn.html&quot; target=&quot;_blank&quot;&gt;https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/sparse/Overview_cn.html&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;[2]&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FSD_P2K1HP3FVM5ADqbpmVQ&quot; target=&quot;_blank&quot;&gt;https://mp.weixin.qq.com/s/SD_P2K1HP3FVM5ADqbpmVQ&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;推荐阅读：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592895%26idx%3D1%26sn%3Da1963501c0f63ff70d5fa457680a0ba7%26chksm%3Dc03f5bc3f748d2d51f25900ca7f31b0a565431f95af0d5c1e34fa7c889ebd160ac46917acee4%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;云高性能计算平台 CHPC 让企业的传统 HPC 玩出新花样&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592870%26idx%3D1%26sn%3D4356bf3d908eaf1a5457e2c05f06992c%26chksm%3Dc03f5bdaf748d2cc5bf279bf3a406c26cdd9a3c8e4f807c618768a9ebc1207c0809e2c7e539b%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;Embedding 空间中的时序异常检测&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592850%26idx%3D1%26sn%3D76f6451f3f149d210106dab1e036298c%26chksm%3Dc03f5beef748d2f8e47da9b2dec927af37b69d534958950e9bda1547645e2b9583acebd4335f%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;读友好的缓存淘汰算法&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592618%26idx%3D1%26sn%3D61740f39ea744e00280c70b638622b91%26chksm%3Dc03f5ad6f748d3c02b964f5f2d5c1b716c38c98c630d4741f4b687821c33d52f16b2cc8de612%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;如何定量分析 Llama 3，大模型系统工程师视角的 Transformer 架构&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592237%26idx%3D1%26sn%3D99dff8b8971f210c69ee50fa7383b9ee%26chksm%3Dc03f5951f748d0470163cdd13a5ce7d591a2054840fe8278ef7d5f4ba8ce7c374813ba823daf%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;微服务架构革新：百度 Jarvis2.0 与云原生技术的力量&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/4939618/blog/15330069</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/15330069</guid>
            <pubDate>Fri, 16 Aug 2024 09:13:14 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>学生篡改同学高考志愿被刑拘，构成「破坏计算机系统罪」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;据内蒙古自治区呼和浩特市公安局「青城公安」（青城是呼和浩特市的别名）8 月 15 日晚消息：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;近日，新城区公安分局警支大队接到报警，称高考志愿被他人恶意篡改。因为是自治区首起，警支大队即刻针对该案组织开展案情分析会，结合全国此类案件的判例进行分析，摸清案件脉络，讨论研究对此类新型网络犯罪案件的战术战法。&lt;/p&gt; 
 &lt;p&gt;警支大队依托自身技术优势，进行分析研判，发现呼和浩特市某职业学校学生王某某疑似利用隐蔽手段获取同学的填报高考志愿的账号、密码，并借机篡改其高考志愿。&lt;/p&gt; 
 &lt;p&gt;8 月 14 日，警支大队将此案立案侦查，并对犯罪嫌疑人进行讯问，犯罪嫌疑人王某某对其犯罪事实供认不讳，已构成「破坏计算机系统罪」。&lt;/p&gt; 
 &lt;p&gt;目前，公安机关已依法对犯罪嫌疑人王某某采取刑事拘留措施。&lt;/p&gt; 
 &lt;p&gt;&lt;img height=&quot;1492&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0816/120920_ymfD_2720166.png&quot; width=&quot;1920&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.weibo.com%2F2516388727%2FOspOpd9zO%23repost&quot; target=&quot;_blank&quot;&gt;https://www.weibo.com/2516388727/OspOpd9zO#repost&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;根据《中华人民共和国刑法》第二百八十六条，【破坏计算机信息系统罪】是指：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;违反国家规定，对计算机信息系统功能进行删除、修改、增加、干扰，造成计算机信息系统不能正常运行，后果严重的，处五年以下有期徒刑或者拘役；后果特别严重的，处五年以上有期徒刑。&lt;/p&gt; 
 &lt;p&gt;违反国家规定，对计算机信息系统中存储、处理或者传输的数据和应用程序进行删除、修改、增加的操作，后果严重的，依照前款的规定处罚。&lt;/p&gt; 
 &lt;p&gt;故意制作、传播计算机病毒等破坏性程序，影响计算机系统正常运行，后果严重的，依照第一款的规定处罚。&lt;/p&gt; 
 &lt;p&gt;单位犯前三款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照第一款的规定处罚。&lt;/p&gt; 
&lt;/blockquote&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307420</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307420</guid>
            <pubDate>Fri, 16 Aug 2024 08:14:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>阿里云最新财报：AI 收入实现三位数增长</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;8 月 15 日晚间，阿里巴巴集团&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F8MgxvFIxPOMUPszvSnmY7A&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;最新季度业绩，AI 推动阿里云重回增长，季度营收增长 6% 至 265.49 亿元，其中 AI 相关产品收入实现三位数增长，公共云业务实现两位数增长。同时，阿里云利润大涨，经调整 EBITA 利润同比增长 155%，单季度 EBITA 利润达到 23.37 亿元。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;该季度，阿里云聚焦「AI 驱动，公共云优先」战略，持续扩大技术及规模优势。财报显示，阿里云的外部收入（不包含阿里巴巴关联公司用云收入）同比增长也达到 6%，主要得益于 AI 推动相关产品采用率增加，公共云业务实现两位数增长。其中，AI 相关产品收入在上个季度实现三位数增长之后，在该季度也持续保持三位数增长。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;245&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e029d138f146dcfd18910754d9be0fb8d99.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;同时，阿里云利润大涨。该季度内，阿里云经调整后 EBITA 收入同比增长 155%，达到人民币 23.37 亿元，而 2023 年同期为人民币 9.16 亿元。财报表示，这一增长主要是由于专注于公共云战略，并提升运营效率，但利润增长部分被对客户和技术的持续投资所抵消。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;财报强调，阿里云将继续投资于客户和技术，特别是投入建设 AI 技术和基础设施，以推动 AI 应用的云计算采用率，并保持阿里云的市场领先优势。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;技术进展方面，该季度内阿里云发布了全球性能最强的开源模型 Qwen2-72B，该模型提升了代码、数学、推理、指令遵循、多语言理解等能力。Qwen2-72B 发布后即登顶 HuggingFace 的 Open LLM Leaderboard 开源模型榜单。中文大模型测评基准 SuperCLUE 在 2024 上半年报告中指出，Qwen2-72B 成为排名第一的中国大模型，也是全球最强的开源模型，「超过众多国内外闭源模型」，「引领全球的开源生态」。目前，通义千问开源模型下载量已突破 2000 万。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;同时，阿里云对通义千问 9 款主力大模型大幅降价。其中，通义千问 GPT-4 级主力模型 Qwen-Long 的 API 输入价格低至 1 块钱可以买 200 万 tokens。这款模型最高支持 1 千万 tokens 长文本输入，降价后约为 GPT-4 价格的 1/400。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;降价激发了阿里云 AI 产品的使用量。财报披露，阿里云 AI 平台百炼的付费用户数，比上一个季度增长超过 200%。百炼平台集成了上百款大模型 API，支持企业上架通用或行业模型，给开发者提供足够多样化的模型选择。据国际研究机构 Gartner 发布的 2024 年《数据科学和机器学习平台魔力象限》，阿里云跃升至挑战者象限，并成为报告中唯一入围的亚太厂商。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此外，阿里云作为奥运会独家云服务商，为刚刚结束的巴黎奥运会提供了全面支撑。今年巴黎奥运会上，云计算首次超越衞星成为奥运转播的主要方式，超过三分之二的奥运电视及网络直播信号基于阿里云向全球分发，从巴黎传输到全球 200 多个国家和地区，全球观看人数超 40 亿。阿里云的 AI 技术也首次在巴黎奥运中广泛应用。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307403</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307403</guid>
            <pubDate>Fri, 16 Aug 2024 07:20:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>滴滴开源 Flutter 混合开发框架 Unify</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;滴滴近日开源了自研 Unify 框架，旨在解决大规模跨端落地场景下，Flutter 与原生模块之间的通信问题。Unify 通过平台无关的模块抽象、灵活的实现注入、自动代码生成等特性，为开发者提供高效、灵活、易用的 Flutter 混合通信能力。&lt;/p&gt; 
&lt;p&gt;开源地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdidi%2FUnify&quot; target=&quot;_blank&quot;&gt;https://github.com/didi/Unify&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Unify 是一个 Flutter 混合开发框架，由滴滴出行国际化外卖团队自研，目前已经广泛应用于滴滴国际化外卖及国际化出行业务。&lt;/p&gt; 
&lt;p&gt;Unify 的亮点特性包括:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;平台无关的模块抽象&lt;/strong&gt;: 允许开发者使用 Dart 语言声明与平台无关的模块接口与实体。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;灵活的实现注入&lt;/strong&gt;: 开发者可以灵活地选择注入原生实现（Android/iOS）或 Flutter 实现。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;自动代码生成&lt;/strong&gt;: 借助强大的代码生成引擎,Unify 可以自动生成 Flutter、Android、iOS 多平台下统一调用的 SDK。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下面是一个使用 Unify 声明原生模块的示例:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;@UniNativeModule()
abstract class DeviceInfoService {
  Future&amp;lt;DeviceInfoModel&amp;gt; getDeviceInfo();
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;通过 Unify，上面的 Dart 接口可以自动映射到 Android 和 iOS 平台，开发者只需专注于各平台下的具体实现即可。在 Flutter 中使用时，调用方式就像普通的 Flutter 模块一样简单、直观:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;DeviceInfoService.getDeviceInfo().then((deviceInfoModel) {
  print(&quot;${deviceInfoModel.encode()}&quot;);
});&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unify 的整体原理如下：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-105ff4761152e62ed960a0d0c772a2309af.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Unify 能够很好地解决 Flutter 混合开发下的一些常见问题，例如:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;大量原生模块高效导入 Flutter&lt;/li&gt; 
 &lt;li&gt;大量 Flutter 模块高效导入原生&lt;/li&gt; 
 &lt;li&gt;解决大量 Channel 难以维护的问题&lt;/li&gt; 
 &lt;li&gt;原生与 Flutter 并存下的混合架构分层&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情查看&amp;nbsp;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdidi%2FUnify%2Fblob%2Fmaster%2FREADME.zh-CN.md&quot; target=&quot;_blank&quot;&gt;https://github.com/didi/Unify/blob/master/README.zh-CN.md&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307354/didi-unify-flutter</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307354/didi-unify-flutter</guid>
            <pubDate>Fri, 16 Aug 2024 04:24:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Claude 推出</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Anthropic &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.anthropic.com%2Fnews%2Fprompt-caching&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;在其 Claude 系列生成式 AI 模型的 API 中引入提示缓存（Prompt caching）功能，这将允许开发人员在 API 调用之间保存常用的提示，减少提示成本和延迟。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;提示缓存允许用户缓存常用上下文，以便在将来的 API 调用中使用。该公司称，通过为模型配备背景知识和过去的示例输出，长提示的成本可降低高达 90%，延迟可降低高达 85%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;287&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4fafd2675bd5a7d6450588361f8941a3c0d.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;提示缓存在多种用例中很有用，包括能够保留代码库的汇总版本以供编码助手使用、在提示中提供长格式文档以及提供带有所需输出的几个示例的详细指令集。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;用户还可以使用它与书籍、论文、文档和播客记录等长篇内容进行对话。 根据 Anthropic 的测试，与一本缓存了 100,000 个 token 的书籍聊天需要 2.4 秒，而没有缓存信息的情况下则需要 11.5 秒。这相当于延迟减少了 79%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;与基本输入令牌价格相比，缓存输入令牌的成本高出 25%，但实际使用缓存内容的成本低 10%。实际价格因具体型号而异。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;该功能现已在 Claude 3.5 Sonnet 和 Claude 3 Haiku 上作为公开测试版提供，并且很快将支持 Claude 3 Opus。详情可查看&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.anthropic.com%2Fen%2Fdocs%2Fbuild-with-claude%2Fprompt-caching&quot; target=&quot;_blank&quot;&gt;文档&lt;/a&gt;和&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.anthropic.com%2Fpricing%23anthropic-api&quot; target=&quot;_blank&quot;&gt;定价页面&lt;/a&gt;。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307342/anthropic-introduces-prompt-caching</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307342/anthropic-introduces-prompt-caching</guid>
            <pubDate>Fri, 16 Aug 2024 02:45:29 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>全球首发！openKylin RISC-V 64G 镜像上线，支持中科通量 AI PC</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;523&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e9e18b1ad1fa403a3cb062f884693c72b70.png&quot; width=&quot;1200&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;近日，在 openKylin 社区 RV64G SIG 的共同努力下，&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin 操作系统已基于 64 位高性能 RISC-V CPU 成功运行，并顺利完成了对中科通量 RISC-V AI PC 的兼容适配&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;，这一成就为 RISC-V 架构在通用高性能领域的进一步优化和快速增长奠定了坚实基础，&lt;span style=&quot;color:#000000&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;同时也&lt;/span&gt;填补了社区在 RV64G 领域的空白，为开源桌面操作系统市场注入了全新的活力与机遇&lt;/span&gt;。目前，相关镜像已正式上线 openKylin 官网下载页面，欢迎大家下载体验！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;583&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1e20875fe97f7af63249a9f3ffa6ccb5c55.png&quot; width=&quot;1280&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;strong&gt;镜像下载地址（点击「阅读原文」直达）：&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#0052ff&quot;&gt;https://www.openkylin.top/downloads&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;RV64G 是 RISC-V 重要的基础指令架构，采用简化指令译码逻辑，能够更容易预测&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;指令预取&lt;/span&gt;&lt;span&gt;模式，进而减少内存访问次数、提高指令执行速度，为广泛的通用计算领域提供了简单且完备的指令集，使开发者可以更好的对高性能计算进行优化。RV64G SIG 是由 openKylin 社区共建单位睿芯发起成立，致力于构建 RV64G 软件生态体系，以支持更加广泛的 RISC-V 硬件。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;自 2023 年投身于 openKylin RV64G SIG 组以来，中科通量持续加大投入力度，积极主动移植 Linux 下各种应用软件，不断拓展硬件适配的范围和深度，推出多款&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;系统镜像&lt;/span&gt;&lt;span&gt;，并强化 openKylin 社区软件源生态建设。截至目前，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;中科通量已与 openKylin 社区合作完成了近 1500 个源码包在 RV64G 架构上的编译，为用户提供了涵盖从基础编译、系统管理、桌面环境到图像处理、视频处理等多样化&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;的&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;服务，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;&lt;span&gt;其中包括 gcc、g++、rustc、systemd、ukui-desktop-environment、&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;ffmpeg&lt;/span&gt;&lt;span&gt;、opencv 等工具，极大地丰富了&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin 社区&lt;/span&gt;&lt;/span&gt;RV64G 软件生态体系。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;中科通量 RISC-V AI PC 首次面世&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;自 2024 年起，AI 时代全面开启，PC 也步入了更新迭代的关键时刻。中科通量面向商用市场推出了其第一代 RISC-V AI PC—SmarHTC。该产品搭载了国产 RISC-V CPU 与 RISC-V 数据流 GPU 加速芯片，依托 RISC-V 异构平台的澎湃算力，为用户提供了极致性能与安全可靠的 AI 体验。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;574&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3a156699c335414eba1e1685d81e3bb8ab3.png&quot; width=&quot;1280&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;该产品支持 AI 原生开发环境，并已适配运行 40+ AI 模型。在智能算力方面，SmarHTC 支持混合精度推理，确保智能分析业务在保持高性能运算与高精度运算的同时，能够灵活地适应各种复杂场景和任务需求，让 AI 真正成为触手可及的生产力工具。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此外，SmarHTC 还充分考虑了国产化操作系统的适配问题。它深度优化了 openKylin 操作系统，完美支持 GPU/VPU 加速功能，使得 UKUI 桌面环境更加流畅。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;关于 RV64G&amp;nbsp;SIG&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin RV64G SIG 组主要负责开发及维护 openKylin RV64G 版本，包括软件包构建、系统构建、维护及升级等工作，并探索 RISC-V 各子架构应用兼容问题的解决方案。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;SIG 地址：&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#0060e8&quot;&gt;https://gitee.com/openkylin/community/tree/master/sig/RV64G&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;邮件列表：&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#0060e8&quot;&gt;rv64g@lists.openkylin.top&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307326</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307326</guid>
            <pubDate>Fri, 16 Aug 2024 01:28:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>用 MQTT 实现 web 后端通信，不用数据库，不用 web 服务，可靠吗？</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;前端由 HTML 和原生 JS 以及 EMQ 的 MQTT 库实现！&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#40485b&quot;&gt;后端即数据库本身的思路使用纯中文编程易语言开发，通过 MQTT 和前端交互通信。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#40485b&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;303&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1ef89d4cf1e40123a01c27805adbd5c1702.png&quot; width=&quot;600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;项目地址：https://github.com/maddog888/ps_pal&lt;/p&gt; 
&lt;p&gt;哥哥姐姐们，对此怎么看？&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307275</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307275</guid>
            <pubDate>Thu, 15 Aug 2024 11:56:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>开源日报 | GitHub 全站服务不可用；C++内存问题排查攻略；将网站迁移到 CF 省了几万；李沐创业一年覆盘</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.8.15&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/307168&quot;&gt;腾讯与苹果就 iOS 微信小游戏收入事宜进行谈判&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;腾讯日前公布了 2024 年第二季度的财务数据，由于本土市场游戏收入、小游戏平台&lt;strong&gt;服务费等高毛利率收入来源的增长&lt;/strong&gt;，腾讯 Q2 毛利同比增长 21% 至人民币 859 亿元。然而苹果却不乐意了。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;腾讯首席战略官詹姆斯・米切尔在财报电话会议上首次承认，&lt;strong&gt;公司正在探索通过苹果的 iOS 支付系统提供应用内交易的方法，这将使苹果开始从游戏内交易中分成。&lt;/strong&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;米切尔表示，&lt;strong&gt;腾讯目前还没有通过 iOS 应用内购买来对小游戏赚钱&lt;/strong&gt;，并且正在讨论是否可能启用该功能，这将使开发者、用户、苹果和腾讯受益。&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/307178/github-service-unavailable-20240814&quot;&gt;GitHub 出现大规模全站服务故障&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;美国时间 8 月 14 日，GitHub 出现大规模宕机事故，核心服务几乎全部瘫痪（现已恢复）。当时用户反馈称，GitHub 主站无法访问，并显示 「无可用服务器」 的错误信息。同时，包括 Pull Request、GitHub Pages、Copilot 和 GitHub API 在内的多个核心服务也受到严重影响。 &amp;nbsp;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;根据 GitHub 的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.githubstatus.com%2F&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Status 状态页消息&lt;/a&gt;，本次影响范围为 GitHub 全站所有服务。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0815/105324_UJH8_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnbeta.com.tw%2Farticles%2Ftech%2F1442312.htm&quot; target=&quot;_blank&quot;&gt;苹果 Apple Intelligence 存重大安全缺陷，几行代码即可攻破&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;开发人员 Evan Zhou 使用提示注入成功操纵了 Apple Intelligence，绕过了预期指令让 AI 能对任意提示做出响应。事实证明，它与其他基于大语言模型的 AI 系统一样，容易受到「提示词注入攻击」。&lt;/p&gt; 
&lt;p&gt;提示词注入攻击（Prompt Injection Attack）是一种新型的攻击方式，具有有不同的形式，包括提示词注入、提示词泄露和提示词越狱。当攻击者通过操纵人工智能，导致模型执行非预期操作或泄露敏感信息时，这种攻击就会发生。这种操纵可以使人工智能将恶意输入误解为合法命令或查询。&lt;/p&gt; 
&lt;p&gt;苹果目前尚未对此事发表回应。&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6178081953%2FOsltYfqcP%3Frefer_flag%3D1001030103_&quot; target=&quot;_blank&quot;&gt;美国司法部考虑拆分谷歌安卓和浏览器业务&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    如果拆分绝对的好事情。很多人不知道，安卓表面是开源，但是很多安全组件和安装谷歌全家桶等 APP 等是和谷歌私有的 GMS 绑定的，所以在国际上本质上是谷歌垄断的系统。
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div style=&quot;text-align:right&quot;&gt;
   &lt;span&gt;- 微博&amp;nbsp;&lt;strong&gt;前 HR 随笔&lt;/strong&gt;&lt;/span&gt;
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FZuWCpIEV3m14nGXjuxXLJw&quot; target=&quot;_blank&quot;&gt;我把网站迁移到 cf，省了几万块&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;前几天登录 Vercel 看了一下账单，好家伙！！！一个月给我干到了 5000 多刀的支出，合计人民币 3 万 7 千多元。&lt;/p&gt; 
     &lt;p&gt;按理来说几十万的月访问量也不算大，这个服务器支出费用属实有点高了。&lt;/p&gt; 
     &lt;p&gt;感觉很心疼，一下子对 Vercel 爱不起来了。研究了两天，把部署在 Vercel 的服务迁移到了 AWS 和 Cloudflare，世界变得美好了，谨以此文纪念之。&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微信&amp;nbsp;&lt;strong&gt;&lt;span&gt;艾逗笔&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F7483028645%2FOslwP9T6t%3Fpagetype%3Dprofilefeed&quot; target=&quot;_blank&quot;&gt;C++内存问题排查攻略&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;p&gt;C++因其高性能仍然是许多关键应用的首选语言，但其复杂的内存管理也带来了诸多挑战。虽然使用现代 C++能够有效解决大部分问题，但掌握常用的内存问题排查方法仍然十分必要，特别是在维护一些历史系统时。&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;鹅厂程序员&lt;/strong&gt;&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F5658451754%2FOshOrrSya&quot; target=&quot;_blank&quot;&gt;如何评价「马斯克一开源，国内科技就进步」&lt;/a&gt;&lt;/h4&gt; 
  &lt;p&gt;实际上，它的商业火箭技术一直没有开源，开源的只是电动汽车技术。对于商业火箭技术，美国仍然保持封锁状态，因为这些技术相对敏感。但因为 SpaceX，确实让很多人了解了航天。SpaceX 在让普通公众接触和了解航天火箭方面做出了很多贡献。&lt;/p&gt; 
  &lt;p&gt;所以从技术上讲，开源是谈不上的，但从技术方向的指引上，SpaceX 为后续的公司指明了一条技术途径。回到 2015 年，包括火箭回收以及马斯克现在采用的大部分技术路线，当时都受到了广泛质疑。但 SpaceX 用结果证明了这些技术途径的正确性。&lt;/p&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;卡尔达瓦里希&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6182606334%2FOsmd2BNk3&quot; target=&quot;_blank&quot;&gt;一个非常详细的 LLM SFT 教程&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;介绍了如何使用 Unsloth 库对 Llama 3.1 模型进行微调。包括 SFT 的技术细节、实践步骤和优化方法。&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;div style=&quot;text-align:right&quot;&gt;
    - 微博&amp;nbsp;
    &lt;strong&gt;归藏的 AI 工具箱&lt;/strong&gt;
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F714533901&quot; target=&quot;_blank&quot;&gt;李沐：创业一年，人间三年&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;2024 年 8 月 14 日晚上，李沐在他自己运营的 B 站和知乎专栏里发布了一篇创业一年的覆盘文章：《创业一年，人间三年》，分享了他大模型创业第一年的进展、纠结和反思。&lt;/p&gt; 
     &lt;p&gt;在文章中他回顾了自己创业的历程：&lt;/p&gt; 
     &lt;ul&gt; 
      &lt;li&gt;从最初有创业的想法想做大模型的生产力工具，到遇到张一鸣被对方「点醒」，决定直接做模型本身；&lt;/li&gt; 
      &lt;li&gt;到融资过程里被「放鸽子」，因首次创业而有些「缩手缩脚」没能像一些同行那样「拿 10 亿现金」；&lt;/li&gt; 
      &lt;li&gt;到直接联系黄仁勋获得对方直接「安排」的 H100，但却发现这些卡在训练中 bug 一堆；&lt;/li&gt; 
      &lt;li&gt;再到最终磕磕绊绊找到商业化盈亏平衡的方法，并继续朝着「人类陪伴的智能体」的目标前进。&lt;/li&gt; 
     &lt;/ul&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 知乎&amp;nbsp;&lt;strong&gt;李沐&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.toutiao.com%2Farticle%2F7402922113667056138%2F&quot; target=&quot;_blank&quot;&gt;中国首个电力鸿蒙化小区在深圳建成&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt;
  &lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;电鸿是南方电网公司与开放原子开源基金会联合研究发布的中国内地首个电力物联操作系统，一套系统覆盖不同类型不同品牌的电力设备，实现即插即用、海量数据的互通互联，为新型电力系统的大规模物联设备接入和运行维护提供了整体解决方案。此次深圳居民端电力设备的改造就是其中很重要的一环，意味着改造后小区的电力设备系统 100% 实现了关键核心技术国产化替代。&lt;/span&gt;
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;中国新闻网&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8c31f6jtwQk&quot; target=&quot;_blank&quot;&gt;腾讯 Q2 财报：自研产品及 AI 大模型表现亮眼，企业服务收入保持双位数增长&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;财报显示，腾讯 Q2 研发开支达 172.77 亿元，自 2018 年至今六年研发投入超过 3026.09 亿元，持续发力核心技术自研、提升产品竞争力。基于国内一流的基础模型「腾讯混元」，腾讯推出 AI 助手腾讯元宝，在精准的图像理解、先进的自然语言处理，以及由腾讯独特内容生态系统增强的 AI 搜索上具备竞争优势。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;IT168 网站&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F3g.k.sohu.com%2Ft%2Fn813560878%3FserialId%3D7f87ddecc445fb4f269fefe58d43f184&quot; target=&quot;_blank&quot;&gt;剑指美国科技巨头：欧盟《人工智能法案》本月生效&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#3b3b3b; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;英国年利达律师事务所技术、媒体和电信业务负责人坦吉·范奥弗斯特拉滕说，欧盟《人工智能法案》是「世界上此类法案中的第一部……它可能会影响许多企业，尤其是那些开发人工智能系统的企业，还会影响那些部署或仅仅在某些情况下使用人工智能的企业」。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;参考消息&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F3g.k.sohu.com%2Ft%2Fn813743580%3FserialId%3D82acda91687a7936402e258b4dfc7c86&quot; target=&quot;_blank&quot;&gt;全国首批开源专利在上海技术交易所挂牌，饿了么无偿分享 10 项专利&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;饿了么宣布将 10 项专利开源，并完成在上海技术交易所的公开挂牌，这也是国内首批通过全国技术要素市场公开挂牌的开源专利。10 项专利中，7 项为食品安全领域、3 项为低碳环保领域，其中共有 3 项为 AI 相关专利。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#212121&quot;&gt;新民晚报&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.icsmart.cn%2F81148%2F&quot; target=&quot;_blank&quot;&gt;Akeana 宣布推出一系列 RISC-V CPU 内核 IP 与 Arm 进行全面竞争&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Akeana 的 RISC-V CPU 覆盖了从微控制器到数据中心的整个性能需求范围，并且期其多个系列的 RISC-V 内核、内存管理单元、中断控制器和互连都来自单一的 System Verilog 数据库，包括用于 AI 加速器的矩阵引擎和矢量引擎。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span&gt;芯智讯&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.com.cn%2Farticle_5703921756_153faf05c019019fec.html&quot; target=&quot;_blank&quot;&gt;Nature 曝惊人内幕：论文被天价卖出喂 AI！出版商狂赚上亿，作者 0 收入&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根据 Nature 报告，上个月英国的学术出版商 Taylor &amp;amp; Francis 已经和微软签署了一项价值 1000 万美元的协议，允许微软获取它的数据，来改进 AI 系统。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;而 6 月的一次投资者更新显示，美国出版商 Wiley 允许某家公司使用其内容训模型后，直接一举豪赚 2300 万美元！&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;但这个钱，跟广大论文的作者是半毛钱关系都没有的。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;新智元&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnew.qq.com%2Frain%2Fa%2F20240814A089RM00&quot; target=&quot;_blank&quot;&gt;欧盟人工智能法生效，能引领全球规则吗？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;对条款研读之后，中国政法大学数据法治研究院教授，联合国人工智能高层顾问机构中方成员张凌寒表示，虽然《AI 法》号称严厉，但有限的落地监管措施，以及创新的监管工具，都为欧盟的 AI 企业提供了一个必要的弹性发展空间，但也增加了非欧盟企业的合规成本。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;- &lt;/span&gt;&lt;strong&gt;财经杂志&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbuild-trust%2Fockam&quot; target=&quot;_blank&quot;&gt;build-trust/ockam&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;287&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6bfdf1995254f78e2dba184463d55369d7e.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbuild-trust%2Fockam&quot; target=&quot;_blank&quot;&gt;https://github.com/build-trust/ockam&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#24292f; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;Ockam 是一套开源编程库和命令行工具，用于大规模协调端到端加密、相互认证、密钥管理、凭证管理和授权策略实施。&lt;/span&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/u/5783135/blog/15327322&quot; target=&quot;_blank&quot;&gt;得物 Flink 内核探索实践&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;随着大数据技术的飞速发展，实时处理能力变得越来越重要。在众多实时处理框架中，Apache Flink 以其强大的流处理能力和丰富的功能集，受到了广泛关注和应用。在实时业务日益增长的趋势下，这促使我们深入探索 Flink 的内核，以更好地保障 Flink 任务的维护。本次分享将重点介绍得物在 Flink 内核方面的探索与实践，探讨如何通过深度优化和定制，实现更加高效和稳定的数据处理能力。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;03.jpg&quot; height=&quot;249&quot; src=&quot;https://oscimg.oschina.net/oscnet/03_1723621256095.jpg&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FSNjIC3BqP3atvYL5LrbMOg&quot; target=&quot;_blank&quot;&gt;学生预付费找人写 AI 项目相关代码，拿到交付成果后竟申请退款&lt;span&gt;——&lt;/span&gt;企图「0 元购」？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：看来还是多留后门，不给钱用不了&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：没有用，对方只是演示一下，又不是用，演示完就退款，就跟租车炫富后赖租车费一样&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：年轻不知道什么东西贵重&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：怎么可能不留后门，我每次接单都留后门，如果你违约，我这边动动手你就用不了了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：太阳底下无新鲜事&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：骗代码的垃圾人&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：遇到恶意退款师了可能。其实就是利用淘宝偏袒买家的退款策略，买了后故意退款。商家基本是没办法申诉成功的。某视频学习站甚至有很多这类教程，专门教人怎么玩这套，一天几百上千收入。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：想起那个 sleep(1000) 的段子，经理说，客户加钱给优化&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：感觉不如闲鱼 9.9 的上千套源码&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：你似乎高估了它们的能力&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 11：所以代码最后要留一手&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 12：亲，这怎么能是行为不端呢？这明明是诈骗&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 13：先给试用版啊。&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fi1X3pqfprGeZCb___W3uJg&quot; target=&quot;_blank&quot;&gt;腾讯与苹果就 iOS 微信小游戏收入事宜进行谈判&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：我乐意见到苹果不支持微信，他们搞不懂谁才是话事人，苹果如果不支持微信，那么，苹果在中国直接销量断崖消失！&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：就怕腾讯是软蛋&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：苹果玩儿二选一涉嫌垄断了，这个时候国家应该出手了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：梦里不知身是客。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：那别更新了，现在版本挺不错的&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：都硬气点，一个坚持就不修改凭什么给你叫保护费，另一个直接给你下架去三方渠道安装。&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：还是要赚钱的，这样双方都损利 😀&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：还开发者受益往哪受益&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：被两大巨头夹着的益&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FPvQTkR2rEcdw3rfZbU1OAg&quot; target=&quot;_blank&quot;&gt;GitHub 今天凌晨大规模全站服务故障&lt;span&gt;——&lt;/span&gt;怪它用了 MySQL？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：很好，多亏了这个问题，我的 github action 又被打断了 (笑&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：不小心搞个大新闻，把背后的 DBA 批判一番就好了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：连 GitHub 都经常出问题，你看看同样为 hub 的 pxxn，简直太强了&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/306947/kylin-wlcom-open-source&quot; target=&quot;_blank&quot;&gt;openKylin wlcom 正式开源！Wayland 显示合成器革新之作&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：不错不错，能做基础组件创新改进了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：苦了开发者，有那么多 compositor 要去适配支持&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：wayland 的架构，需要适配更多变种了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：Wayland 技术多 BUG 不&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307266</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307266</guid>
            <pubDate>Thu, 15 Aug 2024 10:35:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>关于木兰开源系列许可证引用地址的澄清声明</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;木兰开源社区回应了「木兰开源系列许可证」&lt;a href=&quot;https://www.oschina.net/news/306761/hutool-5-8-31-released&quot;&gt;引用地址无法访问的情况&lt;/a&gt;，称该问题是&lt;strong&gt;请求地址与开源促进会 (OSI，Open Source Initiative) 备案地址不一致造成的&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;回应全文如下：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;关于木兰开源系列许可证引用地址的澄清声明&lt;/strong&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;近期，接到用户有关木兰&lt;span style=&quot;background-color:#f2f6ff; color:#6f85ac&quot;&gt;开源&lt;/span&gt;系列许可证地址无法访问的反馈，木兰开源社区高度重视，并对相关意见建议深表感谢。&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;经排查，无法访问的原因是请求地址与开源促进会 (OSI，Open Source Initiative) 备案地址不一致造成的。为了方便木兰开源系列许可证的使用，在此对相关许可证的引用地址进行声明：&lt;/p&gt; 
 &lt;table cellspacing=&quot;0&quot; style=&quot;border-collapse:collapse; box-sizing:border-box !important; display:table; margin:0px 0px 10px; max-width:100%; outline:0px; overflow-wrap:break-word !important; padding:0px; visibility:visible; width:601px&quot;&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;许可证名称&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;发布时间&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;引用地址&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;木兰宽松许可证，第 1 版&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;2019 年 8 月&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;http://license.coscl.org.cn/MulanPSL&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;木兰宽松许可证，第 2 版&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;2020 年 1 月&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;http://license.coscl.org.cn/MulanPSL2&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;木兰公共许可证，第 1 版&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;2020 年 12 月&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;http://license.coscl.org.cn/MulanPubL-1.0&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;木兰公共许可证，第 2 版&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;2021 年 5 月&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;http://license.coscl.org.cn/MulanPubL-2.0&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;木兰开放作品许可协议，署名，第 1 版&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;2022 年 12 月&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;http://license.coscl.org.cn/MulanOWLBYv1&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;木兰开放作品许可协议，署名-专利许可，第 1 版&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;2022 年 12 月&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;http://license.coscl.org.cn/MulanOWLBYPLv1&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;木兰开放作品许可协议，署名-相同方式共享，第 1 版&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;2022 年 12 月&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;http://license.coscl.org.cn/MulanOWLBYSAv1&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;木兰开放作品许可协议，署名-专利许可-相同方式共享，第 1 版&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;2022 年 12 月&lt;/td&gt; 
    &lt;td style=&quot;border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top&quot;&gt;http://license.coscl.org.cn/MulanOWLBYPLSAv1&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;注意：地址栏请求协议为「http」而非「https」，否则会导致访问失败。&lt;/strong&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;其他常见问题请参考：&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fosslab-pku%2FOpenSourceLicense-FQA%2Fblob%2Fmaster%2Fopen-source-license-fqa.md&quot; target=&quot;_blank&quot;&gt;https://github.com/osslab-pku/OpenSourceLicense-FQA/blob/master/open-source-license-fqa.md&lt;/a&gt;&lt;/u&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Flicense.coscl.org.cn%2Ffaq&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;http://license.coscl.org.cn/faq&lt;/u&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;下一步，我们将针对相关问题进行优化，让&lt;span style=&quot;background-color:#f2f6ff; color:#6f85ac&quot;&gt;木兰开源系列许可证更易于使用。同时，也欢迎提出宝贵意见。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;如有意见建议请联系：&lt;span style=&quot;background-color:transparent&quot;&gt;lizq@cesi.cn，coscl&lt;/span&gt;@cesi.cn。&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;感谢中国广大开发者&lt;span style=&quot;background-color:#f2f6ff; color:#6f85ac&quot;&gt;长期以来对木兰开源系列许可证的支持与信任，&lt;/span&gt;对造成的不便深表抱歉！&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;木兰开源社区&lt;br&gt; 2024 年 8 月 15 日&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0815/180531_bFle_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;原文：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F36NDjCan-QU2kA370iM5AA&quot; target=&quot;_blank&quot;&gt;https://mp.weixin.qq.com/s/36NDjCan-QU2kA370iM5AA&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307261</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307261</guid>
            <pubDate>Thu, 15 Aug 2024 10:09:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>饿了么免费开源 10 项专利</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;8 月 15 日，饿了么宣布将 10 项专利开源，并完成在上海技术交易所的公开挂牌，这也是国内首批通过全国技术要素市场公开挂牌的开源专利。10 项专利中，7 项为食品安全领域、3 项为低碳环保领域，其中共有 3 项为 AI 相关专利。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;318&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a9acdd583fd32f104d5d54a263d06258d89.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此次开源的 10 项专利，已可在上海技术交易所官网查询，网页显示其挂牌价格均为零元，项目信息中同时披露了其开源条件。根据由国家知识产权局学术委员会组织编写的《专利开源战略与风险防控》中定义描述，专利开源指专利持有者在特定条件下，以零使用费的方式将所持有专利的部分或者全部专利允许不特定人实施，以构建目标专利生态。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;饿了么专利开源工作组负责人郝鹏表示，饿了么此举为响应《专利转化运用专项行动方案（2023—2025 年）》以及《上海市专利转化运用专项行动实施方案》，探索以专利开源的方式，聚集更多的企业共同参与、持续创新，促进社会层面食品安全治理水平提升，并以数字技术助力实现「双碳」目标。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;专利开源能够发挥专利在创新链中的权益纽带和信息链接功能，强化专利在产业链中的强链增效作用，是加快发展新质生产力的有效措施。比较知名的专利开源案例是特斯拉，业内普遍认为其推动了电动车行业的整体发展。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;郝鹏认为，依托上海技术交易所探索专利开源，能够借助其全国技术要素市场公信力和平台效益，使得专利开源全程可溯、公开透明，同时专利开源生态的建设也将更加高效，能与更多相同理念的企业形成连接。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;上海技术交易所运营部负责人表示：「上海技术交易所作为国家科技创新战略与技术要素资源配置的重要平台，致力于在新质生产力形成、科技创新应用到产业发展的进程中，充当好平台和枢纽。专利开源是一种专利运用新模式，通过专利开源结合有效的运营模式，可以更好地构建专利生态、促进产业技术更新。希望有更多像饿了么一样，具有创新以及分享精神的企业，加入到专利开源的探索中来，共同开辟从科技创新向新质生产力转化的共赢局面。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;近年来，饿了么一直致力于推动 ESG 领域的专利共享。2022 年，饿了么通过与 8 家企业集中签约的方式，免费开放许可了 13 件「信息无障碍」专利，并且在业内首次提出信息无障碍「专利+代码」的技术交付模式。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307255</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307255</guid>
            <pubDate>Thu, 15 Aug 2024 09:47:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>深圳十大「软件名园」年度软件业务收入总额突破 700 亿元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;深圳市工业和信息化局近日公布第一批和第二批深圳市软件名园名单，共有 10 家园区入选，其中综合软件名园 1 家、特色软件名园 9 家。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;经统计，此批软件名园建筑面积共 742 万平方米、年度软件业务收入总额突破 700 亿元、纳入工业和信息化部统计监测的软件企业数量 400 余家。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;385&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-397e3c5ac41cc357ce96c4546d80f637058.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前，深圳拥有以华为、腾讯、金蝶、大疆等为代表的一批软件龙头企业。数据显示截至 2023 年底，深圳参与开源鸿蒙生态建设的企业数量共 49 家，产品数量共 133 款，贡献软件发行版 11 款。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;今年以来，加入「鸿蒙朋友圈」的本地企业持续增长。根据深圳市发展计划，今年内将实现深圳市鸿蒙原生应用数量占全国总量 10% 以上。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;深圳市工业和信息化局相关负责人表示，接下来将加大对深圳市软件名园指导协调力度，引导优质企业、重点项目、重大工程等向深圳市软件名园集聚。鼓励各区制定出台相关政策措施，支持软件名园建设，推动培育更多软件园区升级为软件名园，力争 2026 年软件名园数量达到 20 家以上。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307229</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307229</guid>
            <pubDate>Thu, 15 Aug 2024 08:11:21 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>SiFive 推出 P870-D，最高可支持 256 个 RISC-V 核心</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;SiFive &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.sifive.com%2Fpress%2Fsifive-announces-high-performance-risc-v-datacenter-processor-for-ai-workloads&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;推出全新的 SiFive PerformanceTM P870-D，一个可用于数据中心和 AI 工作负载的新型 RISC-V 处理器。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「以满足客户对视频流、存储和网络设备等高并行化基础设施工作负载的需求。当与 SiFive Intelligence 产品系列的产品结合使用时，数据中心架构师还可以为 AI 驱动的应用构建一个极高性能、高能效的计算子系统。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;265&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-0170ee485c4c77a4516c67354ed17bbbab8.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;P870-D 基于 P870，支持开放的 AMBA CHI 协议，因此客户可以更灵活地扩展集群数量，在提高性能的同时最大限度地降低功耗。主要特点：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;提供按计算需求的解决方案，支持扩展至 256 个核心。&amp;nbsp;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;与 RVA23 配置文件完全兼容，使系统开发人员能够利用广泛的操作系统、工具链和应用软件框架，从而缩短产品上市时间，同时降低项目风险和开发成本。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;支持 RISC-V Sv57 扩展，启用 57 位虚拟地址空间支持&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;支持 4 个 CHI 端口/集群和更宽的链接，用于多个外设和存储设备端口。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;集成了符合 Advanced Interrupt Architecture (AIA) 的中断控制器，支持 Message Signal Interrupts (MSI) 和虚拟化。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;SiFive 高级主管 Ian Ferguson 向外媒 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2024%2F08%2F14%2Fsifive_debuts_efficiencyfocused_p870d_riscv%2F&quot; target=&quot;_blank&quot;&gt;The Register&lt;/a&gt; 透露，P870-D 并不追求顶级性能，而是力求在速度和效率之间取得平衡。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;他指出，P870-D 在性能方面与 Arm 的 Neoverse N2（微软 Azure Cobalt 100 中的产品）相当，但规模小了约 25%。但在被问及效率问题时，Ferguson 则表示很难量化，因为其主要取决于工艺节点。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;虽然 SiFive 特意在新闻稿中提及了 AI，但 Ferguson 表示 P870-D 并不是直接运行 AI 工作负载的理想选择。P870-D 更适合搭配以 AI 为重点的处理器，例如英伟达的 GPU 和谷歌的 Tensor Processors。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前，P870-D 处理器正面向 SiFive 的主要客户出样，最终生产版本预计将在 2024 年末前发布。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307211/sifive-p870d-riscv</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307211/sifive-p870d-riscv</guid>
            <pubDate>Thu, 15 Aug 2024 06:57:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>极客与技术，产业与生态，年度开源峰会 2024 GOTC × GOGC 隆重启幕</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;div&gt; 
 &lt;p&gt;8 月 15 日，2024 全球开源技术峰会 GOTC × GOGC 全球开源极客嘉年华于上海张江科学会堂隆重举办。大会现场，开源生态网络共建暨张江节点正式揭牌；世纪互联与开源中国宣布正式开启战略合作，共同推动智算互联的深化发展。主论坛总体围绕开源生态合作与发展、 RISC-V、多模态具身智能、深度学习平台、企业引入开源、开源 AI 发展、垂域大模型技术等话题展开主题演讲。&lt;/p&gt; 
 &lt;p&gt;2024 GOTC × GOGC 将 GOTC（全球开源技术峰会）与 GOGC（全球开源极客嘉年华）进行品牌联名，旨在集结全球范围内对开源技术充满热情的开发者、社区成员、创业者、企业领袖、媒体人，以及各开源项目应用场景的产业精英、跨界才俊与年轻力量。本次活动将秉持「社区共建、轻松有趣、丰富多彩」的核心理念，通过社区与志愿者的共同努力，为大家呈现一个既有深度又有广度的交流平台。&lt;/p&gt; 
 &lt;p&gt;在为期两天的时间里，将以行业展览、主题发言、论坛、圆桌、创新集市、人才集市等形式来诠释此次大会主题 ——极客与技术，产业与生态，源见未来。&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;1067&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3c2ac236ef1994f038f8dab22ccf39af379.png&quot; width=&quot;1600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在致辞环节，上海张江（集团）有限公司董事长袁涛指出，开源在全球范围内蓬勃发展，已成为推动科技创新的重要力量。目前张江科学城在科学人才集聚，科技成果的转化，产业创新发展等方面已经取得了明显的成效和突破，已成为上海市高质量发展的重要的推动力量。&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;最后他表示，欢迎国内外开源创新企业及开源技术人才来到浦东，来到张江。张江集团将提供一流的技术研发环境和优质的服务，全力支持开源技术的发展和创新。同时张江集团也将积极加强和全球开源社区基金会企业的合作，拓展开源技术的应用领域，推动开源技术的创新发展。&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;1066&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-52905edda29d1aa9be81bc6f4b1aa9d6fc1.png&quot; width=&quot;1600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;中国电子信息产业集团有限公司战略合作部副主任吕亚洲认为，当前，集众智、采众长的开源模式已成为全球计算技术和产业创新的主导。我国是全球开源生态的重要参与者和贡献者，但仍处于边缘位置，面临底层技术掌控不足，主要开源社区平台被国外垄断的困境，必须加强开源体系建设，加快打造中国特色开源生态。&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;为此，中国电子打造了软硬兼备、垂直打穿、算安一体、算存一体的自主安全计算底座，建成了核心芯片、基础软件、整机装备、系统应用以及体系生态等完整的产业体系，带动万余家企业积极参与建设产业生态。此外，中国电子还推出了聚焦桌面操作系统跟技术的开放麒麟社区，成立了国内首个 BMC 开源社区。此外中国电子还积极参与 Linux、红帽等国际开源社区建设，以开放共赢姿态成为全球开源生态的一个重要力量。&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;1066&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-0529d60c4da7931cd0a3effd9dbdda47f09.png&quot; width=&quot;1600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;开放原子开源基金会理事长程晓明指出了开源的重要地位和作用。他表示，开源是新一轮科技革命和产业变革的重要标志，全球的实践证明，充分利用开源，参与开源，支持开源，贡献开源，是加速技术迭代创新，实现超越和领先的关键手段。开源是培养关键核心技术的创新源泉，是构筑现代产业体系优势的关键抓手，还是推动数字经济深入发展的重要协作方式。&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;当前新一轮科技革命和产业变革加速演进，产业竞争格局面临深刻调整，开源顺应数字经济时代，软件基础设施化的大趋势，已经成为全球主流的创新模式。未来开放原子开源基金会将进一步服务行业，服务广大开发者，与业界同仁共同推动我国开源生态的建设，共同谱写开源繁荣发展的新篇章。&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;1066&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1e8ccf135ae37cf4aebbe4bcc7b25a36258.png&quot; width=&quot;1600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;会上，市经信委总工程师、软件处处长裘薇，张江科建办副主任、自贸区张江管理局副局长吴俊，浦东新区科经委人工智能处处长王娴，上海浦东软件园股份有限公司董事长郭颖，Linux 基金会亚太区副总裁杨轩，开源中国董事长马越共同为开源生态网络共建暨张江节点正式揭牌。这标志着上海为更好地接洽全球开放生态系统又迈进了坚实的一步，在促进开源技术发展、推动开源商业化探索、加强人才培养与交流等方面，张江节点未来势必发挥着重要作用。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;1067&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-826076359e4a5ad8438e502c5133cf5c89a.png&quot; width=&quot;1600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;近年来，RISC-V 在芯片业界受到了广泛的关注和快速的发展，其开源特性吸引了大量的开发者和企业参与，推动了技术创新和生态的快速构建。中国工程院院士倪光南以《拥抱开源 RISC-V，与世界协同创新》为题发表演讲。倪光南从 CPU 架构、开放标准、模块化易拓展及定制化需求等方面着重阐述了 RISC-V 的优势，并预测未来世界主流 CPU 芯片很有可能是 x86、Arm、RISC-V 三大指令集。&lt;/p&gt; 
 &lt;p&gt;目前，全球已有 70 多个国家，4000+ 会员单位投入到 RISC-V 领域的研究，中国在其中扮演着极为重要的角色，2023 年 RISC-V IP 核出货量已有 50% 以上来自中国，正逐渐改变着全球芯片界的格局。&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;1066&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6f9f89156186d24a740b2ca9c05e9266a4e.png&quot; width=&quot;1600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;中国工程院外籍院士张建伟结合自己在多模态具身智能领域的最新研究成果，探讨基于大模型等开源技术，如何通过模块化建造方法，实现具身智能机器人系统的创新与发展。&lt;/p&gt; 
&lt;p&gt;他提到，未来的具身智能机器人，其物理系统的复杂度非常高， 要走入千行百业还面临诸多挑战，其中三个方面要重点关注：一是开发高性能人工智能芯片和面向具身智能的网络架构，以实现大模型在终端平台上的部署和实时计算；二是探索具身智能在社会环境中的认知进化和多代理协作，形成安全、因果和可信的通用世界模型；三是研究自省机制和词元分割的多模态互补，发展可解释的人工智能理论，以减轻多模态大模型的幻觉。他认为，要解决未来具身智能面临的痛点，需要产学研国际合作，开源共享，应对全球重大挑战，跨学科交叉协同，共创和谐世界、美好生活。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;1067&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-cdf7e597d9d71c0e7a7af71e8e75c91bfb8.png&quot; width=&quot;1600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;大模型在快速发展的同时也带来了全新挑战，比如大模型参数规模越来越来大，算力瓶颈问题日益突出。在这一背景下，作为 AI 的关键基础设施——深度学习平台应该具备什么样的能力？&lt;/p&gt; 
 &lt;p&gt;百度飞桨深度学习平台总架构师于佃海认为，高性能大规模训练推理能力是关键，以实现极致性能和训推一体的目标。从 MLOps 视角来看，该平台应该实现从开发到预训练、精调、压缩再到推理服务的全流程支撑，并与数据、评估等环节实现无缝衔接；从 MLSys 视角出发，则要满足大规模分布式训练、并行推理、弹性容错、高效收敛保障、高吞吐和低时延推理等需求。&lt;/p&gt; 
 &lt;p&gt;在此背景下，百度推出了飞桨框架新一代 3.0 版本，集成了大语言模型开发套件 PaddleNLP 、多模态模型开发套件 PaddleMIX，同时还集成飞桨即有系列开发套件能力——低代码开发工具 PaddleX，助力开发者实现高效、便捷的开发。&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;1067&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-56d93e226fbfc9cbcc7709e0b48ac065a27.png&quot; width=&quot;1600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Linux 基金会人工智能战略项目副总裁、LF AI &amp;amp; Data 基金会执行董事 Ibrahim Haddad 表示，目前 LF AI &amp;amp; Data 基金会托管着 68 个技术项目，这些项目贡献了超过 2 亿行新代码。2023 年，生成式人工智能成为通用人工智能的重要组成部分，基金会启动了生成式人工智能公共平台 Generative AI Commons ，目前已有超过 80 家公司参与其中，这是 LF AI &amp;amp; Data 未来的一个聚焦方向，致力于通过中立治理、开放和透明的合作来促进生成式人工智能技术的发展和应用。&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;他还提到， Generative Al Commons 创建了模型开放框架（Model Openness Framework，简写为 MOF），其目标是消除模糊性，并提供关于任何给定机器学习模型或大语言模型中可用组件的透明度和清晰度。&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;1067&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ec6eff199dee7af50eb89db03c70674ccc8.png&quot; width=&quot;1600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;华为存储软件首席专家张群辉以《ModelEngine 垂域大模型应用端到端解决方案》为题发表演讲，他详细阐述了业界首个流式大模型编程框架 ModelEngine 核心理念，包括：插件式多语言算子框架、编程框架、高效数据处理总线、脚本语言以及图文并茂的提示词工程。&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;未来的垂域大模型应用在操作上会有怎样的不同呢？他认为，未来编程的解法不一定单纯靠数字与文字，而是通过直观的图形界面，将代表不同功能的模块像搭积木一样组合在一起，从而搭建出复杂的应用程序，降低了编程门槛的同时，大大提高了开发效率，使得编程创意能够更快地转化为实际的产品。&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;1067&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ee016418414f7f2606716a85e84a7cdb771.png&quot; width=&quot;1600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;开源中国董事长马越表示，十六年来，开源中国与时俱进，从内容社区，到代码平台，到软件研发工具一体化国产替代平台，再发展到今天的 AI 大模型平台。当前，Gitee 每天新增 5000 个注册用户，新建 2 万个代码仓库，注册开发者总数超过 1200 万，累计仓库托管数 2800 万个。马越透露，Gitee 的活跃仓库事件类型和仓库活跃度在 2023 年超越 GitHub，见证了国内开发者从关注到积极贡献的角色转变以及项目活跃度的显著提升。&lt;/p&gt; 
 &lt;p&gt;目前，开源中国全面拥抱人工智能，通过开源模型降低 Al 门槛普惠千行百业。旗下自研的 Gitee AI 平台目前已收录超过 1.1 万个模型，7000 多个开源数据集，平台提供模型体验、推理、训练、部署和应用的一站式服务，提供充沛算力，希望做中国最好的 AI 社区。&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;2133&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-7f4e559de201676b3ec47ad3f8056a4e0b1.jpg&quot; width=&quot;3200&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;值得一提的是，在一众企业与行业精英的见证下，世纪互联与开源中国正式签署战略合作协议。世纪互联集团副总裁张修枫在会上表示，AI 爆发对数据中心能源体系提出了更高的要求，双方通过在大模型托管、Al 算力等领域的技术和商业赋能，共建双赢、建立可持续发展的合作伙伴关系，共同推动人工智能和开源技术领域的发展与合作。&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;707&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ece26fd6b87a100e160e25e36be2dd235ae.png&quot; width=&quot;1261&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;15 日上午的最后一个环节，则是由红帽全球副总裁兼大中华区总裁曹衡康带来的《以开源的方法将 AI 带入企业》主题演讲。他表示，做开源非常需要结合生态，红帽将一如既往地坚持开放生态，将开放思想与开放创新实践带入 AI 领域，为企业提供集咨询、实施、赋能三位一体的开放创新实验室服务，加速企业 AI 创新实施。&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;1066&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-482887822de2b3eff8507134cce35473507.png&quot; width=&quot;1600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;为了丰富与会者的体验和交流，除了大咖云集的主论坛外，大会同期还有企业集市、嘉年华、人才招聘、青年黑客松等一系列精彩纷呈的活动。&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;677&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c18cb6145150c3b3436c4fcc094b91e0faa.png&quot; width=&quot;1021&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;15 日下午， 「LLMOps 最佳实践」「全球开源人才及教育」「硬核 AI 技术创新与实践」三大专题论坛即将开启。&lt;/p&gt; 
 &lt;p&gt;2024 GOTC × GOGC 为期两天，8 月 16 日还将举办「开源生态与商业化」「AIGC 产业前沿」两大高峰论坛，以及「开源数据库与 AI 协同创新」「云原生与微服务架构」「数据基础与 GenAI 开发范式 - 开源生态的机遇与探索」三大专题论坛，探讨开源未来，助力开源发展。&lt;/p&gt; 
&lt;/div&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307201/gotc-gogc-2024</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307201/gotc-gogc-2024</guid>
            <pubDate>Thu, 15 Aug 2024 06:21:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>🔥 Techempower 测试 Solon 为 Spring 的 300% 左右</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;刚有同学在看了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/news/306987&quot;&gt;《🔥 国产崛起，Solon：我们的性能是 Spring 的 300%》&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;后，也做了个测试。用 2019 款的 macbook pro i7 测试。测出 solon.boot.unertow 只有 5 万多。我是 2020 款的 macbook pro i7 测试。solon.boot.unertow 一般 10 万 ～ 13 万（平常以 12 万算）。&lt;/p&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;具体原因咱不讲。测试难免有波动，或者什么东西不同。所以，补下 techempower 平台的数据。自证一下：）&lt;/p&gt; 
&lt;h3&gt;Techempower 平台测试的内容（算是 300% 的讲法的缘由？）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;techempower 的 json 测试：3 倍左右：&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.techempower.com%2Fbenchmarks%2F%23hw%3Dph%26test%3Djson%26section%3Ddata-r22&quot; target=&quot;_blank&quot;&gt;https://www.techempower.com/benchmarks/#hw=ph&amp;amp;test=json&amp;amp;section=data-r22&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;techempower 的 plaintext 测试：3 倍左右：&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.techempower.com%2Fbenchmarks%2F%23hw%3Dph%26test%3Dplaintext%26section%3Ddata-r22&quot; target=&quot;_blank&quot;&gt;https://www.techempower.com/benchmarks/#hw=ph&amp;amp;test=plaintext&amp;amp;section=data-r22&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;附比较图&lt;/h3&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/8d7b294abb624f8e876faa3a0c4cb638.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307183</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307183</guid>
            <pubDate>Thu, 15 Aug 2024 03:39:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>GitHub 出现大规模全站服务故障</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;美国时间 8 月 14 日，GitHub 出现大规模宕机事故，核心服务几乎全部瘫痪（现已恢复）。当时用户反馈称，GitHub 主站无法访问，并显示「无可用服务器」的错误信息。&lt;/p&gt; 
&lt;p&gt;同时，包括 Pull Request、GitHub Pages、Copilot 和 GitHub API 在内的多个核心服务也受到严重影响。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0815/105342_fcly_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;根据 GitHub 的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.githubstatus.com%2F&quot; target=&quot;_blank&quot;&gt; Status 状态页消息&lt;/a&gt;，本次影响范围为 GitHub 全站所有服务。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0815/105324_UJH8_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;根据 GitHub Status 当时公布的情况，此次故障疑似因数据库基础设施变更导致，公司正在紧急回滚。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0815/110103_sNVP_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;值得注意的是，此次故障发生迅速，从 GitHub 首次发布故障信息到多个服务瘫痪仅用了数分钟时间。据第三方监测平台 Downdetector 显示，有超过一万名用户报告了问题。&lt;/p&gt; 
&lt;p&gt;网络监测机构 NetBlocks 也确认了 GitHub 正在经历全球范围的宕机。&lt;/p&gt; 
&lt;p&gt;服务恢复后，GitHub 很快就发布了事故报告，称这是由于他们对数据库基础设施更改配置，从而引发流量路由受影响，结果导致关键服务意外失去数据库连接。在这一事件中，没有数据丢失或损坏。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img height=&quot;908&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0815/110425_tssF_2720166.png&quot; width=&quot;1482&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0815/110249_HuIj_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;详情查看：&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.githubstatus.com%2Fincidents%2Fkz4khcgdsfdv&quot; target=&quot;_blank&quot;&gt;https://www.githubstatus.com/incidents/kz4khcgdsfdv&lt;/a&gt;&lt;/u&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相关阅读&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/275025/github-incident-20230109&quot; target=&quot;_blank&quot;&gt;GitHub 多项服务出现故障&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/247327/github-down-20230630&quot; target=&quot;_blank&quot;&gt;GitHub 今天凌晨短暂宕机&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/270460/upgrading-github-com-to-mysql-8-0&quot; target=&quot;news&quot;&gt;GitHub.com 跑了 1200 多台 MySQL 主机，如何无缝升级到 8.0？&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/188164/github-recent-service-disruptions&quot; target=&quot;_blank&quot;&gt;GitHub 解释近期频繁宕机原因：MySQL 不堪重负&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307178/github-service-unavailable-20240814</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307178/github-service-unavailable-20240814</guid>
            <pubDate>Thu, 15 Aug 2024 03:05:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>李飞飞的 AI 初创公司已在两个月内完成两轮融资</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;据多家媒体报道，斯坦福大学著名 AI 教授李飞飞创办的创业公司 World Labs 已在两个月内完成了两轮融资。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2024%2F08%2F14%2Fnea-led-a-100m-round-into-fei-fei-lis-new-ai-startup-now-valued-at-over-1b%2F&quot; target=&quot;_blank&quot;&gt;TechCrunch &lt;/a&gt;从多位知情人士处获悉，最新一轮融资由 NEA 领投，公司估值超过 10 亿美元。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;364&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-89de9843bd0c20000c2a58c564613eb2ae8.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;em&gt;图片来源： Getty Images&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;一位知情人士称，与 World Labs 于 4 月进行的首次融资相比，此次估值大幅增加，当时 World Labs 的估值为 2 亿美元。据路透社 5 月报道，首轮融资的投资者包括 Andreessen Horowitz 和加拿大公司 Radical Ventures，李是该公司的科学合伙人。李和 NEA 暂未回应置评请求。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;World Labs 成立于今年 4 月，在四个月内就从创始公司成长为独角兽，这表明了投资者正在继续对由杰出 AI 科学家创立的 AI 初创公司进行大举投资，即使这些初创公司的业务尚未得到验证。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;一位熟悉 World Labs 的投资者表表示，World Labs 的模型一经推出，就可用于游戏和机器人应用。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307175</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307175</guid>
            <pubDate>Thu, 15 Aug 2024 02:50:07 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>腾讯与苹果就 iOS 微信小游戏收入事宜进行谈判</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;腾讯日前公布了 2024 年第二季度的财务数据，由于本土市场游戏收入、小游戏平台&lt;strong&gt;服务费等高毛利率收入来源的增长&lt;/strong&gt;，腾讯 Q2 毛利同比增长 21% 至人民币 859 亿元。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-964b5e1851cdaddc3b618beb13f30e8c098.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;需要注意的是，苹果却不乐意了。&lt;/p&gt; 
&lt;p&gt;腾讯首席战略官詹姆斯・米切尔在财报电话会议上首次承认，&lt;strong&gt;公司正在探索通过苹果的 iOS 支付系统提供应用内交易的方法，这将使苹果开始从游戏内交易中分成。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;米切尔表示，&lt;strong&gt;腾讯目前还没有通过 iOS 应用内购买来对小游戏赚钱&lt;/strong&gt;，并且正在讨论是否可能启用该功能，这将使开发者、用户、苹果和腾讯受益。&lt;/p&gt; 
&lt;p&gt;Mitchell 说：「我们希望以经济上可持续且公平的方式提供这种服务。所以这是正在进行的讨论，我们希望讨论能产生积极的结果」。&lt;/p&gt; 
&lt;p&gt;他强调：「但如果讨论没有进展，那么现状就会维持下去。」&lt;/p&gt; 
&lt;p&gt;据悉，前不久有报道称，苹果公司正在向腾讯和抖音施压，&lt;strong&gt;要求他们解决应用内小游戏的外链支付漏洞，以避免小游戏厂商绕开 30％的「苹果税」。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;如果该情况得不到解决，苹果或将拒绝提供微信、抖音等应用的更新。&lt;/strong&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307168</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307168</guid>
            <pubDate>Thu, 15 Aug 2024 02:38:07 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>TiD2024 | openKylin 受邀出席质量竞争力大会，分享开源社区治理实践</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;&lt;span&gt;&lt;span&gt;质量竞争力大会 (TiD Conference) ，是每年召开的研发创新顶级峰会，由&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;中关村智联软件服务业质量创新联盟&lt;/span&gt;&lt;span&gt;主办，中国软件行业协会软件服务业质量分会、中国软件行业协会软件造价分会协办。TiD 质量竞争力大会秉承追求行业高度（Top）、技术创新（innovation）、专业深度（Depth）的目标，致力于打造最具影响力的研发创新者顶级交流平台。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;8 月 11-15 日，&lt;strong&gt;TiD2024 在北京国家会议中心召开&lt;/strong&gt;，大会以「聚焦新质生产力，加速智能软件研发」为主题，围绕新质生产力与软件产业紧抓「人工智能+」的变革机遇，重塑技术研发与应用模式，加速产业智能化升级，打造更高质量、更有效率、更为智能的软件产业生态。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;675&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-2b12ccd26a9a5bda718cc041c7184f0380d.jpg&quot; width=&quot;1200&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;8 月 14 日，大会举行&lt;strong&gt;开源论坛&lt;/strong&gt;，旨在进一步提升国内开源协作效能，增进产业交流合作，为人工智能等新一代信息技术注入动力，助力打造具有国际影响力的开源生态。&lt;strong&gt;openKylin 社区生态委员会主任、麒麟软件有限公司副总经理李震宁&lt;/strong&gt;&lt;strong&gt;受邀出席，带来《openKylin 社区开源治理实践》主题报告&lt;/strong&gt;，同知名专家和企业家分享了 openKylin 社区的建设进展以及社区治理实践，并共同探讨未来发展趋势。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;2000&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4e71c68b7bb20f4819eee9d0698daba1338.jpg&quot; width=&quot;3000&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;数字经济是以数据资源为关键要素，以现代信息网络为主要载体，以信息通信技术融合应用、全要素数字化转型为重要推动力的新经济形态。以开源开放为特征的信息技术产业新型协作模式，是数字经济可持续创新发展的源头活水。开源模式也由基础&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;开源软件&lt;/span&gt;&lt;span&gt;拓展延伸至开放标准、开放数据、开放算法、开放流程等多种形态。开源对于知识共享、科技创新、产品优化、产业协作、与全球可持续发展具有重要价值。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin 作为中国领先的开源操作系统根社区，深植根基，致力于构建坚实的技术底座。同时，积极布局前沿科技，探索创新，在科技浪潮中破浪前行，持续向上生长。未来，openKylin 社区将持续聚焦开源操作系统根技术，积极推进生态建设广度和技术创新深度，携手更多合作伙伴，共同打造「产业主导、平台自主、技术先进、生态丰富」的新一代智能桌面操作系统根社区。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307164</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307164</guid>
            <pubDate>Thu, 15 Aug 2024 02:24:07 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>得物 Flink 内核探索实践</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    &lt;div class=&quot;ad-wrap&quot; style=&quot;margin-bottom: 8px;&quot;&gt;
            &lt;div data-traceid=&quot;news_comment_top_ad&quot; data-tracepid=&quot;news_comment_top&quot; style=&quot;text-align: center;&quot;&gt;
&lt;a style=&quot;color:#A00;font-weight:bold;&quot; href=&quot;https://qaxb95n3g50.feishu.cn/share/base/form/shrcntXjImLZ2L4HsDtd976XXmh&quot; target=&quot;_blank&quot;&gt;100+ 重磅嘉宾出席 GOTC 2024！ 499 专业观众票 【限时免费】&lt;img src=&quot;https://www.oschina.net/img/hot3.png&quot; align=&quot;absmiddle&quot; style=&quot;max-height: 32px;max-width: 32px;margin-top: -4px;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
            &lt;/div&gt;
                                                                                                                                                    &lt;h1&gt;一、前言&lt;/h1&gt; 
&lt;p&gt;随着大数据技术的飞速发展，实时处理能力变得越来越重要。在众多实时处理框架中，Apache Flink 以其强大的流处理能力和丰富的功能集，受到了广泛关注和应用。在实时业务日益增长的趋势下，这促使我们深入探索 Flink 的内核，以更好地保障 Flink 任务的维护。本次分享将重点介绍得物在 Flink 内核方面的探索与实践，探讨如何通过深度优化和定制，实现更加高效和稳定的数据处理能力。&lt;/p&gt; 
&lt;h1&gt;二、读者收益&lt;/h1&gt; 
&lt;p&gt;通过阅读本次分享，读者将获得以下收益：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;深入理解 Flink 内核&lt;/strong&gt;：了解 Flink 的核心架构和关键组件，掌握 Flink 内核的运行机制。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;优化实践&lt;/strong&gt;：学习得物在 Flink 优化方面的实战经验，包括如何通过参数调优和内核定制，提升系统性能。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;问题解决方案&lt;/strong&gt;：掌握处理 Flink 常见问题的方法和技巧，提高在实际项目中应对复杂场景的能力。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;实时处理案例&lt;/strong&gt;：通过实际案例，了解如何在复杂业务场景中应用 Flink，实现高效的实时数据处理。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;最佳实践&lt;/strong&gt;：获得得物在 Flink 应用中的最佳实践建议，帮助在实际项目中少走弯路，提高开发效率。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;无论你是刚接触 Flink 的初学者，还是有一定经验的开发者，相信通过本次分享，都能有所收获，进一步提升在实时数据处理方面的能力。&lt;/p&gt; 
&lt;h1&gt;三、自研特性&lt;/h1&gt; 
&lt;h2&gt;自研调度器&lt;/h2&gt; 
&lt;p&gt;Apache Flink 是一个开源的流处理框架，调度器是其重要的一部分。&lt;/p&gt; 
&lt;p&gt;在调度器上，我们新增了一款集合社区各款调度器优点的 DwScheduler。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;SchedulerNG (interface)
   |
   +-- SchedulerBase (implements SchedulerNG)
         |
         +-- DefaultScheduler (extends SchedulerBase 默认资源调度器)
               |
               +-- AdaptiveBatchScheduler (extends DefaultScheduler 自适应批调度器)
                     |
                     +-- SpeculativeScheduler (extends AdaptiveBatchScheduler 预测执行调度器)
               |
               |
               +-- DwScheduler (extends DefaultScheduler 自研调度器)
   |
   +-- AdaptiveScheduler (implements SchedulerNG 自适应调度器)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;在流任务生产环境中目前现有的调度并不很理想，在生产中我们常常遇到一些问题，例如&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;任务 JobGraph 与资源调度没有直接的联系，难于变化和修改；&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;不能以 TaskManager 维度均衡分配所有 task 到所有 slot 上；&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;1.18 以前没有直接动态扩缩容的接口、1.18 以后也没有整体算子同时扩缩容的能力；&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;流任务调度器没有可以迁移 task/Tm 的迁移计算节点的能力。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;DwScheduler 整合了社区调度器的各项优点，并提供了很多适应我们生产情况的特性&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;建立了 JobGraph 与资源之间的直接联系，用 JSON 可修改和表示流图信息和资源并进行调度；&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;能够均衡调度所有 task 到所有 TaskManager 上；&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;支持动态扩缩容各个算子，并且热更新资源规格的能力；&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;支持热迁移 task/Tm 的能力。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下面主要从上述的这四个特性上来重点讲解我们的成果。&lt;/p&gt; 
&lt;h2&gt;简化资源调度&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;背景：常规通过配置任务的高级参数进行提交任务，不利于资源的拓展，以及用户想设置多个 SlotSharingGroup 也无法通用地实现。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;SQL/DataStream 任务都可通过我们的 Flink 编译器 Generator 编译完成后生成一个流图资源信息 JSON。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/01_1723620683155.jpg&quot; alt=&quot;01.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;调度器支持通过 JobResourceProfile JSON 信息来进行资源申请。&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;JobResourceProfile 的信息用户可自由编辑，同样我们也提供了便捷的 UI 给用户操作算子和流图的以及资源的配置。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;我们支持配置算子的并行度、最大并行度、SlotSharingGroup，以及资源的 CPU、MEM、堆外内存部分我们也做了合理的管理让用户只需要配置一个比例，&lt;strong&gt;自动化设置资源的堆外各项参数降低 OOM 的风险，简化了用户对资源配置的操作难度&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持接收新的资源资源 JobResourceProfile JSON 重新调度任务，&lt;strong&gt;支持同时扩缩容多个 Operator 算子的并行度&lt;/strong&gt;。&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;在 JobManager 里我们提供了接收资源变更的 Handler；&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;DwScheduler 可以接收多元化的 Service 发起过来的资源变更请求；&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;并且它提供了&lt;strong&gt;六个回调接口&lt;/strong&gt;，不同的 Service 可以通过实现它来执行不同的逻辑。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;default void preRequestResource() {}

default void postRequestResource(Throwable throwable) {}

default void preRestart() {}

default void postRestart() {}

default void preDeploy() {}

default void postDeploy(Throwable throwable) {}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Flink 支持通过资源 JobResourceProfile+JobGraph 流图提交任务，JM 支持动态接收新的 JobResourceProfile 更新任务资源，可以按标签申请不同的资源机型。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;均衡调度 Task&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;背景：Flink 的 task 分配是基于 slot 维度进行全局调度的，即使配置了 cluster.evenly-spread-out-slots 也同样会有在 Tm 维度上的 task 分配不均衡的问题。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;使用自研调度器的情况下，能够使用 JobResourceProfile 提前计算出每个 TaskManager 应该分配多少 task，在此基础上我们实现了自己的 DwSlotSharingStrategy，可以有效的按 TaskManager 来分配 task 个数，而不仅仅是在 slot 层面做到资源的均衡。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/02_1723621228274.jpg&quot; alt=&quot;02.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在同一个任务使用原生社区调度器和使用我们自研调度器，我们得出了一些数据效果，从 Tm 维度来看 CPU 使用均衡了许多。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;从 CPU 使用率上来看，明显均衡了很多，减少了不均衡分配带来的性能瓶颈问题。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/03_1723621256095.jpg&quot; alt=&quot;03.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;TaskManager 热迁移&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;背景：在日常生产运维中，经常有需要迁移热点机器或故障机器的底层场景，Flink 缺乏这部分的热迁移能力。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;自研 Scheduler 为我们解决了这一问题，我们支持了热迁移 TaskManager&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;同样使用 DwScheduler 提供的六个回调接口以及触发资源变更的请求来完成 Tm 的热迁移&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;热迁移的 Service 只需要对应地实现下它的功能，不必关心调度的流程&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/04_1723621309118.jpg&quot; alt=&quot;04.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;从投入生产迁移 Tm 资源的断流耗时情况来看，几乎能做到断流 1~5s 内的快速迁移：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/05_1723621321686.jpg&quot; alt=&quot;05.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;TmRestart 重启策略&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;背景：Flink 社区只提供了 FullRestart、RegionRestart，往往在生产环境中我们经常会遇到各种不可抗力 Cancel 用户的代码会超时或堆外有泄漏的情况。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;为解决这一问题，我们在 Restart 层面增加了一种 TmRestart 策略：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;我们将 Tm Pod 的主进程修改为常驻 Shell，可以在 Cancel 超过一定时间能快速退出进程进行重启，也可以根据 JM 请求的重启参数直接触发 TmRestart；&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;修改 Pod 的主进程我们需要解决一些问题如：信号量传递给子进程、进程返回码的协调与重新拉起；&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;另外我们也通过 Shell 主进程对 Tm 进程的 IO 探活、Process D 监控等等；&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;在重启过程中会对 zk 有一定的重连，我们改造了这部分代码，尝试无法链接上一次的 JM 地址失败后才会去访问 zk 获取最新的 leader 地址。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;同时我们也可以调整重新拉起的 Tm 进程的 JVM 参数&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;在特殊场景通过对 Tm 退出的异常原因进行分析，列如 k8s 判定是 OOM 或是容器等待内存回收的延时分布次数过高，判断重新拉起的 Tm 是否应该进行 JVM 参数适当调整。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/06_1723621384746.jpg&quot; alt=&quot;06.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;TmRestart 重启，可根据任务异常情况、作业配置等按需重启 Tm 进程，支持修改 JVM 的参数。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h1&gt;四、总结&lt;/h1&gt; 
&lt;p&gt;本文主要介绍了以下内容：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Flink 调度器的基本生产优化和改造。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;重建 Flink 资源模型和支持热迁移等功能的特性介绍。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Flink 的 Task 分配策略优化和重启逻辑新特性 TmRestart。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;p&gt;*&lt;strong&gt;文 / 天然卷&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;本文属得物技术原创，更多精彩文章请看：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com%2F&quot; target=&quot;_blank&quot;&gt;得物技术&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;未经得物技术许可严禁转载，否则依法追究法律责任！&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/5783135/blog/15327322</link>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/15327322</guid>
            <pubDate>Thu, 15 Aug 2024 02:05:00 GMT</pubDate>
            <author>得物技术</author>
        </item>
    </channel>
</rss>