<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - industry - 简体中文</title>
    <link>https://www.oschina.net/news/industry</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/industry" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 16 Sep 2025 02:41:48 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>🔥🔥简单手搓一个智能门禁摄像头</title>
      <description/>
      <link>https://www.oschina.net/ai-creation/details/2212</link>
      <guid isPermaLink="false">https://www.oschina.net/ai-creation/details/2212</guid>
      <pubDate>Tue, 16 Sep 2025 02:34:46 GMT</pubDate>
    </item>
    <item>
      <title>OpenAI 发布新编程模型 GPT‑5‑Codex，优化 Agentic Coding 能力</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;OpenAI 今日凌晨推出全新升级的新模型&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenai.com%2Findex%2Fintroducing-upgrades-to-codex%2F" target="_blank"&gt; GPT‑5‑Codex&lt;/a&gt;，这是其在 GPT-5 基础上专门为软件工程优化的模型版本，进一步提升了 Codex 中的智能体编程（Agentic Coding）能力。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0916/103044_nL9C_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;官方表示，该版本在代码审查、功能开发、大规模重构等场景中表现显著提升，并且「在测试中可连续独立工作超过 7 小时」。以下是本次升级的主要亮点：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;工具全面升级：Codex CLI 全面重新设计，IDE 插件支持 VS Code 等主流环境，与 GitHub 深度集成云端与本地环境可无缝切换；&lt;/li&gt; 
 &lt;li&gt;代码审查能力强化：自动在 PR 中发现关键漏洞，减少无效评论，并可直接提出并实现修改建议。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0916/103155_65FN_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;据介绍，GPT‑5‑Codex 已成为 Codex 云端任务与代码审查的默认模型，开发者也可通过 Codex CLI 或 IDE 插件在本地使用。与通用版 GPT‑5 相比，新版本在代码重构任务的准确率从 33.9% 提升至 51.3%，高影响力审查评论比例也从 39.4% 提升至 52.4%。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0916/103208_f98s_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0916/103232_QvKk_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;此外，Codex CLI 与 IDE 插件同步升级，支持在终端直接附加截图、线框图等设计资料，并可在云端自动搭建运行环境、执行依赖安装。官方称，通过缓存容器等优化，云端任务完成时间中位数缩短了 90%。&lt;/p&gt; 
&lt;p&gt;目前，Codex 已整合至 ChatGPT Plus、Pro、Business、Edu 与 Enterprise 计划中，企业用户可按需购买额外额度，API 接入版本也将很快上线。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372453</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372453</guid>
      <pubDate>Tue, 16 Sep 2025 02:33:46 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>宇树科技发布开源世界模型-动作架构：UnifoLM-WMA-0</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;宇树科技正式&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FkrQOGN9hqM0Nye9KfHpThw" target="_blank"&gt;推出&lt;/a&gt;跨多类机器人本体的开源世界模型-动作（WMA）架构 —— UnifoLM-WMA-0。该架构旨在为通用机器人学习提供统一的技术基础，核心在于一个能够理解机器人与环境交互物理规律的世界模型。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0916/102333_wzUL_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;该世界模型具备两大核心功能：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;仿真引擎：作为交互式仿真器运行，为机器人学习生成合成数据。&lt;/li&gt; 
 &lt;li&gt;策略增强：可与动作头对接，通过预测未来与物理世界的交互过程，优化决策性能。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;模型接收图像及文本指令，生成与文本指令对应的未来动作视频。&lt;/p&gt; 
&lt;p&gt;官方介绍，UnifoLM-WMA-0 支持两种运行模式：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;决策模式：提供机器人与环境物理交互的预测信息，辅助策略生成动作。&lt;/li&gt; 
 &lt;li&gt;仿真模式：基于机器人动作生成高保真环境反馈。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在训练方面，团队基于 5 个宇树科技开源数据集完成模型训练，测试结果显示，该模型可根据「当前图像」及一定数量的「机器人未来动作」实现交互可控生成，并具备长程任务的持续交互生成能力。&lt;/p&gt; 
&lt;p&gt;项目主页：https://unigen-x.github.io/unifolm-world-model-action.github.io/&lt;br&gt; 开源代码网址：https://github.com/unitreerobotics/unifolm-world-model-action&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372450/unitreerobotics-unifolm-world-model-action</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372450/unitreerobotics-unifolm-world-model-action</guid>
      <pubDate>Tue, 16 Sep 2025 02:24:46 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>OpenAI 重组机器人团队剑指「通用机器人」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;OpenAI 正在重返机器人研究领域，这标志着该公司在中断五年之后，重新将物理人工智能（AI）作为其核心关注点。《连线》杂志报道称，OpenAI 正在招聘专门从事人形机器人研究的人员，旨在通过远程操作和模拟训练，打造能够执行通用任务的机器人。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="283" src="https://oscimg.oschina.net/oscnet/up-f9e16bedff73205d06dc93e1f2c899f753c.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;根据招聘信息，新成立的团队将专注于传感和原型设计，其&lt;span&gt;终极&lt;/span&gt;使命是创造「通用机器人，以加速通用人工智能（AGI）的实现。虽然该公司尚未正式确认该项目是否针对人形机器人，但种种迹象表明，其研究方向确实与类人系统紧密相关。新加入的团队成员包括斯坦福大学研究员李成书 (Chen-Shu Lee)，他曾专注于类人家用机器人的基准测试，进一步印证了这一推测。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;早在 2020 年，OpenAI 曾因训练数据不足而暂停其机器人研究工作。然而，该公司于今年 1 月再次发布了多个机器人相关的职位，这表明随着技术和数据的积累，OpenAI 已准备好重启这一重要项目，继续探索物理世界中的 AI 应用。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372449</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372449</guid>
      <pubDate>Tue, 16 Sep 2025 02:20:46 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>网安周开幕｜绿盟大模型能力再获权威肯定，持续推动 AI 与网络安全深度融合</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="" height="177" src="https://oscimg.oschina.net/oscnet//00adc33f8c5022b4075b940514844e44.jpg" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;9 月 15 日，2025 年国家网络安全宣传周的开幕式及一系列重要活动在云南昆明举办。其中，开幕式现场，12387 网络安全事件报告平台正式启动。绿盟科技集团党委书记、董事长兼总裁胡忠华，集团董事、首席技术官、高级副总裁叶晓虎，副总裁陈珂，总裁助理张铭等受邀出席相关活动。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;在网络安全技术高峰论坛上，国家计算机网络应急技术处理协调中心发布了 2025 年人工智能技术赋能网络安全应用测试结果。&lt;strong&gt;绿盟科技在基于智能体的网络安全自动化分析响应场景中表现突出，荣获赛道第二名，并在大模型生成内容安全风险检测中位列第五&lt;/strong&gt;。这也是继 2024 年在相关赛道测试中取得优异表现后，公司大模型能力再次在权威测试中得到认可。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="" height="400" src="https://oscimg.oschina.net/oscnet//b6e681bb078c9e2344e4618963a38515.jpg" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;该场景要求参测团队利用 AI 智能体检测钓鱼邮件、终端异常行为、DNS 隐蔽隧道异常行为，并通过跨域日志（邮件、终端、DNS）进行关联分析，识别出完整攻击链，并提出处置方案。综合指标包括检测与关联分析的准确率、漏报率及处置正确性。绿盟科技凭借智能体驱动的自动化分析与响应能力，实现了从「检测—分析—研判—处置」的智能化闭环，能够精准识别复杂攻击链并生成可执行的处置建议，充分展示了公司在智能化安全运营方向的积累。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;深耕「AI+安全」，持续打造大模型能力&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;绿盟科技始终把人工智能作为推动安全能力跃升的重要引擎。2023 年，公司发布了风云衞 AI 安全能力平台，率先构建安全垂直领域的大模型体系。该平台融合大模型、小模型与安全知识图谱，将 AI 能力「原子化」嵌入安全运营体系，覆盖安全数据分析、威胁情报研判、攻击链追踪与处置响应等关键环节，并已在政府、金融、能源、运营商、科教文衞等重点行业落地应用。平台已通过国家网信办算法模型双备案，同时入选世界人工智能大会《2024 大模型典型示范应用案例集》，并通过工信部信通院 AI 安全能力评估。此次在国家网络安全宣传周测试中获奖，既是对风云衞在智能体应用上的又一次检验，也进一步印证了公司在「AI+安全」方向的技术路线和产品实践的成熟度。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;聚焦技术攻坚，持续拓展应用场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;大模型和智能体的快速发展正在改变攻防模式。绿盟科技面向衞星通信、无人机、车联网、AI 攻防等新兴场景持续研发，2025 年发布十余款新品，并推出大模型安全治理方案、场景化安全方案、备案评估与红队服务等，全面守护用户智能化转型的可信与安全。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;同时，公司不断推动传统产品融入 AI 能力，逐步向智能体方向演进，在安全运营、数据安全、供应链安全等场景全面提升能力，让智能化成为网络安全建设的坚实底座。面对复杂多变的应用环境，绿盟科技积极推动行业协同与能力互通，适配多种国产化硬件与操作系统，强化与产业链上下游合作，确保 AI 安全能力具备弹性、兼容性和可扩展性。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;近日，国务院印发的《关于深入实施「人工智能+」行动的意见》，对人工智能应用安全治理和潜在风险防控提出了更高要求，不仅回应了人工智能快速演进带来的安全挑战，也为行业高质量发展明确了方向。绿盟科技将继续以自主创新为根本，以产业需求为导向，深化人工智能与安全场景结合，服务国家重大任务，支撑产业数字化转型，推动构建更加智能化、主动化的网络安全体系，为数字经济的繁荣发展贡献力量。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372445</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372445</guid>
      <pubDate>Tue, 16 Sep 2025 02:05:46 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>鸿蒙 NEXT 应用国际化：时间与日期格式化</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;踏入鸿蒙世界的敲门砖，标志着您在技术征途上的全新起点，提升就业竞争力，获得行业认可，点亮职业成长先机，快人一步抢占未来应用开发赛道！&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Ftraining%2Fdev-cert-detail%2F101666948302721398%3Fha_source%3Dhmosclass-sifou%26ha_sourceId%3D89000235" target="_blank"&gt;https://developer.huawei.com/consumer/cn/training/dev-cert-detail/101666948302721398?ha_source=hmosclass-sifou&amp;amp;ha_sourceId=89000235&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;本文旨在深入探讨华为鸿蒙 HarmonyOS NEXT 系统（截至目前 API12）在应用国际化中时间与日期格式化方面的技术细节，基于实际开发实践进行总结。主要作为技术分享与交流载体，难免错漏，欢迎各位同仁提出宝贵意见和问题，以便共同进步。本文为原创内容，任何形式的转载必须注明出处及原作者。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在全球化的应用场景中，正确处理时间与日期的格式化是提供优质用户体验的关键因素之一。不同地区和语言对于时间与日期的表示方式存在显著差异，鸿蒙 NEXT 系统提供了丰富的功能来满足这种多样化的需求。本文将详细介绍时间日期格式化选项、相对时间格式化、时间段格式化，以及常见时间日期格式化问题及解决方案，抛砖引玉。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;一、时间日期格式化选项&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）日期显示格式（dateStyle）&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.格式取值与示例&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;full：显示完整的日期信息，包括年、月、日、星期。例如，在中文环境下可能显示为「2023 年 10 月 15 日，星期日」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&amp;nbsp;long：显示较为详细的日期，通常包含年、月、日和星期的缩写。如「2023 年 10 月 15 日，周日」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&amp;nbsp;medium：显示适中的日期格式，一般有年、月、日。例如「2023-10-15」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;short：显示简洁的日期，可能只包含月、日和年的部分信息。比如「10/15/23」（在某些地区格式）。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.根据区域和语言选择格式&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;开发者可以使用&amp;nbsp;DateTimeFormat&amp;nbsp;类，根据用户所在区域的语言和文化习惯选择合适的&amp;nbsp;dateStyle&amp;nbsp;进行日期格式化。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="258" src="https://oscimg.oschina.net/oscnet/up-e4f1d0d36e0c54a18f7255c9812c391260d.png" width="1094" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）时间显示格式（timeStyle）&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.格式取值与示例&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;full：显示完整的时间信息，包括小时、分钟、秒和时区（如果适用）。例如「中国标准时间 15:30:00」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;long：显示详细的时间，包含小时、分钟、秒和时区标识（如「GMT+8 15:30:00」）。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;medium：显示适中的时间格式，有小时、分钟和秒。如「15:30:00」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;short：显示简洁的时间，可能只包含小时和分钟。例如「15:30」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.时间格式的区域适应性&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;同样，通过&amp;nbsp;DateTimeFormat&amp;nbsp;类，结合区域设置来确定合适的&amp;nbsp;timeStyle。不同地区对于时间格式的偏好不同，有些地区习惯使用 24 小时制，有些则常用 12 小时制并带有上午/下午标识。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="280" src="https://oscimg.oschina.net/oscnet/up-c8a1304e52749c700f42fb9270f6e49e755.png" width="1316" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（三）年份显示格式（year）&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.numeric：以完整的数字形式显示年份，如「2023」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;2 - digit：显示年份的后两位数字，例如「23」。这种格式在某些场景下（如显示文件创建时间的简略年份）可能会用到，但需要注意其在不同年份范围下的含义可能不明确，使用时要谨慎。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（四）工作日显示格式（weekday）&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;long：显示完整的工作日名称，如「星期一」「Tuesday」等。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;short：显示工作日的缩写，如「周一」「Tue」等。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;3.&amp;nbsp;narrow：显示更简洁的工作日标识，通常是一个字符或简短的缩写，例如「一」「T」等。这种格式在空间有限的情况下（如日历视图中的小标签）可能会使用。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（五）时制格式（hourCycle）&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;h11：表示 11 小时制，用于显示带有上午/下午标识的时间，如「下午 3:30」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;h12：与「h11」类似，但在某些地区可能有不同的时间范围定义（例如，在一些地方中午 12 点可能被视为「12 PM」，而在另一些地方可能被视为「12 AM」）。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;3.&amp;nbsp;h23：23 小时制，用于显示 0 - 23 小时的时间，如「15:30」（与 24 小时制相同，但在某些情况下可能有不同的语义或用途）。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;4.&amp;nbsp;h24：24 小时制，显示完整的 24 小时时间格式，如「15:30」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（六）&amp;nbsp;其他格式选项&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.数字分组和小数点格式：&lt;/strong&gt;在显示日期中的年份、时间中的小时和分钟等数字时，不同地区可能有不同的数字分组方式（如使用逗号或空格分隔千位）和小数点表示法（如点或逗号）。开发者可以根据区域设置来处理这些格式，以确保数字显示符合当地习惯。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.日历类型选择：&lt;/strong&gt;除了常见的公历，鸿蒙系统还支持其他日历类型（如农历、伊斯兰历等），在格式化日期时，可以根据用户的需求和文化背景选择合适的日历类型进行显示。例如，在某些与中国传统文化相关的应用中，可能需要同时显示公历和农历日期。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;二、相对时间格式化&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）相对时间格式化的概念&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;相对时间格式化用于将一个时间点与另一个时间点之间的时间差转换为易于理解的文本表示。例如，将「30 秒前」「1 小时后」「昨天」等相对时间概念以用户所在地区的语言习惯进行显示。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）使用&amp;nbsp;RelativeTimeFormat&amp;nbsp;类进行格式化&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.创建格式化对象&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;可以使用&amp;nbsp;RelativeTimeFormat&amp;nbsp;类的构造函数创建相对时间格式化对象。构造函数支持传入区域标识符（如「en - GB」「zh - Hans」等）和格式化选项，以定制相对时间的显示格式。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="124" src="https://oscimg.oschina.net/oscnet/up-27dbb790cfd0773206a6360192f9a15406d.png" width="930" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.格式化相对时间&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;使用&amp;nbsp;format&amp;nbsp;方法对相对时间进行格式化。该方法接受两个参数，第一个参数是时间差的数值，第二个参数是时间单位（如「day」「hour」「minute」「second」等）。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="84" src="https://oscimg.oschina.net/oscnet/up-73baa4888f0d296f975cab4782c440a7144.png" width="974" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.格式化选项&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;numeric：取值为「always」时，始终显示数字和时间单位，如「2 days ago」；取值为「auto」时，根据时间差的大小自动选择显示方式，例如，对于「昨天」可能显示为「yesterday」，而对于「3 天前」则显示为「3 days ago」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;style：取值为「long」时，显示较为详细的相对时间格式，如「1 day ago」；取值为「short」时，显示更简洁的格式，如「1d ago」；取值为「narrow」时，显示最简短的格式，如「-1d」（在某些语言中可能适用）。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（三）相对时间格式化的应用场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.消息通知：&lt;/strong&gt;在消息应用中，显示消息的发送时间与当前时间的相对时间差，使用户能够快速了解消息的时效性。例如，「您有一条新消息，2 小时前发送」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.动态内容更新：&lt;/strong&gt;在社交网络应用或新闻资讯应用中，显示动态内容（如评论、点赞等）的相对时间，让用户知道这些活动的新鲜程度。比如，「此评论于 30 分钟前发布」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.任务提醒：&lt;/strong&gt;对于待办任务或定时提醒，显示距离任务截止时间或提醒时间的相对时间，方便用户掌握时间进度。例如，「任务将于 1 小时后开始」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;三、时间段格式化&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）时间段格式化的概念&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;时间段格式化是将一段时间范围（如从一个时间点到另一个时间点）转换为符合用户所在地区语言习惯的文本表示。例如，将「8:00 - 10:00」「Wednesday - Thursday」等时间段进行格式化显示。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）使用&amp;nbsp;DateTimeFormat&amp;nbsp;类进行时间段格式化&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.创建格式化对象&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;与时间日期格式化类似，使用&amp;nbsp;DateTimeFormat&amp;nbsp;类创建格式化对象，但在这种情况下，通常使用默认的格式设置或根据具体需求进行简单配置。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="148" src="https://oscimg.oschina.net/oscnet/up-939ae1b2a82f67a07dc7c8dcc8da7a8beca.png" width="938" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.格式化时间段&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;使用&amp;nbsp;formatRange&amp;nbsp;方法对时间段进行格式化。该方法接受两个&amp;nbsp;Date&amp;nbsp;对象作为参数，分别表示时间段的起始时间和结束时间。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="152" src="https://oscimg.oschina.net/oscnet/up-e659530d7c50127db73978528161f3324a4.png" width="1472" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（三）时间段格式化的应用场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.日程安排&lt;/strong&gt;：在日历应用或任务管理应用中，显示日程活动或任务的时间段，让用户清晰了解活动的持续时间。例如，「会议：9:00 - 11:00」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.营业时间显示：&lt;/strong&gt;在商业应用（如商店、餐厅等）中，显示营业时间的时间段，方便用户了解其营业时段。例如，「营业时间：周一 - 周五 9:00 - 18:00，周六 - 周日 10:00 - 17:00」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.资源预订：&lt;/strong&gt;在预订系统（如酒店预订、会议室预订等）中，显示可预订资源的可用时间段，帮助用户选择合适的预订时间。例如，「可预订时间段：2023-10-15 12:00 - 14:00」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;四、常见时间日期格式化问题及解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）格式显示不符合预期&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问题描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;应用在不同地区或语言环境下，时间日期的显示格式与当地习惯不符。例如，在某些地区应该显示为「DD/MM/YYYY」格式的日期，却显示为「MM/DD/YYYY」格式，导致用户误解。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;仔细检查&amp;nbsp;DateTimeFormat&amp;nbsp;类的使用，确保根据用户所在区域正确设置了&amp;nbsp;dateStyle、timeStyle、hourCycle&amp;nbsp;等格式选项。同时，要考虑到不同语言和地区对数字分组、小数点等的特殊要求。例如，在处理日期格式时：&lt;/p&gt; 
&lt;p&gt;&lt;img height="210" src="https://oscimg.oschina.net/oscnet/up-2565dfd82f1d601cbb77f022e3c957afb75.png" width="1320" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;对于时间格式，也要进行类似的检查和调整，确保时间显示符合当地习惯。如果应用支持多种语言和地区，进行全面的测试，覆盖不同的语言和区域组合，以发现并修复格式显示问题。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）相对时间格式化不准确&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问题描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;相对时间格式化的结果与预期的时间差表示不一致。例如，在某些情况下，「1 小时前」被错误地显示为「59 分钟前」，或者对于较长时间差的格式化不够直观（如「3 天 2 小时前」显示为不常见的格式）。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;检查&amp;nbsp;RelativeTimeFormat&amp;nbsp;类的使用，确保正确设置了&amp;nbsp;numeric&amp;nbsp;和&amp;nbsp;style&amp;nbsp;等格式化选项。对于时间差的计算，要使用准确的时间计算方法，避免因时间精度问题导致格式化错误。例如，在计算时间差时，使用合适的时间单位转换和四舍五入规则，确保时间差的数值准确。同时，可以参考当地语言的习惯表达方式，对相对时间格式化进行优化，使其更符合用户的预期。例如，在中文环境下，对于「1 天前」「昨天」「前天」等时间差的表示有特定的习惯用法，可以根据时间差的范围进行相应的调整：&lt;/p&gt; 
&lt;p&gt;&lt;img height="158" src="https://oscimg.oschina.net/oscnet/up-432420e425ba8a7f306c00d2c9022da04fc.png" width="1318" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（三）时间段格式化错误&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问题描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在格式化时间段时，出现起始时间和结束时间顺序错误、格式不清晰或不符合当地习惯等问题。例如，在某些地区习惯将时间段显示为「起始时间 - 结束时间」，而应用却显示为「结束时间 - 起始时间」，或者时间段的日期和时间部分显示混乱。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;再次确认&amp;nbsp;DateTimeFormat&amp;nbsp;类中&amp;nbsp;formatRange&amp;nbsp;方法的使用，确保传入的起始时间和结束时间参数正确无误。根据不同地区的习惯，调整日期和时间的显示顺序以及格式。例如，在处理跨天的时间段时，要明确显示日期的变化，避免造成混淆。可以参考当地类似应用的时间段显示方式，进行针对性的优化。例如，在一个全球应用中，对于营业时间的显示：&lt;/p&gt; 
&lt;p&gt;&lt;img height="206" src="https://oscimg.oschina.net/oscnet/up-6e7ca53de859cfbe827c1edc0f4dda11325.png" width="1776" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（四）夏令时对时间格式化的影响&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问题描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在实行夏令时的地区，时间格式化可能出现问题。例如，在夏令时开始或结束时，时间突然跳跃，应用如果没有正确处理，可能导致时间显示错误或时间段计算不准确。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;鸿蒙系统通常会自动处理夏令时相关的时间调整，但在进行时间格式化时，要确保使用的是系统正确处理后的时间。在处理时间段涉及夏令时期间时，要考虑时间跳跃的情况，正确计算时间段的长度。例如，在计算从夏令时开始前到夏令时开始后的时间段时，要将夏令时的时间调整因素考虑在内。可以通过获取系统的时区信息和夏令时设置，来辅助进行时间格式化和时间段计算，确保在夏令时期间时间显示和计算的准确性。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（五）多语言混合环境下的时间格式化问题&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问题描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在应用中存在多语言混合显示的情况下（如界面文本包含多种语言），时间日期格式化可能与周围文本的语言风格不匹配。例如，在一个包含英文和中文的界面中，时间格式在中文部分显示为中文习惯格式，而在英文部分却没有显示为相应的英文习惯格式，导致界面显示不协调。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;根据界面文本的语言环境动态选择合适的时间日期格式化方式。可以通过检测周围文本的语言标识或根据应用当前的语言设置，为不同语言部分的时间日期分别进行格式化。例如，在一个同时显示中英文的通知消息中：&lt;/p&gt; 
&lt;p&gt;&lt;img height="400" src="https://oscimg.oschina.net/oscnet/up-8638fdd9311d8d333d44a27b2e39e65d736.png" width="1268" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;这样可以确保在多语言混合环境下，时间日期的显示与周围文本的语言风格一致，提高界面的整体协调性和可读性。同时，要注意处理好不同语言格式之间的分隔和排版，使其在视觉上更加美观。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（六）时间日期格式化的性能优化&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问题描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在频繁进行时间日期格式化操作（如在列表中显示大量带有时间日期的项目，或者实时更新时间显示）时，可能会出现性能瓶颈，导致应用响应变慢或卡顿。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;避免在循环或频繁调用的函数中重复创建&amp;nbsp;DateTimeFormat&amp;nbsp;或&amp;nbsp;RelativeTimeFormat&amp;nbsp;对象。可以将格式化对象缓存起来，在需要时重复使用，减少对象创建和销毁的开销。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="270" src="https://oscimg.oschina.net/oscnet/up-426c4acbe177f1bad250d6921628b8507ea.png" width="1032" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;对于相对时间格式化，如果时间差的计算逻辑较为复杂，可以考虑预先计算并缓存一些常见时间差的格式化结果，在需要时直接使用，避免重复计算。同时，优化时间计算和格式化的算法，尽量减少不必要的计算步骤和资源消耗。例如，在计算相对时间时，如果时间差在一定范围内（如最近 1 小时内），可以使用简单的差值计算和固定格式显示，而对于较长时间差再使用完整的相对时间格式化逻辑，提高性能。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（七）时间日期格式化与后端数据的兼容性&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问题描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;当应用从后端获取时间日期数据时，后端数据的格式可能与应用前端的格式化要求不一致，导致在显示时间日期时出现问题。例如，后端返回的日期格式为「YYYYMMDD」，而前端需要显示为「DD/MM/YYYY」格式，或者后端使用的时间戳格式与前端处理方式不匹配。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在前端和后端之间建立统一的时间日期格式规范。如果可能的话，后端按照前端能够直接使用或容易转换的格式返回时间日期数据。例如，后端可以返回 ISO 8601 格式的日期时间字符串（如「2023 - 10 - 15T15:30:00Z」），前端可以直接使用或进行简单的转换。如果后端数据格式无法更改，前端在接收到数据后，进行格式转换处理，使其符合前端的显示要求。可以编写专门的函数来处理后端数据格式到前端格式化要求的转换。例如，将后端返回的「YYYYMMDD」格式日期转换为「DD/MM/YYYY」格式：&lt;/p&gt; 
&lt;p&gt;&lt;img height="196" src="https://oscimg.oschina.net/oscnet/up-832b8ea9a024e213db5b59d00dea05d2ddf.png" width="912" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;同时，要注意处理时区差异。如果后端和前端处于不同时区，在数据传输和处理过程中，明确时区信息，确保时间日期的准确性。可以将时间数据统一转换为 0 时区标准时间（UTC 或 GMT）进行传输，在前端根据用户所在时区进行显示转换。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（八）时间日期格式化在低配置设备上的问题&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问题描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在低配置设备上，复杂的时间日期格式化操作可能会消耗过多的系统资源，导致应用运行缓慢甚至出现崩溃。例如，在一些老旧手机或内存较小的设备上，频繁进行高精度的时间计算和格式化可能会超出设备的处理能力。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在低配置设备上，简化时间日期格式化的方式。可以提供一些低精度但性能较好的格式化选项，例如，在显示时间时，只显示小时和分钟，而不显示秒；在显示日期时，使用更简洁的格式（如「MM/DD」），减少不必要的计算和显示内容。根据设备的性能特征，动态调整时间日期格式化策略。例如，可以检测设备的内存、CPU 等硬件参数，当设备性能较低时，切换到低配置模式下的格式化方式。同时，优化应用的整体性能，减少其他不必要的资源消耗，为时间日期格式化操作留出更多的系统资源。例如，优化界面渲染、减少不必要的后台任务等，确保应用在低配置设备上能够稳定运行，时间日期显示功能正常。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;通过对这些常见时间日期格式化问题的深入理解和有效解决，我们能够更好地利用鸿蒙 NEXT 系统的时间日期国际化功能，为用户提供准确、友好、高效的时间日期显示体验。在应用开发过程中，注重细节、充分测试、持续优化，是确保时间日期格式化在各种场景下都能正常工作的关键。希望本文能够为鸿蒙系统同僚在处理时间日期格式化方面提供有价值的参考和指导，助力打造出更加出色的国际化应用。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;（转载自 51CTO，作者：SameX）&lt;/p&gt; 
&lt;p&gt;&lt;img height="360" src="https://oscimg.oschina.net/oscnet/up-2355d57fd6216e83cf9599dd71df5020cdc.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372442</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372442</guid>
      <pubDate>Tue, 16 Sep 2025 02:00:46 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>鸿蒙高安全性输入法的实现：基础模式与完整体验模式下的输入法功能适配</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;踏入鸿蒙世界的敲门砖，标志着您在技术征途上的全新起点，提升就业竞争力，获得行业认可，点亮职业成长先机，快人一步抢占未来应用开发赛道！&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Ftraining%2Fdev-cert-detail%2F101666948302721398%3Fha_source%3Dhmosclass-sifou%26ha_sourceId%3D89000235" target="_blank"&gt;https://developer.huawei.com/consumer/cn/training/dev-cert-detail/101666948302721398?ha_source=hmosclass-sifou&amp;amp;ha_sourceId=89000235&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;本文旨在深入探讨高安全性输入法在基础模式与完整体验模式下的功能适配技术细节，基于实际开发实践进行总结。主要作为技术分享与交流载体，难免错漏，欢迎各位同仁提出宝贵意见和问题，以便共同进步。本文为原创内容，任何形式的转载必须注明出处及原作者。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在当今数字化环境中，用户数据安全至关重要。输入法作为用户频繁使用的工具，必须确保在不同模式下既能提供良好的功能体验，又能保障数据安全。本文将详细介绍如何在华为鸿蒙 HarmonyOS NEXT 系统（API12）中设计并实现一个输入法应用，使其能够完美适配基础模式与完整体验模式，包括项目需求分析、架构设计、关键技术实现以及共享沙箱数据安全性控制等方面。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;一、项目需求与架构设计&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）安全模式的应用场景分析&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在基础模式下，输入法需要严格遵守隐私和数据保护规范，禁止访问可能涉及用户隐私的系统能力，如网络、短信、定位等。这主要应用于对安全性要求极高的场景，例如企业内部办公环境，防止用户数据泄露风险。而完整体验模式则提供更丰富的功能，允许使用网络和访问用户数据接口，以提升用户体验，适用于普通用户日常使用场景。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）架构设计&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;我们采用模块化架构设计，将输入法功能分为基础功能模块和扩展功能模块。基础功能模块在基础模式和完整体验模式下均可运行，包括基本的输入、显示等功能。扩展功能模块则根据不同模式进行适配，在基础模式下被禁用，在完整体验模式下启用，如网络搜索、个性化推荐等功能。同时，引入安全检测模块，通过&amp;nbsp;IME Kit&amp;nbsp;的&amp;nbsp;getSecurityMode&amp;nbsp;方法检测当前运行模式，动态调整输入法功能。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;二、基础模式功能适配&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;&lt;span&gt;（一）使&lt;/span&gt;&lt;span&gt;用&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;getSecurityMode&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;检查&lt;/span&gt;&lt;span&gt;当前模式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在输入法应用的初始化阶段，调用&amp;nbsp;getSecurityMode&amp;nbsp;方法获取当前安全模式。以下是一个简单的示例代码：&lt;/p&gt; 
&lt;p&gt;&lt;img height="266" src="https://oscimg.oschina.net/oscnet/up-15fab686e9447750cc6d24c8c8871371f38.png" width="1076" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）在基础模式下禁用所有网络请求与数据传输，确保数据隔离&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在基础模式下，我们需要确保输入法不进行任何网络请求，防止数据泄露。可以通过代码层面的限制来实现，例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="206" src="https://oscimg.oschina.net/oscnet/up-e9c49ff44fb18d57dbdd39f1443bb4e47f8.png" width="832" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;这里的&amp;nbsp;disableNetworkRequests&amp;nbsp;和&amp;nbsp;isolateData&amp;nbsp;函数需要根据具体的业务逻辑和系统接口来实现，例如可以禁用网络库的使用，限制数据访问权限等。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;三、完整体验模式的功能扩展&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）启用网络和用户数据接口，增强用户体验&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在完整体验模式下，我们可以启用网络请求来实现一些高级功能，如在线词库更新、云输入等。同时，可以访问用户数据接口，根据用户的历史输入习惯提供个性化的输入建议。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="246" src="https://oscimg.oschina.net/oscnet/up-fc7966ac778a6c74d41e8ad7b1a1feea663.png" width="844" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）实现动态模式检测与切换，确保输入法在模式切换时调整功能&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;为了确保输入法在系统安全模式切换时能够及时调整功能，我们需要实时监听模式变化。可以通过注册模式变化监听器来实现，例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="270" src="https://oscimg.oschina.net/oscnet/up-e0abc11df9e1220113bb2fcf6ec37aafb25.png" width="892" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;四、共享沙箱数据的安全性控制&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）在基础模式下实现共享沙箱的只读访问&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在基础模式下，为了防止数据被意外修改或泄露，我们将共享沙箱设置为只读访问。可以通过文件系统权限设置或特定的沙箱访问接口来实现。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="136" src="https://oscimg.oschina.net/oscnet/up-b67b63682cfd13e22ce2571b8f897e961b5.png" width="864" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）在完整体验模式下，确保数据在共享沙箱中的传输安全&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在完整体验模式下，虽然可以读写共享沙箱，但我们仍需确保数据传输的安全性。可以采用加密技术对共享沙箱中的数据进行加密存储和传输，例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="202" src="https://oscimg.oschina.net/oscnet/up-2bdaab92e3b89e5b745667212d29aec20c1.png" width="908" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;五、示例代码与安全架构图&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）示例代码&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;以下是一个简化的基础模式与完整体验模式的安全代码示例：&lt;/p&gt; 
&lt;p&gt;&lt;img height="862" src="https://oscimg.oschina.net/oscnet/up-f49e135dbb7eb9621a12144c581937859cb.png" width="956" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img height="640" src="https://oscimg.oschina.net/oscnet/up-c90f9bbb16e9d8c22570f6711b0e8d6e950.png" width="890" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）安全架构图与模式检测&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;安全架构图：&lt;/p&gt; 
&lt;p&gt;&lt;img height="400" src="https://oscimg.oschina.net/oscnet/up-7fc50cedbb49e9c04410e31c963578eb52c.png" width="1656" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;模式检测流程图：&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.输入法应用启动。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.调用&amp;nbsp;checkSecurityMode&amp;nbsp;函数获取当前安全模式。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;3.如果是基础模式，执行&amp;nbsp;adaptToBasicMode&amp;nbsp;函数进行功能适配；如果是完整体验模式，执行&amp;nbsp;adaptToFullMode 函数。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;4.注册&amp;nbsp;securityModeChange&amp;nbsp;监听器，实时监听模式变化。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;5.当系统安全模式发生变化时，监听器触发，根据新的模式再次执行相应的适配函数。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;通过以上设计与实现，我们成功打造了一个高安全性的输入法应用，能够在基础模式和完整体验模式下稳定运行，保障用户数据安全的同时提供良好的功能体验。在实际开发中，还可以进一步优化安全机制、增加更多安全检测点以及完善功能适配细节等。希望本文能够为鸿蒙系统输入法开发中的安全相关工作提供有益的参考和借鉴。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;（转载自 51CTO，作者：SameX）&lt;/p&gt; 
&lt;p&gt;&lt;img height="360" src="https://oscimg.oschina.net/oscnet/up-707fb43adf4bd43106b6d0edb6054c4d144.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372438</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372438</guid>
      <pubDate>Tue, 16 Sep 2025 01:58:46 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>鸿蒙 NEXT 应用本地化：多语言社交应用</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;踏入鸿蒙世界的敲门砖，标志着您在技术征途上的全新起点，提升就业竞争力，获得行业认可，点亮职业成长先机，快人一步抢占未来应用开发赛道！&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Ftraining%2Fdev-cert-detail%2F101666948302721398%3Fha_source%3Dhmosclass-sifou%26ha_sourceId%3D89000235" target="_blank"&gt;https://developer.huawei.com/consumer/cn/training/dev-cert-detail/101666948302721398?ha_source=hmosclass-sifou&amp;amp;ha_sourceId=89000235&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;本文旨在深入探讨华为鸿蒙 HarmonyOS NEXT 系统（截至目前 API12）在开发多语言社交应用方面的技术细节，基于实际开发实践进行总结。主要作为技术分享与交流载体，难免错漏，欢迎各位同仁提出宝贵意见和问题，以便共同进步。本文为原创内容，任何形式的转载必须注明出处及原作者。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;一、应用场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;开发一个支持多语言社交功能的移动应用，用户可以发布和分享信息，并进行互动交流。这个应用旨在打破语言障碍，让全球用户能够轻松地进行社交互动，分享生活点滴和交流想法。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;二、技术要点&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）使用资源文件管理多语言文本资源&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.资源文件结构&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;采用 JSON 格式的资源文件来管理多语言文本资源，包括用户界面元素、消息内容、表情符号的描述等。例如，可以创建不同的资源文件用于不同的语言，如&amp;nbsp;strings_en.json（英语资源文件）、strings_fr.json（法语资源文件）等。在资源文件中，按照功能模块进行分类，以便于管理和维护。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;以下是一个资源文件的示例：&lt;/p&gt; 
&lt;p&gt;&lt;img height="372" src="https://oscimg.oschina.net/oscnet/up-ebc71fa516d2417861fc744ced46f629d0f.png" width="958" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.资源加载和使用&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在应用中，通过代码加载相应语言的资源文件。可以使用鸿蒙系统提供的资源管理器来获取资源文件，并根据当前设置的语言环境选择合适的资源。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="200" src="https://oscimg.oschina.net/oscnet/up-f08cf8aa8512c93847d7bbea25e682d373b.png" width="1018" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）使用国际化 API 处理文本格式化、排序、方向和日期时间显示&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.文本格式化&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;使用国际化 API 对数字、货币、日期等进行格式化，以适应不同语言的显示习惯。例如，可以使用&amp;nbsp;Intl.NumberFormat&amp;nbsp;和&amp;nbsp;Intl.DateTimeFormat&amp;nbsp;来格式化数字和日期。&lt;/p&gt; 
&lt;p&gt;&lt;img height="292" src="https://oscimg.oschina.net/oscnet/up-037f6a01ec047c8e338be8e2520ad797613.png" width="832" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.文本排序&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;根据不同语言的排序规则对用户发布的内容进行排序。例如，对于中文可以按照拼音顺序进行排序，对于英文可以按照字母顺序进行排序。在排序时，可以使用字符串的&amp;nbsp;localeCompare&amp;nbsp;方法结合当前语言环境进行排序。&lt;/p&gt; 
&lt;p&gt;&lt;img height="320" src="https://oscimg.oschina.net/oscnet/up-9b619a7b4fdfc33d2f21b7aad7aefdb9dcc.png" width="776" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.方向处理&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;对于从右到左（RTL）语言，如阿拉伯语、希伯来语等，使用国际化 API 进行方向处理，确保界面布局和文本显示符合 RTL 语言习惯。可以通过设置文本的&amp;nbsp;textDirection&amp;nbsp;属性来控制文本的显示方向。&lt;/p&gt; 
&lt;p&gt;&lt;img height="158" src="https://oscimg.oschina.net/oscnet/up-ad73512d88044f160cf3c6032f1cc96881b.png" width="812" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;4.日期时间显示&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;根据不同语言和地区的习惯显示日期和时间。可以使用国际化 API 的&amp;nbsp;DateTimeFormat&amp;nbsp;来格式化日期和时间，并根据用户的语言设置选择合适的格式。&lt;/p&gt; 
&lt;p&gt;&lt;img height="150" src="https://oscimg.oschina.net/oscnet/up-5bce30ae5f68aacc705700b3acefaa5ebb1.png" width="830" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（三）设计支持多语言输入和显示的聊天界面&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.输入框处理&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;为聊天输入框提供多语言输入支持，可以使用鸿蒙系统的输入法框架来实现。确保输入框能够正确处理不同语言的字符输入，并在输入过程中提供合适的自动完成和纠错功能。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;同时，对于输入的文本进行实时翻译或显示翻译提示，以便用户在不同语言之间进行交流。可以使用第三方翻译 API 或集成翻译功能到应用中。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.消息显示&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在聊天界面中，正确显示不同语言的消息内容。可以根据消息的语言设置自动调整文本的显示方向和字体大小，以确保消息能够清晰可读。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;对于包含表情符号的消息，确保表情符号能够在不同语言环境下正确显示，并提供相应的描述和翻译。可以使用 Unicode 表情符号集，并为每个表情符号提供多语言的描述资源。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.滚动和分页&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;处理聊天界面的滚动和分页功能，确保在显示大量消息时能够流畅滚动，并在加载更多消息时进行正确的分页处理。考虑不同语言的文本长度差异，可能需要动态调整分页的大小和位置，以确保用户能够完整地查看消息历史。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（四）处理文化差异，例如问候语、表情符号的使用等&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问候语和礼仪&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;根据不同语言和文化的习惯，提供合适的问候语和礼仪表达方式。例如，在英语中可以使用 「Hello」、「Hi」 等问候语，而在中文中可以使用 「你好」、「您好」 等。在应用中，可以根据用户的语言设置自动选择合适的问候语，并在用户交互过程中遵循相应的礼仪规范。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;同时，注意不同文化中对于称呼、礼貌用语等的差异，确保应用在不同文化环境下都能够提供恰当的社交体验。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.表情符号的文化差异&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;表情符号在不同文化中可能有不同的含义和使用习惯。在设计社交应用时，要考虑到这些差异，并为不同语言和文化提供相应的表情符号解释和翻译。例如，在某些文化中，某个表情符号可能具有特定的负面含义，而在其他文化中则可能是中性或积极的。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;可以为表情符号提供多语言的描述资源，并在用户使用表情符号时显示相应的描述和翻译，以避免误解。同时，根据不同文化的喜好和习惯，提供一些特定的表情符号集合或推荐，以增强用户的社交体验。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.颜色和图标文化差异&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;颜色和图标在不同文化中也可能有不同的象征意义。在应用的界面设计中，要注意选择合适的颜色和图标，以避免因文化差异而引起的误解或不适。例如，在某些文化中，红色可能象征着吉祥和幸福，而在其他文化中可能与危险或警告相关。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;可以进行用户调研和文化研究，了解不同文化对于颜色和图标的喜好和禁忌，以便在应用设计中做出合适的选择。同时，为不同文化提供可定制的界面主题和图标集，让用户可以根据自己的文化背景和喜好进行选择。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（五）进行本地化测试，确保应用在不同语言和文化环境下正常运行&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.测试计划&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;制定详细的本地化测试计划，包括测试的语言范围、文化差异、功能模块等。确定测试的重点和优先级，确保在有限的时间和资源下能够覆盖关键的本地化问题。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;例如，可以先测试主要的语言版本和常见的文化差异，然后逐步扩展到其他语言和文化。同时，根据用户反馈和市场需求，不断调整测试计划，以确保应用能够满足不同用户的需求。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.功能测试&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;针对应用的各个功能模块，在不同语言和文化环境下进行功能测试。确保用户能够正常注册、登录、发布消息、添加好友、进行聊天等操作，并且这些操作在不同语言和文化环境下都能够正确执行。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;可以使用自动化测试工具和脚本，模拟不同语言和文化环境下的用户操作，以提高测试效率和覆盖范围。同时，进行手动测试，以确保应用在实际使用场景下的稳定性和可靠性。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.界面测试&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;检查应用的界面在不同语言和文化环境下的显示效果。确保界面元素的布局合理、文本清晰可读、图标和颜色符合文化习惯。同时，检查界面的响应速度和交互效果，确保用户在不同语言和文化环境下都能够流畅地使用应用。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;可以使用不同分辨率和尺寸的设备进行测试，以确保应用在不同设备上的显示效果一致。同时，进行用户体验测试，邀请不同语言和文化背景的用户进行试用，收集他们的反馈和建议，以不断改进应用的界面设计。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;4.文化适应性测试&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;评估应用在不同文化环境下的适应性。检查问候语、表情符号、颜色和图标等是否符合当地的文化习惯，以及应用的功能和操作是否符合当地的社交规范。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;可以进行文化调研和用户访谈，了解不同文化背景下的用户需求和期望，以便在应用设计中做出相应的调整。同时，进行跨文化比较测试，邀请来自不同文化背景的用户进行对比测试，以发现文化差异对应用使用的影响，并进行相应的优化。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;三、架构设计&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）使用分层架构，将应用分为数据层、业务逻辑层和表示层&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.数据层&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;负责数据的存储和管理，包括用户信息、消息内容、好友关系等。可以使用数据库来存储数据，并提供相应的数据访问接口。例如，可以使用 SQLite 数据库或其他数据库管理系统来存储数据，并使用 SQL 查询语言或对象关系映射（ORM）框架来进行数据访问。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;同时，数据层还可以负责与外部数据源进行数据交换，如通过 RESTful API 从服务器获取数据或向服务器发送数据。在数据交换过程中，要确保数据的格式和编码符合多语言和文化的要求，以便在不同系统之间进行正确的数据传输。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.业务逻辑层&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;负责处理应用的业务逻辑，包括用户注册、登录、消息发送、好友管理等。业务逻辑层可以调用数据层的接口来获取和存储数据，并进行相应的业务处理。例如，在用户注册过程中，业务逻辑层可以验证用户输入的信息是否合法，并将用户信息存储到数据库中。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;同时，业务逻辑层还可以负责处理多语言和文化相关的业务逻辑，如根据用户的语言设置选择合适的资源文件、进行文本翻译、处理文化差异等。在处理这些业务逻辑时，要确保应用的功能在不同语言和文化环境下都能够正确执行。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.表示层&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;负责应用的界面显示和用户交互，包括用户界面的设计、布局、动画效果等。表示层可以调用业务逻辑层的接口来获取数据和执行业务操作，并将结果显示给用户。例如，在聊天界面中，表示层可以调用业务逻辑层的接口来获取消息列表，并将消息内容显示在界面上。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;同时，表示层还可以负责处理多语言和文化相关的界面显示问题，如根据用户的语言设置选择合适的资源文件、调整界面布局和字体大小、显示翻译提示等。在处理这些界面显示问题时，要确保应用的界面在不同语言和文化环境下都能够清晰可读、美观大方。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）使用 RESTful API 进行数据交换，支持多语言数据传输&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.API 设计&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;设计 RESTful API 来实现应用与服务器之间的数据交换。API 应该具有良好的可扩展性和可维护性，能够支持不同类型的数据传输和业务操作。例如，可以设计用户注册、登录、消息发送、好友管理等 API 接口，并使用 HTTP 方法（如 GET、POST、PUT、DELETE）来表示不同的操作。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在 API 设计过程中，要考虑多语言数据传输的问题。可以使用 JSON 格式来传输数据，并在 JSON 中包含语言标识字段，以便服务器能够根据语言标识选择合适的资源文件进行响应。例如，可以在 JSON 中添加一个 「language」 字段，用于表示请求或响应的语言环境。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.数据编码和格式&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在数据传输过程中，要确保数据的编码和格式符合多语言和文化的要求。可以使用 UTF-8 编码来传输文本数据，以支持不同语言的字符集。同时，可以使用国际化日期和时间格式（如 ISO 8601）来传输日期和时间数据，以便在不同系统之间进行正确的数据解析。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;对于包含多语言内容的数据，可以使用特定的格式来表示，如使用 JSON 对象或数组来表示不同语言的文本内容，并在对象或数组中添加语言标识字段。例如，可以使用以下格式来表示多语言的消息内容：&lt;/p&gt; 
&lt;p&gt;&lt;img height="288" src="https://oscimg.oschina.net/oscnet/up-911aa0cf938d2711f818bf4c791c4895c31.png" width="774" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.错误处理和响应&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在 API 响应中，要正确处理错误情况，并提供清晰的错误信息。对于多语言应用，可以使用多语言的错误消息来提高用户体验。例如，可以在 API 响应中添加一个 「error_message」 字段，并根据用户的语言设置选择合适的错误消息进行响应。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;同时，要确保 API 的响应格式和内容在不同语言和文化环境下都能够被正确解析和处理。可以使用标准化的响应格式，如 JSON 或 XML，并在响应中包含必要的元数据信息，如语言标识、数据类型等。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;&lt;span&gt;（三）使用数据库进行数据存储，支持多语言数据存储和检索&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.数据库设计&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;设计数据库来存储应用的数据，包括用户信息、消息内容、好友关系等。在数据库设计过程中，要考虑多语言数据存储的问题。可以使用支持多语言的数据库管理系统，如 MySQL、PostgreSQL 等，并在数据库中添加语言标识字段，以便在存储和检索数据时能够根据语言标识选择合适的资源文件。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;例如，可以在用户表中添加一个 「language」 字段，用于表示用户的语言设置。在存储用户信息时，可以根据用户的语言设置选择合适的资源文件进行存储，以便在不同语言环境下能够正确显示用户信息。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.数据存储和检索&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在存储和检索数据时，要确保数据的编码和格式符合多语言和文化的要求。可以使用 UTF-8 编码来存储文本数据，以支持不同语言的字符集。同时，可以使用国际化日期和时间格式来存储日期和时间数据，以便在不同系统之间进行正确的数据解析。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;对于包含多语言内容的数据，可以使用特定的存储方式来提高检索效率。例如，可以使用 JSON 对象或数组来存储不同语言的文本内容，并在数据库中创建相应的索引，以便在检索数据时能够快速找到符合条件的记录。同时，可以使用数据库的全文搜索功能来支持多语言文本的检索，以便用户能够快速找到所需的信息。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.数据备份和恢复&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;定期备份数据库中的数据，以防止数据丢失。在备份数据时，要确保备份文件的编码和格式符合多语言和文化的要求，以便在恢复数据时能够正确解析和处理。同时，可以使用数据库管理系统提供的备份工具或第三方备份软件来进行数据备份，并将备份文件存储在安全的位置。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在恢复数据时，要确保恢复过程的正确性和完整性。可以使用数据库管理系统提供的恢复工具或第三方恢复软件来进行数据恢复，并在恢复过程中进行数据验证和修复，以确保恢复后的数据能够正常使用。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;四、总结&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;通过以上技术要点和架构设计，我们可以开发出一个功能强大、易于维护和扩展的多语言社交应用。在开发过程中，要注重资源管理、国际化 API 的使用、界面设计、文化差异处理和本地化测试，以确保应用在不同语言和文化环境下都能够为用户提供优质的社交体验。同时，要不断优化应用的性能和用户体验，根据用户反馈和市场需求进行持续改进，以提高应用的竞争力和用户满意度。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;以下是一个总结表格，展示多语言社交应用的关键技术和架构设计：&lt;/p&gt; 
&lt;p&gt;&lt;img height="840" src="https://oscimg.oschina.net/oscnet/up-e79241206f47afccd394b65460f6720eba0.png" width="1652" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;（转载自 51CTO，作者：SameX）&lt;/p&gt; 
&lt;p&gt;&lt;img height="360" src="https://oscimg.oschina.net/oscnet/up-ae8922cb430aa6f0981e788adf9dece07c8.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372437</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372437</guid>
      <pubDate>Tue, 16 Sep 2025 01:55:46 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>鸿蒙 NEXT 应用国际化：日历与历法处理</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;踏入鸿蒙世界的敲门砖，标志着您在技术征途上的全新起点，提升就业竞争力，获得行业认可，点亮职业成长先机，快人一步抢占未来应用开发赛道！&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Ftraining%2Fdev-cert-detail%2F101666948302721398%3Fha_source%3Dhmosclass-sifou%26ha_sourceId%3D89000235" target="_blank"&gt;https://developer.huawei.com/consumer/cn/training/dev-cert-detail/101666948302721398?ha_source=hmosclass-sifou&amp;amp;ha_sourceId=89000235&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;本文旨在深入探讨华为鸿蒙 HarmonyOS NEXT 系统（截至目前 API12）在应用国际化中日历与历法处理方面的技术细节，基于实际开发实践进行总结。主要作为技术分享与交流载体，难免错漏，欢迎各位同仁提出宝贵意见和问题，以便共同进步。本文为原创内容，任何形式的转载必须注明出处及原作者。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在全球化的应用开发中，正确处理日历与历法是满足不同地区用户需求的重要环节。鸿蒙 NEXT 系统提供了强大的日历与历法处理功能，使应用能够适应多种文化和地区的时间管理习惯。本文将详细介绍鸿蒙 NEXT 应用支持的日历类型、如何设置和应用不同日历，以及处理不同历法下时间与日期的方法，并探讨常见问题及解决方案，抛砖引个玉。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;一、鸿蒙 NEXT 应用支持的日历类型&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）公历（Gregory）&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.特点与应用范围&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;公历是目前世界上通用的历法，广泛应用于全球大部分国家和地区。它以耶稣诞生之年作为元年，平年有 365 天，闰年有 366 天，闰年的判断规则为能被 4 整除但不能被 100 整除的年份为闰年，此外能被 400 整除的年份也是闰年。公历的月份和日期设置较为规则，一年分为 12 个月，每月天数相对固定（除 2 月外）。在商务、科学、日常生活等众多领域，公历是主要的时间计量标准。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.在鸿蒙 NEXT 应用中的表示与使用&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在鸿蒙应用中，当获取系统默认日历或未指定特定日历时，通常使用公历进行时间和日期的处理。例如，在显示当前日期、安排日程提醒等功能中，默认使用公历格式。开发者可以通过&amp;nbsp;i18n.getCalendar()&amp;nbsp;方法获取公历日历对象，然后使用该对象进行日期设置、获取等操作。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）农历（Chinese）&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.特点与应用范围&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;农历是中国传统历法，也在东亚一些国家和地区（如韩国、越南等）有一定的使用。农历是一种阴阳合历，它以月相变化周期为一个月，一年分为 12 个月或 13 个月（闰月）。农历中的年份用干支纪年法表示，一个干支周期为 60 年。农历与农业生产、传统节日（如春节、中秋节等）密切相关，在文化传承和民俗活动中具有重要地位。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.在鸿蒙 NEXT 应用中的表示与使用&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;鸿蒙系统提供了对农历的支持，开发者可以通过指定「chinese」作为日历类型来获取农历日历对象。例如，在开发与中国传统文化相关的应用（如农历日历应用、节日提醒应用等）时，可以使用农历日历对象获取农历日期、节气等信息。可以通过农历日历对象的方法获取农历年份（干支纪年）、月份、日期等，方便应用展示农历相关信息。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（三）其他日历类型&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.佛历（Buddhist）&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;佛历是部分佛教国家和地区使用的历法，以释迦牟尼涅槃后一年为元年。它与公历有一定的换算关系，在一些佛教文化相关的应用（如寺庙活动安排、佛教节日提醒等）中可能会用到。开发者可以通过指定「buddhist」获取佛历日历对象，进行相应的时间和日期处理。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.伊斯兰历（Islamic_civil、Islamic_tbla、Islamic_umalqu 等）&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;伊斯兰历是伊斯兰教国家和地区使用的历法，有多种类型，如希吉来历等。伊斯兰历以月亮的阴晴圆缺为计算单位，一年约为 354 天或 355 天，与公历有较大差异。在涉及穆斯林宗教活动、斋月计算等应用场景中，需要使用伊斯兰历。开发者可以根据具体需求选择合适的伊斯兰历类型（如「islamic_civil」等）获取日历对象，进行相关时间处理。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.印度历（Indian）、日本历（Japanese）、波斯历（Persian）等&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;这些历法在各自的国家和地区有特定的应用场景。例如，印度历在印度的宗教仪式、节日安排等方面有重要作用；日本历在日本国内一些传统活动和文化习俗中仍有使用；波斯历在伊朗等国家有一定的应用。开发者在开发针对这些地区或与这些文化相关的应用时，可能需要使用相应的日历类型来准确处理时间和日期信息。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;二、设置和应用不同日历&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）获取日历对象&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.根据指定类型获取&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;开发者可以使用&amp;nbsp;i18n.getCalendar()&amp;nbsp;方法，传入相应的日历类型标识符（如「zh - Hans」表示语言和地区，「gregory」表示公历）来获取特定类型的日历对象。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="168" src="https://oscimg.oschina.net/oscnet/up-3fa85a6fcc3f2be162efe1c2e5214ef6815.png" width="1008" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.根据系统默认获取&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;如果不指定日历类型，直接调用&amp;nbsp;i18n.getCalendar()&amp;nbsp;方法将获取系统默认的日历对象，通常为用户设备设置的地区所对应的常用日历类型（如在大多数地区为公历）。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）设置日历属性&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.日期设置&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;使用日历对象的&amp;nbsp;setTime()&amp;nbsp;或&amp;nbsp;set()&amp;nbsp;方法可以设置日历的日期。setTime()&amp;nbsp;方法可以接受一个&amp;nbsp;Date 对象或时间戳作为参数，用于精确设置日历的时间点。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="144" src="https://oscimg.oschina.net/oscnet/up-4b113937f3c50e153e3fc3947239f65734d.png" width="1084" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;set()&amp;nbsp;方法则可以分别设置年、月、日、时、分、秒等具体的日期和时间分量。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="62" src="https://oscimg.oschina.net/oscnet/up-a5c1df0d2709dded640b722b7973885eb3b.png" width="1036" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.时区设置&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;通过&amp;nbsp;setTimeZone()&amp;nbsp;方法可以设置日历对象的时区。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="94" src="https://oscimg.oschina.net/oscnet/up-0be3e154bc09417bde70b3b13e000f6497c.png" width="830" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;时区设置对于处理跨时区的时间计算和显示非常重要，确保应用在不同地区能够正确显示与当地时区相符的时间。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.其他属性设置&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;还可以设置一周的起始日、一年中第一周的最小天数等属性。例如，使用&amp;nbsp;setFirstDayOfWeek()&amp;nbsp;方法设置一周的起始日（如设置为星期一：calendar.setFirstDayOfWeek(1)），使用&amp;nbsp;setMinimalDaysInFirstWeek()&amp;nbsp;方法设置一年中第一周的最小天数（如设置为 3 天：calendar.setMinimalDaysInFirstWeek(3)）。这些设置可以根据不同地区的习惯和应用需求进行调整。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（三）使用日历对象获取信息&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.获取日期和时间信息&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;可以通过日历对象获取年、月、日、时、分、秒等具体的日期和时间值。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="220" src="https://oscimg.oschina.net/oscnet/up-425a54deb8c9f9c1d72f0cec188955fbfe4.png" width="1076" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.获取时区信息&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;使用&amp;nbsp;getTimeZone()&amp;nbsp;方法获取日历对象当前的时区设置。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="60" src="https://oscimg.oschina.net/oscnet/up-cdf03a21e9e0f7c14432e7ce56c76a6ef76.png" width="1020" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.获取本地化名称和其他属性&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;可以获取日历的本地化名称，以便在应用中显示给用户。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="54" src="https://oscimg.oschina.net/oscnet/up-8e5b16d826cbf1a35119651b7a8f07e4550.png" width="1220" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;还可以获取日历对象的一周起始日（getFirstDayOfWeek()）、一年中第一周的最小天数（getMinimalDaysInFirstWeek()）等属性，用于应用的相关逻辑处理。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;三、处理不同历法下的时间与日期&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）日期转换&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.公历与农历转换&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在鸿蒙应用中，可以通过获取公历和农历日历对象，并设置相应的日期，实现公历与农历之间的转换。例如，将公历日期转换为农历日期：&lt;/p&gt; 
&lt;p&gt;&lt;img height="256" src="https://oscimg.oschina.net/oscnet/up-30e0b5b81fa3550f7f1450a1dccd53efce0.png" width="1130" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;反之，也可以将农历日期转换为公历日期，只需将上述步骤中的设置顺序颠倒即可。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.其他历法之间的转换（如有需要）&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;对于其他历法之间的转换，原理类似。首先获取源历法和目标历法的日历对象，然后通过设置相同的时间点（可以使用时间戳或日期对象），在两个日历对象之间进行转换，并获取相应的日期和时间信息。但需要注意不同历法的特点和计算规则，确保转换的准确性。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）时间计算与比较&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.同一历法下的时间计算&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在同一历法下，可以使用日历对象的方法进行时间的加减计算。例如，在公历日历中计算当前日期加上 3 天的日期：&lt;/p&gt; 
&lt;p&gt;&lt;img height="264" src="https://oscimg.oschina.net/oscnet/up-f5d062b5a086cb14d181bf7f1ce2f459c7c.png" width="806" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;可以进行年、月、日、时、分、秒等不同时间单位的计算，根据应用需求灵活运用。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.不同历法下的时间比较&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;当需要比较不同历法下的时间时，可以先将它们转换为同一历法（通常为公历），然后再进行比较。例如，比较一个农历日期和一个公历日期的先后顺序：&lt;img height="354" src="https://oscimg.oschina.net/oscnet/up-dfb8d84fc4f0e9b4122fa16636c2fbaec61.png" width="968" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（三）处理特殊时间点（如闰年、闰月）&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.闰年判断与处理&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在公历中，判断闰年可以使用日历对象的方法。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="242" src="https://oscimg.oschina.net/oscnet/up-3c6a191bda85385b68d341c8e7b4448a867.png" width="900" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在应用中，对于涉及闰年的时间计算（如计算一年的天数、每月的天数等），需要根据闰年规则进行特殊处理，以确保计算结果的准确性。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.闰月处理（农历）&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;对于农历中的闰月，在获取农历日期时需要注意。例如，获取农历月份时，需要判断是否为闰月以及闰月的情况。可以通过农历日历对象的方法来获取闰月相关信息，如判断当前年份是否有闰月（hasLeapMonth()），获取闰月的月份（getLeapMonth()）等。在显示农历日期或进行与农历月份相关的计算时，根据闰月情况进行正确处理，避免出现错误。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;四、常见时间与日期处理问题及解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）时区相关问题&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问题描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;当应用在不同时区运行时，可能出现时间显示不正确、日程安排时间混乱等问题。例如，用户在一个时区设置的日程提醒，在另一个时区查看时显示的时间与预期不符；或者在跨时区的服务器通信中，时间数据的传输和处理出现错误。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;始终使用正确的时区设置。在获取和显示时间时，确保日历对象的时区设置与用户所在时区一致。可以通过获取系统时区或让用户手动选择时区来设置日历对象的时区。在存储和传输时间数据时，优先使用 0 时区标准时间（UTC 或 GMT），在显示给用户时再根据用户所在时区进行转换。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="318" src="https://oscimg.oschina.net/oscnet/up-03279e95c0577c321e9a2559e0986323062.png" width="1014" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）日期格式显示问题&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问题描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;不同地区对日期格式有不同的偏好，应用可能无法正确显示符合当地习惯的日期格式。例如，在某些地区习惯使用「DD/MM/YYYY」格式，而应用默认显示为「YYYY - MM - DD」格式，导致用户理解困难。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;使用&amp;nbsp;DateTimeFormat&amp;nbsp;类来格式化日期显示。根据用户所在地区的区域标识，选择合适的日期格式样式（如&amp;nbsp;dateStyle&amp;nbsp;设置为「full」「long」「medium」「short」等）进行格式化。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="196" src="https://oscimg.oschina.net/oscnet/up-8f6e2e0697a97e105e733f555d52dbb1b04.png" width="1230" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;可以根据用户的语言和地区设置动态调整日期格式，提供良好的用户体验。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（三）历法转换准确性问题&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问题描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在进行不同历法之间的转换时，可能出现转换结果不准确的情况，例如农历日期转换为公历日期后与实际情况有偏差，或者在处理复杂的历法规则（如伊斯兰历的特殊计算方式）时出现错误。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;确保对各种历法的计算规则有深入的理解，并使用可靠的算法进行转换。鸿蒙系统提供的日历处理功能已经经过了一定的测试和优化，但在复杂情况下，开发者可以参考相关的历法标准和算法文档，进行额外的验证和优化。在处理历法转换时，进行充分的测试，包括边界情况（如极端日期、特殊年份等）的测试，确保转换结果的准确性。例如，对于农历与公历的转换，可以与权威的农历算法库或在线转换工具进行对比测试，验证转换结果的正确性。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（四）时间计算边界问题&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问题描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在进行时间计算（如加减天数、月数等）时，可能遇到边界问题，如计算结果超出了有效范围（如月份超过 12 或日期超过当月最大天数），导致程序出现错误或异常行为。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在进行时间计算前，先进行边界检查和处理。例如，在增加月份时，检查计算后的月份是否超过 12，如果超过则进行相应的年份进位处理；在增加天数时，检查计算后的日期是否超过当月最大天数，如果超过则进行月份进位和日期调整。可以使用日历对象提供的方法获取月份的最大天数（如&amp;nbsp;getActualMaximum()&amp;nbsp;方法），辅助进行边界处理。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="390" src="https://oscimg.oschina.net/oscnet/up-cbd9d0cee06ec652f7e0b8e26588f578f7b.png" width="884" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（五）夏令时问题（如果涉及相关历法）&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问题描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在一些使用夏令时的地区，时间会在特定时间段内进行调整，这可能导致应用在处理时间时出现错误。例如，在夏令时开始或结束时，时间突然跳跃，应用如果没有正确处理，可能会出现日程提醒时间错误、时间显示异常等问题。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;鸿蒙系统会自动处理夏令时相关的时间调整，开发者需要确保在获取和显示时间时，使用的是系统正确处理后的时间。在存储和传输时间数据时，同样可以使用 0 时区标准时间（UTC 或 GMT），以避免夏令时带来的影响。如果应用需要在界面上显示是否处于夏令时状态，可以通过日历对象获取相关信息（如某些日历对象可能提供判断当前是否处于夏令时的方法），并告知用户。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="288" src="https://oscimg.oschina.net/oscnet/up-f55cbf4166f46740da796e1956ff888b5da.png" width="872" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（六）本地化日期和时间显示问题&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问题描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;除了日期格式外，不同地区对于日期和时间的本地化显示还可能包括其他元素，如工作日名称（周一至周日在不同语言中的表示）、上午/下午标识（12 小时制下）等。应用可能无法正确显示这些本地化元素，或者显示的内容不符合当地习惯。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;使用&amp;nbsp;DateTimeFormat&amp;nbsp;类时，通过设置相关参数来控制本地化元素的显示。例如，设置&amp;nbsp;weekday&amp;nbsp;参数来显示正确的工作日名称（如「long」表示完整名称，「short」表示缩写名称），在 12 小时制下设置&amp;nbsp;hourCycle&amp;nbsp;参数来显示正确的上午/下午标识（如「h11」或「h12」）。例如：&lt;/p&gt; 
&lt;p&gt;&lt;img height="234" src="https://oscimg.oschina.net/oscnet/up-3dba7641866e37df1d1db232a47b7fd10e6.png" width="1360" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（七）时间和日期的兼容性问题（与旧版本或其他系统）&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.问题描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;当应用需要与旧版本的鸿蒙系统或其他操作系统进行数据交互时，可能会遇到时间和日期格式不兼容的问题。例如，旧版本系统可能使用不同的时间戳表示方式，或者对日期格式的支持有限。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在数据传输和存储时，尽量使用标准化的时间格式，如 0 时区标准时间（UTC 或 GMT）的时间戳。在与旧版本系统交互时，进行必要的格式转换和兼容性处理。可以编写专门的转换函数，根据不同系统的特点进行时间和日期格式的转换。例如，将旧版本系统中的特定日期格式转换为鸿蒙 NEXT 系统能够正确处理的格式后再进行后续操作。同时，在应用的更新和迭代过程中，考虑向后兼容性，确保在升级系统后，旧版本用户的数据能够正常使用。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;通过对这些常见问题的深入理解和有效解决，开发者能够更好地利用鸿蒙 NEXT 系统的日历与历法处理功能，打造出更加稳定、准确、符合用户需求的国际化应用。在处理时间和日期相关问题时，注重细节、充分测试、参考相关标准和最佳实践，是确保应用在全球范围内正常运行的关键。希望本文能够为鸿蒙系统同路人在日历与历法处理方面提供有价值的参考和指导，助力应用在国际化道路上顺利前行。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;（转载自 51CTO，作者：SameX）&lt;/p&gt; 
&lt;p&gt;&lt;img height="360" src="https://oscimg.oschina.net/oscnet/up-bcc8d6f886dddba7829a0410377125d7e4e.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372434</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372434</guid>
      <pubDate>Tue, 16 Sep 2025 01:47:46 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>HarmonyOS NEXT 智能家居数据同步与管理方案：基于 WLAN 和 BLE 的多设备连接</title>
      <description/>
      <link>https://www.oschina.net/news/372431</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372431</guid>
      <pubDate>Tue, 16 Sep 2025 01:45:46 GMT</pubDate>
    </item>
    <item>
      <title>鸿蒙 NEXT 社交应用中的安全登录与密码管理实战</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;踏入鸿蒙世界的敲门砖，标志着您在技术征途上的全新起点，提升就业竞争力，获得行业认可，点亮职业成长先机，快人一步抢占未来应用开发赛道！&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Ftraining%2Fdev-cert-detail%2F101666948302721398%3Fha_source%3Dhmosclass-sifou%26ha_sourceId%3D89000235" target="_blank"&gt;https://developer.huawei.com/consumer/cn/training/dev-cert-detail/101666948302721398?ha_source=hmosclass-sifou&amp;amp;ha_sourceId=89000235&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;本文旨在深入探讨华为鸿蒙 HarmonyOS NEXT 系统（截止目前 API12）在开发多语言电商平台方面的技术细节，基于实际开发实践进行总结。主要作为技术分享与交流载体，难免错漏，欢迎各位同仁提出宝贵意见和问题，以便共同进步。本文为原创内容，任何形式的转载必须注明出处及原作者。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在社交应用的开发中，安全登录与密码管理是至关重要的环节，直接关系到用户的隐私和数据安全。本文将以一个鸿蒙 NEXT&amp;nbsp;社交应用为例，详细阐述如何实现安全登录与密码管理功能，涵盖从项目背景到优化测试的全过程。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;一、项目背景与目标&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）社交应用需求分析&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;社交应用旨在为用户提供一个便捷的社交平台，用户可以在其中创建个人资料、添加好友、发布动态、进行聊天等操作。为了实现这些功能，用户需要进行注册和登录。注册时，用户需要提供个人信息，如用户名、密码、邮箱或手机号码等；登录时，用户需要输入正确的账号和密码才能访问其个人资料和社交功能。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）安全登录与密码管理的重要性&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在社交应用中，用户的个人信息和社交数据非常敏感，如聊天记录、照片、好友列表等。如果登录和密码管理环节存在安全 xx，可能导致用户账号被盗用，个人信息泄露，甚至遭受诈骗等风险。因此，确保安全登录和密码管理是保护用户权益和维护应用声誉的关键。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;二、架构设计与技术选型&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）基于 Clean Architecture 的架构设计&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.表现层（Presentation Layer）&lt;/strong&gt;&lt;br&gt; 负责与用户进行交互，展示登录界面、注册界面、主界面等用户视图。使用 ArkUI 组件构建界面，确保界面的美观性和易用性。例如，在登录界面中，使用 Text 组件显示标题和提示信息，TextInput 组件用于接收用户输入的账号和密码，Button 组件用于触发登录和注册操作。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.应用层（Application Layer）&lt;/strong&gt;&lt;br&gt; 作为表现层和领域层之间的桥梁，协调业务逻辑的执行。处理用户的登录、注册请求，调用领域层的相应方法进行业务处理，并将处理结果返回给表现层。例如，当用户点击登录按钮时，应用层负责收集用户输入的账号和密码，验证输入格式，然后调用领域层的登录方法进行实际的登录验证。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.领域层（Domain Layer）&lt;/strong&gt;&lt;br&gt; 包含社交应用的核心业务逻辑，如用户认证、密码管理、好友关系处理等。在密码管理方面，实现密码的加密、验证、保存和更新逻辑。领域层不依赖于具体的技术实现，只关注业务规则的实现，确保业务逻辑的独立性和可测试性。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;4.数据层（Data Layer）&lt;/strong&gt;&lt;br&gt; 负责数据的存储和获取，与数据库、网络服务等进行交互。在本案例中，数据层负责存储用户的账号密码、个人资料、好友列表等数据。使用鸿蒙 NEXT&amp;nbsp;的安全存储 API 对密码等敏感数据进行加密存储，确保数据的安全性。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）选择鸿蒙 NEXT&amp;nbsp;安全功能组件&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.密码自动填充服务&lt;/strong&gt;&lt;br&gt; 利用密码自动填充服务，为用户提供便捷的登录体验。在登录和注册界面，根据输入框的类型（USER_NAME、PASSWORD、NEW_PASSWORD）自动识别并填充已保存的账号密码，同时确保填充过程的安全性，通过系统的身份认证机制防止非法填充。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.应用加密&lt;/strong&gt;&lt;br&gt; 应用加密特性用于保护应用代码和数据的安全。在应用上架时选择加密，确保应用在设备上安装和运行时，代码文件和数据文件处于加密状态，防止应用被反编译和数据被窃取。解密密钥存储在系统的可信执行环境（TEE）中，增加了密钥的安全性。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;三、登录模块实现&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）界面设计与布局（使用 ArkUI 组件）&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.登录界面整体布局采用 Column 组件垂直排列元素。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;顶部使用 Text 组件显示应用的 logo 和应用名称，吸引用户注意力并增强品牌识别度。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;中间部分包含两个 TextInput 组件，分别用于输入用户名和 PWD。设置 placeholder 属性为提示信息，如「请输入用户名」和「请输入密码」。为了提高用户体验，密码输入框设置 showPasswordIcon 属性为 true，显示密码可见性切换图标。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;底部使用 Button 组件作为登录按钮，设置按钮的文本为「登录」，并添加适当的样式，如背景颜色、边框半径等，使其在界面中突出显示。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在登录按钮下方，添加一个 Text 组件用于显示登录错误信息，初始时隐藏，当登录失败时显示相应的错误提示。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）集成密码自动填充服务&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.在用户名和密码输入框的属性设置中，确保 type 属性分别为 InputType.USER_NAME 和 InputType.PASSWORD，并且 enableAutoFill 属性为 true。这使得系统能够识别输入框并在合适的时机自动填充账号密码。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.检查输入框的点击事件，当用户首次点击输入框时，检查密码保险箱中是否保存了该应用的账号密码。如果有保存，系统自动弹出填充提示，用户选择填充后，将相应的账号密码填充到输入框中。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;3.在登录逻辑处理中，如果密码自动填充成功，直接使用填充的密码进行登录验证，无需用户再次手动输入密码，提高登录效率。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（三）处理登录逻辑与验证&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.当用户点击登录按钮时，首先获取用户名和密码输入框中的值。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.对用户名和密码进行格式验证，检查是否为空值、长度是否符合要求等。如果格式不正确，在界面上显示相应的错误提示信息，阻止登录流程继续进行。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;3.调用领域层的登录方法，将用户名和密码传递给领域层进行验证。在领域层中，使用密码自动填充服务获取密码保险箱中保存的密码（如果有），并与用户输入的密码进行比对。如果密码匹配，进一步与服务器进行通信，验证账号的有效性（例如，检查账号是否被封禁、是否存在等）。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;4.根据服务器返回的验证结果，如果登录成功，跳转到应用的主界面；如果登录失败，在界面上显示错误信息，提示用户检查账号密码并重试。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;四、注册模块实现&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）强密码生成与推荐&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.在注册界面的新密码输入框中，设置 passwordRules 属性，按照密码自动填充服务的规则指定强密码生成规则。例如，设置「begin:[upper],special:[yes],len:[maxlen:32,minlen:12]」，要求生成的强密码以大写字母开头，包含特殊字符，长度在 12 - 32 位之间。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.当用户点击新密码输入框时，系统根据指定的规则自动生成一个强密码，并在输入框下方显示推荐的强密码。用户可以选择使用推荐的密码，也可以自行输入符合要求的密码。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）密码保存与更新逻辑&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.当用户完成注册信息填写并点击注册按钮时，首先对用户名、密码等信息进行格式验证，确保信息的完整性和正确性。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.对密码进行加密处理，使用鸿蒙 NEXT&amp;nbsp;的加密 API（如 hash 函数）将密码转换为密文形式。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;3.将加密后的密码和用户名等信息保存到密码保险箱中，以便下次登录时自动填充。同时，将用户信息发送到服务器进行注册，服务器存储用户的注册信息到数据库中。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;4.在后续用户修改密码时，按照类似的流程。先验证用户身份（如通过输入旧密码进行验证），然后生成新的加密密码，更新密码保险箱中的密码记录，并将更新后的密码信息同步到服务器端的数据库中。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;五、密码加密与安全存储&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）应用加密特性的使用&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.在应用开发完成后，准备上架时，在应用市场的发布设置中选择应用加密选项。应用市场会对上架应用进行代码加密处理，确保应用在设备上安装后的代码文件（.abc 文件）处于加密状态。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.应用在启动时，系统内核会根据需要对加密的代码文件进行解密操作，解密后的明文代码仅存在于内存中，不会存储到设备上，有效防止了应用被反编译和代码被窃取。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）确保密码数据安全&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.除了应用加密外，在数据层对密码数据进行单独的加密存储。使用安全存储 API，将密码以密文形式存储到本地数据库或文件系统中。在存储密码时，结合用户的唯一标识（如用户名或用户 ID）作为加密密钥的一部分，增加密码的安全性，防止不同用户的密码被同时 XX。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.在密码传输过程中，使用安全的网络协议（如 HTTPS），确保密码在客户端和服务器之间传输时不被中间人窃取。对服务器端的密码存储也进行严格的安全措施，如采用加盐哈希等方式存储密码，增加密码 XX 的难度。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;六、优化与测试&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）性能优化策略&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.减少不必要的计算和资源消耗&lt;/strong&gt;&lt;br&gt; 在密码验证和加密过程中，选择高效的算法和数据结构，避免重复计算和内存浪费。例如，在密码验证时，使用哈希函数进行密码比对，而不是直接比较明文密码，减少计算量。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.优化界面渲染&lt;/strong&gt;&lt;br&gt; 对登录和注册界面进行优化，减少不必要的组件重绘和布局计算。例如，使用懒加载技术，只在需要时加载和显示界面元素，提高界面的初始加载速度。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.网络优化&lt;/strong&gt;&lt;br&gt; 在与服务器进行通信时，合理设置网络请求的超时时间和重试策略，减少因网络问题导致的用户等待时间。同时，优化数据传输格式，减少数据量，提高网络传输效率。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）安全测试与 xx 修复&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.功能测试&lt;/strong&gt;&lt;br&gt; 对登录、注册、密码修改等功能进行全面测试，包括正常流程和边界情况。例如，测试用户名和密码的最大长度限制、特殊字符的处理、密码自动填充的准确性等。确保每个功能在各种情况下都能正常工作，不出现异常或错误。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.安全 xx 扫描&lt;/strong&gt;&lt;br&gt; 使用专业的安全扫描工具对应用进行扫描，检查是否存在常见的安全 xx，如 SQL XX、跨站脚本 XX（XSS）、缓冲区溢出等。及时修复扫描发现的 xx，确保应用的安全性。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.模拟 XX 测试&lt;/strong&gt;&lt;br&gt; 模拟各种 XX 场景，如密码暴力 XX、中间人 XX、恶意软件注入等，测试应用的安全防护机制是否有效。例如，使用暴力 XX 工具尝试登录不同账号，检查应用是否能够检测并阻止 XX，如限制密码尝试次数、锁定账号等。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;4.权限测试&lt;/strong&gt;&lt;br&gt; 检查应用在获取系统权限时是否合理，是否存在过度获取权限的情况。确保密码管理相关功能在获取必要权限的同时，不会对用户隐私和设备安全造成威胁。例如，检查应用是否只在必要时获取读取剪贴板权限，并且在使用后及时释放权限。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;通过以上实战案例，我们展示了如何在鸿蒙 NEXT&amp;nbsp;社交应用中实现安全登录与密码管理功能。从架构设计到功能实现，再到优化测试，每个环节都需要严格遵循安全规范，确保用户的密码和个人信息得到充分保护，同时提供良好的用户体验。在实际开发中，我们可以根据具体需求进一步扩展和完善这些功能，以满足社交应用日益增长的安全和用户体验需求。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;（转载自 51CTO，作者：SameX）&lt;/p&gt; 
&lt;p&gt;&lt;img height="360" src="https://oscimg.oschina.net/oscnet/up-41f24d517b9f9f9b1f75daa41f0021f5081.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372430</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372430</guid>
      <pubDate>Tue, 16 Sep 2025 01:43:46 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>构建基于 HarmonyOS NEXT 的分布式工业监控系统</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;踏入鸿蒙世界的敲门砖，标志着您在技术征途上的全新起点，提升就业竞争力，获得行业认可，点亮职业成长先机，快人一步抢占未来应用开发赛道！&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Ftraining%2Fdev-cert-detail%2F101666948302721398%3Fha_source%3Dhmosclass-sifou%26ha_sourceId%3D89000235" target="_blank"&gt;https://developer.huawei.com/consumer/cn/training/dev-cert-detail/101666948302721398?ha_source=hmosclass-sifou&amp;amp;ha_sourceId=89000235&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;本文旨在深入探讨华为鸿蒙 HarmonyOS NEXT 系统（截止目前 API12）的技术细节，基于实际开发实践进行总结。主要作为技术分享与交流载体，难免错漏，欢迎各位同仁提出宝贵意见和问题，以便共同进步。本文为原创内容，任何形式的转载必须注明出处及原作者。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;工业自动化和智能制造的发展，正推动着设备监控和远程控制系统的普及。在工业场景中，确保设备实时监控和高效运行对安全和生产效率至关重要。&lt;strong&gt;HarmonyOS NEXT&lt;/strong&gt;&amp;nbsp;提供的&amp;nbsp;&lt;strong&gt;Distributed Service&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;Kit&lt;/strong&gt;&amp;nbsp;(分布式管理服务) 可以为开发者带来一套高效、可靠的多设备分布式管理方案。本文将基于 Distributed Service Kit 的核心功能，构建一个&lt;strong&gt;工业设备分布式监控与远程控制系统&lt;/strong&gt;，实现对工业设备的实时状态监控、数据采集和远程控制。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;需求分析&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在工业环境中，设备的实时监控和远程控制主要包括以下需求：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;设备状态监控：确保对设备状态的实时监控和异常事件的迅速响应，避免生产事故。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;数据采集与传输：采集温度、湿度、功率等设备运行参数，并以低延时、高可靠性的方式传输到监控中心。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;远程控制：在监控中心或指定终端设备上控制工厂中的设备，实现设备的启动、停止和参数调整。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;安全与权限控制：工业系统中的数据通常涉及敏感信息，确保数据加密和权限控制对不同级别用户的访问限制是必要的。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2. 系统架构设计&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;基于 HarmonyOS NEXT&amp;nbsp;的分布式管理，我们可以设计一个多层次的工业设备监控架构。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.1 架构分层&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="298" src="https://oscimg.oschina.net/oscnet/up-f7445300cd4fa1437b751027d26cdfb6d6c.png" width="1446" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.2 多播数据传输方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;多播数据传输：为了在工业环境下的多个设备间实现状态广播与数据采集，使用 MDNS 服务和多播协议是一种低延时且高效的解决方案。多播数据传输方案尤其适用于局域网环境，可以节省网络带宽，提高数据同步的实时性。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;2.3 安全与权限控制策略&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;工业环境中的权限管理相对复杂，分为多个角色和权限等级。具体策略如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;角色划分：操作员、工程师、管理员各自有不同权限，确保在紧急情况或操作失误时能够限制对关键设备的访问。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;数据加密：传输过程中对数据进行加密，防止外部窃取和数据被改。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;身份验证：通过 Distributed Service Kit 提供的设备认证机制，在允许访问前验证每个设备的合法性。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3. 实现方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.1 多设备监控&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在监控系统中，多设备监控功能通过分布式设备发现、状态监听和数据传输来实现。以下代码展示了通过 MDNS 服务发现并监听各个设备的状态：&lt;/p&gt; 
&lt;p&gt;&lt;img height="386" src="https://oscimg.oschina.net/oscnet/up-9c7373dec32d011009ed76f753ea6d51208.png" width="968" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;上面的代码通过 MDNS 服务发现网络中的设备，并且在&amp;nbsp;serviceFound&amp;nbsp;事件中记录每个发现的设备。这样，我们可以实现对设备的实时监控和快速管理。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.2 数据采集与传输&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;通过 Distributed Service Kit 中的 HTTP 请求接口，可以实现数据的采集和传输。例如在每个设备上，我们可以部署数据采集的定时任务，将实时数据通过 HTTP 传输到主控设备或监控中心：&lt;/p&gt; 
&lt;p&gt;&lt;img height="570" src="https://oscimg.oschina.net/oscnet/up-9f18adb705284f8ff8acc4b9b9aa5b07f02.png" width="1034" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;此代码展示了如何在设备端定时采集并发送数据。通过这种方式，监控中心能够实时接收到各设备的数据，从而在出现异常时及时响应。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;3.3 远程指令控制&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;远程指令控制功能在工业监控系统中用于向设备下达操作指令。我们可以通过 HTTP 接口实现远程设备的控制，如设备启动、停止等操作。&lt;/p&gt; 
&lt;p&gt;&lt;img height="400" src="https://oscimg.oschina.net/oscnet/up-a8dc822646162e3bae4d6a05334f0152728.png" width="998" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在该示例中，监控中心向指定设备发送远程指令，通过 JSON 数据传递控制参数。设备接收到指令后，根据请求的内容执行对应操作。此功能为工业设备的远程管理提供了灵活的支持。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;4. 稳定性与安全性优化&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在工业场景下，设备的稳定性和数据安全性尤为重要。为此，我们需要在系统中加入一些针对性优化措施。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;4.1 断网重连机制&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;由于工业环境中网络波动可能频繁，系统应具备自动断网重连的功能，以确保在网络恢复后设备能自动恢复连接。例如，可以在 MDNS 服务和 HTTP 请求中加入重试机制，确保数据发送和状态监控的稳定性。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;4.2 数据冗余与缓存处理&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;为了提高数据的稳定性，我们可以在监控系统中设置数据冗余。例如，在采集端使用本地缓存存储未发送的数据，等网络恢复后再统一发送，避免数据丢失。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;4.3 权限控制与数据加密&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;工业数据涉及高敏感性信息，必须在数据传输时加密，以防止外部 XX。可以使用 AES 或 RSA 加密算法确保数据传输安全。此外，对关键操作如设备启动、停止设置多重验证机制，确保系统安全。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;5. 总结&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;借助&amp;nbsp;HarmonyOS NEXT&amp;nbsp;的 Distributed Service Kit，我们可以在工业环境中实现设备的实时监控与远程控制。本文通过分层的架构设计、合理的权限管理和数据传输方案，构建了一个适用于工业场景的分布式设备监控系统。不仅实现了对设备状态的精准控制，还确保了系统的稳定性和安全性。在实际开发中，我们开发者可以根据具体需求进一步优化系统，为工业设备的高效管理与智能化运维提供强大支持。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;HarmonyOS NEXT&amp;nbsp;在工业物联网的应用场景中具有广泛潜力，通过对分布式管理功能的深度利用，可以构建出更多创新性应用，未来可在更多工业场景中持续探索其价值。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;（转载自 51CTO，作者：SameX）&lt;/p&gt; 
&lt;p&gt;&lt;img height="360" src="https://oscimg.oschina.net/oscnet/up-4b27b0ac60bdb6d74b790409e0a7279d674.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372429</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372429</guid>
      <pubDate>Tue, 16 Sep 2025 01:42:46 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>HarmonyOS NEXT 应用性能优化实战</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;踏入鸿蒙世界的敲门砖，标志着您在技术征途上的全新起点，提升就业竞争力，获得行业认可，点亮职业成长先机，快人一步抢占未来应用开发赛道！&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Ftraining%2Fdev-cert-detail%2F101666948302721398%3Fha_source%3Dhmosclass-sifou%26ha_sourceId%3D89000235" target="_blank"&gt;https://developer.huawei.com/consumer/cn/training/dev-cert-detail/101666948302721398?ha_source=hmosclass-sifou&amp;amp;ha_sourceId=89000235&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;本文旨在深入探讨华为鸿蒙 HarmonyOS NEXT 系统（截至目前 API12）中应用性能优化的技术细节，基于实际开发实践进行总结。主要作为技术分享与交流载体，难免错漏，欢迎各位同仁提出宝贵意见和问题，以便共同进步。本文为原创内容，任何形式的转载必须注明出处及原作者。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;一、性能评估指标与工具&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）关键性能评估指标&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;&lt;strong&gt;CPU 使用率&lt;/strong&gt;&lt;br&gt; CPU 使用率是衡量应用在运行过程中对 CPU 资源占用情况的重要指标。一个高效的 HarmonyOS NEXT 应用应该在保证功能正常运行的前提下，尽量降低 CPU 使用率。例如，在一个实时通信应用中，如果 CPU 使用率过高，可能会导致通话卡顿、消息发送延迟等问题。正常情况下，应用在空闲状态时 CPU 使用率应接近 0%，在高负载情况下，如进行复杂计算或大量数据处理时，CPU 使用率也不应长时间超过 80%。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;&lt;strong&gt;内存占用&lt;/strong&gt;&lt;br&gt; 内存占用直接影响应用的稳定性和响应速度。如果应用占用过多内存，可能会导致系统频繁进行内存回收，从而引发卡顿甚至应用崩溃。对于 HarmonyOS NEXT 应用，需要关注其在不同场景下的内存占用情况，如启动时、运行一段时间后以及执行特定操作时。一般来说，一个普通应用的内存占用应该在合理范围内，例如，小型应用内存占用应控制在几十兆以内，大型应用如游戏或图形处理应用，内存占用也应尽量控制在几百兆以内，避免过度占用系统资源。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;3.&amp;nbsp;&lt;strong&gt;帧率&lt;/strong&gt;&lt;br&gt; 在涉及动画或界面交互的应用中，帧率是评估用户体验的关键指标。较高的帧率意味着更流畅的动画和交互效果。HarmonyOS NEXT 应用应尽量保持稳定的帧率，特别是在游戏、视频播放等场景中。理想情况下，帧率应达到 60fps（每秒 60 帧）以上，以提供丝滑的视觉体验。如果帧率过低，用户会明显感觉到界面卡顿、动画不连贯，严重影响应用的可用性。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）华为提供的性能分析工具及使用方法&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;&lt;strong&gt;DevEco Insight&lt;/strong&gt;&lt;br&gt; DevEco Insight 是华为专门为 HarmonyOS NEXT 应用开发提供的性能分析工具。它可以帮助开发者全面了解应用的性能状况。使用方法如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;首先，在 DevEco Studio 中打开项目，然后点击菜单栏中的「Analyze」选项，2.选择「Insight」启动工具。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在 DevEco Insight 界面中，可以选择要分析的设备和应用进程。例如，连接手机设备后，从设备列表中选择正在运行的目标应用进程。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;工具提供了多种性能分析功能，如 CPU 分析、内存分析、帧率分析等。点击相应的分析选项卡，即可查看应用在该方面的性能数据。例如，在 CPU 分析选项卡中，可以看到应用各个线程的 CPU 使用率随时间的变化曲线，通过分析曲线可以找出 CPU 占用较高的时间段和代码逻辑。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;HiTrace&lt;br&gt; HiTrace 是另一个强大的性能分析工具，主要用于分布式应用的性能分析。对于利用 HarmonyOS NEXT 分布式能力的应用，HiTrace 可以帮助开发者追踪跨设备任务的执行流程和性能瓶颈。使用步骤如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在项目中集成 HiTrace 库，根据官方文档进行配置。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;在代码中使用 HiTrace 提供的 API 标记关键代码段，以便在分析时能够清晰地看到任务在不同设备间的流转和耗时情况。例如，在分布式任务开始和结束的地方分别调用 HiTrace 的开始和结束标记函数。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;启动应用后，通过命令行工具或在 DevEco Studio 中启动 HiTrace 分析，查看分布式任务的性能数据，包括任务在各个设备上的执行时间、数据传输时间等，从而找出性能优化的关键点。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;（三）不同性能分析工具优缺点对比&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;DevEco Insight 的优点和缺点&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;优点：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;集成在开发环境中，使用方便，无需额外安装复杂的配置环境。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;提供了全面的性能分析功能，涵盖了 CPU、内存、帧率等多个方面，能够满足大多数应用性能分析需求。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;可以实时监测应用性能，开发者可以在应用运行过程中即时查看性能数据，快速定位问题。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;缺点：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;对于分布式应用的性能分析，虽然可以提供一定的支持，但在跨设备任务追踪的深度和详细程度上不如 HiTrace。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;分析大型应用时，可能会占用一定的系统资源，对应用本身的性能产生一定影响。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;HiTrace 的优点和缺点&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;优点：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;专注于分布式应用的性能分析，能够详细追踪任务在不同设备间的执行流程，对于优化分布式应用的性能非常有效。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;可以提供更精准的性能数据，帮助开发者深入了解分布式任务中的性能瓶颈所在。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;缺点：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;使用相对复杂，需要在项目中集成库并进行代码标记，对于不熟悉的开发者可能需要一定的学习成本。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;功能相对单一，主要针对分布式性能分析，如果仅需要分析应用的本地性能，可能不是最佳选择。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;二、内存管理与优化策略&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）内存管理机制&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;HarmonyOS NEXT 的内存管理机制旨在高效地分配和回收内存资源，确保应用的稳定运行。它采用了自动内存管理和手动内存管理相结合的方式。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;&lt;strong&gt;自动内存管理&lt;/strong&gt;&lt;br&gt; 自动内存管理主要通过垃圾回收（GC）机制实现。当应用中的对象不再被引用时，GC 会自动回收其占用的内存空间。例如，在一个函数中创建了一个临时对象，当函数执行完毕后，如果该对象没有被其他地方引用，GC 就会在适当的时候回收它的内存。这种方式大大减轻了开发者手动管理内存的负担，但也需要开发者注意对象的引用关系，避免出现内存泄漏。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;&lt;strong&gt;手动内存管理（可选）&lt;/strong&gt;&lt;br&gt; 对于一些对性能要求极高或内存使用场景特殊的应用，HarmonyOS NEXT 也提供了手动内存管理的接口。开发者可以手动申请和释放内存，以更精准地控制内存的使用。但手动内存管理需要开发者具备更高的内存管理技能，否则容易引发内存错误。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）内存优化策略及代码示例&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;&lt;strong&gt;对象复用&lt;/strong&gt;&lt;br&gt; 对象复用是一种有效的内存优化策略。例如，在一个列表视图中，每个列表项的布局和样式可能相同。我们可以创建一个对象池，预先创建一定数量的列表项对象，当需要显示新的列表项时，从对象池中获取已有的对象，而不是每次都创建新的对象。以下是一个简单的对象池实现代码示例（简化版）：&lt;/p&gt; 
&lt;p&gt;&lt;img height="732" src="https://oscimg.oschina.net/oscnet/up-51b338b5d54d15c149d7b75439c1a5aebe7.png" width="868" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="468" src="https://oscimg.oschina.net/oscnet/up-91641197658c75067171c985df4b87b182d.png" width="842" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在这个示例中，通过对象池实现了列表项对象的复用，减少了频繁创建和销毁对象带来的内存开销。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;&lt;strong&gt;内存泄漏检测&lt;/strong&gt;&lt;br&gt; 内存泄漏是影响应用性能和稳定性的严重问题。HarmonyOS NEXT 提供了一些工具和技术来检测内存泄漏。例如，在 DevEco Insight 中，可以使用内存分析功能来查看对象的引用关系和内存占用情况。如果发现某个对象在长时间内一直占用内存且没有被释放，可能存在内存泄漏。另外，开发者也可以在代码中手动添加一些内存监测逻辑，如记录对象的创建和销毁时间，通过对比来判断是否存在内存泄漏。以下是一个简单的内存监测代码片段：&lt;/p&gt; 
&lt;p&gt;&lt;img height="808" src="https://oscimg.oschina.net/oscnet/up-cb1c3cd8e2231430e5d75875fd7df87c91a.png" width="986" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="322" src="https://oscimg.oschina.net/oscnet/up-14061e41e3cca800d8c23988cb4379b13e2.png" width="894" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（三）内存优化对应用运行效率的影响&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;有效的内存优化可以显著提高应用的运行效率。通过对象复用，减少了内存分配和回收的次数，降低了 CPU 的负载，使得应用在处理大量数据或频繁创建对象的场景下能够更加流畅地运行。例如，在一个图片加载应用中，如果不进行对象复用，每次加载新图片都创建新的图片对象，会导致内存频繁波动，CPU 使用率升高，应用可能出现卡顿。而采用对象复用后，内存占用更加稳定，CPU 使用率降低，图片加载速度更快，用户体验得到明显改善。内存泄漏检测和修复可以避免内存不断被占用，防止应用因内存耗尽而崩溃，保证了应用的长期稳定运行。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;三、启动速度与响应时间优化&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（一）影响启动速度和响应时间的因素&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;&lt;strong&gt;代码初始化逻辑&lt;/strong&gt;&lt;br&gt; 应用启动时，需要进行一系列的初始化操作，如加载配置文件、初始化数据库连接、注册系统服务等。如果这些初始化逻辑过于复杂或耗时，会严重影响启动速度。例如，一个应用在启动时需要从网络加载大量的配置数据，如果没有进行优化，可能会导致启动过程卡顿，用户需要等待较长时间才能进入应用主界面。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;&lt;strong&gt;资源加载&lt;/strong&gt;&lt;br&gt; 加载图片、音频、字体等资源也会占用启动时间。如果资源文件过大或加载方式不合理，会使启动过程变慢。比如，在一个游戏应用中，如果在启动时一次性加载所有高清图片和音效文件，会导致启动速度明显下降。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;3.&amp;nbsp;&lt;strong&gt;主线程阻塞&lt;/strong&gt;&lt;br&gt; 如果在主线程中执行耗时操作，如复杂的计算、网络请求等，会导致应用响应迟缓。因为主线程负责处理用户界面的更新和交互，一旦被阻塞，用户的操作将无法及时得到响应。例如，在一个电商应用中，如果在主线程中进行商品数据的同步更新，当用户点击按钮时，按钮的响应会延迟，给用户带来不好的体验。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（二）优化方法及代码示例&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;&lt;strong&gt;懒加载&lt;/strong&gt;&lt;br&gt; 懒加载是一种延迟加载资源的策略。对于那些不是立即需要的资源，在用到的时候再进行加载。例如，在一个包含多个页面的应用中，只有当用户切换到某个页面时，才加载该页面所需的图片和数据。以下是一个简单的懒加载图片的代码示例：&lt;/p&gt; 
&lt;p&gt;&lt;img height="692" src="https://oscimg.oschina.net/oscnet/up-563c5d538fb4c74863e25f5db3d6bff0dc1.png" width="1166" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在这个示例中，图片只有在组件显示时才会被加载，而不是在应用启动时就加载所有图片，从而缩短了启动时间。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;&lt;strong&gt;异步任务处理&lt;/strong&gt;&lt;br&gt; 将耗时的任务放在异步线程中执行，避免主线程阻塞。例如，在应用启动时进行数据初始化，可以使用异步任务来完成。以下是一个使用异步任务进行数据库初始化的代码示例：&lt;/p&gt; 
&lt;p&gt;&lt;img height="732" src="https://oscimg.oschina.net/oscnet/up-e57f141e2b13a2cc2a595a5c4604033c620.png" width="898" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;通过将数据库初始化放在异步任务中执行，应用启动时主线程可以继续处理其他事务，如显示启动界面等，提高了启动速度和响应速度。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;（三）优化前后性能数据对比&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;以一个实际的 HarmonyOS NEXT 应用为例，在优化前，应用的启动时间平均为 3 秒，在进行了懒加载和异步任务处理等优化措施后，启动时间缩短到了 1.5 秒左右，启动速度提升了近 50%。在响应时间方面，优化前，点击按钮后界面更新的平均延迟时间为 500 毫秒，优化后缩短到了 100 毫秒以内，响应速度明显加快。这些数据充分说明了启动速度和响应时间优化对于应用性能提升的重要性。希望通过这些优化方法和实际案例，能帮助大家在 HarmonyOS NEXT 应用开发中打造出性能卓越的应用。要是在性能优化过程中遇到啥问题，记得来找我这个「性能优化大师」哦！哈哈！&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;（转载自 51CTO，作者：SameX）&lt;/p&gt; 
&lt;p&gt;&lt;img height="360" src="https://oscimg.oschina.net/oscnet/up-a85d61cbdba99262993e266a04798f63325.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372428</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372428</guid>
      <pubDate>Sun, 14 Sep 2025 01:39:00 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>BentoML 发布 llm-optimizer，LLM 推理和性能优化开源工具</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;BentoML 近日发布了&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bentoml.com%2Fblog%2Fannouncing-llm-optimizer" target="_blank"&gt;llm-optimizer&lt;/a&gt;，这是一个用于基准测试和优化 LLM 推理的开源工具。它支持多个推理框架，并兼容任何开源 LLM。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-4e424ad07868e5d205d0e99984f6e8bf1b4.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;llm-optimizer 旨在将 LLM 性能优化的繁琐手动工作自动化。您可以在一个地方运行结构化实验、应用约束并可视化结果，只需几个命令即可。&lt;/p&gt; 
&lt;p&gt;使用示例&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;llm-optimizer estimate \
  --model meta-llama/Llama-3.1-8B-Instruct \
  --input-len 1024 \
  --output-len 512 \
  --gpu A100 \
  --num-gpus 2&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;预期输出&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;=== Configuration ===
Model: meta-llama/Llama-3.1-8B-Instruct
GPU: 2x A100
Precision: fp16
Input/Output: 1024/512 tokens
Target: throughput

Fetching model configuration...
Model: 8029995008.0B parameters, 32 layers

=== Performance Analysis ===
Best Latency (concurrency=1):
  TTFT: 43.1 ms
  ITL: 2.6 ms
  E2E: 1.39 s

Best Throughput (concurrency=512):
  Output: 18873.3 tokens/s
  Input: 23767.8 tokens/s
  Requests: 14.24 req/s
  Bottleneck: Memory

=== Roofline Analysis ===
Hardware Ops/Byte Ratio: 142.5 ops/byte
Prefill Arithmetic Intensity: 52205.5 ops/byte
Decode Arithmetic Intensity: 50.9 ops/byte
Prefill Phase: Compute Bound
Decode Phase: Memory Bound

=== Concurrency Analysis ===
KV Cache Memory Limit: 688 concurrent requests
Prefill Compute Limit: 8 concurrent requests
Decode Capacity Limit: 13 concurrent requests
Theoretical Overall Limit: 8 concurrent requests
Empirical Optimal Concurrency: 16 concurrent requests

=== Tuning Commands ===

--- SGLANG ---
Simple (concurrency + TP/DP):
  llm-optimizer --framework sglang --model meta-llama/Llama-3.1-8B-Instruct --gpus 2 --host 127.0.0.1 --server-args "tp_size*dp_size=[(1, 2), (2, 1)]" --client-args "num_prompts=1000;dataset_name=sharegpt;random_input=1024;random_output=512;num_prompts=1000;max_concurrency=[256, 512, 768]" --output-dir tuning_results --output-json tuning_results/config_1_sglang.json
Advanced (additional parameters):
  llm-optimizer --framework sglang --model meta-llama/Llama-3.1-8B-Instruct --gpus 2 --host 127.0.0.1 --server-args "tp_size*dp_size=[(1, 2), (2, 1)];chunked_prefill_size=[1434, 2048, 2662];schedule_conservativeness=[0.3, 0.6, 1.0];schedule_policy=fcfs" --client-args "num_prompts=1000;dataset_name=sharegpt;random_input=1024;random_output=512;num_prompts=1000;max_concurrency=[256, 512, 768]" --output-dir tuning_results --output-json tuning_results/config_1_sglang.json

--- VLLM ---
Simple (concurrency + TP/DP):
  llm-optimizer --framework vllm --model meta-llama/Llama-3.1-8B-Instruct --gpus 2 --host 127.0.0.1 --server-args "tensor_parallel_size*data_parallel_size=[(1, 2), (2, 1)]" --client-args "num_prompts=1000;dataset_name=sharegpt;random_input=1024;random_output=512;num_prompts=1000;max_concurrency=[256, 512, 768]" --output-dir tuning_results --output-json tuning_results/config_1_vllm.json
Advanced (additional parameters):
  llm-optimizer --framework vllm --model meta-llama/Llama-3.1-8B-Instruct --gpus 2 --host 127.0.0.1 --server-args "tensor_parallel_size*data_parallel_size=[(1, 2), (2, 1)];max_num_batched_tokens=[1024, 1177, 1331]" --client-args "num_prompts=1000;dataset_name=sharegpt;random_input=1024;random_output=512;num_prompts=1000;max_concurrency=[256, 512, 768]" --output-dir tuning_results --output-json tuning_results/config_1_vllm.json&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;该工具解决了 LLM 部署中的一个常见挑战：在不依赖手动试错的情况下，为延迟、吞吐量和成本找到最佳配置。llm-optimizer 为探索 LLM 性能景观提供了一种结构化的方式。它通过实现系统基准和跨可能配置的自动搜索，消除了重复的猜测。&lt;/p&gt; 
&lt;p&gt;开源地址：&lt;em&gt;https://github.com/bentoml/llm-optimizer&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372359/bentoml-llm-optimizer</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372359/bentoml-llm-optimizer</guid>
      <pubDate>Sat, 13 Sep 2025 11:26:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>北京中小学全面开设人工智能通识课</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FecvZHwNwJg6PafacKW5iEg" target="_blank"&gt;据报道&lt;/a&gt;，自 2025 年秋季学期起，北京市 1400 余所中小学全面开设人工智能通识教育课程，覆盖 183 万余名中小学生，成为全国首个省级全域推进人工智能通识教育的地区。&lt;/p&gt; 
&lt;p&gt;报道称，课程资源方面，首批覆盖全学段的 160 套市级课程资源已上线，每套资源包含 15 分钟左右的核心教学视频、教学指南及活动任务单；&lt;/p&gt; 
&lt;p&gt;通过「视频 + 工具 + 任务单」模式满足教师授课、备课及学生自主学习 3 类场景需求，搭建 AI「课程超市」和「应用超市」，为课堂教学提供基础支撑。&lt;/p&gt; 
&lt;p&gt;市教委相关负责人表示，北京市将持续优化人工智能教育课程资源，结合教学反馈迭代更新；开展应用示范校评选和优秀案例推广，形成可复制经验。&lt;/p&gt; 
&lt;p&gt;同时，负责人还表示，要深化「京娃」系列智能体研发，拓展「AI + 教育」应用场景等，以首批课程资源为起点，力争将北京中小学人工智能教育打造成全国标杆，真正让数字技术赋能每一位师生，为培养担当民族复兴大任的时代新人奠定坚实基础。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372356</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372356</guid>
      <pubDate>Sat, 13 Sep 2025 11:09:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>OpenAI Evals 新增原生音频输入和评估功能</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;OpenAI 的 Evals 工具现已支持原生音频输入和音频评分，无需文本转录即可直接评估模型的音频响应。这项新功能极大简化了语音识别和生成模型的评估过程，使得开发者能够更高效地测试和优化其音频应用。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-9522f36b3f1e768600ee99a85f02e860156.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;通过使用 Evals 的原生音频支持，用户可以上传音频文件，并直接在平台上进行性能评估。这一改进不仅减少了数据处理的复杂性，还提高了评估结果的准确性和可靠性。对于需要频繁测试和调整音频模型的开发者来说，这是一个重要的进步。&lt;/p&gt; 
&lt;p&gt;应用场景包括但不限于：智能语音助手的开发与优化、语音识别系统的性能评估，以及音频内容生成的质量控制。&lt;/p&gt; 
&lt;p&gt;如需了解更多关于如何使用 Evals 的新功能，参考官方 Cookbook 指南：&lt;em&gt;https://cookbook.openai.com/examples/evaluation/use-cases/evalsapi_audio_inputs&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372353</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372353</guid>
      <pubDate>Sat, 13 Sep 2025 11:01:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>微软研究院发布 RenderFormer，基于 Transformer 的神经渲染模型</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微软研究院近日发布了&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.microsoft.com%2Fen-us%2Fresearch%2Fblog%2Frenderformer-how-neural-networks-are-reshaping-3d-rendering%2F" target="_blank"&gt;RenderFormer&lt;/a&gt;，这是一个纯机器学习的神经架构，旨在通过机器学习完全替代传统图形计算，实现全功能 3D 渲染，无需传统图形计算。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-973c5649e34320d01d3888bfd65c9a319d3.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-2008d874aeabcfe09955bf61fd0b256737b.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;RenderFormer 整体架构如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;双分支 Transformer 架构：分为视角无关（View-Independent）和视角相关（View-Dependent）两个阶段。视角无关阶段通过自注意力机制捕捉阴影、漫反射等全局光照效果；视角相关阶段通过交叉注意力机制建模可见性、反射等视角依赖效果。&lt;/li&gt; 
 &lt;li&gt;相对空间位置编码：创新性地采用改进的旋转位置编码（RoPE），基于三角形的 3D 空间位置而非序列索引，保持场景平移不变性。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-79adce0f291f87580ef10043c6928fce017.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;据介绍，RenderFormer 是首个证明神经网络能学习完整图形渲染流水线的模型，支持任意 3D 场景和全局光照效果，无需依赖光线追踪或光栅化技术。它通过三角形令牌（triangle tokens）表示 3D 场景，编码空间位置、表面法线及材质属性，结合光线束令牌（ray bundle tokens）处理视角信息，实现端到端渲染。该成果已获 SIGGRAPH 2025 接收并开源。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;https://microsoft.github.io/renderformer&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372349</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372349</guid>
      <pubDate>Sat, 13 Sep 2025 10:38:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>亚马逊云科技否认大中华区裁员</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;9 月 15 日，有消息称亚马逊云科技（AWS）大中华区计划裁员，预计将发生在 9 月底至 10 月之间，或涉及超 20% 的员工，目前 AWS 大中华区人员规模不到 1700 人。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;对此，亚马逊云科技发言人表示：「相关报道严重失实，亚马逊云科技持续在中国积极招聘人才，为中国企业提供全球领先、安全可靠的云技术。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;今年 7 月，亚马逊发布了 2025 年第二季度财报，二季度营收同比增长 13% 至 1677 亿美元；净利润 181.64 亿美元，与上年同期的 134.85 亿美元相比大幅增长 35%；稀释后每股收益为 1.68 美元。亚马逊已承诺今年在 AI 领域的投资将高达 1000 亿美元。亚马逊 AWS 云业务在二季度营收 308.73 亿美元，略高于市场预期的 308 亿美元，同比增长 17%，增速与上一季度持平。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;AWS 的增速仍低于其主要竞争对手微软云和谷歌云。在电话会上，亚马逊 CEO 安迪·贾西试图向分析师保证，和其云计算竞争对手相比，AWS 一直保持着「相当重要」的领导地位，他对公司 AI 产品的发展感到乐观：「我们 AWS 领域的业务规模比其他公司的云业务大得多，我认为第二位的规模约为 AWS 的 65%。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;官网资料显示，亚马逊云科技于 2013 年进入中国，通过本地合作伙伴北京光环新网科技股份有限公司（光环新网）和宁夏西云数据科技有限公司（西云数据），提供与全球一致的云服务体验和安全级别，API（应用程序接口）、SDK（软件开发工具包）、CLI（命令行工具）与全球其他地区相同，开发者无需额外适配，即可实现全球化应用部署。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;目前，亚马逊云科技在中国云计算市场面临激烈的竞争。根据研究机构 Canalys 的报告显示，2025 年第一季度中国大陆的云计算支出达到 116 亿美元，前三名阿里云、华为云和腾讯云的市场份额分别为 33%、 18% 和 10%，三家巨头合计占领了整个中国云计算市场的 61%。（澎湃新闻）&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372348</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372348</guid>
      <pubDate>Sat, 13 Sep 2025 10:31:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Roo Code 上线远程连接功能 Roomote Control</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;AI 编程工具 Roo Code 近期推出了名为 &lt;strong&gt;Roomote Control&lt;/strong&gt; 的新功能，旨在提升用户在 VS Code 中的编码体验。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0915/181541_VqYx_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Froo_code%2Fstatus%2F1966280158031335625" target="_blank"&gt;据介绍&lt;/a&gt;，Roomote Control 允许用户通过手机或浏览器远程连接和控制本地 VS Code 环境中的 Roo Code。该工具直接在用户的系统上运行，确保代码库保持私有和完全安全。&lt;/p&gt; 
&lt;p&gt;用户可以在远程设备上启动新任务、选择模式和模型，所有更新会实时同步回本地 IDE。即使暂时离开，用户也可以让任务在后台继续运行，提高工作效率。&lt;/p&gt; 
&lt;p&gt;Roomote Control 作为 Roo Code Pro 订阅的一部分，提供 14 天的免费试用期，之后每月收费 20 美元。&lt;/p&gt; 
&lt;p&gt;使用方法如下&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;连接步骤&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;在 Roo Code 中导航到 Cloud 菜单并点击「Connect」。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;登录 Roo Code 网站并在 IDE 中启用远程控制。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;在浏览器中访问 Roo Code Cloud，确保远程切换已启用。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;功能体验&lt;/strong&gt;：用户可以在远程部分查看 IDE 的开放目录，点击加号图标启动新任务，输入提示并观察任务的执行。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;通过 Roomote Control，Roo Code 进一步扩展了其作为 AI 驱动的自主编码代理的功能，使用户能够随时随地高效地管理编码任务。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372344</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372344</guid>
      <pubDate>Sat, 13 Sep 2025 10:17:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>全球首个 AI 政府部长来了</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;综合环球网等媒体报道，阿尔巴尼亚总理埃迪·拉马当地时间 11 日宣布新内阁名单，&lt;strong&gt;&lt;strong&gt;其中包括任命一个名为「迪埃拉」（在阿尔巴尼亚语中意为「太阳」）的人工智能担任公共采购部长&lt;/strong&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;&lt;strong&gt;这也使得阿尔巴尼亚成为世界上第一个任命非实体的人工智能担任政府部长的国家。&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="254" src="https://oscimg.oschina.net/oscnet/up-01dfab898dc0952c33998cbf206a06145f0.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;2025 年 5 月，拉马历史性地第四次当选阿尔巴尼亚总理。今年夏天，拉马曾畅想有朝一日该国能有一位数字部长，甚至是一位人工智能总理，不过当时几乎没人想到这一天会这么快到来。&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;拉马在周四宣布新内阁的讲话中表示：「迪埃拉是第一位并非以实体形式存在，而是由人工智能虚拟生成的内阁成员。」&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;拉马还表示，招标决定权将从各部手中逐步移交给「迪埃拉」，「迪埃拉」将审查政府与私营公司签订的每一份招标合同，并客观评估每一份招标合同的优点。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;拉马强调，「迪埃拉」将帮助阿尔巴尼亚「成为一个公共招标 100% 没有腐败的国家」。长期以来，授予此类合同一直是这个巴尔干国家腐败丑闻的根源。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;这种形象对阿尔巴尼亚加入欧盟的梦想造成了打击。阿尔巴尼亚目前是欧盟的候选国，拉马希望在 2030 年之前成为欧盟正式成员国，但政治分析人士称，这一目标过于雄心勃勃。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;拉马还称，将有一个专用部门为「迪埃拉」提供支持，并推动人工智能在政府各部门的应用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;不过，阿尔巴尼亚政府并未提供有关「迪埃拉」可能会受到何种人类监督的详细信息，也没有就有人可能操纵这个人工智能机器人的风险作出说明。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;「迪埃拉」此前已经为阿尔巴尼亚公民所知，她的虚拟形象是一个身穿阿尔巴尼亚传统服饰的女子，于今年年初在电子平台作为一款人工智能虚拟助手上线，该平台允许公民以数字方式访问几乎所有政府服务。「迪埃拉」负责帮助公民和企业获取政府文件，通过语音指令提供帮助，以及签发带有电子印章的文件。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372341</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372341</guid>
      <pubDate>Sat, 13 Sep 2025 10:11:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
  </channel>
</rss>
