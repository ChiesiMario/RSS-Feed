<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-综合资讯</title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="http://8.134.148.166:30044/oschina/news/industry" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-综合资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Tue, 25 Mar 2025 02:36:46 GMT</lastBuildDate>
        <ttl>5</ttl>
        <item>
            <title>百度搜索 T11 职级大神辜斯缪离职</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F5v7nsBbMpTZ4ou0_MGqPlw&quot; target=&quot;_blank&quot;&gt;据知情人士透露&lt;/a&gt;&lt;/u&gt;，百度搜索策略首席架构师（T11）辜斯缪离职，去向暂时未知。&lt;/p&gt; 
&lt;p&gt;据公开信息，辜斯缪毕业于北京交通大学，2009 年加入百度，任职于百度核心搜索部门，曾负责百度搜索时效性、需求分析、阿拉丁策略、知识图谱建设、搜索推荐、百度信息流和交互算法等业务。&lt;/p&gt; 
&lt;p&gt;2017 年，任职于百度推荐技术平台部，主要负责百度内容消费体系中基础排序和召回算法、垂直推荐技术、推荐中台化、微视频推荐技术等。&lt;/p&gt; 
&lt;p&gt;在百度的 T 序列职级中，T12 级是最高的，但百度 25 年的历史上，只有威廉张和吴恩达这两位百度首席科学家是 T12。T11 基本是工程师的天花板了，百度在职的 T11 职级人数也就十个人左右。&lt;/p&gt; 
&lt;p&gt;此前，百度比较有名的 T11 有，前百度云与大数据首席架构师林仕鼎、前百度美研主任架构师、百度无人车首席架构师、小马智行联合创始人彭军（小马智行另外一个联合创始人，楼天城的职级是 T10）、前小度 CTO 朱凯华等。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340799</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340799</guid>
            <pubDate>Tue, 25 Mar 2025 02:33:44 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>苹果 AI 中文版即将正式登场</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;今日，苹果向 iPhone 和 iPad 用户推送了 iOS / iPadOS 18.4 RC 更新（内部版本号：22E239），本次更新距离上次发布 Beta / RC 间隔 7 天。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0325/102757_0aOt_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;其中 Apple 智能（Apple Intelligence）新增支持法语、德语、意大利语、葡萄牙语（巴西）、西班牙语、日语、韩语和&lt;span style=&quot;color:#16a085&quot;&gt;&lt;strong&gt;简体中文&lt;/strong&gt;&lt;/span&gt;，以及新加坡和印度的本地化英语。而这也意味着，国行版的苹果 AI 又能再进一步。&lt;/p&gt; 
&lt;p&gt;此外，iOS 18.4 引入了「优先级通知」功能，系统会自动判断哪些通知最为重要，并在锁屏上以醒目方式展示；而 AI 图片生成功能 Image Playground 新增「手绘风格」选项，用户可以生成类似手绘的图像。&lt;/p&gt; 
&lt;p&gt;此前，据彭博社报道，有知情人士透露，苹果公司计划在 2025 年中期之前，在国行版 iPhone 上引入 AI 功能。在 2 月 13 日，在阿联酋迪拜举办的 World Governments Summit 2025 峰会上，阿里巴巴联合创始人、董事局主席蔡崇信&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/news/333543&quot;&gt;确认&lt;/a&gt;&lt;/u&gt;了苹果与阿里巴巴共同中国 iPhone AI 功能一事。&lt;/p&gt; 
&lt;p&gt;同时，据 The Information 报道，有两位知情人士透露，虽然苹果公司已经与阿里巴巴达成合作，将为国行版的 iPhone 用户提供 AI 功能，&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/news/333667/apple-continues-to-work-with-baidu-on-a&quot;&gt;但苹果仍在继续与百度合作&lt;/a&gt;&lt;/u&gt;，共同为中国的 iPhone 用户开发人工智能功能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;阅读更多&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.oschina.net/news/338319&quot;&gt;苹果智能（Apple Intelligence）中文版要来了&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/337918/apple-says-some-ai-improvements-siri-delayed&quot; target=&quot;news&quot;&gt;苹果推迟上线 Siri 中的 AI 相关功能&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340797</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340797</guid>
            <pubDate>Tue, 25 Mar 2025 02:29:44 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>阿里开源 Qwen2.5-VL-32B：更聪明、更轻量</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;阿里&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fqwenlm.github.io%2Fzh%2Fblog%2Fqwen2.5-vl-32b%2F&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;在 Qwen2.5-VL 系列的基础上，开源了新的 VL 模型 Qwen2.5-VL-32B-Instruct。相比此前发布的 Qwen2.5-VL 系列模型，本次推出的 32B 模型的特点如下：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;回复更符合人类主观偏好：调整了输出风格，使回答更加详细、格式更规范，并更符合人类偏好。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;数学推理能力：复杂数学问题求解的准确性显著提升。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;图像细粒度理解与推理：在图像解析、内容识别以及视觉逻辑推导等任务中表现出更强的准确性和细粒度分析能力。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;性能表现&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;与业内先进的同规模模型进行比较，包括近期推出的 Mistral-Small-3.1-24B 和 Gemma-3-27B-IT， Qwen2.5-VL-32B-Instruct 展现出了明显的优势，甚至超越了更大规模的 Qwen2-VL-72B-Instruct 模型。尤其是在多模态任务中，例如 MMMU、MMMU-Pro 和 MathVista，这些任务强调复杂的多步骤推理，Qwen2.5-VL-32B-Instruct 表现尤为突出。在注重主观用户体验评估的 MM-MT-Bench 基准测试中，该模型相较于其前代 Qwen2-VL-72B-Instruct 取得了显著进步。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;295&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a18b0fe1bd0ce20139941d074d4b649efcd.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;除了在视觉能力上优秀，Qwen2.5-VL-32B-Instruct 在纯文本能力上也达到了同规模的最优表现。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;295&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-2f1721dd7965b89fa1219c3190b8c888a6e.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340796/qwen2-5-vl-32b</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340796/qwen2-5-vl-32b</guid>
            <pubDate>Tue, 25 Mar 2025 02:27:44 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>MCP 协议：LLM 应用开发的 「适配器」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;p&gt;最近，许多软件和平台纷纷上线 MCP Server，按照 MCP 协议统一与大模型的交互接口，如 Gitee MCP Server、百度地图 MCP 的发布等等。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;400&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-cc64b4e8a07b788a195394c089bd591804f.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;通过 Gitee &lt;/em&gt;&lt;em&gt;MCP&lt;/em&gt;&lt;em&gt; Server 读取用户 Gitee 仓库中的 Issue&lt;/em&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_1&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;重新定义大模型交互范式&lt;/h2&gt; 
&lt;p&gt;MCP 协议可以简单理解成是一个国际通用版本的转接头，将大模型与各种外部系统、工具和数据源链接在一起。它通过定义统一的通信规范和数据格式，实现了异构技术栈间的无缝对接，使得算力资源、行业知识库与 AI 模型能够突破平台限制进行跨维度协作。&lt;/p&gt; 
&lt;p&gt;比如，要调用大模型做一个客服 AI，通常需要同时访问客户信息、产品知识库和工单系统等，开发者要为每个数据源编写独立代码，开发定制化的 API 接口，还要实现复杂的鉴权与错误处理机制，并对模型进行特定格式的指令训练。&lt;/p&gt; 
&lt;p&gt;而通过 MCP 协议，就可以直接将这些系统接入统一的 MCP 管理，像「插排接电器」一样即插即用。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;479&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a3720dea14306ec64acaf81060adb7379bb.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;具体来说，开发者不再需要为每个数据源单独开发 API，只需在 MCP 中配置一次工具（如客户数据库、工单系统），后续所有兼容 MCP 的 AI 模型都能直接调用这些服务。&lt;/p&gt; 
&lt;p&gt;MCP Server 会实时维护可用的工具列表，AI 模型在交互时能自动感知到新接入的系统。例如：企业新增了一个物流跟踪系统；管理员只需要将其注册到 MCP Server 并声明服务类型；客服 AI 无需停机升级，即可通过协议内置的语义理解模块自动识别该工具的功能边界，直接调用接口回答用户物流问题。&lt;/p&gt; 
&lt;p style=&quot;text-align:left&quot;&gt;MCP 协议还具备跨平台兼容性，无论底层系统是 Java 开发的工单平台，还是 Python 写的知识库，甚至是遗留的 COBOL 系统，只要接入 MCP Server，就能被 AI 模型以统一方式调用。这相当于给所有工具装上了「万能翻译器」。&lt;/p&gt; 
&lt;p&gt;除了常见数据库，MCP 还支持接入：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Web API：天气查询、支付网关等&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;代码仓库：Git 操作自动化&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;本地系统：文件操作、硬件设备控制&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;企业系统：SAP/Oracle 等 ERP 系统&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height=&quot;650&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-2d729dee6d10737cb1055be13e8fed58e37.webp&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_2&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;协议背后的工程智慧&lt;/h2&gt; 
&lt;p&gt;那么，MCP 是如何实现这些能力的？&lt;/p&gt; 
&lt;p&gt;MCP 就是 Claude(Anthropic) 主导发布的一个开放的、通用的、有共识的协议标准，本质上只是定义了一套基于 JSON-RPC 的通信规则，从而将外部服务的调用标准化，只要支持这套协议的 Host 和 Agent 都可以接入。核心组件包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;MCP Host：主机负责发起与 LLM 的连接，类似 Cursor, Claude Desktop、Cline。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MCP Client: 客户端是用来在 Host 应用程序内维护与 Server 之间 1:1 连接。根据客户端的不同，MCP 的使用方法也不同，如 Clinn 是直接附加在系统提示词中；5ise 是 Function Call 的模式。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MCP Server: 通过标准化的协议，为 Client 端提供上下文、工具和提示。Mcp Server 的本质是运行在本地电脑上的一个 nodejs 或者 Python 程序。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;本地数据源: 包含本地文件、数据库和服务。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;远程服务: 可连接的外部文件、数据库、API。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height=&quot;336&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-df921e3dbf5ab5dc6d198ab26ddabc6a860.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;整个 MCP 的调用过程大致可以分为 5 步：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;客户端将 MCP 详细使用方法告诉大模型&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;用户输入问题通过客户端传递给大模型&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;大模型自行决定调用哪个 Mcp Server，以及如何传递参数&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;客户端根据大模型决定的调用方式，调用 MCP Server，拿到返回结果，加上之前的上下文，再传递给大模型&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;大模型进行整理，然后把最终的结果呈现给用户&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;简化了各式外部资源的调用之后，在 LLM 上构建复杂的工作流或者应用就会相应简化。同时，由于 MCP 协议解耦了工具和 LLM，可以实现 LLM 自由切换，并且数据和工具不需要上传远端，保护数据隐私。&lt;/p&gt; 
&lt;p&gt;目前，MCP 支持的语言列表中已经包含 Kotlin SDK、Python SDK、TypeScript SDK 和 Java SDK。&lt;/p&gt; 
&lt;p&gt;在社区的最新动态中，&lt;a href=&quot;https://www.oschina.net/news/339546/mcp-streamable-http-transport&quot; rel=&quot;nofollow&quot;&gt;MCP 本身也有望采用 &quot;Streamable HTTP&quot; 传输代替「HTTP+SSE」&lt;/a&gt;的 PR，以解决当前远程 Model Context Protocol (MCP) 传输方式的关键限制。简单来说，Streamable HTTP 改变了 MCP 的数据传输方式，让协议变得：更灵活，支持流式传输，但不强制；更易用，支持无状态服务器；更兼容，适用于标准 HTTP 基础设施。&lt;/p&gt; 
&lt;p style=&quot;text-align:left&quot;&gt;一个简单的比喻是： 原来的 MCP 传输方式就像是你和客服通话时必须一直保持在线（SSE 需要长连接），而新的方式更像是你随时可以发消息，然后等回复（普通 HTTP 请求，但可以流式传输）。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_3&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;MCP Vs Function Calling&lt;/h2&gt; 
&lt;p&gt;MCP 和此前的 Function Calling 相比，本质上都是让大模型通过标准化的接口来调用外部工具和服务，实现更多复杂功能，区别在于协议层抽象深度与系统级自治能力的跃迁。&lt;/p&gt; 
&lt;p&gt;Function Calling 是模型厂商提供的工具调用框架，停留在应用层工具调度的维度，开发者需显式定义工具清单、编写参数模板并固化调用逻辑，那么 LLM 就可以根据清晰的结构化数据进行推理，执行函数。缺点就是很难处理好复杂需求与多轮对话，同时代码量较大，难以维护。此外，不同的模型有不同的 Function Calling 实现，代码集成的方式也不一样，很难统一标准。&lt;/p&gt; 
&lt;p&gt;以开头的 Gitee MCP Server 为例，如果用户想读取仓库中的 Issue 列表，Function Calling 方案下，开发者首先要定义工具函数，手动编写 Gitee API 调用逻辑；大模型调用时需要精确控制参数传递，手动解析参数并执行。在这个过程需要要自己处理鉴权令牌传递，存在安全风险，还需为每个 API 编写参数校验逻辑，新增 API 时必须修改代码并重新训练模型适配。&lt;/p&gt; 
&lt;p&gt;但在 MCP 协议方案下，只需要注册 Gitee MCP Server，一次配置即可实现大模型直接调用。MCP Server 会自动完成以下动作：&lt;/p&gt; 
&lt;p&gt;1. 识别需要调用 Gitee 的 issue 接口&lt;/p&gt; 
&lt;p&gt;2. 从安全中心获取当前用户 OAuth 令牌&lt;/p&gt; 
&lt;p&gt;3. 转换参数格式调用 API&lt;/p&gt; 
&lt;p&gt;4. 将原始数据转换为模型友好格式&lt;/p&gt; 
&lt;p style=&quot;text-align:left&quot;&gt;此外，Gitee MCP Server 让 AI 助手可以读取仓库内容、分析 PR 变更、理解 Issue 需求，并自动执行代码管理任务，如创建 PR、合并分支、发布版本等。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;智能化仓库管理：AI 直接访问代码库，读取文件、分析变更，辅助开发决策；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;自动化 PR 审查：识别代码变更，提供优化建议，减少人工审查工作量；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Issue 追踪与管理：AI 可解析 Issue 内容，生成修复建议，甚至直接提交 PR 解决问题；&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;div&gt; 
 &lt;table cellspacing=&quot;0&quot; style=&quot;border-collapse:collapse&quot;&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;text-align:left; white-space:pre-wrap&quot;&gt; &lt;p&gt;对比维度&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;text-align:left; white-space:pre-wrap&quot;&gt; &lt;p&gt;Function Calling&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;text-align:left; white-space:pre-wrap&quot;&gt; &lt;p&gt;MCP 协议&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;协议层级&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;应用层工具调度（需模型感知工具格式）&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;协议层抽象（模型与工具完全解耦）&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;工具接入方式&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;需为每个工具编写 JSON Schema 描述&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;工具注册后自动生成语义描述&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;鉴权机制&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;开发者手动传递 Token（如 API Key）&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;内置 OAuth 2.0/OpenID Connect 等标准化鉴权流程&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;服务发现&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;静态工具列表（需预先定义）&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;动态服务网格（实时感知可用服务）&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;跨平台兼容性&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;依赖模型提供商实现（如 OpenAI 格式）&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;协议无关（支持 Java/Python/COBOL 等异构系统）&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;错误处理机制&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;需自行实现重试/降级逻辑&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;内置熔断/限流/负载均衡策略&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;多模态支持&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;仅限文本交互&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;原生支持文本/音频/视频/二进制流&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;开发成本&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;约 50-100 行代码/工具（含参数校验/错误处理）&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;约 5-10 行配置/工具（声明式注册）&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;维护成本&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;工具变更需重新训练模型适配&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;工具热更新（无需模型调整）&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;典型延迟&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;100-300ms（工具调用链路优化后）&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;50-150ms（协议层优化+边缘计算）&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;权限控制粒度&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;工具级别（全有或全无）&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;字段级别（如允许查询订单但隐藏手机号）&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;标准化程度&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;厂商自定义（如 OpenAI/Anthropic 格式不兼容）&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;统一协议规范（各厂商实现可互操作）&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;典型应用场景&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;简单工具调用（天气查询/日历管理等）&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;white-space:pre-wrap&quot;&gt; &lt;p&gt;企业级系统集成（ERP/CRM/代码仓库等）&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/div&gt; 
&lt;p&gt;相较之下，Function Calling 更适合快速验证原型、仅需调用少量简单工具、使用单一模型厂商服务的业务场景中。&lt;/p&gt; 
&lt;p&gt;MCP 协议则更适合企业级系统集成、需要长期维护扩展、涉及多模型/多厂商协同的业务场景中。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_4&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;下一步：成为行业共识&lt;/h2&gt; 
&lt;p&gt;当下的大模型智能应用越来越多地使用到了多 Agent 系统，也逐渐在复杂业务中落地。MCP 协议的出现，或许是实现智能应用，从「单兵作战」到「群体智能」转变的一个关键技术。&lt;/p&gt; 
&lt;p&gt;在 MaaS 平台中，通过标准协议，模型可以像微服务一样被动态调用。例如，电商平台的推荐系统可同时调用文本理解、图像生成、语音合成等多个模型，无需关心底层通信细节。在 Agent 的协作中，MCP 支持智能体间的任务分发与结果聚合。例如，在自动驾驶场景中，视觉模型、路径规划模型、语音交互模型可通过 MCP 实时协同，形成闭环决策。&lt;/p&gt; 
&lt;p&gt;从去年 12 月发布至今，市场上也出现了各式 MCP Server，覆盖浏览器自动化处理、日历管理、云平台操作管理、电商服务、游戏多媒体服务、文件系统、基础服务等方面。&lt;/p&gt; 
&lt;p&gt;MCP 也是一个开放性协议，为开发者社区提供了协作基础，降低集成成本，开发者无需为每个模型定制适配层，可专注于业务逻辑。开放生态也推动标准化工具链，围绕 MCP 的调试工具、性能监控平台、安全审计框架等生态工具正在兴起，形成类似 Kubernetes 之于云原生的技术栈。&lt;/p&gt; 
&lt;div&gt; 
 &lt;table cellspacing=&quot;0&quot; style=&quot;border-collapse:collapse; border:none; table-layout:fixed; width:500px&quot;&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;MCP Server&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;主要功能&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;Anthropic MCP Server&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;提供标准化数据接口，支持 AI 模型访问本地/远程资源（如文件、数据库、API 等），增强上下文感知与任务执行能力。&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;Gitee MCP Server&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;读取仓库内容、分析 PR 变更、理解 Issue 需求，并自动执行代码管理任务，如创建 PR、合并分支、发布版本等。&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;百度地图 MCP Server&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;国内首个兼容 MCP 协议的地图服务，支持逆地理编码、地点检索、路线规划等功能，简化大模型调用地图服务的开发流程。&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;PostgreSQL Reader&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;提供对 PostgreSQL 数据库的只读访问，允许 LLMs 检查数据库模式并在受保护的事务中执行只读查询。&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;Sentry&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;用于检索和分析错误报告、堆栈跟踪和调试信息，帮助 AI 助手理解和处理应用程序问题。&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;Git Tools&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;提供 Git 仓库的交互和自动化工具，包括读取、搜索、提交、分支管理和版本控制等功能。&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;Google Maps&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;提供了全面访问 Google 地图服务的功能，包括地理编码、位置搜索、方向计算、距离计算和海拔计算等。&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;YouTube Subtitles&lt;/p&gt; &lt;/td&gt; 
    &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; &lt;p&gt;主要用于下载和提取 YouTube 视频的字幕，并通过分析字幕文本来总结视频内容，从而帮助 AI 助手更好地理解和处理视频信息。&lt;/p&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;一些常用的 MCP Server 汇总&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;不过，虽然目前看起来 MCP 前景广阔，但从实际应用角度看，MCP 协议目前存在几个关键限制。&lt;/p&gt; 
&lt;p&gt;MCP 的实现逻辑是通过安装相应的 MCP Server 到系统中，交给大模型去选择并调用，那么。当接入的外部系统较多时，AI 可能无法快速选择最优工具，甚至出现调用错误的情况。而随着客户端安装的 MCP Server 增加，存储在系统中的 Prompt 就会越长，也需要告诉大模型更多的 MCP Server 参数，进而导致上下文消耗更多 Token 或是调用混乱？&lt;/p&gt; 
&lt;p&gt;在 Anthropic 发布的 MCP &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmodelcontextprotocol.io%2Fdevelopment%2Froadmap&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Rodemap &lt;/a&gt;中也提到了 Agent Support，扩展 MCP 使其适合更加复杂的 Agent 流程，包括关注分层 Agent，交互式工作流等。&lt;/p&gt; 
&lt;p&gt;当然，还有一个更严峻的挑战——当前 MCP 尚未成为行业共识，未来是否会出现新的协议，又或是以更简洁的方式实现 AI 应用开发还未可知。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/4489239/blog/17989059</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4489239/blog/17989059</guid>
            <pubDate>Tue, 25 Mar 2025 02:23:44 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>Google AI Studio 现可通过 ai.dev 域名直接访问</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;谷歌今日宣布，其备受开发者欢迎的在线平台 Google AI Studio 迎来重要更新，现已正式启用全新且更易于记忆的域名 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fai.dev&quot; target=&quot;_blank&quot;&gt;ai.dev&lt;/a&gt;。开发者可以通过此快捷地址轻松访问这一强大的工具，探索和构建各种生成式人工智能应用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;274&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-757fa5663ef9eed60b7e2a9209a8db312bd.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Google AI Studio 最初旨在为开发者提供一个无需复杂环境搭建即可快速上手体验和利用谷歌最新 AI 模型（如 Gemini 系列）的平台。通过其直观的界面，开发者可以进行文本生成、代码生成、图像生成等多项任务，并进行快速原型设计和实验。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此次将访问入口迁移至 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fai.dev&quot; target=&quot;_blank&quot;&gt;ai.dev&lt;/a&gt;，被认为是谷歌进一步简化开发者工作流程、提升开发者体验的重要举措。一个简洁且与 AI 开发直接相关的域名，将有助于开发者更快速地找到并使用谷歌提供的生成式 AI 工具和服务。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340793</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340793</guid>
            <pubDate>Tue, 25 Mar 2025 02:19:44 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>京东回应入局具身智能一事：属实</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;上证报消息称，京东已切入具身智能领域，侧重家用场景，现已成立相关业务部门。接近京东的人士透露，京东非常重视人工智能、自动化以及机器人等领域的创新和应用，内部也有多支团队布局具身智能等前沿方向的研发。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;对此，京东官方回应媒体求证称：「属实。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此前有媒体报道称，3 月 17 日，久未在公共场合露面的京东集团董事局主席刘强东现身香港科技大学，并参观该校讲座教授贾佳亚团队的多模态模型 Mini—Gemini 等人工智能项目。此外，刘强东还参观了机器人相关实验室。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;3 月 6 日晚，京东集团发布 2024 年四季度及全年业绩报告。报告显示，2024 年第四季度，京东实现营业收入 3470 亿元，同比增长 13.4%；归母净利润为 99 亿元，同比增长 190.8%。2024 年全年，京东实现营业收入 11588 亿元，同比增长 6.8%；归母净利润为 414 亿元，同比增长 71.1%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「AI 在京东整体业务中发挥越来越重要的价值。」京东首席执行官许冉在最新一次财报电话会议上表示，考虑到京东的业务模式特点，京东在供应链方面会更加深入应用 AI。例如，在物流方面，AI 算法在供应链管理和履约环节上可以提升需求和供给匹配的精准度，并且提升物流的自动化水平。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340790</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340790</guid>
            <pubDate>Tue, 25 Mar 2025 02:14:44 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>一行命令，就能搭一个后台管理系统，前后端还都有？</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;div&gt; 
 &lt;p&gt;TinyPro 是一个开源的开发框架，用项目作者曾令卡的话来说，&lt;strong&gt;「可能没有那么高大上，但是很实用」&lt;/strong&gt;。只需要一行命令，就能用它搭建一个包含前后端的后台管理系统，非常适合缺乏专业开发人员的公司使用。&lt;/p&gt; 
 &lt;p&gt;TinyPro 使用最新技术栈，前端基于 Vue3+TypeScript，后端基于 NestJS，支持组件粒度的权限管理、页签模式、多级菜单、多种布局方式、个性化主题、国际化、Mock 数据等丰富的特性，开箱即用。&lt;/p&gt; 
 &lt;p&gt;此外，还支持在线方式快速配置角色、用户、菜单、权限、国际化词条，无需写代码，用户使用成本低，没有开发基础的设计师、产品经理也能操作。TinyPro 支持多种构建工具，如 Vite、Webpack、Rspack、Farm 等，开发者友好。&lt;/p&gt; 
 &lt;p&gt;对该项目感兴趣的朋友，3 月 28 日，来开源中国的视频号&lt;span style=&quot;color:#2980b9&quot;&gt;「OSC 开源社区」直播间&lt;/span&gt;，手把手教你&lt;strong&gt;基于 TinyPro，从 0 开始搭建一个订单管理模块，尽量模拟真实业务场景，包含前后端，支持订单的增删改查、文件上传等常用场景，麻雀虽小、五脏俱全。&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;微信扫码，预约直播&lt;/strong&gt;：&lt;/p&gt; 
 &lt;p&gt;&lt;img height=&quot;718&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d74b2920a8bc537b62e857f0741c86c490d.jpg&quot; width=&quot;400&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;直播主题：&lt;/strong&gt;TinyPro：一行命令，搭建包含前后端的后台管理系统&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;直播时间：&lt;/strong&gt;3 月 28 日周五 19:00-20:00&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;直播平台：&lt;/strong&gt;视频号 「OSC 开源社区」&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;直播嘉宾：&lt;/strong&gt;华为云高级前端工程师曾令卡、TinyVue 核心贡献者王士忠&lt;/p&gt; 
 &lt;div&gt;
   曾令卡是华为云高级前端工程师、OpenTiny 开源社区负责人，是 TinyVue 跨端跨框架组件库核心贡献者，TinyEditor 富文本编辑器创建者，深耕 Web 前端领域十多年，专注于前端组件库建设和开源社区运营。发表 100 多篇文章，有 4 个 Star 数超千的开源项目。 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;img height=&quot;253&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-feaa27fdfd5b4f9bbdb2e790f379f73e075.png&quot; width=&quot;400&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt;
   王士忠是前端工程师，TinyVue 核心贡献者，曾获 「2023 开放原子基金会年度活力开源贡献者」荣誉称号，并在 2023 年 OpenTiny 前端 Web 应用开发挑战赛中荣获二等奖。 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;img height=&quot;283&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-cfbda621636eb32838de4a551baecc5bbb0.png&quot; width=&quot;400&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;p&gt;&lt;strong&gt;直播亮点&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;手把手演示：一行命令初始化前后端系统，完成本地启动与调试&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;详解后台管理操作：角色/用户创建、菜单配置、组件权限&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;深度拆解项目架构：模块功能说明与二开指南&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;实战：模拟真实业务场景，开发包含前后端的订单管理系统&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;如何参与开源共建，以及 TinyPro 未来规划&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt; 
  &lt;strong&gt;微信扫码，预约直播：&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;img height=&quot;718&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-88873f9e4399cda57e0f28793f7cd6b489e.png&quot; width=&quot;400&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;另外，我们还建了一个交流群，一起聊聊自己喜欢的开源项目～～当然啦，如果你有什么特别棒的开源项目，可以推荐过来呀～&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-0e7c43c0b0553350855a379af00c6c7c15d.jpg&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;另外，本次直播得到了诸多社区或组织的大力支持，在此特别表示感谢：&lt;/strong&gt;&lt;/p&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;Gitee&lt;/strong&gt;&lt;/p&gt; 
     &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Gitee（码云）是开源中国于 2013 年推出的基于 Git 的代码托管平台、企业级研发效能平台，提供中国本土化的代码托管服务。&lt;br&gt; 目前，Gitee 已经有超过 1350 万名开发者，累计托管超过 3600 万个代码仓库，是中国境内规模最大的代码托管平台。同时，旗下企业级 DevOps 研发效能管理平台 Gitee 企业版已服务超过 36 万家企业。&lt;/p&gt; 
     &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;网址：&lt;a href=&quot;https://gitee.com/&quot;&gt;https://gitee.com/&lt;/a&gt;&lt;/p&gt; 
     &lt;div&gt; 
      &lt;p&gt;&lt;strong&gt;OpenTiny 社区&lt;/strong&gt;&lt;/p&gt; 
      &lt;p&gt;一套企业级开源前端开发解决方案，包含 TinyVue 组件库、TinyEngine 低代码引擎、TinyPro 后台管理模板等丰富的产品。&lt;/p&gt; 
      &lt;p&gt;链接：https://opentiny.design&lt;/p&gt; 
      &lt;p&gt;&lt;strong&gt;ToB Dev 社区&lt;/strong&gt;&lt;/p&gt; 
      &lt;p&gt;ToB Dev 关注 B 端平台，小微企服产研创交流&lt;/p&gt; 
      &lt;p&gt;链接：http://tob.tobdev.com&lt;/p&gt; 
      &lt;p&gt;&lt;strong&gt;H5-Dooring&lt;/strong&gt;&lt;/p&gt; 
      &lt;p&gt;h5-dooring 零代码搭建平台 github 近 1 万 star，商业版服务了超过 100+中大型企业&lt;/p&gt; 
      &lt;p&gt;链接：https://dooring.vip&lt;/p&gt; 
      &lt;p&gt;&lt;strong&gt;flowmixAI&lt;/strong&gt;&lt;/p&gt; 
      &lt;p&gt;AI+多模态企业办公解决方案。flowmixAI 社区已聚集了数千名 AI 数字化办公爱好者，大多程序员出生。&lt;/p&gt; 
      &lt;p&gt;链接：https://flowmix.turntip.cn&lt;/p&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;hr&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;「&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;技术领航&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;是开源中国 OSCHINA 推出的一档直播栏目，旨在为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;开源软件、商业产品、前沿技术、知名品牌活动等各类项目&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;提供一个展示平台，每周五晚上开播&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;栏目邀请项目的创始人、核心团队成员或资深用户作为嘉宾，通过路演式直播分享项目的亮点和经验，有助于提高项目的知名度，吸引更多的用户和开发者关注。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果你手上也有好的项目，想要跟同行交流分享，欢迎联系我，栏目随时开放～&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img height=&quot;537&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4dd54c1b0b817689ceefa15aa66d79cfae8.png&quot; width=&quot;400&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
  &lt;br&gt; &amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
&lt;/div&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/3859945/blog/17991565</link>
            <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/17991565</guid>
            <pubDate>Sat, 22 Mar 2025 13:42:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>IBM CEO：AI 短期内不会取代程序员</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;IBM 首席执行官阿尔温德·克里希纳（Arvind Krishna）表示，尽管特朗普政府曾大力抨击全球化，但全球贸易并没有消亡。相反，他认为美国经济增长的关键恰恰在于积极拥抱国际贸易。&lt;/p&gt; 
&lt;p&gt;在 3 月 11 日 SXSW 的访谈中，克里希纳表示：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「我坚信全球贸易的重要性，这个观点其实可以追溯到 19 世纪的经济学家。他们当时就发现，每当全球贸易额增加 10%，当地 GDP 就能提升 1%。因此，要想真正优化本地经济增长，就必须积极参与全球贸易。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;克里希纳强调，全球贸易的繁荣与人才的国际流动密不可分。他指出，美国政府和部分支持者曾主张对外国留学生和 H-1B 签证实行更严格限制，声称这些外国劳动力会削弱美国公民的就业优势。&lt;/p&gt; 
&lt;p&gt;对此，克里希纳表示：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「我们希望全球人才带着他们的知识和技能来到美国，同时我们也要培养自己的本地人才。然而，如果无法吸引全球顶尖的人才，让本地人才有机会学习与成长，本地人才的培养就会受到限制。因此，美国应该成为国际人才中心，并制定与此相适应的人才政策。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;在这场内容丰富的访谈中，克里希纳不仅谈及了地缘政治问题，也提到了备受关注的人工智能（AI）。在他看来，AI 是一种有价值的技术，但绝不是万能的解决方案。&lt;/p&gt; 
&lt;p&gt;克里希纳对近期 Anthropic 公司 CEO 达里奥·阿莫迪（Dario Amodei）的预测表示了不同意见。此前阿莫迪预测，在未来 3 到 6 个月内，90% 的代码可能都会由 AI 自动生成。&lt;/p&gt; 
&lt;p&gt;而克里希纳则认为：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「我觉得实际数字更可能是 20% 到 30% 的代码会由 AI 编写，而绝不是 90%。简单的场景确实可能很容易由 AI 完成，但也存在大量复杂的场景，AI 根本做不到。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;克里希纳进一步指出，AI 最终会提高程序员的工作效率，而非像一些 AI 批评者担忧的那样完全取代编程岗位：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「如果你能让现有人员多写 30% 的代码，你会因此减少还是增加代码总量呢？历史表明，更高效的公司往往能扩大市场份额，从而生产更多产品，最终获得更大的市场优势。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;当然，IBM 也有理由强调 AI 对就业不构成威胁，因为该公司自身就提供各种 AI 产品和服务，包括辅助编程工具。&lt;/p&gt; 
&lt;p&gt;克里希纳这番话也稍显自相矛盾。早在 2023 年，他曾公开表示，IBM 计划暂停后台部门的招聘工作，因为公司预计这些岗位很快就能被 AI 技术所取代。&lt;/p&gt; 
&lt;p&gt;谈及 AI 取代人类工作的争议时，克里希纳将此类争论比作早年计算器替代数学家，或 Photoshop 替代艺术家的担忧。他承认 AI 在知识产权领域仍存在许多尚未解决的问题，但强调这项技术本质上仍是一股积极而且增强人类能力的力量：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「AI 只是一个工具。当所有人借助这些工具做出更高质量的产品时，最终受益的是广大消费者，因为他们能够享受到品质更高的产品。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;他预测 AI 技术未来的成本会持续下降。尽管目前的推理模型（例如 OpenAI 的 o1 模型）需要大量算力和能源消耗，但克里希纳认为，新兴的技术（例如中国初创公司 DeepSeek 展示的方案）能够极大降低 AI 能耗，使之降到当前能耗的 1% 以下：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「DeepSeek 已经向我们展示，即使是小型模型也能发挥巨大作用。当然，问题在于我们是否仍需要一些巨大的模型作为起点，这是 DeepSeek 尚未谈及的地方。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;然而，虽然克里希纳认为 AI 会变得越来越普遍和廉价，但他并不认为 AI 能真正帮助人类创造全新的知识，这与 Hugging Face 联合创始人托马斯·沃尔夫（Thomas Wolf）近期的一篇文章观点一致。相反，克里希纳认为，量子计算才是加速科学发现的真正关键技术，而这也正是 IBM 长期以来重金投入的领域：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「AI 所做的都是基于已有的知识、文献、图像等去学习，而并非探索未知。我并不相信目前这一代的 AI 能够真正实现所谓的『通用人工智能』，也就是说，这些 AI 无法提供完全可靠的、超越爱因斯坦、奥本海默或所有诺贝尔奖得主所能回答的问题。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;值得注意的是，克里希纳的这些言论与 OpenAI CEO 山姆·奥特曼（Sam Altman）的看法截然不同。奥特曼此前曾预测，人类在未来数年内就可能创造出具备超级智能的 AI，大幅加速人类创新的速度。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;转载自&amp;nbsp;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1727858283%2FPjZwSjy2I&quot; target=&quot;_blank&quot;&gt;https://weibo.com/1727858283/PjZwSjy2I&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;阅读更多&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/338784&quot; target=&quot;news&quot;&gt;计算机科学家吴恩达对「AI 将取代程序员」的看法&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/338372/anthropic-ceo-ai-will-be-writing-90-of-code-in-3-6-months&quot; target=&quot;news&quot;&gt;Anthropic CEO：未来 3-6 个月内，90% 的代码将由 AI 编写&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/337519/anthropic-mike-krieger-how-software-engineering-work-changing&quot; target=&quot;news&quot;&gt;未来三年，软件工程师或将转型为「AI 代码审核员」&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/259402&quot; target=&quot;news&quot;&gt;GitHub CEO：AI 无法取代程序员&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/282381&quot; target=&quot;news&quot;&gt;李彦宏：未来可能不会存在程序员这种职业&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340717/ibms-ceo-doesnt-think-ai-will-replace-programmers-anytime-soon</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340717/ibms-ceo-doesnt-think-ai-will-replace-programmers-anytime-soon</guid>
            <pubDate>Sat, 22 Mar 2025 10:51:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>《龙架构生态白皮书（2024 年）》发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FuSWFJv8T8peD9nj9b9J_xg&quot; target=&quot;_blank&quot;&gt;龙芯中科官方正式发布了《龙架构生态白皮书（2024 年）》&lt;/a&gt;&lt;/u&gt;。官方表示，&lt;strong&gt;经过 3 年转型发展，龙芯自主 CPU 设计已经达到国际主流水平&lt;/strong&gt;，基于龙架构的新一代产品性能倍增、成本倍降，自主优势转化为性价比和软件生态优势威力初显。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;龙芯强调，真正的核心技术是买不来、换不来的。只能靠自力更生，才能彻底打破锁链、摆脱发展受制于人的命运。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;目前，龙架构已经得到主要国际软件开源社区及国产操作系统、基础应用的广泛支持，可支持运行多数主流应用，独立于 x86 和 ARM 的第三套信息技术体系和产业生态基本建成。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-be406abfe3378e1bb9fcf57d0afe574f08e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;白皮书分为龙架构生态发展现状、龙芯 CPU 及配套芯片介绍、龙芯基础软件、基于龙芯 CPU 的软硬件产品、基于龙芯 CPU 的行业实践案例、龙芯教育生态、龙芯生态培育与展望等章节。&lt;/p&gt; 
&lt;p&gt;白皮书最后，还附上了&lt;strong&gt;龙芯处理器路线图，确认面向服务器的龙芯 3C6000 系列、针对移动端的龙芯 3B6000M 都将在今年发布，适合桌面端的龙芯 3B6000 则要等到明年。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;其中，龙芯 3C6000 分为 S、Q、D 等不同版本，LA664 微架构，16/32/64 核心，主频 2.0-2.2GHz。龙芯 3B6000M 集成最多 8 个 LA364 微架构核心，主频 2.0-2.4GHz。&lt;/p&gt; 
&lt;p&gt;龙芯二号家族还将在明年新增龙芯 2K2500。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-68c6ab00f06494b8024a6e6e8de129f3320.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;白皮书主要内容——&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;★ 龙架构 CPU 新品：性能跃升，自主技术再突破&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;经过二十余年的技术积累，龙芯成功构建了面向桌面和服务器、工控和终端、嵌入式专用的三大系列芯片，形成自主 CPU 研发和软件生态建设的体系化关键核心技术积累。&lt;/p&gt; 
&lt;p&gt;2024 年，龙芯推出了面向移动终端、工业控制、通信设备等领域的多款处理器。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;★ 基础软件生态：开源共建，破局生态壁垒&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;白皮书从国际开源软件生态、基础软件技术体系、操作系统发行版、龙芯平台特色软件四大维度，全面阐述了龙芯 2024 年基础软件生态建设的核心成果。&lt;/p&gt; 
&lt;p&gt;同时，白皮书新增了基于开源鸿蒙社区版本开发的新型操作系统 Loonghong，以及龙芯跨平台融合方案等特色软件。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;★ 软硬件产品：千款产品，引领产业变革&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;龙芯与国内众多一线品牌合作，共同推出上千款 PC、服务器、信息化一体机、网络通信设备等软硬件产品。这&lt;/p&gt; 
&lt;p&gt;些成果不仅彰显了龙芯在产品化能力上的领先优势，更标志着国产信息技术生态实现从「可用」到「好用」的跨越发展。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;★ 行业实践案例: 多场景落地，赋能千行百业&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;龙芯在电子政务、能源、通信、金融、交通、医疗等行业已形成成熟的应用方案，为各领域的信息化建设提供有力支撑。&lt;/p&gt; 
&lt;p&gt;白皮书新增了龙芯在税务、先进制造、仪器仪表等领域的最新实践案例，展现了龙芯在多元化行业场景中的创新应用能力，同时也为国产信息技术在更多领域的落地应用提供示范与借鉴。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;★ 教育生态建设：产教融合，培育创新人才&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;白皮书新增「龙芯教育生态」专章，系统阐述了龙芯在高校专业教育、基础教育信息技术应用创新和信创特色化教育等领域的生态建设成果。&lt;/p&gt; 
&lt;p&gt;从学科竞赛到「百芯」计划，从人才认证到万套试点，龙芯始终致力于为我国芯片产业发展培养优秀人才，实现信息技术教学「授人以鱼」向「授人以渔」的转变。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;白皮书地址：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.kdocs.cn%2Fl%2Fcay9SNLZ1m0s%3Fsessionid%3D-954285235&quot; target=&quot;_blank&quot;&gt;https://www.kdocs.cn/l/cay9SNLZ1m0s?sessionid=-954285235&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340714</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340714</guid>
            <pubDate>Sat, 22 Mar 2025 10:27:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>美团王莆中：正研发 Native AI 产品</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;自上周五美团公布其 AI 进展后，美团核心本地商业 CEO 王莆中今日在社交媒体即刻上透露，美团正在内部的数据、场景和产业优势做一款 NativeAI 产品，&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;他表示，这款应用的愿景是「每个人都能有一个专属的生活小秘书」。项目由王莆中发起，目前在招聘 AI 研发和产品人员。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;267&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-bd91af9bf07365d323d0f1cd4e00b51eb63.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相关阅读：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/340605&quot; target=&quot;_blank&quot;&gt;美团王兴：AI 策略是进攻而非防守，GPU 资源投入累计达数十亿元&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340713</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340713</guid>
            <pubDate>Sat, 22 Mar 2025 10:12:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>LiblibAI 接入阿里通义大模型，推出 10 秒 AI 视频生成功能</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;国内 AI 图像创作平台 LiblibAI 近日宣布接入阿里通义系列大模型。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此次接入后，基于万相最新开源模型，LiblibAI 推出了文生视频和图生视频功能。用户只需输入文本提示词，或者上传图片，就能快速生成 10 秒短视频。这一功能的实现，让创意转化为视频内容变得更加高效便捷，无论是用于短视频创作、创意展示还是其他场景，都极大地降低了视频制作门槛。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;除了视频生成功能，LiblibAI 还借助阿里大模型 Qwen-turbo 打造了提示词优化窗口。这个窗口能通过系统提示，帮助用户优化输入内容，并且支持将中文提示词自动翻译成模型可理解的英文提示词。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;接入 Qwen-turbo 后，LiblibAI 提示词优化时间缩短了超过 50%，大大提升了 AI 创作的效率和用户体验，让创作者能更专注于创意表达，减少在技术操作上耗费的时间。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;336&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-db873de161757a7b20dfabf5fb583a9914e.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;作为国内首家通过国家备案的 AI 平台，LiblibAI 已积累了超 2000 万创作者，平台上的原创模型数量超过 10 万个。凭借「开源模型 + 模块化工具流」的创新平台模式，LiblibAI 构建了一个涵盖 AI 内容创作、分享、版权管理与售卖的完整生态链。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340704</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340704</guid>
            <pubDate>Sat, 22 Mar 2025 09:21:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>万字长文，带你读懂 Anthropic MCP</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;div&gt; 
 &lt;span id=&quot;OSC_h1_1&quot;&gt;&lt;/span&gt; 
 &lt;h1&gt;背景&lt;/h1&gt; 
 &lt;div&gt;
   随着大模型的快速发展，如何让模型与企业数据、工具高效对接成为核心挑战。传统方式需为每个数据源/工具编写定制化代码，导致开发成本高、扩展性差、安全性低，形成「烟囱式开发」。 
 &lt;/div&gt; 
 &lt;div&gt;
   如何让大语言模型与外部系统交互，已经成为 AI 系统急需解决的问题。从 2023 年到现在，业界也有过多种尝试，我们也一起来梳理一下： 
 &lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     原始时代——prompt 转 json。大家现在回头看看写在代码里面的 prompt 是否还有大量的提示词转结构化数据的要求。优点就是可以很快的事项让大模型给出符合格式的结果。缺陷也是很大，就是不可靠。常遇到的比如 json 的 key 错误，json 格式不对，时间格式不匹配。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     农耕时代——Plugins。2023 年 3 月份，OpenAI 官方发布了重磅的「ChatGPT plugins」。也是大模型首次允许通过插件与外部应用交互的能力，也给了 AI 应用很大的想象。比如当前大模型都具备的实时信息检索，也是这个时候引入的。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     铁器时代——Function Calling。2023 年 6 月，OpenAI 在 GPT-3.5 和 GPT-4 模型中首次引入 Function Calling 机制，赋予模型调用外部函数的能力，使其能够结合真实的数据或计算结果，而非单纯依赖模型自身的推理能力，这样不仅可以提高模型的可控性和准确性，还能让其更适应实际业务需求。Function Calling 的意义在于让大模型结果闭环且可控，在大模型流程中加入函数能力，让其获取到外部数据，不必再自行幻想出来结果，并且结构化的输入给到大模型，输出的结果更加稳定。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     蒸汽时代——Agent 框架 Tools。Agent 可以根据任务动态选择 Tool 是完成任务，所以 Tool 应该是大模型能力的补充。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     电气时代——MCP。在上一时代中的 Agent 的 Tool 诞生可以补充大模型的缺失的能力和数据，但是还需要一个大问题，一个企业或者应用面对不同的大模型不同的系统如何快速集成到一起，一个个是开发 Tools？这是一个重复且繁琐的工作。为此本文的主角——MCP 协议诞生了。 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h1_2&quot;&gt;&lt;/span&gt; 
 &lt;h1&gt;MCP 是什么？&lt;/h1&gt; 
 &lt;div&gt;
   2024 年 11 月 25 日 Anthropic 发布的文章： 
  &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.anthropic.com%2Fnews%2Fmodel-context-protocol&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Introducing the Model Context Protocol&lt;/a&gt; ，标志着 MCP 协议诞生。 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;img src=&quot;https://dedao.feishu.cn/space/api/box/stream/download/asynccode/?code=NDI4NzM3MTZmYTgyNTFkYTZmOGI4NjczZjU2MzBjODVfbTNtOHpRZTVjWkdaNFdrVjJMWmk2SjdTMzIxTEdBckxfVG9rZW46Q21VUmJHaURPb3RzM2l4U1JaRmN3SlNzbjllXzE3NDI3MjM2NDc6MTc0MjcyNzI0N19WNA&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   按照博文所说：MCP （Model Context Protocol，模型上下文协议）为连接 AI 系统和数据源提供了一个通用的开放标准，用单一协议取代了分散的集成。换一个说法是 
  &lt;strong&gt;以一致的方式将各种数据源、工具和功能连接到 AI 模型&lt;/strong&gt;中间协议。可以说 MCP 协议类似大家现在使用的 type-c 接口，可以让不同的设备通过相关的接口协议连接在一起，组成不同功能的系统。更通俗的方式类比是，你拿着一个万能翻译器，去不同的国家和地区旅游，可以以不同的人员通过万能翻译器实时对话，这个万能翻译器就是 MCP 协议。 
 &lt;/div&gt; 
 &lt;div&gt;
   针对 MCP 有几点需要注意： 
 &lt;/div&gt; 
 &lt;ol&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     Function Calling 是大模型与外部数字世界的交互方式。MCP 是 MCP host(chatbot 或者 AI 工具) 与外部工具/资源之间的交互方式。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP 比 Plugins 规范性更好，定义了清晰的数据格式、传输协议、身份验证方法等，能力也更强。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     GPTs 是 OpenAI 的应用市场，主要是给人使用的。MCP server 主要是给 AI 使用的，不直接给人用。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP 与 Agent 是合作关系，彼此有对应的关系： 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;div&gt; 
  &lt;table cellspacing=&quot;0&quot; style=&quot;border-collapse:collapse; border:none; table-layout:fixed; width:500px&quot;&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Agent 能力 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        MCP 特性 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        工具（技能）调用 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Tool 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        LUI 交互 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Prompt 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        感知 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Resource（Changed Notification） 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        深度思考 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Resource（Listing/Reading Resources） 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   那为什么需要 MCP 协议呢？下面通过一张图来说明。 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;暂时无法在飞书文档外展示此内容&lt;/span&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   可以看到，MCP 协议将原本 M×N 集成问题（M AI 客户端×N 数据源）转化为 M+N 问题-任何 MCP 兼容的 AI 客户端都可以与任何 MCP 兼容的数据源或工具一起工作。 
 &lt;/div&gt; 
 &lt;div&gt;
   为什么需要 MCP？ 
 &lt;/div&gt; 
 &lt;ol&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP 的出现可以解决大模型的数据和能力补充问题，大模型的训练是在大量的数据上训练出来的，这些知识是过去的，也可能是不完整的，比如今天的天气数据，我们团队刚刚写出来的产品报告，需要帮助我在饿了么订外卖等。这些数据和能力是大模型不具备的。有了 MCP 后大模型就可以获取到最新的数据，拥有更多的能力补充，可以极大的降低幻觉，让 AI 更加可靠。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP 是通用的 AI 模型集成方法。上面的图已经说明了，没有 MCP 时候，AI 模型访问多个系统意味着要处理大量的应用编程接口、软件开发工具包和身份验证方法。而且服务之间的连接会随着功能的增加出现指数式增长，必然会导致系统脆弱。MCP 用一个标准接口取代了这种复杂性，大大简化了开发。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP 不绑定任何厂商。Anthropic 开源了 MCP 规范，并由社区驱动。当前与 AI 模型是一致的，开放性才是不断增长的系统，大家一起努力才可以把生态构建出来。 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;div&gt;
   总之出现 MCP，根本原因是 
  &lt;strong&gt;大模型百家争鸣，各有所长并且数据孤岛的壁垒无法打破&lt;/strong&gt;。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h1_3&quot;&gt;&lt;/span&gt; 
 &lt;h1&gt;MCP 可以做什么？&lt;/h1&gt; 
 &lt;div&gt;
   MCP 作为连接 AI 模型与外部系统的标准化协议，其核心价值在于打破数据孤岛、提升模型交互能力，并推动 AI 从「被动响应」向「主动执行」转型。目前可以预知到的 MCP 的应用场景有四大核心场景。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h2_4&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;场景一 AI 模型治理与合规管理&lt;/h2&gt; 
 &lt;div&gt;
   军政、金融、医疗等强监管行业需对 AI 访问权限进行细粒度控制，例如限制模型仅读取脱敏数据或禁止写入关键系统。通过 MCP 的数据沙箱机制和权限审批流程，实现动态策略调整与操作审计，满足 GDPR、HIPAA 等法规要求。MCP 服务器可以支持不同的访问策略并且可以实现访问时进行身份验证，有效地充当 AI 模型和企业之间的门神。内部数据的获取和响应都是通过 MCP 服务器，类似数据网关，实时监控模型行为，发现异常（如数据泄露风险）时自动触发防护机制（如阻断敏感 API 调用）。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h2_5&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;场景二，实时上下文增强与知识更新&lt;/h2&gt; 
 &lt;div&gt;
   AI 模型对过去交互的记忆有限，因此在推理时提供相关的、实时的上下文至关重要。MCP 服务器连接实时数据源（如 OS Drive、Slack、数据库），确保 AI 响应基于最新信息（如客户最新订单、库存状态）。通过 MCP 资源功能加载专业文档（如法律条款、产品手册），提升 AI 在垂直领域的专业性（如法律咨询、技术支持）。通过 MCP 服务器允许 AI 模型可以在需要的时候从指定的渠道获取到相关的数据甚至可以进行相关的操作。比如创建一个 Excel 文档将收集和整理好的简历写入。在客服场景中，可以关联用户的信息（订单、兴趣、）和之前与客服的沟通内容，结合企业内的 SOP，为用户解决问题。还有在 AI 编码的场景也是有很好的应用，AI 模型可以通过 MCP 服务器获取 git 仓库的代码和接口文档、产品设计、方案设计甚至是编码规范，可以为程序员提供更好的编码提示和建议。 
 &lt;/div&gt; 
 &lt;div&gt;
   同时，使用结构化格式传递信息避免歧义，可以更有效地指导 AI 模型推理。更可靠的知识源，结合结构化的数据上下文，AI 模型就可以应用在要求可靠性更高的场景，比如医疗诊断。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h2_6&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;场景三，工具生态扩展与系统互联&lt;/h2&gt; 
 &lt;div&gt;
   试想一下，这样的场景。用户反馈 APP 的一个 bug 上来后，AI 模型自动根据 Git 的 MCP 服务器，结合产品文档需求和用户描述，自动化实现 bug 修复并通过 CI/CD MCP 服务器实现服务上线。MCP 协议将会是 AI 模型和各个工具之间互联互动的桥梁。MCP 如果成为了标准协议，将各个 AI 模型和丰富的工具和平台链接起来，打破信息孤岛，让 AI 的自动化升级为 AI 智能化。MCP 可以成为 AI 模型对工具和平台的监督和驱动大脑，让它们协同的完成工作。 
 &lt;/div&gt; 
 &lt;div&gt;
   对于不同的企业和平台来说，MCP 可以让不同 AI 模型的能力获取最大化，也建议让 AI 模型方案统一化。 
  &lt;strong&gt;AI 模型不应该只是在浏览器上，也不应该只是在 APP 应用上，而是应该集成到操作系统中，在系统层面获得更大的能力&lt;/strong&gt;。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h2_7&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;场景四，企业级智能助手与 Agent 构建&lt;/h2&gt; 
 &lt;div&gt;
   MCP 作为企业内部 AI Agent 的「数据总线」，整合 CRM、MES 等多系统数据，例如制造业 AI Agent 通过 MCP 协调 IoT 传感器与生产调度系统。企业部署 MCP 驱动的虚拟助手，可统一响应员工 IT 支持、审批进度查询等需求，响应时效缩短至秒级。在医院，可通过 MCP 构建 AI 助手，实时分析患者病史并提醒医生药物相互作用风险。MCP 可以让 Agent 的构建更加强大。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h1_8&quot;&gt;&lt;/span&gt; 
 &lt;h1&gt;MCP 有什么？&lt;/h1&gt; 
 &lt;span id=&quot;OSC_h2_9&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;组件&lt;/h2&gt; 
 &lt;div&gt;
   MCP 本质还是一种 C/S 架构，官方给出的架构图： 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;img src=&quot;https://dedao.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGQ4M2I3ZWQ1MDQzZjQzNjZiYTg0ZDkwMzBlN2MwNjNfZDVSUms3Y3FlTmRsMHZWaXVpMWVMNEFJd1BiNVE5N2hfVG9rZW46VXdJYWJ2NlJlb1lrWTZ4Skh4SWNubFhQbkhoXzE3NDI3MjM2NDc6MTc0MjcyNzI0N19WNA&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   MCP 由三个核心组件构成：Host、Client 和 Server。 
 &lt;/div&gt; 
 &lt;ol&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP Hosts: 负责接收用户提问并与 AI 模型交互，充当容器和协调者： 
   &lt;/div&gt; 
   &lt;ol&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       创建和管理多个客户端实例 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       控制客户端连接权限和生命周期 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       协调 AI/LLM 集成和采样 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       管理 Clients 之间的上下文聚合 
     &lt;/div&gt; &lt;/li&gt; 
   &lt;/ol&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP Clients：与服务器保持 1:1 连接的协议客户端，将 Server 连接到的客户端中，组成不同功能的应用： 
   &lt;/div&gt; 
   &lt;ol&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       和每个 server 建立一个有状态的会话 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       处理协议协商和能力交换 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       双向路由协议消息 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       管理订阅和通知 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       维护 servers 之间的安全边界 
     &lt;/div&gt; &lt;/li&gt; 
   &lt;/ol&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP Servers： 轻量级程序，每个程序都通过标准化模型上下文协议公开特定功能： 
   &lt;/div&gt; 
   &lt;ol&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       通过 MCP 原语暴露 resources、tools 和 prompts 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       通过 client 提供的接口请求 sampling 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       可以是本地进程或远程服务 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       具备特定的功能 
     &lt;/div&gt; &lt;/li&gt; 
   &lt;/ol&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;span id=&quot;OSC_h2_10&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;协议&lt;/h2&gt; 
 &lt;div&gt;
   MCP 的规范中协议层、传输层和消息类型： 
 &lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     协议层处理消息框架、请求/响应链接和高级通信模式。具备有状态的连接和能力协商。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     传输层处理客户端和服务器之间的实际通信， 
    &lt;strong&gt;MCP 所有传输均使用&lt;/strong&gt; 
    &lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jsonrpc.org%2F&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;JSON-RPC&lt;/a&gt;&lt;/strong&gt; 
    &lt;strong&gt; 2.0 来交换消息&lt;/strong&gt;。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     消息类型定义请求和响应格式和处理机制。 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;span id=&quot;OSC_h3_11&quot;&gt;&lt;/span&gt; 
 &lt;h3&gt;传输层&lt;/h3&gt; 
 &lt;div&gt;
   MCP 目前定义了两种标准的 client-server 通信传输机制：stdio（标准输入输出）和基于 SSE 的 HTTP。此外，客户端和服务器也可以以可插拔的方式实现自定义传输机制。 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;table cellspacing=&quot;0&quot; style=&quot;border-collapse:collapse; border:none; table-layout:fixed; width:500px&quot;&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        通信传输机制 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        部署方式 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        网络要求 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        场景 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        应用 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        &amp;nbsp; 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Stdio transport 标准传输 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        本地子进程 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        无需网络 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;ul&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          本地开发 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          高效实现同机通讯 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          简单的流程管理 
        &lt;/div&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        filesystem 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        &amp;nbsp; 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        HTTP with SSE transport 带有 SSE 传输的 HTTP 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        独立服务器进程 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        需要网络连接 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;ul&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          分布式部署、多客户端 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          对于需要 HTTP 兼容性的场景使用 SSE 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          考虑安全影响，包括身份验证和授权 
        &lt;/div&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        search 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        &amp;nbsp; 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h3_12&quot;&gt;&lt;/span&gt; 
 &lt;h3&gt;消息类型&lt;/h3&gt; 
 &lt;div&gt;
   所有在 MCP clients 和 servers 之间的消息必须遵循 JSON-RPC 2.0 规范，基于 
  &lt;strong&gt;JSON-RPC 2.0&lt;/strong&gt;，确保消息格式结构统一。该协议定义了三种基本类型的消息： 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;table cellspacing=&quot;0&quot; style=&quot;border-collapse:collapse; border:none; table-layout:fixed; width:500px&quot;&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        消息类型 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        描述 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        约束 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Requests 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        用于具体操作的消息 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;ul&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          必须包含唯一的 ID 和方法名称 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          ID 不能为 null 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          请求 ID 在同一会话中不得被请求者之前使用过 
        &lt;/div&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Responses 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        请求的响应 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;ul&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          必须包含与请求相同的 ID 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          必须设置 result 或 error 之一。不得同时出现 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          错误代码必须是整数 
        &lt;/div&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Notifications 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        单向消息，不需要回复 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        不得包含 ID 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h4_13&quot;&gt;&lt;/span&gt; 
 &lt;h4&gt;Requests&lt;/h4&gt; 
 &lt;div&gt;
   Requests 可以从 Client 端或者 Server 端发起，其格式为： 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  jsonrpc: &quot;2.0&quot;;
  id: string | number;
  method: string;
  params?: {
    [key: string]: unknown;
  };
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   在 MCP Server 中对请求需要做到： 
 &lt;/div&gt; 
 &lt;ol&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     彻底验证输入，验证 JSON-RPC 格式 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     使用类型安全架构 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     妥善处理错误 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     实施超时处置 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;div&gt;
   在 MCP 中定义的 requests 的业务类型： 
 &lt;/div&gt; 
 &lt;div&gt;
   表格，还在加载中，请等待加载完成后再尝试复制 
 &lt;/div&gt; 
 &lt;div&gt;
   initialized 是非常重要的阶段，是 MCP Client 和 MCPServer 之间的第一次交互。类似 HTTPS 一样需要确认彼此协议版本的兼容性、交换和协商各自能力。Client 必须发送其支持的协议版本，如果 server 支持请求的协议版本，则必须以相同的版本进行响应。否则，server 必须以其支持的其他协议版本进行响应。这应该是 server 支持的最新版本。 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;initialized 能力协商&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   表格，还在加载中，请等待加载完成后再尝试复制 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Prompts&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   MCP 还提供 Prompt 能力，可将重复使用的提示模板和工作流程放在 Server 以便 Client 使用。Prompts 的主要价值是对 Resource 的内容进行解释，让 LLMs 能够更好的理解返回的数据，从而更好的完成任务。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h4_14&quot;&gt;&lt;/span&gt; 
 &lt;h4&gt;Responses&lt;/h4&gt; 
 &lt;div&gt;
   Responses 是对 requests 的回复，其格式为： 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  jsonrpc: &quot;2.0&quot;;
  id: string | number;
  result?: {
    [key: string]: unknown;
  }
  error?: {
    code: number;
    message: string;
    data?: unknown;
  }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   MCP 的核心就是将资源暴露给到 AI 模型，Response 的类型是多种多样的，有文本、二进制文件、API 等等。Server 拥有的 Responses 如何让 AI 模型知道呢？这就需要 Direct resources 直连资源，MCP Server 通过 esources/list 端点公开固定的资源列表，每个资源的属性包含： 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{  
    uri: string;           // Unique identifier for the resource  
    name: string;          // Human-readable name  
    description?: string;  // Optional description  
    mimeType?: string;     // Optional MIME type
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   如果 Server 端的 Responses 的生成是动态资源，那么还可以通过 Resource templates 来支持。在实际中，Server 的 Resource 并不会固定不变，而是时常变化，MCP 提供了资源更新（Resource updates）机制： 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;table cellspacing=&quot;0&quot; style=&quot;border-collapse:collapse; border:none; table-layout:fixed; width:500px&quot;&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        机制类型 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        机制描述 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        应用场景 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        核心特点 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        资源列表变更通知 
      &lt;/div&gt; 
      &lt;div&gt;
        &amp;nbsp; 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        服务器通过 notifications/resources/list_changed 通知客户端资源列表结构性变化 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        目录结构变动、新增资源类型等全局性更新 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;ul&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          结构化变更推送 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          客户端需主动拉取更新 
        &lt;/div&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        资源内容实时订阅 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        客户端通过 resources/subscribe 订阅资源，服务器通过 notifications/resources/updated 推送变更 
      &lt;/div&gt; 
      &lt;div&gt;
        &amp;nbsp; 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        日志文件追加、API 数据刷新等动态内容更新 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;ul&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          支持实时推送 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          可随时取消订阅 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          客户端主动拉取最新内容 
        &lt;/div&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Streamable HTTP 传输 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        新增流式传输协议，支持断点续传、无状态服务器及动态 SSE 升级 
      &lt;/div&gt; 
      &lt;div&gt;
        &amp;nbsp; 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        高并发场景、云平台部署、需要兼容 CDN/API 网关的场景 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;ul&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          断点续传解决掉线问题 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          无状态服务器降低部署成本 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          兼容标准 HTTP 生态 
        &lt;/div&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   现在 AI 模型已经知道 Server 有哪些资源了，还需要可以读取到这么 Resource，就需要使用 resources/read 请求。 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt;
   在 MCP Server 中对响应需要做到： 
 &lt;/div&gt; 
 &lt;ol&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     对长时间操作使用进度标记，可逐步报告进度 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     使用适当的错误代码，包含有用的错误消息和发生错误时清理资源 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     不要泄露敏感信息并记录与安全相关的错误 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;span id=&quot;OSC_h4_15&quot;&gt;&lt;/span&gt; 
 &lt;h4&gt;Notifications&lt;/h4&gt; 
 &lt;div&gt;
   Notifications 是从 client 发送到 server 或反向发送的，不需要回复。其格式为： 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  jsonrpc: &quot;2.0&quot;;
  method: string;
  params?: {
    [key: string]: unknown;
  };
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h3_16&quot;&gt;&lt;/span&gt; 
 &lt;h3&gt;案例&lt;/h3&gt; 
 &lt;div&gt;
   本小节以 github.com/mark3labs/mcp-filesystem-server 为例介绍 MCP 相关的消息类型。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h4_17&quot;&gt;&lt;/span&gt; 
 &lt;h4&gt;&lt;strong&gt;初始化会话：initialized&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Request&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;method&quot;: &quot;initialize&quot;,
    &quot;params&quot;: {
        &quot;protocolVersion&quot;: &quot;1.0&quot;,
        &quot;capabilities&quot;: {
            &quot;roots&quot;: {
                &quot;listChanged&quot;: true
            }
        },
        &quot;clientInfo&quot;: {
            &quot;name&quot;: &quot;test-client&quot;,
            &quot;version&quot;: &quot;1.0.0&quot;
        }
    }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Responses&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;result&quot;: {
        &quot;protocolVersion&quot;: &quot;2024-11-05&quot;,
        &quot;capabilities&quot;: {
            &quot;resources&quot;: {
                &quot;subscribe&quot;: true,
                &quot;listChanged&quot;: true
            },
            &quot;tools&quot;: {

            }
        },
        &quot;serverInfo&quot;: {
            &quot;name&quot;: &quot;secure-filesystem-server&quot;,
            &quot;version&quot;: &quot;0.4.1&quot;
        }
    }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h4_18&quot;&gt;&lt;/span&gt; 
 &lt;h4&gt;&lt;strong&gt;发现可用的工具:tools/list&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Request&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;method&quot;: &quot;tools/list&quot;,
    &quot;params&quot;: {
    }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Responses&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;result&quot;: {
        &quot;tools&quot;: [
            {
                &quot;description&quot;: &quot;Create a new directory or ensure a directory exists.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;,
                    &quot;properties&quot;: {
                        &quot;path&quot;: {
                            &quot;description&quot;: &quot;Path of the directory to create&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;path&quot;
                    ]
                },
                &quot;name&quot;: &quot;create_directory&quot;
            },
            {
                &quot;description&quot;: &quot;Retrieve detailed metadata about a file or directory.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;,
                    &quot;properties&quot;: {
                        &quot;path&quot;: {
                            &quot;description&quot;: &quot;Path to the file or directory&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;path&quot;
                    ]
                },
                &quot;name&quot;: &quot;get_file_info&quot;
            },
            {
                &quot;description&quot;: &quot;Returns the list of directories that this server is allowed to access.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;
                },
                &quot;name&quot;: &quot;list_allowed_directories&quot;
            },
            {
                &quot;description&quot;: &quot;Get a detailed listing of all files and directories in a specified path.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;,
                    &quot;properties&quot;: {
                        &quot;path&quot;: {
                            &quot;description&quot;: &quot;Path of the directory to list&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;path&quot;
                    ]
                },
                &quot;name&quot;: &quot;list_directory&quot;
            },
            {
                &quot;description&quot;: &quot;Move or rename files and directories.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;,
                    &quot;properties&quot;: {
                        &quot;destination&quot;: {
                            &quot;description&quot;: &quot;Destination path&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;source&quot;: {
                            &quot;description&quot;: &quot;Source path of the file or directory&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;source&quot;,
                        &quot;destination&quot;
                    ]
                },
                &quot;name&quot;: &quot;move_file&quot;
            },
            {
                &quot;description&quot;: &quot;Read the complete contents of a file from the file system.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;,
                    &quot;properties&quot;: {
                        &quot;path&quot;: {
                            &quot;description&quot;: &quot;Path to the file to read&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;path&quot;
                    ]
                },
                &quot;name&quot;: &quot;read_file&quot;
            },
            {
                &quot;description&quot;: &quot;Recursively search for files and directories matching a pattern.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;,
                    &quot;properties&quot;: {
                        &quot;path&quot;: {
                            &quot;description&quot;: &quot;Starting path for the search&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;pattern&quot;: {
                            &quot;description&quot;: &quot;Search pattern to match against file names&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;path&quot;,
                        &quot;pattern&quot;
                    ]
                },
                &quot;name&quot;: &quot;search_files&quot;
            },
            {
                &quot;description&quot;: &quot;Create a new file or overwrite an existing file with new content.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;,
                    &quot;properties&quot;: {
                        &quot;content&quot;: {
                            &quot;description&quot;: &quot;Content to write to the file&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;path&quot;: {
                            &quot;description&quot;: &quot;Path where to write the file&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;path&quot;,
                        &quot;content&quot;
                    ]
                },
                &quot;name&quot;: &quot;write_file&quot;
            }
        ]
    }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h4_19&quot;&gt;&lt;/span&gt; 
 &lt;h4&gt;&lt;strong&gt;发现可用的工具:tools/call&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Request&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;method&quot;: &quot;tools/call&quot;,
    &quot;params&quot;: {
        &quot;name&quot;: &quot;list_allowed_directories&quot;,
        &quot;arguments&quot;: {
            &quot;path&quot;: &quot;/Users/ouerqiang/Downloads/1.txt&quot;
        }
    }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Responses&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;result&quot;: {
        &quot;content&quot;: [
            {
                &quot;type&quot;: &quot;text&quot;,
                &quot;text&quot;: &quot;Allowed directories:\n\n/Users/ouerqiang/project/gopath/src/github.com/mark3labs/mcp-filesystem-server (file:///Users/ouerqiang/project/gopath/src/github.com/mark3labs/mcp-filesystem-server)\n/Users/ouerqiang/Downloads (file:///Users/ouerqiang/Downloads)\n&quot;
            }
        ]
    }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h3_20&quot;&gt;&lt;/span&gt; 
 &lt;h3&gt;发现可用的资源：resources/list&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Request&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;result&quot;: {
        &quot;content&quot;: [
            {
                &quot;type&quot;: &quot;text&quot;,
                &quot;text&quot;: &quot;Allowed directories:\n\n/Users/ouerqiang/project/gopath/src/github.com/mark3labs/mcp-filesystem-server (file:///Users/ouerqiang/project/gopath/src/github.com/mark3labs/mcp-filesystem-server)\n/Users/ouerqiang/Downloads (file:///Users/ouerqiang/Downloads)\n&quot;
            }
        ]
    }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Responses&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;resources&quot;: [
        {
            &quot;uri&quot;: &quot;file://&quot;,
            &quot;name&quot;: &quot;File System&quot;,
            &quot;description&quot;: &quot;Access to files and directories on the local file system&quot;
        }
    ]
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   其他的格式就请各位同学自行去验证。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h2_21&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;服务层&lt;/h2&gt; 
 &lt;div&gt;
   MCP 服务器可以提供三种主要类型的功能： 
 &lt;/div&gt; 
 &lt;ol&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     Resources：客户端可以读取的类似文件的数据（例如 API 响应或文件内容） 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     Tools：可由 LLM 调用的函数（需经用户批准） 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     Prompts：预先编写的模板，帮助用户完成特定任务 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;div&gt;
   上面的三个功能并不要求 MCP Server 全部提供，可以提供一种或者多种类型的功能。 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt;
   看着也是在 MCP Server 实现了对外部服务的 API 对接给到 AI 模型，为什么还需要多加 MCP，直接让 AI 模型直接调用外部服务 API 不是更好吗？这是因为，MCP 不仅实现了 API 的功能，还带来了更高的标准化和灵活性。 
 &lt;/div&gt; 
 &lt;div&gt;
   表格，还在加载中，请等待加载完成后再尝试复制 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h2_22&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;客户端&lt;/h2&gt; 
 &lt;div&gt;
   对于大多数开发者而言，主要开发的模块还是 MCP Server，而 MCP Client 主要面对的还是直接的用户。客户端可以向服务器提供以下功能： 
 &lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     Sampling： 服务器发起的代理行为和递归交互。采样是一个强大的 MCP 功能，它允许服务器通过客户端请求 AI 模型完成，从而在保持安全性和隐私的同时实现复杂的代理行为。换句话说，Sampling 把 MCP Server 从给 AI 模型提供资源的服务变成一个使用 AI 模型的用户。 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt;
   在业界中也有很多支持 MCP 的应用程序，每个客户端可能支持不同的 MCP 功能，从而允许与 MCP 服务器进行不同程度的集成。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h3_23&quot;&gt;&lt;/span&gt; 
 &lt;h3&gt;业界 MCP Client&lt;/h3&gt; 
 &lt;div&gt;
   https://modelcontextprotocol.io/clients 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;img src=&quot;https://dedao.feishu.cn/space/api/box/stream/download/asynccode/?code=YjExNDVlZDZjNjNhMTRlN2Q3MTliYjc5MTNmZmJlMzZfVW9QNmVwa2dtZUlob0dlNkhtWHZ5R1N5ak5PM1RMSEJfVG9rZW46RlRLemJKRFQ0b0ZZWG54bnRnTmNrSkhvblI4XzE3NDI3MjM2NDc6MTc0MjcyNzI0N19WNA&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h1_24&quot;&gt;&lt;/span&gt; 
 &lt;h1&gt;MCP 实践&lt;/h1&gt; 
 &lt;div&gt;
   本人主要使用 Golang 为主，但是官网上只提供了 Python、TypeScript、Java、Kotlin 的 SDK，并未提供 golang。我也查看了 github 库，也亲身验证了一些框架，目前比较好的 Go MCP 框架有两个： 
 &lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     https://github.com/metoro-io/mcp-golang 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     https://github.com/mark3labs/mcp-go 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt;
   我们可以对比一下这两个框架。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h2_25&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;对比&lt;/h2&gt; 
 &lt;span id=&quot;OSC_h3_26&quot;&gt;&lt;/span&gt; 
 &lt;h3&gt;核心功能对比&lt;/h3&gt; 
 &lt;div&gt;
   表格，还在加载中，请等待加载完成后再尝试复制 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h3_27&quot;&gt;&lt;/span&gt; 
 &lt;h3&gt;技术选型决策矩阵&lt;/h3&gt; 
 &lt;div&gt;
   表格，还在加载中，请等待加载完成后再尝试复制 
 &lt;/div&gt; 
 &lt;div&gt;
   从代码的设计、使用灵活度和对外部框架的集成而言，使用 
  &lt;strong&gt;metoro-io/mcp-golang&lt;/strong&gt;是不错的选择。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h1_28&quot;&gt;&lt;/span&gt; 
 &lt;h1&gt;总结&lt;/h1&gt; 
 &lt;div&gt;
   MCP 作为 Anthropic 开源的 AI 系统与数据源交互协议，凭借其统一性、可控性和高效性在 AI 集成领域展现出潜力。该协议通过标准化工具调用、资源访问和提示模板，解决了传统插件或自定义工具开发的高成本问题，尤其为非技术人员提供了便捷的 AI 能力扩展途径。例如，开发者可通过 MCP Server 快速暴露功能，供 Claude、Cursor 等客户端直接调用，显著提升跨系统协作的灵活性。 
 &lt;/div&gt; 
 &lt;div&gt;
   然而，MCP 仍面临多重挑战。协议公布仅半年，主流编程语言（如 Go、Rust）的支持尚不完善，生态建设仍处于早期阶段，可用工具数量和质量难以满足复杂场景需求。同时，LangChain 创始人 Nuno Campos 指出，当前模型对工具的调用成功率仅约 50%，且 MCP 的双向通信机制和本地化部署方式增加了实现复杂度，对比 IBM 新推出的 ACP 协议，其在无状态设计、跨平台兼容性等方面可能存在劣势。 
 &lt;/div&gt; 
 &lt;div&gt;
   尽管如此，MCP 的前景值得期待。随着基础模型能力的迭代优化，工具调用准确率有望提升。若协议能进一步简化部署流程（如云端托管）、扩大语言支持范围，并借助社区力量构建高质量工具生态，其有望成为连接 AI 系统与现实世界的核心桥梁。正如 Harrison Chase 所言，MCP 的核心价值在于为不可控的第三方 Agent 提供标准化接入方案，这种开放性使其在长尾场景中具备持久生命力。 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;一句话，MCP 未来可期！&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h1_29&quot;&gt;&lt;/span&gt; 
 &lt;h1&gt;附录&lt;/h1&gt; 
 &lt;div&gt;
   https://www.anthropic.com/news/model-context-protocol 
 &lt;/div&gt; 
 &lt;div&gt;
   https://mp.weixin.qq.com/s/WndS_QSbQFalFvBcGzur4A 
 &lt;/div&gt; 
 &lt;div&gt;
   https://mp.weixin.qq.com/s/kQrltrzRk-SVLfWm_zsPoA 
 &lt;/div&gt; 
 &lt;div&gt;
   https://github.com/CherryHQ/cherry-studio/releases/tag/v1.1.7 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;notranslate&quot;&gt;
  &amp;nbsp; 
&lt;/div&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/qiangmzsx/blog/17987222</link>
            <guid isPermaLink="false">https://my.oschina.net/qiangmzsx/blog/17987222</guid>
            <pubDate>Sat, 22 Mar 2025 08:53:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>AutoGluon —— 仅用 3 行代码即可实现快速准确的 ML</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                        
                                                                                    &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;AutoGluon 由 AWS AI 开发，可自动执行机器学习任务，使你能够轻松在应用程序中实现强大的预测性能。只需几行代码，你就可以在图像、文本、时间序列和表格数据上训练和部署高精度机器学习和深度学习模型。&lt;/span&gt;&lt;/p&gt;

&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#1f2328&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;AutoGluon 支持 Python 3.9 - 3.12，并且可在 Linux、MacOS 和 Windows 上使用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#1f2328&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;可以使用以下方式安装 AutoGluon：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div style=&quot;text-align:start&quot;&gt;
&lt;pre&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:var(--bgColor-muted, var(--color-canvas-subtle))&quot;&gt;&lt;span style=&quot;color:#1f2328&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:var(--fgColor-default, var(--color-fg-default))&quot;&gt;&lt;span style=&quot;background-color:var(--bgColor-muted, var(--color-canvas-subtle))&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;pip&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; &lt;span&gt;autogluon&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#1f2328&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;仅用 3 行代码即可构建准确的端到端 ML 模型&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div style=&quot;text-align:start&quot;&gt;
&lt;pre&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:var(--bgColor-muted, var(--color-canvas-subtle))&quot;&gt;&lt;span style=&quot;color:#1f2328&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:var(--fgColor-default, var(--color-fg-default))&quot;&gt;&lt;span style=&quot;background-color:var(--bgColor-muted, var(--color-canvas-subtle))&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-keyword)&quot;&gt;from&lt;/span&gt;&lt;/span&gt; &lt;span&gt;autogluon&lt;/span&gt;.&lt;span&gt;tabular&lt;/span&gt; &lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-keyword)&quot;&gt;import&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-variable)&quot;&gt;TabularPredictor&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;predictor&lt;/span&gt; &lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-constant)&quot;&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-entity)&quot;&gt;TabularPredictor&lt;/span&gt;&lt;/span&gt;(&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-constant)&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-string)&quot;&gt;&quot;class&quot;&lt;/span&gt;&lt;/span&gt;).&lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-constant)&quot;&gt;fit&lt;/span&gt;&lt;/span&gt;(&lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-string)&quot;&gt;&quot;train.csv&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span&gt;predictions&lt;/span&gt; &lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-constant)&quot;&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span&gt;predictor&lt;/span&gt;.&lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-constant)&quot;&gt;predict&lt;/span&gt;&lt;/span&gt;(&lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-string)&quot;&gt;&quot;test.csv&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

                                                                    &lt;/div&gt;
                                                                </description>
            <link>https://www.oschina.net/p/autogluon</link>
            <guid isPermaLink="false">https://www.oschina.net/p/autogluon</guid>
            <pubDate>Sat, 22 Mar 2025 08:42:00 GMT</pubDate>
        </item>
        <item>
            <title>开源 AI Agent 工具 Browser Use 开发商融资 1700 万美元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2025%2F03%2F23%2Fbrowser-use-the-tool-making-it-easier-for-ai-agents-to-navigate-websites-raises-17m%2F&quot; target=&quot;_blank&quot;&gt;据 TechCrunch 报道&lt;/a&gt;&lt;/u&gt;，Browser Use 近日向已完成 1700 万美元种子轮融资，由 Felicis 的 Astasia Myers 领投，Paul Graham、A Capital 和 Nexus Venture Partners 参投。这笔融资此前尚未被公开报道。&lt;/p&gt; 
&lt;p&gt;作为 Y Combinator2025 年冬季项目的一部分，Browser Use 专注于解决一个关键问题：让网站对 AI Agent 更具&quot;可读性&quot;。该公司由 Magnus Müller 和 Gregor Zunic 于去年通过苏黎世联邦理工学院的加速器创立，两人在五周内开发出首个演示版本并选择开源发布。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-be00974fa2b8a4189cd652a661c93dbfd9a.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;Browser Use 的核心功能是：将网站中的按钮和界面元素解析成更易于处理、类似文本的结构化格式，以便 AI Agent 理解页面上的各种操作选项，并自主做出决策。联合创始人 Müller 表示：&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;「&lt;strong&gt;现在很多 AI Agent 依赖视觉系统，通过截图来导航网页，但这个过程经常出错。我们把网页转换成 Agent 可以理解的形式，这种方法让我们可以用更低的成本反复执行相同的任务。」&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0324/164713_0QIp_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;该公司近期声名鹊起，部分原因是中国初创公司 Butterfly Effect 在其病毒式传播的 Manus 工具中采用了 Browser Use 技术。目前，Y Combinator 冬季批次中已有 20 多家公司使用 Browser Use 的解决方案。&lt;/p&gt; 
&lt;p&gt;领投方 Felicis 的 Astasia Myers 表示:&quot;我们认为 Web AI Agent 是下一个真正有助于实现端到端人工任务自动化的前沿领域。Web AI Agent 是不断变化的数字环境中以文本为中心的静态预训练模型之间的动态桥梁。&quot;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;阅读更多&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/334343/omniparser-v2&quot; target=&quot;news&quot;&gt;微软发布 OmniParser V2，将任意 LLM 变成可操作计算机的 AI Agent&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/331290/openai-operator&quot; target=&quot;news&quot;&gt;OpenAI 发布首个 AI 智能体&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/p/omniparser&quot;&gt;OmniParser&lt;span&gt;&amp;nbsp;——&amp;nbsp;&lt;/span&gt;&lt;span&gt;基于 GUI Agent 的纯视觉屏幕解析工具&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340695/browser-use-the-tool-raises-17m</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340695/browser-use-the-tool-raises-17m</guid>
            <pubDate>Sat, 22 Mar 2025 08:39:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>解析稳定率达 99.99%！合合信息「大模型加速器 2.0」助力 AI 打破「幻觉」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;随着大模型在社会应用中逐渐普及，人们在享受便利的同时，也面临着「AI 幻觉」产生的风险。训练数据是影响大模型「认知能力」的关键要素，近期，上海合合信息科技股份有限公司（简称「合合信息」）TextIn「大模型加速器 2.0」版本正式上线，基于领先的智能文档处理技术，对复杂文档的版式、布局和元素进行精准解析及结构化处理，从数据源头降低大模型「幻觉」风险，让大模型在与人类的沟通中「更靠谱」。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;&lt;img height=&quot;343&quot; src=&quot;https://oscimg.oschina.net/oscnet//039f7b30e80daf08d9c6ffc4a27b71ea.png&quot; width=&quot;640&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;图说：「大模型加速器 2.0」文档解析引擎助力知识库理解手写笔记示意图&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;据悉，升级后的「大模型加速器」在复杂版面理解、表格及图表处理、内容溯源等能力上实现新突破，可精准识别上千种文档中的跨页表格、合并单元格、密集表格、手写字符及公式，解析稳定率达 99.99%，单页处理耗时较行业可比产品降低超 30%；可「逆还原」十余种专业图表数据，并将其转化为大模型可理解的结构化数据。此外，「大模型加速器 2.0」版本新增知识库系列开源组件，助力医疗、制造、教育等行业开发者构建个性化的知识库。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:left&quot;&gt;&lt;strong&gt;文档解析技术助力教育大模型建设&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:left&quot;&gt;大模型需要不断「吸收」正确的专业知识，才能应对实际应用问题。合合信息技术团队成员表示，在处理年报、论文、实验室报告等专业文档的过程中，一个符号的解析失误，便可能「误导」大模型，得出与事实相悖的结论。可信性的缺失，也制约了大模型在实际应用场景中的纵深拓展。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:left&quot;&gt;赛尔教育科技发展有限公司（简称「赛尔教育」）系「中国教育和科研计算机网 CERNET」的运营公司赛尔网络的重要子公司，是教育国际化、教育信息化、数字化教育方案的提供商。赛尔教育 CTO、教育数字化事业部总经理杨林提到，教育行业中所涉及的文档格式多样，在内容上也包含了表格、公式、手写字符、多语言文字等信息。如何高效准确地提取各类文档中的文本信息，并非易事。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:left&quot;&gt;「教育行业的大模型建设工作中，数据的数量和质量起着决定性作用。我们做了很多尝试，模型的速度和准确性都达不到要求，严重影响科研工作的进展。」杨林表示，行业知识库的构建基于大量文档的文本信息提取，需要高效率、高准确率的工具。合合信息文档解析技术提供了专业的技术支持和服务，有效解决了文档处理过程中的问题。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;在「大模型加速器」的支持下，合合信息与赛尔教育共同协作，提升大模型对复杂版面、元素的「理解力」，使其按照人类正常的阅读顺序识别文档结构，智能划分标题、段落、表格和图表等内容块，帮助大模型理解版面、内容间的对应关系，减少 AI「幻觉」现象。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;&lt;img height=&quot;342&quot; src=&quot;https://oscimg.oschina.net/oscnet//a7a308c875be2e8390b05bb0b576d463.png&quot; width=&quot;640&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;图说：图表解析模块将图表还原为表格数据&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:left&quot;&gt;除了复杂的版面布局，种类繁多、空间结构复杂的图表元素也是解析难点所在。「大模型加速器 2.0」图表解析模块可智能提取多种图表中的关键数据点、座标轴信息、图例说明等，在精准解析不同类型图表数据的基础上，将其还原为一组完整的 Excel 表格数据，作用于教育行业大模型微调，学科知识库建设、智能审阅等环节。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;&lt;strong&gt;智能溯源让大模型用得更「安心」&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:left&quot;&gt;近期，多家券商机构纷纷宣布接入大模型，帮助分析师、行业研究员等专业人士提高工作效率。为帮助用户简化专业文档数据筛选和数据抽取流程，提升文档内容解读效率与准确率，「大模型加速器 2.0」 上线了知识库产品组件，支持复杂文档的智能问答、总结与检索。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;为了让行业「安心」使用大模型，知识库产品推出溯源功能，通过在「投喂」给知识库的 Markdown 及 JSON 文件中标记页码、座标等空间位置信息，实现对句子、段落的精确溯源，为用户提供了一个快速检验的路径。以财务分析为例，大模型在多份高达上千页的财报文件中找到收入、利润等关键数据后，券商分析师可利用溯源功能定位原表格，对信息进行复核，防止错误、遗漏。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;&lt;img height=&quot;343&quot; src=&quot;https://oscimg.oschina.net/oscnet//adf6434e863fb37b3fe6b42792637cbe.png&quot; width=&quot;640&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;图说：知识库对财报数据所在表格进行精准溯源&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;目前，知识库组件已面向开发者开源，帮助其根据自身需要快速构建个性化行业知识库。此前，合合信息已开源智能文档处理「百宝箱」系列产品，解决文档解析精度低、解析效果评估难等问题，开发者可根据研发需求灵活搭配使用。未来，「大模型加速器」将持续优化迭代，助力大模型在各行各业中「百花齐放」。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340694</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340694</guid>
            <pubDate>Sat, 22 Mar 2025 08:36:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>你敢要它就有！至强 6 新品治好选择困难症</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;2 月下旬，英特尔新一代数据中心处理器至强 6 大家族迎来了第三波的新品发布，主要包括代号 Granite Rapids-SP 的至强 6700/6500 性能核处理器，以及代号 Granite Rapids-D 的至强 6 系统级芯片（SoC）。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;至强 6700/6500 系列性能核处理器上市，意味着至强 6 性能核产品阵容终于「补全」，覆盖从 8 至 128 核，得以更好地衔接第四代/第五代至强可扩展处理器产品线，与去年发布的至强 6700 系列能效核处理器形成清晰的分工。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;&lt;img height=&quot;417&quot; src=&quot;https://oscimg.oschina.net/oscnet//1700379bb45a4fad54c8d92d342590c3.png&quot; width=&quot;640&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;&lt;strong&gt;至强 6 全家福&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;由于至强 6 产品家族旗下型号多，且发布时间跨度较长，定位差异也很大，我们先简要回顾至强 6 家族已经上市的产品线。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;2024 年 6 月，至强 6 首次亮相，发布的是代号为 Sierra Forest-SP 的至强 6700 能效核处理器。该系列的计算单元采用英特尔 3 制造工艺，提供了 144 个能效核，主要针对高密度、横向扩展工作负载，如云原生、CDN、微服务等，在为这类应用带来性能改善的同时，能效也有更为明显的提升。至强 6700 系列能效核处理器最大功耗 350 瓦，采用 Socket E2 接口（LGA 4710），支持 8 通道 DDR5 6400MT/s，88 个 PCIe 5.0 通道及 64 个 CXL 2.0 通道。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;2024 年 9 月发布的至强 6900 系列性能核处理器代号 Granite Rapids-AP，定位为旗舰级，适合要求严苛的云、科学计算、AI（机头）等领域，可以在同样的空间内部署更多的性能核（单插槽可以达到 128 个性能核）、提供更大的内存带宽（12 通道内存，并支持 MRDIMM 8800MT/s）、更多的 PCIe 5.0 通道（96 个）或 CXL 2.0 通道（64 个），以及 6 个 UPI2.0 链路。相应的，至强 6900 系列性能核处理器需要使用更大面积的接口 Socket BR（LGA 7529），最大功耗也增加到 500 瓦。其新的性能核前端设计有较大改进，在翻倍的内核数量和内存带宽加持下，性能表现是至强 6 整个家族中的佼佼者，在很多主流应用负载上的性能表现都能达到上一代产品的 2-3 倍。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;&lt;img height=&quot;360&quot; src=&quot;https://oscimg.oschina.net/oscnet//465c7b0dee584ad4af9faab4f6779f82.png&quot; width=&quot;640&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;今年 2 月发布的至强 6700/6500 系列性能核处理器代号 Granite Rapids-SP，集成了 8 到 86 个性能核，平均每核分配的末级缓存多数都在 4MB 以上，完整支持 AMX 指令集，DSA、QAT、IAA 和 DLB 等加速器也都开启。至强 6700/6500 性能核处理器使用与至强 6700 能效核处理器相同的接口和功耗上限，PCIe、CXL 扩展能力相同，支持 8 通道 DDR5 6400MT/s，部分型号还提供了 MRDIMM 8000MT/s 的支持能力。该系列的市场定位更偏向主流的数据中心、电信基础设施，以及企业级服务器和边缘场景。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;在此，我们先做一个小结：至强 6 家族规划了 AP 与 SP，以及性能核与能效核的微架构，由此交叉构成多个产品大类：AP+性能核对应至强 6900 性能核产品线（最高 128 核），负责提供这代产品目前最强性能输出水平（内核数和内存通道），PCIe 和 CXL 扩展能力也要更强一些，使用面积更大的封装和插座。至强 6900 性能核的 6 个 UPI2.0 链路全部用于双路互联，可以充分提升跨处理器的访问带宽以尽可能提高性能，但不考虑用于构建多路系统。SP+能效核及性能核，对应的产品线则分别为至强 6700 能效核（最高 144 核）与至强 6700/6500 性能核产品线（最高 86 核），更多是用于主流服务器机型的升级换代，封装尺寸与前几代至强保持一致。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;&lt;img height=&quot;203&quot; src=&quot;https://oscimg.oschina.net/oscnet//85077929ba88b5bfb2ae7ad5acb4bd78.png&quot; width=&quot;640&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;&lt;strong&gt;应用新主流：生成式 AI、结构化数据&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;至强 6700/6500 系列性能核处理器与已经发布半年多的至强 6700 系列能效核处理器可以使用相同的服务器平台，因此在发布后可以迅速进入市场。由于过去一年 AI 需求高涨，业内一直期待性能核与能效核处理器能够尽快形成清晰明确的分工，以完整覆盖主流市场各种类型业务的需求：传统业务需要降本增效，新兴业务需要提质增量。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;&lt;strong&gt;传统业务混合 AI 负载&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;在大模型蔚为风潮的背景下，至强 6 性能核拥有更多的内核、较大的内存带宽，以及 AMX 这类为 AI 任务优化的加速器，不论是传统的神经网络推理，还是 Transformer 大语言模型推理的性能都相较上一代至强处理器有大幅提升。主流的 200 亿参数以下的中、小规模的模型在至强 6 上都可以顺畅运行，再得益于至强本身在通用计算领域的竞争力和积累，就使得至强 6700 性能核非常适合混合部署 AI 业务的用户。譬如在互联网行业中已经验证成熟的推广搜（广告、推荐、搜索），企业应用中渗透率很高的自然语言处理，正在蓬勃发展的智能客服、知识助理等大模型私有部署等。这些业务都可以与传统业务部署在同一个节点、同一个资源池当中。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;&lt;strong&gt;生成式 AI&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;如果说至强 6900 性能核是 AI 训练的最佳机头，那么至强 6700/6500 系列性能核也有望成为 AI 推理的优秀机头，搭配 GPU 或其他 AI 专用加速器运行以生成式 AI 为代表的，大参数、高并发的大语言模型推理任务。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;上一小节中提到了至强 6 性能核自身核心性能、内存带宽的优势。在至强 6700/6500 系列性能核上，还比较容易获得内存容量的优势。基于传统布局，双路至强 6700/6500 系列性能核机型依旧可以轻松提供 32 条内存插槽，可以较低成本部署 2~4TB 本地内存，上限可以达到 8TB。部分型号还可以享受 MRDIMM 8000MT/s 提供的更高带宽。除了充裕的内存容量和带宽，充足的 PCIe 5.0 通道数有利于配置多块 AI 加速器和高性能网卡。至强 6700/6500 系列的双路节点可以提供 176 条 PCIe 5.0 通道，单路节点可提供 136 条。这使得在 4U 机箱内部署 8 卡不再需要依赖 PCIe Switch 板，在液冷的支持下部署更高的密度也依然游刃有余。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;随着以 KTransformer 为代表的开源大语言模型推理优化框架的出现，利用 MoE 架构稀疏性的特点在 CPU 和 GPU 上实现异构分层部署推理任务逐渐引起重视。这种异构协同的方案可以充分利用算力、存储资源，大幅降低部署门槛，显著提升推理速度。这种模式也能让至强 6 处理器的计算性能、内存优势及 AMX 加速能力获得更大的发挥空间。而且至强 6 性能核产品线中的 DSA、QAT、DLB、IAA 等加速器也全都默认开放，让数据流的预处理、节点间交互的效率更高。尤其是 6700 性能核的高性能产品线当中，4 种加速器都各提供 4 个，能助力 CPU 卸载加密、压缩、数据传输和转换等任务。这些特性有利于改善节点内南北向、东西向数据传输中的消耗，在构建高并行、多节点的 AI 集群时可进一步提升效率。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;至强处理器在可信或隐私计算方面较为独到的技术特性，也在这次至强 6700/6500 系列性能核发布时得到了进一步增强。其从第四代至强可扩展处理器开始集成的 TDX（Trust Domain Extensions）技术，原本可基于硬件的可信执行环境部署信任域（TD）让敏感数据和应用程序获得虚拟机/容器级别的隔离，免受未经授权的访问。这次也随新品将机密计算的覆盖范围进一步增强，通过新增的 TDX Connect，可在 CPU 和 PCIe 设备之间实现高性能的加密连接，这可以更好地保护加载于主内存、CPU、加速卡全链路中的数据。TDX Connect 对于需要租赁弹性算力部署私有 AI 业务的用户而言是一个非常重要的保障，毕竟在算力平权的时代，自有数据和微调的垂直模型才是企业核心竞争力的有力保障。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;&lt;strong&gt;向量数据库&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;生成式 AI 带动了业内对向量数据库的关注。由于大语言模型的知识是在训练和微调时固化的，遇到「超纲」的问题时，模型可能会拒绝回答或胡说八道。通过检索增强生成（RAG）让模型可以检索外部数据获取更多的信息以补充其知识盲区。对于私有化部署大语言模型的企业而言，必须通过微调强化模型在特定领域的专业度，并建议搭配向量数据库以实现 RAG，可以充分利用私有信息并不断更新。简单说，参数规模决定了大语言模型的智力水平，向量数据库决定了大语言模型的专业度、可信度，以及可持续发展。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;向量数据库与传统的以行或列组织信息的数据库不同，其使用数据的高维度嵌入作为信息单元，并基于嵌入进行相似性检索。因此在构建向量数据库时需要通过模型对筛选、收集的文档进行提取、格式化、切分。结构化数据库的向量操作非常适合使用至强 6 性能核进行处理。单路的至强 6 性能核的典型应用场景是全闪存储节点，在此基础上部署向量数据库能进一步发挥处理器的性能特点：适宜的处理能力和丰富的扩展性。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;&lt;strong&gt;内存数据库&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;相较于至强 6900 性能核处理器和 6700 能效核处理器，至强 6700/6500 系列性能核处理器还拥有一个关键的特点，它们传承了英特尔在 x86 市场的独门绝技：可以原生扩展至 4 路和 8 路，这意味着单台服务器通过八路配置即可提供 688 个性能核以及 32TB 本地 DDR5 内存，尤其适合用于大型内存数据库以及科学计算集群的胖节点等。以 SAP HANA 为代表的大型内存数据库为联机事物处理（OLTP）等关键业务提供了有力支撑，将尽可能多的数据放置在内存当中有利于提高并发事务吞吐量、加快决策速度。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;另外，根据以往的经验，顶尖的服务器厂商还会通过节点控制器进一步拓展处理器数量和内存容量。不过在至强 6 性能核上还有更简单的内存扩展方式——CXL2.0 内存。至强 6 性能核独有的 CXL 平面内存模式（Flat Memory Mode）可以平滑地扩展内存容量和带宽，不需要操作系统内核或部署专用的软件支持。平面内存模式与本地内存的配置比例是 1:1，理论上可以将服务器的内存容量翻倍，或者允许使用相对更便宜的基于 DDR4 的 CXL 内存。以配置 32TB 内存为例，如果完全使用本地内存，必须使用单条 128GB 的 DDR5 RDIMM，价格比较昂贵；而搭配 CXL 内存，本地内存就可以使用更为常见 64GB DDR5 RDIMM，从而有效降低整体成本，总带宽还有所提升。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;&lt;strong&gt;产品阵容进一步解析&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;至强 6700/6500 性能核处理器规划了非常绵密和多样的产品线，内核数量从 8 核至 86 核，UPI 数量和启用的加速器数量也有所差别。为了构成如此多样的规格，英特尔设计了三种类型的封装形态：XCC、HCC、LCC。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;■ XCC：拥有两个计算单元（Compute Tile）和两个 IO 单元（IO Tile），分别由 Intel 3 和 Intel 7 工艺制造。XCC 所使用计算单元与组成至强 6900 性能核的 UCC 相同，都是单芯片 44 个内核、4 通道内存控制器，区别是 UCC 使用了 3 个计算单元。XCC 的两个计算单元提供最多 86 个内核。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;■ HCC：一个计算单元和两个 IO 单元。HCC 的计算单元提供最多 48 个核心，以及 8 通道内存控制器。HCC 没有考虑对 MRDIMM 的支持。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;■ LCC：一个 16 核心的计算单元和两个 IO 单元，不支持 MRDIMM。使用 LCC 的处理器 UPI 链接数只有 3，这可能与其计算单元和 IO 单元之间的 EMIB 连接较少有关。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;&lt;img height=&quot;358&quot; src=&quot;https://oscimg.oschina.net/oscnet//94050c425264ebc60705990ddea0c85e.png&quot; width=&quot;640&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;从产品定位角度看，至强 6700/6500 性能核处理器可以进一步细分为高性能、主流、多路、单路等产品线。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:left&quot;&gt;&lt;strong&gt;高性能产品线&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;&lt;img height=&quot;182&quot; src=&quot;https://oscimg.oschina.net/oscnet//d2687b6554703ad88436b795f02e77de.png&quot; width=&quot;640&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;高性能产品线提供了最多 86 核的型号（6787P），多数型号的加速器全部打开。至强 6 的每个 IO 单元提供 2 个加速器模块，每个模块有 DSA、QAT、DLB、IAA 各 1。两个 IO 单元就是 4 种加速器各 4 个。基于 LCC 的 6517P 和 6507P 提供的加速器是各两个。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;高性能产品线涵盖了 XCC、HCC、LCC 三种封装，因此内核数量、内存支持、功耗的差异也很大。其中，以第三位数字为界，674xP 以上的 4 款均是 XCC，内核数量最多 86，LCC 末级缓存最多 336MB，均支持 MRDIMM 8000MT/s。这里有一个特例是 6730P，它也基于 XCC，提供了 288MB 末级缓存，但不支持 MRDIMM。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;其中，6745P 以 32 核享受了多达 336MB 的末级缓存，平均每核缓存超过 10MB！它的频率也较高，基础频率超过 3GHz，全核睿频可以达到 4.1GHz，单核 4.3GHz。这种核少、高频、大缓存的 SKU 更适合追求低内存延迟、高处理压力的任务，譬如大数据分析、科学计算等。而核数更多的型号则更适合高并行性的任务。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;6527P、6736P、6737P 这几个 SKU 使用的 HCC 封装，提供 16 到 36 核的配置。HCC 理论上最多 48 核，提供 192MB 末级缓存。6737P 只使用了其中的 32 核，但享用了全部末级缓存，因此其定位略高于核数略多的 6736P（36 核）。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;6507 和 6517P 使用 LCC 封装，核数少，基础频率高，可以达到 3.2GHz 以上，睿频可以达到 4.3GHz，而功耗不到 200 瓦。LCC 给每个性能核准备了 4.5~6MB 的末级缓存，要多于其他系列的原生设计。高频率、大缓存有都利于在核数相对较少的情况下提升性能。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;&lt;strong&gt;主流产品线&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;&lt;img height=&quot;131&quot; src=&quot;https://oscimg.oschina.net/oscnet//3962fb6c40e6a2fce8cc6d5423615662.png&quot; width=&quot;640&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;主流产品线的核数跨度在 12 个到 64 个之间，显然也使用了三种版本的内核封装。其中两款 67x0P 使用 XCC，却没有开放 MRDIMM 的支持。不过好在二者的末级缓存都较大，平均每核心的缓存容量达到至少 5MB。相比高性能产品线，主流产品线的加速器只开放了一半，分别只有 2 个，每 CPU 的 TDX 数量也减半了。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;这一组产品的型号非常直观，第三位数字可以与实际内核数挂钩。譬如 6760P 的第三位是 6，核数是 64；6520P 的 2 对应 24 核。唯一的特例是 6505P，它不是 8 核而是 12 核。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;&lt;strong&gt;多路产品线&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;&lt;img height=&quot;144&quot; src=&quot;https://oscimg.oschina.net/oscnet//87ceefaa506750e036c0687e85dd14ef.png&quot; width=&quot;640&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;多路产品线是为 4 路、8 路服务器准备的，售价较高，均被列入 67xxP 序列。该产品线的型号也比较容易理解，第三位数字大致对应了核数多寡；第四位数字是 8 或 4，清晰体现了其原生的 UPI 直连多路支持能力。譬如 6724P 和 6714P 基于 LCC，每个插槽有 3 个 UPI 链接，正好可以分别直连其他 3 个插座以构成全连接的 4 路系统，或通过节点控制器实现 8 路。其余尾数为 8 的处理器都有 4 个 UPI，可以构成典型的 8 路系统。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;&lt;img height=&quot;271&quot; src=&quot;https://oscimg.oschina.net/oscnet//74068e41adec5507e8c5b4cc45252209.png&quot; width=&quot;640&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;这些面向多路的产品都不支持 MRDIMM，即使是其中两款基于 XCC 也是如此。其实对于多路系统而言，相邻任意两个处理器之间顶多只有一条 UPI 链接，跨插座的内存访问带宽远低于双路产品线——作为对比，双路旗舰 6900 性能核系列会使用全部 6 个 UPI 互联。因此，多路系统全局访问内存的瓶颈在于 UPI 的带宽，很难发挥 MRDIMM 的带宽优势，暂时也就没有启用的必要。长远看，由于 MRDIMM 有单条内存容量翻倍的潜力，未来的多路系统还是会择机引入 MDRIMM 的。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;多路产品线中超过 16 核的 SKU 都开放了全部的加速器。6748P 是已公开的至强 6 产品线中，唯一使用了「满血」HCC 的 SKU，提供 48 核和 192MB 末级缓存。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;8 核的 6714P 和 16 核的 6724P 基于 LCC 打造，它俩的核数较少，但设定了比高性能产品线的 6507P 和 6517P 更高的功耗和频率。实际上，6714P 和 6724P 是整个至强 6 家族当中频率最高的 SKU，基础频率甚至达到了 4GHz，不论是之前提到的高性能产品线还是后面要提到的单路产品线都没有达到这个水平。高频也是它们虽然基于 LCC，但依旧可以冠以 67xxP 之名的原因之一。这样的规格虽不适合高并发的处理，但优势在于响应速度更快，在配合某些根据内核数收取授权费的软件使用时也可以适当降低成本。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;&lt;strong&gt;单路产品线&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;&lt;img height=&quot;131&quot; src=&quot;https://oscimg.oschina.net/oscnet//7eaa780c209d0f18624bc10bc4bf5609.png&quot; width=&quot;640&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;至强 6700 和 6500 性能核的单路产品线所有产品名称的第四位数字均为 1，第三位数字与核数的对应关系也最为「整齐」，核数均为 8 的整倍数，没有特例。单路处理器不需要使用 UPI 互联，因此 IO 单元中原本可用作 UPI x24 的几个 UIO 可被用作 x16 的 PCIe 或 CXL 通道。最终它们的 PCIe 通道数比双路「同胞」们多了 48 个，达到 136 个。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;&lt;img height=&quot;385&quot; src=&quot;https://oscimg.oschina.net/oscnet//7f29e7112dd94f5f56a3e7e5e0d7343c.png&quot; width=&quot;587&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;（图注：性能核处理器的 IO 单元功能模块）&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;单路至强 6 性能核处理器的加速器数量大多为 3 组，介于性能（4 组）和主流（2 组）产品线之间。80 和 64 核的单路处理器支持 MRDIMM 8000MT/s，但同样使用 XCC 的 48 核 6741P 却不支持 MRDIMM。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;由于当前处理器的内核数量已经足够的多，专门规划单路至强可以控制成本，或用于提升机箱内扩展设备的部署密度。以全闪存储节点为例，如果 2U 前窗提供 24 个 U.2 NVMe 盘位，不依赖 PCIe Switch 或扩展卡的话，需要 96 个 NVMe 通道。单路至强 6 性能核满足 NVMe SSD 后，还有 40 个 PCIe 5.0 通道，可分配给两块 100/200G IB 网卡服务存储集群，还有 1 块 OCP 网卡做管理。对于并行度较高的业务，譬如云、轻量级推理、视频转码等，如果在原本双路机箱内部署两个单路节点，在内核数相同的前提下，可以挂载更多的 PCIe 设备用于推理、转码、存储等。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;&lt;strong&gt;至强 6 系统级芯片、至强 6300&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;在至强 6700/6500 性能核发布同期，英特尔也正式推出了至强 6 系统级芯片与至强 6300，在这里我们对二者也顺便做一些简要介绍。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;至强 6 系统级芯片的计算单元与 XCC、HCC、LCC 是通用的，但搭配了一个重新设计的 IO 单元。这个 IO 单元取消了 UIO，减少了 IO 模块，仅支持较少、较低规格的 PCIe 和 CXL，主要面积用于提供 2×100Gbps 以太网、媒体加速器、vRAN 加速器等。这也从另一个角度体现了至强 6 产品家族将计算单元和 IO 单元解耦的意义。通过调整 IO 单元的规格，配置不同的扩展能力、多样化的加速器，可以更好地适配更丰富的细分场景。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:center&quot;&gt;&lt;img height=&quot;435&quot; src=&quot;https://oscimg.oschina.net/oscnet//83c73b28d15b80db9cf648dc89604a14.png&quot; width=&quot;640&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;至强 6 系统级芯片将通用计算、AI 推理、媒体编码、以太网等功能整合在单一封装内，主要部署于边缘侧，如网络安全加速器、媒体服务器、5G 虚拟基站等。目前已经公开规格的至强 6 系统级芯片最多 42 核（6726P-B），使用 BGA4368 封装，TDP 最高 235 瓦，支持 4 通道 DDR5 6400MT/S。英特尔也透露了 72 核的存在，后续还会陆续发布。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;至强 6300 系列定位于入门级服务器，采用的内核是 Raptor Lake，提供 8 个核心，支持双通道 DDR5 4800MT/s ECC UDIMM。Raptor Lake 就是 13 代酷睿处理器中的性能核，只是用在至强产品线当中时没有再用酷睿那种性能核与能效核并存，或者是大小核的设计，而是使用全性能核的设计。它还提供 ECC 内存支持，并搭配 C260 系列 PCH。同样的内核、同样的 LGA1700 插座，其实英特尔在 2024 年第四季度推出过至强 E-2400 系列。至强 6300 系列的出现看起来像是有意将至强 E-2400 统一到至强 6 品牌之下。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;&lt;strong&gt;至强 6 全家福成形：高低搭配，平滑过渡&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;至强 6700/6500 性能核的发布，进一步完善了至强 6 家族产品线。整个面向主流和中高端市场的产品线覆盖了 8 核到 144 核，提供了领先的内核数量、独一份的内存带宽、具有前瞻性的加速器。对于正在进入换代周期的第二、第三代至强可扩展处理器的机型用户而言，至强 6 可以很好地承接业务迁移、升级的需求。对于保持传统业务的用户，至强 6 能效核可以平滑迁移并提供数倍的部署密度以及更好的能效，以改善运营成本。对于希望与时俱进，跟上 AI 浪潮的用户，至强 6 性能核不仅仅是提供更大更多的内核，其实还提供了更适应 AI 需求的加速器，以实现 1+1＞2 的效果。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;至强 6 为旗舰与主流产品提供了不同的封装规模。后者的封装尺寸与第三代至强可扩展处理器以来的几代产品保持相同，TDP 的增长也比较谨慎。这意味着对于多数用户而言，这数年来积累的系统布局、运维习惯可以基本保持不变。&lt;/p&gt; 
&lt;p style=&quot;color:#191919; margin-left:1.8em; margin-right:.63em; text-align:justify&quot;&gt;狂飙的内核与稳定的外形，这并非反差，而是技术前瞻性和对市场持久承诺的结合。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340693</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340693</guid>
            <pubDate>Sat, 22 Mar 2025 08:35:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>微信内测聊天界面内置腾讯元宝</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FGXqTLlyx6vml0QNrq8e_kQ&quot; target=&quot;_blank&quot;&gt;根据「市象」的独家报道&lt;/a&gt;&lt;/u&gt;，腾讯似乎正在悄悄把元宝内嵌进微信体系。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0324/162605_tu9T_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;目前看，虽然披着「红包助手」的皮，&lt;strong&gt;但功能上已经具备置顶、分享、互动等权限，形态上有点像「AI 版文件传输助手」&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;实测显示，这个「元宝红包封面助手」不仅能问答图片、文件，还能直接总结公众号文章和网页链接，功能已经不止是简单的对话助手，而是在朝 AI 工作流工具方向靠拢。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0324/162628_3MQL_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0324/162645_XpKg_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;阅读更多&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/339845&quot; target=&quot;news&quot;&gt;腾讯元宝成为中国 DAU 排名第三的 AI 原生移动应用&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/338559&quot; target=&quot;news&quot;&gt;腾讯元宝宣布支持上传、导出腾讯文档&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/336988&quot; target=&quot;news&quot;&gt;腾讯元宝狂砸钱推广，27 天投流近 3 亿&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340690</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340690</guid>
            <pubDate>Sat, 22 Mar 2025 08:28:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Ubuntu 启动核心工具链现代化改造：Rust 重写计划背后的技术决策</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;根据 Canonical 工程副总裁 Jon Seager 在 Ubuntu 论坛的&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.ubuntu.com%2Ft%2Fcarefully-but-purposefully-oxidising-ubuntu%2F56995&quot; target=&quot;_blank&quot;&gt;最新声明&lt;/a&gt;&lt;/u&gt;，Ubuntu 计划从 25.10 版本开始逐步引入基于 Rust 的&lt;code&gt;uutils&lt;/code&gt;工具集，取代沿用数十年的 GNU coreutils（包含&lt;code&gt;ls&lt;/code&gt;、&lt;code&gt;cp&lt;/code&gt;、&lt;code&gt;mv&lt;/code&gt;等经典命令）。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0324/161856_Pqfp_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;这一变革瞄准将于 2026 年发布的 Ubuntu LTS 版本，目标是通过 Rust 的内存安全特性降低攻击面，同时保持与 GNU 工具 100% 的脚本兼容性。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;技术选型逻辑&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;GNU coreutils 作为 C 语言编写的核心基础设施，长期面临内存管理漏洞风险（如缓冲区溢出）。根据&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnvd.nist.gov%2F&quot; target=&quot;_blank&quot;&gt;美国国家漏洞数据库&lt;/a&gt;统计，2024 年 C/C++项目漏洞中，34% 与内存安全相关。而 Rust 凭借所有权模型和编译器强制检查，理论上可消除此类问题。uutils 项目采用 MIT 协议，目前已实现 80% 的核心命令兼容性，开发团队承诺「零脚本适配成本」（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fuutils%2Fcoreutils&quot; target=&quot;_blank&quot;&gt;项目 GitHub 页&lt;/a&gt;）。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;开发者迁移路径&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Canonical 同步推出实验工具&lt;code&gt;oxidizr&lt;/code&gt;，支持在 GNU 工具链与 Rust 版本间动态切换。通过命令&lt;code&gt;oxidizr toggle coreutils&lt;/code&gt;，开发者可实时对比&lt;code&gt;ls -l&lt;/code&gt;等命令的输出差异。初期测试显示，Rust 版工具内存占用降低 12%-18%，但大规模部署仍需验证边缘案例（如&lt;code&gt;find -exec&lt;/code&gt;管道处理）。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;生态影响评估&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;此次替换涉及超过 100 个基础命令，但社区已有成功先例：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;sudo-rs&lt;/code&gt;（Rust 重写的 sudo）通过&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsecurity.googleblog.com%2F2024%2F03%2Frust-in-linux-security.html&quot; target=&quot;_blank&quot;&gt;Google 安全研究审计&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Red Hat 在 Fedora 40 中试点&lt;code&gt;coreutils-rs&lt;/code&gt;模块&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;风险提示：虽然 uutils 承诺兼容性，但企业环境中依赖&lt;code&gt;/proc&lt;/code&gt;文件系统或 LD_PRELOAD 注入的监控工具需重新适配。建议运维团队通过&lt;code&gt;oxidizr benchmark&lt;/code&gt;命令评估性能波动，并关注&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdimage.ubuntu.com%2Fdaily-live%2Fcurrent%2F&quot; target=&quot;_blank&quot;&gt;Ubuntu 25.10 每日构建版&lt;/a&gt;进展。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;em&gt;延伸讨论：&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Rust 是否将重塑 Linux 基础设施？参考 CNCF 2024 报告，83% 的云原生项目已引入 Rust 组件。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;（本文部分数据引用自&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fuutils.github.io%2F&quot; target=&quot;_blank&quot;&gt;uutils 技术文档&lt;/a&gt;与&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.ubuntu.com%2Ft%2Foxidizing-ubuntu-core-utils%2F14536&quot; target=&quot;_blank&quot;&gt;Ubuntu 论坛&lt;/a&gt;）&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340686/ubuntu-should-become-more-modern-with-rust-tools</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340686/ubuntu-should-become-more-modern-with-rust-tools</guid>
            <pubDate>Sat, 22 Mar 2025 08:19:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>蚂蚁回应 AI 训练降本：基于不同芯片持续调优，将逐步开源</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;彭博社援引知情人士报道称，蚂蚁集团使用中国制造的半导体开发训练人工智能模型的技术，可将成本降低 20%。对此，蚂蚁方面回应称：蚂蚁针对不同芯片持续调优，以降低 AI 应用成本，目前取得了一定的进展，也会逐步通过开源分享。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;330&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/163214_FtR9_4252687.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;事件背景：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;蚂蚁集团的 Ling 团队近日在预印版 Arxiv 平台上发布了题为《每一个 FLOP 都至关重要:无需高级 GPU 即可扩展 3000 亿参数混合专家 LING 大模型》的技术论文，介绍了他们研发的两款新型大语言模型:百灵轻量版（Ling-Lite）和百灵增强版 (Ling-Plus)。这两款模型在设计上采用了多项创新，能够在低性能硬件上高效训练，显著降低了成本。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;百灵轻量版的参数规模为 168 亿，其中激活参数为 27.5 亿。而增强版的基座模型则拥有高达 2900 亿的参数，激活参数为 288 亿。这两款模型的性能均达到行业领先水平，尤其是增强版，其 3000 亿参数的 MoE 模型在使用国产 GPU 的低性能设备上进行训练时，表现与高端英伟达芯片的模型相当。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;通常，MoE 模型的训练需要依赖昂贵的高性能 GPU，如英伟达的 H100 和 H800，这不仅成本高昂，还受到芯片短缺的限制，从而影响了其在资源有限环境中的应用。为此，蚂蚁集团 Ling 团队提出了一个全新的目标 ——「不使用高级 GPU」 扩展模型，突破了资源和预算的限制。他们的创新训练策略包括动态参数分配、混合精度调度、以及升级的训练异常处理机制，这些策略有效地缩短了中断响应时间，并且优化了模型评估流程，压缩了验证周期超过 50%。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在实验中，Ling 团队对 9 万亿个 token 进行了 Ling-Plus 的预训练。结果显示，使用高性能硬件配置训练 1 万亿 token 的成本约为 635 万元人民币，而采用蚂蚁的优化方法后，低规格硬件训练成本降至 508 万元左右，节省了近 20%。同时，性能与阿里通义 Qwen2.5-72B-Instruct 和 DeepSeek-V2.5-1210-Chat 相当。&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340684</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340684</guid>
            <pubDate>Sat, 22 Mar 2025 08:17:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Mozilla.ai 发布 OpenStreetMap AI 辅助工具链，计算机视觉提升地图标注效率 5 倍</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Mozilla.ai 近日开源其 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.mozilla.ai%2Fmap-features-in-openstreetmap-with-computer-vision%2F&quot; target=&quot;_blank&quot;&gt;OpenStreetMap AI Helper Blueprint 项目&lt;/a&gt;，通过 YOLOv11 目标检测模型与 Meta SAM 图像分割模型的组合，将衞星影像自动转换为符合 OpenStreetMap 规范的地理多边形数据。实测显示，游泳池等典型地物标注效率较纯人工操作提升 500%&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;img height=&quot;420&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/161425_LmRu_3820517.png&quot; width=&quot;1332&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;技术架构&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;数据采集层&lt;/strong&gt;：整合 Mapbox 衞星瓦片服务（zoom level 18）与 OpenStreetMap Overpass API，构建带地理座标的标注数据集&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;模型训练层&lt;/strong&gt;：基于 Ultralytics 框架微调 YOLOv11，模型体积仅 78MB（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fmozilla-ai%2Fswimming-pool-detector&quot; target=&quot;_blank&quot;&gt;Hugging Face 仓库&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;推理验证层&lt;/strong&gt;：SAM 模型生成像素级掩膜后，通过 GeoJSON 座标转换确保多边形拓扑正确性&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;工作流创新&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;人工选定兴趣区域（如西班牙加利西亚大区）&lt;/li&gt; 
 &lt;li&gt;自动下载 1km² 范围内衞星影像并切片处理&lt;/li&gt; 
 &lt;li&gt;目标检测模型筛选潜在特征，分割模型生成精确轮廓&lt;/li&gt; 
 &lt;li&gt;去重校验后通过 JOSM 编辑器提交变更集&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img height=&quot;618&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/161455_8GPg_3820517.png&quot; width=&quot;1240&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;726&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/161524_IFjw_3820517.png&quot; width=&quot;1422&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;img height=&quot;608&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/161537_PDQe_3820517.png&quot; width=&quot;1298&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;img height=&quot;626&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/161600_LYXJ_3820517.png&quot; width=&quot;1282&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;开发者接入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;支持自定义地物类型训练，需准备 200+ 标注样本（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmozilla-ai%2Fosm-ai-helper&quot; target=&quot;_blank&quot;&gt;数据集规范&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;提供完整 Colab 工作流： 
  &lt;ul&gt; 
   &lt;li&gt;数据准备：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcolab.research.google.com%2Fgithub%2Fmozilla-ai%2Fosm-ai-helper%2Fblob%2Fmain%2Fdemo%2Fcreate_dataset.ipynb%3Fref%3Dblog.mozilla.ai&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;Create Dataset Colab&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;模型微调：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcolab.research.google.com%2Fgithub%2Fmozilla-ai%2Fosm-ai-helper%2Fblob%2Fmain%2Fdemo%2Ffinetune_model.ipynb%3Fref%3Dblog.mozilla.ai&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;Finetune Model Colab&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;生产部署：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcolab.research.google.com%2Fgithub%2Fmozilla-ai%2Fosm-ai-helper%2Fblob%2Fmain%2Fdemo%2Frun_inference.ipynb%3Fref%3Dblog.mozilla.ai&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;Run Inference Colab&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340683/map-features-in-openstreetmap-with-computer-vision</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340683/map-features-in-openstreetmap-with-computer-vision</guid>
            <pubDate>Sat, 22 Mar 2025 08:17:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
    </channel>
</rss>