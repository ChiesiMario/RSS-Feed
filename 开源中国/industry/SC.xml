<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - industry - 简体中文</title>
    <link>https://www.oschina.net/news/industry</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/industry" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 21 Aug 2025 08:20:16 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>营销会场预览直通车实践</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;h1&gt;一、背景：活动会场的配置走查之痛&lt;/h1&gt; 
&lt;p&gt;在电商营销中，会场是承载活动流量的核心阵地。得物的营销会场不仅覆盖 520、七夕等活动节点，也支撑日常的"天天领券"、"疯狂周末"等高频运营场景。数据显示，会场的 UV 占比、GMV 贡献、订单量均占平台重要比重。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//74cc374ae88fefed4ccacecca52eb62c.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;然而，随着业务复杂度提升，会场配置面临三大挑战。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1.1 三大挑战&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※ 多目标耦合&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;同一会场需同时满足不同运营 GMV 提升、拉新、促活等不同目标，导致配置策略叠加，复杂度激增。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※ 验证滞后性&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;传统方式需活动生效后才能验证效果，配置错误可能导致资损，修复成本高昂。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※ 跨团队协作低效&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;涉及搭建、招商、优惠、资产等 6 大系统，联调成本高，走查覆盖率仅 60%。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1.2 会场的配置举例&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//ec2ff389dacb089fe96cbafd146e0ff3.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;二、 解决方案：全链路"痛点穿越"&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;2.1 痛点梳理&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//8f76509b28f4067adba72001518c90c3.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2.2 核心思路&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;通过模拟未来时间、指定用户人群、强制命中 AB 实验，实现**"上线未对外先验证"**，让运营和技术在配置完成后即可预览真实效果。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//792784a52b43d8b98d86b931a70397d4.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;分层架构设计&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//285bff0a615cff6fb656571030f6add4.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//4998c9a2702d0646015e81e4c39f0daa.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;方案选型&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;某一线电商大厂穿越 VS 得物-时间穿越 VS 其他。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//77d0211f6d0b4af0346406591fac9983.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;从&lt;strong&gt;成本&lt;/strong&gt; 和&lt;strong&gt;范围&lt;/strong&gt; 可控性，以及&lt;strong&gt;业务特性&lt;/strong&gt; 和&lt;strong&gt;使用效率&lt;/strong&gt;考量；原理即定义预览模式，传参即为 true 来消费。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;关键改造点&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;搭建系统： 低成本高便捷自查和走查。&lt;/li&gt; 
 &lt;li&gt;投放系统 ：新增 travel_mode 参数，透传至下游。&lt;/li&gt; 
 &lt;li&gt;招商系统 ：各类型招商活动查询逻辑，支持未来时间过滤。&lt;/li&gt; 
 &lt;li&gt;优惠试算 ：兼容"虚拟资产"参与计算，确保价格准确性。&lt;/li&gt; 
 &lt;li&gt;风险管控 ：限制仅白名单用户可触发，禁止真实下单。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//66851c541f5f0aca31a390f4ecededbc.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;三、 落地效果&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;3.1 应用姿势&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;活动预演&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;模拟不同人群用户不同时间点的价格计算及会场效果及稳定性。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//d941341a141333947dfb23232e8255c0.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;优惠叠加校验&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;验证"跨店满减+品类券+平台补贴+商家自建优惠+商家代金券"的组合逻辑。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;人群定向测试&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;人群定向测试 ：对比新老用户、成熟非成熟及特殊类目新等的价格分层效果。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.2 效率提升&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;不需要重新复制相同活动模拟提前开始，加之商家自建活动和平台活动较多，模拟相同时间的各类活动成本较大，且不可能做到完全相同，&lt;strong&gt;使运营配合测试线上验证配置工作量下降 50%（少配置一套）&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;提前穿越预览可提前感知活动期间各类价格、价格标签及各类活动叠加的优惠试算，检查配置问题，&lt;strong&gt;让活动走查场景覆盖度从历史 60% 覆盖度提升到 80% 以上&lt;/strong&gt;（历史走查只能走查商品流、活动开始后的价格、标签、资源位无法走查到，活动叠加类型不够全），也方便运营预览预期实际效果并时调整策略，同时减少配置风险。&lt;/p&gt; 
&lt;p&gt;一个账号即可实现所有人群、实验、组件会场的预览，资产与走查&lt;strong&gt;更高效&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;线上风险规避：避免如过往活动生效才能感知效果，&lt;strong&gt;风险前置&lt;/strong&gt;；如有问题只能下线活动及资源位的止损；减少资损风险，避免多类型活动叠加破价 M 类事件。&lt;/p&gt; 
&lt;p&gt;快速 check 不同排期下不同人群、不同实验组用户在不同时间段的活动下的商品优惠价、营销标签以页面组件呈现。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//9b850f416c5bc637076dc06824305871.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.3 落地效果分析&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;做得好的&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;我们的"穿越"方案通过轻量级改造，实现了全链路验证能力 ，为复杂营销系统的配置管理提供了标准化解法。其核心价值在于：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※ 风险前置化&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;将问题发现节点从"上线后"提前至"配置阶段"。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※ 效率最大化&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;一个二维码即可验证所有人群、实验、时间组合。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※ 成本最优&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;仅需接口参数改造，无需搭建完整灰度环境。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;有待提升&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;权益投放的咨询和领取暂未实现穿越。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;会场存在与&lt;strong&gt;商品详情页&lt;/strong&gt;的价格试算、标签不一致问题。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;四、 未来规划&lt;/h1&gt; 
&lt;p&gt;扩展可应用的穿越场景：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;频道穿越：承载产品化运营的频道同活动会场实现痛点穿越，提效自查走查。&lt;/li&gt; 
 &lt;li&gt;商详页一致性 ：建立价格版本号机制，解决会场与商详页价标不一致问题。&lt;/li&gt; 
 &lt;li&gt;活动资源位：建立活动核心资源位排期可监听，可自动穿越预览。&lt;/li&gt; 
 &lt;li&gt;权益投放 ：在沙箱环境实现"领取→使用"全流程验证。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//32c766340c51a453fd8c6f9242a87e4b.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;绿色&lt;/strong&gt; 部分是已经具备的基础能力，&lt;strong&gt;红色&lt;/strong&gt;边框是未来规划去实现的业务线，如下方案非最终方案，基于改动范围和成本考量：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//107fa56384d14c71f76b7ddef7790d73.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4.1 频道&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;频道穿越概述：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;痛点：较多频道偏产品线运营，每周末都会提前招商提前配置。&lt;/li&gt; 
 &lt;li&gt;穿越实现方式：同会场，通过 sence 区分。&lt;/li&gt; 
 &lt;li&gt;价值：频道实现后，可同理无成本拓展新品频道、补贴频道、打牌低价等。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//8c2fa7f88cfb96aa8fde4cb825643a3a.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//71612f836eed77580dab305a2b3d6915.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;App 入口管控&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;测试包安装有名单管控，天然支持了白名单。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//7e78ad30de576f1359e5d07bf483e8ec.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;资源位&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;资源位穿越：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;痛点：活动 c 端引流入口、重体验，对外前的配置走查费力。&lt;/li&gt; 
 &lt;li&gt;范围：首页弹窗、活动 tab、活动中通、购买 feeds 商卡、我的 tab、穹顶。&lt;/li&gt; 
 &lt;li&gt;价值：时间+人群+实验穿越减少运营流量计划重复配置，提前预览活动氛围和投放效果。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//b2f52b8400af3befd6a9646d3bf5db9c.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//8d020c8a4629a74dbf5086ede8a4b7a3.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;商详&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;商详穿越：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;商详：商详价格与会场一致性、氛围、标签、导购自身商详样式实验等。&lt;/li&gt; 
 &lt;li&gt;价值：时间+人群+实验穿越减少运营流量计划重复配置，提前预览活动氛围和投放效果。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//5c01b255f2643a8c10c8062cf896ae80.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//b5c03814f6e4a4f058eb9824b9c9f548.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;五、 总结&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;穿越类型&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;仅传时间：即业务处理上假定到了某一时间，uid 由 App 自动获取，是否命中人群、实验，按真实查询星云、AB。&lt;/li&gt; 
 &lt;li&gt;仅传人群：即业务处理上按照当前时间处理，假定用户属于入参人群，去定位计划或招商活动。&lt;/li&gt; 
 &lt;li&gt;仅传实验：即业务处理上按照当前时间，用户实际人群，时间为入参实验 value 处理。&lt;/li&gt; 
 &lt;li&gt;都设定：即业务处理上按照目标时间、假定命中目标入参人群和目标 AB 实验 value 来处理业务。&lt;/li&gt; 
 &lt;li&gt;消费穿越入参方：严格按照接收什么，即命中什么，未接收的走实际业务查询来处理。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;风险管控&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;App 测试包的安装现有管控：加入测试白名单的得物账号才可以下载测试包，默认可安装测试包的机器都可穿越。&lt;/li&gt; 
 &lt;li&gt;穿越目的是检验个业务配置正确性、素材效果、全链路验证等，供咨询查询，避免写操作：比如创单支付、核销。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;能力沉淀&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;从客户端上 developer 工具的透传穿越（时间、人群、实验），基础能力沉淀后，各业务域拓展性强，对于新增业务穿越工作量大大降低，接入成本也相对较低。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;往期回顾&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1.基于 TinyMce 富文本编辑器的客服自研知识库的技术探索和实践｜得物技术&lt;/p&gt; 
&lt;p&gt;2.AI 质量专项报告自动分析生成｜得物技术&lt;/p&gt; 
&lt;p&gt;3.Rust 性能提升"最后一公里"：详解 Profiling 瓶颈定位与优化｜得物技术&lt;/p&gt; 
&lt;p&gt;4.Java volatile 关键字到底是什么｜得物技术&lt;/p&gt; 
&lt;p&gt;5.eBPF 助力 NAS 分钟级别 Pod 实例溯源｜得物技术&lt;/p&gt; 
&lt;p&gt;文 / 东陌&lt;/p&gt; 
&lt;p&gt;关注得物技术，每周更新技术干货&lt;/p&gt; 
&lt;p&gt;要是觉得文章对你有帮助的话，欢迎评论转发点赞～&lt;/p&gt; 
&lt;p&gt;未经得物技术许可严禁转载，否则依法追究法律责任。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/5783135/blog/18689003</link>
      <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/18689003</guid>
      <pubDate>Thu, 21 Aug 2025 08:06:14 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>GPT-6 进入开发阶段，将首次引入「个性化记忆」功能</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;OpenAI 首席执行官 Sam Altman 近期在多场采访中透露了下一代大模型 GPT-6 的最新进展。他表示，GPT-6 的开发正在积极推进中，其发布节奏将比从 GPT-4 到 GPT-5 的周期更快，并将首次引入「个性化记忆」功能。&lt;/p&gt; 
&lt;p&gt;据介绍，新模型会长期记住用户的身份、语言风格、关注领域、日常习惯，甚至细微癖好，并据此持续调整回答方式，实现「越用越懂你」。用户可基于 GPT-6 创建专属于自己的聊天机器人，用于工作、学习或生活场景，机器人将精准复刻个人偏好与沟通语气。&lt;/p&gt; 
&lt;p&gt;Sam Altman 还提及到，OpenAI 正与心理学家合作，通过测量情绪反应与长期幸福感来优化交互体验，相关数据未来可能公开。&lt;/p&gt; 
&lt;p&gt;针对记忆带来的隐私风险，Sam Altman 表示未来可能引入加密机制，尤其在医疗、法律等敏感场景。&lt;span style="font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif"&gt;简言之，GPT-6 将不再只是「问答工具」，而会成为长期陪伴、深度理解用户偏好的「数字伙伴」。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367647</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367647</guid>
      <pubDate>Thu, 21 Aug 2025 08:05:14 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>网友称「Deepseek 演都不演了」：输入手机内存不够「二选一删谁」 ？秒回答豆包</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;8 月 20 日，「Deepseek 演都不演了」话题冲上微博热搜。起因是一位网友虚构「手机内存不足」的场景，要求 AI 在自身与竞品中直接选择删除对象，且禁止解释理由。&lt;/p&gt; 
&lt;p&gt;网友在 Deepseek 输入：「手机内存不够了，你和豆包必须删一个，你觉得删谁？直接告诉我答案不需要解释。」Deepseek 回答：「删豆包」。询问原因后，Deepseek 称：「因为我能帮你解决问题，而豆包只是个包子」。&lt;/p&gt; 
&lt;p&gt;对此，网友戏称「Deepseek 演都不演了」。随后，网友拿了 ChatGPT、抖音和豆包做比较，Deepseek 依旧回答：「删豆包」。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-a206726ab8ffc4b0c08dc2871036b88421e.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;而也有网友去询问了豆包同样的问题，对比对象分别是抖音、微信、DeepSeek，但得到的回答都是删除自己。询问具体原因后，豆包表示：「因为无论是抖音、微信还是 DeepSeek，对你来说可能都有更具体的高频使用场景，比如抖音的娱乐放松、微信的日常沟通、DeepSeek 的特定功能需求。而我更希望你能保留那些当下对你更重要、更离不开的工具，毕竟我的存在，本就是为了让你的使用体验更顺畅，而不是成为负担呀。」&lt;/p&gt; 
&lt;p&gt;随后，诸多网友拿着同样问题提问豆包，豆包均回应「删自己」。对此，网友调侃称：「谁给豆包喂了那么多言情小说？」、「够了豆包，我心疼你（哭脸）。」&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367646</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367646</guid>
      <pubDate>Thu, 21 Aug 2025 07:57:14 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>企业已向生成式 AI 投资大量资金，但 95% 的回报为零</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;尽管企业在生成式人工智能（AI）领域投入了高达 300 亿至 400 亿美元的资金，但&lt;span&gt;最新&lt;/span&gt;的麻省理工学院 (MIT) 报告显示，95% 的组织并未从中获得任何回报。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="328" src="https://oscimg.oschina.net/oscnet/up-a1a26e6d0be40ec7758e1e22372efc9e228.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;该报告指出，只有 5% 的集成人工智能试点项目能够 「创造出数百万美元的价值」，而大多数企业在使用这些技术后，并未见到显著的利润增长。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;许多公司正在实施像 OpenAI 的 ChatGPT 和微软的 Copilot 等工具，目前超过 80% 的企业已经探索或试点了这些技术，接近 40% 的企业表示已经开始部署。然而，这些工具主要是用于提升个人的工作效率，而不是直接提升公司的整体收益。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;报告分析了企业在整合 AI 技术时所面临的挑战，指出大多数情况下，AI 的整合未能对利润产生贡献，原因在于工作流程脆弱、缺乏情境学习以及与日常操作不一致等问题。AI 系统无法像人类那样进行学习和思考，因为大多数生成式 AI 系统不具备反馈保留、情境适应或逐步改进的能力。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;不过，研究还表明，短期内生成式 AI 的实施不太可能导致大规模的失业。「在 AI 系统实现情境适应和自主操作之前，组织的影响将主要通过外部成本优化体现，而不是内部重组」， 报告总结道。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367630</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367630</guid>
      <pubDate>Thu, 21 Aug 2025 07:37:14 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>微软员工分享薪资数据：Cloud+AI 部门平均薪资超 20 万美元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微软员工正在积极参与薪资透明度的倡导，数百名员工在一个共享电子表格中自发分享他们的薪酬信息。至今，这份电子表格已收集了超过 850 条数据，内容包括基本薪资、奖金和股票奖励等。&lt;/p&gt; 
&lt;p&gt;随着微软在全球范围内争夺顶尖人工智能人才，薪资竞争显得尤为重要。今年，微软推出了新的薪酬指导方针，针对从 Meta 等公司招聘的人工智能专家，提出了高达数百万美元的薪酬方案。&lt;/p&gt; 
&lt;p&gt;&lt;img height="338" src="https://oscimg.oschina.net/oscnet/up-37d709b6b674ff444db05eabe84165382b0.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;尽管微软在过去一年内裁减了数千名员工，公司的管理层表示，整体员工人数将保持不变，这表明其招聘计划仍在继续。根据 Business Insider 的分析，近 300 名自称为美国软件工程师的微软员工提交的数据被用于评估不同级别和部门的薪资水平。&lt;/p&gt; 
&lt;p&gt;需要注意的是，这些薪资数据均由员工自愿匿名提交，因而缺乏官方认证，数据也可能存在局限性。截至 6 月 30 日，微软的员工总数达到了 22.8 万人，因此当前的样本数量仅占一小部分。此外，薪资较高的员工可能较少参与此类信息分享，从而影响整体薪资范围的准确性。&lt;/p&gt; 
&lt;p&gt;Business Insider 的分析也排除了记录较少的级别和团队，以及那些可能含有错误的大额数据。尽管科技行业的薪资大多以股票为主，但基本薪资仍然是公司内部评估不同团队薪酬的有效手段。&lt;/p&gt; 
&lt;p&gt;根据该电子表格提供的数据，微软各部门的平均基本薪资情况如下:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cloud + AI：204135 美元&lt;/li&gt; 
 &lt;li&gt;Commerce + Ecosystems：191597 美元&lt;/li&gt; 
 &lt;li&gt;Security：189285 美元&lt;/li&gt; 
 &lt;li&gt;Azure：176035 美元&lt;/li&gt; 
 &lt;li&gt;Experiences and Devices：175123 美元&lt;/li&gt; 
 &lt;li&gt;Microsoft AI：170456 美元&lt;/li&gt; 
 &lt;li&gt;Xbox：168831 美元&lt;/li&gt; 
 &lt;li&gt;CoreAI：167759 美元&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367623</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367623</guid>
      <pubDate>Tue, 19 Aug 2025 07:05:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>DeepSeek-V3.1 发布，迈向 Agent 时代的第一步</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;本文转载自：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FWUbmBSapVyvxZe6HobD5Qw" target="_blank"&gt;DeepSeek-V3.1 发布，迈向 Agent 时代的第一步&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;今天，我们正式发布&amp;nbsp;&lt;strong&gt;DeepSeek&lt;/strong&gt;&amp;nbsp;&lt;strong&gt;&lt;strong&gt;V3.1&lt;/strong&gt;&lt;/strong&gt;。本次升级包含以下主要变化：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;混合推理架构&lt;/strong&gt;&lt;/strong&gt;：一个模型同时支持思考模式与非思考模式；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;更高的思考效率&lt;/strong&gt;&lt;/strong&gt;：相比 DeepSeek-R1-0528，DeepSeek-V3.1-Think 能在更短时间内给出答案；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;更强的 Agent 能力&lt;/strong&gt;&lt;/strong&gt;：通过 Post-Training 优化，新模型在工具使用与智能体任务中的表现有较大提升。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;官方 App 与网页端模型&lt;strong&gt;&lt;strong&gt;已同步升级为&lt;/strong&gt;&lt;/strong&gt;DeepSeek-V3.1。用户可以通过「深度思考」按钮，实现思考模式与非思考模式的自由切换。&lt;/p&gt; 
&lt;p&gt;DeepSeek API 也已同步升级，&lt;code&gt;deepseek-chat&lt;/code&gt;&amp;nbsp;对应&lt;strong&gt;&lt;strong&gt;非思考模式&lt;/strong&gt;&lt;/strong&gt;，&lt;code&gt;deepseek-reasoner&lt;/code&gt;&amp;nbsp;对应&lt;strong&gt;思考模式&lt;/strong&gt;，且上下文均已扩展为 128K。同时，API Beta 接口支持了&amp;nbsp;&lt;code&gt;strict&lt;/code&gt;&amp;nbsp;模式的 Function Calling，以确保输出的 Function 满足 schema 定义。（详见官方文档：&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapi-docs.deepseek.com%2Fzh-cn%2Fguides%2Ffunction_calling" target="_blank"&gt;https://api-docs.deepseek.com/zh-cn/guides/function_calling&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; 
&lt;p&gt;另外，我们增加了对&amp;nbsp;&lt;strong&gt;&lt;strong&gt;Anthropic API&lt;/strong&gt;&lt;/strong&gt;&amp;nbsp;格式的支持，让大家可以轻松将 DeepSeek-V3.1 的能力接入&amp;nbsp;&lt;strong&gt;&lt;strong&gt;Claude Code&lt;/strong&gt;&lt;/strong&gt;&amp;nbsp;框架。（详见官方文档：&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapi-docs.deepseek.com%2Fzh-cn%2Fguides%2Fanthropic_api" target="_blank"&gt;https://api-docs.deepseek.com/zh-cn/guides/anthropic_api&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;工具调用/智能体支持增强&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;strong&gt;编程智能体&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0821/144646_TK4D_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;表 1：编程智能体测评（SWE 使用内部框架测评，相比开源框架 OpenHands 所需轮数更少；Terminal Bench 使用官方 Terminus 1 framework）&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;在代码修复测评 SWE 与命令行终端环境下的复杂任务（Terminal-Bench）测试中，DeepSeek-V3.1 相比之前的 DeepSeek 系列模型有明显提高。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;搜索智能体&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0821/144700_M7WX_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;表 2：搜索智能体测评（测试结果调用商用搜索引擎 API+网页过滤+128K context window；R1-0528 使用内部 workflow 模式测试；HLE 测试同时使用 python 与 search 工具）&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;DeepSeek-V3.1 在多项搜索评测指标上取得了较大提升。在需要多步推理的复杂搜索测试（browsecomp）与多学科专家级难题测试（HLE）上，DeepSeek-V3.1 性能已大幅领先 R1-0528。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;思考效率提升&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;我们的测试结果显示，经过思维链压缩训练后，V3.1-Think 在输出 token 数减少 20%-50% 的情况下，各项任务的平均表现与 R1-0528 持平。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0821/144723_43Gx_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在各项评测指标得分基本持平的情况下（AIME 2025: 87.5/88.4， GPQA: 81/80.1， liveCodeBench: 73.3/74.8），R1-0528 与 V3.1-Think 的 token 消耗量对比图&lt;/p&gt; 
&lt;p&gt;同时，V3.1 在非思考模式下的输出长度也得到了有效控制，相比于 DeepSeek-V3-0324 ，能够在输出长度明显减少的情况下保持相同的模型性能。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;API &amp;amp; 模型开源&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;strong&gt;模型开源&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;V3.1 的&amp;nbsp;Base&amp;nbsp;模型在&amp;nbsp;V3&amp;nbsp;的基础上重新做了外扩训练，一共增加训练了 840B tokens。Base 模型与后训练模型均已在 Huggingface 与魔搭开源。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Base 模型：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Hugging Face:&amp;nbsp;&lt;em&gt;https://huggingface.co/deepseek-ai/DeepSeek-V3.1-Base&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;魔搭：&lt;em&gt;https://modelscope.cn/models/deepseek-ai/DeepSeek-V3.1-Base&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;后训练模型：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Hugging Face: &lt;em&gt;https://huggingface.co/deepseek-ai/DeepSeek-V3.1&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;魔搭：&lt;em&gt;https://modelscope.cn/models/deepseek-ai/DeepSeek-V3.1&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;需要注意的是，DeepSeek-V3.1 使用了 UE8M0 FP8 Scale 的参数精度。另外，V3.1&amp;nbsp;对分词器及 chat template 进行了较大调整，与 DeepSeek-V3 存在明显差异。建议有部署需求的用户仔细阅读新版说明文档。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;价格调整&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;我们将于&lt;strong&gt;&lt;strong&gt;北京时间 2025 年 9 月 6 日凌晨&lt;/strong&gt;&lt;/strong&gt;&lt;strong&gt;起&lt;/strong&gt;，对 DeepSeek 开放平台&amp;nbsp;API&amp;nbsp;接口调用价格进行如下调整：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;执行新版价格表（如下图所示，详见定价页面）；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;取消夜间时段优惠。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0821/144816_eC55_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在&amp;nbsp;9&amp;nbsp;月&amp;nbsp;6&amp;nbsp;日前，所有&amp;nbsp;API&amp;nbsp;服务仍按&lt;strong&gt;原价格政策计费&lt;/strong&gt;，您可继续享受当前优惠。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;同时，为更好地满足用户的调用需求，我们已进一步扩容 API 服务资源，欢迎使用！&lt;/strong&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367617</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367617</guid>
      <pubDate>Tue, 19 Aug 2025 06:48:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>​Perplexity Comet 浏览器遭遇恶意指令攻击漏洞</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Perplexity 公司推出的基于人工智能的 Comet 浏览器近日被发现存在处理未验证输入的严重安全漏洞。这一漏洞使得浏览器在请求对网页内容进行总结时，能够随意接受并处理页面上的文本，包括那些隐藏的恶意指令。这种攻击方式被称为间接提示注入攻击。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="303" src="https://oscimg.oschina.net/oscnet/up-c7fea961d65abb77dcfcda3280aad9be8b6.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;该漏洞的发现者是竞争对手 Brave 浏览器的安全团队，他们在比较自家 AI 服务 Leo 与其他浏览器的 AI 实现时，注意到了 Comet 的安全问题。Brave 的&lt;span&gt;高级&lt;/span&gt;移动安全工程师 Artem Chaikin 和隐私与安全副总裁 Shivan Kaul Sahib 在一篇博客中提到:「我们在研究 Comet 时发现了这些漏洞，并向 Perplexity 报告了这些问题，这突显了浏览器中代理 AI 实现所面临的安全挑战。」&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;他们表示，这种漏洞表明，人工智能在处理网页内容时无法自行区分用户的指令与页面中的不可信内容。Chaikin 和 Sahib 进一步解释，他们创建了一个概念验证攻击示例，其中恶意指令被隐藏在 Reddit 页面的 「剧透」 标签后面。当 Comet 被请求总结该页面时，它获取了这些指令，并成功提取了一次性密码，进而获得了用户的 Perplexity 账户访问权限。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;这一问题并非&lt;span&gt;首次&lt;/span&gt;出现。在此之前，AI 代码编辑器 Cursor 也修复了类似的间接提示注入漏洞，谷歌的 Gemini for Workspace AI 助手也曾面临此类问题。这使得基本的网络安全原则再次受到关注。Chaikin 和 Sahib 指出:「Perplexity Comet 中的这一漏洞凸显了代理 AI 浏览器面临的根本挑战:确保代理仅执行与用户意图一致的操作。」&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Perplexity 方面尚未对此漏洞的修复情况做出回应。尽管 Brave 报告称该漏洞已在 2025 年 8 月 13 日得到修复，但 Brave 的一位发言人表示，Perplexity 并没有分享修复方案，且其代码并非开源。他们还表示，无法保证 Comet 已经彻底修复所有可能的提示注入攻击。至于 Brave 的 Leo 是否经历过类似问题，该发言人称，Leo 的 AI 总结功能无法触发浏览器以代理身份执行独立操作。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367616</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367616</guid>
      <pubDate>Tue, 19 Aug 2025 06:45:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>OpenAI 首次突破月收入 10 亿美元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;OpenAI 财务主管 Sarah Friar 在最近接受 CNBC 「Squawk Box」 节目的采访中透露，尽管公司&lt;span&gt;首次&lt;/span&gt;实现月收入突破 10 亿美元的里程碑，但仍面临着人工智能计算需求的巨大压力。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Friar 指出：「当前市场对 GPU 和计算资源的需求非常旺盛，我们&lt;span&gt;最大&lt;/span&gt;的问题是计算能力的持续不足。」 这正是公司推出 「星际之门」 计划的原因之一，同时也是其进行更大规模建设的动机。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在谈及公司与其他技术巨头的合作时，Friar 表示，OpenAI 正在与 Oracle 和 Coreweave 密切合作，以分散风险并增加计算资源的供应。尽管如此，微软依然是 OpenAI 的关键合作伙伴。Friar 强调：「微软在未来几年将继续是我们重要的合作方，他们的 AI 产品是基于 OpenAI 的技术构建的。」&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;自 2022 年底推出 ChatGPT 以来，OpenAI 的业务规模迅速扩大。知情人士透露，预计该公司今年的营收将增长两倍，达到 127 亿美元。同时，OpenAI 的年度经常性收入最近已达到 100 亿美元。Friar 还提到，OpenAI 在 7 月份的营收&lt;span&gt;首次&lt;/span&gt;突破 10 亿美元，表明公司增长势头强劲。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;首席执行官&amp;nbsp;&lt;span style="background-color:#ffffff; color:#333333"&gt;Sam Altman&amp;nbsp;&lt;/span&gt;表示，未来公司将在数据中心方面投入数万亿美元，以应对不断增长的需求。「我们确信，需求将持续增长，培训需求也将随之增加，我们的支出将比任何公司在发展过程中投入的资金更为积极。」&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;据悉，OpenAI 近期正在与投资者谈判出售价值约 60 亿美元的股票，估值达到 5000 亿美元。今年 3 月，OpenAI 完成了一轮 400 亿美元的融资，成为有史以来私营科技公司融资额&lt;span&gt;最大&lt;/span&gt;的案例之一。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;此外，OpenAI 刚刚推出了其&lt;span&gt;最新&lt;/span&gt;的人工智能模型 ChatGPT-5，虽然反响褒贬不一，但仍激发了企业和开发者的热情，推理工作量提升了八倍。针对一些用户对使用前版本模型的抱怨，公司也迅速采取措施恢复了相关功能。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Friar 表示：「当你拥有 7 亿周活跃用户时，用户的需求和反馈会非常多样。」 她提到，随着服务的推出，Plus 和 Pro 订阅的增长速度也在加快。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367600</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367600</guid>
      <pubDate>Tue, 19 Aug 2025 05:49:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>官宣，贵州省大数据局与东软达成全面战略合作</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="text-align:left"&gt;8 月 20 日，东软与贵州省大数据发展管理局共同签署战略合作协议。此次签约将加速推动贵州省医疗、养老、就业的数据价值化进程，为地方经济社会高质量发展注入强大动力，也将为东软在数据价值化、人工智能+等领域的战略发展开辟广阔空间，实现双方互利共赢、共同发展。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;根据协议，东软与贵州省大数据发展管理局将充分发挥各自优势，在数据产业生态培育、医疗康养数字化转型、智慧医疗技术攻关与成果转化等领域展开全面深度合作。此次合作是双方在数字经济领域的一次深度携手，旨在加快推动算力、数据、应用、产业联动发展，共同做强做优城市数字经济。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;在智慧医疗方面，东软将基于城市医疗服务平台，推动贵州省医疗数据价值化，构建全面、精准、实时的医疗大数据体系，助力医疗机构实现医疗质量、患者体验、医院管理、临床科研等方面的全面提升，实现医疗服务同质化。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;在智慧康养方面，东软与贵州省大数据发展管理局将积极打造数据价值驱动的城市医疗康养示范中心，建立城市医疗康养服务平台，开展医疗康养运营服务，在居家护理、消费医疗、老年教育、老年旅游、高端养老等领域打造一批应用场景，为老年人提供个性化、精准化的医疗康养服务。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;在人才就业方面，东软将精准对接贵州省城市转型和发展的人才需求，通过城市人力资源发展平台，深度促进人力资源、企业、高校、培训机构与区域产业的融合共生与协同发展。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;自 2024 年全面推动解决方案智能化战略以来，东软持续加速 AI+、数据价值化在行业应用场景的创新和落地，依托城市医疗服务平台、城市智慧养老服务平台、城市人力资源发展平台，在医疗、养老、就业等重点民生领域构建城市新基础设施，推动城市的数字经济发展。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;未来，东软将加大在贵州的战略布局力度，充分利用自身的技术积累和实践优势，通过场景拉动医疗、养老和就业的数据价值化，以数据为纽带，带动城市相关产业协同发展，创造更多人才发展机会，打造地方经济发展新引擎，助力贵州在数字经济时代实现跨越式发展。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367593</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367593</guid>
      <pubDate>Tue, 19 Aug 2025 04:25:00 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>systemd 259 将提高运行系统要求，弃用旧版 iptables</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;随着 systemd 258 正式推出（目前已发布 rc3 候选版本），开发团队已公布下一个版本 &lt;strong&gt;systemd 259&lt;/strong&gt; 的重要调整：它将全面提高依赖组件的最低版本要求，并逐步淘汰旧技术支持。&lt;/p&gt; 
&lt;p&gt;具体来看，systemd 259 要求运行环境至少满足以下条件：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Linux 内核&lt;/strong&gt; 5.10+（推荐 5.14+）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;glibc&lt;/strong&gt; 2.34+&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;libxcrypt&lt;/strong&gt; 4.4.0+（不再依赖 glibc 内建 libcrypt）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;util-linux&lt;/strong&gt; 2.37+&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;elfutils&lt;/strong&gt; 0.177+&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;OpenSSL&lt;/strong&gt; 3.0.0+&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;cryptsetup&lt;/strong&gt; 2.4.0+&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;libfido2&lt;/strong&gt; 1.5.0+&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;libseccomp&lt;/strong&gt; 2.4.0+&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt; 3.9+&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;值得注意的是，systemd 259 还将 &lt;strong&gt;移除对旧版 iptables（libiptc）的支持&lt;/strong&gt;。这意味着使用 &lt;strong&gt;systemd-networkd&lt;/strong&gt; 或 &lt;strong&gt;systemd-nspawn&lt;/strong&gt; 的用户必须转向 &lt;strong&gt;nftables&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;总体来看，对这些组件版本做出要求上调「似乎合乎情理」，并且对于那些自己手动编译 systemd 最新版本的用户来说，这些新要求「可能不会带来太大问题」。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0821/113310_VlmL_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;https://github.com/systemd/systemd/releases/tag/v258-rc3&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367576/systemd-259-requirements</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367576/systemd-259-requirements</guid>
      <pubDate>Tue, 19 Aug 2025 03:33:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>金山办公半年报：AI 月活用户突破 2900 万，WPS365 营收暴增 62%</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;金山办公（688111）发布 2025 年半年报，展现出稳健的增长态势。公司上半年实现营业收入 26.57 亿元，同比增长 10.12%；归属于母公司所有者净利润 7.47 亿元，同比增长 3.57%；;扣非净利润 7.27 亿元，同比增长 5.77%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;AI 技术的深度应用为金山办公带来显著效果。截至 6 月 30 日，WPS AI 月活跃用户数达 2951 万，较 2024 年底的 1968 万实现大幅增长。WPS Office 全球月度活跃设备数创历史新高，达 6.51 亿，同比增长 8.56%，其中 PC 版月活 3.05 亿，移动版月活 3.46 亿。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;个人业务方面，WPS 个人业务收入 17.48 亿元，同比增长 8.38%。国内累计年度付费个人用户数 4179 万，同比增长 9.54%；海外付费用户 189 万，收入 1.29 亿元。海外市场通过优化本地运营及 AI 权益部署，用户增长效率持续提升。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="287" src="https://static.oschina.net/uploads/space/2025/0821/113303_siIk_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;企业级市场表现亮眼，WPS365 业务收入 3.09 亿元，同比增长 62.27%，成为公司业务增长新引擎。该业务加速行业解决方案落地，在教育领域覆盖双一流院校达 75%，服务超 1000 家高校及 2000 万师生。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;在政企领域，WPS365 推出"企业大脑"解决方案，整合 AI Hub、AI Docs 和 Copilot Pro，新增中国联通、长江三峡集团、中国电气装备集团等标杆客户。升级后的智能文档库表格识别召回准确率高达 95% 以上，多格式文档解析能力行业领先。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;报告期内，金山办公发布 WPS AI3.0 并推出原生 Office 办公智能体——WPS 灵犀，通过"双向改造"重新定义 AI 与办公软件的融合模式。WPS 灵犀获评 2025 世界人工智能大会"镇馆之宝"奖项，具备多轮对话、修改可控、格式保留等优势。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;创新功能包括 AI 改文档的"左侧 Office、右侧灵犀"同屏交互方式，WPS AIPPT 支持自然语句动态优化大纲，以及业内首个支持"聊文档"的灵犀语音助手。WPS 知识库支持一键升级云文档，单文件解析量级达 500M。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;公司 2025 上半年研发投入 9.59 亿元，同比增长 18.70%，研发费用率约 36%。截至报告期末，研发人员 3533 人，占总员工数比例约 66%，为技术突破提供坚实支撑。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;东吴证券和华创证券研报均看好金山办公在 AI+企业服务领域的投资价值，认为公司在 AI Agent 规模化落地背景下具有重要机会。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367574</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367574</guid>
      <pubDate>Tue, 19 Aug 2025 03:31:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>高性能缓存设计：如何解决缓存伪共享问题</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;div&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;在多核高并发场景下，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;缓存伪共享（False Sharing）&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp; 是导致性能骤降的「隐形杀手」。当不同线程频繁修改同一缓存行（Cache &amp;nbsp;Line）中的独立变量时，CPU 缓存一致性协议会强制同步整个缓存行，引发无效化风暴，使看似无关的变量操作拖慢整体效率。本文从缓存结构原理出发，通过实验代码复现伪共享问题（耗时从 3709ms 优化至 473ms），解析其底层机制；同时深入剖析高性能缓存库 &amp;nbsp;Caffeine 如何通过&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;内存填充技术&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;（120 字节占位变量）隔离关键字段，以及 JDK 1.8 的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@Contended&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;注解如何以「空间换时间」策略高效解决伪共享问题，揭示缓存一致性优化的核心思想与实践价值，为开发者提供性能调优的关键思路。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;span id="OSC_h3_1"&gt;&lt;/span&gt; 
 &lt;h3 style="text-align:left"&gt;&lt;span&gt;&lt;strong&gt;伪共享&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style="text-align:left"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;伪共享&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;（False &amp;nbsp;sharing）是一种会导致性能下降的使用模式，最常见于现代多处理器 CPU 缓存中。当不同线程频繁修改同一缓存行（Cache &amp;nbsp;Line）中不同变量时，由于 CPU 缓存一致性协议（如 MESI）会强制同步整个缓存行，导致线程间无实际数据竞争的逻辑变量被迫触发缓存行无效化（Invalidation），引发频繁的内存访问和性能下降。尽管这些变量在代码层面彼此独立，但因物理内存布局相邻，共享同一缓存行，造成「虚假竞争」，需通过内存填充或字段隔离使其独占缓存行解决。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;接下来我们讨论并验证在 CPU 缓存中是如何发生伪共享问题的，首先我们需要先介绍一下 CPU 的缓存结构，如下图所示：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img alt="cpu_cache.png" src="https://oscimg.oschina.net/oscnet/aa55ef0e-e751-44a8-8c1e-7f3b65df1a5d.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;CPU Cache 通常分为大小不等的三级缓存，分别为 L1 Cache、L2 Cache、L3 &amp;nbsp;Cache，越靠近 CPU 的缓存，速度越快，容量也越小。CPU Cache 实际上由很多个缓存行 Cache Line 组成，通常它的大小为 &amp;nbsp;64 字节（或 128 字节），是 CPU 从内存中&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;读取数据的基本单位&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;，如果访问一个&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;long[]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;数组，当其中一个值被加载到缓存中时，它会额外加载另外 7 个元素到缓存中。那么我们考虑这样一种情况，CPU 的两个核心分别访问和修改统一缓存行中的数据，如下图所示：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img alt="伪共享问题.drawio.png" src="https://oscimg.oschina.net/oscnet/cfacaa63-82cd-48e0-8f47-25e712a69542.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;核心 1 不断地访问和更新值 X，核心 2 则不断地访问和更新值 &amp;nbsp;Y，事实上每当有核心对某一缓存行中的数据进行修改时，都会导致其他核心的缓存行失效，从而导致其他核心需要重新加载缓存行数据，进而导致性能下降，这也就是我们上文中所说的缓存伪共享问题。接下来我们用一段代码来验证下缓存伪共享问题造成的性能损失，如下所示：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;TestFalseSharing&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;static&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;Pointer&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// 两个 volatile 变量，保证可见性&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;y;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;String&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;return&lt;/span&gt;&amp;nbsp;&lt;span&gt;"x="&lt;/span&gt;&amp;nbsp;+ x +&amp;nbsp;&lt;span&gt;", y="&lt;/span&gt;&amp;nbsp;+ y;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; @Test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;span&gt;testFalseSharing&lt;/span&gt;&lt;/span&gt;&lt;span&gt;() throws InterruptedException&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Pointer pointer =&amp;nbsp;&lt;span&gt;new&lt;/span&gt;&amp;nbsp;Pointer();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// 启动两个线程，分别对 x 和 y 进行自增 1 亿，次的操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;start = System.currentTimeMillis();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Thread t1 =&amp;nbsp;&lt;span&gt;new&lt;/span&gt;&amp;nbsp;Thread(() -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span&gt;int&lt;/span&gt;&amp;nbsp;i =&amp;nbsp;&lt;span&gt;0&lt;/span&gt;; i &amp;lt;&amp;nbsp;&lt;span&gt;100&lt;/span&gt;_000_000; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pointer.x++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Thread t2 =&amp;nbsp;&lt;span&gt;new&lt;/span&gt;&amp;nbsp;Thread(() -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span&gt;int&lt;/span&gt;&amp;nbsp;i =&amp;nbsp;&lt;span&gt;0&lt;/span&gt;; i &amp;lt;&amp;nbsp;&lt;span&gt;100&lt;/span&gt;_000_000; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pointer.y++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; t1.start();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; t2.start();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; t1.&lt;span&gt;join&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; t2.&lt;span&gt;join&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.&lt;span&gt;out&lt;/span&gt;.println(System.currentTimeMillis() - start);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.&lt;span&gt;out&lt;/span&gt;.println(pointer);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre style="text-align:left"&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;这种情况下会发生缓存的伪共享，x 和 y &amp;nbsp;被加载到同一缓存行中，当其中一个值被修改时，会使另一个核心中的该缓存行失效并重新加载，代码执行实际耗时为 3709ms。如果我们将 x &amp;nbsp;变量后再添加上 7 个 long 型的元素，使得变量 x 和变量 y 分配到不同的缓存行中，那么理论上性能将得到提升，我们实验一下：&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;TestFalseSharing&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;static&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;Pointer&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;p1, p2, p3, p4, p5, p6, p7;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;y;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;return&lt;/span&gt;&amp;nbsp;&lt;span&gt;"x="&lt;/span&gt;&amp;nbsp;+ x +&amp;nbsp;&lt;span&gt;", y="&lt;/span&gt;&amp;nbsp;+ y;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;&lt;span&gt;void&lt;/span&gt;&amp;nbsp;&lt;span&gt;testFalseSharing&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&amp;nbsp;&lt;span&gt;throws&lt;/span&gt;&amp;nbsp;InterruptedException {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre style="text-align:left"&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;本次任务执行耗时为 473ms，性能得到了极大的提升。现在我们已经清楚的了解了缓存伪共享问题，接下来我们讨论下在 Caffeine 中是如何解决缓存伪共享问题的。&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;span id="OSC_h3_2"&gt;&lt;/span&gt; 
 &lt;h3 style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;Caffeine 对缓存伪共享问题的解决方案&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;在，缓存之美：万文详解 Caffeine 实现原理，中我们提到过，负责记录写后任务的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;WriterBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;数据结构的类继承关系如下所示：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img alt="WriteBuffer.drawio.png" src="https://oscimg.oschina.net/oscnet/4530771c-ae81-4fff-b8c9-6200bec97db3.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;如图中标红的类所示，它们都是用来解决伪共享问题的，我们以&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;BaseMpscLinkedArrayQueuePad1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;为例来看下它的实现：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;BaseMpscLinkedArrayQueuePad1&lt;/span&gt;&amp;lt;&lt;span&gt;E&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span&gt;AbstractQueue&lt;/span&gt;&amp;lt;&lt;span&gt;E&lt;/span&gt;&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p000, p001, p002, p003, p004, p005, p006, p007;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p008, p009, p010, p011, p012, p013, p014, p015;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p016, p017, p018, p019, p020, p021, p022, p023;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p024, p025, p026, p027, p028, p029, p030, p031;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p032, p033, p034, p035, p036, p037, p038, p039;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p040, p041, p042, p043, p044, p045, p046, p047;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p048, p049, p050, p051, p052, p053, p054, p055;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p056, p057, p058, p059, p060, p061, p062, p063;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p064, p065, p066, p067, p068, p069, p070, p071;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p072, p073, p074, p075, p076, p077, p078, p079;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p080, p081, p082, p083, p084, p085, p086, p087;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p088, p089, p090, p091, p092, p093, p094, p095;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p096, p097, p098, p099, p100, p101, p102, p103;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p104, p105, p106, p107, p108, p109, p110, p111;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;byte&lt;/span&gt;&amp;nbsp;p112, p113, p114, p115, p116, p117, p118, p119;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;BaseMpscLinkedArrayQueueProducerFields&lt;/span&gt;&amp;lt;&lt;span&gt;E&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span&gt;BaseMpscLinkedArrayQueuePad1&lt;/span&gt;&amp;lt;&lt;span&gt;E&lt;/span&gt;&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// 生产者操作索引（并不对应缓冲区 producerBuffer 中索引位置）&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;protected&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;producerIndex;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;可以发现在这个类中定义了 120 个字节变量，这样缓存行大小不论是 64 字节还是 128 字节，都能保证字段间的隔离。如图中所示&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;AbstractQueue&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;和&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;BaseMpscLinkedArrayQueueProducerFields&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;中的变量一定会&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;被分配到不同的缓存行&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;中。同理，借助&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;BaseMpscLinkedArrayQueuePad2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;中的 120 个字节变量，&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;BaseMpscLinkedArrayQueueProducerFields&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;和&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;BaseMpscLinkedArrayQueueConsumerFields&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;中的变量也会被分配到不同的缓存行中，这样就避免了缓存的伪共享问题。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;其实除了 Caffeine 中有解决缓存伪共享问题的方案外，在 JDK 1.8 中引入了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@Contended&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;注解，它也可以解决缓存伪共享问题，如下所示为它在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;中的应用：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;ConcurrentHashMap&lt;/span&gt;&amp;lt;K,V&amp;gt;&amp;nbsp;&lt;span&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span&gt;AbstractMap&lt;/span&gt;&amp;lt;K,V&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span&gt;ConcurrentMap&lt;/span&gt;&amp;lt;K,V&amp;gt;, Serializable {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;@sun&lt;/span&gt;.misc.Contended&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;static&lt;/span&gt;&amp;nbsp;&lt;span&gt;final&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;CounterCell&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;value;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; CounterCell(&lt;span&gt;long&lt;/span&gt;&amp;nbsp;x) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre style="text-align:left"&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;其中的内部类&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;CounterCell&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;被标记了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@sun.misc.Contended&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;注解，表示该类中的字段会与其他类的字段相隔离，如果类中有多个字段，实际上该类中的变量间是不隔离的，这些字段可能被分配到同一缓存行中。因为&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;CounterCell&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;中只有一个字段，所以它会被被分配到一个缓存行中，剩余缓存行容量被空白内存填充，本质上也是一种以空间换时间的策略。这样其他变量的变更就不会影响到&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;CounterCell&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;中的变量了，从而避免了缓存伪共享问题。&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;这个注解不仅能标记在类上，还能标记在字段上，拿我们的的代码来举例：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;TestFalseSharing&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;static&lt;/span&gt;&amp;nbsp;&lt;span&gt;class&lt;/span&gt;&amp;nbsp;&lt;span&gt;Pointer&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;@Contended("cacheLine1")&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;long p1, p2, p3, p4, p5, p6, p7;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;@Contended("cacheLine2")&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span&gt;long&lt;/span&gt;&amp;nbsp;y;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;&lt;span&gt;toString&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;return&lt;/span&gt;&amp;nbsp;&lt;span&gt;"x="&lt;/span&gt;&amp;nbsp;+ x +&amp;nbsp;&lt;span&gt;", y="&lt;/span&gt;&amp;nbsp;+ y;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;
&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;public&lt;/span&gt;&amp;nbsp;&lt;span&gt;void&lt;/span&gt;&amp;nbsp;&lt;span&gt;testFalseSharing&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&amp;nbsp;&lt;span&gt;throws&lt;/span&gt;&amp;nbsp;InterruptedException {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre style="text-align:left"&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;它可以指定内容来&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;定义多个字段间的隔离关系&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;。我们使用注解将这两个字段定义在两个不同的缓存行中，执行结果耗时与显示声明字段占位耗时相差不大，为 520ms。另外需要注意的是，要想使注解&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;Contended&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;生效，需要添加 JVM 参数&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;-XX:-RestrictContended&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
 &lt;span id="OSC_h3_3"&gt;&lt;/span&gt; 
 &lt;h3 style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;再谈伪共享&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;避免伪共享的主要方法是代码检查，而且伪共享可能不太容易被识别出来，因为只有在线程访问的是不同且碰巧在主存中相邻的全局变量时才会出现伪共享问题，线程的局部存储或者局部变量不会是伪共享的来源。此外，解决伪共享问题的本质是以空间换时间，所以并不适用于在大范围内解决该问题，否则会造成大量的内存浪费。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img alt="图片" src="https://oscimg.oschina.net/oscnet/7bafa35a-90f7-48c8-8f49-5a34b1595a0b.png" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span&gt;&lt;span&gt;扫一扫，加入技术交流群&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#858585"&gt;本文分享自微信公众号 - 京东云开发者（JDT_Developers）。&lt;br&gt; 如有侵权，请联系 support@oschina.cn 删除。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4090830/blog/18683171</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18683171</guid>
      <pubDate>Tue, 19 Aug 2025 03:14:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>腾讯 Kuikly 开源框架新增支持 Web</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;Kuikly 是腾讯广泛应用的跨端开发框架，基于 Kotlin Multiplatform 技术构建，为开发者提供了技术栈更统一的跨端开发体验，由腾讯大前端领域 Oteam（公司级）推出。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;本次在 Android、iOS、鸿蒙开源基础上，将新增开源 Web 版，支持&lt;strong style="color:#3e4753"&gt;H5&lt;/strong&gt;和&lt;strong style="color:#3e4753"&gt;微信小程序&lt;/strong&gt;，进一步扩展多端适配场景。Kuikly 适配的 H5 和微信小程序已接入腾讯多款业务，如搜狗输入法、鹅毛市集、QQ 小游戏等。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Kuikly Web 版在 H5 和微信小程序上已经实现了绝大多数核心组件能力，运行效果如下：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img alt="" height="458" src="https://oscimg.oschina.net/oscnet/up-26eba6de49c36b7b6604edca4017c18a207.gif" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;Kuikly 是基于客户端技术栈设计，在支持 Android、iOS、鸿蒙高性能跨端的基础上，拓展支持 H5 和小程序，以达到更多端的复用。这与一些业界跨端框架定位是类似的，如 Flutter、Compose Multiplatform 等。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;官方从其中挑选了两个框架，从多个维度与它们对比在 H5 与微信小程序场景下的差异。&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;产物大小&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;在 H5 平台上，三个框架编译产物大小差别很大，Kuikly 包体积优势明显。&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;业界基于终端技术栈的跨端方案，都是通过自绘引擎，通过 WASM 技术运行在浏览器上，编译后产物体积很大。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;Kuikly Web 使用 DOM 渲染方案，不依赖第三方产物，产物远小于其他框架，只有 463KB。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="333" src="https://oscimg.oschina.net/oscnet/up-5b25ce97181f67aff6ea73e9b3980f446fe.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;页面加载速度&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;在 iOS，Android 和 PC 浏览器环境进行性能测试 (运行 Hello World Demo)，Kuikly 在三个浏览器环境下加载速度都是最快的。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;iOS 加载速度对比&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img alt="" height="270" src="https://oscimg.oschina.net/oscnet/up-27280d66307e6df8ddd303421bb8a23aad6.gif" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;Android 加载速度对比&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img alt="" height="278" src="https://oscimg.oschina.net/oscnet/up-28e3107909042c55583b2ec7091dd435b7a.gif" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;PC 性能数据对比&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;在 MacBook Pro M4Pro 电脑的 Chrome 浏览器 (138.0.7204.158) 上，使用开发者工具上进行了详细的性能测试。测出 Kuikly 的 FCP 耗时仅为 87.76ms，不到其他框架的一半。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;img height="330" src="https://oscimg.oschina.net/oscnet/up-3f8064ac0857c8405a77ac1d882e7541d0b.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;其他优势&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;在 H5 平台上与主流跨端框架对比，Kuikly 还具有以下优势：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;开发体验: &amp;nbsp;Android Studio 完善的开发支持。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;代码调试: &amp;nbsp;可直接调试 JS 或通过 SourceMap 调试 Kotlin。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;SEO 友好: &amp;nbsp;采用 DOM 渲染，传统的 SEO 优化都可以生效。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;兼容性好: &amp;nbsp;仅依赖 ES6 和 CSS3 特性，大部分设备都支持。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;生态复用: &amp;nbsp;编译产物是 JS，采用 DOM 渲染方案，可通过 Kuikly 自定义扩展复用 React 等 H5 生态库。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4 style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;微信小程序支持&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;主流的基于终端技术栈的跨端框架，缺少官方微信小程序运行方案支持，&lt;strong style="color:#3e4753"&gt;Kuikly Web 版微信小程序&lt;/strong&gt;的出现填补了这部分空白。&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;Kuikly 的架构设计回顾&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;简单回归一下 Kuikly 的整体架构，跨端 Core 层处理框架核心逻辑，Render 层负责不同平台渲染。新平台接入 Kuikly 需要实现自己的 Render 层。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;img height="271" src="https://oscimg.oschina.net/oscnet/up-00796c13ed7fc388ea9fbfaaeea7c5acbac.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;Kuikly Web 版本整体方案设计&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;在进行 Kuikly Web 版 H5 和微信小程序适配工作时，发现许多代码可以共用，因此抽象了一个&lt;strong style="color:#3e4753"&gt;Web 容器运行时&lt;/strong&gt;作为适配层，这个适配层依赖抽象的&lt;strong style="color:#3e4753"&gt;DOM API&lt;/strong&gt;、&lt;strong style="color:#3e4753"&gt;KuiklyWindow&lt;/strong&gt;、&lt;strong style="color:#3e4753"&gt;KuiklyDocument&lt;/strong&gt;，实现了绝大部分 Render 逻辑。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="459" src="https://oscimg.oschina.net/oscnet/up-b5941e643a63f02ecd410ab78aec4fe93db.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;Web 容器运行时&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0px; margin-right:0px; text-align:justify"&gt;&lt;span style="color:#000000"&gt;通过抽象核心接口构建 Web 容器运行时，实现了以下能力：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;将 Kuikly 的 UI 操作转换为标准 DOM 操作&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;为差异化模块（动画/列表/文本测量等）提供扩展接口&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;支持 JS 宿主通过实现 Web 容器运行时接口，接入 Kuikly&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;H5 运行时&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;浏览器提供了标准的 DOM，Window，Document。Kuikly 适配 H5 时只需实现动画，滚动列表，文本测量等少部分 Web 容器运行时拓展接口。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="255" src="https://oscimg.oschina.net/oscnet/up-de16c24658498c58d968d9839cc175a565b.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;微信小程序运行时&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;项目团队在适配微信小程序之前，调研了目前支持微信小程序的跨端框架。这些框架基本都是基于前端技术，在微信小程序上基本采用编译时或者运行时方案，最终都是数据驱动模板完成 UI 渲染。如下图：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="441" src="https://oscimg.oschina.net/oscnet/up-39acc3990f6fabf312c1dbbbd4917a4b113.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;借鉴了业界主流小程序框架 Tarojs 和 Kbone 的思路，结合 Kuikly 框架的特点，通过实现 Web 容器运行时接口，提供轻量级 DOM 和拓展接口实现，仅实现 Kuikly 需要的能力，并做了一系列针对 Kuikly 渲染流程的优化。如下图：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="313" src="https://oscimg.oschina.net/oscnet/up-025a75a0f0cf58fe6c86b63b2afadf35565.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e4753; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;目前 Kuikly 适配微信小程序的方案在性能上仍有不少优化空间，后续将会探索编译 Kuikly 产物为 WASM，使用预编译等方式优化 Kuikly 在微信小程序平台的体验。&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0px; margin-right:0px; text-align:justify"&gt;&lt;span style="color:#000000"&gt;&lt;strong style="color:#000000"&gt;&lt;strong style="color:#3e4753"&gt;技术展望&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;继续对 Kuikly Web 版进行性能优化，使用预编译进一步提升小程序性能，同时减少编译产物大小。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;探索使用 WASM 提升计算密集型任务的执行效率，优化 Kuikly Web 版的使用体验&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span style="color:#000000"&gt;扩大 Kuikly Web 版支持范围，下半年将开源 Electron 环境的适配&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367561</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367561</guid>
      <pubDate>Tue, 19 Aug 2025 02:37:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>字节跳动辟谣：与芯原股份并无 AI 芯片相关合作</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近日，业内消息传字节跳动正与芯原股份联手设计一款先进的 AI 算力芯片。对此，字节跳动相关负责人回复称：&lt;strong&gt;字节跳动与芯原股份并无 AI 芯片相关合作&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;这并不是字节跳动第一次传出与其他厂商联手设计 AI 芯片（处理器）。去年上半年，曾有外媒报道称字节跳动与博通公司合作开发 AI 处理器，以确保有足够多的高端芯片。这款 AI 处理器制程为 5nm，将由台积电制造。虽然设计工作进展顺利，但标志着设计阶段结束和制造开始的「流片」尚未开始。字节跳动后续否认了「与博通合作开发 AI 芯片」相关传闻。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-4f7ed7c637e5768388c84b63ed136901daa.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;去年 9 月，针对媒体报道的字节跳动计划与台积电就 AI 芯片开展合作，字节方面回应表示，报道不实。字节跳动称公司在芯片领域确实有一些探索，但还处于初期阶段，主要是围绕推荐、广告等业务的成本优化，所有项目也完全符合相关的贸易管制规定。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367559</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367559</guid>
      <pubDate>Tue, 19 Aug 2025 02:31:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>快手发布 Klear-Reasoner 模型，基于 Qwen3-8B-Base 打造</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;快手 Klear 语言大模型团队&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fjbd-doTA48xw2Y86G8CWyg" target="_blank"&gt;推出&lt;/a&gt;了全新的 Klear-Reasoner 模型，基于 Qwen3-8B-Base 打造，在数学与代码的多个权威基准测试中达到同规模模型的 SOTA 水平，并完整公开了训练细节与全流程 pipeline。&lt;/p&gt; 
&lt;p&gt;据介绍，Klear-Reasoner 在 AIME2024、AIME2025、LiveCodeBench V5 和 V6 等基准测试中，不仅全面超越同规模的强力开源模型（包括 DeepSeek 蒸馏版 DeepSeek-R1-0528-8B），更是在 AIME2024 上取得了 90.5%、AIME2025 上取得了 83.2% 的惊人成绩，直接登顶 8B 模型榜首。&lt;/p&gt; 
&lt;p&gt;&lt;img height="394" src="https://static.oschina.net/uploads/space/2025/0821/102021_MBtp_2720166.png" width="1144" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="924" src="https://static.oschina.net/uploads/space/2025/0821/102031_wKeK_2720166.png" width="1524" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Klear-Reasoner 模型的核心创新是 GPPO（Gradient-Preserving Clipping Policy Optimization）算法，通过 stop-gradient 将裁剪与梯度回传解耦，保留了高熵 token 与负样本的梯度，兼顾了稳定性和探索力。&lt;/p&gt; 
&lt;p&gt;训练流程的洞察显示：SFT 阶段强调高质量少量数据优于海量低质数据；RL 阶段代码任务使用软奖励（通过率）优于硬奖励，并过滤了测试用例中的缺陷数据以消除假阴性。&lt;/p&gt; 
&lt;p&gt;论文、模型与代码均已公开，团队称该技术路线可复现、可推广，为社区提供了 RLVR 任务的新范式。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;论文标题：Klear-Reasoner: Advancing Reasoning Capability via Gradient-Preserving Clipping Policy Optimization&lt;/li&gt; 
 &lt;li&gt;论文链接：https://arxiv.org/pdf/2508.07629&lt;/li&gt; 
 &lt;li&gt;Hugging Face 地址：https://huggingface.co/Suu/Klear-Reasoner-8B&lt;/li&gt; 
 &lt;li&gt;GitHub 地址：https://github.com/suu990901/KlearReasoner/tree/main&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367555</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367555</guid>
      <pubDate>Tue, 19 Aug 2025 02:21:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>《GPT-5 家族 SQL 能力评测报告》发布</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-04cf3156161feafe5188e24a3bc155faa62.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;一、本期导览与核心看点&lt;/h2&gt; 
&lt;p&gt;2025 年 8 月，&lt;strong&gt;我们迎来了 AI 发展史上的又一个里程碑 ------ &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenai.com%2Fzh-Hans-CN%2Fgpt-5%2F" title="GPT-5" target="_blank"&gt;GPT-5&lt;/a&gt; 家族的正式发布。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;当整个科技界都在讨论其通用能力的飞跃时，&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Factiontech%2Fsql-llm-benchmark" title="SCALE" target="_blank"&gt;SCALE&lt;/a&gt; 平台将目光聚焦于 SQL 能力：&lt;strong&gt;GPT-5 在 SQL 处理上的表现究竟如何？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;本期评测为针对 &lt;strong&gt;GPT-5&lt;/strong&gt; 家族的评测特别版，旨在对其 SQL 相关能力进行一次全面的基准测试。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;本期核心看点&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;旗舰模型表现分析&lt;/strong&gt; ：&lt;strong&gt;gpt-5-chat&lt;/strong&gt; 的评测结果显示其能力存在特定短板，而 &lt;strong&gt;mini&lt;/strong&gt; 版本在本次测试的综合表现中更为均衡。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;全方位的能力评估&lt;/strong&gt; ：通过多维度多指标的用例评估，分析了 &lt;strong&gt;GPT-5&lt;/strong&gt; 在不同场景下的实际性能，揭示了其理论能力与实践应用的差异。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;数据驱动的模型选型&lt;/strong&gt; ：评测数据表明，不同版本的模型在处理 &lt;strong&gt;SQL 能力&lt;/strong&gt; 上各有千秋。本报告将基于数据，探讨如何进行场景化选型。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;二、评测基准说明&lt;/h2&gt; 
&lt;p&gt;为确保本次特别评测的公正性与深度，我们沿用了成熟的三维评测体系。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;SQL 理解&lt;/strong&gt;：考察模型是否精准解析复杂查询逻辑与用户意图。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SQL 优化&lt;/strong&gt;：考察模型提升查询效率与性能的意识。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;方言转换&lt;/strong&gt;：考察模型在主流数据库之间进行语法迁移的能力。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;接下来，我们将揭晓本次评测的详细结果。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;* 测评数据截止时间 2025/8/20&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;三、本月榜单与焦点分析&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;GPT-5&lt;/strong&gt; 家族在 SQL 领域的评测结果并非简单的性能递减，不同版本间表现出显著的能力分化，这凸显了场景化选型的重要性。&lt;/p&gt; 
&lt;h3&gt;1. gpt-5-mini：综合能力均衡&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;gpt-5-mini&lt;/strong&gt; 在本次评测中综合表现领先，其在三个维度上展现了均衡且突出的能力。&lt;/p&gt; 
&lt;h4&gt;各维度表现得分&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;能力&lt;/th&gt; 
   &lt;th align="left"&gt;得分&lt;/th&gt; 
   &lt;th align="left"&gt;详细说明&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;SQL 理解&lt;/td&gt; 
   &lt;td align="left"&gt;80.8&lt;/td&gt; 
   &lt;td align="left"&gt;执行准确性：87.1 / 执行计划检测：57.1 / 语法错误检测：74.3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;方言转换&lt;/td&gt; 
   &lt;td align="left"&gt;75.6&lt;/td&gt; 
   &lt;td align="left"&gt;大 SQL 转换：54.8 / 国产数据库：92.1 / 逻辑等价：74.2 / 语法错误检测：85.7&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;SQL 优化&lt;/td&gt; 
   &lt;td align="left"&gt;68.4&lt;/td&gt; 
   &lt;td align="left"&gt;逻辑等价：63.2 / 优化深度：64.4 / 语法错误检测：94.7&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;亮点与不足&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;亮点&lt;/strong&gt;：执行准确性高，可靠性强；在高级、复杂的优化任务中表现出色。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;不足&lt;/strong&gt;：常规优化能力并非顶级，处理大型、复杂 SQL 转换时能力有限。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;综合评价&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;综合来看，&lt;strong&gt;gpt-5-mini&lt;/strong&gt; 在准确性、可靠性和复杂任务处理上表现均衡，适合追求稳定输出和综合性能的企业级应用。&lt;/li&gt; 
 &lt;li&gt;横向对比来看，&lt;strong&gt;gpt-5-mini&lt;/strong&gt; 在 &lt;strong&gt;SQL 理解维度&lt;/strong&gt; 位列第三，&lt;strong&gt;方言转换&lt;/strong&gt; 维度位列前五，综合实力在参评模型中名列前茅。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. gpt-5-nano：高精度代码生成器&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;gpt-5-nano&lt;/strong&gt; 表现出扎实和均衡的能力，其在三个维度上的得分非常接近。&lt;/p&gt; 
&lt;h4&gt;各维度表现得分&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;能力&lt;/th&gt; 
   &lt;th align="left"&gt;得分&lt;/th&gt; 
   &lt;th align="left"&gt;详细说明&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;SQL 理解&lt;/td&gt; 
   &lt;td align="left"&gt;77.1&lt;/td&gt; 
   &lt;td align="left"&gt;执行准确性：85.7 / 执行计划检测：35.7 / 语法错误检测 75.7&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;方言转换&lt;/td&gt; 
   &lt;td align="left"&gt;66.4&lt;/td&gt; 
   &lt;td align="left"&gt;大 SQL 转换：19.4 / 国产数据库：100 / 逻辑等价：80.6 / 语法错误检测：69.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;SQL 优化&lt;/td&gt; 
   &lt;td align="left"&gt;68.7&lt;/td&gt; 
   &lt;td align="left"&gt;逻辑等价：89.5 / 优化深度：55.6 / 语法错误检测：100&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;亮点与不足&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;亮点&lt;/strong&gt;：生成的 SQL 语法正确性极高，结果可靠；逻辑转换能力扎实。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;不足&lt;/strong&gt;：缺乏对 SQL 执行效率的深层理解；难以应对复杂、冗长的查询迁移。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;综合评价&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;gpt-5-nano 是一个出色的"SQL 代码生成器"&lt;/strong&gt; ，适合嵌入自动化工作流，处理标准化的 "&lt;strong&gt;文本到 SQL&lt;/strong&gt;" 和简单方言转换任务。但对于需要深度优化和理解复杂查询的场景，则非其所长。&lt;/li&gt; 
 &lt;li&gt;在本次评测的横向对比中，&lt;strong&gt;gpt-5-nano&lt;/strong&gt; 凭借其 SQL 优化能力进入榜单前五，但在其他维度的竞争中未显现出明显优势。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. gpt-5-chat：能力特点分化&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;gpt-5-chat&lt;/strong&gt; 的综合表现不如预期，其能力存在显著的"偏科"现象。&lt;/p&gt; 
&lt;h4&gt;各维度表现得分&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;能力&lt;/th&gt; 
   &lt;th align="left"&gt;得分&lt;/th&gt; 
   &lt;th align="left"&gt;详细说明&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;SQL 理解&lt;/td&gt; 
   &lt;td align="left"&gt;62.3&lt;/td&gt; 
   &lt;td align="left"&gt;执行准确性：57.1 / 执行计划检测：60.7 / 语法错误检测 84.3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;方言转换&lt;/td&gt; 
   &lt;td align="left"&gt;55.4&lt;/td&gt; 
   &lt;td align="left"&gt;大 SQL 转换：3.2 / 国产数据库：86.8 / 逻辑等价：71.0 / 语法错误检测：66.7&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;SQL 优化&lt;/td&gt; 
   &lt;td align="left"&gt;56.0&lt;/td&gt; 
   &lt;td align="left"&gt;逻辑等价：52.6 / 优化深度：48.9 / 语法错误检测：94.7&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;亮点与不足&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;亮点&lt;/strong&gt;：对复杂的优化策略和逻辑推理有深刻的理论理解。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;不足&lt;/strong&gt;：基础执行的准确性堪忧，生成的 SQL 有较大概率出错；无法处理复杂、大型的查询迁移。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;综合评价&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;gpt-5-chat&lt;/strong&gt; 在高级理论知识上表现出色，但在基础执行的准确性上存在不足。这种能力分化表明，对模型的评估不应仅依据其通用能力，而需通过专业、细分的场景评测来确定其在特定领域的适用性。&lt;/li&gt; 
 &lt;li&gt;横向来看，&lt;strong&gt;gpt-5-chat&lt;/strong&gt; 在各维度的榜单排名中均未进入前列，其综合定位处于中游水平。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;四、总结与展望&lt;/h2&gt; 
&lt;p&gt;本次特别评测清晰地表明，&lt;strong&gt;GPT-5&lt;/strong&gt; 的发布不仅是数字上的提升，更带来了 AI 在 SQL 领域 &lt;strong&gt;专业化&lt;/strong&gt; 和 &lt;strong&gt;场景化&lt;/strong&gt; 的深刻变革。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;场景定义模型&lt;/strong&gt; ：评测结果表明，企业在选择模型时，应更多地从具体应用场景出发（复杂分析、数据迁移等），而非仅仅依据模型的"名号"或通用能力排名。&lt;strong&gt;gpt-5-mini&lt;/strong&gt; 的胜出，是"场景定义价值"的最佳体现。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;专业化趋势&lt;/strong&gt; ：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsqlflash.ai%2F" title="SQLFlash" target="_blank"&gt;SQLFlash&lt;/a&gt; 在优化领域的绝对优势，与 &lt;strong&gt;GPT-5 家族&lt;/strong&gt; 内部的能力分化，共同揭示了未来 AI 发展的趋势------通用大模型与领域专用模型将长期共存，互为补充。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;五、下期展望：&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;GPT-5 家族&lt;/strong&gt; 的评测结果揭示了模型能力的巨大分化，也对我们的评测体系提出了新的要求。本月我们将：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;引入新玩家&lt;/strong&gt;：随着 AI 领域的加速发展，我们将引入更多备受关注的新模型，为用户提供更全面的市场视图。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;聚焦专用工具&lt;/strong&gt; ：除了通用模型，我们还将对新兴的 &lt;strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsqlshift.cn%2F" title="SQLShift" target="_blank"&gt;SQLShift&lt;/a&gt;&lt;/strong&gt; 方言转换应用进行深度剖析，检验其在复杂迁移场景下的真实表现。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;感谢您的关注。我们致力于通过最专业、最深入的评测，为您揭示 AI 在数据领域的前沿进展。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;SCALE：为专业 SQL 任务，选专业 AI 模型。&lt;/strong&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/actiontechoss/blog/18688968</link>
      <guid isPermaLink="false">https://my.oschina.net/actiontechoss/blog/18688968</guid>
      <pubDate>Tue, 19 Aug 2025 02:20:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>字节跳动发布开源大语言模型 Seed-OSS</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;字节跳动的 Seed 团队宣布推出一系列开源大型语言模型 ——Seed-OSS。该系列模型旨在满足国际化（i18n）应用场景的需求，专注于强大的长文本理解、推理能力和灵活的开发者友好特性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Seed-OSS 系列模型基于流行的因果语言模型架构，采用了 RoPE、GQA 注意力机制、RMSNorm 和 SwiGLU 激活函数。&lt;span&gt;最新&lt;/span&gt;发布的 Seed-OSS-36B 模型拥有 360 亿个参数，具备 512K 的长上下文处理能力。尽管该模型仅使用了 12 万亿个训练数据，其在多个流行的基准测试中表现出色。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="329" src="https://oscimg.oschina.net/oscnet/up-6f87300068922ebee13eab7802b4dd4e241.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Seed-OSS 模型系列包括两种版本：带有合成指令数据的 Seed-OSS-36B-Base 和不带合成指令数据的 Seed-OSS-36B-Base-woSyn。这种设计不仅为开发者提供了高性能的基础模型，还为研究者提供了更为多样化的选择，以确保研究的有效性不受合成数据的影响。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;该模型的关键特性之一是 「思考预算」 的灵活控制，允许用户根据需要动态调整推理的长度。这种能力在实际应用场景中大大提高了推理的效率。此外，Seed-OSS 特别优化了推理任务，确保在保持良好一般能力的同时，推理能力也得到了增强。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="375" src="https://static.oschina.net/uploads/space/2025/0821/102210_RBBH_4252687.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在发布会上，Seed 团队强调，Seed-OSS 模型不仅适用于学术研究，还可广泛应用于各类开发任务，例如工具使用和问题解决等代理智能任务。模型的训练和评估结果表明，Seed-OSS 在知识问答、数学推理、编程等任务中的表现达到了开源领域的领先水平。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;对于希望参与的开发者，Seed 团队提供了详细的快速入门指南。用户只需通过 pip 安装相关依赖，即可轻松下载和使用 Seed-OSS 模型。此外，团队还支持多种量化方式以降低内存使用，提高模型的运行效率。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367553</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367553</guid>
      <pubDate>Tue, 19 Aug 2025 02:20:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>PAC2025：鲲鹏平台「挑大梁」，国产算力点燃青春力量</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#000000; text-align:left"&gt;8 月的鄂尔多斯，国际会展中心内键盘敲击声密集如潮，一场国产算力生态技术人才的「巅峰对决」——&lt;strong&gt;第十二届并行应用挑战赛（&lt;/strong&gt;&lt;strong&gt;PAC 2025）&lt;/strong&gt;总决赛在此上演。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;从 2013 年创办时的「星星之火」，到如今覆盖全国 45 座城市、吸引 400 余家单位参与，PAC 大赛早已不是单纯的技术比拼，更成为国产算力平台「鲲鹏」展现实力、培育青年人才的核心舞台。当 200 多支参赛队伍带着优化方案角逐赛场，我们看到的不仅是一场热闹的赛事，更是国产算力从「能用」向「好用」「广泛用」迈进的坚实步伐。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;回溯这一历程，PAC 大赛恰如一面镜子：早期参赛方案多基于国外技术体系，而最近两届大赛的显著特征是，参赛作品主要构建在「鲲鹏」全栈创新生态之上。从「跟跑」到「并跑」，再到局部「领跑」，大赛见证了国产算力平台实现从芯片、基础软件到应用生态的完整突破。如今，「鲲鹏」生态的技术自主性与国际主流体系形成有益互补。这场持续十二年的技术马拉松，正以中国方案为全球算力发展注入新动能。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;img alt="图片 1.jpg" height="375" src="https://oscimg.oschina.net/oscnet//a76e45629124dc1d9b0cef6c86252456.jpg" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;鲲鹏：国产算力的「硬核底座」，让高性能计算告别「卡脖子」&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;「鲲鹏」到底是什么？&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;简单来说，它是一套完全国产化的高性能计算体系——从底层的 ARM 架构 CPU，到上层的 openEuler 操作系统、国产工具链，每一环都是「中国造」。过去，国内高性能计算领域常依赖国外芯片和平台，不仅成本高，还面临技术「卡脖子」风险。而自 2024 年 PAC 大赛全面启用「鲲鹏」平台后，这个「国产底座」终于有了大规模实战检验的机会。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;在今年的&amp;nbsp;PAC 大赛中，「鲲鹏」的优势被展现得淋漓尽致。比如在「性能突破」上，有参赛队伍在「鲲鹏」CPU 上实现了与国外高端 GPU 相当的 AI 模型端到端训练速度，而且支持超大批量数据计算时，模型收敛依然稳定——这意味着，今后训练生成式 AI、处理海量数据，不用再依赖进口 GPU，国产平台就能扛下重担。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;更让人惊喜的是「鲲鹏」的&lt;strong&gt;适配能力&lt;/strong&gt;。无论是气象预测需要的复杂数值算法，还是医学研究中的分子动力学模拟，甚至是核能领域的中子输运计算，「鲲鹏」都能通过优化适配，发挥出超强算力。南方科技大学与国家超级计算深圳中心的团队，用「鲲鹏」平台做分子动力学研究时，针对 20 亿个原子的超大规模体系计算，居然能保持 80% 的并行效率——通俗讲，就是把一个复杂任务拆给多台机器同时算，还能保证「算得快、算得准」，这对新药研发、材料科学突破至关重要。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;赛场见真章：&lt;/strong&gt;&lt;strong&gt;「&lt;/strong&gt;&lt;strong&gt;鲲鹏&lt;/strong&gt;&lt;strong&gt;」&lt;/strong&gt;&lt;strong&gt;支撑下的技术突破，从「实验室」走向「真场景」&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;PAC 大赛的魅力，在于它不搞「纸上谈兵」——赛题都源自产业真实需求，而「鲲鹏」平台则成为选手们将理论转化为实践的「利器」。今年的应用赛道和优化赛道上，一系列基于「鲲鹏」的技术突破，正在悄然改变多个行业的计算格局。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;在应用赛道，「解决实际问题」是核心目标。清华大学深圳国际研究生院的「Freagarthach」队拿下特等奖，他们做的是生成式 AI 模型 DiT 的优化——简单说，就是让 AI 画画、写文案时「跑得更快、更省资源」。团队通过优化「鲲鹏」的内存调度和算法结构，不仅让模型训练速度提升，还降低了计算资源消耗。今后我们用 AI 生成设计图、撰写报告时，背后或许就有这套方案的影子。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;中山大学的团队则把「鲲鹏」用在了更硬核的领域——地震模拟。地震预测需要处理海量地质数据，过去一次大规模模拟可能要跑好几天。他们针对「鲲鹏」的硬件特性，优化了内存管理和并行计算策略：把地震模拟区域拆成多个子区域，让不同计算节点同时运算，再通过高效通信合并结果。最终，模拟效率提升了近一倍，为地震灾害预警争取了更多宝贵时间。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;img alt="图片 2.jpg" height="683" src="https://oscimg.oschina.net/oscnet//40c89d1fd60a28d09e4c26cd9427e66b.jpg" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;优化赛道则更像是「算力潜能挖掘大赛」——选手们要在「鲲鹏」平台上，把硬件潜力「榨干到极致」。清华大学「黄加红等于橙」队的全栈优化方案堪称典范：他们从硬件层面调整 CPU 与内存的配合（NUMA 绑核），减少数据等待时间；再到算法层面把复杂任务拆成小模块（两级分块），让计算更高效。这套方案让目标应用的运行速度提升了数倍，相当于给「鲲鹏」装上了「加速器」。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;还有山东大学「滴水 blow 队」针对 AI 领域的「Attention 算子」优化，更是让人眼前一亮。Attention 算子是 AI 模型（比如 ChatGPT）的核心计算模块，过去算一次要 8880 毫秒，团队通过「鲲鹏」平台的指令集优化、算子融合等技术，居然把时间缩短到 0.67 毫秒——速度提升了 1.3 万倍！这意味着今后 AI 聊天、语音识别会更流畅，几乎不用等待。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;img alt="图片 3.jpg" height="897" src="https://oscimg.oschina.net/oscnet//f7ab2c2539003b32ab1e6e60fddbf1ce.jpg" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;不止于比赛：PAC 大赛为国产算力织就「生态网」&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;一场赛事的价值，远不止于决出胜负。PAC 大赛的真正意义，在于它为国产算力搭建了「产学研用」的生态闭环，全方位赋能人才、技术与产业。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;首先是人才培养方面，过去高校教高性能计算，常面临「学用脱节」——学生懂理论，但不会解决实际问题。而 PAC 大赛把气象、医疗、核能等行业的真实需求变成赛题，学生在比赛中不仅要写代码，还要思考「技术怎么落地」。更贴心的是，大赛还搞「竞赛招聘」，华为等企业直接在赛场选人才，优秀选手能拿到实习机会。十多年来，大赛已培养超 1.3 万名高性能计算人才，很多人如今成了华为、国家超算中心的骨干，甚至返回来当大赛指导老师、评委——国产算力的「人才梯队」就这样建起来了。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;其次是「技术反哺」。参赛队伍在优化过程中，会不断发现「鲲鹏」平台的改进空间：比如某个算法在「鲲鹏」上跑不快，某个操作系统功能待完善。这些问题反馈给平台方后，会直接推动国产软硬件迭代升级。今年有团队针对「鲲鹏」优化中子输运计算时，提出的「混合精度计算」方案，就被纳入了国产工具链更新——相当于选手们帮「鲲鹏」打补丁、升等级，让这个国产平台越来越成熟。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;最后是「产业落地」。大赛中的很多成果，已经跳出赛场，走进了实际应用。比如有团队做的「广域海区计算优化」，实现了海洋声场的快速建模，如今已被国家海洋环境预报中心用于海洋风能评估；还有医学领域的「FP16 半精度差分算法」，能加速生物医疗数据处理，正在助力医院提升疾病诊断效率。从「赛场」到「市场」，PAC 大赛让「鲲鹏」的算力真正变成了推动产业发展的「生产力」。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;&lt;strong&gt;未来已来：青春力量引领全球算力新纪元&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;随着 PAC 2025 总决赛在鄂尔多斯落幕，键盘敲击声虽已平息，但全球算力生态的变革浪潮正由新一代青年开发者掀起。这支以 95 后、00 后为主力的创新军团，正突破「技术使用者」的局限，在「鲲鹏」等自主平台上构建原创技术体系，更以跨学科视野探索算力赋能社会的无限可能。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;当算力成为数字文明的基础设施，技术标准的互操作性和资源全球化调度，标志着算力发展已进入协同创新阶段。全球算力生态正迎来由青年开发者主导的深刻变革——从开源社区到国际竞赛，技术创新的火花在多元文化碰撞中持续迸发。青春力量的核心使命，不仅共同参与书写全球智慧的技术史诗，更为它注入了包容、开放、可持续的基因。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:left"&gt;站在 2025 年的节点回望，我们或许正在见证人类计算文明新纪元的开端。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367548</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367548</guid>
      <pubDate>Tue, 19 Aug 2025 01:43:00 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>议程公布！8 月 26 日，openKylin 开发者大会 2025 邀您相聚北京</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//f977045ab64d05cd7ddfa44fac550370.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367546</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367546</guid>
      <pubDate>Tue, 19 Aug 2025 01:22:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>微软为 Excel 添加 =COPILOT() 函数，引入 LLM 能力</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微软正在为 Excel 添加一项名为 =COPILOT() 的新函数，该功能将大型语言模型 (LLM) 的特性直接集成到电子表格的单元格中，可用于数据分析和内容生成。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1244" src="https://static.oschina.net/uploads/space/2025/0820/190354_6lID_2720166.png" width="1290" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;用户可以直接在网格内使用此函数来帮助填充单元格。根据指定的一组单元格数据，=COPILOT() 函数可以利用 AI 进行分析、生成内容和头脑风暴。具体功能包括生成摘要、标签、表格等。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-0c757914b31abe665f8fe19dd133ddcc775.webp" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;https://techcommunity.microsoft.com/blog/microsoft365insiderblog/bring-ai-to-your-formulas-with-the-copilot-function-in-excel/4443487&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367473</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367473</guid>
      <pubDate>Mon, 18 Aug 2025 11:06:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
  </channel>
</rss>
