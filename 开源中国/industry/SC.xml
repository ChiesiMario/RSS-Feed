<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-综合资讯</title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="http://8.134.148.166:30044/oschina/news/industry" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-综合资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Fri, 10 Jan 2025 07:36:25 GMT</lastBuildDate>
        <ttl>5</ttl>
        <item>
            <title>谷歌和 Linux 基金会启动基金，支持基于 Chromium 的开源浏览器</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.chromium.org%2F2025%2F01%2Fannouncing-supporters-of-chromium-based.html&quot; target=&quot;_blank&quot;&gt;谷歌&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;和 &lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linuxfoundation.org%2Fpress%2Flinux-foundation-announces-the-launch-of-supporters-of-chromium-based-browsers&quot; target=&quot;_blank&quot;&gt;Linux 基金会&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;宣布合作成立「&lt;/span&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linuxfoundation.org%2Fsupporters-of-chromium-based-browsers&quot; target=&quot;_blank&quot;&gt;Supporters of Chromium-based Browsers&lt;/a&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;」基金，旨在营造一个可持续发展的开源贡献环境，促进 Chromium 生态系统的健康发展，并为希望为该项目做出贡献的开发者社区提供资金支持。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Chromium 项目在 2008 年由谷歌推出，至今已被全球数百个不同的项目所使用。2024 年，谷歌方面向 Chromium 提交了超过&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fchrome-commit-tracker.arthursonzogni.com%2Forganizations%2Fcommits%3Frepositories%3Dchromium%26organizations%3Dall%26grouping%3Dyearly%26colors%3Dorganizations%26kind%3Dauthor%26metric%3Dcommit%26chart%3Dline%26dates%3D2000-01-01%2C2024-12-05&quot; target=&quot;_blank&quot;&gt;100,000 份代码&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;，占总贡献的约 94%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;286&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-925359894615dfdffb220270df3cfd8e24b.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根据介绍，Supporters of Chromium-Based Browsers&amp;nbsp;将提供一个中立的空间，让开发人员和更广泛的开源社区能够合作支持&amp;nbsp;Chromium 生态系统内的项目。「通过促进协作，该集体的目标是消除创新障碍，扩大采用范围，并确保 Chromium 生态系统内的项目获得蓬勃发展所需的资源。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Supporters of Chromium-Based Browsers 遵循开放治理模式，将优先考虑透明度、包容性和社区驱动的发展。其计划成立一个技术咨询委员会 (TAC) 来指导发展，以确保可以满足更广泛的 Chromium 社区的需求。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;该基金将由&amp;nbsp;Linux 基金会管理，Chromium 项目本身将继续遵循现有的治理结构。&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前，Meta、Microsoft 和 Opera 已经成为首批承诺&lt;/span&gt;&lt;span style=&quot;color:#080a12&quot;&gt;支持这一计划的&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;成，&lt;/span&gt;&lt;span style=&quot;color:#080a12&quot;&gt;他们将共同为基于 Chromium 的浏览器相关的开源项目提供关键的资金和开发支持。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329145/supporters-of-chromium-based</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329145/supporters-of-chromium-based</guid>
            <pubDate>Fri, 10 Jan 2025 07:28:20 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>商汤推出「日日新」融合大模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;商汤宣布正式推出「日日新」融合大模型，实现原生融合模态，深度推理能力与多模态信息处理能力均大幅提升。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根据国内大模型测评机构 SuperCLUE 最新发布的《中文大模型基准测评 2024 年度报告》：商汤「日日新」融合大模型以总分 68.3 的成绩，与 DeepSeek V3 一起并列国内榜首。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;175&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1f7bd5607b103427d1ab4972576d097f675.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在 SuperCLUE 年度评测中，商汤「日日新」融合大模型文科成绩以 81.8 分位列全球第一，超越 OpenAI 的 o1 模型；理科成绩夺得金牌，其中计算维度以 78.2 分位列国内第一。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在近期另一个权威综合评测机构 OpenCompass 的多模态评测中，商汤以同一款模型同样取得了榜单第一，分数大幅领先 GPT-4o。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;238&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e8f77c04f7114441dbb48d61a865e57cc0f.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;公告指出，在实际应用场景中，相较于传统大语言模型仅支持单一文本输入的模式，&quot;日日新&quot;融合大模型展现出显著优势，尤其是在自动驾驶、视频交互、办公教育、金融、园区管理、工业制造等天然拥有丰富模态信息的场景中。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「日日新&quot;融合大模型能够有效满足用户对图像、视频、语音、文本等多源异构信息的综合处理与识别需求。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329139</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329139</guid>
            <pubDate>Fri, 10 Jan 2025 07:06:20 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>16GB 内存版树莓派 5 正式上市，售价 120 美元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;树莓派基金会正式&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.raspberrypi.com%2Fnews%2F16gb-raspberry-pi-5-on-sale-now-at-120%2F&quot; target=&quot;_blank&quot;&gt;宣布推出&lt;/a&gt; 16GB 内存版树莓派 5，售价 120 美元（约 881 元人民币），并同步推出「树莓派碳移除信用额度」，用于抵消生产和处置树莓派过程中产生的碳排放。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0110/140136_7Xv3_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;官方表示相比较树莓派 4，树莓派 5 的性能提升了 3 倍，为了满足大型语言模型、计算流体力学等对内存需求较高的应用场景，以及支持运行 Ubuntu 等 Linux 发行版，推出了 16GB 内存版本，售价为 120 美元。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c833aa4179b41f18eda632bcfbb9b860538.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;树莓派 5 开发板搭载博通 BCM2712 芯片，其优化的 D0 步进版本支持大于 8GB 的内存，官方联合美光公司，封装了 8 个 16Gbit LPDDR4X 芯片，从而首次提供 16GB 内存版本。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8f4a8a92d3cfe89ea7ec97c793db7d2b762.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;16GB 内存版树莓派 5 开发板规格如下：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;SoC：Broadcom BCM2712 D0 处理器&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CPU：四核 Arm Cortex-A76 处理器 @ 2.4 GHz，带加密扩展，每核 512KB L2 缓存，2MB 共享 L3 缓存&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;GPU：VideoCore VII GPU @ 800 MHz，支持 OpenGL ES 3.1、Vulkan 1.2、4Kp60 HEVC 解码器&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;系统内存：16GB LPDDR4X-4267 SDRAM&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;存储：支持高速 SDR104 模式的 MicroSD 卡插槽&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;视频输出 / 输入&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;2 个 HDMI 端口，最高 4Kp60，支持 HDR&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;2 个 4 通道 MIPI 摄像头 / 显示器收发器&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;连接&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;通过 Broadcom BCM54213PE 收发器的千兆以太网 RJ45 端口; 通过 Raspberry Pi PoE+ HAT 提供可选的 PoE+ 支持&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;双频 802.11ac Wi-Fi 5&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;蓝牙 5.0 / 低功耗蓝牙（BLE）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;USB：2 个 USB 3.0 端口，支持同步 5Gbps 操作，2 个 USB 2.0 端口&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;拓展包&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;40 针 Raspberry Pi GPIO 接头&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;PCIe 2.0/3.0 x1 FFC 接口（需要单独的 M.2 HAT 或其他适配器）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;其他：由外部电池、电源按钮、UART 调试连接器供电的实时时钟（RTC）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;电源：通过 USB-C 提供 5V / 5A 直流电源，支持 Power Delivery&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;尺寸：85 x 56 毫米&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情：&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.raspberrypi.com%2Fproducts%2Fraspberry-pi-5%2F&quot; target=&quot;_blank&quot;&gt;https://www.raspberrypi.com/products/raspberry-pi-5/&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329128/16gb-raspberry-pi-5-on-sale-now-at-120</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329128/16gb-raspberry-pi-5-on-sale-now-at-120</guid>
            <pubDate>Tue, 07 Jan 2025 06:03:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>PostgreSQL 扩展竟有 350 个？怎么选？</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;仅仅在过去一年，数据库老司机冯若航&lt;span&gt;&lt;span&gt;&lt;span&gt;在 PG 生态里打包维护了 150 个 PG 扩展插件，已经超过 PG 官方维护的一百多个扩展了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;&lt;span style=&quot;color:#3f3f3f&quot;&gt;如今，PG 生态开箱即用的总可用扩展数量达到惊人的 350&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color:#3f3f3f&quot;&gt;个。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;&lt;span&gt;那么，PostgreSQL 扩展到底能做什么？别说用户了，就连绝大多数数据库厂商都没有一个直观的认知 —— 平均的认知程度大概是这样的：&lt;/span&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;PostgreSQL 有一个 &lt;/span&gt;&lt;span&gt;PostGIS&lt;/span&gt;&lt;span&gt; 扩展做地理信息系统还不错，还有一个 PGVECTOR 可以替代专用向量数据库也不错&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;。除此之外，没了！&lt;/p&gt; 
&lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;其实呢，PostgreSQL 生态中还有许多强力的扩展插件。不论是时间序列还是地理空间，不论是向量数据库 &lt;/span&gt;&lt;span&gt;RAG&lt;/span&gt;&lt;span&gt; 还是 AI 机器学习；不论是 OLAP 数据分析 / 数仓湖仓，还是二十多种存储过程语言，还有全文检索，图，消息队列，FDW ，甚至兼容 SQL Server / Oracle / MongoDB 等异构数据库等扩展。有诸多强大的功能尚不为广大开发者所熟悉。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;&lt;img height=&quot;500&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8f76bd44f432c8be78f278955e948e4f087.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;&lt;span style=&quot;color:#3f3f3f&quot;&gt;如何用好这些扩展，如何挑选所需的扩展，乃至于如何获取并安装这些扩展，都是需要解决的问题。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;&lt;span style=&quot;color:#3f3f3f&quot;&gt;1 月 15 日晚，开源中国邀请到 Pigsty 创始人冯若航做客《开源项目老牌与新秀》栏目直播间，聊一聊 PG 扩展是如何吞噬数据库世界的，顺便给大伙 show 一下冯若航新搞的好东西 —— &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODAyNTM5Ng%3D%3D%26mid%3D2247488830%26idx%3D1%26sn%3D5657d698692bbea315c552e0bd2c3ca5%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;PostgreSQL 包管理器 pig&lt;/a&gt;&amp;nbsp; —— 如果你对使用 PG 扩展感兴趣，相信这个工具一定可以帮到你。&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;直播主题：&lt;/strong&gt;PostgreSQL 扩展吞噬数据库世界？聊聊 PG 包管理器 pig 以及本地 PG RDS 发行版 Pigsty 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;直播时间：&lt;/strong&gt;1 月 15 日周三 19:00-20:00 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;直播平台：&lt;/strong&gt;视频号 「OSC 开源社区」 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;直播嘉宾：&lt;/strong&gt;冯若航，Pigsty 创始人，Pig 作者，公众号《非法加冯》主理人。专栏：数据库老司机，云计算泥石流。 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;直播亮点：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;PG 如何用扩展吞噬数据库世界&lt;/li&gt; 
 &lt;li&gt;数据库老司机带逛 PG 扩展大观园&lt;/li&gt; 
 &lt;li&gt;上手实战，玩转 PG 包管理器工具 pig&lt;/li&gt; 
 &lt;li&gt;高级玩法，开箱即用的 PG 发行版&lt;/li&gt; 
 &lt;li&gt;展望未来，打造新一代扩展分发标准&lt;/li&gt; 
 &lt;li&gt;Q &amp;amp; A ，直播答疑&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;扫码预约直播&lt;/strong&gt;&lt;br&gt; &lt;br&gt; &lt;img height=&quot;263&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-28b057539b0d3aa1d737decb908b1ddff70.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;另外，我们还建了一个交流群，一起聊聊自己喜欢的开源项目～～当然啦，如果你有什么特别棒的开源项目，可以推荐过来呀～&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-0e7c43c0b0553350855a379af00c6c7c15d.jpg&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;「&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;开源项目老牌与新秀&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;是开源中国 OSCHINA 推出的一档直播栏目，旨在为开源项目提供一个展示平台，每周五晚上开播&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;栏目邀请开源项目的作者、核心团队成员或资深用户作为嘉宾，通过路演式直播分享项目的亮点和经验，有助于提高项目的知名度，吸引更多的用户和开发者关注。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果你手上也有好的开源项目，想要跟同行交流分享，欢迎联系我，栏目随时开放～&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img height=&quot;537&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-aeeec97bc896bc61c715698bd6acc1f83b3.jpg&quot; width=&quot;400&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#3f3f3f; margin-left:10px; margin-right:10px; text-align:left&quot;&gt;&amp;nbsp;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/3859945/blog/17139142</link>
            <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/17139142</guid>
            <pubDate>Tue, 07 Jan 2025 03:45:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>如何开发一个支持海量分布式锁的应用库</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;blockquote&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;分布式锁是一种用于控制分布式系统中资源访问的同步机制，确保在任意时刻只有一个客户端能够获取到锁，并对共享资源进行操作。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;作用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span&gt;1.&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;保证数据一致性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：在多个节点并发执行的情况下，分布式锁可以防止同时修改同一份数据，从而避免数据不一致的问题。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;2.&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;协调任务执行&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：确保特定的任务不会被重复执行，特别是在需要幂等性（idempotent）保证的时候。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;应用场景例如&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;库存扣减&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：在电商系统中，当用户下单时需要扣减库存，为了避免超卖现象，必须确保每次扣减操作都是原子性的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;定时任务调度&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：在分布式环境中，确保同一个定时任务只在一个节点上运行，防止重复执行。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;缓存更新&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：当多个服务实例试图更新同一个缓存项时，使用分布式锁可以确保更新过程的线程安全。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;秒杀活动&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：对于高并发的抢购活动，如秒杀，使用分布式锁来控制对有限商品资源的访问是至关重要的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;文件上传&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：在分布式文件系统中，确保同一文件不会被多次上传或覆盖。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;常见实现方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基于数据库：可以使用数据库的唯一索引来实现简单的分布式锁，也可以通过 for update 等机制来实现分布式锁。例如，在尝试获取锁时插入一条记录，如果插入成功则表示获取到锁；如果违反了唯一索引约束，则说明锁已经被其他客户端持有。这种方法简单直接，但性能可能不如其他专门设计的解决方案，并且需要处理死锁和锁的自动释放等问题。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基于 Redis：Redis 是一个内存中的键值存储系统，它提供了原子性的 SETNX（Set if Not Exists）命令来设置一个键，只有当该键不存在时才会成功。结合 EXPIRE 或 PEXPIRE 命令，可以为锁设置一个过期时间，防止死锁的发生。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基于 Zookeeper：Zookeeper 支持临时顺序节点，这使得它可以实现复杂的分布式锁逻辑，如公平锁、重入锁以及读写锁。客户端创建一个临时顺序节点作为锁对象，然后检查自己创建的节点是否是最小编号的节点，以此判断是否获得锁。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基于 Etcd：Etcd 是一个高可用的分布式键值存储系统，它也能够提供分布式锁功能。与 Zookeeper 类似，etcd 使用临时键和租约机制来实现锁。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基于 Consul：同样可以用来实现分布式锁。Consul 利用 KV 存储和会话机制，可以方便地构建出分布式锁的应用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本文将利用 raftx，用简单的方法，编写一个分布式锁的应用库，它的特点是：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;使用方式简单并且可用性强&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;支持海量创建分布式锁，可以同时创建几十万甚至上百万个分布式锁&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;占用极少量的系统资源&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;无自旋阻塞策略，不占用 CPU 资源&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;抢占式获取锁&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;支持 TTL(time to live), 防止集群节点宕机造成死锁&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;raftx 的分布式易失性数据扩展模块实现分布式锁，有比常见分布式锁的实现较为明显的特点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;1.&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;高效，它基于内存。获取与释放分布式锁过程更快&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#2c2c36&quot;&gt;2.&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;可以创建海量分布式锁。如果系统需要创建海量分布式锁，比如售票系统，电商秒杀活动等， &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对于 Zookeeper，Etcd，redis 等，在创建海量分布式锁时，可能面临大量日志与大量触发机制，导致系统负载过大的问题。而&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;raftx&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;则&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;不会有这个问题。可以通过以下的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#2c2c36&quot;&gt;的实现过程，详细了解。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;什么是&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Fraftx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Raftx&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Fraftx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;raftx&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#080808&quot;&gt; 是一种对经典 Raft 协议的扩展，结合了 Multi-Paxos、ZAB（Zookeeper Atomic Broadcast）和 Raft 协议的优势。RaftX 具备快速选举、并发提案、数据同步、数据回滚以及易失性数据同步等特性，适用于高并发和大规模分布式系统场景。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fwiki%2Fraftx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;raftx wiki&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Flockx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 分布式锁应用库，支持创建海量分布式锁&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#080808&quot;&gt;Lockx 是依赖 raftx 实现的一个分布式锁应用库，实现方式简单，代码量少，100 行左右代码，但是它的功能却十分强大，主要表现在：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span style=&quot;color:#080808&quot;&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#080808&quot;&gt;高效性与及时性&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;资源占用极少&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;支持海量创建分布式锁&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;API 使用简单方便&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx 支持一次性创建成千上万，甚至数十万或数百万个分布式锁，它的实现机制保证了它不会大量占用 CPU 资源和内存资源；它的锁动作变更触发机制针对的是锁资源，而非分布式对象锁本身，也就是说，即使节点中有 100 万个锁竞争一个锁资源，每次也只会触发一次锁的释放与竞争的指令；比如锁资源&quot;lockmux&quot;,那么在分布式系统中，当资源 「lockmux」被释放时，它将触发节点中的 「lockmux」绑定事件一次，并让等待的资源随机发送一条竞争锁的指令竞争该资源锁，而不是触发 100 万个等待中的锁对象竞争事件。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Flockx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 实现方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;lockx 主要依赖 raftx 的易失性数据 API 实现，它的特点是高效，强一致性，并且可以绑定键值的增删改的触发事件；利用这些特性，可以轻松实现分布式锁的逻辑。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;MemWatch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lockstr&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;key&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; value &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; watchType raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;WatchType&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//获取锁成功与否&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; watchType &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;==&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ADD &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; mb&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ok &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;mp&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Get&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;util&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;BytesToInt64&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;value&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ok &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;del&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;key&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; util&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;BytesToInt64&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;value&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;close&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;mb&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ctx&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//锁释放，阻塞代码再次重新获取分布式锁&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; watchType &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;==&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;DELETE &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;mux&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Lock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;defer&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;mux&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Unlock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ids&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; b &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;rmap&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;key&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; b &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; k &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;range&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ids &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;MemCommand&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;key&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; util&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Int64ToBytes&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;k&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; timeout&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;MEM_PUT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;break&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//TryLock 获取锁失败触发&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; watchType &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;==&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;UPDATE &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; mb&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ok &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;mp&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Get&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;util&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;BytesToInt64&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;value&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ok &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; mb&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;isTry &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
m&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;del&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;key&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; util&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;BytesToInt64&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;value&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mb&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ctx &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;close&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;mb&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ctx&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;false&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ADD&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;DELETE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; raft&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;UPDATE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;这是 lockx 实现的核心代码，主要通过监听 raftx 易失性数据主键的增删改事件来实现资源锁的锁定与释放&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;raft.ADD 这是资源锁新增的触发事件，通过它判断哪个对象获取到分布式锁，同时关闭相应阻塞的通道，让获取锁的程序继续执行。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;raft.DELETE 这是资源锁删除的触发事件，同时它将再次发送获取资源锁的指令，抢占资源锁&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;raft.UPDATE 这是资源锁更新的触发事件，它表示资源锁获取失败，用于 TryLock，同时关闭相应阻塞的通道并返回 false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Flockx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 使用方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx 的使用非常简单，并且它可以支持大量创建分布式锁，它一共有 3 个方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;strong&gt;&lt;span&gt;Lock(string,int)&lt;/span&gt;&lt;/strong&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 获取指定资源的分布式锁并设置过期时间，阻塞&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;strong&gt;&lt;span&gt;TryLock(string,int)bool&lt;/span&gt;&lt;/strong&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 获取指定资源的分布式锁并设置过期时间，若获取不到返回 false，不阻塞&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;strong&gt;&lt;span&gt;UnLock(string)&lt;/span&gt;&lt;/strong&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 释放指定资源的分布式锁&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;以下模拟 3 个集群节点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//节点 1，创建分布式锁管理器 mutex1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex1 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NewMutex&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;:20001&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20001&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20002&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20003&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//节点 2，创建分布式锁管理器 mutex2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex2 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NewMutex&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;:20002&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20001&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20002&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20003&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//节点 3，创建分布式锁管理器 mutex3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex3 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NewMutex&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;:20003&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20001&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20002&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20003&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;第一个参数 raftx 服务地址&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;第二个参数是所有集群节点都相同的，为所有节点的访问地址 []string{&quot;127.0.0.1:20001&quot;, &quot;127.0.0.1:20002&quot;, &quot;127.0.0.1:20003&quot;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这样就完成了分布式锁管理器的创建，并可以直接获取各个自定义资源的分布式锁，这里的资源指的是字符串，比如 「test」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;示例&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//节点 1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex1 lock%d lock.....&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Lock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;test&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex1 lock%d get lock successful&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
time&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Sleep&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; time&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Second&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Unlock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;test&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex1 lock%d unlock&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//节点 2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex2 lock%d lock.....&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Lock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;test&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex2 lock%d get lock successful&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//节点 3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex3 lock%d lock.....&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Lock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;test&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex3 lock%d get lock successful&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
time&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Sleep&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; time&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Second&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
mutex3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Unlock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;test&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
logger&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Debugf&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;mutex3 lock%d unlock&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;测试调用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Test_lock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;t &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;testing&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;T&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;go&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;go&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;go&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;select&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;执行结果：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;可以看到：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;2024/12/31 22:34:35&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 三个节点的同时抢占分布式锁&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;节点 mutex2 获取到了锁，由于 mutex2 没有主动释放锁，mutex2.Lock(&quot;test&quot;, 10) 这里表示 10 秒后 ，集群自动释放锁&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;2024/12/31 22:34:45&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; mutex2 持有的分布式锁被服务自动释放，同时 mutex1 节点获取到分布式锁&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;2024/12/31 22:34:47&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; mutex1 在 2 秒后显式调用 UnLock 释放锁，同时 mutex3 节点获取到分布式锁&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;2024/12/31 22:34:49&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; mutex3 在 2 秒后显式调用 UnLock 释放锁&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Flockx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 可以海量创建分布式锁，如：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Test_multi_lock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;t &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;testing&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;T&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;15&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;++&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//mutex1 节点创建 32768 个并发任务&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;go&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;15&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;++&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//mutex2 节点创建 32768 个并发任务&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;go&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;15&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;++&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//mutex3 节点创建 32768 个并发任务&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;go&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lock3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;select&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;div&gt;
 &lt;span&gt;•&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;每个节点同时并发创建 32768 个分布式锁对象&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;执行结果：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;div&gt;
 &amp;nbsp;
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;可以看到，每 2 秒有一个对象获取到分布式锁，按顺序依次执行获取分布式锁与解锁。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（注意：mutex2 增加了 2 秒后释放锁，否则 mutex2 节点获取锁后，将等待 10 秒后有 raftx 集群释放锁）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Flockx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Lockx 的源码地址&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;可以直接将其当成第三方分布式锁库在工程中使用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;程序中调用示例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;github.com/donnie4w/lockx&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//创建分布式锁管理器 mutex1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; mutex1 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; lockx&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NewMutex&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;:20001&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20001&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20002&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;127.0.0.1:20003&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;结论&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;Lockx&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 利用了 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;raftx&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 的高效特性和易失性数据存储能力，提供了一种简洁而强大的分布式锁解决方案。它不仅适合常规的分布式锁需求，还能够在高并发环境下保持性能优势，确保系统的稳定性和可靠性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果你考虑在项目中引入这样的分布式锁库，可以参考上述信息进行评估和集成。此外，也可以根据自己的具体需求调整 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;Lockx&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 的实现，例如实现更复杂的锁行为（如公平锁等）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329113</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329113</guid>
            <pubDate>Tue, 07 Jan 2025 03:44:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>必应伪装成 Google 搜索，谷歌高管公开炮轰微软：太 Low 了！</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;近日，微软的必应搜索引擎被指控在用户搜索「Google」时，其结果页面模仿谷歌的首页设计，这一行为引发了广泛争议。&lt;/p&gt; 
&lt;p&gt;当用户在 Edge 或 Chrome 浏览器中使用必应搜索「Google」时，页面会呈现出类似谷歌的界面，让人误以为自己正在使用谷歌搜索。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0110/112354_O5QI_2720166.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;这一做法甚至引起了谷歌高管的关注，谷歌 Chrome 副总裁 Parisa Tabriz 罕见地&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Flaparisa%2Fstatus%2F1876343944700887223&quot; target=&quot;_blank&quot;&gt;公开指责微软&lt;/a&gt;&lt;/u&gt;，称其欺骗用户，非常 Low。他表示：「模仿是最真诚的恭维，但微软模仿谷歌主页是其长期欺骗用户和限制选择的历史中的又一策略。新的一年、微软新低（New year；new low）」并在最后直接@了微软。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img height=&quot;706&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0110/112549_kb6O_2720166.png&quot; width=&quot;1270&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;分析人士指出，尽管 Bing 在搜索「Google」时的页面设计确实与谷歌主页高度相似，且 Bing 的品牌标识在页面加载时被部分遮挡，但目前尚无证据表明这是微软故意欺骗用户的行为。&lt;/p&gt; 
&lt;p&gt;此外，谷歌自身在搜索引擎和浏览器市场的主导地位也曾被批评为通过不公平手段限制用户选择，因此谷歌在指责微软时也需避免被指责为「双标」。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329104/ms-bing-search-results-google-design-trick</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329104/ms-bing-search-results-google-design-trick</guid>
            <pubDate>Tue, 07 Jan 2025 03:26:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>胡润研究院发布《2024 胡润中国人工智能企业 50 强》</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;1 月 9 日，胡润研究院&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.hurun.net%2Fzh-CN%2FInfo%2FDetail%3Fnum%3DAFXL5ISUYV63&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;《2024 胡润中国人工智能企业 50 强》，按照企业价值进行排名。&lt;/p&gt; 
&lt;p&gt;上市公司市值按照 2024 年 12 月 18 日的收盘价计算，非上市公司估值参考同行业上市公司或者根据最新一轮融资情况进行估算。这是胡润研究院首次发布该榜单。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-b3008f46ae6de5fe8f6fd0fa5e3c564461a.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;该榜单聚焦于专注于 AI 算力或算法的中国企业。需要注意的是，本榜单只包括非具身智能企业，而不包括具身智能企业，例如机器人（如优必选）、智能汽车（如小鹏汽车）、智能飞行器（如大疆）和智能家居（如科沃斯）。&lt;/p&gt; 
&lt;p&gt;此外，那些在 AI 领域表现突出但 AI 非其核心业务的企业（如字节跳动、阿里巴巴、腾讯、百度等）也未被纳入本榜单评选范围。&lt;/p&gt; 
&lt;p&gt;成立于 2016 年，总部北京的 AI 芯片企业&lt;strong&gt;寒武纪以 2380 亿的价值位居榜首&lt;/strong&gt;，智能语音企业科大讯飞以 1160 亿的价值排名第二，机器视觉和大模型企业商汤科技以 500 亿的价值排名第三。&lt;/p&gt; 
&lt;p&gt;榜单显示，&lt;strong&gt;北京和上海的上榜企业占据了六成，一线城市的企业超过八成&lt;/strong&gt;。其中，北京以 20 家上榜企业领先，其中包括寒武纪、月之暗面和第四范式等；上海有 9 家上榜企业，以商汤科技、岩山科技和滴滴自动驾驶为代表；深圳上榜 8 家，云天励飞、奥比中光和晶泰科技等；广州有 4 家上榜企业，以小马智行、文远知行和云从科技为代表。&lt;/p&gt; 
&lt;p&gt;按照分类来看，视觉识别类企业有 13 家，自动驾驶类企业有 11 家，内容生成类企业有 8 家，数据分析决策类企业有 7 家，语音识别类企业有 6 家，算力硬件类企业有 5 家。&lt;/p&gt; 
&lt;p&gt;据了解，上榜企业平均成立于 2012 年。&lt;strong&gt;最年轻的上榜企业是月之暗面、百川智能和零一万物&lt;/strong&gt;，它们均成立于 2023 年，均为北京的大模型企业。&lt;/p&gt; 
&lt;p&gt;来源：&lt;u&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FT3U9RsjBSLrNEepLAfEfEw&quot; target=&quot;_blank&quot;&gt;《2024 胡润中国人工智能企业 50 强》重磅发布&lt;/a&gt;&lt;/em&gt;&lt;/u&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329091</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329091</guid>
            <pubDate>Tue, 07 Jan 2025 02:52:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>抖音集团李亮：抖音推荐算法和行业相比并无特殊之处、平台没动力制造「茧房」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;抖音集团副总裁李亮近日接受了凤凰网科技的独家访谈。&lt;/p&gt; 
&lt;p&gt;据李亮分享，&lt;strong&gt;抖音、头条推荐算法的原理和行业相比并无特殊之处&lt;/strong&gt;，不同的是每个平台为算法定制的目标，即更看重什么。抖音更为看重的指标是用户的长期留存。&lt;/p&gt; 
&lt;p&gt;其认为，信息茧房一词在推荐算法诞生前就已出现，从商业逻辑上来讲，平台没有动力去制造所谓的「茧房」，也最有动力打破「信息茧房」。&lt;/p&gt; 
&lt;p&gt;摘录部分采访内容如下：&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#e67e22&quot;&gt;&lt;strong&gt;《浪潮》：外界总说抖音的算法神秘，实际上是否如此？抖音采用的也是协同过滤这类经典推荐算法吗？还是已经历经了几番迭代，升级的重点是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;李亮：&lt;strong&gt;推荐系统是非常多算法和策略的集合，协同过滤是其中重要的一种，现在业界主流的推荐系统依然会采用协同过滤的技术思路，但在实现的细节上，例如如何利用协同数据做好向量表征的学习，如何把这种向量表征用在内容推荐上，学界和业界一直在迭代。&lt;/strong&gt;除了上述技术思路，我们也会应用其他有效的算法，例如过去我们做过对视频内容本身进行理解而进行的推荐，现在学界业界也有很多基于大模型的推荐的尝试。&lt;/p&gt; 
 &lt;p&gt;总体上说，&lt;strong&gt;抖音推荐算法的原理和行业相比并无特殊之处，不同的是每个平台为算法定制的目标，即更看重什么&lt;/strong&gt;。&lt;/p&gt; 
 &lt;p&gt;抖音真正的北极星指标是用户的长期留存，所谓北极星指标，就是指引大方向的指标。留存是一种「人数」上的概念，也就是我们希望有更多人使用抖音，更多人认可抖音。&lt;/p&gt; 
 &lt;p&gt;长短期不仅仅是时间上的不同，在结果上也会有不一样的导向，比如长期留存会更关注兴趣探索、长期使用，而短期留存会更关注点赞、完播时长等目标。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span style=&quot;color:#e67e22&quot;&gt;&lt;strong&gt;《浪潮》：有人说信息茧房是因为人性本惰，不愿意思考，所以主动接受了算法投喂的信息，这才是思维固化的真相，你怎么看待这个观点？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;李亮：「信息茧房」 这个词在推荐算法成熟之前就出现了，算法不是 「信息茧房」 形成的先决因素。&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;现在普遍对 「信息茧房」 的担心，其实是所谓的信息偏食，即信息来源单一。事实上，每个渠道分发信息都有局限性，比如公众号关注列表来源于我们自己的喜好，过去门户网站是根据编辑的价值判断，朋友圈的信息则是被我们的好友关系过滤。只看公众号，门户或者朋友圈，都会陷入所谓的 「茧房」。但实际上，大部分人都是看朋友圈，也看抖音，也看新闻客户端，信息来源是很综合的&lt;/strong&gt;。&lt;/p&gt; 
 &lt;p&gt;另外从商业逻辑上来讲，平台没有动力去制造所谓的 「茧房」，也最有动力打破 「信息茧房」，业界和学界的研究都表明了多元化内容有益于用户的长期留存。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;来源：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F6YVp_1Q4EqoyHiIB9rH2wg&quot; target=&quot;_blank&quot;&gt;https://mp.weixin.qq.com/s/6YVp_1Q4EqoyHiIB9rH2wg&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329089</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329089</guid>
            <pubDate>Tue, 07 Jan 2025 02:35:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>WePhone 创始人自杀事件迎来新进展</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;WePhone 创始人苏享茂自杀事件将迎来新进展，苏享茂的哥哥苏享龙发微博称，接到法院通知，翟欣欣涉嫌敲诈勒索一案，定于 2025 年 1 月 21 日上午 9 点 30 分在北京市海淀区人民法院山后人民法庭开庭审理。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0110/102853_ak98_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;另据红星新闻 1 月 7 日报道，从相关知情人士处了解到，苏享茂的家属已提起刑事附带民事诉讼，并已接到案件将于 1 月 21 日开庭的通知。&lt;/p&gt; 
&lt;p&gt;该媒体 2024 年 3 月曾报道，记者在 2024 年 3 月 25 日从一可靠信源处获悉，翟欣欣被抓后认罪认罚，本案涉嫌敲诈的金额巨大，翟欣欣或将获刑 10 年以上。2023 年 5 月 12 日，苏享茂的哥哥苏享龙称，被告翟欣欣撤销了对其中一起相关民事案件判决的上诉申请，原告家属于 5 月 12 日确认收到翟欣欣的 660 万元还款。&lt;/p&gt; 
&lt;p&gt;2017 年 9 月 7 号凌晨 3 点 46 分，苏享茂在自己研发的产品 WePhone 推送了一条 「公司法人被毒妻翟某害死，WePhone 即将停止运营」 的消息后，凌晨 4 点多，从西二旗的家中跳楼自杀。&lt;/p&gt; 
&lt;p&gt;自杀前一天，他在自己的社交账号上写道：「我是 WePhone 的开发者，今天我就要走了，App 以后无法运营了，抱歉。我从来没想过我是这样的结局，我竟然被我极其歹毒的前妻翟某欣给逼死了。」&lt;/p&gt; 
&lt;p&gt;2023 年 6 月 9 日，苏享茂的哥哥苏享龙发文称，翟欣欣已被逮捕，羁押在看守所。根据苏享龙在微博发布的立案告知书，翟欣欣涉嫌敲诈勒索，刑事立案时间为 2023 年 5 月 20 日。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329087</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329087</guid>
            <pubDate>Tue, 07 Jan 2025 02:29:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Chat2DB 实现：Spring AI MCP 直连数据库</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;h2&gt;引言&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/giegie/blog/17113995&quot; title=&quot;在上一篇文章中，我们初步探讨了 Spring AI MCP（Model Context Protocol）的基础概念，并通过操作本地文件的示例，展示了如何使用 MCP 让 AI 模型理解和处理文件内容&quot;&gt;在上一篇文章中，我们初步探讨了 Spring AI MCP（Model Context Protocol）的基础概念，并通过操作本地文件的示例，展示了如何使用 MCP 让 AI 模型理解和处理文件内容&lt;/a&gt;。本文将进一步深入，探讨 MCP 的进阶应用 ------ 通过 Chat2DB 实现与数据库的自然语言交互。&lt;/p&gt; 
&lt;p&gt;相比于文件操作，数据库交互往往涉及更复杂的结构和更严格的安全要求。通过 Chat2DB 和 MCP 的结合，我们将展示如何安全、高效地实现 AI 驱动的数据库查询功能。让我们一起看看如何将自然语言查询能力扩展到数据库领域。&lt;/p&gt; 
&lt;h2&gt;什么是 Chat2DB？&lt;/h2&gt; 
&lt;p&gt;Chat2DB 是一个创新的数据库交互方式，它允许我们使用自然语言来查询和操作数据库。通过结合大语言模型（LLM）的能力，Chat2DB 使得与数据库的交互变得更加直观和高效。用户可以用日常语言提问，系统会自动将这些问题转换为相应的数据库查询语句。&lt;/p&gt; 
&lt;h2&gt;MCP (Model Context Protocol) 简介&lt;/h2&gt; 
&lt;p&gt;MCP（Model Context Protocol）是一个专门设计的协议，用于为大语言模型提供数据库访问能力。它的主要特点包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;提供只读数据库访问接口&lt;/li&gt; 
 &lt;li&gt;允许 LLM 检查数据库架构&lt;/li&gt; 
 &lt;li&gt;支持执行只读查询&lt;/li&gt; 
 &lt;li&gt;确保数据安全性&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在 PostgreSQL 场景中，MCP 服务器充当了数据库和 LLM 之间的桥梁，使得 AI 模型能够安全地理解和查询数据库结构。&lt;/p&gt; 
&lt;h2&gt;Spring AI 集成实现&lt;/h2&gt; 
&lt;h3&gt;依赖配置&lt;/h3&gt; 
&lt;p&gt;首先，需要在项目中添加必要的依赖：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-ai-openai-spring-boot-starter&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.experimental&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-ai-mcp&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.4.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;模型信息配置&lt;/h3&gt; 
&lt;p&gt;笔者这里使用 deepseek v3 模型，只需要在 application.properties 中添加以下配置：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;spring.ai.openai.chat.options.model=deepseek-chat
spring.ai.openai.base-url=https://api.deepseek.com
spring.ai.openai.api-key=sk-XXX
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;核心配置实现&lt;/h3&gt; 
&lt;p&gt;以下是实现 MCP 客户端和聊天功能的核心代码：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Bean
public CommandLineRunner predefinedQuestions(ChatClient.Builder chatClientBuilder,
        List&amp;lt;McpFunctionCallback&amp;gt; functionCallbacks, ConfigurableApplicationContext context) {
    return args -&amp;gt; {
        var chatClient = chatClientBuilder
                .defaultFunctions(functionCallbacks.toArray(new McpFunctionCallback[0]))
                .build();
        String question1 = &quot;你能链接我的 postgres 数据库，然后告诉我这个数据库有多少张表吗？&quot;;
        System.out.println(&quot;ASSISTANT: &quot; + chatClient.prompt(question1).call().content());

        String question2 = &quot;你能链接我的 postgres 数据库，然后告诉我这个商品表里面哪个车最贵吗？&quot;;
        System.out.println(&quot;ASSISTANT: &quot; + chatClient.prompt(question2).call().content());
        context.close();
    };
}

@Bean
public List&amp;lt;McpFunctionCallback&amp;gt; functionCallbacks(McpSyncClient mcpClient) {
    return mcpClient.listTools(null)
            .tools()
            .stream()
            .map(tool -&amp;gt; new McpFunctionCallback(mcpClient, tool))
            .toList();
}

@Bean(destroyMethod = &quot;close&quot;)
public McpSyncClient mcpClient() {
    var stdioParams = ServerParameters.builder(&quot;npx&quot;)
            .args(&quot;-y&quot;, &quot;@modelcontextprotocol/server-postgres&quot;,
                  &quot;postgresql://postgres:lengleng@localhost:5432&quot;)
            .build();

    var mcpClient = McpClient.using(new StdioClientTransport(stdioParams))
            .requestTimeout(Duration.ofSeconds(10)).sync();

    var init = mcpClient.initialize();
    System.out.println(&quot;MCP Initialized: &quot; + init);
    return mcpClient;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;业务表如下&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://minio.pigx.vip/oss/202501/1736307613.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;测试执行&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//6660330605b9323c1ec0cc46f9fe3469.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;工作原理&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;MCP 服务器初始化&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;通过 &lt;code&gt;McpSyncClient&lt;/code&gt; 建立与数据库的连接&lt;/li&gt; 
   &lt;li&gt;配置连接参数和超时设置&lt;/li&gt; 
   &lt;li&gt;初始化 MCP 协议&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;功能回调注册&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;获取可用的数据库工具&lt;/li&gt; 
   &lt;li&gt;将工具转换为功能回调&lt;/li&gt; 
   &lt;li&gt;注册到聊天客户端&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;自然语言交互&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;用户提供自然语言问题&lt;/li&gt; 
   &lt;li&gt;Spring AI 处理并转换为数据库查询&lt;/li&gt; 
   &lt;li&gt;通过 MCP 执行查询并返回结果&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;使用场景&lt;/h2&gt; 
&lt;p&gt;Chat2DB 结合 Spring AI MCP 特别适用于以下场景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;数据分析师快速查询数据&lt;/li&gt; 
 &lt;li&gt;开发人员数据库探索&lt;/li&gt; 
 &lt;li&gt;非技术人员数据库访问&lt;/li&gt; 
 &lt;li&gt;数据库结构审查&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;安全考虑&lt;/h2&gt; 
&lt;p&gt;在使用 Chat2DB 和 MCP 时，需要注意以下安全事项：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MCP 默认只提供只读访问&lt;/li&gt; 
 &lt;li&gt;建议使用专门的只读数据库账户&lt;/li&gt; 
 &lt;li&gt;定期审查访问日志&lt;/li&gt; 
 &lt;li&gt;设置适当的超时限制&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;执行流程分析&lt;/h2&gt; 
&lt;p&gt;以下是 Spring AI MCP 与数据库交互的详细执行流程：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//9f866e1ac969ecaef1532e06f4c392e7.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;执行步骤详解&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;初始化阶段&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Spring 应用启动&lt;/li&gt; 
   &lt;li&gt;MCP Client 初始化，使用协议版本 2024-11-05&lt;/li&gt; 
   &lt;li&gt;服务器信息：example-servers/postgres v0.1.0&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;工具注册阶段&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;注册 query 工具，用于执行只读 SQL 查询&lt;/li&gt; 
   &lt;li&gt;设置查询超时时间为 10 秒&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;数据库交互阶段&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;执行数据库连接检查&lt;/li&gt; 
   &lt;li&gt;获取数据库表结构信息&lt;/li&gt; 
   &lt;li&gt;执行用户查询并返回结果&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;响应处理阶段&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;将数据库查询结果转换为结构化 JSON&lt;/li&gt; 
   &lt;li&gt;AI 模型处理结果并生成自然语言回答&lt;/li&gt; 
   &lt;li&gt;返回格式化的响应给用户&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;示例查询执行&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;-- 查询表数量
SELECT COUNT(*) as count FROM information_schema.tables 
WHERE table_schema = &#39;public&#39;;

-- 查询表结构
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name = &#39;products&#39;;

-- 查询商品数据
SELECT id, name, price 
FROM products 
ORDER BY price DESC;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这个执行流程展示了 Spring AI MCP 如何无缝地将自然语言查询转换为数据库操作，并将结果转换回用户友好的格式。整个过程是自动化的，用户无需了解底层的 SQL 查询细节。&lt;/p&gt; 
&lt;h2&gt;总结&lt;/h2&gt; 
&lt;p&gt;Chat2DB 配合 Spring AI MCP 为数据库交互提供了一个革新性的解决方案。通过自然语言处理和安全的协议设计，它既保证了易用性，又确保了数据安全。这种方案特别适合需要频繁数据库查询但希望降低技术门槛的场景。&lt;/p&gt; 
&lt;p&gt;如果您对 Java AI 感兴趣，欢迎订阅我的频道。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/giegie/blog/17138364</link>
            <guid isPermaLink="false">https://my.oschina.net/giegie/blog/17138364</guid>
            <pubDate>Tue, 07 Jan 2025 02:24:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>鸿蒙原生版微信正式上架鸿蒙应用市场</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;鸿蒙原生版微信已正式上架鸿蒙应用市场。微信更新说明中显示，已支持包括基础通讯、社交、微信支付、公众号、小程序、视频号、直播等主要功能。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;聊天和消息：支持单聊和群聊发送文本、图片、视频、语音、表情等类型消息；&lt;/li&gt; 
 &lt;li&gt;音视频通话：支持语音和视频通话；&lt;/li&gt; 
 &lt;li&gt;朋友圈： 可与朋友分享不同类型的内容，且支持设置地理位置、选择可见范围等功能；&lt;/li&gt; 
 &lt;li&gt;青少年模式：可开启青少年模式，设置可访问的内容&lt;/li&gt; 
 &lt;li&gt;微信支付：支持收发红包、转账、钱包管理等功能，可在小程序、网页中便捷使用支付服务；&lt;/li&gt; 
 &lt;li&gt;更多功能：可使用公众号、小程序、视频号、直播、听一听等功能获取内容和服务。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;不过，更新提示中也提示当前版本有部分功能受到限制或不可用。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;583&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-dcc37d3f4a3967b2e2abf2a4b98708cf589.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;据了解，微信鸿蒙版还可以直接调用系统原相机，在拍摄照片和视频时可以变焦，拍照/录制视频时效果更佳。&lt;/p&gt; 
&lt;p&gt;目前，微信、支付宝、抖音、京东、淘宝、美团、WPS Office 等 TOP 应用均已上架，原生鸿蒙生态版图的最后一块 TOP 应用终于完成。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329080</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329080</guid>
            <pubDate>Tue, 07 Jan 2025 02:11:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>xAI 推出独立 Grok 应用，上架苹果商店</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;埃隆·马斯克（Elon Musk）旗下人工智能公司 xAI 正在为其聊天机器人 Grok 测试独立的 iOS 应用程序。目前该应用程序已在美国、澳大利亚和印度等多个国家的应用商店上线。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;243&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9030cd870b7e6bc5f524e8a6424c9ed6be2.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;独立 App 的 Grok 可以访问来自网络和 X 的实时数据，并提供生成式 AI 功能，例如重写文本、总结长段落、少量问答，还可以从文本提示生成图像。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;应用介绍指出：「Grok 是一款人工智能助手，旨在最大限度地真实、实用和好奇。它可以回答任何问题，生成引人注目的图像，并上传图片以更深入地了解你的世界。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;xAI 还在准备一个专门的网站 Grok.com，以便让聊天机器人可以在网络上使用。目前，该网站显示「即将推出」。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329079</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329079</guid>
            <pubDate>Tue, 07 Jan 2025 02:05:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Fluent Editor v3.25.0 正式发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;你好，我是 Kagol，个人公众号：&lt;code&gt;前端开源星球&lt;/code&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.github.io%2Ffluent-editor%2F&quot; target=&quot;_blank&quot;&gt;Fluent Editor&lt;/a&gt; 是一个基于 Quill 2.0 的富文本编辑器，在 Quill 基础上扩展了丰富的模块和格式，框架无关、功能强大、开箱即用。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;源码：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ffluent-editor%2F&quot; target=&quot;_blank&quot;&gt;https://github.com/opentiny/fluent-editor/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;官网：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.github.io%2Ffluent-editor%2F&quot; target=&quot;_blank&quot;&gt;https://opentiny.github.io/fluent-editor/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;今天是 2025 年 1 月 2 日，也是 2025 年的第一个工作日，我们很高兴地宣布 Fluent Editor v3.25.0 正式发布！&lt;/p&gt; 
&lt;p&gt;我们一起来看下都有哪些更新吧！&lt;/p&gt; 
&lt;h2&gt;新特性 🎉&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;增加标题列表导航 by&amp;nbsp;@zzxming&amp;nbsp;in&amp;nbsp;#146&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;增加分隔线格式 &amp;nbsp;@jany55555&amp;nbsp;in&amp;nbsp;#167&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持多图片、多文件上传 by&amp;nbsp;@qwangry&amp;nbsp;in&amp;nbsp;#168&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持上传文件到服务器 by&amp;nbsp;&lt;a href=&quot;https://my.oschina.net/u/4863191&quot;&gt;@kagol&lt;/a&gt;&amp;nbsp;in&amp;nbsp;#163&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;优化重构 🎈&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;将 quill-header-list 和 quill-toolbar-tip 依赖抽离出去，减少包体积，用户可按需自行安装和使用 by&amp;nbsp;@zzxming&amp;nbsp;in&amp;nbsp;#178&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;将 i18n 国际化功能抽离成单独的模块，便于维护 by&amp;nbsp;@zzxming&amp;nbsp;in&amp;nbsp;#176&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;网站增加 PeterCatAI 小猫咪助手，可以辅助答疑，提升使用体验&amp;nbsp;@kagol&amp;nbsp;in&amp;nbsp;#181&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详细 Release Notes 请参考：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ffluent-editor%2Freleases%2Ftag%2Fv3.25.0&quot; target=&quot;_blank&quot;&gt;https://github.com/opentiny/fluent-editor/releases/tag/v3.25.0&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;贡献者团队&lt;/h2&gt; 
&lt;p&gt;目前 Fluent Editor 项目一共由 6 名核心贡献者 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkagol&quot; target=&quot;_blank&quot;&gt;Kagol&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fzzxming&quot; target=&quot;_blank&quot;&gt;zzxming&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJanson1012&quot; target=&quot;_blank&quot;&gt;Janson1012&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkeray&quot; target=&quot;_blank&quot;&gt;keray&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjany55555&quot; target=&quot;_blank&quot;&gt;jany55555&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fqwangry&quot; target=&quot;_blank&quot;&gt;qwangry&lt;/a&gt; 共同维护（还有 2 只兢兢业业检视代码和答疑的小兔子🐰 Coderabbit AI 和小猫咪🐱 PeterCatAI，希望你们不要嫌它们烦😂）。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkagol&quot; target=&quot;_blank&quot;&gt;Kagol&lt;/a&gt;：Fluent Editor 发起人，基于 Quill 2.0 搭建了 Fluent Editor 基本框架，实现了表格、图片、@提醒、文件、字符统计、代码块高亮、表情等基础功能，增加 TypeScript 类型声明，引入 Playwright 自动化测试。&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fzzxming&quot; target=&quot;_blank&quot;&gt;zzxming&lt;/a&gt;：Fluent Editor 核心贡献者，从 8 月到 11 月持续参与贡献，实现格式刷、截屏、国际化、工具栏 tooltip 提示、标题列表导航、mention 支持超链接等多个新特性，优化构建产物、减少包体积，并修复代码 ESLint 问题。zzxming 对 Quill 很熟悉，曾创建 quill-table-up、quill-toolbar-tip 等多个 Quill 模块。&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJanson1012&quot; target=&quot;_blank&quot;&gt;Janson1012&lt;/a&gt;：Fluent Editor 核心贡献者，实现深色模式，补充文件上传的 E2E 测试，并重构了表格单元格背景色逻辑。&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkeray&quot; target=&quot;_blank&quot;&gt;keray&lt;/a&gt;：引入 mathlive，为 Fluent Editor 带来 LaTex 可编辑公式功能，有效地提升了 Fluent Editor 公式编辑的体验。&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjany55555&quot; target=&quot;_blank&quot;&gt;jany55555&lt;/a&gt;：优化插入表格的交互，增加表格选择器，之前通过工具栏按钮只能插入 3x3 的表格，现在可以插入最多 10x10 的表格。除此之外，jany 还优化了表格右键菜单的体验，菜单项太多时会出现滚动条，以及增加分隔线这个新的格式。&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fqwangry&quot; target=&quot;_blank&quot;&gt;qwangry&lt;/a&gt;：为 Fluent Editor 提供多图片、多文件支持。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;贡献者招募👏&lt;/h2&gt; 
&lt;p&gt;少数人的力量毕竟是有限的，我们希望更多小伙伴能参与进来，一起共建！&lt;/p&gt; 
&lt;p&gt;&amp;gt; 现在正式面向社区招募热爱开源的小伙伴一起建设 Fluent Editor！&lt;/p&gt; 
&lt;p&gt;如果你是一名前端开发者，不管是经验丰富的开发者、还是职场萌新、或者是在校学生；&lt;/p&gt; 
&lt;p&gt;不管你是 Vue，还是 React、Angular 技术栈，不管你使用 JavaScript，还是 TypeScript；&lt;/p&gt; 
&lt;p&gt;&amp;gt; 只要你有意愿参与 Fluent Editor 的共建，我们都非常欢迎你的加入！👏&lt;/p&gt; 
&lt;p&gt;通过参与 Fluent Editor 项目，你将收获：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;学习和实践新技术&lt;/strong&gt;：由于 Fluent Editor 是一个纯 &lt;code&gt;TypeScript&lt;/code&gt; 项目，你将学习如何编写 TypeScript 类型声明；学习如何使用 &lt;code&gt;pnpm&lt;/code&gt; + &lt;code&gt;monorepo&lt;/code&gt; 的方式管理代码；如何使用 &lt;code&gt;Playwright&lt;/code&gt; 做 E2E 自动化测试。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;获得社区导师的指导&lt;/strong&gt;：如果你参与进来，我们的前辈导师也会给予你充分的指导，认真检视你的代码，将来你也将有机会成为社区的导师，指导新来的开发者完成任务。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;获得定制周边礼品&lt;/strong&gt;：Fluent Editor 是 OpenTiny 组织下的仓库，你将有机会参与 OpenTiny 年度贡献者评选，赢取精美的 OpenTiny 定制礼物，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7320066005437956134&quot; target=&quot;_blank&quot;&gt;2023 年贡献者榜单&lt;/a&gt;。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;与 OpenTiny 成员面对面交流&lt;/strong&gt;：也将有机会参加 OpenTiny 的各类线上线下活动，比如：参加 HDC 大会，并游览溪村；参加线下茶话会，与 OpenTiny 团队成员面对面交流，共进午餐等&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;感兴趣的小伙伴可以添加 OpenTiny 小助手的微信：opentiny-official（备注：共建），拉你进 Fluent Editor 核心开发群。&lt;/p&gt; 
&lt;h2&gt;往期推荐文章&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7403618336952418314&quot; target=&quot;_blank&quot;&gt;👍Fluent Editor：一个基于 Quill 2.0 的富文本编辑器，功能强大、开箱即用！&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7430505409176289320&quot; target=&quot;_blank&quot;&gt;🎈Fluent Editor 富文本开源 2 个月的总结：增加格式刷、截屏、TypeScript 类型声明等新特性&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7436030236784214068&quot; target=&quot;_blank&quot;&gt;🥳重磅更新！Fluent Editor 开源富文本支持 LaTeX 可编辑公式啦~&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7406347285901426728&quot; target=&quot;_blank&quot;&gt;🎉喜报！Fluent Editor 开源富文本迎来了第一位贡献者&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7442330442606051338&quot; target=&quot;_blank&quot;&gt;👏让我们一起来建设 Fluent Editor 开源富文本编辑器吧！&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;联系我们&lt;/h2&gt; 
&lt;p&gt;GitHub：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ffluent-editor&quot; target=&quot;_blank&quot;&gt;https://github.com/opentiny/fluent-editor&lt;/a&gt;（欢迎 Star ⭐）&lt;/p&gt; 
&lt;p&gt;官网：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.github.io%2Ffluent-editor&quot; target=&quot;_blank&quot;&gt;https://opentiny.github.io/fluent-editor&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;个人博客：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkagol.github.io%2Fblogs&quot; target=&quot;_blank&quot;&gt;https://kagol.github.io/blogs&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;小助手微信：opentiny-official&lt;/p&gt; 
&lt;p&gt;公众号：OpenTiny&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/4863191/blog/17130478</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4863191/blog/17130478</guid>
            <pubDate>Tue, 07 Jan 2025 02:00:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>天天 AI-250110：今日热点-字节豆包 Web 端反超百度文心一言，DeepSeek 也发力了</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;strong&gt;2AGI.NET：天天 AI-20250109&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;人工智能（AI）和硬件技术继续以惊人的速度发展，不断刷新我们对技术边界的认知。从英伟达的 RTX 50 系列显卡到清华团队的数学推理突破，再到 AI 算力的多个利好，这些技术的发展正在推动我们进入一个全新的智能时代。本文将为您梳理近期的技术热点，带您一探究竟。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;strong&gt;英伟达发布 RTX50 系显卡和个人 AI 超算机&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;极客公园报道了英伟达发布的 RTX 50 系列显卡和个人 AI 超算机，这些产品展示了英伟达在硬件和 AI 领域的强大实力。同时，腾讯和宁德时代被列入美国防部黑名单，引发了广泛关注。小米也公布了 SU7 试驾事故的初步调查结果，显示了企业在应对危机方面的积极态度。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FXcB4bnSeLkF8rDLcAQGBgg&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;突发！腾讯、宁德时代等被列入美国防部黑名单，旷视科技被放出！最新回应来了&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;AI 前线报道了腾讯和宁德时代被列入美国防部黑名单的消息，这一事件引发了对中美科技竞争的关注。旷视科技被移出黑名单，显示了国际科技市场的复杂性和不确定性。各企业的回应也反映了他们在应对国际形势变化中的策略和态度。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FRjAWRCwDl_026jnqrcieVw&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;仅用 8 张显卡和一万块钱，清华团队用 7B 模型打败 GPT-4o 数学推理&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;AI 前线报道了清华大学团队的最新研究成果，他们仅用 8 张显卡和一万块钱就让 7B 模型在数学推理能力上打败了 GPT-4o。这一成就展示了强化学习在提升 AI 模型性能方面的潜力，为 AI 技术的创新和应用提供了新的思路。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FtmfDy1tLJp_uiSI3WDjPBQ&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;DeepSeek 的秘方是硅谷味儿的&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;硅星人 Pro 探讨了 DeepSeek 的秘方，指出其具有浓厚的硅谷风格。DeepSeek 的成功不仅在于其技术创新，还在于其独特的商业模式和企业文化，这为其他科技企业提供了借鉴和启示。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FJmISYWRbCP6v0IvfJ-zd-w&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;黄仁勋的 CES 秀：强大 RTX 50，世界模型 Cosmos 和个人超算 Digits，英伟达还在指引未来&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;硅星人 Pro 报道了黄仁勋在 CES 上的演讲，展示了英伟达的 RTX 50 显卡、世界模型 Cosmos 和个人超算 Digits 等产品。这些产品的发布不仅展示了英伟达的技术实力，也为未来硬件和 AI 技术的发展指明了方向。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FNmJlsr2hvFK1CgHJem7-1A&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;1/10 训练数据超越 GPT-4o！清华等提出隐式过程奖励模型 PRIME，在线刷 SOTA&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;硅星人 Pro 报道了清华大学等机构提出的隐式过程奖励模型 PRIME，该模型仅用 1/10 的训练数据就超越了 GPT-4o 的性能。这一突破展示了 AI 模型优化的巨大潜力，为 AI 技术的进一步发展提供了新的思路。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F3ktkwKxdlYsdgXqX9urgsA&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;AI 算力，迎来多个利好！&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;行业精选报道了 AI 算力领域迎来的多个利好消息，包括技术进步、市场需求增长和政策支持等。这些利好因素推动了 AI 算力市场的快速发展，为 AI 技术的应用和创新提供了坚实的基础。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FDyPjpXViZJuBwX_YI0k8mw&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;字节豆包 Web 端反超百度文心一言，DeepSeek 也发力了｜量子位智库月报&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;量子位智库的月报指出，字节豆包在 Web 端的表现已经反超百度文心一言，显示出其在 AI 领域的强劲竞争力。同时，DeepSeek 也在积极发力，进一步加剧了市场竞争。这一动态不仅反映了 AI 技术在搜索引擎领域的应用潜力，也预示着未来 AI 技术在信息检索和处理方面的更大突破。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FTXiEQ2KpN1o9PXF-z1gJvg&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;「要点脸吧！」大模型巨头「吸血」网站资源无底线，被惹怒的开发者来「复仇」了！&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;AI 前线报道了大模型巨头在获取网站资源时的争议行为，引发了开发者的不满和反击。这一事件引发了对 AI 数据获取伦理和隐私保护的广泛讨论，同时也提醒企业在 AI 技术应用中需更加注重数据的合法合规使用。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FibjX4c162ytuNAjxNp30tQ&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;北航&amp;amp;ZGCLAB 提出首个检索增强生成基准测试工具库 XRAG&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;AI 前线介绍了北航和 ZGCLAB 合作提出的首个检索增强生成基准测试工具库 XRAG。这一工具库为 AI 生成模型的性能评估提供了新的标准和方法，有助于推动 AI 生成技术的进一步发展和应用。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FxaaagrodDsXEUUv5u49jWw&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;1/10 训练数据超越 GPT-4o！清华等提出隐式过程奖励模型 PRIME，在线刷 SOTA&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;硅星人 Pro 报道了清华大学等机构提出的隐式过程奖励模型 PRIME，该模型仅用 1/10 的训练数据就超越了 GPT-4o 的性能。这一突破展示了 AI 模型优化的巨大潜力，为 AI 技术的进一步发展提供了新的思路。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F3ktkwKxdlYsdgXqX9urgsA&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;AI Agent，下个机器人行业？&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;行业精选探讨了 AI Agent 的潜力，认为其可能成为下一个机器人行业。AI Agent 在提高工作效率、优化决策和增强用户体验方面具有巨大潜力，预示着 AI 技术在多个领域的广泛应用。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FhSmT8mk3OowAm_Em3UHlmw&quot; target=&quot;_blank&quot;&gt;来源&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;原文&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;🔥 热门文章推荐（2AGI.NET）&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fgoogle-ai-agent-whitepaper-detailed%2F&quot; target=&quot;_blank&quot;&gt;Google AI 智能体白皮书，超详细解读（内附下载）&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 9 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250109%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250109&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 9 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250108%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250108&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 8 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250107%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250107&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 7 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250106%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250106&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 6 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fexploring-musk-aurora-model-grok-2-technology-analysis-applications%2F&quot; target=&quot;_blank&quot;&gt;探索马斯克的 Aurora 模型与 Grok-2 工具：技术解析与应用前景&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 5 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250103%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250103&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 3 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdaily-ai-20250102%2F&quot; target=&quot;_blank&quot;&gt;天天 AI-20250102&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 2 日&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.2agi.net%2Fblog%2Fdeep-dive-deepseek-model-performance-advantages-limitations%2F&quot; target=&quot;_blank&quot;&gt;DeepSeek 3.0 大模型深度解析&lt;/a&gt; &lt;p&gt;作者：2AGI&lt;/p&gt; 2025 年 1 月 1 日&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329072</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329072</guid>
            <pubDate>Tue, 07 Jan 2025 00:43:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>开源日报 | 微软计划裁员；WePhone 创始人自杀事件将迎来新进展；纠正大模型幻觉的工具框架；AI 辅助编程的真相；中国芯片的 2025</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2025.1.9&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#245bdb&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/328947/remembering-and-thanking-steve-langasek&quot;&gt;Ubuntu 核心贡献者 Steve Langasek 去世&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Ubuntu Linux 社区的灵魂人物 ——Steve Langasek，于 2025 年 1 月 1 日因病去世，享年 45 岁。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;378&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0109/111546_JP86_2720166.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Langasek 的开源之路始于 1996 年。当时他接触了 Slackware，之后加入了 Red Hat，最终在 2000 年找到了自己的归属 ——Debian。2001 年，他正式成了 Debian 的开发者，之后的二十多年里，他参与了多个重要版本的发布，包括 Debian Sarge 和 Etch。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;2007 年，他加入 Canonical 公司，成为 Ubuntu 的发布经理。从 Ubuntu 7.10（Gutsy Gibbon）开始，直至他去世，都发挥了不可替代的领导作用。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;除了在 Ubuntu 的贡献，Langasek 还在 Linux-PAM、Samba 和 OpenLDAP 等关键项目中做出了巨大贡献，这些贡献至今仍影响着开源社区。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;即便在与病魔的长期抗争中，Langasek 依然活跃在社区，幽默地面对着困境，他对开源的热爱和付出从未改变。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;因此，他的离世，不仅让 Ubuntu 和 Debian 失去了一位重量级人物，更让整个开源世界失去了一盏指引方向的灯塔。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Ubuntu 创始人 Mark Shuttleworth 在一篇文章中，还将 Langasek 描述为&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;「Ubuntu 所有伟大之处的缩影 「&lt;/strong&gt;。他的专注、智慧和对开源理念的坚定信仰，使得无数开发者在他的指导下不断成长。&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.pingwest.com%2Fw%2F301610&quot; target=&quot;_blank&quot;&gt;微软计划裁员，绩效审查更加严厉&lt;/a&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;p&gt;据 Business Insider 报道，微软正在计划近期裁员。作为裁员计划的一部分，微软将对绩效表现不佳的员工进行更严厉的审查。&lt;/p&gt; 
  &lt;p&gt;微软发言人表示，微软注重高效率人才，公司致力于帮助员工学习和成长。但当员工表现不佳时，公司会采取适当的措施。同时报道中指出，当员工因绩效原因离职后，微软会快速填补这些职位，因此公司整体员工数量可能变化不大。&lt;/p&gt; 
  &lt;p&gt;同时有不愿透露身份的员工表示，微软在过去的几个月中一直在评估员工能力，并且多个部门都在进行裁员，包括最重要的安全部门。&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/328958&quot;&gt;通义灵码 AI 程序员全面上线：同时支持 VS Code、JetBrains IDEs&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;此次升级后的通义灵码 AI 程序员作为全球首个同时支持 VS Code、JetBrains IDEs 开发工具的 AI 程序员，可通过对话协作的方式辅助开发者完成复杂的编码任务&lt;/strong&gt;。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;在能力升级方面，此次通义灵码 AI 程序员首次引入多文件代码修改能力。开发者可通过 AI 程序员自动完成多文件级编码任务，如需求实现、问题修复、批量生成单元测试等。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;在开发者和 AI 程序员的协作过程中，双方将以多轮对话的方式逐步完成编码任务，并且会产生多个快照版本，开发者可任意切换、回退&lt;/strong&gt;。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;521&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0109/120923_RPYC_2720166.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/328933&quot;&gt;哪吒汽车回应官网异常事件：因服务器配置升级过程中出现技术故障&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;1 月 8 日，哪吒汽车法务部发文，回应近期其官网访问异常事件，并表示对造谣抹黑的自媒体取证并采取法律手段。&lt;/p&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0109/103244_zCGj_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;文中，哪吒汽车正面回应了官方异常事件。其解释，此次官网异常系因服务器配置升级过程中出现技术故障，导致网站暂时无法正常运行，并且经修复，哪吒官方于 1 月 6 日下午即已全面恢复正常访问。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ithome.com%2F0%2F823%2F323.htm&quot; target=&quot;_blank&quot;&gt;翟欣欣涉嫌敲诈勒索案 1 月 21 日开庭审理，WePhone 创始人苏享茂自杀事件将迎新进展&lt;/a&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;p&gt;1 月 8 日消息，WePhone 创始人苏享茂自杀事件将迎来新进展，苏享茂的哥哥苏享龙发微博称，接到法院通知，翟欣欣涉嫌敲诈勒索一案，定于 2025 年 1 月 21 日上午 9 点 30 分在北京市海淀区人民法院山后人民法庭开庭审理。&lt;/p&gt; 
  &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-020184116e8e0a7d77c8109864c52eb9fa3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p&gt;另据红星新闻 1 月 7 日报道，从相关知情人士处了解到，苏享茂的家属已提起刑事附带民事诉讼，并已接到案件将于 1 月 21 日开庭的通知。&lt;/p&gt; 
  &lt;p&gt;该媒体 2024 年 3 月曾报道，记者在 2024 年 3 月 25 日从一可靠信源处获悉，翟欣欣被抓后认罪认罚，本案涉嫌敲诈的金额巨大，翟欣欣或将获刑 10 年以上。2023 年 5 月 12 日，苏享茂的哥哥苏享龙称，被告翟欣欣撤销了对其中一起相关民事案件判决的上诉申请，原告家属于 5 月 12 日确认收到翟欣欣的 660 万元还款。&lt;/p&gt; 
  &lt;p&gt;2017 年 9 月 7 号凌晨 3 点 46 分，苏享茂在自己研发的产品 WePhone 推送了一条「公司法人被毒妻翟某害死，WePhone 即将停止运营」的消息后，凌晨 4 点多，从西二旗的家中跳楼自杀。&lt;/p&gt; 
  &lt;p&gt;自杀前一天，他在自己的社交账号上写道：「我是 WePhone 的开发者，今天我就要走了，App 以后无法运营了，抱歉。我从来没想过我是这样的结局，我竟然被我极其歹毒的前妻翟某欣给逼死了。」&lt;/p&gt; 
  &lt;p&gt;2023 年 6 月 9 日，苏享茂的哥哥苏享龙发文称，翟欣欣已被逮捕，羁押在看守所。根据苏享龙在微博发布的立案告知书，翟欣欣涉嫌敲诈勒索，刑事立案时间为 2023 年 5 月 20 日。&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2169039837%2FP8FxwbVjt&quot; target=&quot;_blank&quot;&gt;纠正大模型幻觉的工具框架：WikiChat&lt;/a&gt;&lt;/h4&gt; 
  &lt;p&gt;看到个可以纠正大模型幻觉的工具框架 WikiChat，简单来讲这是个 RAG 框架，针对用户提问它会检索本地 Wiki（没错把 wikipedia 塞到了向量数据库中）。然后 AI 生成后还会再次检测生成后的内容是否正确。&lt;/p&gt; 
  &lt;p&gt;实际体验，我问他 intel 12 代消费级 CPU 主频最高的是什么型号？AI 成功给出了 12900KS，并且给到了引用的 wiki 数据。&lt;/p&gt; 
  &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-2b7b2552b891c0d67c146400f82a16d3d13.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-94d574c017589fb89191bc6c2f1ef9f6e61.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p&gt;地址：github.com/stanford-oval/WikiChat&lt;br&gt; 在线使用：wikichat.genie.stanford.edu&lt;/p&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    （没错这个是个斯坦福大学的项目）
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微信&lt;strong&gt;&amp;nbsp;karminski-牙医&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F6YVp_1Q4EqoyHiIB9rH2wg&quot; target=&quot;_blank&quot;&gt;独家对话抖音集团李亮：平台没动力制造「茧房」&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;《浪潮》：有人说信息茧房是因为人性本惰，不愿意思考，所以主动接受了算法投喂的信息，这才是思维固化的真相，你怎么看待这个观点？&lt;/p&gt; 
    &lt;p&gt;李亮：「信息茧房」这个词在推荐算法成熟之前就出现了，算法不是「信息茧房」形成的先决因素。&lt;/p&gt; 
    &lt;p&gt;现在普遍对「信息茧房」的担心，其实是所谓的信息偏食，即信息来源单一。事实上，每个渠道分发信息都有局限性，比如公众号关注列表来源于我们自己的喜好，过去门户网站是根据编辑的价值判断，朋友圈的信息则是被我们的好友关系过滤。只看公众号，门户或者朋友圈，都会陷入所谓的「茧房」。但实际上，大部分人都是看朋友圈，也看抖音，也看新闻客户端，信息来源是很综合的。&lt;/p&gt; 
    &lt;p&gt;另外从商业逻辑上来讲，平台没有动力去制造所谓的「茧房」，也最有动力打破「信息茧房」，业界和学界的研究都表明了多元化内容有益于用户的长期留存。&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;凤凰网科技&lt;/strong&gt;&lt;/span&gt;
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1727858283%2FP8IJorflY%3Fpagetype%3Dprofilefeed&quot; target=&quot;_blank&quot;&gt;AI 辅助编程的真相&lt;/a&gt;&lt;/h4&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     这才是 AI 辅助编程的真相：「作为一名非专业工程师，以下是我对使用 AI 编程的真实感受：
    &lt;/div&gt; 
    &lt;div&gt;
     &lt;br&gt; 它能帮你完成 70% 的工作，但最后 30% 令人非常沮丧。每前进一步，就会因为新的 bug 和问题而后退两步。如果我知道代码是如何运作的，也许我自己就能修复这些问题。但由于我不懂，我开始怀疑自己是否真的学到了什么。」 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5abdf22b590e17aa00171de6f1cf3bc1b31.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&lt;strong&gt; 宝玉 xp&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2Fttarticle%2Fp%2Fshow%3Fid%3D2309405120615697744168&quot; target=&quot;_blank&quot;&gt;老婆饼里没有老婆，RLHF 里也没有真正的 RL&lt;/a&gt;&lt;/h4&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;p&gt;老婆饼里没有老婆，夫妻肺片里没有夫妻，RLHF 里也没有真正的 RL。在最近的一篇博客中，德克萨斯大学奥斯汀分校副教授 Atlas Wang 分享了这样一个观点。他指出，RLHF（基于人类反馈的强化学习）和其他类似的方法并没有为大型语言模型（LLM）带来真正的强化学习（RL），因为它们缺乏 RL 的核心特征：持续的环境交互和长期目标的追求。&lt;/p&gt; 
       &lt;p&gt;RLHF 主要通过单步或几步优化来调整模型输出，使其符合人类偏好，而不是在一个动态环境中进行多步骤的策略调整。此外，RLHF 通常是离线或半离线进行的，缺乏实时的环境反馈和策略更新。因此，尽管 RLHF 可以改善模型的对齐性和输出质量，但它并不能赋予 LLM 真正的目标或意图，让它们「想要」赢得游戏。LLM 仍然主要是一个基于上下文预测下一个 token 的统计系统。&lt;/p&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
    &lt;div&gt;
     &lt;span style=&quot;color:#000000&quot;&gt;- 微信&lt;strong&gt;&amp;nbsp;机器之心&lt;/strong&gt;&lt;/span&gt;
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1820733826261788812%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;科学大模型：「上线」之路还有多远&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;「科学大模型或许可以引发科研范式和方法上的革命。」北京智源人工智能研究院（以下简称「智源研究院」）院长王仲远告诉记者，科学大模型作为一种新兴工具，目前尚未在高校、科研院所以及企业进行大范围应用，除了技术层面的原因，其推广还面临诸多挑战。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;科技日报&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1820720864234241850%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;上海推进「人工智能＋」行动&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;上海市首批「模塑申城」行业应用示范基地，将推动「人工智能+」在金融、制造、教育、医疗、文旅、城市治理等重点行业的应用落地，带动上下游协同创新，共促产业生态发展。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;人民日报&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1820721934660076950%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;中国量子计算产业按下「加速键」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;从 2024 年 1 月 6 日至今，「本源悟空」上线已超一周年。期间，「本源悟空」已为来自全球 139 个国家逾 1800 万用户完成超 32 万个量子计算任务。以「本源悟空」为代表的中国量子计算产业正在按下发展「加速键」，并在应用探索领域展现出广阔前景。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;人民日报海外版&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.163.com%2Fdy%2Farticle%2FJLFGCDLR05118O8G.html&quot; target=&quot;_blank&quot;&gt;程序员出身的 AI 短片导演，用三个月拿下国际电影节的金奖&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#404040&quot;&gt;这是一个在独立电影界有影响力的国际短片电影节，不是专为 AI 作品而设，所以对 Jim 来说意义非凡，「能让评委忽略 AI 标签，关注故事本身，这让我感到欣慰」。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt; 爱范儿&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1820725489257422042%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;「芯片队长」黄仁勋，遭遇「ASIC 时刻」？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;在代文亮看来，未来，小场景的 AI 应用、小参数模型会越来越多。「千亿参数、万卡集群大部分时候是少数厂商玩家的游戏，大多数功能和场景的实现并不需要这种量级的硬件支持。」此外，端侧 AI，AI PC 和手机的概念越来越受关注，其实也侧面印证了这个趋势。所以，ASIC 定制化芯片可以说是「性价比」相当高的选择。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;span style=&quot;color:#252525&quot;&gt;&lt;strong&gt;时代财经&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FG4tNLYsMngWQEr8YtY4J0g&quot; target=&quot;_blank&quot;&gt;中国芯片的 2025：洗牌、反围堵、「死磕 28nm」练内功&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;从宏观环境看，横亘在中国半导体制造业的这场「没有硝烟的科技战」，正逐步走入「深水区」。与两年前的芯片法案清单相比，来自美方的禁令，正在围绕半导体生态链层层加码、愈演愈烈；而中国在这场关于先进科技的竞争中，也不再只是被动接招。&lt;/span&gt;&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;硅基研究室&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWasmEdge%2FWasmEdge&quot; target=&quot;_blank&quot;&gt;WasmEdge/WasmEdge&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;161&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-50eee106cb6541d74872c46a1ef25325381.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWasmEdge%2FWasmEdge&quot; target=&quot;_blank&quot;&gt;https://github.com/WasmEdge/WasmEdge&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;WasmEdge (之前名为 SSVM) 是为边缘计算优化的轻量级、高性能、可扩展的 WebAssembly (Wasm) 虚拟机，可用于云原生、边缘和去中心化的应用。&lt;/span&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/u/4939618/blog/16971026&quot; target=&quot;_blank&quot;&gt;海量存储的批量计算框架&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;本文介绍了百度针对海量存储数据计算需求研发的 HTAP 表格存储系统及计算调度架构。项目背景源于原有存储系统难以满足日益增长的 OLAP 业务需求，因此构建了集 OLTP 与 OLAP 于一体的 HTAP 系统，通过存算分离、Serverless 设计等创新点提升 IO 访问能力和资源利用率。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;图片&quot; height=&quot;242&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5e6ad4210b103b6c22ae648cce84082d5ba.jpg&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FRz-gvQ8uPBEiF0pH5rUvJw&quot; target=&quot;_blank&quot;&gt;难蚌，打工人要被 AI 整破防了——AI 技术竟用来涨房租！&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：价格歧视算法还需要 AI？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：这算是一种作恶了吧&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：国内是不是要开始学习了，现在卖房不挣钱，是不是开始炒租房了&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：大数据+人工分析&amp;nbsp;vs&amp;nbsp;AI 分析没有本质区别&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：美团：这种操作我熟&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：从产品角度，realpage 是个巨大成功不是吗&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：哪里成功了，只会考虑金钱因素的单一模式垃圾 ai&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：有点像&amp;nbsp;RealPage&amp;nbsp;的广告&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：典型的算法歧视&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：对部分群体的区别对待才叫歧视，这个是单纯的资本无限度逐利行为，无差别剥削所有租房者。&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 11：想到了之前谷歌的「技术不作恶」&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 12：论大数据杀熟用 AI 增强学习&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FqCl64EhomOHDP4Q3DAZjYg&quot; target=&quot;_blank&quot;&gt;效果媲美 Cursor 的开源替代：Roo-Cline&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：你替我，我替你，程序员们笑眯眯。自行脑补伴奏。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：所以被 fork 的那个 cline 输了？&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：双赢&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：这个插件没有自动补全功能吗？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：用了下，不知怎么出一半会卡住&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：JB 系 ide 能用么&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：JB 可以用阿里的通义灵码，新版的已经有这些功能了，而且还是免费的&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0912/150800_DfGR_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/329027</link>
            <guid isPermaLink="false">https://www.oschina.net/news/329027</guid>
            <pubDate>Mon, 06 Jan 2025 11:18:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>海量存储的批量计算框架</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;span id=&quot;OSC_h1_1&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;导读&lt;/h1&gt; 
&lt;p&gt;本文介绍了百度针对海量存储数据计算需求研发的 HTAP 表格存储系统及计算调度架构。项目背景源于原有存储系统难以满足日益增长的 OLAP 业务需求，因此构建了集 OLTP 与 OLAP 于一体的 HTAP 系统，通过存算分离、Serverless 设计等创新点提升 IO 访问能力和资源利用率。同时，自研的计算与调度系统实现了任务开发的 SQL 化和数据处理的 FaaS 化，简化了业务使用成本，提高了开发效率。整体方案在存储成本、IO 能力、IO 放大率等方面取得显著成果，为海量存储数据的计算提供了高效、灵活的解决方案。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_2&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;01 &lt;strong&gt;项目背景及目标&lt;/strong&gt;&lt;/h1&gt; 
&lt;span id=&quot;OSC_h2_3&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;1.1 项目背景&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;搜索内容存储团队主要负责各类数据，如网页、图片、网页关系等，的在线存储读写 (OLTP)、离线高吞吐计算 (OLAP) 等工作。&lt;/p&gt; 
&lt;p&gt;原有架构底层存储系统普通采用百度自研表格存储（Table）来完成数据的读、写、存工作，此存储系统更偏向于 OLTP 业务场景。随着近几年大数据计算、AI 模型训练的演进，对存储系统 OLAP 业务场景的依赖越来越重，如数据关系分析、全网数据分析、AI 样本数据管理筛选。在 OLTP 存储场景的架构下，支持 OLAP 存储需求对资源成本、系统吞吐、业务时效带来了巨大挑战。为此我们在百度自研表格存储之外，结合业务实际 workflow 针对性优化，增加构建了一套符合业务需求的 HTAP 表格存储系统以及相应的计算框架，共同组成面向海量存储数据的大批量计算架构系统。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_4&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;1.2&amp;nbsp;项目目标&lt;/strong&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;提供海量存储数据计算的超高 IO 访问能力。当前内容存储数据达几十 P+，访问频率按照每周一轮估算，平均 IO 能力需要达到 34G/s，峰值 IO 能力需要达到 200G/s。面对如此庞大的 IO 访问能力，需要从文件系统、存储引擎、分布式存储系统、访问模型等全方位进行深度优化来满足需求；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;提供海量存储数据计算的快速开发&amp;amp;部署能力。在提供海量访问能力的同时，也需要为业务提供访问配套的基础设施，来满足业务开发&amp;amp;部署计算任务的需求。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h1_5&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;02 现有研发条件和工作基础&lt;/h1&gt; 
&lt;p&gt;搜索内容架构存储团负责各类数据，如网页、图片、网页关系等，的在线存储读写 (OLTP)、离线高吞吐计算 (OLAP) 等工作。面对当前海量存储数据的计算需求有清晰的技术和业务认知，第一视角明确清楚地知道系统瓶颈、技术难点、业务需求。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;系统瓶颈——当前存储系统能提供的 IO 能力与业务计算需求之间的矛盾。随着大数据、机器学习、大语言模型等新技术的兴起，业务对数据的计算访问需求越来越强烈，然而存储系统的 IO 能力却一直止步不前。为此，迫切需要一款面向数据计算的存储系统；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;技术难点——数据表格存储系统的数据访问模型与计算模型之间的矛盾。当前架构底层存储普遍采用百度自研表格存储 (Table) 来完成数据的读写存工作，此存储系统更偏向于 OLTP 业务场景。但随着近几年大数据计算、AI 模型训练的演进，对存储系统 OLAP 业务场景的依赖越来越重，如数据关系分析、全网数据分析、AI 样本数据管理筛选。在 OLTP 存储场景的架构下，支持 OLAP 存储需求对资源成本、系统吞吐、业务时效带来了巨大技术挑战；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;业务需求——方便高效快速的任务开发&amp;amp;部署能力的需要。在大量搜索内容 OLAP workflow 中，从表格存储系统中提取筛选数据只占全部任务的一小部分，大量任务需要对数据进行加工处理得到需要的结果。常规的做法是多任务串联，这样做的缺陷是大量中间临时数据存储开销。为此我们为 HTAP 表格存储系统构建了一套计算与调度系统。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h1_6&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;03 整体方案&lt;/h1&gt; 
&lt;span id=&quot;OSC_h2_7&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.1 概览&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;本项目拟研发面向海量存储数据的大批量计算架构，主要分为两大系统，HTAP 表格存储系统、计算&amp;amp;调度架构。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.1.1 HTAP 表格存储系统&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-e949997f0acdd80bcd50bc36a715723aea8.jpg&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt; △图 2.3&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;架构采用业界 HTAP 主流设计思想，将 OLTP 和 OLAP workflow 拆分到两套存储系统中，如 F1 Lightning、ByteHTAP，在 SDK 层根据任务类型分发到不同的存储系统中；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OLTP 存储系统——Neptune，采用 Multi-Raft 分布式协议组建存储集群，采用本地磁盘 (SSD/HDD 等) + 百度分布式文件系统 AFS 组成存储介质；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OLAP 存储系统——Saturn，Serverless 设计模式，无常驻 Server，即用即加载，贴合 OLAP workflow 的不确定性和间歇性；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OLTP 与 OLAP 存储系统间，采用数据文件硬链的方式进行数据同步，全版本替换，成本低、速度快，充分贴合 Saturn Serverless 设计模式。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;如上架构设计图，可将 OLTP 与 OLAP workflow 拆分到两套独立的系统中，解决上述提到的存算耦合问题。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;解决存储空间放大问题。空间放大主要带来的问题是存储节点成本，Workflow 分离的架构将 OLAP 需要的数据文件采用 AFS 低成本存储，减少了对存储节点存储空间的压力。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-e478418391bd0091d3d46ed6b48fa5b3d34.jpg&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt; △图 2.4&lt;/p&gt; 
&lt;p&gt;OLAP 存储系统的数据写入并没有使用常见的 log redo 或 raft learner 模式，最主要还是在保证 OLAP 存储系统的 Serverless 特性的同时，又能实时感知到 OLTP 系统的最新写入结果。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;解决存储节点资源冗余问题。拆分后，分布式存储节点将大量重型 OLAP workflow 转移到 OLAP 存储——Saturn 中，将极大减少存储节点的计算压力。同时，OLAP 存储的 Serverless 设计模式又可贴合 workflow 的不确定性和间歇性。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-5e6ad4210b103b6c22ae648cce84082d5ba.jpg&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;△图 2.5&amp;nbsp;Saturn Serverless 模型&lt;/p&gt; 
&lt;p&gt;计算节点可以部署在任意计算集群中，如 Map-Reduce、自研计算节点 Pioneer 等，在 SDK 中直接初始化存储引擎，从 AFS 中访问对应分片的数据文件。计算节点可充分利用云原生系统（PaaS）的弹性资源，解决资源常驻冗余问题。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.1.2&amp;nbsp;一次开发，多端部署&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-9753bf0618f4324ff67c4d7955cc1e571ed.jpg&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;任务生成。自研 KQL 数据查询语言。在任务生成阶段将 KQL 语句解析优化成相关的调度任务，一个 Job 包含多个 Task。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任务调度。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任务调度的计算节点可以是 Map-Reduce，也可以是自研计算集群 Pioneer，负责不同计算场景。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任务运行容器负责数据依赖部署和运行计算框架。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;计算框架采用插件化设计思想，依托 KQL 语言进行差异化描述。计算框架的最大特点是，可在数据处理节点执行用户自定义 FaaS 函数。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_8&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.2&amp;nbsp;详细介绍&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;3.2.1&amp;nbsp;HTAP 表格存储系统&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.2.1.1 OLTP 存储系统——Neptune&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-8ddcc29e25489cf980c7f03838e3469bb8d.jpg&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Neptune 引擎主要支持四类操作：写、删、读、Scan。每一类操作都通过 RegionMapper 进行映射，对外隔离分区概念。&lt;/p&gt; 
&lt;p&gt;Neptune 存在两类分区：索引分区、数据分区。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;索引分区。索引分区用于减少因为数据分区导致 Key 所在数据分区不明确导致的随机访问 IO 放大问题，提升随机查性能。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;数据分区。Neptune 可配置多个数据分区，每个数据分区内包含多个 Locality-Group。分区间的数据理论上是互斥的。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Neptune 各类操作的流程：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;写操作：&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;根据 RowWriter 中设置的 Region 信息找到需要写入的 Region 的 Handle，按照列语义将数据序列化成 RawData。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;同时根据 Region 信息生成当前 Key 的 Region 索引信息。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;将 RawData 与 RegionIndex 作为一条操作记录 Commit 到引擎中，整个操作为原子操作。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;删操作：&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;由于存在 Region 的概念，删除某个 Key 是需要明确当前 Key 所在的分区。目前的做法是查询一遍分区索引获取分区信息，再准确删除对应分区的数据。这样带来一个问题，删除操作会增加一次分区查询操作，我们可以考虑将分区信息全部加载到内存提升性能。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;读操作：&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;读操作类似删除操作，会首先查询分区索引表，如果在分区索引中查询不到则表明当前 Key 不存在，直接返回 NotFound。否则，根据分区索引查询对应的分区即可。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Scan 操作：&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Scan 时业务可以指定对应的分区以及 CF 信息，RegionMapper 根据这些信息 Select 出合适的物理存储 Handle，然后对这些物理存储进行 Scan。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3.2.1.2 OLAP 存储系统——Saturn&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-8afd5e190b48a006c8c80a4ce0b84907a2f.jpg&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Saturn 主要分三层：&lt;strong&gt;文件系统&lt;/strong&gt;（File-System）、&lt;strong&gt;Table&lt;/strong&gt;（表级别的抽象，非 TG 的 Table）、&lt;strong&gt;访问层&lt;/strong&gt;（SDK），Meta-Server 为每一层提供全局 Meta 信息支持。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;文件系统。Saturn 既可以支持 AFS，也支持本地文件系统，同时后续可以支持其他类型的文件系统。文件系统的类型对于 Saturn 来说是&lt;strong&gt;插件化可插拔的&lt;/strong&gt;。使用 AFS 作为文件系统相比于 Table 在成本层面有巨大优势。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Table。一个抽象的 Table 包含多个 Slice，理论上每个 Slice 间的数据是互斥的，这里引入数据模型的概念。当前支持两种数据模型：&lt;strong&gt;哈希序 (hash order)、全局序 (global order)&lt;/strong&gt;，两种模型与 Table 完全对等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;SDK。SDK 目前支持 Seek 和 Scan 功能，使用方式跟通用的列存储系统保持一致，SDK 直接与文件系统（AFS）连接，对外提供存储 Serverless 的访问能力。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;同时，Table 数据的更新和构建包含两种模式：&lt;strong&gt;全量构建、增量合并&lt;/strong&gt;。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;全量构建。全量构建通过完整 Dump Table 数据的方式对表中的每个分片进行逐步替换，替换过程中采用多版本机制保证访问的稳定性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;增量合并。增量合并通过控制 TG Table 做 Major Compaction 的时机，保证每次获取增量数据前不会发生 Major Compaction。增量数据通过 Snapshot 的形式对外提供所有的操作记录，这些记录保存在 Table SST 文件中，Saturn 把这些 SST 文件 Transform 成自身协议的 SST，再发起 Ingest 操作即可。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3.2.1.3&amp;nbsp;存储引擎优化——数据行分区&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;数据行分区思想在很多 OLAP 存储系统中很常见，如当前比较流行的一些数据湖架构，ClickHouse、IceBerg 等。在表格存储中，数据行分区的好处是可以极大减少在数据行筛选过程中 IO 放大率。以下是我们在存储引擎中支持数据行分区的设计思路：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-7a49b8f4957e8f29bb1fadf0234c3dfd5e4.jpg&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;△图 2.6&lt;/p&gt; 
&lt;p&gt;数据行分区的思想在 OLTP 和 OLAP 存储引擎中都有使用，OLTP 存储引擎以数据行分区构建的数据文件可直接被 OLAP 存储引擎加载，减少了 OLAP 存储的数据构建工作。&lt;/p&gt; 
&lt;p&gt;数据行分区在 Write、Read、Scan 场景下的处理流程分别为：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Write 操作。Write 时会根据请求中的特殊 Region 描述，如分区键，找到需要写入的 Region-Index 和 Region 上下文，前者保存 Key 的分区索引信息，后者中保存实际数据，操作记录由 WAL 中保存。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Read 操作。Read 操作相比通常直接访问数据，需要多进行一次分区索引访问，为减少多一次访问带来的性能折损，我们将分区索引信息全内存化。由于索引数据非常小，因此全内存化是可接受的。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Scan 操作。Scan 操作相比之下没有任何变更，但在 Scan 特殊分区场景下可大量减少 IO 放大。因为相比之前的行过滤模式，可直接跳过大量不需要的数据。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在业务存储支持时，合理设置数据行分区，可极大减少数据行筛选过程中的 IO 放大率。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.2.1.4 存储引擎优化——增量数据筛选&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在实际业务中，有很大一个场景是获取近期（如近几个小时、近一天）有值变化的数据，常规的做法是 Scan 全量数据，以时间区间作为过滤条件，筛选出符合条件的结果。但如此的筛选逻辑会带来严重的 IO 放大，因为满足条件的结果只占全量结果的一小部分。为此，我们在引擎层调整优化 Compaction 时机以及调整筛选流程，减少增量数据筛选过程中需要访问的数据文件集合，降低 IO 放大，业务提速。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-84ac7c8b96be9d99070040c4eb17a75965f.jpg&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;△图 2.7 LSMT&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.2.1.5&amp;nbsp;存储引擎优化——动态列结构&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 OLAP 存储引擎中，还存在一类访问场景会带来 IO 放大问题，数据列筛选。在表格存储系统中，一个 Key 可以包含多个列族（Column Family），一个列族中可以包含任何多个数据字段，这些字段以行结构存储在同一物理存储（Locality Group）中，当筛选特定数据列时，需要进行整行读取，然后过滤出需要的字段，这也将带来 IO 放大问题。&lt;/p&gt; 
&lt;p&gt;同时，OLAP workflow 的访问不确定性导致存储层无法及时调整数据在物理存储中的结构。为此，我们引入动态列结构的概念，在逻辑层对业务透明，在物理层根据近期 OLAP workflow 特性及时调整物理结构。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-d9ec229f4af7565d50eef414f7d262c570a.jpg&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;△图 2.8&lt;/p&gt; 
&lt;p&gt;如上图，在逻辑存储中，分为两个 LG，根据 workflow 特性，把业务常用的访问字段在 Compaction 阶段存放在同一物理存储结构中，反之，这样可以减少字段筛选阶段的 IO 放大率。&lt;/p&gt; 
&lt;p&gt;动态列结构只在 OLAP 存储引擎中生效，我们在原有 OLAP 存储中引入 workflow 收集以及 compaction 任务，将从 OLTP 存储中同步的数据构建成更适合 OLAP 场景的存储结构。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.2.2&amp;nbsp;计算与调度架构&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在本节，我们将介绍在此 HTAP 表格存储系统基础上，如何设计实现任务计算和调度系统，简化业务使用成本，提升业务效率。&lt;/p&gt; 
&lt;p&gt;在大量搜索内容 OLAP workflow 中，从表格存储系统中提取筛选数据只占全部任务的一小部分，大量任务需要对数据进行加工处理得到需要的结果。常规的做法是多任务串联，这样做的缺陷是大量中间临时数据存储开销。&lt;/p&gt; 
&lt;p&gt;为此我们为 HTAP 表格存储系统构建了一套计算与调度系统，系统两大特点：任务开发 SQL 化、数据处理 FaaS 化。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.2.2.1&amp;nbsp;SQL 化与 FaaS 化&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;我们充分贴合上述存储系统特性，自研了一套数据查询语言——KQL，KQL 类似于 SQL Server 语法。同时，又结合存储系统特性以及计算框架，支持一些特殊语言能力，最主要的是能支持原生 FaaS 函数定义，当然也支持外部 FaaS 函数包依赖。&lt;/p&gt; 
&lt;p&gt;如下是一段 KQL 语句例子以及说明：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;function classify = { #定义一个 Python FaaS 函数
def classify(cbytes, ids):
    unique_ids=set(ids)
    classify=int.from_bytes(cbytes, byteorder=&#39;little&#39;, signed=False)
    while classify != 0:
        tmp = classify &amp;amp; 0xFF
        if tmp in unique_ids:
            return True
        classify = classify &amp;gt;&amp;gt; 8
    return False
}

declare ids = [2, 8];
declare ts_end = function@gettimeofday_us();      # 调用 Native Function 获取时间
declare ts_beg = @ts_end - 24 * 3600 * 1000000;   # 四则运算

select * from my_table region in timeliness       # 利用存储分区特性，从 my_table 中的 timeliness 分区获取数据
where timestamp between @ts_beg and @ts_end       # 利用存储增量区间特性，筛选增量数据
    filter by function@classify(@cf0:types, @ids) # 在 Filter 阶段调用自定义 FaaS 函数
    convert by json outlet by row;
desc:                                             # 对计算框架进行特殊描述
    --multi_output=true;

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;3.2.2.2&amp;nbsp;任务生成与调度&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-bbb5474d9b9ec6a70e634e428e9e5350a9d.jpg&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;任务生成与调度主要分为三层，任务解析层、任务调度执行层、任务执行容器。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;任务解析层。负责将 KQL 表达式解析成实际的任务执行计划，并保存在任务存储容器中。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任务调度执行层。负责将任务计划分发到任务执行容器，并轮训检测任务状态，执行探活、重试等操作。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任务执行容器。提供两种任务执行容器，Pioneer、EMR。前者为自研任务执行容器，后者为公司 Map-Reduce 执行平台。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_9&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.3&amp;nbsp;技术经济指标&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;通过上述的架构设计以及优化手段，我们在 IO 能力、访问成本、开发效率等方面取得显著成果。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-1b3d37c213c7b298a2e68cb556d3a199540.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_10&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;04 主要创新点&lt;/h1&gt; 
&lt;span id=&quot;OSC_h2_11&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;4.1&amp;nbsp;自研 HTAP 表格存储系统&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;结合业务特性以及实际需求，构建符合业务场景的 HTAP 存储系统。架构采用业界 HTAP 主流设计思想，将 OLTP 和 OLAP workflow 拆分到两套存储系统中，如 F1 Lightning、ByteHTAP，在 SDK 层根据任务类型分发到不同的存储系统中。系统创新点如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;存算分离架构。解决 OLTP 存储系统的空间放大问题，将 OLAP Workflow 从 OLTP 存储中分离，分离的架构将 OLAP 需要的数据文件采用 AFS 低成本存储，减少了对存储节点存储空间的压力。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OLAP Serverless 设计。分布式存储节点将大量重型 OLAP workflow 转移到 OLAP 存储——Saturn 中，将极大减少存储节点的计算压力。同时，OLAP 存储的 Serverless 设计模式又可贴合 workflow 的不确定性和间歇性。计算节点可以部署在任意计算集群中，如 Map-Reduce、自研计算节点 Pioneer 等，在 SDK 中直接初始化存储引擎，从 AFS 中访问对应分片的数据文件。计算节点可充分利用云原生系统（PaaS）的弹性资源，解决资源常驻冗余问题。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;表格数据行分区。数据行分区思想在很多 OLAP 存储系统中很常见，如当前比较流行的一些数据湖架构，ClickHouse、IceBerg 等。在表格存储中，数据行分区的好处是可以极大减少在数据行筛选过程中 IO 放大率。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;增量数据筛选支持。在实际业务中，有很大一个场景是获取近期（如近几个小时、近一天）有值变化的数据，常规的做法是 Scan 全量数据，以时间区间作为过滤条件，筛选出符合条件的结果。但如此的筛选逻辑会带来严重的 IO 放大，因为满足条件的结果只占全量结果的一小部分。为此，我们在引擎层调整优化 Compaction 时机以及调整筛选流程，减少增量数据筛选过程中需要访问的数据文件集合，降低 IO 放大，业务提速。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;表格数据动态列结构。根据 workflow 特性，把业务常用的访问字段在 Compaction 阶段存放在同一物理存储结构中，反之，这样可以减少字段筛选阶段的 IO 放大率。动态列结构只在 OLAP 存储引擎中生效，我们在原有 OLAP 存储中引入 workflow 收集以及 compaction 任务，将从 OLTP 存储中同步的数据构建成更适合 OLAP 场景的存储结构。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_12&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;4.2&amp;nbsp;自研任务生成与调度系统&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;在大量搜索内容 OLAP workflow 中，从表格存储系统中提取筛选数据只占全部任务的一小部分，大量任务需要对数据进行加工处理得到需要的结果。常规的做法是多任务串联，这样做的缺陷是大量中间临时数据存储开销。&lt;/p&gt; 
&lt;p&gt;为此我们为 HTAP 表格存储系统构建了一套计算与调度系统，系统两大特点：任务开发 SQL 化、数据处理 FaaS 化。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;SQL 化。我们充分贴合上述存储系统特性，自研了一套数据查询语言——KQL，KQL 类似于 SQL Server 语法。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;FaaS 化。在 SQL 化的基础上，同时结合存储系统特性以及计算框架，支持原生 FaaS 函数定义能力，当然也支持外部 FaaS 函数包依赖。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;————END————&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247603678%26idx%3D1%26sn%3D4a1f215e3a4e2b578ad52375dc55e749%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;网页多模态建模思考&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247603657%26idx%3D1%26sn%3D6ba08a7cf4a124c94c4cd51786217499%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;百度垂搜一站式研发平台演进实践&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247603628%26idx%3D1%26sn%3Df75ddec65ee183dc0c3d48b7e1fdb1ea%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;初探图谱 Embedding 用于异常检测（一）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247603616%26idx%3D1%26sn%3D6f18533697c0a083f9c58373ac6b1a85%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;AIAPI - 转向 AI 原生检索&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247603585%26idx%3D1%26sn%3D1ea31a1565c49bc466ddb99b6d9e63d9%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;学校新来了一位 AI 作文老师：能看、会评、还教改写&lt;/a&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/4939618/blog/16971026</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/16971026</guid>
            <pubDate>Mon, 06 Jan 2025 08:57:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>JetBrains Rider 2025.1 路线图发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;JetBrains Rider 2025.1 路线图现已发布。介绍了目前正在开发的一些特性和改进内容，主要包括：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;281&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a7421720fdf4edc70e688e9d75e9e7e71f6.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;Pain-free 性能分析&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;开发团队决定重新思考 Rider 中的分析工作方式，旨在让当前的工具套件（动态程序分析、监控工具以及集成的 dotTrace 和 dotMemory 分析器）变得更易于使用且更直观。包括简化界面、减少配置，以及将性能分析更深入地融入用户的日常工作流程。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「我们的目标很简单：让性能监控和分析感觉像是开发流程的自然延伸，而不是一项单独的专门任务。」&lt;/span&gt;&lt;/p&gt; 
&lt;div style=&quot;text-align:start&quot;&gt; 
 &lt;h4 style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;Debugging&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;Mixed mode debugging&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Rider 2025.1 将着手实现&amp;nbsp;mixed mode debugging - 此功能可让用户在单个会话中同时调试 .NET 和 C/C++ 代码。这对使用 Unity 和 Unreal 等游戏引擎的开发人员，以及那些通过 P/Invoke 使用&amp;nbsp;native Windows API 构建桌面应用程序的开发人员尤为刚需。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;实现后用户将能够：&lt;/span&gt;&lt;/p&gt; 
&lt;ul style=&quot;margin-left:0; margin-right:0&quot;&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;在.NET 和 native code 之间无缝切换。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;检查两个环境中的变量。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;在代码库的任何地方设置断点。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;无需切换上下文即可调试互操作场景。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;「我们相信，这一新增功能将显著改善混合应用程序开发人员的调试体验。虽然我们目前无法确定具体的发布时间表，但我们很高兴开始这项重要的工作，并将在此过程中分享我们的进展。」&lt;/span&gt;&lt;/p&gt; 
&lt;div style=&quot;text-align:start&quot;&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;C++ code debugging&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;项目团队计划在 2025 年着手全面改进整个 Rider 中的 C++ 调试体验。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前正在进行的工作包括：优化 PDB 读取，以便用户更快地进入调试会话；重新设计 collection evaluation，使其更加高效；实施一个更快的系统来处理条件断点；改进 C++ 中的数据断点，使其更加可靠和响应迅速。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;以及致力于让调试感觉更自然、更可控。新的 stepping filters 可帮助用户精确地导航代码库，Rider handles debugger detachment 的方式也得到了改进，此外还有一系列较小的功能增强。&lt;/span&gt;&lt;/p&gt; 
&lt;div style=&quot;text-align:start&quot;&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;改进的数据可视化工具&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;在 Rider 2025.1 中将专注于改进 LINQ 表达式的数据可视化，使开发人员能够更轻松地直接在调试器中理解和调试复杂的 LINQ 查询。用户将能够检查查询执行情况、查看中间结果，并更好地了解 LINQ 操作如何转换数据。详情可查看&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutrack.jetbrains.com%2Fissue%2FRIDER-3205%2FMethod-based-LINQ-chains-debugging&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;issue&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;div style=&quot;text-align:start&quot;&gt; 
 &lt;h4 style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;Windows 上的远程开发&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;/div&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;允许 Windows 用户连接到远程开发机器，同时保持其本地 Rider 实例响应迅速且熟悉。就像现有的 macOS 和 Linux 远程开发支持一样，能够远程运行、调试和测试应用程序，同时保持本地 IDE 的性能和体验。&lt;/span&gt;&lt;/p&gt; 
&lt;div style=&quot;text-align:start&quot;&gt; 
 &lt;h4 style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;对 SQL 项目的支持&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;/div&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;2025 年将通过集成 SQL Tools API（与 Visual Studio Code 和 Azure Data Studio 采用的技术相同）来实现 Rider 的 SQL Server 支持现代化。这一转变将企业级数据库开发功能直接引入 Rider。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;升级后，用户可以在解决方案中无缝管理 SQL Server 项目、直接发布数据库，以及使用 IDE 已经提供的强大架构比较工具。借助新的跨平台 SDK 支持，将能够跨不同操作系统构建和管理 SQL 项目，从而使 Rider 成为适用于云和混合环境的更通用的工具。&lt;/span&gt;&lt;/p&gt; 
&lt;div style=&quot;text-align:start&quot;&gt; 
 &lt;h4 style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;增强的 Roslyn 支持&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;/div&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;正在增加对 Roslyn-based suppressors 的支持，使得用户可以微调编译器诊断在项目中的工作方式。此功能非常适用于想要更精细地控制警告和代码分析的用户。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Roslyn 语法可视化工具则可以帮助准确了解 Roslyn 如何查看代码结构，从而大大简化自定义分析器和重构的开发。&lt;/span&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;总的来说，虽然&amp;nbsp;mixed mode debugging 等某&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#19191c&quot;&gt;些功能仍处于早期阶段，但其他功能已初具规模。&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;更多详情可&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fdotnet%2F2025%2F01%2F08%2Frider-2025-1-roadmap%2F&quot; target=&quot;_blank&quot;&gt;查看官方博客&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/328999/rider-2025-1-roadmap</link>
            <guid isPermaLink="false">https://www.oschina.net/news/328999/rider-2025-1-roadmap</guid>
            <pubDate>Mon, 06 Jan 2025 07:26:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Bytebase 3.1.2 发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;h2&gt;🚀 新功能&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;在 SQL 编辑器中为表、列和 PostgreSQL 的视图注释显示鼠标悬浮提示。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-64cc82a99ef9ecac55d810f8ee3e2183f02.png&quot; alt=&quot;file&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;IM, Webhook 集成支持 Lark。&lt;/li&gt; 
 &lt;li&gt;展示 Redshift 表或视图的定义。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-81fb66c24be3b9095ee5df479092a790ae6.png&quot; alt=&quot;file&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;🔔 API 重大变更&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;弃用脱敏策略 API &lt;code&gt;/v1/{instance}/{database}/policies/masking&lt;/code&gt;，改为调用 &lt;code&gt;/v1/{instance}/{database}/metadata&lt;/code&gt; 并修改参数 &lt;code&gt;columnConfigs&lt;/code&gt; 来实现。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🎄 改进&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;将显式脱敏列页面移到数据库页面。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-02b54ed3aa0bd12639c4ba7030c6f87cb1f.png&quot; alt=&quot;file&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Token 过期后会自动弹出登录窗口。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-2f313f93d0edfc23bc430d45462f76a721e.png&quot; alt=&quot;file&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;🐞 Bug 修复&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;修复了在同一个实例上多租户数据库分组情况下表名冲突的问题。&lt;/li&gt; 
 &lt;li&gt;修复了在 SSO 认证 (OIDC) 中遇到的跨域问题。&lt;/li&gt; 
 &lt;li&gt;修复了一个在 SQL 编辑器中导致 QuotaExceededError 错误的问题。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📕 安装及升级&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;新安装 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2Fdocs%2Fget-started%2Fself-host%2F&quot; target=&quot;_blank&quot;&gt;https://www.bytebase.com/docs/get-started/self-host/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;升级 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2Fdocs%2Fget-started%2Fupgrade%2F&quot; target=&quot;_blank&quot;&gt;https://www.bytebase.com/docs/get-started/upgrade/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;升级前请备份元数据库，升级后无法回退版本。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;💡 更多资讯，请关注 Bytebase 公号：Bytebase&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/6148470/blog/17128196</link>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/17128196</guid>
            <pubDate>Mon, 06 Jan 2025 06:43:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>通义灵码 AI 程序员全面上线：同时支持 VS Code、JetBrains IDEs</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;2024 云栖大会期间，通义灵码 AI 程序员正式发布，实现几句话就能完成需求理解、任务拆解、代码编写、修改 BUG、测试等开发任务，最快几分钟可从 0 到 1 完成应用开发，提升数十倍开发效率。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;此次升级后的通义灵码 AI 程序员作为全球首个同时支持 VS Code、JetBrains IDEs 开发工具的 AI 程序员，可通过对话协作的方式辅助开发者完成复杂的编码任务&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;在能力升级方面，此次通义灵码 AI 程序员首次引入多文件代码修改能力。开发者可通过 AI 程序员自动完成多文件级编码任务，如需求实现、问题修复、批量生成单元测试等。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;在开发者和 AI 程序员的协作过程中，双方将以多轮对话的方式逐步完成编码任务，并且会产生多个快照版本，开发者可任意切换、回退&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;521&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0109/120923_RPYC_2720166.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;通义灵码 AI 程序员还可打破开发者编程语言的边界，Java 开发者也能使用 Python、JavaScript 等多种语言，快速编写网页、小工具、小游戏。&lt;/p&gt; 
&lt;p&gt;以从 0 到 1 开发一个具有用户登录、数据管理功能及美化的前端页面为例，过去纯人工开发需要前端及后端工程师配合，至少需要耗费半天时间，现在使用通义灵码 AI 程序员，一名程序员仅需 10 分钟就能完成整个开发过程，大幅提升业务开发效率。&lt;/p&gt; 
&lt;p&gt;下载地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flingma.aliyun.com%2Flingma%2Fdownload&quot; target=&quot;_blank&quot;&gt;https://lingma.aliyun.com/lingma/download&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/328958</link>
            <guid isPermaLink="false">https://www.oschina.net/news/328958</guid>
            <pubDate>Mon, 06 Jan 2025 04:12:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Ubuntu 核心贡献者 Steve Langasek 去世</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;Ubuntu Linux 社区的灵魂人物——Steve Langasek，于 2025 年 1 月 1 日因病去世，享年 45 岁。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;378&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0109/111546_JP86_2720166.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;无论你是否听过 Langasek 的名字，如果你曾使用过 Ubuntu 或 Debian，那么你已经从他的贡献中获益了。&lt;/p&gt; 
&lt;p&gt;Langasek 的开源之路始于 1996 年。当时他接触了 Slackware，之后加入了 Red Hat，最终在 2000 年找到了自己的归属——Debian。&lt;/p&gt; 
&lt;p&gt;2001 年，他正式成了 Debian 的开发者，之后的二十多年里，他参与了多个重要版本的发布，包括 Debian Sarge 和 Etch。&lt;/p&gt; 
&lt;p&gt;2007 年，他加入 Canonical 公司，成为 Ubuntu 的发布经理。&lt;/p&gt; 
&lt;p&gt;从 Ubuntu 7.10（Gutsy Gibbon）开始，直至他去世，都发挥了不可替代的领导作用。&lt;/p&gt; 
&lt;p&gt;除了在 Ubuntu 的贡献，Langasek 还在 Linux-PAM、Samba 和 OpenLDAP 等关键项目中做出了巨大贡献，这些贡献至今仍影响着开源社区。&lt;/p&gt; 
&lt;p&gt;即便在与病魔的长期抗争中，Langasek 依然活跃在社区，幽默地面对着困境，他对开源的热爱和付出从未改变。&lt;/p&gt; 
&lt;p&gt;因此，他的离世，不仅让 Ubuntu 和 Debian 失去了一位重量级人物，更让整个开源世界失去了一盏指引方向的灯塔。&lt;/p&gt; 
&lt;p&gt;Ubuntu 创始人 Mark Shuttleworth 在一篇文章中，还将 Langasek 描述为&lt;strong&gt;「Ubuntu 所有伟大之处的缩影「&lt;/strong&gt;。他的专注、智慧和对开源理念的坚定信仰，使得无数开发者在他的指导下不断成长。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;来源：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.ubuntu.com%2Ft%2Fremembering-and-thanking-steve-langasek%2F52665&quot; target=&quot;_blank&quot;&gt;https://discourse.ubuntu.com/t/remembering-and-thanking-steve-langasek/52665&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fthenewstack.io%2Fsteve-langasek-one-of-ubuntu-linuxs-leading-lights-has-died%2F&quot; target=&quot;_blank&quot;&gt;https://thenewstack.io/steve-langasek-one-of-ubuntu-linuxs-leading-lights-has-died/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.omgubuntu.co.uk%2F2025%2F01%2Flong-time-ubuntu-contributor-steve-langasek-has-passed-away&quot; target=&quot;_blank&quot;&gt;https://www.omgubuntu.co.uk/2025/01/long-time-ubuntu-contributor-steve-langasek-has-passed-away&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/328947/remembering-and-thanking-steve-langasek</link>
            <guid isPermaLink="false">https://www.oschina.net/news/328947/remembering-and-thanking-steve-langasek</guid>
            <pubDate>Mon, 06 Jan 2025 03:16:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
    </channel>
</rss>