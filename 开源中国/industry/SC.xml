<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-综合资讯</title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="http://8.134.148.166:30044/oschina/news/industry" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-综合资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Tue, 15 Apr 2025 21:36:12 GMT</lastBuildDate>
        <ttl>5</ttl>
        <item>
            <title>消息称 OpenAI 采用智谱标准评测最新模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;有消息称，OpenAI 在刚刚发布的 GPT-4.1 系列模型中评测其函数调用能力时采用了 ComplexFuncBench，这是由智谱团队提出的专用于评估大模型复杂函数调用能力的测试基准。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;388&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-98ef860ae244c33d8fc71f34891eee6fa3e.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;ComplexFuncBench 主要评测大模型在 128K 的长上下文下进行多步带约束的函数调用的能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;相比于现有函数调用测试基准，ComplexFuncBench 要求大模型对真实场景下的用户需求进行细粒度理解，并在此基础上进行多步带推理的函数调用，这对模型的函数调用能力提出了更高的挑战。（36 氪）&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344747</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344747</guid>
            <pubDate>Sun, 13 Apr 2025 11:00:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>小米王化回应芯片平台部</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;更新：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;小米集团公关部总经理王化发文回应芯片平台部：刚刚媒体发来问讯，说我司成立了芯片平台部，这事是否有回应？ 向大家介绍一下手机产品部的芯片平台部一直存在，其部门工作主要是负责手机产品的芯片平台选型评估和深度定制，而负责人秦牧云兄弟加入公司都有好几年了，至少我俩 2021 年就有小米办公的工作聊天记录了。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;新浪科技独家获悉，小米内部宣布，在手机部产品部组织架构下成立芯片平台部，任命秦牧云担任芯片平台部负责人，向产品部总经理李俊汇报。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;333&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-bf16ff9dfc70fd55d1a794fa85eafe534dc.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;资料显示，秦牧云此前曾在高通任职，担任高通产品市场高级总监，后加入小米。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此时，也正值小米最新的自研 SoC 芯片对外亮相前的关键时刻。2017 年，小米发布了自研 SoC 芯片澎湃 S1，小米正式成为全球继三星、苹果、华为之后第四家同时拥有终端及芯片研发制造能力的手机厂商。澎湃 S1 为 8 核 64 位处理器，采用 28nm 工艺制程，由小米 5C 首发搭载。不过这款手机并未成为爆款，也让小米澎湃 S1 蒙尘。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此后，小米并未放弃自研芯片的梦想。近年来，小米在影像、快充、电源管理、通信、显示等多个领域推出了自研芯片，比如澎湃 C 系列影像芯片、澎湃 P 系列快充芯片、澎湃 G 系列电源管理芯片、澎湃 T 系列信号增强芯片、澎湃 D 系列独显芯片等，从小芯片入手积累能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;2024 年底，北京衞视报道了小米成功流片国内首款 3nm 手机系统级芯片的消息。近期有消息称，小米 15S Pro 将首发搭载小米自研 SoC 芯片登场。日前，小米联合创始人、副董事长林斌也在微博上回复网友时首次确认了小米 15S Pro 新机的存在。但这款新机的具体规格，仍待小米官方确认。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344724</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344724</guid>
            <pubDate>Sun, 13 Apr 2025 09:24:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>FunASR —— 基础语音识别工具包</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;FunASR 是一个基础语音识别工具包，提供多种功能，包括语音识别（ASR）、语音端点检测（VAD）、标点恢复、语言模型、说话人验证、说话人分离和多人对话语音识别等。FunASR 提供了便捷的脚本和教程，支持预训练好的模型的推理与微调。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;FunASR 提供便捷的脚本和教程，支持对预训练模型进行推理和微调。&lt;/span&gt;&lt;/p&gt;

&lt;div style=&quot;text-align:start&quot;&gt;
&lt;p style=&quot;color:#ffffff; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;FunASR 离线文件转写软件包，提供了一款功能强大的语音离线文件转写服务。拥有完整的语音识别链路，结合了语音端点检测、语音识别、标点等模型，可以将几十个小时的长音频与视频识别成带标点的文字，而且支持上百路请求同时进行转写。输出为带标点的文字，含有字级别时间戳，支持 ITN 与用户自定义热词等。服务端集成有 ffmpeg，支持各种音视频格式输入。软件包提供有 html、python、c++、java 与 c#等多种编程语言客户端，用户可以直接使用与进一步开发。&lt;/span&gt;&lt;/p&gt;

&lt;p style=&quot;color:#ffffff; margin-left:0; margin-right:0&quot;&gt;&lt;img height=&quot;231&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0409/150943_5j0y_4252687.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align:start&quot;&gt;
&lt;div style=&quot;text-align:start&quot;&gt;
&lt;p style=&quot;color:#ffffff; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;FunASR 实时语音听写软件包，集成了实时版本的语音端点检测模型、语音识别、语音识别、标点预测模型等。采用多模型协同，既可以实时的进行语音转文字，也可以在说话句尾用高精度转写文字修正输出，输出文字带有标点，支持多路请求。依据使用者场景不同，支持实时语音听写服务（online）、非实时一句话转写（offline）与实时与非实时一体化协同（2pass）3 种服务模式。软件包提供有 html、python、c++、java 与 c#等多种编程语言客户端，用户可以直接使用与进一步开发。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img height=&quot;241&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0409/150958_NKI0_4252687.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

                                                                    &lt;/div&gt;
                                                                </description>
            <link>https://www.oschina.net/p/funasr</link>
            <guid isPermaLink="false">https://www.oschina.net/p/funasr</guid>
            <pubDate>Sun, 13 Apr 2025 09:08:00 GMT</pubDate>
        </item>
        <item>
            <title>快手：可灵 AI 全系模型进入 2.0 时代</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;4 月 15 日，可灵 AI 在「灵感成真」2.0 模型发布会上宣布，基座模型再次升级，面向全球正式发布可灵 2.0 视频生成模型及可图 2.0 图像生成模型。可灵 2.0 模型在动态质量、语义响应、画面美学等维度，保持全球领先；可图 2.0 模型在指令遵循、电影质感及艺术风格表现等方面显著提升。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;325&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c175cb14494fc56d7ae95e4f0c2f6d256bf.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;快手高级副总裁、社区科学线负责人盖坤透露，自去年 6 月发布以来，可灵 AI 已累计完成超 20 次迭代。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;截至目前，可灵 AI 全球用户规模突破 2200 万，过去的 10 个月里，其月活用户量增长 25 倍，累计生成超过 1.68 亿个视频及 3.44 亿张图片。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344719</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344719</guid>
            <pubDate>Sun, 13 Apr 2025 08:45:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>未来一周，Windsurf 用户可免费无限量使用 GPT-4.1 模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;2025 年 4 月 15 日凌晨，OpenAI 重磅&lt;a href=&quot;https://www.oschina.net/news/344606/openais-gpt-4-1-models&quot;&gt;推出&lt;/a&gt; GPT-4.1 系列模型。发布会直播上，OpenAI 邀请了 Windsurf 创始人兼 CEO Varun Mohan 分享经验。&lt;/p&gt; 
&lt;p&gt;Varun 透露，其内部基准测试显示，GPT-4.1 性能比 GPT-4 提升了 60%。鉴于 GPT-4.1 的出色表现，&lt;strong&gt;Windsurf&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fwindsurf_ai%2Fstatus%2F1911833698825286142&quot; target=&quot;_blank&quot;&gt; 决定&lt;/a&gt;为所有用户提供一周的 GPT-4.1 免费体验&lt;/strong&gt;，随后以大幅折扣继续提供该模型。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img height=&quot;776&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0415/162156_Oc2D_2720166.png&quot; width=&quot;1250&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img height=&quot;607&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0415/162758_4hwb_2720166.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Windsurf 是最受欢迎的&amp;nbsp;AI IDE 平台（由原 Codeium 团队打造），Windsurf 原本就以 「代码智能代理」 Cascade 闻名，现在加入 GPT-4.1 后，自动修复、多文件操作、终端命令执行等操作的准确性和上下文理解能力提升到新高度。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344710</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344710</guid>
            <pubDate>Sun, 13 Apr 2025 08:29:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>利用 AI 炒股？专家：只适合作为投资辅助工具</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;多位业内人士表示，AI 在金融投资领域的应用仍处于探索阶段，当前更适合作为辅助工具而非决策主力。投资者应保持理性，结合自身判断与专业意见，慎重使用 AI 进行投资决策。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;253&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-2d233dc2e5ad9ba640ba98a6587ea421f7f.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;申万宏源证券信息技术开发总部人工智能专家魏佳呈表示，建议要有自己的一套完整的投资框架，AI 可能目前能起到的作用是偏辅助的，或者是增强作用，不能把它当成绝对的权威。建议大家对于 AI 给出的观点，或者信号，可以多观察一段时间。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;专家告诉记者，目前行业对 AI 技术的监管政策尚未形成统一标准，建议制定更加完善的法规和标准，明确金融在 AI 投资领域的准入门槛。中国人民大学国家治理大数据和人工智能创新平台研究助理纪智元表示，规范平台运营和数据使用，加强对算法的监管，防止算法的趋同和滥用。还要建立应急机制，一旦 AI 引发了市场的异常波动，能够快速采取措施来稳定市场。（央视财经）&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344707</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344707</guid>
            <pubDate>Sun, 13 Apr 2025 08:20:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>OpenAI 发布 GPT-4.1 提示工程指南</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;OpenAI 今日正式推出了备受期待的 GPT-4.1 系列，完整阵容包括旗舰版 GPT-4.1、高性价比的 GPT-4.1 mini 和超轻量的 GPT-4.1 nano。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/344606/openais-gpt-4-1-models&quot; target=&quot;news&quot;&gt;OpenAI 发布 GPT-4.1 系列模型&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;这次更新的焦点并非面向大众用户，仅通过 API 接口提供服务，OpenAI 官方文档直言不讳地指出，这批新模型在各项能力上全面超越了此前的 GPT-4o 和 GPT-4o mini，在编码能力、指令遵循、长文本处理等核心维度实现了进步，并辅以全新定价策略，其知识库也已刷新至 2024 年 6 月。&lt;/p&gt; 
&lt;p&gt;OpenAI 的核心目标明确：为构建 Agent 应用的开发者提供更强悍、更可靠且更经济的基础设施。&lt;/p&gt; 
&lt;p&gt;值得关注的是，由于 GPT-4.1 更严格、更字面地遵循指令，会非常严格地按照字面指令去执行任务。这使得它对明确、清晰的提示尤其敏感。&lt;/p&gt; 
&lt;p&gt;也就是说，只要你发现 GPT-4.1 的表现与预期不符，通常只需增加一句简洁明确的说明，就能迅速把模型引导到正确的行为上。&lt;/p&gt; 
&lt;p&gt;过去的模型（如 GPT-4） 会更自由地揣测或推断用户指令和系统提示背后的真实意图，即使提示不够精确，也可能猜出用户的意图并完成任务。&lt;/p&gt; 
&lt;p&gt;所以开发者需要对原有的提示方式进行一定调整（迁移）才能使用。&lt;/p&gt; 
&lt;p&gt;OpenAI 提供了一系列针对 GPT-4.1 的提示工程（Prompting）最佳实践，从基础原则到高级策略，帮助开发者高效构建提示以提升模型表现。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img height=&quot;1134&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-256ba4f021ccb99d85f4e1089244ffff103.png&quot; width=&quot;2678&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopenai%2Fopenai-cookbook%2Fblob%2Fmain%2Fexamples%2Fgpt4-1_prompting_guide.ipynb&quot; target=&quot;_blank&quot;&gt;https://github.com/openai/openai-cookbook/blob/main/examples/gpt4-1_prompting_guide.ipynb&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;1. 核心提示原则（Core Prompting Principles）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;明确指令（Be specific）&lt;/strong&gt;：确保提示中清楚表达任务目标。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;提供结构（Provide structure）&lt;/strong&gt;：通过示例、模板等方式设定预期输出格式。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;避免歧义（Avoid ambiguity）&lt;/strong&gt;：使用具体词汇与上下文降低误解可能。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;设置角色（Set behavior/role）&lt;/strong&gt;：让模型「扮演某种身份」以调整风格或回答方式。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;逐步指导（Decompose tasks）&lt;/strong&gt;：将复杂任务拆解成多个子任务，提升精度。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. 提示策略实例（Prompting Strategies）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Few-shot 示例&lt;/strong&gt;：使用多个输入/输出示例引导模型学习任务结构。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Chain-of-thought（思维链）提示&lt;/strong&gt;：引导模型按逻辑顺序逐步推理，特别适合复杂问题解决。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Refine prompts（迭代优化）&lt;/strong&gt;：通过反馈不断调整提示内容以获取更优结果。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Internal monologue&lt;/strong&gt;：让模型模拟「内心思考过程」以获得更深入分析。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Critique and revise&lt;/strong&gt;：让模型先生成回答，再进行批评、修改，提升答案质量。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. 应用技巧（Practical Tips）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;使用 &quot;Let&#39;s think step by step&quot; 等语句诱导更好推理。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;将模型输出限制为 JSON 格式时，需加入明确的格式描述与示例。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;对于多步骤任务，最好明确列出每个阶段的要求。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;评估提示效果需结合质量、稳定性与成本。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344704/openai-cookbook-gpt4-1-prompting-guide</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344704/openai-cookbook-gpt4-1-prompting-guide</guid>
            <pubDate>Sun, 13 Apr 2025 08:13:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>​夸克 AI 月活跃用户达 1.5 亿，超越节跳动豆包</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;据最新报道，中国电商巨头阿里巴巴集团人工智能应用 Quark（夸克） 在三月份的月活跃用户数 (MAU) 达到了近 1.5 亿，成功超越了字节跳动的 Doubao，成为中国最受欢迎的 AI 应用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根据南华早报的报道，紧随其后的是 Doubao(豆包)，月活跃用户接近 1 亿，DeepSeek 则约为 7700 万。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;246&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-359114e83f8a5eb02061a86e0c25f4cc544.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#242424; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;值得一提的是，阿里巴巴早前曾表示 Quark 的用户数已经达到 2 亿。美国风险投资公司安德森・霍洛维茨在三月份发布的报告中，将 Quark 排在全球第六大 AI 应用，仅次于百度的 AI 搜索和 OpenAI 的 ChatGPT 及微软增强的 Edge 浏览器。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#242424; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;阿里巴巴在三月份对 Quark 进行了重组，该应用利用公司最新的 Qwen 推理模型，拥有一个简洁的搜索框功能。阿里巴巴表示，Quark 可以帮助用户进行学术研究、文档撰写、图像生成等多种应用。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#242424; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;与此同时，阿里巴巴的云计算部门正在扩展其平台即服务选项，并通过推出新款大型语言模型，如 Qwen-Max 和类似 DeepSeek 的 QwQ-Plus 推理模型，来增强其海外产品线。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344702</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344702</guid>
            <pubDate>Sun, 13 Apr 2025 08:09:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Droidrun：让 AI Agent 像人类一样操作 Android 手机</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;继 BrouserUse, ComputerUse 等项目后，PhoneUse 类的项目终于出现了 —— DroidRun。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1404&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-09b96edb6cd9736abb469d863489d872e90.png&quot; width=&quot;2720&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Droidrun，为 AI Agent 提供 Android 操作系统，让 AI 以最先进的自动化方式控制 Android 设备。&lt;/p&gt; 
&lt;p&gt;Droidrun 结合视觉理解与 UI 结构提取，实现流畅的交互体验。它不仅能打开 App、发送消息，还能自动导航菜单、处理错误，甚至完成复杂任务如订车或录视频。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-fa6811ef13a8a3e78b928eaf828c59a7405.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Droidrun 主要功能&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;视觉+UI 解析：结合视觉模型（识别屏幕内容）和 UI 结构提取（解析控件树），实现精准交互。&lt;/li&gt; 
 &lt;li&gt;智能自愈机制：智能检测错误（如网络中断、界面变化），自动调整操作路径。&lt;/li&gt; 
 &lt;li&gt;Android Portal APK：类似 Agent 通行证的 Android 应用，部署后 AI 可通过它操控整个系统。&lt;/li&gt; 
 &lt;li&gt;多系统管理（即将上线）：支持多台设备多实例，支持复杂工作流与并行处理。&lt;/li&gt; 
 &lt;li&gt;元素追踪（即将上线）：精准提取点击元素，复现 LLM 行为，确保自动化一致性。&lt;/li&gt; 
 &lt;li&gt;凭证管理器（即将上线）：支持登录信息和 2FA 绑定，个性化你的使用体验。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Droidrun 作者表示，该项目后续会在 GitHub 开源。&lt;/p&gt; 
&lt;p&gt;详情查看：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.droidrun.ai%2F&quot; target=&quot;_blank&quot;&gt;https://www.droidrun.ai/&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344699/droidrun-ai</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344699/droidrun-ai</guid>
            <pubDate>Sun, 13 Apr 2025 07:56:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>常见的 AI 模型格式</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;div class=&quot;rich_media_content js_underline_content
                       autoTypeSetting24psection
            &quot; id=&quot;js_content&quot;&gt; 
 &lt;section data-tool=&quot;mdnice 编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; style=&quot;margin-bottom: 0px;padding-left: 10px;padding-right: 10px;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;font-family: &amp;quot;Source Sans Pro&amp;quot;, &amp;quot;PingFang SC&amp;quot;, ui-sans-serif, system-ui, -apple-system, Roboto, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif;font-size: 16px;color: rgb(0, 0, 0);line-height: 1.5em;word-spacing: 0em;letter-spacing: 0em;word-break: break-word;text-align: left;&quot;&gt; 
  &lt;figure data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;&quot;&gt; 
   &lt;img alt=&quot;&quot; class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;100010836&quot; data-ratio=&quot;0.5231481481481481&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; style=&quot;display: block;margin-right: auto;margin-left: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;object-fit: fill;box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px;height: auto !important;&quot; src=&quot;https://oscimg.oschina.net/oscnet/767c1cae-8c0a-41f8-8c29-43c14f7956ac.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
  &lt;/figure&gt; 
  &lt;blockquote data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 20px;margin-bottom: 20px;padding: 10px 10px 10px 20px;border-top: 3px none rgba(0, 0, 0, 0.4);border-bottom: 3px none rgba(0, 0, 0, 0.4);border-right: 3px none rgba(0, 0, 0, 0.4);border-left-color: rgba(255, 157, 0, 0.6);border-radius: 0px;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(255, 157, 0, 0.15);width: auto;height: auto;box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px;overflow: auto;&quot;&gt; 
   &lt;span style=&quot;display: none;color: rgb(0, 0, 0);font-size: 16px;line-height: 1.5em;letter-spacing: 0em;&quot;&gt;&lt;/span&gt; 
   &lt;p style=&quot;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;color: rgba(0, 0, 0, 0.8);font-size: 14px;line-height: 1.5em;letter-spacing: 0em;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(0, 0, 0, 0);width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;来源&lt;/strong&gt;: 
    &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
      https://blog.ngxson.com/common-ai-model-formats 
    &lt;/url-text&gt;&lt;/p&gt; 
  &lt;/blockquote&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;过去两年，开源 AI 社区一直在热烈讨论新 AI 模型的开发。每天都有越来越多的模型在 
   &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
     Hugging Face 
   &lt;/url-text&gt;上发布，并被用于实际应用中。然而，开发者在使用这些模型时面临的一个挑战是 &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;模型格式的多样性&lt;/strong&gt;。&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;在本文中，我们将探讨当下常见的 AI 模型格式，包括:&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;GGUF&lt;/strong&gt; 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;PyTorch&lt;/strong&gt; 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;Safetensors&lt;/strong&gt; 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;ONNX&lt;/strong&gt; 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;我们将分析每种格式的 &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;优缺点&lt;/strong&gt;，并提供 &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;使用建议&lt;/strong&gt;，帮助你选择最适合的格式。&lt;/p&gt; 
  &lt;span id=&quot;OSC_h2_1&quot;&gt;&lt;/span&gt; 
  &lt;h2 data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 30px;margin-bottom: 15px;align-items: unset;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;border-style: none;border-width: 1px;border-color: rgb(0, 0, 0);border-radius: 0px;box-shadow: none;flex-direction: unset;float: unset;height: auto;justify-content: unset;line-height: 1.5em;overflow: unset;text-shadow: none;transform: none;width: auto;-webkit-box-reflect: unset;&quot;&gt;&lt;span style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 20px;color: rgb(255, 157, 0);line-height: 1.8em;letter-spacing: 0em;padding-left: 10px;border-style: none none none solid;border-width: 1px 1px 1px 5px;border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgba(255, 157, 0, 0.95);border-radius: 0px;align-items: unset;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;box-shadow: none;display: block;font-weight: bold;flex-direction: unset;float: unset;height: auto;justify-content: unset;overflow: unset;text-indent: 0em;text-shadow: none;transform: none;width: auto;-webkit-box-reflect: unset;&quot;&gt;GGUF&lt;/span&gt;&lt;span style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;/h2&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;GGUF 最初是为 
   &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
     llama.cpp 
   &lt;/url-text&gt;项目开发的。GGUF 是一种二进制格式，旨在实现快速的模型加载和保存，并易于阅读。模型通常使用 PyTorch 或其他框架开发，然后转换为 GGUF 格式以与 GGML 一起使用。&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt; 
   &lt;url-text-note style=&quot;font-size: 14px;color: rgba(23, 78, 166, 0.9);&quot;&gt;
     llama.cpp 
   &lt;/url-text-note&gt; 
   &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
     https://github.com/ggml-org/llama.cpp 
   &lt;/url&gt;&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;随着时间的推移，GGUF 已成为开源社区中共享 AI 模型最流行的格式之一。它得到了许多知名推理运行时的支持，包括 
   &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
     llama.cpp 
   &lt;/url-text&gt;、 
   &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
     ollama 
   &lt;/url-text&gt;和 
   &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
     vLLM 
   &lt;/url-text&gt;。&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;url-text-note style=&quot;font-size: 14px;color: rgba(23, 78, 166, 0.9);&quot;&gt;
       llama.cpp 
     &lt;/url-text-note&gt; 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://github.com/ggml-org/llama.cpp 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;url-text-note style=&quot;font-size: 14px;color: rgba(23, 78, 166, 0.9);&quot;&gt;
       ollama 
     &lt;/url-text-note&gt; 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://ollama.com/ 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;url-text-note style=&quot;font-size: 14px;color: rgba(23, 78, 166, 0.9);&quot;&gt;
       vLLM 
     &lt;/url-text-note&gt; 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://github.com/vllm-project/vllm 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;目前，GGUF 主要用于语言模型。虽然也可以将其用于其他类型的模型，例如通过 
   &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
     stable-diffusion.cpp 
   &lt;/url-text&gt;实现的扩散模型，但这并不像在语言模型中的应用那样普遍。&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt; 
   &lt;url-text-note style=&quot;font-size: 14px;color: rgba(23, 78, 166, 0.9);&quot;&gt;
     stable-diffusion.cpp 
   &lt;/url-text-note&gt; 
   &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
     https://github.com/leejet/stable-diffusion.cpp 
   &lt;/url&gt;&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;GGUF 文件包含以下部分:&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      一个以键值对组织的元数据部分。该部分包含有关模型的信息，例如其架构、版本和超参数。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      一个张量元数据部分。该部分包括模型中张量的详细信息，例如它们的形状、数据类型和名称。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      最后，一个包含张量数据本身的部分。 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;&lt;img alt=&quot;GGUF 格式结构图&quot; class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;100010837&quot; data-ratio=&quot;0.7277777777777777&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; style=&quot;display: block;margin-right: auto;margin-left: auto;height: auto !important;&quot; src=&quot;https://oscimg.oschina.net/oscnet/1ece7b2f-fd95-470c-81c5-f0e6d3bc137b.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;Diagram by 
   &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
     @mishig25 
   &lt;/url-text&gt;(GGUF v3) 
   &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
     https://github.com/mishig25 
   &lt;/url&gt;&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;GGUF 格式和 GGML 库还提供了灵活的 &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;量化方案&lt;/strong&gt;，能够在保持良好精度的同时实现高效的模型存储。一些最常见的量化方案包括:&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;Q4_K_M&lt;/code&gt;: 大多数张量被量化为 4 位，部分张量被量化为 6 位。这是最常用的量化方案。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;IQ4_XS&lt;/code&gt;: 几乎所有张量都被量化为 4 位，但借助 
     &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;重要性矩阵&lt;/strong&gt;。该矩阵用于校准每个张量的量化，可能在保持存储效率的同时提高精度。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;IQ2_M&lt;/code&gt;: 类似于 
     &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;IQ4_XS&lt;/code&gt;，但使用 2 位量化。这是最激进的量化方案，但在某些模型上仍能实现良好的精度。它适用于内存非常有限的硬件。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;Q8_0&lt;/code&gt;: 所有张量都被量化为 8 位。这是最不激进的量化方案，提供几乎与原始模型相同的精度。 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;figure data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;&quot;&gt; 
   &lt;img alt=&quot;GGUF 格式的 Llama-3.1 8B 模型示例&quot; class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;100010838&quot; data-ratio=&quot;0.4203703703703704&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; style=&quot;display: block;margin-right: auto;margin-left: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;object-fit: fill;box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px;height: auto !important;&quot; src=&quot;https://oscimg.oschina.net/oscnet/52733a97-58a3-4369-9aaf-73798836db20.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt; &amp;nbsp; 
   &lt;p style=&quot;text-align:center;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;GGUF 格式的 Llama-3.1 8B 模型示例，链接 
    &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
      https://hf.co/bartowski/Meta-Llama-3.1-8B-Instruct-GGUF/tree/main 
    &lt;/url-text&gt;&lt;/p&gt; 
  &lt;/figure&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;让我们回顾一下 GGUF 的优缺点:&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;优点&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      简单: 单文件格式易于共享和分发。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      快速: 通过与 
     &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;mmap()&lt;/code&gt; 的兼容性实现模型的快速加载和保存。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      高效: 提供灵活的量化方案。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      便携: 作为一种二进制格式，无需特定库即可轻松读取。 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;缺点&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      大多数模型需要从其他格式 (如 PyTorch、Safetensors) 转换为 GGUF。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      并非所有模型都可转换。部分模型不受 llama.cpp 支持。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      模型保存为 GGUF 格式后，修改或微调并不容易。 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;GGUF 主要用于生产环境中的 &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;模型服务&lt;/strong&gt;，其中快速加载时间至关重要。它也用于开源社区内的 &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;模型共享&lt;/strong&gt;，因为其格式简单，便于分发。&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;有用资源&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
       llama.cpp 
     &lt;/url-text&gt;项目，提供了将 HF 模型转换为 GGUF 的脚本。 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://github.com/ggml-org/llama.cpp 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
       gguf-my-repo 
     &lt;/url-text&gt;空间允许在不下载到本地的情况下将模型转换为 GGUF 格式。 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://hf.co/spaces/ggml-org/gguf-my-repo 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
       ollama 
     &lt;/url-text&gt;和 
     &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
       HF-ollama 集成 
     &lt;/url-text&gt;支持通过 
     &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;ollama run&lt;/code&gt; 命令运行 HF Hub 上的任何 GGUF 模型。 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://ollama.com/ 
     &lt;/url&gt; 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://hf.co/docs/hub/en/ollama 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;span id=&quot;OSC_h2_2&quot;&gt;&lt;/span&gt; 
  &lt;h2 data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 30px;margin-bottom: 15px;align-items: unset;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;border-style: none;border-width: 1px;border-color: rgb(0, 0, 0);border-radius: 0px;box-shadow: none;flex-direction: unset;float: unset;height: auto;justify-content: unset;line-height: 1.5em;overflow: unset;text-shadow: none;transform: none;width: auto;-webkit-box-reflect: unset;&quot;&gt;&lt;span style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 20px;color: rgb(255, 157, 0);line-height: 1.8em;letter-spacing: 0em;padding-left: 10px;border-style: none none none solid;border-width: 1px 1px 1px 5px;border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgba(255, 157, 0, 0.95);border-radius: 0px;align-items: unset;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;box-shadow: none;display: block;font-weight: bold;flex-direction: unset;float: unset;height: auto;justify-content: unset;overflow: unset;text-indent: 0em;text-shadow: none;transform: none;width: auto;-webkit-box-reflect: unset;&quot;&gt;PyTorch (.pt/.pth)&lt;/span&gt;&lt;span style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;/h2&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;.pt/.pth 扩展名代表 PyTorch 的默认序列化格式，存储包含学习参数 (权重、偏置) 、优化器状态和训练元数据的模型状态字典。&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;PyTorch 模型可以保存为两种格式:&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;.pt&lt;/strong&gt; : 此格式保存整个模型，包括其架构和学习参数。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;.pth&lt;/strong&gt; : 此格式仅保存模型的状态字典，其中包括模型的学习参数和一些元数据。 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;PyTorch 格式基于 Python 的 
   &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
     pickle 
   &lt;/url-text&gt;模块，该模块用于序列化 Python 对象。为了理解 &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;height: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;pickle&lt;/code&gt; 的工作原理，让我们看以下示例: 
   &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
     https://docs.python.org/3/library/pickle.html 
   &lt;/url&gt;&lt;/p&gt; 
  &lt;pre data-tool=&quot;mdnice 编辑器&quot; style=&quot;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;margin-top: 10px;margin-bottom: 10px;&quot;&gt;&lt;span style=&quot;display: block;background: none 10px 10px / 40px no-repeat rgb(30, 30, 30);height: 30px;width: 100%;margin-bottom: -7px;border-radius: 5px;&quot; data-remoteid=&quot;c1742865203707&quot; data-cacheurl=&quot;https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg&quot;&gt;&lt;/span&gt;&lt;code style=&quot;&quot;&gt;&lt;span style=&quot;color: #569CD6;line-height: 26px;&quot;&gt;import&lt;/span&gt;&amp;nbsp;pickle&lt;br&gt;model_state_dict&amp;nbsp;=&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;color: #D69D85;line-height: 26px;&quot;&gt;&quot;layer1&quot;&lt;/span&gt;:&amp;nbsp;&lt;span style=&quot;color: #D69D85;line-height: 26px;&quot;&gt;&quot;hello&quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color: #D69D85;line-height: 26px;&quot;&gt;&quot;layer2&quot;&lt;/span&gt;:&amp;nbsp;&lt;span style=&quot;color: #D69D85;line-height: 26px;&quot;&gt;&quot;world&quot;&lt;/span&gt;&amp;nbsp;}&lt;br&gt;pickle.dump(model_state_dict,&amp;nbsp;open(&lt;span style=&quot;color: #D69D85;line-height: 26px;&quot;&gt;&quot;model.pkl&quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color: #D69D85;line-height: 26px;&quot;&gt;&quot;wb&quot;&lt;/span&gt;))&lt;br&gt;&lt;/code&gt;&lt;/pre&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;The &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;height: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;pickle.dump()&lt;/code&gt; 函数将 &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;height: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;model_state_dict&lt;/code&gt; 字典序列化并保存到名为 &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;height: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;model.pkl&lt;/code&gt; 的文件中。输出文件现在包含字典的二进制表示:&lt;/p&gt; 
  &lt;figure data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;&quot;&gt; 
   &lt;img alt=&quot;model.pkl hex view&quot; class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;100010839&quot; data-ratio=&quot;0.22314814814814815&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; style=&quot;display: block;margin-right: auto;margin-left: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;object-fit: fill;box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px;height: auto !important;&quot; src=&quot;https://oscimg.oschina.net/oscnet/12344b5f-a596-4b9e-845c-a508aa037f99.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
   &lt;figcaption style=&quot;color: rgba(60, 60, 60, 0.6);font-size: 14px;line-height: 1.5em;letter-spacing: 0em;text-align: center;margin-top: 5px;&quot;&gt;
     model.pkl hex view 
   &lt;/figcaption&gt; 
  &lt;/figure&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;要将序列化的字典加载回 Python，我们可以使用 &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;height: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;pickle.load()&lt;/code&gt; 函数:&lt;/p&gt; 
  &lt;pre data-tool=&quot;mdnice 编辑器&quot; style=&quot;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;margin-top: 10px;margin-bottom: 10px;&quot;&gt;&lt;span style=&quot;display: block;background: none 10px 10px / 40px no-repeat rgb(30, 30, 30);height: 30px;width: 100%;margin-bottom: -7px;border-radius: 5px;&quot; data-remoteid=&quot;c1742865203708&quot; data-cacheurl=&quot;https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg&quot;&gt;&lt;/span&gt;&lt;code style=&quot;&quot;&gt;&lt;span style=&quot;color: #569CD6;line-height: 26px;&quot;&gt;import&lt;/span&gt;&amp;nbsp;pickle&lt;br&gt;model_state_dict&amp;nbsp;=&amp;nbsp;pickle.load(open(&lt;span style=&quot;color: #D69D85;line-height: 26px;&quot;&gt;&quot;model.pkl&quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color: #D69D85;line-height: 26px;&quot;&gt;&quot;rb&quot;&lt;/span&gt;))&lt;br&gt;print(model_state_dict)&lt;br&gt;&lt;span style=&quot;color: #57A64A;font-style: italic;line-height: 26px;&quot;&gt;#&amp;nbsp;Output:&amp;nbsp;{&#39;layer1&#39;:&amp;nbsp;&#39;hello&#39;,&amp;nbsp;&#39;layer2&#39;:&amp;nbsp;&#39;world&#39;}&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;如你所见，&lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;height: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;pickle&lt;/code&gt; 模块提供了一种简单的方法来序列化 Python 对象。然而，它也有一些局限性：&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;安全性&lt;/strong&gt;: 任何东西都可以被 pickle， 
     &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;包括恶意代码&lt;/strong&gt;。如果序列化数据未经过适当验证，这可能会导致安全漏洞。例如，Snyk 的这篇文章解释了 
     &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
       pickle 文件如何被植入后门 
     &lt;/url-text&gt;。 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://snyk.io/articles/python-pickle-poisoning-and-backdooring-pth-files/ 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;效率&lt;/strong&gt;: 它不支持延迟加载或部分数据加载。这可能导致在处理大型模型时 
     &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;加载速度慢&lt;/strong&gt; 和 
     &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;内存使用率高&lt;/strong&gt;。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;可移植性&lt;/strong&gt;: 它是特定于 Python 的，这使得与其他语言共享模型变得具有挑战性。 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;如果你仅在 Python 和 PyTorch 环境中工作，PyTorch 格式可能是一个合适的选择。然而，近年来，AI 社区一直在转向更高效和安全的序列化格式，例如 GGUF 和 Safetensors。&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;有用资源&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
       PyTorch 文档 
     &lt;/url-text&gt;关于保存和加载模型。 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://pytorch.org/docs/stable/generated/torch.save.html 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
       executorch 
     &lt;/url-text&gt;项目，提供了一种将 PyTorch 模型转换为 
     &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;.pte&lt;/code&gt; 的方法，这些模型可在移动和边缘设备上运行。 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://github.com/pytorch/executorch 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;span id=&quot;OSC_h2_3&quot;&gt;&lt;/span&gt; 
  &lt;h2 data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 30px;margin-bottom: 15px;align-items: unset;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;border-style: none;border-width: 1px;border-color: rgb(0, 0, 0);border-radius: 0px;box-shadow: none;flex-direction: unset;float: unset;height: auto;justify-content: unset;line-height: 1.5em;overflow: unset;text-shadow: none;transform: none;width: auto;-webkit-box-reflect: unset;&quot;&gt;&lt;span style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 20px;color: rgb(255, 157, 0);line-height: 1.8em;letter-spacing: 0em;padding-left: 10px;border-style: none none none solid;border-width: 1px 1px 1px 5px;border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgba(255, 157, 0, 0.95);border-radius: 0px;align-items: unset;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;box-shadow: none;display: block;font-weight: bold;flex-direction: unset;float: unset;height: auto;justify-content: unset;overflow: unset;text-indent: 0em;text-shadow: none;transform: none;width: auto;-webkit-box-reflect: unset;&quot;&gt;Safetensors&lt;/span&gt;&lt;span style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;/h2&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;由 Hugging Face 开发的 
   &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
     safetensors 
   &lt;/url-text&gt;解决了传统 Python 序列化方法 (如 PyTorch 使用的 &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;height: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;pickle&lt;/code&gt;) 中存在的安全性和效率问题。该格式使用受限的反序列化过程来防止代码执行漏洞。 
   &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
     https://hf.co/docs/safetensors/en/index 
   &lt;/url&gt;&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;一个 safetensors 文件包含:&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      以 JSON 格式保存的元数据部分。该部分包含模型中所有张量的信息，例如它们的形状、数据类型和名称。它还可以选择性地包含自定义元数据。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      张量数据部分。 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;figure data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;&quot;&gt; 
   &lt;img alt=&quot;Safetensors 格式结构图&quot; class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;100010840&quot; data-ratio=&quot;0.7611111111111111&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; style=&quot;display: block;margin-right: auto;margin-left: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;object-fit: fill;box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px;height: auto !important;&quot; src=&quot;https://oscimg.oschina.net/oscnet/69ddf4d2-306c-41ab-ba2f-9b200f43f2b7.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt; &amp;nbsp; 
   &lt;p style=&quot;text-align:center;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;Safetensors 格式结构图&lt;/p&gt; 
  &lt;/figure&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;优点&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      安全: Safetensors 采用受限的反序列化过程来防止代码执行漏洞。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      快速: 它支持延迟加载和部分数据加载，从而可以加快加载速度并降低内存使用率。这与 GGUF 类似，你可以使用 
     &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;mmap()&lt;/code&gt; 映射文件。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      高效: 支持量化张量。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      可移植：它设计为跨编程语言可移植，使得与其他语言共享模型变得容易。 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;缺点&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      量化方案不如 GGUF 灵活。这主要是由于 PyTorch 提供的量化支持有限。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      需要 JSON 解析器来读取元数据部分。这在处理像 C++ 这样的低级语言时可能会出现问题，因为这些语言没有内置的 JSON 支持。 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;注意：虽然在理论上元数据可以保存在文件中，但在实践中，模型元数据通常存储在一个单独的 JSON 文件中。这既可能是优点也可能是缺点，具体取决于使用场景。&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;safetensors 格式是 Hugging Face 的 
   &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
     transformers 
   &lt;/url-text&gt;库使用的默认序列化格式。它在开源社区中广泛用于&lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;共享、训练、微调和部署 AI 模型&lt;/strong&gt;。Hugging Face 上发布的新模型都以 safetensors 格式存储，包括 Llama、Gemma、Phi、Stable-Diffusion、Flux 等许多模型。 
   &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
     https://hf.co/docs/transformers/index 
   &lt;/url&gt;&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;有用资源：&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
       transformers 
     &lt;/url-text&gt;库关于保存和加载模型的文档。 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://hf.co/docs/transformers/quicktour 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
       bitsandbytes 指南 
     &lt;/url-text&gt;关于如何量化模型并将其保存为 safetensors 格式。 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://hf.co/docs/transformers/en/quantization/bitsandbytes 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
       mlx-community 
     &lt;/url-text&gt;组织在 HF 上提供与 MLX 框架 (Apple 芯片) 兼容的模型。 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://hf.co/mlx-community 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;span id=&quot;OSC_h2_4&quot;&gt;&lt;/span&gt; 
  &lt;h2 data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 30px;margin-bottom: 15px;align-items: unset;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;border-style: none;border-width: 1px;border-color: rgb(0, 0, 0);border-radius: 0px;box-shadow: none;flex-direction: unset;float: unset;height: auto;justify-content: unset;line-height: 1.5em;overflow: unset;text-shadow: none;transform: none;width: auto;-webkit-box-reflect: unset;&quot;&gt;&lt;span style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 20px;color: rgb(255, 157, 0);line-height: 1.8em;letter-spacing: 0em;padding-left: 10px;border-style: none none none solid;border-width: 1px 1px 1px 5px;border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgba(255, 157, 0, 0.95);border-radius: 0px;align-items: unset;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;box-shadow: none;display: block;font-weight: bold;flex-direction: unset;float: unset;height: auto;justify-content: unset;overflow: unset;text-indent: 0em;text-shadow: none;transform: none;width: auto;-webkit-box-reflect: unset;&quot;&gt;ONNX&lt;/span&gt;&lt;span style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;/h2&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;开放神经网络交换 (Open Neural Network Exchange，ONNX) 格式提供了一种与供应商无关的机器学习模型表示方法。它是 
   &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
     ONNX 生态系统 
   &lt;/url-text&gt;的一部分，该生态系统包括用于不同框架 (如 PyTorch、TensorFlow 和 MXNet) 之间互操作的工具和库。 
   &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
     https://onnx.ai/ 
   &lt;/url&gt;&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;ONNX 模型以 &lt;code style=&quot;color: rgb(255, 157, 0);font-size: 14px;line-height: 1.8em;letter-spacing: 0em;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(191, 191, 191, 0.1);width: auto;height: auto;margin-left: 1px;margin-right: 1px;padding: 2px 4px;border-style: none;border-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 4px;font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;&quot;&gt;.onnx&lt;/code&gt; 扩展名的单个文件保存。与 GGUF 或 Safetensors 不同，ONNX 不仅包含模型的张量和元数据，还包含模型的 &lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;计算图&lt;/strong&gt; 。&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;在模型文件中包含计算图使得在处理模型时具有更大的灵活性。例如，当发布新模型时，你可以轻松地将其转换为 ONNX 格式，而无需担心模型的架构或推理代码，因为计算图已经保存在文件中。&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;&lt;img alt=&quot;ONNX 格式的计算图示例&quot; class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;100010841&quot; data-ratio=&quot;0.5703703703703704&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; style=&quot;display: block;margin-right: auto;margin-left: auto;height: auto !important;&quot; src=&quot;https://oscimg.oschina.net/oscnet/122e0fcb-9552-4e35-910e-6022a9f72b49.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;ONNX 格式的计算图示例，由 
   &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
     Netron 
   &lt;/url-text&gt;生成 
   &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
     https://netron.app/ 
   &lt;/url&gt;&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;优点&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      灵活性: 在模型文件中包含计算图使得在不同框架之间转换模型时更加灵活。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      可移植性: 得益于 ONNX 生态系统，ONNX 格式可以轻松部署在各种平台和设备上，包括移动设备和边缘设备。 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;缺点&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      对量化张量的支持有限。ONNX 本身不支持量化张量，而是将它们分解为整数张量和比例因子张量。这可能导致在处理量化模型时质量下降。 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      复杂架构可能需要为不支持的层使用操作符回退或自定义实现。这可能会在将模型转换为 ONNX 格式时导致性能损失。 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;总体而言，如果你正在处理移动设备或浏览器内推理，ONNX 是一个不错的选择。&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: auto;border-style: none;border-width: 3px;border-color: rgba(0, 0, 0, 0.4);border-radius: 0px;&quot;&gt;有用资源&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
       onnx-community 
     &lt;/url-text&gt;组织在 HF 上提供 ONNX 格式的模型以及转换指南。 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://hf.co/onnx-community 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
       transformer.js 
     &lt;/url-text&gt;项目，允许在浏览器中使用 WebGPU 或 WebAssembly 运行 ONNX 模型。 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://github.com/huggingface/transformers.js 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
       onnxruntime 
     &lt;/url-text&gt;项目，提供在各种平台和硬件上的高性能推理引擎。 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://onnxruntime.ai/ 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt; 
     &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
       netron 
     &lt;/url-text&gt;项目，允许在浏览器中可视化 ONNX 模型。 
     &lt;url style=&quot;font-size: 14px;color: rgb(136, 136, 136);visibility: visible;display: block;&quot;&gt;
       https://netron.app/ 
     &lt;/url&gt; 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;span id=&quot;OSC_h2_5&quot;&gt;&lt;/span&gt; 
  &lt;h2 data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 30px;margin-bottom: 15px;align-items: unset;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;border-style: none;border-width: 1px;border-color: rgb(0, 0, 0);border-radius: 0px;box-shadow: none;flex-direction: unset;float: unset;height: auto;justify-content: unset;line-height: 1.5em;overflow: unset;text-shadow: none;transform: none;width: auto;-webkit-box-reflect: unset;&quot;&gt;&lt;span style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 20px;color: rgb(255, 157, 0);line-height: 1.8em;letter-spacing: 0em;padding-left: 10px;border-style: none none none solid;border-width: 1px 1px 1px 5px;border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgba(255, 157, 0, 0.95);border-radius: 0px;align-items: unset;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;box-shadow: none;display: block;font-weight: bold;flex-direction: unset;float: unset;height: auto;justify-content: unset;overflow: unset;text-indent: 0em;text-shadow: none;transform: none;width: auto;-webkit-box-reflect: unset;&quot;&gt;硬件支持&lt;/span&gt;&lt;span style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;/h2&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;在选择模型格式时，重要的是要考虑模型将部署在哪种硬件上。下表显示了每种格式的硬件支持建议:&lt;/p&gt; 
  &lt;table data-tool=&quot;mdnice 编辑器&quot;&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;硬件&lt;/th&gt; 
     &lt;th&gt;GGUF&lt;/th&gt; 
     &lt;th&gt;PyTorch&lt;/th&gt; 
     &lt;th&gt;Safetensors&lt;/th&gt; 
     &lt;th&gt;ONNX&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;CPU&lt;/td&gt; 
     &lt;td&gt;✅ (最佳)&lt;/td&gt; 
     &lt;td&gt;🟡&lt;/td&gt; 
     &lt;td&gt;🟡&lt;/td&gt; 
     &lt;td&gt;✅&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;GPU&lt;/td&gt; 
     &lt;td&gt;✅&lt;/td&gt; 
     &lt;td&gt;✅&lt;/td&gt; 
     &lt;td&gt;✅&lt;/td&gt; 
     &lt;td&gt;✅&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;移动设备部署&lt;/td&gt; 
     &lt;td&gt;✅&lt;/td&gt; 
     &lt;td&gt;🟡 (通过 executorch)&lt;/td&gt; 
     &lt;td&gt;❌&lt;/td&gt; 
     &lt;td&gt;✅&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Apple 芯片&lt;/td&gt; 
     &lt;td&gt;✅&lt;/td&gt; 
     &lt;td&gt;🟡&lt;/td&gt; 
     &lt;td&gt;✅ (通过 MLX 框架)&lt;/td&gt; 
     &lt;td&gt;✅&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;说明：&lt;/p&gt; 
  &lt;ul data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(63, 63, 63);&quot; class=&quot;list-paddingleft-1&quot;&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      ✅: 完全支持 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      🟡: 部分支持或性能较低 
    &lt;/section&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;section style=&quot;margin-top: 5px;margin-bottom: 5px;line-height: 1.8em;letter-spacing: 0em;&quot;&gt;
      ❌: 不支持 
    &lt;/section&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;span id=&quot;OSC_h2_6&quot;&gt;&lt;/span&gt; 
  &lt;h2 data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 30px;margin-bottom: 15px;align-items: unset;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;border-style: none;border-width: 1px;border-color: rgb(0, 0, 0);border-radius: 0px;box-shadow: none;flex-direction: unset;float: unset;height: auto;justify-content: unset;line-height: 1.5em;overflow: unset;text-shadow: none;transform: none;width: auto;-webkit-box-reflect: unset;&quot;&gt;&lt;span style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 20px;color: rgb(255, 157, 0);line-height: 1.8em;letter-spacing: 0em;padding-left: 10px;border-style: none none none solid;border-width: 1px 1px 1px 5px;border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgba(255, 157, 0, 0.95);border-radius: 0px;align-items: unset;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;box-shadow: none;display: block;font-weight: bold;flex-direction: unset;float: unset;height: auto;justify-content: unset;overflow: unset;text-indent: 0em;text-shadow: none;transform: none;width: auto;-webkit-box-reflect: unset;&quot;&gt;结论&lt;/span&gt;&lt;span style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;/h2&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;在本文中，我们探讨了当今使用的一些常见 AI 模型格式，包括 GGUF、PyTorch、Safetensors 和 ONNX。每种格式都有其自身的优缺点，因此根据具体的用例和硬件需求选择合适的格式至关重要。&lt;/p&gt; 
  &lt;span id=&quot;OSC_h2_7&quot;&gt;&lt;/span&gt; 
  &lt;h2 data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 30px;margin-bottom: 15px;align-items: unset;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;border-style: none;border-width: 1px;border-color: rgb(0, 0, 0);border-radius: 0px;box-shadow: none;flex-direction: unset;float: unset;height: auto;justify-content: unset;line-height: 1.5em;overflow: unset;text-shadow: none;transform: none;width: auto;-webkit-box-reflect: unset;&quot;&gt;&lt;span style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 20px;color: rgb(255, 157, 0);line-height: 1.8em;letter-spacing: 0em;padding-left: 10px;border-style: none none none solid;border-width: 1px 1px 1px 5px;border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgba(255, 157, 0, 0.95);border-radius: 0px;align-items: unset;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;box-shadow: none;display: block;font-weight: bold;flex-direction: unset;float: unset;height: auto;justify-content: unset;overflow: unset;text-indent: 0em;text-shadow: none;transform: none;width: auto;-webkit-box-reflect: unset;&quot;&gt;脚注&lt;/span&gt;&lt;span style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;/h2&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;mmap: 内存映射文件是一种操作系统功能，允许将文件映射到内存中。这对于在不将整个文件加载到内存中的情况下读写大文件非常有益。&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;延迟加载 (lazy-loading): 延迟加载是一种技术，它将数据的加载推迟到实际需要时。这有助于在处理大型模型时减少内存使用并提高性能。&lt;/p&gt; 
  &lt;p data-tool=&quot;mdnice 编辑器&quot; style=&quot;color: rgb(63, 63, 63);line-height: 1.8em;letter-spacing: 0em;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;&quot;&gt;计算图 (computation graph): 在机器学习的上下文中，计算图是一种流程图，展示了数据如何通过模型流动以及每一步如何执行不同的计算 (例如加法、乘法或激活函数的应用)。&lt;/p&gt; 
  &lt;hr data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 10px;margin-bottom: 10px;border-style: solid none none;border-bottom-width: 3px;border-left-width: 3px;border-right-width: 3px;border-color: rgb(0, 0, 0) rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4);border-radius: 0px;background-attachment: scroll;background-clip: border-box;background-image: none;background-origin: padding-box;background-position: 0% 0%;background-repeat: no-repeat;background-size: auto;width: auto;height: 1px;&quot;&gt; 
  &lt;blockquote data-tool=&quot;mdnice 编辑器&quot; style=&quot;margin-top: 20px;margin-bottom: 20px;padding: 10px 10px 10px 20px;border-top: 3px none rgba(0, 0, 0, 0.4);border-bottom: 3px none rgba(0, 0, 0, 0.4);border-right: 3px none rgba(0, 0, 0, 0.4);border-left-color: rgba(255, 157, 0, 0.6);border-radius: 0px;background: none 0% 0% / auto no-repeat scroll padding-box border-box rgba(255, 157, 0, 0.15);width: auto;height: auto;box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px;overflow: auto;&quot;&gt; 
   &lt;span style=&quot;display: none;color: rgb(0, 0, 0);font-size: 16px;line-height: 1.5em;letter-spacing: 0em;&quot;&gt;&lt;/span&gt; 
   &lt;p style=&quot;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;color: rgba(0, 0, 0, 0.8);font-size: 14px;line-height: 1.5em;letter-spacing: 0em;&quot;&gt;英文原文: 
    &lt;url-text style=&quot;color: rgba(23, 78, 166, 0.9);border-style: none none dashed;border-width: 3px 3px 1px;border-color: rgba(0, 0, 0, 0.4) rgba(0, 0, 0, 0.4) rgba(107, 114, 128, 0.7);border-radius: 0px;padding-right: 2px;padding-left: 2px;&quot;&gt;
      https://blog.ngxson.com/common-ai-model-formats 
    &lt;/url-text&gt;&lt;/p&gt; 
   &lt;p style=&quot;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;color: rgba(0, 0, 0, 0.8);font-size: 14px;line-height: 1.5em;letter-spacing: 0em;&quot;&gt;原文作者: Xuan Son Nguyen&lt;/p&gt; 
   &lt;p style=&quot;text-indent: 0em;padding-top: 5px;padding-bottom: 5px;color: rgba(0, 0, 0, 0.8);font-size: 14px;line-height: 1.5em;letter-spacing: 0em;&quot;&gt;译者: Adeena&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;display: none;&quot;&gt; 
  &lt;mp-style-type data-value=&quot;3&quot;&gt;&lt;/mp-style-type&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color: #858585; font-size: 13px;&quot;&gt;本文分享自微信公众号 - Hugging Face（gh_504339124f0f）。&lt;br&gt;如有侵权，请联系 support@oschina.cn 删除。&lt;br&gt;本文参与「&lt;a href=&quot;https://www.oschina.net/sharing-plan&quot; target=&quot;_blank&quot;&gt;OSC 源创计划&lt;/a&gt;」，欢迎正在阅读的你也加入，一起分享。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/HuggingFace/blog/18017572</link>
            <guid isPermaLink="false">https://my.oschina.net/HuggingFace/blog/18017572</guid>
            <pubDate>Sun, 13 Apr 2025 07:53:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>理想汽车发布「理想星环 OS 技术架构白皮书」，4 月底开始逐步开放各模块源代码</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;4 月 15 日，理想汽车通过官方网站正式发布&lt;strong&gt;「理想星环 OS 技术架构白皮书」，&lt;/strong&gt;系统阐述汽车操作系统定义、分析发展趋势，结合创新场景案例，详细介绍理想星环 OS 技术架构及核心系统，并公开其开源计划。 &amp;nbsp; &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1400&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-02c75b03715cf0075c5c328ac3469a27dc9.png&quot; width=&quot;3348&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/152514_467q_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;官方介绍称，该白皮书旨在为全球开发者提供技术指导，牵引产业链上下游企业共建理想星环 OS，加速实现从智能系统（Smart System）到智慧系统（Intelligent System）的跨越，向「空间智能操作系统」进化。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/152204_oOi8_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;根据白皮书内容，&lt;strong&gt;从 4 月底开始，理想汽车将在官方网站的「开源论坛」逐步开放各模块源代码&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;4 月 23 日开源星环 OS 0.1.0 版本，包括安全实时 RTOS、通信总线-Lite&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;6 月 30 日开源星环 OS 1.0.0 版本，包括完整的智能车控系统、智能驾驶系统基础能力&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;7 月后开源完整的智能驾驶系统，包括虚拟化引擎&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/152220_QMrL_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;附「理想星环 OS 技术白皮书」链接：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.lixiang.com%2Ftech%2Fhaloos&quot; target=&quot;_blank&quot;&gt;https://www.lixiang.com/tech/haloos&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;相关阅读：&lt;a href=&quot;https://www.oschina.net/news/341314&quot; target=&quot;news&quot;&gt;李想官宣开源整车操作系统「星环 OS」&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344690/lixiang-haloos-opensource-comming-soon</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344690/lixiang-haloos-opensource-comming-soon</guid>
            <pubDate>Sun, 13 Apr 2025 07:22:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>育碧开源色盲辅助工具 Chroma</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;育碧宣布开源色盲辅助工具 Chroma，官方称其为「&lt;strong&gt;检测游戏中色盲相关问题的一站式解决方案」&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-7819440d465fbba6c632ef6c97401fc8a25.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;开源地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fubisoft%2FUbiChroma&quot; target=&quot;_blank&quot;&gt;https://github.com/ubisoft/UbiChroma&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;根据介绍，Chroma 可将过滤器投射到游戏屏幕上，&lt;strong&gt;模拟各种类型的色盲&lt;/strong&gt;，测试人员能够实时标记可访问性问题。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-97320765b814d48942ecc14258fe7b2d8e9.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;该工具使用 Color Oracle 算法，并可与单屏或双屏设置集成；支持热键，并提供可自定义的覆盖层以调整设置。育碧官方表示，&lt;strong&gt;过滤器不会影响游戏性能&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9338e0fb1d491d875e03988be195bf5e9e2.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;需要注意的是，这款软件模拟了色盲人士玩游戏时的体验，但并不能修复任何问题，只是方便开发者进行适配。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344685/ubisoft-ubichroma</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344685/ubisoft-ubichroma</guid>
            <pubDate>Sun, 13 Apr 2025 07:16:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Meta 反垄断案开庭审理，若败诉恐被强制拆分</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;美国联邦贸易委员会（FTC）终于迎来了与 Meta Platforms Inc.对簿公堂的一天，指控该公司十多年前收购 Instagram 和 WhatsApp 之后非法垄断社交媒体市场，因此必须进行拆分。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;287&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-14e9fc559b3fa542876e5b3e95d38218353.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;这起酝酿多年的案件本周一在首席法官 James Boasberg 主持下于华盛顿开庭。FTC 的律师在开庭陈述中援引了美国长期以来倡导维护竞争市场的传统，其牵头的审判律师 Daniel Matheson 指责 Meta 违反了这一原则。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;如果 FTC 胜诉、Instagram 和 WhatsApp 被强制剥离，这两款应用多年以来的整合将功亏一篑，全球最受欢迎的两款数字消费产品将受到冲击，并可能抹去 Meta 数以千亿美元的市值。这也将引发外界对政府如何评估和批准企业并购的严重质疑。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;该案的审理预计将耗时两个月左右，Meta 首席执行官扎克伯格以及前高管 Sheryl Sandberg 最快本周就将出庭作证。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Meta 公司在庭审首日辩称，自己正面临来自多家服务商的激烈竞争，尤其是在社交媒体日益偏向娱乐化而非仅用于与朋友和家庭互动的当下，此外公司还为用户带来了明显的好处。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344674</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344674</guid>
            <pubDate>Sun, 13 Apr 2025 06:29:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>MCP 安全检查清单：AI ⼯具⽣态系统安全指南</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;慢雾科技是全球领先的区块链生态威胁情报公司，旨在帮助区块链生态与 AI 生态相融合的过程中拥有更加深度的安全防护能力及保护用户拥有更高的隐私性。&lt;/p&gt; 
&lt;p&gt;近日，慢雾安全团队发布了一份 MCP 安全检查清单，涵盖了从&lt;strong&gt;用户交互界面、客户端组件、服务插件，到多 MCP 协作机制&lt;/strong&gt;及特定领域（如加密货币场景）的安全要点，旨在帮助开发者系统性地识别潜在风险并及时加以防范。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-573a44275abaa5a34bdb2f9e8a027d3c98b.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;▲ MCP 多组件交互流程与关键风险点示意图&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;随着大模型的迅猛发展，各种新的 AI 工具也在不断涌现，当下代表性的 MCP（Model Context Protocol）标准实现的工具正逐渐成为连接大语言模型（LLM）与外部工具、数据源之间的关键桥梁。&lt;/p&gt; 
 &lt;p&gt;自 2024 年底发布以来，MCP 已被广泛应用于 Claude Desktop、Cursor 等主流 AI 应用中，MCP Server 的各种商店也在不断出现，展现出强大的生态扩展能力。 &amp;nbsp;&lt;/p&gt; 
 &lt;p&gt;然而，MCP 的快速普及也带来了新的安全挑战。当前 MCP 架构中，系统由 Host（本地运行的 AI 应用环境）、Client（负责与 Server 通信与工具调用的组件） 以及 Server（MCP 插件所对应的服务端） 三部分构成。&lt;/p&gt; 
 &lt;p&gt;用户通过 Host 与 AI 交互，Client 将用户请求解析并转发至 MCP Server，执行工具调用或资源访问。在多实例、多组件协同运行的场景下，该架构暴露出一系列安全风险，尤其在涉及加密货币交易或 LLM 自定义插件适配等敏感场景中，风险更为突出，需要适当的安全措施来管理。 &amp;nbsp;&lt;/p&gt; 
 &lt;p&gt;在此背景下，制定和遵循一套全面的 MCP 安全检查清单显得尤为重要。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;完整内容查看：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fslowmist%2FMCP-Security-Checklist%2Fblob%2Fmain%2FREADME_CN.md&quot; target=&quot;_blank&quot;&gt;https://github.com/slowmist/MCP-Security-Checklist/blob/main/README_CN.md&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344672</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344672</guid>
            <pubDate>Sun, 13 Apr 2025 06:21:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>谷歌公布 AI 模型 DolphinGemma，可理解海豚声音</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;谷歌旗下 AI 研究实验室 DeepMind &lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.google%2Ftechnology%2Fai%2Fdolphingemma%2F&quot; target=&quot;_blank&quot;&gt;公布&lt;/a&gt;&lt;/u&gt;了一款名为「DolphinGemma」的 AI 模型，旨在帮助科学家理解海豚的声音，并生成类似海豚的声音序列。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/141017_ey2E_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;DolphinGemma 基于谷歌开放的 Gemma 系列模型构建，其训练数据来源于专注于研究大西洋斑点海豚及其行为的非营利组织 Wild Dolphin Project（WDP）。该模型能够生成类似海豚的声音序列，并且非常高效，谷歌表示其可以在手机上运行。&lt;/p&gt; 
&lt;p&gt;今年夏天，WDP 计划借助谷歌的 Pixel 9 智能手机搭建一个平台，该平台能够合成海豚的声音，并且可以聆听海豚的发声以获得匹配的「回应」。&lt;/p&gt; 
&lt;p&gt;谷歌透露，WDP 此前一直使用 Pixel 6 来进行相关研究工作，而升级到 Pixel 9 后，将使该组织的研究人员能够同时运行 AI 模型和模板匹配算法，从而进一步提升研究效率。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344668/google-ai-dolphingemma</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344668/google-ai-dolphingemma</guid>
            <pubDate>Sun, 13 Apr 2025 06:11:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>中国科学院软件所提出智能合约漏洞检测新模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;近日，中国科学院软件研究所集成创新中心研究团队在智能合约漏洞检测领域取得进展，提出了一种基于精准计算的检测模型，显著提升智能合约漏洞检测的准确性与可解释性。相关成果论文 Smart-LLaMA-DPO: Reinforced Large Language Model for Explainable Smart Contract Vulnerability Detection 被 CCF-A 类软件工程领域国际顶级会议 ISSTA 2025 接收，第一作者为博士生于磊，通讯作者为杨立副研究员与张凤军研究员。&lt;/p&gt; 
&lt;p&gt;随着区块链技术在各领域的广泛应用，智能合约的安全性日益受到重视。当前智能合约的漏洞检测普遍存在两方面问题：一是现有数据集覆盖漏洞类型有限，且缺乏高质量解释标注，导致模型难以精准学习漏洞模式；二是大语言模型对智能合约语义理解不足，易出现误判或解释逻辑错误，难以满足实际漏洞检测需求。&lt;/p&gt; 
&lt;p&gt;针对上述问题，研究团队提出一种智能合约漏洞检测新模型 Smart-LLaMA-DPO。该模型首先基于持续预训练方法，嵌入智能合约语法、安全模式等专业领域知识，创建具有高质量解释标注的数据集。然后以精准计算为核心，即采用监督微调与直接偏好优化策略相结合的多阶段训练方法，通过工程师在漏洞检测中的实践反馈，迭代优化模型输出，确保模型对智能合约语义的充分理解，提升漏洞定位与解释的精准性。此外，还引入了开源大模型进一步训练 Smart-LLaMA-DPO，并支持私有化部署与自动化更新。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;253&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c62efc4141ba6a3816b4fec4b0209f31196.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Smart-LLaMA-DPO 模型框架图&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;研究团队在以太坊、Hyperledger Fabric 等主流区块链平台的智能合约公开数据集上进行了大规模测试。实验结果表明，Smart-LLaMA-DPO 在重入漏洞、时间戳依赖等复杂场景下的误报率相较于最先进模型 DMT 仍分别降低了 6.18% 和 1.46%，生成的漏洞解释在正确性、完整性和清晰度方面均获得 81.15% 以上的人工评估专家认可，相关代码与数据集已面向学术界和工业界开源。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;357&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-eab099f431579b7808249fd0d9a7350263c.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Smart-LLaMA-DPO 和各模型实验效果对比&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;目前，研究团队正与中科软科技股份有限公司合作推进技术转化，针对金融、供应链等场景开发定制化检测工具，构建智能合约漏洞知识图谱与自动化修复建议系统，助力实现企业智能合约全生命周期安全管理。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相关链接&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;论文地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyangli8953.github.io%2Fissta2025-ae-paper11.pdf&quot; target=&quot;_blank&quot;&gt;https://yangli8953.github.io/issta2025-ae-paper11.pdf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;论文代码与数据集地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoi.org%2F10.5281%2Fzenodo.15200616&quot; target=&quot;_blank&quot;&gt;https://doi.org/10.5281/zenodo.15200616&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344667</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344667</guid>
            <pubDate>Sun, 13 Apr 2025 06:10:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>智谱启动上市辅导</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;中国证监会官网信息显示，北京智谱华章科技股份有限公司（以下简称「智谱」）4 月 14 日在北京证监局办理辅导备案，辅导机构为中国国际金融股份有限公司。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;273&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-96a5cb6793f83b1b211bbf88058bff6b28a.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此举意味着，智谱成为了第一家正式启动 IPO 流程的「AI 六小虎」公司，也是第一家正式启动 IPO 流程的大模型创业公司。去年 12 月以来，智谱已共计完成 48 亿元融资。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此前，天眼查 App 信息&lt;a href=&quot;https://www.oschina.net/news/341522&quot;&gt;显示&lt;/a&gt;，北京智谱华章科技有限公司发生工商变更，企业名称变更为北京智谱华章科技股份有限公司，同时部分主要人员发生变更。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;相关阅读：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/344598&quot; target=&quot;news&quot;&gt;智谱开源 32B/9B 系列 GLM 模型，极速版最高达到 200tokens/秒&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344631</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344631</guid>
            <pubDate>Sun, 13 Apr 2025 03:31:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>七牛云 CEO 许式伟分享「怎么做架构」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;七牛云 CEO、Go+编程语言创始人许式伟近日在社交媒体的分享：「怎么成长为优秀的工程师、怎么做架构」。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/112207_MP0l_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fopen.qiniu.us%2Farch-camp-3rd%2Fhow-arch.pdf&quot; target=&quot;_blank&quot;&gt;http://open.qiniu.us/arch-camp-3rd/how-arch.pdf&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;摘录部分内容如下：&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;架构设计的核心思想&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;模块化设计&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;架构的本质是模块拆解、连接与组合。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;模块的规格高于实现，模块之间应尽量正交（无耦合）。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;桥接代码越少，架构设计越优秀（乘法效应）。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;乘法思维&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;每个模块应是一个独立的子业务，具有更大的需求边界和前景。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;模块化设计的目标是通过组合模块实现复杂功能，而非直接堆叠功能。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;从 Go+的实现看架构拆解&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;模块化拆解的案例&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Go+的实现过程：将复杂问题拆解为多个独立模块（如 scanner、parser、ast 等）。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;模块之间通过桥接代码组合，而非直接依赖需求。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;重要结论&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;模块切分通常与需求不直接对应，过度依赖需求可能导致模块划分和团队分工问题。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;需求分析的关键在于预判未来发展方向和洞察内在逻辑关联。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;架构设计的核心是模块化和乘法思维，通过拆解复杂问题、组合独立模块来实现高效开发。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;顶级架构师的目标是通过最少的桥接代码实现最大的功能扩展性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;需求分析和模块化设计是架构设计的基础，需避免过度依赖当前需求。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;相关阅读：&lt;a href=&quot;https://www.oschina.net/news/343197/goplus-1-3&quot; target=&quot;news&quot;&gt;Go+ v1.3 新特性预览：Go+ Mini Spec、领域文本及 TPL&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344630/how-arch</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344630/how-arch</guid>
            <pubDate>Sun, 13 Apr 2025 03:25:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>缓存之美：万文详解 Caffeine 实现原理（下）</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;div class=&quot;rich_media_content js_underline_content
                       autoTypeSetting24psection
            &quot; id=&quot;js_content&quot;&gt; 
 &lt;span id=&quot;OSC_h3_1&quot;&gt;&lt;/span&gt; 
 &lt;h3 data-nodeid=&quot;3&quot; data-pm-slice=&quot;0 0 []&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;getIfPresent&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p data-nodeid=&quot;4&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;现在我们对&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;126&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;put&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法有了基本了解，现在我们继续深入&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;128&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;getIfPresent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;TestReadSourceCode&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;doRead&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// read constructor&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Cache&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;String&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;String&lt;/span&gt;&amp;gt; cache =&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Caffeine&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;newBuilder&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;span class=&quot;code-snippet__title&quot;&gt;maximumSize&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;10_000&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;span class=&quot;code-snippet__title&quot;&gt;build&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// read put&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cache.&lt;span class=&quot;code-snippet__title&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;key&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;value&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// read get&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cache.&lt;span class=&quot;code-snippet__title&quot;&gt;getIfPresent&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;key&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;4&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;对应源码如下，关注注释信息：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.DrainStatusRef&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;ConcurrentHashMap&amp;lt;Object, Node&amp;lt;K, V&amp;gt;&amp;gt; data;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; readBuffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&amp;nbsp;V&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;getIfPresent&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Object key,&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;recordStats)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 直接由 ConcurrentHashMap 获取元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; node = data.get(nodeFactory.newLookupKey(key));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(node ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新统计未命中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(recordStats) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statsCounter().recordMisses(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 当前 drainStatus 为 REQUIRED 表示有任务需要处理则调度处理&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(drainStatusOpaque() == REQUIRED) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 这个方法在上文中介绍过，它会提交 PerformCleanupTask 执行维护方法 maintenance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; scheduleDrainBuffers();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;V&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;value&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;node.getValue();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;now&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;expirationTicker().read();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 判断是否过期或者需要被回收且 value 对应的值为 null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(hasExpired(node, now) || (collectValues() &amp;amp;&amp;amp; (value ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;))) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新统计未命中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(recordStats) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statsCounter().recordMisses(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; scheduleDrainBuffers();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 检查节点没有在进行异步计算&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!isComputingAsync(node)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@SuppressWarnings(&quot;unchecked&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;K&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;castedKey&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(K) key;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新访问时间&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setAccessTime(node, now);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新读后过期时间&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tryExpireAfterRead(node, castedKey, value, expiry(), now);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 处理读取后操作（主要关注）&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;V&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;refreshed&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;afterRead(node, now, recordStats);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;(refreshed ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) ? value : refreshed;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;4&quot; style=&quot;line-height: 1.6em;text-indent: 0px;margin-left: 0px;margin-right: 0px;margin-bottom: 8px;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;getIfPresent&lt;/span&gt;&lt;/span&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;方法中，部分内容我们已经在上文中介绍过，比如&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;133&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;scheduleDrainBuffers&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法。最后一步&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;135&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;afterRead&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法是我们本次关注的重点，从命名来看它表示「读后操作」接下来看看它的具体流程：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; final&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;gt; readBuffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; V&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;afterRead&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Node&amp;lt;K, V&amp;gt; node, long now,&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;recordHit&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新统计命中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(recordHit) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;statsCounter&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;recordHits&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 注意这里如果 skipReadBuffer 为 false，那么它会执行 readBuffer.offer(node) 逻辑，向 ReadBuffer 中添加待处理元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;delayable =&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;skipReadBuffer&lt;/span&gt;() || (readBuffer.&lt;span class=&quot;code-snippet__title&quot;&gt;offer&lt;/span&gt;(node) !=&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;FULL&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 判断是否需要延迟处理维护任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;shouldDrainBuffers&lt;/span&gt;(delayable)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;scheduleDrainBuffers&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 处理必要的刷新操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;refreshIfNeeded&lt;/span&gt;(node, now);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;skipReadBuffer&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// fastpath 方法访问元素是否可以跳过「通知」驱逐策略，true 表示跳过&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 第二个判断条件判断频率草图是否初始化，如果「未初始化」则返回 true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;fastpath&lt;/span&gt;() &amp;amp;&amp;amp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;frequencySketch&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;isNotInitialized&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 状态流转，没有满 delayable 为 true 表示延迟执行维护任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;shouldDrainBuffers&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;delayable&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;switch&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;drainStatusOpaque&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__attr&quot;&gt;IDLE&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;!delayable;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 当前有任务需要处理则调度维护任务执行，否则均延迟执行 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__attr&quot;&gt;REQUIRED&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__attr&quot;&gt;PROCESSING_TO_IDLE&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__attr&quot;&gt;PROCESSING_TO_REQUIRED&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__attr&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;IllegalStateException&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Invalid drain status: &quot;&lt;/span&gt;&amp;nbsp;+ drainStatus);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;10&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;该方法非常简单，都是熟悉的内容，只有数据结构&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;138&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;还没深入了解过，它也是在 Caffeine 的构造方法中完成初始化的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h4_2&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-nodeid=&quot;11&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p data-nodeid=&quot;12&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;以下为&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;142&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;在 Caffeine 缓存中完成初始化的逻辑：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.DrainStatusRef&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; readBuffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Caffeine&amp;lt;K, V&amp;gt; builder,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&amp;nbsp;AsyncCacheLoader&amp;lt;K, V&amp;gt; cacheLoader,&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;isAsync) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果指定了过期策略或 key 定义了 week refenence value 定义了 week or soft reference 或定义了访问后过期策略，则 创建 BoundBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; readBuffer = evicts() || collectKeys() || collectValues() || expiresAfterAccess()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ?&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedBuffer&lt;/span&gt;&amp;lt;&amp;gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : Buffer.disabled();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;14&quot;&gt;&lt;code data-nodeid=&quot;144&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer.disabled()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;会创建如下枚举来表示&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;146&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;DisabledBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;enum&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;DisabledBuffer&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Object&lt;/span&gt;&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;INSTANCE&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;int&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;offer&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;e&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;SUCCESS&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainTo&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Consumer&amp;lt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;gt; consumer&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;long&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;size&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;long&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;reads&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;long&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;writes&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;14&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;满足其中条件判断时，&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;149&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的实际类型为&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;151&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;BoundedBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，它的类关系图如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section data-nodeid=&quot;17&quot; nodeleaf=&quot;&quot;&gt; 
  &lt;img src=&quot;https://oscimg.oschina.net/oscnet/b3eb671f-0def-47fa-914a-0ba56147c405.png&quot; alt=&quot;BoundBuffer.drawio.png&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4787037037037037&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-imgfileid=&quot;100028823&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;18&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;157&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;接口的注释声明中，能获取很多有效信息：它同样也是&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;175&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;多生产者单消费者（MPSC）&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;缓冲区，上文我们在介绍&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;163&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;WriteBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;时，它的单消费者实现方式是加同步锁，&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;165&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的实现单消费者的方式一样，因为它们都是在维护方法&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;167&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;maintenance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中加同步锁对元素进行消费。不同的是，如果&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;169&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;缓冲区满了或者发生争抢则会拒绝添加新元素，而且它不像队列或栈，&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;176&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;不保证 FIFO 或 LIFO&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;20&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;background-color: rgb(214, 214, 214);font-weight: normal;&quot;&gt;A multiple-producer / single-consumer buffer that rejects new elements &amp;nbsp;if it is full or fails spuriously due to contention. Unlike a queue and &amp;nbsp;stack, a buffer does not guarantee an ordering of elements in either &amp;nbsp;FIFO or LIFO order.&lt;/span&gt;&lt;/span&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;background-color: rgb(214, 214, 214);font-weight: normal;&quot;&gt;Beware that it is the responsibility of the caller to ensure that a &amp;nbsp;consumer has exclusive read access to the buffer. This implementation &amp;nbsp;does not include fail-fast behavior to guard against incorrect consumer &amp;nbsp;usage.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;21&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在类关系图中，抽象类&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;181&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;StripedBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的实现最值得学习，它采用了分段设计（Striped）和 CAS 操作实现高效并发写入。分段是将缓冲区分成多个「段」，根据线程的探针值将它们哈希到不同的「段」，减少竞争，接下来我们看一下它具体的实现逻辑，首先是&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;183&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;StripedBuffer#offer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;StripedBuffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;[] table;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(E e)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 扰动函数计算 64 位，线程探针值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;z&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;mix64(Thread.currentThread().getId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 取高 32 位值，位或 1 保证它为奇数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;increment&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;((&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;) (z &amp;gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;)) |&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 转换为 int 32 位&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;h&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;) z;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 掩码值为已分段的缓冲区数量-1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;mask;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 线程哈希到的具体缓冲区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt; buffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 未竞争标志位&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;uncontended&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt;[] buffers = table;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((buffers ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; || ((mask = buffers.length -&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &amp;lt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 位与运算获取缓冲区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; || ((buffer = buffers[h &amp;amp; mask]) ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 向缓冲区中添加元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; || !(uncontended = ((result = buffer.offer(e)) != Buffer.FAILED))) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 扩容或重试操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;expandOrRetry(e, h, increment, uncontended);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;23&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;186&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;StripedBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中我们能发现定义了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;188&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;volatile Buffer&amp;lt;E&amp;gt; @Nullable[] table&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;是数组的形式，这便对应了它「分段」的思想，将元素保存在多个缓冲区中。通过线程探针值哈希获取对应的缓冲区，逻辑并不复杂。&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;190&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;expandOrRetry&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法我们稍后再介绍，我们先假设线程哈希到的具体缓冲区&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;192&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer&amp;lt;E&amp;gt; buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;对象已经被创建，那么它会执行&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;194&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;buffer.offer(e)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法。&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;196&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer&amp;lt;E&amp;gt; buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;对应的实现类为定义在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;198&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;BoundedBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的静态内部类&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;200&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;RingBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，它也实现了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;202&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;接口，源码如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedBuffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;StripedBuffer&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;BUFFER_SIZE&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;16&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;MASK&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;BUFFER_SIZE -&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;RingBuffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BBHeader&lt;/span&gt;.ReadAndWriteCounterRef&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;VarHandle&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;BUFFER&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;MethodHandles.arrayElementVarHandle(Object[].class);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Object[] buffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 有参构造，这里表示缓冲区是被延迟创建的，创建时第一个元素便为 e&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;RingBuffer&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(E e)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; buffer =&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Object&lt;/span&gt;[BUFFER_SIZE];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BUFFER.set(buffer,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; WRITE.set(&lt;span class=&quot;code-snippet__built_in&quot;&gt;this&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(E e)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ReadCounterRef#readCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;head&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;readCounter;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ReadAndWriteCounterRef#writeCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;tail&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;writeCounterOpaque();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算可操作容量 size&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;size&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(tail - head);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 超过缓存大小则证明它已经满了&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(size &amp;gt;= BUFFER_SIZE) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;Buffer.FULL;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// CAS 更新 writeCounter 为 writeCounter+1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(casWriteCounter(tail, tail +&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 位与掩码值获取缓冲区中的索引&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;index&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;) (tail &amp;amp; MASK);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 将元素 e 更新在指定索引处&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BUFFER.setRelease(buffer, index, e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;Buffer.SUCCESS;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;Buffer.FAILED;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainTo&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Consumer&amp;lt;E&amp;gt; consumer)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ReadCounterRef#readCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;head&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;readCounter;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ReadAndWriteCounterRef#writeCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;tail&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;writeCounterOpaque();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算可操作容量 size&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;size&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(tail - head);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// size 为 0 表示无元素可操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(size ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 循环遍历消费缓冲区中所有元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;do&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算具体的索引&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;index&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;) (head &amp;amp; MASK);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@SuppressWarnings(&quot;unchecked&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;E&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;e&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(E) BUFFER.getAcquire(buffer, index);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 索引处元素为空表示无元素可消费&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(e ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取到具体元素后将缓冲区该元素位置更新成 null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BUFFER.setRelease(buffer, index,&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 执行消费逻辑&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; consumer.accept(e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// head 累加&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; head++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt;&amp;nbsp;(head != tail);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新读索引的值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setReadCounterOpaque(head);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BBHeader&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@SuppressWarnings(&quot;PMD.AbstractClassWithoutAbstractMethod&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;PadReadCounter&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;byte&lt;/span&gt;&amp;nbsp;p000,&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;/*省略 118 字节占位符...*/&lt;/span&gt;&amp;nbsp;p119;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;ReadCounterRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;PadReadCounter&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;readCounter;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;PadWriteCounter&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;ReadCounterRef&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;byte&lt;/span&gt;&amp;nbsp;p120,&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;/*省略 118 字节占位符...*/&lt;/span&gt;&amp;nbsp;p239;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;ReadAndWriteCounterRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;PadWriteCounter&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;VarHandle READ, WRITE;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;writeCounter;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;25&quot; style=&quot;line-height: 1.6em;text-align: left;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;205&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;BBHeader&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;类中又看到了熟悉的 120 字节内存占位，在上文中我们详细介绍过，这样能够保证&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;207&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;readCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;和&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;209&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;writeCounter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;分布在不同内存行，&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;227&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;避免了内存伪共享问题&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，保证不同线程读取这两个字段时互不影响。在添加元素的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;215&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;offer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法和消费元素的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;217&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;drainTo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法中，都能看见它使用了「读索引 readCounter」和「写索引 writeCounter」，这也对应了它命名中的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;228&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Ring&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;229&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Ring&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;表示环形，读、写索引在操作过程中会不断累加，但是它会执行位与运算保证索引值一直落在缓冲区长度的有效范围内，也就是说这两个索引值会不断在有效索引范围内「转圈」，则形成一个「环形」缓冲区。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;26&quot; style=&quot;text-align: left;&quot;&gt;&lt;code data-nodeid=&quot;230&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;RingBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;通过 CAS 操作来确保并发添加元素操作的安全，如果 CAS 操作失败则返回&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;232&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Buffer.FAILED&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，这时便会执行&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;234&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;StripedBuffer#expandOrRetry&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法，我们先来看一下它的方法注释内容，它说：这个方法用于处理写过程中发生的初始化、扩容、创建新缓存或竞争写情况。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p data-nodeid=&quot;28&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Handles cases of updates involving initialization, resizing, creating new Buffers, and/ or contention.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p data-nodeid=&quot;29&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;具体源码如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;StripedBuffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 最大尝试 3 次&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;ATTEMPTS&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// table 的最大大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;MAXIMUM_TABLE_SIZE&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;&amp;nbsp;* ceilingPowerOfTwo(NCPU);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 1 表示忙碌（扩容或正在创建）0 表示缓冲区无操作，通过 CAS 操作进行更新&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;tableBusy;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;[] table;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;* 扩展或重试&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;* &amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*&amp;nbsp;&lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt;&amp;nbsp;e 元素&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*&amp;nbsp;&lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt;&amp;nbsp;h 调用该方法时为线程探针值高 32 位，但在方法中会变更&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*&amp;nbsp;&lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt;&amp;nbsp;increment 线程探针值高 32 位&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*&amp;nbsp;&lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt;&amp;nbsp;wasUncontended true 未发生竞争 false 发生竞争&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;expandOrRetry&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(E e,&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;h,&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;increment,&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;wasUncontended)&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;result&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;Buffer.FAILED;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// true 标志缓冲区中最后一个槽位非空 false 表示为空&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;collide&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;attempt&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; attempt &amp;lt; ATTEMPTS; attempt++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt;[] buffers;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt; buffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;n;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果缓冲区数组已经被创建&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(((buffers = table) !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; ((n = buffers.length) &amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 检查具体的缓冲区是否为空&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((buffer = buffers[(n -&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &amp;amp; h]) ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 准备创建缓冲区，并更新 tableBusy 标志为 1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((tableBusy ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; casTableBusy()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;created&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;&amp;nbsp;{&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt;[] rs;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;mask, j;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(((rs = table) !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; ((mask = rs.length) &amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; (rs[j = (mask -&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &amp;amp; h] ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 创建缓冲区 return new RingBuffer&amp;lt;&amp;gt;(e);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; rs[j] = create(e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; created =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tableBusy =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果创建成功&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(created) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; result = Buffer.SUCCESS;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 缓冲区已经被其他线程创建了，重新循环重试&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; collide =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果发生竞争，表示向缓冲区中 CAS 添加元素失败&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!wasUncontended) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; wasUncontended =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果重试添加元素成功，结束循环&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((result = buffer.offer(e)) != Buffer.FAILED) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// table 超过最大大小或已完成扩容但未变更引用（stale）&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((n &amp;gt;= MAXIMUM_TABLE_SIZE) || (table != buffers)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; collide =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!collide) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; collide =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 扩容操作，将缓冲区数组扩容为原来的两倍大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 扩容条件：未超过最大 table 限制且重试添加元素依然失败&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((tableBusy ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; casTableBusy()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(table == buffers) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; table = Arrays.copyOf(buffers, n &amp;lt;&amp;lt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tableBusy =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; collide =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 变更探针哈希值，尝试下一个索引位置&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; h += increment;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 缓冲区数组的初始化逻辑&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((tableBusy ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (table == buffers) &amp;amp;&amp;amp; casTableBusy()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;init&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(table == buffers) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 初始大小为 1，会随着扩容不断将容量扩大两倍&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@SuppressWarnings({&quot;rawtypes&quot;, &quot;unchecked&quot;})&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Buffer&amp;lt;E&amp;gt;[] rs =&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; rs[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] = create(e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; table = rs;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; init =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tableBusy =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 完成初始化，元素添加成功&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(init) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; result = Buffer.SUCCESS;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;30&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;根据注释信息了解该方法的逻辑并不难，接下来我们再看一下它的消费方法&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code data-nodeid=&quot;239&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;drainTo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，非常简单：&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;StripedBuffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; volatile&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;[] table;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainTo&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Consumer&amp;lt;E&amp;gt; consumer&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt;[] buffers = table;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(buffers ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 循环遍历消费所有缓冲区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;Buffer&lt;/span&gt;&amp;lt;E&amp;gt; buffer : buffers) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(buffer !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; buffer.&lt;span class=&quot;code-snippet__title&quot;&gt;drainTo&lt;/span&gt;(consumer);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;32&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p data-nodeid=&quot;33&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;总结一下，&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;242&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp; 是一个 MPSC &amp;nbsp;的缓冲区，采用了分段的设计，将缓冲区划分为多份，根据线程的探针值哈希到不同的缓冲区，减少竞争的发生，并使用 CAS 操作来保证多线程下写入操作高效执行。因为它没有记录元素的写入顺序，所以它并不会像栈或队列一样保证 &amp;nbsp;FIFO 或 &amp;nbsp;LIFO。随着写入竞争发生会不断对缓冲区数组扩容，每次扩容为原来大小的两倍，每个缓冲区为环形缓冲区，通过位与运算计算元素实际的索引，将被消费的元素标记为 &amp;nbsp;null 实现缓冲区中槽位的重用。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;34&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;现在读写方法已经了解差不多了，需要我们再次回到维护方法&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;245&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;maintenance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中，看一看消费读缓冲区和其他逻辑。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h3_3&quot;&gt;&lt;/span&gt; 
 &lt;h3 data-nodeid=&quot;35&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;maintenance&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p data-nodeid=&quot;36&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;维护方法&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;249&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;maintenance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;如下所示，第 2 步中处理写缓冲区任务的逻辑已在上文中介绍过，接下来我们会关注第 1 步的处理读缓冲区任务，第 4 步驱逐策略和第 5 步的 「增值（climb）」操作。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;maintenance&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;&amp;nbsp;Runnable task&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新状态为执行中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;setDrainStatusRelease&lt;/span&gt;(&lt;span class=&quot;code-snippet__variable&quot;&gt;PROCESSING_TO_IDLE&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 1. 处理读缓冲区中的任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainReadBuffer&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 2. 处理写缓冲区中的任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainWriteBuffer&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(task !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; task.&lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 3. 处理 key 和 value 的引用&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainKeyReferences&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainValueReferences&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 4. 过期和驱逐策略&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;expireEntries&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;evictEntries&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 5. 「增值」 操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;climb&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 状态不是 PROCESSING_TO_IDLE 或者无法 CAS 更新为 IDLE 状态的话，需要更新状态为 REQUIRED，该状态会再次执行维护任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((&lt;span class=&quot;code-snippet__title&quot;&gt;drainStatusOpaque&lt;/span&gt;() !=&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;PROCESSING_TO_IDLE&lt;/span&gt;) || !&lt;span class=&quot;code-snippet__title&quot;&gt;casDrainStatus&lt;/span&gt;(&lt;span class=&quot;code-snippet__variable&quot;&gt;PROCESSING_TO_IDLE&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;IDLE&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;setDrainStatusOpaque&lt;/span&gt;(&lt;span class=&quot;code-snippet__variable&quot;&gt;REQUIRED&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;37&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;drainReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p data-nodeid=&quot;39&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;首先我们来看处理读缓冲区的逻辑，源码如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.DrainStatusRef&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; readBuffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Consumer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; accessPolicy;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;drainReadBuffer&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!skipReadBuffer()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; readBuffer.drainTo(accessPolicy);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;40&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p data-nodeid=&quot;41&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;它会执行到&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;254&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;StripedBuffer#drainTo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法，并且入参了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;256&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Consumer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; accessPolicy&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;消费者。前者会遍历所有缓冲区中对象进行消费；后者在 caffeine 构造方法中完成初始化：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.DrainStatusRef&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Buffer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; readBuffer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;Consumer&amp;lt;Node&amp;lt;K, V&amp;gt;&amp;gt; accessPolicy;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Caffeine&amp;lt;K, V&amp;gt; builder,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&amp;nbsp;AsyncCacheLoader&amp;lt;K, V&amp;gt; cacheLoader,&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;isAsync) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessPolicy = (evicts() || expiresAfterAccess()) ?&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;this&lt;/span&gt;::onAccess : e -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;43&quot;&gt;&lt;code data-nodeid=&quot;258&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;onAccess&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法在上文中也提到过，具体逻辑我们在这里赘述下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;onAccess&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Node&amp;lt;K, V&amp;gt; node&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;evicts&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; K key = node.&lt;span class=&quot;code-snippet__title&quot;&gt;getKey&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(key ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新访问频率&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;frequencySketch&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;increment&lt;/span&gt;(key);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果节点在窗口区，则将其移动到尾节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(node.&lt;span class=&quot;code-snippet__title&quot;&gt;inWindow&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;reorder&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderWindowDeque&lt;/span&gt;(), node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 在试用区的节点执行 reorderProbation 方法，可能会将该节点从试用区晋升到保护区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(node.&lt;span class=&quot;code-snippet__title&quot;&gt;inMainProbation&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;reorderProbation&lt;/span&gt;(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 否则移动到保护区的尾结点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;reorder&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderProtectedDeque&lt;/span&gt;(), node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新命中量&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;setHitsInSample&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;hitsInSample&lt;/span&gt;() +&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 配置了访问过期策略&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;expiresAfterAccess&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;reorder&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderWindowDeque&lt;/span&gt;(), node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 配置了自定义时间过期策略&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;expiresVariable&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;timerWheel&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;reschedule&lt;/span&gt;(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;45&quot; style=&quot;text-align: left;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;简单概括来说：&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;261&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中所有的元素都会被执行&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;263&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;onAccess&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的逻辑，频率草图会被更新，窗口区元素会被移动到该区的尾结点，试用区元素在满足条件的情况下会被晋升到保护区。在原理图中补充&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;265&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;相关逻辑，相比于原有&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;267&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;put&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法的逻辑，&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;269&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;的消费并没有引入特别「新颖」的内容：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section data-nodeid=&quot;46&quot; nodeleaf=&quot;&quot;&gt; 
  &lt;img src=&quot;https://oscimg.oschina.net/oscnet/ad5cad0c-ff08-4f21-a12e-0e313af3c976.png&quot; alt=&quot;caffeine-第 3 页.drawio.png&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7194444444444444&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-imgfileid=&quot;100028825&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;47&quot; style=&quot;text-align: left;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;275&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;reorderProbation&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法中有一段注释比较有意思，它说：如果保护区空间超过它的最大值，它会将其中的元素降级到试用区。但是这个操作被推迟到&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;277&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;maintenance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法的最后执行，也就是后续我们会介绍的&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;279&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;climb&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法，相当于是对缓存元素的移动做了剧透。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p data-nodeid=&quot;49&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;If the protected space exceeds its maximum, the LRU items are demoted to the probation space.&lt;/span&gt;&lt;/span&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;This is deferred to the adaption phase at the end of the maintenance cycle.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;span id=&quot;OSC_h4_4&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-nodeid=&quot;50&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;evictEntries&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p data-nodeid=&quot;51&quot;&gt;&lt;code data-nodeid=&quot;285&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;evictEntries&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法注释这么描述：如果缓存超过最大值则将元素驱逐。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p data-nodeid=&quot;53&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Evicts entries if the cache exceeds the maximum&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p data-nodeid=&quot;54&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;它的主方法逻辑非常简单：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;evictEntries&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!&lt;span class=&quot;code-snippet__title&quot;&gt;evicts&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 从窗口区「驱逐」&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt;&amp;nbsp;candidate =&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;evictFromWindow&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 从候选区或保护区进行驱逐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;evictFromMain&lt;/span&gt;(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;54&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;首先，先来看从窗口区「驱逐」的方法&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;290&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;evictFromWindow&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__property&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;evictFromWindow&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;K, V&amp;gt; first =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取队首元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;K, V&amp;gt; node =&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderWindowDeque&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;peekFirst&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 循环操作，直到窗口区权重小于窗口区权重最大限制&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__title&quot;&gt;windowWeightedSize&lt;/span&gt;() &amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;windowMaximum&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(node ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取队首节点的下一个节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;K, V&amp;gt; next = node.&lt;span class=&quot;code-snippet__title&quot;&gt;getNextInAccessOrder&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果队首节点权重不为 0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(node.&lt;span class=&quot;code-snippet__title&quot;&gt;getPolicyWeight&lt;/span&gt;() !=&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 标记为试用区节点并移动到试用区尾节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; node.&lt;span class=&quot;code-snippet__title&quot;&gt;makeMainProbation&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderWindowDeque&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;remove&lt;/span&gt;(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;accessOrderProbationDeque&lt;/span&gt;().&lt;span class=&quot;code-snippet__title&quot;&gt;offerLast&lt;/span&gt;(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 记录队首节点引用&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(first ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; first = node;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新窗口区权重&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;setWindowWeightedSize&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;windowWeightedSize&lt;/span&gt;() - node.&lt;span class=&quot;code-snippet__title&quot;&gt;getPolicyWeight&lt;/span&gt;());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// node 记录操作完成后的下一个头节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; node = next;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 返回此时的头节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;first;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;58&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;该方法会根据窗口区最大权重限制&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;301&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;将节点由窗口区移动到试用区&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，直到窗口区内元素小于最大值限制，并不是直接调用&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;297&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;evictEntry&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法真正地将元素驱逐。如果已经在窗口区中将元素移动到试用区，那么接下来会以窗口区头节点会作为入参执行&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;299&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;evictFromMain&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法，它有非常详细的注释内容：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;59&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;如果缓存超过最大容量限制，则将元素从主空间中移除。主空间通过频率草图决定从窗口区来的元素是被驱逐还是被保留，以便将使用频率最低的元素移除。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;60&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;窗口区的元素被提升到试用区尾节点（MRU 位置），驱逐策略驱逐的元素从试用区头节点（LRU &amp;nbsp;位置）开始。在需要执行驱逐策略时，元素会按照由头节点到尾节点的顺序进行评估，如果评估完试用区和保护区仍然需要驱逐元素，那么则会从窗口区驱逐。相似地，如果试用区驱逐完元素后仍然不够，则需要从保护区检查元素进行驱逐。队列按照从头节点到尾节点的顺序消费，使用频率相对较低的元素先被驱逐，在相同频率的情况下，优先保留主空间中的元素而不是窗口区元素。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;62&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;background-color: rgb(214, 214, 214);&quot;&gt;Evicts entries from the main space if the cache &amp;nbsp;exceeds the maximum capacity. The main space determines whether &amp;nbsp;admitting an entry (coming from the window space) is preferable to &amp;nbsp;retaining the eviction policy&#39;s victim. This decision is made using a &amp;nbsp;frequency filter so that the least frequently used entry is removed.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;63&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;background-color: rgb(214, 214, 214);&quot;&gt;The window space&#39;s candidates were previously &amp;nbsp;promoted to the probation space at its MRU position and the eviction &amp;nbsp;policy&#39;s victim starts at the LRU position. The candidates are evaluated &amp;nbsp;in promotion order while an eviction is required, and if exhausted then &amp;nbsp;additional entries are retrieved from the window space. Likewise, if &amp;nbsp;the victim selection exhausts the probation space then additional &amp;nbsp;entries are retrieved the protected space. The queues are consumed in &amp;nbsp;LRU order and the evicted entry is the one with a lower relative &amp;nbsp;frequency, where the preference is to retain the main space&#39;s victims &amp;nbsp;versus the window space&#39;s candidates on a tie.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;64&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;接下来我们看下源码的具体实现：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__type&quot;&gt;K, V&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;DrainStatusRef&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__type&quot;&gt;K, V&lt;/span&gt;&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;static&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;int WINDOW =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;static&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;int PROBATION =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt;&amp;nbsp;static&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;int PROTECTED =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; static&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;int ADMIT_HASHDOS_THRESHOLD =&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 为了方便理解，定义 victim 为驱逐区，candidate 为候选驱逐区，实际上它们不对应区域，而是对应某个区域中的节点元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&lt;/span&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; void evictFromMain(&lt;span class=&quot;code-snippet__meta&quot;&gt;@Nullable&lt;/span&gt;&amp;nbsp;Node&amp;lt;K, V&amp;gt; candidate) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int victimQueue = PROBATION;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int candidateQueue = PROBATION;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 首先获取试用区头节点作为首先要被驱逐的区域&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; victim = accessOrderProbationDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果权重大小超过最大值，不断地执行驱逐策略，直到满足条件&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt;&amp;nbsp;(weightedSize() &amp;gt; maximum()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果候选驱逐区为空且候选驱逐区为试用区，则指定候选驱逐区为窗口区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (candidateQueue == PROBATION)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 指定候选驱逐区为窗口区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = accessOrderWindowDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidateQueue = WINDOW;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 候选驱逐区和驱逐区都为空&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (victim ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 当前驱逐区为试用区，指定保护区为驱逐区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(victimQueue == PROBATION) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = accessOrderProtectedDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victimQueue = PROTECTED;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 当前驱逐区为保护区，指定驱逐区为窗口区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(victimQueue == PROTECTED) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = accessOrderWindowDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victimQueue = WINDOW;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 没有更多元素供驱逐，则退出循环&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 跳过权重为 0 的元素，权重为 0 表示无需驱逐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((victim !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (victim.getPolicyWeight() ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((candidate !=&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (candidate.getPolicyWeight() ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果要驱逐区为空，则从候选驱逐区中进行驱逐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(victim ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 驱逐当前节点并将指针指向下一个节点&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; previous = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = candidate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = previous;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 候选驱逐区为空，在驱逐区中驱逐元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = victim;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 驱逐区和候选驱逐区是同一个区的元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidate == victim) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(candidate, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果元素已经被垃圾回收，则驱逐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; K victimKey = victim.getKey();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; K candidateKey = candidate.getKey();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(victimKey ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = victim;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.COLLECTED,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidateKey ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = candidate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.COLLECTED,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果元素已经被标记为删除，驱逐它们&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!victim.isAlive()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = victim;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!candidate.isAlive()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = candidate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果候选区节点元素超过最大权重，直接驱逐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidate.getPolicyWeight() &amp;gt; maximum()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = candidate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 驱逐频率较低的元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(admit(candidateKey, victimKey)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = victim;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; victim = victim.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 变更候选区元素引用&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; evict = candidate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = candidate.getNextInAccessOrder();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evictEntry(evict, RemovalCause.SIZE,&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&lt;/span&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;evictionLock&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; boolean admit(K candidateKey, K victimKey) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取候选驱逐区中元素频率&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int victimFreq = frequencySketch().frequency(victimKey);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int candidateFreq = frequencySketch().frequency(candidateKey);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 候选区元素频率大于驱逐区中元素返回 true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidateFreq &amp;gt; victimFreq) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果候选区元素频率大于 6&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidateFreq &amp;gt;= ADMIT_HASHDOS_THRESHOLD) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算随机值来决定两元素之间的去留&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int random = ThreadLocalRandom.current().nextInt();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;((random &amp;amp;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;127&lt;/span&gt;) ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 使用计算随机值的方法来防止 HASH DOS 攻击，攻击者可能人为地将某些不被常用的缓存访问频率提高，如果不计算随机性那么会将真正有价值的元素驱逐，添加这种随机性计算可能减少这种攻击带来的影响，保证缓存的有效命中率&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 候选驱逐区元素小于驱逐区元素频率&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;65&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p data-nodeid=&quot;66&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;方法虽然很长，但是逻辑清晰明了，元素的驱逐流程根据注释可以很明确的了解。窗口区中元素会优先被晋升到试用区，在试用区和保护区中不断的驱逐节点直到满足条件，如果驱逐完成之后还不满足条件则会从窗口区中驱逐元素，此外，在逻辑中使用随机驱逐的方式来减少 &amp;nbsp;HASH DOS 攻击带来的影响也很值得学习，更新原理图如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section data-nodeid=&quot;67&quot; nodeleaf=&quot;&quot;&gt; 
  &lt;img src=&quot;https://oscimg.oschina.net/oscnet/34d9c5b2-c03f-46ca-8cc2-033416f49e49.png&quot; alt=&quot;caffeine-第 4 页.drawio.png&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7842592592592592&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-imgfileid=&quot;100028824&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/section&gt; 
 &lt;span id=&quot;OSC_h4_5&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-nodeid=&quot;68&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;climb&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p data-nodeid=&quot;69&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;现在我们来到了维护方法的最后一个步骤&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;323&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;climb&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法，看看它是如何为缓存「增值（climb）」的，源码如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BoundedLocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;BLCHeader&lt;/span&gt;.DrainStatusRef&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;LocalCache&lt;/span&gt;&amp;lt;K, V&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;HILL_CLIMBER_RESTART_THRESHOLD&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0.05d&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;HILL_CLIMBER_STEP_PERCENT&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0.0625d&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 步长值衰减比率&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;HILL_CLIMBER_STEP_DECAY_RATE&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0.98d&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;QUEUE_TRANSFER_THRESHOLD&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1_000&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;climb&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!evicts()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 确定要调整的量&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; determineAdjustment();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 将保护区中的元素降级到试用区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; demoteFromMainProtected();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取第一步计算完毕的调整大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;amount&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;adjustment();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 不调整则结束，否则根据正负增大或减小窗口大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(amount ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(amount &amp;gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; increaseWindow();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; decreaseWindow();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;determineAdjustment&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 检查频率草图是否被初始化&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(frequencySketch().isNotInitialized()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 没有被初始化则重置命中率、命中和未命中样本数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setPreviousSampleHitRate(&lt;span class=&quot;code-snippet__number&quot;&gt;0.0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMissesInSample(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setHitsInSample(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 请求总数 = 命中样本数 + 未命中样本数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;requestCount&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;hitsInSample() + missesInSample();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(requestCount &amp;lt; frequencySketch().sampleSize) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算命中率、命中率变化&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;hitRate&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;) hitsInSample() / requestCount;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;hitRateChange&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;hitRate - previousSampleHitRate();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算调整量，如果命中率增加获取正的步长值，否则获取负的步长值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;amount&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(hitRateChange &amp;gt;=&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) ? stepSize() : -stepSize();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算下一个步长值，如果变化量超过阈值，那么重新计算步长，否则按照固定衰减率计算&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;double&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;nextStepSize&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;(Math.abs(hitRateChange) &amp;gt;= HILL_CLIMBER_RESTART_THRESHOLD)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ? HILL_CLIMBER_STEP_PERCENT * maximum() * (amount &amp;gt;=&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&amp;nbsp;?&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&amp;nbsp;: -&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : HILL_CLIMBER_STEP_DECAY_RATE * amount;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 记录本次命中率作为下一次计算的依据&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setPreviousSampleHitRate(hitRate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 记录要调整的量&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setAdjustment((&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;) amount);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 记录步长值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setStepSize(nextStepSize);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 重置未命中和命中数量&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMissesInSample(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setHitsInSample(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;demoteFromMainProtected&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取保护区的最大值和当前值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;mainProtectedMaximum&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;mainProtectedMaximum();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;mainProtectedWeightedSize&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;mainProtectedWeightedSize();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 当前值没有超过最大值则不处理&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(mainProtectedWeightedSize &amp;lt;= mainProtectedMaximum) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 每次从保护区转换到试用区有 1000 个最大限制&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;i&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; QUEUE_TRANSFER_THRESHOLD; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 一旦不超过最大阈值则停止&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(mainProtectedWeightedSize &amp;lt;= mainProtectedMaximum) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 在保护区取出头节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; demoted = accessOrderProtectedDeque().poll();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(demoted ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 标记为试用区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; demoted.makeMainProbation();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 加入到试用区尾节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderProbationDeque().offerLast(demoted);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 计算变更后保护区权重大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mainProtectedWeightedSize -= demoted.getPolicyWeight();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新保护区权重&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedWeightedSize(mainProtectedWeightedSize);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;increaseWindow&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 保护区最大容量为 0 则没有可调整的空间&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(mainProtectedMaximum() ==&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 窗口调整的变化量由保护区贡献，取能够变化额度 quota 为，调整量 adjustment 和，保护区最大值，中的小值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;quota&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;Math.min(adjustment(), mainProtectedMaximum());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 减小保护区大小增加窗口区大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedMaximum(mainProtectedMaximum() - quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowMaximum(windowMaximum() + quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 保护区大小变动后，需要操作元素由保护区降级到试用区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; demoteFromMainProtected();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 窗口区增加容量之后，需要优先从试用区获取元素将增加的容量填满，如果试用区元素不够，则从保护区获取元素来填&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;i&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; QUEUE_TRANSFER_THRESHOLD; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取试用区头节点为「候选节点」&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; candidate = accessOrderProbationDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;probation&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果试用区元素为空或者窗口调整的变化量要比该节点所占的权重小，那么尝试从保护区获取节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;((candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) || (quota &amp;lt; candidate.getPolicyWeight())) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate = accessOrderProtectedDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; probation =&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 试用区和保护区均无节点，则无需处理，结束循环&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取该候选节点的权重，如果可变化额度比候选权重小，那么无需处理&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;weight&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;candidate.getPolicyWeight();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(quota &amp;lt; weight) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 每移除一个节点更新需要可变化额度&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; quota -= weight;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果是试用区节点，则直接在试用区移除&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(probation) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderProbationDeque().remove(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果是保护区节点，需要更新保护区权重大小，再将其从保护区中移除&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedWeightedSize(mainProtectedWeightedSize() - weight);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderProtectedDeque().remove(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 增加窗口区大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowWeightedSize(windowWeightedSize() + weight);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 将被移除的「候选节点」添加到窗口区中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderWindowDeque().offerLast(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 标记为窗口区节点&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate.makeWindow();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 可能存在 quota 小于，节点权重，的情况，那么这些量无法再调整，需要重新累加到保护区，并在窗口区中减掉&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedMaximum(mainProtectedMaximum() + quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowMaximum(windowMaximum() - quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 将未完成调整的 quota 记录在调整值中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setAdjustment(quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__meta&quot;&gt;@GuardedBy(&quot;evictionLock&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__title&quot;&gt;decreaseWindow&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&amp;nbsp;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果窗口区大小小于等于 1 则无法再减少了&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(windowMaximum() &amp;lt;=&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取变化量的额度（正整数），取调整值和窗口最大值减一中较小的值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;long&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;quota&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;Math.min(-adjustment(), Math.max(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, windowMaximum() -&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新保护区和窗口区大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedMaximum(mainProtectedMaximum() + quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowMaximum(windowMaximum() - quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;i&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; QUEUE_TRANSFER_THRESHOLD; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 从窗口区获取「候选节点」&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Node&amp;lt;K, V&amp;gt; candidate = accessOrderWindowDeque().peekFirst();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 未获取到说明窗口区已经没有元素了，不能再减小了，结束循环操作&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(candidate ==&amp;nbsp;&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取候选节点的权重&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__type&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__variable&quot;&gt;weight&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;code-snippet__operator&quot;&gt;=&lt;/span&gt;&amp;nbsp;candidate.getPolicyWeight();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 可变化的额度小于权重，则不支持变化，结束循环&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;&amp;nbsp;(quota &amp;lt; weight) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 随着节点的移动，变更可变化额度&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; quota -= weight;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 更新窗口区大小并将元素从窗口区移除&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowWeightedSize(windowWeightedSize() - weight);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderWindowDeque().remove(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 将从窗口区中移除的元素添加到试用区&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; accessOrderProbationDeque().offerLast(candidate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 将节点标记为试用区元素&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidate.makeMainProbation();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 此时 quote 为剩余无法变更的额度，需要在保护区中减去在窗口区中加上&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setMainProtectedMaximum(mainProtectedMaximum() - quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setWindowMaximum(windowMaximum() + quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 记录未变更完的额度在调整值中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setAdjustment(-quota);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span leaf=&quot;&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;pre data-nodeid=&quot;70&quot;&gt;&lt;code data-language=&quot;java&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p data-nodeid=&quot;71&quot; style=&quot;text-align: left;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;现在我们了解了&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;326&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;climb&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法的逻辑，正如它的注释所述&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;328&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Adapts the eviction policy to towards the optimal recency / frequency configuration.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，它会根据访问情况动态调整最佳的分区配置以适应驱逐策略。元素被添加时会优先被放在窗口区，窗口区越大则意味着短期内有大量缓存被添加，或元素添加后被再次访问，缓存命中率提高，需要更大的窗口区来承接这部分新晋的元素。根据&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;330&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;climb&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp; 中的逻辑，窗口区增大也会有试用区/保护区的元素不断被移动到窗口区；如果保护区越大意味着缓存中维护的元素都是访问频率较高的元素，命中率降低，并趋于某稳定值附近；试用区元素由窗口区元素晋升得来，再被访问时会被晋升到保护区，它更像是 &amp;nbsp;JVM 分区的 survivor &amp;nbsp;区。缓冲区不同分区的动态调整可以适应不同的访问模式，优化缓存的性能。接下来我们在原理图中补充上各个分区间元素的变换路径（元素也可由保护区直接降级到窗口区，但在图中未标出），并根据图示对 &amp;nbsp;Caffeine 的实现原理进行概括：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section data-nodeid=&quot;72&quot; nodeleaf=&quot;&quot;&gt; 
  &lt;img src=&quot;https://oscimg.oschina.net/oscnet/8d703c6e-0f66-4016-bda9-65cec66cc76d.png&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.712037037037037&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-imgfileid=&quot;100028827&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;73&quot; style=&quot;text-indent: 0px;text-align: left;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在图示（1）中，&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;335&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;put&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法会直接将元素添加到&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;337&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中，并在&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;339&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;WriteBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中添加任务，由单线程异步调用维护方法对任务进行消费，元素访问频率会被更新，试用区元素可能会被晋升到保护区；在图示（2）调用&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;341&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;getIfPresent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;方法会直接从&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;343&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp;中获取元素，并添加任务到&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code data-nodeid=&quot;345&quot; data-backticks=&quot;1&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;ReadBuffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&amp;nbsp; 中由单线程异步消费，它相比于（1）并没有什么额外操作，两个缓冲区均采用 MPSC 的设计模式，这种设计参考了 WAL（Write-Ahead &amp;nbsp;Logging）思想；图示（3）和图示（4）均发生在维护方法逻辑中，图示（3）驱逐元素时，窗口区元素会被「驱逐」到试用区，而试用区和保护区元素可能被直接驱逐；图示（4）「增值（climb）」操作会根据命中率调整窗口区和保护区的大小，合理分配分区间的元素。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;74&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;在文中提到过每个分区的双端队列使用了 LRU &amp;nbsp;算法，被访问过的元素会被放在尾节点，但对元素进行驱逐时并不以 LRU &amp;nbsp;的顺序为准，而是会参考频率草图中记录的元素频率，保证使用频率高的被保留，低的被驱逐。这和 LFU 算法很像，区别于 LFU 算法的是它采用了 &amp;nbsp;Count-Min Sketch 数据结构来记录频率，能够在较小的内存开销下实现对频率较为精准（93.75%）的估计，这种算法实际被称为&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;352&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;TinyLFU 算法&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;，它结合了两者的有点，在内存和计算开销上达到更好的平衡。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h3_6&quot;&gt;&lt;/span&gt; 
 &lt;h3 data-nodeid=&quot;75&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;技术选型&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;p data-nodeid=&quot;76&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;现在我们已经对 Caffeine &amp;nbsp;缓存有了一定的了解，那么究竟什么时候适合选择使用它呢？那就要根据它的特点来了：首先，它是线程安全的，适合在多线程环境下使用；其次它的性能很好，使用了 &amp;nbsp;TinyLFU &amp;nbsp;算法并采用了高性能缓存的设计；再就是它提供了多种缓存管理机制，除了基于最大容量的驱逐策略，还支持基于时间、软/虚引用等驱逐策略。所以&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong data-nodeid=&quot;359&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;font-weight: bold;&quot;&gt;它适合在高并发环境并且需要高性能、支持多种缓存管理策略的场景下使用&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;font-weight: bold;&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p data-nodeid=&quot;77&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;如果要在多种缓存中选取，可以以如下表格为参考：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section style=&quot;text-align: center;&quot; nodeleaf=&quot;&quot;&gt; 
  &lt;img src=&quot;https://oscimg.oschina.net/oscnet/379346e7-ba46-4b36-9d53-d55208cc938c.png&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3039332538736591&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;839&quot; type=&quot;block&quot; data-imgfileid=&quot;100028828&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/section&gt; 
 &lt;p data-nodeid=&quot;77&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;巨人的肩膀&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;ul class=&quot;list-paddingleft-1&quot;&gt; 
  &lt;li&gt;&lt;p data-nodeid=&quot;115&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;Github - caffeine&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p data-nodeid=&quot;117&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;并发编程网 - 现代化的缓存设计方案&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p data-nodeid=&quot;119&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;span textstyle=&quot;&quot; style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;博客园 - CPU Cache 与缓存行&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p data-nodeid=&quot;119&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;section style=&quot;text-align: center;margin-bottom: 8px;&quot; data-pm-slice=&quot;0 0 []&quot;&gt; 
  &lt;span style=&quot;font-size: 16px;letter-spacing: normal;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;&lt;img alt=&quot;图片&quot; class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;100028809&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/669ade14-6813-4577-9686-31c23198dffe.png&quot; data-type=&quot;webp&quot; data-w=&quot;396&quot; style=&quot;pointer-events: initial;width: 185px !important;visibility: visible !important;height: auto !important;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;span style=&quot;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box;overflow-wrap: break-word !important;font-size: 16px;border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);letter-spacing: normal;&quot;&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;text-align: center;margin-bottom: 8px;&quot;&gt; 
  &lt;span style=&quot;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box;overflow-wrap: break-word !important;font-size: 16px;border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);letter-spacing: normal;&quot;&gt;&lt;span leaf=&quot;&quot;&gt;扫一扫，加入技术交流群&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section&gt; 
  &lt;span leaf=&quot;&quot;&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;display: none;&quot;&gt; 
  &lt;mp-style-type data-value=&quot;3&quot;&gt;&lt;/mp-style-type&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color: #858585; font-size: 13px;&quot;&gt;本文分享自微信公众号 - 京东云开发者（JDT_Developers）。&lt;br&gt;如有侵权，请联系 support@oschina.cn 删除。&lt;br&gt;本文参与「&lt;a href=&quot;https://www.oschina.net/sharing-plan&quot; target=&quot;_blank&quot;&gt;OSC 源创计划&lt;/a&gt;」，欢迎正在阅读的你也加入，一起分享。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/4090830/blog/18017722</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18017722</guid>
            <pubDate>Sun, 13 Apr 2025 03:12:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>Rust 迎来十周年，社区发起问卷调查：为了 Rust 的未来</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;Rust 迎来十周年，官方计划撰写 Rust 愿景 RFC，&lt;strong&gt;目标是构建对现状的共识并明确未来方向&lt;/strong&gt;，不涉及具体设计和特性推荐。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0415/110449_4OlU_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;其范围涵盖社区和技术多方面，通过&lt;strong&gt;调查和访谈收集数据&lt;/strong&gt;，对象包括不同层次的 Rust 用户、非用户、企业等。目前计划在今年下半年发布愿景 RFC，4 月开展访谈，5 月准备初始报告。&lt;/p&gt; 
&lt;p&gt;公众可通过&lt;strong&gt;填写调查、分享调查链接&lt;/strong&gt;以及加入 Zulip 频道参与其中。&lt;/p&gt; 
&lt;p&gt;Rust 愿景 RFC 的目标不是提供具体设计或特性推荐，它侧重于构建对 Rust 现状的共识以及从宏观层面明确未来方向，后续会有专门的详细 RFC 来探讨具体设计和特性。&lt;/p&gt; 
&lt;p&gt;本次调查问题是开放式和自由形式的，涵盖的主题与年度 Rust 调查有所不同。并且本次调查可收集潜在访谈人员名单，而年度 Rust 调查通常不具备此功能。&lt;/p&gt; 
&lt;p&gt;公众可通过填写调查分享使用 Rust 的经历、推荐访谈对象；还能分享调查链接，让更多人参与进来；活跃于 Rust 维护者社区的人员可加入 Zulip 上的&lt;code&gt;#vision-doc-2025&lt;/code&gt;频道参与讨论。&lt;/p&gt; 
&lt;p&gt;问卷：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.surveyhero.com%2Fc%2Ffuznhxp3&quot; target=&quot;_blank&quot;&gt;https://www.surveyhero.com/c/fuznhxp3&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;原文：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.rust-lang.org%2F2025%2F04%2F04%2Fvision-doc-survey.html&quot; target=&quot;_blank&quot;&gt;https://blog.rust-lang.org/2025/04/04/vision-doc-survey.html&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/344622/rust-vision-doc-survey</link>
            <guid isPermaLink="false">https://www.oschina.net/news/344622/rust-vision-doc-survey</guid>
            <pubDate>Sun, 13 Apr 2025 03:05:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
    </channel>
</rss>