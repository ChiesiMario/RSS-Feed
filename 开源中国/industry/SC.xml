<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - industry - 简体中文</title>
    <link>https://www.oschina.net/news/industry</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/industry" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 10 Jun 2025 07:42:15 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>苹果发布 Containerization：在 macOS 上运行 Linux 容器的 Swift 框架</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                            &lt;p&gt;Containerization 是 Swift 编写的容器运行时，用于在 macOS 上运行 Linux 容器。使用了 Apple 芯片的 Virtualization.framework。&lt;/p&gt;

&lt;p&gt;Containerization 提供的 API 用于：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;管理 OCI 镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与远程注册中心交互&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建并填充 ext4 文件系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与 Netlink 套接字家族交互&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建针对快速启动时间优化的 Linux 内核&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成轻量级虚拟机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管理虚拟机的运行时环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成并与容器化进程交互&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 Rosetta 2 在 Apple 芯片上执行 x86_64 进程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;Containerization 框架赋予开发者直接在 Mac 上创建、下载或运行容器镜像的能力，其基于针对 Apple 芯片优化的开源框架构建，能够对容器映像进行安全隔离。&lt;/p&gt;

&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-f12698847fd251962a8dabcb596a127209c.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/containerization</link>
      <guid isPermaLink="false">https://www.oschina.net/p/containerization</guid>
      <pubDate>Tue, 10 Jun 2025 07:18:12 GMT</pubDate>
    </item>
    <item>
      <title>阿里通义实验室开源检索增强预训练框架 MaskSearch</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;阿里通义实验室&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FjabNf48U-HoN9W648dmX2Q" target="_blank"&gt;发布&lt;/a&gt;并开源了 MaskSearch 预训练框架，声称能让 AI 学会「主动搜索 + 多步推理」，从而更准确、更智能地回答复杂问题。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" height="385" src="https://oscimg.oschina.net/oscnet/up-66d5bfa06d72ffa4b1078a43c0bdfd45eba.webp" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;根据介绍，MaskSearch 的核心在于它提出的一种全新预训练任务——&lt;strong&gt;检索增强掩码预测（RAMP）&lt;/strong&gt;&amp;nbsp;，在这个任务中，模型需要填补句子中的掩码部分，并且必须通过主动搜索和多步推理来完成任务。&lt;/p&gt; 
&lt;p&gt;&lt;img height="403" src="https://oscimg.oschina.net/oscnet/up-fc9d9a6a5fdacfd87e065f2589f2309ab08.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span style="color:#4a4a4a"&gt;&lt;span&gt;例如，给定一个句子：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;Andrew Barto received his&amp;nbsp;&lt;span&gt;[mask]&lt;/span&gt;&amp;nbsp;with distinction in&amp;nbsp;&lt;span&gt;[mask]&lt;/span&gt;&amp;nbsp;&lt;span style="color:#ca7d37"&gt;from&lt;/span&gt;&amp;nbsp;the University of Michigan in&amp;nbsp;&lt;span style="color:#0e9ce5"&gt;1970&lt;/span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span style="color:#4a4a4a"&gt;&lt;span&gt;AI 需要通过搜索引擎查找相关信息，逐步推理出被遮盖的部分。模型首先分析上下文，判断需要查找的信息是「学位类型」和「专业方向」。随后，它调用搜索引擎进行查询，得到关于 Andrew Barto 的相关信息，并从中提取出关键片段：「Andrew Barto, B.S., math, University of Michigan, 1970」。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span style="color:#4a4a4a"&gt;&lt;span&gt;接着，AI 进行推理整合，最终填补掩码输出完整句子：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span style="color:#dd1144"&gt;Andrew&lt;/span&gt;&amp;nbsp;&lt;span style="color:#dd1144"&gt;Barto&lt;/span&gt;&amp;nbsp;received his B.&lt;span&gt;S&lt;/span&gt;.&amp;nbsp;&lt;span style="color:#ca7d37"&gt;with&lt;/span&gt;&amp;nbsp;distinction&amp;nbsp;&lt;span style="color:#ca7d37"&gt;in&lt;/span&gt;&amp;nbsp;math&amp;nbsp;&lt;span style="color:#ca7d37"&gt;from&lt;/span&gt;&amp;nbsp;the&amp;nbsp;&lt;span style="color:#dd1144"&gt;University&lt;/span&gt;&amp;nbsp;&lt;span style="color:#ca7d37"&gt;of&lt;/span&gt;&amp;nbsp;&lt;span style="color:#dd1144"&gt;Michigan&lt;/span&gt;&amp;nbsp;&lt;span style="color:#ca7d37"&gt;in&lt;/span&gt;&amp;nbsp;&lt;span style="color:#0e9ce5"&gt;1970&lt;/span&gt;。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;实验表明，即使是小模型（如 Qwen2.5-1.5B），在经过 MaskSearch 预训练后，也能在多个开放域问答任务中取得显著提升。例如，在 Bamboogle 数据集中性能提升超过 11.78% ，真正做到了「小模型也能挑战大模型」。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="354" src="https://oscimg.oschina.net/oscnet/up-b3ddb53ca899c492045ff28febdbd54f73f.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354614</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354614</guid>
      <pubDate>Tue, 10 Jun 2025 07:04:12 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>苹果设备端和服务器端基础语言模型的更新</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;本文翻译自：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmachinelearning.apple.com%2Fresearch%2Fapple-foundation-models-2025-updates" target="_blank"&gt;https://machinelearning.apple.com/research/apple-foundation-models-2025-updates&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-ab638eada802c4871bb91a726b10d31eabc.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;借助 Apple Intelligence，我们将在人们每天使用的应用和体验中集成强大的生成式人工智能，同时保护用户的隐私。在 2025 年全球开发者大会（WWDC）上，我们推出了一代全新的语言基础模型，这些模型专门设计用于增强我们最新软件版本中的 Apple Intelligence 特性。我们还推出了新的 Foundation Models 框架，该框架让应用开发者可以直接访问 Apple Intelligence 核心的设备端基础语言模型。&lt;/p&gt; 
&lt;p&gt;我们构建了这些生成模型，以支持我们在各平台中集成的广泛智能功能。这些模型提升了工具使用和推理能力，能够理解图像和文本输入，运行更快且更高效，并且支持 15 种语言。我们的最新基础模型经过优化，可在 Apple 芯片上高效运行，包括一个紧凑型的、约 30 亿参数的模型，以及一个基于服务器的混合专家模型，其架构专为&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsecurity.apple.com%2Fblog%2Fprivate-cloud-compute%2F" target="_blank"&gt;私有云计算&lt;/a&gt;设计。这两个基础模型是苹果为支持我们的用户而创建的更大生成模型家族的一部分。&lt;/p&gt; 
&lt;p&gt;在此概述中，我们详细介绍了我们设计的模型架构、用于训练的数据、所采用的训练配方、用于优化推理的技术，以及与同类模型相比的评估结果。在整个过程中，我们强调了如何在设备和私有云计算上实现速度和效率的提升，同时扩展了能力并提高了质量。最后，在我们持续致力于维护核心价值观的承诺下，我们展示了负责任的人工智能原则如何贯穿整个模型开发过程。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-d77e148d22b633cb086c702429e723f9622.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;图 1：苹果基础模型的建模概述&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;模型架构&lt;/h2&gt; 
&lt;p&gt;我们开发了设备端和服务器模型，以满足广泛的表现和部署需求。设备端模型针对效率进行了优化，并针对 Apple 芯片进行了定制，使推理具备低延迟且资源使用极少的特性，而服务器模型则设计用于提供高准确性和可扩展性，以处理更复杂的任务。共同而言，它们构成了一个互补的解决方案集，能够适应多种应用场景。&lt;/p&gt; 
&lt;p&gt;我们通过开发新的模型架构，提高了两种模型的效率。对于端侧模型，我们将完整模型分成两个块，深度比例为 5:3。块 2 的所有键值（KV）缓存都直接与块 1 最终层生成的 KV 缓存共享，从而将 KV 缓存的内存使用量减少了 37.5%，显著提高了首次令牌生成时间。我们还为服务器模型开发了新的架构，引入了并行轨道混合专家（PT-MoE）设计（见&lt;a href="https://www.oschina.net/news/354610/apple-foundation-models-2025-updates#figure2"&gt;图 2&lt;/a&gt;）。该模型由多个较小的 Transformer 组成，称为轨道，这些轨道独立处理令牌，仅在每个轨道块的输入和输出边界进行同步。每个轨道块还具有自己的 MoE 层。结合轨道独立性带来的轨道级并行性，这种设计显著减少了同步开销，使模型能够高效扩展，同时在不牺牲质量的情况下保持低延迟。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-0c199164ae8858ba38229a44aa3a9b9c5e2.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;图 2：PT-MoE 架构示意图。每个轨道由多个轨道块组成，每个轨道块包含固定数量的 transformer/MoE 层。假设总共有 L 层和轨道块深度 D，那么我们从 2L（张量并行）的同步开销减少到 L/D（轨道并行）。例如，如果 D = 4，PT 可将同步开销减少 87.5%。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;为支持更长的上下文输入，我们设计了一种交错注意力架构，结合滑动窗口局部注意力层、旋转位置嵌入（RoPE）和无位置嵌入（NoPE）的全局注意力层。这种设置提高了长度泛化能力，减少了 KV 缓存大小，并在长上下文推理中保持模型质量。&lt;/p&gt; 
&lt;p&gt;为了启用视觉能力，我们开发了一个在大规模图像数据上训练的视觉编码器。它由一个用于提取丰富特征的视觉主干网络和一个将特征与 LLM 的标记表示对齐的视觉-语言适配器组成。我们使用标准的 Vision Transformer（ViT-g）作为服务器模型，参数量为 10 亿；而用于设备端部署的更高效 ViTDet-L 主干网络参数量为 3 亿。为了进一步有效捕捉并整合局部细节和更广泛的全局上下文，我们在标准的 ViTDet 中添加了一个新颖的注册窗口（RW）机制，使得全局上下文和局部细节都能被有效捕捉。&lt;/p&gt; 
&lt;h2&gt;训练数据&lt;/h2&gt; 
&lt;p&gt;我们相信通过使用多样且高质量的数据来训练我们的模型。这包括我们从出版商处获得许可的数据、从公开可用或开源数据集精心整理的数据，以及由我们的网络爬虫 Applebot 爬取的公开信息。我们在训练基础模型时不会使用用户的私人个人数据或用户交互数据。此外，我们采取措施应用过滤器，以删除某些类别的人口识别信息，并排除粗俗和不安全的内容。&lt;/p&gt; 
&lt;p&gt;此外，我们继续遵循伦理网络爬虫的最佳实践，包括遵循广泛采用的 robots.txt 协议，允许网页发布者选择性地退出其内容被用于训练 Apple 的生成基础模型。网页发布者可以对 Applebot 可以查看的页面以及这些页面如何被使用进行精细控制，同时这些页面仍会出现在 Siri 和 Spotlight 的搜索结果中。&lt;/p&gt; 
&lt;h3&gt;文本数据&lt;/h3&gt; 
&lt;p&gt;尽管如上所述保留了某些排除项，我们继续从由 Applebot 抓取的网络内容中获取我们模型预训练数据的重要部分，这些内容涵盖了数百亿页的网页，涉及广泛的语言、地区和主题。鉴于网络内容的杂乱性，Applebot 采用了先进的抓取策略，以优先获取高质量和多样化的网页内容。特别是，我们专注于捕获高保真度的 HTML 页面，这些页面丰富了数据集，不仅包含文本，还包含结构化的元数据，以对媒体内容与周围文本内容进行对齐。为了提高相关性和质量，系统利用了多种信号，包括基于领域级别的语言识别、主题分布分析以及 URL 路径模式的启发式方法。&lt;/p&gt; 
&lt;p&gt;我们特别注重准确地从文档和现代网站中提取内容。我们通过无头渲染增强了文档集合，实现了全页加载、动态内容交互和 JavaScript 执行，这对于从网页架构中提取数据至关重要。对于依赖动态内容和用户交互的网站，我们启用了完整的页面加载和交互模拟，以可靠地从复杂页面中提取有意义的信息。我们还将在提取流程中整合大型语言模型（LLMs），尤其是在领域特定文档中，因为它们通常比传统基于规则的方法表现更佳。&lt;/p&gt; 
&lt;p&gt;除了先进的爬虫策略，我们还显著扩大了训练数据的规模和多样性，并纳入了大量高质量的通用领域、数学和编程内容。我们还扩展了多语言支持，以支持即将在今年下半年推出的新的语言。&lt;/p&gt; 
&lt;p&gt;我们认为高质量的过滤在整体模型性能中起着关键作用。我们通过减少对过于激进的启发式规则的依赖，并引入更多基于模型的过滤技术，优化了我们的数据过滤流程。通过引入基于模型的信号，我们能够保留更多具有信息量的内容，从而获得更大规模且质量更高的预训练数据集。&lt;/p&gt; 
&lt;h3&gt;图像数据&lt;/h3&gt; 
&lt;p&gt;为了增强我们的模型，并为 Apple Intelligence 功能提供视觉理解能力，我们将在预训练流程中引入图像数据，利用高质量的授权数据以及公开可用的图像数据。&lt;/p&gt; 
&lt;p&gt;使用我们的网页爬虫策略，我们获取了带有对应 alt 文本的图像对。除了过滤以确保符合法律要求外，我们还过滤了数据质量，包括图像与文本的一致性。去重后，这一过程产生了超过 100 亿对高质量的图像-文本对。此外，我们通过保留从爬取文档中原始观察到的文本上下文来创建图像-文本交错数据。在过滤质量和法律合规性后，这产生了 1.75 亿个交错的图像-文本文档，包含超过 5.5 亿张图像。由于网络爬取的图像-文本对通常较短，且往往无法全面描述图像的视觉细节，我们使用合成图像描述数据来提供更丰富的描述。我们开发了一个内部的图像描述模型，能够提供不同细节层次的高质量描述，从关键词到段落级的全面描述，生成了超过 50 亿个图像-描述对，这些数据被用于预训练的各个阶段。&lt;/p&gt; 
&lt;p&gt;为提高模型在文本丰富的视觉理解方面的能力，我们整理了多种文本丰富的数据集，包括通过授权数据、网络爬虫和内部合成方式获取的 PDF、文档、手稿、信息图、表格和图表。我们随后从图像数据中提取文本，并从图像数据中生成转录文本和问答对。&lt;/p&gt; 
&lt;p&gt;我们整理了多种图像-文本数据类型：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;高质量标题数据和基于语义的标题&lt;/strong&gt;：我们使用对比语言-图像预训练（CLIP）模型和光学字符识别（OCR）工具作为过滤器，从上述合成图像标题数据中获取高质量图像。然后，我们使用内部的定位模型对标题中的名词进行定位，并在名词后附加座标，形成基于语义的标题。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;表格、图表和图表&lt;/strong&gt;：对于图表和图表，我们首先让内部的 LLM 生成合成数据字段和相应的值，然后让 LLM 编写代码，根据之前合成的数据样本生成各种类型的图表和图表。最后，我们将图表、图表和数据样本输入教师模型，以生成用于模型训练的问答对。对于表格，我们从公开网站中解析表格并将其转换为 markdown，然后使用教师模型生成的图像-markdown 配对以及图像-合成问答对用于模型训练。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;预训练&lt;/h2&gt; 
&lt;p&gt;我们的预训练配方已演进，以扩展 Apple Intelligence 能力，支持更多语言以及更广泛的功能，包括需要图像理解的功能。&lt;/p&gt; 
&lt;p&gt;预训练在多个阶段进行，其中第一个且计算需求最高的阶段仅针对文本模态。我们使用蒸馏损失训练设备端模型，但没有采用大型密集模型作为教师模型并从头开始预训练，而是利用少量最高质量的文本数据，对一个预训练的约 3B 模型中的 64 个专家、每两层混合专家（MoE）进行稀疏升维处理。这将教师模型的训练成本降低了 90%。然而，我们从头开始在 14T 文本标记上训练了稀疏服务器模型。&lt;/p&gt; 
&lt;p&gt;为了更好地支持新语言，我们在这一阶段将文本分词器的词汇量从 10 万扩展到 15 万，仅用 25% 更多的标记，就实现了对许多额外语言的表示质量。为了实现视觉感知，我们使用 CLIP 风格的对比损失训练了设备端和服务器端的视觉编码器，对 60 亿张图像-文本对进行对齐，从而得到了具有良好视觉基础的编码器。&lt;/p&gt; 
&lt;p&gt;在预训练的第二阶段，我们使用一个小的解码器，将视觉编码器与一个视觉-语言适应模块联合训练，利用高质量文本数据、交错的图像-文本数据和领域特定的图像-文本数据，对图像特征与模型表示空间进行对齐。然后，我们利用这些视觉编码器和预训练模型，提升代码、数学、多语言、长上下文理解能力，并通过多个连续的预训练阶段融入图像理解。&lt;/p&gt; 
&lt;p&gt;在持续预训练阶段，我们调整了数据集的混合比例，同时结合经过验证正确的合成数据，以提升代码、数学和多语言能力。随后，我们通过多模态适应引入了视觉理解，而不会损害模型的文本能力。在此阶段，我们从头开始训练了一个视觉-语言适应模块，以连接视觉编码器到两个模型。在最终的持续预训练阶段，我们训练模型以处理显著更长的上下文长度，使用最多 65K 个标记的序列，这些序列来自自然发生的长格式数据、专门针对特定能力设计的合成长格式数据，以及之前预训练轮次中的混合数据。&lt;/p&gt; 
&lt;h2&gt;后训练&lt;/h2&gt; 
&lt;p&gt;与我们在预训练中的方法类似，我们演进我们的后训练流程，以支持语言扩展和视觉理解。&lt;/p&gt; 
&lt;p&gt;我们通过结合人工编写的数据示例和合成数据对监督微调（SFT）进行了扩展，重点提升核心视觉能力。这包括常识知识、推理、文本丰富的图像理解、文本与视觉定位，以及多图像推理。我们进一步通过检索额外图像并合成其对应的提示和响应，来增强视觉 SFT 数据的多样性。&lt;/p&gt; 
&lt;p&gt;我们利用这一 SFT 阶段进一步启用工具使用和多语言支持。我们设计了一种过程监督标注方法，其中标注人员向工具使用代理平台发起查询，返回平台的完整轨迹，包括工具调用细节、相应的执行响应以及最终响应。这使标注人员能够检查模型的预测并纠正错误，从而生成一个树状结构的数据集用于教学。为了扩展到更多语言，我们默认将输出语言与输入语言匹配，但我们也通过创建一个包含多种语言的多样化数据集，启用了提示和响应使用不同语言的选项。&lt;/p&gt; 
&lt;p&gt;我们在 SFT 阶段之后，对设备端模型和服务器端模型均应用了基于人类反馈的强化学习（RLHF）。同时，我们提出了一种基于模型多轮生成奖励方差的新型提示选择算法，用于为 RLHF 训练定制提示数据集。我们的评估结果显示，RLHF 在人类和自动基准测试中均带来了显著提升。此外，尽管我们在 SFT 和 RLHF 阶段均引入了多语言数据，但我们发现 RLHF 在 SFT 基础上提供了显著提升，导致人类评估中的胜败比达到 16:9。&lt;/p&gt; 
&lt;p&gt;为继续提升模型在多语言性能上的质量，我们使用了指令遵循评估（IFEval）和 Alpaca Evals，并以 GPT-4o 作为评判者。我们收集了每种支持语言中由母语者撰写的 1000 个提示。通过仔细的提示微调，我们实现了自动评估与人类评估之间的良好对齐，从而加快了迭代速度。&lt;/p&gt; 
&lt;h2&gt;优化&lt;/h2&gt; 
&lt;p&gt;在过去一年中，我们扩展了 Apple Intelligence 的功能，并在提高推理效率、减少设备端和服务器端模型的功耗的同时，提升了模型的质量。&lt;/p&gt; 
&lt;p&gt;我们使用量化感知训练（QAT）将设备端模型压缩到每权重 2 位（bpw），采用了一种新颖的可学习权重裁剪和权重初始化组合。服务器端模型则使用了一种基于块的纹理压缩方法，称为自适应可扩展纹理压缩（ASTC）。虽然 ASTC 最初是为图形管线开发的，但我们发现它在模型压缩方面也非常有效。ASTC 解压过程在 Apple GPU 中实现了专用硬件组件，使权重解码无需引入额外的计算开销。&lt;/p&gt; 
&lt;p&gt;对于两种模型，我们对嵌入表进行了 4 位量化——对于设备端模型，使用 QAT 与基础权重联合训练；而对于服务器端模型，则使用后训练量化。键值缓存（KV cache）每个权重量化为 8 位。然后，我们使用额外的数据训练低秩适配器，以恢复由于这些压缩步骤而损失的质量。通过这些技术，我们观察到一些轻微的质量退化，甚至有微小的提升，例如，对于设备端模型，在&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2210.03057" target="_blank"&gt;MGSM&lt;/a&gt;上出现了约 4.6% 的退化，在&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2009.03300" target="_blank"&gt;MMLU&lt;/a&gt;上提升了 1.5%；而对于服务器端模型，在 MGSM 上退化了 2.7%，在 MMLU 上退化了 2.3%。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0610/144031_zIWy_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;表 1. On-Device 和 Server 基础模型的压缩和比特率。&lt;/p&gt; 
&lt;h2&gt;基础模型框架&lt;/h2&gt; 
&lt;p&gt;新的基础模型框架为开发者提供了访问权限，使他们能够使用搭载在设备上的约 30 亿参数语言模型，开始创建自己可靠、适用于生产的生成式 AI 功能。Apple Intelligence 核心的约 30 亿参数语言基础模型在多种文本任务上表现出色，例如摘要、实体提取、文本理解、细化、简短对话、生成创意内容等。它并非设计成一个用于一般世界知识的聊天机器人。我们鼓励应用开发者使用此框架来构建有助于他们应用的特色功能。&lt;/p&gt; 
&lt;p&gt;我们框架的亮点是一种直观的 Swift 方法，用于受限解码，称为引导生成。通过引导生成，开发者可以直接使用丰富的 Swift 数据结构，只需在 Swift 结构体或枚举上添加一个&lt;code&gt;@Generable&lt;/code&gt;宏注解。这之所以可行，是因为与模型、操作系统和 Swift 编程语言的垂直集成。它始于 Swift 编译器宏，这些宏将开发者定义的类型转换为标准化的输出格式规范。在提示模型时，框架会将响应格式注入提示中，而模型能够理解并遵守该格式，因为其在专门设计的引导生成规范数据集上进行了后训练。接下来，一个操作系统守护进程采用高度优化且互补的受限解码和推测解码实现，以提高推理速度，同时确保模型的输出符合预期格式。基于这些保证，框架能够可靠地从模型输出创建 Swift 类型的实例。这通过让应用开发者编写更简单的代码，而这些代码又由 Swift 类型系统支持，从而简化了开发者的体验。&lt;/p&gt; 
&lt;p&gt;工具调用为开发者提供了定制 ~3B 模型能力的权力，通过创建提供模型特定信息源或服务的工具来实现。&lt;/p&gt; 
&lt;p&gt;框架对工具调用的处理方式基于引导生成。开发者提供简单的 Tool Swift 协议实现，框架会自动且最优地处理并行和串行工具调用可能带来的复杂调用图。模型在工具使用数据上的微调提高了该框架功能的可靠性。&lt;/p&gt; 
&lt;p&gt;我们精心设计了该框架，以帮助应用开发者充分利用设备上的模型。对于需要教会约 3B 模型完全新技能的专用应用场景，我们还提供了一个 Python 工具包，用于训练排名 32 的适配器。由该工具包生成的适配器与基础模型框架完全兼容。然而，适配器必须随着基础模型的新版本重新训练，因此在彻底探索基础模型能力之后，才应在高级应用场景中考虑部署一个适配器。&lt;/p&gt; 
&lt;h2&gt;评估&lt;/h2&gt; 
&lt;p&gt;我们使用人类评估者对我们的设备端和服务器端模型进行了离线质量评估。我们评估了标准的基本语言和推理能力，包括分析推理、头脑风暴、聊天、分类、封闭式问题和回答、编码、创意写作、提取、数学推理、开放式问题和回答、改写、摘要以及工具使用。&lt;/p&gt; 
&lt;p&gt;随着我们模型支持的语言和区域的扩展，我们也扩展了评估任务集，使其具有区域特定性。人类评分者评估模型生成的响应是否听起来符合该区域用户的母语。例如，当一个模型回应来自英国用户的一个英语体育问题时，预期该模型知道「足球」比「足球」更符合当地习惯用语。评分者可以针对模型响应中的多种问题进行标记，包括不当地域化的术语或不自然的短语。区域特定的评估使用了与英语美国区域类似的分类，只是排除了像数学和编程这样的技术领域，这些领域大多本质上是地域无关的。&lt;/p&gt; 
&lt;p&gt;我们发现，我们的设备端模型在所有语言中均表现良好，优于稍大的 Qwen-2.5-3B 模型，并在英语中与较大的 Qwen-3-4B 和 Gemma-3-4B 模型具有竞争力。我们的服务器端模型在与 Llama-4-Scout 模型的对比中表现良好，Llama-4-Scout 的总大小和活跃参数数量与我们的服务器模型相当，但落后于较大的模型，如 Qwen-3-235B 和专有版本的 GPT-4o。&lt;/p&gt; 
&lt;h3&gt;文本响应的人类评估&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0610/144120_VNv0_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;图 3：在将 Apple 的基准模型与公开可访问模型进行并列评估时，文本响应中被首选的响应比例。结果按 3 个地区组呈现，这是我们观察 Apple Intelligence 国际化方式的一种视角。例如，英语（非美国）包括英国英语、加拿大英语等其他语言。PFIGSCJK 指的是葡萄牙语、法语、意大利语、德语、西班牙语、简体中文、日语和韩语。&lt;/p&gt; 
&lt;p&gt;随着我们的模型支持扩展到图像模态，使用了图像-问题对的评估集来评估图像理解能力。该评估集包含与文本评估集相似的类别，以及图像特定的类别，如信息图，这些类别挑战模型对文本丰富的图像进行推理。我们比较了设备端模型与类似规模的视觉模型，即 InternVL-2.5-4B、Qwen-2.5-VL-3B-Instruct 和 Gemma-3-4B，并将我们的服务器模型与 Llama-4-Scout、Qwen-2.5-VL-32B 和 GPT–4o 进行比较。我们发现，苹果的设备端模型在与较大的 InternVL 和 Qwen 相比时表现良好，在与 Gemma 竞争时也表现出竞争力，而我们的服务器模型在推理 FLOPS 仅为一半的情况下，优于 Qwen-2.5-VL，但落后于 Llama-4-Scout 和 GPT–4o。&lt;/p&gt; 
&lt;h3&gt;图像响应的人类评估&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0610/144211_J6Df_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;图 4：在将苹果基础模型与可比模型进行图像响应并列评估时，首选响应的比例。&lt;/p&gt; 
&lt;p&gt;除了评估基础模型的通用能力外，还对适配器进行了特征特定的评估。例如，考虑基于适配器的视觉智能功能，该功能可以从传单的图片中创建日历事件。收集了一组覆盖广泛环境设置、相机角度和其他挑战性场景的传单作为评估集。该集用于评估模型准确从传单中提取信息（包括日期和地点）以正确创建日历事件的能力。&lt;/p&gt; 
&lt;h2&gt;负责任的人工智能&lt;/h2&gt; 
&lt;p&gt;Apple Intelligence 是在每一步都基于我们的 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Finvestor.apple.com%2Four_values%2F" target="_blank"&gt;核心价值观&lt;/a&gt; 设计，并建立在行业领先的隐私保护基础之上。此外，我们还制定了我们的负责任的人工智能原则，以指导我们如何开发人工智能工具，以及支撑这些工具的模型。这些原则体现在使 Apple Intelligence 成为可能的架构的每一个阶段，并连接了功能和工具与专用模型：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;通过智能工具赋能用户：&lt;/strong&gt; 我们识别 AI 可以负责任地用于满足特定用户需求的领域，并创建相应的工具。我们尊重用户如何选择使用这些工具来实现他们的目标。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;代表我们的用户：&lt;/strong&gt; 我们打造深度个性化的产品，目标是真实地代表全球的用户。我们持续努力避免在我们的 AI 工具和模型中延续刻板印象和系统性偏见。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;精心设计：&lt;/strong&gt; 在我们的整个流程中，包括设计、模型训练、特征开发和质量评估等阶段，我们都会采取预防措施，以识别我们的 AI 工具可能被误用或导致潜在危害的方式。我们将通过用户反馈持续监控并主动改进我们的 AI 工具。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;保护隐私：&lt;/strong&gt; 我们通过强大的设备端处理和突破性的基础设施，如私有云计算，来保护用户的隐私。我们在训练基础模型时，不会使用用户的私人个人数据或用户交互数据。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;这些原则指导我们在产品开发周期中的各项工作，影响我们的产品设计、政策、评估和缓解措施。作为苹果对负责任 AI 的承诺的一部分，我们继续识别并缓解使用基础模型固有的风险，例如幻觉和对提示注入的易受性。我们的安全分类法帮助我们识别需要谨慎处理的敏感内容。&lt;/p&gt; 
&lt;p&gt;为评估 Apple Intelligence 的安全性，我们在部署之前评估了基础模型以及每个使用这些模型的功能。对于基础模型，我们结合了内部和外部的人类评估与自动评分，并将我们的模型与外部模型进行比较以进行基准测试。我们构建了针对性的安全性评估数据集，以评估基础模型在摘要、问答和头脑风暴等任务上的表现，特别是在处理高风险和敏感内容时的表现。对于各个功能，我们设计了专注于用户面对风险的数据集，以专门识别不想要或未预期的结果，以及测试质量问题在应用于敏感的特定应用程序内容时可能产生的影响。例如，我们在设计新的基础模型框架和支持资源时特别谨慎，以帮助提高应用程序中生成式 AI 的安全性。该框架通过内置的安全防护措施来确保基本的安全性，以减轻有害的模型输入和输出。为了帮助应用程序设计师和开发者将适合他们应用程序的 AI 安全性纳入考虑，我们创建了教育资料，例如新的 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.apple.com%2Fdesign%2Fhuman-interface-guidelines%2Fgenerative-ai" target="_blank"&gt;生成式 AI 人机界面指南&lt;/a&gt; 以指导负责任的 AI 原则。&lt;/p&gt; 
&lt;p&gt;随着我们向新语言扩展功能，我们也在不同地区和文化中扩展了安全表示，并持续改进以适应我们用户广泛的文化和语言多样性。除了遵守当地的法律和法规外，我们还结合了高质量的外部代表性数据源，与内部和外部的法律、语言和文化专家合作，并审查了以往产品决策的先例，以确保我们的方法在语境中是尊重且相关的。为了设计多语言使用的缓解措施，我们从基础模型层面的多语言预训练对齐开始，然后扩展到针对特定功能的适配器，这些适配器整合了安全对齐数据。此外，我们扩展了我们的防护模型，这些模型旨在拦截有害提示，并在保持多语言适配器的同时，使用语言特定的训练数据。我们还开发了定制数据集，以缓解模型输出中的文化特定风险和偏见及刻板印象。同样，我们通过机器翻译和定向合成数据生成等工具，将我们的评估数据集扩展到多种语言和地域，并由母语者进行完善。最后，我们在各个功能上进行了人工红队测试，以识别每个地区特有的风险。&lt;/p&gt; 
&lt;p&gt;我们持续监控并主动改进我们的功能，借助用户反馈。例如，在图像游乐场中，用户可以通过点击「点赞」或「踩踏」来对生成的图像提供反馈，还可以添加评论。应用程序开发者也可以通过&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.apple.com%2Fbug-reporting%2F" target="_blank"&gt;反馈助手&lt;/a&gt; 提供反馈。来自用户和开发者的反馈，以及评估数据和其他指标，帮助我们持续改进 Apple Intelligence 功能和模型。&lt;/p&gt; 
&lt;h2&gt;结论&lt;/h2&gt; 
&lt;p&gt;我们非常兴奋地使 Apple Intelligence 核心语言基础模型更加高效和强大，从而解锁一系列集成在我们软件平台中的有用功能，并为全球众多语言的用户带来这些功能。我们还为应用开发者提供了直接访问我们设备上的语言基础模型的新 Foundation Models 框架。应用开发者可以利用无需成本的 AI 推理功能，仅通过几行代码即可实现，从而通过几行代码将文本提取和摘要等能力带入他们的应用中。我们的最新基础模型在每一步都体现了我们的核心价值观，例如我们对隐私的承诺，以及我们的负责任 AI 方法。我们期待在未来的技术报告中分享有关我们语言基础模型更新的更多细节。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354610/apple-foundation-models-2025-updates</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354610/apple-foundation-models-2025-updates</guid>
      <pubDate>Tue, 10 Jun 2025 06:43:12 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>美团王兴详解 AI 布局：No Code 平台免费开放，1680 个应用已上线</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在近日于北京美团总部恒电大厦举行的股东大会上，美团创始人王兴&lt;span&gt;首次&lt;/span&gt;系统阐述了公司在人工智能领域的战略布局和发展规划，揭示了美团在 AI 浪潮中的深度思考与大胆实践。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;王兴将美团的 AI 发展划分为不同阶段。早期，公司已在外卖配送的路由和派单系统中应用深度神经网络算法。当前阶段则聚焦于大语言模型及其衍生应用的开发与部署。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;面对 AI 领域的激烈竞争，美团在过去近三年时间里进行了大规模投入。王兴坦言，硬件投入尤其巨大，"卡是很贵的，而且还不好买，机房也得提早准备"。在人才争夺方面，由于&lt;span&gt;顶级&lt;/span&gt;AI 人才极度稀缺，薪酬水平被推至新高，人才获取和保留成为重大挑战。&lt;/p&gt; 
&lt;p style="margin-left:0px; margin-right:0px; text-align:left"&gt;&lt;strong&gt;No Code 革命：让非程序员也能编程&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;美团 AI 应用的一大亮点是内部研发的 No Code 平台。该平台让公司两万多名研发人员，包括产品经理、UI 设计师、商业分析师甚至 HR 和财务人员，都能通过 AI 辅助完成编程工作。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;王兴强调，No Code 的核心价值在于实现"0 到 1"的突破，让原本不擅长编程的员工也能独立开发应用。"只要他有想法，AI 能自动帮他生成代码"，这大幅提升了团队整体的创新能力和工作效率。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;目前，美团已将 No Code 平台免费向公众开放，平台上已有 1680 个应用正式发布并可免费使用。&lt;/p&gt; 
&lt;p style="margin-left:0px; margin-right:0px; text-align:left"&gt;&lt;strong&gt;理性看待 AI 发展周期：短期高估，长期低估&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;对于 AI 技术的发展前景，王兴指出，人们往往"容易高估一、两年能够发生的变化，但是低估十年发生变化"。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;王兴认为，尽管 ChatGPT 发布至今已两年半，AI 虽取得显著进展，但相比早年智能手机的革命性影响，还未从根本上改变人们的生活方式。然而，从十年维度看，AI 将带来翻天覆地的变化。&lt;/p&gt; 
&lt;p style="margin-left:0px; margin-right:0px; text-align:left"&gt;&lt;strong&gt;财务考量：短期承压，长期受益&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;谈及 AI 投入对公司财务表现的影响，王兴明确表示，AI 巨额投入在短期内"不见得那么正向"，需要股东保持耐心。但从长期视角，他坚信科技力量最终能提升生产力，更好地服务于美团"帮大家吃得更好，生活得更好"的使命。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354604</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354604</guid>
      <pubDate>Sun, 11 May 2025 06:26:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>全球首个 AI 芯片设计系统发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;全球首个基于人工智能技术的处理器芯片软硬件全自动设计系统「启蒙」近日正式发布。该系统能实现从芯片硬件到基础软件的全流程自动化设计，意味着实现 AI 设计芯片，而且其设计在多项关键指标上达到人类专家手工设计水平。相关研究成果近日发布于预印本网站 arXiv。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img alt="" height="288" src="https://oscimg.oschina.net/oscnet/up-db5d4d90ec1bfadbda426806d4a67345e79.webp" width="300" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;span style="color:#000000"&gt;「启蒙 1 号」实物。图片来自相关公开论文&lt;/span&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在 CPU 自动设计方面，利用「启蒙」系统实现国际首个全自动化设计的 CPU 芯片「启蒙 1 号」，5 小时内完成 32 位 RISC-V CPU 的全部前端设计，性能达到 Intel 486 水平，规模超过 400 万个逻辑门，目前已完成流片。其升级版「启蒙 2 号」为国际首个全自动设计的超标量处理器核，性能达到 ARM Cortex A53 水平，规模扩大至 1700 万个逻辑门。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;这项研究有望改变处理器芯片软硬件的设计范式。它不仅能显著减少人工参与、提升设计效率、缩短设计周期，更能针对特定应用场景需求实现快速定制化设计，灵活满足日益多样化的芯片设计需求。&lt;/span&gt;（&lt;span style="color:#000000"&gt;科技日报&lt;/span&gt;）&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354601</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354601</guid>
      <pubDate>Sun, 11 May 2025 06:14:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Linux 基金会推出 FAIR 包管理器项目，打造去中心化 WordPress 生态</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Linux 基金会上周&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linuxfoundation.org%2Fpress%2Flinux-foundation-announces-the-fair-package-manager-project-for-open-source-content-management-system-stability" target="_blank"&gt;宣布&lt;/a&gt;&lt;/u&gt;推出 FAIR 包管理器项目，旨在打造一个去中心化的 WordPress 插件与主题生态系统，该项目意图将控制权归还给网站托管服务商和开发者，被业界广泛认为是回应 WP Engine 争议事件的一项延伸举措。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-9818ada8ca862301eb4dd9cf16b05bbd370.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;WordPress 联合创始人 Matthew Mullenweg 去年对竞争对手 WP Engine 发动了攻击，引发了一场至今尚未解决的诉讼。期间他还通过其控制的 WordPress.org 开源项目劫持了 WP Engine 的插件。&lt;/p&gt; 
&lt;p&gt;用于分发 WordPress 插件的 FAIR 包管理器项目试图解决这一问题，它将确保 WordPress 插件不受任何一方的控制。它是中心化 WordPress.org 插件和主题生态系统的去中心化替代，旨在将控制权交还给 WordPress 托管者和开发商。它采用了联邦式开源架构。&lt;/p&gt; 
&lt;h3&gt;FAIR 项目目标&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;去中心化&lt;/strong&gt; ：消除对任何单一来源核心更新、插件、主题和翻译的依赖，实现跨生态系统的联邦化，整合来自任何来源的插件，构建更强大的开源软件供应链。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;增强安全性&lt;/strong&gt; ：减少发送给商业实体的自动浏览器数据传输和遥测数据，促进 WordPress 与欧洲通用数据保护条例的一致性，同时支持现代安全实践，建立供应链安全，包括改进加密安全措施、增强浏览器兼容性检查等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;促进创新与协作&lt;/strong&gt; ：通过提供更多的选项来控制所依赖的工具，促进商业插件开发者、托管商和应用开发者之间的创新，鼓励各方参与贡献，推动 WordPress 生态系统的整体发展。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;FAIR 功能和特点&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;即插即用&lt;/strong&gt; ：FAIR 套件管理器可以作为一个即插即用型 WordPress 插件使用，能够平滑替换现有依赖 &lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2FWordPress.org" target="_blank"&gt;WordPress.org&lt;/a&gt; API 的集中式服务架构。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;多种部署方式&lt;/strong&gt; ：托管服务商可通过提供可直接安装在现有 WordPress 站点上的独立插件，或通过 FAIR 官方发行版实现网站的自动部署这两种方式来部署 FAIR 系统。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;增强隐私保护&lt;/strong&gt; ：通过减少不必要的数据传输，提升用户隐私保护水平。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;关于 FAIR 项目的详情，访问 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffairpm" target="_blank"&gt;https://github.com/fairpm&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354583/lf-announces-the-fair-package-manager-project</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354583/lf-announces-the-fair-package-manager-project</guid>
      <pubDate>Sun, 11 May 2025 04:03:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>ChatGPT 业绩狂飙，年收入首次突破百亿大关</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在短短三年的时间里，美国人工智能研究公司 OpenAI 凭借其热门聊天机器人 ChatGPT，实现了令人瞩目的业绩，年化经常性收入（ARR）已突破 100 亿美元大关。根据&lt;span&gt;最新&lt;/span&gt;数据显示，OpenAI 的 ARR 去年为约 55 亿美元，这意味着今年增长近 80%。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;ARR 是企业从订阅服务或产品中获得的预期年度收入，尤其适用于评估那些基于订阅模式（如 SaaS 服务）的企业，因为它能反映出企业从现有客户那里获得的稳定和周期性收入。OpenAI 的发言人透露，这一数据不仅包含了消费者产品和 ChatGPT 商业版本的收入，还涵盖了 API 的销售，但并不包括与微软的授权收入和其他大额交易。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="316" src="https://oscimg.oschina.net/oscnet/up-6a5ee1c98aeae2080e11f341b57ef05b7f1.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;此外，OpenAI 目前已拥有 300 万付费商业用户，比 2 月份的 200 万大幅增加。分析人士认为，这一用户增长也为 OpenAI 的高估值提供了支持。目前，OpenAI 的估值大约是其收入的 30 倍，这显示出其投资者对公司未来增长的乐观预期。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;今年 3 月，OpenAI 完成了一轮高达 400 亿美元的融资，这也成为了有史以来&lt;span&gt;最大&lt;/span&gt;的私营科技融资案。值得一提的是，日本软银集团已经取代微软，成为 OpenAI 的&lt;span&gt;第一&lt;/span&gt;大投资者。尽管如此，OpenAI 的首席执行官 Sam Altman 仍强调，微软将继续为其提供强大的计算资源，两者的合作关系依旧稳固。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在技术合作方面，苹果公司在最近的 WWDC 大会上宣布，将把 OpenAI 的图像生成功能整合到自家的 Image Playground 功能中，ChatGPT 将帮助用户进行图像调整。这一举措将进一步推动 OpenAI 的技术在日常生活中的应用。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;尽管 OpenAI 在盈利能力上仍面临挑战，去年其亏损达到约 50 亿美元，但公司设定的目标是在 2029 年实现年收入 1250 亿美元。这需要更多的资金支持与市场扩展，才能实现这一惊人的增长速度。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354580</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354580</guid>
      <pubDate>Sun, 11 May 2025 03:44:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>在零售技术做 AI 的 95 后：我们这样搞定技术难题</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//247a59458ebef2dc06a95ca9f37d70cf.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在京东零售技术团队中，有很多年轻的算法工程师，他们大多是 95 后，在加入京东的短短几年内，用实力「啃」下了一个个硬骨头。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;从大模型训练的效率优化、生成效果的极致调优，到算法落地的工程难题、业务场景的创新应用，他们用行动证明——&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;做难而正确的事，才是技术人最快的成长路径&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;每个技术突破的背后，是数百次实验的坚持，是推翻重来的勇气，更是对技术极致的追求。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一起看看这群技术年轻人解决技术难题的故事。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//6dee54f0cc28c36ae7b16ec9369cc295.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;技术难题：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;判断广告图片合不合格就像评价"这幅画美不美"，涉及大量主观标准，人类一眼能看出的商品变形、错位等问题，AI 评委经常"看不懂"。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;现有的奖励模型给出的决策常常无法精准指导 AI 调整，如何让 AI 像人类一样精准理解图片中复杂的审美和商业要求，并给出具体改进方向的评判指引？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我的解题思路：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;拿到这道题时，我在思考：是否可以用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;多个奖励小模型的组合&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;来替代单一奖励大模型呢？让每个小模型专注评判图片的某一类问题，如商品形状、摆放位置、色彩搭配等，降低单一模型的学习难度，同时提升评判的精细度；另一方面多奖励模型意味着更灵活的业务规则嵌入和更丰富的模型组合方式，提高了奖励信号质量的上限。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我和团队一起完成了一套&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;基于人类反馈的可信赖广告图像生成的训练和推理框架&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，这个框架的运作流程可以分为训练阶段和推理阶段。训练阶段，生成模型根据商品透底图产出广告图后，由多个专注细分任务的小奖励模型生成多维质量信号，通过强化学习微调生成模型，使其逐步修正问题；在推理阶段，生成模型输出的广告图经同一组奖励模型联合决策，自动判断生成的广告图能否直接上线，无需人工审核。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基于这套框架，生成图片可用率 98% 的情况下，召回率提升了近 30%，可以高效、批量化制作商品的 AIGC 广告图片。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//1b620ee41b6908acac897ed07cf162d7.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我的成长笔记：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;成长的最佳途径在于不断反思和覆盘。在每次项目结束后，我都会总结成功的经验和需要改进的地方，将这些经验和教训形成可复用的方法论，不仅帮助自己成长，也能帮助团队中的其他成员提高工作效率。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;入职前我的研究方向并非图像生成，而是图像分割、目标检测等任务。虽然应用的算法有差异，但是同为深度学习相关任务，提升模型性能时的优化思路、训练技巧乃至模块实现方式都有很多共通之处，其技术迭代的方向和角度，也往往能带给我很多启发，跨领域的知识迁移，往往能碰撞出意想不到的创新火花。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//06ce8d2472ca178ef096bf9820d05bb3.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;技术难题：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;query 扩展是一种有助于缩小用户搜索词与商品描述之间差距的好方法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;想象一下，你在京东 APP 搜索"养生神器"，理想情况下希望出现保温杯、颈椎按摩仪等商品，但传统的神经网络机器翻译模型在遇到新颖的用户搜索意图时，可能无法生成有效的扩展 query，无法召回很多相关商品。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如何突破传统 query 扩展的局限性，让 AI 学会举一反三，让搜索引擎召回更多相关且优质的商品？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我的解题思路：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#820014"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;大模型的盛行启发了我和团队，query 扩展本身就可以是一个生成任务，而大模型的大参数量又可以提升泛化性，正好可以解决我们所遇到的问题。同时，InstructGPT 论文中提出的利用 PPO 提升 LLM 效果的思路，不仅能够克服传统「死记硬背」训练数据的问题，还能让模型在实际应用中更加灵活和智能，就这样，我们坚定了大模型+强化学习的技术路线。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基于这一思路，我和团队研究了一种&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;基于大语言模型的 query 扩展框架&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，该框架分为三个训练阶段：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;电商领域的预训练、任务驱动的微调和基于搜索引擎的强化学习&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;首先，我们利用消费者行为数据和京东商品数据对 LLM 进行预训练，这一阶段为大模型装备了一个强大的「知识库」，让它具备深入理解电商领域知识和用户购物行为的能力。接下来，基于搜索日志筛选出高质量的 query 扩展数据，对模型进行了任务驱动的微调，在大模型已经具备电商知识的基础上，打磨模型在 query 扩展特定任务上的效果，让模型能更准确理解用户的搜索意图。最后，利用强化学习进一步优化模型的目标对齐，通过模拟离线搜索引擎，设计了多粒度的奖励函数，优化扩展 query 所检索到的相关产品数量，在线实验的转化率提升也证明了我们方案的有效性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//6c3dc35d14b2b08765e9fd3026c3e99c.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我的成长笔记： &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;面对技术难题时，我认为最有效的方法是通过分析具体案例 Case 来准确定位问题所在，并通过实验来验证不同的解决方案。这种方法不仅能够帮助我们深入理解问题的本质，还能确保选择的解决方案是最优的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;另外，我还会定期看顶会 paper、跟踪开源社区动态进行技术积累，在面对问题时能更快定位问题，高效提出解法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//561bfb1ed561c0948b3fd3ed52d8bac6.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;技术难题：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;优化京东商家智能助手的过程就像教一个实习生处理问题，传统方法（监督学习）就像让资深客服手把手教他每句话该怎么回。虽然能保证基本合格，但这个实习生永远无法超越师傅的水平，遇到新问题就束手无策。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如何通过有效的指导和激励，帮助这位「实习生」不断提升技能，在「教练」的指导下，突破人类经验的限制，实现自我进化？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我的解题思路：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在大模型训练过程中，如果仅基于传统监督微调手段，模型效果会以人类标签为上限，而我们的目标是助力模型从人类指导转向 AI 自我引导、进一步优化模型效果。于是我转向强化学习，对比了两种方案：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、类似 DPO 的隐式奖励方案，像是给学生树立正面榜样和反面典型，让他自行学习优点、规避错误。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、类似 RLHF 的显式奖励方案，像是先通过一系列答案和对应分数告诉教练如何打分，再由教练实时训练。这个方法效果更稳定，但训练资源消耗更大、同时十分依赖「教练」的质量。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如何培养这个高质量教练呢？我设计了一套&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Agent 全链路评估技术&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，针对不同类型问题给出不同评分标准，保障局部与端到端两类视角的评估。对明确答案的问题直接判对错，并检查对应的思考过程；对开放性问题则用 AI 来评分。评估时区分模型生成质量与环境反馈结果，例如：当 Agent 正确调用 API 却因外部故障失败时，系统会给出高思维分+低环境分。通过区分"AI 想对了但执行出错"和"AI 本身就想错了"的情况，精准定位问题来源，为后续优化指明方向。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;现在，京东商家助手就像有个"AI 教练团"，边服务边进化。用算法解决算法的问题，正是技术最迷人的地方。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//7e58340baf3718aa55430cd75ec36eb4.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我的成长笔记：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;技术突破往往需要跳出常规思维，即使是「看似不可能」的任务也都是从实际应用场景中提炼出来的，一定存在合理性与可实现的底层逻辑。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在解决技术问题时，我首先会进行问题的框架梳理与模块拆解，明确顶层设计，然后逐步细化到具体的实施要点。首先确认要达成的目标，识别核心难点，分析技术要点是否已掌握或需要学习，此外还要寻找业界案例或替代方案，以及评估团队协作需求等。通过将问题具体化，找到解决方案，即使遇到无法完成的任务，也能提供清晰的调研结论。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//e27df1c43f411f7ad0f2b19d84843f8c.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;技术难题：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;文生图大模型能够根据文本生成高质量图像的能力而备受青睐。然而这些模型往往有巨大的参数量，在电商场景下会占用大量算力资源且推理速度较慢。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如何精准识别并裁剪模型中的冗余部分，同时确保模型性能不受影响呢？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这一过程就像「修剪花园」，识别珍贵的花卉与徒耗养分的杂草，让花园重焕生机。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我的解题思路：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在模型优化过程中，我发现通过&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;FFT（快速傅里叶变换）技术&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;进行频域分析，就像使用了显微镜来观察，更直接地捕获模型冗余和有效特征的差异。具体来说，低频和高频的图片特征在频域上的输出会有明显的变化，这意味着可以利用 FFT 技术来定位模型中的冗余部分。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;然而，仅仅依靠频域分析还存在一个难题：很难确定一个明确的阈值来有效冗余和有效特征。为此我还引入了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;RDP 算法（迭代端点拟合算法）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，这就像是一种高级的探测仪器，能够自动识别频谱变化趋势中的关键拐点。结合这两种方法，我成功定位并移除了模型中的冗余部分。结果实验显示，模型训练吞吐量提升了 40%，性能效率显著提升。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这一成果不仅证明了创新方法的有效性，也是我首次在工业级项目中将基础算法理论创新与实际应用完美结合，通过技术探索，成功解决了复杂的工程问题，积累了宝贵的经验。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;分享一段这个项目中重要的一段代码：通过递归的方式拟合频谱曲线，在误差尽可能小的情况下，找到频谱曲线中最重要的点，这些点即为 transformer 中的有效 block。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;rdp&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;points&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; epsilon&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"""
    Ramer-Douglas-Peucker 算法，用于曲线简化。
    points: 曲线上的点序列
    epsilon: 简化容差，越大简化越多
    """&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;perpendicular_distance&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;pt&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; line_start&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; line_end&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;# 计算点 pt 到线段 (line_start, line_end) 的垂直距离&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; np&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;array_equal&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;line_start&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; line_end&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; np&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;linalg&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;norm&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;pt &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; line_start&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; np&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;abs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;np&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;cross&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;line_end &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; line_start&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; line_start &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; pt&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; np&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;linalg&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;norm&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;line_end &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; line_start&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;rdp_recursion&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;points&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; epsilon&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;# 递归执行 RDP 算法，找出距离最远的点&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        dmax &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        index &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        end &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;len&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;points&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;in&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;range&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; end &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            d &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; perpendicular_distance&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;points&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; points&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; points&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; d &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; dmax&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                index &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; i
                dmax &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; d
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;# 若最远距离大于容差 epsilon，继续分割曲线&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; dmax &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; epsilon&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            results1 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; rdp_recursion&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;points&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;index&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; epsilon&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            results2 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; rdp_recursion&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;points&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;index&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; epsilon&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; results1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; results2
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;# 距离小于容差，直接简化成端点&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;points&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; points&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; rdp_recursion&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;points&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; epsilon&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我的成长笔记：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;AIGC 与大模型的快速演进，技术更新速度加快，对算法工程师提出从单纯研发走向落地应用与创新融合的更高要求。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;面对快速变化的时代和复杂的业务，我会主动追踪前沿进展，跟进顶会、开源社区的动态，保持对领域趋势的敏锐性，同时提升的跨领域技能与知识，深入理解用户需求与市场趋势，结合算法能力提供真正有商业价值的方案，掌握良好的代码工程实践、持续集成和自动化部署，提高算法从实验到生产的效率。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//787ecd148fa56064da92dd38e2da6744.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;技术难题：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在智能导购场景中，用户常提出包含具体场景参数的需求，如"我家的桌子长 130cm，宽 60cm，推荐一个大小合适的置物架"。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如何让大模型准确理解用户需求，并将其精准映射到商品库的结构化参数？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我的解题思路：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这一技术难点在于语义复杂性和商品描述与用户需求的精准匹配，一方面需要理解用户语言中的隐含条件，比如「大小合适"需转换为"长度≤130cm 且宽度≤60cm」，另一方面要准确匹配商品库的结构化参数，如货架尺寸、承重等，这需要突破语义理解、多意图混杂等难题。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;过程中，我进行了模型训练，使用通用强化学习方法提升语义理解能力，通过数据闭环持续优化用户意图识别。并筛选高质量数据训练模型，确保处理新需求时仍保持高准确率。此外，我还将京言的多个模型整合成一个统一的系统，每个功能对应一个独立的代理。通过让单个智能体处理多种任务，在需要时进行人工干预，进一步提升大模型的效果，确保系统既高效又灵活，能够更好地服务于用户。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通过&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;大模型语义推理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;多轮对话引导用户&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;完善需求，将技术参数转化为用户语言，结合电商知识，动态生成易懂的解释。京言上线以来，活跃用户平均对话次数增加，购买转化率持续攀升，实现了"越用越懂你"的智能导购体验。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这是我在进行多任务训练的时候，通过探针观察模型训练状态：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;get_token_prob&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;prompt&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; target_token&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;# 编码输入并定位预测位置&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    inputs &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; tokenizer&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;prompt&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; return_tensors&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"pt"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    input_ids &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; inputs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;input_ids
    target_len &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;len&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;tokenizer&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;encode&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;target_token&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; add_special_tokens&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;False&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;# 获取模型输出 logits&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;with&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; torch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;no_grad&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        outputs &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; model&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;**&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;inputs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    next_token_logits &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; outputs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;logits&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;# 取最后一个位置的预测&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;# 转换概率分布&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    probs &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; F&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;softmax&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;next_token_logits&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; dim&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;# 获取目标 token 的 id（处理多 token 情况）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    target_ids &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; tokenizer&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;encode&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;target_token&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; add_special_tokens&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;False&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;# 返回改 token 的概率&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; probs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; target_ids&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;item&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我的成长笔记：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在模型训练过程中，数据清洗和过滤是关键，但过程往往充满挑战。有时候，花整整一周时间合成数据、清洗数据、再到数据配比，最终训练出的模型却表现不佳，难免让人沮丧。但我始终相信，每一次失败都有价值。历史数据不仅能帮助分析问题，还能用于构建更优质的训练样本，支撑下一次尝试。当方向不对时，就果断调整策略，带着经验重新出发。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这就是技术人的成长——在不断试错中积累经验，在失败中寻找突破，最终一步步实现更好的结果。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4090830/blog/18483708</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18483708</guid>
      <pubDate>Sun, 11 May 2025 03:37:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>我对各种 AI Coding Agent 工具的看法</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;本文已获授权转载。 &amp;nbsp;&lt;/p&gt; 
 &lt;p&gt;原文：《我对各种 AI Coding Agent 工具的看法》 &amp;nbsp;&lt;br&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fxxchan.me%2Fai%2F2025%2F06%2F08%2Fai-coding.html" target="_blank"&gt;https://xxchan.me/ai/2025/06/08/ai-coding.html &amp;nbsp; &amp;nbsp;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;作者：xxchan&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Agentic coding 或许是当下最火（最卷）的方向，一万家公司在做。并且隔三差五就在社交媒体上看到又有什么新工具、谁家又出什么新功能了（又 blow 谁的 mind 了，又颠覆谁谁了）。这还挺让人困惑的，我发现很多人会问 「这些 AI coding 工具真有那么牛吗？」，或者 「XX 和 YY 到底有啥区别」。不少人自己试用了一下，感觉不过如此，于是迅速下头。同时，我还发现还有不少程序员连&amp;nbsp;&lt;strong&gt;Cursor&lt;/strong&gt;&amp;nbsp;都没用过。&lt;/p&gt; 
&lt;p&gt;我平时很喜欢把玩各种 agentic coding tool，因此忍不住想锐评一番。这个领域无疑充满了大量的 hype，但仔细看，还是能分辨出不同产品间的差异，甚至整个行业的发展方向。&lt;/p&gt; 
&lt;p&gt;Agent 能做什么不能做什么，以及如何用好它，这里面有很多「手艺」的成分。所以这事儿很难解释清楚，了解它们的最好方式还是得自己上手试。看再多别人的使用感受，都不如自己玩一把来得真切（但我还是忍不住想讲讲我的看法）。这篇文章，就是试图把我关于各种 AI coding 工具那些零散的观察和思考，整理成一篇比较长的文字。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;一些背景&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;总的来说，我很相信 「agent coding 能成」 这个未来。具体点说，我相信未来 AI agent 可以独立在一个大型项目中，端到-端地完成复杂的开发任务（加功能、修 bug、重构）。&lt;/p&gt; 
&lt;p&gt;首先交代一下，我主要的工作是写开源流数据库&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frisingwavelabs%2Frisingwave" target="_blank"&gt;RisingWave&lt;/a&gt;，一个超过 60 万行代码的 Rust 项目，还算比较复杂。虽然一些上下文明确的小活儿，我已经习惯了让 AI 来干，但说实话，我暂时还没有大规模、严肃地用 AI coding 去做那些真正困难的开发任务。同时，我也没仔细想过未来模型的能力边界，以及实现 agent 的具体技术难点在哪。所以，这篇文章主要基于我的直觉，是对各个工具的感性分析。另外也不是一篇教你怎么用、怎么选的攻略。&lt;/p&gt; 
&lt;p&gt;不过给自己找补一下，我感觉之所以不敢大规模尝试，还是有原因的，主要还是「穷人思维」在作祟：Agent 还是太贵了！一个任务跑下来，随随便便就是 5 到 10 刀。这里可能存在一个杰文斯悖论：如果它变得更便宜，我反而会用得更多，最后花掉更多的钱……另外现在工具太多了，而要真正用出差异，可能得花上一周以上的时间去深度体验，但订阅和切换的成本又让人望而却步。&lt;/p&gt; 
&lt;p&gt;下面开始正题。我们先按工具逐一分析，最后再聊些更宏观的话题。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;具体产品分析&lt;/strong&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;Cursor：野心勃勃的领跑者&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Cursor&lt;/strong&gt;&amp;nbsp;现在毋庸置疑是 AI Code Editor 这个赛道的老大哥。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;0.50/1.0 版本里藏着的线索&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;说起来，我动笔写这个，很大一个 trigger 是看了&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cursor.com%2Fchangelog%2F0-50" target="_blank"&gt;cursor 0.50 的 changelog&lt;/a&gt;（然而拖到今天他们&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cursor.com%2Fchangelog%2F1-0" target="_blank"&gt;1.0&lt;/a&gt;&amp;nbsp;都发了……），里面透露了很多有意思的点，有点暗示未来方向的意味：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Simpler, unified pricing&lt;/strong&gt;&amp;nbsp;Cursor 之前的定价模式有点臭名昭著，它引入了一个定义模糊的「fast request」，不同模型还对应不同的数量。新版统一成了「Requests」（其实也没太大区别）。 更重要的是很多人觉得一个月 20 刀很贵，我倒认为这一定价太低了，他们很可能在亏钱。按 request 计费本身就不太合理，尤其在 agent 时代，一个请求可能跑很久、烧很多 token。当然，这也可能是种「健身房模式」，让用量少或短对话的用户，来平衡高用量用户的成本。但另一个不合理之处在于，这会驱使它去优化 token 成本（比如压缩上下文），而用户想要的却是最大化的效果。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Max mode&lt;/strong&gt;&amp;nbsp;按照官方说法，「It's ideal for your hardest problems」。在我看来，这有点吹牛。我的理解是，Max mode 就是不再精细化管理上下文，同时上了 token-based billing。在过去，模型长上下文能力不强时，精细控制或许能省钱且效果好（因为模型会被无效信息误导）。但现在模型能力提升太快，这种控制反而成了负优化。有趣的是，像 Roo Code 这样的开源 BYOK 方案，一直宣传的就是「Include full context for max performance」。所以 Cursor 这波操作，有点像开倒车，或者说是早期的优化成了现在的技术债。他们那句「If you've used any CLI-based coding tool, Max mode will feel like that - but right in Cursor」给人的感觉更微妙了。既然我可以用 CLI-based agent，为什么还要在 Cursor 里用一个要额外收 20% margin 的版本呢？&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fast edits for long files with Agent:&lt;/strong&gt;&amp;nbsp;这也是个有点像开倒车的改动。它给我的感觉是，开始使用基于文本的方法来直接应用大模型的输出。Cursor 之前一直吹嘘自己的 apply model，这事儿可能做得太早了。以前模型不够准，需要复杂的 apply 逻辑；以后模型越来越强，这种复杂性可能就没那么必要了。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Background Agent &amp;amp; BugBot&lt;/strong&gt;&amp;nbsp;总的来说 「Agent mode」 顶多算是辅助驾驶，真正的 Agent 是你能以更轻松的方式给他派活。Background Agent 是你派个活就不用管了，BugBot 是自动 code review。后面必定还会出例如在 GitHub 上 assign 个 issue 就开始干活了之类的功能，成为一个全能的合格牛马。 这个信号非常明确：&lt;strong&gt;Cursor 要和 Devin 硬碰硬了&lt;/strong&gt;。这是个非常自然的方向，用过 Cursor agent mode 的人，很可能都想过能不能让它同时干两件事。在本地做这个有难度，放到云端就顺理成章了。&amp;nbsp;&lt;strong&gt;Cursor vs Devin&lt;/strong&gt;，有点像&lt;strong&gt;特斯拉 vs Waymo&lt;/strong&gt;。后者一开始就直接做终极目标自动驾驶，前者则是发展成熟、用户规模大了以后逐渐转向更自动的方向。这条路的好处是用户期待会低一点，坏了能人，可以自己动手改。依赖现有的其他做的好的体验还可以继续保持一定的用户黏性。相比之下，Devin 如果一开始的体验不及预期，用户很可能就流失了。（当然，对 pro user 来说，在本地 checkout 修改不是难事，但 Cursor 有大量相对小白的用户，为他们提供简单的 UIUX 也是一个点。）&lt;/li&gt; 
 &lt;li&gt;还有一些 1.0 的小改进 
  &lt;ul&gt; 
   &lt;li&gt;支持了 memory：我认为同样是所有 ai agent 的必备功能。&lt;/li&gt; 
   &lt;li&gt;Richer Chat responses：支持了 mermaid，以及 markdown table 渲染。说明 chat 体验还是有东西卷的（提升一点用户粘性）&lt;/li&gt; 
   &lt;li&gt;但总的来说 1.0 主要感觉是 marketing 为主的一个版本，并没有什么质变（相比之下 0.50 倒是更震惊我一点）&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;与 Cursor 的激进大动作相应的则是&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2025%2F05%2F04%2Fcursor-is-reportedly-raising-funds-at-9-billion-valuation-from-thrive-a16z-and-accel%2F" target="_blank"&gt;Anysphere, which makes Cursor, has reportedly raised $900M at $9B valuation&lt;/a&gt;。对应 OpenAI 想要收购 windsurf 的新闻，可见 Cursor 急切的想要一统江湖的野心。融了这么多钱，我猜他们下一步很可能就是训练自己的模型。除此以外，它也完全有可能会收购市场上的其他玩家，成为一个整合者的角色。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;回过头来说，Cursor 到底好在哪？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;其实我当初（2024/05）用 curosr 完全是为了他惊艳的&amp;nbsp;&lt;strong&gt;TAB 功能&lt;/strong&gt;。在早期我几乎不用 AI chat，甚至能忍着很多非常影响体验的 editor bug 还要用。 相比 GitHub Copilot 的「append only」补全，想修改就得删了重来；Cursor 的生成「Edit」，帮你修改代码，显然是更「正确」的形态，而且准确率相当不错。它的补全还能在改完一处后，跳到后面同时修改多处，这在重构时极其有用。例如改一个类型签名的时候 IDE 不太能智能重构，要手动改很多地方，而 Cursor 解决了这个痛点。&lt;/p&gt; 
&lt;p&gt;就为了这个 TAB 功能，我心甘情愿地付了 20 刀。&lt;/p&gt; 
&lt;p&gt;后来在我没意识到的时候 「Agent mode」 在 non-coder 中先火了。我才后知后觉地发现了 agent 的能力。（而且 Cursor 一直没涨价啊！所以现在在让用户逐渐适应 token based billing 了） 不知道这个火是不是偶然，因为在我看来其他的 AI IDE 或者 end-to-end 的 coding 平台或多或少都能做类似的事情，Cursor 现在在 Agent 上甚至是比较落后的。但或许是它做的早，抓住了时间窗口，在大众心里建立起了品牌。AI coding 平台的切换成本其实有点玄学，一方面真的要切的话并不难，体验没有质的差距，没有真正的壁垒；另一方面这个干活的东西，用顺手了也懒得换。&lt;/p&gt; 
&lt;p&gt;他们有一篇&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cursor.com%2Fblog%2Fproblems-2024" target="_blank"&gt;Our Problems&lt;/a&gt;，看他之前画的饼其实都是 AI-assisted coding 的范畴，现在感觉在 agent 的时代稍微有点过时了。AI assisted coding 的 UX 感觉还是有很多可以做的事情的，但现在大力做 Agent 的话可能会没那么优先了。&lt;/p&gt; 
&lt;p&gt;所以，Cursor 的好在哪？它好在一种奇妙的组合拳上。它先用一个真正懂开发者的杀手级功能（那个无敌的 TAB Edit）抓住了最挑剔的核心用户，然后又敏锐地捕捉到了 Agent 的浪潮，在大众心中成功地将自己与「AI 编程」这个概念划上了等号，哪怕它的技术在现在并非最领先。这种「硬核实力」&lt;strong&gt;和&lt;/strong&gt;「抓风口能力」的结合，再配上一点先发优势的「玄学」，最终成就了它现在的地位。&lt;/p&gt; 
&lt;p&gt;现在如果你不知道什么工具最适合自己，那 Cursor 可能是一个比较稳的选择：有充足资金，不一定是最强但肯定差不到哪去。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Cursor 的终局是什么？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;当初就有很多人说，Cursor 做的事为什么要 fork VS Code？我曾认为「为了 AI 特化的体验」是答案（例如 Cursor TAB）。但现在，VS Code、&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.augmentcode.com%2F" target="_blank"&gt;Augment Code&lt;/a&gt;&amp;nbsp;也在追赶，Cursor 自己反而没有做出更多让人眼前一亮的独特 UX。&lt;/p&gt; 
&lt;p&gt;我现在对这件事的判断是：&lt;strong&gt;Cursor 想做一个大而全、ALL-in-one 平台，占据开发者的入口&lt;/strong&gt;。（GitHub Copilot 或许也想，但它还是不够快。）之前提的「我能在 CLI 里用 agent」，实际上是说 Agent 并不需要 IDE 就能工作。但我在自己浅浅用了一下 Cursor 的 background Agent 之后，发现这个体验很自然。很多东西不必做在 IDE 里，但反过来说，也不是不能做在 IDE 里。既然 IDE 是工程师每天花时间最多的地方，那为何不把所有 coding 相关的东西都塞进来，成为一个一站式的 hub？&lt;/p&gt; 
&lt;p&gt;至于其他的 AI code editor（windsurf/trae，以及开源的 cline/roo code），我感觉比较难与 Cursor 有一战之力。我的观点是，Agent 是大趋势，而做好 Agent 之后，对 AI-assisted coding 的依赖反而小了。当工程师需要自己写代码时，最终还是会回归到传统的 IDE 体验。这些工具虽然可能在某些体验上有优势（比如 windsurf 据说对复杂项目的上下文管理更智能），但普通用户没那个耐心去深度比较。在资本的冲刷下，这些微小差异可能会被逐渐抹平，甚至收购整合。做 Agent 就更是烧钱了。反倒是像&amp;nbsp;&lt;strong&gt;Zed&lt;/strong&gt;&amp;nbsp;这种完全重头再来的 code editor，说不定可以搞出点新花样来。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;关于「壁垒」&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Cursor 的创始人曾谈过他们对「壁垒」的看法：在这个发展过快，未来的想象空间也仍然很大的领域，&lt;strong&gt;壁垒的本质就是「快」&lt;/strong&gt;。只要你够快，就能领先。反之无论你当前的技术有多强、产品体验有多好，一旦你在某个阶段慢下来，就可能被超越、被取代，非常残酷。&lt;/p&gt; 
&lt;p&gt;我在这个事情上没完全想明白。我曾经觉得靠「体验」是可以成为壁垒的。但或许那只是你做的事情不够大。如果足够大，那么巨头一定会出手自己做，然后用技术（模型）和资源能力比你做的更好。&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;VS Code/GitHub Copilot&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Copilot&lt;/strong&gt;&amp;nbsp;绝对是里程碑，是第一个让人感觉「能用」的 AI coding 工具。但后来，它的体验逐渐被后起之秀超越。我猜测可能的理由包括：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;OpenAI/微软重心转移（比如微软大力搞 copilot for office）&lt;/li&gt; 
 &lt;li&gt;毕竟微软是个巨厂，层层审批，Github Copilot 拿不到太多资源&lt;/li&gt; 
 &lt;li&gt;Copilot 本身当初可能是想着做做看，做出效果以后也没想好再往后能怎么做，而且 coding 模型的发展缓慢（Codex 是 GPT-3 的一个 finetune 版本），后面专注提升基座能力去了，没人/资源专门训练 coding 特化模型&lt;/li&gt; 
 &lt;li&gt;Copilot 用户（特别是 enterprise 用户）多了以后不好大刀阔斧地改体验，领先占据市场反而成了包袱&lt;/li&gt; 
 &lt;li&gt;受限于 VS Code 的壳，不像 fork 的 AI IDE 可以乱改，要往主分支里塞 AI 相关的东西可能还是要掂量一下，特别是在当年 AI coding 还原非共识，有很多程序员反感 AI&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;但是 VS Code 最近逐渐把功能慢慢都加上了。甚至还发了一篇有意思的宣言：&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fblogs%2F2025%2F05%2F19%2FopenSourceAIEditor" target="_blank"&gt;&lt;strong&gt;VS Code: Open Source AI Editor&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;长远看&amp;nbsp;&lt;strong&gt;VS Code 可能还是会重回巅峰&lt;/strong&gt;。理由很简单：大厂认真起来是很吓人的（比如 gemini）。当 AI coding 成为共识，微软投入足够资源，体验差异很可能被逐渐抹平（比如 Cursor TAB 这种东西 Copilot 没理由不做），除非他们持续在「AI Editor 的 UX 创新」上整新活。但是目前看来并没有。更重要的一点是，既然 agent 不需要 IDE 就能工作，那么程序员自己写代码时，还是会回归到功能扎实、bug 更少的传统 IDE。这也是 Cursor 的一大弱点，它在 IDE 本身的迭代上，似乎总比 VS Code 慢半拍。&lt;/p&gt; 
&lt;p&gt;未来，VS Code 和 Cursor 两分天下，感觉也挺有可能。喜欢古典和喜欢大而全的人，各取所需。&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;Claude Code&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;接着聊聊真正的 CLI-based agent。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fxxchan.me%2Fai%2F2025%2F05%2F06%2Fclaude-code.html" target="_blank"&gt;上次的文章分析过&lt;/a&gt;，&lt;strong&gt;Claude Code&lt;/strong&gt;&amp;nbsp;是个做的很用心的产品。它给了我一种「确实应该能 work」的感觉，以及第一次让我思考 agent 好像并不需要 IDE。&lt;/p&gt; 
&lt;p&gt;相比于 IDE 或者浏览器里的 agent，CLI-based agent 本质上没太大差距，最主要的区别可能就是对 prompt 和 tool 的设计。但它的优点是可以 iterate faster。因为能做的事情更少，反而可以专注在 agent 最本质的地方。因此正如上次的文章分析的，claude code 的 prompt 包括 tool spec 写的都非常的长。我自己使用下来的体感是感觉 claude code 明显要比 Cursor 更「聪明」一点。这只是因为 prompt 调教的水平吗？还是说 Claude Code 有特供的模型？（感觉暂时不太像，但未来不好说）&lt;/p&gt; 
&lt;p&gt;Claude Code 其实并不只能跑在自己本地的 terminal 里，现在已经可以在 GitHub 上 @它，然后自己干活了（跑在 CI 里）。但它的思路并非深度集成，而更像是利用 CLI 无限的可组合性（所以非常第一性原理做事？）。&lt;/p&gt; 
&lt;p&gt;在过去这一个月里，Anthropic 又有一些明显的动作，让人感觉想要力推 claude code：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;在 Code with Claude 大会上发布了 Claude Code 1.0，以及 4.0 新模型&lt;/li&gt; 
 &lt;li&gt;断供 windsurf&lt;/li&gt; 
 &lt;li&gt;Claude 20 块的 pro plan 也可以用 claude code 了，大大降低试用门槛。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;最后一点让我果断订阅了 Pro Plan。我试了一下，在达到 usage limit 之前（几个小时后刷新），我让 Claude Code 跑了一个比较复杂的重构任务，大概持续了三四十分钟。这个用量如果按 API token 计费，少说也得 10 刀。这或许就是&amp;nbsp;&lt;strong&gt;LLM 原厂做 agent 的一个优势&lt;/strong&gt;：反正机器已经在那里了，可以把闲时资源充分利用起来。而做应用的公司，又不可能去整租机器。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Anthropic 做 Claude Code 的真实意图是什么？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;我其实还没完全看懂，Anthropic 做 Claude Code 的最终目的到底是什么？是想做一个好用的产品，还是想用它帮助模型训练本身？OpenAI 现在明显在花力气做 ChatGPT 这个产品，未来的想法大概是把 ChatGPT 作为一个入口，让它成为一个调度型的 agent。那 Claude Code 在这件事上的定位又是什么？&lt;/p&gt; 
&lt;p&gt;这一方面涉及对 Coding 这个市场的规模到底有多大的判断。从 Cursor 一开始的估值来看，大家普遍认为也就那样——因为开发者群体的体量就那么大。但现在 Vibe Coder 起来以后，整个故事又被撑大了不少。&lt;/p&gt; 
&lt;p&gt;不过，回到 Anthropic 这么一家大模型公司，直接下场卷应用层的东西，是否有点「不体面」？或许他们的目的并不是要把市场上其他人都吃掉，而是带着一定的试验心态，看看这种东西到底能做成什么样子。但说起应用层，Claude App 里面其实也有很多非常漂亮的功能，比如它的 Artifact，体验明显比 ChatGPT 好很多，虽然 Claude App 整体上很挫。&lt;/p&gt; 
&lt;p&gt;当然，更有可能的目的还是&lt;strong&gt;通过用户使用它的产品来收集数据，最终用于训练模型&lt;/strong&gt;。 因为像 Cursor 这种合作伙伴的用户行为数据，它可能是拿不到的。所以它得自己做一个完整的产品，把整个链条打通。而且，Cursor 里那些乱七八糟的功能它可能也不太需要，它更关注的是训练模型过程中，真正与 Coding 直接相关的部分。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;从「聪明」到「持久」的进化&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;说回模型训练，Claude Code 宣称能独立跑七个小时，给我的感觉是：现在模型的「聪明程度」短期内好像有点提不上去了，于是大家开始发力做「长期任务执行」（所谓 Agent）——让模型持续工作得更久、更自主，并且能用工具来辅助提升自己。&lt;/p&gt; 
&lt;p&gt;在使用中，能很明显地观察到模型的一些新行为：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;它会先说：「我接下来要做 123」，体现出任务规划能力；（我原来觉得需要外化的 TODO list，但它似乎在内化这个能力）&lt;/li&gt; 
 &lt;li&gt;它会先写一个方案，然后写到一半突然说：「让我想一想有没有更简单的方式」，然后重头来过。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;这些行为看着其实还挺好笑的，但也清晰地揭示了往 agent 这条路上走。&lt;/p&gt; 
&lt;h4&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fampcode.com%2F" target="_blank"&gt;&lt;strong&gt;Amp&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;他们整体上给我一种很有「产品 sense」，「很懂 agent 应该怎么 work」的感觉。但其实就是 claude code - like。我能想到他们的优势是 move （slightly） faster（？）；有 sourcegraph 这个 code search &amp;amp; indexing 后端能力（真的有用吗？）；不和 claude 一家强绑定，在别的模型追上的时候可以切；另外他们毫不掩饰、充满原则性的产品哲学可能可以赢得一批用户的深度信赖。他们是这么说的：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Amp is unconstrained in token usage (and therefore cost).&amp;nbsp;&lt;strong&gt;Our sole incentive is to make it valuable&lt;/strong&gt;, not to match the cost of a subscription.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No model selector, always the best models.&lt;/strong&gt;&amp;nbsp;You don’t pick models, we do. Instead of offering selectors and checkboxes and building for the lowest common denominator, Amp is built to use the full capabilities of the best models.&lt;/li&gt; 
 &lt;li&gt;Built to change.&amp;nbsp;&lt;strong&gt;Products that are overfit on the capabilities of today’s models will be obsolete in a matter of months.&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;他们的&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fampcode.com%2Ffif" target="_blank"&gt;「&lt;strong&gt;Frequently Ignored Feedback&lt;/strong&gt;」&lt;/a&gt;&amp;nbsp;也很有意思（用户：我要 xxx；amp：不，你不要），体现出他们对 Agent 的深刻理解：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Requiring edit-by-edit approval traps you in a&amp;nbsp;&lt;strong&gt;local maximum&lt;/strong&gt;&amp;nbsp;by impeding the agentic feedback loop. You’re not giving the agent a chance to iterate on its first draft through review, diagnostics, compiler output, and test execution. If you find that the agent rarely produces good enough code on its own,&amp;nbsp;&lt;strong&gt;instead of trying to 「micro-manage」 it,&lt;/strong&gt;&amp;nbsp;we recommend writing&amp;nbsp;&lt;strong&gt;more detailed prompts&lt;/strong&gt;&amp;nbsp;and improving your&amp;nbsp;&lt;strong&gt;AGENT.md&lt;/strong&gt;&amp;nbsp;files.&lt;/li&gt; 
 &lt;li&gt;Making the costs salient will make devs use it less than they should. Customers tell us they don’t want their devs worrying about 10 cents here and there. We all know the dev who buys $5 coffee daily but won’t pay for a tool that improves their productivity.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;非常 Opinionated，有点「果味」。&lt;/p&gt; 
&lt;p&gt;除此以外，他们还做了个 leader board &amp;amp; share thread 功能，很有意思，可以在团队内激起一些奇妙的火花。&lt;/p&gt; 
&lt;p&gt;但短期内有点谨慎不看好，因为 Claude Code 已经足够好用了，而且绑定 Claude 订阅有巨大的成本优势……Amp 目前的收费模式是完全 pass-through 按 token 收费（没有 margin）。那虽然他们不盈利，可能也不会太烧钱。可以拭目以待一下。&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;OpenAI Codex （in ChatGPT）&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;上个月，OpenAI 也发布了自己的全自动 coding agent。是完全符合我对 agent 的想象的产品形态。我之前就在想，为什么我不能在手机上给 Cursor 派活？现在通过 ChatGPT 就能实现了。&lt;/p&gt; 
&lt;p&gt;但要看懂这个动作，就不能只盯着 coding。虽然他们收购了 Windsurf，但我认为&amp;nbsp;&lt;strong&gt;OpenAI 的野心远不止在 coding 市场上分一杯羹，他们更想做的是让 ChatGPT 成为未来的调度入口，甚至是一个操作系统&lt;/strong&gt;。 Codex 的目的，或许只是为了比较专业的「高价值用户」能做更多事情，从而提高用户粘性。而收购 Windsurf，看中的可能是他们对 long context 的管理能力和宝贵的用户数据，从而赋能模型能力提升。&lt;/p&gt; 
&lt;p&gt;偏题说一嘴，ChatGPT 的整体体验远超其他官方 AI app，比如说&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;memory：有一种很神奇的感觉，但对我个人而言提供的「价值」似乎还没那么大，真有偏个人思考的问题我还是更愿意问没有 memory，甚至更难用的 gemini。&lt;/li&gt; 
 &lt;li&gt;o3 的 web search 体验过于好。相当于 mini 版 deep research&lt;/li&gt; 
 &lt;li&gt;虽然也不能说非常丝滑，还是时不时有点 bug，但还是比其他家好太多了。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;strong&gt;Devin&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;当年在 AI coding 还没那么普及的时候他们就打着 「First AI Software Engineer」 的旗号，要做全自动 end-to-end。初次发布后 500 刀/月的高价也是让人望而却步。并且试过的人也说它笨。&lt;/p&gt; 
&lt;p&gt;现在变成 20 刀起订，pay as you go 以后我立马试了试。&lt;/p&gt; 
&lt;p&gt;给我整体的感觉是，模型智力水平一般般。但他们的产品整体上也是一种「基本上能 work」的感觉。我有一种强烈的预感，在经过适当的 prompt engineering 之后，它能工作得很好。他们现在的说法也是很实在：「&lt;strong&gt;Treat Devin like a junior engineer&lt;/strong&gt;」。（其实任何 Agent 产品目前大概都是这个状态。）&lt;/p&gt; 
&lt;p&gt;这是我第一次真切地感受到 agent 烧钱的威力。我让它处理一个 issue，它可以自主探索出一个框架（花了 2 个 ACU，每个 2.25 美元）。但后面让他改 bug，就有点改不对了，开始乱撞，很快就飙到了 4 个 ACU，20 刀迅速蒸发。或许现在的最佳用法是，先用它生成一个初版，然后手工或用 Cursor 精修。（当然，现在 Cursor 也有了 background agent，界限开始模糊了。）&lt;/p&gt; 
&lt;p&gt;对 devin（包括现在 Curosr remote agent）来说，还有一笔 vCPU 的钱。例如 m5.4xlarge（16C64G）ondeman $0.768/h。其实相比 token 并不算很贵……&lt;/p&gt; 
&lt;p&gt;在 Agent 成为大热门之后，&lt;strong&gt;Devin&lt;/strong&gt;&amp;nbsp;直接受 Cursor、claude code、Codex 等各个方向的夹击了。&lt;/p&gt; 
&lt;p&gt;Devin 目前的优势在于 integration（能直接在 Slack、Linear &amp;amp; Jira 上派活）和较高的产品完成度（设计良好的 knowledge base、playbook 系统）。但这种「脏活累活」能撑起它的估值，能成为壁垒吗？直觉上，这些是任何一个好的 agent 都必须具备的功能。感觉 agent 这个领域确实需要大量时间去打磨体验，但资本似乎太急了。&lt;/p&gt; 
&lt;p&gt;他们最新版又出了一个&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fxxchan.me%2Fai%2F2025%2F06%2F08%2F%2520https%3A%2F%2Fcognition.ai%2Fblog%2Fdevin-2-1" target="_blank"&gt;Confidence rating&lt;/a&gt;&amp;nbsp;功能很不错，可以避免用户因过高预期而烧钱搞出一堆垃圾。其实这也是 agent 挺有意思的一个地方，你用的不对的话就会效果又差又烧钱。换个角度说，一个好的程序员或者乙方不应该你说什么就做什么，而是会试图理解你的意图，为什么你想做这个，以及有什么潜在的坑。&lt;/p&gt; 
&lt;p&gt;他们的 deepwiki 也有点像是秀肌肉，可能体现了他们在 agent 上的技术积累。毕竟，他们是一开始就融巨资自研大模型、奔着超大上下文去的团队。或许他们有很多的卡，在成本上也有优势。&lt;/p&gt; 
&lt;p&gt;在写这篇文章的时候又看到一个新的平台&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2FFactoryAI%2Fstatus%2F1927754706014630357" target="_blank"&gt;Factory&lt;/a&gt;，看起来也是叫板 devin。它的 release 感觉 too good to be true：「Factory integrates with your entire engineering system (GitHub, Slack, Linear, Notion, Sentry) and serves that context to your Droids as they autonomously build production-ready software.」。但我仔细看了一家这家公司成立甚至比 devin 还早一点。他们的 demo 视频中，一个有意思的地方是他所有的 integration 都是要跳回到它 factory 的页面上的（比如在 slack 里@它，它给一个链接）。它的体验其实是你在它的 portal 上完成所有事情，拉取 linear、GitHub、slack 的 context。（说个不恰当的比喻，这看着有点像 coding 领域的 Manus。）相比之下 devin 是让你在 Slack、Linear 上直接和它交互，更加的 in-context，in-flow。但 anyways，有竞争是好事。&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;v0&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;上面其实说的都是比较偏为 engineer 设计的工具（不管是全自动还是半自动），下面开始聊聊更偏 「non-coder」 或者 「product」 向的平台。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;v0&lt;/strong&gt;&amp;nbsp;是 coding 垂类赛道中更垂的一个，更偏前端 UI prototype。你可以把它想象成一个用自然语言驱动的 Figma，直接在 v0 里就能把界面「画」出来。另外一个讨巧的地方是利用 React/shadcn UI 的组件化能力，它生成的东西直接能整合到自己的代码里，是个能用的东西。&lt;/p&gt; 
&lt;p&gt;Vercel 这家公司一直很讲究「品味」，他们凭借在前端领域的深厚积累，把 v0 这个垂类的体验做得非常好。但可以想见，v0 的流畅体验背后，肯定有大量的工程优化，比如套用模板、专门微调模型，以及一套精心设计的 workflow 来保证生成效果。&lt;/p&gt; 
&lt;p&gt;一个有意思的动向是他们最近&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvercel.com%2Fblog%2Fv0-composite-model-family" target="_blank"&gt;发布了自己的模型&lt;/a&gt;，并且开放了 API。他们对此的解释是：「Frontier models also have little reason to focus on goals unique to building web applications like fixing errors automatically or editing code quickly. You end up needing to prompt them through every change, even for small corrections.」 非常合理，但是这是不是属于雕花？当然对于 deliver 一个好用的产品来说，雕花是必须的。但我有一点看不懂他们为啥要出 api，可能一方面是回收训模型的成本，一方面是开始探索让自己成为一个「被调度的 agent」。&lt;/p&gt; 
&lt;p&gt;但感觉他们并不满足于只做 UI，他现在的定位已经是 「Full stack vibe coding platform」 了，另外一方面他们也在做 GitHub sync 等和现有代码整合的工作，而不再是只能在 v0 平台上生成。&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;Bolt / Replit / Lovable：「想法到应用」 Vibe Coding platform&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;这一类的产品，其实有点大同小异。它们都是端到端的全栈平台，或者叫 app builder，有个更好听的名字叫「idea to app」。&lt;/p&gt; 
&lt;p&gt;相比 Cursor，他们解决的痛点一是部署（包括前后端以及数据库），二是更丝滑的 vibe coding 体验：我在 Cursor 里生成的代码反正也不看，为什么还要展示 code diff？直接 chat - live preview 才是更直接的体验。另外它们应该有一定的项目模板成分，让首条 prompt to app 的体验感受非常好。&lt;/p&gt; 
&lt;p&gt;虽然它们各自定位可能略有不同，比如开发者可能更喜欢 Bolt，非开发者更喜欢 Lovable（纯瞎说），但本质上做的事情是一样的：让用户在接近零手动改代码的情况下，搞出一个能用的产品来。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Vibe Coding 平台的困境&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;这个事情的 tricky 之处在于，如果他们的目标是 deliver 最终产品给用户，那用户的期待会很高。在比较严肃的场景下，用户往往需要非常具体的修改，全权让 AI 来改不一定能达到效果，而且还很费钱。我在用 Cursor 糊前端的时候，感觉加功能很爽，但想微调按钮位置、布局、交互逻辑时，它往往就改不对了。&lt;/p&gt; 
&lt;p&gt;虽然有些 vibe coding 平台也提供一定的 online code editor 能力，但真到了需要精细控制的时候，会写代码的人可能还是会回到 Cursor，因为那里最顺手。可一旦回到了 Cursor，后续的开发可能就没必要再回到 vibe coding 平台了。部署的痛点是一次性的，CI/CD 搞好之后，改完代码 push 一下就行。&lt;/p&gt; 
&lt;p&gt;精细开发的话，Cursor 的 agent 或许能提供更精确的 context。这些 vibe coding 的平台或许也可以把 coding agent 的能力都提上去，但是他们要做的事情太多了，把一个平台打造好得花很多精力。他们在 coding 的技术积累肯定是不如 Cursor 等 for developer 的平台。&lt;/p&gt; 
&lt;p&gt;简言之，&lt;strong&gt;vibe coding 平台在严肃、复杂场景下的上限可能不足。&lt;/strong&gt;&amp;nbsp;如果只做简单的小项目或者 demo，价值肯定是有的，但有多少用户愿意为此买单，我就不懂了。这个故事，其实在 Vercel/Neon 这类主打「开发者体验」的 PaaS 平台上已经发生过：大家都说体验好，但等项目做大以后，很多人还是默默地迁移到了 AWS。&lt;/p&gt; 
&lt;p&gt;再换个角度，我大胆猜想一下：未来，Cursor 完全可以把 vibe coding / app builder 的体验也做好。开屏界面搞成一个对话框，同时把 live preview、Supabase/Vercel 整合等功能都做了，到时这些平台就更危了。更何况，vibe coding 这个概念本来就是在 Cursor 上火起来的，对那些想 build product 的人来说，「看到代码」这件事或许并不是多大的阻碍。我大胆预测，一年后 Cursor 可能就会这么做。&lt;/p&gt; 
&lt;p&gt;也可以看看 Lovable 的&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.lovable.dev%2Ffaq%23what-is-the-difference-between-lovable-and-cursor" target="_blank"&gt;FAQ&lt;/a&gt;&amp;nbsp;里自己写的和其他平台/Cursor 的比较：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;大部分的点都是 「just better」，「way more natural」，「Attention to detail」，比较虚的。在普通的产品上或许有说服力，但在 AI coding 竞争这么激烈的领域，想保持领先太难了。&lt;/li&gt; 
 &lt;li&gt;他们有个 visual editor 其实挺有意思，可以直接所见即所得地修改 UI 元素，一定程度可以解决之前说的微调麻烦的问题。但我试了一下，目前效果还比较一般，只能改改字的内容、字号、margin 之类的，并不能实现拖拽等功能。这个故事长远看也很好听 - 甚至可以吃掉 figma？但是感觉技术难度极其大。（让我想到现在连个真正好用的 mermaid 图 visual editor 都没有）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;strong&gt;YouWare：User Generated Software 的激进实验&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;AI coding 真正让人兴奋的地方，在于它所展现的「自然语言调度算力」的能力。这让普通人能使用代码这个工具去解决他们自己的之前无法被满足的需求：一个&amp;nbsp;&lt;strong&gt;User Generated Software (UGS)&lt;/strong&gt;&amp;nbsp;的时代，正在到来。&lt;/p&gt; 
&lt;p&gt;在所有产品中，&lt;strong&gt;YouWare&lt;/strong&gt;&amp;nbsp;仿佛是一个精准为此而生的平台，它把 UGS 作为了自己唯一的目标。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;把 AI coding 做成内容社区，这对吗？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;我一开始对 YouWare 谨慎不看好。&lt;/p&gt; 
&lt;p&gt;它给我的感觉，是想把 UGC 时代那套（社区、流量、平台）的想法，生搬硬套到 UGS 上来。如果他做一个新的内容平台，是要和抖音、小红书竞争注意力的，但感觉不如他们好刷。个性化的娱乐需求已经被短视频充分满足了。（……吗？在我说完这句话之后，又突然感觉短视频还是没那么好刷，也总觉得也总找不到符合我偏好的游戏。）&lt;/p&gt; 
&lt;p&gt;我最初的想法是：UGS 的潜力在于满足海量的、未被满足的长尾工具需求。用户不缺动机，只缺能力。如果是为了解决自己的痛点，那用户干完活就走了，不一定有分享或分发的欲望（或者在 Twitter/小红书上发发就够了），更不会没事干去一个工具网站上「刷」来「刷」去。&lt;/p&gt; 
&lt;p&gt;YouWare 认为许多人并不知道自己可以做什么，因此需要一个平台来激发他们的思考和创造欲，社交元素在此便扮演了激发灵感的角色。&lt;/p&gt; 
&lt;p&gt;v0、Lovable 这些平台，虽然也号称小白可用，也做一点社区，但它们仍然会把代码展示给用户，会弹出 build error，会让你去连接 Supabase。它们的假设用户，依然是有一定技术背景的「专业人士」（如产品经理、设计师）。例如这段：「Lovable provides product managers, designers, and engineers with a shared workspace to build high-fidelity apps, collaborate effectively, and streamline the path to production-ready code.」&lt;/p&gt; 
&lt;p&gt;而 YouWare 的激进之处在于，它&lt;strong&gt;完全不给用户看代码&lt;/strong&gt;。它面向的 non-coder 是更广泛的普通人。&lt;/p&gt; 
&lt;p&gt;这有点像小红书限制图文的字数，通过一种限制，反而最大化了目标用户的可用性。对于一个完全不懂技术的人来说，看到 build error 意味着终点，而在 YouWare 里，这个终点被隐藏了。&lt;/p&gt; 
&lt;p&gt;上面说工具需求和娱乐需求的区别，其实小红书也可以被看作是一个用户记录的工具，而且小红书火起来很大程度上是它「有用」。&lt;/p&gt; 
&lt;p&gt;在我自己试用过 YouWare 之后（&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youware.com%2Fprofile%2FuNYPe0WjpUVfW21IOleyYTlMIWf1" target="_blank"&gt;我生成的东西&lt;/a&gt;），感受到了一些有趣的点&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;确实有点毒性（以及免费额度非常重要）。比如我会有个脑洞就想扔上去看看行不行。如果用其他的平台搞正经项目的话我会更要掂量一下再做。（我心里预期包含了 debug 成本等，毕竟我是想要一个真的能用的东西。在 mental burden 上，YouWare &amp;lt; Lovable &amp;lt; Cursor，但有用性可能相反）。这种感觉和我用 cursor 的 background agent 时很像，都是「跑跑看，反正不亏」。&lt;/li&gt; 
 &lt;li&gt;它真的隐藏了代码细节，包括失败。Lovable 在我试用的时候初次生成报错的概率还是挺大的（虽然点一下也就修了），而 YouWare 没出现过。&lt;/li&gt; 
 &lt;li&gt;它鼓励「玩耍」。YouWare 的 Remix 和 Boost 功能也挺有意思的（先不谈效果好不好）。很符合「用户并不知道他想 build 什么东西」的出发点，鼓励探索和再创作。 
  &lt;ul&gt; 
   &lt;li&gt;但突然发现这东西很多家都有了，甚至连 claude artifact 都做了类似的功能，而且完成度高得惊人。）&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;一堆关于 YouWare 的零散思考&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Vibe Coder 是什么样的人？&lt;/strong&gt;&amp;nbsp;UGC 时代出现了一个新东西叫专业「创作者」，现在的「vibe coder」倒是有点像。但内容创作者的收入主要靠流量和商单，而 vibe coder 更接近独立开发者，他们想的是 build 自己的产品，然后靠卖软件或订阅赚钱。卖软件终究要靠解决实际需求，然后去各个平台推广，而不是等着别人在你的 UGS 平台上刷到你（例如去发小红书而不是等人在 GitHub 上刷到你）。。 ……想到这里，我开了个脑洞：真要做的话，岂不是应该做&amp;nbsp;&lt;strong&gt;vibe coder 的 OnlyFans&lt;/strong&gt;，而不是 YouTube/Instagram？🤣&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;代码确实有娱乐需求&lt;/strong&gt;（有个东西叫创意编程）…但还是那句话，娱乐需求是要竞争注意力的。再其中的一个小用法是把文章变成交互式网站，满足教育学习的需求，比如这些： 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fciechanow.ski%2Fbicycle%2F" target="_blank"&gt;https://ciechanow.ski/bicycle/&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgarden.bradwoods.io%2F" target="_blank"&gt;https://garden.bradwoods.io/&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fencore.dev%2Fblog%2Fqueueing" target="_blank"&gt;https://encore.dev/blog/queueing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.redblobgames.com%2Fpathfinding%2Fa-star%2Fintroduction.html" target="_blank"&gt;https://www.redblobgames.com/pathfinding/a-star/introduction.html&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Power User vs. 小白用户：&lt;/strong&gt;&amp;nbsp;这两者的需求是矛盾的，一个平台很难同时满足。YouWare 显然选择了后者。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;输出形式的局限：&lt;/strong&gt;&amp;nbsp;为什么目前这类 coding 平台（包括 Devin、Lovable 等）的最终产出大多是网站？对于许多小型工具性需求，命令行或桌面应用或许更直接、更高效。当然，从 UX 角度看，网站对普通用户最友好。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;成本问题&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;作为内容平台，有很大的合规风险和成本问题。但可能也没那么难，毕竟 deepseek 都能在国内上了。&lt;/li&gt; 
   &lt;li&gt;host 网站的成本问题。以及不同形式的网站可能有不同的计算需求，对热门项目可能还得动态 scale。&lt;/li&gt; 
   &lt;li&gt;Agent 的巨大算力成本。相比 UGC，用户生产内容时其实平台没什么成本，但 UGS 则不一样。相比 Amp 说我的优化目标就是最大效用，这里 YouWare 的账就更难算了，这里有很大的生成效果和成本之间的 tradeoff 要做。 这就引到一个核心问题是它鼓励用户创造，那盈利模式是什么？如果沿用传统平台的流量广告模式，考虑到巨大的成本，盈利上限恐怕不高。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;是否要对特定场景优化？&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;例如现在平台上可能有过半用户会用来写报告什么的。但其实这是类 deepresearch 功能，在 YouWare 里做效果会很一般。Manus/flowith 倒是估计会优化（Manus 最近还真特化了 slides 功能，让我有点无语，说好的通用 Agent 最后还是做这种东西去了）。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;数据驱动平台演化？&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;我一开始很困惑于为何 YouWare（包括 Manus 等）在能力尚不完善的阶段就大力买流量推广。而不是先将产品效果打磨得更好再推广。可能是他们已获得充足融资，急于扩张。&lt;/li&gt; 
   &lt;li&gt;但在产品成熟前就推出，可以帮助他们了解用户到底想 build 什么，然后针对性地优化。我之前可能低估了社交对于激发用户创造力的作用。这可能类似于一种进化算法，或者「伟大无法被计划」的理念：让用户自由探索，或许能裂变出意想不到的创新。YouWare 团队的字节背景，想必会沿用数据驱动的决策方式，通过用户行为来让平台演化，或许做着做着就能发现奇妙的突破点。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;YouWare 的未来&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;我相信一家公司是有它的基因的。YouWare 的字节剪映 PM 创始人背景，或许才能想出这么个玩意儿。&lt;/p&gt; 
&lt;p&gt;虽然上面分析的很多东西可能 Lovable 会往 YouWare 的方向靠，更加隐藏代码；或者 YouWare 往普通的 Agent 平台上靠，提高 ultility，但期待未来的结果。我觉得 YouWare 的形态未来一定不是现在这样。同时我越来越觉得 YouWare 的出发点很有意思，或许能做出一些不一样的事情。这个团队可能比做 coding 的人更懂创作、平台和消费者，比懂创作者的人更懂 AI coding。&lt;/p&gt; 
&lt;p&gt;YouWare 的目标并非最大化 utility，而是&lt;strong&gt;激发普通人的 creativity&lt;/strong&gt;。当然 utility 也要至少 good enough。&lt;/p&gt; 
&lt;p&gt;一个残酷的问题是未来会 curosor 的人越来越多了，会不会就吃掉这种傻瓜工具了？可能会想摄影师用相机和普通人用手机拍照可以共存一样，程序员和 vibe coder 共存。另一个想法是我最近越来越觉得，当前的 AI 正在加剧马太效应（或许从 200 刀订阅就开始了）。懂得如何用好 AI、并能负担得起开销的人（比如真见过人用 Cursor 一天消耗好几百刀），与普通人的差距会越来越大。对于那些不那么乐于动脑、需求表达不清的普通用户，他们会被「淘汰」吗？这个未来太残忍，我有点不愿设想，宁愿投身对抗潮流。从这个角度看，YouWare 这种致力于服务广大普通人的尝试让我觉得很有价值。&lt;/p&gt; 
&lt;p&gt;当然虽然 YouWare 很有想法。但认知能否成功转化为可落地的产品并实现商业价值，尚存不确定性。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;Big picture：行业格局/技术方向分析&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;在逐一审视了牌桌上的这些玩家之后，让我们向后退一步，看看整个 AI coding 领域的全景。&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;赛道细分&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;AI coding 还可以细分为几个小方向。一个产品可能会跨多个方向&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;AI-assisted Coding:&lt;/strong&gt;&amp;nbsp;以&amp;nbsp;&lt;strong&gt;Cursor&lt;/strong&gt;&amp;nbsp;和&amp;nbsp;&lt;strong&gt;GitHub Copilot&lt;/strong&gt;&amp;nbsp;为代表，它们是现有开发工作流的「增强器」，致力于让专业开发者写代码更快、更爽。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;End-to-end Agent&lt;/strong&gt;&amp;nbsp;以&amp;nbsp;&lt;strong&gt;Devin&lt;/strong&gt;、&lt;strong&gt;Claude Code&lt;/strong&gt;&amp;nbsp;和&amp;nbsp;&lt;strong&gt;Amp&lt;/strong&gt;&amp;nbsp;为代表，它们的目标是成为能独立完成任务的「初级工程师」，将开发者从执行者提升为任务的分配者和审查者。Agent 同时也可能是作为合作者，特别是 Claude Code 这样 CLI based agent，我既可以和他 pair programming，也可以请他帮我干活。 到 2025 年 Q3，硅谷将形成共识，认为 Agent 可以达到甚至替代 mid-level software engineer 的水平。评论区对此多持怀疑态度。我的看法是，Agent 或许不一定会完全「替代」，但它极有可能成为 mid-level 工程师的得力「合作伙伴」。从这个角度理解，我认为其预测是相当有道理的。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Vibe Coding / UGS:&lt;/strong&gt;&amp;nbsp;以&amp;nbsp;&lt;strong&gt;v0&lt;/strong&gt;&amp;nbsp;和&amp;nbsp;&lt;strong&gt;YouWare&lt;/strong&gt;&amp;nbsp;为代表，它们试图将代码的能力赋予非开发者，让他们通过自然语言创造应用和工具，一个更偏向「产品原型」，一个则更激进地走向「内容社区」。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;strong&gt;「半成品」的尴尬现状，依然不够理想的成本与性能&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;我们必须承认一个现实：&lt;strong&gt;Agent 依然是一个「半成品」&lt;/strong&gt;。它的效果还不足以真正端到端地交付一个完美的结果，有时甚至不如我们自己动手来得省事。（比如还是手动调 button 爽）&lt;/p&gt; 
&lt;p&gt;但我们也能清晰地看到 agent 的进化路径：从最早在 ChatGPT 里手动复制粘贴，到后来在 IDE 里进行单轮对话，再到如今的 Cursor Background Agent 和 Claude Code，&lt;strong&gt;Agent 能够独立工作的时间越来越长，做事的数量和质量都越来越高，这无疑是一个不可逆转的趋势。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;或许我们应该换个心态：把它想象成一个外包合作方。你把任务派给它，让它干一段时间，然后你来检查、给反馈，而不是指望它一次性搞定。这和我们与人类外包商（也就是「Agent」）的合作模式，并无二致。&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;成本的诅咒，与模型的赌局&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;与此同时，Agent 是个非常贵的东西。这出了让用户不敢大规模使用之外，也让 agent 应用公司陷入两难：是继续不计成本地提升效果，还是转而研究各种「奇技淫巧」「雕花」以降本增效？但存在性能和成本的 tradeoff。我不知道是否可能同时兼顾两者，比如团队的一部分专注于性能提升，另一部分研究成本优化。如果完全不考虑成本控制，高昂的价格也可能会吓退用户。但 AI Agent 公司是否真的那么急于获客？或许也不然。&lt;/p&gt; 
&lt;p&gt;这里存在的一个更大的变数：如果上游的 LLM 厂商大幅降价，那么之前在成本优化上所做的努力，比如辛辛苦苦优化了 30%-50%，就可能因为外部因素而显得「白费功夫」。当然，也存在原厂优化不力，或者他们转而发展自家 Agent 业务的可能性。因此，对于 AI Agent 创业公司而言，其决策中充满了需要「赌」的成分。&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;Agent 需要哪些能力？怎么做 coding agent？&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;从各个产品的探索中，我们可以窥见一个好的 Agent 需要具备哪些能力：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Memory/知识库&lt;/strong&gt;：例如能自动学习 Cursor rule。（devin/manus 都有了）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Long context 能力&lt;/strong&gt;：indexing &amp;amp; RAG？ 
  &lt;ul&gt; 
   &lt;li&gt;我对这点的作用是有点存疑的。现在进入 Agent 时代之后，Agent 可以自己去 grep 代码找到 context。而且这和我自己开发的流程也很像。还是大量依赖字符串搜索，并不是什么聪明的办法。但其实 grep 仅限于知道要改什么的时候。「xxx 是怎么 work 的」这种模糊的问题就不行了。&lt;/li&gt; 
   &lt;li&gt;但对 long context 的考验其实挺难验证的，需要用的很深才能知道到底什么水平。我也还没有用出感觉来。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Task 能力&lt;/strong&gt;&amp;nbsp;之前我觉得必须需要外化的 todo list，但是现在好像 claude 开始内化这种能力了（但直觉上还是外部的更好？）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;主动沟通与 Interaction&lt;/strong&gt;:&amp;nbsp; 一个好的 Agent 不应该你说什么就做什么。它应该像一个好的乙方，会反问、会澄清意图、会评估风险（比如 Devin 的「置信度评级」）。例如「我要做一个 ppt」，就问用户你有没有已经有的素材，或者课本资料提供等。deep research 类产品在这这事情上做的也不错。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;话说回来，做好 coding agent 是不是需要你自己用 coding agent 用的很好？&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;最后的思考：我们与 AI 的关系&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;那自然语言调度算力与 User-Generated Software 这个概念，可能 somehow 已成为行业共识，但其具体的实现形式，则远未达成一致。&lt;/p&gt; 
&lt;p&gt;聊了这么多，最后还是回到我们自己身上。&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;普通人到底该怎么选？&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;总的来说，现在所有的工具都处于一个「still early, but already useful (if used correctly)」的阶段。它们在简单的小活儿或生成 demo 上表现不错，但在复杂场景下，则非常考验使用者的「手艺」。&lt;/p&gt; 
&lt;p&gt;这门「手艺」既包括 prompt engineering 的技巧，也包括对代码和 Agent 工作原理的理解。「了解 ai 能力边界」也是个有点说烂了的东西。所以，未来能把 Agent 用得最好的，大概率还是专业人士。这就像专业摄影师和普通人的手机拍照，工具模糊了专业间的边界（比如工程师可以搞设计，PM 可以写 demo），但最终还是拉开了上限。&lt;/p&gt; 
&lt;p&gt;Agent 可能是越用越好用的东西，需在团队里一起探索最佳实践、积累 prompt 技巧和知识库，本身就是一种投资。&lt;/p&gt; 
&lt;p&gt;但我也时常怀疑，研究这些东西会不会是徒劳？等到模型能力到达某个奇点，我们直接拥抱最终形态就行了，中间的各种探索和使用经验都会过时。这或许是对的。多说无益，我也不再想按着别人的头让他用 AI，but I just can't help playing with it, it's fun! 😁🤪&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;当 LLM 生成的能力趋向无限的时候，我们要用他来生成什么？&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;一个更深层的问题：AI 的发展和我到底有什么关系？就像我不怎么看论文，感觉离我很远。虽然 ChatGPT 让我学习任何东西都变得容易多了，我动不动想到啥就要和它探讨半天，但我反而更累了。我真的需要了解这么多东西吗？&lt;/p&gt; 
&lt;p&gt;Coding Agent 的发展能让我写越来越多的代码，那我要把那些东西都做出来吗？当生成的能力趋向无限时，我们到底要用它来生成什么？&lt;/p&gt; 
&lt;p&gt;YouWare 这样的产品或许是一种答案。&lt;/p&gt; 
&lt;p&gt;又或者，这本身就是一个不存在的问题，就像实现可控核聚变之后应该怎么办？能人人开上高达吗？&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354572</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354572</guid>
      <pubDate>Sun, 11 May 2025 03:23:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>FreeBSD 14.3 正式发布，包含网络驱动程序更新和 OpenZFS 更新</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;作为 FreeBSD 15 在今年晚些时候发布前的过渡，FreeBSD 14.3 稳定版今日正式发布，这是 stable/14 分支的第四个发行版本。&lt;/p&gt; 
&lt;p&gt;FreeBSD14.3 将 FreeBSD 15 中的多项改进移植回 FreeBSD 14 系列，并进行了一些例行软件包更新和其他修复。&lt;/p&gt; 
&lt;p&gt;FreeBSD 14.3-RELEASE 的一些亮点包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;更新 ZFS 支持以支持 OpenZFS 2.2.7。&lt;/li&gt; 
 &lt;li&gt;基于 Linux 6.14 内核代码合并 Realtek RTW88 和 RTW89 WiFi 驱动程序。&lt;/li&gt; 
 &lt;li&gt;LinuxKPI 代码已改进，支持加密卸载以及 802.11n 和 802.11ac 标准。&lt;/li&gt; 
 &lt;li&gt;Intel IX 以太网驱动程序增加了对 x550 1000BAS-BX SFP 模块的支持。&lt;/li&gt; 
 &lt;li&gt;Thor2 PCI ID 已添加到 Broadcom NetXtreme 「BNXT」 驱动程序中，并支持 400G 速度光模块。&lt;/li&gt; 
 &lt;li&gt;XZ 5.8.1、OpenSSH 9.9p2、OpenSSL 3.0.16 以及许多其他软件包更新。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Syscons 作为旧版系统控制枱驱动程序现已弃用。Syscons 与 UEFI 不兼容，不支持 UTF-8，并且被 Giant 锁定。&lt;/p&gt; 
&lt;p&gt;请访问&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.freebsd.org%2Freleases%2F14.3R%2Fannounce%2F"&gt;FreeBSD.org&lt;/a&gt;&amp;nbsp;下载并了解更多有关今日发布的 FreeBSD 14.3 版本的详细信息。&lt;/p&gt; 
&lt;p&gt;可以从以下站点下载 FreeBSD 14.3-RELEASE：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdownload.freebsd.org%2Freleases%2FISO-IMAGES%2F14.3%2F"&gt;https://download.freebsd.org/releases/ISO-IMAGES/14.3/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;FreeBSD 14.3-RELEASE 虚拟机镜像可以从以下位置下载：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdownload.freebsd.org%2Freleases%2FVM-IMAGES%2F14.3-RELEASE%2F"&gt;https://download.freebsd.org/releases/VM-IMAGES/14.3-RELEASE/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;FreeBSD 14.3-RELEASE BASIC-CI 镜像可以从以下位置下载：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdownload.freebsd.org%2Freleases%2FCI-IMAGES%2F14.3-RELEASE%2F"&gt;https://download.freebsd.org/releases/CI-IMAGES/14.3-RELEASE/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;FreeBSD 14.3-RELEASE OCI 容器镜像可以从以下位置下载：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdownload.freebsd.org%2Freleases%2FOCI-IMAGES%2F14.3-RELEASE%2F"&gt;https://download.freebsd.org/releases/OCI-IMAGES/14.3-RELEASE/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;并且也可在 Docker 和 GitHub 容器存储库中使用。&lt;/p&gt; 
&lt;p&gt;有关安装 FreeBSD 或将现有计算机更新至 14.3-RELEASE 的说明，请参阅：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.freebsd.org%2Freleases%2F14.3R%2Finstallation%2F"&gt;https://www.FreeBSD.org/releases/14.3R/installation/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;FreeBSD 14.3-RELEASE 将支持到 2026 年 6 月 30 日。上一发行版 FreeBSD 14.2-RELEASE 将于 2025 年 9 月 30 日终止支持。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354571/freebsd-14-3</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354571/freebsd-14-3</guid>
      <pubDate>Sun, 11 May 2025 03:13:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>AI 造物社区外包需求——智能小动物超声培训系统</title>
      <description/>
      <link>https://www.oschina.net/ai-creation/details/2018</link>
      <guid isPermaLink="false">https://www.oschina.net/ai-creation/details/2018</guid>
      <pubDate>Sun, 11 May 2025 03:03:00 GMT</pubDate>
    </item>
    <item>
      <title>DeepSeek 前高管秘密创业，新 AI Agent 项目已获顶级 VC 押注</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;据虎嗅消息&lt;/span&gt;&lt;span&gt;，国内大模型公司 DeepSeek 的一位核心高管已于半年前悄然离职创业，并计划在 2025 年圣诞节前后推出其&lt;span&gt;首款&lt;/span&gt;Agent 产品。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;有接近人士向虎嗅透露，该高管曾担任 DeepSeek 的「CTO」角色，不过也有知情人指出，DeepSeek 内部架构中并无明确设置「CTO」职位。该职位在名义上可能并不存在，但确有高管承担类似的技术统筹与研发决策职责。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="260" src="https://oscimg.oschina.net/oscnet/up-1aaf0f82dce771f012b5835523640f473d1.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;另据可靠消息，这一创业项目目前已获得某头部 VC 的融资支持，具体金额暂未披露。从时间线来看，项目正在加速推进，预计将在年底正式对外发布，瞄准 AI Agent 赛道的新一轮竞争。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;据悉，这位前 DeepSeek 高管在任期间，曾主导核心技术方向，并深度参与公司关键产品的研发推进。他的离职及创业，或意味着国内 AI 大模型生态中，一场新的中坚力量正在形成。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;当前，大模型厂商纷纷将注意力从模型能力转向实际落地，AI Agent 被视为最具潜力的应用场景之一。随着创业者与资本的持续涌入，这一赛道的竞争也日益升温。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354565</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354565</guid>
      <pubDate>Sun, 11 May 2025 03:02:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>WWDC25 面向开发者的更新亮点：基础模型框架、Xcode 26、Swift 6.2、App Intents……</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;u&gt;&lt;a href="https://www.oschina.net/news/354559"&gt;除了全新的系统&lt;/a&gt;&lt;/u&gt;，苹果在 WWDC25 上还发布了许多适用于开发者工具的新技术与改进：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;基础模型框架&lt;/li&gt; 
 &lt;li&gt;Xcode 26&lt;/li&gt; 
 &lt;li&gt;App Intents&lt;/li&gt; 
 &lt;li&gt;Swift 6.2&lt;/li&gt; 
 &lt;li&gt;Containerization 框架&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;strong&gt;基础模型框架 (&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#474747"&gt;Foundation Models Framwork&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;新的基础模型框架可使所有开发者使用免费的 AI 推理，为用户带来基于 Apple 智能、支持离线使用且保护隐私的智能新体验。&lt;/p&gt; 
&lt;p&gt;由于该框架原生支持 Swift，开发者仅需使用区区三行代码，即可对 Apple 智能模型进行轻松调用。框架中自带引导式生成和工具调用等技术，可供开发者将生成式能力轻松植入现有 app 内部。例如，开发者 Automattic 将该框架应用于旗下手记写作 app Day One，为用户提供以隐私为中心的智能功能。&lt;/p&gt; 
&lt;p&gt;「基础模型框架帮助我们重新设想了手记的可能。」Automattic Day One 主管 Paul Mayne 表示，「现在我们能够将智能功能与隐私保护相结合，充分体现对用户的高度重视。」&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Xcode 26&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Xcode 26 满载有助于开发者将构想化为现实的智能功能与体验。&lt;/p&gt; 
&lt;p&gt;开发者可以将大语言模型直接接入现有编程工具，编写代码、运行测试和制作文档；对设计进行迭代；修正错误；以及更多操作。开发者也可选用最符合自身需求的模型，例如使用来自其他提供商的 API 密钥，或在搭载 Apple 芯片的 Mac 上运行本地模型。&lt;/p&gt; 
&lt;p&gt;Coding Tools 帮助开发者顺利推进工作流，更高效地完成任务。开发者可在代码中的任何位置调用 Coding Tools，该工具能够提供生成预览或 Playground 等建议操作，或解决特定问题，也可以直接为其他任务生成具体的提示词。&lt;/p&gt; 
&lt;p&gt;Xcode 26 还推出其他有助于开发者保持专注、提高工作效率的功能，包括重新设计的导览体验、对本地化目录作出改进，以及对语音控制功能的进一步支持，例如听写 Swift 代码和完全通过语音方式导览 Xcode 界面。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;App Intents&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;开发者可以借助 App Intents 将 app 的操作和内容与贯穿各个平台的系统体验深度整合， 包括 Siri、聚焦、小组件、控制等等。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Swift 6.2&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Swift 6.2 推出多项强大功能，以提升性能、并发及与 C++、Java 与 JavaScript 等其他语言的互操作性。通过与开源社区的合作，Swift 6.2 现已支持 WebAssembly。&lt;/p&gt; 
&lt;p&gt;基于 Swift 6 严格的并发检查功能，Swift 6.2 简化了单线程代码的写作。开发者现可将模块或独立文件配置为默认运行于主 Actor 环境，从而省去额外注解的必要。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Containerization 框架&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Containerization 框架赋予开发者直接在 Mac 上创建、下载或运行容器映像的能力。其基于针对 Apple 芯片优化的开源框架构建，能够对容器映像进行安全隔离。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-f12698847fd251962a8dabcb596a127209c.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;详情查看：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.apple.com.cn%2Fnewsroom%2F2025%2F06%2Fapple-supercharges-its-tools-and-technologies-for-developers%2F" target="_blank"&gt;https://www.apple.com.cn/newsroom/2025/06/apple-supercharges-its-tools-and-technologies-for-developers/&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354563/wwdc25-technologies-for-developers</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354563/wwdc25-technologies-for-developers</guid>
      <pubDate>Sun, 11 May 2025 02:53:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>WWDC25 开幕：多款新系统亮相、引入全新设计语言</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;6 月 10 日，苹果举办 WWDC25 全球开发者大会，并在首场发布会公布 iOS 26、iPadOS 26、watchOS 26、macOS Tahoe 26、visionOS 26、tvOS 26 等多款新系统。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-c14d9b9ed96cdf3a70d31288b4550dec672.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;更多内容查看苹果官方新闻稿：&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.apple.com.cn%2Fcn%2Fnewsroom%2F2025%2F06%2Fapple-introduces-a-delightful-and-elegant-new-software-design%2F" target="_blank"&gt;Apple 推出灵动活泼、赏心悦目的新软件设计&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.apple.com.cn%2Fnewsroom%2F2025%2F06%2Fmacos-tahoe-26-makes-the-mac-more-capable-and-productive-than-ever%2F" target="_blank"&gt;macOS Tahoe 26 让 Mac 更强大、更高效、更智能&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.apple.com.cn%2Fnewsroom%2F2025%2F06%2Fipados-26-introduces-powerful-new-features-that-push-ipad-even-further%2F" target="_blank"&gt;iPadOS 26 推出强大新功能，令 iPad 特有的功能与多用性再上一层楼&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.apple.com.cn%2Fnewsroom%2F2025%2F06%2Fapple-elevates-the-iphone-experience-with-ios-26%2F" target="_blank"&gt;Apple 推出 iOS 26，再次提升 iPhone 体验&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.apple.com.cn%2Fnewsroom%2F2025%2F06%2Fwatchos-26-delivers-more-personalized-ways-to-stay-active-and-connected%2F" target="_blank"&gt;watchOS 26 以更具个性的方式助力用户充满活力、保持健康、联络无间&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.apple.com.cn%2Fnewsroom%2F2025%2F06%2Fvisionos-26-introduces-powerful-new-spatial-experiences-for-apple-vision-pro%2F" target="_blank"&gt;visionOS 26 为 Apple Vision Pro 带来全新强大空间体验&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;新系统全部采用名为「Liquid Glass（液态玻璃）」的全新设计语言，是继 iOS 7 后的又一次重大设计革新，并按照年份将所有系统的版本命名统一更改为 26。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-bf6304b3294602fd26c3e07a13b98afb90d.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="800" src="https://static.oschina.net/uploads/space/2025/0610/103619_DRmE_2720166.png" width="800" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-070fa90d123030e18c55aab3b8db5ec5228.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-c5f83aec051267d80ebd13b87fa67d34a6d.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-5519b3f2d071f7e311837e5cdbb48d54bc6.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;设计风格更改之外，iOS 26 重新设计了多款系统应用布局，进一步整合了 Apple Intelligence 功能，并为包括 CarPlay 在内的多项内置应用与服务新增功能。watchOS 26 引入了新手势与更智能的智能叠放预测。macOS Tahoe 26 大幅提升了聚焦搜索的功能性。iPadOS 26 带来了全新的窗口系统、文件应用与预览应用等。&lt;/p&gt; 
&lt;ul&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354559</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354559</guid>
      <pubDate>Sun, 11 May 2025 02:37:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>任正非：将来是千百种开源软件满足整个社会需要</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;近日，在深圳华为总部，围绕大众关心的一些热点话题，人民日报记者一行与华为首席执行官任正非面对面交流。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;「不去想困难，干就完了，一步一步往前走」&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：面对外部封锁打压，遇到很多困难，心里怎么想？&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：没有想过，想也没有用。不去想困难，干就完了，一步一步往前走。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：升腾芯片被「警告」使用风险，对华为有什么影响吗？&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：中国做芯片的公司很多，许多都做得不错，华为是其中一家。美国是夸大了华为的成绩，华为还没有这么厉害。要努力做才能达到他们的评价。我们单芯片还是落后美国一代，我们用数学补物理、非摩尔补摩尔，用群计算补单芯片，在结果上也能达到实用状况。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：如果说有困难，主要困难是什么？&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：困难就困难嘛，什么时候没有困难？刀耕火种的时候不困难吗？石器时代不困难吗？人类用石器的时候，哪能想到有高铁。中国在中低端芯片上是可以有机会的，中国数十、上百家芯片公司都很努力。特别是化合物半导体机会更大。硅基芯片，我们用数学补物理、非摩尔补摩尔，利用集群计算的原理，可以达到满足我们现在的需求。软件是卡不住脖子的，那是数学的图形符号、代码，一些尖端的算子、算法垒起来的，没有阻拦索。困难在我们的教育培养、人才梯队的建设。中国将来会有数百、数千种操作系统，支持中国工业、农业、医疗等的进步。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：现在对华为赞扬的声音很多，对华为的认同度很高。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：说我们好，我们压力也很大。骂我们一点，我们会更清醒一点。我们做的是商品，人们使用就会有批评，这是正常的。我们允许人家骂。只要讲真话，即使是批评，我们也支持。赞声与骂声，都不要在意，而要在乎自己能不能做好。把自己做好，就没有问题。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：从您面对困难、批评的心态，感受到您有一颗强大的内心，就是不在乎是表扬还是批评，而是坚定做好自己的事。这应该是华为能走到今天的一个重要原因。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：说我们好的还是太多了，大家更多要去理解搞理论研究的人，他们曲高和寡，老百姓不了解，而且他们要几十年、上百年才看得见贡献。无端指责他们，是不利于国家长远发展的。我们要理解支持搞理论工作的。我们要理解他们的胸怀，他们伟大的默默无闻，才是我们国家的希望。不要捧一个压一个，搞理论研究的是国家未来的希望。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;「理论科学家是孤独的，我们要有战略耐心，要理解他们」&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：怎么看基础理论研究？&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：当我国拥有一定经济实力的时候，要重视理论特别是基础理论的研究。基础研究不止 5—10 年，一般要 10 年、20 年或更长的时间。如果不搞基础研究，就没根。即使叶茂，欣欣向荣，风一吹就会倒的。买国外的产品很贵，因为价格里面就包含他们在基础研究上的投入。所以，中国搞不搞基础研究，也要付钱的，能不能付给自己搞基础研究的人。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：对基础研究，人们可能一时难以理解，会问研究这个有什么用，能产生什么效益。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：科学的突破，世界上理解的人本来就少，不理解的人就不要去评价。爱因斯坦发现光线会弯曲，是一百年后再证实的。贵州有个农学家罗登义，上世纪四十年代，他分析研究水果蔬菜营养成分的时候，发现一种维生素含量很高的野果子刺梨。中国那时还在抗战时期，社会教育水平还很低，没几个人懂。后来写了一篇论文，说刺梨是维 C 之王。经历了近百年，贵州把它做成了一种天然富含维生素的刺梨饮料，维生素饮料中的奢侈品，近百元一瓶，受到追捧，刺梨产业成为农民脱贫致富的渠道。人们才真实认识了在抗日烽火时，在一张破桌旁的罗登义。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：很多研究成果看似一时无关痛痒，最后往往都有大用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：理论科学家是孤独的，我们要有战略耐心，要理解他们。屠呦呦做青蒿素是一样的。还有「探索创新、至诚报国」的黄大年也是一样的。他们头脑中的符号、公式、思维，世界上能与他们沟通的只有几个人。对理论科学家要尊重，因为我们不懂他的文化，社会要宽容，国家要支持。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：基础研究周期会很漫长，但企业是需要讲效益的。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：我们一年 1800 亿投入研发，大概有 600 亿是做基础理论研究，不考核。1200 亿左右投入产品研发，投入是要考核的。没有理论就没有突破，我们就赶不上美国。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：这是一种长期主义，听说华为就有个「黄大年茶思屋」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：黄大年是个伟大的科学家，我国是在海湾战争中发现这个人的。美军在直升机下有一个吊舱，探测萨达姆埋在沙漠里的武器，一开战就准确把它消灭了。再一找，才知道这吊舱是中国人做的，黄大年在英国大学做的一个探矿吊舱，北约用来做武器用。他辞职回国做了吉林大学老师。他用自己的钱，向学校要了一间 40 平米的房子，开了一个茶思屋负责提供免费咖啡，开展「一杯咖啡吸收宇宙能量」。我们得到他家族的授权，利用他的名字，做了一个黄大年茶思屋非盈利的网络平台，免费让大家查阅世界的科技信息。同时，对基础研究开放喇叭口，和各大院校合作。这些都是战略性投入，不考核的。基础理论这一块，我们内部建立一个机制，什么时候能做出来不知道，对科学家也不做要求。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;「社会主义的一个目的就是为了发展社会」&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：美国经济学家理查德·沃尔夫等专家认为，美国为何没有像中国那样发达的高铁系统，主要是因为美国走的是资本主义道路，做什么都要赚钱。中国走的是社会主义的道路，国家主张的是社会效益，高铁、重载铁路、先进的电力网络、发达的高速公路以及通往乡村的水泥路，遍布各处的水利设施、星罗棋布的发电厂……这些并不赚钱，但垫起一个发达的社会基础，为工业、农业现代化作出了贡献，体现的是国有企业的社会价值。而对有竞争的商品实行市场化，通过市场的竞争来调节，使其实现商业价值，依法纳税贡献社会。对此，您怎么看？&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：为什么不赚钱的事，只有社会主义做？社会主义的一个目的就是为了发展社会。我国搞的社会主义市场经济体制是伟大的壮举。从基础设施建设看，我们也只能走社会主义市场经济的道路，不然高铁、高速公路、水坝……这些东西都建不起来。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：您对人工智能的未来前景怎么看？&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：人工智能也许是人类社会最后一次技术革命，当然可能还有能源的核聚变。人工智能发展要经历数十年、数百年。不要担心，中国也有很多优势。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：您怎么看这些优势？&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：中国有数亿青少年，他们是国家的未来。总书记讲过，一个国家、一个民族的强盛，总是以文化兴盛为支撑的。人工智能在技术上的要害，是要有充足的电力、发达的信息网络。发展人工智能要有电力保障，中国的发电、电网传输都是非常好的，通信网络是世界最发达的，东数西算的理想是可能实现的。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：其他优势呢？&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：芯片问题其实没必要担心，用叠加和集群等方法，计算结果上与最先进水平是相当的。软件方面，将来是千百种开源软件满足整个社会需要。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：怎么看中国的未来？&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：弗里德曼离开我们公司，自己买了一张二等座的高铁票，去感受中国。后来写了篇文章《我看到了未来，它不在美国》。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：我们看过这篇文章，他认为：「中国制造业像今天这样强大的原因，不仅在于它的高质量，能更便宜地生产东西，也在于它能更快、更好、更智能地生产东西，而且正在越来越多地将人工智能融入产品中。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：从根本上说，算法不掌握在 IT 人手里面，而是掌握在电力专家、基建专家、煤炭专家、医药专家、各类行业专家……手里面。实践层面看，中国制造业人工智能运用非常快，会诞生很多中国模型。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：民营企业发展，需要国家提供什么支持？&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：法治化、市场化，政府依法依规行政。企业主要是价值创造、技术突破，遵纪守法，依法纳税。这个和谐的发展模式，就会让经济活力一点点地散发出来。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;问：怎么看待开放与发展？&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;答：国家越来越开放，开放会促使我们更加进步。国家在党的领导下，行政上是统一的，政令是通达的，逐步形成统一的大市场是可能的，一定会突破所有的封锁，实现伟大的复兴。 (来源:人民日报)&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354552</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354552</guid>
      <pubDate>Sun, 11 May 2025 02:12:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Solon Flow Helloworld（通用流编排框架）</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#24292e; text-align:start"&gt;探索视频：&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;iframe frameborder="0" height="400" scrolling="no" src="https://player.bilibili.com/player.html?isOutside=true&amp;amp;aid=114633566389996&amp;amp;bvid=BV1mLTAzsEBV&amp;amp;cid=30342844001&amp;amp;p=1" style="box-sizing: border-box; color: rgb(36, 41, 46); font-family: -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Segoe UI&amp;quot;, Helvetica, Arial, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;" width="700" referrerpolicy="no-referrer"&gt;&lt;/iframe&gt;&lt;/p&gt; 
&lt;h3&gt;1、新建项目&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;可以用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsolon.noear.org%2Fstart%2F" target="_blank"&gt;Solon Initializr&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;生成一个模板项目。新建项目之后，添加依赖&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.noear&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;solon-flow&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2、添加配置&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;添加应用配置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;&lt;span style="color:#986801"&gt;solon.flow:&lt;/span&gt;
  &lt;span style="color:#4078f2"&gt;-&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"classpath:flow/*.yml"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;添加流处理配置（支持 json 或 yml 格式），例：&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;flow/demo1.chain.yml&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;&lt;span style="color:#986801"&gt;id:&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"c1"&lt;/span&gt;
&lt;span style="color:#986801"&gt;layout:&lt;/span&gt; 
  &lt;span style="color:#4078f2"&gt;-&lt;/span&gt; { &lt;span style="color:#986801"&gt;id:&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"n1"&lt;/span&gt;, &lt;span style="color:#986801"&gt;type:&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"start"&lt;/span&gt;, &lt;span style="color:#986801"&gt;link:&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"n2"&lt;/span&gt;}
  &lt;span style="color:#4078f2"&gt;-&lt;/span&gt; { &lt;span style="color:#986801"&gt;id:&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"n2"&lt;/span&gt;, &lt;span style="color:#986801"&gt;type:&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"activity"&lt;/span&gt;, &lt;span style="color:#986801"&gt;link:&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"n3"&lt;/span&gt;, &lt;span style="color:#986801"&gt;task:&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"System.out.println(\"hello world!\");"&lt;/span&gt;}
  &lt;span style="color:#4078f2"&gt;-&lt;/span&gt; { &lt;span style="color:#986801"&gt;id:&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"n3"&lt;/span&gt;, &lt;span style="color:#986801"&gt;type:&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"end"&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;示意图：&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;&lt;img src="https://oscimg.oschina.net/oscnet//730d1e295b9510105280a40cb44b7888.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;3、代码应用&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;注解模式&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Component;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Inject;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.core.bean.LifecycleBean;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.flow.FlowEngine;

&lt;span style="color:#4078f2"&gt;@Component&lt;/span&gt;
&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;class&lt;/span&gt; &lt;span style="color:#c18401"&gt;DemoCom&lt;/span&gt; &lt;span style="color:#a626a4"&gt;implements&lt;/span&gt; &lt;span style="color:#c18401"&gt;LifecycleBean&lt;/span&gt; {
    &lt;span style="color:#4078f2"&gt;@Inject&lt;/span&gt; 
    &lt;span style="color:#a626a4"&gt;private&lt;/span&gt; FlowEngine flowEngine;
    
    &lt;span style="color:#4078f2"&gt;@Override&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;void&lt;/span&gt; &lt;span style="color:#4078f2"&gt;start&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span style="color:#a626a4"&gt;throws&lt;/span&gt; Throwable {
        flowEngine.eval(&lt;span style="color:#50a14f"&gt;"c1"&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;原生 Java 模式&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.flow.FlowEngine;

&lt;span style="color:#986801"&gt;FlowEngine&lt;/span&gt; &lt;span style="color:#986801"&gt;engine&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; FlowEngine.newInstance();

&lt;em&gt;//加载链配置&lt;/em&gt;
engine.load(&lt;span style="color:#50a14f"&gt;"classpath:flow/*"&lt;/span&gt;);

&lt;em&gt;//执行&lt;/em&gt;
engine.eval(&lt;span style="color:#50a14f"&gt;"c1"&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354549</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354549</guid>
      <pubDate>Sun, 11 May 2025 02:10:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>连接关键点：使用 ES|QL 联接实现更丰富的可观测性洞察</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;作者：来自 Elastic&amp;nbsp;&lt;/span&gt;Luca Wintergerst&lt;/p&gt; 
&lt;p&gt;&lt;img height="539" src="https://oscimg.oschina.net/oscnet/up-615c860617e5f908110763171caf738b13c.png" width="1041" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;ES|QL 的 LOOKUP JOIN 现已进入技术预览阶段，它允许你在查询时对日志、指标和追踪进行丰富处理，无需在摄取时进行&lt;/span&gt;非规范化&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;。动态添加部署、基础设施或业务上下文，减少存储占用，加速 Elastic Observability 中的根本原因分析。&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;连接关键点：使用 ES|QL 联接实现更丰富的可观测性洞察&lt;/h2&gt; 
&lt;p style="color:#4d4d4d; margin-left:0; margin-right:0; text-align:start"&gt;你可能已经看到我们最近发布的关于&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fblog%2Fesql-lookup-join-elasticsearch" target="_blank"&gt;Elasticsearch 中引入 SQL 风格联接&lt;/a&gt;的公告，也就是 ES|QL 的 LOOKUP JOIN 命令（目前处于技术预览阶段！）。虽然那篇文章介绍了基础内容，但现在我们将从可观测性的角度更深入地探讨这一功能。这项新的联接能力，如何帮助工程师和 SRE 更好地理解日志、指标和追踪数据，同时通过减少数据反规范化来提升 Elasticsearch 的存储效率？&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style="color:#4d4d4d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;span style="background-color:#eef0f4; color:#4f4f4f"&gt;：在深入细节之前，需要再次强调，这项功能目前依赖一个特殊的查找索引（lookup index）。目前&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;还无法&lt;/strong&gt;&lt;span style="background-color:#eef0f4; color:#4f4f4f"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;对任意索引进行 JOIN 操作。&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;可观测性不只是收集数据，更重要的是理解数据。很多时候，原始遥测数据 —— 例如一条日志、一项指标或一个追踪片段——缺乏快速诊断或影响评估所需的完整上下文。我们需要关联数据、使用业务或基础设施上下文对其进行丰富，并提出更高级的问题。&lt;/p&gt; 
&lt;p&gt;传统上，在 Elasticsearch 中实现这些能力的方法包括在摄取时对数据进行非规范化（例如通过使用 enrich processor 的 ingest pipeline），或在客户端执行联接。&lt;/p&gt; 
&lt;p&gt;通过在数据流入时添加必要的上下文（如主机详情或用户属性），每个文档在进入索引时就已准备好用于查询和分析，无需后续额外处理。这种方法在很多场景下运行良好，特别是当引用数据变化缓慢或丰富字段对几乎每次查询都至关重要时。&lt;/p&gt; 
&lt;p&gt;但随着环境变得越来越动态和多样化，频繁更新引用数据（或避免在每个文档中重复存储字段）的需求也暴露了一些权衡和限制。&lt;/p&gt; 
&lt;p&gt;在 Elasticsearch 8.18 和 9.0 中引入的 ES|QL LOOKUP JOIN 提供了另一种更加灵活的选择，适用于那些需要实时查找和最小重复数据的场景。这两种方法 —— 摄取时丰富与查询时 LOOKUP JOIN —— 根据更新频率、查询性能和存储考量等不同用例需求，可以互为补充并同时有效。&lt;/p&gt; 
&lt;h2&gt;为什么在可观测性中使用 Lookup Join&lt;/h2&gt; 
&lt;p style="color:#4d4d4d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;code&gt;Lookup join&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;保持了灵活性。你可以在查询时根据需要动态决定是否查找额外信息来辅助调查。&lt;/p&gt; 
&lt;p style="color:#4d4d4d; margin-left:0; margin-right:0; text-align:start"&gt;以下是一些示例：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="color:#4d4d4d; margin-left:0; margin-right:0"&gt;&lt;strong&gt;部署信息&lt;/strong&gt;：是哪个版本的代码在产生这些错误？&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="color:#4d4d4d; margin-left:0; margin-right:0"&gt;&lt;strong&gt;基础设施映射&lt;/strong&gt;：是哪个 Kubernetes 集群或云区域延迟较高？使用了什么硬件？&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="color:#4d4d4d; margin-left:0; margin-right:0"&gt;&lt;strong&gt;业务上下文&lt;/strong&gt;：这个性能下降是否影响到了关键客户？&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="color:#4d4d4d; margin-left:0; margin-right:0"&gt;&lt;strong&gt;团队归属&lt;/strong&gt;：哪个团队负责这个抛出异常的服务？&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#4d4d4d; margin-left:0; margin-right:0; text-align:start"&gt;要把这类信息完美地反规范化到每一条日志或指标数据中，既困难又低效。而且像部署列表、服务器清单、客户等级或服务归属这类查找&lt;span style="color:#4ea1db !important"&gt;数据集&lt;/span&gt;，通常和遥测数据是独立变化的。&lt;/p&gt; 
&lt;p style="color:#4d4d4d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;code&gt;LOOKUP JOIN&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;在这里非常适用，原因如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;查找索引可写：&lt;/strong&gt;更新你的部署列表、CMDB 导出或值班表到查找索引中，下一次的 ES|QL 查询会立即使用这些最新数据。无需重新执行复杂的 enrich 策略或重新索引数据。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;灵活性：&lt;/strong&gt;你可以在查询时决定需要联接哪个上下文。也许你今天关注的是部署版本，明天关注的则是云区域。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;更简单的设置：&lt;/strong&gt;如之前的文章所说，不需要维护任何 enrich 策略。只需创建一个带有 index.mode: lookup 的索引并加载你的数据——每个查找索引最多支持 20 亿条文档。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;可观测性使用场景与 ES|QL 示例&lt;/h2&gt; 
&lt;p style="color:#4d4d4d; margin-left:0; margin-right:0; text-align:start"&gt;现在让我们看一些示例，了解&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;Lookup Join&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;如何提供帮助。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;使用部署上下文丰富错误日志&lt;/strong&gt;&lt;/h3&gt; 
&lt;p style="color:#4d4d4d; margin-left:0; margin-right:0; text-align:start"&gt;假设你发现&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;checkout-service&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;的错误突然增加。你的日志已经流入数据流中，但它们只包含服务名称。这些文档本身没有任何与部署活动相关的信息。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;FROM logs-*
  | WHERE log.level == "error"
  | WHERE service.name == "opbeans-ruby"&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;你需要知道这些错误是否与最近的部署有关。为此，我们可以维护一个名为&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;deployments_info_lkp&lt;/code&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;的索引（设置为&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;index.mode: lookup&lt;/code&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;），它将服务名称映射到其部署时间。这个索引可以在每次部署发生时由我们的 CI/CD 流水线自动更新。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;PUT /deployments_info_lkp
{
  "settings": {
    "index.mode": "lookup"
  },
  "mappings": {
    "properties": {
      "service": {
        "properties": {
          "name": {
            "type": "keyword"
          },
          "deployment_time": {
            "type": "date"
          },
          "version": {
            "type": "keyword"
          }
        }
      }
    }
  }
}
 
# Bulk index the deployment documents
POST /_bulk
{ "index" : { "_index" : "deployments_info_lkp" } }
{ "service.name": "opbeans-ruby", "service.version": "1.0", "deployment_time": "2025-05-22T06:00:00Z" }
{ "index" : { "_index" : "deployments_info_lkp" } }
{ "service.name": "opbeans-go", "service.version": "1.1.0", "deployment_time": "2025-05-22T06:00:00Z" }&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#4d4d4d; margin-left:0; margin-right:0; text-align:start"&gt;利用这些信息，你现在可以编写一个将这两个数据源连接起来的查询。&lt;/p&gt; 
&lt;p style="color:#4d4d4d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;ES|QL 查询：&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;FROM logs-* 
  | WHERE log.level == "error"
  | WHERE service.name == "opbeans-ruby"
  | LOOKUP JOIN deployments_info_lkp ON service.name &lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;这本身就是排查问题的重要一步。现在每条错误日志中都包含了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;deployment_time&lt;/code&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;列。接下来的最后一步是利用这个字段进行进一步筛选。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="发现" src="https://oscimg.oschina.net/oscnet//90dcf764988bfb694a2c5201ac777e24.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;我们从 lookup 索引中连接到的任何数据，都可以像 ES|QL 查询中其他常规可用数据一样处理。这意味着我们可以基于它进行过滤，并检查是否有最近的部署。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;FROM logs-*
  | WHERE log.level == "error"
  | WHERE service.name == "opbeans-ruby"
  | LOOKUP JOIN deployments_info_lkp ON service.name 
  | KEEP message, service.name, service.version, deployment_time 
  | WHERE deployment_time &amp;gt; NOW() - 2h&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img alt="发现 2" src="https://oscimg.oschina.net/oscnet//803e8424abc6161921bd69895c5346d2.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;使用 JOIN 节省磁盘空间&lt;/h3&gt; 
&lt;p style="color:#4d4d4d; margin-left:0; margin-right:0; text-align:start"&gt;通过在每条日志事件中直接包含主机操作系统或云服务商等上下文信息来反规范化数据，虽然查询方便，但会增加存储消耗，尤其是在高流量数据流中。与其重复存储这些经常冗余的信息，不如利用 join 按需获取，从而节省宝贵的磁盘空间。虽然压缩通常能很好地处理重复数据，但完全移除这些字段仍能显著减少存储。&lt;/p&gt; 
&lt;p&gt;在这个示例中，我们使用了 1,000,000 条 Kubernetes 容器日志数据，采用 Kubernetes 集成的默认映射，&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;启用了 l&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fdocs%2Fmanage-data%2Fdata-store%2Fdata-streams%2Flogs-data-stream" target="_blank"&gt;ogsdb 索引模式&lt;/a&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;。&lt;/span&gt;该索引的初始大小为 35.5MB。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;GET _cat/indices/k8s-logs-default?h=index,pri.store.size
### 
k8s-logs-default       35.5mb&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;通过磁盘使用情况 API（&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fdocs%2Fapi%2Fdoc%2Felasticsearch%2Foperation%2Foperation-indices-disk-usage" target="_blank"&gt;disk usage API&lt;/a&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;），我们观察到像&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;host.os&lt;/code&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;和&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;cloud.*&lt;/code&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;这样的字段大约占据了磁盘上索引总大小（35.5MB）的 5%。这些字段在某些情况下有用，但像&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;os.name&lt;/code&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;这样的信息很少被查询。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// Example host.os structure
"os": {
  "codename": "Plow", "family": "redhat", "kernel": "6.6.56+",
  "name": "Red Hat Enterprise Linux", "platform": "rhel", "type": "linux", "version": "9.5 (Plow)"
}
 
// Example cloud structure
"cloud": {
  "account": { "id": "elastic-observability" },
  "availability_zone": "us-central1-c",
  "instance": { "id": "5799032384800802653", "name": "gke-edge-oblt-edge-oblt-pool-46262cd0-w905" },
  "machine": { "type": "e2-standard-4" },
  "project": { "id": "elastic-observability" },
  "provider": "gcp", "region": "us-central1", "service": { "name": "GCE" }
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;与其在每个文档中存储这些信息，不如在 ingest pipeline 中去除这些字段：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;PUT _ingest/pipeline/drop-host-os-cloud
{
  "processors": [
      { "remove": { "field": "host.os" } },
      { "set": { "field": "tmp1", "value": "{{cloud.instance.id}}" } }, // Temporarily store the ID
      { "remove": { "field": "cloud" } },                             // Remove the entire cloud object
      { "set": { "field": "cloud.instance.id", "value": "{{tmp1}}" } }, // Restore just the cloud instance ID
      { "remove": { "field": "tmp1", "ignore_missing": true } }         // Clean up temporary field
    ]
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;重新索引（并强制合并为一个段）后，索引大小如下，节省了大约 5% 的空间。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;GET _cat/indices/k8s-logs-*?h=index,pri.store.size
### 
k8s-logs-default             33.7mb
k8s-logs-drop-cloud-os       35.5mb&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;现在，为了在分析时重新获得被移除的 host.os 和 cloud.* 信息，而不必存储在每条日志中，我们可以创建一个 lookup 索引。该索引将存储完整的主机和云元数据，使用我们在日志中保留的 cloud.instance.id 作为键。这个 instance_metadata_lkp 索引会比节省的空间小得多，因为它只需为每个唯一实例存储一条文档。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Create the lookup index for instance metadata
PUT /instance_metadata_lkp
{
  "settings": {
    "index.mode": "lookup"
  },
  "mappings": {
    "properties": {
      "cloud.instance.id": {  # The join key we kept in the logs
        "type": "keyword"
      },
      "host.os": {           # The full host.os object we removed
        "type": "object",
        "enabled": false      # Often don't need to search sub-fields here
      },
      "cloud": {             # The full cloud object we removed (mostly)
         "type": "object",
         "enabled": false     # Often don't need to search sub-fields here
      }
    }
  }
}
 
# Bulk index sample instance metadata (keyed by cloud.instance.id)
# This data might come from your cloud provider API or CMDB
POST /_bulk
{ "index" : { "_index" : "instance_metadata_lkp", "_id": "5799032384800802653" } }
{ "cloud.instance.id": "5799032384800802653", "host.os": { "codename": "Plow", "family": "redhat", "kernel": "6.6.56+", "name": "Red Hat Enterprise Linux", "platform": "rhel", "type": "linux", "version": "9.5 (Plow)" }, "cloud": { "account": { "id": "elastic-observability" }, "availability_zone": "us-central1-c", "instance": { "id": "5799032384800802653", "name": "gke-edge-oblt-edge-oblt-pool-46262cd0-w905" }, "machine": { "type": "e2-standard-4" }, "project": { "id": "elastic-observability" }, "provider": "gcp", "region": "us-central1", "service": { "name": "GCE" } } }&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:#4d4d4d"&gt;通过这种设置，当你需要日志的完整主机或云上下文时，只需在 ES|QL 查询中使用 LOOKUP JOIN，并继续基于 lookup 索引中的数据进行过滤。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;FROM logs-* 
  | LOOKUP JOIN instance_metadata_lkp ON cloud.instance.id 
  | WHERE cloud.region == "us-central1"&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这种方法允许我们在需要时查询完整上下文（例如，按 host.os.name 或 cloud.region 过滤日志），同时通过避免冗余数据的反规范化，显著减少高流量日志索引的存储占用。&lt;/p&gt; 
&lt;p&gt;需要注意的是，低基数的元数据字段通常压缩效果很好，这里大部分存储节省来自 host.os.name 和 cloud.instance.name 字段的 「text」 映射。请务必使用 disk usage API 来评估这种方法是否适合你的具体用例。&lt;/p&gt; 
&lt;h2&gt;开始使用 Observability 的 Lookup&lt;/h2&gt; 
&lt;p style="color:#4d4d4d; margin-left:0; margin-right:0; text-align:start"&gt;创建必要的 lookup 索引很简单。正如我们最初的博客文章所述，你可以使用 Kibana 的索引管理界面、Create Index API 或文件上传工具，关键是在索引设置中将 "index.mode" 设置为 "lookup"。&lt;/p&gt; 
&lt;p style="color:#4d4d4d; margin-left:0; margin-right:0; text-align:start"&gt;对于 Observability，可以考虑自动填充这些 lookup 索引：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="color:#4d4d4d; margin-left:0; margin-right:0"&gt;定期从你的 CMDB、CRM 或 HR 系统导出数据。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="color:#4d4d4d; margin-left:0; margin-right:0"&gt;让你的 CI/CD 流水线在成功部署后更新 deployments_lkp 索引。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="color:#4d4d4d; margin-left:0; margin-right:0"&gt;使用 Logstash 等工具，配置 elasticsearch 输出写入你的 lookup 索引。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;性能和替代方案说明&lt;/h2&gt; 
&lt;p style="color:#4d4d4d; margin-left:0; margin-right:0; text-align:start"&gt;虽然功能强大，但 joins 并非免费。每个 LOOKUP JOIN 都会增加查询的处理开销。对于非常静态的上下文数据（例如主机永久所在的云区域）且几乎每次查询都需要时，传统的在 ingest 时丰富数据的方法，可能在特定查询上性能更优，前期处理和存储开销换取查询速度。&lt;/p&gt; 
&lt;p&gt;但是，对于 Observability 中常见的动态、灵活和有针对性的丰富场景，比如映射不断变化的部署、用户分组或团队结构，LOOKUP JOIN 提供了一个高效且更易管理的解决方案。&lt;/p&gt; 
&lt;h2&gt;结论&lt;/h2&gt; 
&lt;p style="color:#4d4d4d; margin-left:0; margin-right:0; text-align:start"&gt;ES|QL 的 LOOKUP JOIN 让你能在查询时轻松关联并丰富日志、指标和跟踪数据，结合最新的外部信息；你可以更快地从发现问题到理解其范围、影响和根本原因。&lt;/p&gt; 
&lt;p&gt;该功能目前在 Elasticsearch 8.18 和 Serverless 中处于技术预览阶段，现已在 Elastic Cloud 上可用。我们鼓励你用自己的 Observability 数据试用，并通过 Discover 中 ES|QL 编辑器的「Submit feedback」按钮分享反馈。期待看到你如何用它来连接系统中的点！&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354548</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354548</guid>
      <pubDate>Sun, 11 May 2025 02:07:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>内网 IM 选型逻辑：企业为何青睐自研或外采私有化 IM</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;在数字化办公与数据安全需求交织的背景下，企业对内网&lt;/span&gt;&lt;span&gt;IM（即时通讯）的选择已超越工具层面，成为关乎组织效率、数据主权与合规底线的战略决策。无论是自研还是外采私有化&amp;nbsp;IM，其核心逻辑均围绕&amp;nbsp;「安全可控」「效率适配」「业务融合」&amp;nbsp;三大维度展开，以下从企业实际需求角度剖析深层动因。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;&lt;img alt="测试-账号管控 2.jpg" src="https://oscimg.oschina.net/oscnet//075535439c17443ee0aef358e5ccb3d2.jpg" width="1054" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;一、数据安全：内网&lt;/span&gt;&lt;span&gt;IM&amp;nbsp;的生存底线&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;1.&amp;nbsp;物理隔绝与主权掌控&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;公有云&lt;/span&gt;&lt;span&gt;IM 的数据存储与传输依赖第三方服务器，而企业内网&amp;nbsp;IM（自研或私有化部署）通过本地化服务器搭建，将通讯数据完全限定在企业自有局域网内。金融机构、军工企业等对数据主权要求极高的组织，需确保交易信息、研发机密等敏感内容不触碰公网边界，例如某国有银行核心交易部门的内网&amp;nbsp;IM&amp;nbsp;需满足&amp;nbsp;「数据不出园区」&amp;nbsp;的硬性要求，自研或私有化部署是唯一选择。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;2.&amp;nbsp;全链路加密与权限细管&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;自研&lt;/span&gt;&lt;span&gt;/私有化 IM 可根据企业需求定制加密协议（如国密算法&amp;nbsp;SM4），实现消息内容、文件传输、音视频流的全链路动态加密。某涉密科研单位的内网&amp;nbsp;IM&amp;nbsp;自研方案中，聊天消息采用&amp;nbsp;「一消息一密钥」&amp;nbsp;机制，密钥仅在本地局域网生成与销毁；权限管控精细，这是通用&amp;nbsp;IM&amp;nbsp;工具无法提供的定制化安全策略。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;3.&amp;nbsp;合规审计与溯源需求&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;政府、医疗等行业需满足合规要求，内网&lt;/span&gt;&lt;span&gt;IM&amp;nbsp;的操作日志需完整记录消息发送、文件访问、权限变更等行为，并支持按时间、用户、关键词检索。外采私有化 IM（如&amp;nbsp;BeeWorks）通过预置审计模块满足合规底线，而自研方案可进一步与企业内部审计系统深度集成。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;二、业务融合：从通讯工具到协作中枢&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;1.&amp;nbsp;系统集成与数据互通&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;企业内网&lt;/span&gt;&lt;span&gt;IM&amp;nbsp;需与&amp;nbsp;OA、ERP、CRM&amp;nbsp;等业务系统深度融合：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;外采私有化：通过标准化&lt;/span&gt;&lt;span&gt;API&amp;nbsp;实现集成，某券商外采&amp;nbsp;IM&amp;nbsp;后，将交易风控系统的异常订单消息推送至交易员聊天窗口，处置时间从&amp;nbsp;15&amp;nbsp;分钟缩短至&amp;nbsp;3&amp;nbsp;分钟。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;2.&amp;nbsp;行业特性与专属功能&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;不同行业对内网&lt;/span&gt;&lt;span&gt;IM&amp;nbsp;的需求存在显著差异：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;金融行业：需要&lt;/span&gt;&lt;span&gt;IM&amp;nbsp;支持交易信息加密与权限隔离，某城市商业银行外采私有化&amp;nbsp;IM&amp;nbsp;后，实现&amp;nbsp;「投行部门文件禁止离开总部局域网」&amp;nbsp;的权限策略；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;医疗行业：需&lt;/span&gt;&lt;span&gt;IM&amp;nbsp;支持电子病历加密传输与阅后即焚，某肿瘤医院自研&amp;nbsp;IM&amp;nbsp;设置&amp;nbsp;「患者隐私消息&amp;nbsp;10&amp;nbsp;分钟自动销毁」&amp;nbsp;功能，符合《个人信息保护法》要求。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;3.&amp;nbsp;组织架构与协同效率&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;大型集团企业的多层级架构需要&lt;/span&gt;&lt;span&gt;IM 具备灵活的通讯录管理能力：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;可对接企业&lt;/span&gt;&lt;span&gt;HR&amp;nbsp;系统，自动同步组织架构变更，某央企通过自研方案实现&amp;nbsp;「总部&amp;nbsp;-&amp;nbsp;子公司&amp;nbsp;-&amp;nbsp;部门」&amp;nbsp;三级通讯录实时更新；外采私有化&amp;nbsp;IM（如&amp;nbsp;BeeWorks）支持百万级通讯录架构，某能源集团将 20 万员工的组织关系完整映射至&amp;nbsp;IM&amp;nbsp;系统，跨部门沟通效率提升 40%。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;三、自研&lt;/span&gt;&lt;span&gt;vs&amp;nbsp;外采私有化：成本与风险的权衡&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;1.&amp;nbsp;自研方案：高投入与高定制的选择&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;优势：完全自主可控，可深度适配企业特殊流程（如军工单位的密级管理），长期使用成本随规模下降；&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;挑战：需投入百人级研发团队（年均成本超千万），开发周期长达&lt;/span&gt;&lt;span&gt;12-18&amp;nbsp;个月，且后续维护依赖技术团队。某通信运营商自研&amp;nbsp;IM&amp;nbsp;投入&amp;nbsp;3&amp;nbsp;年时间，最终实现与基站监控系统的无缝联动，但初期迭代&amp;nbsp;bug&amp;nbsp;率较高。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;2.&amp;nbsp;外采私有化：标准化与灵活性的平衡&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;优势：部署周期短（通常&lt;/span&gt;&lt;span&gt;1-3&amp;nbsp;个月），成本可控（百万级采购费&amp;nbsp;+&amp;nbsp;年度服务费），且厂商提供持续安全更新；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;挑战：定制化能力受限于产品框架，复杂业务集成需额外开发。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;企业选择自研或外采私有化内网&lt;/span&gt;&lt;span&gt;IM，本质是对&amp;nbsp;「安全可控性」「业务适配度」「成本效益比」&amp;nbsp;的综合博弈。对于金融、军工等对安全敏感的行业，自研方案是筑牢底线的必然选择；而对于大多数企业，外采成熟的私有化&amp;nbsp;IM（如&amp;nbsp;BeeWorks）可在可控成本内实现&amp;nbsp;「安全&amp;nbsp;+&amp;nbsp;效率」&amp;nbsp;的双重目标。无论何种路径，内网&amp;nbsp;IM&amp;nbsp;已成为企业数字化基建的核心组件，其选型决策将直接影响组织在数据安全时代的竞争力。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354546</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354546</guid>
      <pubDate>Sun, 11 May 2025 02:05:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>一个 Transformer 训练生成式模型的例子</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;最近在看 chatGPT,想着 chatGPT 是怎么训练出来的，不涉及神经网络算法，可以使用 Transformer 玩一下&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import Dataset, DataLoader

# 构造词表
vocab = ["&amp;lt;PAD&amp;gt;", "&amp;lt;BOS&amp;gt;", "&amp;lt;EOS&amp;gt;", "明天", "天气", "很", "好"]
word2idx = {w: i for i, w in enumerate(vocab)}
idx2word = {i: w for w, i in word2idx.items()}

# 示例训练数据：输入和标签都偏移一位
# 输入: &amp;lt;BOS&amp;gt; 明天，天气，很
# 输出: 明天，天气，很 好

inputs = torch.tensor([
    [word2idx["&amp;lt;BOS&amp;gt;"], word2idx["明天"], word2idx["天气"], word2idx["很"]]
])

labels = torch.tensor([
    [word2idx["明天"], word2idx["天气"], word2idx["很"], word2idx["好"]]
])

class TinyTransformerModel(nn.Module):
    def __init__(self, vocab_size, d_model=32, nhead=2, num_layers=2):
        super().__init__()
        self.embedding = nn.Embedding(vocab_size, d_model)
        self.pos_encoding = nn.Parameter(torch.randn(1, 100, d_model))  # 最多 100 个词
        encoder_layer = nn.TransformerEncoderLayer(d_model, nhead)
        self.transformer = nn.TransformerEncoder(encoder_layer, num_layers)
        self.fc = nn.Linear(d_model, vocab_size)

    def forward(self, x):
        x = self.embedding(x) + self.pos_encoding[:, :x.size(1)]
        x = self.transformer(x)
        return self.fc(x)
model = TinyTransformerModel(vocab_size=len(vocab))
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)
loss_fn = nn.CrossEntropyLoss()

for epoch in range(50):
    model.train()
    out = model(inputs)  # [batch_size, seq_len, vocab_size]
    loss = loss_fn(out.view(-1, len(vocab)), labels.view(-1))
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    
    if epoch % 20 == 0:
        print(f"Epoch {epoch}, loss: {loss.item():.4f}")



def generate(model, start_tokens, max_len=5):
    model.eval()
    input_ids = torch.tensor([start_tokens])
    for _ in range(max_len):
        with torch.no_grad():
            logits = model(input_ids)
        next_token = logits[0, -1].argmax().item()
        input_ids = torch.cat([input_ids, torch.tensor([[next_token]])], dim=1)
        if next_token == word2idx["&amp;lt;EOS&amp;gt;"] or len(input_ids[0]) &amp;gt; max_len:
            break
    return [idx2word[i] for i in input_ids[0].tolist()]

# 测试
generated = generate(model, [word2idx["&amp;lt;BOS&amp;gt;"]])
print("生成结果：", " ".join(generated))
&lt;/code&gt;&lt;/pre&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354538</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354538</guid>
      <pubDate>Sun, 11 May 2025 01:27:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>Dell Pro Desktop 全新 AI PC 家族，现已上市！</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//e15edc4c6886f8a4bcebd56717987997.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//e2bf758ff39ceae2449b75689e268602.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//47faff018eb323c18432666ebcebae0f.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//027214075b798f1f6d7c71ad1a3e05ee.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ebf2fa"&gt;当混合办公成为新常态，企业的设备采购清单开始经历残酷的 "适者生存" 法则——那些传统设备正在被扫地出门，取而代之的是能适配敏捷办公的智能新物种。就在昨天，戴尔科技强势出手，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ebf2fa"&gt;全面升级了 Dell Pro DT 产品线，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ebf2fa"&gt;从体积仅为 1.2L 的小清新 Dell Pro Micro，到拥有强大算力的 Dell Pro Tower，掀起了一场颠覆办公效率的智能革命，重新定义了企业的数字战斗力！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#0076ce"&gt;&lt;span style="background-color:#ffffff"&gt;商用台式机首款 AI PC&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro DT 系列 AI PC 已于 3 月 27 日正式上市，作为全新登场的 「实力派选手」，它传承自全球单一品牌销量第一的 OptiPlex 商用台式机。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;凭借着诸多超能力，完美契合现代商业用户五花八门的需求。到底有多厉害？一起来瞧瞧！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;Dell Pro DT 在&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;可靠性方面&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;绝对行业领先，首年平均无故障率高达&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;99%，高效散热设计&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;更是功不可没，即便长时间高负荷运行，也能冷静应对，稳定得不像话。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//db4401eb30a14bfd90a930b412cf90df.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;不仅如此，Dell Pro DT 选用的&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;可溯源部件&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;都遵循高标准，从全球一线供应商处精挑细选优质电子元器件，每一个部件都品质过硬。而且，它还通过了&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;军标测试认证，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;严格的质量控制让它无惧任何恶劣环境，始终稳如泰山，持续为商业用户高效运转。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;「易管理」&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;是商用客户的核心需求。商用客户台式机部署的数量级别通常在成百上千台，如何在不同使用地点部署机器？如何给这些不同地点的设备安装软件？如果发生故障，如何尽快维护修复，保证用户业务运行的连续稳定运行？这些都是 IT 最重要的考虑因素和面临的挑战。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/e05934c8e620469fa2d5499d5edb415f~tplv-tt-shrink:640:0.image?lk3s=06827d14&amp;amp;traceid=20250610070747C08ECE13D534D0524AB9&amp;amp;x-expires=2147483647&amp;amp;x-signature=3tcneRISEqHpB0jZOeno2K5aaWs%3D" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;但您不用担心，管理难题在 Dell Pro DT 面前根本不是事儿！它通过&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;统一的平台和芯片组设计，支持超多管理功能。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;不管是面对多种 CPU 选择，还是要管理大量设备，IT 人员都能轻松拿捏，仿佛拥有了「一键管理」的超能力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;再看看它的&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;升级维护设计，电源指示灯&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;清晰明了，免工具机箱让操作更加便捷，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;模块化端口&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;更是大大简化了硬件维护的复杂度。此外，Dell Pro DT 还提供长达&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;24 个月的稳定生命周期支持，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;为客户业务的持续运转保驾护航，让商业用户毫无后顾之忧。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;在灵活部署方面，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;Dell Pro DT 产品线超丰富，贴心打造了&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;4 大系列，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;满足不同用户的个性化需求。性能强劲的&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;Dell Pro Tower 系列，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;采用标准体积商用台式机设计，是追求极致性能用户的不二之选；Dell Pro Slim 系列拥有&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;8.4L&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;紧凑机身，小巧玲珑却能量巨大；超级轻薄小巧的&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;Dell Pro Micro 系列，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;方便携带，适合经常移动办公的朋友；还有搭配&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;24 英寸全高清触控屏&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;的&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;Dell Pro 24 All-in-One Plus 一体机，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#f6faff"&gt;集多种功能于一身，颜值与实力并存。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//3e6052c528a9b51085285eb8586d3b4f.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;值得关注的是，随着新一代处理器的问世，也让 Dell Pro DT 产品线拥有了&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;更强的 AI 与计算性能。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//de9f0824559de1a91285bcf512e1547d.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;根据戴尔官方提供测试数据显示，搭载&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;英特尔® 酷睿™ Ultra 7 265&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;的台式机产品在 SYSMark 25 测试中系统性能相比第 14 代英特尔® 酷睿™ i7-14700 提升了&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;5%，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;能够提供更流畅的体验和更高的效率；在 PC Mark10 测试中办公生产力性能提升了&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;15%，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;可更快完成日常办公任务，提高工作效率。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;通过 Cinebench R23 测试，英特尔® 酷睿™ Ultra 7 265 的多线程 CPU 操作性能相比第 14 代英特尔® 酷睿™ i7-14700 提升了&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;35%，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;在处理需要大量计算资源和多线程支持的任务时，如视频编辑、3D 渲染等，能够发挥出强大的性能优势。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;在 Dell Pro DT 的四大产品线阵营中，均可看到英特尔® 酷睿™ Ultra 处理器或 AMD 锐龙 9000 系列的身影，满足用户各种应用场景。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;下面，就让我们来具体了解一下这四大产品阵营吧！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:16px; margin-right:16px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#0073d0"&gt;&lt;span style="background-color:#f0f6ff"&gt;01，&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#0672cb"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro Tower，性能强劲的模块化台式机典范&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro Tower 系列，作为 OptiPlex 家族的经典传承者，那可是相当厉害，堪称台式机领域的「多面手」。它不仅在绝大部分商用及企业级办公场景中如鱼得水，更是在需要高性能计算、多屏协作的专业领域挥洒自如，像工程设计的复杂建模、视频渲染的烧脑运算等场景，都能轻松 hold 住，绝对是办公及专业人士的得力助手。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro Tower 系列内部还藏着「小心机」，根据不同配置分为&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro Tower Plus 和 Dell Pro Tower 两款产品。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;先来说说 Dell Pro Tower Plus，它搭载最新一代英特尔® 酷睿™ Ultra 处理器，性能强大。它的机箱体积也从之前的 18.6L 缩小到&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;14.6L，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;同时电源也升级成&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;360W 白金版，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;能耗更低，体积进一步减小。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//5951d6c61a59202ac24299f9950250d8.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;再来看 Dell Pro Tower，机箱容积保持不变&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;这宽敞的空间，就像给电脑硬件们打造了一个豪华大别墅。在这里，高主频的 AMD 锐龙 8000 或英特尔® 酷睿™ Ultra 处理器可以尽情施展拳脚，最高还能支持&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;128GB 大容量 DDR5 内存，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;处理再多任务都不在话下。要是你有专业软件需求，还可搭配&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;NVIDIA RTX™ A400 或 AMD RX740 专业显卡，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;有了它们，可轻松搞定 AutoCAD 的复杂图纸绘制、Premiere Pro 的视频编辑，分分钟让你的工作效率直线上升。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//7f439525a4840f877bf92e64ef52fe98.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro Tower 还有一个超酷的特色——&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;模块化散热系统。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;内部&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;双风扇和热管&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;强强联合，顶部&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;蜂窝状通风孔&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;设计巧妙，哪怕设备高负载运行，CPU 温度也能被稳稳控制，完全不用担心电脑会因为过热而 「闹脾气」。更贴心的是，它&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;支持工具免拆维护，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;用户自己就能轻松更换硬盘或者扩展内存，就像给电脑做个简单的 「小手术」，方便又快捷。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//5b2b9cf24c4be721b5ff962259b03a3f.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;不仅如此，Dell Pro Tower 还支持&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;三屏联动的 3×DP 1.4a 接口，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;再配上&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Windows 11 Pro 系统，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;多任务切换无缝衔接，处理文档的时候，效率直接翻倍。想象一下，三个屏幕同时展示不同文档，操作起来行云流水，办公体验不要太爽！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:16px; margin-right:16px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#0073d0"&gt;&lt;span style="background-color:#f0f6ff"&gt;02，&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#0672cb"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro Slim，性能与小体积的完美融合&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;全新的 Dell Pro Slim 系列简直是全能选手，商务办公、医疗科研、教育教学、创意设计通吃，小体积的机身里藏着 AI 黑科技，让你的工作效率直接开挂！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro Slim 系列同样分为&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro Slim Plus 和 Dell Pro Slim 两款产品。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;先说 Pro Slim Plus，堪称台式机界的「小金刚」——&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;8.4L 迷你机箱&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;塞进英特尔® 酷睿™ Ultra 处理器，内置&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;13 TOPS&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;超强算力的 NPU 芯片，本地 AI 处理快如闪电！开视频会议时自动生成会议纪要，分析数据分分钟搞定，再也不用等云端的「蜗牛速度」。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//31eac446feb8823daed5563689a5968b.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;你以为小体积就等于弱性能？那就大错特错了！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro Slim Plus 可是隐藏的性能怪兽：最高支持&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;128GB DDR5 内存+4TB HDD+3×2TB M.2 SSD&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;的豪华配置，金融建模、医疗影像处理稳如老狗。显卡从&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;AMD RX6300 到专业级 NVIDIA RTX™ A400&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;任选，多屏办公、3D 渲染全都能打，小机箱也有大心脏！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//569c6b75acc71aae0b697ea161913919.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;另一边的 Dell Pro Slim 硬件支持方面则更胜一筹，双平台 CPU 随心选——英特尔® 酷睿™ Ultra 处理器、AMD Ryzen™ 5-8600/7-8700 处理器甚至第 14 代英特尔® 酷睿™ i7 处理器全都能安排上，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;65W&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;高性能释放，无论你是 Intel 党还是 AMD 粉都能满足。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//f61623fe0b8ee873147b5b83cf295d4d.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro Slim 这次升级堪称全面进化：AI 算力直接拉满，散热系统悄悄内卷，噪音降低&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;57%&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;让办公室更安静；PCIe 插槽多到离谱，扩展设备随便插；&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Wi-Fi 6E、2.5G 网卡、8K 视频输出&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;一应俱全，妥妥的未来办公标配。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:16px; margin-right:16px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#0073d0"&gt;&lt;span style="background-color:#f0f6ff"&gt;03，&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#0672cb"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro Micro，小身材也能爆发大能量&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro Micro 系列简直是电脑界的「拇指姑娘」——&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;1.2L&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;的超迷你机箱比大瓶可乐还小，却塞进了足以颠覆认知的硬核配置，单根线缆就能搞定视频、数据和电源，让你的桌面从此告别 "蜘蛛网"！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//901a03267d67098b2d333dee7c3f1bb1.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro Micro 系列也分为两款产品，分别是&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro Micro Plus 和 Dell Pro Micro。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;先说 Dell Pro Micro Plus，别看它身材袖珍，内置的英特尔® 酷睿™ Ultra 处理器（最高可选&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;65W&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;的 Ultra 9）配上&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;6 个 USB-A、2 个 USB-C，3 个原生 DP 接口&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;能同时怼&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;4 台显示器，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;还能选&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;HDMI 或 DP 2.1&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;实现 8K 超清输出。更夸张的是，它居然有&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;10 种模块化扩展端口，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;简直是接口界的变形金刚！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//ad575d06b46768ee854aa5b0f9054d76.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;另一边的 Dell Pro Micro 也不含糊，CPU 阵容堪称豪华：英特尔® 酷睿™ Ultra 处理器最高支持&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;35W&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;的 Ultra 7、第 14 代英特尔® 酷睿™处理器，还有 AMD Ryzen™ 5-8600/7-8700 系列处理器任选，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;35W&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;的 R7 Pro 性能直接拉满，小机身也能爆发大能量。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//22d5e2756879198872c49e09ab13d161.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;对比前代 OptiPlex Micro，Dell Pro Micro 这次升级堪称「静音革命」：散热设计优化后，运行温度直降&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;8%，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;噪音减少&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;32%，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;办公环境瞬间安静如图书馆。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;最绝的是它的&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;5 种支架设计，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;想挂墙上、立桌上、塞显示器背后都行，无论是移动办公、教室管理还是零售门店的数字标牌，这台巴掌大的 AI 电脑都能轻松拿捏。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//d3394a1272bdcdcb9cb7b919e3149a08.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:16px; margin-right:16px; text-align:justify"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#0073d0"&gt;&lt;span style="background-color:#f0f6ff"&gt;04，&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#0672cb"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro 24 All-in-One Plus，一体化的智能会议中心&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;把 AI 装进 24 英寸屏幕里，这就是全新的&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro 24 All-in-One 系列，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;开会、办公、设计全场景通吃，从此告别主机堆桌角的烦恼！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;这次戴尔直接放大招，推出&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Plus 版和标准版&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;两款神机。全系搭载英特尔® 酷睿™ Ultra 处理器，本地 AI 算力直接拉满，开视频会议时&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;自动优化画质音质，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;分析数据快到飞起，再也不用苦等云端处理！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//98f5f904d38cbd105b5b3995f2a0208d.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Plus 版更是暗藏玄机，可选配&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;AMD RX6500 独显&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;让图形处理能力瞬间开挂，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;5K@60Hz&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;的 DP 输出和&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;4K@60Hz&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;的 HDMI 接口，高分辨率多屏扩展轻松搞定。更绝的是它的&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Pro 2.0 设计，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;银色机身配双支架，标准版深灰色沉稳大气，摆在办公室瞬间提升科技感。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//bbdd8e8765fdd979f002fcb3b504e3e4.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;Dell Pro 24 All-in-One 搭配的&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;24 英寸全高清屏&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;自带&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;100Hz 高刷和低蓝光认证，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;触控/非触控随心切换。内置&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;5MP HDR 摄像头（Plus 版还能升级带 IR 的 5MP 神器），&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;搭配&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;数字麦克风阵列和智能功放，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;视频会议秒变电影级画质，连对方的睫毛都看得清清楚楚！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img src="https://oscimg.oschina.net/oscnet//eb75eb17637b5590971a6950800481f7.jpg" referrerpolicy="no-referrer"&gt; 
 &lt;p style="margin-left:0px; margin-right:0px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;怎么样？Dell Pro DT 系列正在颠覆认知！一场静默的效率革命正在每个工位悄然上演。当 AI 算力注入桌面终端，商用 PC 不再是被动等待指令的机器，而是进化成能自主决策的智能伙伴。这台看似普通的办公设备，已植入了能感知工作场景的 "数字大脑"，通过 CPU 与 NPU 的双引擎驱动，让本地化智能处理成为办公新常态。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span style="background-color:#ffffff"&gt;你准备好迎接它了吗？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354517</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354517</guid>
      <pubDate>Sat, 10 May 2025 23:14:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
  </channel>
</rss>
