<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - industry - 简体中文</title>
    <link>https://www.oschina.net/news/industry</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/industry" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 23 Aug 2025 16:40:32 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>揭秘鸿蒙 HarmonyOS NEXT：沉浸式页面开发实战攻略</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;踏入鸿蒙世界的敲门砖，标志着您在技术征途上的全新起点，提升就业竞争力，获得行业认可，点亮职业成长先机，快人一步抢占未来应用开发赛道！&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Ftraining%2Fdev-cert-detail%2F101666948302721398%3Fha_source%3Dhmosclass-bokeyuan%26ha_sourceId%3D89000444" target="_blank"&gt;https://developer.huawei.com/consumer/cn/training/dev-cert-detail/101666948302721398?ha_source=hmosclass-bokeyuan&amp;amp;ha_sourceId=89000444&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;概述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;本文章基于 HarmonyOS NEXT 操作系统，API12 以上的版本。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;沉浸式开发模式，旨在让应用界面高度聚焦于内容呈现，最大程度避免用户受到无关元素的干扰。在移动端应用里，全屏窗口由状态栏、应用界面和导航栏构成。在进行沉浸式页面开发时，通常会采用将应用页面拓展至状态栏和导航栏区域的方式，以此实现以下目标：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;使页面和避让区域的色调统一，为用户提供更好的视觉体验。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;最大程度利用屏幕可视区域，使页面获得更大的布局空间。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;提供完全沉浸的体验，让用户沉浸其中，不被其他事物所干扰。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;本文将介绍沉浸式页面的实现方案、原理以及提供以下常见沉浸式页面开发场景下一些适配问题的解决方案。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[顶部或底部背景延伸场景]&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[顶部图片延伸场景]&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[滚动列表底部延伸场景]&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[全屏沉浸式场景]&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[深色背景下状态栏颜色适配场景]&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;实现原理&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;针对上面的设计要求，可以通过如下两种方式实现应用沉浸式效果：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[&lt;/strong&gt;&lt;strong&gt;窗口全屏布局方案&lt;/strong&gt;]：调整布局系统为全屏布局，界面元素延伸到状态栏和导航条区域实现沉浸式效果。当不隐藏避让区时，可通过接口查询状态栏和导航条区域进行可交互元素避让处理，并设置状态栏或导航条的颜色等属性与界面元素匹配。当隐藏避让区时，通过对应接口设置全屏布局即可。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[组件安全区方案]&lt;/strong&gt;：布局系统保持安全区内布局，然后通过接口延伸绘制内容（如背景色，背景图）到状态栏和导航条区域实现沉浸式效果。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;如何区分或使用？&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;组件安全区该方案下，界面元素仅做绘制延伸，无法单独布局到状态栏和导航条区域，针对需要单独布局 UI 元素到状态栏和导航条区域的场景建议使用窗口全屏布局方案处理。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;关键技术&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;方案一：使用&amp;nbsp;&lt;strong&gt;Window.setWindowLayoutFullScreen()&lt;/strong&gt;&amp;nbsp;方法设置窗口为全屏模式。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;这种方案一般适用于一级界面 Index 中，要根据需求，看布局中的 UI 元素是否需要避让状态栏和导航条，否则可能产生 UI 元素重叠等情况。&lt;br&gt; 如果，对控件顶部设置 padding（具体数值与状态栏高度一致），实现对状态栏的避让；对底部设置 padding（具体数值与底部导航条区域高度一致），实现对底部导航条的避让。&lt;br&gt; 如果，去掉顶部和底部的 padding 设置，即不避让状态栏和导航条，UI 元素就会发生重叠。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 1.png" height="374" src="https://oscimg.oschina.net/oscnet//e34d0d40c5da070214af1329aef5ba22.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;方案二：设置组件的&lt;strong&gt;&amp;nbsp;expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM])&lt;/strong&gt;&amp;nbsp;属性，扩展组件的安全区域到状态栏和导航栏，从而实现沉浸式。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 2.png" height="340" src="https://oscimg.oschina.net/oscnet//7f5e3e1ed2191804930b063ba492e9a0.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 3.png" height="451" src="https://oscimg.oschina.net/oscnet//02c778b5c045d38554c62dbba23e5356.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景分析&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景一，顶部或底部背景延伸场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;页面背景需要延伸到状态栏和导航条区域，页面内容在安全区展示。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;开发步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;使用[expandSafeArea]属性扩展背景组件安全区域&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;给设置背景色的组件设置 expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM])，使背景色延伸到状态栏和导航条。由于[expandSafeArea]属性不影响子组件的布局，所以 Tabs 组件内的内容默认在安全区域布局，避让状态栏和导航条。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 4.png" height="65" src="https://oscimg.oschina.net/oscnet//8fc3c33b59148164a7004f2f9dcfa7cf.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景二，顶部图片延伸场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;页面顶部的图片要延伸到状态栏中去，形成沉浸式效果。顶部的返回按钮等交互组件，要合理避让状态栏。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;开发步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;设置图片 expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP])，扩展图片上方的安全区域。由于[expandSafeArea]属性不影响兄弟组件的布局，顶部的按钮区域默认避让状态栏。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;设置 Swiper 组件的[clip]属性为 false，不裁剪内部组件。在设置[expandSafeArea]属性的组件的父组件是滚动类容器时，需配合[clip]属性使用。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 5.png" height="118" src="https://oscimg.oschina.net/oscnet//991bdbb24248d36732156ca4f5490ea9.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景三，滚动列表底部延伸场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在列表滚动场景中，滚动时内容可与导航条区域重合，滚动到底部时，底部内容需避让导航条。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;开发步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;设置列表组件 ListexpandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])，扩展列表底部到安全区域。此时 List 组件显示区域扩大，滚动时列表内容可在导航条区域显示。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 6.png" height="80" src="https://oscimg.oschina.net/oscnet//635482c40043c85140992bd4b811767d.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;将滚动到底部的提示添加在列表项末尾，由于设置[expandSafeArea]属性不影响子组件的布局，所以滚动到底部时提示文字默认会避让导航条。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 7.png" height="157" src="https://oscimg.oschina.net/oscnet//35df458408659b988cad2046972efd58.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景四，全屏沉浸式场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在一些视频播放或启动页的沉浸式页面中，为了更好的观看或操作体验，往往需要隐藏状态栏和导航栏。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;开发步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在页面显示或隐藏时，使用[Window.setWindowLayoutFullScreen()]方法设置窗口是否为全屏模式，使用[Window.setWindowSystemBarEnable()]方法设置状态栏和导航条显隐。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 8.png" height="301" src="https://oscimg.oschina.net/oscnet//21db4008dddd8b2f2ca71fbde9fce973.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景五，深色背景下状态栏颜色适配场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在某些将深色背景延伸到状态栏的沉浸式页面中，需要设置状态栏时间文字、信号图标、电量图标等内容为浅色进行适配，避免状态栏内容不清晰，以此提升用户的视觉体验。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;开发步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;设置背景图片组件 expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM])，扩展安全区域到状态栏和导航栏，实现沉浸式效果。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 9.png" height="29" src="https://oscimg.oschina.net/oscnet//2dc069797ad1ae77fc5a201a9fbe8d30.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;在页面显示或隐藏时，使用[Window.setWindowSystemBarProperties()]方法设置状态栏内容的颜色。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 10.png" height="262" src="https://oscimg.oschina.net/oscnet//6296fd3acfed40b79726213c81c51033.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;此次 HarmonyOS NEXT 沉浸式页面开发实践，只是探索的开端。未来，技术浪潮将不断奔涌，希望会有更多的开发者们能以此次经验为基石，在技术海洋中持续破浪前行，利用 HarmonyOS NEXT 的特性创造出更多震撼人心的作品，为鸿蒙世界添砖加瓦。（转载自 51CTO，作者：lucky 志）&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 11.png" height="200" src="https://oscimg.oschina.net/oscnet//46efdcdb34cc79d71f277b7c369e5051.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368055</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368055</guid>
      <pubDate>Mon, 18 Aug 2025 08:42:00 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>揭秘鸿蒙 HarmonyOS NEXT：沉浸式页面开发实战攻略</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;踏入鸿蒙世界的敲门砖，标志着您在技术征途上的全新起点，提升就业竞争力，获得行业认可，点亮职业成长先机，快人一步抢占未来应用开发赛道！&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Ftraining%2Fdev-cert-detail%2F101666948302721398%3Fha_source%3Dhmosclass-bokeyuan%26ha_sourceId%3D89000444" target="_blank"&gt;https://developer.huawei.com/consumer/cn/training/dev-cert-detail/101666948302721398?ha_source=hmosclass-bokeyuan&amp;amp;ha_sourceId=89000444&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;概述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;本文章基于 HarmonyOS NEXT 操作系统，API12 以上的版本。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;沉浸式开发模式，旨在让应用界面高度聚焦于内容呈现，最大程度避免用户受到无关元素的干扰。在移动端应用里，全屏窗口由状态栏、应用界面和导航栏构成。在进行沉浸式页面开发时，通常会采用将应用页面拓展至状态栏和导航栏区域的方式，以此实现以下目标：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;使页面和避让区域的色调统一，为用户提供更好的视觉体验。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;最大程度利用屏幕可视区域，使页面获得更大的布局空间。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;提供完全沉浸的体验，让用户沉浸其中，不被其他事物所干扰。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;本文将介绍沉浸式页面的实现方案、原理以及提供以下常见沉浸式页面开发场景下一些适配问题的解决方案。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[顶部或底部背景延伸场景]&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[顶部图片延伸场景]&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[滚动列表底部延伸场景]&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[全屏沉浸式场景]&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[深色背景下状态栏颜色适配场景]&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;实现原理&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;针对上面的设计要求，可以通过如下两种方式实现应用沉浸式效果：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[&lt;/strong&gt;&lt;strong&gt;窗口全屏布局方案&lt;/strong&gt;]：调整布局系统为全屏布局，界面元素延伸到状态栏和导航条区域实现沉浸式效果。当不隐藏避让区时，可通过接口查询状态栏和导航条区域进行可交互元素避让处理，并设置状态栏或导航条的颜色等属性与界面元素匹配。当隐藏避让区时，通过对应接口设置全屏布局即可。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[组件安全区方案]&lt;/strong&gt;：布局系统保持安全区内布局，然后通过接口延伸绘制内容（如背景色，背景图）到状态栏和导航条区域实现沉浸式效果。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;如何区分或使用？&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;组件安全区该方案下，界面元素仅做绘制延伸，无法单独布局到状态栏和导航条区域，针对需要单独布局 UI 元素到状态栏和导航条区域的场景建议使用窗口全屏布局方案处理。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;关键技术&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;方案一：使用&amp;nbsp;&lt;strong&gt;Window.setWindowLayoutFullScreen()&lt;/strong&gt;&amp;nbsp;方法设置窗口为全屏模式。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;这种方案一般适用于一级界面 Index 中，要根据需求，看布局中的 UI 元素是否需要避让状态栏和导航条，否则可能产生 UI 元素重叠等情况。&lt;br&gt; 如果，对控件顶部设置 padding（具体数值与状态栏高度一致），实现对状态栏的避让；对底部设置 padding（具体数值与底部导航条区域高度一致），实现对底部导航条的避让。&lt;br&gt; 如果，去掉顶部和底部的 padding 设置，即不避让状态栏和导航条，UI 元素就会发生重叠。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 1.png" height="374" src="https://oscimg.oschina.net/oscnet//5d5bbe0d240b9fbafa444bec5c29ebc8.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;方案二：设置组件的&lt;strong&gt;&amp;nbsp;expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM])&lt;/strong&gt;&amp;nbsp;属性，扩展组件的安全区域到状态栏和导航栏，从而实现沉浸式。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 2.png" height="340" src="https://oscimg.oschina.net/oscnet//56fe206ee7ca1c7a12a3b254a29f440c.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 3.png" height="451" src="https://oscimg.oschina.net/oscnet//1a131776580594b3c37f8d495220635c.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景分析&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景一，顶部或底部背景延伸场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;页面背景需要延伸到状态栏和导航条区域，页面内容在安全区展示。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;开发步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;使用[expandSafeArea]属性扩展背景组件安全区域&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;给设置背景色的组件设置 expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM])，使背景色延伸到状态栏和导航条。由于[expandSafeArea]属性不影响子组件的布局，所以 Tabs 组件内的内容默认在安全区域布局，避让状态栏和导航条。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 4.png" height="65" src="https://oscimg.oschina.net/oscnet//13042e5dbd0c9fc46e3c78669a96baff.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景二，顶部图片延伸场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;页面顶部的图片要延伸到状态栏中去，形成沉浸式效果。顶部的返回按钮等交互组件，要合理避让状态栏。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;开发步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;设置图片 expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP])，扩展图片上方的安全区域。由于[expandSafeArea]属性不影响兄弟组件的布局，顶部的按钮区域默认避让状态栏。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;设置 Swiper 组件的[clip]属性为 false，不裁剪内部组件。在设置[expandSafeArea]属性的组件的父组件是滚动类容器时，需配合[clip]属性使用。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 5.png" height="118" src="https://oscimg.oschina.net/oscnet//fd6e8135b5bb7272f03521fbd8eb0ead.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景三，滚动列表底部延伸场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在列表滚动场景中，滚动时内容可与导航条区域重合，滚动到底部时，底部内容需避让导航条。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;开发步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;设置列表组件 ListexpandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])，扩展列表底部到安全区域。此时 List 组件显示区域扩大，滚动时列表内容可在导航条区域显示。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 6.png" height="80" src="https://oscimg.oschina.net/oscnet//46205b3fd66f4876fcf7cf560303920a.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;将滚动到底部的提示添加在列表项末尾，由于设置[expandSafeArea]属性不影响子组件的布局，所以滚动到底部时提示文字默认会避让导航条。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 7.png" height="157" src="https://oscimg.oschina.net/oscnet//8f6e4ab8ab91a7bf8f89f93de0efdf72.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景四，全屏沉浸式场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在一些视频播放或启动页的沉浸式页面中，为了更好的观看或操作体验，往往需要隐藏状态栏和导航栏。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;开发步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在页面显示或隐藏时，使用[Window.setWindowLayoutFullScreen()]方法设置窗口是否为全屏模式，使用[Window.setWindowSystemBarEnable()]方法设置状态栏和导航条显隐。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 8.png" height="301" src="https://oscimg.oschina.net/oscnet//ca2748082542c0a9846a0d56fae3a07d.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景五，深色背景下状态栏颜色适配场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在某些将深色背景延伸到状态栏的沉浸式页面中，需要设置状态栏时间文字、信号图标、电量图标等内容为浅色进行适配，避免状态栏内容不清晰，以此提升用户的视觉体验。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;开发步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;设置背景图片组件 expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM])，扩展安全区域到状态栏和导航栏，实现沉浸式效果。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 9.png" height="29" src="https://oscimg.oschina.net/oscnet//b9944d6e6f0e7bd86abe1321248f12b0.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;在页面显示或隐藏时，使用[Window.setWindowSystemBarProperties()]方法设置状态栏内容的颜色。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 10.png" height="262" src="https://oscimg.oschina.net/oscnet//4bdb2b6c1087e27746ee8a09f058c397.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;此次 HarmonyOS NEXT 沉浸式页面开发实践，只是探索的开端。未来，技术浪潮将不断奔涌，希望会有更多的开发者们能以此次经验为基石，在技术海洋中持续破浪前行，利用 HarmonyOS NEXT 的特性创造出更多震撼人心的作品，为鸿蒙世界添砖加瓦。（转载自 51CTO，作者：lucky 志）&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 11.png" height="200" src="https://oscimg.oschina.net/oscnet//df8c3fd94d78548cf8afdcb552ff4ad9.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368051</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368051</guid>
      <pubDate>Mon, 18 Aug 2025 07:55:00 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>API13Bate 版来了 DevEco 已更新快来看新功能吧</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;踏入鸿蒙世界的敲门砖，标志着您在技术征途上的全新起点，提升就业竞争力，获得行业认可，点亮职业成长先机，快人一步抢占未来应用开发赛道！&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Ftraining%2Fdev-cert-detail%2F101666948302721398%3Fha_source%3Dhmosclass-bokeyuan%26ha_sourceId%3D89000444" target="_blank"&gt;https://developer.huawei.com/consumer/cn/training/dev-cert-detail/101666948302721398?ha_source=hmosclass-bokeyuan&amp;amp;ha_sourceId=89000444&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;HarmonyOS 5.0.1 Beta3，是 HarmonyOS 开发套件基于 API 13 正式发布的首个 Beta 版本。该版本在 OS 能力上主要增强了 C API 的相关能力，多个特性补充了 C API 供开发者使用。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;OS 平台能力增加&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;首先是系统能力增加了，这次增加了很多 C 接口能力，像我们用得比较多的场景有：Ability 组件中元能力新增 C API，可以从 ApplicationContext 中获取 cache 路径、Area 以及 bundleName 的能力；ArkData 组件中，Preferences 可能在 C API 中使用了，但是不支持 C API 与 ArkTS API 混合使用；AVSession 媒体播控模块可以在 C 中进行播放、暂停、停止、快进、快退等等；后台任务中像短时任务也增加 C 接口；Image 组件支持通过 C API 从 PixelMap 中读取 ARGB 格式的数据。还有其它很多模块都对 C 的能力进行的增加，这次更新，算是全面提升了 C 接口的能力。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;除了 C 能力的提升，其它一些常用的功能也有增强。像 RichEditor 支持配置滚动条的显隐；Web 组件支持获取资源响应数据和响应数据的准备状态，以及获取网页当前的滚动偏移量；后台任务新增音视频通话长时任务；Map 组件支持设置地图经纬度范围和 4 个方向与边界之间的距离；在默认界面扫码界面，支持用户点击关闭「隐私横幅」。当重新打开应用的默认界面扫码将只显示安全访问提示，3s 后消失；新增了新增数字人民币的接口。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;PhotoViewPicker 能力有 5 项增强：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;PickerOptions 新增是否支持滑动多选的选项和设置大图页 checkbox 的位置的选项&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;新增向 picker 发送退出大图的通知的 API&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;新增设置大图页大图预览组件外其他 UI 元素是否可见的 API&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;新增定义大图页大图预览组件外其他 UI 元素的 API&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;支持 PhotoPicker 组件的删除通知等相关能力&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;新增加了 NearLink Kit（星闪服务），星闪服务提供一种低功耗、高速率的短距离通信服务，支持星闪设备之间的连接、数据交互。中心设备可以通过扫描发现外围设备，并发起连接。外围设备可以通过发送广播的方式被中心设备发现，和中心设备连接之后可以进行相应的数据传输。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;DevEco Studio 特性增加&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;hvigor 新增 getOverrides、setOverrides 和 setProperty 能力。这对于多环境处理三方依赖将非常方便。在之前的版本中，我们要区分不同的环境去依赖不同的包，必须在各自模块下自己替换依赖库，不能很好的做到统一处理，像静态 har 模块中可能处理起来更麻烦了。现在有了 getOverrides 和 setOverrides 接口，我们可以统一在项目根目录下的 hvigor.ts 中直接判断不同的环境进行依赖了，这简直是太方便了。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在最新的 DevEco Studio 中，我们可以直接在 IDE 内上传应用软件包。在 DevEco Studio 菜单栏，点击 Build &amp;gt; Upload Product，点击 Sign in 登录华为开发者账号。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 1.png" height="396" src="https://oscimg.oschina.net/oscnet//6e8896816b21327c03cbe49dced3b0f0.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;登录成功后，返回 DevEco Studio 进入软件包上传界面。确认当前工程的 product 信息，选择需要上传的软件包类型，点击 OK 开始上传。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;若当前上传的软件包仅做测试发布，请选择 Generate app package and upload it to AppGallery Connect for test&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;若软件包需要在全网正式发布，请选择 Generate app package and upload it to AppGallery Connect for test and publish&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 2.png" height="388" src="https://oscimg.oschina.net/oscnet//1323c9d63734fd33c976e7885436f37e.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;上传完成后，出现云测试的结果，点击 Full results on App Gallary Connect 可进入 AGC 查看软件包上传记录和检测结果。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;Launch 分析支持手动冷启动场景。启动模式分为自动启动和手动启动，可点击图标切换两种不同模式：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;若选择自动启动模式，当用户使用 Launch 模板并开始录制时，将主动重启所选应用；&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;手动启动模式在开始录制时，只会主动终止所选应用，等待界面出现弹窗提示启动应用后，开发者需要手动启动应用。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;新增的特性&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;DevEco Studio 支持开发 API 13 工程&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;DevEco Profiler Frame 模板新增 Lost Frames 和 Hitch Time 泳道，用于识别和优化卡顿和丢帧现象&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;hvigor-config.json5 中 properties 下新增 ohos.arkCompile.noEmitJs 字段，用于指定 ArkTS 编译过程中是否生成 js 中间产物，不生成 js 中间产物可以降低编译过程的峰值内存，加快编译速度。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;新增支持 HWASan 检测&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;应用与服务体检新增一条快速性能检测规则：避免序列化反序列化耗时长&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;ohpm 新增支持 resolve_conflict_strict 严格模式依赖冲突处理功能=&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;增强的特性&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;意图框架新增支持多种垂域类型&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;DevEco Profiler 工具录制提供可视化配置&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;hvigorw 命令行工具支持–max-old-space-size 参数，用于设置守护进程内存大小&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;AppAnalyzer 检测报告支持与 Profiler 工具使用时间戳联动，点击时间戳可以打开 Profiler 并定位到问题发生的时间点&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;（转载自 51CTO，作者：龙儿筝）&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 3.png" height="200" src="https://oscimg.oschina.net/oscnet//c75d168aa23dcac2b7e7c1260ef60832.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368049</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368049</guid>
      <pubDate>Mon, 18 Aug 2025 07:36:00 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>鸿蒙保存图片到相册</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;踏入鸿蒙世界的敲门砖，标志着您在技术征途上的全新起点，提升就业竞争力，获得行业认可，点亮职业成长先机，快人一步抢占未来应用开发赛道！&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Ftraining%2Fdev-cert-detail%2F101666948302721398%3Fha_source%3Dhmosclass-bokeyuan%26ha_sourceId%3D89000444" target="_blank"&gt;https://developer.huawei.com/consumer/cn/training/dev-cert-detail/101666948302721398?ha_source=hmosclass-bokeyuan&amp;amp;ha_sourceId=89000444&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在其它手机端，若想保存图片到相册，需要申请对应的权限，而鸿蒙中对应的权限为受限开放权限，普通应用一般不让申请，这个时候我们可以使用安全保存控件来临时申请权限，用于保存图片到相册。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;受限开放权限&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;应用权限分为三类，一类是对所有应用开放，所有应用均可申请使用；一类是受限开放权限,仅少量符合特殊场景的应用可在通过审批后，使用受限权限；最后一类是仅对 MDM（Mobile Device Management）设备管理应用开放。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;保存图片到相机涉及到的权限是 ohos.permission.WRITE_IMAGEVIDEO，仅特殊场景与功能才可申请此权限，例如应用需要克隆、备份或同步图片/视频类文件，其它场景下使用安全控件来临时申请权限。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;使用安全控件保存本地图片到相机&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;我们先使用安全控件让用户点击临时获取权限，获取到权限后，再使用 photoAccessHelper 来将我们本地的图片保存在相册，示例如下&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 1.png" height="353" src="https://oscimg.oschina.net/oscnet//a7f0b08536db505798edcdb87c7b0356.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;以上示例请保证 icon.png 在本地真实的存在。当我们使用 helper 调用 applyChanges 时，因为是在安全控件点击后调用的，临时获取权限，可以正常执行，若不在安全控件内，则需保证已获取对应的权限。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;使用安全控件保存服务端图片到相机&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;服务端图片我们一般使用下载服务将图片下载到本地，若本地不需要备份，则直接将下载好的图片 buffer 保存到相册即可。我们将本地图片转成 buffer 来模拟服务端下载后的图片，再使用 photoAccessHelper 创建一个相册图片资源，并将我们的图片 buffer 写入到这个图片资源中，就可以将图片保存到相册了，示例如下&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 2.png" height="393" src="https://oscimg.oschina.net/oscnet//9e4749fba0ce214a0a5f8df8a9307e40.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;使用保存确认弹窗保存图片&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;前面的方式都是强依赖于安全控件，但在有些场景下，我们没办法使用安全控件，比如在 H5 页面中，再比如在 Flutter 页面中等等，这个时候我们可以借助保存确认弹窗来保存图片。当我们通过 photoAccessHelper 调用 showAssetsCreationDialog 时，系统会弹出一个确认弹窗，用户点击允许，则我们可以将图片保存到相册，若用户点击禁止，则不能保存图片到相册。使用这种方式，我们就不用强依赖于安全控件了，示例如下&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 3.png" height="471" src="https://oscimg.oschina.net/oscnet//6928c30c84b786afb2c543b45b86e6b3.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;以上示例请保存 icon.png 在本地真实存在。（转载自 51CTO，作者：龙儿筝）&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 4.png" height="200" src="https://oscimg.oschina.net/oscnet//bc1a70541978d908df7f719cae0e7401.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368047</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368047</guid>
      <pubDate>Mon, 18 Aug 2025 07:35:00 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>鸿蒙 NEXT 开发案例：亲戚关系计算器</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;踏入鸿蒙世界的敲门砖，标志着您在技术征途上的全新起点，提升就业竞争力，获得行业认可，点亮职业成长先机，快人一步抢占未来应用开发赛道！&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Ftraining%2Fdev-cert-detail%2F101666948302721398%3Fha_source%3Dhmosclass-bokeyuan%26ha_sourceId%3D89000444" target="_blank"&gt;https://developer.huawei.com/consumer/cn/training/dev-cert-detail/101666948302721398?ha_source=hmosclass-bokeyuan&amp;amp;ha_sourceId=89000444&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 1.png" height="1299" src="https://oscimg.oschina.net/oscnet//cf148c7c961e86b021010b7c0e36eb75.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;【引言】&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在快节奏的现代生活中，人们往往因为忙碌而忽略了与亲戚间的互动，特别是在春节期间，面对众多的长辈和晚辈时，很多人会感到困惑，不知道该如何正确地称呼每一位亲戚。针对这一问题，我们开发了一款基于鸿蒙 NEXT 平台的「亲戚关系计算器」应用，旨在帮助用户快速、准确地识别和称呼他们的亲戚。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;【环境准备】&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;操作系统：Windows 10&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;开发工具：DevEco Studio NEXT Beta1 Build Version: 5.0.3.806&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;目标设备：华为 Mate60 Pro&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;开发语言：ArkTS&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;框架：ArkUI&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;API 版本：API 12&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;三方库：@nutpi/relationship（核心算法）&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;【应用背景】&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;中国社会有着深厚的家庭观念，亲属关系复杂多样。从血缘到姻亲，从直系到旁系，每一种关系都有其独特的称呼方式。然而，随着社会的发展，家庭成员之间的联系逐渐变得疏远，尤其是对于年轻人来说，准确地称呼每一位亲戚成了一项挑战。为了应对这一挑战，「亲戚关系计算器」应运而生。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;【核心功能】&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;关系输入：用户可以通过界面输入或选择具体的亲戚关系描述，例如「爸爸的哥哥的儿子」。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;性别及称呼选择：考虑到不同地区的习俗差异，应用允许用户选择自己的性别和希望使用的称呼方式，比如「哥哥」、「姐夫」等。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;关系计算：利用@nutpi/relationship 库，根据用户提供的信息，精确计算出正确的亲戚称呼。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;示例与清空：提供示例按钮供用户测试应用功能，同时也设有清空按钮方便用户重新开始。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;个性化设置：支持多种方言和地方习惯的称呼方式，让应用更加贴近用户的实际需求。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;【用户界面】&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;应用的用户界面简洁明了，主要由以下几个部分组成：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;选择性别：通过分段按钮让用户选择自己的性别。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;选择称呼方式：另一个分段按钮让用户选择希望的称呼方式。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;输入关系描述：提供一个文本输入框，用户可以在此处输入具体的关系描述。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;结果显示区：在用户提交信息后，这里会显示出正确的亲戚称呼。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;操作按钮：包括示例按钮、清空按钮等，方便用户操作。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;【完整代码】&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;导包&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 2.png" height="22" src="https://oscimg.oschina.net/oscnet//e6a9ce6c7071017d180a61d06c1b1365.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 3.png" height="339" src="https://oscimg.oschina.net/oscnet//f59597721de12cb3e5a6de1a714c6da5.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 4.png" height="340" src="https://oscimg.oschina.net/oscnet//bf01c1b1620fec42aaf7b33c52b907ca.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 5.png" height="340" src="https://oscimg.oschina.net/oscnet//2f6f823d2b64cd94827edc3312e0aa3c.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 6.png" height="338" src="https://oscimg.oschina.net/oscnet//5decf7623b77e650d817035bb04858e1.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 7.png" height="340" src="https://oscimg.oschina.net/oscnet//d0040b045696af7e925b1202dba8d903.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 8.png" height="339" src="https://oscimg.oschina.net/oscnet//48d6d4c344568528a1676070300eaa22.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 9.png" height="340" src="https://oscimg.oschina.net/oscnet//415cd55fac87bc36347acf25a6c3204a.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 10.png" height="275" src="https://oscimg.oschina.net/oscnet//5fe211210b68b724ad485a485189d22b.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;（转载自 51CTO，作者：zhongcx）&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 11.png" height="200" src="https://oscimg.oschina.net/oscnet//bca8f12db270fed1220094e4e4d71f68.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368045</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368045</guid>
      <pubDate>Mon, 18 Aug 2025 07:33:00 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>揭秘鸿蒙 HarmonyOS NEXT：沉浸式页面开发实战攻略</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;踏入鸿蒙世界的敲门砖，标志着您在技术征途上的全新起点，提升就业竞争力，获得行业认可，点亮职业成长先机，快人一步抢占未来应用开发赛道！&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Ftraining%2Fdev-cert-detail%2F101666948302721398%3Fha_source%3Dhmosclass-bokeyuan%26ha_sourceId%3D89000444" target="_blank"&gt;https://developer.huawei.com/consumer/cn/training/dev-cert-detail/101666948302721398?ha_source=hmosclass-bokeyuan&amp;amp;ha_sourceId=89000444&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;概述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;本文章基于 HarmonyOS NEXT 操作系统，API12 以上的版本。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;沉浸式开发模式，旨在让应用界面高度聚焦于内容呈现，最大程度避免用户受到无关元素的干扰。在移动端应用里，全屏窗口由状态栏、应用界面和导航栏构成。在进行沉浸式页面开发时，通常会采用将应用页面拓展至状态栏和导航栏区域的方式，以此实现以下目标：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;使页面和避让区域的色调统一，为用户提供更好的视觉体验。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;最大程度利用屏幕可视区域，使页面获得更大的布局空间。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;提供完全沉浸的体验，让用户沉浸其中，不被其他事物所干扰。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;本文将介绍沉浸式页面的实现方案、原理以及提供以下常见沉浸式页面开发场景下一些适配问题的解决方案。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[顶部或底部背景延伸场景]&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[顶部图片延伸场景]&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[滚动列表底部延伸场景]&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[全屏沉浸式场景]&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[深色背景下状态栏颜色适配场景]&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;实现原理&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;针对上面的设计要求，可以通过如下两种方式实现应用沉浸式效果：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[&lt;/strong&gt;&lt;strong&gt;窗口全屏布局方案&lt;/strong&gt;]：调整布局系统为全屏布局，界面元素延伸到状态栏和导航条区域实现沉浸式效果。当不隐藏避让区时，可通过接口查询状态栏和导航条区域进行可交互元素避让处理，并设置状态栏或导航条的颜色等属性与界面元素匹配。当隐藏避让区时，通过对应接口设置全屏布局即可。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;·&amp;nbsp;&lt;strong&gt;[组件安全区方案]&lt;/strong&gt;：布局系统保持安全区内布局，然后通过接口延伸绘制内容（如背景色，背景图）到状态栏和导航条区域实现沉浸式效果。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;如何区分或使用？&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;组件安全区该方案下，界面元素仅做绘制延伸，无法单独布局到状态栏和导航条区域，针对需要单独布局 UI 元素到状态栏和导航条区域的场景建议使用窗口全屏布局方案处理。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;关键技术&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;方案一：使用&amp;nbsp;&lt;strong&gt;Window.setWindowLayoutFullScreen()&lt;/strong&gt;&amp;nbsp;方法设置窗口为全屏模式。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;这种方案一般适用于一级界面 Index 中，要根据需求，看布局中的 UI 元素是否需要避让状态栏和导航条，否则可能产生 UI 元素重叠等情况。&lt;br&gt; 如果，对控件顶部设置 padding（具体数值与状态栏高度一致），实现对状态栏的避让；对底部设置 padding（具体数值与底部导航条区域高度一致），实现对底部导航条的避让。&lt;br&gt; 如果，去掉顶部和底部的 padding 设置，即不避让状态栏和导航条，UI 元素就会发生重叠。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 1.png" height="374" src="https://oscimg.oschina.net/oscnet//f24233ec48872559145a730dd0b64847.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;方案二：设置组件的&lt;strong&gt;&amp;nbsp;expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM])&lt;/strong&gt;&amp;nbsp;属性，扩展组件的安全区域到状态栏和导航栏，从而实现沉浸式。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 2.png" height="340" src="https://oscimg.oschina.net/oscnet//68306315e80efa66c34ae990585f8536.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 3.png" height="451" src="https://oscimg.oschina.net/oscnet//b25c5488ba9e320dbd6aade564489b78.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景分析&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景一，顶部或底部背景延伸场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;页面背景需要延伸到状态栏和导航条区域，页面内容在安全区展示。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;开发步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;使用[expandSafeArea]属性扩展背景组件安全区域&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;给设置背景色的组件设置 expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM])，使背景色延伸到状态栏和导航条。由于[expandSafeArea]属性不影响子组件的布局，所以 Tabs 组件内的内容默认在安全区域布局，避让状态栏和导航条。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 4.png" height="65" src="https://oscimg.oschina.net/oscnet//1986fd03c838073846799777a4789de8.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景二，顶部图片延伸场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;页面顶部的图片要延伸到状态栏中去，形成沉浸式效果。顶部的返回按钮等交互组件，要合理避让状态栏。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;开发步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;设置图片 expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP])，扩展图片上方的安全区域。由于[expandSafeArea]属性不影响兄弟组件的布局，顶部的按钮区域默认避让状态栏。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;设置 Swiper 组件的[clip]属性为 false，不裁剪内部组件。在设置[expandSafeArea]属性的组件的父组件是滚动类容器时，需配合[clip]属性使用。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 5.png" height="118" src="https://oscimg.oschina.net/oscnet//c2fb92150966ea6d58db0e912d78552f.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景三，滚动列表底部延伸场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在列表滚动场景中，滚动时内容可与导航条区域重合，滚动到底部时，底部内容需避让导航条。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;开发步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;设置列表组件 ListexpandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])，扩展列表底部到安全区域。此时 List 组件显示区域扩大，滚动时列表内容可在导航条区域显示。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 6.png" height="80" src="https://oscimg.oschina.net/oscnet//10ef8181573f759284a99d6a5018acdf.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;将滚动到底部的提示添加在列表项末尾，由于设置[expandSafeArea]属性不影响子组件的布局，所以滚动到底部时提示文字默认会避让导航条。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 7.png" height="157" src="https://oscimg.oschina.net/oscnet//4f3d9ecdcc0d8e3285ddfb2e94ae08c4.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景四，全屏沉浸式场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在一些视频播放或启动页的沉浸式页面中，为了更好的观看或操作体验，往往需要隐藏状态栏和导航栏。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;开发步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在页面显示或隐藏时，使用[Window.setWindowLayoutFullScreen()]方法设置窗口是否为全屏模式，使用[Window.setWindowSystemBarEnable()]方法设置状态栏和导航条显隐。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;代码如下：&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 8.png" height="301" src="https://oscimg.oschina.net/oscnet//b03e5c89d058eb22dc918c1e14e3025b.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景五，深色背景下状态栏颜色适配场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;场景描述&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;在某些将深色背景延伸到状态栏的沉浸式页面中，需要设置状态栏时间文字、信号图标、电量图标等内容为浅色进行适配，避免状态栏内容不清晰，以此提升用户的视觉体验。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;开发步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;1.&amp;nbsp;设置背景图片组件 expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM])，扩展安全区域到状态栏和导航栏，实现沉浸式效果。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 9.png" height="29" src="https://oscimg.oschina.net/oscnet//5f3b2f63fea2a9ea12cff72bf7a9c298.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;2.&amp;nbsp;在页面显示或隐藏时，使用[Window.setWindowSystemBarProperties()]方法设置状态栏内容的颜色。&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 10.png" height="262" src="https://oscimg.oschina.net/oscnet//1bd492d9d87db004577c1ed6580b6ad1.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:left"&gt;此次 HarmonyOS NEXT 沉浸式页面开发实践，只是探索的开端。未来，技术浪潮将不断奔涌，希望会有更多的开发者们能以此次经验为基石，在技术海洋中持续破浪前行，利用 HarmonyOS NEXT 的特性创造出更多震撼人心的作品，为鸿蒙世界添砖加瓦。（转载自 51CTO，作者：lucky 志）&lt;/p&gt; 
&lt;p style="color:#555555; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img alt="图片 11.png" height="200" src="https://oscimg.oschina.net/oscnet//1e1038af4869eb1e2ed3dd2f1a0e8920.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368044</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368044</guid>
      <pubDate>Mon, 18 Aug 2025 07:32:00 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>Solon StateMachine 实现状态机使用示例详解</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;h2&gt;什么是状态机&lt;/h2&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;状态机是计算机科学中的&lt;strong&gt;核心建模工具&lt;/strong&gt;，用于描述对象在其生命周期内状态变化的逻辑模型。它通过定义&lt;strong&gt;有限状态集合&lt;/strong&gt;、&lt;strong&gt;状态转移规则&lt;/strong&gt;和&lt;strong&gt;触发事件&lt;/strong&gt;，精确控制系统的行为逻辑。&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;Solon StateMachine 是 Solon Framework 提供的一个功能强大的状态机框架，可实现复杂的工作流、订单管理等需要状态流转的场景。通过对状态、事件和转移的管理，开发者能够构建出简洁而灵活的状态机逻辑。&lt;/p&gt; 
&lt;h2&gt;使用示例&lt;/h2&gt; 
&lt;h4&gt;1、导入 maven 依赖&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.noear&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;solon-statemachine&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.5.0&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;2、创建订单状态枚举类&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.statemachine.State;

&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;enum&lt;/span&gt; &lt;span style="color:#c18401"&gt;OrderStatus&lt;/span&gt; &lt;span style="color:#a626a4"&gt;implements&lt;/span&gt; &lt;span style="color:#c18401"&gt;State&lt;/span&gt;{
    WAITING_PAYMENT,&lt;em&gt;//待支付&lt;/em&gt;
    WAITING_RECEIVE,&lt;em&gt;//待取货&lt;/em&gt;
    FINISHED,&lt;em&gt;//已完成&lt;/em&gt;
    CANCELED;&lt;em&gt;//已取消&lt;/em&gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;3、创建订单转悠事件枚举类&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.statemachine.Event;

&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;enum&lt;/span&gt; &lt;span style="color:#c18401"&gt;OrderEvent&lt;/span&gt; &lt;span style="color:#a626a4"&gt;implements&lt;/span&gt; &lt;span style="color:#c18401"&gt;Event&lt;/span&gt; {
    CREATE_ORDER,&lt;em&gt;//创建订单&lt;/em&gt;
    PAY_ORDER,&lt;em&gt;//支付订单&lt;/em&gt;
    RECEIVE_ORDER,&lt;em&gt;//取货&lt;/em&gt;
    CANCEL_ORDER,&lt;em&gt;//取消订单&lt;/em&gt;
    FINISH_ORDER&lt;em&gt;//完成订单&lt;/em&gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;4、创建订单实体，并实现 EventContext 接口（也可以不实现，改用 EventContext.of(...)）&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;class&lt;/span&gt; &lt;span style="color:#c18401"&gt;Order&lt;/span&gt; &lt;span style="color:#a626a4"&gt;implements&lt;/span&gt; &lt;span style="color:#c18401"&gt;EventContext&lt;/span&gt;&amp;lt;OrderStatus, Order&amp;gt; {
    &lt;span style="color:#a626a4"&gt;private&lt;/span&gt; &lt;span style="color:#a626a4"&gt;final&lt;/span&gt; String orderId;
    &lt;span style="color:#a626a4"&gt;private&lt;/span&gt; OrderStatus status;

    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#4078f2"&gt;Order&lt;/span&gt;&lt;span&gt;(String orderId, OrderStatus status)&lt;/span&gt; {
        &lt;span style="color:#c18401"&gt;this&lt;/span&gt;.orderId = orderId;
        &lt;span style="color:#c18401"&gt;this&lt;/span&gt;.status = status;
    }

    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; String &lt;span style="color:#4078f2"&gt;getOrderId&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; {
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; orderId;
    }

    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; OrderStatus &lt;span style="color:#4078f2"&gt;getStatus&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; {
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; status;
    }

    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;void&lt;/span&gt; &lt;span style="color:#4078f2"&gt;setStatus&lt;/span&gt;&lt;span&gt;(OrderStatus status)&lt;/span&gt; {
        &lt;span style="color:#c18401"&gt;this&lt;/span&gt;.status = status;
    }

    &lt;em&gt;// for EventContext&lt;/em&gt;

    &lt;span style="color:#4078f2"&gt;@Override&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; OrderStatus &lt;span style="color:#4078f2"&gt;getCurrentState&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; {
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; status;
    }

    &lt;span style="color:#4078f2"&gt;@Override&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; Order &lt;span style="color:#4078f2"&gt;getPayload&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; {
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; &lt;span style="color:#c18401"&gt;this&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;5、定义订单状态机组件，并添加状态转移规则。这里是重点了&lt;/h4&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;Solon StateMachine 不管理当前状态，不涉及持久化。具有可复用、多线程安全特性。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Managed;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.statemachine.StateMachine;

&lt;span style="color:#4078f2"&gt;@Managed&lt;/span&gt;
&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;class&lt;/span&gt; &lt;span style="color:#c18401"&gt;OrderStateMachine&lt;/span&gt; &lt;span style="color:#a626a4"&gt;extends&lt;/span&gt; &lt;span style="color:#c18401"&gt;StateMachine&lt;/span&gt;&amp;lt;OrderStatus, OrderEvent,Order&amp;gt; {
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#4078f2"&gt;OrderStateMachine&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; {
        &lt;em&gt;// 订单待支付 -&amp;gt; 待取货&lt;/em&gt;
        addTransition(t -&amp;gt; t
                .from(OrderStatus.WAITING_PAYMENT)
                .to(OrderStatus.WAITING_RECEIVE)
                .on(OrderEvent.PAY_ORDER)
                .then(c -&amp;gt; c.getPayload().setStatus(c.getTo())));

        &lt;em&gt;// 订单待取货 -&amp;gt; 已完成&lt;/em&gt;
        addTransition(t -&amp;gt; t
                .from(OrderStatus.WAITING_RECEIVE)
                .to(OrderStatus.FINISHED)
                .on(OrderEvent.FINISH_ORDER)
                .then(c -&amp;gt; c.getPayload().setStatus(c.getTo())));

        &lt;em&gt;// 订单待支付 -&amp;gt; 已取消&lt;/em&gt;
        addTransition(t -&amp;gt; t
                .from(OrderStatus.WAITING_PAYMENT)
                .to(OrderStatus.CANCELED)
                .on(OrderEvent.CANCEL_ORDER)
                .then(c -&amp;gt; c.getPayload().setStatus(c.getTo())));
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;6、创建调用示例服务&lt;/h4&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;Solon StateMachine 在发送事件时，通过 EventContext 传递当前状态和装载。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#4078f2"&gt;@Managed&lt;/span&gt;
&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;class&lt;/span&gt; &lt;span style="color:#c18401"&gt;OrderService&lt;/span&gt; {
    &lt;span style="color:#4078f2"&gt;@Inject&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;private&lt;/span&gt; OrderStateMachine orderStateMachine;

    &lt;em&gt;//支付&lt;/em&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; Order &lt;span style="color:#4078f2"&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; {
        &lt;span style="color:#986801"&gt;Order&lt;/span&gt; &lt;span style="color:#986801"&gt;order&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span style="color:#a626a4"&gt;new&lt;/span&gt; &lt;span style="color:#c18401"&gt;Order&lt;/span&gt;(&lt;span style="color:#50a14f"&gt;"1"&lt;/span&gt;, OrderStatus.WAITING_RECEIVE);

        System.out.println(&lt;span style="color:#50a14f"&gt;"尝试支付，订单号："&lt;/span&gt; + order.getOrderId());

        &lt;span style="color:#a626a4"&gt;try&lt;/span&gt; {
            &lt;em&gt;//事件： 支付, 状态转换：待支付 → 待发货&lt;/em&gt;
            orderStateMachine.sendEvent(OrderEvent.PAY_ORDER, order);

            System.out.println(&lt;span style="color:#50a14f"&gt;"支付成功，订单号："&lt;/span&gt; + order.getOrderId());
        } &lt;span style="color:#a626a4"&gt;catch&lt;/span&gt; (Exception ex) {
            System.out.println(&lt;span style="color:#50a14f"&gt;"支付失败, 状态异常，订单号："&lt;/span&gt; + order.getOrderId());
        }

        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; order;
    }
}&lt;/code&gt;&lt;/pre&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368015</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368015</guid>
      <pubDate>Mon, 18 Aug 2025 02:03:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>Meta 陷入史上最大 AI 训练数据侵权案，面临 3.59 亿美元索赔</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;美国加利福尼亚州法院最近受理的一起诉讼案件，将全球科技巨头 Meta 推到了舆论的风口浪尖。两家成人影片制作公司 Strike3 和 Counterlife Media 的联合起诉，不仅揭露了 AI 训练背后的数据获取黑幕，更以高达 3.59 亿美元的索赔金额，为整个科技行业敲响了版权保护的警钟。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;这起诉讼的核心指控令人震惊。根据法庭文件显示，Meta 公司自 2018 年以来一直在明知故犯地从盗版来源下载受版权保护的影片内容，累计涉及至少 2396 部作品。这些非法获取的视频资料被用于训练包括 Meta Movie Gen 视频生成模型和 LLaMA 语言大模型在内的多种 AI 系统，为 Meta 的人工智能技术发展提供了重要的数据支撑。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;更加令人意外的是 Meta 获取这些内容的方式。起诉文件详细披露，Meta 并非简单地下载这些盗版内容，而是主动利用 BitTorrent 文件共享技术进行大规模的非法内容获取。这种 P2P 下载方式的特殊之处在于，下载者同时也会成为内容的分发者，通过"种子"技术向网络中的其他用户传播相同的文件。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;Meta 选择这种下载方式绝非偶然。BitTorrent 协议的核心优势在于其分布式下载机制能够显著提升大文件的传输速度，这对于需要处理海量视频数据的 AI 训练项目而言具有重要价值。然而，这也意味着 Meta 不仅仅是被动的内容接收者，更是主动的盗版内容传播者，其行为的恶劣性质因此被进一步放大。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;原告方的律师团队在起诉书中强调，Meta 完全有能力通过合法途径获取所需的训练数据。无论是直接购买版权授权，还是修改下载工具的设置以避免传播行为，Meta 都拥有多种合规选择。然而，该公司却选择了最具争议的方式持续进行非法下载和传播活动，这种明知故犯的行为模式充分显示了其侵权的故意性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;这起诉讼案件并非孤立事件，而是近年来 AI 公司版权争议的最新爆发点。此前已有多位知名作家对 Meta 提起类似诉讼，指控其未经许可使用受版权保护的文学作品训练 AI 大模型。值得注意的是，在那些案件的法庭审理过程中，Meta 已经公开承认确实曾从盗版来源获取过训练内容。这一承认不仅为当前的诉讼提供了重要的法律依据，也让 Meta 在这起新案件中处于更加被动的地位。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;Strike3 公司在这起诉讼中的角色转变具有重要的象征意义。作为美国最活跃的版权维权机构之一，Strike3 长期以来主要专注于起诉个人盗版用户，通过大量的民事诉讼来维护版权方的合法权益。然而，此次将矛头直指 Meta 这样的科技巨头，标志着版权保护战线正在向更高层面扩展，传统的版权维权策略开始适应 AI 时代的新挑战。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;3.59 亿美元的索赔金额虽然数字庞大，但其计算依据相当清晰。按照美国版权法的相关规定，每部被侵权作品的法定赔偿金最高可达 15 万美元，而 2396 部涉案影片的总赔偿金额上限正好接近这一数字。这种按作品数量累计的赔偿方式，充分体现了版权法对批量侵权行为的严厉态度。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;对于 Meta 而言，这起诉讼的影响远超经济层面的损失。作为全球领先的科技公司，Meta 在人工智能领域的投资规模巨大，其 AI 产品的竞争力很大程度上依赖于高质量训练数据的获取。如果法庭最终认定 Meta 的数据获取方式违法，这不仅会对公司的财务状况造成直接冲击，更可能迫使其重新审视整个 AI 训练数据的获取策略。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;这起诉讼案件的更深层意义在于它可能成为 AI 行业版权规范的重要转折点。随着人工智能技术的快速发展，训练数据的需求量呈现爆炸式增长，而现有的版权法律框架显然还没有完全适应这种新兴技术的发展需求。Meta 案件的审理结果很可能为整个行业的数据使用规范确立重要的法律先例。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;目前，Meta 公司尚未对这起诉讼作出正式回应，但业界普遍认为这将是一场持续时间较长的法律拉锯战。无论最终结果如何，这起案件已经向所有 AI 公司发出了明确信号:在追求技术进步的同时，必须严格遵守版权法律的相关规定，否则将面临巨大的法律和经济风险。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367923</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367923</guid>
      <pubDate>Sun, 17 Aug 2025 10:31:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Gitee 企业版 AI 队友邀测开启：程序员的贴身助理来了</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;在团队协作开发中，有两类工作总让人心力交瘁：&lt;/p&gt; 
&lt;p&gt;🤦&amp;nbsp;&lt;strong&gt;一类是 PR 审查&lt;/strong&gt;：信息量大、变更复杂、上下文冗长。哪怕只是一个小改动，也得花不少时间理清上下文、理解影响范围；&lt;/p&gt; 
&lt;p&gt;🤦&amp;nbsp;&lt;strong&gt;另一类是安全漏洞排查&lt;/strong&gt;：依赖众多、更新频繁，稍有疏忽就可能埋下风险，事后追溯更是代价高昂。&lt;/p&gt; 
&lt;p&gt;这些工作既重要又琐碎，既不能不做，又难以做好。更现实的是，&lt;strong&gt;AI 想真正胜任这些工作，还远远不够成熟&lt;/strong&gt;，市面上的 AI 工具要么误报多，要么落地难，无法真正服务于企业级的研发流程。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Gitee 企业版刚刚推出的「AI 队友」功能，就是为了解决这个现实问题。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-92cde867ee668b21e5a6c74cccb9abee554.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;我们不指望也不敢完全让 AI 替我们做此类决策，我们更需要的是一位靠谱的「实习生型 Bot」：&lt;strong&gt;不会瞎拍板、不会乱判断，但能主动发现问题&lt;/strong&gt;，让代码审得更清楚，安全盯得更扎实。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;PR 审查队友：让代码审得更快、更准、更稳&lt;/h2&gt; 
&lt;p&gt;面对频繁提交的 PR 和复杂的协作背景，人工审查不仅耗时耗力，还容易遗漏关键问题。PR 审查队友通过智能分析与规则驱动，协助审查人员聚焦重点内容，在不替代人工判断的前提下，有效提升审查效率。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-6eeccbe08f3b64b5a96a21b811333ad0ade.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;它的核心能力包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;自动触发审查&lt;/strong&gt;：在 PR 新建、更新或重新打开时，自动完成初步审查，也可通过 @PR 审查队友 /review 指令手动发起；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height="123" src="https://oscimg.oschina.net/oscnet/up-8bc1b8ee6c9c96cc6e2e2ecaeaaa001cc30.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;结构化检查维度：涵盖功能逻辑、安全性、性能与可维护性四大类问题，生成清晰的评论意见；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height="609" src="https://oscimg.oschina.net/oscnet/up-af5b6323ed9f0906ddce24f2182fc3f0cac.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;规则灵活配置：支持每个仓库独立设置最多 10 条自定义规则，结合上传的 txt 格式企业规范，实现差异化审查策略；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-d022b59593b0d8a77758afc7b00b730ea97.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;多仓库支持：每位审查队友可同时服务最多 5 个仓库，超出可灵活增配，满足企业规模化协作需求；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;文件过滤能力：支持以 glob 规则排除自动生成文件（如 RPC、templ 等），避免干扰审查结果；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;权限与管理机制：仅企业管理员或仓库负责人可配置和管理队友，保障安全可控；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;专属工作区与任务日志：可查看历史审查行为、审查计划分布与执行状态，便于团队协同管理；&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-c420fcc3c18ef0789db500fb56dd16104c3.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PR 审查队友适用定位：补充人工盲区，聚焦潜在风险，不做决策，只做提醒。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;安全分析队友：盯紧依赖，提前识别风险&lt;/h2&gt; 
&lt;p&gt;随着项目日益依赖第三方组件，单靠人工排查已难以满足对代码安全的管理要求。安全分析队友基于啄木鸟 CodePecker SCA 引擎，提供高频自动扫描与 AI 分析能力，帮助团队实现持续的依赖安全治理。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-0df7dcc13bfe7b34ebd592e1be2c43f83b7.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;它的核心能力包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;自动化漏洞扫描：支持每周定时扫描与手动即时扫描，确保漏洞发现不滞后；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-104b5eb66845a60904220e0bf99b3c105d1.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CVE 漏洞识别与报告生成：自动检测仓库代码及依赖中的 CVE 漏洞，提供风险等级、定位详情及修复建议；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-65793620a6c467ce93126cd6641c481f8e7.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;AI 风险分析总结：为高危问题自动创建缺陷卡片，帮助开发者快速理解风险并推动闭环处理；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-f62beeb23754240b78102b58f865903c34e.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;多语言支持：覆盖 JavaScript、Python、Java 等主流语言，适配不同技术栈的项目；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;仓库级配置能力：可自动识别代码语言，灵活适配扫描策略；扫描行为与结果均可在工作区中可视化查看。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;安全分析队友适用定位：提前暴露依赖漏洞，推动闭环修复，保障交付安全。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;现已开放邀测，欢迎扫码体验&lt;/h2&gt; 
&lt;p&gt;目前，「AI 队友」功能已在 Gitee 企业版中正式上线，公开邀测同步开启。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;查看 AI 队友的详细配置&amp;amp;最佳实践指南：&lt;a href="https://help.gitee.com/enterprise/ai/ai_teamates" target="_blank"&gt;https://help.gitee.com/enterprise/ai/ai_teamates&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;如果你的团队也在面对 PR 审查负担、漏洞排查难题，欢迎申请试用，让 AI 队友来帮你分担重复性工作、提升团队整体效能。&lt;/p&gt; 
&lt;p&gt;👇&lt;strong&gt;扫码进群获取邀测资格与使用指引&lt;/strong&gt;👇&lt;/p&gt; 
&lt;p&gt;&lt;img height="396" src="https://oscimg.oschina.net/oscnet/up-eb9aab33f9912c1b53ec2b87e6f098590ce.png" width="396" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-af428a1f9979c04cfb1484b3743ef1cb247.gif" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367917</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367917</guid>
      <pubDate>Sun, 17 Aug 2025 10:04:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>以赛育才，绽放创新之花：鲲鹏全面助力 PAC2025 巅峰对决</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="margin-left:0; margin-right:0"&gt;近日，第 12 届并行应用挑战赛（Parallel Application Challenge，简称「PAC2025」）在内蒙古鄂尔多斯圆满落幕。本届竞赛由全国信标委算力标准工作组指导，ACM 中国高性能计算专家委员会与中国智能计算产业联盟联合主办，全球计算联盟高性能计算产发委协办，北京并行科技股份有限公司承办，吸引了来自全国各地高校、科研机构和产业界的 200 余支精英战队参与角逐。&lt;strong&gt;鲲鹏作为大赛的独家算力基座和核心技术支持平台，全程赋能赛事，助力打造了一场汇聚智慧与创新的并行计算盛会&lt;/strong&gt;。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;img alt="图形用户界面

描述已自动生成" src="https://oscimg.oschina.net/oscnet//fb52a4233038b87b726f270aeb7b37ec.jpeg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;自 2024 年起，PAC 大赛全面基于鲲鹏硬件平台，开创了「以赛促研、以赛促用、以赛育才」的自主算力生态新阶段。参赛作品基于鲲鹏处理器及 KUPL 并行编程框架进行代码优化与应用研发，切实推动了鲲鹏平台生态的融合与高性能计算算法的创新突破。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;本届大赛最终有 27 支顶级战队挺进决赛，在应用赛道和优化赛道上涌现出兼具技术深度与产业价值的优秀作品。这些作品广泛应用于气象模拟、生物医药、大模型推理等关键领域，实现了显著的性能提升。通过实战检验，&lt;strong&gt;鲲鹏凭借其多核异构设计、高并发低功耗优势及完善的开发工具链，为参赛选手提供了稳定、高效的技术支持&lt;/strong&gt;。选手们深度挖掘鲲鹏片上内存资源，结合向量化计算、矩阵计算、内存绑定、任务调度优化等先进技术，实现了性能的突破，充分体现了&lt;strong&gt;鲲鹏平台「从可用、好用到广泛用」的技术成熟度&lt;/strong&gt;。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;strong&gt;PAC2025 的成功举办不仅展示了鲲鹏作为自主创新算力基座的强大实力，也标志着国内算力生态正从「追赶」迈向「引领」。这不仅是一场高水平的技术竞赛，更是一次凝聚行业共识、培育创新人才、推动产业升级的重要里程碑。&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;展望未来，鲲鹏将继续携手高校、科研机构及产业伙伴，深化「产学研用」深度融合，持续加大人才培养和生态建设投入，为我国高性能计算事业注入源源不断的强劲动力，共同迎接智能时代的到来。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;strong&gt;以下为本届竞赛获奖名单：&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;strong&gt;附：&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;img src="https://oscimg.oschina.net/oscnet//ab7c1d871dca28996e3f4ef95afb434b.jpeg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;img src="https://oscimg.oschina.net/oscnet//792aa8896ab97a5d038774780aa3cf24.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367916</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367916</guid>
      <pubDate>Sun, 17 Aug 2025 10:02:00 GMT</pubDate>
      <author>作者: 开源科技</author>
    </item>
    <item>
      <title>治理算法滥用，核心在于「算法透明」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:black; text-align:left"&gt;&lt;span style="color:#000000"&gt;8 月 22 日,《新华每日电讯》发表题为《治理算法滥用，核心在于「算法透明」》的评论。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; text-align:left"&gt;&lt;span style="color:#000000"&gt;近年来，算法滥用事件频发，这些事件不断提醒我们：打开「算法黑箱」已成为数字时代必须面对的核心议题。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; text-align:left"&gt;&lt;span style="color:#000000"&gt;算法滥用的社会危害性不容小觑。首先，用户自主选择接收的信息范围被无形限制。算法根据用户历史行为构建偏好模型，不断强化同类内容推送，形成「信息茧房」。人们被困在自我重复的信息回音壁中，逐渐失去接触多元观点、挑战自我认知的机会，社会共识的基础被悄然侵蚀。这也是当下网络戾气激增、群体情绪激化突出的成因之一。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; text-align:left"&gt;&lt;span style="color:#000000"&gt;其次，用户可能因算法滥用而遭受消费者权益损害。「千人千面」的定价策略让老用户看到更高价格，「精准营销」跨越隐私边界，用户在不自知中成为「被算计的对象」。更值得警惕的是，算法滥用可能助长网络谣言、网络暴力等不良信息的传播。为追求用户停留时长，算法往往优先推送煽动性、情绪化内容，使理性声音被淹没，情绪变得极端化，甚至引发线下事件。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; text-align:left"&gt;&lt;span style="color:#000000"&gt;治理算法滥用的核心在于「打开黑箱」，实现算法透明。《互联网信息服务算法推荐管理规定》所要求的平台公示算法推荐服务的基本原理、目的意图和主要运行机制，正是这一理念的重要实践。但需要明确的是，算法透明并非要求公开商业秘密或核心技术细节，而是揭示算法服务的基本规则和对用户权益的影响方式。就像我们不需要了解发动机的制造原理，但有权知道汽车的安全性能和油耗标准一样，用户有权知晓算法如何影响他们的信息环境和决策选择。这种有限度的透明，既保护了企业的创新动力，又保障了用户的基本知情权和选择权，让用户真正有能力自由挑选自己想要了解或喜欢的网络信息。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; text-align:left"&gt;&lt;span style="color:#000000"&gt;当然，治理算法滥用需要多方协同发力。其一，网络平台应当以清晰易懂的方式说明算法服务对用户权益的影响，提供必要的关闭或调整选项。特别是对于老年人等特殊群体，要结合老年人经常面临的实际问题，适当增加诸如反电信网络诈骗、反伪科普等内容的推送比例。其二，监管机构需实施常态化监管，督促平台持续优化内部算法安全管理机制和算法技术应用提示说明机制，确保平台以简明扼要、清晰易懂的方式公开算法推荐服务的基本情况。其三，社会公众也需要积极参与治理活动，提升信息素养，培养数字时代的批判性思维，主动寻求多元信息源，共同构建健康透明、向上向善的网络信息生态。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; text-align:left"&gt;&lt;span style="color:#000000"&gt;值得注意的是，打开「算法黑箱」存在一定技术门槛。算法公示机制的根本目的是实现个体权益受算法技术应用影响方式的「可视化」，所以，公示范围、公示频率应当围绕该目的而合理设置，而非以「信息倾泻」的方式让公众无从知晓算法技术应用对自身权益究竟有何影响。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; text-align:left"&gt;&lt;span style="color:#000000"&gt;进一步而言，平台算法公示信息更适宜与普法信息同步呈现，避免一般社会公众误认为算法技术应用对自身权益存在影响就等于「重大威胁」，借由普法信息打消公众不必要的担忧，帮助公众在准确知晓权益影响程度、方式的基础上，自主选择相应的服务选项。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; text-align:left"&gt;&lt;span style="color:#000000"&gt;归根结底，算法原理公示从来都不是减损企业市场竞争技术优势地位的强制性规范，而是为了引导信息服务行业提供更优质的信息服务、形成更健康的行业惯例。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; text-align:left"&gt;&lt;span style="color:#000000"&gt;在实践中，开设「平台算法原理公示」专栏、公开算法推荐服务权益影响说明、用户代表参与算法设计、第三方算法安全审计等方式，不仅是数字时代算法技术应用监管的创新尝试，更是数字时代技术安全治理理念的重要进步。阳光是最好的消毒剂，只有让算法运行在阳光下，才能打破信息茧房的桎梏，构建真正开放、包容、健康的数字空间。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367915</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367915</guid>
      <pubDate>Sun, 17 Aug 2025 10:02:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>俄罗斯 HapticVLM 系统发布，触觉识别准确率 84.7%</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;来自俄罗斯斯科尔科沃科学技术研究院的科研团队最新研发了一个名为 HapticVLM 的多模态触觉系统，材料识别准确率高达 84.7%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;根据介绍，HapticVLM 系统的技术核心体现在其精巧的架构设计上。系统巧妙地融合了深度卷积网络与视觉语言推理技术，实现了从视觉信息到触觉反馈的无缝转换。整个识别过程如行云流水般顺畅:系统首先通过先进的 ConvNeXt 架构对物体进行深度扫描，精准识别出是金属的冰冷坚硬、木材的温润质朴，还是织物的柔软细腻。随后，系统会生成极其稳健的视觉嵌入数据，为后续的材料识别提供坚实的数据基础。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;img height="356" src="https://oscimg.oschina.net/oscnet/up-ca52106883566230e53bf4b3497fa8821a0.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;HapticVLM 还具备了环境感知的智慧。借助最新的 Qwen2-VL-2B-Instruct 视觉语言模型，系统能够智能推测周围环境的温度状况，并将这一信息 seamlessly 整合到触觉体验中。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;当用户的手指轻抚虚拟物体表面时，HapticVLM 会通过高精度扬声器产生与特定材质完美匹配的振动反馈。这些振动并非简单的机械震动，而是经过精密计算的复合波形，能够准确模拟金属表面的坚实感、木质纹理的粗糙感，以及丝绸面料的顺滑感。每一次触碰都能带来令人信服的真实感受。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;通过集成的帕尔贴模块，HapticVLM 能够提供精确的动态温度变化，让用户真切感受到金属的冰冷、木材的温和，甚至是刚刚烘焙完成的面包所散发的温暖。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;实验数据表明，在涵盖五种不同听觉触觉模式的综合测试中，系统平均识别准确率达到了 84.67%，这一成绩在同类技术中堪称翘楚。在 15 种复杂环境场景的温度估算挑战中，系统表现出了 86.7% 的超高准确率。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;不过，研究团队也坦诚当前系统存在的局限性，并明确了未来的发展方向。团队计划在触觉模式的广度和深度上进一步拓展，同时加强用户体验研究。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;HapticVLM 系统的应用前景极其广阔，几乎涵盖了所有需要触觉交互的数字化场景。在虚拟现实游戏中，玩家将能够真实感受到剑刃的锋利和盔甲的厚重。在在线购物平台上，消费者可以在购买前就体验到商品的真实手感。在远程医疗领域，医生能够通过触觉反馈进行更精确的远程诊断。在教育培训中，学生可以通过触觉体验更深入地理解物理和化学知识。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367907</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367907</guid>
      <pubDate>Sun, 17 Aug 2025 09:17:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Kimi K2 再提速，最高可达每秒 100 Tokens</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;月之暗面今日&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FMMklNqYVQWdCRzWQwOUs0Q" target="_blank"&gt;宣布&lt;/a&gt;，经过工程师们的不懈努力，kimi-k2-turbo-preview 模型输出速度已经提升至每秒 60 Tokens，最高可达每秒 100 Tokens。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;目前该模型仍然享受 5 折特惠价格，模型每百万 tokens 输入价格（缓存命中）¥2.00，输入价格（缓存未命中）¥8.00，输出价格 ¥32.00。9 月 1 日恢复原价。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-9de6fdf009846744551a9cb1485708ffcde.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;更多信息请访问官网&lt;em&gt; https://platform.moonshot.cn&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;月之暗面 8 月 1 日发布 Kimi K2 高速版 —— Kimi-K2-turbo-preview，模型参数与 Kimi-K2 一致，但输出速度由每秒 10 Tokens 提升至每秒 40 Tokens。&lt;/p&gt; 
&lt;p&gt;Kimi K2 是一款具备更强代码能力、更擅长通用 Agent 任务的 MoE 架构基础模型，总参数 1T，激活参数 32B。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367902</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367902</guid>
      <pubDate>Sun, 17 Aug 2025 08:58:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>PlutoPrint - 从 HTML 生成 PDF 和图像</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                        
                                                                                    &lt;p&gt;PlutoPrint 是一个轻量级且易于使用的 Python 库，可直接从 HTML 或 XML 内容生成高质量的 PDF 和图像。&lt;/p&gt;

&lt;p&gt;它基于&lt;a href="https://github.com/plutoprint/plutobook"&gt;PlutoBook&lt;/a&gt;强大的渲染引擎，并提供简单的 API，可将 HTML 转换为清晰的 PDF 文档或色彩鲜艳的图像文件。这使其成为报告、发票或视觉快照的理想选择。&lt;/p&gt;

&lt;table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#1f2328; display:block; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Segoe UI&amp;quot;,&amp;quot;Noto Sans&amp;quot;,Helvetica,Arial,sans-serif,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;; font-size:16px; font-style:normal; font-variant:tabular-nums; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; max-width:100%; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:max-content; word-spacing:0px"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="border-color:#d1d9e0"&gt;Invoices&lt;/th&gt;
&lt;th style="border-color:#d1d9e0"&gt;Tickets&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="border-color:#d1d9e0; border-image:none 100% / 1 / 0 stretch; border-style:solid; border-width:0.666667px"&gt;&lt;img height="323" src="https://static.oschina.net/uploads/space/2025/0821/154554_nIdG_4252687.png" width="569" referrerpolicy="no-referrer"&gt;&lt;/td&gt;
&lt;td style="border-color:#d1d9e0; border-image:none 100% / 1 / 0 stretch; border-style:solid; border-width:0.666667px"&gt;&lt;img height="327" src="https://static.oschina.net/uploads/space/2025/0821/154608_8DTR_4252687.png" width="567" referrerpolicy="no-referrer"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/plutoprint</link>
      <guid isPermaLink="false">https://www.oschina.net/p/plutoprint</guid>
      <pubDate>Sun, 17 Aug 2025 08:45:00 GMT</pubDate>
    </item>
    <item>
      <title>Anthropic 寻求 100 亿美元融资</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2025-08-21%2Fanthropic-in-talks-to-raise-up-to-10-billion-in-new-funding" target="_blank"&gt;根据《彭博社》的报道&lt;/a&gt;，Anthropic 正就一轮高达 100 亿美元的新融资进行最后谈判，此轮融资将使其投后估值达到约 1700 亿美元。因投资者需求远超预期，原定 50 亿美元的融资规模被直接翻倍。本轮完成后，Anthropic 现金储备将大幅增加。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-a4f572245a4ba561e4f3b580fcb0e2fcb0f.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Anthropic 成立于 2021 年，由前 OpenAI 核心成员创建，其主要产品 Claude 系列 AI 模型在市场中广受关注。截至 2024 年，其曾获得亚马逊与谷歌等巨头的大规模投资，此次新一轮融资若成功，将令其资金实力更上层楼。&lt;/p&gt; 
&lt;p&gt;据悉，投资公司 Iconiq Capital 将领投该轮融资。知情人士透露，其他预计的参与者包括 TPG Inc.、光速创投、Spark Capital 和 Menlo Ventures。Anthropic 还与卡塔尔投资局和新加坡主权基金新加坡政府投资公司（GIC）就加入这一轮谈判进行了讨论&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367897</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367897</guid>
      <pubDate>Sun, 17 Aug 2025 08:38:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>庆祝 Debian 「第 100000 岁生日」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Debian 社区通过邮件列表庆祝 Debian 的「第 100000 岁生日」 : D&lt;/p&gt; 
&lt;p&gt;当然这里的「100000」并非真正的十万，而是二进制表示，即「0b100000」，相当于十进制的 32 年，或十六进制的 &lt;code&gt;0x20&lt;/code&gt;。这意味着 Debian 成立已经整 32 年了，而 Debian 的成立日期正好是 &lt;strong&gt;1993-08-16&lt;/strong&gt;。因此，2025-08-16 是 Debian 的 32 周年纪念日。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0822/162849_Baek_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;https://lists.debian.org/debian-devel-announce/2025/08/msg00006.html&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;在周年纪念之际，Debian 社区特别感谢了为最新版本 &lt;strong&gt;Debian 13 「Trixie」&lt;/strong&gt; 发布付出努力的各个团队，包括负责镜像与软件包的 FTPMaster、统筹发布的 Release 团队、Installer 与镜像制作团队、文档与翻译贡献者，以及修复关键 Bug 的开发者们。文章还提到，代码签名服务的改进为未来安全更新打下了坚实基础。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367896</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367896</guid>
      <pubDate>Sun, 17 Aug 2025 08:32:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Pulsar 中的消息保留、过期及积压机制解析</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;在 Pulsar broker 中, 消息的 Retention, Expiry 和 Backlog quota 是比较重要的功能，它们表现的是 Pulsar 对于流经它的数据的管理。 但是受限于复杂度和文档语言等因素，开发者可能无法在第一时间很直观的了解它们。&lt;/p&gt; 
&lt;p&gt;本系列上篇为大家介绍了 Retention 和 Expiry 的概念、行为、应用、实现和注意事项&lt;a href="https://my.oschina.net/apachepulsar/blog/18688106"&gt;技术文档 | Pulsar 中的消息保留、过期及积压机制解析（上）&lt;/a&gt;，本文将带来关于 Backlog quota 的解析。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Backlog quota&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. 概念&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Backlog 意为消息积压，指未被消费的消息；quota 意为配额，指对于未消费消息的限制。&lt;strong&gt;因此 Backlog quota 是为了限制消息堆积。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;当消费者的消费速率跟不上生产者的生产速率时，会出现消息堆积的情况，这在日常开发过程中非常常见。尽管**相比于其他消息队列，Pulsar 提供了几乎可以无限扩容消费者数量的机制 **(Shared, Key_Shared 订阅模式) 来提高消费速率， 但是在实际的业务场景中，消息堆积的情况也时有发生。&lt;/p&gt; 
&lt;p&gt;为了应对这种情况，Pulsar 提供了 Backlog quota 机制来在一定程度治理它。当然，这种治理无法提高消费者的消费速率，只是在生产速率和消费速率之间做出一种平衡，比如说它的一种治理策略是自动清理 Backlog 消息。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-fd21c3936cb8cf9fff04263bc486f32160b.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. 行为&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Pulsar 在 Topic 级别和 Subscription 级别都有 Backlog 的概念。Topic 级别的 Backlog 是指该 Topic 下所有 Subscription 的 Backlog 总和 (pulsar_msg_backlog 和 pulsar_storage_backlog_size 的含义略有差异，这里使用 pulsar_msg_backlog 的含义)，Subscription 级别的 Backlog 是指当前 Subscription 的 Backlog。&lt;/p&gt; 
&lt;p&gt;Backlog quota 机制实际工作在 Subscription 级别，它和 Expiry 机制略有相似，但更加强大。它对于 Backlog 有两项限制、两种作用域和三种治理策略：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2.1 两项限制&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;limitTime：Backlog 的最大存活时间，单位是秒，超过这个时间的 Backlog 会进入治理流程；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;limitSize：Backlog 的最大大小，单位是字节，超过这个大小的 Backlog 会进入治理流程；&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;2.2 两种作用域&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;destination_storage：针对 Topic 的 Backlog 的存储空间，和 limitSize 搭配使用；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;message_age：针对 Topic 的 Backlog 的消息存活时间，和 limitTime 搭配使用；&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;2.3 三种治理策略&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;producer_request_hold：当 Backlog 超过限制，Pulsar 会挂起 Producer 的链接请求，直到 Backlog 降到限制以下；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;consumer_backlog_eviction：当 Backlog 超过了限制，Pulsar 会自动移动所有超限的 Subscription 的游标 (相当于自动确认这些消息，使得这些消息对 Consumer 不可见)，将 Backlog 降低到限制以下；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;producer_exception：当 Backlog 超过了限制，客户端创建 Producer 会抛出异常，直到 Backlog 降到限制以下。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3. 应用&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.1 监控&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Pulsar 在 Prometheus 上提供了 pulsar_msg_backlog 和 pulsar_storage_backlog_size 来分别观测 Topic 级别的未消费的消息数量、未消费消息的总大小。如果这两个指标数值较高，说明该 Topic 消息积压严重。&lt;/p&gt; &lt;p&gt;另外，Pulsar 也提供了 pulsar_subscription_back_log 这一 Subscription 级别的指标，当我们发现某个 Topic 的 backlog 数值较高时，可以通过查看该 Topic 下的 pulsar_subscription_back_log 指标来找到具体的 Subscription；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;通过 Topic stats 来监控 Backlog quota 的情况：&lt;/p&gt; &lt;p&gt;pulsar-admin topics stats &lt;a href="persistent://my-tenant/my-ns/my-topic"&gt;persistent://my-tenant/my-ns/my-topic&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;3.2 设置&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;和 Retention 和 Expiry 一样，Backlog quota 的设置也分为两个级别：namespace 和 topic 级别。在 Namespace 级别设置了之后，该 Namespace 的所有 Topic 都会继承该策略；在 Topic 级别设置了之后，该 Topic 会覆盖 Namespace 的设置。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Namespace 级别&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;查看当前 Namespace 的 Backlog quota&lt;/p&gt; &lt;p&gt;pulsar-admin namespaces get-backlog-quotas my-tenant/my-ns&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;设置 Namespace 的 Backlog quota&lt;/p&gt; &lt;p&gt;pulsar-admin namespaces set-backlog-quota my-tenant/my-ns --limitTime 3600 --policy producer_request_hold --type message_age&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;删除 Namespace 的 Backlog quota&lt;/p&gt; &lt;p&gt;pulsar-admin namespaces remove-backlog-quota my-tenant/my-ns&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Topic 级别&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;查看当前 Topic 的 Backlog quota&lt;/p&gt; &lt;p&gt;pulsar-admin topics get-backlog-quotas &lt;a href="persistent://my-tenant/my-ns/my-topic"&gt;persistent://my-tenant/my-ns/my-topic&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;设置 Topic 的 Backlog quota&lt;/p&gt; &lt;p&gt;pulsar-admin topics set-backlog-quota &lt;a href="persistent://my-tenant/my-ns/my-topic"&gt;persistent://my-tenant/my-ns/my-topic&lt;/a&gt; --limitTime 3600 --policy producer_request_hold --type message_age&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;删除 Topic 的 Backlog quota&lt;/p&gt; &lt;p&gt;pulsar-admin topics remove-backlog-quota &lt;a href="persistent://my-tenant/my-ns/my-topic"&gt;persistent://my-tenant/my-ns/my-topic&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;4. 实现&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Backlogquota 机制的触发有两个入口，分别是 ServerCnx#handleProducer(&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fpulsar%2Fblob%2Fv3.0.4%2Fpulsar-broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fpulsar%2Fbroker%2Fservice%2FServerCnx.java%23L1448" target="_blank"&gt;https://github.com/apache/pulsar/blob/v3.0.4/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java#L1448&lt;/a&gt;) 和 BrokerService#startBacklogQuotaChecker()(&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fpulsar%2Fblob%2Fv3.0.4%2Fpulsar-broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fpulsar%2Fbroker%2Fservice%2FBrokerService.java%23L657" target="_blank"&gt;https://github.com/apache/pulsar/blob/v3.0.4/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java#L657&lt;/a&gt;) ,前者和后者略有差距，这里不做详细解释。仅以 BrokerService#startBacklogQuotaChecker() 为例，简单介绍 Backlog quota 的执行流程。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4.1 Backlog Quota Checker 初始化&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 Pulsar 启动时， BrokerService#startBacklogQuotaChecker() 会检查当前 Broker 是否允许 Backlog quota 检查（broker.conf 的 backlogQuotaCheckEnabled(default=true)）。如果允许，向线程池注册一个定时任务，定时任务的执行周期是 broker.conf 的 backlogQuotaCheckIntervalInSeconds(default=60s)。Pulsar 每隔 60s 检查一次所有 Topic 的 Backlog quota，如果 Topic 设置了 Backlog quota，执行后续流程。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4.2 Backlog Quota 执行流程&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;遍历所有 Topic，如果 Topic 设置了 Backlog quota，执行后续流程。否则，跳过该 Topic；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;优先根据 limitSize 检查该 Topic 消费最慢的 Subscription 的 Backlog 是否超过了限制，如果未超限，再根据 limitTime 检查；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如果 Backlog 超过了限制，根据 policy 执行相应的治理策略：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;producer_request_hold：挂起 Producer 的链接请求，直到 Backlog 降到限制以下；&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;consumer_backlog_eviction：自动移动所有超限的 Subscription 的游标，将 Backlog 降低到限制以下；&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;producer_exception：客户端创建 Producer 会抛出异常，直到 Backlog 降到限制以下。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;5. 注意事项&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Pulsar 暴露出的 Prometheus 指标中的 pulsar_storage_backlog_size 并不完全精准，它只是一个近似值。在 Shared 和 Key_Shared 模式下，允许消息单独确认消息，但是这些单独确认的消息不会加入到 Backlog 的计算中，因此这个指标并不会精准反映 Backlog 情况，它通常会比实际数值大；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;pulsar_msg_backlog 一般也是近似值，不会将 Ack 空洞计算在内，但是如果将 broker.conf 的 exposePreciseBacklogInPrometheus 设置为 true，则会将单独确认的消息计算在内，pulsar_msg_backlog 会更加精准；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;由于 EntryFilter(&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpulsar.apache.org%2Fdocs%2F3.2.x%2Fdevelop-plugin%2F%23entry-filter" target="_blank"&gt;https://pulsar.apache.org/docs/3.2.x/develop-plugin/#entry-filter&lt;/a&gt;) 机制的存在，在消费消息时可以根据 EntryFilter 过滤掉一些消息，这些被过滤掉的消息严格来说并不算 Backlog，但是我们在计算 Backlog 时，不可能将 Bookkeeper 中的所有消息都拉取出来计算。因此如果 Broker 挂载了 EntryFilter 插件，pulsar_msg_backlog 和 pulsar_storage_backlog_size 以及 pulsar_subscription_back_log 都无法精准反映实际的 Backlog 情况，它们通常会比实际数据大一些；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;不管是根据 limitSize 还是 limitTime 来限制 Backlog，当 policy=consumer_backlog_eviction 时，都无法完全精准的清理 Backlog。理想情况下，会将 Backlog 降低到原来的 10%；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如果在 Broker 端禁用 Backlog quota checker (将 broker.conf 中 backlogQuotaCheckEnabled 设置为 false)，并且设置的 Backlog quota 的 policy=consumer_backlog_eviction，Pulsar 将不会自动清理 Backlog；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如果使用 Backlog quota，然后 Backlog 达到了阈值，并且 policy=producer_request_hold 或 producer_exception ，在 Broker 重启或自动重平衡时，会导致所有的 Producer 无法链接到 Broker，进而无法生产消息，直到 Backlog 降到限制以下；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如果使用 limitTime 限制 Backlog，需要注意 Client 和 Broker 的时间同步，否则可能会导致 Backlog 无法正确的清理。因为此时 Backlog 的判断是以 Broker 的时间为基准的；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如果该 Topic 设置了 Retention，Backlog quota 必须要小于 Retention。假设 Retention 设置了 10GB，Backlog quota 必须要小于 10GB。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在文章最后，对 Pulsar 的 Retention, Expiry 和 Backlog quota 做一个总结：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Retention 是 Pulsar 对于过期数据的保留和清理策略，它工作在 Topic 级别，通过定时任务清理过期数据，将全部 Subscription 都消费过后的数据从存储介质上删除来清理存储空间；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Expiry 即为 Message TTL，它工作在 Subscription 级别，通过定时任务来检查 Subscription 中超时未消费的消息，并自动的将这些消息确认，使其对消费者不可见；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Backlog quota 是对未被消费的消息的限制，它实际工作在 Subscription 级别，通过定时任务来检查 Subscription 中的 Backlog，如果 Backlog 超过了限制，会执行相应的治理策略，拒绝新的 Producer 链接或者自动确认消息。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;这三个功能并不冲突，它们可以组合使用，我们可以**通过 Retention 删除过期数据，通过 Expiry 处理超时未消费的数据，通过 Backlog quota 治理消息堆积。**但是由于他们三者都涉及到了对数据的操作，大家在使用时应当谨慎，在使用前根据实际业务仔细评估，避免数据丢失或者数据不一致的情况。&lt;/p&gt; 
&lt;p&gt;社区将持续输出更多 Pulsar 的技术内容；欢迎加入社群讨论或在评论区留言，与我们交流更多关于 Pulsar 的问题。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/apachepulsar/blog/18689158</link>
      <guid isPermaLink="false">https://my.oschina.net/apachepulsar/blog/18689158</guid>
      <pubDate>Sun, 17 Aug 2025 08:24:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>AWS CEO 认为「用 AI 全面替代初级员工」是愚蠢的想法</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;亚马逊 AWS 首席执行官 Matt Garman 近日在一次采访中&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DnfocTxMzOP4" target="_blank"&gt;表示&lt;/a&gt;，&lt;strong&gt;用人工智能全面替代初级员工，是「我听过最蠢的想法」&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;他强调，初级员工不仅成本低，更是最容易与 AI 工具结合的群体，是企业长期发展的关键力量。如果公司完全依赖 AI，而不培养新人，十年后可能会面临无人具备核心技能的困境。他认为，企业应该继续招聘应届生，教他们如何构建软件、分解问题和采用最佳实践。他说 AI 时代最有价值的技能与大学学位不相关。要保住自己的工作员工必须不停的继续学习更新技能。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1498" src="https://static.oschina.net/uploads/space/2025/0822/162212_K8BN_2720166.png" width="2664" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Garman 批评一些企业用「AI 写了多少代码」来衡量价值，称这是一个误导性的指标。在他看来，代码质量远比数量重要。&lt;/p&gt; 
&lt;p&gt;与此同时，AWS 内部已有超过八成的开发人员在使用 AI 工具，涵盖写单元测试、文档和代码等工作，并且使用率还在持续上升。但 Garman 强调，AI 应该作为助手来提升效率，而不是用来取代年轻人才。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367892</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367892</guid>
      <pubDate>Sun, 17 Aug 2025 08:22:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>达梦数据三天两度发布公告：公司两位董事先后被立案调查</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;8 月 21 日晚，达梦数据再发布公告称，公司于近日收到湖北省应城市监察委员会下发的《立案通知书》和《管护通知书》，对公司董事兼高级副总经理陈文立案调查并实施管护措施。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;目前公司及子公司日常经营情况正常，各项业务稳步推进。公司尚未知悉上述事项的进展及结论，将密切关注后续进展并及时履行信息披露义务。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img alt="" height="284" src="https://oscimg.oschina.net/oscnet/up-c40855a0dc2577d4d1cd7a522484e3a3c78.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;公司 2024 年报显示，陈文，女，1973 年 7 月出生，本科学历，高级经济师。1997 年 7 月专科毕业于湖北省高等商业专科学校财务会计专业，2004 年 7 月本科毕业于华中农业大学法律专业。2002 年 1 月至 2020 年 11 月，在达梦有限历任销售经理、华东区域市场总监、副总经理、高级副总经理；2020 年 11 月至今，在达梦数据担任董事、高级副总经理；2021 年 3 月至今，在北京达梦担任总经理。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;公司 2024 年报显示，陈文 2024 年从公司领取税前薪酬为 304.41 万元。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;8 月 19 日，达梦数据也曾发布公告表示，公司董事兼总经理皮宇被立案调查并实施留置措施。&lt;/span&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;达梦数据成立于 2000 年，是国内数据库产品开发服务商，主要提供各类数据库软件及集群软件、云计算与大数据等一系列数据库产品及相关技术服务。其客户包括建设银行、中国人保、国家电网、中国航信、中国移动、中国烟草等企业，产品应用于党政、金融、能源、航空、通信等数十个领域。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;该公司于 2024 年 6 月 12 日在上海证券交易所科创板上市，成为「国产数据库第一股」。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;从 6 月披露的半年报预告来看，达梦数据预计 2025 年上半年实现营业收入 4.95 亿～5.13 亿元，较去年同期增长 40.63%～45.74%。2025 年一季度，达梦数据实现收入 2.58 亿元，归母净利润 9816 万元。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;相关阅读：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/news/367239" target="news"&gt;达梦数据：公司董事兼总经理被留置&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367891</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367891</guid>
      <pubDate>Sun, 17 Aug 2025 08:21:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Vercel 宣布旗下 AI Gateway 服务正式 GA</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Vercel&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvercel.com%2Fblog%2Fai-gateway-is-now-generally-available"&gt;宣布&lt;/a&gt;&amp;nbsp;AI Gateway 已正式 GA，它建立在 Vercel 为数百万用户提供支持的 v0.app 系统之上，经过实战验证，具有高度稳定性和可靠性。&lt;/p&gt; 
&lt;p&gt;该服务支持数百种模型，通过统一 API 调用，无需单独管理各厂商 API 密钥、账户或配额，提供零加价（含自带密钥 BYOK）、高并发、自动故障转移、亚 20 毫秒延迟，并兼容 OpenAI 格式及 AI SDK 5。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;import { streamText } from 'ai'

const result = streamText({
  model: 'xai/grok-4', // defaults to Vercel AI Gateway
  prompt: 'How does Vercel AI Gateway have no markup on tokens?'
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;据介绍，以下开发者和团队使用 AI Gateway：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;需要&lt;strong&gt;动态评估或切换模型&lt;/strong&gt;的使用场景&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;追求&lt;strong&gt;高调用上限&lt;/strong&gt;、&lt;strong&gt;避免 rate-limit&amp;nbsp;&lt;/strong&gt;阻碍服务&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;希望&lt;strong&gt;第一时间访问新模型&lt;/strong&gt;的应用&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;对&lt;strong&gt;高可用性&lt;/strong&gt;有强要求、不能容忍单点故障&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;希望&lt;strong&gt;集中查看使用成本与监控数据&lt;/strong&gt;，简化资源管理流程&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Vercel 称该服务已在 v0.app 等产品中承载数百万用户，现可供所有团队正式使用。开发者只需修改模型字符串即可秒级切换供应商，并可实时查看用量与成本，避免锁定单一模型或平台。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;https://vercel.com/ai-gateway/models&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/367885</link>
      <guid isPermaLink="false">https://www.oschina.net/news/367885</guid>
      <pubDate>Sun, 17 Aug 2025 08:10:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
  </channel>
</rss>
