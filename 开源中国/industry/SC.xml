<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-综合资讯</title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="http://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-综合资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Thu, 29 Aug 2024 14:13:24 GMT</lastBuildDate>
        <ttl>180</ttl>
        <item>
            <title>开源日报 | 微软发布新开源字体；GitHub 新病毒；OpenAI 估值超 1000 亿美元；无需数据库的开源动态 CMS；Wireshark 4.4 发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.8.29&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/309386/wireshark-4-4-released&quot;&gt;Wireshark 4.4 发布，最强开源网络数据包分析器&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;此版本支持自动切换配置文件，这样可以将显示过滤器与一个配置文件关联，当打开匹配过滤器的捕获文件时，将自动切换到该配置文件。&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Wireshark 4.4 还改进了其&amp;nbsp;I/O 图表、Flow 图表 / VoIP 调用、TCP Stream 图表和其他 UI 对话框。此外还支持 Lua 5.3/5.4、改进的显示过滤器、支持与 zlib-ng 构建，幷包含许多其他改进。&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ce77c52a3301e6e47cf0bb9e7f25d863a28.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/309405/microsoft-cascadia-next&quot;&gt;微软推出「Cascadia Next」开源字体&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;微软宣布推出&amp;nbsp;Cascadia Code 开源字体的下一代演变 ——&amp;nbsp;Cascadia Next，其字体设计师已经为 Cascadia Next 设计了简体中文、繁体中文和日文三种字体。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-271af2f7f021169817ec12bdae0a28a5076.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#245bdb&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/309417/openai-new-funding-round-100b-valuation&quot;&gt;OpenAI 洽谈新一轮融资，估值超 1000 亿美元&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;p&gt;《华尔街日报》消息称，OpenAI 正在洽谈筹集大量资金，由之前的支持者 Thrive Capital 领投，估值超过 1000 亿美元。这大大高于 OpenAI 之前 860 亿美元的估值，是迄今为止所有 AI 初创公司中估值最高的。&lt;/p&gt; 
  &lt;p&gt;知情人士透露，Thrive 将投入约 10 亿美元，微软也有望参与其中。这笔融资将成为 OpenAI 自 2023 年 1 月微软投资近 100 亿美元以来最大的外部资本注入。&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.xlab.qianxin.com%2Fmore_ddos_details_on_steam_cn%2F&quot; target=&quot;_blank&quot;&gt;《黑神话：悟空》发行平台遭 DDoS 攻击的更多细节 (公开版)&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;XLAB 大网威胁感知系统对最近的 DDoS 攻击事件进行了深入观察。我们注意到，此次攻击涉及了近 60 个僵尸网络主控节点，这一规模远超过常规僵尸网络的控制范围。这些主控节点协同指挥了大量被感染的 bots，以波次方式发起了攻击。&lt;/p&gt; 
    &lt;p&gt;攻击的目标包括 Steam 在全球 13 个地区的服务器 IP，包括中国、美国、新加坡、瑞典、德国、奥地利、西班牙、英国、日本、韩国、澳大利亚、智利和荷兰。值得注意的是，除了 Steam 自身的服务器外，国内完美世界代理的 Steam 服务器也被列为攻击目标。总计，有 107 个服务器 IP 遭到了攻击。&lt;/p&gt; 
    &lt;p&gt;攻击行动主要分为四个波次，攻击者似乎有意选择在各个时区的游戏玩家在线高峰时段发起攻击，以实现最大的破坏效果。&lt;/p&gt; 
    &lt;p style=&quot;text-align:right&quot;&gt;&lt;span&gt;- &lt;strong&gt;奇安信 X 实验室&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.com.cn%2Ftech%2Fcsj%2F2024-07-29%2Fdoc-incfukxf1004469.shtml&quot; target=&quot;_blank&quot;&gt;谁会成为人形机器人第一城？&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;今年 4 月份以来，人形机器人创新中心在各大省市密集成立。&lt;/p&gt; 
    &lt;p&gt;4 月 16 日，广东省具身智能机器人创新中心在深圳落地；4 月 18 日，成都人形机器人创新中心正式营业；同一天，浙江人形机器人创新中心落地宁波；7 月 19 日，安徽人形机器人创新中心也在合肥落户。&lt;/p&gt; 
    &lt;p&gt;可以看到，以创新中心为牵引，各省、市围绕着人形机器人产业的一张大网已经徐徐拉开。&lt;/p&gt; 
    &lt;p&gt;那么，当城市的标签被搬上桌面，谁又会成为人形机器人第一城呢？&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;&lt;span&gt;产业象限&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6105753431%2FOum5TkZVF&quot; target=&quot;_blank&quot;&gt;GitHub 新病毒&lt;/a&gt;&lt;/h4&gt; 
  &lt;p&gt;使用 GitHub 的朋友请注意了，现在有一种新的病毒正在流行！这种病毒会在 GitHub Issues 中伪装成「技术响应」。下载后，它会控制你的计算机并黑入你的 GitHub 帐户，对你发布的仓库、星标的仓库等发起更多攻击。&lt;/p&gt; 
  &lt;p&gt;目前已有许多用户和存储库遭到了黑客攻击。在 GitHub 上冲浪的时候，也请不要太过于相信陌生人，不要点击可疑的链接、或者下载可疑的开源库！&lt;/p&gt; 
  &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-90cd0d6eee7e68eeda7f069779a5f028325.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;量子位&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1655747731%2FOuwnQ5lH4%3Frefer_flag%3D1001030103_&quot; target=&quot;_blank&quot;&gt;CUDA 用最烂的语言之一糊出了软件史上最高的商业价值&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    编程语言红利期过去了，解决实际问题比较重要。CUDA 用最烂的语言之一糊出了软件史上最高的商业价值。
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博 &lt;strong&gt;有个梨 GPT&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6444741184%2FOum1auWJr&quot; target=&quot;_blank&quot;&gt;无需数据库的开源动态 CMS&lt;/a&gt;&lt;/h4&gt; 
  &lt;p&gt;GitBase 是一套新人友好，完全无需数据库，却有管理后台，可以动态更新网站内容的开源 CMS。&lt;/p&gt; 
  &lt;p&gt;你可以快速基于这套代码，一键部署到 Vercel ，上线自己的博客网站或者导航网站。&lt;br&gt; 这套代码还可以在接入 AI 之后，实现让 AI 自动更新网站内容，甚至自动修改网站代码，增加新功能。&lt;/p&gt; 
  &lt;p&gt;地址:&amp;nbsp;https://github.com/qiayue/GitBase&lt;/p&gt; 
  &lt;div&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;- 微博 &lt;strong&gt;林亦 LYi&lt;/strong&gt;&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1808634410883194244%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;工信部：发展壮大基础软件、工业软件，全力推动软件产业高质量发展&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#262626; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;金壮龙表示，工业和信息化部将深入贯彻习近平总书记关于软件产业发展的重要指示精神，落实党的二十届三中全会改革部署，完善政策体系，加强公共服务，建好应用场景，优化产业生态，发展壮大基础软件、工业软件，推进开源体系建设，全力推动软件产业高质量发展。坚持「两个毫不动摇」，坚持服务和管理并重、发展和帮扶并举，加快构建促进专精特新中小企业发展壮大机制，加强与企业的常态化交流，帮助企业解决实际困难，不断提升核心竞争力。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;第一财经&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8cRDKjvgllH&quot; target=&quot;_blank&quot;&gt;美国科技，重大突发&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;就在英伟达引发美国科技股大跌之际，另一场争端也已开启。美国加州对人工智能的监管努力在科技界引起了巨大分歧。加州的新法案将要求人工智能开发人员在开发模型之前遵守某些规则。该法案已在州参议院获得通过，州议会必须在 8 月 31 日之前批准该法案，然后提交给州长加文·纽森（Gavin Newsom）。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;证券时报&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1808638565080544408%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;AI 文生视频开始帮美图赚钱了，上半年调整后净利同比增长 80%&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#222222; margin-left:0; margin-right:0&quot;&gt;美图发布 2024 年上半年财报，数据显示，美图上半年总收入 16.2 亿元，同比增长 28.6%。经调整后净利润 2.7 亿元，同比增长 80.3%。美图方面称，总收入与净利润增长主要得益于生成式 AI 持续提升产品效果，以付费订阅为主的影像与设计产品收入保持快速增长。&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;科创板日报&lt;/strong&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ft.cj.sina.com.cn%2Farticles%2Fview%2F5953466483%2F162dab07301901aw58&quot; target=&quot;_blank&quot;&gt;8 个月融 15 亿，创始人跑了仨&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;如果非要选一个最火热的赛道，在 2024 年，它一定是 AI。这条赛道上挤满了背景亮眼的创业者，身家亿万的富豪或者他们的家办，还有鼎鼎有名的投资人。一些有趣的现象也正在发生，今天想讲的就是，越来越多的创始人因为这样或那样的原因选择了离开自己曾发誓要改变世界的公司。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;投中网&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.163.com%2Fdy%2Farticle%2FJAN9EVAS05568DNC.html&quot; target=&quot;_blank&quot;&gt;AI Agent，下一个爆款级 AI 应用？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;与 ChatGPT 等 AI 应用相比，AI Agent 像一位更具象的全能员工，被视为人工智能机器人的初级形态，软硬件兼顾的智能体能够如同人类一般观察周围的世界、做出决策并自动采取相应的行动。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;极智 GeeTech&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8cR8l8o4NN8&quot; target=&quot;_blank&quot;&gt;中金公司：具身智能研发端开源平台渐起，人形机器人本体企业快速落地&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;中金公司发表研报称，工业机器人企业积极寻找应用突破口，尝试与 AI 大模型融合;但考虑到训练成本与准确率，AI 赋能工业机器人应用场景落地尚需时日，但模型发展成熟或为工业机器人应用打开蓝海市场。本次展会多家官方区域性创新中心首次亮相，涌现愈多本体一级企业，硬件设计迭代速度较快，各家差异化布局;企业逐渐注重大模型开发，但短期受限于训练数据量与算力。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;智通财经 APP&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FLibrePCB%2FLibrePCB&quot; target=&quot;_blank&quot;&gt;LibrePCB/LibrePCB&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;img height=&quot;180&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-baaddaae80fc0ab1a1a49820d2f165fe85c.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FLibrePCB%2FLibrePCB&quot; target=&quot;_blank&quot;&gt;https://github.com/LibrePCB/LibrePCB&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;LibrePCB 是一款免费的 EDA 套件，可用于在 Windows、Linux 和 MacOS 上开发印刷电路板。&lt;/span&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/meituantech/blog/15344283&quot; target=&quot;_blank&quot;&gt;信息流广告预估技术在美团外卖的实践&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;本文整理自美团技术沙龙第 81 期《美团在广告算法领域的探索及实践》(B 站视频)。文章首先介绍了美团信息流广告业务以及预估技术的现状，然后重点分享了信息流广告预估在美团的具体实践，围绕决策路径、超长超宽建模和全还原建模等多个维度进行了分享，最后是一些总结和展望，希望能对大家有所帮助或启发。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;135&quot; src=&quot;https://oscimg.oschina.net/oscnet/a8dc4131af681d98aee50dd673058981529846.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FMO8ymSxagbr_5BTimlKdSg&quot; target=&quot;_blank&quot;&gt;微软旗下开源.NET 框架 Mono 正式「易主」&lt;span&gt;——&lt;/span&gt;由负责「Windows 应用兼容层」的 Wine 接手&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：wine 接手，这个牛啊，越来越有指望了&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：我不是很理解，wine 为什么接手这个&lt;/span&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：wine 要运行.net 程序本来就要 mono 啊。正好有需求就给它了呗。&lt;/span&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：问题来了，unity 什么时候彻底切换到 dotnet core&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：Unity 迁移 CoreCLR 的内部工作看样子基本快完成了，目前内部版本的 Unity 已经完全跑在了 .NET 8 上，并且彻底把 mono 删了。就是不知道什么时候能用上了。&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：.net 开放后用 mono 的越来越少了，也越来越没人在乎了。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：monodevelop 也停止开发了，rocky linux9 已经装不上 monodevelop&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：wine 把 linux .NET gui 搞起来吧&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：这个 mono 是以前.net framework 时代的老 mono 吧，和新的 mono 不是同一个&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：dotnet/runtime 跨平台完成，mono 没啥用了。&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Ff1OWZi4-adHvM5oFIrmz9A&quot; target=&quot;_blank&quot;&gt;接私活碰上「睿智」甲方，说我们程序员是社会底层人士&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：猜测甲方是想要多设备登录态管理和审计方案。但是这个问法有找茬或者骗方案嫌疑&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：这样骂拉低自己修养没必要，直接开源和开盒让大家避坑好了，都灵活用工了管它啥保密和安全……&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：有没有大佬讲讲这个使用场景，到底如何实现比较好？&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：你是真来学技术的&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：有没有大佬说一下不能用 jwt 以及 redis 只能存一条的需求背景有哪些呀？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：其实可以用不叫 jwt 的 jwt&lt;img alt=&quot;😂&quot; src=&quot;https://res.wx.qq.com/mpres/zh_CN/htmledition/comm_htmledition/images/pic/common/pic_blank.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;，领导就是要用 jwt，只不过他搞不清楚 jwt，或者叫 accesstoken&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：用户都被偷缓存了，也就是系统都在别人手上了。 这不是前后端该解决的问题。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：虽然甲方千不该万不该，但做项目本来就是命题作文，权衡和取舍很有必要&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/309236/notion-exits-russia&quot; target=&quot;_blank&quot;&gt;Notion 宣布将退出俄罗斯市场&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点：准备出一个产品来替代 notion，然后推往俄罗斯，如何？&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309453</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309453</guid>
            <pubDate>Thu, 29 Aug 2024 11:13:58 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>【赠书福利】做难而正确的事情，成为技术书里的「黑神话」</title>
            <description>恭喜张彦飞老师出版第二本新书：《深入理解 Linux 进程与内存》。 开源中国为各位读者准备了粉丝专属福利~</description>
            <link>https://mp.weixin.qq.com/s/zBjp_N1hiToaZo2YP3MPPg</link>
            <guid isPermaLink="false">https://mp.weixin.qq.com/s/zBjp_N1hiToaZo2YP3MPPg</guid>
            <pubDate>Thu, 29 Aug 2024 10:46:00 GMT</pubDate>
        </item>
        <item>
            <title>飞轮科技《新一代实时分析数据仓库解决方案》荣获 HICOOL 2024 全球创业大赛二等奖</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;HICOOL 2024 全球创业者峰会于 2024 年 8 月 23 日 -25 日，在中国国际展览中心（顺义馆）成功举行，峰会以「新质引领，创新共融」为主题，聚焦技术创新、产业融合、新质共享与国际合作四大要素。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;在 8 月 23 日晚的峰会开幕式上，举行 HICOOL 2024 全球创业大赛颁奖盛典，共颁发一等奖 12 个、二等奖 36 个、三等奖 68 个、优胜奖 84 个。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.selectdb.com%2F%3Futm_source%3DOSCHINA%26utm_medium%3D1%26utm_campaign%3Dpost&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;北京飞轮数据科技有限公司&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;（简称：飞轮科技）所申报的 《新一代实时分析数据仓库解决方案》项目，经过 200 余天的激烈比拼，从全球 124 个国家和地区的 7406 个创业项目中脱颖而出，荣获二等奖。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;&lt;img alt=&quot;HICOOL 2024 全球创业者峰会&quot; src=&quot;https://oscimg.oschina.net/oscnet/hicool_f84b40d7c4.jpeg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;从 7000 余项目脱颖而出&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;HICOOL 全球创业大赛创办五年以来，共汇聚了全球 145 个国家和地区的 24171 个创业项目、32001 名创业者热情参与，至今已诞生 720 个获奖项目，覆盖人工智能、虚拟现实、医药健康、新一代信息技术、高端装备、新能源、新材料、文化创意、农业科技和食品科技等赛道，培育孵化 16 家独角兽企业、127 家专精特新企业，获奖项目赛后新融资额超 360 亿元人民币，持续引领新质生产力发展。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;HICOOL 2024 全球创业大赛热度未减，共吸引来自 124 个国家和地区的 7406 个参赛项目和 9700 名人才报名参赛，报名数量较去年相比增长近 30%。今年大赛获奖席位也从 140 个增加至 200 个，设置一等奖名额 12 个，单个项目奖金为 200 万元；二等奖名额 36 个，单个项目奖金为 100 万元；三等奖名额 68 个，单个项目奖金为 50 万元；优胜奖名额 84 个，单个项目奖金为 20 万元。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;在众多参赛项目中，飞轮科技所提交的 《新一代实时分析数据仓库解决方案》受到知名投资机构一线高管、资深产学研专家等资深评委的一致认同，最终从全球 124 个国家和地区的 7406 个创业项目中脱颖而出，荣获二等奖。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;span&gt;&lt;/span&gt; 
 &lt;div&gt; 
  &lt;div&gt;
   &lt;img alt=&quot;飞轮科技荣获二等奖&quot; src=&quot;https://oscimg.oschina.net/oscnet/_e220a9e04e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;span&gt;&lt;/span&gt;
&lt;/div&gt; 
&lt;h3&gt;&lt;span&gt;关于飞轮科技&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;作为国内领先的企业级实时数据仓库产品供应商，飞轮科技自成立以来，积极投身 Apache Doris 开源社区建设的同时，自主研发了现代化实时数据仓库 SelectDB，面向全球提供多种部署形态的实时数据仓库产品 SelectDB 与相关解决方案，满足大规模实时数据场景下的极速查询分析需求，为工业界构建全新的实时数据分析通用标准。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;与此同时，飞轮科技已与兆芯、飞腾、海光信息、统信软件、中科可控、麒麟软件、新华三、超聚变、中国电子云等行业内超 40 家企业达成生态合作，核心产品 SelectDB 与国产主流信创产品均完成兼容适配，包括麒麟、统信、欧拉、飞腾、海光、鲲鹏等，覆盖从芯片、服务器到操作系统的多款国产化信创产品，在产品层面具备完整的信创能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;截至目前，飞轮科技已服务全球上千家金融、电信、制造、能源、汽车、物流、政务等中大型企业，并基于丰富的行业经验，沉淀了实时报表与分析、用户画像与行为分析、湖仓一体、日志存储与分析等成熟的解决方案。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;未来，飞轮科技在持续引领技术创新的同时，将不断深化国产化生态布局，并进一步加强与产业链上下游企业的紧密合作，共同推动信息技术应用创新产业的繁荣发展。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309451</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309451</guid>
            <pubDate>Thu, 29 Aug 2024 10:35:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>信息流广告预估技术在美团外卖的实践</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;blockquote&gt; 
 &lt;p&gt;本文整理自美团技术沙龙第 81 期《美团在广告算法领域的探索及实践》(B 站视频)。文章首先介绍了美团信息流广告业务以及预估技术的现状，然后重点分享了信息流广告预估在美团的具体实践，围绕决策路径、超长超宽建模和全还原建模等多个维度进行了分享，最后是一些总结和展望，希望能对大家有所帮助或启发。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-c9b66697b3d3c5c5c1bd4e30693b6268028.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;1 信息流广告业务及预估技术现状&lt;/h2&gt; 
&lt;h3&gt;1.1 信息流广告业务特点&lt;/h3&gt; 
&lt;p&gt;目前，美团外卖的广告主要包括信息流广告、搜索广告、营销广告、展示广告等等。外卖业务都有着典型的业务特点：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;用户行为连贯性强&lt;/strong&gt;：用户用餐意图明确，一般在 10 分钟内完成，UV 成单率较高。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;展示信息丰富&lt;/strong&gt;：卡片信息覆盖了评分、评价、优惠、配送等多种信息，对用户的决策影响较强。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;文本信息多&lt;/strong&gt;：在电商场景中，商品作为候选图片往往占据很大的决定因素，而在外卖场景下，商家作为候选更加复杂，商户名称、评价、热销菜品等文本信息能够影响用户做出决策。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/2f465d302f7d7b53f27e334fa7a9cfe01815373.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;1.2 技术概况及演进阶段&lt;/h3&gt; 
&lt;p&gt;这里先来介绍一下预估技术的现状。从技术层面，下图展示了广告投放系统的整体的流程：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/a8dc4131af681d98aee50dd673058981529846.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;总的来说，外卖广告系统跟我们在业界的搜推广系统是比较相似的，召回、粗排、精排以及各种机制。但外卖广告和业界场景区别较大的地方在于召回，因为它是基于位置服务（LBS）的，这个过程本身带有一定的约束。因此，我们会在精排和机制层面投入更多的算力和资源，以期给整体链路带来最大化的提升。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/5e8fe3fee5ea1ea169d2f8ce91dd8230473133.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在过去六七年中，到家广告预估算法历经了三个发展阶段，第一个阶段就是树模型，包括连续特征、交叉统计等等，当时的模型拟合能力是比较受限的。第二个阶段是从 2017 年开始到 2020 年，在这个阶段 DNN 模型开始爆发，我们进行了特征升级，也开始紧随业界步伐，引入更加复杂的模型，不断提升业务效果。第三个阶段就是 2021 年至今，我们主要方向是稀疏大模型+超长序列，进一步实现业务效果的提升。&lt;/p&gt; 
&lt;h3&gt;1.3 预估技术现状&lt;/h3&gt; 
&lt;p&gt;在信息流广告预估技术层面，主要探索方向为用户方向、链路方向以及 NLP 方向（如下图所示）。当然，如果这张图更全面一些，还会包括交叉方向，还有多场景多目标等等。而没有选择其他方向，主要是因为就交叉方向而言，我们发现随着互联网行业的不断发展，用户的行为会越来越多且更加复杂，而交叉方向仅仅能带来 Context 级别的深度学习能力，也就无法持续的成为效果的来源。另一个方面，虽然交叉技术也在发展，但发展方向上也是从 ID matching 到 Sequence Matching，单纯平铺类类别特征的交叉模型能力发展有限。综合多方面的因素，我们并没有将交叉作为一个长期的方向进行迭代。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/ba5428b3be2a7232d9abe5f9ce124935649348.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;还有一个是多场景方向，其实此前我们在这个方向也做过一些迭代带来了一波效果，但是后来我们发现，这种技术更加适合多个小场景的链接。如果你所服务的业务仅仅只有 1~2 个比较大的场景，这些场景本身的用户需求差异性、展示形态、候选供给差别又不大，就不太能发挥这个方向的技术能力及作用。&lt;/p&gt; 
&lt;p&gt;我们整体的思路是从用户的元素匹配、页面匹配，到路径匹配，最后到长期的兴趣匹配。本质上都是在做不同层面的用户匹配相关的工作。其中，元素匹配、页面匹配归到了链路方向。原因是链路方向更多的都是在解决&quot;看不见的问题&quot;，然后再通过这些&quot;被看见&quot;的信息去做相应建模，所以我们将链路方向单独列了出来。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;在用户方向，我们也大概经历了三个阶段，第一个阶段，要从原始单点、单入口的行为，向全行为、全入口进行扩张；第二个阶段，是在已有的输入的情况下，去探索更多的行为模式；第三个阶段，我们主要是做一些自动化模式提取，或者说网络自动拟合行为的能力做到更强。&lt;/li&gt; 
 &lt;li&gt;在链路方向，主要关注两件事，一个是页面还原，一个是卡片还原，通过算法和工程能力来还原用户&quot;所见&quot;到模型决策中。&lt;/li&gt; 
 &lt;li&gt;在 NLP 方向，过去我们还有一个方向叫多模态，但是客观来讲，随着 LLM 的火爆，外界的技术也给我们更多的输入，因此我们将 LLM IN CTR 单独列出来作为一个主要的技术方向。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;2 信息流广告在美团的实践&lt;/h2&gt; 
&lt;h3&gt;2.1 用户建模思路概览&lt;/h3&gt; 
&lt;p&gt;用户方向整体又拆解为三个反向，第一个是时间线，第二个是空间线，第三个是时间和空间共同作用下的行为模式。当时我们在拆解的时候，也参考了业界学界主要迭代的方法，包括 Session 建模、超长行为建模、多行为建模、长短期建模等。以学界和业界为基础，结合业务问题、特点，将技术和业务结合的更好，有了以下的技术拆解。&lt;/p&gt; 
&lt;p&gt;在时间线上，我们认为长短期的多 Level 融合更加重要。一方面是用户兴趣在不同级别&quot;片段&quot; 上关注点有显著差异，比如页面倾向比较、路径上的兴趣更连续、用户会连续吃一段时间轻食等，我们需要将这种在不同级别片段上的用户行为模式提取出来。因此，一方面我们通过更多页面和路径的方式将短期和长期进行联合；同时，我们通过增加日、周级别的中期兴趣，将短中、短长进行交互，增强时间线行为上的连接。另一方面，在模型上增加一些端到端的方式，自动化的将行为规律挖掘出来。这是时间线要解决的关键问题。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/b370246254c06dcc2fcd05b27e8298a6768373.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在空间线上，真实物理空间维度下，我们面对的问题比较明确，在不同的位置下，比如上班的时候和在家的时候，人的兴趣其实是不完全一样的，我们根据空间的位置为大家进行推荐。在虚拟空间下，比如用户在使用美团 App 和大众点评 App 等不同入口，人的兴趣和意图也会发生较大变化。一个显著的例子是，用户在首页和会员入口上对优惠的关注区别较大。空间线解决的问题是结合真实空间、虚拟空间，去判断用户的真实的意图或者行为模式。&lt;/p&gt; 
&lt;p&gt;第三条线，就是跟业务进行结合，比如用户在 App 上进行了一些操作（领取了红包），那么这个行为会对点餐有什么影响。本质上是模型在理解用户进行了一些操作行为后，会对接下来的行为产生哪些影响，进而模型能学习到不同的用户行为模式、更好的预测用户的行为。以上就是我们用户建模的整体思路。&lt;/p&gt; 
&lt;h4&gt;2.1.1 决策路径建模&lt;/h4&gt; 
&lt;p&gt;本部分会介绍一下决策路径建模，第一个核心的问题就是，DIN 单点匹配忽略了什么？单点匹配，我们认为是忽略了前序行为对用户后续行为的一个影响。对绝大多数电商业务来说，用户在一段时间内的行为是具备一定的连贯性的，我们可以根据用户的历史行为数据，对接下来的行为做出预测。这里有两个挑战，第一，如何构建核心路径；第二，如何解决路径本身的噪声、稀疏性、匹配等问题。我们的解法主要有三点：&lt;/p&gt; 
&lt;p&gt;第一，Path Enhance Module（PEM）提取核心路径。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;判断前置路径和候选（历史路径为点击）的相关性，建模路径置信度。&lt;/li&gt; 
 &lt;li&gt;对原始进行全连接的 MLP 激活+Softmax Top K 结合原始表示作为核心路径表达。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;第二，Path Augment Module（PAM）扩充路径。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;使用用户的增广路径作为正样本、其他用户的路径作为负样本，引入对比学习 Loss，提升路径表示学习能力。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;第三，Path Matching Module（PMM）路径+点双层匹配。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;基于 PEM 表示，构建路径匹配 Attention，进一步对历史路径取 Top K，去除掉无关路径影响提升候选点匹配精度。&lt;/li&gt; 
 &lt;li&gt;进一步引入点（item）匹配，完成双层匹配。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/860d53133357e2b2bae58dceed56622f540933.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;2.1.2 用户行为超长超宽建模&lt;/h4&gt; 
&lt;p&gt;相信很多同学都知道超长建模，基本上是通过聚类、局部 hash 等近似技术来进行实现。要引入超宽建模，本质上是因为我们需要将所有的输入都放到一起，所以需要一个更大更复杂的模型去把事情给处理了。不过，在实际中我们没有完全实现，因为目前的算力还是无法支持的。我们做了一个折中，长度是 1000（Length）的级别，宽度我们目前做到 10+这个级别，离线可以支持到更大的规模、到万级别效果也有较大提升，但是迭代效率、线上压力都会有较大限制。&lt;/p&gt; 
&lt;p&gt;这里也面临 2 个问题：第一个问题就是 SIM/ETA 为什么没有带来效果？这个方向，最早是电商平台提出来的，SIM 主要是 Hard 过滤，比如通过用户在网站浏览鞋相关的行为时，他们也会看其他各种各样的东西，它通过硬过滤，能够把跟「鞋」相关的产品能过滤出来，过滤掉和鞋无关的噪音，学习到用户在鞋上的偏好。点外卖相对不太一样，对一个候选汉堡来讲，通过汉堡品类过滤掉和汉堡无关的行为，这会损失较多用户口味信息。这是业务差异性带来的。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/5a50ab84e70be7d1e251c2f88f2972e7602873.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;第二个问题是，拟合 DIN Score 是否是长序列的终局？之前业界有一篇文章认为 DIN Score 是基准，把它线性扩展就能带来效果，进一步扩展到万级别或者十万级别把效果推到最大化。但是通过实验，我们的 CTR 场景线性扩展到超长级别并没有持续带来效果，反而到一定长度有所下降。我们认为 DIN 网络本身的去噪能力不是很强，或者说它去提取出 Label 结果的结构能力并不够强。如果它不是一个特别强的网络，做更大的扩展的时候，它所能容纳的信息是比较有限的。&lt;/p&gt; 
&lt;p&gt;我们可以把 CTR 理解成一个去噪任务，本质上是根据用户历史和当前场景 Match 用户和候选的过程。我们发现，如果能预测出精准或者去除掉所有噪声，比如拿穿越信息 Label POI 与 Target 进行匹配，使用简单的网络也可以有很高的 AUC。因此，我们认为完美的 CTR 网络应该是一个强预测网络+弱匹配网络的组合。预测网络应该是一个能力非常强的网络，能够进行多层的叠加，把信息进行萃取得到一个预测更加精准的结果，来与 Target 进行匹配。所以我们设计了一个多层的 Decoder，每一层的 Decoder 都能做信息的整合。通过不断的选取有效矩阵、反复叠加有效信息，来使得信息更加精准。这里我们做了一组 Scaling Law 实验，通过叠加多轮网络来验证结果的有效性。可以看到随着轮数的增加，网络学习用户行为的能力（AUC 逐层提升）也有所增加。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/6015fd3cd58d51cdf13abfe3097488e6818857.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;2.2 全还原建模&lt;/h3&gt; 
&lt;p&gt;首先，什么是全还原建模？我们给的一个定义是还原用户所见所得。CTR 任务是根据用户看到的信息来判断用户是否点击，最重要的一点是将看见的信息全部纳入到模型之中，过往简单的通过 ID 表示建模忽略了上下文及展示的信息，带来了较大的信息 GAP。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/f7cb5f3514a2b196376b99dc7b52276c1804018.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;第一个视角，上下文卡片无法获得。上下文信息对当前候选、当前卡片的 CTR 相当重要。有的同学可能会认为重排可以搞定这个事情，但我们始终认为，上下文信息属于链路信息，我们认为每个模块都需要去学习上下文信息，当然每个模块可能学习的重点不一样，而且实际上都能带来一定的效果。第二个视角，我们从算力的角度，因为预估侧的算力比较高，其影响的范围会更大，实际上也能够带来更多的效果空间。&lt;/p&gt; 
&lt;p&gt;再看左下角的图，从链路视角来说，对于预估模块、广告模块模块存在两个无法获取。第一个是广告的后链路信息无法获取，这里包括了展示的配送信息、配送费、准确的优惠信息等；第二个是自然的信息无法获取，这里包括了自然的上下文。因此，还原从另一个角度说是，如何打破链路的束缚来使用穿越信息。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/b5aded1dcba3fd6748ce11b88a4eb1551740674.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;这就是全还原建模所面临的一些问题，实际上可以概括成两个方向，一个是卡片还原，一个是页面还原。在早期我们做了个空间判断，我们把卡片、页面信息完完整整的放进来，观测 AUC 的提升来判断整体空间，结果表明页面信息有百分点级别、卡片信息有大几个千分点。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;整体解决思路&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;这里把页面还原和卡片还原展开。首先，从思路上讲，我们主要从算法、工程两个维度去解。在算法层面，第一个就是去猜页面，最大化利用前链路信息猜页面；第二个是猜元素，创意链路前置，创意优选结果输出给精排。在工程层面，第一个是存页面，引入近线系统，基于旁路系统的 Side Model 端到端预测最终展现信息，最大化利用后链路视野。第二个是存元素，引入近线系统+高维 KV，提升元素获取覆盖率至+100%、准确率 70%+。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/5940163c24e14e9f9dd99a3d84903eb11537133.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;前文也提到，上下文信息对最终的点击有较大影响，因 CTR 模块无法拿到上下文过去的解决方式是引入重排对小范围队列进行建模，这样降低了上下文链路信息的影响。接下来，我们面临的挑战就是：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;上下文包括了集合和序两个部分，如何构建上下文预测模块?&lt;/li&gt; 
 &lt;li&gt;Simulated 上下文与候选如何进行交互?&lt;/li&gt; 
 &lt;li&gt;如何进一步通过蒸馏提升 Simulated Page 的准确性?&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/11a1ad473caa6a2ffeb7d1f9438243e9745126.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;我们的解法是：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Context Simulation Center（CSC）&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;曝光网络学习集合：通过曝光概率预估网络来建模哪些-item 最可能曝光给用户，输入为千级别自然队列。&lt;/li&gt; 
 &lt;li&gt;排序网络学习序：对曝光网络输出的结果进行排序，目标位最终展现的位置，通过 NDCG 来衡量。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Context Modeling Transformer （CMT）&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Context Encoder/Decoder：使用 Transformer 对带位置编码的上下文进行编码。引入候选通过 MLP 网络与 Encoder 输出作为 Decoder 输入，得到最终的 Context 表达。&lt;/li&gt; 
 &lt;li&gt;真实曝光蒸馏：引入 Simulated Page 是一个强信号，但是依然存在与真实曝光 page 的差距。因此构建 Simauted Page 作为输入的 Student 网络来蒸馏学习基于 Real Page 的 Teacher 网络进一步去除噪音。（注：直接蒸馏无信号无法学习）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;我们引入了缓存的和预测配置策略，加上真实的蒸馏，就帮助我们进一步地去提升效果，这属于页面还原的部分。&lt;/p&gt; 
&lt;p&gt;卡片还原这部分整体的思路分为三部分：第一个部分，能够拿到卡片信息；第二部分，组成用户看到的卡片；第三部分，通过卡片来做历史兴趣匹配。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;卡片方案思考&lt;/strong&gt;：由于搜推广系统的模块串并行原因，有一部分数据我们是无法获取的，前期我们一直在思考有没有&quot;终极方案&quot;。早期我们就是纯平铺（纯 ID）的方式来还原用户所看到的信息，但是有没有更好的方式呢？比如直接将用户看到的图片引入进来。但是，当前的技术能力不太支持将整个图片完成的记录下来、更不支持图片信息完整准确的建模表达。最终，我们选择了通过矩阵的方式来组成卡片，模拟用户看到的信息。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;矩阵化表达、Patch 级别建模&lt;/strong&gt;：首先，我们使用了矩阵化的表达来组成卡片的形状，并构建和用户所见所得的上下元素关系。表示层面，不同的矩阵构建方式对结果会有一定的影响，具体不在这里展开。第二个方面，我们也借鉴了图像领域的一些思想，引入了 Patch 的概念，来帮助我们将图片化作 Token 进一步学好不同展示元素之间的相互影响。在实践的过程中，我们也需要调整一些参数，比如 Patch 到底是 2*2 的，还是 3*3。包括 stride，我们发现 stride 设置的越短，确实能够带来更好的效果。我们在整个 patch 级别匹配的过程中，也做了很多次的实验，初步的结论是，单位置 Patch 和全局 Patch 的匹配，最终的效果比较好。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;关注顺序建模&lt;/strong&gt;：顺序建模是在用户关注哪些元素基础上，进一步模拟用户浏览顺序。按道理说，我们没有眼部监测实际上是拿不到这部分数据的。这里，我们做了一个小 Trick，将这 4 个 Patch 的矩阵进行了全排列，将用户的所有 Patch 级别的路径都列了出来，让模型自己来学习不同排列组合的隐式分数。激活分数最高的的 Patch 顺序组合，通过 Encoder 聚合成关注顺序表达来进一步和 Target 的 POI 的关注顺序组合来进行匹配。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/0165258f2d9c9d7fcf6783a0b59874ca624710.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;2.3 LLM in CTR&lt;/h3&gt; 
&lt;p&gt;最后分享一下大模型在 CTR 的应用。我们做了一些初步的调研，发现目前很多技术团队整体的思路是差不多的。下图展示了 CTR 任务跟 NLP 任务的对比，可以看到从输入到模型架构，再到学习模式和任务模式，都有较大区别。NLP 任务是自然语言做 Token + 大规模 Transformer + 理解及推理能力，CTR 任务是 ID 输入+ 人工设计网络 + 强记忆能力。同时对于 CTR，大部分业务只用了自身业务数据，是缺乏外部知识和全任务的理解能力的。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/4e5bcd7f81b409446270f64beaa307d1590034.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;所以基于以上几个方面，我们做了三方面的工作：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;第一层，知识注入，就是要把外部的、真实的、当前 CTR 缺乏哪些知识放到模型中，这部分工作很多公司都在做，这块主要要求的是 Prompt 工程能力。因为生成的结果，不一定是 CTR 需要的，我们就需要做好适配工作。根据 CTR 的特点，就可以将高频词和低频词区分出来，同时也需要做一些 Prompt 融合相关的后处理工作来提升和 CTR 任务的匹配度。&lt;/li&gt; 
 &lt;li&gt;第二层，思维注入，就是要把大模型的结构能力给引入进来，或者说将大模型判断过程的引入进来。&lt;/li&gt; 
 &lt;li&gt;第三层，范式迭代，最近，Meta 似乎给生成式推荐指出了一条路。我们去年在探索这个方向的时候，主要的思路是把输入的形式进行变化，换成了更小规模的 Token，大概可能只有几万的规模，来解决大规模 Softmax 问题。然后通过 Transform 叠加的方式，结合聚合语义，从模型融合到端到端自回归，让数据能够跑通。我们发现如果噪音特别高的输入，Transformer 并不能处理得很好，但一个相对来讲语义比较明确的信息，Transformer 对上下文理解的性能还不错，因此我们先做了一层语义聚合来降低输入 Token 序列的噪音。总的来说，我们通过小规模 Token，加上语义聚合，结合 Transformer 的架构，给业务效果带来了一波提升。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/196efba3e3c47c7f83857edc59edb55a639344.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;总结一下，本质上是要把 CTR 不具备的能力通过大模型进行补齐。我们将 CTR 目前不具备的能力，划分成了知识能力、泛化能力和推理能力。对应的，我们也列举了一些我们尝试的结果如下图所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/590129c0a111e27dd71bc8f9b39eea10338022.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;03 总结和展望&lt;/h2&gt; 
&lt;p&gt;总的来说，预估的本质上还是要发掘用户的真实需求，我们一方面参考业界，另一方面深入业务，去挖掘更多的用户行为模式，也在探索有没有更自动化的方式将各种用户问题解决掉。还原建模是算法和工程的联合聚力带来的提升，归根结底算法工程的相互结合才能带来更大的改变。&lt;/p&gt; 
&lt;p&gt;大模型与推荐的结合越来越得到大家的关注，但是客观地讲，这依然是属于一个偏长期的工作，这个时候还是要找到一条可行的路径，不断去优化和提升，如果完全指望用一个&quot;大招&quot;去解决掉所有的问题，会非常困难。端到端推荐大模型是大家共同的期望，但是在这个基础上，我们认为输入规模是效果的保障，算力是以上两者的保障。只有软件和硬件的强强联合，才能赢得未来。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;|&lt;/strong&gt; 在美团公众号菜单栏对话框回复【2023 年货】、【2022 年货】、【2021 年货】、【2020 年货】、【2019 年货】、【2018 年货】、【2017 年货】等关键词，可查看美团技术团队历年技术文章合集。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/b0364d579285ab22aa6235bd100d7c22178175.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;| 本文系美团技术团队出品，著作权归属美团。欢迎出于分享和交流等非商业目的转载或使用本文内容，敬请注明&quot;内容转载自美团技术团队&quot;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=mailto%3A%E3%80%82%E6%9C%AC%E6%96%87%E6%9C%AA%E7%BB%8F%E8%AE%B8%E5%8F%AF%EF%BC%8C%E4%B8%8D%E5%BE%97%E8%BF%9B%E8%A1%8C%E5%95%86%E4%B8%9A%E6%80%A7%E8%BD%AC%E8%BD%BD%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8%E3%80%82%E4%BB%BB%E4%BD%95%E5%95%86%E7%94%A8%E8%A1%8C%E4%B8%BA%EF%BC%8C%E8%AF%B7%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E8%87%B3tech%40meituan.com%E7%94%B3%E8%AF%B7%E6%8E%88%E6%9D%83%E3%80%82&quot; target=&quot;_blank&quot;&gt;。本文未经许可，不得进行商业性转载或者使用。任何商用行为，请发送邮件至 tech@meituan.com 申请授权。&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/meituantech/blog/15344283</link>
            <guid isPermaLink="false">https://my.oschina.net/meituantech/blog/15344283</guid>
            <pubDate>Thu, 29 Aug 2024 08:34:33 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>OpenAI 洽谈新一轮融资，估值超 1000 亿美元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;《&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.wsj.com%2Ftech%2Fai%2Fopenai-in-talks-for-funding-round-valuing-it-above-100-billion-4f0550c5%3Fmod%3Dlatest_headlines&quot; target=&quot;_blank&quot;&gt;华尔街日报&lt;/a&gt;》消息称，OpenAI 正在洽谈筹集大量资金，由之前的支持者 Thrive Capital 领投，估值超过 1000 亿美元。这大大高于 OpenAI 之前 860 亿美元的估值，是迄今为止所有 AI 初创公司中估值最高的。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;289&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d3ddca63e752441f06fd95a3ffa559b602a.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;知情人士透露，Thrive 将投入约 10 亿美元，微软也有望参与其中。这笔融资将成为 OpenAI 自 2023 年 1 月微软投资近 100 亿美元以来最大的外部资本注入。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;今年年初，该公司的年收入已超过 34 亿美元。然而，《The Information》预计 OpenAI 截至年底将亏损近 50 亿美元&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theinformation.com%2Farticles%2Fwhy-openai-could-lose-5-billion-this-year&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;，&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前该公司已经在 AI 培训和人员配备上耗费了 85 亿美元。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;OpenAI、微软和 Thrive Capital 尚未回应置评请求。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309417/openai-new-funding-round-100b-valuation</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309417/openai-new-funding-round-100b-valuation</guid>
            <pubDate>Thu, 29 Aug 2024 08:00:33 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>认识 deepin en Español：deepin 社区全球大家庭重要成员</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-en-espanol-introduction%2F&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;查看原文&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;我们始终相信，deepin 操作系统的优势不仅在于其优秀的功能，更在于多个充满活力的 deepin 海外社区。其中，deepin 西班牙语社区 deepin en Español 占有重要地位。多年来，西班牙语社区在将 deepin 操作系统带给全球西班牙语用户方面发挥了不可或缺的作用，在该社区建设过程中，充分体现了协作、创新和包容的精神。今天，我们想将 deepin en Español 介绍给大家，并对他们持续的奉献表示诚挚的感谢。&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;&lt;strong&gt;deepin&lt;/strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;&amp;nbsp;en Español 社区的起源和成长&lt;/strong&gt;&lt;/strong&gt;&lt;/h1&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;deepin en Español 社区成立于 2015 年初，最初是一个小型的开源项目。由于成员们的热情和努力，它很快成长为西班牙语 deepin 用户的官方社区。该社区的旅程始于 Google+群组，在那里它迅速获得了关注者，并成为西班牙和拉丁美洲 deepin 用户的重要平台。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;随着社区的发展壮大，其影响力也不断扩大。到 2016 年，deepin en Español 已成为 deepin 社区全球最重要的分支社区之一，为 deepin 的开发做出了贡献，并确保西班牙语使用者能够轻松使用 deepin 操作系统。社区成员通过加入 deepin 内部测试小组，并在其中提供重要的 issues 和宝贵的建议，帮助 deepin 操作系统在开发过程中更好地满足国际用户的需求。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;这一阶段最显著的成就之一是西班牙语社区参与将 deepin 操作系统翻译成西班牙语。这项努力最终促成了 deepin 西班牙语官方网站（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fxn--deepinenespaol-1nb.org%2F&quot; target=&quot;_blank&quot;&gt;https://xn--deepinenespaol-1nb.org/&lt;/a&gt;）的建立，使数百万西班牙语地区的用户能够更轻松地使用 deepin。此外，deepines 存储库（后来演变为 deepines 商店）的创建标志着社区发展历程中的另一个重要里程碑。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;402&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/08/Cloud-Illuminated-By-Neon-Light_%E5%AE%98%E7%BD%91.jpg&quot; width=&quot;944&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;&lt;strong&gt;deepin&lt;/strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;&amp;nbsp;en Español&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;主要项目&lt;/strong&gt;&lt;/strong&gt;&lt;/h1&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;1、deepines 商店：增强西班牙语用户的软件下载体验&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;deepines 商店是 deepin en Español 社区最重要的贡献之一。deepines 应用商店在 deepin 官方应用商店之外，给西班牙语用户们提供了更多他们常用应用的下载机会。deepines 商店中的每个软件包都由社区开发团队管理，经过严格测试以确保与 deepin 操作系统兼容。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;自推出以来，deepines 商店已成为西班牙语社区用户的重要资源，为用户提供了 280 多个软件包，包括流行和小众应用程序。商店的界面易于使用，其内容不断更新以满足西班牙语社区用户们不断变化的需求，并提供丰富的软件体验。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;369&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/08/%E5%9B%BE%E7%89%873.png&quot; width=&quot;1108&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;2、西班牙语 deepin 镜像和镜像站：提升系统使用体验和下载速度&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;意识到西班牙、拉丁美洲和欧洲其他地区的用户对可访问性和更快的下载速度的需求，deepin en Español 社区建立了自己的镜像站和仓库。该镜像每天与中国官方 deepin 服务器同步两次，确保用户能够访问最新的内容。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;西班牙语 deepin 镜像已被证明是社区的重要资源，其性能可与全球最高效的服务器相媲美。它不仅可以作为官方存储库的可靠备份，还为用户了提供详细的说明，以解决他们在安装或更新过程中可能遇到的任何问题。这一举措反映了社区致力于改善整体用户体验并确保 deepin 可供所有人使用的承诺。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;791&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/08/%E5%9B%BE%E7%89%874.png&quot; width=&quot;1159&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;3、西班牙语翻译团队：弥合语言差距&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;deepin 之所以被西班牙语用户广泛接受，deepin&amp;nbsp;en Español 中的西班牙语翻译团队发挥了重要作用。从翻译用户界面和桌面环境到确保所有 deepin 官方出版物都提供西班牙语版本，该团队让西班牙语用户真正做到了无语言交流障碍地使用 deepin。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;他们的工作范围不仅限于操作系统本身，还包括 deepin 官方网站和相关文档。通过 Transifex 等平台积极参与翻译过程，团队确保 deepin 操作系统的每项更新和新功能都能被及时翻译，让用户能够不受语言障碍地体验最新的更新。西班牙语翻译团队的持续贡献促进了西班牙语地区 deepin 用户群的增长。此外，团队还建立了一个&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fxn--deepinenespaol-1nb.org%2Fwiki%2Fglosario%2Ftraducciones-al-espanol%2F&quot; target=&quot;_blank&quot;&gt;词汇表&lt;/a&gt;，可以更好地协调短语。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;4、deepinLatin Code 开发团队&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;西班牙语社区的开发团队 deepin&amp;nbsp;Latin Code 一直处于 deepin&amp;nbsp;en Español 社区创新的前沿。这些团队为那些专门由 deepin 发行版量身定制的原生软件的开发做出了贡献。团队的项目范围从创建增强操作系统功能的自定义应用程序到开发社区驱动的计划，以满足西班牙语用户的独特需求。deepin&amp;nbsp;Latin Code 的贡献不仅丰富了 deepin 生态系统，还为用户提供了满足其特定需求的工具和功能。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1015&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/08/%E5%9B%BE%E7%89%875.png&quot; width=&quot;1157&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;5、其他项目&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;deepin&amp;nbsp;en Español 的贡献远不止于以上项目。deepin&amp;nbsp;en Español 团队创建了每月更新的播客，他们会在播客上讨论各种各样有意思的技术内容。另外，社区官网上包含一个新闻和技术博客，社区官方定期在上面分享最新的新闻和科学技术，帮助用户了解更多关于推动现代世界发展的科技趋势。为了帮助用户使用 deepin 操作系统，社区还建立了西班牙语 deepin Wiki，其中提供了 800 多篇技术指导文章。除了各种的项目之外，deepin&amp;nbsp;en Español 还成立了西班牙语 deepin 论坛，官方成员在论坛中贡献有关 GNU/Linux 的主题并发布新闻，用户可以参与其中并讨论有关 deepin 的问题。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1032&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/08/%E5%9B%BE%E7%89%876.png&quot; width=&quot;1184&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;&lt;strong&gt;结语&lt;/strong&gt;&lt;/strong&gt;&lt;/h1&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;回顾 deepin en Español 的发展历程，我们被 deepin 西班牙语社区的不懈贡献打动。从 Google+ 的早期发展到成为 deepin 生态系统的关键参与者，这个社区的成员始终表现出他们的热情和奉献精神。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;deepin en Español 的成就证明了协作的力量以及一个专注的社区对 deepin 操作系统的全球影响。在此，我们向 deepin en Español 社区的所有成员致以衷心的感谢，特别是那些为推进 deepin 项目贡献时间、专业知识和支持的人们。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;随着 deepin 23 的发布，我们很高兴能继续与 deepin en Español 社区合作。我们将共同在他们建立的坚实基础上再接再厉，进一步提升全球用户的 deepin 体验，开启旅程的下一篇章。&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;相关阅读：&lt;/strong&gt;&lt;/h1&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;（1）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdownload%2F&quot; target=&quot;_blank&quot;&gt;deepin 23 镜像体验&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;（2）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdistrowatch.com%2Ftable.php%3Fdistribution%3Ddeepin&quot; target=&quot;_blank&quot;&gt;&amp;nbsp;deepin 历史镜像获取（含 deepin V15）&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;（3）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fxn--deepinenespaol-1nb.org%2F&quot; target=&quot;_blank&quot;&gt;deepin en Español &amp;nbsp;&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;（4）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ft.me%2Fdeepinenespanol&quot; target=&quot;_blank&quot;&gt;deepin en Español &amp;nbsp; TG 群组&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309407</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309407</guid>
            <pubDate>Thu, 29 Aug 2024 07:19:06 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>微软推出「Cascadia Next」开源字体</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;微软宣布推出&amp;nbsp;Cascadia Code 开源字体的下一代演变 ——&amp;nbsp;Cascadia Next，其字体设计师已经为 Cascadia Next 设计了简体中文、繁体中文和日文三种字体。&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;简体中文：ASCII、GB2312 扩展&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;繁体中文：ASCII、BIG5+&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;日语：ASCII、Joyo、JIS1、JIS2&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此次预发布的 Cascadia Next 版本尚未包含阿拉伯语、希伯来语或 NerdFonts 支持。更多详情可查看&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fcascadia-code%2Freleases%2Ftag%2Fcascadia-next&quot; target=&quot;_blank&quot;&gt;此处&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;203&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-271af2f7f021169817ec12bdae0a28a5076.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Cascadia Code 是微软在 2019 年开源的一套专为终端和代码编辑器设计的等宽字体，与 Windows Terminal 捆绑开发，现在也是 Visual Studio 中的默认字体。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;相关阅读：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/294449/cascadia-code-2404-23&quot; target=&quot;news&quot;&gt;微软对开源字体 Cascadia Code 进行重大更新&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309405/microsoft-cascadia-next</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309405/microsoft-cascadia-next</guid>
            <pubDate>Thu, 29 Aug 2024 06:51:06 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Wireshark 4.4 发布，最强开源网络数据包分析器</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;Wireshark 4.4 已正式发布。&lt;/p&gt; 
&lt;p&gt;此版本支持自动切换配置文件，这样可以将显示过滤器与一个配置文件关联，当打开匹配过滤器的捕获文件时，将自动切换到该配置文件。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ce77c52a3301e6e47cf0bb9e7f25d863a28.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Wireshark 4.4 也改进了其&amp;nbsp;I/O 图表、Flow 图表 / VoIP 调用、TCP Stream 图表和其他 UI 对话框。此外还支持 Lua 5.3/5.4、改进的显示过滤器、支持与 zlib-ng 构建，幷包含许多其他改进。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flists.wireshark.org%2Farchives%2Fwireshark-announce%2F202408%2Fmsg00001.html&quot; target=&quot;_blank&quot;&gt;详情查看 release notes&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;下载地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.wireshark.org%2Fdownload.html&quot; target=&quot;_blank&quot;&gt;https://www.wireshark.org/download.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;相关阅读：&lt;a href=&quot;https://www.oschina.net/news/249672/wireshark-25yr&quot; target=&quot;_blank&quot;&gt;Wireshark 诞生 25 周年，最强开源网络数据包分析器&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309386/wireshark-4-4-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309386/wireshark-4-4-released</guid>
            <pubDate>Thu, 29 Aug 2024 04:17:33 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>我国网民规模近 11 亿人，互联网普及率达 78.0%</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;中国互联网络信息中心（CNNIC）发布第 54 次《中国互联网络发展状况统计报告》。截至 2024 年 6 月，我国网民规模近 11 亿人（10.9967 亿人），较 2023 年 12 月增长 742 万人，互联网普及率达 78.0%——&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;我国新增网民 742 万人，以 10-19 岁青少年和「银发族」为主&lt;/strong&gt;。其中，青少年占新增网民的 49.0%，50—59 岁、60 岁及以上群体分别占新增网民的 15.2% 和 20.8%。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在新增网民中，&lt;strong&gt;娱乐社交需求最能激发网民上网&lt;/strong&gt;，在该群体首次使用的互联网应用中，短视频应用占比达 37.3%。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;上半年以旧换新消费、在线服务消费成为消费亮点。数据显示，&lt;strong&gt;最近半年参与「以旧换新」消费活动的网民中，68.8% 的用户选择线上参与&lt;/strong&gt;。其中手机数码、洗衣机等传统大家电「以旧换新」消费比例最高，分别占相关消费用户的 28.8% 和 23.7%。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;随着在线服务场景的日益丰富，越来越多的用户通过在线方式享受生活服务便利。&lt;strong&gt;截至 6 月，在网上购买过外卖、到店餐饮、电影及休闲娱乐等在线服务的用户，分别占网民的 50.3%、20.7% 和 17.3%&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;老年群体移动支付服务不断完善。&lt;strong&gt;截至 6 月，我国 60 岁以上网民网络支付的使用率已达 75.4%&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;针对外籍来华人员的「外包内用」和「外卡内绑」等移动支付创新服务，持续优化外籍来华人员支付便利。&lt;strong&gt;上半年，超 500 万入境人员使用移动支付，同比增长 4 倍；交易 9000 多万笔，金额 140 多亿元，均同比增长七倍&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;随着微短剧行业引导政策陆续出台，微短剧创作生产走向规范化。&lt;strong&gt;截至 6 月，微短剧用户占网民整体的 52.4%&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;短视频平台用户黏性不断提升，短视频电商业务稳步发展，&lt;strong&gt;截至 6 月，短视频用户占网民整体的 95.5%&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;长视频行业提质趋势延续，&lt;strong&gt;截至 6 月，长视频用户占网民整体的 65.2%&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309358</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309358</guid>
            <pubDate>Thu, 29 Aug 2024 02:11:22 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>万雍科技加入 openKylin，共推社区开源生态发展</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span&gt;近日，上海万雍科技股份有限公司（简称「万雍科技」）签署了 openKylin 社区 CLA（Contributor License Agreement 贡献者许可协议），正式加入 openKylin 开源社区。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1079&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e84b5d6d9ecbd6f5bb2b1cc1464b2ae785f.png&quot; width=&quot;829&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;万雍科技成立于 2005 年，是上海市松江区&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;国投集团&lt;/span&gt;&lt;span&gt;&lt;span&gt;参投企业，多年来一直专注于网络安全运营服务和&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;数字化产品&lt;/span&gt;&lt;span&gt;研发，旗下人脸识别数据安全保护系统等产品完成了验证和适配，并在安全合规、安全运营、安全开发、数据安全等领域具有丰富的经验。同时，通过以专家工作站为主导的核心技术团队，在数字化及网络安全领域的研发沉淀，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;万雍科技&lt;/span&gt;&lt;/span&gt;已形成具有多项自主专利技术的人工智能安全产品和安全智能感知的数字化产品。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;410&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-141ea15270d70314b2b0754bbceafefaf5e.png&quot; width=&quot;940&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;万雍科技秉持与 openKylin 社区相契合的开源、开放及协作理念，全力推动开源技术的蓬勃发展。加入 openKylin 社区后，万雍科技将与优秀的开发者、企业和科研机构一起，共同研发和创新 Linux 开源技术，共享资源和成果，推动操作系统生态的完善，实现技术和产品的双重进步，同时也为中国信息技术产业的发展做出贡献。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309348</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309348</guid>
            <pubDate>Thu, 29 Aug 2024 01:28:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>开源日报 | 微软「易主」Mono 给 Wine；IBM 中国研发部裁员内幕；地铁数据库；70 本经典程序员书单</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.8.28&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span&gt;&lt;a href=&quot;https://www.oschina.net/news/309189/ms-gives-mono-to-wine&quot;&gt;&lt;span&gt;微软将开源 .NET 框架 Mono 捐赠给 Wine&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;根据 Mono 官网的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mono-project.com%2Fnews%2F&quot; target=&quot;_blank&quot;&gt;最新公告&lt;/a&gt;，该项目已被移交给&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.winehq.org%2F&quot; target=&quot;_blank&quot;&gt;WineHQ 组织&lt;/a&gt;，后者是负责管理开源项目 Wine 的团队。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;公告写道，WineHQ 组织将在&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgitlab.winehq.org%2Fwine-mono%2Fmono&quot; target=&quot;_blank&quot;&gt;wine-mono / Mono&lt;/a&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;&amp;nbsp;仓库中接管 Mono 项目上游的管理工作。现有&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmono%2Fmono&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;mono/mono&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;和其他 repos 中的源代码仍可继续使用，但 repos 可能会被归档。其中二进制文件的可用期长达四年。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;Mono 最初是 Xamarin 公司主导的自由开源项目，由 Xamarin 联合创始人 Miguel de Icaza 发起。其作为跨平台的 .NET 框架开源实现，让开发者能够在非 Windows 平台上运行 .NET 应用程序。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;微软在 2016 年收购 Xamarin 后拥有了 Mono 项目，并成为 Mono 的管理者。 但随着 .NET 框架支持 Linux 等非 Windows 平台，Mono 项目对微软已经没有多少意义了。 Mono 上一次大版本更新是在 2019 年 7 月，之后都是补丁版本之类的小更新，上一次发布补丁版本是在 2024 年 2 月。&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FayU9J7vSvPooftUl8x1zew&quot; target=&quot;_blank&quot;&gt;CogVideoX：5B 开源，2B 转为 Apache 协议&lt;/a&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p&gt;智谱 AI 官方宣布，已开源 CogVideoX-5B 视频生成模型，相比此前开源的 CogVideoX-2B，官方称其视频生成质量更高，视觉效果更好。&lt;/p&gt; 
   &lt;p&gt;官方表示大幅度优化了模型的推理性能，推理门槛大幅降低，可以在 GTX 1080Ti 等早期显卡运行 CogVideoX-2B ，在 RTX 3060 等桌面端「甜品卡」运行 CogVideoX-5B 模型。&lt;/p&gt; 
   &lt;p&gt;CogVideoX 是一个大规模 DiT（diffusion transformer）模型，用于文本生成视频任务。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnbeta.com.tw%2Farticles%2Ftech%2F1443568.htm&quot; target=&quot;_blank&quot;&gt;IBM 中国研发部裁员内幕：要求员工去印度，否则离职&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;近日有不少网友发帖称，IBM 突然关闭了中国研发部门，涉及员工数量超过 1000 人。随后，IBM 中国回应称：IBM 会根据需要调整运营，为客户提供最佳服务，这些变化不会影响我们为客户提供支持的能力。不过现在有相关员工曝光了本次裁员的内幕，真的是让人唏嘘。&lt;/p&gt; 
&lt;p&gt;相关网友直言：「IBM 底关闭中国研发中心， 人员要不辞退，要不 relocate 到印度班加罗尔 (就是变相逼你离职，够狠)，之前微软也把在华研发部门和人员迁往美国，一个时代结束了。」&lt;/p&gt; 
&lt;p&gt;当然了，有这样的决定也不奇怪了，IBM 的现任 CEO Arvind Krishna 是一位印度人，他在 2020 年上任后不久便在全球范围内进行了多轮裁员。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-20cd3fb3f1bcdcee148b3e65bd0d743945f.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6120606636%2FOtM7WrzBi&quot; target=&quot;_blank&quot;&gt;理工科的大一新生，不妨先学一下《托马斯微积分》&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    理工科的大一新生，如果英语基础还可以，不妨先学一下《托马斯微积分》。这本教材的内容结构十分科学合理，适合自学。国内有高教版的影印本，可以考虑尝试啃下来。第 13 版的 PDF 文件链接在这里：http://t.cn/A6R5ZlR4（GitHub）
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;p style=&quot;text-align:right&quot;&gt;&lt;span&gt;- 微博&amp;nbsp;&lt;strong&gt;夏星繁&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1706699904%2FOuaNGlyNo%3Fpagetype%3Dprofilefeed&quot; target=&quot;_blank&quot;&gt;知名黑客 George Hotz 成立 AI 硬件公司 tiny corp&lt;/a&gt;&lt;/h4&gt; 
  &lt;p&gt;知名黑客 George Hotz 成立的 AI 硬件公司 tiny corp，主营业务：攒 AI 计算机。&lt;/p&gt; 
  &lt;p&gt;红色版：6 个 7900XTX；32 核 AMD EPYC；售价 15000 美元。&lt;/p&gt; 
  &lt;p&gt;绿色版：6 个 4090 ；32 核 AMD EPYC；售价 25000 美元。&lt;/p&gt; 
  &lt;p&gt;目前在 San Diego 提供自提服务，并向美国大陆各州发货。&lt;/p&gt; 
  &lt;p&gt;George Hotz 说：它非常强大（约 2 倍 H100），可联网，并且安静到可以在办公室中运行。我希望能消除「数据中心」机器学习，硬件大约 3 倍的溢价。&lt;/p&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;&lt;span&gt;i 陆三金&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F5198011111%2FOud6awa3Z&quot; target=&quot;_blank&quot;&gt;地铁数据库&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;可以查看我国大部分城市地铁的详细数据，包括开通地铁数、开通总里程、开通地铁线路、在建地铁线路、最新客流汇总和运营站点数量。&lt;/p&gt; 
     &lt;p&gt;此外，还可以在页面右上角的城市地铁客流量查询功能中，选择特定的城市来查看详细数据。数据也都是通过可视化图形来展现出来的，非常直观。&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;- 微博 &lt;strong&gt;班叔&lt;/strong&gt;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F5703921756%2FOu3X84DbV%3Fpagetype%3Dprofilefeed&quot; target=&quot;_blank&quot;&gt;Meta 祭出三篇最详尽 Llama 微调指南！千字长文，0 基础小白必备&lt;/a&gt;&lt;/h4&gt; 
  &lt;p&gt;开源，就要开的彻彻底底。&lt;br&gt; 这不，Meta 一连放出三篇技术文章，从大模型适配方法出发，介绍了如何使用特定领域数据微调 LLM，如何确定微调适配自己的用例，以及如何管理良好训练数据集的经验法则。&lt;br&gt; 马住 http://t.cn/A6RVimjf&lt;/p&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博 &lt;strong&gt;新智元&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2194035935%2FOulvltPJp%3Fpagetype%3Dprofilefeed&quot; target=&quot;_blank&quot;&gt;70 本经典程序员书单&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
       70 本经典程序员书单。如果书籍是开源或开放获取的，同时列出了书籍的下载链接，大概 10 来本。
       &lt;br&gt; http://t.cn/A6RMlImm
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;- 微博 &lt;strong&gt;蚁工厂&lt;/strong&gt;&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwap.stockstar.com%2Fdetail%2FIG2024082800030260&quot; target=&quot;_blank&quot;&gt;阿里巴巴云计算入股 AI 平台 Dify&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#262626; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;天眼查 App 显示，近日，苏州语灵人工智能科技有限公司发生工商变更，新增浙江阿里巴巴云计算有限公司、苏州元之芯贰期创业投资合伙企业（有限合伙）为股东，同时，公司注册资本由约 115.79 万人民币增至约 143.63 万人民币。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;天眼查&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ft.cj.sina.com.cn%2Farticles%2Fview%2F6192937794%2F17120bb4202002ayf2&quot; target=&quot;_blank&quot;&gt;专访朱啸虎：AI 应用里才能找到新的「滴滴、小红书」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在大模型公司融资最狂热的时候，作为金沙江创投主管合伙人，朱啸虎最早用行动和言论给它降温。他认为五年后不会有独立的大模型公司，他也只投 AI 应用类的项目。这个判断至今没有变过，甚至更自洽了。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;界面&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcaifuhao.eastmoney.com%2Fnews%2F20240827175137529218870&quot; target=&quot;_blank&quot;&gt;从短视频到 AIGC，快手字节重开一局&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;通用大模型方面，快手有快意，字节有豆包；AI 图片创作快手有可图，字节有星绘；视频生成大模型，快手有可灵，字节用即梦相对，此外在 AI 音乐、剪辑工具、社交产品、特效制作等多个领域，快手和字节都有相应的 AIGC 产品形成竞对。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;洞见新研社&lt;/strong&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1808532960948958497&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;英媒：美科技巨头何以变得更大更强？&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;无疑，科技巨头的围墙总有一天会被打破——要么是被强硬的政府，要么是被新形式的竞争。本月，在美国联邦法院裁定谷歌非法垄断后，司法部可能会对谷歌进行拆分，这表明反托拉斯机构已经出来寻找猎物了。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;参考消息&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.myzaker.com%2Farticle%2F66cdde69b15ec075255a45e9&quot; target=&quot;_blank&quot;&gt;IBM，一次匆忙的「离开」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#3b3b3b&quot;&gt;近年来 IBM 的业务的确不如往昔红火，部分员工也有山雨欲来之感。在市场人士看来，陪伴中国走过 30 年的 IBM 如此景况多少令人惋惜，但这也是 IT 服务、大数据行业市场竞争的结果，无论是走是留，市场的打法与逻辑早已悄然改变。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span&gt;北京商报&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F3g.k.sohu.com%2Ft%2Fn816815774%3FserialId%3D6edf354c6153c70579bac88aeae40c25&quot; target=&quot;_blank&quot;&gt;LLM 取代的第一个编程语言竟是 SQL？网友吵翻天&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;人工智能及机器学习研究商 Abacus.AI 首席执行官 Bindu Reddy 表示：「LLM 用英语取代的第一个编程语言是 SQL，SQL 生成准确率超过 95%，超过了人类 SQL 程序员（准确率为 92%）的平均水平，大多数数据库产品已经提供了一个 chatbox 接口来查询数据」。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;机器之心&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://gitee.com/WeBank/Exchangis&quot; target=&quot;_blank&quot;&gt;WeBank/Exchangis&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;img height=&quot;251&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-57a3bf494289be16717ea3c3f8b6d43df60.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://gitee.com/WeBank/Exchangis&quot;&gt;https://gitee.com/WeBank/Exchangis&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Exchangis 是微众银行开源的轻量级数据交换平台，用于数据在不同存储介质中快速传递，并解决数据交换过程中面临的复杂性、兼容性等问题。设计上采取微服务架构形态，上下层服务松耦合，易于进行个性化的，高拓展性的迭代开发。&lt;/span&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/u/4939618/blog/15525788&quot; target=&quot;_blank&quot;&gt;百度搜索的 RLHF 性能优化实践&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;RLHF 目前已经发展出多种算法，本文将谈一谈 RLHF 的性能优化问题，我们以 PPO 为例来讨论 RLHF 的性能优化。PPO 优化过程同预训练有显著不同，且较为复杂，因此比较适合用来讨论 RLHF 的性能优化。最近学术界也开始涌现出一批使用监督微调的对齐方式，从而简化对齐过程，如 DPO 算法等，但是其优化手段可被囊括在 PPO 优化手段之内。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;图片&quot; height=&quot;284&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a365738c77e993ce2c584310f7e81e86bc0.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FFIDIeMi9pxfGd0r7aJ34xg&quot; target=&quot;_blank&quot;&gt;「开源版 PS」GIMP 公布 3.0 最新进展，说了 N 久的「今年发布」真的来了？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：看年龄段，基本肯定都是真爱了，感觉在勉强用爱发电，所以我们不必强求人家，哈哈&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：然鹅，gtk4 已发布近 4 年&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：2 到 3 的改动很大，移植难度高，4 跟 3 的区别不大，估计能很快移植&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：基本都是大佬。&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：开源世界的常见情况是吧，大佬和小白中的小白，然后普通的事情没有人做！😅因为这些事情小白不会做然后大佬没有兴趣做。&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：很期待 GIMP 将来能移植到 gtk4&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：这个消息要重点期待，制图届属于重磅。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：热爱让生活更有乐趣和更沉静，程序员的人生因计算机世界的无限广阔而拥有一颗不死之心！看到国外这些发量被某些人嘲笑的程序员的照片，知道了什么才叫真正的程序员，心里油然而生敬意！计算机的 01 不输中国文化里的道生万物。中国有做类 PS 的程序员吗？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：里面的 AI 功能做好了吗？之前装了好几次插件都用不起了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：个人觉得 krita 更好用呢…也是 gpl 协议。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 11：2025 还是有希望的&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FcBPunnfsZe9ZLlfs9vSliQ&quot; target=&quot;_blank&quot;&gt;Zen 浏览器&lt;span&gt;——&lt;/span&gt;号称是「开源版 Arc」、轻如鸿毛、快如闪电、已经有近 1 万开发者为它打 call&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：真心希望基于火狐内核的浏览器再多点，不然火狐就抗不下去了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：我试了下在我这台 10900x，128g 内存，系统盘是 pcie4 nvme 的 Windows 上，冷启动需要 12s，而 chrome 只需要 2s，令人发指&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：你确认下 chrome 有没有后台常驻？edge 这些为了加快启动都是开机就占个后台程序 warm up。这玩意基于 firefox 魔改的，我 7945hx 开 firefox 基本也就两三秒，再慢确实有点离谱了。&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：Zen Browser 的安装包体积小到令人难以置信，只有 70M 左右。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：FireFox 换皮&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：刚好 windows 上想弄个新浏览器玩&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：我觉得老牌浏览器刚开始时也是这么轻，后来功能逐渐增加，也越臃肿&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：有 arc 那个截不同网站的区域做个仪表板的功能吗&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：做桌面端嵌入浏览器用？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：不知道有没有一款浏览器，只要能保住网页排版，可以不加载拖慢速度的内容？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 11：除了皮肤，没感觉到和 firefox 有啥不同和进步&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 12：Firefox 越来越不行了，有时突然就占用好多内存，把电脑都能卡死&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fb7UgeyEpZ0_exvo-viHSug&quot; target=&quot;_blank&quot;&gt;看了《黑神话：悟空》员工的薪资，他们真的是为爱发电&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：3A 游戏有开发周期在此，最晚到了今年年底发奖金的时候估计就不可想象的数字了&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：我就是员工之一，35 万奖金&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：为爱发电的结果是被「人民企业家」收割。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：没 C# 所以这个工资是假的&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：游戏行业工资有点像券商，大头在奖金和效益分红&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：游戏定价跟欧美看齐，薪资却不看齐，差价都被收割&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309285</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309285</guid>
            <pubDate>Wed, 28 Aug 2024 11:36:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>百度搜索的 RLHF 性能优化实践</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;p&gt;&lt;strong&gt;导读&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;本文大语言模型在未经标注的大量文本上进行预训练后，可能产生包含偏见、泄露隐私甚至对人类构成威胁的内容。OpenAI 最先提出了基于人类反馈的强化学习算法 (Reinforcement Learning fromHuman Feedback, RLHF)，将人类偏好引入到大模型的对齐过程中，从而让大语言模型能够生成符合人类预期的输出。笔者长期在搜索领域应用大模型提升搜索质量，发现 RLHF 在搜索结果的相关性、准确性和无害性等方面均有显著的提升，同时也观察到由于 RLHF 流程相比预训练以及 SFT 更加复杂，导致在训练效率上，其系统吞吐率远低于预训练或者 SFT，这严重制约了 RLHF 的应用与发展。当前业界和学界在预训练阶段和推理部署阶段的性能优化进展非常丰富，但在强化学习尤其是 RLHF 性能优化的公开资料较少。我们注意到，RLHF 和预训练共享大多数分布式训练技术，因此在优化手段上，RLHF 既要吸收预训练的方法，也要结合自身的特点做针对性地优化。&lt;/p&gt; 
&lt;p&gt;RLHF 目前已经发展出多种算法，本文将谈一谈 RLHF 的性能优化问题，我们以 PPO 为例来讨论 RLHF 的性能优化。PPO 优化过程同预训练有显著不同，且较为复杂，因此比较适合用来讨论 RLHF 的性能优化。最近学术界也开始涌现出一批使用监督微调的对齐方式，从而简化对齐过程，如 DPO 算法等，但是其优化手段可被囊括在 PPO 优化手段之内。&lt;/p&gt; 
&lt;p&gt;我们的优化手段包括文本生成速度优化、动态显存优化、系统并行优化等。经过优化后，我们的方案能够保证效果的同时，大幅提升性能。我们也针对搜索业务场景需求对业界主流方案进行了对比测试，性能大幅优于其他方案。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_1&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;strong&gt;01 PPO 算法流程&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;PPO 优化流程涉及四个不同的模型，分别是 Actor、Critic、Reward 和 Reference，是一个典型的多角色多阶段的过程，大致流程如下&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-46c9f920a71107846dbf6d4103a9e1354e9.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;PPO 的训练阶段同预训练几乎一样，都是先前向计算损失函数，而后进行反向传播。唯一不同的是 PPO 训练涉及两个模型。PPO 的采样阶段是预训练没有的，采样阶段只有纯粹的前向推理计算，包括文本生成和奖励计算等。由于逐 token 生成的特性，文本生成的效率一直是业界关注的焦点，在 PPO 流程中更是超过训练时间而成为整个系统的瓶颈。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_2&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;strong&gt;02 软硬件配置与基线吞吐率分析&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;为简化讨论，本文以下表中所列的软硬件配置为基准进行讨论。但是本文所提到的优化手段并不受限于下述条件。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2.1 基础配置&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-6e1d6a9e86458770984a7101806eb47d81a.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2.2&amp;nbsp;训练配置&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-77548fd567705ce1c352645fd13f2bb502d.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;其中：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;prompt_length 是 prompt 数据集的最大长度，prompt 的长度分布应该较为均匀，其平均长度也应该接近这个值；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;generate_lenght 是生成文本的最大长度，当生成超过这个阈值时文本会被截断；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;generate_batch_size 是生成文本时的 batch_size，这个值越大则 GPU 利用率越高，但同时会带来更高的显存占用；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;global_batch_size 和 micro_batch_size 最初由梯度累积概念引入，详情可在网上搜索，这里需要重点说明的是，micro_batch_size 是决定系统吞吐率以及显存占用最关键的参数，global_batch_size 理论上同系统吞吐率以及显存占用关系不大，也就是说可以无限制的扩大。但如果处理不好，梯度聚合过程也可能导致大量的显存消耗，从而导致 global_batch_size 无法连续调节，后面会有一个案例具体说明；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ppo_iter 指的是 ppo 算法每轮在全量采样数据上迭代几次。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;2.3 显存分配方式&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;全参微调条件下，至少需要 1280G(2*8*80G) 显存，典型的显存分配方式如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-a365738c77e993ce2c584310f7e81e86bc0.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;这种分配方式的好处如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;计算负载均衡——除了文本生成阶段只有 actor 参与以外，其他时间两机的计算大致相同；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;显存负载均衡；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;actor 和 refer 共享初始热启 checkpoint、critic 和 reward 共享初始 checkpoint，每台机器只需存储一份热启 checkpoint&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;2.4 系统关键部分耗时&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-26bf00c4715ff8ff67d49532d9a609dd290.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2.5 吞吐率计算&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;系统各关键部分全部为串行执行，一次 ppo 迭代的耗时为： &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-8866cd0a5a00053b4011a05a41e7cf75f80.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;可以计算得到系统吞吐率为 256 sample / 1376 s / 16 gpu = 0.012 sample / gpu / s。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_3&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;strong&gt;03 文本生成速度优化&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;文本生成大约占了百分之八十左右的耗时，根据阿姆达尔定律：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-df1fc7d8900bac1014b238304650b445587.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;如果能够加速两倍，整个系统就能够取得接近 1.67 倍的提速，这是非常可观的。目前业界成熟的大模型应用范式是先在训练框架上进行模型训练，然后再使用专门的推理框架进行模型推理服务，推理加速往往是推理框架重点关注的问题。对于训练框架，一方面在功能上推理往往只起辅助作用，比如校验当前训练结果等，另一方面训练框架大多针对训练特性做优化，很难同时兼容推理的一些优化特性。因此，本项目中引入英伟达的 TRT-LLM 进行文本生成阶段的加速，不过在讨论 TRT-LLM 之前，先来探讨一下文本生成速度慢的一些可能原因。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.1 文本生成速度慢可能的原因&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1. 为避免重复计算，文本生成接口均采用 kv cache 机制，这种机制将文本生成切分成两个阶段，既 context 阶段和 decode 阶段。其中 context 阶段就是对 prompt 计算 kv，因此该阶段也被称作 prefill 阶段。decode 阶段则是逐 token 生成的过程，由于 kv cache 大大减少了计算量，该阶段变成访存密集型任务，GPU 计算单元的利用率较低。且 kv-cache 需要额外消耗大量的显存，限制了 batch_size 的大小，这又进一步降低了 GPU 计算单元的利用率；&lt;/p&gt; 
&lt;p&gt;2. 无效生成——由于 batch 内 prompt 长短不齐，简单的文本生成策略会从最短的 prompt 长度位置开始，造成大量的无效生成。当 batch 内某个句子生成结束后，仍然会跟随 batch 内其他未结束的句子一起继续生成，又会造成大量的无效生成；&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-0c0ac3437121888063289d279420ebc14c6.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;3. 大模型由于参数量过大，单显卡的显存往往无法匹配训练时的显存需求，类 Megatron-LM 的训练框架使用模型并行将显存需求分散到多张显卡。模型并行包括张量并行和流水并行两种机制，在推理时，这两种机制都会引入的额外通信开销。如果使用 pp，还会引入空泡，导致生成效率进一步下降。实际上推理所需的显存远低于训练，10B 左右的模型完全可以放在单卡上做推理，从而避免模型并行带来的开销。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.2&amp;nbsp;TRT-LLM 为什么可以提高文本生成速度&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;对于问题 1，TRT-LLM 通过引入 paged attention 机制优化显存占用，从而提高 batch_size，改善吞吐率；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;对于问题 2，TRT-LLM 通过引入 inflight batching 机制替换已完成的生成任务，大大减少了无效生成，对于序列长度分布极不均匀的场景，甚至观察到了 5 倍左右的吞吐率提升；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;对于问题 3，部署 TRT-LLM 可以无需遵照训练时的模型切分方式，因此也可以降低模型切分带来的开销。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3.3&amp;nbsp;引入 TRT-LLM 后带来的问题&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.3.1&amp;nbsp;额外的显存占用&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;很显然，TRT-LLM 也需要消耗显卡的计算和存储资源，不过由于文本生成和训练在时间上是错开的，可以通过 offload 的方式错峰使用显存，使得训练和文本生成在显卡使用上互不影响。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.3.2 参数更新&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;TRT-LLM 以独立进程的方式部署，由于 Actor 的每轮更新，必须同步更新相应的 TRT-LLM 模型，简单的参数更新方法如下&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.3.2.1 naive 方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1.actor 保存 checkpoint 到磁盘（训练框架所支持的格式）；&lt;/p&gt; 
&lt;p&gt;2.再 t 转换为 HuggingFace 格式的 checkpoint；&lt;/p&gt; 
&lt;p&gt;3.将 HuggingFace 格式的 checkpoint 转换成 trtllm 格式的 checkpoint；&lt;/p&gt; 
&lt;p&gt;4.将 TRT-LLM 格式的 checkpoint 转换为 TensorRT engine；&lt;/p&gt; 
&lt;p&gt;5.TRT-LLM Runtime 从磁盘中加载 TensorRT engine。&lt;/p&gt; 
&lt;p&gt;上述几个步骤涉及多次磁盘 IO，由于模型参数量极大（23GB，参数格式为 bf16），总耗时超过 15 分钟。如果是离线部署，这个方案是可以接受的，且框架有自带的转换脚本，无需额外的开发工作。但是强化学习需要在线更新，15 分钟的更新时间会严重拖慢系统速度。幸运的是 TensorRT 提供了在线更新的接口。另外观察到上述的多次转换是由各个框架格式不兼容造成的，需要手动实现参数转换功能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.3.2.2 refit 方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;前置条件&lt;/p&gt; 
&lt;p&gt;TRT engine 需开启 refit 选项（开启方法可参考 TRT-LLM 文档，此选项会导致 dump 的 TensorRT engine 大 10M 左右，但不会影响性能）&lt;/p&gt; 
&lt;p&gt;主要步骤&lt;/p&gt; 
&lt;p&gt;1.（训练进程）将 Actor 模型的参数转换成 TensorRT engine 的参数格式，并拷贝到共享内存中（逐 Tensor 转换和拷贝，主要涉及到一些 Tensor 的拆分、合并以及转置操作等）；&lt;/p&gt; 
&lt;p&gt;2.（训练进程）将 Actor 模型的参数和优化器状态等固定显存占用 unload 到 cpu 内存中（为 TRT-LLM 推理腾退显存，可 unload 部分参数），通知（RPC 方式）TRTLLM 进程加载最新参数；&lt;/p&gt; 
&lt;p&gt;3.（TRT-LLM 进程）加载 cpu 内存中保存的 TensorRT engine；&lt;/p&gt; 
&lt;p&gt;4.（TRT-LLM 进程）遍历共享内存中的参数并改写 TensorRT engine （逐 Tensor 改写）&lt;/p&gt; 
&lt;p&gt;整个过程消除了磁盘 IO，更新时间优化到 20s 左右；另外如果考虑使用单卡部署 TRT-LLM，从而消除不必要的通讯开销以及空泡（PP），还可以使用共享内存+NCCL 通讯的方式更新参数，如下图所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-1fd2e1ec9bda1882dcdc7b20e0e5072056e.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;相比于共享内存，显卡间的 NCCL 通讯速度极快，参数拷贝时间几乎可以忽略不计。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.4 &lt;strong&gt;吞吐率改进状况&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. 系统关键部分耗时&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-1df535b2d84e8da914243344b96fb155b4c.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;从耗时统计中可以看出，TRT-LLM 对文本生成速度提升了超过 30 倍，大大超出预期。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. 吞吐率计算&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;系统各关键部分全部为串行执行，一次 ppo 迭代的耗时时间为：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-8a436153804510296dc8f584b28d468b04b.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;可以计算得到系统吞吐率为 256 sample / 456 s / 16 gpu = 0.035 sample / gpu / s，相较于基线吞吐率提升了将近 192%。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_4&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;strong&gt;04 动态显存优化&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;RLHF 训练过程中显存常常是紧缺资源，显存会造成两个问题，一是训练过程中突然出现的 OOM 警告，使得跑了很长时间的任务失败；二是为了避免 OOM 刻意调小 batch_size，使得显卡计算单元的利用率下降，训练时间延长。大模型训练过程中的显存占用分为固定显存占用以及动态显存占用。固定显存主要包括参数、梯度和优化器状态，对于类 Megatron-LM 框架来说，固定显存通过模型并行切分之后，继续优化的空间较小，因此需要开发人员关注的是动态显存优化。动态显存主要包括前向的激活以及临时变量等，下面将介绍这两种显存的优化方法。另外对于推理框架来说，激活和临时变量相比 kv cache 几乎可以忽略不计，而通过引入 paged attention 技术，kv cache 显存占用已经得到了很好的优化，因此这里不多做讨论。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4.1&amp;nbsp;选择性激活重算 + 序列并行&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在反向传播过程中，需要前向过程中的激活参与计算，因此需要保存这部分结果。激活所占的显存比例随着模型规模、batch_size 以及序列长度的增加而逐步增加。对特定的模型，当需要增加 batch_size 以提升训练速度或者需要适配长文本训练任务时，显存会成为最棘手的问题。可通过重算技术来减小激活显存消耗，也就是只保存少部分中间激活，剩余的部分在需要时重新计算。重算对激活显存的优化效果是立竿见影的，但是同时也导致了速度的严重退化。最新的重算技术选择激活显存占用小同时计算较慢的算子作为检查点，而显存占用大并且计算较快的算子的中间结果则被丢弃，这种选择性重算技术虽然在激活显存优化能力上有所下降，但是能够保证速度退化不至于过于严重。&lt;/p&gt; 
&lt;p&gt;另一种激活显存优化技术是序列并行，这个技术由 Megatron-LM 引入，其核心思想仍然是使用通讯换取显存。具体而言，Megatron-LM 的作者观察到那些 TP 无法切分的区域，在序列轴的维度上是相互独立的，因此可以在序列轴上进行切分，如下图所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-cd0d861291440eac169a3070dc88c9634f0.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;实验中观察到，在 PP=8 的条件下，使用序列并行+选择性重算能够优化掉 50% 左右的激活显存，但是会带来 20% 左右的速度退化。可以将 batch_size 提升至原先的两倍，最终的训练速度相比之前提升接近 15%。同时对于更长的文本，预期会有更大的改进。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4.2&lt;/strong&gt; &lt;strong&gt;按照 micro_batch 进行 padding&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;这部分以及后面的临时显存优化是一些编程上的注意事项，并无太多的理论。具体而言，当编写训练部分的代码时为图省事，或者不经意间，会对 global_batch 进行 padding，实际进行前向和反向计算时是以 micro_batch 为单位的，当 global_batch 内长度分布极不均匀时，由 padding 导致的计算时间大大增加。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-1c2acc0c43679812d057019b3c4070948d4.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4.3 临时显存优化&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;临时显存优化的两大原则：&lt;/p&gt; 
&lt;p&gt;1.&amp;nbsp;尽早释放&lt;/p&gt; 
&lt;p&gt;2. 避免申请过大的显存资源&lt;/p&gt; 
&lt;p&gt;以推理过程中 next_logp 计算的优化为例，优化前 global_batch_size 无法开大，对于训练效果和训练效率均会造成一定影响。下面以 gbs=64，mbs=2 为例说明：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-a074e4dd1436cf3ffd99295ec855c3e7e7c.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;通过提前计算 mbs，尽早释放中间显存，可以将峰值显存从 gbs * N 优化到 mbs * N。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-83a8159522c3bd3ce2a0491404baf231066.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;对 mbs 的计算中也申请了一块 2GB 左右的显存，通过将计算的粒度控制在单条样本，还可以进一步降低峰值显存占用，代价是计算效率会有所降低，这点需要权衡。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4.4&amp;nbsp;吞吐率改进状况&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;由于优化了显存，系统可以使用更大的 global_batch_size，降低了流水并行的空泡率（如果开 PP 的话），从而提高了训练速度。按照 micro_batch 进行 padding 由于节省了计算，又进一步提升了训练速度。总的提升大约在 10% 左右。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1.系统关键部分耗时&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-41b5294b5c5f7d6a47e8de87b896f2fbb33.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2.吞吐率计算&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;系统各关键部分全部为串行执行，一次 ppo 迭代的耗时时间为： &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-f7343f353a282b99ab9b7e1b29ad751231a.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;可以计算得到系统吞吐率为 256 sample / 432 s / 16 gpu = 0.037 sample / gpu / s，相较于基线吞吐率提升了将近 208%。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_5&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;strong&gt;05 系统并行优化&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;5.1 优化方法&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;PPO 是一个典型的多阶段流程，所包含的步骤中有些有前后依赖关系，需要串行执行，也有一些步骤则没有依赖关系，可以并行执行，如下图所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-8e191c1594b47fc992a1c6a22076b6f6e87.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Actor 的训练和 Critic 的训练任务在不同节点并且相互独立时，可以很容易进行并行计算。ref_logp 和 logp 的计算任务虽然相互独立，但由于在同一节点需要共享显卡，且单个任务既可打满利用率，此时任务并行的意义不大（虽然 cuda 通过 stream 机制很容易支持并发任务）。观察到对于 ref_logp 计算这种仅做推理的任务，将其移动到 critic 所在的节点也几乎没有影响，之后便可以进行并行计算 ref_logp 和 logp。比较复杂的是文本生成与 reward 计算之间的并行，两者虽分布在不同的节点，但是任务之间存在依赖关系，即 reward 计算所需要的句子是文本生成的结果。观察到文本生成按照 batch 计算并返回，可以通过下述方法重叠两者的计算。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-2b33d50c9b81e4cbd174b1ae7b2356c932e.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;优化后的系统如下所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-7f7e01b08bbab79d4f9d6655c9da6817406.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;系统中还存在其他一些可以并行的部分，例如 actor 模型的加载/卸载，共享内存拷贝和 TRT-LLM 模型的卸载/加载与 refit_engine 等，其优化方法与上述提到的思想大同小异，这里不再详细介绍。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;5.2&amp;nbsp;吞吐率改进状况&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1.系统关键部分耗时&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-96b4a4caa4cf384779a546c38ab5db7f75d.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2.吞吐率计算&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;系统各关键部分全部为串行执行，一次 ppo 迭代的耗时时间为&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-5bd08db50649b557622769887da19e0f963.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;可以计算得到系统吞吐率为 256 sample / 275s / 16 gpu = 0.054 sample / gpu / s，相较于基线吞吐率提升了将近 350%。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_6&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;strong&gt;06 其他开源框架对比&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;实验设置：&lt;/p&gt; 
&lt;p&gt;全参数 RLHF 训练，采用 16*A100(80G) 训练。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-1ff87e661f95098b758511809000e7b0cd6.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_7&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;strong&gt;07 总结&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;综上，我们在广泛实验、对比和学习了业界主流框架的情况下，通过分析 RLHF 任务的特点并采用先进的大模型预训练及推理性能优化手段，使得 RLHF 任务性能大幅提升，能够以相对少的资源支持了业务的快速迭代和发展，取得了良好的业务效果。&lt;/p&gt; 
&lt;p&gt;————END————&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247595490%26idx%3D1%26sn%3D80480c7c7edb9d53df0a4be4300605bc%26chksm%3Dc03f459ef748cc889548f1ac5be8dbbb49a2f5c91e111b194806b763ae11a4fb849acd827689%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;基于飞桨框架实现 PCA 的人脸识别算法&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247593849%26idx%3D1%26sn%3D4e43485b376edff67ada50780bf29262%26chksm%3Dc03f5f05f748d6134a309aadff38fbe8ac2ba2f8319f329d6d424852912503eca7a3dfe328c4%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;统一多场景自动编译加速——支持动态 shape 场景，一套架构搞定训推需求&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592926%26idx%3D1%26sn%3D55ec68a8addd48988e323d2a36dba7f4%26chksm%3Dc03f5ba2f748d2b4acd9fb1ad9aa1f22d146702e9f6d261a1e2a35083c2a2cc366d9e6947d32%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;基于飞桨框架的稀疏计算使用指南&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592895%26idx%3D1%26sn%3Da1963501c0f63ff70d5fa457680a0ba7%26chksm%3Dc03f5bc3f748d2d51f25900ca7f31b0a565431f95af0d5c1e34fa7c889ebd160ac46917acee4%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;云高性能计算平台 CHPC 让企业的传统 HPC 玩出新花样&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592870%26idx%3D1%26sn%3D4356bf3d908eaf1a5457e2c05f06992c%26chksm%3Dc03f5bdaf748d2cc5bf279bf3a406c26cdd9a3c8e4f807c618768a9ebc1207c0809e2c7e539b%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;Embedding 空间中的时序异常检测&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/4939618/blog/15525788</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/15525788</guid>
            <pubDate>Wed, 28 Aug 2024 08:51:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>Notion 宣布将退出俄罗斯市场</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Notion &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.notion.so%2Fhelp%2Frestrictions-for-customers-based-in-russia&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;将退出俄罗斯市场，并终止与该国用户相关的所有工作区和账户。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;公告称，此举是因为美国政府针对软件服务供应商出台了限制政策，禁止俄罗斯任何人访问某些软件产品和服务。因此从 2024 年 9 月 9 日起，Notion 将不再向位于俄罗斯的用户提供该平台的访问权限。具体包括：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;阻止用户在俄罗斯访问 Notion 的服务。工作区中从未与俄罗斯产生过账单的用户一旦离开俄罗斯，即可重新访问 Notion。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;如果与工作区相关的任何账单信息目前或之前与俄罗斯有关，则该工作区将被终止。这是遵守制裁的必要条件，更新帐户的账单信息不会改变限制。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;终止所有已确认有与俄罗斯相关的账单信息（历史或当前）的计划的订购付款。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height=&quot;301&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-0d246733860addf28233159ddb99be98a39.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Notion 是一款流行的生产力工具，它将笔记记录、文档创建、任务管理、数据库和各种实时协作工具整合在一个平台下。截至 2024 年，其全球用户数已达 3000 万人次。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;受影响的用户可在 9 月 8 日之前访问他们的工作区提取数据。有关如何从 Notion 导出内容或整个工作区的说明可查看此&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.notion.so%2Fhelp%2Fexport-your-content&quot; target=&quot;_blank&quot;&gt;官方帮助页面&lt;/a&gt;，涵盖 PDF、HTML 和 CSV 格式。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309236/notion-exits-russia</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309236/notion-exits-russia</guid>
            <pubDate>Wed, 28 Aug 2024 07:03:42 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>微软将开源 .NET 框架 Mono 捐赠给 Wine</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;根据 Mono 官网的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mono-project.com%2Fnews%2F&quot; target=&quot;_blank&quot;&gt;最新公告&lt;/a&gt;，该项目已被移交给&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.winehq.org%2F&quot; target=&quot;_blank&quot;&gt;WineHQ 组织&lt;/a&gt;，后者是负责管理开源项目 Wine 的团队。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img height=&quot;1400&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0828/102114_2OKJ_2720166.png&quot; width=&quot;844&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;公告写道，WineHQ 组织将在&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgitlab.winehq.org%2Fwine-mono%2Fmono&quot; target=&quot;_blank&quot;&gt;wine-mono / Mono&lt;/a&gt;&amp;nbsp;仓库中接管 Mono 项目上游的管理工作。现有&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmono%2Fmono&quot; target=&quot;_blank&quot;&gt; mono/mono &lt;/a&gt;和其他 repos 中的源代码仍可继续使用，但 repos 可能会被归档。其中二进制文件的可用期长达四年。&lt;/p&gt; 
&lt;p&gt;此外，微软在&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fruntime%2Ftree%2Fmain%2Fsrc%2Fmono&quot; target=&quot;_blank&quot;&gt; dotnet/runtime&lt;/a&gt; repo 中维护着 Mono 运行时的现代化分支，并一直在逐步将工作负载转移到该分支。这项工作现已完成，官方建议 Mono 的活跃用户和基于 Mono 的应用程序框架的维护者迁移到包含该分支的 .NET。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e569731a99c63a5465016ebe9c705fca246.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Mono 是开源的 .NET 框架实现，它允许开发者在非 Windows 平台上运行 .NET 应用程序。&lt;/p&gt; 
&lt;p&gt;Mono 最初是由 Xamarin 公司主导的自由开源项目。该项目的目标是创建一系列符合 ECMA 标准（Ecma-334 和 Ecma-335）的 .NET 工具，包括 C# 编译器和通用语言架构。&lt;/p&gt; 
&lt;p&gt;微软在 2016 年收购了 Xamarin，Xamarin 是 Mono 和其他 Xamarin 项目背后的开发者。Mono 最初由 Miguel de Icaza 及其团队在 Ximian 下启动，Ximian 在 20 年前被 Novell 收购，然后 SUSE 在 2011 年将 Mono 的控制权交给了 Xamarin。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309189/ms-gives-mono-to-wine</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309189/ms-gives-mono-to-wine</guid>
            <pubDate>Wed, 28 Aug 2024 02:47:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>何小鹏宣布小鹏自研图灵芯片已流片成功</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;8 月 27 日晚，小鹏汽车宣布正式升级为小鹏 AI 汽车公司。小鹏汽车董事长何小鹏在小鹏 MONA M03 上市发布会上透露，小鹏自研的图灵芯片已于今年 8 月 23 日成功流片。这一里程碑式的成就标志着图灵芯片成为全球首颗同时应用于 AI 汽车、AI 机器人和飞行汽车上的 AI 芯片。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;339&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a3021be263c410063d5eba75516897ac047.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;据详细介绍，小鹏图灵芯片是专为 L4 级自动驾驶而设计，并为 AI 大模型量身定制。该芯片配备了 40 核处理器、2 个独立的图像 ISP 以及 2xNPU 自研神经网站处理大脑，其强大性能可支持最高达 30B 参数的大模型运行。这一系列技术突破为小鹏汽车在智能驾驶和 AI 领域的发展奠定了坚实基础。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;何小鹏表示，与现在使用的芯片相比，图灵芯片一颗性能与三颗一样。他称，这是因为绝大多数芯片设计时考虑多样性通用性。图灵芯片针对行车场景进行了深度优化，内置独立安全岛设计，能实现全车范围内的实时无盲点监测。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在谈及未来规划时，何小鹏表示，小鹏汽车将在未来十年内专注于 AI 和大制造领域的发展，包括 AI 机器人、AI 汽车和飞行汽车等前沿技术的研发与应用。公司期望成为 AI 汽车公司的代表，并在全球范围内推广其创新产品。在出海战略上，小鹏汽车将优先考虑欧洲市场。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;何小鹏预计，未来 10 年剩下的主流汽车品牌只剩 7 家，「未来 10 年年销 100 万辆，将成为 AI 汽车决赛入场券。小鹏汽车将有一半销量将来自海外，从欧洲起步，以科技为导向将中国的智能化带往全球。」&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309179</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309179</guid>
            <pubDate>Wed, 28 Aug 2024 02:11:48 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>对话 Linux 之父！openKylin 核心开发者受邀参与内核顶会</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;2024 年 8 月 21 日-23 日，由云原生计算基金会（CNCF）和&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;Linux 基金会&lt;/span&gt;&lt;span&gt;联合主办的 KubeCon + CloudNativeCon + Open Source Summit + AI_dev China 2024 大会在香港举行。此次盛会涵盖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;主题演讲、技术会议、圆桌讨论和展览展示等&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;多个环节，吸引了全球 30 多个国家和地区的技术专家、企业代表以及开源社区的积极参与者。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;openKylin 内核核心开发者、Linux 内核资深专家唐葛亮&lt;/strong&gt;&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;受邀参与&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;Linux 内核维护者闭门交流会—Linux Kernel Maintainer Meetup&lt;/strong&gt;&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;。&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;在最新的 Linux 6.10 版本内核和 Linux 6.9 版本内核中，唐葛亮&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;patch&lt;/span&gt;&lt;span&gt;（代码补丁）贡献数量排名华人第一。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3accc4891a23bee3f25ed0ae046b43d6d2a.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;span style=&quot;color:#7f7f7f&quot;&gt;Linux 内核维护者闭门交流会合影&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;&lt;span&gt;Linux 基金会执行董事 Jim Zemlin、Linux 与 Git 的创始人&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;Linus Torvalds&lt;/span&gt;&lt;span&gt;、Linux 基金会研究员 Greg Kroah-Hartman 等 200 多位国际演讲嘉宾亲临现场，分享各自领域的深刻见解和宝贵经验。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;本次聚会汇集了全球核心 Linux 内核开发人员，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;唐葛亮作为 Linux 内核 MPTCP (Multipath TCP) Maintainer，就 MPTCP 社区开发和中国 Linux 发行版等相关话题与社区领袖 Linus 和&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;Greg&lt;/span&gt;&lt;span&gt;进行了交谈。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;637&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-0a232bb2d3351cb36679bb3f8e6844b5aaa.bmp&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#7f7f7f&quot;&gt;唐葛亮（右一）对话 Linus（右三）和 Greg（右二）&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin 作为我国领先的开源操作系统根社区，积极参与国际开源生态建设，与 Linux 内核社区等全球开源力量保持密切合作。后续，openKylin 将持续参与国际开源社区交流与合作，进一步提升在国际开源技术社区的影响力，构建技术话语权。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;关于 openKylin Kernel SIG&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin Kernel 是 openKylin 社区维护的 Linux 内核，其源于上游 Linux Kernel 社区，并在此基础上，合入众多厂商关于新特性、新硬件架构支持、性能优化、可靠性增强等相关补丁。&lt;span style=&quot;color:#000000&quot;&gt;openKylin&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;Kernel SIG 组致力于提供功能更丰富、质量更稳定、更安全、更可靠的内核基座，让 openKylin 不同架构厂商及 OS 衍生发行版厂商减少在内核上的重复投入，更聚焦自身业务发展，更快的拓展 OS 生态。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;SIG 主页：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#0052ff&quot;&gt;https://gitee.com/openkylin/community/tree/master/sig/kernel&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309177</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309177</guid>
            <pubDate>Wed, 28 Aug 2024 02:10:48 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>案例研究丨 MaxKB+Ollama：深圳市公共信用中心探索信用服务创新</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#000000; text-align:start&quot;&gt;深圳市公共信用中心隶属于深圳市市场监督管理局，主要负责对外提供深圳市企业公共信用信息报告查询和深圳市企业注册登记档案查询等服务。作为深圳市信用信息的权威发布机构，深圳市公共信用中心一直致力于为公众提供准确、及时的信用信息服务。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1112&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9d21641af277f0c7ec95817322167f4cb8d.jpg&quot; width=&quot;1668&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;深圳信用网（&lt;em&gt;&lt;span style=&quot;color:#3e3e3e&quot;&gt;www.szcredit.org.cn&lt;/span&gt;&lt;/em&gt;&lt;span style=&quot;color:#3e3e3e&quot;&gt;）是深圳市公共信用中心重点建设的以「信用」为核心的服务平台，提供包括信用信息查询、政法法规公示等服务。深圳信用网包含信用动态、政策法规、信用服务、联合奖惩等功能板块，旨在推动和促进深圳社会信用体系的建设。&lt;/span&gt;&lt;/p&gt; 
&lt;h1&gt;为什么需要知识库问答系统？&lt;/h1&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span style=&quot;color:#3e3e3e&quot;&gt;随着社会的发展和科技的进步，公共信用信息的透明度和易获取性变得越来越重要。在信息化和大数据时代，信用信息能够被及时地、准确和便捷地获取对于社会经济活动和个人行为而言均具有重要意义。作为一直以来以「便民、利民」为宗旨的公共信用服务平台，深圳信用网也希望能够面向公众提供智能化的问答服务。深圳信用网希望推出知识库问答服务主要出于以下几方面的需求：&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#5a55fa&quot;&gt;■ 提高服务效率，减少用户等待时间&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span style=&quot;color:#3e3e3e&quot;&gt;深圳信用网每年的访问量高达 1000 万次，是公众获取信用信息的主要渠道之一。深圳市公共信用中心多年来一直致力于提升信用信息的公开性和服务质量，以满足公众日益增长的需求。然而，面对海量的访问量和多样化的信息查询需求，传统的服务模式逐渐显得力不从心；&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#5a55fa&quot;&gt;■ 紧跟政务事实，保证内容时效性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span style=&quot;color:#3e3e3e&quot;&gt;作为深圳信用服务门户，深圳信用网不仅需要确保信息信息的准确性，也需要跟随相关政策法规的变化保证信息查询的时效性。当新的政策推出后，信用服务门户需要能够及时更新并回复内容，以确保官方答案的权威性。在传统的服务模式下，服务人员需要花时间获取、理解新政策内容，并且组织回复语言，这在某种程度上影响了回复的时效性，也影响了用户的使用体验；&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#5a55fa&quot;&gt;■ 确保回答内容的规范性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span style=&quot;color:#3e3e3e&quot;&gt;作为问答服务的提供方，深圳信用网希望在提供信用服务的同时，通过持续收集用户的反馈，优化回复内容，从而给用户带来更好的使用体验。过去传统的服务模式在问答环节产生的答案因服务人员而异，平台庞大的业务量以及用户对同一问题往往采用不同的提问方式，使得后台系统对问答的分类和筛选变得尤为困难，不利于规范化回答内容的形成。&lt;/span&gt;&lt;/p&gt; 
&lt;h1&gt;MaxKB 开源知识库问答系统的引入&lt;/h1&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span style=&quot;color:#3e3e3e&quot;&gt;随着人工智能技术的快速发展和应用普及，智能问答系统已经成为各类机构提升公共服务质量和效率的重要工具。在这一背景下，针对深圳信用网当前的需求，深圳市公共信用中心响应省市「人工智能+」的战略部署，积极探索大语言模型的应用落地，致力于将这些前沿的创新技术融入到信用服务中，以提高服务的智能化水平和用户的体验。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span style=&quot;color:#3e3e3e&quot;&gt;MaxKB 是一款基于 LLM 大语言模型的开源知识库问答系统，它能够将大语言模型的强大功能与知识库相结合，提供精准的智能问答服务。MaxKB 的核心优势在于其高效的知识管理、知识检索和自然语言理解能力，能够将用户提出的问题与知识库中的相关信息进行匹配，生成准确的回答。MaxKB 还能记录和查看每次对话内容，收集用户反馈，为回答的持续优化提供依据。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#3e3e3e&quot;&gt;2024 年 5 月，深圳市公共信用中心引入了 MaxKB 作为自身知识库问答系统的核心系统，并结合 Ollama 搭建的本地私有大模型，构建了 AI 工具——即「信用 AI 助手」，并创新性地将「信用 AI 助手」嵌入到深圳信用网的页面中，为用户提供更加智能、便捷的信用信息查询服务。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span style=&quot;color:#3e3e3e&quot;&gt;借助「信用 AI 助手」，用户可以在深圳信用网上直接提出与信用相关的问题，系统会根据用户的提问自动匹配答案，为用户提供即时、准确、详尽的回答。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;904&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-76939983e72496fd2c345661924a01e6b06.png&quot; width=&quot;947&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;▲附图，深圳信用网「信用 AI 助手」问答窗口&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;经过实际的部署和调试，深圳市公共信用中心认为 MaxKB 在知识库问答方面的优势包括：&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#5a55fa&quot;&gt;■ 智能问答&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;MaxKB 的智能问答功能是该系统的核心能力。MaxKB 能够将用户的自然语言通过向量模型总结出关键词，从知识库中检索相关内容，并将碎片化的答案整理成条理分明的回复内容，为用户输出准确细致的回答。使用 MaxKB 搭建的「信用 AI 助手」在深圳信用网落地应用后，能够显著提升信用服务门户问答服务的响应速度，有效减少用户的等待时间，提高了服务效率；&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#5a55fa&quot;&gt;■ 信息管理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;MaxKB 不仅仅是一个智能问答系统，它还具备强大的信息管理能力。知识库功能的各个模块集中且高效地管理了深圳市公共信用中心的各类公开法规和信用资料。知识库建成后，深圳市公共信用中心定期对知识库内容进行审核和更新，设置敏感词，加入新的政策法规、信用信息以及常见问题的解答，确保知识库内容的时效性和权威性，24 小时不间断地为来访用户提供全面的问题解答；&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#5a55fa&quot;&gt;■ 用户互动与反馈&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;MaxKB 提供的对话日志功能可以自动记录用户每一次访问的对话内容。用户在与「信用 AI 助手」交互后，可以对小助手当前回答内容进行评价，评价结果与对话内容将在对话日志中呈现，提高了问答系统的用户评价收集能力。深圳市公共信用中心可以将日志中记录的对话和用户评价作为系统改进和持续优化的依据。&lt;/p&gt; 
&lt;h1&gt;MaxKB 的应用成果&lt;/h1&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;「信用 AI 助手」在深圳信用网的嵌入，显著提升了该网站接待访客的智能化能力和服务水平。用户在查询信用信息时，无需再排队等待人工回复，只需要通过与智能问答系统交互，就可以即时获得所需的信息，大大提升了用户的体验感和满意度。MaxKB 开源知识库问答系统在深圳信用网所取得的应用成果具体体现在以下几方面：&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#5a55fa&quot;&gt;■ 服务效率提升&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;引入 MaxKB 开源知识库问答系统后，深圳信用网的服务效率得到了大幅提升。过去，用户需要等待人工客服或者前往柜面咨询，而现在大多数问题可以直接通过「信用 AI 助手」即时解决。用户在短时间内就可以获得准确的答案，大大提高了服务效率和用户体验；&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#5a55fa&quot;&gt;■ 准确性和权威性提升&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;MaxKB 依托先进的 LLM 大语言模型和优秀的自然语言归纳提取能力，可以从大量数据中提取和生成准确的回答。深圳市公共信用中心在系统中内置了大量的权威数据和政策信息，确保用户获取的回答既准确又具备权威性。同时，通过后期不断地更新和维护知识库，进一步提高系统的回答质量；&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#5a55fa&quot;&gt;■ 服务群体扩大&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;自 MaxKB 知识库问答系统在深圳信用网上线后，网站的访问量持续增长。如此新颖便捷的信用信息获取模式，吸引了更多的用户到网站进行信息查询和互动。「信用 AI 助手」在信用服务领域的创新性应用，增加了民众对政务服务的参与度，实现了网站服务群体规模的扩大，提高了企业和个人的信用意识，为构建诚信社会提供了有力的支持和保障，进一步提升了深圳市在社会信用体系建设上的成效。&lt;/p&gt; 
&lt;h1&gt;未来展望&lt;/h1&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;MaxKB 开源知识库问答系统在深圳市公共信用中心落实「强基工程」工作需求的过程中扮演着重要的角色。通过上线「信用 AI 助手」，深圳市公共信用中心将信用服务推进至一个全新的阶段，在保障数据安全的同时释放创新技术的生产力。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;通过「信用 AI 助手」，深圳信用网可以更加高效地处理大量的用户咨询业务，减少人工服务的工作量，并且有效提高服务的响应速度和准确性。通过不断的技术创新和服务升级，深圳市公共信用中心可以为公众提供更加优质的信用信息服务，促进社会的诚信体系建设并助力经济发展。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;未来，深圳市公共信用中心将继续优化和完善知识库问答系统，提高系统的智能化水平，以便更好地满足公众的信用服务需求。同时，该中心还将进一步探索大语言模型技术的应用，将技术创新切实转化为新质生产力，为打造「信用深圳」品牌做出更多贡献。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309122</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309122</guid>
            <pubDate>Tue, 27 Aug 2024 13:11:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>开源日报 | FreeBSD 获得近 70 万欧元投资；英伟达员工百万财富却烦恼；马斯克「背刺」硅谷；微软撤回弃用控制面板的声明</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.8.27&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#245bdb&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/309018/sovereign-tech-fund-to-invest-e686400-in-freebsd&quot;&gt;FreeBSD 获得来自 STF 的近 70 万欧元投资&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;德国主权技术基金 Sovereign Tech Fund (STF) 已同意向 FreeBSD 项目&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffreebsdfoundation.org%2Fblog%2Fsovereign-tech-fund-to-invest-e686400-in-freebsd-infrastructure-modernization%2F&quot; target=&quot;_blank&quot;&gt;投资&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;686,400 欧元，以推动基础设施、安全性、法规合规性和开发人员体验的改善。&lt;/span&gt;&lt;/p&gt; 
     &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;254&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9d43dd75f8cc30d071361ae9779d741c92c.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
     &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;此前，STF 已陆续为 GNOME、PHP、Rustls、Coreutils uutils 等其他开源项目提供了资金。以及宣布&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/news/297782/stf-lower-limit&quot;&gt;面向小额开源项目开放投资&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;，&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/news/305160/stf-fellowship-for-maintainers&quot; target=&quot;_blank&quot;&gt;为个人开源维护者设立奖学金计划&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;。&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Futm_XtxsGaPy-Rd-zmkLOw&quot; target=&quot;_blank&quot;&gt;微软撤回了弃用控制面板的声明&lt;/a&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p&gt;上周媒体广泛报道称，微软准备弃用有几十年历史的控制面板。微软在其 System configuration tools in Windows 支持页面中声明，控制面板即将被弃用，取而代之的是「设置（Settings）」应用，它提供了更现代、更简化的体验。但现在微软又修改了相关文字，撤回了弃用控制面板的声明，改为「控制面板中的许多设置正迁移到设置应用」。&lt;/p&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8fc8d8c8f1332e6f497a55b9839d5171eac.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnbeta.com.tw%2Farticles%2Ftech%2F1443630.htm&quot; target=&quot;_blank&quot;&gt;Linux 系统份额史上首次逼近 4.5％，明年有望超 5％&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;市调机构 StatCounter 发布了 2024 年 7 月份的全球操作系统份额数据，Linux 取得历史性突破，首次接近了 4.5％！目前，Linux 系统份额为 4.44％，创造历史新高，而在一年前还是 3.12％，两年前还是 2.76％。&lt;/p&gt; 
&lt;p&gt;今年 2 月，Linux 份额第一次突破 4％，之后两个月短暂跌回 3.9％，随之反弹，6 月份达到 4.05％，最近一个月又增加了 0.39 个百分点。&lt;/p&gt; 
&lt;p&gt;从历史趋势看，Linux 份额有望在 2025 年 2 月份突破 5％！相对来说，这依然是个很小的数字，但是对 Linux 来说却是实实在在的突破，尤其是在政企领域。&lt;/p&gt; 
&lt;p&gt;与此同时，Windows 份额为 72.1％，稳中有增，macOS 份额为 14.92％，稳中有降，ChromeOS 份额为 1.41％，稳中有降。&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1862172703%2FOud5mC2HL%3Frefer_flag%3D1001030103_&quot; target=&quot;_blank&quot;&gt;我们距离真正的开源人工智能还有很长的路要走&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    开源人工智能是过去一年最令人惊讶的科技之一。随着 OpenAI 和谷歌 (Google) 等公司投入数十亿美元打造更强大的人工智能，开发人员可以免费使用和调整的「开放」模型缩小了性能差距。开源人工智能的支持者还需要更好地论证其安全性。这样一种强大、通用技术的发布，任何人都可以使用，理所当然地引起了广泛的关注
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div style=&quot;text-align:right&quot;&gt;
      &lt;span&gt;- 微博&amp;nbsp;&lt;strong&gt;集微网官方微博&lt;/strong&gt;&lt;/span&gt;
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F5722964389%2FOu4Kfg9z4&quot; target=&quot;_blank&quot;&gt;实时高保真换脸的开源 AI 工具：ReHiFace-S&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;p&gt;无需训练，仅需提供一张照片，即可一键将视频中的人脸替换为你选择的人物形象，而且在 1080Ti 这些低配置的显卡上就能实时运行！&lt;/p&gt; 
   &lt;p&gt;GitHub：github.com/GuijiAI/ReHiFace-S&lt;/p&gt; 
   &lt;p&gt;具有如下特点：&lt;/p&gt; 
   &lt;p&gt;- 可在 NVIDIA GTX 1080Ti 上实时运行；&lt;br&gt; - 无需用户额外训练，即可进行实时换脸；&lt;br&gt; - 通过神经网络预测和重建高分辨率细节，实现高保真换脸；&lt;br&gt; - 支持 ONNX 和，实时摄像头模式；&lt;br&gt; - 支持超分辨率和色彩矫正；&lt;br&gt; - 支持使用面部分割 Xseg 模型，即便人脸被遮挡也能轻松应对；&lt;br&gt; - 提供 Gradio 交互界面，在浏览器中直接操作，无需编写代码。&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;&lt;span&gt;GitHubDaily&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6105753431%2FOudvQBGzF&quot; target=&quot;_blank&quot;&gt;英伟达员工百万财富却烦恼&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;据彭博社报道，英伟达的员工虽然有能力轻松购买豪车和豪宅，但漫长的工作时间、频繁的会议依然压得他们喘不过气。&lt;/p&gt; 
    &lt;p&gt;看来老黄此前说的「I don&#39;t fire staff，I torture them into greatness.」（我不开除员工，但我会把他们折磨到变强大）并非玩笑。&lt;/p&gt; 
    &lt;p&gt;尽管如此，难以割舍的股票收益就像「黄金手铐」一样，使得英伟达员工的流失率远低于行业平均水平。&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div style=&quot;text-align:right&quot;&gt;
   - 微博 
   &lt;strong&gt;量子位&lt;/strong&gt;
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6105753431%2FOu28riPHK%3Frefer_flag%3D1001030103_&quot; target=&quot;_blank&quot;&gt;开源 AI 提示工程师&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;最近，Weavel 团队受斯坦福 DSPy 项目启发，推出了 Ape（AI prompt engineer)。&lt;/p&gt; 
     &lt;p&gt;它能自动优化你的提示词，大大节省你编写提示词的时间。&lt;/p&gt; 
     &lt;p&gt;Ape 优化提示词的步骤如下：&lt;/p&gt; 
     &lt;p&gt;- 分析你的提示词和数据集生成评估代码&lt;br&gt; - 运行这些评估代码，以批量测试提示效果&lt;br&gt; - 从测试结果中获取反馈意见&lt;br&gt; - 使用贝叶斯优化等统计方法找出最佳提示词&lt;br&gt; - 结合人类反馈意见，得到最终的提示词结果&lt;/p&gt; 
     &lt;p&gt;而具体的使用方法也很简单，感兴趣的小伙伴可以查看官网 Ape 手册：https://weavel.ai/docs/ape&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;- 微博 &lt;strong&gt;量子位&lt;/strong&gt;&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F3g.k.sohu.com%2Ft%2Fn816617158%3FserialId%3D8626a75dcd4541f90f2af8f41b896433&quot; target=&quot;_blank&quot;&gt;以人工智能技术应对气象灾害&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;总体来看，人工智能技术的特点使其在气象领域，尤其是应对气象灾害方面有着强大能力优势和广阔应用前景。在超强算力下，人工智能可以直接从气象观测数据中计算并输出预报结果；在自主学习下，人工智能可以熟练掌握天气气候机理理论，提升预测准确率。正是由於潜力突出，世界气象组织近年来高度看重对人工智能技术的应用，在其 2024 年至 2027 年的战略计划中，将人工智能技术作为推动气象科技发展的重要力量，特别是计划推出一个基于人工智能技术的短临预报示范项目，支持全民早期预警。&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;经济日报&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.com.cn%2Fjjxw%2F2024-08-27%2Fdoc-incmaiqk5922439.shtml&quot; target=&quot;_blank&quot;&gt;「AI 脱衣」围猎女网红，专家称应积极推广照片防伪技术&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;近年来，AI 技术逐渐走入更多人的生活，但也被一些动了歪心思的人看到商机。新京报贝壳财经记者调查发现，目前，黑灰产平台上存在不少售卖网红、女星的「AI 脱衣」照片群组。黑灰产从业者口中，5 元可以「去衣」，20 元实现「视频换脸」。这条产业链上，还有从业者通过吸睛照片引流，再以「会员群」服务牟利。此外，B 站、小红书等平台还有视频作者以「AI 脱衣教程」等标题吸睛。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;贝壳财经&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.com.cn%2Froll%2F2024-08-26%2Fdoc-inckyrev9481978.shtml&quot; target=&quot;_blank&quot;&gt;人形机器人的冷与热：多方入局新赛道，「商用元年」言之过早&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「量产和需求就是鸡和蛋的问题，无论是企业还是消费者都对价格很敏感，在技术持续演进的情况下，实现真正的大规模应用还需要有一段时间的博弈。」孟庆虎认为，目前有关人形机器人的初创公司众多，技术路线、产品形态各异，未来一定会经历一个大浪淘沙的阶段，实现技术集成。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;21 世纪经济报道&lt;/strong&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.cn%2F2024-08-27%2Fdetail-incmaiqi4051154.d.html&quot; target=&quot;_blank&quot;&gt;马斯克「背刺」硅谷！支持「搞连坐」的加州 AI 监管法案&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;马斯克在 X 上发帖声援，称这一呼吁十分令人为难且会使一些人沮丧，但是加州应该通过 SB-1047 法案。马斯克声称，过去 20 年间，他一直在推动针对人工智能的立法，就像监管其他技术领域一样。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;财联社&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8cMoFn8LV3A&quot; target=&quot;_blank&quot;&gt;1.5 万人大裁员 Intel 资深 CPU 架构师创业！入局 RISC-V&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在 Intel 宣布规模高达 1.5 万人的裁员计划之际，一批拥有丰富经验的资深 CPU 架构师选择离开另起炉灶，共同创立了一家名为 AheadComputing 的 RISC-V 初创公司。AheadComputing 由 Debbie Marr、Mark Dechene、Jonathan Pearce 和 Srikanth Srinivasan 四位联合创始人共同成立，他们此前在 Intel 的工作经验合计超过 80 年。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span&gt;快科技&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F3g.k.sohu.com%2Ft%2Fn816673061%3FserialId%3Da194aecaf61a8f8cd759d5ae3691c1d5&quot; target=&quot;_blank&quot;&gt;「人形机器人+」的未来已来&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;纵然存在诸多难关，「人形机器人+」已是大势所趋。从政策上看，人形机器人无疑是被重点关注的新赛道。如去年 10 月，工业和信息化部转发出台指导意见，指出人形机器人有望成为继计算机、智能手机、新能源汽车后的颠覆性产品，并在关键技术突破、产品培育、场景拓展等方面作出系统部署。从技术上看，得益于「脑力」的升级、算力的提高，以及产业链的加速形成，机器人的「成人之路」将越走越宽。从产业上看，虽然起步相对较晚，但中国坐拥全球最大机器人应用市场，产业生态丰富，除了在工业制造、危化品生产等领域优先落地，人形机器人「入户」同样潜力巨大。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;南方日报&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FKong%2Finsomnia&quot; target=&quot;_blank&quot;&gt;Kong/insomnia&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;299&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-bfb38823fbdb7cfb97adc2f1544af002175.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FKong%2Finsomnia&quot; target=&quot;_blank&quot;&gt;https://github.com/Kong/insomnia&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;Insomnia 是一款开源、跨平台 API 客户端，适用于 GraphQL、REST、WebSockets、Server-sent events (SSE)、gRPC 和其他任何 HTTP 兼容协议。&lt;/span&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/u/5783135/blog/15527256&quot; target=&quot;_blank&quot;&gt;浅析 JVM invokedynamic 指令和 Java Lambda 语法&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Lambda 表达式语言特性引入 Java 语言后，赋予了 Java 语言更便捷的函数式编程魔力 (相对匿名内部类)，同时也让其更简洁，毕竟 Java 代码写起来啰嗦这点一直被开发者们广泛诟病。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;本文将从 JVM 和 Java 两个层面着手，和大家一起深入解析 Lambda 表达式。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;02.jpg&quot; height=&quot;254&quot; src=&quot;https://oscimg.oschina.net/oscnet/02_1724742846495.jpg&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FHsZZ3XuZlrlBDRQjesvOQw&quot; target=&quot;_blank&quot;&gt;IBM 中国内部正式通知：关闭部分研发业务；员工诉求 2N 赔偿与 6 个月缓冲期&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：曾经有一个转行的机会，我没有珍惜，直到 20 年后才会后悔莫及。 // 来自本科在校生&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：缓冲期是啥？&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：可能是类似，带薪，在岗，不安排工作。目的是给员工找新工作的时间&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：至少有 N+1&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：IBM 这些年发展的也不怎么样， 不说以前了，就说现在吧，云掉队了，买了红帽，也并未给自己多少血液，所以看着什么都是包袱。大胆设想，IBM 在全球还会有很多的这方面的动作的。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：IBM 中国哪有什么研发? 全部都是测试！所谓的搞研发的都是去养老混日子的！&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：CDL 只有 1000 多人了吗&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：昨天下雨中午没去 IBM 食堂吃饭，难道就快要吃不到广式烧腊了？&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Futm_XtxsGaPy-Rd-zmkLOw&quot; target=&quot;_blank&quot;&gt;微软收回「40 米砍刀」&lt;span&gt;——&lt;/span&gt;「控制面板」不会被「设置」取代&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：只有控制面板没有咖喱味了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：就那垃圾设置有多难用，折腾了小十年一堆高级功能还是得调 win32 入口。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：你的好友「microsoft」撤回了一把大刀&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：控制面板都要失控了哈哈&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：只是延长了取代的时间罢了&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FQN1R0JMPgdBaMoWATOoH-g&quot; target=&quot;_blank&quot;&gt;上海电信「崩了」：大量用户反馈宽带断网&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：这回和挖掘机，裁员都没关系吧&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：不裁员能崩？今年崩的几个哪个敢说跟裁员没关系？&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：会不会是 pcdn 导致的？&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309108</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309108</guid>
            <pubDate>Tue, 27 Aug 2024 11:30:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>828 B2B 企业节 2024 于数博会开幕，为数智化供需「架桥铺路」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;margin-left:0.0001pt; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;8 月 27 日，在 2024 中国国际大数据产业博览会上，第三届 828 B2B 企业节正式开幕，旨在融通数智供需，加速企业智改数转，助推中国数智产业实力再升级。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;国家数据局党组书记、局长刘烈宏，以及中共贵州省委副书记、贵州省人民政府省长李炳军出席开幕式并发表致辞。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;284&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c237389f9dbeae0f320bc8e95dd1b0388fb.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;刘烈宏指出，以数字技术为基础的产业数字化、以企业为载体的数字化成功转型，对数字经济创新发展至关重要。国家数据局大力推动企业数字化转型工作，鼓励企业加强技术创新和应用落地，构建开放、协同、共享的数据生态体系，不断为高质量发展注入新动能新活力。828 B2B 企业节联接产品提供方、企业需求方、产业及行业机构、媒体等，打造企业数字化供需对接、联合创新、融通发展新模式，为数字产业健康快速发展作出了重要贡献。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;华为公司常务董事、华为云 CEO 张平安表示，华为云在基础设施、AI 领域持续投入，做好「黑土地」，助力千行万业数字化、智能化，而 828 B2B 企业节正是「把最合适的产品、经由最短的路径、以最合理的模式，供给最需要的场景」，为中国企业数字化、智能化构筑企业一站式服务平台。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;本届 828 B2B 企业节由华为与中软国际、软通动力、伟仕佳杰、神州数码、拓维信息、祥云科技、致远互联、百胜软件、赞奇科技、黑湖科技、欧电云、玄武云、赛意信息、用友、金蝶、万户网络、万腾科技 17 家伙伴联合发起，联动全社会 B2B 企业和机构共同参与。&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;&lt;strong&gt;万余款数智化产品、千余场全国行动，为企业数智化提供全方位支持&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;华为公司副总裁、华为云中国区总裁张修征介绍，本届 828 B2B 企业节聚焦商机促进、优品优惠、技术联创、专业服务、人才培养、品牌提升六个维度，携手伙伴共同推出万余款数智化产品，在全国范围内开展千余场线上线下行动，覆盖企业数智化全阶段和全场景，助推更多企业实现降本增效和创新发展。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;508&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-fc0d827767ff060a4614622495d5c79eb76.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;今年，围绕企业快速上云、数转达标必备、AI 升级、行业应用四大需求，828 企业应用一站购平台将推出近 600 款精选产品与解决方案，包括 30 多款「小快轻准」产品、400 多款数转达标必备产品、100 多款 AI 应用以及 50 多款热门场景解决方案，覆盖企业数智化全阶段、全场景。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;其中最热销的产品和解决方案，包含华为云 Flexus 系列云服务、中软国际企业上云迁移服务解决方案、软通动力企业上云服务解决方案、依柯力新能源汽车 MOM 解决方案、欧电云 SRP 大中台系列软件、致远协同管理软件、赞奇超高清设计师云工作站等，更好满足企业数智化发展所需。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;据透露，未来一个月，828 B2B 企业节将累计在全国开展 1000 多场线上线下行动，包括企业数转加速、产业生态创新、中企出海、企业快成长、企业服务专属月五大行动，让数智化供需双方充分对接。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;此外，828 B2B 企业节期间，华为和伙伴还将为企业提供数字化咨询服务、金融服务、人才培训计划、综合服务、品牌提升等多重服务，加速企业快成长；同时，在华为云官网和云商店，华为云和伙伴将推出更多优惠政策、限时折扣、免费试用等活动，助力企业轻松上云、用云。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;为帮助企业更高效地获取所需的数智化产品和解决方案，今年，828 企业应用一站购平台，全面升级了「搜-荐-比-试-询」智能导购和专家服务，更好辅助企业应用采购决策，促成更多好生意。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;张平安表示，中国的数字经济发展和技术创新，仍需跨越一道道技术鸿沟，数字产业大花园的繁茂，仍需要更多的灌溉。依托政、产、学、研等各个维度的持续投入，华为期待与业界携手共建智能时代的创新技术新生态，为企业数智化供需「架桥」「铺路」，为中国企业的数字化转型持续贡献力量。&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;&lt;strong&gt;联合贵州推出「8+4」产业生态创新行动，助力数智产业发展&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;作为主宾省份，贵州省政府深度参与今年 828 B2B 企业节的打造，联动数博会、投入本地资源，力促数字生态企业与本地企业的合作交流。贵州省大数据发展管理局局长景亚萍出席开幕式，与华为云及华为生态伙伴共同发起贵州「8+4」产业生态创新行动。现场还达成了 AI 场景、旅游大模型等多项签约，落实「8+4」，助力贵州数智产业繁荣发展。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;282&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-10a79b8a6b3030150178edbc520f4b46f00.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;基于行动，贵州省政府与华为及生态伙伴共同筑巢引凤，针对贵州省升腾算力生态、行业大模型生态、人工智能人才生态展开深入合作，在 8 个重要行业（酱酒、煤矿、化工、新材料、钢铁、有色、电力、建材）和 4 个重要领域（城镇智慧化改造、乡村数字化建设、旅游场景化创新、政务便捷化服务），共同推进人工智能应用的孵化和落地，打造「8+4」产业，推进人工智能在贵州的全面发展。未来，行动每年将支持 150 家企业完成升腾适配、4 个行业大模型落地、20 个开源大模型国产化适配，每年培养至少 5000 名人工智能人才。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;张平安表示，华为云在贵州布局了全球最大的数据中心，助力贵州成为人工智能算力高地、AI 生态基地和数据生态基地。通过「8+4」行动，双方将共同推进人工智能应用的孵化和落地，加速人工智能在贵州省的全面发展。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/309092</link>
            <guid isPermaLink="false">https://www.oschina.net/news/309092</guid>
            <pubDate>Tue, 27 Aug 2024 09:42:50 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>浅析 JVM invokedynamic 指令和 Java Lambda 语法</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;h1&gt;一、导语&lt;/h1&gt; 
&lt;p&gt;尽管近年来 JDK 的版本发布愈发敏捷，当前最新版本号已经 20+，但是日常使用中，JDK8 还是占据了统治地位。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/01_1724742677064.jpg&quot; alt=&quot;01.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;++你发任你发，我用 Java8：【Jetbrains】2023 开发者生态系统现状 - &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Fzh-cn%2Flp%2Fdevecosystem-2023%2Fjava%2F%2B%2B&quot; target=&quot;_blank&quot;&gt;https://www.jetbrains.com/zh-cn/lp/devecosystem-2023/java/++&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;JDK8 如此旺盛的生命力，与其优异的兼容性、稳定性和足够日常开发使用的语言特性有极大的关系，这其中最引人瞩目的语言特性莫过于 Lambda 表达式。&lt;/p&gt; 
&lt;p&gt;Lambda 表达式语言特性引入 Java 语言后，赋予了 Java 语言更便捷的函数式编程魔力 (相对匿名内部类)，同时也让其更简洁，毕竟 Java 代码写起来啰嗦这点一直被开发者们广泛诟病。&lt;/p&gt; 
&lt;p&gt;本文将从 JVM 和 Java 两个层面着手，和大家一起深入解析 Lambda 表达式。&lt;/p&gt; 
&lt;h1&gt;二、Java 和 JVM 的关系&lt;/h1&gt; 
&lt;p&gt;JVM 是 HLLVM(高级语言虚拟机)，其参考物理计算机体系架构，设计、实现了一套特定领域虚拟指令集，即：字节码指令。利用上述虚拟指令集作为中间层，将上层高级语言和底层体系架构解耦以规避繁琐、复杂的平台兼容性问题，以实现【一次编译，处处运行】。&lt;/p&gt; 
&lt;p&gt;Java 是基于 JVM 提供的虚拟指令集，设计、实现的一种供开发者使用的高级语言。通过配套的编译器和标准库，将文本格式的 Java 代码编译成符合 JVM 指令集规范的二进制文件，交付到 JVM 执行。&lt;/p&gt; 
&lt;p&gt;Java 是一种运行在 JVM 平台上的高级语言，但是 JVM 平台绝不是只能运行 Java 语言。任何人都可以设计自己的语言语法，只要能按 JVM 规范编译成合法的 JVM 字节码，即可在 JVM 上运行 (用 Java 命令)。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;++计算机科学领域的任何问题，都可以通过增加一个中间层来解决。++&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/02_1724742846495.jpg&quot; alt=&quot;02.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;没有无源之水，Java 语言层面的特性，除非是纯语法糖，不然一定离不开特定 JVM 特性的支撑。Lambda 是 Java8 语言特性，那支撑它的便是 JVM invokedynamic 指令。&lt;/p&gt; 
&lt;h1&gt;三、JVM 指令：invokedynamic&lt;/h1&gt; 
&lt;p&gt;在 Java7 之前，JVM 提供了如下 4 种【方法调用】指令：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/03_1724742871274.jpg&quot; alt=&quot;03.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;上述 4 种字节码指令各自有不同的使用场景，但是有一个共同的特点：&lt;strong&gt;目标方法一定需要在【编译期】确定&lt;/strong&gt; 。如下图，编译后 4 种指令的参数都指定了目标方法所在的类和签名以供&lt;strong&gt;运行时链接、动态分派&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/04_1724742905513.jpg&quot; alt=&quot;04.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/05_1724742911749.jpg&quot; alt=&quot;05.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;这个特点一方面保证了 JVM 语言类型安全，另一方面也限制了 JVM 平台对动态类型高级语言的支持。比如想让 JavaScript、Python 等动态语言代码编译成 JVM 字节码运行在 JVM 平台上的开销会比较大，性能也会比较差。&lt;/p&gt; 
&lt;p&gt;为了解决上述问题， Java7 引入了一条新的虚拟机指令：&lt;strong&gt;invokedynamic&lt;/strong&gt; 。这是自 JVM 1.0 以来&lt;strong&gt;第一次引入新的虚拟机指令&lt;/strong&gt; ，invokedynamic 与其他 invoke*指令不同的是它允许由&lt;strong&gt;应用级的代码&lt;/strong&gt;来决定方法解析 (链接、分派)。&lt;/p&gt; 
&lt;p&gt;所谓的【应用级的代码来决定方法解析】需要对照之前的 invoke&lt;em&gt;指令来理解。之前的 4 种 invoke&lt;/em&gt; 指令，在编译期就必须要明确目标方法并 hardcode 到字节码中，JVM 在运行时直接解析、链接、动态分派硬编码指定的目标方法。而 invokedynamic 指令通过&lt;strong&gt;回调机制&lt;/strong&gt;来获取需要调用的目标方法。即先调用业务自定义回调方法做方法决策 (解析、链接)，再调用其返回的目标方法。笔者称之为**【两阶段调用】**。&lt;/p&gt; 
&lt;p&gt;伪代码对比如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/06_1724742972009.jpg&quot; alt=&quot;06.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;MethdoHandle 为示意，后文有详述。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/07_1724742995622.jpg&quot; alt=&quot;07.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;伪字节码&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;++invokevirtual 指令直接调用目标方法，invokedynamic 直接调用回调方法，再调用回调方法返回的方法句柄。++&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;传统的 invoke*指令直接调用字节码中指定的目标方法，如 Son.testMethod1，invokedynamic 指令在调用时，先调用字节码中指定的回调方法，如 Son.dynamicMethodCallback，然后再调用回调方法 (hook) 返回的方法引用。&lt;/p&gt; 
&lt;p&gt;而上述 dynamicMethodCallback 即为【&lt;strong&gt;应用级的代码或者我们常说的业务代码&lt;/strong&gt;】，可以在不影响性能的前提下，灵活的干预 JVM 方法解析、链接的过程。&lt;/p&gt; 
&lt;p&gt;总结来说，所谓应用级的代码其实也是一个方法，在这里这个方法被称为&lt;strong&gt;引导方法（Bootstrap Method）&lt;/strong&gt; ，简称 &lt;strong&gt;BSM&lt;/strong&gt;。invokedynamic 执行时，BSM 先被调用并返回一个 CallSite(调用点) 对象，这个对象就和 invokedynamic 链接在一起。以后再执行这条 invokedynamic 指令都不会创建新的 CallSite 对象。CallSite 就是一个 MethodHandle(方法句柄) 的 holder，方法句柄指向一个调用点真正执行的方法。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;一阶段&lt;/strong&gt;：调用引导方法确定并缓存 CallSite(MethodHandle)&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;二阶段&lt;/strong&gt;：调用 CallSite(MethodHandle) 字节码指令比较 low level，除字节码业务插桩场景外，字节码指令序列的构造、编排一般都由【高级语言编译器】来根据语言语法规则自动完成，如 javac。 某种意义上有点类似 Java【动态代理】机制，都是通过调用横切来动态桥接、灵活决策目标方法。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;四、方法句柄：MethodHandle&lt;/h1&gt; 
&lt;p&gt;前面我们知道 invokedynamic 指令支持通过业务层面自定义的 BSM 来灵活的决策被调用的目标方法，也就是上述的【一阶段】。BSM 方法的返回值就是【二阶段】调用的方法。&lt;/p&gt; 
&lt;p&gt;但是和 C、Python 等语言不同，Java 中方法/函数不是一等公民，也就是在 Java 中无法将【方法变量】作为方法返回值。&lt;/p&gt; 
&lt;p&gt;为了解决这个问题，Java 标准库提供了一个新的类型 MethodHandle，用于实现类似 C 语言中的方法指针、JavaScript/Python 中方法变量的能力。该 API 和反射 API 呈现的能力相似，但是性能更好。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/08_1724743157173.jpg&quot; alt=&quot;08.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;上述为 MethodHandle API 的基本使用，该课题展开又是一篇长文。总之，我们可以用 MethodHandle 来作为【方法变量】，变相的将【Java 方法】提升为【一等公民】，从而可以在 BSM 中用 Java 代码实现动态编排、决策，返回合适的方法指针。这也是上述&lt;strong&gt;invokedynamic+BSM 机制&lt;/strong&gt;能够成立的一个基础。&lt;/p&gt; 
&lt;p&gt;详见：++&lt;em&gt;秒懂 Java 之方法句柄 (MethodHandle) （&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.csdn.net%2FShuSheng0007%2Farticle%2Fdetails%2F107066856%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/ShuSheng0007/article/details/107066856）&lt;/a&gt;&lt;/em&gt;++&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;段落引用上述【一阶段】调用的本质就是得到一个特定的 MethodHandle(方法指针/方法引用)，【二阶段】调用就是调用这个 MethodHandle。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;五、Lambda 表达式简介&lt;/h1&gt; 
&lt;p&gt;Java 的 Lambda 表达式，是传统的【匿名内部类】特性在特定场景下的平替特性。所谓的特定场景，即我们熟知的 FunctionalInterface。&lt;/p&gt; 
&lt;p&gt;当【匿名内部类】匿名实现的是一个 FunctionalInterface 时，可以用 Lambda 表达式平替。&lt;/p&gt; 
&lt;p&gt;示例如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/09_1724743253473.jpg&quot; alt=&quot;09.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;函数式接口 (Functional Interface) 就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Java 不会强制要求你使用 @FunctionalInterface 注解来标记你的接口是函数式接口，然而，作为 API 作者，你可能倾向使用@FunctionalInterface 指明特定的接口为函数式接口，这只是一个设计上的考虑，可以让用户很明显的知道一个接口是函数式接口。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Java Lambda 表达式在语法层面有两种形式：行内代码块、方法引用。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/10_1724743756205.jpg&quot; alt=&quot;10.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;但是在编译产物中，行内 Lambda 最终会被提取到独立的静态方法中。也就是说，在字节码层面只有【方法引用】一种 Lambda 形式。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/11_1724743772127.jpg&quot; alt=&quot;11.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/12_1724743778785.jpg&quot; alt=&quot;12.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;如上图反编译结果，两个行内 Lambda 中的代码在编译后被提取到两个自动生成的方法 lambda$main$0、lambda$main$1，&lt;strong&gt;后续 Lambda 表达式的处理流程都可以收敛，无需区分对待&lt;/strong&gt;。&lt;/p&gt; 
&lt;h1&gt;六、Lambda 表达式实现&lt;/h1&gt; 
&lt;p&gt;Lambda 表达式具体的实现涉及类文件结构、字节码指令结构、标准库等多个方面的内容，千头万绪。也想不出来什么通俗易懂的敍述角度，只能是枯燥的对照着字节码分析了。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/13_1724743813738.jpg&quot; alt=&quot;13.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;如上图，mian 方法中声明了 3 个 Lambda 表达式，反编译字节码可以看到字节码指令流如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/14_1724743830679.jpg&quot; alt=&quot;14.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt; 0 iconst_3
 1 istore_1
 2 iconst_3
 3 newarray 10 (int)
 5 dup
 6 iconst_0
 7 iconst_1
 8 iastore
 9 dup
10 iconst_1
11 iconst_2
12 iastore
13 dup
14 iconst_2
15 iconst_3
16 iastore
17 invokestatic #2 &amp;lt;java/util/stream/IntStream.of : ([I)Ljava/util/stream/IntStream;&amp;gt;
20 invokedynamic #3 &amp;lt;applyAsInt, BootstrapMethods #0&amp;gt;
25 invokeinterface #4 &amp;lt;java/util/stream/IntStream.map : (Ljava/util/function/IntUnaryOperator;)Ljava/util/stream/IntStream;&amp;gt; count 2
30 iload_1
31 invokedynamic #5 &amp;lt;applyAsInt, BootstrapMethods #1&amp;gt;
36 invokeinterface #4 &amp;lt;java/util/stream/IntStream.map : (Ljava/util/function/IntUnaryOperator;)Ljava/util/stream/IntStream;&amp;gt; count 2
41 invokedynamic #6 &amp;lt;applyAsInt, BootstrapMethods #2&amp;gt;
46 invokeinterface #4 &amp;lt;java/util/stream/IntStream.map : (Ljava/util/function/IntUnaryOperator;)Ljava/util/stream/IntStream;&amp;gt; count 2
51 invokeinterface #7 &amp;lt;java/util/stream/IntStream.sum : ()I&amp;gt; count 1
56 istore_2
57 return
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;3 个 lambda 表达式对应 3 条 invokedynamic 指令：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/15_1724743882041.jpg&quot; alt=&quot;15.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;第一个 lambda 表达式比较简单且典型，后续我们以其为抓手展开分析。&lt;/p&gt; 
&lt;h2&gt;invokedynamic 指令参数&lt;/h2&gt; 
&lt;p&gt;invokedynamic 指令参数结构如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/16_1724743908290.jpg&quot; alt=&quot;16.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;++jvms-6.5.invokedynamic++ &lt;em&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fjavase%2Fspecs%2Fjvms%2Fse8%2Fhtml%2Fjvms-6.html%23jvms-6.5.invokedynamic%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.invokedynamic）&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;invokedynamic 指令需要指定其期待&lt;strong&gt;BSM 返回的方法特征&lt;/strong&gt; (出入参类型) 和&lt;strong&gt;BSM 方法引用&lt;/strong&gt;。该参数以 CONSTANT_InvokeDynamic_info 结构存放在类文件的常量池结构中，invokedynamic 用两个 byte 宽度的常量池索引号指定。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;CONSTANT_InvokeDynamic_info {
    u1 tag;
    u2 bootstrap_method_attr_index;
    u2 name_and_type_index;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/17_1724743974289.jpg&quot; alt=&quot;17.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;对照字节码我们可知，Lambda1 相关的 invokedynamic 指定的 CONSTANT_InvokeDynamic_info 序号为 3，得到如下内容：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/18_1724743987856.jpg&quot; alt=&quot;18.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/19_1724743994269.jpg&quot; alt=&quot;19.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;期望的方法名称和描述符&lt;/h2&gt; 
&lt;p&gt;该 invokedynamic 指令期望 BSM0 方法返回一个如下特征的方法引用：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;IntUnaryOperator anyName()；
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;没有入参，返回值类型为 IntUnaryOperator 的 MethodHandle。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;为什么是返回 IntUnaryOperator 类型呢？因为 IntStream 的 map 方法需要的参数是 IntUnaryOperator 类型。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/20_1724744047712.jpg&quot; alt=&quot;20.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;换句话说，该 invokedynamic 指令希望相应的 BSM 返回一个 IntUnaryOperator 的工厂方法句柄，然后 invokedynamic 指令再调用这个方法句柄，创建出一个 map 方法需要的 IntUnaryOperator 类型的参数。&lt;/p&gt; 
&lt;h2&gt;BSM 方法序号&lt;/h2&gt; 
&lt;p&gt;BSM 方法序号指定了当前 invokedynamic 指令使用的 BSM 方法在 BSM 方法表中的索引。&lt;/p&gt; 
&lt;p&gt;通俗来说，类文件中有一个数组，数组名称叫 BootstrapMethods。其结构如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;BootstrapMethods_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 num_bootstrap_methods;
    {   u2 bootstrap_method_ref;
        u2 num_bootstrap_arguments;
        u2 bootstrap_arguments[num_bootstrap_arguments];
    } bootstrap_methods[num_bootstrap_methods];
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/21_1724744106369.jpg&quot; alt=&quot;21.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/22_1724744122269.jpg&quot; alt=&quot;22.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/23_1724744133955.jpg&quot; alt=&quot;23.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;该 invokedynamic 指令指定的 BSM 为 BSM 数组中的第一个 BSM。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/24_1724744151213.jpg&quot; alt=&quot;24.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;BSM 方法&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/25_1724744176669.jpg&quot; alt=&quot;25.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/26_1724744186111.jpg&quot; alt=&quot;26.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;BSM 方法参数&lt;/h2&gt; 
&lt;p&gt;该 BSM 数据结构指定了 3 个编译期固定的、静态的 BSM 方法参数：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/27_1724744236346.jpg&quot; alt=&quot;27.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;第一、第三个参数指定了预期的函数式接口 (FunctionInterface) 的特征：入参为 int、出参为 int。即上述 IntUnaryOperator。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/28_1724744251042.jpg&quot; alt=&quot;28.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;第二个参数是一个静态方法引用。如上述，Lambda 表达式在编译时会被提取到一个自动生成的方法中。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/29_1724744267916.jpg&quot; alt=&quot;29.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/30_1724744278881.jpg&quot; alt=&quot;30.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;至此，invokedynamic 指令具有的发起【一阶段调用】的上下文如下&lt;/strong&gt;：&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;具体的一阶段调用的 BSM 方法：java.lang.invoke.LambdaMetafactory#metafactory&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;IntStream.map 方法需要的参数类型：IntUnaryOperator&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;编译器 (javac) 编译产生的包含 Lambda 表达式代码内容的静态方法：lambda$main$0(I)I&lt;/p&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;接下来就是调用 java.lang.invoke.LambdaMetafactory#metafactory 方法，传递上述必要的上下文参数，接受 metafactory 方法返回的 IntUnaryOperator applyAsInt() 类型的 MethodHandle 并调用该 MethodHandle，继而得到 IntStream.map 方法需要的参数：IntUnaryOperator。&lt;/p&gt; 
&lt;h2&gt;LambdaMetafactory# metafactory&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/31_1724744434670.jpg&quot; alt=&quot;31.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;如上述，invokedynamic 指令调用上述 metafactory 方法，对照字节码信息，可以得到如下具体参数表格：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/32_1724744454840.jpg&quot; alt=&quot;32.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;LambdaMetafactory 根据上述上下文，使用 ASM 库，动态生成了一个如下所示的 IntUnaryOperator 适配类，用于桥接 Lambda 表达式代码块到 IntUnaryOperator 类型。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;添加&lt;/em&gt; -Djdk.internal.lambda.dumpProxyClasses=.&lt;em&gt;启动参数，JDK 会将生成的适配函数式接口的类源码输出到工作目录中。&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;构造 CallSite&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/33_1724744501505.jpg&quot; alt=&quot;33.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;java.lang.invoke.InnerClassLambdaMetafactory#buildCallSite&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;生成 FunctionalInterface 适配类后，基于适配类创建 MethodHandle。该 MethodHandle 体现的代码逻辑类似如下 Java 代码：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/34_1724744535719.jpg&quot; alt=&quot;34.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;至此，invokedynamic【一阶段】调用已经完成，invokedynamic 指令获取到了由 LambdaMetafactory#metafactory 作为 BSM 动态决策、动态生成的 IntUnaryOperator&lt;strong&gt;适配类的【工厂方法】(以 CallSite 包装的 MethodHandle 的形式)&lt;/strong&gt;。&lt;/p&gt; 
&lt;h2&gt;二阶段调用&lt;/h2&gt; 
&lt;p&gt;【一阶段调用】已经完成，返回了动态决策产生的 CallSite 对象，getTarget 方法可以获取上述的 IntUnaryOperator 适配类的【工厂方法】。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/35_1724744571147.jpg&quot; alt=&quot;35.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;至此，invokedynamic 指令可以通过如下伪代码，创建 IntStream.map 方法需要的 IntUnaryOperator 实例。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;IntUnaryOperator intUnaryOperator = (IntUnaryOperator)callSite.getTarget().invoke()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Lambda1 的整个运行时解析、链接流程完成。&lt;/p&gt; 
&lt;h1&gt;七、Lambda 表达式性能&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/36_1724744627080.jpg&quot; alt=&quot;36.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;经过上述分析我们可以知道，&lt;strong&gt;Lambda1&lt;/strong&gt; 这种&lt;strong&gt;无状态的、没有捕获外部变量 (闭包&lt;/strong&gt;) 的 Lambda 表达式的开销是很小的，只会在第一次调用时动态生成桥接的适配类，实例化后就通过 ConstantCallSite 缓存。后续所有的调用都不会再重新生成适配类、实例化适配类。&lt;/p&gt; 
&lt;p&gt;但是，&lt;strong&gt;Lambda2&lt;/strong&gt;则不同，因为 Lambda 捕获、依赖了 (闭包) 外部变量 num，那么这个表达式就是有状态的。虽然同样只是会在第一次调用时动态生成桥接的适配类，但是每一次调用都会使用 num 变量重新实例化一个新的适配类实例。这种场景下，其在性能和形式上就已经和传统的【匿名内部类】没有太大差别了。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Lambda3&lt;/strong&gt; 本质上和&lt;strong&gt;Lambda1&lt;/strong&gt;一样，只不过不需要 Java 编译器在编译时将 Lambda 代码语句抽取成独立的方法。&lt;/p&gt; 
&lt;h1&gt;八、Lambda 表达式和 final 变量&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/37_1724744716699.jpg&quot; alt=&quot;37.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;当 Lambda 表达式闭包捕获的局部变量 num 在方法内可变时，编译器会提示编译错误。这不是 JVM 的限制，而是 Java 语言层面的限制。笔者认为，这种限制没有技术上的原因，而是 Java 语言设计者刻意的借助编译器在阻止你犯错。&lt;/p&gt; 
&lt;p&gt;假设没有这个限制，那么&lt;strong&gt;Lambda 表达式就变成了重构不友好的【位置相关】的代码块&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;换句话说，下面两种代码执行结果是不一样的：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/38_1724744763675.jpg&quot; alt=&quot;38.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Lambda 捕获的 num 的值为 5；&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/39_1724744781066.jpg&quot; alt=&quot;39.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Lambda 捕获的 num 的值为 3；&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;如果没有类似的编译约束，当我们有心或无意的在复杂的业务逻辑中进行了类似的代码调整时，极易出错且难以排查。&lt;/p&gt; 
&lt;p&gt;笔者个人见解，欢迎指正。&lt;/p&gt; 
&lt;h1&gt;九、总结&lt;/h1&gt; 
&lt;p&gt;提笔的时候立意高远，想着要尽可能通俗详尽的写清楚所有涉及的技术点，但是越写越觉得事情不简单，最后只能是把博客标题从【深入剖析】修改为【浅析】。这块内容牵涉的面太广，笔者没有能力也没有精力介绍到事无巨细、面面俱到，只能为大家抛砖引玉，大家可以配合后文【参考资料】多梳理、多实验，同时在评论区批评指正。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;invokedynamic 指令不是业务开发者使用的。invokedynamic 指令可以用来实现 Lambda 语法，但是它不是只能用来实现 Lambda 语法。这个指令对于 JVM 语言开发者比如 Kotlin、Groovy、JRuby、Jython 等会比较重要。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;没有捕获外部变量 (闭包) 的 Lambda 表达式性能和直接调用没有差别。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;捕获外部变量 (闭包) 的 Lambda 表达式性能理论上和【匿名内部类】范式一样，每次调用都会创建一个对象 (&lt;strong&gt;最坏情况&lt;/strong&gt;)。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;em&gt;本文使用的反编译工具为：jclasslib Bytecode Viewer&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fplugins.jetbrains.com%2Fplugin%2F9248-jclasslib-bytecode-viewer%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer）&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h1&gt;十、附录&lt;/h1&gt; 
&lt;h2&gt;自动生成的 Lambda2 适配类&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;// $FF: synthetic class
final class LambdaTest$$Lambda$2 implements IntUnaryOperator {
    private final int arg$1;

    private LambdaTest$$Lambda$2(int var1) {
        this.arg$1 = var1;
    }

    private static IntUnaryOperator get$Lambda(int var0) {
        return new LambdaTest$$Lambda$2(var0);
    }

    [@Hidden](https://my.oschina.net/u/437850)
    public int applyAsInt(int var1) {
        return LambdaTest.lambda$main$1(this.arg$1, var1);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;自动生成的 Lambda3 适配类&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;// $FF: synthetic class
final class LambdaTest$$Lambda$3 implements IntUnaryOperator {
    private LambdaTest$$Lambda$3() {
    }

    [@Hidden](https://my.oschina.net/u/437850)
    public int applyAsInt(int var1) {
        return LambdaTest.add(var1);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Oracle-Java 虚拟机规范 (JDK8)&lt;/strong&gt;--&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fjavase%2Fspecs%2Fjvms%2Fse8%2Fhtml%2F&quot; target=&quot;_blank&quot;&gt;https://docs.oracle.com/javase/specs/jvms/se8/html/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Oracle-Java 语言规范 (JDK8)&lt;/strong&gt;-&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fjavase%2Fspecs%2Fjls%2Fse8%2Fhtml%2Findex.html&quot; target=&quot;_blank&quot;&gt;https://docs.oracle.com/javase/specs/jls/se8/html/index.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;JVM 系列之:JVM 是怎么实现 invokedynamic 的? | HeapDump 性能社区&lt;/strong&gt;-&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fheapdump.cn%2Farticle%2F3573623&quot; target=&quot;_blank&quot;&gt;https://heapdump.cn/article/3573623&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Java 虚拟机：JVM 是怎么实现 invokedynamic 的？（上）&lt;/strong&gt;-&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.tencent.com%2Fdeveloper%2Farticle%2F1787369&quot; target=&quot;_blank&quot;&gt;https://cloud.tencent.com/developer/article/1787369&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Java 虚拟机：JVM 是怎么实现 invokedynamic 的？（下）&lt;/strong&gt;-&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.tencent.com%2Fdeveloper%2Farticle%2F1787371&quot; target=&quot;_blank&quot;&gt;https://cloud.tencent.com/developer/article/1787371&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;【stackoverflow】What is a bootstrap method?&lt;/strong&gt;-&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F30733557%2Fwhat-is-a-bootstrap-method&quot; target=&quot;_blank&quot;&gt;https://stackoverflow.com/questions/30733557/what-is-a-bootstrap-method&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Java 中普通 lambda 表达式和方法引用本质上有什么区别？&lt;/strong&gt;-&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F51491241%2Fanswer%2F126232275&quot; target=&quot;_blank&quot;&gt;https://www.zhihu.com/question/51491241/answer/126232275&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;理解 invokedynamic&lt;/strong&gt;-&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F6844903503236710414&quot; target=&quot;_blank&quot;&gt;https://juejin.cn/post/6844903503236710414&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnblogs.com%2Fwade-luffy%2Fp%2F6058087.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/wade-luffy/p/6058087.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;09 | JVM 是怎么实现 invokedynamic 的？（下）-深入拆解 Java 虚拟机-极客时间&lt;/strong&gt;-&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftime.geekbang.org%2Fcolumn%2Farticle%2F12574&quot; target=&quot;_blank&quot;&gt;https://time.geekbang.org/column/article/12574&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;*&lt;strong&gt;文/ 羊羽&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;本文属得物技术原创，更多精彩文章请看：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com%2F&quot; target=&quot;_blank&quot;&gt;得物技术&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;未经得物技术许可严禁转载，否则依法追究法律责任！&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/5783135/blog/15527256</link>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/15527256</guid>
            <pubDate>Tue, 27 Aug 2024 08:58:50 GMT</pubDate>
            <author>原创</author>
        </item>
    </channel>
</rss>