<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - industry - 简体中文</title>
    <link>https://www.oschina.net/news/industry</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/industry" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 25 Jun 2025 02:42:30 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>开源 AI 助手平台 Cherry Studio 企业版开启公测</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Cherry Studio &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FFHtJqZlULDhRw7fT1ALagA" target="_blank"&gt;宣布&lt;/a&gt;其企业版已开始公测，这是专为企业打造的私有化 AI 生产力平台。&lt;/p&gt; 
&lt;p style="color:#1f2329; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span style="color:#1f2329"&gt;&lt;span&gt;下表展示了两个版本之间的定位与功能差异：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;table cellspacing="0" style="-webkit-tap-highlight-color:transparent; -webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-color:#dee0e3; box-sizing:border-box !important; color:rgba(0, 0, 0, 0.9); display:table; font-family:&amp;quot;PingFang SC&amp;quot;,system-ui,-apple-system,&amp;quot;system-ui&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei UI&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,Arial,sans-serif; font-size:15px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:0.544px; margin:0px 0px 10px; max-width:626px !important; min-width:297px; orphans:2; outline:0px; overflow-wrap:break-word !important; padding:0px; text-align:justify; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:626px; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对比维度&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;社区版 （Community）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;企业版 （Enterprise）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;目标用户&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;个人开发者、AI 爱好者&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;中小型企业、大型企业内部团队、对数据安全有高要求的组织&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;开源策略&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;✅ Github 开源&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;⭕️ 针对伙伴客户端源码开放&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;商业模式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;个人免费 / 商用授权&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;买断+可选服务费&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;核心差异&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;专注于个人生产力&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;企业集中管理能力&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;部署方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;客户端应用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;客户端 + 服务端私有化部署&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;核心价值&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;强大的个人 AI 辅助工具&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt; 
   &lt;td style="border-color:#cccccc; border-style:solid; border-width:1px; white-space:normal"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;安全、可控、高效的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cherry-ai.com%2Fenterprise" target="_blank"&gt;https://www.cherry-ai.com/enterprise&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;点击查看企业版体验手册：&lt;/p&gt; 
 &lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;https://doc.weixin.qq.com/doc/w3_ASIAPQaBALgCNdQv1pcxUTJGhXLsX?scode=APkA7AeJABIVWchL1vASIAPQaBALg&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;Cherry Studio 是一款支持多个大语言模型（LLM）服务商的开源桌面客户端，兼容 Windows、Mac 和 Linux 系统。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-23dab8c50bfcc8126ab84229b00dbc2115c.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/357134</link>
      <guid isPermaLink="false">https://www.oschina.net/news/357134</guid>
      <pubDate>Wed, 25 Jun 2025 02:23:28 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>xAI 正在为 Grok 开发高级文件编辑器</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;工程师 Nima Owji 在 X 平台&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fnima_owji%2Fstatus%2F1937146584493375900" target="_blank"&gt;发文称&lt;/a&gt;&lt;/u&gt;，马斯克旗下 xAI 公司正为 Grok 开发一款支持表格的高级文件编辑器。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img height="1826" src="https://static.oschina.net/uploads/space/2025/0624/194050_x6IF_2720166.png" width="1940" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;科技媒体 TechCrunch&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2025%2F06%2F23%2Fleak-reveals-grok-might-soon-edit-your-spreadsheets%2F" target="_blank"&gt; &lt;u&gt;认为&lt;/u&gt;&lt;/a&gt;&amp;nbsp;xAI 此举表明他们正采取措施，通过在生产力工具中整合 AI 辅助功能，与 OpenAI、谷歌和微软等巨头展开竞争。OpenAI 和微软已拥有类似工具，最为相似的是 Gemini Workspace for Sheets、Docs 和 Gmail，可以编辑文档和表格，并支持用户在查看或编辑文档时与 Gemini 对话。&lt;/p&gt; 
&lt;p&gt;目前尚不清楚 xAI 的编辑器除了表格之外还可能支持哪些类型的文件，也不清楚 xAI 是否计划构建一个完整的生产力套件，以与谷歌 Workspace 和微软 Microsoft 365 竞争。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/357076/leak-reveals-grok-might-soon-edit-your-spreadsheets</link>
      <guid isPermaLink="false">https://www.oschina.net/news/357076/leak-reveals-grok-might-soon-edit-your-spreadsheets</guid>
      <pubDate>Sat, 10 May 2025 11:44:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>为什么所有浏览器的的 User-Agent 字符串开头都是</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;你有没有注意过，几乎所有浏览器的 User-Agent 字符串开头都是「Mozilla/」？&lt;/p&gt; 
&lt;p&gt;无论是 Chrome、Safari、还是 IE、Edge，都有「Mozilla」的痕迹。其实，这一切都源自一场「浏览器伪装」的历史闹剧。&lt;/p&gt; 
&lt;p&gt;这事得从 90 年代说起，那时互联网刚起步，第一个流行浏览器叫 Mosaic。后来，有人造出一款更强的浏览器，号称「Mosaic Killer」，代号 Mozilla。&lt;/p&gt; 
&lt;p&gt;它上线后，不光能看图还能加载网页框架（frames），可谓是当年超前的黑科技。&lt;/p&gt; 
&lt;p&gt;很多网站为了兼容，只愿给「Mozilla」发完整版页面，其他浏览器只能看阉割版。&lt;/p&gt; 
&lt;p&gt;这就引发了一个问题：网站开始「嗅探」浏览器身份，也就是所谓的 User-Agent 识别。&lt;/p&gt; 
&lt;p&gt;后来，微软做了 Internet Explorer（IE），本来想正大光明竞争，但一看：网站只对 Mozilla 好，干脆就让自己也伪装成 Mozilla。&lt;/p&gt; 
&lt;p&gt;于是 IE 的 User-Agent 字符串成了这样：&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Mozilla/1.22 (compatible; MSIE 2.0; Windows 95)&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;就这样，IE 成功骗过了网站，用户数也提升了。&lt;/p&gt; 
&lt;p&gt;而这场「伪装游戏」一旦开始，就收不住了。&lt;/p&gt; 
&lt;p&gt;1、Firefox 自己引以为傲的 Gecko 渲染引擎，也以 Mozilla 自称：&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Mozilla/5.0 (...) Gecko/... Firefox/...&lt;/code&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;2、Linux 社区做的浏览器，用的是 KHTML 引擎，他们开始模仿 Gecko 写法：&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Mozilla/5.0 (...) (KHTML, like Gecko)&lt;/code&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;3、苹果搞了 Safari，用的是 WebKit，而 WebKit 是 KHTML 的一个分支：&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Mozilla/5.0 (...) AppleWebKit/... (KHTML, like Gecko) Safari/...&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;4、到了谷歌 Chrome 时代，它用的也是 WebKit，为了吃到 Safari 的待遇，其 User-Agent 变成了这种奇葩组合：&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Mozilla/5.0 (...) AppleWebKit/... (KHTML, like Gecko) Chrome/... Safari/...&lt;/code&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;到这时，每个浏览器都在 User-Agent 里堆满了「族谱」：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Chrome 假装是 Safari&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Safari 假装是 KHTML&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;KHTML 假装是 Gecko&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Gecko 假装是 Mozilla&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;而真正的 Mozilla，其实早就不在了。&lt;/p&gt; 
&lt;p&gt;最后结果就是：User-Agent 成了一串「你是谁并不重要，重要的是你要说自己是 Mozilla」的魔性自报家门。&lt;/p&gt; 
&lt;p&gt;也难怪现在的前端开发者一边调试一边吐槽：「我到底在给谁写页面啊？」&lt;/p&gt; 
&lt;p&gt;感兴趣的小伙伴可以点击原文：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwebaim.org%2Fblog%2Fuser-agent-string-history%2F" target="_blank"&gt;https://webaim.org/blog/user-agent-string-history/&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/357071/user-agent-string-history</link>
      <guid isPermaLink="false">https://www.oschina.net/news/357071/user-agent-string-history</guid>
      <pubDate>Sat, 10 May 2025 11:07:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>【直播预告】三步上手鸿蒙开发：工具・能力・进阶</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;依托「一次开发、多端部署」的核心理念，HarmonyOS 的分布式能力正在革新万物互联时代的应用开发范式——从智能家居到移动办公，开发者可高效实现跨终端无缝协同。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;然而，许多开发者仍面临以下问题：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对鸿蒙核心开放能力（如元服务、分布式技术、AI 能力）缺乏系统认知；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对鸿蒙专属开发工具（ArkUI、DevEco Studio）的操作不熟悉；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;缺少从入门到进阶的完整学习路径，难以快速上手实战开发。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;为此，7 月 8 日晚，开源中国 OSCHINA 《数智漫谈》直播栏目聚焦「工具 · 能力 · 进阶」三大模块，邀请三位鸿蒙生态专家，通过场景化演示与案例拆解，帮助开发者高效掌握鸿蒙应用开发的核心技能，抓住万物互联时代的创新机遇。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;直播主题：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;三步上手鸿蒙开发：工具 · 能力 · 进阶&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;平台：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;视频号「OSC 开源社区」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;时间：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;7 月 8 日（周二） 19:00-20:40&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;img height="495" src="https://oscimg.oschina.net/oscnet/up-0cec6a2cf81222917368850d2b811addc01.jpg" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h4_1"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;🔥 直播核心看点抢先揭秘：&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;&lt;span&gt;&lt;span&gt;分享主题 1：解锁鸿蒙核心能力，打造跨端智能应用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;&lt;span&gt;&lt;span&gt;鸿蒙操作系统以「分布式架构」为核心，打破设备边界，实现跨终端无缝协同与算力共享，通过元服务、多端统一开发、AI 等能力，重塑万物互联场景体验。本次演讲将解读其技术革新内核，并探讨在各领域的应用实践，揭示鸿蒙如何为生态融合与数字化转型提供新范式。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;&lt;span&gt;&lt;span&gt;分享主题 2：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;DevEco Studio：从零到一搭建鸿蒙应用&lt;/strong&gt;&lt;br&gt; &amp;nbsp;本演讲以开发者视角系统性解析鸿蒙应用开发全流程：从 DevEco Studio 环境配置与真机调试技巧，到 ArkUI 声明式开发范式的核心实践（状态管理、组件化开发），并结合跨设备联调、卡片服务等典型场景，直击多端适配与调试中的高频问题，提供华为 HDE 总结的实战解决方案，助力开发者快速构建高质量鸿蒙应用。&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;&lt;span&gt;&lt;span&gt;分享主题 3：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;从学习到实战：鸿蒙开发者成长指南&lt;/strong&gt;&lt;br&gt; 聚焦鸿蒙开发者从入门到精进的成长路径，解析如何通过高效学习框架与实战经验，掌握分布式开发、多端协同等核心技术，跨越「单一设备」到「场景化创新」的鸿沟。内容涵盖开发工具链使用、典型场景案例拆解及生态机遇洞察，助力开发者在万物互联时代抢占技术先机，实现从技能提升到价值落地的闭环。&lt;/p&gt; 
&lt;span id="OSC_h4_2"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;👨‍💻 重磅嘉宾阵容：&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;姚圣伟，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;华为云 HCDE、鸿蒙应用认证开发者、微软 Insider Dev Tour China、.Net Conf China 讲师、中科院开源之夏优秀导师、升腾 CANN 训练营优秀开发者、腾讯腾源会开源摘星 100 人，天津敏捷社区核心组织者，中国 DevOps 社区理事会成员。现从事信创、电子政务、人工智能、云开发平台等领域的设计、研发工作。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;张一弛，&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;华为开发者专家（HDE）、湖南长沙虚拟盒子鸿蒙架构师、鸿蒙兔习惯 APP 作者、欢友社交应用，出境元服务架构师。多年移动端开发经验，专注于 IM 领域，目前主要从事鸿蒙元服务相关工作。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;祝欣蓉，&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;上海杉达学院副教授，华为开发者专家（HDE），HarmonyOS 应用开发高级工程师、华为路由交换高级网络工程师、华为大数据高级工程师、华为 HDG 上海核心组成员，曾担任丹阳市委网信办网络安全顾问，主要研究方向：鸿蒙移动应用开发，OpenHarmony 软硬协同开发，企业级项目开发，曾主持横向课题 1 项，教育部产学合作协同育人项目 2 项，市级重点课程建设 1 门，校级重点课题 4 项，出版教材 3 本。曾任教课程：鸿蒙移动应用开发，HarmonyOS 软硬协同创新实践，Java Web 开发技术，数据挖掘技术与应用，组网技术，园区网络安全技术等课程。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;🚀 立即行动，开启你的鸿蒙开发进阶之旅！&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;📅 直播时间：2025 年 7 月 8 日 (周二) 19:00 - 20:40&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;📍 直播平台：视频号搜索【OSC 开源社区】&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;👉 现在预约直播，开播不错过！&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;img height="660" src="https://oscimg.oschina.net/oscnet/up-a2420114f6a13a893712842053fb7fce6ef.jpg" width="400" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;《数智漫谈》直播栏目介绍&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;《数智漫谈》是开源中国推出的一档直播栏目，每月 1 期，已推出 22 期。以「深度对话、多元视角、前沿洞察」为核心理念，聚焦 IT 技术、开源治理、行业趋势与创新实践，通过轻松互动形式搭建开源领域的思想交流平台。区别于传统技术直播的单向输出，突出「围坐畅聊」的互动感和思想交锋的张力，打造开源领域的「圆桌派」。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;有兴趣的朋友，可以联系我~&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img height="537" src="https://oscimg.oschina.net/oscnet/up-4dd54c1b0b817689ceefa15aa66d79cfae8.png" width="400" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/3859945/blog/18635616</link>
      <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/18635616</guid>
      <pubDate>Sat, 10 May 2025 10:32:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>云原生周刊：Argo CD v3.1 正式发布</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;h2&gt;开源项目推荐&lt;/h2&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkubewall%2Fkubewall" target="_blank"&gt;Kubewall&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Kubewall 是一个轻量级的开源 Kubernetes 仪表盘，支持多集群管理，主打单二进制部署和浏览器访问，提供实时资源监控、YAML 编辑、拓扑视图、日志查看等功能。它使用 Go 与 React 构建，支持通过 Docker、Helm、Homebrew 等多种方式安装，适合追求简洁、高效、多环境统一管理体验的开发者与运维人员。项目活跃迭代，是 Lens、Headlamp 等重量级工具的轻量替代方案。&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkapicorp%2Fkapitan" target="_blank"&gt;Kapitan&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Kapitan 是 Kapicorp 开发的一个开源、以 Python 为基础，的高级配置管理工具，通过，层级化 inventory（YAML）驱动、多种模板引擎（如 Jinja、Jsonnet、Helm、Kadet）和原生秘密管理，帮助用户生成 Kubernetes、Terraform、脚本、文档等多环境、一致且可追踪的配置，适合平台工程／GitOps 流程，且项目活跃、使用 Apache 2.0 许可。&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgefyrahq%2Fgefyra" target="_blank"&gt;Gefyra&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Gefyra 是一个开源工具，旨在将本地开发环境无缝连接到 Kubernetes 集群中，实现代码热更新和快速迭代。它通过创建加密网络桥接（基于 WireGuard）、代理流量并复用集群资源，让开发者无需每次更改都执行构建、推送和部署流程。支持 Docker、macOS、Windows 和 Linux，可通过命令行或 GUI 操作，广泛适用于微服务、本地调试、端到端测试等场景，极大提升了云原生开发效率。&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkube-burner%2Fkube-burner" target="_blank"&gt;Kube-burner&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Kube‑burner 是一个用 Go 语言开发的开源 Kubernetes 性能与扩展测试编排框架，它可以按用户定义大规模创建、删除、更新 Kubernetes 资源，同时集成 Prometheus 度量、索引、告警功能，用于评估集群的性能瓶颈和扩展极限。&lt;/p&gt; 
&lt;h2&gt;文章推荐&lt;/h2&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloudnativenow.com%2Fcontributed-content%2Fadvanced-devops-for-ai-continuous-delivery-of-models-using-jenkins-and-docker%2F" target="_blank"&gt;基于 Jenkins 与 Docker 的 AI 模型持续交付实战：构建高效 MLOps 流程&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;本文介绍了如何通过结合 Jenkins 和 Docker 实现 AI 模型的高级 DevOps（开发运维）流程，重点在于模型的持续交付（CD）。作者详细讲解了从模型训练、容器化、测试、部署到上线的自动化流程，展示了如何构建一个高效、可重复的 MLOps（机器学习运维）管道。通过这种方式，团队可以更快速、稳定地将 AI 模型部署到生产环境中，加速从开发到业务落地的过程。&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cncf.io%2Fblog%2F2025%2F06%2F09%2Fgitops-in-2025-from-old-school-updates-to-the-modern-way%2F%3Fsessionid%3D-1595116295" target="_blank"&gt;GitOps 2025：从传统部署到自动化运维新时代&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;在 2025 年，GitOps 已从一种新兴理念发展为管理现代应用程序的基础标准，特别是在 Kubernetes 环境中。它通过将 Git 作为系统配置的唯一真实来源，结合自动化代理持续应用这些配置，实现了自动化、一致性和可追溯性，从而简化了云原生软件运维的复杂性。GitOps 的核心原则包括声明式配置、Git 作为唯一配置来源、通过 Pull/Merge 请求进行更改以及由代理持续进行环境同步。主要工具如 Argo CD 和 Flux CD 已成为主流选择，分别适用于需要强大 UI 和模块化灵活性的场景。&lt;/p&gt; 
&lt;p&gt;尽管 GitOps 的采用带来了诸多优势，如更快的发布、更安全的操作和更容易的回滚，但也面临着学习曲线陡峭、工具碎片化和文化转变等挑战。总体而言，GitOps 正在成为 DevOps 实践的关键组成部分，推动软件交付的自动化和可靠性。&lt;/p&gt; 
&lt;h2&gt;云原生动态&lt;/h2&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkubeedge%2Fkubeedge%2Fblob%2Fmaster%2FCHANGELOG%2FCHANGELOG-1.21.md" target="_blank"&gt;KubeEdge 1.21 版本发布&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;KubeEdge 1.21 版本的更新日志展示了多个关键改进，包括云端和边缘组件的功能增强、系统稳定性优化以及 bug 修复。此版本引入了更灵活的 CRI 支持、增强的 EdgeMesh 服务治理能力和更完善的安全机制，同时提升了 DevOps 体验和兼容性。整体来看，1.21 版本进一步强化了边缘计算场景下的可扩展性与可靠性。&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.argoproj.io%2Fannouncing-argo-cd-v3-1-f4389bc783c8" target="_blank"&gt;Argo CD v3.1 正式发布&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;继 v3.0「轻量但强大」的发布奠定基础后，Argo CD v3.1 带来了 v3 系列的首批重大更新。新版本支持 OCI 镜像作为应用源，引入 CLI 插件机制、Hydrator 架构更新，以及 UI 的多项可用性提升。除了新功能，v3.1 还修复了大量安全漏洞与已知问题，显著提升了系统稳定性、扩展性和多集群支持能力。通过更快的同步性能、更细粒度的权限控制和增强的 SSO 机制，Argo CD v3.1 为 DevOps 团队打造了更高效、安全、可持续的 Kubernetes 应用交付体验。&lt;/p&gt; 
&lt;h3&gt;关于 KubeSphere&lt;/h3&gt; 
&lt;p&gt;KubeSphere （&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkubesphere.io%EF%BC%89%E6%98%AF%E5%9C%A8" target="_blank"&gt;https://kubesphere.io）是在&lt;/a&gt; Kubernetes 之上构建的开源容器平台，提供全栈的 IT 自动化运维的能力，简化企业的 DevOps 工作流。&lt;/p&gt; 
&lt;p&gt;KubeSphere 已被 Aqara 智能家居、本来生活、东方通信、微宏科技、东软、华云、新浪、三一重工、华夏银行、四川航空、国药集团、微众银行、紫金保险、去哪儿网、中通、中国人民银行、中国银行、中国人保寿险、中国太平保险、中国移动、中国联通、中国电信、天翼云、中移金科、Radore、ZaloPay 等海内外数万家企业采用。KubeSphere 提供了开发者友好的向导式操作界面和丰富的企业级功能，包括 Kubernetes 多云与多集群管理、DevOps (CI/CD)、应用生命周期管理、边缘计算、微服务治理 (Service Mesh)、多租户管理、可观测性、存储与网络管理、GPU support 等功能，帮助企业快速构建一个强大和功能丰富的容器云平台。 &amp;gt; 本文由博客一文多发平台 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank"&gt;OpenWrite&lt;/a&gt; 发布！&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4197945/blog/18635610</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/18635610</guid>
      <pubDate>Sat, 10 May 2025 10:19:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>「开源惠全球·集智创未来」——2025 全球数字经济大会全球开源创新发展论坛即将召开</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;img height="720" src="https://static.oschina.net/uploads/space/2025/0624/175355_3VoR_2720166.png" width="1279" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;开源是数字时代以开放、共建、共享、共治为主要特征的新型生产方式，已经成为全球信息技术产业发展的重要协作方式和生态构建形式。为抢抓开源繁荣发展机遇，促进全球数字协作，助力北京市数字友好城市建设，全球开源创新发展论坛（以下简称「论坛」）将于 7 月 5 日上午在北京国家会议中心举行。论坛由全球数字经济大会组委会主办，国家工业信息安全发展研究中心、开源中国、CNCF 基金会、国际内源基金会联合承办。&lt;/p&gt; 
&lt;p&gt;本次论坛以「开源惠全球·集智创未来」为主题，旨在搭建国际开源交流合作平台，广泛邀请国内外开源领域知名专家学者，顶尖开源组织、先锋开源企业、开源社区代表等齐聚一堂，聚焦全球开源技术的最新发展趋势，探讨优质开源社区培育路径，共商开源区域协作，推动形成开源发展合力，充分释放数字经济的放大、叠加、倍增效应，助力全球数字经济高质量发展。本次论坛有以下亮点：&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#d35400"&gt;&lt;strong&gt;&lt;strong&gt;亮点一：全球协作，国际开源创新聚合力&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;论坛邀请开源中国、CNCF 基金会、国际内源基金会等国内外知名开源组织联合承办，广泛汇聚 Apache 基金会、Linux 基金会、FOSSASIA（亚洲开源）、华为、平凯星辰、蚂蚁等开源机构，重磅嘉宾云集，共同推动国内外开源组织、社区加强互动合作、共享技术成果，共筑全球开源发展未来。&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#d35400"&gt;&lt;strong&gt;&lt;strong&gt;亮点二：开源全景，多元视角汇聚发展之声&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;论坛以「全球视野、本土创新」双轮驱动，邀请国内外开源代表围绕 AI 驱动下的开源生态建设、全球开源社区文化与发展前沿动态、全球开源明星项目中的「中国声音」等领域进行主题演讲，分享开源托管平台、开源基金会、国际开源协作、AI 智能体开源、OSPO 等方面的前沿视角与经验，确保内容专业性高、权威性强。&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#d35400"&gt;&lt;strong&gt;&lt;strong&gt;亮点三：紧扣前沿，重磅发布 AI 开源北京宣言&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;论坛紧跟行业前沿趋势，抢抓新一代人工智能发展机遇，深入探索大模型时代开源发展路径。期间，中心将联合 Linux 基金会、CNCF 基金会、Apache 基金会、国际内源基金会等国际组织，以及华为、开源中国等国内企业，联合发起「人工智能开源协作倡议—北京宣言」，展现 AI 力量，携手推动开源 AI 普惠发展。&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#d35400"&gt;&lt;strong&gt;&lt;strong&gt;亮点四：前瞻布局，首次发布开源项目白名单&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;论坛将首次发布「中国优秀开源项目白名单」，该名单由十余家「产学研用金」单位联合构建开源项目成长潜力分析预测模型，研究提出开源项目发展评价指标体系，形成优秀开源项目白名单，指导和促进开源项目健康发展，并为其他项目提供可借鉴范例，进一步推动开源生态繁荣发展。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;论坛议程大致如下：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="772" src="https://static.oschina.net/uploads/space/2025/0624/175503_n4LF_2720166.png" width="720" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;2025 全球数字经济大会—全球开源创新发展论坛即将启幕，论坛内容丰富、形式多样，欢迎扫描以下二维码报名参会。&lt;/p&gt; 
&lt;p&gt;&lt;img height="300" src="https://static.oschina.net/uploads/space/2025/0624/175514_O8qv_2720166.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;（报名方式：扫描上方二维码，完成个人信息注册后，下滑参会日程，选择&lt;strong&gt;&lt;strong&gt;7 月 5 日上午「全球开源创新发展论坛」&lt;/strong&gt;&lt;/strong&gt;，点击申请报名，您将收到【收到报名】短信通知，请等待审核。）&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/357056</link>
      <guid isPermaLink="false">https://www.oschina.net/news/357056</guid>
      <pubDate>Sat, 10 May 2025 09:56:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>百度日志中台前端重构实践</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;日志中台是百度内部针对打点数据的全生命周期管理平台，作为公司日志数据的唯一入口，承担以下核心职能：1.功能覆盖：提供从数据采集、传输、存储到查询分析的一站式服务，支持产品运营分析、研发性能监控、运维管理等多元场景。2.业务赋能：通过标准化流程实现用户行为日志的埋点申请、审批及退场管理，助力 APP 端、服务端等业务线挖掘数据价值。3.生态协同：与大数据平台、推荐中台、性能平台深度联动，避免重复建设，提升资源利用率，强化业务中台能力。&lt;/p&gt; 
&lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
&lt;h1&gt;01 项目背景&lt;/h1&gt; 
&lt;p&gt;2020 年初启动的日志中台前端项目，随着业务发展逐渐暴露出严重问题。整个前端项目技术负债多，有 500 多个文件，共 11 万多行源码。项目已经变得老旧而臃肿。面临线上 bug 频发、排查问题效率低下等各种问题，陈旧的技术栈与低效的流程也制约了团队的生产力。因此需进行全面全面重构，通过基于业务导向的架构优化、开发测试流程规范化，从而提升前端开发效率，使项目具备长期稳健发展的技术基础。本文将重点介绍我在重构项目过程中的一些实践经验。&lt;/p&gt; 
&lt;span id="OSC_h2_2"&gt;&lt;/span&gt; 
&lt;h2&gt;02 前端项目面临的问题&lt;/h2&gt; 
&lt;p&gt;先介绍下日志中台前端项目的基本情况&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;核心框架：Vue 2.6 + Vuex 3.1.1 + VueRouter 3.0.6&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;UI 组件库：ElementUI 2.15.13&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;构建工具：@vue/cli-service 3.11.0（基于 Webpack 4）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;部署平台：测试环境（FIS3）、生产环境（Tower）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下面我将从 4 个维度来分析下前端项目所面临的各种问题。&lt;/p&gt; 
&lt;span id="OSC_h2_3"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.1 代码质量&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;由于项目没有接入代码格式化 prettier 和，代码规范检查 eslint，导致项目的代码质量堪忧，各种各样的代码风格并存。在开发需求过程中，各自的编码风格不一致，维护时需额外适应时间，甚至由此引发线上问题。&lt;/p&gt; 
&lt;span id="OSC_h2_4"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.2 基础建设&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 代码臃肿，维护困难&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;全项目 500+源文件中，30+文件超 1000 行，5+文件超 2000 行，最大文件达 5000 行。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;巨型文件导致：&lt;/p&gt; &lt;p&gt;IDE 卡顿（Mac 开发时频繁卡住）。&lt;/p&gt; &lt;p&gt;热更新失效（&amp;gt;2s 延迟，大文件需手动刷新浏览器）。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 技术栈陈旧&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;仍使用已停止维护的&lt;code&gt;vue-cli&lt;/code&gt;（Webpack 4 时代工具链），与现代构建工具（Vite、Webpack 5）存在代差。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_5"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.3 构建和部署&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;测试环境&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;测试环境的部署采用的是&lt;/strong&gt;&lt;/strong&gt; &lt;strong&gt;&lt;strong&gt;fis3&lt;/strong&gt;&lt;/strong&gt;，这是百度 FE 团队早期自研的集构建、部署于一身前端构建工具，日志中台项目使用其部署测试环境的功能。具体流程就是在开发者本地执行打包操作，然后将打包产物通过 fix3 推送到后端的服务器上去，替换掉之前的打包产物，从而实现部署新版本。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;这种方式存在诸多问题：&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;本地构建依赖不一致，易引发环境差异问题。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;无 CDN 缓存，静态资源直推后端服务器。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;无版本管理，存在代码覆盖风险。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;FIS3 已停止维护，社区无支持。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;本质问题&lt;/strong&gt;&lt;/strong&gt;：前后端未完全分离，违背当前主流协作模式。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;生产环境&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;生产环境的部署则采用的是 Tower 平台，这是百度内部的线上部署平台，通过平台的形式将 master 分支的代码在服务器上编译构建，将打包后的产物推送到线上环境对应的服务器上，从而实现完整的上线流程。这种上线方式同样存在诸多不足：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;上线耗时长达 30 分钟，无增量构建能力。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;多服务器部署时存在「漂移现象」（请求路由不一致）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;操作流程复杂，平台限制多（如回滚困难）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;仍缺失 CDN 加速，影响页面加载性能。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_6"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.4 优质组件&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;在 Vue 技术栈中，模块和组件的模糊概念，导致很多开发者无法区分其区别。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 组件与模块概念混淆&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;src/components&lt;/code&gt;目录下堆积 40+文件夹，但 90% 为一次性业务模块（如 5 个重复封装的 Table 组件），缺乏真正的复用价值。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 基础建设缺失&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;无通用业务组件库，开发依赖 Element UI 原始组件。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;高频逻辑（如表单校验、数据请求）需重复实现，通过「复制粘贴」开发，导致代码冗余和一致性风险。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h1_7"&gt;&lt;/span&gt; 
&lt;h1&gt;03 全面重构拆分&lt;/h1&gt; 
&lt;p&gt;下面是针对以上项目中的各个痛点的重构具体手段。&lt;/p&gt; 
&lt;span id="OSC_h2_8"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.1 接入工程化&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;前端项目若缺乏统一的代码规范和质量控制，随着业务增长，代码可维护性会急剧下降，最终导致开发效率低下、线上问题频发。因此，引入业界成熟的工程化方案是提升代码质量的关键。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-44faf28db07e05e98073becb5657960b557.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h4_9"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;strong&gt;工程化改造步骤&lt;/strong&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 清理冗余配置&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;移除项目中无用的、过时的配置（如废弃的&lt;code&gt;.babelrc&lt;/code&gt;、冗余的&lt;code&gt;webpack&lt;/code&gt;配置等），减少干扰项。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 统一基础配置文件&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;在项目根目录下添加必要的配置文件，确保团队开发环境一致：&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;.vscode/settings.json&lt;/code&gt;（统一 VSCode 编辑器配置）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;.editorconfig&lt;/code&gt;（统一缩进、换行等基础格式）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;.npmrc&lt;/code&gt;（设置为百度 npm 镜像）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;.browserslistrc&lt;/code&gt;（明确目标浏览器兼容范围）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3. 接入代码规范工具&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;Prettier&lt;/strong&gt;&lt;/strong&gt;：自动格式化代码，统一风格（如缩进、引号、分号等）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;ESLint&lt;/strong&gt;&lt;/strong&gt;：检查 JavaScript/Vue 代码质量，避免常见错误。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;Stylelint&lt;/strong&gt;&lt;/strong&gt;（可选）：规范 CSS/Less 代码风格。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;4. 优化开发体验&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;推荐安装必要的 VSCode 插件（如 ESLint、Prettier、Volar 等），提升开发效率。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;5. 提交时增量强制校验（Git Hooks）&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;接入&lt;code&gt;husky&lt;/code&gt;+&lt;code&gt;lint-staged&lt;/code&gt;，在&lt;code&gt;git commit&lt;/code&gt;时自动执行代码检查，阻止不合规代码提交。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;strong&gt;配置参考&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;VSCode 统一配置&lt;/p&gt; &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fshuoshubao%2Fbg00go%2Fwc87bknptk3lomed%23NStKP" target="_blank"&gt;https://www.yuque.com/shuoshubao/bg00go/wc87bknptk3lomed#NStKP&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;工程化配置方案 https://www.yuque.com/shuoshubao/bg00go/wc87bknptk3lomed#SJTr2&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;span id="OSC_h4_10"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;strong&gt;历史代码修复策略&lt;/strong&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;原则：「自动修复优先，手动修复补充」，避免无限制添加&lt;code&gt;eslint-disable&lt;/code&gt;或&lt;code&gt;ignore&lt;/code&gt;规则，导致规范形同虚设。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;具体执行步骤&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 自动格式化（Prettier）&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. ESLint 自动修复&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 分析剩余问题&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;使用&lt;code&gt;eslint-formatter-html&lt;/code&gt;生成报告，评估剩余问题。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;调整 ESLint 规则（如放宽部分历史代码限制），拆解为多个小任务手动修复。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;4. 回归测试&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;联合熟悉业务的同学进行全量测试，确保修复过程不影响系统功能。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h4_11"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;strong&gt;效果验证&lt;/strong&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;代码风格统一&lt;/strong&gt;&lt;/strong&gt;：所有新提交的代码均符合规范，减少风格争议。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;错误率下降&lt;/strong&gt;&lt;/strong&gt;：低级语法错误、边界条件导致的 JS 报错大幅减少。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;开发体验提升&lt;/strong&gt;&lt;/strong&gt;：IDE 卡顿减少（格式化后代码更简洁），热更新效率提高。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_12"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.2 升级基建&lt;/strong&gt;&lt;/h2&gt; 
&lt;span id="OSC_h3_13"&gt;&lt;/span&gt; 
&lt;h3&gt;3.2.1 源码优化与依赖治理&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;问题现状&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;p&gt;项目存在大量技术债务，包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;冗余资源（未压缩图片约 2M）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;无效依赖（22 个未使用的 npm 包）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;混合模块规范（require/import 混用）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;废弃技术栈（如已停止维护的 iView）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;优化措施&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 资源优化&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;使用基于 Tinypng 封装的工具批量压缩图片，体积减少 65%&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;清理已下架页面的遗留代码（约 15 个路由）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 依赖治理&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;移除 22 个无用依赖&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;统一使用 ES Module 规范（手动替换 require 为 import）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 技术栈升级&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;替换老旧组件库：vue-json-diff、vue-code-diff、vue-codemirror 替换为 monaco-editor&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_14"&gt;&lt;/span&gt; 
&lt;h3&gt;3.2.2 &lt;strong&gt;&lt;strong&gt;构建相关&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;相对于以往的 Webpack 或者 Vue CLI，存在开发服务器启动慢（平均 45 秒）、热更新延迟高（2.5 秒）、构建流程复杂（需 Babel 转译 ES5）。&lt;/p&gt; 
&lt;p&gt;Vite 配置详见：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fshuoshubao%2Fbg00go%2Fwc87bknptk3lomed%23wyx0p" target="_blank"&gt;https://www.yuque.com/shuoshubao/bg00go/wc87bknptk3lomed#wyx0p&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;接入 Vite 后，低配置电脑同学开发时的平均热更新时间由 2.5 秒缩短到 100 毫秒。在单个需求完成耗时方面，由之前的 4.2 人天缩减到 3.4 人天，综合人效提高&lt;strong&gt;&lt;strong&gt;19%&lt;/strong&gt;&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;另一方面，由于 Vue CLI 是基于 babel 将 esnext 代码转成 es5，而 Vite 基于 esbuild 不需要进行降级编译。在将 Vite 的配置 build.target 设置为 ['chrome100'] 后，甚至连非常新的 esnext 语法糖都不需要转换，浏览器直接可以使用前端的源码，极大的利用了 esnext 带来的开发便利，而不需要关注 Babel 的版本以及各种依赖包和复杂的配置。&lt;/p&gt; 
&lt;span id="OSC_h3_15"&gt;&lt;/span&gt; 
&lt;h3&gt;3.2.3 &lt;strong&gt;&lt;strong&gt;部署相关&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;百度内部主流的部署平台是 &lt;strong&gt;&lt;strong&gt;Fcnap&lt;/strong&gt;&lt;/strong&gt;。这是一个类似 Vercel 的前端一站式部署平台，基于 git 分支，只要检测到分支变动，就会触发自动构建和部署。&lt;/p&gt; 
&lt;p&gt;只需配置好各个测试环境以及生产环境的基本信息，后续在需要开发中，只需要将分支和测试环境关联起来，就可以达到随时提交代码随时部署的效果；上线过程更是丝滑，只需要将代码合到 master 分支，就会自动上线。&lt;/p&gt; 
&lt;p&gt;将 fis3 以及 Tower 迁移到 Fcnap 后有如下优势：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;测试和生成环境使用一套部署逻辑&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;上线部署耗时由 30 分钟缩减至 2 分钟&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;提供 cdn 功能，每次上线后增量更新的静态资源只有 500kb&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;上线期间访问系统不会出现白屏现象&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;上线过程对用户无任何影响&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_16"&gt;&lt;/span&gt; 
&lt;h3&gt;3.2.4 接口调试&lt;/h3&gt; 
&lt;span id="OSC_h4_17"&gt;&lt;/span&gt; 
&lt;h4&gt;传统开发模式的痛点&lt;/h4&gt; 
&lt;p&gt;在传统前后端协作中，存在典型的"接口依赖症"：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 开发阻塞&lt;/strong&gt;&lt;/strong&gt;：前端必须等待后端接口 Ready 才能开始调试&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 效率低下&lt;/strong&gt;&lt;/strong&gt;：联调阶段频繁出现接口变更，导致重复返工&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 数据不可控&lt;/strong&gt;&lt;/strong&gt;：依赖真实测试环境数据，难以覆盖边界场景&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;数据表明：在接口未就绪阶段，前端开发效率会下降 60% 以上&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;span id="OSC_h4_18"&gt;&lt;/span&gt; 
&lt;h4&gt;真正的"前后端分离"实践&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;核心原则&lt;/strong&gt;&lt;/strong&gt;：开发阶段解耦，联调阶段对接&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 规范先行&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;后端通过 YAPI 等平台提供完整的接口文档&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;包含：请求方法、参数结构、响应体示例、状态码定义&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. Mock 数据要求&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;真实业务数据（非简单根据接口文档生成各种随机数据）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;可自定义异常场景（404， 502 等真实场景还原）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持动态响应（根据参数返回不同数据）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;针对这个开发环节，我们也基于 Vite 实现了一个非常好用的插件：vite-plugin-mock，用于提升开发效率。整体的设计如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-3eb5ab12f6a4aae3eff18b059102be05cc9.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;相比于传统的 mock 方案，vite-plugin-mock 在开发体验、数据维护上有更好的开发体验。&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;特性&lt;/th&gt; 
   &lt;th&gt;传统 Mock 方案&lt;/th&gt; 
   &lt;th&gt;vite-plugin-mock&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;数据真实性&lt;/td&gt; 
   &lt;td&gt;随机生成，不可用&lt;/td&gt; 
   &lt;td&gt;可在真实接口数据上任意修改&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;开发体验&lt;/td&gt; 
   &lt;td&gt;需要启动 Mock 服务&lt;/td&gt; 
   &lt;td&gt;配置简单，可随时修改数据&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;联调切换&lt;/td&gt; 
   &lt;td&gt;手动修改请求地址&lt;/td&gt; 
   &lt;td&gt;自动代理无缝切换&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;数据维护&lt;/td&gt; 
   &lt;td&gt;独立维护 Mock 数据&lt;/td&gt; 
   &lt;td&gt;数据存放在本地，每个人都可维护单独的数据&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;span id="OSC_h2_19"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.3 &lt;strong&gt;构建体积优化&lt;/strong&gt;&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;这一部分主要从以下三个技术方案着手优化，再配合其他人工优化手段，打包体积由开始的 14M 优化到 1.8M，接入 cdn 功能后，则仅有 500kb。&lt;/p&gt; 
&lt;span id="OSC_h3_20"&gt;&lt;/span&gt; 
&lt;h3&gt;3.3.1 element-ui&lt;/h3&gt; 
&lt;p&gt;fork element-ui 源码, 采用 rollup 进行打包，优化部分源码，修复部分 bug，重新发包为 @baidu-log/element-ui&lt;/p&gt; 
&lt;p&gt;这一步骤，js 体积从 1.2M 优化到 500kb。并结合下面 externals 功能，进一步使用 cdn 功能缓存这部分文件体积。&lt;/p&gt; 
&lt;span id="OSC_h3_21"&gt;&lt;/span&gt; 
&lt;h3&gt;3.3.2 引入 externals 功能&lt;/h3&gt; 
&lt;p&gt;将基础包通过 cdn 的形式在 index.html 模板中引入其 umd 格式的文件，从而避免打包这部分内容。这部分会用到 cdn 的缓存功能，会节约掉大约 2M 的体积。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;vite-plugin-externals&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;这个是开源的 vite 插件，配置也比较简单，详见配置：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fshuoshubao%2Fbg00go%2Fwc87bknptk3lomed%23LiR2X" target="_blank"&gt;https://www.yuque.com/shuoshubao/bg00go/wc87bknptk3lomed#LiR2X&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;vite-plugin-assets&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;这个是为了配合上面 vite-plugin-externals 插件，将对应的 externals 的 npm 包对应的 umd 文件插入到模板中，代码详见：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fshuoshubao%2Fbg00go%2Fwc87bknptk3lomed%23xts88" target="_blank"&gt;https://www.yuque.com/shuoshubao/bg00go/wc87bknptk3lomed#xts88&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;为什么不直接写在 index.html 里呢？因为像 vue 和 react 这样的框架，在开发时都提供了对应的开发调试工具：dev-tools。而使用 dev-tools 则需要提供对应的 &lt;strong&gt;&lt;strong&gt;dist/vue.js&lt;/strong&gt;&lt;/strong&gt;，而 react 对应的则是 &lt;strong&gt;&lt;strong&gt;react.development.js&lt;/strong&gt;&lt;/strong&gt;。&lt;/p&gt; 
&lt;span id="OSC_h3_22"&gt;&lt;/span&gt; 
&lt;h3&gt;3.3.3 大包的特殊处理&lt;/h3&gt; 
&lt;p&gt;1. monaco-editor&lt;/p&gt; 
&lt;p&gt;项目中用到了 monaco-editor 这个编辑器组件，直接打包将会非常大，有 10M 以上的体积。根据官方提供的方案即可进行如下封装，其中 cdn 地址由百度的 npm 镜像服务提供支持。&lt;/p&gt; 
&lt;p&gt;代码详见：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fshuoshubao%2Fbg00go%2Fwc87bknptk3lomed%23gozcq" target="_blank"&gt;https://www.yuque.com/shuoshubao/bg00go/wc87bknptk3lomed#gozcq&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;2. xlsx, fabric 等&lt;/p&gt; 
&lt;p&gt;在项目中用到了 xlsx, fabric, markdown-it, echarts, &lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdraw.io" target="_blank"&gt;draw.io&lt;/a&gt; 这几个体积很大的包，但又不属于很基础的包，只有少部分页面的某个功能点才会用到。针对这些包采用从 cdn 异步加载其 umd 包的形式来引入，而不是通过 import npm 包的形式。&lt;/p&gt; 
&lt;p&gt;代码详见：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fshuoshubao%2Fbg00go%2Fwc87bknptk3lomed%23rEBee" target="_blank"&gt;https://www.yuque.com/shuoshubao/bg00go/wc87bknptk3lomed#rEBee&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;以上两种优化方案，与常见的动态引入方案（dynamic import）是有很大区别的，dynamic import 是通过编译工具将对应的 npm 包打包成一个独立的 chunk，然后在使用的时候再通过 loadScript 方式引入。这种问题在于文件的缓存，一是 chunk 可能会变，二是像 Vercel 这种平台，每次发布都是一个全新的 s3 bucket，上线后缓存功能也就失效了。而上述这种方案，则利用 npm 镜像服务，每次都访问固定的 cdn 地址，也就达到了 cdn 的缓存目的了。&lt;/p&gt; 
&lt;span id="OSC_h2_23"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.4 建设组件库&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;鉴于项目没有优质组件的背景，从零到一搭建了组件库，组件库主要包含以下内容：&lt;/p&gt; 
&lt;p&gt;1. 基于 Vuepress 建设高质量组件库文档&lt;/p&gt; 
&lt;p&gt;2. 迁移 element-ui 文档，并修复其中大量劣质示例代码&lt;/p&gt; 
&lt;p&gt;3. 采用 Vitest 编写工具方法的测试用例&lt;/p&gt; 
&lt;p&gt;4. 提供 9 个高频优质通用组件，10 个业务组件&lt;/p&gt; 
&lt;p&gt;组件库文档：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogsfe.vercel.app%2F" target="_blank"&gt;https://logsfe.vercel.app/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;文档分为以下几大模块&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;优质组件：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogsfe.vercel.app%2Fcomponents%2FTable%2F" target="_blank"&gt;https://logsfe.vercel.app/components/Table/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;组件库里的方法：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogsfe.vercel.app%2Futils.html" target="_blank"&gt;https://logsfe.vercel.app/utils.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;@nbfe/tools 工具库方法： &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogsfe.vercel.app%2Ftools%2Fdate.html" target="_blank"&gt;https://logsfe.vercel.app/tools/date.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ElementUI 文档：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogsfe.vercel.app%2Felement%2Ficon.html" target="_blank"&gt;https://logsfe.vercel.app/element/icon.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;前端定制的开发规范：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogsfe.vercel.app%2Fcontribute%2F" target="_blank"&gt;https://logsfe.vercel.app/contribute/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;实际效果：组件库中的组件在项目中目前已被使用 240 次，用户使用体验良好。&lt;/p&gt; 
&lt;span id="OSC_h3_24"&gt;&lt;/span&gt; 
&lt;h3&gt;3.4.1 通用组件&lt;/h3&gt; 
&lt;p&gt;基于大量的 B 端系统开发经验，提炼出配置化表格和配置化表单组件，满足项目中 90% 的开发场景，通过重构部分页面后比较分析，在写对应模块时，能减少 40% 的代码。&lt;/p&gt; 
&lt;p&gt;通用组件均与业务解耦，设计优雅的 api，并提供大量示例。组件库里只提供少量的优质组件，严格把控每一行提交的代码，并为组件中的工具函数提供符合 JSDoc-style 规范的注释，且通过 Vitest 来编写单元测试。&lt;/p&gt; 
&lt;span id="OSC_h3_25"&gt;&lt;/span&gt; 
&lt;h3&gt;3.4.2 element-ui 文档集成&lt;/h3&gt; 
&lt;p&gt;在实际工作中，发现 element-ui 文档存在很多问题且早已不维护。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;主题与日志中台不符，不利于查看&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;组件默认 size 过大，一页都看不了多少示例&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;右侧没有 toc 功能，不方便快速定位&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;示例很多写法不优雅，以及很多冗余代码被人机的复制到了项目中&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在线调试示例采用的是 codepen 平台，这个平台很慢而且经常挂了&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;基于以上各种问题，将 element-ui 官方的示例 fork 到组件库中，使用和日志中台一样的主题，并修复上述各种问题。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-448a51bef83543cbfa7e0b5a4588348e6b3.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;并使用纯前端来实现了一个完全可用的 codepen 组件使用示例功能。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-10997cf6d1b599250b533a1a538cfa80d94.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_26"&gt;&lt;/span&gt; 
&lt;h3&gt;3.4.3 通用工具库&lt;/h3&gt; 
&lt;p&gt;基于 B 端系统抽象的实用工具方法集合。在组件库中提供优质的说明文档和使用示例。这个已经发布到 npm 上，并在多个公司和团队使用。&lt;/p&gt; 
&lt;p&gt;包括日期处理、数据处理、接口数据格式化、针对 element-ui 的一些实用封装。目前已在项目中被 93 个文件使用 150 次。&lt;/p&gt; 
&lt;p&gt;项目地址：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40nbfe%2Ftools" target="_blank"&gt;https://www.npmjs.com/package/@nbfe/tools&lt;/a&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_27"&gt;&lt;/span&gt; 
&lt;h1&gt;04 总结与展望&lt;/h1&gt; 
&lt;p&gt;在频繁的需求迭代过程中，项目迟早会变成臃肿老旧的样子。当开发体验、开发速度、代码质量、项目可维护性、联调测试体验、线上质量等全方位令人举步维艰的时候，就该发起大规模的全面重构了。对每一项重构技术需要深刻掌握，才能掌握重构的深度和保证重构后的项目质量。另外，还定制了很多开发规范和最佳实践指导，但项目中仍存在大量不符合规范的地方，将在未来继续进行全量修复，直到将一个老旧的项目重构到更接近现代化前端项目的程度。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4939618/blog/18635524</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/18635524</guid>
      <pubDate>Sat, 10 May 2025 07:41:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>curl 之父发文介绍 OpenSSL 分支家族</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;curl 之父近日发表文章&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdaniel.haxx.se%2Fblog%2F2025%2F06%2F23%2Fa-family-of-forks%2F" target="_blank"&gt;介绍&lt;/a&gt;&lt;/u&gt; OpenSSL 分支家族，展示了它们的差异、相似之处，以及支持它们所需的一些见解。&lt;/p&gt; 
&lt;p&gt;译文如下：&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;curl 支持使用 11 种不同的 TLS 库进行编译。其中六个库是 OpenSSL 或其分支。让我向你展示它们的差异、相似之处，以及支持它们所需的一些见解。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;SSLeay&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;这一切都始于 SSLeay。这是我发现的第一个 SSL 库，我们使用这个库在 1998 年春天为 curl 添加了第一个 HTTPS 支持。显然，SSLeay 项目早在 1995 年就已经启动了。&lt;/p&gt; 
&lt;p&gt;那是一个我们还只支持 SSL 的年代；TLS 会在之后才出现。&lt;/p&gt; 
&lt;p&gt;OpenSSL 一直拥有一个古怪、不一致且极其庞大的 API 集（其中一大部分是从 SSLeay 继承而来的），这进一步被稀疏的文档所复杂化，这些文档留给用户去依靠自己的想象力和技能去查阅源代码，以获取最后的细节解答（即使在 2025 年今天也是如此）。在 curl 中，我们经常收到关于如何使用这个库的偶尔问题报告，即使已经过了几十年。 presumably，这同样适用于所有 OpenSSL 用户。&lt;/p&gt; 
&lt;p&gt;OpenSSL 项目经常受到批评，认为他们在几年前升级到版本 3 之后，在性能方面有所疏忽。他们也一直进展缓慢或不愿采用新的 TLS 技术，例如 QUIC 和 ECH。&lt;/p&gt; 
&lt;p&gt;尽管如此，OpenSSL 已经成为一种主导的 TLS 库，尤其是在开源领域。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;LibreSSL&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;回到 Heartbleed 事件时期，LibreSSL 分叉出来并成为独立的项目。他们删除了他们认为不属于库中的功能，创建了自己的 TLS 库 API。几年后，苹果在 macOS 上使用 LibreSSL 提供 curl。他们有一些本地修补，使它&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdaniel.haxx.se%2Fblog%2F2024%2F03%2F08%2Fthe-apple-curl-security-incident-12604%2F" target="_blank"&gt;行为与其他不同&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;LibreSSL 在 QUIC 的支持上落后，不支持 SSLKEYLOGFILE、ECH，而且如今在实现新功能方面似乎比 OpenSSL 更慢。&lt;/p&gt; 
&lt;p&gt;curl 自从创建以来就与 LibreSSL 完美配合。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;BoringSSL&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;在 Heartbleed 事件时期由 Google 分叉出来。&lt;em&gt;Google 为 Google 做的&lt;/em&gt;，他们没有公开发布过，清理了很多原型和变量类型，并在 QUIC API 推动中处于领先地位。总体而言，大多数新的 TLS 发明都已在 BoringSSL 中实现和支持，比其他分叉更早。&lt;/p&gt; 
&lt;p&gt;Google 在 Android 的其他地方也使用这个。&lt;/p&gt; 
&lt;p&gt;curl 从创建以来就与 BoringSSL 完美配合。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;AmiSSL&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;一个为使 OpenSSL 能够在 AmigaOS 上正确编译和运行而制作的 OpenSSL 分支或变种。我对它了解不多，但在这里包含它是为了完整性。它似乎基本上是为 Amiga 系统移植的 OpenSSL。&lt;/p&gt; 
&lt;p&gt;当为 AmigaOS 编译时，curl 也能与 AmiSSL 兼容。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;QuicTLS&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;由于 OpenSSL 延迟响应并拒绝提供 QUIC API，其他分支在 2020 年初期（我尚未看到有人解释原因）采取了行动。微软和 Akamai 分支了 OpenSSL，产生了 &lt;em&gt;QuicTLS&lt;/em&gt;，此后它试图成为一个 &lt;em&gt;轻量级&lt;/em&gt; 的分支，主要只是在与 BoringSSL 和 LibreSSL 支持相同风格的基础上添加 QUIC API。&lt;em&gt;轻量级&lt;/em&gt; 的含义是它们密切跟踪上游开发，并且除了 QUIC API 之外，没有打算在其他方面偏离。&lt;/p&gt; 
&lt;p&gt;在 OpenSSL 3.5 中，他们终于提供了一个与 fork（包括 QuicTLS）提供的 QUIC API 不同的 QUIC API。我认为这促使 QuicTLS 重新考虑其未来的发展方向，但我们仍在等待确切的进展。&lt;/p&gt; 
&lt;p&gt;curl 自从创建以来就与 QuicTLS 完美配合。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;AWS-LC&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;这是由亚马逊维护的一个 BoringSSL 分支。与 BoringSSL 不同的是，他们确实进行了实际的（频繁的）发布，因此看起来像一个项目，即使是非亚马逊用户也可以实际使用和依赖——尽管他们存在的目的是 _维护一个与 AWS 使用的软件和应用程序兼容的安全 libcrypto _。令人惊讶的是，他们维护的不仅仅是「仅仅」 libcrypto。&lt;/p&gt; 
&lt;p&gt;这个分支最近显示出大量的活动，甚至在核心部分也是如此。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.haproxy.com%2Fblog%2Fstate-of-ssl-stacks" target="_blank"&gt;2025 年 5 月由 HAProxy 团队进行的基准测试&lt;/a&gt; 表明，AWS-LC 显著优于 OpenSSL。&lt;/p&gt; 
&lt;p&gt;AWS-LC 提供的 API 与 BoringSSL 的 API 并不完全相同。&lt;/p&gt; 
&lt;p&gt;curl 与 AWS-LC 从 2023 年初开始就配合得非常好。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;家族树&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/img/202506/24145235_ALUZ.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;OpenSSL 分支家族树&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;OpenSSL 分支家族现状&lt;/h2&gt; 
&lt;p&gt;这六个不同的分支各自有其特定的特性、API 和功能，这些在不同版本中也会发生变化。目前我们仍然支持这六个分支，因为人们似乎仍在使用它们，而且维护起来是可行的。&lt;/p&gt; 
&lt;p&gt;我们使用相同的 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl%2Fblob%2Fmaster%2Flib%2Fvtls%2Fopenssl.c" target="_blank"&gt;单个源代码文件&lt;/a&gt; 支持所有这些分支，并通过不断增长的 #ifdef 逻辑来实现。我们通过在 CI 中使用这些分支进行构建验证，尽管只使用了一小部分最近的版本。&lt;/p&gt; 
&lt;p&gt;随着时间的推移，这些分支似乎正在逐渐彼此分离。我认为这还不构成一个问题，但我们当然在监控这种情况，可能在某个时候需要进行一些内部重构以适应这种变化。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;未来&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;我无法预见会发生什么。如果历史是一堂课，我们似乎更倾向于走向更多的分支，而不是更少的分支。但当然，每一位阅读这篇博客文章的读者现在都会思考，所有这些分支所耗费的重复努力以及由此带来的隐含低效性到底有多少。这不仅适用于这些库本身，也适用于像 curl 这样的用户。&lt;/p&gt; 
&lt;p&gt;我认为我们只能等待观察。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/357005/a-family-of-openssl-forks</link>
      <guid isPermaLink="false">https://www.oschina.net/news/357005/a-family-of-openssl-forks</guid>
      <pubDate>Sat, 10 May 2025 06:52:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>MiniMax 上线 AI 音色设计功能</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;MiniMax 稀宇科技&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FSUqhAd54Q15Huq-AQ9EeCA" target="_blank"&gt;宣布&lt;/a&gt;&lt;/u&gt;旗下 MiniMax Audio 上线了「Voice Design 音色设计」功能。&lt;/p&gt; 
&lt;p&gt;音色的维度一般分成音频质量、发声方式、情感基调以及人物画像。该功能根据用户对音色需求的描述，模型自动拆解成音色相关的描述信息，并根据上述的描述来得到一个新的音色编码。同视频模型类似，该功能支持对音色的抽卡，如果不满意，多试几次，很容易得到理想中的专属独一音色，并可存储下来做后续的音频内容创作。&lt;/p&gt; 
&lt;p&gt;据介绍，通过 Voice Design 音色设计，用户可以通过自然语言来描述自己心中所想的音色，实现对多个维度的精准控制，甚至生成世界上不存在的音色。同时，Voice Design 与 Speech 02 语音模型在链路上相配合，用户在文字转语音中可真正实现了「所需即所得」，以「任意语言 × 任意口音 × 任意音色」，实现可全自定义的无限组合。&lt;/p&gt; 
&lt;p&gt;此外，Voice Design 解决了语音合成领域的两个挑战：难以精准匹配用户各个细分场景下的多样需求；复刻音色需要用户花费大量时间准备输入素材，并且存在潜在的版权风险。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0624/142945_xJzZ_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;目前，Voice Design 已上线 MiniMax Audio 国内、海外两个版本。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;国内版：minimaxi.com/audio&lt;/li&gt; 
 &lt;li&gt;海外版：minimax.io/audio&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/357002/minimax-voice-design</link>
      <guid isPermaLink="false">https://www.oschina.net/news/357002/minimax-voice-design</guid>
      <pubDate>Sat, 10 May 2025 06:31:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>空间理解模型 SpatialLM 正式发布首份技术报告</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近日，空间理解模型 SpatialLM 正式发布首份技术报告。这一模型此前曾与 DeepSeek-V3、通义千问 Qwen2.5-Omni 一起登上全球最大的开源社区 HuggingFace 全球趋势榜前三。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0624/140955_PZlV_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;作为一款将大语言模型扩展到 3D 空间理解任务中的模型，SpatialLM 能从 3D 点云输入生成结构化的空间场景描述，这一过程突破了大语言模型对物理世界几何与空间关系的理解局限，让机器具备空间认知与推理能力，为具身智能等相关领域提供空间理解基础训练框架。&lt;/p&gt; 
&lt;p&gt;在开源后经过广泛的实际验证，本次技术报告聚焦 SpatialLM 1.1 升级版本，其不仅包含了详细的消融实验与训练配方，还在点云编码方式、分辨率、用户指定识别类目等维度上实现优化。&lt;/p&gt; 
&lt;p&gt;多项基准测试数据显示：该模型在任务数据集微调后，在空间布局识别、3D 物体检测任务中，均达到了相比与最新专业模型持平或更优的效果。&lt;/p&gt; 
&lt;p&gt;&lt;img height="309" src="https://static.oschina.net/uploads/space/2025/0624/141014_3iIl_2720166.png" width="1280" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;本次报告重点围绕&lt;strong&gt;算法框架&lt;/strong&gt;和&lt;strong&gt;训练数据&lt;/strong&gt;两方面展开。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;在算法架构方面&lt;/strong&gt;，SpatialLM 将大语言模型（LLMs）扩展到 3D 空间理解任务中，特别在结构化室内建模领域实现了重要突破。&lt;/p&gt; 
&lt;p&gt;这一技术路线打破了传统任务专属架构（task-specific architecture）的限制，创新性地采用可编辑的文本形式表达场景结构。这一创新设计具有双重技术优势：&lt;/p&gt; 
&lt;p&gt;一方面&lt;strong&gt;发挥了群核科技强大数据集能力&lt;/strong&gt;，通过持续训练不断优化空间识别精度；另一方面&lt;strong&gt;通过接入大语言模型，系统可直接接收并理解自然语言指令&lt;/strong&gt;，使空间理解模型从简单任务执行工具转变为能够真正理解用户意图的智能系统，从而推进了 LLMs 在空间理解和推理方向的能力边界。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0624/141138_pYOw_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt;SpatialLM 模型的网络结构&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;在训练数据方面，SpatialLM 构建了一个全新的包含 3D 结构化信息的合成点云数据集，打破了真实数据稀缺且难以标注的局限。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1149" src="https://static.oschina.net/uploads/space/2025/0624/141210_bppP_2720166.png" width="974" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;该数据集包含超 1.2 万场景、5.4 万个房间的结构化室内点云数据，其规模远超 ScanNet（仅包含 1,513 个场景）等现有数据集。所有数据均源自真实项目的专业设计模型，经严格筛选与解析后形成符合真实世界统计分布的虚拟环境，相较程序化生成的 ProcTHOR 等数据集具有更高真实性。&lt;/p&gt; 
&lt;p&gt;项目地址：https://manycore-research.github.io/SpatialLM/&lt;br&gt; 报告详情：https://arxiv.org/abs/2506.07491&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356998</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356998</guid>
      <pubDate>Sat, 10 May 2025 06:12:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>vivo Pulsar 万亿级消息处理实践 (2) - 从 0 到 1 建设 Pulsar 指标监控链路</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;blockquote&gt; 
 &lt;p&gt;作者：vivo 互联网大数据团队- You Shuo&lt;/p&gt; 
 &lt;p&gt;本文是《vivo Pulsar 万亿级消息处理实践》系列文章第 2 篇，Pulsar 支持上报分区粒度指标，Kafka 则没有分区粒度的指标，所以 Pulsar 的指标量级要远大于 Kafka。在 Pulsar 平台建设初期，提供一个稳定、低时延的监控链路尤为重要。&lt;/p&gt; 
 &lt;p&gt;系列文章：&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;《&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247501335%26idx%3D1%26sn%3D3701be0b8b7b789e29c1ca53ba142e9d%26scene%3D21%23wechat_redirect" target="_blank"&gt;vivo Pulsar 万亿级消息处理实践-数据发送原理解析和性能调优&lt;/a&gt;》&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;本文是基于 Pulsar 2.9.2/kop-2.9.2 展开的。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;一、背景&lt;/h1&gt; 
&lt;p&gt;作为一种新型消息中间件，Pulsar 在架构设计及功能特性等方面要优于 Kafka，所以我们引入 Pulsar 作为我们新一代的消息中间件。在对 Pulsar 进行调研的时候（比如：性能测试、故障测试等），针对 Pulsar 提供一套可观测系统是必不可少的。Pulsar 的指标是面向云原生的，并且官方提供了 Prometheus 作为 Pulsar 指标的采集、存储和查询的方案，但是使用 Prometheus 采集指标面临以下几个&lt;strong&gt;问题&lt;/strong&gt;：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Prometheus 自带的时序数据库不是分布式的，它受单机资源的限制；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Prometheus 在存储时序数据时消耗大量的内存，并且 Prometheus 在实现高效查询和聚合计算的时候会消耗大量的 CPU。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;除了以上列出的可观测系统问题，Pulsar 还有一些指标本身的问题，这些问题&lt;strong&gt;包括&lt;/strong&gt;：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Pulsar 的订阅积压指标单位是 entry 而不是条数，这会严重影响从 Kafka 迁移过来的用户的使用体验及日常运维工作；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Pulsar 没有 bundle 指标，因为 Pulsar 自动均衡的最小单位是 bundle，所以 bundle 指标是调试 Pulsar 自动均衡参数时重要的观测依据；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;kop 指标上报异常等问题。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;针对以上列出的几个问题，我们在下面分别展开敍述。&lt;/p&gt; 
&lt;h1&gt;二、Pulsar 监控告警系统架构&lt;/h1&gt; 
&lt;p&gt;在上一章节我们列出了使用 Prometheus 作为观测系统的局限，由于 Pulsar 的指标是面向云原生的，采用 Prometheus 采集 Pulsar 指标是最好的选择，但对于指标的存储和查询我们使用第三方存储来减轻 Prometheus 的压力，整个监控告警系统架构如下图所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//c032b72031868384106c1cc665fafc42.gif" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在整个可观测系统中，各组件的职能如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Pulsar、bookkeeper 等组件提供暴露指标的接口&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Prometheus 访问 Pulsar 指标接口采集指标&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;adaptor 提供了服务发现、Prometheus 格式指标的反序列化和序列化以及指标转发远端存储的能力，这里的远端存储可以是 Pulsar 或 Kafka&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Druid 消费指标 topic 并提供数据分析的能力&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;vivo 内部的检测告警平台提供了动态配置检测告警的能力&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;基于以上监控系统的设计逻辑，我们在具体实现的过程中遇到了几个比较&lt;strong&gt;关键的问题：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;**一、**adaptor 需要接收 Pulsar 所有线上服务的指标并兼容 Prometheus 格式数据，所以在调研 Prometheus 采集 Pulsar 指标时，我们基于 Prometheus 的官方文档开发了 adaptor，在 adaptor 里实现了服务加入集群的发现机制以及动态配置 prometheus 采集新新加入服务的指标：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Prometheus 动态加载配置：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fprometheus.io%2Fdocs%2Fprometheus%2Flatest%2Fconfiguration%2Fconfiguration%2F" target="_blank"&gt;Prometheus 配置-官方文档&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Prometheus 自定义服务发现机制：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fprometheus.io%2Fblog%2F2015%2F06%2F01%2Fadvanced-service-discovery%2F" target="_blank"&gt;Prometheus 自定义服务发现-官方文档&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在可以动态配置 Prometheus 采集所有线上正在运行的服务指标之后，由于 Prometheus 的指标是基于 protobuf 协议进行传输的，并且 Prometheus 是基于 go 编写的，所以为了适配 Java 版本的 adaptor，我们基于 Prometheus 和 go 提供的指标格式定义文件（remote.proto、types.proto 和 gogo.proto）生成了 Java 版本的指标接收代码，并将 protobuf 格式的指标反序列化后写入消息中间件。&lt;/p&gt; 
&lt;p&gt;**二、**Grafana 社区提供的 Druid 插件不能很好的展示 Counter 类型的指标，但是 bookkeeper 上报的指标中又有很多是 Counter 类型的指标，vivo 的 Druid 团队对该插件做了一些改造，新增了计算速率的聚合函数。&lt;/p&gt; 
&lt;p&gt;druid 插件的安装可以参考官方文档（&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgrafana.com%2Fgrafana%2Fplugins%2Fabhisant-druid-datasource%2F" target="_blank"&gt;详情&lt;/a&gt;）&lt;/p&gt; 
&lt;p&gt;**三、**由于 Prometheus 比较依赖内存和 CPU，而我们的机器资源组又是有限的，在使用远端存储的基础上，我们针对该问题优化了一些 Prometheus 参数，这些参数包括：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;--storage.tsdb.retention=30m&lt;/strong&gt;：该参数配置了数据的保留时间为 30 分钟，在这个时间之后，旧的数据将会被删除。&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;--storage.tsdb.min-block-duration=5m&lt;/strong&gt;：该参数配置了生成块（block）的最小时间间隔为 5 分钟。块是一组时序数据的集合，它们通常被一起压缩和存储在磁盘上，该参数间接控制 Prometheus 对内存的占用。&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;--storage.tsdb.max-block-duration=5m&lt;/strong&gt;：该参数配置了生成块（block）的最大时间间隔为 5 分钟。如果一个块的时间跨度超过这个参数所设的时间跨度，则这个块将被分成多个子块。&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;--enable-feature=memory-snapshot-on-shutdown&lt;/strong&gt;：该参数配置了在 Prometheus 关闭时，自动将当前内存中的数据快照写入到磁盘中，Prometheus 在下次启动时读取该快照从而可以更快的完成启动。&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;三、Pulsar 指标优化&lt;/h1&gt; 
&lt;p&gt;Pulsar 的指标可以成功观测之后，我们在日常的调优和运维过程中发现了一些 Pulsar 指标本身存在的问题，这些问题包括准确性、用户体验、以及性能调优等方面，我们针对这些问题做了一些优化和改造，使得 Pulsar 更加通用、易维护。&lt;/p&gt; 
&lt;h2&gt;3.1 Pulsar 消费积压指标&lt;/h2&gt; 
&lt;p&gt;原生的 Pulsar 订阅积压指标单位是 entry，从 Kafka 迁移到 Pulsar 的用户希望 Pulsar 能够和 Kafka 一样，提供以消息条数为单位的积压指标，这样可以方便用户判断具体的延迟大小并尽量不改变用户使用消息中间件的习惯。&lt;/p&gt; 
&lt;p&gt;在确保配置 brokerEntryMetadataInterceptors=&lt;/p&gt; 
&lt;p&gt;org.apache.pulsar.common.intercept.AppendIndexMetadataInterceptor 情况下，Pulsar broker 端在往 bookkeeper 端写入 entry 前，通过拦截器往 entry 的头部添加索引元数据，该索引在同一分区内单调递增，entry 头部元数据示例如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;biz-log-partition-1 -l 24622961 -e 6
Batch Message ID: 24622961:6:0
Publish time: 1676917007607
Event time: 0
Broker entry metadata index: 157398560244
Properties:
"X-Pulsar-batch-size    2431"
"X-Pulsar-num-batch-message    50"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;以分区为指标统计的最小单位，基于 last add confirmed entry 和 last consumed entry 计算两个 entry 中的索引差值，即是订阅在每个分区的数据积压。下面是 cursor 基于订阅位置计算订阅积压的示意图，其中 last add confirmed entry 在拦截器中有记录最新索引，对于 last consumed entry，cursor 需要从 bookkeeper 中读取，这个操作可能会涉及到 bookkeeper 读盘，所以在收集延迟指标的时候可能会增加采集的耗时。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//f954824fee0a365add038a1a9aed4e3b.gif" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;效果&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;上图是新订阅积压指标和原生积压指标的对比，新增的订阅积压指标单位是条，原生订阅积压指标单位是 entry。在客户端指定单条发送 100w 条消息时，订阅积压都有明显的升高，当客户端指定批次发送 100w 条消息的时候，新的订阅积压指标会有明显的升高，而原生订阅积压指标相对升高幅度不大，所以新的订阅积压指标更具体的体现了订阅积压的情况。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//a62f11043d23bcbc8c667854834e2437.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;3.2 Pulsar bundle 指标&lt;/h2&gt; 
&lt;p&gt;Pulsar 相比于 Kafka 增加了自动负载均衡的能力，在 Pulsar 里 topic 分区是绑定在 bundle 上的，而负载均衡的最小单位是 bundle，所以我们在调优负载均衡策略和参数的时候比较依赖 bunlde 的流量分布指标，并且该指标也可以作为我们切分 bundle 的参考依据。我们在开发 bundle 指标的时候做了下面两件事情：&lt;/p&gt; 
&lt;p&gt;统计当前 Pulsar 集群非游离状态 bundle 的负载情况对于处于游离状态的 bundle（即没有被分配到任何 broker 上的 bundle），我们指定 Pulsar leader 在上报自身 bundle 指标的同时，上报这些处于游离状态的 bundle 指标，并打上是否游离的标签。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;效果&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//d465e1009a88707edf424e50711bfd36.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上图就是 bundle 的负载指标，除了出入流量分布的情况，我们还提供了生产者/消费者到 bundle 的连接数量，以便运维同学从更多角度来调优负载均衡策略和参数。&lt;/p&gt; 
&lt;h2&gt;3.3 kop 消费延迟指标无法上报&lt;/h2&gt; 
&lt;p&gt;在我们实际运维过程中，重启 kop 的 Coordinator 节点后会偶发消费延迟指标下降或者掉 0 的问题，从 druid 查看上报的数据，我们发现在重启 broker 之后消费组就没有继续上报 kop 消费延迟指标。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;（1）原因分析&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;由于 kop 的消费延迟指标是由 Kafka lag exporter 采集的，所以我们重点分析了 Kafka lag exporter 采集消费延迟指标的逻辑，下图是 Kafka-lag-exporter 采集消费延迟指标的示意图：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//e1c60c3dfc3fbdfdcbacbe9501bd9c30.gif" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;其中，kafka-lag-exporter 计算消费延迟指标的逻辑会依赖 kop 的 describeConsumerGroups 接口，但是当 GroupCoordinator 节点重启后，该接口返回的 member 信息中 assignment 数据缺失，kafka-lag-exporter 会将 assignment 为空的 member 给过滤掉，所以最终不会上报对应 member 下的分区指标，代码调试如下图所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//44161110538352a1751268f3d5e09c35.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//756d27b220d957877e1713dd1ac7e29a.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;为什么 kop/Kafka describeConsumerGroups 接口返回 member 的 assignment 是空的？因为 consumer 在启动消费时会通过 groupManager.storeGroup 写入__consumer_&lt;/p&gt; 
&lt;p&gt;offset，在 coordinator 关闭时会转移到另一个 broker，但另一个 broker 并没有把 assignment 字段反序列化出来（序列化为 groupMetadataValue，反序列化为 readGroupMessageValue），如下图：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//378c807ffd55bb262d54d26e52e6d73a.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;（2）解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 GroupMetadataConstants#readGroup-&lt;/p&gt; 
&lt;p&gt;MessageValue() 方法对 coordinator 反序列化消费组元数据信息时，将 assignment 字段读出来并设置（序列化为 groupMetadataValue，反序列化为 readGroupMessageValue），如下图：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//97fe15c2e044eb609406a2ab3d5e51e8.png" alt="图片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;四、总结&lt;/h1&gt; 
&lt;p&gt;在 Pulsar 监控系统构建的过程中，我们解决了与用户体验、运维效率、Pulsar 可用性等方面相关的问题，加快了 Pulsar 在 vivo 的落地进度。虽然我们在构建 Pulsar 可观测系统过程中解决了一部分问题，但是监控链路仍然存在单点瓶颈等问题，所以 Pulsar 在 vivo 的发展未来还会有很多挑战。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/vivotech/blog/18619289</link>
      <guid isPermaLink="false">https://my.oschina.net/vivotech/blog/18619289</guid>
      <pubDate>Sat, 10 May 2025 03:41:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>谭中意：「中国内源第一人」 的九年布道路</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;div&gt; 
 &lt;p&gt;「中国内源第一人」，开源中国董事长马越、多家国内著名科技企业内源负责人都曾这样称呼谭中意。国内开源专家众多，但真正投身内源（InnerSource）实践者却寥寥无几。&lt;/p&gt; 
 &lt;p&gt;内源一词，是&amp;nbsp;Tim O'Reilly 先生在在 1999 年创造的，他也是开源创始人之一。内源并不神秘，简单来说，就是在企业内部公开代码，可见可贡献。2015 年，著名开源活动家 Danese Cooper 女士将其发扬光大，并成立国际内源基金会 （InnerSource Commons），到今天已经快 10 年了。&lt;/p&gt; 
 &lt;p&gt;今年 5 月，国际内源基金会在其官网上公布最新的董事会成员（https://innersourcecommons.org/about/board/），谭中意（英文名字为 Jerry Tan）赫然在列。 他是首个来自中国的董事会成员。&lt;/p&gt; 
 &lt;p style="text-align:center"&gt;&lt;img height="392" src="https://oscimg.oschina.net/oscnet/up-b3017296e42653f6c12fdbbe80e592162da.png" width="1204" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;p&gt;对他个人而言，这意味着一顶在业界流传已久、却始终缺个「正式认证」的桂冠——「中国内源第一人」——终于得到了国际权威机构的背书。&lt;/p&gt; 
 &lt;p&gt;「现在有这么一个戳了。」&lt;/p&gt; 
 &lt;p&gt;从 2016 年在百度初次将内源纳入开源战略版图，到 2018 年远赴美国参加 OSCON 大会，与国际内源基金会负责人 Danese Cooper 女士的初次握手与合影，再到 2019 年登上 OSCON 舞台分享「中国经验」，九年间，谭中意的每一步，都串联起中国内源从萌芽到走向国际的隐秘脉络。&lt;/p&gt; 
 &lt;p style="text-align:center"&gt;&lt;img height="445" src="https://oscimg.oschina.net/oscnet/up-174ad251279b59840baf710961adc386c61.png" width="1177" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;p style="text-align:center"&gt;2018 年、2019 OSCON InnerSource Day，谭中意，与&amp;nbsp;Danese Cooper 女士合影&lt;/p&gt; 
 &lt;p&gt;如今，作为新晋董事，这位「内源布道者」的专家，正试图将「别着急」的长期主义哲学注入到内源事业中，让更多企业，尤其是传统企业和国央企，理解并拥抱开源协作的力量。&lt;/p&gt; 
 &lt;p&gt;他的信条很简单：「别着急，内源与开源都不是一蹴而就的事情。」&lt;/p&gt; 
 &lt;span id="OSC_h4_1"&gt;&lt;/span&gt; 
 &lt;h4&gt;&lt;strong&gt;从百度出发的漫长旅程&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;2010 年，谭中意加入百度，先后在多个产品线工作，之后负责百度集团的平台化项目。之后，他又负责推进整个集团的开源工作——包括规范引入外部开源项目的合规、安全与高效流程，建立对外开源项目的健康持续发展机制以提升技术影响力和构建生态，以及探索内部开源如何提升研发与创新效率。&lt;/p&gt; 
 &lt;p&gt;谭中意回忆，最早开始着手进行内源工作是 2016 年。那时候，中国没几个人知道内源是什么。他之所以在百度搞内源，源于平台化项目面临的实际挑战：平台化后的项目团队人力有限，难以支撑百度内部众多业务线的需求。因此，谭中意主动引入内源模式，吸引业务线的研发工程师一起对平台项目进行共同维护。&amp;nbsp;他的内源推广采取了渐进式路径：最初从一个具体的项目（ODP，一个 PHP MVC 框架）试点，随后扩展到一个部门（Inf，百度基础架构部），最终覆盖到整个集团。&lt;/p&gt; 
 &lt;p&gt;谭中意坦言，起步并非完全从零开始——内源与开源共享着许多方法论和价值观（如透明协作、社区驱动），但初期的探索依然充满挑战。「当时我们确实积累了一些开源相关的经验」，他回忆道，「但后来发现，要将内源模式推广到互联网行业之外，尤其是传统企业，难度相当大。」&lt;/p&gt; 
 &lt;p&gt;这种挑战感促使他主动寻求突破，跳出去看看国际上怎么做的。2018 年，他远赴美国参加 OSCON 大会的内源分论坛（InnerSource Day），首次与国际内源基金会负责人 Danese Cooper 女士深入交流。这成为他连接全球内源社区的起点。这次交流也给了他信心，次年（2019 年），他成功将百度推进内源的经验投稿 OSCON 并获选，在大会上专门介绍了中国的内源实践，再次深化了与国际同行的联系。&lt;/p&gt; 
 &lt;p&gt;连接一旦建立，交流便持续深化。 2021 年，他在深圳（腾讯）牵头组织了 InnerSource Asia Summit 2021 线上和线下活动；到了 2024 年，他再次于深圳组织相关活动，并颁发了 InnerSource China Award 2024，代表 InnerSource Commons 基金会对中国内源实践突出的优秀企业进行了表彰。(详见 https://it.sohu.com/a/812246006_827544）。中国内源的影响力持续扩大，这些实践不仅在国内播种，也反哺着国际交流。&lt;/p&gt; 
 &lt;p style="text-align:center"&gt;&lt;img height="387" src="https://oscimg.oschina.net/oscnet/up-feb919554db1f71da4f23957d40aa5e367f.png" width="688" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;p style="text-align:center"&gt;2024 年深圳内源峰会颁奖大合影&lt;/p&gt; 
 &lt;p&gt;&lt;br&gt; 作为 InnerSource Commons 的新任董事，谭中意基于过往连接国际的经验，目标已十分清晰：一方面，在中国组织更多内源活动，深化本土推广；另一方面，积极推动更多中国成员参与国际内源基金会的活动，促进更多交流和协作。&lt;/p&gt; 
 &lt;span id="OSC_h4_2"&gt;&lt;/span&gt; 
 &lt;h4&gt;&lt;strong&gt;中国式内源，有自己的独特经验&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;谭中意几乎已经跟中国所有做内源的企业接触过，并深度参与过百度和腾讯的内源工作。他看到中国企业有一个很大的优点，就是很擅长学习先进经验，并结合本地实际迭代。中国企业的内源实践也因此独具特色。&lt;/p&gt; 
 &lt;p&gt;「腾讯的经验就很值得借鉴。」谭中意表示，在推行内源前，腾讯内部是一个极其庞大，但又各自为战、没有太多技术追求的状态，重复造轮子的情况很常见，技术壁垒也很严重。认识到这情况以后，腾讯把‘开源协同’作为集团战略之一，通过七年实践，扭转了内部技术各自为战、缺乏协作的局面。&lt;/p&gt; 
 &lt;p&gt;他总结了腾讯做内源成功的几个关键：&lt;/p&gt; 
 &lt;p style="text-align:left"&gt;首先高层要定好调： 「总办认识到开源协同是解决他们集团长期以来在技术上的一些痛点问题的非常有效的手段」，并将其宣布为「两大集团战略之一」。&lt;/p&gt; 
 &lt;p style="text-align:left"&gt;接着必须要有强力推手： 「找了一个很有实权的部门来推行，这个部门是腾讯 TEG 运营管理部，运管派了很大的人力组成内源运营团队，每年还有相当多的运营经费」。&lt;/p&gt; 
 &lt;p style="text-align:left"&gt;同时要提供机制保障： 代码默认开放，「只要这个项目放到公司的代码仓库默认内部开源的」，只有约 10% 多的项目经 VP 审批保密；代码协同还需要基础的研发设施、流程工具、度量平台等来支持。&lt;/p&gt; 
 &lt;p&gt;此外还有很多的机制设计、运营活动等等。&lt;/p&gt; 
 &lt;p&gt;谭中意称之为「腾讯开源协同之道」，并对这一模式给予高度评价：「彻底扭转了局面，让开源协同成了腾讯内部技术部门的主旋律，值得国内外大企业学习。&lt;/p&gt; 
 &lt;p&gt;基于多年观察，谭中意总结出内源项目失败的几个常见根源。&lt;/p&gt; 
 &lt;p&gt;「太着急」 是第一个问题。他描述道：「文档都还没写好，代码又很乱，然后就把内部放出来之后大家能说这是个什么烂项目，我凭什么要支持你？」 仓促上阵，反而让项目失去了人心。&lt;/p&gt; 
 &lt;p&gt;「脱离实际」 是第二个关键原因。他指出：「你开出去的东西，你不解决别人的需求...或者要用就要用全部，成本太高了。」 这样的项目，自然难以获得支持。&lt;/p&gt; 
 &lt;p&gt;「人才梯队断档」 则是致命一击。谭中意强调，一旦项目关键人离职，「别人接不上来了」，项目也就岌岌可危。&lt;/p&gt; 
 &lt;p&gt;如何应对？谭中意举了百度 BRPC 项目的例子。&lt;/p&gt; 
 &lt;p&gt;当时项目遇到了严重危机：主要贡献者离职，内部也没人能接起来。面对困境，他们选择了将项目捐献给 Apache 软件基金会。&lt;/p&gt; 
 &lt;p&gt;这一招带来了转机。原贡献者得以以社区身份继续贡献，正如谭中意所说，「社区对项目的信任感是永远跟着他们的」。同时，百度内部也借此机会培养新人接棒。结果，项目不仅活了下来，还获得了发展。&lt;/p&gt; 
 &lt;p&gt;谭中意点明了其中的核心：「社区归属感比劳动合同更长效」。他总结道，「社区最后培养就是归属感」——正是这种归属感，成为了项目持续发展的生命力所在。&lt;/p&gt; 
 &lt;span id="OSC_h4_3"&gt;&lt;/span&gt; 
 &lt;h4&gt;&lt;strong&gt;内源做得好，开源很轻松&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;内源与开源有着密不可分的关系，就是在企业内部，应用开源软件开发最佳实践和建立类似开源文化，鼓励内部协作和代码共享的方法。&lt;/p&gt; 
 &lt;p&gt;在谭中意看来，开源和内源，具有相同的基因，但是又有不同的侧重点。&lt;/p&gt; 
 &lt;p&gt;谭中意强调，开源和内源的核心都是「协作」，共享很多的方法（如写好文档、建立良好的评审机制），也遵循同样的价值观。&lt;/p&gt; 
 &lt;p&gt;不管是企业内源还是企业对外开源，要把这件事做好，都需要「上下同欲」——企业上层有清晰的战略，企业下面有到位的执行，有工程师组成的社区活跃参与。此外，价值观也很关键，它能吸引志同道合的人，排斥破坏协作的人。&lt;/p&gt; 
 &lt;p&gt;内源与开源的核心区别在于协作范围的大小，协作范围可大可小——小到一个团队内部，大到一个部门、事业部、整个公司，或者整个外部世界，那就是对外开源了。&lt;/p&gt; 
 &lt;p&gt;不过，谭中意指出，二者的目的并不一致，内源核心是「提升企业内部效率，减少重复，加速创新」；对外开源则常与「品牌战略或者商业战略」关联。因此，在很多企业里，管内源（ISPO）和管外源（OSPO）的可能是两拨人，也可能合为一拨。「微软一开始就是分开的，后来整合了，百度当时我就全管了。这取决于公司具体情况。「&lt;/p&gt; 
 &lt;p style="text-align:left"&gt;「内源对企业有很大的价值，包括增加代码复用，提高产品质量；加速知识共享，提升开发人员能力；加速科技创新；减少重复轮子，降低成本；为对外开源做准备等等。内源做得好，开源很轻松」。谭中意表示，谷歌、微软、Intel 等公司内部都采用开源方式协作，对外开源只需战略审核。&lt;/p&gt; 
 &lt;p&gt;Fury 项目的故事也为谭中意的观点做出了最好的证明。&lt;/p&gt; 
 &lt;p&gt;Fury 是蚂蚁集团的工程师个人发起的多语言分布式序列化框架，向公司申请对外开源时被驳回了，理由是「内部都没有人用，只有他所在的这个团队在用」。之后，项目负责人转向「内部开源」，专注于「做好文档，做好宣讲」，吸引内部用户和贡献者。过了两年，Fury 项目在蚂蚁集团的内部社区已经形成了，再次申请对外开源获得通过，并成功进入 Apache 软件基金会孵化器，最近刚刚更名为 fory，成为「内源作为外源孵化器」的典范案例。&lt;/p&gt; 
 &lt;p&gt;他警告，若企业仅做外源而「内部锁得很死」，缺乏协作文化和价值观支撑，开源项目可能难以持久，「过不了不久，对外开源的项目就挂掉了，或者没人维护了」。&lt;/p&gt; 
 &lt;span id="OSC_h4_4"&gt;&lt;/span&gt; 
 &lt;h4&gt;&lt;strong&gt;嘴上说着别着急，但步履不停&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;这两年，谭中意观察到，中国的内源环境发生了显著变化：入局者越来越多，中电信、中移动以及金山办公等更多企业正在关注或尝试内源，寻求效率提升。但是，国内内源推广者相对比较少，并且整体而言，国内企业对内源的认识仍然不足。&lt;/p&gt; 
 &lt;p&gt;面对推广者少、认知度低的现状，谭中意强调「别着急」。他不给自己设置短期硬性 KPI，而是看重实质进展，如企业关注、社区活跃度、国际参与度提升。&lt;/p&gt; 
 &lt;p&gt;话虽这么说，但手上的活儿还是没停下来。&lt;/p&gt; 
 &lt;p&gt;「在国内活动这块，我计划每年开一次线下峰会，去年举办过一次，今年更有经验了。其次，每个月组织一次线上内源案例分享，今年已经完成了三期，腾讯、华为都分享了，这个月底是 OPPO。之后，每月都会有一期。另外，还将不定期组织线上内源沟通会，针对特定主题，时间灵活安排。年底，我会把这些分享的案例沉淀下来，做成企业内源案例集。」&lt;/p&gt; 
 &lt;p&gt;在促进国际融合方面，谭中意将推动更多的中国成员去参与国际内源基金会的活动，具体方式包括：定期参与线上会议、在基金会活动中分享中国经验（如上月已在 webinar 分享并吸引 SAP 等公司关注）、推动中国企业参与基金会十周年峰会（今年在日本、德国、美国举行线上线下混合峰会）。&lt;/p&gt; 
 &lt;p&gt;所有关于内源相关的事务，谭中意都是利用业余时间在推进，没有薪资，纯义务劳动。&lt;/p&gt; 
 &lt;p&gt;他称自己是「内源布道者」，认为有必要把这个方法论推广到国内，让更多的国内企业能应用到，然后来提升他们的效率——「企业内部提升效率是永无止境的」。&lt;/p&gt; 
 &lt;p&gt;他用马斯洛需求理论的最高层——「自我价值实现」来诠释这份坚持：「能认识一帮有同样志向，希望能改变他们公司面貌的朋友，是非常难得的。我和他们认识、交流，一起探讨如何推进他们企业内部的技术协作，这是非常有意义的事情。这也是在追求自我价值的实现。」&lt;/p&gt; 
 &lt;p&gt;除了国际内源基金会董事，谭中意身上还挂着好些开源组织的头衔，比如开放原子基金会 TOC 主席、Apache 软件基金会正式成员和孵化器导师等等。凡是能出一份力的活儿，谭中意都会积极参与。他表示，作为志愿者能创造价值、得到认可，是件开心的事。」就算以后没有这些头衔，也会继续去做这些事。」&lt;/p&gt; 
 &lt;p&gt;至于内源，注定是一条长长的河流，但水流的方向，已然清晰。&lt;/p&gt; 
&lt;/div&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/3859945/blog/18635529</link>
      <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/18635529</guid>
      <pubDate>Sat, 10 May 2025 03:26:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>谷歌开源智能体通信协议 Agent2Agent (A2A) 已被 Linux 基金会接管</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;2025 年 6 月 23 日，Linux 基金会在北美开源峰会&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linuxfoundation.org%2Fpress%2Flinux-foundation-launches-the-agent2agent-protocol-project-to-enable-secure-intelligent-communication-between-ai-agents" target="_blank"&gt;宣布&lt;/a&gt;&lt;/u&gt;启动&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fa2aproject%2FA2A" target="_blank"&gt;Agent2Agent（A2A）&lt;/a&gt;项目。该项目由谷歌于 2025 年 4 月发起并获得 100 多家领先技术公司支持，旨在创建一个开放协议，实现 AI 智能体间的安全通信与协作。Linux 基金会将负责 A2A 项目的管理，确保其中立性、协作性和治理性。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-8fe3e4a0fa786414ab6de80f762399a6327.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;A2A 协议赋予开发者构建跨平台、厂商和框架自由互操作的智能体的能力。它允许智能体在动态多智能体环境中发现彼此、安全交换信息并跨系统协作。这有助于提高模块化程度、降低供应商锁定风险并加速创新。&lt;/p&gt; 
&lt;p&gt;加入 Linux 基金会后，A2A 规范化了其对开放、协作生态系统的承诺——提供更大的自主权并提高生产力。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Linux 基金会执行董事吉姆·泽姆林表示，「我们很高兴成为 Agent2Agent 协议项目的新家园，通过加入 Linux 基金会，A2A 将确保长期的中立性、协作性和治理性，这将解锁下一代由智能体间协作驱动的生产力时代。」&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 Linux 基金会的治理下，A2A 将保持供应商中立，强调包容性贡献，并继续关注协议的扩展性、安全性以及跨行业的实际可用性。&lt;/p&gt; 
&lt;p&gt;多家科技巨头表达了对 A2A 项目的支持。AWS 副总裁 Swami Sivasubramanian 认为，智能体 AI 对客户体验至关重要，A2A 加入 Linux 基金会将创造更多机会。谷歌云计算业务副总裁兼总经理 Rao Surapaneni 表示，A2A 协议为通信建立了重要开放标准，推动了跨平台和系统的真正互操作性 AI 智能体的发展。思科 Outshift 总经理兼高级副总裁 Vijoy Pandey 强调了社区驱动开发在智能体间广泛采用中的重要性。Salesforce 产品架构师 Gary Lerhaupt 称，企业 AI 的未来在于智能体间的无缝协作。SAP 全球人工智能高级副总裁兼全球负责人 Walter Sun 表示，A2A 开放标准确保了不同厂商的智能体能够交互、共享上下文并协同工作。微软产品副总裁 Yina Arenas 承诺，将结合开放互操作性与企业级功能，负责任地大规模部署智能体。ServiceNow 平台工程与人工智能技术集团执行副总裁 Joe Davis 表示，A2A 的开放标准构建了跨平台协作的基础。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356965/linux-foundation-launches-the-agent2agent-protocol-project</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356965/linux-foundation-launches-the-agent2agent-protocol-project</guid>
      <pubDate>Sat, 10 May 2025 02:50:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>抢答题：「把文字变成数字」、「对结果精修」，都是什么技术？</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;写 AI 应用，你总不能就指望大模型直出的效果吧，很多必要的时候，需要「通过外部策略」的方式去影响大模型处理资料的逻辑，检索增强生成技术&amp;nbsp;RAG 是这种路数，而 RAG 中，Embedding 和 Reranker 又是重中之重的环节，当前这两个环节也都有专门模型化范式来接入，并且已成为高效构建智能问答、知识检索、推荐系统等应用的核心组件。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;智能问答&lt;/strong&gt;：通过高精度的 Embedding 建立问答对检索索引，结合 Reranker 精细排序，显著提升答案的相关性与准确率。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;知识库检索&lt;/strong&gt;：在海量文档中精准定位用户意图，支持多轮对话和上下文关联检索。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;推荐系统&lt;/strong&gt;：基于用户历史行为与商品描述生成向量表示，实现个性化推荐、相似内容召回。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;舆情监测&lt;/strong&gt;：快速将海量文本转为向量，通过聚类与分类算法进行主题发现与情感分析。&lt;/p&gt; 
&lt;p&gt;这些都是典型的需要&amp;nbsp;Embedding 与 Reranker 给力的场景。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0624/103257_8UDj_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;这过程中，「把文字变成数字」与「对检索结果精修」是两大核心环节。下面以通俗的方式，分两块为你说明 Embedding 和 Reranker 的原理与价值。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Embedding：把语义「压缩」成向量&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;想象你在把一本书里的每句话都翻译成一长串数字，这串数字既要能表达句子的中心意思，又要在空间里与含义相近的句子靠得更近。Embedding 模型，就是完成这件「翻译」工作的机器。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;多层语义提取&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Embedding 模型内部运用了多层 Transformer 编码器。第一层关注词与词之间的基本搭配（如「苹果」与「果汁」关系）；中间层捕捉句子结构（比如主谓宾），最后几层则把整句话和上下文联系起来，形成一个高维向量。在 Qwen3‑Embedding‑8B 中，这个向量高达 4096 维，让模型能够在更广的维度上区分细微差异。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;对比学习让向量更「聪明」&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;训练时，模型不仅看成对的问答或同义句怎么对应，更会把数千万甚至上亿条不相关的句子拉远。这样，真正相似的句子在向量空间里互相靠近，不相干的句子被推得更远，检索时才不会把「苹果手机电池续航」误当成「香蕉营养价值」。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;动静结合的量化策略&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;向量越大，存储和检索压力越大。动态量化技术能让模型在运行时自动决定哪些维度可以用更低精度来存（节省空间），哪些维度要保持高精度（保证关键语义不丢失）。在实际部署中，这让检索速度实现了「百毫秒级」响应，同时节省了约 60–70% 的存储。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Reranker：给检索结果「打分」再排序&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Embedding 检索出来的是一个粗略的「候选集」，真正要交给用户之前，还需要一位「品质检验师」——Reranker，将这些候选答案再打一遍分、排个序，让最优答案排在最前面。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;深度交互，跳出双塔局限&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;传统双塔结构（query 和 document 分别编码）虽然高效，但只在编码后进行一次简单匹配，会错失一些深度关联。我们的 Reranker 在两侧编码后，还会引入多轮交互注意力——就好像让问题和答案反复「对话」，捕捉细节差异，才能判断「哪句话更贴近用户真实意图」。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;实时反馈持续进化&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;当用户点击某个答案或给出负面评价时，这些行为会被立即反馈到在线增量学习系统中。Reranker 会在后台快速微调自身参数，就像运动员不断根据比赛录像调整战术，保证随着业务热点变化，排序效果始终领先。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;多目标优化兼顾公平与准确&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;除了相关性打分外，模型还联合了分类（这是不是好答案？）、回归（该答案得分应该是多少？）和对比损失（同类答案之间应该怎么排）三个目标共同训练，确保排序既精准又稳定，不会因为单一指标过拟合而出现极端情况。&lt;/p&gt; 
&lt;p&gt;总的来说，&lt;strong&gt;Embedding 负责将文本「量化」到高维空间，为检索打下基础；Reranker 则在此基础上「打磨」结果，确保输给用户的是最精炼、最相关的答案&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;为了让更多开发者和企业能够零门槛体验最前沿的 AI 能力，模力方舟携手国产 GPU 厂商，重磅宣布——&lt;strong&gt;已部署的 17 个 Embedding 和 Reranker 模型，全量免费使用&lt;/strong&gt;！&lt;/p&gt; 
&lt;p&gt;&lt;img height="964" src="https://static.oschina.net/uploads/space/2025/0624/103342_VXq3_2720166.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;还有更多的免费模型选择，尽在模力方舟之模型广场：&lt;em&gt;&lt;strong&gt;&lt;a href="https://ai.gitee.com/serverless-api" target="_blank"&gt;https://ai.gitee.com/serverless-api&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1520" src="https://static.oschina.net/uploads/space/2025/0624/103354_4RFB_2720166.png" width="1074" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;好东西一起分享之，图片拿去转吧。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356959</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356959</guid>
      <pubDate>Sat, 10 May 2025 02:34:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>微软发布设备端模型 Mu，支持在 Windows 中设置智能体</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微软&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.windows.com%2Fwindowsexperience%2F2025%2F06%2F23%2Fintroducing-mu-language-model-and-how-it-enabled-the-agent-in-windows-settings%2F" target="_blank"&gt;宣布&lt;/a&gt;推出面向设备端的小参数模型 Mu。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1294" src="https://static.oschina.net/uploads/space/2025/0624/103032_Y3sh_2720166.png" width="3086" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Mu 仅有 3.3 亿参数，但其性能可以比肩微软之前发布的小参数模型 Phi-3.5-mini，体量却比它小 10 倍左右，并且在离线 NPU 的笔记本设备上，可以跑出每秒超过 100 tokens 的响应，这在小参数模型领域非常罕见。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-0fe4a5c2aa3f7e02f94f3883e0a0a49dd2c.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;此外，Mu 支持在 Windows 中设置智能体，可将自然语言指令实时转化为系统操作，例如，只需对着电脑说一句 「把鼠标指针调大一些，调整屏幕亮度」，智能体就能精准定位到相关设置项一键完成调整。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356958/microsoft-mu-language-model</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356958/microsoft-mu-language-model</guid>
      <pubDate>Sat, 10 May 2025 02:31:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>前字节 Seed 大语言模型负责人乔木被辞退</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;此前，一份有关字节跳动豆包大模型核心技术人员乔某及同组 HRBP 程某存在不正当关系的举报文件在网上广泛传播。6 月 23 日，红星资本局获悉，字前字节 Seed 大语言模型负责人乔木以及关联 HRBP 已被辞退。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="273" src="https://oscimg.oschina.net/oscnet/up-d1fc69ad929f39468990c7341f686a6bd81.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;字节在最新发布的一期廉政通报中提到：&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;公司 Seed 部门（字节跳动豆包大模型团队）某前员工与支持其团队的某前 HRBP（人力资源）存在未申报的亲密关系，属于公司利益冲突管理规定的禁止场景（如上下级关系、共同直属上级或一方为另一方 HRBP 等）。二人不仅未按规定申报利益冲突，且在接受调查过程中多次作虚假陈述，严重违反公司制度。&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;根据通报，字节跳动已对涉事二人作出辞退处理，并全额扣发其年终奖。对此，字节官方尚无说法。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356956</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356956</guid>
      <pubDate>Sat, 10 May 2025 02:15:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>博士生用 Typst 取代 LaTeX 写论文引热议：编译速度快 9 倍，但导师并不满意</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;一位博士生最近在网上分享了自己使用 Typst（而非传统的 LaTeX）撰写博士论文的经历，在技术社区引发了激烈讨论。这个选择看似小众，却触及了学术界一个由来已久的痛点：LaTeX 虽然功能强大，但学习曲线陡峭、编译速度缓慢、错误信息晦涩难懂。&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="400" src="https://oscimg.oschina.net/oscnet/up-da99f6b5d1fdd0954f78d4992bf7563f660.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;从 90 秒到 10 秒：速度是第一生产力&lt;/h2&gt; 
&lt;p&gt;作者选择 Typst 的直接原因很简单——一位朋友的 LaTeX 论文编译时间竟然长达 90 秒。「我太容易分心了，根本无法忍受在做小改动时要等 90 秒的编译时间。」相比之下，Typst 的编译速度快得惊人：即使是 150 页以上的论文，完整编译只需 15 秒，内容修改几乎是即时更新的。&lt;/p&gt; 
&lt;p&gt;HackerNews 用户 WhyNotHugo 深有同感：「我最后一篇论文用的是 makefile，通常能工作。但不工作时，运行两次就能修复。最罕见的情况下，我必须运行&lt;code&gt;git clean -xdf&lt;/code&gt;，然后下一次运行就能工作了。」另一位用户 shusaku 则幽默地评论道：「疯狂的定义就是做同样的事情两次却期待不同的结果。巧合的是，这正是编译 LaTeX 的基本方式。」&lt;/p&gt; 
&lt;h2&gt;Typst 的语言设计：现代化的力量&lt;/h2&gt; 
&lt;p&gt;Typst 最大的亮点在于其精心设计的语言。作者将其描述为「Markdown 和动态类型 Rust 的混合体」，这种组合听起来很奇怪，但实际使用起来却非常舒适。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typst"&gt;#let numbers = (1,2,5,8)
This is *bold text*. The sum of [#numbers.map(it =&amp;gt; str(it)).join(", ")] is *#numbers.sum()*
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这段代码会生成：「This is &lt;strong&gt;bold text&lt;/strong&gt;. The sum of [1, 2, 5, 8] is &lt;strong&gt;16&lt;/strong&gt;」&lt;/p&gt; 
&lt;p&gt;相比 LaTeX 中到处都是反斜杠的语法，Typst 的设计更加直观。更重要的是，Typst 拥有一个设计良好的脚本语言。正如作者所说：「我对 LaTeX 最大的抱怨是没有任何东西是一致的。每个包都定义自己的小工具，甚至连基本的 if 语句都不统一。感觉你不是在学 LaTeX，而是在分别学习每个包。」&lt;/p&gt; 
&lt;h2&gt;实际应用：不只是纸上谈兵&lt;/h2&gt; 
&lt;p&gt;作者展示了一个实际案例：他收集了各种硬件描述语言的元数据，存储在 TOML 文件中。由于 Typst 可以直接解析 TOML，他能够轻松地用这些数据生成论文中的分类图表。这种程度的编程集成在 LaTeX 中几乎是不可想象的。&lt;/p&gt; 
&lt;p&gt;HackerNews 用户 lizimo 分享了更有趣的应用场景：「我们已经在生产环境中使用 Typst 生成 PDF 文档几个月了，比如发票和标签。每天生成数千份文档，我很高兴其中一些被打印出来，供仓库里做实际工作的人使用。」&lt;/p&gt; 
&lt;h2&gt;痛点仍在：生态系统的挑战&lt;/h2&gt; 
&lt;p&gt;然而，Typst 并非完美无缺。最大的问题来自于参考文献管理。Typst 每个文档只能有一个参考文献部分和文件，这对于需要为引言和每篇包含的论文分别设置参考文献的博士论文来说是个致命缺陷。虽然 Alexandria 包提供了解决方案，但仍需要额外的工作。&lt;/p&gt; 
&lt;p&gt;更大的挑战在于生态系统。正如 HackerNews 用户 gumbojuice 指出：「我坚持使用 LaTeX，不是因为偏好，而是因为期刊/会议仍然不接受比如 typst。他们会接受吗？我不知道，这取决于他们是否愿意将其整合到工具链中。」&lt;/p&gt; 
&lt;h2&gt;导师的不同视角&lt;/h2&gt; 
&lt;p&gt;有趣的是，作者的导师对此有完全不同的看法。导师认为：「问题是你必须调整它才能让事情看起来符合要求。这不一定是优势。作为导师，我会建议在所有手稿都用 LaTeX 编写的领域中使用 Typst 吗？不会。」&lt;/p&gt; 
&lt;p&gt;导师特别指出，从监督者的角度来看，他几乎没有在源代码中编辑任何文本，而是让作者自己编辑文本和格式，这相当低效。&lt;/p&gt; 
&lt;h2&gt;社区的两极化反应&lt;/h2&gt; 
&lt;p&gt;HackerNews 的讨论呈现出明显的两极分化。支持者认为 Typst 代表了未来。用户 commandersaki 列出了 Typst 的诸多优势：「编译时不会生成 5 个该死的文件」、「编译是即时的」、「诊断信息更容易理解（有点像 Rust 编译器的建议风格）」。&lt;/p&gt; 
&lt;p&gt;反对者则担心 Typst 的持续性。用户 dleslie 警告说：「三十年后 LaTeX 仍将是开源的，可能还会被维护。Typst 看起来是开源和闭源的混合体；这种模式往往会忽视开源部分，在闭源部分实现关键功能。」&lt;/p&gt; 
&lt;p&gt;用户 the-wumpus 则反驳道：「网页应用编辑器是闭源的，但它提供的大部分功能都是开源的，所以本地编辑体验类似（在我看来更好）。typst 编译器、LSP 和你需要使用的所有东西都是开源的。」&lt;/p&gt; 
&lt;h2&gt;写在最后&lt;/h2&gt; 
&lt;p&gt;正如作者在结论中所说：「如果你像我一样，喜欢玩编程语言，容易被工具困扰，更喜欢可以调整到完全符合自己要求的工具，而不是开箱即用但难以调整的工具，那么 Typst 绝对值得一试。」&lt;/p&gt; 
&lt;p&gt;对于学术界来说，Typst 的出现提供了一个思考的契机：我们是否应该继续忍受 LaTeX 的种种不便，仅仅因为「大家都在用」？还是应该拥抱新技术带来的效率提升？&lt;/p&gt; 
&lt;p&gt;用户 rcpt 的评论或许代表了一种新的可能：「自从我写 LaTeX 以来已经有十年了，我同意它的所有痛点。但似乎 LaTeX 正是 LLM 会完美处理的东西。我觉得今天使用它不会太糟糕。」&lt;/p&gt; 
&lt;p&gt;无论选择哪种工具，重要的是它能帮助研究者更好地表达思想。正如用户 noelwelsh 所说：「在一天结束时，我不是在试图迁移任何人。使用你认为最好的。对于我的使用场景，我确信 Typst 是比 LaTeX 更好的选择。」&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356954</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356954</guid>
      <pubDate>Sat, 10 May 2025 01:57:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>Solon Expression Language (SnEL)：轻量高效的 Java 表达式引擎</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;h2&gt;一、SnEL 是什么？&lt;/h2&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;Solon Expression Language（简称 SnEL）是 Solon 生态体系中的轻量级表达式引擎，专为 Java 开发者设计。它采用独特的"求值表达式"模型，通过简洁的语法实现复杂逻辑处理，同时保持极高的执行效率和安全性。&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;项目地址：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Gitee:&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://gitee.com/noear/solon-expression"&gt;https://gitee.com/noear/solon-expression&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GitHub:&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnoear%2Fsolon-expression" target="_blank"&gt;https://github.com/noear/solon-expression&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;二、核心特性解析&lt;/h2&gt; 
&lt;h3&gt;1. 安全可靠的表达式引擎&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;无副作用设计&lt;/strong&gt;：禁止&lt;code&gt;new&lt;/code&gt;实例化、控制语句等危险操作&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;上下文隔离&lt;/strong&gt;：通过&lt;code&gt;StandardContext&lt;/code&gt;严格管控变量访问范围&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. 丰富的表达式能力&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;em&gt;// 复杂逻辑表达式示例&lt;/em&gt;
&lt;span style="color:#986801"&gt;String&lt;/span&gt; &lt;span style="color:#986801"&gt;expr&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"""
    ((age &amp;gt; 18 AND salary &amp;lt; 5000) OR NOT isMarried) 
    AND tags IN ['vip','premium'] 
    OR level == 'gold'"""&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;支持功能主要包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;基础运算：算术、比较、逻辑运算&lt;/li&gt; 
 &lt;li&gt;集合操作：IN/NOT IN 集合判断&lt;/li&gt; 
 &lt;li&gt;嵌套访问：多级对象属性/方法调用&lt;/li&gt; 
 &lt;li&gt;静态方法：直接调用类静态方法&lt;/li&gt; 
 &lt;li&gt;三元运算：条件表达式支持&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;更多参考官网：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsolon.noear.org%2Farticle%2F1043" target="_blank"&gt;《SnEL 求值表达式语法和能力说明》&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;3. 独创的模板引擎&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;双模式模板处理：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;em&gt;// 求值表达式模板&lt;/em&gt;
SnEL.evalTmpl(&lt;span style="color:#50a14f"&gt;"订单总额：#{order.amount * 0.95}"&lt;/span&gt;);

&lt;em&gt;// 属性表达式模板（带默认值）&lt;/em&gt;
SnEL.evalTmpl(&lt;span style="color:#50a14f"&gt;"配置参数：${server.timeout:3000}"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;三、企业级功能深度解析&lt;/h2&gt; 
&lt;h3&gt;1. 上下文增强方案&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;em&gt;// 标准 Map 上下文&lt;/em&gt;
Map&amp;lt;String,Object&amp;gt; ctx = &lt;span style="color:#a626a4"&gt;new&lt;/span&gt; &lt;span style="color:#c18401"&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();
ctx.put(&lt;span style="color:#50a14f"&gt;"user"&lt;/span&gt;, userService.getCurrent());

&lt;em&gt;// 增强型 Bean 上下文&lt;/em&gt;
&lt;span style="color:#986801"&gt;StandardContext&lt;/span&gt; &lt;span style="color:#986801"&gt;context&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span style="color:#a626a4"&gt;new&lt;/span&gt; &lt;span style="color:#c18401"&gt;StandardContext&lt;/span&gt;(userEntity);
context.properties(configProps); &lt;em&gt;// 绑定配置属性&lt;/em&gt;

&lt;em&gt;// 虚拟 root 访问&lt;/em&gt;
SnEL.eval(&lt;span style="color:#50a14f"&gt;"root.id &amp;gt; 1000"&lt;/span&gt;, context);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. 多场景表达式转换&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;基于 AST 的通用转换接口：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#986801"&gt;Expression&lt;/span&gt; &lt;span style="color:#986801"&gt;expr&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; SnEL.parse(&lt;span style="color:#50a14f"&gt;"age &amp;gt; 18 AND status=='active'"&lt;/span&gt;);

&lt;em&gt;// 转换为 Redis 查询语法&lt;/em&gt;
&lt;span style="color:#986801"&gt;String&lt;/span&gt; &lt;span style="color:#986801"&gt;redisFilter&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; RedisFilterTransformer.getInstance().transform(expr);

&lt;em&gt;// 转换为 Elasticsearch DSL&lt;/em&gt;
Map&amp;lt;String,Object&amp;gt; esQuery = ElasticsearchFilterTransformer.getInstance().transform(expr);

&lt;em&gt;// 输出语法树结构&lt;/em&gt;
PrintUtil.printTree(expr);
&lt;/code&gt;&lt;/pre&gt; 
&lt;table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#24292e; display:block; font-family:-apple-system,&amp;quot;system-ui&amp;quot;,&amp;quot;Segoe UI&amp;quot;,Helvetica,Arial,sans-serif,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:960px; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th&gt;转换器类型&lt;/th&gt; 
   &lt;th&gt;输出示例&lt;/th&gt; 
   &lt;th&gt;应用场景&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;Redis&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;code&gt;(@age:[18 +inf] @status:{active})&lt;/code&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;缓存查询&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;Milvus&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;code&gt;((metadata["age"] &amp;gt; 18) and (metadata["status"] == "active"))&lt;/code&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;向量数据库&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;Elasticsearch&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;code&gt;{bool={must=[{range={age={gt=18}}}, {term={status={value=active}}}]}}&lt;/code&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;全文检索&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;SQL&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;code&gt;WHERE age &amp;gt; 18 AND status='active'&lt;/code&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;数据库查询&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;四、典型应用场景&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;动态规则引擎：金融风控规则配置&lt;/li&gt; 
 &lt;li&gt;智能路由：微服务调用条件路由&lt;/li&gt; 
 &lt;li&gt;低代码平台：表单校验逻辑动态配置&lt;/li&gt; 
 &lt;li&gt;数据分析：实时数据过滤与计算&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;五、快速入门&lt;/h2&gt; 
&lt;h3&gt;1. 添加依赖&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.noear&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;solon-expression&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;最新版本&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. 基础用法示例&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;class&lt;/span&gt; &lt;span style="color:#c18401"&gt;Demo&lt;/span&gt; {
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;static&lt;/span&gt; &lt;span style="color:#a626a4"&gt;void&lt;/span&gt; &lt;span style="color:#4078f2"&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; {
        Map&amp;lt;String,Object&amp;gt; context = &lt;span style="color:#a626a4"&gt;new&lt;/span&gt; &lt;span style="color:#c18401"&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();
        context.put(&lt;span style="color:#50a14f"&gt;"price"&lt;/span&gt;, &lt;span style="color:#986801"&gt;99.5&lt;/span&gt;);
        context.put(&lt;span style="color:#50a14f"&gt;"discount"&lt;/span&gt;, &lt;span style="color:#986801"&gt;0.8&lt;/span&gt;);
        
        &lt;span style="color:#986801"&gt;Object&lt;/span&gt; &lt;span style="color:#986801"&gt;result&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; SnEL.eval(&lt;span style="color:#50a14f"&gt;"price * discount &amp;gt; 50"&lt;/span&gt;, context);
        System.out.println(&lt;span style="color:#50a14f"&gt;"是否符合条件："&lt;/span&gt; + result);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3. 性能优化建议&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;复用解析结果：对固定表达式使用 SnEL.parse() 缓存 AST&lt;/li&gt; 
 &lt;li&gt;上下文优化：复杂对象优先使用 StandardContext&lt;/li&gt; 
 &lt;li&gt;避免频繁解析：高并发场景预编译表达式&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;六、企业实践案例&lt;/h2&gt; 
&lt;h3&gt;案例 1：电商促销系统&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;em&gt;// 动态计算促销条件&lt;/em&gt;
&lt;span style="color:#986801"&gt;String&lt;/span&gt; &lt;span style="color:#986801"&gt;rule&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"""
    (user.level IN ['VIP','SVIP'] OR order.amount &amp;gt; 1000) 
    AND inventory.stock &amp;gt; 0 
    AND NOT blacklist.contains(user.id)"""&lt;/span&gt;;
    
&lt;span style="color:#986801"&gt;Boolean&lt;/span&gt; &lt;span style="color:#986801"&gt;rst&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; SnEL.eval(rule, context);&lt;/code&gt;&lt;/pre&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356941</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356941</guid>
      <pubDate>Sat, 10 May 2025 00:43:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>宇树王兴兴为高考生送上报考建议</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;随着高考成绩、分数线陆续公布，对于那些想投身具身智能行业的考生，宇树科技创始人王兴兴发文结合自身的经历给出一些专业报考建议。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="264" src="https://oscimg.oschina.net/oscnet/up-513fc7219a635ce3cbb2d6d3d7ae7738440.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;如果你从小喜欢拆解维修一些电子产品，或者动手 DIY 做点东西，推荐学习机械或电子相关专业。具体的专业细分名字很多，请注意区分，对于自己感兴趣的学校和专业，大家最好直接去对应学院的官网，直接看看具体的详细介绍，看看老师们在做什么课题或项目。哪怕专业名字一模一样，每个学校的差别也非常大。中间如果想多学习 AI，也可以多花时间自学。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;如果你对智能如何产生感兴趣、如果你有 AGI 的梦想，且数学还不错，推荐直接学习计算机科学/人工智能相关专业，也一并请直接多查查对应学院的详细信息，甚至可以直接先去对应实验室看看。当然，还是建议中间可以稍微花一些时间，学习一些硬件相关的原理，比如自己动手画个 PCB 板子等，简单实用。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;当然，现实里，大多数同学没有那么幸运，能直接进入自己理想的学校和专业，或者进入以后发现不适合自己或者不喜欢。这其实完全不是大问题，非常常见和正常。请不要放弃努力寻找自己喜欢和擅长的事，寻找新的方向，并请一定努力去实践。你可以转专业，哪怕转不了，也一点问题没有，你可以直接去找自己感兴趣方向的老师，直接沟通去他的实验室做事，甚至完全可以直接全都自学。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;后续上学时，请大家也不要局限于书本和论文，具身智能是物理世界的智能，一定要多动手，拧螺丝、调电路、写程序、debug，马上自己动手编程，进入实验室、参与机器人比赛等等，在实战中迅速提升自己。我自己至今，也还会自己直接上手拆装零部件，敲敲代码等。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;如果你想成为最顶尖的人才，一定要超脱课本，主动持续学习，学习当下最前沿的科技领域。持续关注顶级学术会议最新论文等；积极参与最具探索性的开源项目并尝试复现和改进；与同样渴望挑战边界的同学、研究者组建小组，共同探讨前沿问题，碰撞思想。每个同学，都有机会成为全人类未来科技方向的探索者和实践者。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;最后，我想说，在未来的学业中，你们或许会感到迷茫，不知前进的方向，但不要担心，每个人都会迷茫，我也一样。在大学期间，要较多的探索自己的多种可能性，多尝试，找到爱好点和擅长点。如果你的爱好恰巧也是你擅长的，那恭喜你，你找到了可以为之奋斗一生的目标。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;在成长过程中，你们可能目睹了一次又一次的时代浪潮，见证了一个又一个商业奇迹，外贸、房地产、基建、互联网、消费电子、移动互联网、新能源汽车，等等。可能你们会羡慕前人，觉得机会变少了，觉得宇宙的科技树没有太多可以探索的了。但请不要灰心，AI 和机器人的时代才刚刚开始，还有大量的挑战和机会在等你们。&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356888</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356888</guid>
      <pubDate>Fri, 09 May 2025 10:18:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>网易有道开源首个专注数学教育的模型 Confucius3-Math</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;网易有道宣布正式开源「子曰 3」系列大模型的数学模型（英文名称 Confucius3-Math），这是国内首个专注于数学教育，可在单块消费级 GPU 上高效运行的开源推理模型。&lt;/p&gt; 
&lt;p&gt;据了解，Confucius3-Math 是由网易有道 AI 团队开发的&lt;strong&gt;140 亿参数开源推理大语言模型&lt;/strong&gt;，专门针对 K-12 数学教育场景进行优化。与通用模型不同，Confucius3-Math 具有以下特点：&lt;/p&gt; 
&lt;p&gt;✅&lt;strong&gt;数学任务上的顶尖性能&lt;/strong&gt;&lt;br&gt; 通过专门的强化学习训练，在中文 K-12 数学问题上的表现超越了参数规模更大的模型&lt;/p&gt; 
&lt;p&gt;✅&lt;strong&gt;高性价比的部署方案&lt;/strong&gt;&lt;br&gt; 可在单张消费级 GPU（如 RTX 4090D）上高效运行&lt;/p&gt; 
&lt;p&gt;✅&lt;strong&gt;文化与课程体系的深度契合&lt;/strong&gt;&lt;br&gt; 针对中国国家数学课程标准和解题方法论进行了优化&lt;/p&gt; 
&lt;p&gt;Confucius3-Math 采用纯强化学习的后期训练流程，结合创新的数据调度策略和改进的组相对优势估计器开发而成。Confucius3-Math 在解决国内数学问题任务中展现出了显著优势。其通过大规模增强学习以及一系列的创新算法，训练成本仅为 2.6 万美元，推理性能约为 DeepSeek R1 的 15 倍。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-8732b5278351553b8f60ad1d228c44e8d50.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;附 1：Demo 地址，欢迎试用&lt;br&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fconfucius.youdao.com%2F" target="_blank"&gt;https://confucius.youdao.com/&lt;/a&gt;&lt;br&gt; 附 2：模型开源地址&lt;br&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnetease-youdao%2FConfucius3-Math" target="_blank"&gt;https://github.com/netease-youdao/Confucius3-Math&lt;/a&gt;&lt;br&gt; 附 3：论文地址&lt;br&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnetease-youdao%2FConfucius3-Math%2Fblob%2Fmain%2FConfucius3-Math.pdf" target="_blank"&gt;https://github.com/netease-youdao/Confucius3-Math/blob/main/Confucius3-Math.pdf&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356885</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356885</guid>
      <pubDate>Fri, 09 May 2025 09:50:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
  </channel>
</rss>
