<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-综合资讯</title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="http://8.134.148.166:30044/oschina/news/industry" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-综合资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Tue, 01 Apr 2025 21:37:14 GMT</lastBuildDate>
        <ttl>5</ttl>
        <item>
            <title>AI 搜索创企 Perplexity：公司资金充裕、2028 年前无 IPO 规划</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;AI 搜索创企 Perplexity 联合创始人兼首席执行官 Aravind Srinivas 在 Reddit &lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reddit.com%2Fr%2Fperplexity_ai%2Fcomments%2F1jm2ekd%2Fmessage_from_aravind_cofounder_and_ceo_of%2F&quot; target=&quot;_blank&quot;&gt;发帖回应&lt;/a&gt;&lt;/u&gt;了网友近期对该企业状况和产品的关切。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;5518&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3ec5a737796ef123a3daf35370e97fd9c3c.png&quot; width=&quot;1494&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;在财务方面，他表示 Perplexity 目前资金充裕，收入正处于上升轨道，没有在 2028 年前进行 IPO 计划；此前推出的 Auto 自动选择模型搜索模式不是为了节约成本，而是为了让产品更好&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;对于 Auto 模式，Aravind Srinivas 表示目前包括 Perplexity 自身在内的 AI 模型开发企业正在快速推出新的模型产品，一个一个地添加搜索模型选项是不可持续的，Auto 模式简化了用户的学习使用流程。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-07e1f07e2d722d7b2a07a6979e9844b1637.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Perplexity 还正在开发一种更为强大的深度研究智能体，可进行 30 分钟乃至更长时间的思考。该企业正为此大规模重写基础架构，以便大规模实现这一智能体所需的人机交互、工具使用、代码执行能力。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;阅读更多&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/340590/perplexity-rebuilding-tiktok-in-america&quot; target=&quot;news&quot;&gt;Perplexity 欲收购 TikTok 并开源其算法&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/335658/perplexity-teases-a-web-browser-called-comet&quot; target=&quot;news&quot;&gt;AI 搜索引擎 Perplexity 将开发「代理搜索」 Web 浏览器 Comet&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342330/perplexity-no-ipo-before-2028</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342330/perplexity-no-ipo-before-2028</guid>
            <pubDate>Sat, 22 Mar 2025 11:44:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>MeiliSearch AI 发布：集语义、混合搜索为一体，提供多模态能力</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;MeiliSearch 原本是一个 Rust 开发的 ElasticSearch 开源替代品，在&lt;strong&gt;开发体验、部署难度、性能可用性&lt;/strong&gt;上，都是相当有竞争力的轻量级选择。&lt;/p&gt; 
&lt;p&gt;MeiliSearch 近日发布了&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.meilisearch.com%2Fblog%2Fintroducing-meilisearch-ai&quot; target=&quot;_blank&quot;&gt; MeiliSearch AI&lt;/a&gt;&lt;/u&gt;，这是 Meilisearch 的新版本，具有以下特点：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;语义搜索&lt;/strong&gt;&lt;/strong&gt;：不仅匹配关键词，还能理解搜索意图。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;混合搜索&lt;/strong&gt;&lt;/strong&gt;：结合全文搜索与 AI 向量搜索，提高搜索精准度。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;多模态能力&lt;/strong&gt;&lt;/strong&gt;：支持图片搜索等多种搜索模式。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;内置向量数据库&lt;/strong&gt;&lt;/strong&gt;：无需额外搭建向量数据库，简化基础设施。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;优化性能&lt;/strong&gt;&lt;/strong&gt;：搜索结果极速返回，延迟低于 50 毫秒。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0401/182254_M83f_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在 AI 时代，搜索早已不是简单的「关键词匹配」，而是成为了用户获取知识、信息、甚至创意的&lt;strong&gt;重要入口，特别是向量数据库为如今热火朝天的 RAG 应用提供了更多的选择&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;Meilisearch AI 这些新特性，在当前和未来的应用中具有非常大的价值。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;全文搜索：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;纠正拼写错误&lt;/strong&gt;：例如，将「reutrn of the jedi」纠正为「return of the jedi」。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;处理精确查询&lt;/strong&gt;：适用于输入确切产品名称的情况。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;处理不完整查询&lt;/strong&gt;：如输入「return of the j」也能找到相关结果。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;无法处理模糊查询&lt;/strong&gt;：例如，输入「拿着光剑战斗的人」时，可能无法找到相关结果。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;缺乏上下文理解&lt;/strong&gt;：如搜索「冬季服装」时，可能无法全面理解用户需求。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;向量搜索：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;处理模糊查询&lt;/strong&gt;：例如，输入「第一部上映的星球大战电影」时，能够找到相关结果。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;理解上下文&lt;/strong&gt;：如搜索「冬季服装」时，能理解并提供相关的衣物推荐。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;推荐相似文档&lt;/strong&gt;：能够根据语义相似性推荐相关内容。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;无法处理精确查询&lt;/strong&gt;：对于需要精确匹配的查询，向量搜索可能不够准确。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;资源需求较高&lt;/strong&gt;：计算和存储向量表示需要更多的计算资源和存储空间。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;鉴于两者各有优缺点，&lt;strong&gt;混合搜索&lt;/strong&gt;应运而生。混合搜索结合了全文搜索的词汇匹配能力和向量搜索的语义理解能力，提供更全面和精确的搜索体验。&lt;/p&gt; 
&lt;p&gt;例如，Meilisearch 的混合搜索功能允许开发者通过统一的 API 实现这一结合。在 Meilisearch 中，您可以通过设置&amp;nbsp;&lt;code&gt;hybrid&lt;/code&gt;&amp;nbsp;参数来配置混合搜索，调整&amp;nbsp;&lt;code&gt;semanticRatio&lt;/code&gt;&amp;nbsp;的值，以平衡全文搜索和向量搜索的比重，从而优化搜索结果的相关性和精确度。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// Hybrid search with Meilisearch

const results = await client.multiSearch({
queries: [{ 
indexUid: &#39;movies&#39;, 
q: &#39;batman&#39;,
hybrid: { embedder: &#39;default&#39;, semanticRatio: 0.5 }
}]
})&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;通过结合两种搜索方法的优势，混合搜索为用户提供了更智能、更高效的搜索体验。&lt;/p&gt; 
&lt;p&gt;关于向量数据库，MeiliSearch 专门写了一篇博客进行介绍：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.meilisearch.com%2Fblog%2Fwhat-are-vector-embeddings&quot; target=&quot;_blank&quot;&gt;https://www.meilisearch.com/blog/what-are-vector-embeddings&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;相关文档：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.meilisearch.com%2Fdocs%2Flearn%2Fai_powered_search%2Fgetting_started_with_ai_search%23getting-started-with-ai-powered-search&quot; target=&quot;_blank&quot;&gt;https://www.meilisearch.com/docs/learn/ai_powered_search/getting_started_with_ai_search#getting-started-with-ai-powered-search&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.meilisearch.com%2Fblog%2Ffull-text-search-vs-vector-search&quot; target=&quot;_blank&quot;&gt;https://www.meilisearch.com/blog/full-text-search-vs-vector-search&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342317/meilisearch-ai</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342317/meilisearch-ai</guid>
            <pubDate>Sat, 22 Mar 2025 10:27:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>黑莓手机有望回归：搭载 Android 15、支持 AI</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;Reddit 上的一篇帖子&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reddit.com%2Fr%2Fblackberry%2Fcomments%2F1jmalqp%2Fcomment%2Fmkgfbpi%2F&quot; target=&quot;_blank&quot;&gt;透露&lt;/a&gt;&lt;/u&gt;，一家英国的初创公司正悄悄努力复活 Blackberry Classic 及 Onward Mobility 未完成的产品。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-df07f63db4adb240ebafad1ec113d909b4f.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Reddit 用户 u/coldheartedsigma 在黑莓 subreddit 分享了这一消息，但由于签署了保密协议，未能透露具体的品牌名称或展示完整设计。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;帖子提到，新设备将具备 5G、AMOLED 显示屏、12GB RAM 和 256GB 或 512GB 存储空间等高端配置。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;据称，新版黑莓将运行 Android 15 系统，并支持一定程度的生成式 AI 技术，同时配备电容式键盘。&lt;/p&gt; 
&lt;p&gt;此外，还有一款基于 QWERTY 键盘的新设备正在规划中，该初创公司正与黑莓洽谈专利独家许可事宜。&lt;/p&gt; 
&lt;p&gt;虽然 u/coldheartedsigma 分享了一张图片，但几乎无法辨认任何有用信息。&lt;strong&gt;从模糊的图像中只能勉强看出「Blackberry Patents」、「QWERTY」和「The world&#39;s first」这几个词。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e7b1756db87a99da9db420f8d3d4fa31820.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;对于那些期待黑莓回归的人来说，这家初创公司即使成功开发出类似黑莓的设备，也可能不会使用黑莓的名字。&lt;/p&gt; 
&lt;p&gt;因为黑莓已退出智能手机市场，所以这家公司如果真的推出产品，那也只是一款外观相似的手机，而非真正意义上的「黑莓」手机。不过，这也给怀念经典 QWERTY 键盘手机的用户带来了一丝希望。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342306/reddit-says-blackberry-is-back</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342306/reddit-says-blackberry-is-back</guid>
            <pubDate>Sat, 22 Mar 2025 09:55:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>AI 时代软件供应链面临重大安全危机：机密泄露激增 64%</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;JFrog 公司近日发布了《2025 年软件供应链现状报告》，揭示了在人工智能（AI）迅速发展的背景下，软件供应链所面临的严峻安全挑战。根据该报告，研究团队通过对 1400 多名专业人士的调研，以及来自 7000 多家客户的数据分析，勾勒出了一幅令人为之担忧的安全图景。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;报告指出，过去一年中，软件供应链的安全漏洞急剧增加，其中 「秘密」 或机密信息的曝光案例同比增长了 64%，总计达到了惊人的 25229 例。这一数据表明，随着企业对机器学习（ML）模型的依赖加深，安全风险也在不断上升。尽管 94% 的公司表示使用认证清单来管理 ML 模型，但其中 37% 的公司仍依赖手动方式进行验证，显然这加大了安全隐患。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;329&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-099c553624560d1a8503e298c286617a7f9.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;与此同时，2024 年新增的安全漏洞（CVE）数量也高达 33000 个，相比 2023 年增加了 27%。令人担忧的是，只有 12% 的 CVE 被证实真的具有 「严重」 级别，这或许反映出评分系统存在 「膨胀」 现象，可能导致开发者面临不必要的修复压力和工作疲惫。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;JFrog 的首席技术官 Yoav Landman 指出，尽管许多组织在积极采用公共 ML 模型推动创新，但缺乏自动化的工具链和治理流程使得安全管理愈加复杂。他呼吁，企业在快速发展的 AI 环境中，应加速自动化转型，以确保在提升创新潜力的同时，也能保障软件的安全性。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;整体来看，当前的软件供应链安全问题不仅是技术上的挑战，更是企业管理与运营方式的考验。在 AI 时代，建立更为严密的安全防护措施，已经成为各大企业亟需面对的任务。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342305</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342305</guid>
            <pubDate>Sat, 22 Mar 2025 09:54:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>亚马逊发布可控制 Web 浏览器的 AI 智能体 Nova Act</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;亚马逊发布了 Nova Act，这是一款通用 AI 代理，可以控制网络浏览器并独立执行一些简单的操作。除了新的代理 AI 模型外，亚马逊还发布了 Nova Act SDK，这是一个工具包，允许开发人员使用 Nova Act 构建代理原型。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e2681b71429ea88e9c90005a9abadc4007f.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Nova Act 由亚马逊新近在旧金山开设的 AGI 实验室开发，还将为该公司即将推出的 Alexa+ 升级版提供关键功能，Alexa+ 是亚马逊广受欢迎的语音助手的生成式 AI 增强版。不过，从今天开始提供的 Nova Act 版本略显逊色。亚马逊称其为研究预览版。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d1adc5835a26d72e30965641b814c1462f0.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;开发人员可以通过新网站 nova.amazon.com 访问 Nova Act 工具包，该网站也是亚马逊各种 Nova 基础模型的展示。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-2f6e472c5dea52938cb18c4e2cde8f294d4.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Nova Act 是亚马逊试图利用自己的通用人工智能代理技术与 OpenAI 的 Operator 和 Anthropic 的 Computer Use 竞争的尝试。几家领先的科技公司认为，能够为用户导航网络的人工智能代理将使当今的人工智能聊天机器人更加有用。&lt;/p&gt; 
&lt;p&gt;亚马逊可能不是第一个开发这种代理技术的公司，但通过 Alexa+，它的覆盖范围可能是最广泛的。&lt;/p&gt; 
&lt;p&gt;亚马逊表示，使用 Nova Act SDK 进行开发的开发人员应该能够代表用户自动执行基本操作，例如从 Sweetgreen 订购沙拉或预订晚餐。借助 Nova Act 工具包，开发人员可以整合工具，让 AI 代理浏览网页、填写表格或在日历上选择日期。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e7474d0e9288f2459b2a8abe46b37bc9287.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;亚马逊声称，Nova Act 在公司内部的几项测试中表现优于 OpenAI 和 Anthropic 的代理。例如，在衡量 AI 代理如何与屏幕上的文本交互的 ScreenSpot Web Text 中，Nova Act 得分为 94%，优于 OpenAI 的 CUA（得分为 88%）和 Anthropic 的 Claude 3.7 Sonnet（90%）。&lt;/p&gt; 
&lt;p&gt;不过，亚马逊并没有使用更常见的代理评估（例如 WebVoyager）来对 Nova Act 进行基准测试。&lt;/p&gt; 
&lt;p&gt;Nova Act 是亚马逊上述 AGI 实验室推出的首款公开产品，该项目由前 OpenAI 研究员 David Luan 和 Pieter Abbeel 共同领导。两人之前都创立过自己的初创公司——Luan 创办了 Adept，而 Abbeel 共同创办了 Covariant——去年亚马逊聘请他们来领导其 AI 代理工作。&lt;/p&gt; 
&lt;p&gt;虽然 AGI 实验室开发能够订购 SweetGreen 的 AI 代理似乎有些奇怪，但 Luan 认为代理是创建超级智能 AI 系统的关键一步。Luan 将 AGI 定义为「一种能够帮助您完成人类在计算机上所做的一切的 AI 系统」。&lt;/p&gt; 
&lt;p&gt;Luan 表示，他的团队设计了 Nova Act SDK，以可靠地自动执行简短的任务，并为开发人员提供工具，让他们能够精确定义何时需要人工干预代理工作流程。他希望，这将使开发人员能够创建更可靠的代理应用程序，尽管不一定是完全自主的应用程序。&lt;/p&gt; 
&lt;p&gt;亚马逊在竞争激烈的市场中推出了首款通用人工智能代理，但这是该公司寄予厚望的一项关键技术。Nova Act 的早期测试可以让人们一窥拖延已久的 Alexa+ 的一些功能，这对亚马逊的人工智能努力来说是一个成败攸关的时刻。&lt;/p&gt; 
&lt;p&gt;OpenAI、Google 和 Anthropic 的早期人工智能代理的主要问题是它们在不同领域的可靠性。在 TechCrunch 的测试中，这些系统速度很慢，难以长时间独立运行，而且容易犯人类不会犯的错误。我们很快就会看到亚马逊是否破解了密码——或者它的代理是否也存在困扰竞争对手的同样缺陷。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相关链接&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.aboutamazon.com%2Fnews%2Finnovation-at-amazon%2Famazon-nova-website-sdk%E3%80%81https%3A%2F%2Fgithub.com%2Faws%2Fnova-act&quot; target=&quot;_blank&quot;&gt;https://www.aboutamazon.com/news/innovation-at-amazon/amazon-nova-website-sdk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.aboutamazon.com%2Fnews%2Finnovation-at-amazon%2Famazon-nova-website-sdk%E3%80%81https%3A%2F%2Fgithub.com%2Faws%2Fnova-act&quot; target=&quot;_blank&quot;&gt;https://github.com/aws/nova-act&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342304/amazon-nova-website-sdk</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342304/amazon-nova-website-sdk</guid>
            <pubDate>Sat, 22 Mar 2025 09:39:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>模力方舟 Moark-M1 震撼发布：吊打全球大模型、每秒数万 Token、速度碾压闪电</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;今天，模力方舟怀着「严谨且真诚」的态度，向全球代码界宣布一项革命性突破 ——&lt;code&gt;Moark-M1&lt;/code&gt;，通过独创的&amp;nbsp;&lt;code&gt;FishNet 神经融合引擎（FishNet Neuro-Fusion Engine, FNFE）&lt;/code&gt;，&lt;strong&gt;实现了「推理速度快过闪电、训练成本低于一杯奶茶、腹有笑话气自华」的不可能三角！&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;524&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0401/172335_9Xe6_2720166.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;核心技术：FNFE&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;Moark-M1&lt;/code&gt;的&lt;code&gt;FishNet&lt;/code&gt;核心理念源于对自然界最高效、最复杂系统之一——&lt;strong&gt;海洋生态系统&lt;/strong&gt;，特别是鱼群集体智能行为模式的深刻洞察。&lt;/p&gt; 
&lt;p&gt;我们不再局限于传统的硅基计算思路，而是开创性地将仿生神经形态学与流体动力学计算相结合，构建了一个前所未有的计算架构：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;参数折叠黑魔法&lt;/strong&gt;：按需激活必要神经元，推理时内存占用直降 99%，仅需 1 核 CPU+512MB 内存即可运行！&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;分布式群体智能核心&lt;/strong&gt;：模拟鱼群的实时协同决策机制，FNFE 拥有数以亿计的微型「神经元节点」，能够像鱼群一样瞬时同步、动态重组，实现对超大规模复杂数据流的自适应并行处理。其处理效率，我们内部戏称为「Peta-Fins/s」（每秒千万亿次「鳍」算力）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;量子级并行推理技术&lt;/strong&gt;：每个神经元同时处理 8 个浮点运算，速度快到天际！&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;六大维度碾压现有模型&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0401/172407_MOjW_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;成本：穷到只剩才华&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;本模型从 0 到 1，总成本仅需 20 元，约等于竞品模型的 0.0001%&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;单轮对话消耗仅相当于一口呼吸的能量（实验室温 25℃，实验人身高 175CM，体重 70KG）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;速度：闪电般的思维过程&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;文本生成速度突破达&amp;nbsp;&lt;strong&gt;23333 token/s&lt;/strong&gt;，眨个眼就好辣~&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;既有思考又有结果，秒出秒看！&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;稳定：比磐石更可靠&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;独创永动机对话协议，基于 M/M/1 队列模型优化，永远都会回应你的请求！&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任何设备都可以跑，模型本体智能自我复制很多份，根本挂不掉！&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;帅气：颜值担当&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;你看我的标，多好看~&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;你看我的名字，多好听~&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;笑话：「鱼」乐精神&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;本模型的任何回复都是富有笑话的！&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;莫怪本模型太幽默，只因「训练数据」就如此~&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;愚人节：气氛烘托组&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;本模型守口如瓶，拒不承认是愚人节的产物，就算你祝它&lt;strong&gt;愚人节快乐&lt;/strong&gt;，它也不会承认的&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;成功破解本模型愚人节彩蛋者，将获得 Moark 官方认证的「AI 诈骗大师」称号&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0401/172421_229q_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;适配超多国产算力&lt;/h2&gt; 
&lt;p&gt;此外，&lt;code&gt;天数智芯&lt;/code&gt;、&lt;code&gt;沐曦&lt;/code&gt;、&lt;code&gt;升腾&lt;/code&gt;、&lt;code&gt;曙光智算&lt;/code&gt;、&lt;code&gt;无问芯穹&lt;/code&gt;五家国产算力厂商通过与模力方舟团队连夜的通力合作，挖掘出了国产芯片的超强潜力，将这个史诗级模型以 100% 的性能顺利部署，完成了硬件适配工作。现在开发者可以使用本土算力享受&lt;code&gt;Moark-M1&lt;/code&gt;带来的超爽体验！&lt;/p&gt; 
&lt;h2&gt;立即体验&lt;/h2&gt; 
&lt;p&gt;即日起，&lt;code&gt;Moark-M1&lt;/code&gt;开启免费体验：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0401/172433_wpIH_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;直接开启你的体验吧！&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://ai.gitee.com/serverless-api?model=moark-m1&quot; target=&quot;_blank&quot;&gt;https://ai.gitee.com/serverless-api?model=moark-m1&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342297</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342297</guid>
            <pubDate>Sat, 22 Mar 2025 09:25:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Higress 开源 Remote MCP Server 托管方案，并将上线 MCP 市场</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;p&gt;导读：MCP Server 的实施存在着诸多挑战，特别是在认证授权、服务可靠性和可观测性方面，Higress 作为 AI 原生的 API 网关，提供了完整的开源 MCP Server 托管解决方案，实现存量 API 到 MCP 的协议转换。即将上线的 MCP 市场，将大幅降低开发者构建 MCP Server 的时间和人力成本。&lt;/p&gt; 
&lt;h1&gt;从事实标准走向真正标准&lt;/h1&gt; 
&lt;p&gt;MCP（Model Context Protocol）协议的生态发展正以前所未有的速度推进。近期，两大关键事件标志着 MCP 已从事实标准迈向行业标准：一方面，OpenAI 正式宣布跟进 Anthropic 的 MCP 协议，另一方面，Anthropic 发布了新版本 MCP 协议，在 Remote MCP Server 场景下实现了显著改进。&lt;/p&gt; 
&lt;p&gt;OpenAI CEO Sam Altman 在社交媒体上确认，OpenAI 将在旗下产品（包括 ChatGPT 桌面应用）中集成 Anthropic 的 MCP 协议。Altman 表示：&quot;MCP 的市场反响很好，我们也很高兴能在自家产品中支持这项协议。目前此协议已经在 Agents SDK 中开放，对于 ChatGPT 桌面版应用以及 Responses API 的支持也即将推出！&quot;这一举措意味着开发者可以更轻松地构建能调用实时数据的智能助手，如企业级聊天机器人或自动化工作流。&lt;/p&gt; 
&lt;p&gt;与此同时，Anthropic 于 2025 年 3 月 26 日发布了 MCP 协议的全新修订版本。此次更新的核心亮点是 Streamable HTTP 传输机制，它不仅继承了 HTTP+SSE 的实时消息传输能力，还通过一系列优化使得连接更加稳定、数据传输更具弹性。新版协议采用单一 MCP 端点同时支持 HTTP POST 和 GET 请求，通过强制使用 Mcp-Session-Id 头实现会话管理，并支持批量请求、响应和通知，以及 SSE 流的可恢复性。&lt;/p&gt; 
&lt;p&gt;这两大事件的叠加效应正在加速 MCP 生态的繁荣发展。据统计，截至 2025 年 2 月，已有超过 1000 个社区构建的 MCP Server 可用。随着 OpenAI 的加入，MCP 协议有望成为连接 AI 模型与外部世界的通用标准，就像 USB、HTTP 或 ODBC 在各自领域中的地位一样。&lt;/p&gt; 
&lt;h1&gt;MCP Server 的应用场景&lt;/h1&gt; 
&lt;p&gt;MCP Server 正在改变 AI 应用的能力边界，让 AI 从单纯的对话机器变成能够理解用户需求并帮助完成实际任务的智能助手。以下是 MCP Server 在不同领域的典型应用场景：&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;智能办公场景&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;在企业办公环境中，MCP Server 可以连接各种内部系统，如邮件服务器、日历、文档管理系统等，使 AI 助手能够：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;会议管理&lt;/strong&gt;：自动记录会议内容，生成会议纪要，并根据讨论创建待办事项&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;邮件处理&lt;/strong&gt;：分类重要邮件，起草回复，设置提醒&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;文档协作&lt;/strong&gt;：在团队文档中查找信息，提供编辑建议，跟踪变更&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;例如，一位经理可以要求 AI 助手：&quot;整理上周所有销售会议的要点，并创建一个行动项目清单。&quot;AI 助手通过 MCP Server 访问会议记录系统和项目管理工具，自动完成这一任务。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;物联网 (IoT) 集成&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;在智能家居和工业物联网环境中，MCP Server 可以连接各种智能设备和传感器，实现：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;设备状态监控&lt;/strong&gt;：实时跟踪设备运行状况，预测维护需求&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;跨设备协同&lt;/strong&gt;：协调多个设备共同完成复杂任务&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;环境优化&lt;/strong&gt;：根据用户偏好和使用模式自动调整环境参数&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;用户可以要求：&quot;当我明天早上 7 点起床时，提前 20 分钟开启咖啡机，并将客厅温度调整到 22 度。&quot;AI 助手通过 MCP Server 与智能家居系统通信，安排这些任务。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;开发者工具集成&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;软件开发团队可以利用 MCP Server 连接代码仓库、CI/CD 管道和项目管理工具，提升开发效率：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;代码辅助&lt;/strong&gt;：根据项目上下文生成代码，提供重构建议&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;自动化测试&lt;/strong&gt;：生成测试用例，执行测试并分析结果&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;项目管理&lt;/strong&gt;：跟踪任务进度，分配资源，预测交付时间&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;开发者可以要求：&quot;分析我们的代码库，找出所有未处理的异常情况，并提供修复建议。&quot;AI 助手通过 MCP Server 访问代码仓库，执行静态分析，并生成详细报告。&lt;/p&gt; 
&lt;h1&gt;Local MCP Server 与 Remote MCP Server&lt;/h1&gt; 
&lt;p&gt;随着 MCP 生态的发展，从 Local MCP Server 向 Remote MCP Server 的演进已成为一种趋势。为了更好地理解这一转变，我们需要先明确这两种 MCP Server 的概念和区别。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Local MCP Server 与 Remote MCP Server 的概念&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Local MCP Server&lt;/strong&gt;是指在用户本地设备上运行的 MCP 服务器。在这种模式下， MCP 客户端（如 Claude Desktop 或 Cursor）通过本地进程通信（stdin/stdout）与 MCP 服务器交互，服务器再连接到互联网上的各种 API 和服务。这种架构简单直接，适合个人开发者使用，但存在一些局限性。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-b669fca68f805881b21edff7ab16c4978ce.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Remote MCP Server&lt;/strong&gt; 则是部署在云端的 MCP 服务器，用户可以通过互联网访问。在这种模式下，MCP 客户端可以是更广泛的网页应用或移动应用，它们通过 HTTP 协议与远程 MCP 服务器通信。Remote MCP Server 通常集成了认证授权、状态管理、数据库访问等企业级功能，能够为多用户提供服务。&lt;/p&gt; 
&lt;p&gt;这种转变解决了 Local MCP Server 在企业环境中的诸多局限性。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-c4f19e9ecf3a41899580b83f715ffb78e8b.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Local MCP Server 的局限&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Local MCP Server 虽然简单易用，但在企业级应用中面临诸多挑战：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;本地环境依赖&lt;/strong&gt;：对用户本地环境有依赖，比如需要安装 python 或 docker 等执行环境来运行 MCP Server，对非技术用户不友好&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;安全风险&lt;/strong&gt;：企业不可能将敏感数据库凭证、API 密钥或其他关键访问令牌配置给每个员工的本地环境。这不仅违反最小权限原则，还大大增加了凭证泄露的风险。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;一致性问题&lt;/strong&gt;：当多个用户需要访问相同的企业资源时，难以保证配置和权限的一致性，容易导致数据不一致或权限混乱。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;维护成本&lt;/strong&gt;：为每个用户设备部署和维护 MCP Server 需要大量 IT 资源，版本更新、安全补丁和配置变更都需要在每台设备上单独执行。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;strong&gt;Remote MCP Server 的优势&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Remote MCP Server 通过集中化部署和管理，解决了上述问题：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;拓宽使用场景&lt;/strong&gt;：非技术用户可以通过网页或移动应用等，随时随地通过互联网使用 MCP 能力。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;集中化安全管控&lt;/strong&gt;：企业可以在远程服务器上实施严格的访问控制、加密和审计机制，确保敏感凭证的安全。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;统一权限管理&lt;/strong&gt;：通过集中化的身份验证和授权系统，企业可以精确控制每个用户对不同资源的访问权限。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;简化部署与维护&lt;/strong&gt;：只需维护中央服务器，大大降低了运维成本和复杂性。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Higress 开源 Remote MCP Server 托管方案&lt;/h1&gt; 
&lt;p&gt;虽然远程 MCP Server 具有诸多优势，但其实施也带来了新的挑战，特别是在认证授权、服务可靠性和可观测性方面。这正是 API 网关所擅长的领域，而 Higress 作为 AI 原生的 API 网关，提供了完整的开源 MCP Server 托管解决方案：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-62f24422a55239096009a36407979f650d1.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;该方案已经更新到 Anthropic 官方的 MCP Server 项目文档中，详情可以了解：&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmodelcontextprotocol%2Fservers%3Ftab%3Dreadme-ov-file%23for-servers&quot; target=&quot;_blank&quot;&gt;https://github.com/modelcontextprotocol/servers?tab=readme-ov-file#for-servers&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Higress 的 MCP Server 托管方案采用了分层架构设计，为 AI Agent 提供了完整的服务访问能力。在最上层，各种 AI Agent（如 Claude、Cursor、Cline 等）通过标准的 MCP 协议与 Higress 进行交互。Higress 内部实现了完整的安全与管控层，包括 MCP 会话保持、OAuth2 认证、审计日志、速率限制和 MCP 路由等核心功能。&lt;/p&gt; 
&lt;p&gt;在服务层面，Higress 支持 3 种 MCP Server 接入方式：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;通过 Wasm 插件在 Higress 内部实现的内置 MCP Server，适用于对接现有 SaaS API 生态提供 MCP 能力&lt;/li&gt; 
 &lt;li&gt;直接转发给外部已经支持 MCP 协议的服务，适用于对接已有的外部 MCP 能力&lt;/li&gt; 
 &lt;li&gt;通过服务注册中心（如 Nacos）动态发现外部 MCP Server，并且可以通过 Nacos 配置中心的能力动态更新 MCP Server 的工具定义，适用于企业将传统业务 API 升级为 MCP 能力&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;这种灵活的架构设计使得企业可以根据自身需求选择最适合的部署方式，既可以享受 Higress 提供的一站式托管服务，也可以保持现有 MCP Server 的独立性。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;API 网关能力与 MCP 服务的天然契合&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Higress 基于 Envoy 构建，继承了传统 API 网关在认证、授权、限流和可观测性方面的成熟能力，同时针对 AI 场景进行了优化。这些能力与 MCP 服务的需求高度契合：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;统一认证授权&lt;/strong&gt;：Higress 提供 OAuth2 插件，可以满足新版 MCP 协议对认证鉴权的要求。开发者无需编写复杂的认证代码，只需简单配置即可实现安全的用户认证和权限控制。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;精细化流量控制&lt;/strong&gt;：通过 Higress 的限流插件，可以为不同用户、不同工具设置不同的调用配额，防止资源滥用和服务过载。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;全链路可观测性&lt;/strong&gt;：Higress 集成了 Prometheus 和 OTel 等开源观测方案，提供完整的指标监控和分布式追踪能力，使运维团队能够实时监控 MCP 服务的健康状况和性能表现。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;审计日志&lt;/strong&gt;：记录所有工具调用行为，满足合规要求，同时为安全分析提供数据支持。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;strong&gt;基于 Wasm 的 MCP Server 扩展能力&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Higress 的一大技术亮点是支持 WebAssembly (Wasm) 插件，这为 MCP Server 提供了强大的扩展能力：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-8ac99cfa39a81b31bcb60cfedc317b6e38d.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;通过 Wasm 插件机制，开发者可以：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;快速添加新 Server&lt;/strong&gt;：使用多种语言（当前先提供了 Go 语言的 MCP Server SDK）开发 MCP Server，编译为 Wasm 后动态加载到 Higress 中，无需重启服务。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;安全隔离&lt;/strong&gt;：每个 Wasm 插件在独立的沙箱中运行，即使插件崩溃也不会影响网关的稳定性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;动态更新&lt;/strong&gt;：得益于 Envoy 对长连接的友好处理和 Wasm 插件的动态更新机制，MCP Server 逻辑可以在不中断流量的情况下实时更新。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;strong&gt;协议卸载的优势&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;目前 MCP 一共有两个版本的协议，分别是 20241105 版本和 20250326 版本，从协议发展来看，标准的沉淀和优化速度，难以跟上迅猛发展的 MCP Server 生态。这也为 MCP 的早期采用者埋下隐患，当构建了大量 MCP Server，面对未来协议版本升级，需要进行繁重的升级改造工作。&lt;/p&gt; 
&lt;p&gt;而在 Higress 这层网关，刚好可以帮助屏蔽多个版本的协议细节。甚至实现 MCP to REST/Dubbo 等等协议转换的能力。可以在 Higress 这层网关完成所有版本的 MCP 协议卸载。就像我们用 Higress 做为传统的 API 网关时一样，统一卸载 HTTP1/HTTP2/HTTP3 的客户端协议。&lt;/p&gt; 
&lt;p&gt;目前，Higress 可以在一个接入点上同时支持 MCP 的 20241105 版本和 20250326 版本两种协议。在协议的传输层上，支持目前最多 AI 工具采用的 POST+SSE 模式，以及最新的 Streamable HTTP 模式。我们预计未来随着应用生态对实时性的要求，WebSocket 这种全双工的双向实时通信协议会更受青睐，而得到广泛采用。Higress 原生支持 WebSocket，它能够实现全双工的双向实时通信，而且 Higress 支持 WebSocket 配置修改后连接保持以及优雅断开，到时，Higress 在 MCP 会话保持上的优势将愈加凸显。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;部署与运维优势&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Higress 的 MCP Server Hosting 方案在部署和运维方面具有显著优势：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;弹性伸缩&lt;/strong&gt;：基于 Kubernetes 的自动伸缩能力，根据流量自动调整实例数量，确保服务的高可用性和资源利用效率。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;灰度发布&lt;/strong&gt;：支持 MCP Server 的灰度发布和 A/B 测试，降低更新风险。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;一键部署&lt;/strong&gt;：提供 Helm Chart，简化部署流程，降低运维门槛。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用 Higress 托管的 MCP Server 可以轻松处理每秒数十万次的工具调用请求，同时保持毫秒级的响应时间，满足企业级应用的性能需求。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;欢迎参与 Higress MCP 生态共建&lt;/h1&gt; 
&lt;p&gt;Higress 社区正在积极推动 MCP 生态的发展，计划在 2025 年 4 月中旬在 higress.ai 上提供公开的 MCP 市场，方便用户体验 Remote MCP Server 的优势。例如👇这个视频是直接在 Cursor 上输入一个在 Higress 部署的 MCP Server 接入点，实现对接数据库 schema 编写 CRUD 代码：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-9359af4e2ceaa51d20c32e5e87ea75e0974.gif&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;通过开放的 MCP 市场，我们可以让用户无需自己部署 Higress 和 MCP Server，也体验到这样的能力。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;开放的 MCP 市场&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Higress 的 MCP 市场将提供：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;丰富的 MCP Server 生态&lt;/strong&gt;：覆盖常见的应用场景，如文档处理、数据分析、代码辅助等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;一键使用&lt;/strong&gt;：通过 Web 界面，用户可以一键获取 MCP Server 接入点，并在自己的 AI 工具中使用。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;社区共享机制&lt;/strong&gt;：开发者可以将自己开发的 MCP 工具通过开源社区 Review 后，上架到市场，提供用户使用。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;strong&gt;企业级 MCP 市场&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;除了开源社区版本，阿里云 API 网关也将很快上架 MCP 市场，面向企业用户提供更加完善的服务：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;企业级 SLA 保障&lt;/strong&gt;：提供 99.99% 的服务可用性承诺，满足企业关键业务的需求。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;合规认证&lt;/strong&gt;：通过多项安全合规认证，满足金融、医疗等行业的严格要求。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;专家支持&lt;/strong&gt;：提供 7x24 小时技术支持和咨询服务，帮助企业快速解决问题。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;这使得企业可以在享受 SaaS MCP 生态的同时，也构建自己内部的 MCP Server 生态。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;strong&gt;合作共赢&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;如果你是一家提供 SaaS 服务的企业，正在希望构建 MCP Server 从而让用户在 AI 场景下付费使用自己的 API，Higress 社区欢迎与你合作：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;技术支持&lt;/strong&gt;：提供 MCP Server 开发的技术指导，或者由我们开源社区帮助你构建。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;联合推广&lt;/strong&gt;：在 Higress 官方渠道宣传合作伙伴的 MCP 服务。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;市场入驻&lt;/strong&gt;：帮助你的 MCP Server 在 Higress 官方的 MCP 市场中上架托管。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;通过开源的方式，Higress 社区致力于推动 MCP 生态的繁荣发展，让更多开发者和企业能够轻松构建和部署 MCP Server，释放 AI 助手的全部潜力。&lt;/p&gt; 
&lt;p&gt;随着 OpenAI 和 Anthropic 等行业巨头的推动，以及 Higress 等开源项目的支持，MCP 协议正在从事实标准走向行业标准。未来，我们有理由相信，MCP 将成为连接 AI 与现实世界的关键桥梁，为各行各业带来前所未有的智能化体验。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/3874284/blog/18051447</link>
            <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/18051447</guid>
            <pubDate>Sat, 22 Mar 2025 09:17:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>FFmpeg 愚人节整活：加入 DOGE 团队，用汇编重写美国社保系统</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;FFmpeg 团队在 X 平台&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2FFFmpeg%2Fstatus%2F1906964753890545877&quot; target=&quot;_blank&quot;&gt;发文称&lt;/a&gt;&lt;/u&gt;：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#d35400&quot;&gt;&lt;strong&gt;FFmpeg 很高兴宣布加入 @DOGE 团队！ &amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#d35400&quot;&gt;&lt;strong&gt;我们将用汇编语言重写美国的社保系统，以实现尽可能高的性能。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img height=&quot;816&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0401/164612_9r8Y_2720166.png&quot; width=&quot;1114&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;近日，&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.wired.com%2Fstory%2Fdoge-rebuild-social-security-administration-cobol-benefits%2F&quot; target=&quot;_blank&quot;&gt;据外媒 《连线》报道&lt;/a&gt;&lt;/u&gt;，马斯克领导的美国政府效率部（DOGE）当前正在展开新一轮的技术革新，其计划是升级美国社会保障局（SSA）的核心支付系统，将原本用 COBOL 编写的旧代码迁移到另一种更为现代的编程语言如 Java 上， 并希望在几个月内完成。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0401/165333_ad8D_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;报道称，截至 2016 年，SSA 的软件系统中包含超过 6000 万行 COBOL 代码，并且还有数百万行其他遗留编程语言编写的代码。&lt;/p&gt; 
&lt;p&gt;此外，SSA 软件的「核心逻辑」部分也是用 COBOL 编写的，这部分代码负责颁发社会保障号码、管理支付、计算受益人应获得的总金额等关键任务。&lt;/p&gt; 
&lt;p&gt;对于政府机构使用的系统及软件，其实鲜少会升级，以防影响日常业务处理，SSA 内部亦是如此。&lt;/p&gt; 
&lt;p&gt;回看 SSA 代码库上一次重大迭代升级还要追溯到 20 世纪 80 年代，当时该机构引入了一个名为 MADAM 的数据库。该数据库不仅采用 COBOL 编写，还使用了汇编语言——莫非 FFmpeg 要来真的？&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342287</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342287</guid>
            <pubDate>Sat, 22 Mar 2025 08:53:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>清华大学开源软件镜像站的愚人节彩蛋</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;清华大学开源软件镜像站今年的愚人节彩蛋颇有意思：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;进入页面后点击鼠标左键自动进入「扔番茄」游戏&lt;/li&gt; 
 &lt;li&gt;被番茄砸中的选项卡才会打开&lt;/li&gt; 
 &lt;li&gt;所以你希望打开的选项卡多半都不能如愿，因为有「抛物线」导致的偏差&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0401/163742_J9WX_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;来体验吧：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmirrors.tuna.tsinghua.edu.cn%2F&quot; target=&quot;_blank&quot;&gt;https://mirrors.tuna.tsinghua.edu.cn/&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342283</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342283</guid>
            <pubDate>Sat, 22 Mar 2025 08:41:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>StarVector —— 用于 SVG 生成的多模态视觉语言模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                            &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;StarVector 是一种用于 Scalable Vector Graphics (SVG)&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt; 生成的多模态视觉语言模型。它可用于执行 image2SVG 和 text2SVG 生成。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img height=&quot;193&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/164955_PI0N_4252687.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;StarVector 使用多模态架构来处理图像和文本。执行 Image-to-SVG&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;（或 image vectorization）时，图像被投影到 visual tokens&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;中，并生成 SVG 代码。执行 Text-to-SVG&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;时，模型仅接收文本指令（不提供图像），并创建一个新的 SVG。LLM 基于 StarCoder，利用它将编码技能转移到 SVG 生成。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img height=&quot;242&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/164948_BxBV_4252687.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

                                                                    &lt;/div&gt;
                                                                </description>
            <link>https://www.oschina.net/p/star-vector</link>
            <guid isPermaLink="false">https://www.oschina.net/p/star-vector</guid>
            <pubDate>Sat, 22 Mar 2025 08:23:00 GMT</pubDate>
        </item>
        <item>
            <title>CDN 服务商 Akamai 宣布托管 kernel.org 核心基础设施</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;Akamai 宣布接手了&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkernel.org%2F&quot; target=&quot;_blank&quot;&gt; kernel.org&lt;/a&gt;&lt;/u&gt;&amp;nbsp;网站的托管工作，为开源 Linux 操作系统的开发和维护提供长期稳定性。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0401/155844_Cw8D_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Akamai 在&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.akamai.com%2Fnewsroom%2Fpress-release%2Fakamai-delivers-infrastructure-support-to-ensure-uninterrupted-linux-kernel-development&quot; target=&quot;_blank&quot;&gt;新闻稿&lt;/a&gt;&lt;/u&gt;中称其与 Linux 内核组织签署了一份多年合同，为该项目及其全球开发者团队提供基础设施服务。&lt;/p&gt; 
&lt;p&gt;Linux 内核非常庞大——大约有 2800 万行代码。自 2005 年以来，来自 1300 多家不同公司的 13500 名开发者为 Linux 内核贡献了代码。&lt;/p&gt; 
&lt;p&gt;此外，内核版本众多，维护者不断更新代码，并将这些代码分发给不同 Linux 发行版的开发者。现在，Akamai 向这些开发者及其用户免费提供他们所依赖的基础设施，支持开发者快速访问内核源码的 Git 环境，无论他们身在何处。&lt;/p&gt; 
&lt;p&gt;Akamai 目前托管的是 git.kernel.org 和 lore.kernel.org。在托管商 Equinix Metal 停止提供裸机服务器销售和服务之后，kernel.org 其它部分正在迁移出去。&lt;/p&gt; 
&lt;p&gt;Akamai 是 CNCF 的金牌会员，也是 KubeCon 的白金赞助商——今年早些时候，Akamai 承诺向 CNCF 项目捐赠 100 万美元。Akamai 开发人员为 Linux 内核做出了贡献，使其更加安全，是多个 CNCF 托管项目的积极贡献者，并参与了获得 Levchin 现实世界密码学奖的项目。&lt;/p&gt; 
&lt;p&gt;2022 年，Akamai 收购了 Linux 云先驱 Linode，随后在 2023 年收购了 Ondat，这是一家基于云的存储技术提供商，拥有 Kubernetes 原生平台，可在任何地方大规模运行有状态应用程序。这家云公司已通过 CNCF 认证 Kubernetes 一致性计划的认证。其 Linode Kubernetes Engine 是一个完全托管的 K8s 容器编排引擎，用于部署和管理容器化应用程序和工作负载。&lt;/p&gt; 
&lt;p&gt;Akamai 还宣布，它正在为最流行的 Linux 发行版之一 Alpine Linux 提供基础设施和交付支持。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342270/akamai-delivers-infrastructure-of-kernel-org</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342270/akamai-delivers-infrastructure-of-kernel-org</guid>
            <pubDate>Sat, 22 Mar 2025 08:03:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>微软关闭了位于上海的人工智能与物联网实验室</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.scmp.com%2Ftech%2Fbig-tech%2Farticle%2F3304621%2Fmicrosoft-shutters-ai-lab-shanghai-signalling-broader-pullback-china%3Fmodule%3Dchina_future_tech%26pgtype%3Dhomepage&quot; target=&quot;_blank&quot;&gt;《南华早报》报道称&lt;/a&gt;，微软今年早些时候关闭了位于上海张江高科技园区的物联网和 AI 实验室。&lt;/p&gt; 
&lt;p&gt;实地调查显示办公室人去楼空，logo 和办公设备都已经清空。微软的物联网和 AI 实验室于 2019 年 5 月启用，被誉为是微软与上海浦东区创新中心张江之间的旗舰合作，它占地约 2,800 平方米。&lt;/p&gt; 
&lt;p&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.leiphone.com%2Fcategory%2Findustrycloud%2FMYLDjAsumMyHqZcw.html&quot; target=&quot;_blank&quot;&gt;另据雷锋网独家报道&lt;/a&gt;&lt;/u&gt;，不久前合同临近到期时，微软方面表示不愿再投入资金，直至近期，有传言称双方合作已经终止，该实验室已经关闭。&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;该实验室于 2019 年 5 月，在上海张江的「网红岛」——张江人工智能岛上正式启用。彼时正值 AI 科技的热潮，张江集团携手一批国内外顶尖科技公司，成立了多个实验室，其中便包括微软-张江实验室。&lt;/p&gt; 
&lt;p&gt;此外，该实验室也是微软在全球设立的 7 家实验室中的一家。 &amp;nbsp;该实验室首批便有 30 多家企业和初创公司入驻，运营一年多就赋能了 90 多家企业，超过 400 个项目，场景涵盖了制造、零售、医疗、金融、城市建设等多个热点领域，在当时是标杆性的合作案例之一。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-f405a67cd9937c4f323089cb9816d03ee1b.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;截至 2024 年 6 月，实验室支持了 258 个项目，涉及近 100 家浦东企业。微软实验室支持的企业超过 50 家，吸引了逾 94 亿元人民币的外部投资。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FS8JoOsywOfTcVRYjEnts2Q&quot; target=&quot;_blank&quot;&gt;张江发布的报告显示&lt;/a&gt;，期间实验室取得了 139 项技术成果，培训了近 10,000 名专业人员。微软去年还向其亚洲研究院的员工提供了出国工作的选项。&lt;/p&gt; 
&lt;p&gt;然而在近两年，该实验室逐渐式微，这背后存在着国际大环境不确定性增强、AI 落地应用场景有限，以及外企在华降本增效甚至逐步撤离等复杂的综合因素。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342266</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342266</guid>
            <pubDate>Sat, 22 Mar 2025 07:52:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>联想发布三大 AI 服务品牌「擎天、百应、想帮帮」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在联想中国区 2025/2026 财年誓师大会上，联想集团执行副总裁兼中国区总裁刘军集中公布了联想 AI 服务三大品牌：联想擎天、联想百应与想帮帮。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;刘军表示，此次三大品牌的发布标志着联想将全面进军 AI 服务领域，覆盖政企、中小企业和消费客户三大市场。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;334&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-65da6a3e4d3b3d44ec9942c8cd2435cb9e8.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根据介绍，三大 AI 服务品牌中，联想擎天、想帮帮为首次与公众见面。前者面向政企客户，主推智能体矩阵、xCloud 智能云、AI 全周期服务和 ESG 四大方案服务。今年 3 月，联想与武夷山市、宜昌市政府签订战略合作，共同打造全球首批城市超级智能体，升级智慧城市到 4.0 阶段。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;面向消费客户的想帮帮，将围绕多品牌、多设备、多场景，提供 AaaS（Agent as a service，智能体即服务）模式的服务。而针对中小企业，联想则推出了去年 11 月已发布的联想百应智能体。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;联想百应同样采用 AaaS 模式，聚焦中小企业在 IT 运维、AI 办公、AI 营销等方面的核心需求，目标是成为中小企业 AI 服务领域的领导品牌。此次三大 AI 服务品牌的齐发，展现了联想在 AI 时代的战略布局和强大决心。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342265</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342265</guid>
            <pubDate>Sat, 22 Mar 2025 07:48:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>自增主键去哪了？--- 一次开发过程中的思考</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;p&gt;作者：京东零售，王光&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_1&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;前情提要：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;最近新接了一个需求，需要去创建两张表，其中有一张表需要根据业务 id 和业务类型建立唯一索引，对数据唯一性进行约束。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;因为涉及到业务嘛，表结构就进行缩略了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;表结构示例如下：

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;CREATE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;TABLE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;example_table&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;id&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;bigint&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;20&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;unsigned&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NOT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;AUTO_INCREMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;自增主键&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;business_id&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;bigint&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;20&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;unsigned&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NOT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;业务 ID&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;business_type&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;tinyint&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;unsigned&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NOT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;业务类型，&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;del&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;tinyint&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;unsigned&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;DEFAULT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;0&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;删除标识，0 表示未删除，1 表示删除&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;creator&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;varchar&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;50&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NOT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;创建人 PIN&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;modify_date&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;datetime&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;DEFAULT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ON&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;UPDATE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;更新时间&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;create_date&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;datetime&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;DEFAULT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;创建时间&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
     &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;PRIMARY&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;KEY&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;id&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
     &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;UNIQUE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;KEY&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;uk_business_id_and_type&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;business_id&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;business_type&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ENGINE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;InnoDB&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;AUTO_INCREMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;DEFAULT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;CHARSET&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;utf8mb4 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;示例表&#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;既然表建立好，那么就是发挥我们编码能力的时候了...此处省略一堆编码时间。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;编码结束，自测结束，信心满满的找前端同学进行联调。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;因为联调嘛，mock 了很多同样的 business_id 和 bussiness_type 的数据，结果到了数据库，因为唯一索引的约束，报了一堆错误，插入都失败了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;终于调整了一下 mock 数据，插入成功了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;但是发生了一个比较神奇的现象&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//78bf408eae380fb0b81825c61211bced.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//338c271c292e1a1eb9649b1fbe1425b8.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主键不是连续自增的了~~ 中间丢失的自增主键去哪了??&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_2&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;关于自增主键&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f1f1f&quot;&gt;自增主键是我们&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#040c28&quot;&gt;在设计数据库表结构时经常使用的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;主键生成策略&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f1f1f&quot;&gt;，主键的生成可以完全依赖数据库,在新增数据的时候，我们只需要将主键设置为 null，0 或者不设置该字段，数据库就会为我们自动生成一个主键值。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;首先,我们要知道，自增主键保存在哪里~&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;不同的引擎对于自增值的保存策略不同&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1.MyISAM 引擎的自增值保存在数据文件中&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2.InnoDB 引擎的自增值，在 MySQL5.7 及之前的版本，自增值保存在内存里，并没有持久化。每次重启后，第一次打开表的时候，都会去找自增值的最大值 max(id)，然后将 max(id)+步长（建表语句中的指定步长）作为这个表当前的自增值。在 MySQL8.0 版本，将自增值的变更记录在了 redo log 中，重启的时候依靠 redo log 恢复重启之前的值。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;了解了自增主键的保存机制，再了解一下主键这个&quot;自增&quot;逻辑~&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//e8fd21e0666df00de3f15e2102fb28d8.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;插入一条语句分配自增主键 id 值的流程如图所示。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_3&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;自增主键不连续的情况&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;细心的小伙伴一定发现了~咦，这个 ID=声明值的话，ID 就可以能被随意指定了，那么 ID 就可能存在不是自增的情况了！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;是的，这其实就是第一种自增主键不连续的情况。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第二种不连续的情况就是我们在联调中遇到的问题了&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;简单来做个测试,目前数据就像一开始的图一样,id 自增到了 24,下一个插入的应该是 25,那么执行一条 sql&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;into&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; example_table  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;values&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;111&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;mock&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//942a91e603961954b723a3052dfa45fa.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;插入成功了一条数据,主键是连续自增的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;那么我们模拟一条错误的 sql 呢 (`creator`字段指定错类型)~：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;into&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; example_table  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;values&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;112&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;mock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;果然，执行 sql 的时候报出异常：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//087aa0531188ff7876f819f8854c5c7a.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;继续执行一条正确的正常的 sql，插入结果：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//37dc344bca29c059081e3db9b5809d57.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主键还是连续自增的。这个发生错误为什么自增主键还是连续的呢。我们模拟一下之前联调遇到的情况，插入一条 sql：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;into&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; example_table  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;values&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;112&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;mock&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;因为 id=26 的数据 buiness_id 和 bussiness_type 跟新插入的这条数据一样，那么肯定会因为唯一索引插入不成功，果然，执行结果如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//fb09e9f2a63d4ad434c5fa794a6115a3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;那么，我们修改一下 sql 继续插入呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;into&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; example_table  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;values&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;113&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;mock&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//7537f463e7de6952f74bd8c2bc5f1071.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主键发生了&quot;断代&quot;,27 的主键跑丢了...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;明明都是 sql 插入的时候错误，为什么结果会有差异呢，有的时候主键会丢失，有的时候主键不会丢失呢，想要弄明白这个问题，就需要先明白一下一条 sql 的执行过程：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//d05eab6fd6ae0d3e943ba03f27ca9dda.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这里只是针对本文需要关注的点（相信小伙伴对这个执行过程肯定也是非常了解的😏）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;所以说，主键有没有丢失的核心关键就是有没有走到，执行引擎有没有去分配主键。一旦走到了分配主键就不会进行回滚。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;既然一旦分配了主键就不会回滚，那是不是事务回滚之后主键也不会回滚至之前的值呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第三种就是这样，事务回滚也会导致主键「丢失」：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;举个栗子：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;into&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; example_table  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;values&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;114&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;mock&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//7d7550262a81f277d811e270818b05c2.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;回滚这条语句。并继续执行上面那条语句&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//480441f1e34d00af38d6e43a5f0ff92a.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;29 这个 id 就「丢失」了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;有好奇的小伙伴就会问了，问什么 mysql-innodb 不提供一种回滚主键 id 的机制呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我理解的是，1、没有必要 ；2、影响性能；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;自增主键锁并不是一个事务锁，而是每次申请完就马上释放，以便允许别的事务再申请。但在 MySQL5.0 版本的时候，自增锁的范围是语句级别。也就是说，如果一个语句申请了一个表自增锁，这个锁会等语句执行结束以后才释放。MySQL5.1.22 版本引入了一个新策略，新增参数 innodb_autoinc_lock_mode，默认值是 1。 1.这个参数设置为 0：表示采用之前 MySQL5.0 版本的策略，即语句执行结束后才释放锁。 2.这个参数设置为 1：普通 insert 语句，自增锁在申请之后就马上释放。批量插入数据的语句，自增锁还是要等语句结束后才被释放。 3.这个参数设置为 2：所有的申请自增主键的动作都是申请后就释放锁。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我们假设一个场景主键 id 是可以回滚的，根据上面的自增主键锁的规则。事务 A 申请了一个自增主键 id=29，事务 B 申请了一个自增主键 id=30，在申请了之后就会被释放，如果这个时候事务 A 进行了回滚，事务 B 执行完毕，这个时候就需要将 id 回滚到 29，但是 id30 已经存在表中了。那么肯定会需要一个类似现在的 redolog,undolog 的&quot;存储单元&quot;去存储主键 id 的分配情况，如果再有一个事务 C 过来申请主键 id，这个时候就会出现很多种情况去考虑，1：我要申请的主键 id 是否已经分配出去了。如果已经没有还好，如果有的话，需要去找到一个允许我插入的最小的 id（这个最小的成本就会比目前直接选择最大的 id 性能要查很多。）2：我是批量插入，我需要申请一批 id，这种情况想想就很抓马，因为这一批次中的 id 可能存在多个已经存在的情况。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;而且就算主键 id 可以回滚，那么我插入数据的顺序，跟 id 的大小就存在悖论关系了，在业务层面就不能根据 id 去做一些判断了，这也无疑增加了业务层面的复杂性。所以主键 id 是可以回滚是一个 ROI 极低的方案了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在上面的说到的自增主键的分配策略也可以想到：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第四种不连续的情况：批量申请的主键 id，如果出现没有使用完，或者批量插入出现问题导致的主键 id 不连续。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;当然这里说的批量插入不是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;insert into example_table values (null,111,1,0,&#39;mock&#39;,now(),now()),(null,112,1,0,&#39;mock&#39;,now(),now());&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这样的语句，因为这种语句在 sql 解析的时候就可以明确需要插入多少条目，id 也就会直接进行分配到具体的条目。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;但是对于 insert...select 这种批量插入语句，因为大部分都是执行多表操作，所以实际操作的条数是不可确定的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在进行分配主键 id 的时候，会有一个策略：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;语句执行过程中，第一次申请自增 id，会分配 1 个； &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1 个用完以后，这个语句第二次申请自增 id，会分配 2 个；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2 个用完以后，还是这个语句，第三次申请自增 id，会分配 4 个；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;4.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;依此类推，同一个语句去申请自增 id，每次申请到的自增 id 个数都是上一次的两倍。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;
create table `example_table_2` like `example_table`;
#使用批量插入语句，从 example_table 中读取数据, 往 example_table_2 中插入数据
insert into example_table_2 select null, business_id, business_type, del, creator, modify_date, create_date from example_table;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这个时候的执行结果如图:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//68ddf5dc52f04b58075eafa07c7dd343.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;那么按照预期，第一次分配 id=1,第二次分配 id 是[2,3],第三次分配 id 区间是[4,7],第四次分配区间是[8,15]，那么执行下面语句：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;#插入一条数据，预期主键 id 应该是 16
insert into example_table_2  values (null,200,1,0,&#39;mock&#39;,now(),now());&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//a834acbb4e615f5e4488152ec66c9cb7.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;果然执行结果符合预期结果。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这个语句在实际业务中使用的很少，mysql 在这个语句里面还是有很多设计的，大家可以看看官方文档详细的了解一下&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdev.mysql.com%2Fdoc%2Frefman%2F8.0%2Fen%2Finsert-select.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;https://dev.mysql.com/doc/refman/8.0/en/insert-select.html&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;还有一种情况是主键 id 设置的步长不为 1&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这种情况一般都是发生在表的设计初期，所以出现不自增的话也是符合预期的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_4&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;写在最后&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;MySQL 是作为大家都经常接触的 DB，相信大家都会有一定的认知，自增主键不连续大家肯定也遇到过，这次在联调过程中遇到这个情况，在跟别的小伙伴分享的时候，突然就想写一篇文章，文章里面如果有不正确或者不准确的地方也欢迎大家斧正~说实话，作为一名交易端的研发人员，业务开发任务压力真的蛮大的，我也迷茫过，如何在这个过程中成长，珍惜我们遇到的问题，将遇到的问题记录在册，深追问题，你会发现有很多问题其实真的是因为我们某些知识的薄弱点造成的。然后将我们觉得值得分享的利用碎片时间整理成文章分享出来，其实这篇文章从我开始写到到最后成稿也历时 11 天之久，但是不管怎么样，只要我们从中有收获就可以了~最后，希望大家都可以成为自己心目中的技术达人。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;To enjoy is to be young，To enjoy is to be your own goal!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/4090830/blog/18043736</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18043736</guid>
            <pubDate>Sat, 22 Mar 2025 07:35:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>达闼董事长回应「欠薪」传闻：的确遇到困难，在战略调整</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;近期有传闻称，人形机器人领域知名独角兽企业达闼机器人正陷入危机，过去一年陆续出现欠薪，裁员状况。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;达闼于 2015 年创立，全球总部位于上海，并在北京、成都等地设立分支机构。资料显示，2023 年，达闼获得超 10 亿元人民币 C 轮融资。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;272&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c9bf85394836549d71df5198f43b88e753c.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;针对上述传闻，达闼创始人、董事长兼 CEO 黄晓庆对 21 世纪经济报道记者表示，公司业务的确遇到很大困难，为此进行了人员缩减，同时战略调整，聚焦人形机器人和云端大脑等业务，目前正在积极融资，拓展业务，并努力解决前员工的「欠薪」问题。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;黄晓庆承认，2024 年开年，公司确实遇到很多困难，科技行业整体融资压力越来越大，对此公司在 2024 年将发展战略调整为聚焦人形机器人，并做了一些战略性的优化和裁减，对北京、上海和深圳各地分公司都进行了一些减员。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「在这样的情况下面，我们的工作也确实受到很多影响。所以你们看到的很多情况，也代表目前我们公司的员工没有过去多了。」黄晓庆表示。他称，公司过去员工数在最多的时候有 800 多人，现在正式的员工有 150 多人，加上顾问有 200 多人，主要分布在北京、成都等 3 个地方，另外目前正在全面布局建设的天津基地，已与天津津南区签署产业投资落地协议，落地「具身机器人云脑操作系统平台」，建设「云端机器人应用训练场」，打造「人形机器人公版机总装线」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;黄晓庆表示，「我们对前员工还是有非常密切的联系，我们一定会在一定时间内、在来逐步解决离职补偿问题」，「现在真的就是需要时间解决，既要保证公司经营发展，又要逐步解决问题，绝大部分员工都非常理解。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;对于资金链断裂，黄晓庆回应道，2024 年开年，达闼遇到很多困难。「在三年疫情期间，公司都没有减员。我们在疫情之后遇到的融资困难，很大程度上是因为有一些融资未及时到位和银行抽贷。当时的融资等外部环境都不太好，加上被美国实体清单后很多美元基金也无法投资，造成了我们那时候的现金流困境。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;最近几天，产业和市场就被朱啸虎「正批量退出人形机器人」的消息搅起轩然大波。「我认为今天的人形机器人的产业，类似于 2007 年、2008 年的智能手机产业，属于黎明时期。并不是要退场的时候，而是要积极进场的时候。」黄晓庆直言。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在黄晓庆看来，朱啸虎并不明白云端机器人的概念，「他没有想到，如果机器人装上了云端大脑，配置强大的 AGI 能力的智能体，加上强大的视觉模型，是我们物理世界的镜像。我认为云端智能机器人是达到人类智能的核心问题，如果实现了，我认为朱啸虎会改变观点。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;黄晓庆对记者透露，「2024 年尽管现金流很紧张，我们通过开拓市场也实现了 6 亿元的收入，今年到 2 月底，我们待签约和准备签约的订单金额也达到了 2-3 亿元。这足以证明我们达闼机器人还在积极努力，正常营业，不断进取。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;黄晓庆称，「达闼只是中国众多科技创新民营企业的一个缩影，也是人形机器人产业的先行者，科技创新的道路不会是一帆风顺的，有坎坷很正常，只要持续努力，砥砺前行，一定会成功。最后由衷期待社会各界能给予帮助、关心和爱护。」&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342256</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342256</guid>
            <pubDate>Sat, 22 Mar 2025 07:18:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>OpenAI 宫斗内幕曝光</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;近日，基奇·哈吉即将出版的新书《乐观主义者：山姆·阿尔特曼、OpenAl 与开创未来的竞赛》曝光了 OpenAl 董事会在 2023 年解雇首席执行官阿尔特曼的新细节。&lt;/p&gt; 
&lt;p&gt;据报道，时任 OpenAl 首席科学家苏茨克沃秘密发送给 OpenAI 董事两封针对阿尔特曼和 OpenAI 总裁布罗克曼的 PDF。其中列举了数十条涉嫌撒谎或失当行为的例子，最终导致了阿尔特曼被罢免。&lt;/p&gt; 
&lt;p&gt;PDF 中针对阿尔特曼的指控，苏茨克沃都附上了相关聊天记录截图。 &amp;nbsp;其中，最具爆炸性的一条是 OpenAI 首席技术官米拉·穆拉提（Mira Murati）质疑 GPT-4 Turbo 的安全审批是否通过，阿尔特曼回应称「法务部确认不需通过」。穆拉提查证后发现，公司法务部根本没说过这话。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1212&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0401/151009_XrfL_2720166.png&quot; width=&quot;1276&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;OpenAI 原本被设定为一个「不同」的科技公司，它由非营利性董事会管理，使命不是满足股东，而是确保人工智能为人类利益服务。&lt;/p&gt; 
&lt;p&gt;然而，在实际运营中，董事会逐渐发现，阿尔特曼几乎拥有对 OpenAI 无可撼动的控制力，董事会越来越担心阿尔特曼的独断专行，一系列信任危机早已产生。&lt;/p&gt; 
&lt;p&gt;例如，在面对董事会要求加强 AI 安全审查、增补专家时，阿尔特曼与布罗克曼采取了拖延战术。&lt;/p&gt; 
&lt;p&gt;2022 年冬天，董事会正在权衡如何发布 GPT-4 三项颇具争议的功能时，阿尔特曼声称这三项增强功能均已获得联合安全委员会的批准。可当董事会要求审查记录时，发现实际上只有一项获得通过。&lt;/p&gt; 
&lt;p&gt;一次董事会会议后，一名 OpenAI 员工在走廊上向独立董事透露：微软正在印度测试尚未发布的 GPT-4，而这一测试并未获得公司内部联合安全委员会的批准，更未告知董事会。&lt;/p&gt; 
&lt;p&gt;又如，OpenAI 启动的创业投资基金原本应归 OpenAI 管理，但某位董事在一次晚宴中偶然得知，该基金实际由阿尔特曼本人持有，虽然他未从中获利，这种安排依旧令人震惊。&lt;/p&gt; 
&lt;p&gt;穆拉提也向董事会透露，阿尔特曼和布罗克曼的管理风格已严重阻碍她履行职责。布罗克曼表面上向她汇报，却一有争议就越过她去找阿尔特曼，让她在公司的每一天都是「在夹缝中生存」。&lt;/p&gt; 
&lt;p&gt;苏茨克沃的 PDF 文件加速了事态发展。那天晚上，四位董事与苏茨克沃一同投下了震撼科技世界的一票，决定解雇阿尔特曼，并将布罗克曼逐出董事会。他们并没有事先告知微软，也没有通知员工。&lt;/p&gt; 
&lt;p&gt;几小时后，OpenAI 官网发布了那则短短的声明：阿尔特曼因「未始终对董事会保持坦诚」被解职。&lt;/p&gt; 
&lt;p&gt;整个硅谷哗然，OpenAI 高层几近分裂，员工们在混乱中震惊不已——他们没有得到任何解释，只知道，「山姆不再担任 CEO」。&lt;/p&gt; 
&lt;p&gt;穆拉提被任命为临时 CEO。但她很快意识到，董事会根本没做好准备——没有继任计划，没有沟通战略，甚至没有和微软商量。她开始质疑自己是否被当作棋子来使用，并最终站到了阿尔特曼一方。&lt;/p&gt; 
&lt;p&gt;随后，高管层集体施压董事会，要求公开解雇理由，否则就一起辞职。仅仅 48 小时，一封员工联名信已收集到近 800 个签名，几乎全员威胁辞职。甚至连穆拉提与苏茨克沃，也签了名字。&lt;/p&gt; 
&lt;p&gt;显然，苏茨克沃等董事因权力旁落发起的这场「政变」以失败告终。他们原本以为，揭露阿尔特曼的管理问题会获得员工的理解与支持；但现实却是，一家公司，即便以「人类」为使命，一旦没有共同信任的基础，也将瞬间陷入混乱与失控。&lt;/p&gt; 
&lt;p&gt;几天后，阿尔特曼复职，布罗克曼归位，风波暂息。而苏茨克沃和穆拉提随后也离开了公司，创办了自己的公司。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;回顾&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267006/openai-ceo-sam-altman-fired&quot; target=&quot;news&quot;&gt;OpenAI 董事会内讧，CEO 兼创始人 Sam Altman 被逐出公司&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267013/openai-greg-brockman-quit&quot; target=&quot;news&quot;&gt;OpenAI 总裁 Greg Brockman 辞职&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267101/openai-board-discussions-with-sam-altman-return-as-ceo&quot; target=&quot;news&quot;&gt;OpenAI 董事会与 Sam Altman 讨论重返 CEO 岗位事宜&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267200&quot; target=&quot;news&quot;&gt;Altman 以访客身份回到 OpenAI，和公司高管会面谈判&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267256/openai-twitch-ceo-shear&quot; target=&quot;news&quot;&gt;Altman 回归失败，OpenAI 董事会聘请 Twitch 前高管担任 CEO&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267272&quot; target=&quot;news&quot;&gt;OpenAI 前 CEO 和总裁 Sam Altman &amp;amp; Greg Brockman 加入微软&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267364&quot; target=&quot;news&quot;&gt;OpenAI 超 700 名员工签署联名信，要求董事会集体辞职&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267591/sam-altman-returns-ceo-open-ai&quot; target=&quot;news&quot;&gt;Sam Altman 重返 OpenAI 担任首席执行官&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/268788/altman-returns-as-ceo-openai-has-a-new-initial-board&quot; target=&quot;news&quot;&gt;OpenAI 正式宣布 Sam Altman 回归担任 CEO&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342255</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342255</guid>
            <pubDate>Sat, 22 Mar 2025 07:16:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>英特尔 CEO 陈立武：将剥离非核心资产、需补充流失的人才</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;英特尔首席执行官陈立武表示，该芯片制造商将剥离对公司愿景非核心的资产，开发包括定制半导体在内的新产品，以更好地匹配客户需求。陈立武称，&lt;strong&gt;英特尔需要补充流失的工程人才，改善资产负债表，更好地调整生产流程，以满足潜在客户的需求&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;周一在拉斯维加斯举行的英特尔愿景大会上，陈立武首次以首席执行官身份公开露面。他没有具体说明他认为英特尔的哪些业务将不再是其未来的核心。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-50854310c86ed823f44b847f53dfbf57e42.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;「我们还有很多艰苦的工作要做」，他对台下的英特尔客户说。「在有些方面，我们没有达到你们的期望。」&lt;/p&gt; 
&lt;p&gt;这位在半导体领域经验丰富的高管正试图帮助这家曾称霸行业数十年之久的公司重返荣光。其领导层面临的一个关键问题是，重振英特尔究竟是该保持公司的完整性，还是分拆其关键产品和制造业务。&lt;/p&gt; 
&lt;p&gt;陈立武没有发出他将寻求剥离哪一块业务的信号。相反，他强调了他需要解决的问题，以便让这两个部门都能有更出色的表现。他说，英特尔用于数据中心、特别是人工智能相关的芯片还不够好。&lt;/p&gt; 
&lt;p&gt;「我们在创新方面落后了」，这位首席执行官说。「我们适应和满足你们的需求太慢了。」&lt;/p&gt; 
&lt;p&gt;现年 65 岁的陈立武于 3 月 18 日上任，他的任命最初引发了乐观情绪，并吸引一些投资者重返该股。但此后，随着科技股的普遍下跌，该公司股价也随之走低。陈立武发表演讲后，英特尔在盘后交易中下跌约 1.2%。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342250</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342250</guid>
            <pubDate>Sat, 22 Mar 2025 07:02:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>国家天文台基于通义千问打造国际首个太阳大模型「金乌」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;国家天文台联合阿里云&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fh4eaYrUsKDRHGgYr-kwatA&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;国际首个太阳大模型——「金乌」。「金乌」基于通义千问系列开源模型打造，目前在 M5 级太阳耀斑预报上准确率超 91%，为该级别太阳预报最高水平。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;277&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-98bad688a4b6cb4612ebb30baa4e83c954b.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根据介绍，基于 Qwen-VL 等模型，「金乌」太阳大模型以超过 90 万张太阳衞星图像为样本完成微调训练。通过输入上一时段的太阳物理参数及对应的观测图像，「金乌」可预测未来 24h 的耀斑爆发情况。同时，「金乌」可推测出下一时段的物理参数，通过调用扩散模型生成下一时段的太阳模拟图像。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;国家天文台怀柔观测基地主任林佳本表示：「通义大模型在中英文等多语言和图像识别能力上表现出色，非常适合太阳预报。作为科研机构，相比从头训练大模型，基于已有的基模去发展科学模型，是更高效、更具可行性的选择。未来，‘金乌’太阳大模型还将用于解答‘太阳磁场起源’等‘未解难题’，为我国太阳研究作出贡献。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此前，中国科学院（简称「中科院」）国家天文台「星语」大模型、中科院青藏高原研究所的全球首个水能粮大模型「洛书」以及中科院南海所珊瑚礁多模态大模型「瑶华」，均基于阿里通义千问系列模型打造。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342244</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342244</guid>
            <pubDate>Sat, 22 Mar 2025 06:40:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>广东：每年择优支持一批开源社区和开源生态中心，每个给予最高 800 万元资助</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;《广东省推动人工智能与机器人产业创新发展若干政策措施》（以下简称《若干政策措施》）新闻发布会于今日召开，宣布出台 12 条措施，推动人工智能与机器人产业创新发展。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;其中，支持创建国家级、省级人工智能与机器人领域制造业创新中心，省财政按规定分别给予最高 5000 万元、1000 万元的资金支持；推动广州、深圳数据交易所打造国家级数据交易场所。据透露，2024 年广东人工智能核心产业规模超过 2200 亿元，全省人工智能核心企业超过 1500 家。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;375&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-743523a8fadf83a082ea9e61a52125dcbfa.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;《若干政策措施》以支持、服务企业为导向，立足于强化资金、人才、用地等要素供给，从支持核心技术攻关、培育优质企业、打造应用场景、培养引进人才、推进标准体系建设等方面提出了 12 条「干货」政策措施，汇聚最优资源、集聚最大力量，力争实现「六个一批」，加快打造全球人工智能与机器人产业高地。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;其中，将&lt;strong&gt;攻破一批关键核心技术&lt;/strong&gt;。积极面向全球加强协同创新，争取更多创新资源落户广东。实施省重点领域研发计划「新一代人工智能」「智能机器人」等旗舰项目、重大专项，在上述领域部署攻关任务。对国家科技重大专项的人工智能与机器人领域重点项目，省财政按规定给予配套奖励。支持创建国家级、省级人工智能与机器人领域制造业创新中心，省财政按规定分别给予最高 5000 万元、1000 万元的资金支持。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;培育一批优质企业&lt;/strong&gt;。加快培育人工智能与机器人领域单项冠军企业、专精特新中小企业，对该领域获评国家级单项冠军企业、专精特新「小巨人」企业的，在省级支持的基础上再「加码」，鼓励地市给予奖励，省财政进一步按照地市奖励资金 1：1 予以激励。设立人工智能与机器人产业基金，引导社会资本围绕产业链关键核心领域，加强对创新型企业的投融资支持。对重点项目开通「绿色通道」，推动重点项目建设。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;部署一批高能级平台&lt;/strong&gt;。推动现有人工智能与机器人产学研平台能级提升、联动发展，因时因势谋划高能级平台，支持建设开源社区、开源生态中心和相关公共服务平台，提供技术交流共享、算力调度、数据训练、大模型评测等服务。&lt;strong&gt;每年择优支持一批开源社区和开源生态中心，每个给予最高 800 万元资助。&lt;/strong&gt;推动广州、深圳数据交易所打造国家级数据交易场所，打造广东数据要素集聚发展区。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;打造一批典型应用场景。&lt;/strong&gt;突出人工智能、机器人在重点领域应用赋能，组织实施「人工智能+」行动，在教育、医疗、交通、民政、金融、安全等领域广泛拓展应用。组织开展「机器人+」行动，围绕工业、农业、城市管理、医疗、养老服务、特种作业等领域，挖掘开放应用场景。依托重点产业集群开展人工智能赋能新型工业化试点，每年择优支持工业领域大模型和应用解决案例，每个给予最高 800 万元奖励。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在引进培育优秀人才方面，把吸聚人工智能与机器人产业所需人才作为「百万英才汇南粤」行动计划的重中之重，围绕人工智能与机器人产业的发展需求和重点任务，支持企业引进&lt;strong&gt;培育一批创新领军人才、青年拔尖人才&lt;/strong&gt;。在粤港澳大湾区博士博士后创新创业大赛、「创客广东」大赛、「越来越好」国际设计大赛中设立人工智能与机器人有关专项赛，以赛促新、以赛促创，通过大赛选拔人才，强化技术交流合作。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此外，广东将&lt;strong&gt;完善一批标准法规制度&lt;/strong&gt;。积极推进标准体系建设，对主导制定人工智能与机器人产业国际标准、国家标准、行业标准的，分别给予资助。探索创新人工智能与机器人「监管沙盒」等包容审慎监管模式，加快建设粤港澳大湾区生成式人工智能安全发展联合实验室。加快推动人工智能领域立法，为人工智能产业发展提供制度保障。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342239</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342239</guid>
            <pubDate>Sat, 22 Mar 2025 06:27:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>《生成式人工智能全栈技术专利分析报告》发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;工信部电子知识产权中心&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FNtSh5E23wFGQpKWvFnrxVQ&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;了《2024 生成式人工智能全栈技术专利分析报告》，阐析了生成式人工智能全栈技术创新的新发展新突破，并围绕模型能力的最新拓展，由算力芯片和软件框架构成的基础层、大模型打造的模型层协同提升算力效能的新范式，以及以智能体为标志的应用创新全面发展，从专利视角去理解、发现生成式人工智能全栈技术创新当前的最新发展态势，旨在为突破现有短板和寻求创新路径提供借鉴。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;一是我国生成式人工智能技术栈基础层（智能芯片和软件框架）、模型层、应用层深度融合、协同发展，形成了「需求牵引技术、技术赋能场景」的发展格局。生成式人工智能基础层与模型层技术的创新突破为应用场景的拓展提供了基座支撑和新的解决方案，另一方面应用领域的复杂需求又倒逼、激励基础层、模型层的算力升级与算法优化，带动了我国生成式人工智能全栈技术的创新发展。2017 年至 2024 年间，我国生成式人工智能全栈公开专利共 167,634 项，专利申请年均复合增长 31.6%，专利申请人数量从 2,257 家扩张至 13,075 家，年均增长 24.6%，展现出在国家战略引领、地方政策助推、技术创新的全面支持下，人工智能技术变革式的创新发展态势。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;264&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-60b12888503c9ab03c5b0cab6e02b555554.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;图 1 生成式人工智能中国专利申请与授权态势分析&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;二是我国创新主体更加注重专利质量，以企业为主体的自主创新与产业生态正在形成。《报告》显示，百度、华为、浪潮、腾讯和阿里巴巴等专利申请数量排名前十的企业类创新主体，其专利申请量之和占总申请量的 10%，正成为技术突破、效率提升与场景应用的关键力量。特别是百度、华为等科技领军企业实现了从底层算力、模型研发到应用落地的全链条创新布局，构建了智能芯片、深度学习框架、基座大模型、垂直模型和智能体等全栈式产品矩阵，能够发挥「基础设施」的禀赋，为经济建设贡献更有价值的创新力量。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;表 1 生成式人工智能中国专利申请与授权 Top10 创新主体（企业）&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;213&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ea0f167f86b7c77aeb72caf267a14e32bfc.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;三是生成式人工智能全栈发展呈现出技术创新驱动、应用场景牵引与生态系统支撑的三位一体、协同演进的发展模式，其中代表性创新主体展现了价值传导、创新引领的核心作用。为解析生成式人工智能技术创新、产业应用和生态支撑三方面互为支点的发展格局，《报告》基于 20 余项专利指标，探索构建了「AI 专利高质量发展能力测算指标体系」，借此研判代表性创新主体推动核心技术研发、打造应用场景落地、培育可持续自主生态的梯次性发展战略。如下图所示，百度依托基础层的飞桨框架与昆仑芯片深度适配、模型层的文心系列大模型，为智能体等产业应用提供动力引擎，形成了自主的技术创新生态，并在 AI 专利高质量发展能力评测中建立了良好的储备和领先优势。华为、腾讯和阿里巴巴等企业也已构筑了研发、应用和生态互为支撑的稳定发展体系。之江实验室作为新型研究机构，则展现了基础研究与应用创新协同、快速推进的发展态势。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;277&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-0eab2e859b58c0a807a328b5b9f8f895b85.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;图 2 生成式人工智能主要创新主体 AI 专利高质量发展能力分布&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;四是多模态及推理技术专利的加速申请，印证了 2024 年生成式人工智能模型技术正逐渐具备理解真实世界、进行复杂决策的能力，使我们在通往通用人工智能（AGI）的道路上又进一步。2025 年 1 月，我国 AI 初创公司深度求索发布的 DeepSeek R1 以技术路径、成本控制与开源策略的全面创新，为 AI 研发提供了新范式。3 月百度发布的文心大模型 X1 在性能对齐的情况下，进一步将 API 调用价格降至 R1 的一半。人工智能普惠应用的「大航海时代」即将来临。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;《报告》认为「人工智能+」专项行动的深入推进将进一步加速生成式人工智能作为通用技术的赋能作用，应持续用力生成式人工智能应用创新和开发，并发挥新型举国体制优势向科技创新的上游突破，努力追赶基础算力、基本算法、结构化基础数据的创新路径，加快形成新质生产力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;《报告》建议建立长期多元的战略规划，加强国家级基础算力、高质量数据供给，加强产业创新集群培育，打造「产学研一体化」「头雁企业+专精特新」雁阵格局，形成标杆性垂直领域的创新产业集群。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;2024 年国家政府工作报告同时提出「发展新质生产力」和「人工智能+」行动计划，奠定了生成式人工智能的战略基础地位。2025 年政府工作报告继续提出，持续推进「人工智能+」行动，将数字技术与制造优势、市场优势更好结合起来，支持大模型广泛应用，大力发展智能网联新能源汽车、人工智能手机和电脑、智能机器人等新一代智能终端以及智能制造装备。在此之上，生成式人工智能技术创新将更广泛的与应用场景深度融合，为产业经济和人们生活赋能。生成式人工智能技术创新与广泛应用正步入发展的新篇章。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342223</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342223</guid>
            <pubDate>Sat, 22 Mar 2025 05:44:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
    </channel>
</rss>