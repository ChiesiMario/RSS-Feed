<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-最新资讯</title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://8.134.148.166:30044/oschina/news" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-最新资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Tue, 22 Apr 2025 07:37:39 GMT</lastBuildDate>
        <ttl>5</ttl>
        <item>
            <title>67 款 APP 违法收集使用个人信息被通报</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;国家网络与信息安全信息通报中心近日&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FrVjWOnNkjWhgC6sIL2JuWA&quot; target=&quot;_blank&quot;&gt;通报&lt;/a&gt;了 67 款违法违规收集使用个人信息情况移动应用。具体如下：&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1、在 App 首次运行时未通过弹窗等明显方式提示用户阅读隐私政策等收集使用规则；以默认选择同意隐私政策等非明示方式征求用户同意；个人信息处理者在处理个人信息前，未以显著方式、清晰易懂的语言真实、准确、完整地向个人告知个人信息处理者的名称或者姓名、联系方式、个人信息的保存期限等。涉及 11 款移动应用如下：&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 《客很多》（版本 2.8.9，百度手机助手）、《城泊通》（版本 3.2.1，360 手机助手）、《e 万源》（版本 3.5.1，应用宝）、《赢海云管船》（版本 2.12.6，应用宝）、《口袋家教学生》（版本 3.3.32，应用宝）、《约驾校》（版本 2.1.88，应用宝）、《物流头条》（版本 1.7.5，360 手机助手）、《V 同城》（版本 2.0.6，应用宝）、《昕宝泊车》（版本 1.0.8，腾牛网）、《实景罗盘指南针》（版本 5.0.3，应用宝）、《高人汇》（版本 7.47，360 手机助手）。&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 2、隐私政策未逐一列出 App（包括委托的第三方或嵌入的第三方代码、插件）收集使用个人信息的目的、方式、范围等。涉及 35 款移动应用如下：&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;《甘肃高速》（版本 1.6.2，应用宝）、《福运万年历》（版本 1.0.6，华为应用市场）、《如意万年历》（版本 3.12，vivo 应用商店）、《客很多》（版本 2.8.9，百度手机助手）、《牧原通司机》（版本 2.4.4，87G 手游网）、《趣衞课堂》（版本 3.0.6，当下软件园）、《城泊通》（版本 3.2.1，360 手机助手）、《小蛙农服》（版本 2.1.8，应用宝）、《E 体教》（版本 2.0.16，应用宝）、《蜂云汇优选》（版本 2.2，应用宝）、《德泰服务》（版本 3.2.8，应用宝）、《赢海云管船》（版本 2.12.6，应用宝）、《口袋家教学生》（版本 3.3.32，应用宝）、《煤炭江湖》（版本 3.3.1，百度手机助手）、《阿吉泰》（版本 6.1.12，应用宝）、《约驾校》（版本 2.1.88，应用宝）、《云端金融》（版本 1.3.4.001，应用宝）、《咪聊》（版本 1.4.8，360 手机助手）、《语文高分作文》（版本 1.054，360 手机助手）、《V 同城》（版本 2.0.6，应用宝）、《泛美教育》（版本 1.2，应用宝）、《龙投智慧停车》（版本 1.1.0，5577 网站）、《山西 ETC》（版本 1.6.3.4，苹果应用商店）、《昕宝泊车》（版本 1.0.8，腾牛网）、《芬空间》（版本 4.1.6，豌豆荚）、《捷信金融》（版本 34.53.2，应用宝）、《车贷 e 通》（版本 3.4.0，豌豆荚）、《中华万年历》（版本 9.5.0，360 手机助手）、《万年历》（版本 7.1.5，百度手机助手）、《知命》（版本 7.4.0，应用宝）、《众安贷》（版本 3.3.1，应用宝）、《汇通启富-山西证券》（版本 7.7.4.1，vivo 应用商店）、《弘历投教》（版本 1.3.9，小米应用商店）、《高人汇》（版本 7.47，360 手机助手）、《风暴迷城》（版本 1.04.06，当快软件园）。&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 3、个人信息处理者向其他个人信息处理者提供其处理的个人信息的，未向个人告知接收方的名称或者姓名、联系方式、处理目的、处理方式和个人信息的种类，并取得个人的单独同意；App 客户端向第三方提供个人信息，包括通过客户端嵌入的第三方代码、插件等方式向第三方提供个人信息，未做匿名化处理。涉及 23 款移动应用如下：&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 《血糖记录本》（版本 5.3.0，应用宝）、《甘肃高速》（版本 1.6.2，应用宝）、《超合金坦克大战》（版本 3.4，应用宝）、《移动白条》（版本 1.0.0，vivo 应用商店）、《分期白条》（版本 1.0.0，应用宝）、《牧原通司机》（版本 2.4.4，87G 手游网）、《信仁汇通》（版本 1.1.1，360 手机助手）、《E 体教》（版本 2.0.16，应用宝）、《蜂云汇优选》（版本 2.2，应用宝）、《德泰服务》（版本 3.2.8，应用宝）、《口袋家教学生》（版本 3.3.32，应用宝）、《煤炭江湖》（版本 3.3.1，百度手机助手）、《阿吉泰》（版本 6.1.12，应用宝）、《龙投智慧停车》（版本 1.1.0，5577 网站）、《山西 ETC》（版本 1.6.3.4，苹果应用商店）、《昕宝泊车》（版本 1.0.8，腾牛网）、《车贷 e 通》（版本 3.4.0，豌豆荚）、《武清村镇银行》（版本 6.4.5.3，vivo 应用商店）、《实景罗盘指南针》（版本 5.0.3，应用宝）、《知命》（版本 7.4.0，应用宝）、《村镇银行（福建农商）》（版本 1.3.2，vivo 应用商店）、《携程金融》（版本 3.5.8，多多软件站）、《兰州银行企业版》（版本 1.4.2，应用宝）。&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4、App 未在征得用户同意后开始收集个人信息或打开可收集个人信息的权限。涉及 10 款移动应用如下：&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 《准准》（版本 2.1.1，应用宝）、《哇题库》（版本 3.1.4，应用宝）、《北大荒农服》（版本 40.00.15，应用宝）、《帮车宝》（版本 5.1.18，应用宝）、《粮信粮油信息网》（版本 23.1，应用宝）、《信仁汇通》（版本 1.1.1，360 手机助手）、《蜂云汇优选》（版本 2.2，应用宝）、《龙投智慧停车》（版本 1.1.0，5577 网站）、《实景罗盘指南针》（版本 5.0.3，应用宝）、《知命》（版本 7.4.0，应用宝）。&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 5、未提供有效的更正、删除个人信息及注销用户账号功能；虽提供了更正、删除个人信息及注销用户账号功能，但未及时响应用户相应操作，需人工处理的，未在承诺时限内完成核查和处理。涉及 7 款移动应用如下：&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 《分期白条》（版本 1.0.0，应用宝）、《客很多》（版本 2.8.9，百度手机助手）、《华金教育》（版本 3.0.4，360 手机助手）、《加盟汇》（版本 1.1.6，360 手机助手）、《山西 ETC》（版本 1.6.3.4，苹果应用商店）、《昕宝泊车》（版本 1.0.8，腾牛网）、《汇通启富-山西证券》（版本 7.7.4.1，vivo 应用商店）。&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 6、投诉、举报未在承诺时限内受理并处理；个人信息处理者未建立便捷的个人行使权利的申请受理和处理机制。涉及 9 款移动应用如下：&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 《超合金坦克大战》（版本 3.4，应用宝）、《趣衞课堂》（版本 3.0.6，当下软件园）、《城泊通》（版本 3.2.1，360 手机助手）、《e 万源》（版本 3.5.1，应用宝）、《赢海云管船》（版本 2.12.6，应用宝）、《曹操送》（版本 6.6.2，360 手机助手）、《物流头条》（版本 1.7.5，360 手机助手）、《柚嘉健康医生版》（版本 1.4.1，360 手机助手）、《华金教育》（版本 3.0.4，360 手机助手）。&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 7、未向用户提供撤回同意收集个人信息的途径、方式；基于个人同意处理个人信息的，个人有权撤回其同意，个人信息处理者未提供便捷的撤回同意的方式。涉及 49 款移动应用如下：&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 《血糖记录本》（版本 5.3.0，应用宝）、《甘肃银行》（版本 7.2.1，应用宝）、《甘肃高速》（版本 1.6.2，应用宝）、《跑胡子》（版本 2.0.7，应用宝）、《桂林字牌手机版》（版本 1.0.22.595，应用宝）、《超合金坦克大战》（版本 3.4，应用宝）、《准准》（版本 2.1.1，应用宝）、《移动白条》（版本 1.0.0，vivo 应用商店）、《分期白条》（版本 1.0.0，应用宝）、《河北航空》（版本 2.2.5，360 手机助手）、《张家口银行》（版本 6.0.0，应用宝）、《哇题库》（版本 3.1.4，应用宝）、《客很多》（版本 2.8.9，百度手机助手）、《牧原通司机》（版本 2.4.4，87G 手游网）、《问真八字排盘》（版本 2.4.9，当快软件园）、《趣衞课堂》（版本 3.0.6，当下软件园）、《珠子云计算》（版本 1.9.6，360 手机助手）、《北大荒农服》（版本 40.00.15，应用宝）、《城泊通》（版本 3.2.1，360 手机助手）、《帮车宝》（版本 5.1.18，应用宝）、《阳光村镇银行》（版本 2.0.1.0，360 手机助手）、《粮信粮油信息网》（版本 23.1，应用宝）、《E 体教》（版本 2.0.16，应用宝）、《蜂云汇优选》（版本 2.2，应用宝）、《德泰服务》（版本 3.2.8，应用宝）、《e 万源》（版本 3.5.1，应用宝）、《赢海云管船》（版本 2.12.6，应用宝）、《口袋家教学生》（版本 3.3.32，应用宝）、《煤炭江湖》（版本 3.3.1，百度手机助手）、《阿吉泰》（版本 6.1.12，应用宝）、《云端金融》（版本 1.3.4.001，应用宝）、《咪聊》（版本 1.4.8，360 手机助手）、《柚嘉健康医生版》（版本 1.4.1，360 手机助手）、《语文高分作文》（版本 1.054，360 手机助手）、《华金教育》（版本 3.0.4，360 手机助手）、《加盟汇》（版本 1.1.6，360 手机助手）、《V 同城》（版本 2.0.6，应用宝）、《泛美教育》（版本 1.2，应用宝）、《龙投智慧停车》（版本 1.1.0，5577 网站）、《山西 ETC》（版本 1.6.3.4，苹果应用商店）、《昕宝泊车》（版本 1.0.8，腾牛网）、《芬空间》（版本 4.1.6，豌豆荚）、《捷信金融》（版本 34.53.2，应用宝）、《武清村镇银行》（版本 6.4.5.3，vivo 应用商店）、《汇通启富-山西证券》（版本 7.7.4.1，vivo 应用商店）、《觅睿》（版本 5.7.7，应用宝）、《弘历投教》（版本 1.3.9，小米应用商店）、《兰州银行企业版》（版本 1.4.2，应用宝）、《风暴迷城》（版本 1.04.06，当快软件园）。&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 8、通过自动化决策方式向个人进行信息推送、商业营销，未同时提供不针对其个人特征的选项，或者未向个人提供便捷的拒绝方式。涉及 4 款移动应用如下：&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 《河北航空》（版本 2.2.5，360 手机助手）、《芬空间》（版本 4.1.6，豌豆荚）、《中华万年历》（版本 9.5.0，360 手机助手）、《云视通》（版本 10.6.16，应用宝）。&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 9、处理敏感个人信息未取得个人的单独同意；个人信息处理者处理敏感个人信息的，未向个人告知处理敏感个人信息的必要性以及对个人权益的影响。涉及 5 款移动应用如下：&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 《准准》（版本 2.1.1，应用宝）、《客很多》（版本 2.8.9，百度手机助手）、《粮信粮油信息网》（版本 23.1，应用宝）、《小蛙农服》（版本 2.1.8，应用宝）、《携程金融》（版本 3.5.8，多多软件站）。&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 10、个人信息处理者处理不满十四周岁未成年人个人信息的，未制定专门的个人信息处理规则；收集未成年人信息未取得监护人单独同意。涉及 3 款移动应用如下：&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 《客很多》（版本 2.8.9，百度手机助手）、《趣衞课堂》（版本 3.0.6，当下软件园）、《万年历》（版本 7.1.5，百度手机助手）。&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 11、个人信息处理者向中华人民共和国境外提供个人信息的，未向个人告知境外接收方的名称或者姓名、联系方式、处理目的、处理方式、个人信息的种类以及个人向境外接收方行使本法规定权利的方式和程序等事项，并取得个人的单独同意。涉及 1 款移动应用如下：&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 《客很多》（版本 2.8.9，百度手机助手）。&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 12、未采取相应的加密、去标识化等安全技术措施。涉及 10 款移动应用如下：&lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 《客很多》（版本 2.8.9，百度手机助手）、《牧原通司机》（版本 2.4.4，87G 手游网）、《朝暮计划》（版本 2.2.5，豌豆荚）、《问真八字排盘》（版本 2.4.9，当快软件园）、《趣衞课堂》（版本 3.0.6，当下软件园）、《珠子云计算》（版本 1.9.6，360 手机助手）、《龙投智慧停车》（版本 1.1.0，5577 网站）、《山西 ETC》（版本 1.6.3.4，苹果应用商店）、《芬空间》（版本 4.1.6，豌豆荚）、《云视通》（版本 10.6.16，应用宝）。&lt;br&gt; &lt;br&gt; （注：文中所列移动应用检测时间为 2025 年 3 月 1 日至 2025 年 4 月 8 日）&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345931</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345931</guid>
            <pubDate>Tue, 22 Apr 2025 07:04:30 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>微软开源「原生 1-bit」模型：超过 20 亿参数、大幅减少内存占用</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;微软近日发布了 20 亿参数的 1-bit 模型——BitNet b1.58 LLM 家族，称此新型模型比主流 Transformer LLM 更不占内存且更低能耗，适合在 CPU 或较小型硬件平台上执行。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Hugging Face 地址：https://huggingface.co/microsoft/bitnet-b1.58-2B-4T&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;微软研究院与中国科学院研究人员 2023 年发布名为&lt;em&gt;《BitNet: Scaling 1-bit Transformers for Large Language Models》&lt;/em&gt;的论文，首度发布为大语言模型设计的 1-bit Transformer 架构，称为 BitNet。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img height=&quot;652&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0422/144455_0wht_2720166.png&quot; width=&quot;1640&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fpdf%2F2310.11453&quot; target=&quot;_blank&quot;&gt;https://arxiv.org/pdf/2310.11453&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;微软表示，这是第一个参数 20 亿的开源原生 1-bit LLM。它是以 4 兆字词的数据集训练而成，具备 4096 token 的 context length。&lt;/p&gt; 
&lt;p&gt;研究团队说明，在 BitNet b1.58 模型中，单一参数或权重是三元（ {-1, 0, 1}）的。此类新模型架构引入 BitLinear 作为 nn.Linear 层的替代，能够训练 1-bit 的权重，训练出的 LLM 和同样参数量及训练字词的全精度（FP16）Transformer LLM 模型相较，具有相同的困惑度（perplexity）及终端任务性能，但却能大幅减少了内存占用和能源耗损，就延迟性及传输率表现而言也更省成本。&lt;/p&gt; 
&lt;p&gt;微软团队认为，最重要的是， BitNet b1.58 提出了新的模型扩展法则，可用于训练高性能及低成本的下时代 LLM，而且 BitNet b1.58 对 CPU 设备更为友善，更适合执行于边缘和移动设备上，显示出性能和能力。研究人员相信 1-bit LLM 可催生出新的硬件和为其优化的系统。&lt;/p&gt; 
&lt;p&gt;根据研究团队比较测试，BitNet b1.58-3B/3.9B 版本占用内存为 2.22GB 及 2.38GB，远小于 LLaMA-3B 的 7.89GB。延迟性来看，BitNet b1.58-3B/3.9B 各为 1.87ms 及 2.11ms，优于 LLaMA-3B 的 5.07ms。二个 BitNet b1.58 的 PPL 以及零样本训练准确性表现，也都超越 LLaMA-3B。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-71148999f84c54ad70f9d7aa205865f74b4.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;微软已在 Hugging Face 开源三个版本的 Bitnet-b1.58 模型权重，一是 BitNet b1.58 2B4T，适合模型部署。二是 Bitnet-b1.58-2B-4T-bf16，仅适合模型训练或微调。BitNet-b1.58-2B-4T-gguf 则包含 GGUF 格式的权重，兼容 bitnet.cpp 函数库用于 CPU 推论。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0422/144344_1GHt_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;论文地址：https://arxiv.org/abs/2504.12285&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;但微软也警告开发人员，目前 Transformers 函数库的执行方式并没有包含为 BitNet 设计、高度优化的计算核心，因此无法彰显 BitNet 架构的好处。&lt;/p&gt; 
&lt;p&gt;所以，虽然开发人员可能会因这个模型使用了量化（quantized）的权重而看到节省了一点内存，但无法看出速度快、能耗低等性能优势，因为 transformers 本身不支持 BitNet 所需要的底层运算加速。想要体验论文中提到的性能（包括低功耗和高效率的推论），必须使用官方提供的 C++ 实例版本：bitnet.cpp。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345921/microsoft-bitnet</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345921/microsoft-bitnet</guid>
            <pubDate>Tue, 22 Apr 2025 06:47:30 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>OpenAI 发布 Agent 开发指南</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;OpenAI 官方发布了首个 Agent 开发指南，帮助开发者如何通过其 SDK 快速开发智能体。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0422/143339_bEYO_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn.openai.com%2Fbusiness-guides-and-resources%2Fa-practical-guide-to-building-agents.pdf&quot; target=&quot;_blank&quot;&gt;https://cdn.openai.com/business-guides-and-resources/a-practical-guide-to-building-agents.pdf&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;在这份指南中，OpenAI 详细介绍了从智能体的大模型选择，工具定义，复杂智能体，安全护栏等所有开发流程，并附加了大量实际开发案例。&lt;/p&gt; 
&lt;p&gt;即便你不使用 OpenAI 开源的 AgentSDK 来开发智能体，也可以作为开发参考样本，它提供了清晰的开发框架和思路，无论是资深开发者还是刚入门的新人都能获得很好的启发。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345914/openai-a-practical-guide-to-building-agents</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345914/openai-a-practical-guide-to-building-agents</guid>
            <pubDate>Mon, 14 Apr 2025 06:34:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>​哥伦比亚大学退学生开发「AI 面试作弊神器」，融资 500 万美元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;哥伦比亚大学的两位退学生 Chungin 「Roy」 Lee 和 Neel Shanmugam 联合创办的初创公司 Cluely，近日宣布完成 530 万美元的种子轮融资，投资方包括 Abstract Ventures 和 Susa Ventures。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Cluely 主要推出了一款名为 Interview Coder 的 AI 工具，该工具被称为 「面试作弊神器」，能够在各种场景中帮助用户隐秘使用人工智能，包括考试、销售电话和求职面试等。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;349&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-b9f0bdd893d0c8e90d81a5d9a3ab7cf6e80.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;这款工具的开发源于 Lee 在社交媒体平台 X 上的一则热门帖子。Lee 透露，他和联合创始人因共同开发 Interview Coder 而被哥伦比亚大学停学。该工具的核心是一个隐藏式的浏览器窗口，能够在面试官或考官的视线之外工作，提供实时的信息和帮助。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Lee 目前担任 Cluely 的首席执行官，他在采访中提到，该 AI 工具在本月的年度经常性收入（ARR）已经突破 300 万美元。Lee 表示，正是借助这款工具，他成功获得了亚马逊的实习机会。虽然亚马逊未对他的情况做出回应，但公司强调，所有面试者都不得使用任何未经授权的工具。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;联合创始人 Neel Shanmugam 同样年仅 21 岁，也曾是哥伦比亚大学的学生，现担任 Cluely 的首席运营官。由于参与该工具的开发，他们都曾面临校方的纪律处分。根据哥大学生报的报道，两人目前已经正式退学，校方以保护学生隐私为由，拒绝对此事作出评论。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;起初，Cluely 的目标是帮助程序员解决 LeetCode 上的编程题目，这些题目在部分程序员中被视为老旧和浪费时间。Lee 自言，正是这款 AI 工具帮助他顺利获得了实习机会，这也引发了人们对使用 AI 工具在求职面试中是否合理的讨论。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345910</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345910</guid>
            <pubDate>Mon, 14 Apr 2025 06:22:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>OpenAI o3 模型基准测试成绩远低于官方宣传分数</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2025%2F04%2F20%2Fopenais-o3-ai-model-scores-lower-on-a-benchmark-than-the-company-initially-implied%2F&quot; target=&quot;_blank&quot;&gt;根据 TechCrunch 的报道&lt;/a&gt;，OpenAI o3 模型的第一方与第三方基准测试结果存在显著差异，引发了外界对其公司透明度和模型测试实践的质疑。&lt;/p&gt; 
&lt;p&gt;去年 12 月，OpenAI 首次发布 o3 模型时宣称，该模型能够在 FrontierMath 这一极具挑战性的数学问题集上正确回答超过四分之一的问题。这一成绩远远超过了竞争对手 —— 排名第二的模型仅能正确回答约 2% 的 FrontierMath 问题。&lt;/p&gt; 
&lt;p&gt;OpenAI 首席研究官 Mark Chen 在直播中表示：「目前市场上所有其他产品在 FrontierMath 上的成绩都不足 2%，而我们在内部测试中，使用 o3 模型在激进的测试时计算设置下，能够达到超过 25% 的正确率。」&lt;/p&gt; 
&lt;p&gt;然而，这一高分似乎是一个上限值，是通过一个计算资源更为强大的 o3 模型版本实现的，而并非是 OpenAI 上周公开发布的版本。&lt;/p&gt; 
&lt;p&gt;负责 FrontierMath 的 Epoch 研究所于上周五&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2FEpochAIResearch%2Fstatus%2F1913379475468833146&quot; target=&quot;_blank&quot;&gt;公布&lt;/a&gt;&lt;/u&gt;了其对 o3 模型的独立基准测试结果，发现 o3 的得分仅为约 10%，远低于 OpenAI 此前声称的最高分数。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1846&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0422/142113_mK3X_2720166.png&quot; width=&quot;1638&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;这并不意味着 OpenAI 故意撒谎，该公司在 12 月份公布的基准测试结果中也包含了一个与 Epoch 测试结果相符的较低分数。Epoch 还指出，其测试设置可能与 OpenAI 有所不同，并且其评估使用了更新版本的 FrontierMath。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345909/openais-o3-ai-model-scores-lower-on-a-benchmark</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345909/openais-o3-ai-model-scores-lower-on-a-benchmark</guid>
            <pubDate>Mon, 14 Apr 2025 06:22:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>真我推出首款 AI 翻译耳机，支持 32 种语言翻译</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;真我手机官方微博宣布，其首款 AI 翻译耳机 Bud Air7Pro 即将于 4 月 23 日下午 16 时正式上市。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;这款耳机将搭载讯飞的星火认知大模型 4.0Ultra，具备强大的翻译能力，不仅能够支持中文与 32 种语言的面对面翻译，还具备同声传译功能。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;337&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-523052d04106b4daf3c747474edf152e292.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;这款耳机的发布将与真我 GT7 手机的新品发布会一起进行，届时将展示更多创新技术。真我 GT7 手机搭载的是天玑 9400+ 芯片，配备 7200mAh 的大电池，支持 100W 光速充电技术。此外，手机还采用全新的 GT 性能引擎 2.0，结合芯片级内核技术，承诺实现 「无限稳帧」，使得用户在玩游戏时更加流畅。为了更好地散热，GT7 还配备了行业最大 7700mm² 的单 VC 均热板以及首发的冰感石墨烯材料，确保长时间使用的稳定性。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345904</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345904</guid>
            <pubDate>Mon, 14 Apr 2025 06:05:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Trae 重磅升级：全面开放自定义 AI 能力，用户可打造个人专属「AI 工程师」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;随着 AI 技术的迅猛发展，编程工具正经历着深刻的变革。2025 年 4 月，Trae 新版本正式上线，不仅丰富了品牌内涵，也带来了多项重磅升级，率先在行业内勾勒出具有想象力的个性化「AI 对话式编程新范式」。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;Trae 新版本将 Marscode 整合入「Trae」的品牌内涵中，统一了「Trae」的范式概念，紧密围绕 AI 与人的「协作力」，突破了传统 IDE 与 AI 插件助手形态边界。与其他 IDE 工具相比，Trae 新版本可以提供更自动高效、协作流畅和个性定制的开发体验，同时个性化与自由度也进一步提升，实现了用户可根据所需，在更短时间内完成复杂开发任务的 AI 协作能力，向着「打造真正的专属 AI 工程师」这一目标继续迈进，为用户提升开发效率和创新能力。&lt;/p&gt; 
&lt;h1&gt;对话式编程，更高效、更流畅、更定制&lt;/h1&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;升级中，Trae 新版本不仅带来了智能体与上下文理解能力，还提供多种 AI 工具，并支持 MCP 自由接入各类外部资源；在产品交互形态上，Trae 新版本把原先的 Builder 与 Chat 板块融合，打破了传统以代码为中心的 IDE 模式，率先一步走向「对话即编程」的未来开发模式，使 AI 的强大能力在编程领域以协作的方式深度释放。&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;@&lt;/strong&gt;&lt;strong&gt;智能体&lt;/strong&gt;&lt;strong&gt;：自定义属于你的「&lt;/strong&gt;&lt;strong&gt;AI&lt;/strong&gt;&lt;strong&gt;研发伙伴」&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;具体来看，Trae 新版本引入了智能体系统，通过 Trae 内置的通用智能体@Builder，用户只需通过简单的指令，即可实现「需求即代码」，让 AI 自主完成需求分析、方案规划和任务执行。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;而更值得注意的是，Trae 新版本还上线了全新可自由配置的智能体体系。Trae 新版本允许用户自定义智能体，以适应不同研发需求。用户可以根据需求灵活定义工具、技能和任务逻辑，打造适配不同场景的专属 AI 智能体，获得自己的「AI 研发伙伴」。无论是复杂系统的构建还是日常代码重构，这些智能体都能提供精准、高效的支持，使研发工作全流程「丝滑顺畅」，配合紧密。&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;#上下文理解：支持多类型文件输入，更懂你的需求&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;Trae 新版本丰富的上下文理解能力，也成为其智能开发的关键。升级后的 Trae 新版本，上下文感知能力得到了显著增强，可支持联网搜索、文档解析和代码仓库信息理解等多种功能。这种增强的上下文感知能力使得 Trae 能够接收并理解更多类型的外部信息，包括但不限于产品原型文档、figma 链接等多种类型上下文内容，从而更全面地理解开发者需求。另外，开发者还可以通过自定义 AI 工作规则 （Trae Rules），让 AI 按照你的需求，执行个性化的任务。&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;打造开放&lt;/strong&gt;&lt;strong&gt;AI&lt;/strong&gt;&lt;strong&gt;工具体系，支持&lt;/strong&gt;&lt;strong&gt;MCP&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;最后，Trae 还丰富了外部 AI 工具与资源接入的方式，不断强化 AI 工具体系的生态化建设，带来更强的任务处理能力与个性化程度。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;Trae 新版本现已支持 MCP（Model Context Protocol，模型上下文协议）协议，作为定义了应用程序和 AI 模型之间交换上下文信息方式，为大模型调用外部工具提供统一的标准的「入口」，此次 MCP 协议的实现为用户自由接入 AI 工具带来了便利，进一步拓展了专属「AI 团队」定制的开放性。由此，Trae 新版本内的智能体可以自由调用外部的，带有不同行业属性的 AI 工具或资源，实现跨平台的系统集成、大规模数据处理和高级算法优化等，为各个领域、行业的开发任务带来个性化定制，满足不同的项目开发需求。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;例如，借助前端 Agent，Trae 新版本，能够调用 Figma 的 MCP 接口，快速将 UI 设计转化为代码。后端 Agent 则可操作数据库，实现数据的增删改查。更令人兴奋的是，Trae 新版本的 Agent 还能连接 Blender 进行 3D 渲染，甚至通过音乐 MCP 接口进行音乐创作。这也表明 Trae 新版本不仅是一款编程工具，更是未来人类与 AI 交互的重要入口，它将极大地促进着人与 AI、AI 与 AI 之间的紧密协作。&lt;/p&gt; 
&lt;h1&gt;Trae 全新版本，创新 AI 编程协作新体验&lt;/h1&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;不难看出，Trae 新版本从 AI 出发，为不同能力处于不同层次的开发者提供有效助力。对专业开发者而言，它可定义多种智能角色构建强大的「AI 团队」，自动处理重复性任务，优化代码质量和架构设计，助力其将精力聚焦于技术创新，突破效率瓶颈；对非专业开发者，它通过简单对话将业务需求快速转化为技术方案，跨越技术壁垒，加速创意验证。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;Trae 新版本突破传统工具的「中心执行者」局限，重新定义了 AI 的开发范式，以「协作」替代「工具」，用「能力」突破「单向效率」，进一步清晰化「AI 工程师角色」，助力 AI 伙伴与人类研发者可以「各司其职」，双向配合。可以说，它全方位、深层次协助开发者攻克难题，使其从繁琐事务中解脱，重构创造力天花板。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;Trae 始终秉持「智能无限、协作无间」的核心价值，致力于成为真正的 AI 工程师，与开发者默契协作，高效完成任务。选择 Trae，即选择与智能伙伴同行，迈向无限可能的未来。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;即刻百度搜索 Trae AI IDE，和我们一起，解锁你的首个 AI 工程师伙伴吧！&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345900</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345900</guid>
            <pubDate>Mon, 14 Apr 2025 05:57:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>Trae v1.3.0 发布，新增 MCP 支持</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;字节跳动旗下的 AI 原生集成开发环境（AI IDE）Trae 已发布 v1.3.0 版本，具体变更细节如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;合并 Chat 与 Builder 面板。你可以通过 @Builder 方式将 Builder 作为智能体使用。详情参考《&lt;a href=&quot;https://www.oschina.net/ide/agent&quot;&gt;智能体&lt;/a&gt;》。&lt;/li&gt; 
 &lt;li&gt;支持将文档内容和网页内容作为上下文： 
  &lt;ul&gt; 
   &lt;li&gt;#Web：支持联网搜索，AI 会自动提取网页内的相关内容作为上下文。&lt;/li&gt; 
   &lt;li&gt;#Doc：支持通过 URL 或上传 .md/.txt 文件的方式添加文档集。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情参考《&lt;a href=&quot;https://www.oschina.net/ide/context&quot;&gt;上下文&lt;/a&gt;》。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;支持通过配置规则来规范 AI 的行为，包括： 
  &lt;ul&gt; 
   &lt;li&gt;个人规则：根据个人偏好创建适用于所有项目的规则。&lt;/li&gt; 
   &lt;li&gt;项目规则： 创建仅适用于当前项目的规则。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情参考《&lt;a href=&quot;https://www.oschina.net/ide/rules&quot;&gt;规则&lt;/a&gt;》。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;升级智能体（Agent）能力： 
  &lt;ul&gt; 
   &lt;li&gt;支持创建自定义智能体。你可以自定义智能体的提示词和工具集。&lt;/li&gt; 
   &lt;li&gt;提供两个内置智能体：Builder 和 Builder with MCP。&lt;/li&gt; 
   &lt;li&gt;支持为智能体开启 「自动运行」 模式，使智能体自动执行命令和调用工具，同时支持配置命令黑名单。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情参考《&lt;a href=&quot;https://www.oschina.net/ide/agent&quot;&gt;智能体&lt;/a&gt;》。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;支持模型上下文协议（MCP）： 
  &lt;ul&gt; 
   &lt;li&gt;提供内置 MCP 市场，支持快速添加第三方 MCP Servers。&lt;/li&gt; 
   &lt;li&gt;支持将 MCP Server 添加到智能体进行使用，从而丰富智能体的能力。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情参考《&lt;a href=&quot;https://www.oschina.net/ide/model-context-protocol&quot;&gt;模型上下文协议&lt;/a&gt;》。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;259&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9610f08db7855b2462e630336227b4ed9d8.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;更多详情可查看 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.trae.ai%2Fide%2Fchangelog%3F_lang%3Dzh&quot; target=&quot;_blank&quot;&gt;changelog&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相关阅读：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/336617&quot; target=&quot;_blank&quot;&gt;中国首款 AI IDE：Trae 国内版发布&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345886/trae-1-3-0-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345886/trae-1-3-0-released</guid>
            <pubDate>Mon, 14 Apr 2025 03:53:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>谷歌 AI 概览致网站点击率暴跌 34.5%</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#242424&quot;&gt;知名 SEO 工具提供商 Ahrefs 近期发布一项研究，揭示了谷歌 AI 概览功能对搜索结果页面（SERP）点击率的显著负面影响。研究数据显示，当搜索结果中出现 AI 概览时，相关关键词的平均点击率骤降 34.5%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;392&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-92ed7fc38546395732f3309d9c08aa49267.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;color:#242424; margin-left:0; margin-right:0; text-align:left&quot;&gt;该研究选取了 Ahrefs 关键词资源管理器数据库中的 30 万个关键词，其中一半触发了 AI 概览，另一半则未触发。通过对比 2024 年 3 月（AI 概览推出前）和 2025 年 3 月 (推出后) 的数据，研究人员发现，触发 AI 概览的关键词平均点击率从 0.073 大幅下降至 0.026。&lt;/p&gt; 
&lt;p style=&quot;color:#242424; margin-left:0; margin-right:0; text-align:left&quot;&gt;令人担忧的是，即使是未触发 AI 概览的信息类关键词，其点击率也从 0.056 降至 0.031。Ahrefs 的研究结果清晰地表明，谷歌的 AI 概览功能正在显著改变用户的搜索行为，并对网站的自然流量造成了严重冲击。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345879</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345879</guid>
            <pubDate>Mon, 14 Apr 2025 03:33:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>生树科技发布高可控 AI 视频大模型「Vidu Q1」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;生树科技旗下的 Vidu AI 发布了业内首个高可控 AI 视频大模型「Q1」。&lt;/p&gt; 
&lt;p&gt;据介绍，Vidu Q1 在多主体细节可控、音效同步可控、画质增强等方面都取得出色表现。并且 Vidu Q1 在四大核心能力进行了全面升级：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;极「质」高清：画质细节全面提升，出片更清晰、更具质感；&lt;/li&gt; 
 &lt;li&gt;极「质」镜头：首尾帧衔接更顺滑，镜头语言更具电影感；&lt;/li&gt; 
 &lt;li&gt;极「质」音效：一句话生成专属音效，支持时段自定义和音效叠加；&lt;/li&gt; 
 &lt;li&gt;极「质」风格：动漫风格再度升级，稳定流畅、更具表现力。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;目前，Vidu Q1 已上线 Vidu 官网，支持时长 5 秒、1080p 的视频生成。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9f651ce91fd82273f3e8e30d4ffdb4e2722.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;根据官方介绍，Vidu Q1 作为业内首个高可控 AI 视频大模型，其在多主体细节可控（特别是动作、布局可控）、音效同步可控、画质增强等方面均取得显著成效。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0422/113123_ip33_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;以多主体细节可控为例，在语义指令的基础上，通过融入参考图的视觉指令，Vidu Q1 支持对场景中多主体的位置、大小、运动轨迹等属性进行更进一步的可控，对所有动作行为（出场、退场、坐立姿态、行动路线）进行精准调整。用户能够明显体验到用更低的抽卡率实现更高质量的可控生成。&lt;/p&gt; 
&lt;p&gt;音效同步可控功能则确保了随着视频环境与画面转场，Vidu Q1 能够输出生成相应音效，并可精准控制每段音效的长短区间，精准设置每段音频出现的时间点，如 0-2s 风声、3-5s 雨声等，节省时间的同时，也大大增强了视频的沉浸感与感染力。&lt;/p&gt; 
&lt;p&gt;Vidu Q1 模型通过进一步增强画质，则能够为用户带去更加清晰、细腻、逼真的视觉体验。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345878</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345878</guid>
            <pubDate>Mon, 14 Apr 2025 03:31:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Java 开发玩转 MCP：从 Claude 自动化到 Spring AI Alibaba 生态整合</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-d815590257bec8de39a8554864a558ad1b4.gif&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;摘要&lt;/h1&gt; 
&lt;p&gt;本文以原理与示例结合的形式讲解 Java 开发者如何基于 Spring AI Alibaba 框架玩转 MCP，主要包含以下内容。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;一些 MCP 基础与快速体验（熟悉的读者可以跳过此部分）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如何将自己开发的 Spring 应用发布为 MCP Server，验证使用 Claude 或 Spring 应用作为客户端接入自己发布的 Java MCP Server。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;发布 stdio 模式的 MCP Server&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;发布 SSE 模式的 MCP Server&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;开发另一个 Spring 应用作为 MCP Client 调用 MCP Server 服务&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用 Claude 桌面应用接入我们的 Java MCP Server&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;如何使用自己开发的 Spring 应用调用 MCP Server，包括调用自己发布的 Java MCP Server，也包括市面上其他通用 MCP Server。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;配置并调用 stdio 模式的 MCP Server&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;配置并调用 SSE 模式的 MCP Server&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt; &lt;p&gt;如何在 Spring AI Alibaba OpemManus 实现中使用 MCP 服务。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;关于存量应用如何一行代码不动就可以被当作 MCP 服务被智能体调用，请关注后续文章解决方案。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Spring AI Alibaba 开源项目地址&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falibaba%2Fspring-ai-alibaba&quot; target=&quot;_blank&quot;&gt;https://github.com/alibaba/spring-ai-alibaba&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;本文外网博客地址&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjava2ai.com&quot; target=&quot;_blank&quot;&gt;https://java2ai.com&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;本示例源码地址&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspringaialibaba%2Fspring-ai-alibaba-examples%2Ftree%2Fmain%2Fspring-ai-alibaba-mcp-example&quot; target=&quot;_blank&quot;&gt;https://github.com/springaialibaba/spring-ai-alibaba-examples/tree/main/spring-ai-alibaba-mcp-example&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;模型上下文协议（Model Context Protocol）入门&lt;/h1&gt; 
&lt;p&gt;2024 年 11 月，Anthropic 公司搞了个挺有意思的新玩意 - Model Context Protocol（模型上下文协议）简称为 MCP 协议。简单来说，它就是给 AI 和各类工具数据之间搭了个标准化的&quot;桥梁&quot;，让开发者不用再为对接问题头疼了。&lt;/p&gt; 
&lt;p&gt;大模型应用可以使用别人分享的 MCP 服务来完成各种各样的工作内容，你可以从这些地方获取 MCP 服务：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;awesome-mcp-servers&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;mcp.so&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;MCP 协议在实际的应用场景上非常广泛，列举一些比较常见的应用场景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;使用百度/高德地图分析旅线计算时间&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;接 Puppeteer 自动操作网页&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用 Github/Gitlab 让大模型接管代码仓库&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用数据库组件完成对 Mysql、ES、Redis 等数据库的操作&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用搜索组件扩展大模型的数据搜索能力&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;1.1 在 Claude Desktop 中体验 MCP&lt;/h2&gt; 
&lt;p&gt;接下来我们使用 Claude 快速接入 Github 服务（提前申请 token），编辑一下 Claude Desktop 的配置文件：&lt;/p&gt; 
&lt;p&gt;macOS：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;~/Library/Application Support/Claude/claude_desktop_config.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Windows：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;%APPDATA%\Claude\claude_desktop_config.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;添加如下内容，注意把&amp;lt;YOUR_TOKEN&amp;gt;替换成你自己申请的 token：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;{  &quot;mcpServers&quot;: {    &quot;github&quot;: {      &quot;command&quot;: &quot;npx&quot;,      &quot;args&quot;: [        &quot;-y&quot;,        &quot;@modelcontextprotocol/server-github&quot;      ],      &quot;env&quot;: {        &quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;: &quot;`&quot;      }    }  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;重启 Claude 之后，可以看到已经加载了 MCP 对应的工具：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-dc8ec71d98792e7aa1c37e0066fbc80e7e4.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;点开之后可以看到具体的工具内容：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-91339cd4bb2dff78713d3257cbb2d70b586.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;此时我们就可以享受 Github 服务提供的操作仓库的能力：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-0c0e8d55e10b1d3455bd42dbf2b8b81bb6d.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;从图上可以看到，通过创建仓库 test-mcp 这样的提示词，Claude 的大模型自行判断需要使用 mcp 中提供的 create_repository 能力，从而完成了仓库的创建，接下来我们打开 Github 也确实发现了这个已经创建的仓库。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-3ffc610a8d015a7785f352b35962d5a6eb7.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;通过这种方式，大模型就可以利用 MCP 接入各式各样的能力，完成各种更为复杂的工作。&lt;/p&gt; 
&lt;h2&gt;1.2 MCP 的架构&lt;/h2&gt; 
&lt;p&gt;MCP 主要分为 MCP 服务和 MCP 客户端：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;客户端：一般指的是大模型应用，比如 Claude、通过 Spring AI Alibaba、Langchain 等框架开发的 AI 应用&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;服务端：连接各种数据源的服务和工具&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;整体架构如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-5fc217ae1f82b6165a2047cfcdd996f0582.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;整体的工作流程是这样的：AI 应用中集成 MCP 客户端，通过 MCP 协议向 MCP 服务端发起请求，MCP 服务端可以连接本地/远程的数据源，或者通过 API 访问其他服务，从而完成数据的获取，返回给 AI 应用去使用。&lt;/p&gt; 
&lt;h1&gt;在 Spring AI 中使用 MCP Server&lt;/h1&gt; 
&lt;h2&gt;2.1 Spring AI MCP 的介绍&lt;/h2&gt; 
&lt;p&gt;Spring AI MCP 为模型上下文协议提供 Java 和 Spring 框架集成。它使 Spring AI 应用程序能够通过标准化的接口与不同的数据源和工具进行交互，支持同步和异步通信模式。整体架构如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-a9b9ba381218e4de5dcd333b213facd50e5.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Spring AI MCP 采用模块化架构，包括以下组件：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Spring AI 应用程序：使用 Spring AI 框架构建想要通过 MCP 访问数据的生成式 AI 应用程序&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Spring MCP 客户端：MCP 协议的 Spring AI 实现，与服务器保持 1:1 连接&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;通过 Spring AI MCP，可以快速搭建 MCP 客户端和服务端程序。&lt;/p&gt; 
&lt;h2&gt;2.2 使用 Spring AI MCP 快速搭建 MCP Server&lt;/h2&gt; 
&lt;p&gt;Spring AI 提供了两种机制快速搭建 MCP Server，通过这两种方式开发者可以快速向 AI 应用开放自身的能力，这两种机制如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;基于 stdio 的进程间通信传输，以独立的进程运行在 AI 应用本地，适用于比较轻量级的工具。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;基于 SSE（Server-Sent Events） 进行远程服务访问，需要将服务单独部署，客户端通过服务端的 URL 进行远程访问，适用于比较重量级的工具。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;接下来逐一介绍一下这两种方式的实现，示例代码可以通过如下链接获取：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspringaialibaba%2Fspring-ai-alibaba-examples%2Ftree%2Fmain%2Fspring-ai-alibaba-mcp-example%2Fstarter-example%2Fserver&quot; target=&quot;_blank&quot;&gt;https://github.com/springaialibaba/spring-ai-alibaba-examples/tree/main/spring-ai-alibaba-mcp-example/starter-example/server&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;2.2.1 基于 stdio 的 MCP 服务端实现&lt;/h3&gt; 
&lt;p&gt;基于 stdio 的 MCP 服务端通过标准输入输出流与客户端通信，适用于作为子进程被客户端启动和管理的场景。&lt;/p&gt; 
&lt;h4&gt;添加依赖&lt;/h4&gt; 
&lt;p&gt;首先，在项目中添加 Spring AI MCP Server Starter 依赖：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;spring-ai-mcp-server-spring-boot-starter&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;配置 MCP 服务端&lt;/h4&gt; 
&lt;p&gt;在 application.yml 中配置 MCP 服务端，这次要实现的是一个天气服务：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;spring:
  main:
    web-application-type: none  # 必须禁用 web 应用类型
    banner-mode: off           # 禁用 banner
  ai:
    mcp:
      server:
        stdio: true            # 启用 stdio 模式
        name: my-weather-server # 服务器名称
        version: 0.0.1         # 服务器版本
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;实现 MCP 工具&lt;/h4&gt; 
&lt;p&gt;使用 &lt;a href=&quot;https://my.oschina.net/u/999979&quot;&gt;@Tool&lt;/a&gt; 注解标记方法，使其可以被 MCP 客户端发现和调用，通过 @ToolParameter 注解工具的具体参数：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;@Service
public class OpenMeteoService {

    private final WebClient webClient;

    public OpenMeteoService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder
                .baseUrl(&quot;https://api.open-meteo.com/v1&quot;)
                .build();
    }

    @Tool(description = &quot;根据经纬度获取天气预报&quot;)
    public String getWeatherForecastByLocation(
            @ToolParameter(description = &quot;纬度，例如：39.9042&quot;) String latitude,
            @ToolParameter(description = &quot;经度，例如：116.4074&quot;) String longitude) {

        try {
            String response = webClient.get()
                    .uri(uriBuilder -&amp;gt; uriBuilder
                            .path(&quot;/forecast&quot;)
                            .queryParam(&quot;latitude&quot;, latitude)
                            .queryParam(&quot;longitude&quot;, longitude)
                            .queryParam(&quot;current&quot;, &quot;temperature_2m,wind_speed_10m&quot;)
                            .queryParam(&quot;timezone&quot;, &quot;auto&quot;)
                            .build())
                    .retrieve()
                    .bodyToMono(String.class)
                    .block();

            // 解析响应并返回格式化的天气信息
            // 这里简化处理，实际应用中应该解析 JSON
            return &quot;当前位置（纬度：&quot; + latitude + &quot;，经度：&quot; + longitude + &quot;）的天气信息：\n&quot; + response;
        } catch (Exception e) {
            return &quot;获取天气信息失败：&quot; + e.getMessage();
        }
    }

    @Tool(description = &quot;根据经纬度获取空气质量信息&quot;)
    public String getAirQuality(
            @ToolParameter(description = &quot;纬度，例如：39.9042&quot;) String latitude,
            @ToolParameter(description = &quot;经度，例如：116.4074&quot;) String longitude) {

        // 模拟数据，实际应用中应调用真实 API
        return &quot;当前位置（纬度：&quot; + latitude + &quot;，经度：&quot; + longitude + &quot;）的空气质量：\n&quot; +
                &quot;- PM2.5: 15 μg/m³ (优)\n&quot; +
                &quot;- PM10: 28 μg/m³ (良)\n&quot; +
                &quot;- 空气质量指数 (AQI): 42 (优)\n&quot; +
                &quot;- 主要污染物: 无&quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这里使用了 OpenMeteo， OpenMeteo 是一个开源的天气 API，为非商业用途提供免费访问，无需 API 密钥。&lt;/p&gt; 
&lt;h4&gt;注册 MCP 工具&lt;/h4&gt; 
&lt;p&gt;在应用程序入口类中注册工具：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;
@SpringBootApplication
public class McpServerApplication {

    public static void main(String[] args) {
        SpringApplication.run(McpServerApplication.class, args);
    }

    @Bean
    public ToolCallbackProvider weatherTools(OpenMeteoService openMeteoService) {
        return MethodToolCallbackProvider.builder()
                .toolObjects(openMeteoService)
                .build();
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;运行服务端&lt;/h4&gt; 
&lt;p&gt;在控制枱中执行如下命令，编译并打包应用：&lt;/p&gt; 
&lt;p&gt;Terminal window&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;mvn clean package -DskipTests
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2.2.2 基于 SSE 的 MCP 服务端实现&lt;/h3&gt; 
&lt;p&gt;基于 SSE 的 MCP 服务端通过 HTTP 协议与客户端通信，适用于作为独立服务部署的场景，可以被多个客户端远程调用，具体做法与 stdio 非常类似。&lt;/p&gt; 
&lt;h4&gt;添加依赖&lt;/h4&gt; 
&lt;p&gt;首先，在您的项目中添加依赖&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;spring-ai-mcp-server-webflux-spring-boot-starter&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;配置 MCP 服务端&lt;/h4&gt; 
&lt;p&gt;在 application.yml 中配置 MCP 服务端：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;server:
  port: 8080  # 服务器端口配置

spring:
  ai:
    mcp:
      server:
        name: my-weather-server    # MCP 服务器名称
        version: 0.0.1            # 服务器版本号
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;实现 MCP 工具&lt;/h4&gt; 
&lt;p&gt;与基于 stdio 的实现完全相同：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;@Service
public class OpenMeteoService {

    private final WebClient webClient;

    public OpenMeteoService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder
                .baseUrl(&quot;https://api.open-meteo.com/v1&quot;)
                .build();
    }

    @Tool(description = &quot;根据经纬度获取天气预报&quot;)
    public String getWeatherForecastByLocation(
            @ToolParameter(description = &quot;纬度，例如：39.9042&quot;) String latitude,
            @ToolParameter(description = &quot;经度，例如：116.4074&quot;) String longitude) {

        try {
            String response = webClient.get()
                    .uri(uriBuilder -&amp;gt; uriBuilder
                            .path(&quot;/forecast&quot;)
                            .queryParam(&quot;latitude&quot;, latitude)
                            .queryParam(&quot;longitude&quot;, longitude)
                            .queryParam(&quot;current&quot;, &quot;temperature_2m,wind_speed_10m&quot;)
                            .queryParam(&quot;timezone&quot;, &quot;auto&quot;)
                            .build())
                    .retrieve()
                    .bodyToMono(String.class)
                    .block();

            // 解析响应并返回格式化的天气信息
            return &quot;当前位置（纬度：&quot; + latitude + &quot;，经度：&quot; + longitude + &quot;）的天气信息：\n&quot; + response;
        } catch (Exception e) {
            return &quot;获取天气信息失败：&quot; + e.getMessage();
        }
    }

    @Tool(description = &quot;根据经纬度获取空气质量信息&quot;)
    public String getAirQuality(
            @ToolParameter(description = &quot;纬度，例如：39.9042&quot;) String latitude,
            @ToolParameter(description = &quot;经度，例如：116.4074&quot;) String longitude) {

        // 模拟数据，实际应用中应调用真实 API
        return &quot;当前位置（纬度：&quot; + latitude + &quot;，经度：&quot; + longitude + &quot;）的空气质量：\n&quot; +
                &quot;- PM2.5: 15 μg/m³ (优)\n&quot; +
                &quot;- PM10: 28 μg/m³ (良)\n&quot; +
                &quot;- 空气质量指数 (AQI): 42 (优)\n&quot; +
                &quot;- 主要污染物: 无&quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;注册 MCP 工具&lt;/h4&gt; 
&lt;p&gt;在应用程序入口类中注册工具：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;@SpringBootApplication
public class McpServerApplication {

    public static void main(String[] args) {
        SpringApplication.run(McpServerApplication.class, args);
    }

    @Bean
    public ToolCallbackProvider weatherTools(OpenMeteoService openMeteoService) {
        return MethodToolCallbackProvider.builder()
                .toolObjects(openMeteoService)
                .build();
    }

    @Bean
    public WebClient.Builder webClientBuilder() {
        return WebClient.builder();
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;运行服务端&lt;/h4&gt; 
&lt;p&gt;在控制枱中输入命令，运行服务端：&lt;/p&gt; 
&lt;p&gt;Terminal window&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;服务端将在 &lt;a href=&quot;http://localhost:8080&amp;nbsp;启动。&quot;&gt;http://localhost:8080 启动。&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;2.3 在 Claude 中测试 mcp 服务&lt;/h2&gt; 
&lt;p&gt;在上一小节中我们编写完了 MCP 服务，这些服务到底是否能正常运行呢？在 Claude Desktop 中可以测试一下。&lt;/p&gt; 
&lt;p&gt;修改配置文件，添加 weather 的配置，一定要注意 jar 包的路径必须是全路径：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;
{
    &quot;mcpServers&quot;: {
        &quot;github&quot;: {
            &quot;command&quot;: &quot;npx&quot;,
            &quot;args&quot;: [
                &quot;-y&quot;,
                &quot;@modelcontextprotocol/server-github&quot;
            ],
            &quot;env&quot;: {
                &quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;: your token
            }
        },
        &quot;weather&quot;: {
            &quot;command&quot;: &quot;java&quot;,
            &quot;args&quot;: [
                &quot;-Dspring.ai.mcp.server.stdio=true&quot;,
                &quot;-Dspring.main.web-application-type=none&quot;,
                &quot;-Dlogging.pattern.console=&quot;,
                &quot;-jar&quot;,
                &quot;&amp;lt;修改为 stdio 编译之后的 jar 包全路径&amp;gt;&quot;
            ],
            &quot;env&quot;: {}
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;重启 Claude 之后看到，我们编写的两个 Tool 已经被加载进来了：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-7100c9aa308868624320ef584dc031a03a3.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;输入提示词，查询今天北京的空气质量：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-9c703b86db11f95394387ebef38334cbba5.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Claude 触发了我们自己编写的天气服务，展示了完整的数据：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-27bb9775a7a87b3e1b7ad03aef1de146eb3.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;上面使用了 stdio 的方式在 Claude Desktop 中使用我们自己编写的 MCP 服务，但是很可惜 Claude Desktop 不支持直接通过 SSE 模式访问，必须使用 mcp-proxy 作为中介，所以这里我们不再演示 Claude Desktop 接入 SSE 模式的 MCP 服务。&lt;/p&gt; 
&lt;h1&gt;在 Spring AI Alibaba 中集成 Mcp Client&lt;/h1&gt; 
&lt;p&gt;对于客户端，Spring AI 同样提供了 stdio 和 SSE 两种机制快速集成 MCP Server，分别对应到 MCP Server 的 stdio 和 SSE 两种模式，参考代码如下：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspringaialibaba%2Fspring-ai-alibaba-examples%2Ftree%2Fmain%2Fspring-ai-alibaba-mcp-example%2Fstarter-example%2Fclient&quot; target=&quot;_blank&quot;&gt;https://github.com/springaialibaba/spring-ai-alibaba-examples/tree/main/spring-ai-alibaba-mcp-example/starter-example/client&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;3.1 基于 stdio 的 MCP 客户端实现&lt;/h2&gt; 
&lt;p&gt;基于 stdio 的实现是最常见的 MCP 客户端实现方式，它通过标准输入输出流与 MCP 服务器进行通信。这种方式适用于使用了 stdio 方式本地部署的 MCP 服务器，可以直接在同一台机器上启动 MCP 服务器进程。&lt;/p&gt; 
&lt;h3&gt;添加依赖&lt;/h3&gt; 
&lt;p&gt;首先，在项目中添加 Spring AI MCP starter 依赖：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-ai-mcp-client-spring-boot-starter&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- 添加 Spring AI MCP starter 依赖 --&amp;gt;
&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;spring-ai-mcp-client-spring-boot-starter&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;配置 MCP 服务器&lt;/h3&gt; 
&lt;p&gt;在 application.yml 中配置 MCP 服务器：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;spring:
  ai:
    dashscope:
      # 配置通义千问 API 密钥
      api-key: ${DASH_SCOPE_API_KEY}
    mcp:
      client:
        stdio:
          # 指定 MCP 服务器配置文件路径（推荐）
          servers-configuration: classpath:/mcp-servers-config.json
          # 直接配置示例，和上边的配制二选一
          # connections:
          #   server1:
          #     command: java
          #     args:
          #       - -jar
          #       - /path/to/your/mcp-server.jar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这个配置文件设置了 MCP 客户端的基本配置，包括 API 密钥和服务器配置文件的位置。你也可以选择直接在配置文件中定义服务器配置，但是还是建议使用 json 文件管理 mcp 配置。在 resources 目录下创建 mcp-servers-config.json 配置文件：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;{
    &quot;mcpServers&quot;: {
        // 定义名为&quot;weather&quot;的 MCP 服务器
        &quot;weather&quot;: {
            // 指定启动命令为 java
            &quot;command&quot;: &quot;java&quot;,
            // 定义启动参数
            &quot;args&quot;: [
                &quot;-Dspring.ai.mcp.server.stdio=true&quot;,
                &quot;-Dspring.main.web-application-type=none&quot;,
                &quot;-jar&quot;,
                &quot;&amp;lt;修改为 stdio 编译之后的 jar 包全路径&amp;gt;&quot;
            ],
            // 环境变量配置（可选）
            &quot;env&quot;: {}
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这个 JSON 配置文件定义了 MCP 服务器的详细配置，包括如何启动服务器进程、需要传递的参数以及环境变量设置，还是要注意引用的 jar 包必须是全路径的。&lt;/p&gt; 
&lt;h3&gt;编写一个启动类进行测试：&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;```java
@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        // 启动 Spring Boot 应用
        SpringApplication.run(Application.class, args);
    }

    [@Bean](https://my.oschina.net/bean)
    public CommandLineRunner predefinedQuestions(
            ChatClient.Builder chatClientBuilder,
            ToolCallbackProvider tools,
            ConfigurableApplicationContext context) {
        return args -&amp;gt; {
            // 构建 ChatClient 并注入 MCP 工具
            var chatClient = chatClientBuilder
                    .defaultTools(tools)
                    .build();

            // 定义用户输入
            String userInput = &quot;北京的天气如何？&quot;;
            // 打印问题
            System.out.println(&quot;\n&amp;gt;&amp;gt;&amp;gt; QUESTION: &quot; + userInput);
            // 调用 LLM 并打印响应
            System.out.println(&quot;\n&amp;gt;&amp;gt;&amp;gt; ASSISTANT: &quot; +
                chatClient.prompt(userInput).call().content());

            // 关闭应用上下文
            context.close();
        };
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;这段代码展示了如何在 Spring Boot 应用中使用 MCP 客户端。它创建了一个命令行运行器，构建了 ChatClient 并注入了 MCP 工具，然后使用这个客户端发送查询并获取响应。在 Spring AI Alibaba 中使用 Mcp 工具非常简单，只需要把 ToolCallbackProvider 放到 chatClientBuilder 的 defaultTools 方法中，就可以自动的适配。

通过命令启动程序进行测试：

Terminal window

```plaintext
mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;启动之后显示结果为，从日志可以看到我们自己编写的 mcp server 被调用了，返回了数据：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;&amp;gt;&amp;gt;&amp;gt; QUESTION: 北京的天气如何？
2025-03-31T17:56:17.931+08:00 DEBUG 23455 --- [mcp] [pool-1-thread-1] io.modelcontextprotocol.spec.McpSchema   : Received JSON message: {&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:&quot;60209de5-3&quot;,&quot;result&quot;:{&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\&quot;当前天气:\n 温度: 18.6°C (体感温度: 15.1°C)\n 天气: 多云\n 风向: 南风 (4.7 km/h)\n 湿度: 18%\n 降水量: 0.0 毫米\n\n 未来天气预报:\n2025-03-31 (周一):\n 温度: 2.4°C ~ 19.5°C\n 天气: 多云\n 风向: 南风 (8.4 km/h)\n 降水量: 0.0 毫米\n\n2025-04-01 (周二):\n 温度: 7.6°C ~ 20.6°C\n 天气: 多云\n 风向: 西北风 (19.1 km/h)\n 降水量: 0.0 毫米\n\n2025-04-02 (周三):\n 温度: 6.9°C ~ 18.4°C\n 天气: 晴朗\n 风向: 西北风 (12.8 km/h)\n 降水量: 0.0 毫米\n\n2025-04-03 (周四):\n 温度: 7.0°C ~ 19.8°C\n 天气: 多云\n 风向: 南风 (16.3 km/h)\n 降水量: 0.0 毫米\n\n2025-04-04 (周五):\n 温度: 7.5°C ~ 21.6°C\n 天气: 多云\n 风向: 西北风 (19.6 km/h)\n 降水量: 0.0 毫米\n\n2025-04-05 (周六):\n 温度: 5.6°C ~ 20.7°C\n 天气: 多云\n 风向: 西风 (16.5 km/h)\n 降水量: 0.0 毫米\n\n2025-04-06 (周日):\n 温度: 8.4°C ~ 22.3°C\n 天气: 晴朗\n 风向: 南风 (9.4 km/h)\n 降水量: 0.0 毫米\n\n\&quot;&quot;}],&quot;isError&quot;:false}}
2025-03-31T17:56:17.932+08:00 DEBUG 23455 --- [mcp] [pool-1-thread-1] i.m.spec.McpClientSession                : Received Response: JSONRPCResponse[jsonrpc=2.0, id=60209de5-3, result={content=[{type=text, text=&quot;当前天气:\n 温度: 18.6°C (体感温度: 15.1°C)\n 天气: 多云\n 风向: 南风 (4.7 km/h)\n 湿度: 18%\n 降水量: 0.0 毫米\n\n 未来天气预报:\n2025-03-31 (周一):\n 温度: 2.4°C ~ 19.5°C\n 天气: 多云\n 风向: 南风 (8.4 km/h)\n 降水量: 0.0 毫米\n\n2025-04-01 (周二):\n 温度: 7.6°C ~ 20.6°C\n 天气: 多云\n 风向: 西北风 (19.1 km/h)\n 降水量: 0.0 毫米\n\n2025-04-02 (周三):\n 温度: 6.9°C ~ 18.4°C\n 天气: 晴朗\n 风向: 西北风 (12.8 km/h)\n 降水量: 0.0 毫米\n\n2025-04-03 (周四):\n 温度: 7.0°C ~ 19.8°C\n 天气: 多云\n 风向: 南风 (16.3 km/h)\n 降水量: 0.0 毫米\n\n2025-04-04 (周五):\n 温度: 7.5°C ~ 21.6°C\n 天气: 多云\n 风向: 西北风 (19.6 km/h)\n 降水量: 0.0 毫米\n\n2025-04-05 (周六):\n 温度: 5.6°C ~ 20.7°C\n 天气: 多云\n 风向: 西风 (16.5 km/h)\n 降水量: 0.0 毫米\n\n2025-04-06 (周日):\n 温度: 8.4°C ~ 22.3°C\n 天气: 晴朗\n 风向: 南风 (9.4 km/h)\n 降水量: 0.0 毫米\n\n&quot;}], isError=false}, error=null]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3.2 基于 SSE 的 MCP 客户端实现&lt;/h2&gt; 
&lt;p&gt;除了基于 stdio 的实现外，Spring AI Alibaba 还提供了基于 Server-Sent Events （SSE）的 MCP 客户端实现。这种方式适用于远程部署的 MCP 服务器，可以通过 HTTP 协议与 MCP 服务器进行通信。&lt;/p&gt; 
&lt;h3&gt;添加依赖&lt;/h3&gt; 
&lt;p&gt;首先，在您的项目中添加 Spring AI MCP starter 依赖：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;spring-ai-mcp-client-webflux-spring-boot-starter&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;配置 MCP 服务器&lt;/h3&gt; 
&lt;p&gt;在 application.yml 中配置 MCP 服务器，这里需要指定 SSE 启动的服务地址，之前我们在 8080 端口上启动了对应的服务：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;spring:
  ai:
    dashscope:
      api-key: ${DASH_SCOPE_API_KEY}
    mcp:
      client:
        sse:
          connections:
            server1:
              url: http://localhost:8080  #服务地址
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;使用 MCP 客户端&lt;/h3&gt; 
&lt;p&gt;使用方式与基于 stdio 的实现相同，只需注入 ToolCallbackProvider 和 ChatClient.Builder：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;
@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

    @Bean
    public CommandLineRunner predefinedQuestions(ChatClient.Builder chatClientBuilder,
                                                ToolCallbackProvider tools,
                                                ConfigurableApplicationContext context) {
        return args -&amp;gt; {
            // 构建 ChatClient 并注入 MCP 工具
            var chatClient = chatClientBuilder
                    .defaultTools(tools)
                    .build();

            // 使用 ChatClient 与 LLM 交互
            String userInput = &quot;北京的天气如何？&quot;;
            System.out.println(&quot;\n&amp;gt;&amp;gt;&amp;gt; QUESTION: &quot; + userInput);
            System.out.println(&quot;\n&amp;gt;&amp;gt;&amp;gt; ASSISTANT: &quot; + chatClient.prompt(userInput).call().content());

            context.close();
        };
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;通过命令启动程序进行测试：&lt;/p&gt; 
&lt;p&gt;Terminal window&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;启动之后会有报错：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;Caused by: java.lang.IllegalStateException: Multiple tools with the same name (spring-ai-mcp-client-getWeatherForecastByLocation, spring-ai-mcp-client-getAirQuality)
        at org.springframework.ai.mcp.SyncMcpToolCallbackProvider.validateToolCallbacks(SyncMcpToolCallbackProvider.java:126) ~[spring-ai-mcp-1.0.0-20250325.064812-147.jar:1.0.0-SNAPSHOT]
        at org.springframework.ai.mcp.SyncMcpToolCallbackProvider.getToolCallbacks(SyncMcpToolCallbackProvider.java:110) ~[spring-ai-mcp-1.0.0-20250325.064812-147.jar:1.0.0-SNAPSHOT]
        at org.springframework.ai.autoconfigure.mcp.client.McpClientAutoConfiguration.toolCallbacksDeprecated(McpClientAutoConfiguration.java:196) ~[spring-ai-mcp-client-spring-boot-autoconfigure-1.0.0-M6.jar:1.0.0-M6]
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
        at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.lambda$instantiate$0(SimpleInstantiationStrategy.java:171) ~[spring-beans-6.2.0.jar:6.2.0]
        ... 23 common frames omitted
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;从日志上分析，是因为注册了相同的服务名 spring-ai-mcp-client-getWeatherForecastByLocation 和 spring-ai-mcp-client-getAirQuality，但是从代码上分析，这两个服务我们都只注册了一次，那为什么会报错呢？&lt;/p&gt; 
&lt;p&gt;其实这是 Spring AI 目前的一个 BUG，Spring AI 提供了两个自动配置类去生成客户端工具处理 MCP 服务中 Tool 的获取，分别是 &lt;code&gt;SseHttpClientTransportAutoConfiguration&lt;/code&gt; 和 &lt;code&gt;SseWebFluxTransportAutoConfiguration&lt;/code&gt;。这两个自动配置类提供了同步和异步两种方式，本身应该是互斥的，但是 Spring AI 对于互斥的处理上出了问题，导致两个自动配置类都会加载。&lt;/p&gt; 
&lt;p&gt;SseWebFluxTransportAutoConfiguration 的加载：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-23f083ecc527f820de6224e9f193917d921.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt; SseHttpClientTransportAutoConfiguration 的加载：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-5496d48d41852976e888713691a2d965c87.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 两个自动配置类加载之后，就会向提供 SSE 服务的 MCP 服务申请 Tool，这样就导致同样的 Tool 被申请了两次，自然就会重复了。解决方案也非常简单，在启动类上排除 SseHttpClientTransportAutoConfiguration 实现就可以了。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;@SpringBootApplication(exclude = {
        org.springframework.ai.autoconfigure.mcp.client.SseHttpClientTransportAutoConfiguration.class
})
public class Application {
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;再次通过命令启动程序进行测试：&lt;/p&gt; 
&lt;p&gt;Terminal window&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这一次就输出了正确的结果：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-65be3a0a46eec7ce73a9d4be0526d25bd08.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;在 Spring AI Alibaba 的 Open Manus 中体验 MCP&lt;/h1&gt; 
&lt;p&gt;Spring AI Alibaba 中提供了 Open Manus 的实现，整体架构如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-a8cb185c8c8fb7b11e7600330bb7e53ee80.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在执行阶段，会调用各种 Tool 来完成任务，如果我们能使用 MCP 增加 Tool 的能力，那势必能 Open Manus 如虎添翼，接下来我们就来看一下 Open Manus 中是如何去使用 MCP 的。&lt;/p&gt; 
&lt;p&gt;源代码如下：&lt;/p&gt; 
&lt;p&gt;++&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falibaba%2Fspring-ai-alibaba%2Ftree%2Fmain%2Fcommunity%2Fopenmanus%2B%2B%EF%BB%BF&quot; target=&quot;_blank&quot;&gt;https://github.com/alibaba/spring-ai-alibaba/tree/main/community/openmanus++﻿&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;添加依赖&lt;/h3&gt; 
&lt;p&gt;首先，在项目中添加 Spring AI MCP starter 依赖：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.ai&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-ai-mcp-client-spring-boot-starter&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${spring-ai.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;配置 MCP 服务器&lt;/h3&gt; 
&lt;p&gt;在 application.yml 中已经配置了 MCP 服务器，设置客户端请求服务端的超时时间为 1 分钟：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-2f766be6cb3b55abb90c7f7596d015fcee7.webp&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;添加 mcp-servers-config.json，在 json 中配置了百度地图。百度地图核心 API 现已全面兼容 MCP 协议，是国内首家兼容 MCP 协议的地图服务商。百度地图已经完成了 8 个核心 API 接口和 MCP 协议的对接， 涵盖逆地理编码、地点检索、路线规划等。&lt;/p&gt; 
&lt;p&gt;使用百度地图的 MCP，需要申请 ak：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flbsyun.baidu.com%2Fapiconsole%2Fkey%E3%80%82&quot; target=&quot;_blank&quot;&gt;https://lbsyun.baidu.com/apiconsole/key。&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;{
    &quot;mcpServers&quot;: {
        &quot;baidu-map&quot;: {
            &quot;command&quot;: &quot;npx&quot;,
            &quot;args&quot;: [
                &quot;-y&quot;,
                &quot;@baidumap/mcp-server-baidu-map&quot;
            ],
            &quot;env&quot;: {
                &quot;BAIDU_MAP_API_KEY&quot;: &quot;your_baidu_AK&quot;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;将其中 BAIDU_MAP_API_KEY 修改为申请的 ak。&lt;/p&gt; 
&lt;h3&gt;使用 MCP 工具&lt;/h3&gt; 
&lt;p&gt;修改 LlmService 的构造方法源码，在构造时直接通过 Spring 容器获取 ToolCallbackProvider 并加入到 ChatClient.builder 中：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;public LlmService(ChatModel chatModel, ToolCallbackProvider toolCallbackProvider) {
    this.chatModel = chatModel;

    this.planningChatClient = ChatClient.builder(chatModel)
       .defaultSystem(PLANNING_SYSTEM_PROMPT)
       .defaultAdvisors(new MessageChatMemoryAdvisor(planningMemory))
       .defaultAdvisors(new SimpleLoggerAdvisor())
       .defaultTools(ToolBuilder.getPlanningAgentToolCallbacks())
       .defaultTools(toolCallbackProvider)
       .build();

    this.chatClient = ChatClient.builder(chatModel)
       .defaultSystem(MANUS_SYSTEM_PROMPT)
       .defaultAdvisors(new MessageChatMemoryAdvisor(memory))
       .defaultAdvisors(new SimpleLoggerAdvisor())
       .defaultTools(ToolBuilder.getManusAgentToolCalls())
       .defaultTools(toolCallbackProvider)
       .defaultOptions(OpenAiChatOptions.builder().internalToolExecutionEnabled(false).build())
       .build();

    this.finalizeChatClient = ChatClient.builder(chatModel)
       .defaultSystem(FINALIZE_SYSTEM_PROMPT)
       .defaultAdvisors(new MessageChatMemoryAdvisor(finalizeMemory))
       .defaultAdvisors(new SimpleLoggerAdvisor())
       .build();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;通过 defaultTools 将 mcp 服务提供的 tool 交给 ChatClient 处理。&lt;/p&gt; 
&lt;h3&gt;测试效果&lt;/h3&gt; 
&lt;p&gt;启动 OpenManus，执行提示词：规划下从上海到北京的路线。但是如果这样写，可能会触发 google search，我们可以优化下提示词主动选择百度地图。&lt;/p&gt; 
&lt;p&gt;使用百度地图规划从北京市到上海市的路线&lt;/p&gt; 
&lt;p&gt;执行程序之后可以看到规划之后的计划：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;Steps:
0. [ ] [MANUS] 使用百度地图的地理编码服务获取北京市和上海市的经纬度座标
1. [ ] [MANUS] 使用百度地图的路线规划服务计算从北京市到上海市的驾车路线
2. [ ] [MANUS] 分析并提供最终的路线信息，包括距离、预计耗时等
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;很显然，这一次 OpenManus 选择了我们集成的百度地图 mcp server，我们来看一下结果。&lt;/p&gt; 
&lt;p&gt;获取到了北京市和上海市的经纬度座标：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;Here is a summary of what we accomplished in this step:
- For Beijing, we received the coordinates: Longitude (lng): 116.4133836971231, Latitude (lat): 39.910924547299565.
- For Shanghai, we received the coordinates: Longitude (lng): 121.48053886017651, Latitude (lat): 31.235929042252014.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;计算从北京市到上海市的驾车路线：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;Distance: The total distance of the route is 1,223,200 meters (approximately 1,223 kilometers).
Duration: The estimated travel time is 50,592 seconds (approximately 14 hours and 3 minutes).
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;结果：&lt;/p&gt; 
&lt;p&gt;总距离：约 1223 公里&lt;/p&gt; 
&lt;p&gt;预计耗时：约 12 小时 45 分钟&lt;/p&gt; 
&lt;p&gt;主要途径：京沪高速公路（G2）&lt;/p&gt; 
&lt;h1&gt;总结&lt;/h1&gt; 
&lt;p&gt;作为 AI 开发领域的革命性突破，Model Context Protocol（MCP）重新定义了智能体与工具生态的交互范式。通过标准化协议打通地图服务、代码仓库、数据库等核心工具链，MCP 不仅解决了传统 AI 开发中跨平台对接的碎片化难题，更以&quot;开箱即用&quot;的轻量化集成模式，让开发者能够快速构建具备多模态能力的智能应用。&lt;/p&gt; 
&lt;p&gt;未来，随着更多工具接入 MCP 生态，开发者只需专注于业务逻辑创新，而复杂的工具链整合将真正成为&quot;看不见的底层能力&quot;------这或许正是 AI 普惠化进程中，最具实际意义的技术跃迁。&lt;/p&gt; 
&lt;p&gt;Spring AI 中的 MCP 支持可以让 Java 开发者轻松的将自己的应用发布为 MCP Server 或者是作为消费者去集成任意的 MCP Server 实现。﻿Spring AI Alibaba 社区 3 群：61290041831&lt;/p&gt; 
&lt;p&gt;Spring AI Alibaba 开源项目地址：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falibaba%2Fspring-ai-alibaba&quot; target=&quot;_blank&quot;&gt;https://github.com/alibaba/spring-ai-alibaba&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Spring AI Alibaba 官网地址：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjava2ai.com%2F&quot; target=&quot;_blank&quot;&gt;https://java2ai.com/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;本示例源码地址：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspringaialibaba%2Fspring-ai-alibaba-examples%2Ftree%2Fmain%2Fspring-ai-alibaba-mcp-example&quot; target=&quot;_blank&quot;&gt;https://github.com/springaialibaba/spring-ai-alibaba-examples/tree/main/spring-ai-alibaba-mcp-example&lt;/a&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/3874284/blog/18183807</link>
            <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/18183807</guid>
            <pubDate>Mon, 14 Apr 2025 03:30:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>DeepMind 强化学习团队副总裁：AI 的未来在于自主获取经验</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;近日，Google DeepMind 强化学习团队副总裁 &lt;strong&gt;David Silver&lt;/strong&gt; 近日在一场重要播客中提出了关于 AI 未来发展的关键观点。&lt;/p&gt; 
&lt;p&gt;作为 DeepMind 创始成员和 AlphaGo 项目的核心人物，Silver 认为 AI 未来的突破将来自于其自主获取经验的能力，而非继续依赖人类数据。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-f7c5f8582eaecd521a576c5a5487b897835.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Silver 在访谈中指出，AI 发展正从「人类数据时代」迈向「经验时代」。他解释道：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;目前的 AI 方法基于一个共同理念：提取人类拥有的全部知识并’喂’给机器。但真正的突破将来自于机器与世界互动，产生自身经验的能力。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;以 AlphaGo 和 AlphaZero 为例，Silver 阐述了 AI 自主学习的威力。AlphaZero 通过完全摒弃人类棋谱数据，仅靠自我对弈获取经验，反而达到了超越人类和早期版本 AlphaGo 的水平。他称这是 AI 领域的「苦涩教训」——人类知识有时反而会限制 AI 的自主学习能力。&lt;/p&gt; 
&lt;p&gt;Silver 还谈到了当前大语言模型中的强化学习应用。虽然基于人类反馈的强化学习 (RLHF) 帮助模型更符合人类偏好，但他认为这种方法无法让 AI 超越人类知识的「天花板」。「如果系统根据人类反馈学习，它最终只会输出人类认知内的内容，无法探索未知领域。」&lt;/p&gt; 
&lt;p&gt;Silver 将人类数据比作化石燃料，认为这是 AI 发展的「先发优势」，但真正可持续的「燃料」是 AI 自主生成的经验。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;当化石燃料耗尽后，我们需要某种可持续燃料来维持世界运转。强化学习便是这种可持续燃料。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;推荐阅读：&lt;a href=&quot;https://www.oschina.net/news/345290/ysy-the-second-half&quot; target=&quot;news&quot;&gt;OpenAI 研究员姚顺雨：AI 将由解决问题转为定义问题&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345875</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345875</guid>
            <pubDate>Mon, 14 Apr 2025 03:20:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>智元发布具身智能一站式开发平台 Genie Studio</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;智元机器人发布了&lt;strong&gt;行业首款&lt;/strong&gt;面向具身智能开发者的&lt;strong&gt;一站式开发平台 &lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgenie.agibot.com%2Fgeniestudio&quot; target=&quot;_blank&quot;&gt;Genie Studio&lt;/a&gt;&lt;/u&gt;&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0422/104847_F9AB_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;据介绍，Genie Studio 是智元机器人专为具身智能场景打造的一站式开发平台，具备&lt;strong&gt;数据采集&lt;/strong&gt;、&lt;strong&gt;模型训练&lt;/strong&gt;、&lt;strong&gt;仿真评测&lt;/strong&gt;、&lt;strong&gt;模型推理&lt;/strong&gt;的全链路产品能力，让「采」、「训」、「测」、「推」每个环节都能找到标准化解决方案。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0422/104715_vA3r_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;平台优势如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;提供覆盖数据全生命周期的数据解决方案，高效采集海量数据，单机单日产能高达 1000 条。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;提供自研和主流开源机器人基座模型，打通训练、微调、量化、部署链路，降低训练门槛。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;提供仿真评测能力，拥有 6000 + 物体资产与仿真场景，实现用户侧场景重建、专家轨迹数据获取、评测结果可视化。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;提供「⼀键真机部署」能力，轻松实现算法从云端到真机环境的无缝迁移，比传统方案单卡推理性能提升 2-3 倍。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;数据采集&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;数据采集模块深度重构机器人数据生命周期，打造从多模态数据采集、流程化数据处理、可视化数据标注到数据集高效管理的一站式数据中枢，提供&lt;strong&gt;多本体、多末端的设备管理、批量模板化的数采任务生成、全链路标注与可视化审核、数据集管理、多维度指标看板&lt;/strong&gt;等配套的全流程功能服务；通过仿真场景重建和多种专家轨迹生成策略，结合域随机化与数据增强技术，可支持&lt;strong&gt;大规模合成数据自动化采集&lt;/strong&gt;；对于复杂的操作任务，支持开发者通过&lt;strong&gt;遥操作采集精细操作数据&lt;/strong&gt;，并结合&lt;strong&gt;轨迹自动泛化&lt;/strong&gt;，在符合物理规律的基础上实现大规模数据增广。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;模型训练&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;作为新一代具身智能训练引擎，模型训练模块实现研发体验的全面升级。独创基于视频的&lt;strong&gt;数据加载方案&lt;/strong&gt;，支持多种开源数据集的无缝接入。在保证随机帧读取灵活性的同时，充分利用 GPU 闲置的解码模块，&lt;strong&gt;降低网络带宽和存储消耗&lt;/strong&gt;。深度集成基座模型和多种开源端到端具身模型，提供预训练 / 微调的任务模板，配合自研的训练研发框架，实现&lt;strong&gt;训练效率的不断提升&lt;/strong&gt;。平台构建从数据、研发到部署的全链路管理体系，标准化资源池管理、训练镜像、模型管理与编译部署管线的深度集成，&lt;strong&gt;实现模型的端到端快速交付&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;仿真评测&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;基于大规模、高精度的三维资产库，仿真评测模块为开发者提供&lt;strong&gt;丰富的仿真场景、物体资产和机器人模型&lt;/strong&gt;，能够自动生成多样化场景与任务，精准还原各类机器人的操作环境，构建从&lt;strong&gt;场景生成、模型推理、基准测试到结果可视化&lt;/strong&gt;的完整仿真评测流程，并且通过高效的仿真工具链，帮助用户快速&lt;strong&gt;验证算法性能并优化模型。&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;仿真评测模块还会为 Genie Studio 和 AgiBot World 生态社区的用户开源本地仿真评测工具，支持用户进行灵活高效的模型评测。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;模型推理&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;模型推理模块直击行业痛点，通过四大核心技术重构部署范式：&lt;strong&gt;模型编译技术&lt;/strong&gt;突破硬件异构壁垒，实现算法 &quot;一次开发、多端部署&quot;；&lt;strong&gt;GDK（Genie Development Kit）开发组件&lt;/strong&gt;以标准化接口打通机器人硬件层，构建稳定可靠的真机通信底座；&lt;strong&gt;云端一体化推理框架&lt;/strong&gt;将模型部署流程简化为 &quot;一键真机部署&quot;，助力算法开发从云端环境到实体机器人的迁移；配合全链路评测系统，不仅实现部署效果的量化评估，更构建起应用版本管理、远程诊断、动态优化的闭环体系。这种 &quot;算法-部署-管理&quot; 的全栈式赋能，使开发者得以聚焦核心算法创新，真正突破具身智能规模化落地的 &quot;最后一公里&quot;，加速行业向标准化、平台化、量产化的新阶段跃进。&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345864/agibot-geniestudio</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345864/agibot-geniestudio</guid>
            <pubDate>Mon, 14 Apr 2025 02:49:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>AI 搜索工具秘塔上线 AI 教学功能「今天学点啥」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;AI 搜索工具秘塔&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fxw8IWhTnSSJ6OOCJBEcbrg&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;&lt;/u&gt;推出「今日学点啥」AI 个性化教学功能，旨在「让个性化定制的知识不再稀缺」。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0422/103425_RBID_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;据介绍，用户对任何内容感兴趣（不论是网页、文章、讲义，还是秘塔文库覆盖超一亿的学术文献）都可以一键让塔子老师进行讲解。塔子老师可以根据用户对该领域的了解，来个性化定制讲解的幻灯片和讲解的方式，力求把晦涩难懂的文章也讲得生动有趣。&lt;/p&gt; 
&lt;p&gt;据悉，塔子老师拥有多种讲解风格，如苏格拉底、莎士比亚、屈原、李白等，并且用户可根据自己的喜好调节「初学者」「进阶者」「专家」三个知识掌握程度。&lt;/p&gt; 
&lt;p&gt;秘塔方面表示，希望「今天学点啥」能够成为一个激发好奇心和求知欲的平台，帮助大家找到自己的节奏，以深入浅出的方式，自由探究各类感兴趣的任何领域。&lt;/p&gt; 
&lt;p&gt;目前，该功能已上线 PC 网页端。体验链接：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmetaso.cn%2Fstudy&quot; target=&quot;_blank&quot;&gt;metaso.cn/study&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345859</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345859</guid>
            <pubDate>Mon, 14 Apr 2025 02:35:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>荣耀在哈尔滨成立新公司，含智能机器人销售业务</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;天眼查资料显示，哈尔滨星耀终端有限公司于近日成立，法定代表人为文洁，注册资本 200 万人民币。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;206&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-f9a3284834040e97a1c162e0dbeec698a8f.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;该公司经营范围含移动终端设备销售、家用电器销售、电子产品销售、可穿戴智能设备销售、智能机器人销售、智能无人飞行器销售、物联网设备销售等。股权全景穿透图显示，该公司由深圳星耀终端有限公司全资持股，后者为荣耀终端股份有限公司全资子公司。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345858</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345858</guid>
            <pubDate>Mon, 14 Apr 2025 02:31:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>ONLYOFFICE 协作空间 3.1 现已发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;全新升级的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdocspace.aspx&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;ONLYOFFICE&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/u&gt;&lt;u&gt;协作&lt;/u&gt;&lt;u&gt;空间&lt;/u&gt;&lt;/a&gt;有着约 40 项新功能和改进，将您的文档协作和管理体验提升到全新高度。阅读本文，了解所有优化功能。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;742&quot; src=&quot;https://static-blog.onlyoffice.com/wp-content/uploads/2025/04/18114932/Blog-CN-OO-DocSpace-3.1.png&quot; width=&quot;1470&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;关于 ONLYOFFICE&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;ONLYOFFICE&lt;/strong&gt;&amp;nbsp;是一个国际开源项目，专注于高级和安全的文档处理，可提供文本文档、电子表格、幻灯片、表单和 PDF 编辑器。它高度兼容微软 Office 格式，并提供数百种格式化和样式工具。目前 ONLYOFFICE 有许多广受欢迎的插件，其中&amp;nbsp;AI&amp;nbsp;插件可支持连接任意 AI 模型。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ONLYOFFICE&amp;nbsp;协作空间&lt;/strong&gt;旨在提升办公文档和其他内容的协作效率，让用户能够与同事、客户、合作伙伴、承包商、赞助商等多方人员顺畅协作。该平台提供了一个基于房间的环境，可根据个人需求或项目目标组织清晰的文件结构。灵活的访问权限和用户角色设置，可支持用户对整个或单独房间的访问权限调整。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;虚拟数据房间中基于角色的表单填写&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;基于角色的高级功能在虚拟数据房间中首次亮相，优化效率的同时提高了安全性。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;轻松邀请您的团队成员，并分配与公司架构匹配的角色。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：虚拟数据房间 -&amp;gt; 表单 -&amp;gt; 开始填写&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;1158&quot; src=&quot;https://oscimg.oschina.net/oscnet//2a7346e0a8eabae10dde1b3b96fa2367.jpg&quot; width=&quot;1921&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;通过表单填写追踪功能，实时监控进度。轻松掌握哪些表单已完成、哪些尚待处理。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：虚拟数据房间 -&amp;gt; 表单 -&amp;gt; 填写状态&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;1158&quot; src=&quot;https://oscimg.oschina.net/oscnet//fa7602efa3a1418c4a011f1713217bee.jpg&quot; width=&quot;1921&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;轻松完成表单填写，并检索已完成的版本，确保每次流程无缝且轻松。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：虚拟数据房间 -&amp;gt; 完成&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;957&quot; src=&quot;https://oscimg.oschina.net/oscnet//958fc0c2062af0071c794e5fe99ae452.jpg&quot; width=&quot;1761&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;可重复使用&lt;/strong&gt;&lt;strong&gt;的&lt;/strong&gt;&lt;strong&gt;房间模板&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;直接根据现有房间，创建可重复使用的模板，简化工作流程。只需点击几下，即可根据已保存的模板创建新房间，节省时间并提高效率。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：房间上下文菜单 -&amp;gt; 保存为模板&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;957&quot; src=&quot;https://oscimg.oschina.net/oscnet//7d26d7e1024dbb0e823304a47dfe3744.jpg&quot; width=&quot;1761&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;通过房间部分新添加的专用选项卡，轻松访问所有模板。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：房间 -&amp;gt; 模板&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;957&quot; src=&quot;https://oscimg.oschina.net/oscnet//0dc4ae4cac6aded9e359d2e23e6099e0.jpg&quot; width=&quot;1761&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;房间共享&lt;/strong&gt;&lt;strong&gt;更简单&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;现在公共、自定义和表单填写房间的 URL 中添加了 Key 参数，便于即时共享 – 只需复制浏览器的 URL 就可以分享了！&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：复制房间网址&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;923&quot; src=&quot;https://oscimg.oschina.net/oscnet//ea6793285f76ac7b8ccd21ad66c9dc3d.png&quot; width=&quot;1864&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;改进&lt;/strong&gt;&lt;strong&gt;访客&lt;/strong&gt;&lt;strong&gt;管理&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;跨团队共享访客&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;与外部用户的协作更加高效。只需生成并发送一个简单的链接，即可与其他团队成员共享访客。您可以批准或拒绝共享的访客，确认后，访客将出现在您的访客列表中，实现无缝沟通和协作。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：联系人 -&amp;gt; 访客 -&amp;gt; 分享访客&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;933&quot; src=&quot;https://oscimg.oschina.net/oscnet//05d2fc560fe729b8d4d882f6678a74b5.jpg&quot; width=&quot;1654&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;灵活&lt;/strong&gt;&lt;strong&gt;管理访客角色&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;灵活管理访客权限，增强控制。将访客类型更改为用户、房间管理员或协作空间管理员。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：联系人 -&amp;gt; 访客 -&amp;gt; 更改类型&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;964&quot; src=&quot;https://oscimg.oschina.net/oscnet//afc8fa552a3572883e8081e166d91dda.jpg&quot; width=&quot;1726&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;同样，您可以根据需要将管理员恢复为用户或访客。更新管理员类型时，其房间和文件将重新分配给其他联系人。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;新访客对「文档」部分的访问权限将受到限制，仅限阅读、下载和清除，且仅可访问该部分 30 天。此期限过后，「文档」部分将不再对访客开放。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;优化&lt;/strong&gt;&lt;strong&gt;文件管理&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;快速共享 PDF 表单&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;直接从文件管理器共享 PDF 表单并进行填写，而无需创建或共享房间。极大地缩短了工作流程并提高了效率。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：文档 -&amp;gt; 表单 -&amp;gt; 填写 -&amp;gt; 快速共享&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;964&quot; src=&quot;https://oscimg.oschina.net/oscnet//a7102ae6e749e8014c7ec7e72aa09f6c.jpg&quot; width=&quot;1726&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;管理文件版本和下载&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;在版本历史记录面板中轻松删除特定文件版本。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：文件上下文菜单 -&amp;gt; 显示版本历史记录 -&amp;gt; 删除&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;964&quot; src=&quot;https://oscimg.oschina.net/oscnet//4907dc1f0f1052c345b3ec49a95dd5d1.jpg&quot; width=&quot;1726&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;以非原始格式下载受密码保护的文件时，可以更灵活地处理这些文件：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;从下载列表中删除该文件；&lt;/li&gt; 
 &lt;li&gt;输入密码继续下载；&lt;/li&gt; 
 &lt;li&gt;以原始格式下载（无需密码）。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：文件 -&amp;gt; 下载为 -&amp;gt; 选择原始格式以外的格式&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;1047&quot; src=&quot;https://oscimg.oschina.net/oscnet//7972a41e7285ab8c350071f6a333a15d.jpg&quot; width=&quot;1932&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;操作更流畅&lt;/strong&gt;：改进了文件操作进度显示，随时掌握每一步的进度。此外，您现在可以选择在取消上传时禁用确认弹窗，让操作更加顺畅。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：个人资料-&amp;gt;文件管理-&amp;gt;不再显示取消通知&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;964&quot; src=&quot;https://oscimg.oschina.net/oscnet//d5ea2bd6b5b870ca697a0aff696f1917.jpg&quot; width=&quot;1726&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;964&quot; src=&quot;https://oscimg.oschina.net/oscnet//25ca5e2a04e435c72fea682a9c6ab144.jpg&quot; width=&quot;1711&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;新的设置和自定义&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;存储加密&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;在自托管环境中对静态数据启用 AES-256 加密，以确保最高安全性。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：空间管理（协作空间服务器）-&amp;gt; 设置 -&amp;gt; 存储&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;708&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c8a4fb0991cf0e248c39ded63e7bdab44bd.png&quot; width=&quot;1240&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;用户&lt;/strong&gt;&lt;strong&gt;更快&lt;/strong&gt;&lt;strong&gt;加入&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;禁用通过 LDAP 或单点登录添加的用户的电子邮件验证。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：集成 -&amp;gt; LDAP / 单点登录&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;1008&quot; src=&quot;https://oscimg.oschina.net/oscnet//c7a4307c7b173bc218d3809ca04448b9.jpg&quot; width=&quot;1702&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;数据存储区域&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;轻松检查您的云协作空间指定的数据存储区域，以获得更高的透明度。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：存储管理&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;1008&quot; src=&quot;https://oscimg.oschina.net/oscnet//ddd65f7f9cb5881d3aff2e008f8b7bd9.jpg&quot; width=&quot;1786&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;深度链接设置&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;在移动浏览器中处理文档时，用户可以选择在浏览器中或直接在移动应用中打开文件，或者通过禁用此选项来简化体验。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：自定义 -&amp;gt; 常规&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;1008&quot; src=&quot;https://oscimg.oschina.net/oscnet//ed14b90eaf5bba0831c3dc0f6e0af37f.jpg&quot; width=&quot;1765&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;更多&lt;/strong&gt;&lt;strong&gt;开发者设置&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;Webhook 触发器&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;使用现成的触发器，执行用户或房间创建、文件上传或删除、文件夹移动等操作。此外，管理员现在可以轻松地在一个地方查看所有已创建的 Webhook。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：开发人员工具* -&amp;gt; Webhook&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;1008&quot; src=&quot;https://oscimg.oschina.net/oscnet//f22484a8efe268b6c191713bceb66397.jpg&quot; width=&quot;1818&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;改进嵌入设置&lt;/strong&gt;：您可以选择 HTML、JavaScript 或 NPM 集成，以获得更大的灵活性和简便性，更好地满足您的项目需求。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：开发人员工具* -&amp;gt; JavaScript SDK&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;1008&quot; src=&quot;https://oscimg.oschina.net/oscnet//e063579fc634bd55e864666a84e6d34f.jpg&quot; width=&quot;1821&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;*请注意：现在所有用户（访客除外）都可以访问开发人员工具部分。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;品牌名称&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;只需点击几下即可自定义协作空间：输入要显示的品牌名称，并直接根据文本生成自定义 Logo，以获得个性化体验。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;路径：定制 -&amp;gt; 品牌&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;img alt=&quot;ONLYOFFICE 协作空间 3.1 发布：虚拟数据房间中基于角色的表单填写、房间模板、改进访客管理等&quot; height=&quot;1009&quot; src=&quot;https://oscimg.oschina.net/oscnet//1af55907fb6a2a301a77f04604cf178e.jpg&quot; width=&quot;1692&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;获取 ONLYOFFICE 协作空间 3.1&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;ONLYOFFICE 协作空间云已经可获取最新版本。立即&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdocspace-registration.aspx%3Futm_source%3Dblog%26utm_medium%3Darticle%26utm_campaign%3Ddocspace_3.1%23login&quot; target=&quot;_blank&quot;&gt;登录协作空间&lt;/a&gt;，即可体验所有新功能，如果您还没有 ONLYOFFICE 协作空间账户，也可以&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdocspace-registration.aspx%3Futm_source%3Dblog%26utm_medium%3Darticle%26utm_campaign%3Ddocspace_3.1&quot; target=&quot;_blank&quot;&gt;注册一个免费帐户&lt;/a&gt;。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdownload.aspx%3Futm_source%3Dblog%26utm_medium%3Darticle%26utm_campaign%3Ddocspace_3.1%23docspace-enterprise&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;自托管协作空间&lt;/u&gt;&lt;/a&gt;的新版本即将推出，敬请期待！&lt;/p&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;strong&gt;相关链接&lt;/strong&gt;&lt;/h3&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdocspace.aspx%3Futm_source%3Dblog%26utm_medium%3Darticle%26utm_campaign%3Ddocspace_3.1&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;ONLYOFFICE 协作空间&lt;/u&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdocspace-registration.aspx%3Futm_source%3Dblog%26utm_medium%3Darticle%26utm_campaign%3Ddocspace_3.1&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;注册免费帐户&lt;/u&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelpcenter.onlyoffice.com%2Fdocspace%3Futm_source%3Dblog%26utm_medium%3Darticle%26utm_campaign%3Ddocspace_3.1&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;帮助中心&lt;/u&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345798/onlyoffice-docspace-3-1-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345798/onlyoffice-docspace-3-1-released</guid>
            <pubDate>Sun, 13 Apr 2025 11:47:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>预计中国市场 2025 年人形机器人本体产值将超 45 亿元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根据 TrendForce 集邦咨询最新数据，中国市场已有 11 家主流人形机器人本体厂商启动 2024 年量产计划。其中，宇树科技、优必选、智元机器人、银河通用、众擎机器人、乐聚机器人等 6 家领先企业更是将 2025 年的量产规划设定在千台以上。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;color:#242424; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;TrendForce 集邦咨询预计，2025 年中国市场人形机器人本体产值有望突破 45 亿元人民币。加上马斯克关于 Tesla Optimus 2025 年数千台量产目标，预计头部本体厂商的量产计划将拉动中国市场人形机器人零部件供应链生态布局与完整性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#242424; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;336&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-545b82ebd4c04ad7f2c9a719209e9659c66.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#242424; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;当下人形机器人产品主要应用在 B 端工业场景、高校科研以及少部分 B 端商用场景，而 C 端家用场景要求人形机器人功能多元，对机器人数据处理和自主交互能力要求较高。人形机器人从 B 端跨越到 C 端应用场景需要政策、法规、技术等行业多方面的共同努力，C 端应用场景的商业化落地仍任重道远。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345784</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345784</guid>
            <pubDate>Sun, 13 Apr 2025 09:43:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>得物自研 DGraph4.0 推荐核心引擎升级之路</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;span id=&quot;OSC_h1_1&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;一、前言&lt;/h1&gt; 
&lt;p&gt;DGraph 是得物自主研发的新一代推荐系统核心引擎，基于 C++语言构建，自 2021 年启动以来，经过持续迭代已全面支撑得物社区内容分发、电商交易等核心业务的推荐场景。DGraph 在推荐链路中主要承担数据海选和粗排序功能，为上层精排提供高质量候选集。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;核心技术特性：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;索引层 - 支持 KV（键值）、KVV（键-多值）、INVERT（倒排）、DENSE-KV（稠密键值）等。&lt;strong&gt;索引存储&lt;/strong&gt;支持磁盘 &amp;amp; 内存两种模式，在预发等延迟压力低场景，通过磁盘索引使用低规格服务器提供基本服务。线上场景使用内存索引保证服务稳定性，提供毫秒级延迟响应。&lt;strong&gt;索引更新&lt;/strong&gt;支持双 buff 热更新【内存足够】、服务下线滚动更新【内存受限】、Kafka 流式数据实时更新等三种模式。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;查询层 - 支持向量检索 IVF &amp;amp; HNSW、键值 (KV) 查询、倒排检索、X2I 关联查询、图查询。对外提供 JavaSDK &amp;amp; C++ SDK。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;系统依赖架构：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;索引全生命周期管理由得物索引平台 DIP 统一管控。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;服务发现基于 ZooKeeper(zk)。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;集群资源调度基于得物容器平台，目前已经支持 HPA。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;服务规模：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;目前在线 100+集群，2024 年双 11 在线突破了 100W qps。&lt;/p&gt; 
&lt;p&gt;本文主要介绍 DGraph 系统在 2024 年的一些重要改进点。主要包括两次架构调整 + 性能优化 + 用户体验提升方面的一些工作。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_2&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;二、架构升级&lt;/h1&gt; 
&lt;span id=&quot;OSC_h2_3&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;2.1 垂直拆分业务集群支持&lt;/h2&gt; 
&lt;p&gt;在 2023 年前，DGraph 系统始终采用单一集群架构提供服务。该架构模式在平台发展初期展现出良好的经济性和运维便利性，但随着业务规模扩张，单集群架构在系统层面逐渐显露出三重刚性约束：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;存储容量瓶颈 - 单节点内存上限导致数据规模受限；&lt;/li&gt; 
 &lt;li&gt;网络带宽瓶颈 - 单物理机 Pod 共享 10Gbps 带宽，实际可用带宽持续承压，推荐引擎业务中部分核心集群 200 余张数据表（单表需 20 分钟级更新）的实时处理需求已遭遇传输瓶颈；&lt;/li&gt; 
 &lt;li&gt;计算能力瓶颈 - 单实例最大 64 核的算力天花板，难以支撑复杂策略的快速迭代，核心场景响应时效与算法复杂度形成显著冲突；&lt;/li&gt; 
 &lt;li&gt;稳定性 - 大规格集群对于容器调度平台不友好，在扩容、集群故障、集群发布时耗时较久；基于得物平台推荐数据量增长和算法迭代需求，我们实施业务垂直拆分的多集群架构升级，通过资源解耦与负载分离，有效突破了单节点资源约束，为复杂算法策略的部署预留出充足的技术演进空间。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;系统改进点是在 DGraph 中增加了访问了其他 DGraph 集群 &amp;amp; FeatureStore 特征集群的能力 (图 1)。为了成本考虑，我们复用了之前系统的传输协议 flatbuffers，服务发现仍基于 ZooKeeper。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c817ffca6dd3d7ecea36fdd95d20183d04a.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;图 1 DGraph 访问架构改进&lt;/p&gt; 
&lt;p&gt;改造的难点在图化集群！&lt;/p&gt; 
&lt;p&gt;目前推荐业务的核心场景都进行了图化改造，图化查询是把多路召回、打散、融合、粗排等策略打包到一个 DAG 图中一次发送到 DGraph，DGraph 的算子调度模块根据 DAG 的描述查询索引数据 &amp;amp; 执行算子最终把结果返回给业务系统，但这些 DAG 图规模都很大，部分业务 DAG 图涉及 300+算子，因此如何在垂直拆分业务中把这些 DAG 图拆分到不同的 DGraph 集群中是一个非常复杂的问题，我们主要做了三方面改进：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;DAG 管理 - 集群分主集群和从集群【多个】，DAG 图部署在存在主集群中，DIP 平台会分析 DAG 的拓步结构并把属于从集群的部分复制出来分发给从集群，为了保证 DAG 的一致性，只允许从主集群修改 DAG 图；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;集群划分 - 通常按召回划分，比如 Embedding 召回、X2I 召回、实验召回可以分别部署在不同的集群，另外也可以把粗排等算力需求大的部分单独放在一个集群，具体根据业务场景调整；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;性能优化 - 核心表多个集群存放，减少主集群和从集群间数据交换量。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ed9ac500b1e0e379e07f0f870f4f6ae62bb.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;图 2 DGraph 业务垂直拆分集群&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_4&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;2.2 分布式能力支持&lt;/h2&gt; 
&lt;p&gt;垂直拆分集群，虽然把推荐 N 路召回分散到了 M 个集群，但是每个集群中每个表依然是全量。随着得物业务的发展，扩类目、扩商品，部分业务单表的数据量级已经接近单集群的存储瓶颈。因此需要 DGraph 中引入数据水平拆分的能力。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3da38581237c44ef46782fe58c5c0566ed6.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;图 3 DGraph 分布式集群架构图&lt;/p&gt; 
&lt;p&gt;在 DGraph 分布式架构设计中，重点考虑了部署成本优化与业务迁移工作量：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;分布式集群采用【分片数 2】×【双活节点 2】×【数据副本数 2】的最小拓扑结构，理论上需要 8 台物理节点保障滚动更新与异常容灾时的稳定性。针对 CPU 负载较轻的场景，为避免独立 Proxy 集群带来的额外资源开销，DGraph 将 Proxy 模块和 DGraph 引擎以对称架构部署到所有节点，通过本地优先的智能路由策略（本地节点轮询优先于跨节点访问）实现资源利用率与访问效率的平衡；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在业务兼容性方面，基础查询接口（KV 检索、倒排索引、X2I 关联查询）保持完全兼容以降低迁移成本，而 DAG 图查询需业务侧在查询链路中明确指定 Proxy 聚合算子的位置以发挥分布式性能优势。数据链路层面，通过 DIP 平台实现索引无缝适配，支持 DataWorks 原有任务无需改造即可对接分布式集群，同时增量处理模块内置分片过滤机制，可直接复用现有 Flink 实时计算集群进行数据同步。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;span id=&quot;OSC_h1_5&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;三、性能优化&lt;/h1&gt; 
&lt;span id=&quot;OSC_h2_6&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;3.1 算子执行框架优化&lt;/h2&gt; 
&lt;p&gt;在 DGraph 中，基于 DGraph DAG 图 (参考图 9) 的一次查询就是图查询，内部简称 graphSearch。在一个 DAG 图中，每个节点都是一个算子 (简称 Op)，算子通过有向边连接其他算子，构成一个有向无环图，算子执行引擎按 DAG 描述的关系选择串行或者并发执行所有算子，通过组合不同算子 DAG 图能在推荐场景中灵活高效的完成各种复杂任务。&lt;/p&gt; 
&lt;p&gt;在实际应用场景中受 DAG 图规模 &amp;amp; 超时时间 (需要控制在 100ms 内) 限制，算子执行框架的效率非常重要。在最开始的版本中我们使用过 Omp &amp;amp; 单队列线程池，集群在 CPU 负载低于 30% 时表现尚可，但在集群 CPU 负载超过 30% 后，rt99 表现糟糕。在降本增效的背景下，我们重点对算子执行框架进行了优化，引入了更高效的线程池 &amp;amp; 减少了调度过程中锁的使用。优化后目前 DGraph 在 CPU 压力超过 60% 依然可以提供稳定服务。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-314750530e377031be7838774eae9b7fecd.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;图 4 DGraph 算子执行框架优化&lt;/p&gt; 
&lt;p&gt;线程池优化：将原 1:N 的线程池-队列架构调整为 M:N 分组模式。具体实现为将 N 个工作线程划分为 M 个执行组（每组 N/M 线程），各组配备独立任务队列。任务提交采用轮询分发机制至对应组队列，通过资源分区有效降低线程调度时的锁竞争强度。&lt;/p&gt; 
&lt;p&gt;调度器优化：在 DAG 调度过程中存在两个典型多写场景&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;前驱算子节点完成时需并行更新后继节点标记；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;DAG 全局任务计数器归零判断。原方案通过全局锁（Graph 锁+Node 锁）保障原子性，但在高负载场景引发显著锁竞争开销，影响线程执行效率。经分析发现这两个状态变更操作符合特定并发模式：所有写操作均为单调增减操作，因此可将锁机制替换为原子变量操作。针对状态标记和任务计数场景，分别采用原子变量的 FetchAdd 和 FetchSub 指令即可实现无锁化同步，无需引入 CAS 机制即满足线程安全要求。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;span id=&quot;OSC_h2_7&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;3.2 传输协议编码解码优化&lt;/h2&gt; 
&lt;p&gt;优化 JavaSDK - DGraph 数据传输过程：在 DGraph 部分场景，由于请求引擎返回的数据量很大，解码编码耗时占整个请求 20% 以上。分析已有的解码编码模块，引擎在编码阶段会把待传输数据编码到一个 FlatBuffer 中，然后通过 rpc 协议发送到业务侧的 JavaSDK，sdk 解码 FlatBuffer 封装成 List&amp;lt;map&amp;gt; 返回给业务代码，业务代码再把 List&amp;lt;map&amp;gt; 转化成 List&amp;lt;业务 Object&amp;gt;。过程中没有并发 &amp;amp; sdk 侧多了一层冗余转换。&lt;/p&gt; 
&lt;p&gt;优化方案如下：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;串行编码调整为根据文档数量动态调整编码块数量。各子编码块可以并发编码解码，加快编码&amp;amp;解码速度，提升整体传输性能；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;sdk 侧由 Doc -&amp;gt; Map -&amp;gt; JavaObject 的转化方式调整为 Doc -&amp;gt; JavaObject，减少解码端算力开销。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-781cc5f8b62293731a12f4578bddbafd4b1.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;图 5 DGraph 传输编码解码过程优化&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_8&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;四、用户体验优化&lt;/h1&gt; 
&lt;span id=&quot;OSC_h2_9&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;4.1 DAG 图调试功能优化&lt;/h2&gt; 
&lt;p&gt;目前我们已经把 DGraph DAG 图查询的调试能力集成到 DIP 平台。其原理是：DGraph 的算子基类实现了执行结果输出，由于算子的中间结果数据量极大，当调试模块发现调试标志后会先把当前算子的中间结果写入日志中，数据按 TraceID + DAGID+ NodeID 组织，最终这些数据被采集到 SLS 日志平台。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-2d918720f61f5f0f7d019c68f05998aecca.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;图 6 DGraph DAG 图查询调试&lt;/p&gt; 
&lt;p&gt;从 DIP 平台调试 DAG 图请求，首先通过 DGraph JavaSDK 的调试入口拿到 DAG 图请求 json，填入 DIP 平台图请求调试入口，发起请求。索引平台会根据请求体自动关联 DAG 图并结合最终执行结果通过页面的方式展示。DIP 平台拿到结果后，在 DAG 图中成功的算子节点标记为绿色，失败的节点标记为红色 (图 6)。点击任意节点可以跳转到日志平台查看该节点的中间结果输出。可用于分析 DAG 图执行过程中的各种细节，提升业务排查业务问题效率。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_10&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;4.2 DAG 图支持 TimeLine 分析&lt;/h2&gt; 
&lt;p&gt;基于 Chrome 浏览器中的 TimeLine 构建，用于 DGraph DAG 图查询时算子性能分析优化工作。TimeLine 功能集成在算子基类中，启动时会记录每个算子的启动时间、等待时间、完成时间、执行线程 pid 等信息，这些信息首先输出到日志，然后被 SLS 日志平台采集。用户可以使用查询时的 TraceID 在日志平台搜索相关的 TimeLine 信息。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8775652c29620ccf9e0595b35dd3c9cebd3.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;图 7 DGraph DAG 图例子&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6a92e653aa398223b8be061bf6a425c268d.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;图 8 使用浏览器查看 DGraph DAG 图 TimeLine&lt;/p&gt; 
&lt;p&gt;当我们拿到请求的 TimeLine 信息后，通过浏览器加载可以通过图形化的方式分析 DAG 执行过程中耗时分布。图 7 是一个 DAG 请求，它有 9 个算子节点，图 8 是它的一次请求的 TimeLine。通过分析这些算子的耗时，可以帮助我们定位当前 DAG 图查询的瓶颈点在哪里，从而精准去解决性能方面的问题。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_11&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;4.3 DAG 图支持动态子图&lt;/h2&gt; 
&lt;p&gt;在 DAG 图召回中，业务的召回通常都带有一些固定模式，比如一个业务在一个 DAG 图召回中有 N 路召回，每一路召回都是：① 查找数据；② 关联可推池；③ 打散； 它们之间的区别可能仅仅是召回数据表名不同或者传递的参数不同。通常我们业务调整或者算法实验调整只需要增加或者减少部分召回，原有模式下这些操作需要去新增或者修改 DAG 图，加上算法实验很多，业务维护 DAG 图的成本会非常高。&lt;/p&gt; 
&lt;p&gt;DAG 动态子图的引入就是为了解决这类问题，首先我们在 DAG 图中配置一个模板子图，它仅仅描述一个行为模式，代表会涉及几个算子，算子之间的关系如何，实际的参数以及召回路的数量则由业务方在发起请求时动态决定。子图的执行和主图的执行共用同一套调度框架，共享运行时资源以降低运行开销。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-08756615857b6bf3b35868c2f1b8d772291.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;图 9 DGraph 子图&lt;/p&gt; 
&lt;p&gt;图 9 是一个 DAG 召回使用 DAG 子图后的变化，它有 8 路召回，一个 Merge 节点，这些召回分为两类，一类是基于 KV 表 (ForwardSearch) 触发的向量召回，另外一类是基于 KVV 表 (IvtSearch) 触发的向量召回。引入 DAG 子图后，在主图中节点数量由 17 个降为 3 个。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_12&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;五、展望未来&lt;/h1&gt; 
&lt;p&gt;过去四年，DGraph 聚焦于实现得物推荐引擎体系从 0 到 1 的突破，重点完成了核心系统架构搭建、算法策略支持及业务迭代空间拓展，取得多项基础性成果。基于 2024 年底的用户调研反馈结合 DGraph 当前的发展，后续将重点提升产品易用性、开发与运维效能及用户体验，同时在系统稳定性、可扩展架构和平台化建设方面持续深化。&lt;/p&gt; 
&lt;p&gt;算法团队大量 HC，欢迎加入我们：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247537831%26idx%3D1%26sn%3Ddb1464cd87a75dd8f7bcf512fb50bf70%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;得物技术大量算法岗位多地上线，「职」等你来！&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;文 / 寻风&lt;/p&gt; 
&lt;p&gt;关注得物技术，每周一、三更新技术干货&lt;/p&gt; 
&lt;p&gt;要是觉得文章对你有帮助的话，欢迎评论转发点赞～&lt;/p&gt; 
&lt;p&gt;未经得物技术许可严禁转载，否则依法追究法律责任。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/5783135/blog/18181570</link>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/18181570</guid>
            <pubDate>Sun, 13 Apr 2025 09:35:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>字节系 Agent 产品 —— 扣子空间 (Coze Space) 开启内测</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;4 月 18 日晚间，字节系 Agent 产品 —— 扣子空间 (Coze Space) &lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FJlWyPmOwIYTXUD7tCvS1lg&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;&lt;/u&gt;开启内测，定位通用 Agent。与其他类似产品如 manus 一样，扣子空间采用了邀请码制。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0421/173325_Er29_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0421/173418_u2N4_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;扣子空间有什么特点？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;🌟从回答问题，到解决问题，让 Agent 帮你完成更多的工作&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;自动分析需求，拆解为多个子任务&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;自主调用工具（浏览器、代码编辑器等），执行任务&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;输出完整的结果报告，例如网页、PPT 、飞书文档等&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;🌟&lt;strong&gt;专家 Agent 生态，让更专业 Agent 来为你提供服务&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;「华泰 A 股观察助手」可以为你进行每日早报生成；针对股票分析问题，助手也能可以为你答疑解惑&lt;br&gt; &lt;img height=&quot;567&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0421/173807_CWme_2720166.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;「用户研究专家 」可以协助你进行用研资料深度分析，省时省力地助你获取更多用户洞察&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;🌟&lt;strong&gt;探索/规划双模式，更好地和 Agent 一起协作完成高难度任务&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;探索模式：让 AI 自主动态探索，完成速度更快&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;规划模式：让 AI 深度思考，适合高复杂性任务&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;🌟&lt;strong&gt;MCP 扩展集成，无限拓展 Agent 能力边界&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;首批官方支持飞书多维表格、高德地图、图像工具、语音合成等 MCP&lt;br&gt; &lt;img height=&quot;566&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0421/173727_B7jG_2720166.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;即将支持「扣子开发平台」发布 MCP 至「扣子空间」&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;扣子空间官网：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspace.coze.cn%2F&quot; target=&quot;_blank&quot;&gt;https://space.coze.cn/&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345779/coze-space-preview</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345779/coze-space-preview</guid>
            <pubDate>Sun, 13 Apr 2025 09:34:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Meta 旗下 APP 禁用苹果 Apple Intelligence</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;外媒报道称，苹果最新推出的 Apple Intelligence 功能在 Meta 旗下应用（包括 Facebook、Instagram、WhatsApp 和 Threads）中遭到禁用，用户无法使用其核心功能，如写作工具 (Writing Tools) 和自定义表情符号生成器 (Genmoji)。此举被认为与 Meta 推动自家 Meta AI 工具的战略有关。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;223&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-2e17e1e4324f772634e33ac142954924659.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Apple Intelligence 是苹果于 2024 年随 iOS18 推出的 AI 功能套件，旨在通过智能写作、图像生成和个性化体验提升用户生产力。其中，写作工具可实现文本校对、改写和总结，Genmoji 则允许用户生成定制化表情符号。这些功能通常通过长按 iOS 文本输入框激活，理论上适用于大多数应用。然而，Meta 旗下应用已明确禁用这些功能。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;自 2024 年 12 月起，Meta 开始逐步移除对 Apple Intelligence 的支持。用户在 Facebook、Instagram、WhatsApp 和 Threads 中无法调用写作工具或 Genmoji，甚至此前可在 Instagram Stories 中使用的 Memoji 和键盘贴纸功能也被移除。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;相比之下，X（原 Twitter）、Bluesky 和 Signal 等第三方应用仍支持 Apple Intelligence 的写作工具。值得注意的是，Apple Intelligence 在浏览器版本的 Meta 服务中仍可正常使用，因为浏览器环境不受 Meta 应用的限制。苹果开发者文档显示，iOS 和 iPadOS 应用需主动选择启用 Apple Intelligence 功能，而 Meta 显然选择了禁用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Meta 并未公开解释禁用 Apple Intelligence 的原因，但业内普遍认为，此举旨在推广其自研的 Meta AI 工具。Meta AI 基于 Llama 模型，已深度整合至 Facebook、Instagram、WhatsApp 和 Threads，提供文本生成、图像创作和搜索增强等功能。例如，在 Instagram 中，用户尝试编辑文本时，会看到「Write with AI」选项，引导至 Meta AI 界面，而非 Apple Intelligence。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345768</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345768</guid>
            <pubDate>Sun, 13 Apr 2025 08:47:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
    </channel>
</rss>