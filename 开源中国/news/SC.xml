<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-最新资讯</title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://rsshub.app/oschina/news" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)</description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>en</language>
        <lastBuildDate>Fri, 12 Jul 2024 18:01:03 GMT</lastBuildDate>
        <ttl>180</ttl>
        <item>
            <title>开源日报 | FB 开源 C++框架 Ocean；程序员起诉 GitHub 后续；开源 AI 智能眼镜；大模型「四小龙」；英伟达有的 AMD 也要有</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.7.12&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/301677/facebook-research-ocean&quot;&gt;Facebook 开源 C++ 框架 Ocean：用于计算机视觉和增强现实&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Ocean 是&amp;nbsp;&lt;span style=&quot;background-color:#ffffff; color:#374151&quot;&gt;Facebook 内部用于&lt;strong&gt;计算机视觉 (CV) 和增强现实 (AR)&amp;nbsp;&lt;/strong&gt;应用程序开发的开源 C++ 框架。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#374151&quot;&gt;Ocean 主要使用 C++ 编写，且不依赖于特定平台，&lt;/span&gt;用于执行各种任务，包括计算机视觉、几何、媒体处理、网络和渲染。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;1292&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5f006526bba6436099e19221ceb275bb79a.png&quot; width=&quot;1960&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/301682&quot;&gt;蚂蚁集团开源 EchoMimic：支持为人像照片对口型、生成肖像动画视频&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;EchoMimic 具备较高的稳定性和自然度，通过融合音频和面部标志点（面部关键特征和结构，通常位于眼、鼻、嘴等位置）的特征，可生成更符合真实面部运动和表情变化的视频。其支持单独使用音频或面部标志点生成肖像视频，也支持将音频和人像照片相结合做出 「对口型」 一般的效果。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-a6d4669d64643dba560ee92bb37c78c9634.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6105753431%2FOnbekbL5i%3Frefer_flag%3D1001030103_&quot; target=&quot;_blank&quot;&gt;英伟达开源混合 Mamba-Transformer 视觉骨干架构&lt;/a&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;p&gt;英伟达公开了 MambaVision 的 PyTorch 实现：混合 Mamba-Transformer 视觉骨干。MambaVision 采用分层架构，同时使用自关注（self-attention）和混合模块。&lt;/p&gt; 
  &lt;p&gt;视觉骨干架构（Vision backbone）是视觉网络中用来提取特征的部分，在获取分析内容后，利用提取的特征完成各种任务，比如图像分割、目标检测等。&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/301731/github-copilot-ms-openai-dmca&quot; target=&quot;news&quot;&gt;程序员起诉微软、GitHub 和 OpenAI 有了后续：法官驳回大部分索赔要求&lt;/a&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;2022 年 11 月，一群程序员对微软、GitHub 和 OpenAI&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/news/216453/github-is-being-sued&quot;&gt;提起集体诉讼&lt;/a&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;，指控 GitHub Copilot 违反版权法，在没有适当归属或遵守开源许可的情况下使用了他们的代码。&lt;/span&gt;在当时，这被视为可能改变生成式 AI 行业游戏规则的事件，但后来情况发生了变化。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;7 月 5 日，法官 Jon Tigar 对原告的又一批索赔做出了&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fregmedia.co.uk%2F2024%2F07%2F08%2Fgithub_copilot_dismiss.pdf&quot; target=&quot;_blank&quot;&gt;裁决&lt;/a&gt;。总体而言，GitHub、微软和 OpenAI 都取得了胜利。三项诉索赔要求被驳回，只有一项获准继续审理。根据微软和 GitHub 律师的统计，目前总共只剩下两项指控。&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FRW9ZmKcq64y-4FNsWp7skw&quot; target=&quot;_blank&quot;&gt;奔跑了五年，就为做一件难而正确的事，继续奔跑！&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;五年前的今天，我做了一艰难的决定，将开发了两年多的时序大数据处理平台 TDengine 的核心代码全部开源。没想到的是，TDengine 开源后迅速引起了开发者的高度关注，在 GitHub 全球趋势排行榜上多次排名第一。截止到今天，TDengine 在 GitHub 上的 Star 已经超过 23k, Fork 数超过 4.8k, 在全球检测到的安装实例数超过 56 万，遍布全球 60 多个国家和地区。&lt;/p&gt; 
     &lt;p&gt;这些数字让我这个年过 50 但仍然冲在 coding 第一线的老程序员兴奋不已，因为有人 Star、有人用，它说明我们没日没夜开发的代码，给大家带来了价值。海量的用户群，是对一个程序员工作的最大回报。今天借开源五周年之际，回顾一下 TDengine 的整个发展旅程，与众多的开发者和创业者分享。&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微信&amp;nbsp;&lt;strong style=&quot;color:rgba(0, 0, 0, 0.9)&quot;&gt;爱倒腾的程序员&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6444741184%2FOncy7E2y7&quot; target=&quot;_blank&quot;&gt;低成本的开源 AI 智能眼镜&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;一款开源的低成本的 AI 智能眼镜，成本仅需 25 美元（国内的替代品物料可以做到百元左右），就可以将普通的眼镜升级成 AI 智能眼镜。它支持录制视频、识别物体和翻译文本等功能，但需要与电脑配合使用，暂不支持在镜片上显示内容。&lt;/p&gt; 
    &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-87f625e3485fdebff2c6eeb6c2c2cdb0579.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
    &lt;p&gt;GitHub：github.com/BasedHardware/OpenGlass&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div style=&quot;text-align:right&quot;&gt;
   - 微博&amp;nbsp;
   &lt;strong&gt;林亦 LYi&lt;/strong&gt;
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1727858283%2FOnbAE81Uw&quot; target=&quot;_blank&quot;&gt;类似 ChatGPT 且适用于苹果设备的客户端&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;Enchanted 是一个开源的、兼容 Ollama 的优雅 macOS/iOS/visionOS 应用程序，适用于使用 Llama 2、Mistral、Vicuna、Starling 等私有托管模型。它本质上是一个 ChatGPT 应用界面，可以连接到您的私有模型。Enchanted 的目标是提供一个产品，能够在 iOS 生态系统（包括 macOS、iOS、Watch 和 Vision Pro）中，实现无过滤、安全、私密和多模态的使用体验。&lt;/p&gt; 
    &lt;p&gt;项目地址：&lt;span style=&quot;background-color:#ffffff; color:#636363&quot;&gt;github.com/AugustDev/enchanted&lt;/span&gt;&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;宝玉 xp&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F5648162302%2FOn5ESmDmO&quot; target=&quot;_blank&quot;&gt;多模态 Agent 框架 - OmAgent 开源&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;OmAgent 是一个多模态智能体系统，专注于利用多模态大语言模型能力以及其他多模态算法来做一些有趣的事。OmAgent 项目包含一个专为解决多模态任务而设计的轻量级智能体框架 omagent_core。项目利用这个框架搭建了超长复杂视频理解系统——OmAgent，当然你可以利用它实现你的任何想法。&lt;/p&gt; 
     &lt;p&gt;项目：github.com/om-ai-lab/OmAgent/blob/main/README_ZH.md&lt;br&gt; 论文：arxiv.org/abs/2406.16620&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;黄建同学&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ft.cj.sina.com.cn%2Farticles%2Fview%2F7517400647%2F1c0126e4705905fgts&quot; target=&quot;_blank&quot;&gt;智能汽车亟待系好网络「安全带」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#4d4f53; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#4d4f53&quot;&gt;自动驾驶技术产业化进程正在加速。作为人工智能赋能汽车业的典型应用场景，自动驾驶既是汽车业变革的明确方向，又是数字经济与实体经济深度融合的新赛道，也是发展新质生产力的重要领域。在惊叹「自动驾驶已经进化到这种程度」的同时，更应关注的是自动驾驶技术的安全性，是我国「车路云一体化」技术路线带来的产业机会。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;经济参考报&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1804338793968622355%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;谁才是大模型「四小龙」？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;有一种说法是，智谱 AI、月之暗面、百川智能、面壁智能，这四家公司是新的「四小龙」，在 6 月中旬举办的 2024 智源大会上，四位 CEO 首次同台，「四小龙」的说法就传开了。&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;还有人说中国有「大模型五虎」：百川智能、智谱 AI、月之暗面、MiniMax、云从科技。这里边把面壁智能剔除了。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;定焦&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.com.cn%2Farticle_7399555658_1b90c424a020018crm.html&quot; target=&quot;_blank&quot;&gt;专访北京超算：国产芯片 15 天左右可跑通大模型，高端算力仍需各方努力&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;算力与数据，是支撑超大规模训练模型发展的两大基础设施。面对全球追逐大模型热潮，高端 AI 芯片短缺，算力问题也成为各行业实现人工智能普惠的最大难点。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;红星资本局&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.21jingji.com%2Farticle%2F20240711%2Fherald%2F7ce5468393eaadb9e88a1e57d188e627.html&quot; target=&quot;_blank&quot;&gt;AI 算力价格调查：价格回归下的供需平衡术&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#1d1d1d&quot;&gt;需求高企的同时，行业也在阶段性发生变化。从国内市场来看，今年以来，随着国内对算力供需关系平衡的预期，部分算力价格开始松动。一方面，有供应链的消息称，英伟达为了吸引客户，将 H20 单卡价格从 12.5 万下降至 10 万左右；另一方面，从 AI 服务器角度来看，当前也存在一定的价格回调。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;21 世纪经济报道&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.cn%2Farticle_6192937794_17120bb42020029iy6.html&quot; target=&quot;_blank&quot;&gt;大模型玩具，AI 硬件的第一个突破口&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;在硬件中搭载大模型的思路，并不难想到，几乎所有的教育公司都会在产品中注入 AI，尤其是「双减」后，面向义务教育阶段的学科培训受限，教育硬件成为行业玩家掘金的重点。学习机、词典笔、甚至是早教机、故事机、单词卡等小品类硬件都成为各家发力的对象，内容之外，AI 就是其最大卖点。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;界面&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8b9eRg2t67i&quot; target=&quot;_blank&quot;&gt;苏妈掷 48 亿现金吞下 AI 模型公司，英伟达有的 AMD 也要有&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;CUDA 成功的一个因素是他们拥有一支内部研究团队，这支团队使用 CUDA 做一些创新。有时将这些创新转化为产品（如 OptiX），更多地是为了展示硬件能力以及提供实现方法……&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;不知道 AMD 对这次收购有何打算，但可以看到拥有一个内部的大模型团队为客户创建模型、进行基准测试并改进产品可能带来很大的价值。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;- &lt;/span&gt;&lt;strong&gt;参考消息网&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmojolicious%2Fmojo.js&quot; target=&quot;_blank&quot;&gt;mojolicious/mojo.js&lt;/a&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;242&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-85e623be091bf63457ad6c1b9248ad84332.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmojolicious%2Fmojo.js&quot; target=&quot;_blank&quot;&gt;https://github.com/mojolicious/mojo.js&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;mojo.js 是 Node.js 实时 Web 框架，可将它视作采用 TypeScript 重写的&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/p/mojolicious&quot;&gt;Mojolicious&lt;/a&gt;。mojo.js 使用了所有最新的 JavaScript 特性，专为聚焦超媒体 (hypermedia) 的后端 Web 服务精心设计。&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://my.oschina.net/u/4090830/blog/11471110&quot; target=&quot;_blank&quot;&gt;探讨打造「高可用架构」秘籍&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;高可用性的文章多如牛毛，看得人眼花缭乱。今天，咱们换个花样，以终为始，来聊聊如何实现系统业务的高可用性这个宏伟目标。本文覆盖高可用架构设计、常见架构模式、高可用开发运维、大促高可用保障、业务高可用、COE 覆盘等方面的理念和思考。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;262&quot; src=&quot;https://oscimg.oschina.net/oscnet/2024-02-01-09-11vqPVYDsCSUWk11LU.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F8UrsjXMqg1vt2HlRArLZig&quot; target=&quot;_blank&quot;&gt;JetBrains IDE 全系列采用新的默认「皮肤」：即将面向所有用户提供&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：能不能把内存占用改改，净整些花里胡哨的&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：他用 java 内存占用再优化也好不到哪去&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：越来越像 vs code&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：应该说是 vscode 设计的确实好&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：和现在的 2024.1 看不出任何区别&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：就是默认开启新 UI 了而已。。原本是默认不开启的。&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：赶紧把 clione nova 搞好合并进 clion 这才是正事。fleet 还没有正式版啊，还要多久&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：不是已经合了吗？还有 nova 吗？&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：还是喜欢 Material ui&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：用了几天，还是不习惯&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 11：rider 开大项目比 vs 还要卡，我以为 vs 的设计器已经够卡了，rider 比他还卡，不过看在 rider 代码补全机制比较优秀还是忍忍&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 12：能不能便宜点&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 13：我都用了 1、2 年新 UI 了，特别棒！比经典的 UI 清爽多了！很喜欢！&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 14：不知道什么时候 visual studio 也能跟上，idea 这个模式开小窗口的时候很友好&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 15：Fira code 字体在新 ui 里显示不太正常，字符间距格外的小&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 16：新 UI 我倒是挺喜欢，新终端做的不好，用起来很卡&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 17：降低了视觉复杂性，增高了操作复杂性。&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FxdoLGPPNbwt2ot46d24_SQ&quot; target=&quot;_blank&quot;&gt;VidHub 播放器禁止播放版权受保护的视频&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：&lt;/span&gt;&lt;span style=&quot;color:rgba(0, 0, 0, 0.9)&quot;&gt;我觉得应该备案过的视频才能被播放&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：&lt;/span&gt;&lt;span style=&quot;color:rgba(0, 0, 0, 0.9)&quot;&gt;逼着每个程序员自己写一个的节奏&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：&lt;/span&gt;&lt;span style=&quot;color:rgba(0, 0, 0, 0.9)&quot;&gt;保护过头，属于是溺爱了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：&lt;/span&gt;&lt;span style=&quot;color:rgba(0, 0, 0, 0.9)&quot;&gt;看了消息说今天更新了版本去掉了这个版权检测&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：&lt;/span&gt;&lt;span style=&quot;color:rgba(0, 0, 0, 0.9)&quot;&gt;退款！&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/301675/spring-framework-6-1-11-released&quot; target=&quot;_blank&quot;&gt;Spring Framework 6.1.11 发布&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：想当年，第一次用的时候，就一个 spring.jar&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：Spring 6 都出来了，我们公司还在用 Spring 3&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/301808</link>
            <guid isPermaLink="false">https://www.oschina.net/news/301808</guid>
            <pubDate>Fri, 12 Jul 2024 10:19:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>探讨打造「高可用架构」秘籍</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;span id=&quot;OSC_h1_1&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;高可用性的文章多如牛毛，看得人眼花缭乱。今天，咱们换个花样，以终为始，来聊聊如何实现系统业务的高可用性这个宏伟目标。本文覆盖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;高可用架构设计、常见架构模式、高可用开发运维、大促高可用保障、业务高可用、COE 覆盘等&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;方面的理念和思考。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;高可用性是个宏大的主题，覆盖的领域广泛。我们要聊的，都是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;实实在在的团队实践经验和教训&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本文不包含异地多活等议题。现在，让我们一起踏上这场关于高可用性的探索之旅吧！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:rgba(255, 255, 255, 0.86); color:#07133e&quot;&gt;为了您的阅读体验，请先查看大纲，注意本文篇幅较长，涵盖了大量细节和分析，需要您花费更多的时间来阅读。谢谢！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;span id=&quot;OSC_h1_2&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一、高可用概念&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;先来介绍下高可用到底多高算高哈，wiki 上对高可用（High Availability）的定义：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;High availability (HA) is a characteristic of a system which aims to ensure an agreed level of operational performance, usually uptime, for a higher than normal period.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;高可用（High Availability）是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;系统所能提供无故障服务的一种能力&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。业界衡量系统可用性的方式主要有 2 种：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;时间纬度的系统可用性。 请求纬度的系统可用性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;span id=&quot;OSC_h2_3&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、时间纬度的系统可用性&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;谈可用性不需要绕来绕去，大家只谈 SLA 即可。业界度量高可用能力也有统一标准：判断宕机时间，并以此计算出每年系统可用时间达到几个 9，来判断高可用架构是否健壮。具体如下表所示：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/2024-02-01-09-11nfqLENYxcaCIIAQ.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一般来说，我们的观念里一个服务至少要做到 99.9% 才称为基本上可用，是合格性产品。否则基本很难被别人使用。一般大家都在谈年 SLA，但是年 SLA 对研发来说一般没有任何实际工程指导意义。我们更应该看重的是季度 SLA，甚至月 SLA，甚至周 SLA。这所带来的挑战就更大了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这里为什么要加 99.95% 呢？第 2 章节会说明&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_4&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2、&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;请求纬度的系统可用性&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;任何一家互联网公司，都是有流量的低峰期和高峰期，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;在低峰期停机 1 分钟和高峰期停机 1 分钟，对业务影响的结果完全不同&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。因此，可以基于一种&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;更加科学的度量方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;来评估，即基于一段时间（比如 1 年）的停机影响的请求量占比进行评估。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;这也是为什么要求每个团队在业务低谷期进行上线发布的原因，同时也是为什么大促期间问题等级更严重的原因。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;系统高可用性 = 成功请求数 / 总的请求数&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;。比如&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;系统可用性 99.9%：表示 1000 个请求中允许 1000 * (1- 99.9%) = 1 个请求出错。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_5&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;二、高可用目标&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;企业给用户提供能力，需要满足用户的诉求。如下图：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;从用户体验角度出发，第一需要确保服务稳定性，第二需要确保功能正确性。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;从企业防资损角度出发，第一需要确保应用高可用，第二需要确保业务高可用。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/2024-02-01-09-11vqPVYDsCSUWk11LU.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;那我们应该如何来系统的分解「提升 SLA」这一个难题呢。我们不能仅仅从系统结构（主备架构、集群架构等）的角度出发，而应该&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;从业务的视角来考虑高可用的架构设计，&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;高可用最终还是回归到系统稳定性的建设目标（「&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;降发生&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;」和「&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;降影响&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;」）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_6&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、稳定性建设的最终目标&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这里我引入两个工业级别的概念 MTBF 和 MTTR。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;MTBF 就是 Mean Time Between Failures 的缩写, 名为平均失效间隔， 它是指系统有多长时间坏一次。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;MTTR 就是 Mean Time To Repair 的缩写，名为平均修复时间，它是指修复系统并将其恢复到完整功能所需的时间量。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;降发生，即降低故障发生的概率，也即对应上面提高 MTBF。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通过冗余设计的思想来实现应用架构的高可用能力保障，同时通过可靠的基础设施组件，来将应用的高可用能力转移到基础设施来提供。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;降影响，即降低故障发生后的影响范围，也即对应上面降低 MTTR。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;早感知，快定位，急止损，优改进。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;有了这两个概念， 我们就可以提出：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/2024-02-01-09-11pdvPIi0ut0adibz.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一个服务的可用度，取决于 MTBF 和 MTTR 这两个因子。从这个公式出发，结合实际情况，就很好理清高可用架构的基本路数了。那就是： &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;要么提高 MTBF, 要么降低 MTTR。除此之外别无他法。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_7&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、高可用需要考虑的因素&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;回复下第一章节高可用为什么要加 99.95% 这个问题。因为 3 个 9（宕机 8.76 小时）对于物流生产环境的影响比较大，但 4 个 9（宕机 52 分钟）对大部分系统来说又要求太高，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;基于成本和业务容忍度考虑&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，故提出了一个折中的 99.9N（N=5,6,7,8)% 的可用性概念。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;成本&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;系统可用性越高，对你的系统要求也越高，你付出的硬件和人力成本和代价也会越高。需要思考比如从 99.95% 提升到 99.99% 成本是多少，收益是多少，性价比如何？还不如花时间降低 MTTR，否则 MTTR 平均修复时间延长反过来导致可用率降低。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;而对于一些服务并不需要达到那么高的可用性，因此就可以为这些服务设置较低的可用性目标。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;1、稳定比省钱更重要，所有省钱的前提都是需要保证系统稳定性。但也需要杜绝过度浪费。 2、稳定性压倒一切，稳定性是 1，其他的是 0，如果没有稳定性，就什么都没有了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;span&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;业务容忍度&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;系统可用性也需要考虑业务的容忍度。比如支持幂等的服务增加重试提高成功率&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对于京东结算页支付功能来说，任何一个请求的失败都有可能带来资金的损失，因此对于这类的服务，对于错误的容忍度是比较低的，也就要求系统可用性较高 (比如 99.99+%）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对于常用的商品详情页话术展示等而言，即使请求一次失败也是，可以接受的，下次再请求成功就可以了。因此对于这些业务来说，业务容忍度较高，系统可用性不要求一定要很高（比如 3 个 9）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_8&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3、面向业务的高可用目标&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#303030&quot;&gt;在实际的操作和讨论过程中，发现这几个 9 的指标虽然简单，但是并不能直观的理解，而且对于我们分析问题和设计方案没有很强的指导意义，因此我们决定找更加容易理解和操作的目标。结合上面说的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;稳定性的建设目标（「&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;降发生&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;」和「&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;降影响&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;」），出了一个可量化、可衡量、可操作的 2 个高可用目标：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#f5222d&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#f5222d&quot;&gt;「&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;降发生&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#f5222d&quot;&gt;」：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;尽量避免发生问题，618 和 11 大促 0 问题，半年最多发生 1 次问题（P7） &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;不出问题当然是高可用的首要目标了，不然的话天天出问题，恢复的再快也没意义。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#f5222d&quot;&gt;「&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;降影响&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#f5222d&quot;&gt;」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;：快速恢复业务，30 分钟内恢复业务（优先止血）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;特别注意这里我们强调的是「恢复业务」，而不是「解决问题」。很多人在处理生产问题或者故障的时候有一个误区：那就是一定要找到问题根因，然后解决。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;这样计算下来一年不可用的时间大约就是 60 分钟，正好契合 4 个 9 的业界通用的可用性目标。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;在这 2 年的项目执行过程中，这个目标真的是非常有用，非常具有指导意义，具体表现为：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#f5222d&quot;&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;团队目标聚焦于业务，而不是聚焦于技术，以结果为导向，确保最终效果不会走偏。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;将目标自顶向下分解&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。比如需求改造上线，从 PRD》架构》编码》测试》发布，等很容易就得出要做的事情了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;上线结果导向&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。比如上线发布是否有灰度、回滚、验证功能？线上有问题多久可快速恢复止血等？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;综上所述，我们应该从业务角度出发，降发生概率和降影响，否则 MTTR（平均修复时长）高，反过来影响可用率，比如本来服务可用率是 99.95，由于 MTTR 增加，导致高可用降低到 99.9%。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_9&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;三、高可用架构设计原则&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;保持简单，使问题易于发现，快速解决。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;价值回归，成本收益要合理。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;span id=&quot;OSC_h2_10&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、解耦&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;耦合度过高是软件设计中的一大隐患，也是导致系统可用性问题的主要原因&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。记得在大学老师就讲「高内聚、低耦合」。大到系统设计小到 API 接口方法。核心都是降低不同模块间的耦合度，避免&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&quot;牵一发而动全身&quot;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。一个高度耦合的系统，一旦发生微小的改动，就可能导致意想不到的 bug 和系统崩溃。在这种情况下，即使是最基本的功能维护也会变得非常困难，更不用说实现高可用性了。因此，降低耦合度对于提高系统的可维护性和可用性至关重要。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.1、组件的低耦合原则&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;无循环依赖原则：技术组件之间不能存在循环依赖，即 A 组件不能依赖于 B 组件，同时 B 组件又依赖于 A 组件。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;稳定依赖原则：被依赖的组件应尽量保持稳定，尽量减少因业务需求变化而导致的变化。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;稳定抽象原则：为了使组件更加稳定，组件需要具备更高的抽象性，不牵扯具体业务需求。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2、面向对象的低耦合原则&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;开闭原则：对修改封闭、对扩展开放，即对象可以扩展新功能，但不能修改原有代码。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;依赖倒置原则：高层对象不应直接依赖于低层对象，而是应依赖于抽象接口，而抽象接口属于高层。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;接口隔离原则：不要强迫使用者依赖他们不需要的方法，应该使用接口来隔离方法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;参考案例：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;案例 1： 时效上游核心是获取订单下传库房时间和妥投时间，Promise 内部分为时效域、产能域（订单占用仓库/站点产能），全程跟踪话术，时效持久化（一线业务）等。基于解耦的原则，优先保障时效、产能域。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❌待改进案例&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;案例 1：0/1 级线上应用报线程池耗尽，基本原因：es 性能下降导致 jsf 接口 tp99 升高，下游超时时间重试，jsf 线程池被异常接口方法占用无法释放，导致其他接口报出线程池耗尽问题。 根本原因：非 0/1 级应用的功能【模糊查询 es 耗性能的功能】放在 0/1 级应用中，未良好的解耦。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;案例 2：JMQ 和 JSF 接口混合在应用，MQ 消费性能差导致 MQ 积压，需要重启服务，但由于有 JSF，导致恢复 JSF 较慢，基本原因：JMQ 环节监控服务,MQ 相关服务性能下降,会导致消息积压,同时导致其提供的 Jsf 接口性能下降,影响可用率，根本原因：Jmq 服务与 Jsf 服务未解耦，应该拆封,迁移其中的 16 个 Jsf 接口。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h2_11&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、隔离&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;解耦是逻辑上的分割，但隔离是物理上的分割&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。比如常见的微服务架构，微服务把系统拆分很多业务子系统，各自独立开发、部署、通过 RPC（比如 JSF）或者 MQ 进行依赖调用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;隔离使得系统间关系更加清晰，故障可以更加隔离开来，问题的发现与解决也更加快速，系统的可用性也更高。下面讲下常见的读写分类和线程隔离。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.1、读写分离&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;读写隔离通常是指将读操作和写操作分离到不同的服务或实例中处理，比如常见的 MYSQL 数据库读写分离,这个就不细说了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;注意点：如果数据库主从存在延迟，需要根据业务评估是否可以读从库，比如支付金融行业需要数据强一致性，很多是读主库的&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2、线程隔离&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;线程隔离通常是指线程池的隔离，在应用系统内部，将不同请求分类发送给不同的线程池，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;当某个服务出现故障时，可以根据预先设定的熔断策略阻断线程的继续执行&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;比如 JSF 接口 A 和接口 B 共用相同的线程池，当接口 A 的访问量激增时，接口 C 的处理效率就会被影响，进而可能产生雪崩效应；使用线程隔离机制，可以将接口 A 和接口 B 做一个很好的隔离。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;注意：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;隔离必须在低耦合的建设基础原则上进行才有意义&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#3b4351&quot;&gt;。如果组件之间的耦合关系千头万绪、混乱不堪，隔离只会让这种情况乱上加乱。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;参考案例：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;案例 1： 一个应用提供 N 个相关联的接口，通过 JSF 线程池配置方法的并发大小参数 concurrents，隔离开防止影响其他方法调用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❌待改进案例&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;案例 1： 现象：数据库模糊查询，由于数据库量大，SQL 未加索引，导致系统卡顿，基本原因：未加索引，导致数据库 cpu 高，进而影响线上业务，根本原因：数据库读写未分类，如果主从同步延迟可接受范围内，需要 mysql 读写分类，读的再慢也不能影响线上写逻辑，如果线上场景读也是简单的读操作&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h2_12&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3、依赖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;依赖原则是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;去除依赖、弱化依赖、控制依赖。多一个依赖多一分风险。能不依赖则不依赖，能异步弱依赖不要同步强依赖&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通过对核心链路内外部服务依赖进行治理，我们的目标是实现以下两个关键目标：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;非核心业务故障不影响核心业务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：通过优化服务依赖关系，确保非核心业务的故障不会对核心业务造成影响。这可以通过输出服务、应用及场景的依赖关系来实现，包括强弱依赖关系的明确划分。同时，我们会定期进行全量强弱依赖验证，以确保核心服务、应用及场景相关上下游依赖的强弱合理清晰。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2.提高系统的稳定性：通过弱依赖出现各类异常（包括但不限于超时、失败等）场景时的容错逻辑和应急预案，有效避免弱依赖故障对核心业务的影响。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;附：依赖关系和 UMP 服务可用率关系图&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/2024-02-01-09-11BZXNfdfvj92Sn1Q.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h2_13&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;4、异步&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;异步可以认为是在隔离的基础上进一步解耦&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，将物理上已经分割的组件之间的依赖关系进一步切断，使故障无法扩散，提高系统可用性。异步在架构上的实现手段主要是使用 MQ 消息队列。对于那些必须确认服务调用才能继续下一步操作的应用不适宜异步调用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;比如获取下传库房时效接口，通过异步的方式处理非黄金链路业务逻辑，比如订单时效全程跟踪发送、定时时效数据库持久化等。通过异步 MQ 发送消息的形式不影响接口核心流量&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;参考案例：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;案例 1： 现象：promise 对外提供的时效域 JSF 接口 TP99 抖动频繁，根本原因：是因为发送 JMQ 抖动导致，解决方案：把之前发送 MQ 强依赖改成弱依赖，最终结果：接口 tp99 有明显下降并且无抖动跳点，性能比较平稳，备注，橘色代表改造前同步发送 MQ 消息，tp99 在 25ms 以上并且抖动比较频繁，蓝色代表改造后采用异步发送 MQ 消息，tp99 保持平稳在 10ms 左右，并且没有抖动跳点&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/2024-07-02-09-26nvzo07r8Zr9VdlT.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h2_14&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;5、重试&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;超时是一件很容易被忽视的事情，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;超时控制的本质是 fail fast，良好的超时控制可以尽快清空高延迟的请求，尽快释放资源避免请求堆积。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;对于网络抖动这种情况，解决的办法之一就是重试。但重试存在风险，它可能会解决故障，也可能会放大故障。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;需要注意的是，可以重试的服务必须是幂等的，否则是有风险的&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。所谓幂等，即服务重复调用和调用一次产生的结果是相同的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;重试方式：同步重试、异步重试&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;重试次数：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;应评估系统的实际情况和业务需求来设置最大重试次数：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#333333&quot;&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;设置过低，可能无法有效地处理该错误；&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#333333&quot;&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;设置过高，同样可能造成系统资源的浪费&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.1、重试算法策略：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;线性间隔：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;每次重试间隔时间是固定的，比如每 1s 重试一次。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;线性间隔+随机时间：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;加入随机时间可以在线性间隔时间的基础上波动一个百分比的时间，防止&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;多个请求在同一时间请求&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;指数间隔：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;间隔时间是指数型递增，例如等待 3s、9s、27s 后重试。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;4.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;指数间隔+随机时间：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;在指数递增的基础上添加一个波动时间&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2、重试风暴：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;ServiceA ---retry*3-----&amp;gt; ServiceB ---retry*3-----&amp;gt; ServiceC ---retry*3-----&amp;gt; DB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;通过上面调用关系简单介绍下重试风暴：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这样在一次业务请求中，对 DB 的访问可能达到 3^(n) 次&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;此时负载高的 DB 便被卷进了重试风暴中，最终很可能导致服务雪崩。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;应该怎么避免重试风暴呢？可采用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;限制链路重试&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#333333&quot;&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;多级链路中如果每层都配置重试可能导致调用量指数级扩大；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#333333&quot;&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;核心是限制每层都发生重试，理想情况下只有最下游服务发生重试；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#333333&quot;&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;Google SRE 中指出了 Google 内部使用特殊错误码的方式来实现。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;关于 Google SRE 的实现方式，大致细节如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#333333&quot;&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;统一约定一个特殊的 status code ，它表示：调用失败，但别重试；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#333333&quot;&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;任何一级重试失败后，生成该 status code 并返回给上层；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#333333&quot;&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;上层收到该 status code 后停止对这个下游的重试，并将错误码再传给自己的上层。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;该方法可以有效避免重试风暴，但请求链路上需要上下游服务约定好重试状态码并耦合对应的逻辑。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h2_15&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;6、熔断&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;重试主要解决偶发的因素导致的单次调用失败，但是如果某个服务器一直不稳定，甚至已经宕机，再请求这个服务器或者进行重试都没有意义了。所以为了保证系统整体的高可用，对于不稳定或者宕机的服务器需要进行熔断。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;服务熔断是在分布式系统中避免从系统局部的、小规模的故障，最终导致全局性的后果的手段。它是通过快速失败（Fail Fast）的机制，避免请求大量阻塞，从而保护调用方。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;熔断的主要方式是使用断路器阻断对故障服务器的调用，断路器状态图如下。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/2024-02-01-09-1169ZdEBQh39A9g0HS.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;断路器有三种状态，关闭、打开、半开。断路器正常情况下是关闭状态，每次服务调用后都通知断路器。如果失败了，失败计数器就+1，如果超过开关阈值，断路器就打开，这个时候就不再请求这个服务了。过一段时间，达到断路器预设的时间窗口后，断路器进入半开状态，发送一个请求到该服务，如果服务调用成功，那么说明服务恢复，断路器进入关闭状态，即正常状态；如果服务调用失败，那么说明服务故障还没修复，断路器继续进入到打开状态，服务不可用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;参考案例：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;案例 1：promsie 调用 gis 进行熔断处理 Sentinel 熔断的降级处理方法，与 Hystrix 非常相似。只需要使用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;@SentinelResource&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;注解的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;fallback&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;属性来指定具体的方法名即可&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;@SentinelResource&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;value &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; GET_FENCE_RESOURCE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;fallback &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;getFenceIdFallback&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;String&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;getFenceId&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;GisAgingFenceRequest&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; gisAgingFenceRequest&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//内部代码逻辑&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;String&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;getFenceIdFallback&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;GisAgingFenceRequest&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; gisAgingFenceRequest&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//内部熔断降级逻辑&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h2_16&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;7、降级&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;降级是从系统功能角度出发，人为或自动地将某些不重要的功能停掉或者简化，以降低系统负载，这部分释放的资源可以去支撑更核心的功能&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;目的是为了提升系统的可用性，同时要寻找到用户体验与降级成本的平衡点；&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;降级属于有损操作。简而言之，弃卒保帅。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;降级策略：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;降级一般在应急预案、大促期间使用。降级策略如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/2024-02-01-09-11YqbExGuB09YAYkO.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;降级的注意点：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#303030&quot;&gt;1.每个服务都需要制定自己的降级策略，根据服务不同的优先级来设定降级方案，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;紧急情况下可以通过启用降级开关关闭非核心功能，损失一定的客户体验，以确保核心关键业务的服务可用性。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2.对业务进行仔细的梳理和分析，哪些是核心流程必须保证的，哪些是可以牺牲的，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;干掉一些次要功能&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。比如电商功能大促期间可以把评论关闭或者简化评论流程&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3.什么指标下能进行降级：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;吞吐量、响应时间、失败次数等达到一个阈值才进行降级处理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;4.降级最简单的就是在业务代码中配置一个开关或者做成配置中心模式，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;直接在配置中心上更改配置&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，推送到相应的服务。比如 DUCC 开关技术。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;参考案例：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;案例 1：Promise 日常会通过详细地址获取 GIS 围栏信息，该接口 tp99 大概在 120ms 左右，在大促期间会通过 ducc 开关进行降级不调用，业务可接受的范围。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❌待改进案例&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;案例 1：线上出现问题后，无法通过人工干预的形式快速止血。其中的人工干预指的是 ducc 开关，界面配置等方式&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h2_17&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;8、限流&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;预期外的突发流量总会出现，对我们系统可承载的容量造成巨大冲击，极端情况下甚至会导致系统雪崩&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;在高并发场景下，如果系统的访问量超过了系统的承受能力，可以通过限流对系统进行保护&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#3b4351&quot;&gt;。限流是指对进入系统的用户请求进行流量限制，如果访问量超过了系统的最大处理能力，就会丢弃一部分用户请求，保证整个系统可用。这样虽然有一部分用户的请求被丢弃，但大部分用户还是可以访问系统的，总比整个系统崩溃，所有的用户都不可用要好。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;主流的限流算法有:&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;计数器法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;漏桶算法&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;令牌桶算法（JSF 限流模式之一）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;4.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;滑动时间窗口算法（JSF 限流模式之一）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;熔断&amp;amp;降级&amp;amp;限流:&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#f5222d&quot;&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;strong&gt;&lt;span&gt;熔断和限流都可以认为是降级的一种方式&lt;/span&gt;&lt;/strong&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#333333&quot;&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;降级依靠牺牲一部分功能或体验保住容量，而限流则是依靠牺牲一部分流量来保住容量。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#333333&quot;&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;限流的通用性会更强一些，因为每个服务理论上都可以设置限流，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;但并不是每个服务都能降级。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;参考案例：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;案例 1：服务被打挂了，应急处理标准处理流程：限流、重启和扩容&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt; 1、首先确认限流是否生效，通过限流将自己保护住； 2、限流生效之后再对服务重启，因为服务被打挂了之后线程被夯住，机器宕机，需要快速通过重启恢复服务； 3、服务重启之后再是扩容，限流：针对集群限流，可以通过自身系统的承载能力进行集群 total 限流，先保护好自己系统；针对应用进行限流，希望达到限流值 80% 左右的时候能有预警，前置处理以免影响到实际业务；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;案例 2：关于限流如何配置&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt; 比如服务 A1、A2、A3、AN 调用服务 B。服务 B 要对 A 进行限流，那限流值配置多少合适呢？这个话题很难，没有标准答案，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#393c5a&quot;&gt;固定 QPS 这种限流方案存在痛点太多：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;以下是个人看法，不一定对&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;span&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;限流的目的是保护自己，服务 B 需要通过性能压测，自身能抗的最大量是多少（比如 CPU 达到 60% 的时候吞吐量）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果服务 B 只提供 1 个 JSF 接口，则评估最大吞吐量比较简单。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果是 N 个接口呢，没有特别好的办法，可根据 N 接口日常流量趋势图评估，但不一定要按流量比来压测，还是参考单个接口压测峰值来评估。因为哪天 B 服务新增加了 1 个接口，或者某个接口调用量增加了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;4.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;服务 B 需要针对 total 限流&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;5.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;核心服务 A 和 B 沟通限流值，可参考历史峰值，业务发展趋势图，峰值趋势图.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#222222&quot;&gt;6.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#222222&quot;&gt;限流阈值会随着环境的变化而变化，比如内部接口改造等等&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;7.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;限流阈值提前报警，而不是等触发了限流才来报警，这时候已经晚了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;8.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果是切量，则需要 AB 沟通切量的流量，随着切量比例越来越大，需要进行扩容，最终限流总值增加&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;9.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;切记注意别因为某个不起眼的接口打爆系统&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;10.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;限流值需要定期更新 review 维护&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#393c5a&quot;&gt;案例 3：相对与固定 QPS 限流机制，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;自适应限流机制是基于并发度进行限流，自适应限流算法在运行过程中会自动评估 Provider 单机性能瓶颈，根据 Provider 单机承载能力自动调整并发度完成限流&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#393c5a&quot;&gt;。具体可参考&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fsd.jd.com%2Farticle%2F28380%3FshareId%3D39712%26isHideShareButton%3D1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#080b31&quot;&gt;JSF 再突破，1.7.8 支持自适应限流&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❌待改进案例&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;服务 A 和服务 B 沟通一个限流值，直接拍脑门配置。可能沟通的值本来就是错的，线上出现过好几次类似案例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h2_18&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;9、补偿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;补偿是在故障发生后，如何弥补错误或者避免损失扩大。比如将处理失败的请求放入一个专门的补偿队列，等待失败原因消除后进行补偿，重新处理。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;因为补偿已经是一个额外流程了，既然能够走这个额外流程，说明时效性并不是第一考虑的因素，所以&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;做补偿的核心要点是：宁可慢，不可错&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#f5222d&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;做补偿的主流方式是事务补偿和重试，以下会被称作回滚和重试。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;补偿最典型的使用场景是事务补偿。在一个分布式应用中，多个相关事务操作可能分布在不同的服务器上，如果某个服务器处理失败，那么整个事务就是不完整的。按照传统的事务处理思路，需要进行事务回滚，即将已经成功的操作也恢复到事务以前的状态，保证事务的一致性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;传统的事务回滚主要依赖数据库的特性，当事务失败的时候，数据库执行自己的 undo 日志，就可以将同一个事务的多条数据记录恢复到事务之初的状态。但是分布式服务没有 undo 日志，所以需要开发专门的事务补偿代码，当分布式事务失效的时候，调用事务补偿服务，将事务状态恢复如初。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_19&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;10、故障转移&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;故障转移（failover）是一种&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;高可用性策略，用于在系统组件发生故障时保持服务的连续性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。以下是一些理论知识点：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;定义&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：故障转移是指在活动服务或应用意外终止时，自动启用冗余或备用的服务器、系统、硬件或网络来接替工作的过程。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;目的&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：其主要目的是确保系统的连续运行和数据的完整性，减少因系统故障导致的服务中断时间。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;类型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：故障转移可以分为热备（Hot Standby）和冷备（Cold Standby）。热备指的是备用系统随时准备接管工作，通常与主系统同步更新；冷备则是在主系统故障后才开始启动并接管工作。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;4.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;实现方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：故障转移可以通过多种技术实现，如使用负载均衡器、集群技术或者具有冗余配置的网络组件。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;5.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;应用范围&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：故障转移可以应用于各种系统组件，包括但不限于处理机、服务器、网络连接、存储设备等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;参考案例：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;案例 1：jimdb 读操作的 failover 机制，比如 jimdb 的 config7 配置读组是 s2,s4,s3，如果 s2 实例挂了，可读 s4 节点，s4 节点挂了读 s3 节点&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❌待改进案例&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;案例 1：JIMDB 节点 config 读组配置单点 s2 实例，如果 s2 实例有问题，则无法故障转移&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h2_20&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;11、缓存&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;缓存一般用于高性能，但同样也适用高可用，在&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#2c3e50&quot;&gt;接口缓存是应对大并发量请求，提高系统吞吐量，保证系统可用性的有效手段。基本原理是，在系统内部，对于某部分请求参数和请求路径完成相同的请求的结果进行缓存，在周期时间内，这部分相同的请求的结果将会直接从缓存中读取，减少业务处理过程的负载。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;接口缓存同样有着它不适用的场景。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;接口缓存牺牲了数据的强一致性，对于实时性要求高的系统并不适用。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;接口缓存加快的是相同请求的请求速率，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;对于请求差异化较大的系统同样无能为力，过多的缓存反而会大量浪费系统内存等资源。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;参考案例：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;案例 1：应用定时任务刷缓存的时候，如果缓存刷新时间较长，应该使用双缓存区，先将待刷缓存的集群流量摘掉切走，待刷完缓存之后再重新将流量切回来，再对另一个集群进行同样操作；使用本地缓存同理；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❌待改进案例&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;案例 1、不管业务系统如何，直接上分布式缓存 Redis，本地缓存。架构其实是越简单越好，能不引入新的组件则不引入，案例 2、应用启动从 redis 加载数据到本地缓存，扩容期间机器较多，同时加载导致 Redis 压力大，并且本地缓存大小巨大，是否合理呢？ 案例 3、用 java 注解的方式，把数据库数据存入 redis 缓存，但由于代码编写问题其实注解一直未生效，在流量峰值期间导致穿透打爆 mysql 数据库（来源 COE 报告）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h1_21&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;四、常见的架构模式&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;span id=&quot;OSC_h2_22&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主备复制&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主从复制&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主从复制和主备复制只有一字之差，区别在于：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;主从复制模式中，从机要承担读操作&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主从复制要点：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;存在&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一主多从&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主机负责读&amp;amp;写，并定期复制数据给从机。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;从机只负责读。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一旦主机宕机，可以通过人工手段，将其中一个从节点作为主节点。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/2024-02-01-09-11VN2Vt2l1ekpoBKw.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;优点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主从复制架构中，主机故障时，读操作相关的业务可以继续运行。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主从复制架构中，从机提供读操作，发挥了硬件的性能。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;缺点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主从复制架构中，客户端需要感知主从关系，并将不同的操作发给不同的机器进行处理，复杂度比主备复制要高。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主从复制架构中，从机提供读业务，如果主从复制延迟比较大，业务会因为数据不一致出现问题。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主从复制架构中，故障时需要人工干预。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;适用场景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;综合主从复制的优缺点，一般情况下，写少读多的业务使用主从复制的存储架构比较多。例如新闻网站这类业务，此类业务的读操作数量是写操作数量的 10 倍甚至 100 倍以上。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;参考案例：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;日常的 mysql 主从读写分类模式，这个没什么好讲的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;❌待改进案例：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;目前有部分系统用 mysql 来存储日志 MySql 关系型数据库存储的是结构化数据，核心是为了保持存储数据的完整性和一致性，主要用于业务生产数据的存储，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;对于日志等非业务生产数据，不要存储到 Mysql 中（成本高，得不偿失），更不要同业务生产数据混用存储中间件，避免非业务数据查询/写入导致存储中间件性能下降影响到生产。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt; 日志这类非生产数据可以存储到 HBase，定期自动清理&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h2_23&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、集群&amp;amp;分区&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在主备复制和主从复制模式中，都由一个共性问题：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;每个机器上存储的都是全量数据&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。但是，单机的数据存储量总是有上限的，当数据量上升为 TB 级甚至 PB 级数据，单机终究有无法支撑的时候。这时，就需要对数据进行分片（sharding）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分片后的节点可以视为一个独立的子集，针对子集，任然需要保证高可用。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/2024-02-01-09-11WlXFd6YmO211KYEb.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h2_24&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3、冗余设计&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;分布式系统中单点故障不可取的，而降低单点故障的不二法门就是冗余设计，通过多点部署的方式，并且最好是部署在不同的物理位置，避免单机房中多点同时失败。冗余设计不仅可以提高服务的吞吐量，还可以在出现灾难时快速恢复。目前常见的冗余设计有&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;主从设计和对等治理设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，主从设计又可以细分为一主多从、多主多从。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;冗余设计中一个不可避免的问题是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;考虑分布式系统中数据的一致性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，多个节点中冗余的数据追求强一致性还是最终一致性。即使节点提供无状态服务，也需要借助外部服务，比如数据库、分布式缓存等维护数据状态。根据分布式系统下节点数据同步的基本原理 CAP(Consistency (一致性)、Availablity (可用性)、Partition tolerance (分区容忍性) 三个指标不可同时满足)，数据强一致性的系统无法保证高可用性，最典型的例子就是 Zookeeper 保证了集群数据的强一致性，但是放弃了集群的高可用性。Eureka 点对点对等的设计保证了服务注册与发现中心的高可用性，但是牺牲了数据的强一致性，降级为数据的最终一致性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;N + 2 就是说平时如果一个服务需要 1 个实例正常提供服务，那么我们就在生产环境上应该部署 1 + 2 = 3 个节点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。大家可能觉得 N + 1 很合理，也就是有个热备份系统，比较能够接受。但是你要想到：服务 N + 1 部署只能提供热备容灾，发布的时候就失去保护了，并且如果其中 1 台机器故障则变单点了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;从另一个角度来讲，服务 N + 2 说的是在丢失两个最大的实例的同时，依然可以维持业务的正常运转。尤其廊坊或者汇天机器过保机器故障概率大。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_25&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;五、高可用开发运维&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;上面讲了很多通用的高可用架构原则和常见的行业架构模式，但回到文章开头我们高可用的目标，结合日常工作，大部分都是在现有系统上进行需求开发，如果保障日常需求开发上线的高可用呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;接着说说上面的 MTBF （平均失效间隔）吧。请各位想一下，影响服务 MTBF 的三大因素！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#f5222d&quot;&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;发布&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#f5222d&quot;&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;发布&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#f5222d&quot;&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;还是发布上线&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一般服务只要你不去碰它（代码&amp;amp;配置）一年都不会坏一次。上线发布更新越频繁，坏的可能性就越大。凡是，软件都有 BUG。发布新版本，新功能上线就是 MTBF 最大的敌人。关于开发运维从团队稳定性文化建设、日常需求关注点、发布流程、报警管理四个方面来说。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_26&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、团队高可用稳定性文化建设&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#f5222d&quot;&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;首先小组团队核心功能业务，必须有 Backup 至少 2+人掌握，否则人员单点是个最大问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h3_27&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.1、地基要打牢&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;稳定性建设工作重在预防&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，根据多年的工作经验，至少 70% 的线上故障都可以通过预防工作来消除。因此，在日常工作中，我们需要投入相应的精力来进行根基建设。所谓的根基建设，就是要把开发、测试和上线这三大流程做到透彻。包括：DesignReview、CodeReview、提测流程、上线流程、引流验证、性能测试等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_28&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2、工作在日常&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;俗话说养兵一日，用兵一时。稳定性工作不是一蹴而就，而是日常的点点滴滴，一步一个脚印走出来的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;需要团队人人参与、持续完善监控告警、检查每一个告警是否配置、及时消灭线上小隐患。可参考每周的稳定性会议。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;梳理：主动梳理团队的业务时序、核心链路流程、流量地图、依赖风险，通过这个过程明确链路风险，流量水位，时序冗余；&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;技术债务治理：主动组织技术债务的风险治理，将梳理出来的风险，以专项的形式治理掉，防患于未然。但需要注意别由于治理而导致线上问题，需要加强引流验证比对。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;演练：把风险化成攻击，在没有故障时制造一些可控的故障点，通过演练来提高大家响应的能力和对风险点的认知。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;报警：除了前面说过的主动响应之外，还要经常做报警保险和机制调整，保证报警的准确度和大家对报警的敏感度。同时也要做到不疏忽任何一个点，因为疏忽的点，就可能导致问题。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_29&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1.3、预案是关键&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我们需要认识到预案的重要性，并投入相应的精力来进行预案的制定和更新。这样，我们才能更好地应对各种突发情况，保障项目的顺利进行。通过每周的稳定性去深入挖掘每个接口的隐患及不足，比如业务指标是否加上、业务指标是否能真实反馈该接口的特性等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_30&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1.4、前置：扁鹊三兄弟&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;与扁鹊三兄弟一样，如果想要让稳定性有价值，SRE 同学一定不能站到系统的屁股后面等着擦屁股，必须走到前面，看到未来的风险。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;既要在发生问题时快速解决问题（做扁鹊）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;也要把风险归纳总结，推动解决（做二哥）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;还要在系统健康的时候评估链路，发现隐藏的问题（做大哥）；&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_31&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;日常需求开发&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#f5222d&quot;&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;新需求上线，务必要确保不影响线上已有功能&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。读服务可通过引流回放比对方式来规避，写链路可能复杂点需要环境隔离。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#f5222d&quot;&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;功能降级：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;当出现故障的时候，可以将非核心功能直接降级，保护核心功能不受影响&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#f5222d&quot;&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;开关机制：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;需求牵扯黄金流程上线必须带 DUCC 开关，如有问题开关可秒级恢复&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#f5222d&quot;&gt;4.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;新需求上线，需要思考如何确保高可用？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;比如这需求上线最坏情况是什么？我如何规避？如何发现，等等？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;5.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我们需要考虑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;系统的依赖性、发生故障的概率、故障发生的时间和故障影响的范围&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。这四个因素是设计高可用的关键因素。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;看到一些线上问题应急预案采用的是回滚方案，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;但是在大部分牵扯代码场景下，开关技术才是线上问题快速止血的最佳方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。如遇线上问题的话，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;采用通用的回滚方式需要 5-10+分钟 (500+台机器）并且回滚如果操作不当会加重问题,而采用开关技术则是秒级&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对于高频率的发布上线来说，开关技术是一种合理的技术手段，被赋予了两种新的用途。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;快速止血：一旦生产环境出了问题，直接找到对应功能的开关选项，将其设置为「关闭」。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;隔离：即将功能代码隔离在线上执行路径之外，对用户不产生影响。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_32&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3、测试&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在高可用架构的构建过程中，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;测试环节扮演着至关重要的角色。它不仅是上线前的最后一道防线，更是确保系统稳定性和可靠性的关键所在&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#f5222d&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通过全面的测试，我们能够及时发现并修复潜在的缺陷和漏洞，从而极大地降低了系统上线后出现故障的风险。因此，我们应当充分认识到测试工作的重要性，并将其作为产品质量保障的核心部分来对待。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_33&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;4、发布流程&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;还记得影响 MTBF 最大的因子吗？发布质量不提高，一切都是空谈。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;流程是为了防止最差的情况发生&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，通过严格遵守流程，可&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:rgba(255, 255, 255, 0.86); color:#07133e&quot;&gt;确保在发布过程中尽量减少风险，提高系统高可用性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1、上线发布必须严格遵守流程 checklist 确认，并且建立 doublecheck 机制&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;建立发布流程：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;流程可以确保最终结果不会太差&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，好的发布流程具有如下特性：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;完整性：完整地、一致地在各个环节内跟踪重要的细节问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;可执行：相对简单，流程可落地，并且能避免最坏情况发生。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;可扩展性：可以应用在简单的发布上、也可以用在复杂的发布过程中&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;建立 CheckList 清单&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;检查列表可以提醒人遗漏的东西、用来减少失败，保持一致性和完整性。把 checklist 清单作为 xbp 流程中一部分，集成到了行云部署发布中，申请上线的时候必须填写。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2、底层中间件、配置文件等变更的执行过程往往伴随着一系列的风险和挑战&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;变更管理在稳定性建设中扮演着至关重要的角色。它涵盖了兼容设计、新版本发布计划、灰度变革、数据迁移、可回滚设计、配置变更控制和复核验证等多个方面，旨在确保系统在变更过程中的稳定性和可靠性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;首先，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;兼容设计和新版本发布计划是变更管理的基础&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。通过充分考虑现有系统的功能和架构，我们可以预测并解决可能出现的兼容性问题。同时，制定详细的新版本发布计划，可以确保变更过程有序进行，避免对用户造成不必要的影响。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;其次，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;灰度变革和数据迁移是降低变更风险的重要手段&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。通过逐步引入变更，我们可以及时发现和解决问题，减少对整个系统的影响。而数据迁移则是确保用户数据安全和完整性的关键步骤，需要仔细规划和执行。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;另外，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;可回滚设计和配置变更控制是保障变更可控性的重要措施。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;可回滚设计意味着我们可以随时将系统恢复到变更前的状态，以应对可能出现的问题。而配置变更控制则可以确保变更过程的合规性和安全性，防止未经授权的变更发生。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;最后，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;复核验证是确认变更有效性和正确性的关键步骤&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。通过对变更后的系统进行全面的测试和验证，我们可以确保变更没有引入新的问题，并且达到了预期的效果。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;综上所述，变更管理在稳定性建设中起着至关重要的作用。通过合理的变更管理措施，我们可以降低变更带来的风险，确保系统的稳定性和可靠性。只有在充分重视和有效实施变更管理的前提下，我们才能够建立一个稳定、可靠的系统。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3、上线发布必须遵守「发布三板斧」： 可灰度、可验证、可回滚&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/2023-09-18-21-59ulggtOu59D18iIW9c.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;复杂需求或者高风险需求的前提下，在架构设计阶段，应该将灰度计划、验证兼容和回滚策略等考虑在内，并做好评估与平衡。具体来说，需要考虑以下两个方面：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;风险程度：在评估系统稳定性和可靠性时，需要对可能出现的问题和风险进行充分的评估，并根据风险程度制定相应的灰度计划、验证兼容和回滚策略。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;成本投入：在进行灰度计划、验证兼容和回滚策略时，需要考虑相应的成本投入，包括人力、物力、时间等方面，以确保实施计划的可行性和经济性。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;综上所述，灰度计划、验证兼容和回滚策略等应该在架构设计阶段就进行充分的考虑和评估，以便在实施过程中能够做到有条不紊、稳妥可靠。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h2_34&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;5、可观察能力建设&amp;amp;快速止血恢复现场&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;告警是监控系统中最为重要的一部分，可以帮助运维人员及时发现并解决问题，确保服务的可用性和稳定性。但目前很多团队都存在报警泛滥，狼来了的感觉，导致告警麻木了，这时候就需要&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;告警治理了，达到快（第一时间发现问题）、准（报警有效性）、少（以防告警泛滥）的目标&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;基本原则：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 在故障处理过程中采取的所有手段和行动，一切以恢复业务为最高优先级，恢复现场止血方案高于寻找故障原因。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;消防队员到达事故现场，第一反应是救火，而不是查失火的原因。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;现在很多线上问题都是业务优先反馈，能不能技术先发现呢？可通过技术业务指标的建设……&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_35&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;六、大促高可用保障&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:rgba(255, 255, 255, 0.86); color:#07133e&quot;&gt;正如文章开头说的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在低峰期停机 1 分钟和高峰期停机 1 分钟，对业务影响的结果完全不一样&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;在大促活动期间，高可用更是重中之重。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;回归问题本质，系统在大促的高可用性和日常的区别在哪呢？个人理解核心是两点：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;【技术】高并发流量&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：大促流量峰值是日常的 N 倍（几十、几百倍），需要具备更高的并发流量处理能力，以保证系统的高可用稳定性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;【业务】业务场景多样化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：大促会增加很多日常用不到的场景，很明显的比如预售场景等，需要确保业务高可用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;针对上面的特性，除了进行备战事项（军演全链路压测，性能压测、预售场景验证等），大促&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;要达到绝对高可用一般都是使用扩容机器冗余+降级非核心功能。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_36&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、容量规划&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;容量规划的本质是追求计算风险最小化和计算成本最小化之间的平衡&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;流量模型评估&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;数据增长预测&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;容量应急预案&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h2_37&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、军演全链路&amp;amp;性能压测&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1、军演全链路方案设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;全链路压测技术方案的核心思路是压测数据隔离。通过对压测流量进行标识、中间件识别和透传压测流量的改造、选用合适影子技术持久化压测流量等手段以达到数据隔离的目的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/2024-02-01-09-11b7fqsSl7wzuVE8r.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;实现全链路压测的核心步骤：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、生成带压测标识的压测流量。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、压测标识处理组件识别并透传压测流量，同时保证压测标识在被压测服务间传递不丢失。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3、选用合适的影子技术，持久化压测流量（与生产存储介质物理或者逻辑隔离，风险可控、易于维护）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2、如何进行高保真压测，使压测结果更接近于线上真实性能表现？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;可使用 R2 平台录制线上流量进行高保真压测。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_38&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3、预案演练&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;预案演练主要解决的问题是：根据单个系统的应急预案，模拟应用系统的一种或多种故障场景，验证系统的高可用性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;检验预案可落地性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1.写的应急预案（计划预案、业务预案、突发预案）之前演练过吗？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2.应急预案从问题开始（历史发生过什么？当下可能发生什么？）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3.从目标切入（预案影响是什么？预案是否可落地执行？）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;4.从风险着手（最坏情况是什么？还有哪些风险点？）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;5.真正出问题了，如何第一时间快速止血，如何缩短 MTTR 平均修复时长。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/2024-06-23-22-34GFuX7j610nCIETcF.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;参考案例：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;案例 1：运行时动态调整日志级别&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt; 在应用运行时动态修改日志级别的功能。比如 Promise 在 618&amp;amp;11 大促峰值期间对日志进行降级（只打印出入参及下游依赖的出入参），TP99 从 30ms 降低到 13ms，待大促峰值过后日志调整回来，方便排查。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;案例 2、弱依赖降级 Promise 日常会通过详细地址获取 GIS 围栏信息，该接口 tp99 大概在 120ms 左右，在大促期间会通过 ducc 开关进行降级不调用，业务可接受的范围。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h1_39&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;七、线上问题 COE 覆盘&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#393c5a&quot;&gt;对于每次的线上问题，都应该使用业界公认的 COE（Correction of Error）覆盘的方式。需要识别根因并做出改进，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#333333&quot;&gt;故障覆盘黄金三问：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#f5222d&quot;&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;故障原因有哪些？根本原因是什么？可根据 5W、鱼骨图等方式找到根本原因。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#f5222d&quot;&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;举一反三，杜绝下次发生类似问题，但不需要列一堆 Action，根据 2/8 法则抓重点即可。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#f5222d&quot;&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;思考如果当时做了哪些可以更快缩短 MTTR(Mean Time To Repair) 的方法。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#393c5a&quot;&gt;覆盘是从故障中学习并且改进杜绝问题再次发生，而不是回放当时的情景。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_40&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;八、业务高可用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;上面的案例说明了技术的高可用并不等于业务的高可用，那么业务的高可用是什么呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;以电商业务为例，个人认为业务的高可用可以用四个词概括：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;正常访问：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;无论请求量多大，必须保证用户的正常访问和操作通畅，至少核心高频业务没问题（比如保证最起码的商品商详、结算页和支付业务可用）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;友好提醒：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;假设遇到上述的请求量过大需要排队，导致页面打不开或者卡单情况，也需要有友好的处理机制和提醒，降低用户的不友好体验。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;异常冗余：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果遇到请求量过大排队，就需要及时的切流和扩容，或者在网关层限流，而不是放任人为的流量过高导致业务不可用时长拉长。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;4.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;防止资损：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;业务的高可用还要注意预防资损。比如用户支付成功了，但是订单状态未更新导致下单失败。比如用户明明有优惠券，但是优惠券服务挂了导致无法使用优惠券，用户多付款。再比如发放优惠券没做规则限制，导致用户重复领取优惠券叠加使用甚至黄牛薅羊毛。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;个人认为，技术的高可用目标，一定是在保证业务的高可用的前提下才有意义，否则只会陷入技术的自嗨陷阱里。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_41&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;九、总结&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在本文中，我们深入探讨了打造高可用架构的关键要素，从系统设计的基本原则到发布上线过程中的最佳实践。我们了解到，创建一个能够抵御各种故障并确保持续服务的系统，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;不仅需要深入的技术知识、精心的规划和不懈的努力，还需要对人的素质和责任心有深刻的认识&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#ff4d4f&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span style=&quot;color:#07133e&quot;&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:rgba(255, 255, 255, 0.86); color:#07133e&quot;&gt;高可用性不仅仅是一个技术问题，它更是一种哲学。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;海恩法则告诉我们，事故的发生是量的积累的结果&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这意味着在构建高可用架构时，我们必须关注每一个小细节，每一个小的疏漏都可能成为未来大问题的导火索。因此，我们需要一点一点地做好每件小事，无论是设计、编码、上线检查、变更管理、快速恢复还是持续监控。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;每个小的成功都是通往整体可靠性的一步。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;再好的技术、再完美的规章，在实际操作层面也无法取代人自身的素质和责任心。我们需要&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;建立一种文化，鼓励团队成员始终保持警惕，对可能出现的问题保持敏感，&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;并准备好迅速应对。这种文化不仅要求我们对技术细节有深入的理解，还要求我们对自己的工作有高度的责任感。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;高可用架构不是一次性的项目，而是一个持续的过程。我们必须不断地评估我们的系统，识别潜在的弱点，并采取措施加以改进。这种&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;持续的努力和对细节的关注&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，以及对人的因素的重视，是确保系统长期稳定运行的关键。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;4.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通过本文的探讨，我们希望读者能够带走这样一个信息：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;构建高可用架构是一项既需要艺术感又需要纪律性的工作&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;只有通过不断地优化每一个小细节，并且&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;持之以恒地将这些小事做好&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，我们才能构建出真正强大且可靠的系统。让我们一起致力于这一点点的进步，最终实现系统的高可用性和业务的连续性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;由于高可用架构这个知识点覆盖面广、挑战性大，本文也是结合日常实践经验，浅谈部分知识点，供大家参考，如里面信息不对请指正，如有更好的知识点评论交流。谢谢！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;参考文献&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SRE Google 运维解密，书籍&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;信通院稳定性建设指南，书籍&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;持续交付，书籍&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;4.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;高可用架构，书籍&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;5.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SRE 口中的 3 个 9，4 个 9：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.csdn.net%2Fqq_41453285%2Farticle%2Fdetails%2F126111711&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;https://blog.csdn.net/qq_41453285/article/details/126111711&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;6.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;面向业务的高可用架构设计：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fxie.infoq.cn%2Farticle%2Fdfa60de7fd1f521a3e9c6de04%3Futm_campaign%3Dgeektime_search%26utm_content%3Dgeektime_search%26utm_medium%3Dgeektime_search%26utm_source%3Dgeektime_search%26utm_term%3Dgeektime_search&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;https://xie.infoq.cn/article/dfa60de7fd1f521a3e9c6de04&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;7.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;高可用架构设计的 7 大核心原则：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.csdn.net%2Fm0_37578675%2Farticle%2Fdetails%2F118342360&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;https://blog.csdn.net/m0_37578675/article/details/118342360&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;8.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;架构之高可用: 如何保证高可用性？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjava.isture.com%2Farch%2Fbase%2Farch-y-ensure-high-availability.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;https://java.isture.com/arch/base/arch-y-ensure-high-availability.html&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;9.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;高可用架构的十种武器：怎么度量系统的可用性？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.lianglianglee.com%2F&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;https://learn.lianglianglee.com/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;10.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;高可用流量治理核心策略：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FyaCgQlZp1sfZhfJU_Qu67A&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;https://mp.weixin.qq.com/s/yaCgQlZp1sfZhfJU_Qu67A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;11.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;系统高可用架构：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdunwu.github.io%2Fdesign%2Fpages%2F9a462f%2F&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;https://dunwu.github.io/design/pages/9a462f/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;12.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Google 高可用架构理念与实践&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.360doc.com%2Fcontent%2F16%2F0104%2F18%2F7353658_525443371.shtml&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;http://www.360doc.com/content/16/0104/18/7353658_525443371.shtml&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;13.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Why you should develop a COE：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faws.amazon.com%2Fcn%2Fblogs%2Fmt%2Fwhy-you-should-develop-a-correction-of-error-coe%2F&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:transparent; color:#266bf6&quot;&gt;https://aws.amazon.com/cn/blogs/mt/why-you-should-develop-a-correction-of-error-coe/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/4090830/blog/11471110</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/11471110</guid>
            <pubDate>Fri, 12 Jul 2024 09:01:50 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>程序员起诉微软、GitHub 和 OpenAI 有了后续：法官驳回大部分索赔要求</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;2022 年 11 月，一群程序员对微软、GitHub 和 OpenAI &lt;a href=&quot;https://www.oschina.net/news/216453/github-is-being-sued&quot;&gt;提起集体诉讼&lt;/a&gt;，指控 GitHub Copilot 违反版权法，在没有适当归属或遵守开源许可的情况下使用了他们的代码。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-418b26d8df184f12f83b78a6bb51545bb8a.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;作为开发者的起诉方认为，GitHub Copilot 基于公开的 GitHub 代码仓库来训练他们的 AI 系统，此举侵犯了大量创作者的合法权利，因为这些公开仓库大多数都采用了开源 License，这些 License 都明确描述了授予使用者的权利和义务，比如保留原作者的署名，而且原作者依旧拥有开源软件的版权 (Copyright)。很显然，GitHub Copilot&amp;nbsp;违反了开源 License 的署名要求条款。&lt;/p&gt; 
&lt;p&gt;除此之外，起诉方还主张被告方违反了以下条款：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GitHub&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.github.com%2Fen%2Fsite-policy%2Fgithub-terms%2Fgithub-terms-of-service&quot;&gt;服务条款&lt;/a&gt;和&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.github.com%2Fen%2Fsite-policy%2Fprivacy-policies%2Fgithub-privacy-statement&quot;&gt;隐私政策&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.law.cornell.edu%2Fuscode%2Ftext%2F17%2F1202&quot;&gt;DMCA § 1202&lt;/a&gt;，禁止删除版权管理信息&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Foag.ca.gov%2Fprivacy%2Fccpa&quot;&gt;加州消费者隐私法&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;以及其他引起相关合法索赔的法律&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在当时，这被视为可能改变生成式 AI 行业游戏规则的事件，但后来情况发生了变化。&lt;/p&gt; 
&lt;p&gt;7 月 5 日，法官 Jon Tigar 对原告的又一批索赔做出了&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fregmedia.co.uk%2F2024%2F07%2F08%2Fgithub_copilot_dismiss.pdf&quot; target=&quot;_blank&quot;&gt;裁决&lt;/a&gt;。总体而言，GitHub、微软和 OpenAI 都取得了胜利。三项诉索赔要求被驳回，只有一项获准继续审理。根据微软和 GitHub 律师的统计，目前总共只剩下两项指控。&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:rgba(255, 255, 255, 0.65); color:#151631&quot;&gt;最近被驳回的索赔要求非常重要，其中一项涉及&lt;/span&gt;数字千年版权法 (DMCA) &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.law.cornell.edu%2Fuscode%2Ftext%2F17%2F1202&quot; target=&quot;_blank&quot;&gt;第 1202(b) 条下&lt;/a&gt;&lt;span style=&quot;background-color:rgba(255, 255, 255, 0.65); color:#151631&quot;&gt;的侵权行为，该条款总体上是说&lt;strong&gt;未经许可不得删除关键的「版权管理」信息&lt;/strong&gt;。在这里的场景中，「版权管理」信息就是开源 License 中声明的使用条款和代码。起诉方认为 Copilot 提供的代码删除了这些信息——违反了第 1202(b) 条规定。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;然而法官 Jon Tigar 不同意这一观点，&lt;strong&gt;他认为 Copilot 建议的代码与开发者受版权保护的作品不够相似&lt;/strong&gt;，因此驳回了起诉方根据数字千年版权法案 (DMCA) 提出的诉讼请求。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-be8131f3acea528a5b699dbd29e4099c0ca.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;除了上面这条和 DMCA 相关的索赔要求，另外两项被驳回的内容是：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;违反开源许可证的指控&lt;/li&gt; 
 &lt;li&gt;违反合同的指控，该指控最初被驳回后又重新提出。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2024%2F07%2F08%2Fgithub_copilot_dmca%2F&quot; target=&quot;_blank&quot;&gt;点此查看更多细节&lt;/a&gt;。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;相关阅读：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/216453/github-is-being-sued&quot; target=&quot;_blank&quot;&gt;GitHub 被起诉&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/226434/microsoft-openai-github-dismiss-copilot-ai-copyright-lawsuit&quot; target=&quot;_blank&quot;&gt;微软、GitHub 和 OpenAI 要求法院驳回 AI 版权诉讼&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/214107/github-copilot-investigation&quot; target=&quot;_blank&quot;&gt;开源软件作者拿起律师执业证，准备起诉 GitHub Copilot&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/301731/github-copilot-ms-openai-dmca</link>
            <guid isPermaLink="false">https://www.oschina.net/news/301731/github-copilot-ms-openai-dmca</guid>
            <pubDate>Fri, 12 Jul 2024 07:15:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Bytebase 2.21.0 - 不同数据库引擎可配置不同 SQL 审核规则</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;h2&gt;🚀 新功能&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;支持不同数据库引擎配置不同 SQL 审核规则。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-90b9dc0163cab2e1e42e1ac2831ca123616.png&quot; alt=&quot;file&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;支持为工单事件配置企业微信私聊通知。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-818c8ebc4066a1fd27c8d73f15cad4bcd68.png&quot; alt=&quot;file&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;支持连接到 Redis 哨兵架构和原生集群。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在项目级别，支持设置：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;是否允许在工单创建后修改 SQL 语句。&lt;/li&gt; 
   &lt;li&gt;是否自动完成已发布的工单。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-72ea61a3724ba5c61ccfeb932be896fb4a3.png&quot; alt=&quot;file&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;🔔 重大变更&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;多租户配置项已从项目级别移动至数据库分组。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🎄 改进&lt;/h2&gt; 
&lt;p&gt;-「取消」工单改名为「关闭」工单。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;添加更详细的任务执行日志。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-352b417f5100a887c1d9018362569cb3216.png&quot; alt=&quot;file&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;在添加实例时，增加了 SSL 连接开关。如果未指定 CA 证书，将使用系统默认证书。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-874fc9ea0f7940a890604a47e2c60df7c9b.png&quot; alt=&quot;file&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;优化了在没有分号场景下，SQL 编辑器自动补全的识别能力。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;优化了 Oracle parser 的性能。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🐞 Bug 修复&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;SQL 解析改进对不受支持的 Unicode 字符的处理。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📕 安装及升级&lt;/h2&gt; 
&lt;p&gt;新安装 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2Fdocs%2Fget-started%2Fself-host%2F&quot; target=&quot;_blank&quot;&gt;https://www.bytebase.com/docs/get-started/self-host/&lt;/a&gt; 升级 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2Fdocs%2Fget-started%2Fupgrade%2F&quot; target=&quot;_blank&quot;&gt;https://www.bytebase.com/docs/get-started/upgrade/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;升级前请备份元数据库，升级后无法回退版本。&lt;/em&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;💡 更多资讯，请关注 Bytebase 公号：Bytebase&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/6148470/blog/11455877</link>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/11455877</guid>
            <pubDate>Fri, 12 Jul 2024 07:13:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>中国信通院发布算力互联公共服务平台</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;2024 年 7 月 11 日，中国信息通信研究院（简称「中国信通院」）发布算力互联公共服务平台，联合产业界开展算力互联网共识共创行动。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;平台现已开放测试，试用：&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fstateioc.iqka.com%2F&quot; target=&quot;_blank&quot;&gt;http://stateioc.iqka.com/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;306&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ab17efff3836655b7a35156a4e237ed9028.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;算力互联公共服务平台是推进和管理全国算力互联互通和算力互联网体系的综合服务平台，包括算力标识管理、算力互联网业务查询、算力统一大市场、政策和研究、标准体系、开源项目和运行监测等功能。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;公共算力资源标识注册和查询：实现跨主体、跨架构、跨地域资源「可查询、可访问、可调用」，加速各个主体之间算力互联互通，前瞻布局算力互联网，助力全国一体化算力体系建设，促进算力服务普惠发展。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;算力资源可信度量：平台可以对接入的算力资源进行真实性、可用性以及利用率度量，能提供全国范围内的算力资源提供商、算力（调度）服务商的可信资源和服务查询，提高供需匹配效率，实现统一算力服务大市场。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;推动算力互联网发展进程：促进新业务、新业态的算力服务发展。未来，中国信通院将持续完善平台服务能力，统筹各级算力互联互通平台遵循平台标准规范开展工作，打通各类算力互联网已有实践体系，助力全国一体化算力体系。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;同时，中国信通院联合中国电信、中国移动、中国联通、曙光智算、华为云开展算力互联网共识共创行动，凝练共识、行业共创，推动算力互联新进程。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/301719</link>
            <guid isPermaLink="false">https://www.oschina.net/news/301719</guid>
            <pubDate>Fri, 12 Jul 2024 06:24:17 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>蚂蚁集团开源 EchoMimic：支持为人像照片对口型、生成肖像动画视频</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;蚂蚁集团发布了开源项目 EchoMimic。据介绍，EchoMimic 不仅能根据人像面部特征和音频来帮人物对口型，还可以结合面部标志点和音频内容生成较为稳定、自然的视频。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;GitHub：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FBadToBest%2FEchoMimic&quot; target=&quot;_blank&quot;&gt;https://github.com/BadToBest/EchoMimic&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a6d4669d64643dba560ee92bb37c78c9634.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;EchoMimic 具备较高的稳定性和自然度，通过融合音频和面部标志点（面部关键特征和结构，通常位于眼、鼻、嘴等位置）的特征，可生成更符合真实面部运动和表情变化的视频。&lt;/p&gt; 
&lt;p&gt;其支持单独使用音频或面部标志点生成肖像视频，也支持将音频和人像照片相结合做出「对口型」一般的效果。&lt;/p&gt; 
&lt;p&gt;下图是 EchoMimic 的工作原理：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-67ab04f158917e59af990d6ea273a9c8dc7.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;EchoMimic 支持多语言（包含中文普通话、英语）及多风格，也可应对唱歌等场景。&lt;/p&gt; 
&lt;p&gt;访问主页查看更多示例：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbadtobest.github.io%2Fechomimic.html&quot; target=&quot;_blank&quot;&gt;https://badtobest.github.io/echomimic.html&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-a0764438588f5852c1dbaa9d934356832bd.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/301682</link>
            <guid isPermaLink="false">https://www.oschina.net/news/301682</guid>
            <pubDate>Fri, 12 Jul 2024 03:23:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>Facebook 开源 C++ 框架 Ocean：用于计算机视觉和增强现实</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#374151&quot;&gt;Facebook 开源了其内部用于&lt;strong&gt;计算机视觉 (CV) 和，增强现实 (AR)&amp;nbsp;&lt;/strong&gt;应用程序的框架 Ocean，&lt;/span&gt;用于执行各种任务，包括计算机视觉、几何、媒体处理、网络和渲染。&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#374151&quot;&gt;Ocean 主要使用 C++ 编写，且不依赖于特定平台：&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Ocean 是一个独立于平台的框架，支持所有主要操作系统，包括 iOS、Android、Quest、macOS、Windows 和 Linux。它旨在彻底改变计算机视觉和混合现实应用程序的开发。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img height=&quot;1292&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5f006526bba6436099e19221ceb275bb79a.png&quot; width=&quot;1960&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;项目主页：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffacebookresearch.github.io%2Focean%2F&quot; target=&quot;_blank&quot;&gt;https://facebookresearch.github.io/ocean/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;仓库地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffacebookresearch%2Focean&quot; target=&quot;_blank&quot;&gt;https://github.com/facebookresearch/ocean&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/301677/facebook-research-ocean</link>
            <guid isPermaLink="false">https://www.oschina.net/news/301677/facebook-research-ocean</guid>
            <pubDate>Fri, 12 Jul 2024 03:05:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>开源日报 | 马斯克拟自建「超算工厂」；类似微软 Recall 的开源项目；</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.7.11&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/301481/zed-on-linux&quot;&gt;开源代码编辑器 Zed 发布原生 Linux 版本&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Rust 开源代码编辑器 Zed 发布了原生支持 Linux 的版本。据介绍，Linux 上的 Zed 正在使用 Vulkan API 进行 GPU 加速。它同时支持 Wayland 和 X11 会话，到目前为止，Zed 团队开发重心主要集中在 Ubuntu 下的测试。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d9ac6475c6b2254e3935253384a5ec2f270.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;在 Linux 上安装 Zed 的命令：&lt;/p&gt; 
&lt;pre style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;code&gt;&lt;span style=&quot;color:#005cc5&quot;&gt;curl&lt;/span&gt; https://zed.dev/install.sh | sh&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.pingwest.com%2Fw%2F296565&quot; target=&quot;_blank&quot;&gt;AMD 宣布 6.65 亿美元收购 Silo AI ，增强其 AI 芯片能力&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;AMD 宣布，将投资 6.65 亿美元收购 AI 初创公司 Silo AI ，增强其 AI 芯片能力。&lt;/p&gt; 
&lt;p&gt;AMD 表示，收购 Silo AI 将帮助其改进 AMD 驱动的人工智能模型的开发和部署，并帮助潜在客户使用 AMD 的芯片构建复杂的人工智能模型。同时，Silo AI 还将加强 AMD 的软件开发能力。&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8b7zl8tMUlC&quot; target=&quot;_blank&quot;&gt;大模型权威测试被曝翻车！更偏袒 GPT-4 等闭源模型&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;此前 MMLU 原始版本早已经被各家大模型刷爆了，谁考都是高分，对前沿模型已经没有了区分度。号称更强大、更具挑战线性多任务语言基准 MMLU-Pro，成了业界对大模型性能的重要参考。&lt;/p&gt; 
&lt;p&gt;但结果没想到的是，现在有人扒出其在采样参数、系统提示和答案提取等方面设置不公平，存在一些令人震惊的差异。随便对系统提示词做了个小修改，直接将开源阵营的 Llama-3-8b-q8 的性能提高了 10 分？！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-33fe3a3ddd68433ddbb70fa707ac5578a37.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/301529/rockyou2024-10-billion-passwords-leaked&quot;&gt;「RockYou2024」文件泄露：包含 100 亿条明文密码&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;网名为 ObamaCare 的黑客于 7 月 4 日在暗网论坛发帖，分享了包含将近 100 亿个明文密码的 rockyou2024.txt 文件，在 RockYou 2021 文件（包含 84 亿个明文密码）基础上再新增了约 15 亿个新密码。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-b57d70570b77ea5bca8abaada405b86fc11.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/301259/leaferjs-1-0-released&quot;&gt;LeaferJS 1.0 重磅发布：强悍的前端 Canvas 渲染引擎&lt;/a&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;网站封面&quot; src=&quot;https://oscimg.oschina.net/oscnet/home.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F5648162302%2FOmTkVgqiG&quot; target=&quot;_blank&quot;&gt;类似微软 Recall 的开源项目：screen-pipe&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;还记得微软的 recall 功能吗？现在有个类似的开源项目，screen-pipe，代码开源，支持本地 LLM，数据完全在你自己的掌控之中。&lt;/p&gt; 
    &lt;p&gt;该项目可以持续录制你的屏幕和麦克风并将其连接到 LLM。灵感来自 adept.ai、rewind.ai、Apple Shortcut。用 Rust 编写，免费，数据纯本地。可以进行搜索，基于 LLM 的问答，自动化重复操作。&lt;/p&gt; 
    &lt;p&gt;项目：github.com/louis030195/screen-pipe&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博 &lt;strong&gt;黄建同学&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1741533154%2FOn2LZthMD&quot; target=&quot;_blank&quot;&gt;开源是一种智商税，李彦宏净说大实话&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
      李彦宏在 WAIC 圆桌访谈直言开源是智商税，一石激起千层浪。当小孩说出皇帝没有穿衣服时，赞美皇帝华服的人破防了。当哥白尼说地球并非宇宙中心时，教会再也难绷。但我认讨论开源只有观点不同，没有对错之分，破防大可不必。这里展开讲讲开源为什么是一种智商税。
     &lt;/div&gt; 
     &lt;div&gt;
      既然是智商税，那必然有」收割方」和被」收割方」。下面从公司和开发者两个角度列举各种」被收割」套路，最后给出针对公司和开发者的防割指南。
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;div&gt;
    &amp;nbsp;
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div style=&quot;text-align:right&quot;&gt;
   - 微博&amp;nbsp; 
   &lt;strong&gt;spaceshuttle&lt;/strong&gt;
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2194035935%2FOn2PmvNZd&quot; target=&quot;_blank&quot;&gt;Posting，一个开源的，在终端下使用的 HTTP 客户端&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-930520c3758c68716b4a15fd0b254d69454.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;/div&gt; 
    &lt;div&gt;
     &amp;nbsp;
    &lt;/div&gt; 
    &lt;div&gt;
     &lt;span style=&quot;background-color:#ffffff; color:#636363&quot;&gt;github.com/darrenburns/posting&lt;/span&gt;
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博 &lt;strong&gt;蚁工厂&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FXm8jmTLHf8sbTAHOUIm1fw&quot; target=&quot;_blank&quot;&gt;对话 MiniMax 创始人：如何打造 AI 时代最大的 APP&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt;
   2024 年 1 月，MiniMax 发布了国内首个基于 MoE 架构的千亿参数量级模型——abab 6；4 月底，又迅速迭代并推出 abab 6.5 系列模型。在各类核心能力测试中，abab 6.5 也接近了 GPT-4、Claude-3、Gemini-1.5 等世界领先的大语言模型。
  &lt;/div&gt; 
  &lt;div&gt;
   &amp;nbsp;
  &lt;/div&gt; 
  &lt;div&gt;
   探索 MoE 的好处不限于此。在闫俊杰看来，这次磨砺让他们不会被局限在只做公开的东西，也敢去做上限更高、要靠自己探索（的东西）。
  &lt;/div&gt; 
  &lt;div&gt;
   &amp;nbsp;
  &lt;/div&gt; 
  &lt;div&gt;
   不过，闫俊杰也认为，只有技术好是没用的，一年之后，一旦失去「AI 滤镜」，大家会从商业化的角度来评价公司。「我觉得短期内最重要的是 AI 技术的进步。一年之后，商业化一定是非常重要的。」
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微信&amp;nbsp;&lt;strong&gt;&amp;nbsp;中国企业家杂志&amp;nbsp;&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.163.com%2Fdy%2Farticle%2FJ6R075OS05119734.html%23&quot; target=&quot;_blank&quot;&gt;《麻省理工科技评论》新一届「35 岁以下科技创新 35 人」中国区入选者正式发布！&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5f2ee8484482d0d47a8553d21be8768429e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;-&amp;nbsp;&lt;strong&gt;DeepTech 深科技&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8b6twnxbVfs&quot; target=&quot;_blank&quot;&gt;第一批被 ChatGPT「炒鱿鱼」的打工人已经出现了&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#4d4f53; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#2f2f2f&quot;&gt;最近发生的一件事，ChatGPT 抢走了 60 个人的饭碗。在写作、检索和翻译等领域，它已经不甘心只当个「小助理」了。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#4d4f53; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#2f2f2f&quot;&gt;AI 替代打工人不再是「狼来了」，而是真切地走进了现实。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;智谷趋势&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.cn%2F2024-07-10%2Fdetail-inccsatx2608978.d.html&quot; target=&quot;_blank&quot;&gt;「只有更快才有竞争力」！马斯克叫停与甲骨文的 100 亿美元谈判，拟自建「超算工厂」加速 AI 布局&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;马斯克旗下的人工智能（AI）初创公司 xAI 已与终止扩大一项现有协议的谈判，这笔交易的潜在价值高达 100 亿美元。根据该协议，xAI 将从甲骨文租用英伟达的 AI 芯片搭建超级计算机。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;每日经济新闻&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8b7oqAaImFF&quot; target=&quot;_blank&quot;&gt;深度｜大模型真的在吞噬人类的一切数据吗？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;《沙丘》中的领航员通过食用香料获得了预测未来的能力，人工智能算法通过处理大量数据集，发现模式和趋势。在《沙丘》宇宙中，人类在香料混合物的影响下进化，获得新的能力并经历意识的重大飞跃。同样，人工智能乃至 AGI 的发展也可能会为人类带来类似的深远影响。&lt;/p&gt; 
 &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;只不过如果知道十年前在社交媒体上发布的内容，有朝一日会成为推动技术进步的「香料」，或许我们会更加慎重地对待自己的数字足迹。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;硅星人&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yidianzixun.com%2Farticle%2F0voOgIPu&quot; target=&quot;_blank&quot;&gt;晋升业内新宠儿，MoE 模型给了 AI 行业两条关键出路&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#1d1d1d&quot;&gt;为什么 MoE 模型如此火爆，备受各大厂商的青睐？在开源的背后，MoE 模型又是以什么样的优势使各大主流厂商成为其拥趸，试图作为改变 AI 行业的利器？&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#1d1d1d&quot;&gt;客观来说，MoE 模型的具体工作原理更接近中国的一句古语「术业有专攻」，通过把任务分门别类，然后分给多个特定的「专家」进行解决。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;智能相对论&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnew.qq.com%2Frain%2Fa%2F20240711A05OJL00&quot; target=&quot;_blank&quot;&gt;昆仑万维方汉：所有的内容行业都会被 AIGC 重塑&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;展望下一个十年，方汉认为，基于 AI 的 UGC 和 PGC 生态，AIGC 内容将是下一个非常庞大的行业，为更多公司创造了巨大的发展机遇。昆仑万维的使命就是实现通用人工智能，让每个人更好地塑造和表达自我。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;中国经济报&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F3g.k.sohu.com%2Ft%2Fn804924445&quot; target=&quot;_blank&quot;&gt;视频大模型激战 180 天：Sora「高冷隐身」，国产巨头狂卷落地&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;AI 视频生成赛道在全球的高度关注下催生出一个又一个新技术成果，与此同时，国内外类 Sora 创企们也开始活跃起来。仅仅在今年上半年，爱诗科技、生数科技、Pika 等 AI 企业就完成了多轮亿元级别的融资，成立于 2018 年的老牌 AI 视频生成企业 Runway 也传出新一轮的融资计划。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;雷科技&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F3g.k.sohu.com%2Ft%2Fn804926325&quot; target=&quot;_blank&quot;&gt;中国力推人工智能全球治理合作&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;中国打造全球人工智能治理生态系统的努力体现了其对负责任、包容和以人为本的人工智能发展的承诺。通过技术合作、教育项目和可持续治理，国际社会可以塑造一个能造福所有人的人工智能未来。为了人工智能的安全发展和治理，各国应开展合作，而不是搞人工智能保护主义。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;- &lt;/span&gt;&lt;strong&gt;参考消息网&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fganelson%2Finform&quot; target=&quot;_blank&quot;&gt;ganelson/inform&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;348&quot; src=&quot;https://static.oschina.net/uploads/space/2022/0429/084800_otZb_5430600.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fganelson%2Finform&quot; target=&quot;_blank&quot;&gt;https://github.com/ganelson/inform&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;Inform 7 是一种使用自然语言语法创建交互式小说的特定领域编程语言。它使用自然语言并借鉴语言学和文学编程的思想，被广泛用作文学写作的媒介、游戏行业的原型制作工具。&lt;/span&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/meituantech/blog/11349478&quot; target=&quot;_blank&quot;&gt;搜索广告召回技术在美团的实践&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;本文首先介绍了美团搜索广告的三个阶段：多策略关键词挖掘、分层召回体系、生成式召回；然后重点介绍了生成式关键词召回、多模态生成式向量召回、生成式相关性判断在美团的实践。最后是一些经验分享及总结，希望能对大家有所帮助或启发。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;261&quot; src=&quot;https://oscimg.oschina.net/oscnet/248944801fe9e2aae32e36f7a1f6e0911668234.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FQtPtJn5Kf6A-xx1N1_-xZA&quot; target=&quot;_blank&quot;&gt;不再是 Only for Mac&lt;span&gt;——&lt;/span&gt;Zed 编辑器正式发布原生 Linux 版本&lt;/a&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：「为 Linux 构建 GUI 应用程序的一大挑战在于，Linux 实际上并不存在。」 一针见血&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：终于来了，一会儿试试&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：我不禁要问：干嘛重复造轮子呢。&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：我不禁要问，用 ed 就能编辑文件了，要那么多编辑器干什么&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：来个安卓版行不行，给满天飞的安卓平板上上强度&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：我觉得 zed 最好用的是当一个普通文本编辑器，从命令行打开一个文件，速度非常快&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：都没有中文插件，插件很少&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：中文输入还有一些问题&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FKtNV20ptkvNGLmB0FE4SQQ&quot; target=&quot;_blank&quot;&gt;Rust 即将进入前十：中赢、大赢、还是特大赢？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：搜索热度是中赢，进入 linux window 内核是大赢，不断追求性能极限与安全是特大赢！&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：难道是因为我开始学了？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：rust 吃了谁家量了？&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：Java 因为我开始学 rust 了&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：cobol，fortan 还有人用么，怎么还这么高的热度&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：前段时间用 rust 的宏写了个通用模型接口，几行代码就可以实现任意表的增删改查。感觉写 web 后端还挺方便的。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：打野终于发展起来了，接下来要打团了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：Zig 居然没看到？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：中国的新能源汽车控制系统用啥写的？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：rust 很适合汽车或者机器人，现在汽车和机器人用的 c++，遗留了很多问题&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 11：会 rust 的，一般都是他们的第三门语言了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 12：如果有一天输麻了，只需要重构一个前端打包工具就可以赢麻了&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FGcF-Jw4YUHi1OFlVFaWFPQ&quot; target=&quot;_blank&quot;&gt;&quot;Only Google Can Do&quot;API：只能通过*.google.com 访问、可读取系统 CPU 和内存使用情况等信息&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：google：我爱撒点小谎，铁铁&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：不作恶，但拿你点数据怎么了。程序员不懂事，瞎写着玩的。就算我偷你点数据，你又有什么损失呢。别人是不想吗，那是没我这本事。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：这就是浏览器也应该自研的原因之一&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：自研就可以不作恶？做起来更方便吧&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：Firefox 这么尊重隐私又好用，怎么就不火&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：用爱发电能坚持到现在已经不错了&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：ladybird 浏览器，宁静 os 作者新开源作品，非 Chrome 内核&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：chromium 开源放在那，完全可以自己改一个来用；而 chrome 本来就是 Google 专有的软件，人家爱加什么功能都无可厚非，大不了换其他浏览器用呗&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：读你硬盘又咋滴？我宇宙第一互联网企业偷点信息怎么了？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：这违反反垄断法吧，巨硬都能被拆 b 谷歌估计也快了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 11：吓得我赶紧删除了 chrome 下载了一个 360 浏览器&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 12：自家后门，winform 里也是常见的&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 13：这些数据怎么就成侵犯隐私了，CPU Memory GPU 不就顶多搞搞性能分析，看看有没有什么标签页过渡占用资源...&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 14：还是当年的 VB script 敞亮，开放式 API，别说读 CPU 什么的，直接运行指令都行&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 15：我想本来应该用来保证语音和视频通话的流畅性的。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 16：《Do not be evil》&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 17：这不就是典型的又当裁判员又当运动员吗？这才是微软之类大企业那么逆势也要搞自己浏览器的原因啊。大家都这么搞而已。只是某些企业层次低，根本进不了这个圈子罢了。然后就吹成天堂的竞争环境了。其实，下三滥的人家早就玩了而已。&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 18：不只 chrome，就连其他拿 chrome/chromiun 套壳的浏览器，比如 edge 也可以复现，也会给 google 网站开后门。这就很耐人寻味了，要么是微软和谷歌臭气相投，要么是微软 edge 团队就是一个草台班子，套了别人的壳但没有做代码审核。&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/301599</link>
            <guid isPermaLink="false">https://www.oschina.net/news/301599</guid>
            <pubDate>Thu, 11 Jul 2024 11:06:55 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>实现 LLM 应用的可观测，难在哪里？</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;p&gt;随着生成式 AI 概念的火爆，以 ChatGPT、通义大模型为代表，市场上涌现了一系列商用或者开源的大模型，同时基于大语言模型（LLM ）以及 AI 生态技术栈构建的应用以及业务场景也越来越多。&lt;/p&gt; 
&lt;p&gt;众所周知，LLM 包含数十亿甚至万亿级别的参数，其架构复杂，训练和推理涉及大量计算资源。这些特性使得它们在实际应用中可能表现出意料之外的行为，同时也带来了性能、安全性和效率等方面的挑战。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;938&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-782826b7a4257fd57ec3ad6a8f9d8ef613e.png&quot; width=&quot;1354&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;LLM 参数量不断增长&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;（图片来源：https://www.alidraft.com/2023/12/19/deploy-your-llm-model-on-cloud-efficent/）&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;那么，如何监控并保障大模型应用上线的性能以及用户体验？如何支持复杂拓扑场景下 LLM 应用领域的链路可视化分析以及问题根因定位？需要从成本以及效果等方面获得线上实际表现，辅助选择、分析、评估以及优化迭代大语言模型等。因此，针对 LLM 应用技术栈，构建行之有效的可观测能力解决方案就成为关键。&lt;/p&gt; 
&lt;p&gt;由于模型本身的复杂性、数据处理的规模以及应用的动态环境，实现 LLM 应用的可观测性面临着诸多难点，比如：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;数据量与复杂度：&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;LLM 在训练和推理过程中会产生大量的数据，这包括但不限于模型参数、中间输出、性能指标、系统日志等。处理如此规模的数据需要高效的数据管理和存储方案。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;数据的复杂度还体现在多模态输入（文本、图像、音频等）和多阶段处理流程上，这增加了监控和分析的难度。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;性能与实时性：&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;实现可观测性往往需要额外的计算资源和网络带宽，这对性能敏感的 LLM 应用是一个挑战。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;实时监测和响应的能力要求可观测性系统能够即时捕获并分析关键指标，以便及时发现和解决问题。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;安全与隐私：&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;LLM 应用通常涉及敏感数据的处理，如何在保护用户隐私的同时收集必要的可观测性数据是一个难点。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;安全性要求确保可观测性数据不被未授权访问或滥用，同时也要防止数据泄露。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;集成与兼容性：&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;技术栈的多样性意味着可观测性解决方案需要与不同平台、框架和工具兼容。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;集成多个系统的可观测性数据，尤其是当涉及到云环境和本地部署的混合架构时，会变得更加复杂。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;语义理解和模型解释：&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;对于 LLM 而言，理解模型内部的工作原理和决策过程是一个难点，这需要深度的语义分析和模型解释技术。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;监控和报告不仅要涵盖技术指标，还要能反映模型的准确性和偏见。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;动态调整与自适应：&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;LLM 应用的可观测性解决方案应该能够根据系统负载和资源可用性动态调整。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;自适应机制对于应对不可预测的工作负载和性能瓶颈至关重要。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;成本与效率：&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;实施全面的可观测性可能会带来较高的成本，特别是在数据存储和计算资源方面。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;需要权衡可观测性的深度和广度与总体成本，寻找最优的平衡点。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;解决这些难点通常需要采用先进的数据处理技术、高性能的计算架构、安全的通信协议、智能的分析算法以及灵活的资源配置策略。此外，持续的监控和迭代改进也是保持可观测性系统有效性的关键。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;当然，这些问题和挑战，对阿里云技术专家蔡健来说，已经有了相应的解决方案。&lt;/strong&gt;蔡健从事可观测产品 ARMS 与 EagleEye 的研发、设计与布道，具备丰富的可观测领域技术架构以及实践经验，成功推进 ARMS 应用性能监控和应用安全 (RASP) 融合解决方案落地，关注 APM 以及 OpenTelemetry 开源社区生态等最新动态。目前关注大语言模型领域可观测需求场景，探索支持 LLM 应用层到底层基础设施的全栈可观测能力解决方案以及最佳实践。&lt;/p&gt; 
&lt;p&gt;8 月 15 日至 16 日，GOTC 2024 大会将于上海张江科学会堂举行。在「LLMOps 最佳实践」论坛，蔡健将以《LLM 应用可观测解决方案探索与实践》为题发表演讲，深入探讨 LLM 应用可观测的关键关注点、高质量数据采集与上报方法，并详细介绍阿里云的 LLM 应用可观测解决方案，分享客户实践案例，展望未来 LLM 应用可观测的发展趋势与面临的挑战。&lt;/p&gt; 
&lt;div&gt; 
 &lt;hr&gt; 
&lt;/div&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:left&quot;&gt;GOTC 2024 与上海浦东软件园联合举办，并结合 「GOTC（全球开源技术峰会）」 与 「GOGC（全球开源极客嘉年华）」，旨在打造一场全新的开源盛会。&lt;/p&gt; 
&lt;p style=&quot;text-align:left&quot;&gt;全球开源技术峰会（Global Open-source Technology Conference，简称 GOTC）始于 2021 年，是面向全球开发者的开源技术盛会；2024 全球开源极客嘉年华（GOGC 2024）由浦东软件园携手 S 创共建，与开源中国、Linux 基金会等品牌联合呈现。&lt;/p&gt; 
&lt;p style=&quot;text-align:left&quot;&gt;此次大会将集结全球范围内对开源技术充满热情的开发者、社区成员、创业者、企业领袖、媒体人，以及各开源项目应用场景的产业精英、跨界才俊与年轻力量。通过主题演讲、圆桌讨论、创新集市、人才集市、黑客松、技术展示和互动工作坊等形式，与会者将有机会交流实践经验、探索前沿技术，让我们一起激发创新活力、展示开源魅力、促进跨领域合作。&lt;/p&gt; 
&lt;p style=&quot;text-align:left&quot;&gt;更多大会信息，访问官网查看：&lt;span style=&quot;color:#245bdb&quot;&gt;https://gotc.oschina.net&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/3859945/blog/11455383</link>
            <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/11455383</guid>
            <pubDate>Thu, 11 Jul 2024 09:19:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>JetBrains IDE 年度第二个大版本 (2024.2) 采用全新默认 UI</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;JetBrains IDE 即将发布年度第二个大版本更新 2024.2，根据&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fblog%2F2024%2F07%2F08%2Fthe-new-ui-becomes-the-default-in-2024-2%2F&quot; target=&quot;_blank&quot;&gt;官方公告&lt;/a&gt;，&lt;strong&gt;他们会在该版本中为所有 IDE 启用全新默认 UI&lt;/strong&gt;，其主要变化包括&lt;strong&gt;简化的主工具栏、新的工具窗口布局、新的主题和图标&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-867094c7ece20e1a30fc6443933a743d327.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;JetBrains 团队介绍称，设计新 UI 目标是&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;为了&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#27282c&quot;&gt;降低 IDE 的视觉复杂性，提供对基本功能的便捷访问，并根据用户需要逐步展示更复杂的功能 —— 进而带来更简洁、干净和现代的外观和体验感。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;全新 UI 还提供了更大和更易于使用的控件、一致的调色板、浅色和清晰的图标、增强的对比度和更好的强调。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-99a19204c10d3ba948bdee6325055c34d83.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;2021 年，JetBrains 就启动了新 UI 的开发工作。历经三年的打磨，现在即将面向全部用户提供。&lt;/p&gt; 
&lt;p&gt;如果你是怀旧党也不用担心，因为 JetBrains 团队将经典 UI 做成了插件，如有需要，直接从&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fplugins.jetbrains.com%2Fplugin%2F24468-classic-ui&quot; target=&quot;_blank&quot;&gt; JetBrains Marketplace &lt;/a&gt;安装即可。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-bb1335c62393924ffdc20f635631c62a74f.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8e0a6987bcd4c65c2d6ac1a60f33ecb7a84.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;相关阅读：&lt;a href=&quot;https://www.oschina.net/news/197167/new-ui-preview-for-jetbrains-ide&quot; target=&quot;_blank&quot;&gt;JetBrains IDE 公布全新默认 UI，已开放申请试用&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/301581/jetbrains-ide-the-new-ui-becomes-the-default-in-2024-2</link>
            <guid isPermaLink="false">https://www.oschina.net/news/301581/jetbrains-ide-the-new-ui-becomes-the-default-in-2024-2</guid>
            <pubDate>Thu, 11 Jul 2024 09:15:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>搞大模型，没有重排工具怎么行？</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:justify&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在说重排工具之前，我们要先了解一下 RAG。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;检索增强生成（RAG）是一种新兴的 AI 技术栈，通过为大型语言模型（LLM）提供额外的「最新知识」来增强其能力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基本的 RAG 应用包括四个关键技术组成部分：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Embedding 模型：用于将外部文档和用户查询转换成 Embedding 向量&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;向量数据库：用于存储 Embedding 向量和执行向量相似性检索（检索出最相关的 Top-K 个信息）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;提示词工程（Prompt engineering）：用于将用户的问题和检索到的上下文组合成大模型的输入&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;大语言模型（LLM）：用于生成回答&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;上述的基础 RAG 架构可以有效解决 LLM 产生「幻觉」、生成内容不可靠的问题。但是，一些企业用户对上下文相关性和问答准确度提出了更高要求，需要更为复杂的架构。一个行之有效且较为流行的做法就是在 RAG 应用中集成 Reranker。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_1&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;什么是 Reranker？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Reranker （重排器）是信息检索（IR）生态系统中的一个重要组成部分，用于评估搜索结果，并进行重新排序，从而提升查询结果相关性。在 RAG 应用中，主要在拿到向量查询（ANN）的结果后使用重排器，能够更有效地确定文档和查询之间的语义相关性，更精细地对结果重排，最终提高搜索质量。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;目前，重排器类型主要有两种——基于统计和基于&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#245bdb&quot;&gt;深度学习&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;模型的 Reranker：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基于统计的重排器会汇总多个来源的候选结果列表，使用多路召回的加权得分或倒数排名融合（RRF）算法来为所有结果重新算分，统一将候选结果重排。这种类型的重排器的优势是计算不复杂，效率高，因此广泛用于对延迟较敏感的传统搜索系统中。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基于深度学习模型的重排器，通常被称为 Cross-encoder Reranker。由于深度学习的特性，一些经过特殊训练的神经网络可以非常好地分析问题和文档之间的相关性。这类重排器可以为问题和文档之间的语义的相似度进行打分。因为打分一般只取决于问题和文档的文本内容，不取决于文档在召回结果中的打分或者相对位置，这种重排器既适用於单路召回也适用于多路召回。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;将重排器整合到 RAG 应用中，可以显著提高生成答案的精确度，因为重排器能够在单路或多路的召回结果中挑选出和问题最接近的文档。此外，扩大检索结果的丰富度（例如多路召回）配合精细化筛选最相关结果（Reranker）还能进一步提升最终结果质量。使用重排器可以排除掉第一层召回中和问题关系不大的内容，将输入给大模型的上下文范围进一步缩小到最相关的一小部分文档中。通过缩短上下文， LLM 能够更「关注」上下文中的所有内容，避免忽略重点内容，还能节省推理成本。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:center&quot;&gt;&lt;img height=&quot;599&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4fc2f2193db0ee6101c8533c1e6e1b0916d.png&quot; width=&quot;690&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;追求回答高精度和高相关性的场景中，特别适合使用重排器，例如专业知识库或者&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.tencent.com%2Fproduct%2Ftqdcs%3Ffrom_column%3D20065%26from%3D20065&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#3370ff&quot;&gt;客服系统&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;等应用。因为这些应用中的查询都具有很高的商业价值，提升回答准确性的优先级远高于系统性能和控制成本。使用重排器能够生成更准确的答案，有效提升用户体验。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;重排器在提高检索相关性的同时，也会增加延迟和计算成本。因此，在检索质量、搜索延迟、使用成本之间进行权衡之后，当前可选择的重排工具并不多，下面介绍三款：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Cohere Rerank 、 BGE Re-Ranker、Jina Reranker。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_2&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Cohere Rerank &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Cohere Rerank 是在业界被广泛使用的重排工具，它通常集成在 LangChain 和 LlamaIndex 框架中，使用相对简单。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;其背后公司 Cohere 的来头不简单。Cohere 成立于 2019 年，由曾在 Google Brain 和 Cortex 工作的研究人员和工程师创立，其联合创始人之一 Aidan Gomez，是 Transformers 架构的作者之一。根据不完全统计，Cohere 累计融资已经超过 4.45 亿美元。今年 3 月，还爆出 Cohere 的新一轮融资已进入后期谈判阶段，筹集超 5 亿美元资金，估值有望达到 50 亿美元。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;今年 4 月， Cohere 发布了 Rerank 3，各方面都提升了不少，包括： &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;4k 上下文长度可显著提高较长文档的搜索质量 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;能够搜索多方面和半结构化数据，如电子邮件、发票、JSON 文档、代码和表格&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;覆盖 100 多种语言 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;改善延迟并降低总体拥有成本 (TCO)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;不过，它是商业闭源的。原本每 1000 次搜索，用户需要花费 1 美元，在升级到 Rerank 3 之后，每 1000 次搜索，需要 2 美元。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:center&quot;&gt;&lt;img height=&quot;525&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6c48de0785563b5f2898a42490593dec710.png&quot; width=&quot;690&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_3&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;BGE Re-Ranker&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;BGE Re-Ranker 是智源研究院推出检索排序模型，今年 3 月发布了 2.0 版本。该模型是智源团队在 BGE 系列基础上的新尝试。BGE（BAAI General Embedding）是智源研究院打造的通用语义向量模型。自 2023 年 8 月发布以来，智源团队陆续发布了中英文模型 BGE v1.0、v1.5 以及多语言模型 BGE-M3。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:center&quot;&gt;&lt;img height=&quot;350&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4e96c1a9718ba5785b09c3449047812cb95.png&quot; width=&quot;690&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;BGE Re-Ranker v2.0 系列排序模型采用了两种不同尺寸的模型基座：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;BGE Re-Ranker v2-LLM：基于 MiniCPM-2B，Gemma-2B 等性能卓越的轻量化大语言模型。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;BGE Re-Ranker v2-M3：基于性能出色、参数量更小的 BGE-M3-0.5B（速度更快）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;来看看 BGE Re-Ranker 2.0 的特性：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;支持更多语言，更长文本长度，并在英文检索基准 MTEB、中文检索基准 C-MTEB、多语言检索基准 MIRACL、LLaMA-Index Evaluation 等主流基准上取得了 state-of-the-art 的结果。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;借助分层自蒸馏策略进一步优化推理效率，适度的开销即可换取显著的性能收益。在实际应用中，用户可以基于具体场景的算力条件及时延限制灵活选择排序模型的层数。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;开源模型现已通过 Hugging Face、Github 等平台发布，采用免费、商用许可的开源协议：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;u&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;u&gt;&lt;span&gt;https://github.com/FlagOpen/FlagEmbedding&lt;/span&gt;&lt;/u&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;&lt;br&gt; &lt;u&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;u&gt;&lt;span&gt;https://huggingface.co/BAAI&lt;/span&gt;&lt;/u&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;截至今年 3 月，BGE 系列模型全球下载量超过 1500 万，位居国内开源 AI 模型首位。BGE-M3 模型一度跃居 Hugging Face 热门模型前三，其所属代码仓库 FlagEmbedding 位居 GitHub 热门项目前 10；BGE-M3 所带来的全新的通用检索模式也相继被 Milvus、Vespa 等主流向量数据库集成。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_4&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Jina Reranker &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Jina Reranker 是由神经搜索公司 Jina AI 开发。2022 年，Jina AI 完成 A 轮融资，融资总额已经超过 2 亿人民币。其开发的神经搜索框架 Jina 多次登上 GitHub 全球 Trending 排行榜第一名。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Jina Reranker v2 在今年 6 月发布，在速度、多语言支持和功能上都有显著提升，尤其适用于检索增强生成（RAG）场景。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:center&quot;&gt;&lt;img height=&quot;199&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-33a75b52e73b78b495d0c05e71f40e03cb2.png&quot; width=&quot;690&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Jina Reranker v2 的主要优势：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;多语言支持: 在 100 多种语言中提供更相关的搜索结果，性能超过 bge-reranker-v2-m3； &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;代理能力: 具备最先进的函数调用和文本到 SQL 转换能力，适用于代理 RAG 场景。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;代码检索：在代码检索任务上表现最佳；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;极速：推理速度比上一代产品快 6 倍，比同类产品&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#eff0f1&quot;&gt;&lt;span&gt;&lt;span&gt;bge-reranker-v2-m3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;快 15 倍。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Jina Reranker v2 的特性：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;创新需求：弥补嵌入模型在检索精度上的不足。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;多语言支持：在 MKQA、BEIR 和 AirBench 等基准测试中表现优异。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;应用场景：在结构化数据查询、函数调用和代码检索方面的应用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;推理速度：模型尺寸更小、采用了 Flash Attention 2 技术。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;训练过程：分四个阶段进行，包括使用英语数据预训练、添加跨语言数据、微调等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:center&quot;&gt;&lt;img height=&quot;294&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-057becb0ce1a34729e9a6ae89f991834540.png&quot; width=&quot;690&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Jina Reranker v2 的应用方式：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通过 Reranker API：使用 Jina Reranker v2 最快捷的方式是通过其 API，无需部署模型，就能轻松提升搜索的相关性和 RAG 的准确性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通过 RAG/LLM 框架集成：Jina Reranker 与现有的 LLM 和 RAG 编排框架集成，只需使用模型名称即可快速集成。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Huggingface：Jina AI 开放了（在 CC-BY-NC-4.0 下）对 Hugging Face 上的 jina-reranker-v2-base-multilingual 模型的访问，以用于研究和评估目的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;私有云部署：Jina Reranker v2 的预构建私有部署包即将在 AWS Marketplace 和 Azure Marketplace 上线，方便 AWS 和 Azure 用户部署。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Jina Reranker 也是收费的，不过前 100 万个 token 可以免费。10 亿，个 token 是 20 美元，110 亿个 token 要 200 美元。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:center&quot;&gt;&lt;img height=&quot;293&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-027ce2e502dc9eb7bc38700ff30df9f35e5.png&quot; width=&quot;690&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;8 月 15 日至 16 日，GOTC 2024 大会将于上海张江科学会堂举行。在「硬核 AI 技术创新与实践」论坛，J&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;ina AI 高级算法工程师付杰将分享 Jina AI 如何通过 reranker 优化搜索结果&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，主要讲解 reranker 背后的开发流程，包括在多语言、长 context 场景下模型的训练，模型数据的筛选与挖掘，模型性能的评测，以及在 RAG 场景下 reranker 模型如何帮助用户提升检索生成的效果。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:center&quot;&gt;&lt;img height=&quot;388&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9466b021c13729a3c080416fa55d4e6bf2b.png&quot; width=&quot;690&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;GOTC 2024 与上海浦东软件园联合举办，并结合 「GOTC（全球开源技术峰会）」 与 「GOGC（全球开源极客嘉年华）」，旨在打造一场全新的开源盛会。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;全球开源技术峰会（Global Open-source Technology Conference，简称 GOTC）始于 2021 年，是面向全球开发者的开源技术盛会；2024 全球开源极客嘉年华（GOGC 2024）由浦东软件园携手 S 创共建，与开源中国、Linux 基金会等品牌联合呈现。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;此次大会将集结全球范围内对开源技术充满热情的开发者、社区成员、创业者、企业领袖、媒体人，以及各开源项目应用场景的产业精英、跨界才俊与年轻力量。通过主题演讲、圆桌讨论、创新集市、人才集市、黑客松、技术展示和互动工作坊等形式，与会者将有机会交流实践经验、探索前沿技术，让我们一起激发创新活力、展示开源魅力、促进跨领域合作。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;更多大会信息，访问官网查看：&lt;a href=&quot;https://gotc.oschina.net/&quot; rel=&quot;nofollow&quot;&gt;https://gotc.oschina.net&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;参考文章：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、提高 RAG 应用准确度，时下流行的 Reranker 了解一下 &amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;https://cloud.tencent.com/developer/article/2410324&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、Cohere AI 推出 Rerank 3：旨在优化企业搜索和 RAG（检索增强生成）系统的先进模型 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;https://medium.com/@bitrise.co.in/cohere-ai-unveils-rerank-3-a-state-of-the-art-model-designed-to-optimize-enterprise-search-and-rag-fe32a2da5533&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3、RAG 再添新利器！智源开源最强检索排序模型 BGE Re-Ranker v2.0 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;https://mp.weixin.qq.com/s/XnkQFCdbvjox1Y06IbIlYw&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;margin-left:.0001pt; margin-right:0; text-align:left&quot;&gt;&amp;nbsp;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/3859945/blog/11455333</link>
            <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/11455333</guid>
            <pubDate>Thu, 11 Jul 2024 09:13:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>搜索广告召回技术在美团的实践</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;blockquote&gt; 
 &lt;p&gt;本文整理自美团技术沙龙第 81 期《美团在广告算法领域的探索及实践》（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1gM4m1r7DQ%2F%3Fspm_id_from%3D333.999.0.0%26vd_source%3Daea2a93491bea0d72f7e5b8a79085d70&quot; target=&quot;_blank&quot;&gt;B 站视频&lt;/a&gt;）。首先介绍了美团搜索广告的三个阶段：多策略关键词挖掘、分层召回体系、生成式召回；然后重点介绍了生成式关键词召回、多模态生成式向量召回、生成式相关性判断在美团的实践。最后是一些经验分享及总结，希望能对大家有所帮助或启发。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-b47df1bba80ad21852458fbee565a29ff5d.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;美团搜索广告介绍&lt;/h2&gt; 
&lt;p&gt;从美团流量场景角度来看，美团搜索广告分为两大类，一是列表推荐广告；二是搜索广告。推荐广告以展现商家模式为主，通常叫商家流。搜索广告的展现形式比较丰富，有商家模式，即以商家展现为主，会挂上菜品/商品；还有商品模式，即以商品展现为主，以呈现商品大图、商品标题等核心商品信息为主。&lt;/p&gt; 
&lt;p&gt;美团搜索广告流量有以下几个典型特点：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;搜商品意图占据绝大多数份额，搜索商家只占较小的一部分；因此检索以商品为主，看候选规模的话，美团有百万量级的商家和十亿级别的商品，供给规模较庞大。&lt;/li&gt; 
 &lt;li&gt;从商家特点来看，它有一个和业界传统电商场景不太一致的特点是很多是中小商家/夫妻店，他们的线上运营能力较弱，导致美团商家的内容质量没有其他电商平台好，所以在内容质量处理上，花费了很多时间。&lt;/li&gt; 
 &lt;li&gt;美团的 O2O 场景特点是 LBS 属性，供给相对不那么充分，一个蜂窝内的几百个、上千个商家，搜索场景里有相关性约束，供给队列更短，有很多位置受限于供给没有填上。因此，美团搜索广告对召回率的要求更高。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/248944801fe9e2aae32e36f7a1f6e0911668234.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;上图展示了美团广告和传统广告之间一些的差异。 下面介绍围绕着召回率提升我们做的一些工作。美团的搜索广告从 2019 年开始建设，主要经历了三个发展阶段：&lt;/p&gt; 
&lt;p&gt;第一阶段是美团&lt;strong&gt;搜索广告启动阶段&lt;/strong&gt;，我们叫多策略关键词挖掘阶段。这时的工程基建能力处于起步阶段，也缺乏线上反馈数据，另外考虑落地节奏，希望尽可能快的把整个系统从 0 到 1 搭建起来，并希望在数据有限的情况下，快速支持迭代效率。所以这个阶段的召回方式是 SPU 通过离线方式，挖掘核心关键词，在线与 Query 精确匹配。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：一是只聚焦于通过离线方式覆盖高频流量；二是缺乏线上的行为数据，以 NLP 的挖词技术为主；三是为了追求更多的覆盖，采用了多策略并行的方式，不断叠加新的召回策略，以达到更高的流量覆盖。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：第一，它不是一个正向匹配过程，而是从商品反向挖掘，所以整体挖掘效率很低，挖出了大量无效关键词，放到线上后，又无法匹配；第二，由于它是一个离线策略，所以只能覆盖一些高频流量，20%-30% 的长尾流量无法覆盖；第三个是多策略并行，在后期，新通路会通过不断挤压旧召回通路，最终形成 10+的召回通路，这种模式的维护成本较高，而且如果一个算法同学优化一个召回通路，策略面覆盖有限，整体的 ROI 在后期较低；第四个是缺乏个性化技术。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;第二阶段是&lt;strong&gt;分层召回体系&lt;/strong&gt;，它是基于流量和供给特点，按照业务类型，聚焦在几个象限内，每个象限里采用更聚焦的针对性召回策略，进行优化。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：第一，在一个业务范畴内，通过把技术做深能够取得业务效果的极大提升；第二是随着基建能力的提升，更多的是把召回由离线切换成在线，以此覆盖更多的流量；第三是在单通路的召回能力上，我们突破了传统单一 NLP 技术瓶颈，开始大规模使用个性化/图/多模态等新的召回技术。在 2022 年底，整个分层召回体系取得了不少成效。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：第一是整个召回体系还是以判别式召回模式为主，决策空间不够，倾向于学习历史数据行为，马太效应现象变得越来越严重，而且整个探索空间在这种判别式模型下面，局限性也越来越明显；第二是整个模型规模和容量相对不足，天花板很容易逼近；第三是采用多通道独立优化的方式，每个通道都有自己的样本特征，很难做到通道之间的融合，难以形成 1+1&amp;gt;2 的效果。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;第三个阶段是&lt;strong&gt;生成式召回&lt;/strong&gt;。核心思路是借鉴生成式大模型的思路和能力，改造现有的召回技术体系，长期上来看，我们会探索 DSI 新召回范式。&lt;/p&gt; 
&lt;p&gt;大模型在 C 端流量的落地，会遇到很多算力瓶颈。经过一年的探索，我们形成了大模型落地的方式和原则，分为三类。第一是离线用能力构建领域微调大模型；第二是在线用大模型技术思想，结合传统模型改造现有模型能力；第三是通过蒸馏方式，在线尽可能学习离线大模型能力，通过蒸馏方式把大模型通用知识蒸馏到在线规模相对较小的模型上。&lt;/p&gt; 
&lt;p&gt;面临的挑战包括三个方面：第一是有算力焦虑；第二是在模型规模变得越来越大的情况下，如何保证模型迭代效率；第三模型的变化不能发挥模型能力本身的优势，我们希望构建以大模型核心能力基础为核心的架构，拿到更好的效果，但改造成本较大。&lt;/p&gt; 
&lt;h2&gt;美团搜索广告召回发展阶段&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/d1e0aed8bb38220792a3337d9ac211e8728900.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;阶段一：多策略关键词挖掘&lt;/h3&gt; 
&lt;p&gt;对于多策略关键词挖掘阶段，美团搜索广告的特点一是 Query 较短，平均长度也就两三个字，因为很多人在美团 App 搜索比如烧烤、西餐这种很泛但又很短的 Query；二是流量分布比较集中，高频、Top 几万的 Query 就占了大约 70% ~ 80% 的流量，头部效应比较明显；三是区别于业界传统的搜索广告，美团搜索广告商家没有买词能力，通常以整个店铺的投放模式为主。&lt;/p&gt; 
&lt;p&gt;基于这三个特点，我们设计了关键词挖掘策略思路。一由于 Query 很短，我们很容易通过信息抽取，把词或实体核心信息抽取出来；二是因为头部效应比较明显，Top2 万的 Query 覆盖了很多流量，采用这种离线方式能快速拿到大部分收益；三是由于商家没有买词能力，如果用 Query 直接匹配商品，会涉及到传导文本匹配问题，匹配难度会更高，所以我们最后采用模型从商家商品里挖掘核心词，在线做短串匹配的方式。&lt;/p&gt; 
&lt;p&gt;如左下图所示的召回模式是离线，我们从广告或 SPU 里通过关键词挖掘的方式挖掘出关键词，在线通过 Query 改写的方式尽可能提升在线匹配效率。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/30482573c6a09cb8e3384db6dc660a0e829404.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;具体来说，我们的关键词挖掘策略经历过三版迭代，按照技术由浅入深的方式做的。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;早期第一版创建时，我们更多采用基于规则的挖掘式策略，把流量分成了商家词、商品词和品类词。商品词通过分词和词频贡献的算法，挖掘核心关键词，由于品类字面没有完全匹配的信息，我们通过互信息，构建词之间的权重去挖掘。但问题一是规则能力较弱；第二是只能挖掘出连续的短差，比如&quot;炒西红柿鸡蛋&quot;，它只能挖掘出&quot;炒西红柿&quot;，挖掘不出&quot;炒鸡蛋&quot;。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;所以在快速落地了规则式挖掘策略后，我们开始用模型方法自动挖掘关键词。模型通常有两种，抽取式和生成式。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;从准确性和数据局限考虑，先采用的是抽取式挖掘方式挖掘关键词，这经过了三个阶段的策略迭代。第一版将规则式升级为了模型挖掘方式，传统上叫序列标注模型，这种模型只能挖掘出连续短串，好处是挖掘效率比基于规则的挖掘模式高，但会导致很多关键词受限于连续短串的方式而挖掘不出来；后面做了两版突破连续短串的挖掘方式，分别是标注组合模型和指针组合模型。标注组合模型能够跨越连续短串挖掘，但它有一个顺序概念在里面；指针组合模型可以在原有短串里随机组合词，突破顺序和连续的局限。但抽取式模型的准确率较高，探索空间不足。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在迭代了三版抽取式策略后，我们将策略重心聚焦在生成式挖掘方向上，希望突破字面极限，探索更大的流量空间，最后做了三个阶段的迭代。第一个阶段是深度分类模型，它能够突破字面限制，Top2 万的 Query 能够覆盖大部分流量，那将 SPU 商品文本直接分类到这 2 万个 Query 标签里，做词和 Query 间的匹配，但这种多分类模型较难优化，也不能泛化出更多的 Query，时效性和更新频率也有限；所以后来我们采用了深度生成模型，实现了相对广阔空间的挖掘，但受限于模型规模和样本丰富度，准确性不太好，所以我们在后面加了标注和生成模型，在具备生成泛化性的同时，尽量控制 Query 质量，以上所有模型都是传统 NLP 里的基础模型，我们只是把模型数据、业务特点做了适配。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;未来，我们期望在关键词挖掘阶段，较好地解决了早期业务落地和基本盘问题，但是面对美团比较复杂的流量场景，还需要通过新方式强化流量，提高商品匹配效率。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/68f8473fef2b195795238fda49311e4d767762.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;阶段二：分层召回体系&lt;/h3&gt; 
&lt;p&gt;2022 年，我们开始正式规划第二代召回体系即分层召回体系，核心思路是按照流量和供给特点分类，强意图是直接搜索一个商品；泛意图比如搜索&quot;烧烤&quot;这个品类，泛意图用户虽然表达了需求，但满足需求的候选可以很广，甚至可以替代；供给层面分为有供给、弱供给和没有供给三个象限。我们找到核心象限聚焦优化，最终找到以下四类场景。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;第一是强意图有供给，通过关键词就能较好满足，因此在这个象限里，我们更多是在迭代关键词召回技术。一是通过离线统一到生成式的方式。前面介绍离线关键词挖掘策略可能会有十几个通道，不管迭代哪个通道，策略召回的覆盖面都是有限的，而且团队也没那么多人迭代，但这种情况下，我们把整个离线关键词十多路的挖掘策略通过规模较大的生成式模型做了统一，引入了多模态信息，做到了数据更多、模型更多以及召回目标更多的情况，后期只需要通过优化模型能力，就能取得线上全流量覆盖的效果；二是通过离线关键词的方式做到了在线。我们并没有采用业界传统的布尔检索，这种方式有两个局限，一是 Query 改写以及商品分词基于较浅层的模型，整体效果会受限于模型效果。二是它没有做到检索和最终目标的匹配。在线系数化检索方式类似于双塔向量检索，但每个模型出来不是一个稠密的向量，而是一个几万维稀疏的 term 粒度，通过端到端的建模方式，把 Query 和商品映射到一个稀疏的几万维槽位的几个槽位里，离线训练时通过槽位端到端的建模，实现目标检索和目标一致性，在线检索时，基于槽位构建倒排检索，具备一定的可解释性。&lt;/li&gt; 
 &lt;li&gt;第二个是泛意图有供给，体现了用户的个性化偏好，通过迭代向量召回模型覆盖这个场景。向量召回经过了三版迭代。第一版是基于传统语义相关性约束的双塔模型，和业界的做法类似；我们的向量召回目标最终要让建模用户个性化，第二版将用户个性化提上了日程，但如果只把用户个性化特征和传统语义特征融合在一起，黑盒式学习很容易被用户个性化信息带偏，最后我们让用户个性化信息和语义个性化信息分别学习，通过显式叠加的方式做端到端的建模。这种检索方式能够兼顾个性化和语义相关性信息；第三版是基于平台的多样化目标，我们需要对齐后链路的精排目标，在召回阶段考虑整体商业价值。&lt;/li&gt; 
 &lt;li&gt;第三个是泛需求弱供给，比如搜索&quot;汉堡王&quot;，但给 TA 一个&quot;肯德基&quot;，TA 也会下单，通过搜索推荐化的方式覆盖和解决。这个场景比较复杂，从业务来看，它需要做引导和推荐，在结果页里也做偏泛结果的推荐，涉及到搜索前和搜索中，搜索中既有商家也有菜品，既涉及要推荐什么样的菜品，也涉及推荐什么样的商家；另外推荐本身是一个关系建模。我们最后选择基于图模型的迭代，因为图模型首先是一个基于关系的建模，而且图模型具备多场景海量信息的容纳能力，在图建模里，一是构建了异构的多节点百亿规模图，通过图预训练加微调的方式识别多个场景，我们最近也在尝试做图和大模型训练相结合的方式；二是我们把整个图检索搬到在线，因为在搜索场景中，用户需求是即时需求，属性较强，只有把检索搬到在线，通过图在线的实时检索聚合到用户当前最有可能的潜在兴趣情况下，才能实现收益最大化。&lt;/li&gt; 
 &lt;li&gt;第四个是没有供给的场景，通过流量结合供给运营化的方式解决。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;阶段 2 通过划分象限和场景聚焦迭代的方式，拿到了不错的收益，但很快也遇到了瓶颈。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/ce161f376ffa89b2baed47bc8e7c4765967044.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;阶段三：生成式召回&lt;/h3&gt; 
&lt;p&gt;2023 年，我们开始探索新生成式召回方式，核心思路是结合大模型或生成式技术思想，提高召回算法的决策空间，提升模型的匹配能力。经过一段时间迭代，我们抽象出广告子模块结合 LLM 落地的三类思想及方式，分别是用思想、学能力、用 LLM。具体和子模块结合的一些探索如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;一是离线关键词召回方向。如刚才介绍，我们已经把整个离线关键词召回技术方式统一到了规模不错的生成式模型方式上。大模型出来后，直接用大模型其实还存在着算力及效果的 2 个挑战。但我们认为大模型的两个核心技术思想：Cot（Chain-of-thought，能使大型语言模型能够更好地理解人类的语言请求）推理和 RLHF（Reinforcement Learning from Human Feedback，一种基于人类偏好的强化学习方法）对齐人类反馈思想，对我们现有模型的优化也是有帮助的，因此我们使用大模型的这些技术思想来改造离线生成式召回模型。&lt;/li&gt; 
 &lt;li&gt;二是在向量召回方向。我们已经将向量表征升级为多模态模型，进一步我们思考，LLM 语言大模型对于离散 Token 的信息归纳及表征是有比较大的提升的，但是在稠密表征领域，一个值得借鉴的方法是扩散模型，因为扩散模型也是通过多步去噪的方式来生成目标，通过扩散多步过程，在其中引入多元信息多步融合的思路，提升整个向量召回的向量表征能力。&lt;/li&gt; 
 &lt;li&gt;三是随着我们探索的深入及对应算法能力的提升，我们构建了美团领域广告大模型，尝试直接把大模型用到美团实际场景里做关键词召回，将离线中等规模的生成式模型直接替换成大模型，并探索大模型在线化。&lt;/li&gt; 
 &lt;li&gt;第四个是蒸馏大模型能力，主要在相关性场景落地，目前蒸馏了两块能力，Cot 推理能力和模型隐层知识能力蒸馏。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下面我主要介绍下结合 LLM 的能力，在召回场景下已经全量的一些技术探索。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/cb8c69f866c07b7bbe28f99acbc845f7640525.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;生成式关键词召回&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;生成式召回主要借鉴大模型思想，我们已经升级为统一的生成式模型，它的工作方式是基于 beamsearch 的方式，一次生成多个结果，但结果之间是互相看不到的，我们认为这种方式会存在问题，另外，从线上和实际生成结果来看，词之间是有关系的，按照概率方式来看，如果一个关键词能够推理出另一个关键词，大概率前面这个关键词要比下一个关键词的信息含量多，那能否借鉴大模型推理思想，按照序列生成方式逐步推理出多个关键词。&lt;/li&gt; 
 &lt;li&gt;我们通过构建概率贡献图的方式，采样得到关键词之间的导出关系，在一次生成时，直接生成多个关键词，这多个关键词之间有推理关系，比如要给&quot;花仙女鲜花店&quot;商家生成关键词，第一个关键词就是相对具象的&quot;鲜花店&quot;，它的含义和商家的商品描述是确定的，在生成&quot;鲜花店&quot;时，可以推理成&quot;花店&quot;，进一步可能会生成新关键词，通过这种序列推理方式，能够很好地利用关键词之间的关系。&lt;/li&gt; 
 &lt;li&gt;在序列推理生成关键词时，比如生成了 5 个关键词，有一个关键词不相关，剩下的 4 个关键词是相关的，那如何通过模型识别出这种不一致现象，能否借助人类反馈方式，实现模型序列好坏端到端的判断。模型生成的关键词序列与人工标注是否一致，通过这种反馈对齐的方式喂给模型，提升整个序列生成结果的一致性。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;通过这种方式，召回得到明显提升，而且生成相关性的准确度也得到明显提升。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/0a64745f26ec8939c7f4e17424273d161277430.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;对于离线关键词，前面是中等规模的模型，我们最近把整个离线关键词替换成大模型，之前没有替换是因为开源通用大模型能力在领域场景里，挖掘词的准确性和通用性有限，我们一直在构建美团广告领域的大模型，通过激发大模型知识，生成更全面准确的模型，我们做了 3 个阶段的优化。&lt;/p&gt; 
&lt;p&gt;第一是融合领域知识，比如健身和轻食相关，这是领域知识，通过领域全参数训练得到一个基础的广告领域模型。第二是融入场景知识，美团有很多店铺和商品名，比如川菜和眉州东坡在店铺里有很多相关数据。通过这种指令微调的方式学习店铺知识，在实际应用时，再学习偏实际的知识，比如搜索&quot;猪手&quot;时，发现他之前检索过很多&quot;猪肘切片&quot;，通过这种检索方式增强大模型当前推理知识能力。最后通过构建领域大模型和检索增强范式，在一些场景里替换传统大模型，这样，我们发现召回效率明显提升。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/b9d1d0d7bcc6265f296c2ff425f5954a774735.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;多模态生成式向量召回------结合扩散模型，多阶段生成向量表征&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;我们改造或优化多模态向量召回，在表征里结合扩散模型做了优化，如下图左边所示，传统的多模态向量召回更多是在 item 侧表征里，将商品图片和文本模态信息融合在一起，得到一个表征，那能否通过一些方式在 Query 侧也实现多模态表征。一个用户在美团场景里搜索一个 Query 时，大概率他的脑海里已经有关于这个 Query 所对应菜品图片的大致印象。那我们如何通过模型建模的方式还原图片的印象，核心在于还原用户的潜在意识。我们的做法是，一是把 Query 历史点击的图片信息汇集在一起，表征 Query 所代表的通用视觉信息；二是将用户历史点击图片代表用户个性化视觉信息，把这两类视觉信息叠加在一起，可以在一定程度上反映用户在当前搜索框架下，想要得到的流量侧多模态信息，最后通过多模态表征匹配技术，整个离线召回效率也有提升。&lt;/p&gt; 
&lt;p&gt;但这种方式也是基于传统的判别式表征，比如现在大家都在做个性化向量召回，相关性和个性化之间有递进关系，最浅层的需要保证相关性，第二层才需要在相关性里挑选更个性化、更符合用户偏好的候选集，给到下游链路。但传统的判别式方式一般在特征阶段叠加不同特征，通过建模、多目标落实反向迁移方式，不能很好的显式学习到不同目标间的递进关系，但 SD 生成模型比较适合这种稠密向量生成，通过多步还原过程，本质上也是一个不断推理的生成式过程。&lt;/p&gt; 
&lt;p&gt;我们希望向量表征具备不同信息的推理能力，SD 的多步加噪去噪过程类似于推理过程，可以相结合，在不同步骤中引入不同维度的信息，做到多维信息的显式理解及融合。在正向编码过程中，先将 item 通过编码器编码成向量后，逐渐加噪还原成白噪声，在反向去噪还原过程中，在噪声里分阶段添加用户 Query 以及 side info 信息，通过多步还原的方式，还原出 Query 所代表的信息。并有两个对比的操作，一是传统的样本 Paiwise 学习，通过对比学习方式拉近 Query 与相似 Item 的表征；二是我们认为相似 item 有类似的标准过程，通过对比学习拉近相似 item 之间在扩散中间过程的表征，这是整个建模过程。&lt;/p&gt; 
&lt;p&gt;在还原阶段，我们会显式还原中间步骤叠加相关性信息、个性化信息，通过对比方式让模型在还原过程中显式相关性和个性化信息，最后在模型结果里能看到，如下图左边是传统的判别式模型里最好的一个 Baseline，它能够较好区分 Query 和正样本信息，但它在个性化样本和相关性样本里基本是混在一起的，通过这种扩散模型方式，相关性样本和个性化样本就有一定程度区分开来的能力。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/eb8c6c661c488af1801306944b08b8ff683001.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;总结&lt;/h2&gt; 
&lt;p&gt;生成式算法相比判别式，能够有效的拓展整个召回的策略空间，2023 年我们基于大模型的技术思想赋能现有的召回模型拿到了一些效果，但远未达到新技术方式的上限。看未来，一方面随着算力的逐渐提升，我们可以探索更大规模的生成式模型直接落地，另一方面可以探索在线的端到端生成式召回，来优化多级漏斗带来的样本偏差和漏斗效率问题。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;|&lt;/strong&gt; 在美团公众号菜单栏对话框回复【2023 年货】、【2022 年货】、【2021 年货】、【2020 年货】、【2019 年货】、【2018 年货】、【2017 年货】等关键词，可查看美团技术团队历年技术文章合集。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/b0364d579285ab22aa6235bd100d7c22178175.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;| 本文系美团技术团队出品，著作权归属美团。欢迎出于分享和交流等非商业目的转载或使用本文内容，敬请注明&quot;内容转载自美团技术团队&quot;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=mailto%3A%E3%80%82%E6%9C%AC%E6%96%87%E6%9C%AA%E7%BB%8F%E8%AE%B8%E5%8F%AF%EF%BC%8C%E4%B8%8D%E5%BE%97%E8%BF%9B%E8%A1%8C%E5%95%86%E4%B8%9A%E6%80%A7%E8%BD%AC%E8%BD%BD%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8%E3%80%82%E4%BB%BB%E4%BD%95%E5%95%86%E7%94%A8%E8%A1%8C%E4%B8%BA%EF%BC%8C%E8%AF%B7%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E8%87%B3tech%40meituan.com%E7%94%B3%E8%AF%B7%E6%8E%88%E6%9D%83%E3%80%82&quot; target=&quot;_blank&quot;&gt;。本文未经许可，不得进行商业性转载或者使用。任何商用行为，请发送邮件至 tech@meituan.com 申请授权。&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/meituantech/blog/11349478</link>
            <guid isPermaLink="false">https://my.oschina.net/meituantech/blog/11349478</guid>
            <pubDate>Thu, 11 Jul 2024 08:37:54 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>AWS SDK 停止对 PHP 8.0.x 及以下版本的支持</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;AWS 软件工程师 Sean O&#39;Brien 在日前发布的一篇博客文章中&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faws.amazon.com%2Fcn%2Fblogs%2Fdeveloper%2Fannouncing-the-end-of-support-for-php-runtimes-8-0-x-and-below-in-the-aws-sdk-for-php%2F&quot; target=&quot;_blank&quot;&gt;表示&lt;/a&gt;，从 2025 年 1 月 13 日开始，AWS SDK for PHP 将不再支持 PHP 8.0.x 以及 PHP 7.2.x、7.3.x 和 7.4.x。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;因为上述版本已经分别于 2023 年 11 月、2020 年 11 月、2021 年 11 月和 2022 年 11 月结束了生命周期。对于目前仍在使用其中版本之一的用户，建议尽快升级到 PHP 8.1 或更高版本，以便继续接收 SDK 更新。&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「PHP 小组最近终止了对 PHP 8.0.x 的支持，PHP 社区也在 8.0.x 及以下版本的 PHP 运行时达到生命周期终点后，开始放弃对它们的支持。这些运行时将不再有错误修复或安全更新。为了确保我们提供的是最新的安全库，我们正在进行迁移。为确保您的应用程序和服务保持安全，请升级到受积极支持的 PHP 运行时，如 8.1.x。」&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img height=&quot;267&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9ccf3fd33ae7abd44cdd66bc0d7d589ab68.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;对于继续使用 AWS SDK for PHP 并使用 PHP 8.0.x 或以下版本的用户，在创建任何客户端实例时都会显示以下消息：&lt;/span&gt;&lt;/p&gt; 
&lt;div style=&quot;text-align:start&quot;&gt; 
 &lt;pre style=&quot;text-align:left&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span style=&quot;color:#ee9900&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&quot;color:#7d8b99&quot;&gt;/**
* test.php
*/&lt;/span&gt;

&lt;span style=&quot;color:#1990b8&quot;&gt;require&lt;/span&gt; &lt;span style=&quot;color:#2f9c0a&quot;&gt;&#39;vendor/autoload.php&#39;&lt;/span&gt;&lt;span style=&quot;color:#5f6364&quot;&gt;;&lt;/span&gt;

&lt;span style=&quot;color:#1990b8&quot;&gt;use&lt;/span&gt; Aws&lt;span style=&quot;color:#5f6364&quot;&gt;\&lt;/span&gt;S3&lt;span style=&quot;color:#5f6364&quot;&gt;\&lt;/span&gt;S3Client&lt;span style=&quot;color:#5f6364&quot;&gt;;&lt;/span&gt;

$s3Client = &lt;span style=&quot;color:#1990b8&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#1990b8&quot;&gt;S3Client&lt;/span&gt;&lt;span style=&quot;color:#5f6364&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#5f6364&quot;&gt;[&lt;/span&gt;
    &lt;span style=&quot;color:#2f9c0a&quot;&gt;&#39;region&#39;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;color:#2f9c0a&quot;&gt;&#39;us-west-2&#39;&lt;/span&gt;&lt;span style=&quot;color:#5f6364&quot;&gt;,&lt;/span&gt;
&lt;span style=&quot;color:#5f6364&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#5f6364&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;div style=&quot;text-align:start&quot;&gt; 
 &lt;pre style=&quot;text-align:left&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;$ php --version
&lt;span style=&quot;color:#c92c2c&quot;&gt;PHP&lt;/span&gt; &lt;span style=&quot;color:#c92c2c&quot;&gt;8.0&lt;/span&gt;&lt;span style=&quot;color:#c92c2c&quot;&gt;.9&lt;/span&gt; ...

$ php test.php
...
&lt;span style=&quot;color:#c92c2c&quot;&gt;PHP&lt;/span&gt; Warning&lt;span style=&quot;color:#5f6364&quot;&gt;:&lt;/span&gt;  This installation of the &lt;span style=&quot;color:#c92c2c&quot;&gt;SDK&lt;/span&gt; is using &lt;span style=&quot;color:#c92c2c&quot;&gt;PHP&lt;/span&gt; version &lt;span style=&quot;color:#c92c2c&quot;&gt;8.0&lt;/span&gt;&lt;span style=&quot;color:#c92c2c&quot;&gt;.9&lt;/span&gt;&lt;span style=&quot;color:#5f6364&quot;&gt;,&lt;/span&gt; which will be deprecated on January &lt;span style=&quot;color:#c92c2c&quot;&gt;13&lt;/span&gt;th&lt;span style=&quot;color:#5f6364&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color:#c92c2c&quot;&gt;2025.&lt;/span&gt;
Please upgrade your &lt;span style=&quot;color:#c92c2c&quot;&gt;PHP&lt;/span&gt; version to a minimum of &lt;span style=&quot;color:#c92c2c&quot;&gt;8.1&lt;/span&gt;.x to &lt;span style=&quot;color:#1990b8&quot;&gt;continue&lt;/span&gt; receiving updates &lt;span style=&quot;color:#1990b8&quot;&gt;for&lt;/span&gt; the &lt;span style=&quot;color:#c92c2c&quot;&gt;AWS&lt;/span&gt; &lt;span style=&quot;color:#c92c2c&quot;&gt;SDK&lt;/span&gt; &lt;span style=&quot;color:#1990b8&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color:#c92c2c&quot;&gt;PHP&lt;/span&gt;.
To disable this warning&lt;span style=&quot;color:#5f6364&quot;&gt;,&lt;/span&gt; set &lt;span style=&quot;color:#2f9c0a&quot;&gt;`suppress_php_deprecation_warning`&lt;/span&gt; to &lt;span style=&quot;color:#2f9c0a&quot;&gt;`true`&lt;/span&gt; in the client constructor &lt;span style=&quot;color:#1990b8&quot;&gt;or&lt;/span&gt; set the environment variable &lt;span style=&quot;color:#c92c2c&quot;&gt;AWS_SUPPRESS_PHP_DEPRECATION_WARNING&lt;/span&gt; to &lt;span style=&quot;color:#2f9c0a&quot;&gt;`true`&lt;/span&gt;.
...&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Perforce 最近发布一份报告指出，近 55% 的受访者在生产中至少使用了一个已不受支持的 PHP 版本。虽然相较 2023 年的 61.9% 占比有所下降，但降幅不大。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;相关阅读：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/286796/tiobe-index-202404&quot; target=&quot;news&quot;&gt;TIOBE 4 月榜单：PHP 跌至历史最低点&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/289440/is-php-still-worth-it-in-2024&quot; target=&quot;news&quot;&gt;PHP 在 2024 年还值得学习吗？&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/301567/aws-sdk-php-8-0-x-end-of-support</link>
            <guid isPermaLink="false">https://www.oschina.net/news/301567/aws-sdk-php-8-0-x-end-of-support</guid>
            <pubDate>Thu, 11 Jul 2024 08:23:54 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>微软和苹果放弃 OpenAI 董事会观察员席位</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;英国《&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ft.com%2Fcontent%2Fecfa69df-5d1c-4177-9b14-a3a73072db12&quot; target=&quot;_blank&quot;&gt;金融时报&lt;/a&gt;》最新报道称，在 OpenAI 面临监管审查之际，微软公司和苹果公司已决定不再加入该公司的董事会。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;微软是 OpenAI 的最大投资者，在去年 11 月获得了其董事会观察员席位，并于本周二宣布放弃了这一职位。此前曾有报道称&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/news/300134/apple-openai-board-observer-role&quot; target=&quot;news&quot;&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;苹果将担任 OpenAI 董事会观察员&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;，但消息称苹果公司也已经改变了主意。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;249&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-96c35d68750d6f4ca1ff2ca6142d6c9c9ac.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;微软副总法律顾问 Keith Dolliver 在周二晚些时候发出的一封信中向 OpenAI 通报了该公司退出董事会的计划。「在过去八个月里，我们见证了新成立的董事会取得的重大进展，我们对公司的发展方向充满信心。考虑到这一切，我们不再认为我们作为观察员的有限角色是必要的。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;OpenAI 发言人则表示：「我们感谢微软对董事会和公司发展方向的信心，我们期待继续成功的合作。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前，OpenAI 正面临美国和欧盟反垄断监管机构的审查，其中与微软的合作尤其受到关注。《华尔街日报》6 月初报道称 ，美国联邦贸易委员会正在调查这两家公司的合作关系，他们担心微软可能会在不引起监管部门注意的情况下安排这笔交易，从而获得对 OpenAI 的控制权。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;当月晚些时候，欧盟最高竞争官员透露，欧盟可能会就两家公司合作协议中的 &quot;某些排他性条款&quot;对其展开调查。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;去年 12 月，在首席执行官 Sam Altman 短暂下台后，微软在 OpenAI 董事会中获得了观察员席位。在 Altman 重返最高职位后，投票解雇他的董事离开了公司，董事会进行了重组。而微软据称在确保 Altman 复职方面发挥了关键作用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;相关阅读：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/300134/apple-openai-board-observer-role&quot; target=&quot;_blank&quot;&gt;苹果将担任 OpenAI 董事会观察员&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/301554/microsoft-apple-give-up-openais-board-observer-seats</link>
            <guid isPermaLink="false">https://www.oschina.net/news/301554/microsoft-apple-give-up-openais-board-observer-seats</guid>
            <pubDate>Thu, 11 Jul 2024 07:05:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>「RockYou2024」文件泄露：包含 100 亿条明文密码</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;网络安全公司 Cybernews 于 7 月 4 日发布博文，发现了包含 9948575739 条明文信息记录的 rockyou2024.txt 文件，&lt;strong&gt;已经预定成为 2024 年最大的密码泄露事件。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-78385082b6c673a407913fc9da9181b0bd7.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;网名为 ObamaCare 的黑客于 7 月 4 日在暗网论坛发帖，分享了包含将近 100 亿个明文密码的 rockyou2024.txt 文件，在 RockYou 2021 文件（包含 84 亿个明文密码）基础上再新增了约 15 亿个新密码。&lt;/p&gt; 
&lt;p&gt;虽然该用户是在 2024 年 5 月底注册的，但他们之前曾分享过西蒙斯-西蒙斯律师事务所的员工数据库、在线赌场 AskGamblers 的线索以及伯灵顿郡罗文学院的学生申请表。&lt;/p&gt; 
&lt;p&gt;消息称本次新增的 15 亿个新密码中，来自 4000 个庞大数据库，覆盖了过去至少 20 年时间。&lt;/p&gt; 
&lt;p&gt;研究人员表示：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;从本质上讲，RockYou2024 汇编了全球个人泄露的隐私隐私，意味着攻击者可以利用这些数据发起攻击是，大大增加了用户的风险。&lt;/p&gt; 
 &lt;p&gt;我们已经联系了发布数据文件的威胁行为者，收到了大约 30GB 的 combolists 证明，从中提取了数据。不过，我们的研究团队并未对所有数据集进行彻底调查。&lt;/p&gt; 
 &lt;p&gt;尽管如此，研究人员还是能够将所提供的组合列表与 RockYou 数据集的一部分值进行映射，并实现了 100% 的匹配。&lt;/p&gt; 
 &lt;p&gt;我们的目的是让公众了解潜在风险，而不是将数据集提供给威胁行为者使用。因此，我们无法证实或否认您提到的其他黑客 / 研究人员的说法。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-64121bb87b484b9e1cddb372e345215b4ba.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;下载地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fs3.timeweb.cloud%2Ffd51ce25-6f95e3f8-263a-4b13-92af-12bc265adb44%2Frockyou2024.zip&quot; target=&quot;_blank&quot;&gt;s3.timeweb.cloud&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;参考链接：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Finfotechlead.com%2Fsecurity%2Frockyou2024-10-billion-passwords-leaked-85710&quot; target=&quot;_blank&quot;&gt;https://infotechlead.com/security/rockyou2024-10-billion-passwords-leaked-85710&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fakaclandestine%2Fstatus%2F1809214316077515087%3Fs%3D46&quot; target=&quot;_blank&quot;&gt;https://x.com/akaclandestine/status/1809214316077515087&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdanielmiessler%2FSecLists%2Ftree%2Fmaster%2FPasswords%2FCommon-Credentials&quot; target=&quot;_blank&quot;&gt;https://github.com/danielmiessler/SecLists/tree/master/Passwords/Common-Credentials&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/301529/rockyou2024-10-billion-passwords-leaked</link>
            <guid isPermaLink="false">https://www.oschina.net/news/301529/rockyou2024-10-billion-passwords-leaked</guid>
            <pubDate>Thu, 11 Jul 2024 04:24:08 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>夸克发布 AI 搜索功能</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;阿里智能信息事业群旗下夸克升级「超级搜索框」，推出以 AI 搜索为中心的一站式 AI 服务，提供从检索、创作、总结，到编辑、存储、分享的信息服务。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「能回答、能创作、能总结的超级搜索框，是夸克对 AI 搜索的新定义。」阿里智能信息事业群总裁吴嘉表示，大模型、数据、场景等优势，推动夸克加速革新搜索产品，创造更大用户价值。「跨过大模型应用全新体验的临界点，夸克全面进入 AI 时代，一站式 AI 服务的创新涌现将滔滔不绝。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;289&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-523a17b5278de9d4f4b12ed674969c1e5d6.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根据介绍，「超级搜索框」集纳了智能回答、智能创作和智能总结三大能力。其中，智能回答能够更好地理解用户意图，聚合全网优质内容，更精准、直接、高效地提供图文、视频等。尤其针对复杂逻辑分析和跨学科知识，智能回答更能发挥 AI 的综合回答能力，为用户呈现准确、丰富的结果。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;智能创作方面，夸克 AI 搜索满足用户各类主题、题材、篇幅的高频创作需求，包括文案创作、文档写作、PPT 写作、简历制作等，让用户直接得到所需内容。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;智能总结方面，面对几十万字的长文和专业信息，夸克数秒钟就能整理出全文摘要。夸克还支持最长 5 小时视频的字幕导出、分段总结、整体总结、生成脑图、抽取课件 PPT 等，提升工作学习效率。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/301497</link>
            <guid isPermaLink="false">https://www.oschina.net/news/301497</guid>
            <pubDate>Thu, 11 Jul 2024 02:46:38 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>deepin V23 成功适配奕斯伟计算 EIC7700X，RISC-V 桌面生态发展再提速</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;内容来源：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fen%2Fdeepin-v23-adapted-to-eic7700x%2F&quot; target=&quot;_blank&quot;&gt;deepin（深度）社区&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;近期，deepin（深度）社区宣布成功适配奕斯伟计算 EIC7700X，实现了 RISC-V 版本 deepin V23 的稳定运行。这一举措再次印证了 deepin 对 RISC-V 生态的承诺和实力，也为开发者和用户打开了通往全新桌面体验的大门。&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;奕斯伟计算 EIC7700X&lt;/strong&gt;&lt;/h1&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;951&quot; src=&quot;https://oscimg.oschina.net/oscnet/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240711101140.jpg&quot; width=&quot;1268&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;奕斯伟计算 EIC7700X 是一款功能强大的 RISC-V 智能计算 SoC，搭载了 64 位乱序执行 RISC-V 处理器和自研高能效 NPU，最高算力 19.95TOPS，双 Die 版本可达 39.9TOPS，支持全栈浮点计算，全面加速生成式大模型。支持 H.264、H.265 视频编解码标准，具备强大的音视频处理能力和丰富的外设接口，为 AI PC、工业视觉等行业提供高效能智能计算解决方案。&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;deepin V23 运行于 EIC7700X&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;此次适配奕斯伟计算 EIC7700X 的 deepin 镜像基于最新的 deepin V23 RC2 主线打造，采用了 ESWIN 开源的、针对 EIC7700X 优化的 6.6 内核，为用户提供最佳的性能和体验。经过 deepin-ports SIG 团队的全面测试，deepin V23 在 EIC7700X 上运行稳定，网络连接、USB 设备访问、HDMI 视频输出等功能均表现出色。DDE 桌面环境和预装的应用程序也运行稳定，并可跟随主线版本同步更新，确保用户始终享有最新功能和安全补丁，为用户带来与其它架构 (amd64/arm64/loong64) 一致的使用体验。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;◉ 演示截图：一睹为快，体验 deepin V23 的魅力&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;719&quot; src=&quot;https://oscimg.oschina.net/oscnet/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240711101204.jpg&quot; width=&quot;1268&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;deepin 桌面环境&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;713&quot; src=&quot;https://oscimg.oschina.net/oscnet/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240711101209.jpg&quot; width=&quot;1268&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;Firefox 浏览器，deepin 启动器&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;713&quot; src=&quot;https://oscimg.oschina.net/oscnet/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240711101213.jpg&quot; width=&quot;1268&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;deepin 内置小游戏连连看，mpv 视频播放器，LibreOffice，系统监视器&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;◉ &lt;/strong&gt;&lt;strong&gt;预装软件列表：开箱即用，常用软件一应俱全&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;为了方便用户快速上手，体验 deepin V23 的完整功能，镜像中预装了以下软件：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;内核与驱动：来自奕斯伟计算、由 deepin 构建的 6.6.18 内核，集成了 EIC7700X 所需的常用硬件驱动，保证系统开箱即用。&lt;/li&gt; 
 &lt;li&gt;系统基础：包含 sudo、networkmanager 等基础工具，方便用户进行系统管理和网络配置。&lt;/li&gt; 
 &lt;li&gt;桌面体验：完整的 deepin 桌面环境 (DDE)，为用户提供舒适的操作体验。DDE 是 deepin 自主研发的桌面环境，以其美观、易用和高效著称，深受广大 Linux 用户的喜爱。&lt;/li&gt; 
 &lt;li&gt;实用工具：预装了 fastfetch、vim、bash-completion 等常用工具，方便开发者和高级用户使用。&lt;/li&gt; 
 &lt;li&gt;办公软件：预装 LibreOffice，提供开箱即用的办公环境。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;注：为减小镜像体积，方便用户下载和烧录，镜像中仅包含了必要的应用程序。用户可使用预装的应用商店或 apt 命令在线安装其他应用。deepin 拥有丰富的软件仓库，用户可以轻松找到自己需要的软件。&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;&lt;strong&gt;deepin-ports SIG&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;deepin（深度）社区已将基于 EIC7700X 的设备正式列入 deepin V23 RISC-V 支持设备列表，并将持续为其提供软件更新和性能优化，确保用户获得最佳体验。deepin-ports SIG 一直致力于将 deepin 操作系统移植到更多的硬件平台和架构上，并提供持续维护和更新，为用户打造更丰富的 deepin 生态体验。&lt;/p&gt; 
&lt;p&gt;在适配过程中，deepin-ports 还为 EIC7700X 等 RISC-V 设备构建了额外的软件仓库，用于提供部分定制功能，例如 deepin 定制内核等，进一步提升用户体验。&lt;/p&gt; 
&lt;p&gt;近期，deepin 成功适配了 SpacemiT MUSE™ Box 和 MilkV Mars，后续将继续坚定地支持 RISC-V 生态的发展，并持续扩展对更多 RISC-V 设备的支持，加速推进 RISC-V 架构桌面生态的完善。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;版本发布计划&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;由于 RISC-V 版本与 amd64/arm64 等架构版本在使用体验和稳定度上还存在差距，deepin V23 将按照以下表格的方式发布 RISC-V 镜像。&lt;/p&gt; 
&lt;table cellspacing=&quot;0&quot;&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;vertical-align:center&quot;&gt;&lt;strong&gt;版本类型&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style=&quot;vertical-align:center&quot;&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style=&quot;vertical-align:center&quot;&gt;&lt;strong&gt;适用对象&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;vertical-align:center&quot;&gt;Testing&lt;/td&gt; 
   &lt;td style=&quot;vertical-align:center&quot;&gt;用于软硬件适配和初步测试的版本，功能尚未完善，可能存在已知问题。&lt;/td&gt; 
   &lt;td style=&quot;vertical-align:center&quot;&gt;主要面向开发者和对 deepin 系统感兴趣的早期用户。&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;vertical-align:center&quot;&gt;Preview&lt;/td&gt; 
   &lt;td style=&quot;vertical-align:center&quot;&gt;ports 架构 (riscv64/loong64) 适配的尝鲜版本，已经完成了主要功能的开发和测试，具有一定的稳定性。&lt;/td&gt; 
   &lt;td style=&quot;vertical-align:center&quot;&gt;面向更广泛的开发者和希望抢先体验新版本的用户。&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;vertical-align:center&quot;&gt;Stable&lt;/td&gt; 
   &lt;td style=&quot;vertical-align:center&quot;&gt;正式架构 (amd64/arm64) 适配的稳定版本，经过了全面的测试，具有高度的稳定性和可靠性。&lt;/td&gt; 
   &lt;td style=&quot;vertical-align:center&quot;&gt;适用于日常使用的用户。&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;此次发布的版本为预览 (Preview) 版本，后续的预览（Preview）镜像将基于正式版本和对应设备支持状况进行更新，并不定期发布采用最新不稳定更新、用作测试（Testing）镜像。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;附录：&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;（1）deepin 历史版本镜像（含 deepin V15）：&lt;/strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdistrowatch.com%2Findex.php%3Fdistribution%3Ddeepin&quot; target=&quot;_blank&quot;&gt;https://distrowatch.com/index.php?distribution=deepin&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;（2）deepin-EIC7700X 预览镜像下载：&lt;/strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdownload%2F&quot; target=&quot;_blank&quot;&gt;https://www.deepin.org/zh/download/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;（3）deepin 多架构适配机型清单：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwiki.deepin.org%2Fzh%2F02_%25E7%25A1%25AC%25E4%25BB%25B6wiki%2F01_%25E8%25AE%25BE%25E5%25A4%2587%25E9%2580%2582%25E9%2585%258D%25E5%2588%2597%25E8%25A1%25A8%2Fdeepin%25E5%25A4%259A%25E6%259E%25B6%25E6%259E%2584%25E9%2580%2582%25E9%2585%258D%25E6%259C%25BA%25E5%259E%258B%25E6%25B8%2585%25E5%258D%2595&quot; target=&quot;_blank&quot;&gt;https://wiki.deepin.org/zh/02_%E7%A1%AC%E4%BB%B6wiki/01_%E8%AE%BE%E5%A4%87%E9%80%82%E9%85%8D%E5%88%97%E8%A1%A8/deepin%E5%A4%9A%E6%9E%B6%E6%9E%84%E9%80%82%E9%85%8D%E6%9C%BA%E5%9E%8B%E6%B8%85%E5%8D%95&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/301496</link>
            <guid isPermaLink="false">https://www.oschina.net/news/301496</guid>
            <pubDate>Thu, 11 Jul 2024 02:42:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>开源代码编辑器 Zed 发布原生 Linux 版本</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;Rust 开源代码编辑器 Zed 发布了原生支持 Linux 的版本。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d9ac6475c6b2254e3935253384a5ec2f270.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d7cc4c195c94755db30cdfc718edec9dbfd.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在 Linux 上安装 Zed 的命令：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl https://zed.dev/install.sh | sh&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;据介绍，Linux 上的 Zed 正在使用 Vulkan API 进行 GPU 加速。它同时支持 Wayland 和 X11 会话，到目前为止，Zed 团队开发重心主要集中在 Ubuntu 下的测试。&lt;/p&gt; 
&lt;p&gt;详细信息查看&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzed.dev%2Fblog%2Fzed-on-linux&quot; target=&quot;_blank&quot;&gt;Zed.dev&lt;/a&gt;。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/301481/zed-on-linux</link>
            <guid isPermaLink="false">https://www.oschina.net/news/301481/zed-on-linux</guid>
            <pubDate>Thu, 11 Jul 2024 02:20:38 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>开源日报 | Vitest 2.0；Rust 即将进入前十；通义千问「国服最强」；Linux 终端为什么叫 tty；C 语言实现 WebSocket 协议</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.7.10&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/301339&quot; target=&quot;news&quot;&gt;中文大模型基准测评上半年报告：GPT-4o 排名第一、通义千问「国服最强」&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;中文大模型测评基准 SuperCLUE 发布 2024 上半年报告，披露针对国内外 33 个大模型的综合测评结果。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-687773be9d78978fe93ee3f3cadd966bbb6.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;从代表通用能力的一级总分来看，OpenAI 的 GPT-4o 以 81 分高居榜首，Claude-3.5-Sonnet 与通义千问开源模型 Qwen2-72B-Instruct 并列第二，得分均为 77。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;通义千问 (Qwen2-72B) 既是排名最高的中国大模型，也是全球最强的开源大模型，性能超越文心一言 4.0、讯飞星火 V4.0、Llama-3-70B 等开闭源大模型。&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FGcF-Jw4YUHi1OFlVFaWFPQ&quot; target=&quot;_blank&quot;&gt;&quot;Only Google Can Do&quot;API：只能通过 *.google.com 访问、可读取系统 CPU 和内存使用情况等信息&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Chrome 浏览器存在一个只对谷歌旗下网站公开的 API：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;Google Chrome 允许所有 *.google.com 网站完全访问系统 / 选项卡 CPU 使用情况、GPU 使用情况和内存使用情况。&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;它还可以访问详细的处理器信息，并提供日志记录返回通道。&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;此 API 不会向其他网站公开，仅向 *.google.com 公开。&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-7592d85206dfbb6eefa68d532fed57d6705.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/301281/vitest-2-0-0&quot; target=&quot;news&quot;&gt;Vitest 2.0 正式发布：Vue 团队打造的下一代测试框架&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;7 月 8 日，由 Vue 团队打造的下一代测试框架 Vitest 正式推出 2.0 版本！Vitest 是一个原生支持 Vite 的测试框架。Vitest 以其快速、简洁的测试解决方案而爆火，只需要很少的配置即可上手。由于 Vitest 和 Vite 使用相同的配置文件，因此将 Vitest 集成到 Vue 应用中很简单。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Vitest 于 2021 年 12 月推出，至今已经过去了两年多的时间，其发展速度可谓是非常迅速，目前在 npm 下载量已经达到了每周&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;500w&lt;/strong&gt;，并且还在呈现快速增长的趋势。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-87f706d01d69c3fdc70069303e414ef24a4.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FaJ-1mCeoTqIs_VbrVLnDZg&quot; target=&quot;_blank&quot;&gt;美国加州起草法案——既要把开源管起来，还要「一举两得」限制中国&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;SB-1047 法案，全称为「前沿人工智能安全创新法案（Safe and Secure Innovation for Frontier Artificial Intelligence Act）」，由加州参议员 Scott Wiener 在今年 2 月首次提出。目的是「为大规模人工智能系统的开发和部署设立严格安全标准，以确保其安全性并防止潜在重大危害。」&lt;/p&gt; 
&lt;p&gt;该法案针对超过 10^26 次浮点运算能力（FLOPs）和 1 亿美元训练成本，以及任何基于以上 AI 模型微调的、运算能力不少于 3 倍 10^25 FLOPs 的智能系统。几乎把现在市面所有主流大模型囊括在内。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#245bdb&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/301106/tiobe-index-202407&quot;&gt;TIOBE 7 月榜单：Rust 即将进入 Top 10&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;上月还在 TIOBE 指数中排名第 17 位的&amp;nbsp;Rust，本月已经成功跃升至第 13 位，这也是 Rust 排行的历史新高。TIOBE CEO Paul Jansen 点评称，提升 4 个位置看似变化不大，但其实在过去几年中，Rust 一直属于是 &quot;the talk of the town&quot;，在 TIOBE 指数中并没有取得多大进步。而现在，该语言终于出现了上升的趋势。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;美国政府日前曾表示，出于安全考虑，建议开发者从 C/C++ 转向 Rust。现如今，Rust&amp;nbsp; 社区正在不断壮大，第三方库和工具的数量持续增长。「简而言之，Rust 正在为进入 TIOBE 指数前十名做准备。」&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;TIOBE 7 月 TOP 20 编程语言&lt;/strong&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-bbbd3f6cae0a60cd3e62c366bd9e52e84af.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#245bdb&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/301103/ms-china-staff-to-switch-from-android-phones-to-iphones-for-work&quot;&gt;微软中国员工禁用 Android 手机工作：只能用 iPhone&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2024-07-08%2Fmicrosoft-orders-china-staff-to-switch-from-android-phones-to-iphones-for-work&quot; target=&quot;_blank&quot;&gt;据彭博社报道&lt;/a&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;，微软向中国团队发出通知，宣布自今年 9 月起，&lt;/span&gt;&lt;strong&gt;员工在处理工作任务时，将被限定使用苹果公司的 iPhone 作为指定设备，安卓平台的智能手机将不再被允许用于工作相关的活动&lt;/strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;。这一规定将影响数百名员工，公司将为受影响的员工每人发放一部 iPhone 15。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-6ae494c4ed9e91597eef1405bd93ffe3fb2.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6105753431%2FOmUFfCezM&quot; target=&quot;_blank&quot;&gt;C 语言实现 WebSocket 协议&lt;/a&gt;&lt;/h4&gt; 
  &lt;p&gt;硬核网友用 C 语言从 0 编写了一个 WebSocket 服务器！他正在用 C 语言写一个浏览器游戏，WebSocket 服务器是这个项目的一部分。&lt;/p&gt; 
  &lt;p&gt;WebSocket 是一种实时技术，可在客户端和服务器之间通过持久的单套接字连接实现双向、全双工通信。&lt;/p&gt; 
  &lt;p&gt;实现一个 WebSocket 服务器大致包括：&lt;br&gt; - 处理握手请求（即 WebSockets 中的「Web」），包括客户端握手请求、服务端握手相应和追踪客户等。&lt;br&gt; - 交换数据帧，包括读取并解密数据、消息切片等。&lt;br&gt; - 发送 Pings 和 Pongs。&lt;br&gt; - 关闭连接。&lt;/p&gt; 
  &lt;p&gt;该网友不久前也用 C 语言写了 HTTP 协议，感兴趣的朋友可以在他的油管频道查看更多相关内容。&lt;/p&gt; 
  &lt;p&gt;视频：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Drc_zVASAajU&quot; target=&quot;_blank&quot;&gt;https://www.youtube.com/watch?v=rc_zVASAajU&lt;/a&gt;&lt;br&gt; 代码：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FBixkitts%2Frelic-mercs-game&quot; target=&quot;_blank&quot;&gt;https://github.com/Bixkitts/relic-mercs-game&lt;/a&gt;&lt;/p&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博 &lt;strong&gt;量子位&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1233486457%2FOmCkKhulo&quot; target=&quot;_blank&quot;&gt;黄仁勋谈人工智能为生命科学带来什么&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    黄仁勋强调了我们正处于一个计算革命的时代：&quot;我们创造了这种叫做加速计算的东西。在此基础上，还有一个新的计算模型叫做生成式 AI。它正在彻底改变一切。软件的编写方式、处理方式，我们可以编写的软件类型，以及我们首次能够解决的问题类型，都发生了彻底的革命。&quot;
   &lt;/div&gt; 
   &lt;div&gt;
    &amp;nbsp;
   &lt;/div&gt; 
   &lt;div&gt;
    他指出，这是自他出生后的第二年 IBM 宣布 System 360 以来，这是计算机架构 60 年来的首次重大变革。这种变革不仅影响了计算机科学，还正在改变每个行业，为解决复杂问题提供了新的可能性。
   &lt;/div&gt; 
   &lt;div&gt;
    &amp;nbsp;
   &lt;/div&gt; 
   &lt;div&gt;
    他再次强调了，英伟达要专注于算法和计算能力，而与具有领域专业知识的公司（如 Recursion）合作的重要性。这种跨行业合作模式使得各方都能发挥自己的优势，共同推动创新。
   &lt;/div&gt; 
   &lt;div&gt;
    &amp;nbsp;
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div style=&quot;text-align:right&quot;&gt;
   - 微博&amp;nbsp; 
   &lt;strong&gt;高飞&lt;/strong&gt;
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F3223086795%2FOmECstgxo&quot; target=&quot;_blank&quot;&gt;面向高能物理的人工智能系统——「赛博士「（Dr. Sai）正式上线&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;面向高能物理的人工智能系统——「赛博士「（Dr. Sai）——正式上线，这是国际高能物理领域的首个大型人工智能系统，入口为&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdrsai.ihep.ac.cn%2F&quot; target=&quot;_blank&quot;&gt;https://drsai.ihep.ac.cn/&lt;/a&gt;。&lt;/p&gt; 
     &lt;p&gt;2023 年 7 月以来，在中国科学院高能物理研究所「从 0 到 1」项目的支持下，计算中心和实验物理中心联手打造了&quot;赛博士&quot;（Dr. Sai）AI 智能体，旨在使其高度智能化和自动化地完成文献调研、程序编写、事例产生、事例分析、结果解释和文章撰写等任务，将科学家从创新性要求较低的例行工作中解放出来。项目第一阶段聚焦我国首个科学装置——北京正负电子学对撞机上的北京谱仪 III（BESIII）——的数据分析。&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博 &lt;strong&gt;曹俊 IHEP&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1741533154%2FOmDJcuWIL&quot; target=&quot;_blank&quot;&gt;电脑上的 Wi-Fi 网卡也是一个小电脑，对隐私和安全至关重要&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     &lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;便宜的 Wi-Fi4 芯片价格甚至可以低至 1 美元以下，但这并不意味着它简单，相反，它就像你每天用的电脑一般复杂。里面有主 cpu，实时控制」外设」，高算力 dsp」外设」，以及各种 MCU。&lt;/span&gt;
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;spaceshuttle&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1834645454%2FOmC6nqeyx&quot; target=&quot;_blank&quot;&gt;你知道 Linux 终端为什么叫 tty 吗&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;ul&gt; 
      &lt;li&gt;了解电传打字机的历史，从 19 世纪开始，它如何演变成今日计算技术的基础。&lt;/li&gt; 
      &lt;li&gt;探索 `tty` 命令如何显示你正在使用的终端名称，及其在现代操作系统中的应用。&lt;/li&gt; 
      &lt;li&gt;发现 Telex 网络如何使电传打字机在全球范围内传送消息，并推动全球通信的进步。&lt;/li&gt; 
      &lt;li&gt;深入电传打字机如何转变为现代计算机终端的核心技术，包括硬件模拟与软件模拟的演变。&lt;/li&gt; 
     &lt;/ul&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;dingtingli&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ft.cj.sina.com.cn%2Farticles%2Fview%2F1663612603%2F6328b6bb02001ktji&quot; target=&quot;_blank&quot;&gt;汽车智能化愈发复杂，基础软件开源引热议&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;虽然软件驱动汽车打开了增收的大门，但基于旧模式的汽车架构和供应链阻碍了进步。「每家汽车制造商都有自己的架构平台，但平台供应商平均有 250 到 300 家。」埃伦威格坦言，在许多情况下，供应商为每个电子元件创建特定的基础软件。&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;-&amp;nbsp;&lt;strong&gt;中国经济网&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F36kr.com%2Fp%2F2856256438455171&quot; target=&quot;_blank&quot;&gt;Claude 编程支持一键共享，第一批网友已经开始晒作品了&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;Claude 3.5 上新的「工坊模式」（Artifacts）再次更新，写完的网页应用支持一键分享了！不用自建服务器，不用部署后台程序，点一下就能自动获得链接。&lt;/p&gt; 
 &lt;p&gt;而且被分享的应用还能一键导入自己的对话，分分钟魔改个新版本出来。&lt;/p&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6105d5ac074d5ee3ee0368008c28b3b7ca3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;- &lt;strong&gt;量子位&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fm.huxiu.com%2Farticle%2F3225968.html&quot; target=&quot;_blank&quot;&gt;所谓 AI 革命，到现在为止，是能源的一场「灾难」&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;就在谷歌摩拳擦掌准备与 OpenAI 一较高下时，前几天其发布的一份报告却引来了媒体的「担忧」——谷歌最新发布的环境报告指出，自 2019 年以来，其温室气体总排放量增长了 48%。&lt;/p&gt; 
 &lt;p&gt;仅去年一年谷歌就产生了 1430 万吨二氧化碳，同比 2022 年增长 13%，主要由于来自范围 2 的碳排放同比增长 37%。&lt;/p&gt; 
 &lt;p&gt;这些数据显然与谷歌「2030 年实现零排放」的目标南辕北辙了，作为全球最大的互联网科技巨头之一，如此「奔放」的碳排放数据显然会为其招来各种非议。&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;- &lt;strong&gt;虎嗅&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwap.peopleapp.com%2Farticle%2F7482842%2F0&quot; target=&quot;_blank&quot;&gt;新技术赋能千行百业（经济聚焦）&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#4d4f53; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#2f2f2f&quot;&gt;人工智能技术不断突破，在助推经济社会发展的同时，也带来深度伪造、隐私泄露、知识产权争议等诸多风险挑战。图灵奖得主、中国科学院院士姚期智认为，人工智能风险体现在网络风险延伸和扩大、没有意识到的社会风险等方面。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;人民&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;日报&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F3g.k.sohu.com%2Ft%2Fn804280545&quot; target=&quot;_blank&quot;&gt;OpenAI 这个盘，阿里云们能接得住吗？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;这些新老厂商们有着自己的底气。如果说发展早期，国内厂商许多「套壳」OpenAI，将技术化为己用，甚至大厂都有过这样的传闻，那么经过发展，当下国内厂商已经具备了独立自主的实力。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;一点财经&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mrjjxw.com%2Farticles%2F2024-07-08%2F3458762.html&quot; target=&quot;_blank&quot;&gt;进击的快手：从对标 Sora 到大模型「全家桶」 AI 能更好打破内容、商业的互搏吗？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#030303; margin-left:0; margin-right:0; text-align:justify&quot;&gt;快手所搭建的大模型矩阵覆盖了从内容生成到商业化运营等方方面面。作为短视频平台的快手一方面通过 AI 技术，降低内容生产门槛，提高内容生产效率；另一方面，也积极地将 AI 技术运用于其电商业务中，帮助商家实现智能化经营，实现其商业化目标。&lt;/p&gt; 
 &lt;p style=&quot;color:#030303; margin-left:0; margin-right:0; text-align:justify&quot;&gt;但在有限的注意力资源下，内容和商业之间不可避免地存在「互搏」，快手想用 AI 让它们「化敌为友」。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;每日经济新闻&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkandianshare.html5.qq.com%2Fv2%2Fnews%2F8263209746968144194&quot; target=&quot;_blank&quot;&gt;人形机器人，应该要「脸」吗？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;显而易见，脸几乎是作为的人最重要的特征。以至于当元宇宙热潮来临，人们需要从一个世界进入一个世界时，要做的第一件事，也是给自己捏一张「脸」。但一个有意思的现象是，在人形机器人蓬勃发展的当下，这个致力于模仿人类形象的事物，却几乎从来没有被认真讨论过它的脸应该长成什么样。&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;人形机器人不需要脸吗？还是说当前的技术条件，这个话题还不应该被讨论？如果一定要给机器人一张脸的话，这张脸又应该怎么做？&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;产业象限&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F3g.k.sohu.com%2Ft%2Fn804322266&quot; target=&quot;_blank&quot;&gt;WAIC 观察丨人工智能规模化边界，商业化挑战几何？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;从「ChatGPT 时刻」到「百模大战」，人工智能的破圈能力与商业潜力已经得到了充分的证明。而今天，业界对人工智能的讨论，也已经从简单 AI 的发展路径与商业模式，开始向更深层次的问题与症结进行探索。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;21 世纪经济报道&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.cn%2Farticle_6105753431_16bee67570190171wo.html&quot; target=&quot;_blank&quot;&gt;混元单日调用 tokens 达千亿后，腾讯大模型战略露出全貌&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;大模型之争，到了不只是拼技术的时刻。最新的行业风向是：谁能大范围应用落地？谁能笑到最后？谁能真正产生价值？&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;对大模型行业玩家的评判标准也不再只看技术。战略布局、落地进展、未来判断……成为了更被重视的维度。无论「杨植麟们」还是大厂高管，公开探讨大模型的频率越来越高，包括一直低调的腾讯。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;量子位&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnew.qq.com%2Frain%2Fa%2F20240708A08AAF00&quot; target=&quot;_blank&quot;&gt;「赛道」拥挤，大模型热潮正在消散？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;时代热潮来得快，去得也快，如今一些大模型企业开启了「撤退行动」。在美国，Stability AI、Adept、Reka AI 等「明星」企业正在寻求出售；在中国，仅有 40% 大模型完成了在工信部备案，其他众多模型则难觅踪影。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;- &lt;/span&gt;&lt;strong&gt;通信世界&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://gitee.com/Jmysy/rudis&quot; target=&quot;_blank&quot;&gt;Jmysy/rudis&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;185&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-999adec208347d57bb468a283ca4bc15b8e.png&quot; width=&quot;200&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://gitee.com/Jmysy/rudis&quot;&gt;https://gitee.com/Jmysy/rudis&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;Rudis 是采用 Rust 语言开发的项目，旨在利用 Rust 语言的优势来重新实现 Redis 的核心功能，以满足用户对高性能、可靠性和安全性的需求，同时保持与 Redis API 的兼容。&lt;/span&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/u/4662964/blog/11421986&quot; target=&quot;_blank&quot;&gt;ODPS 开发大全：入门篇&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;本文旨在收集整理 ODPS 开发中入门及进阶级知识，尽可能涵盖大多 ODPS 开发问题，成为一本 mini 百科全书，后续也会持续更新。希望通过笔者的梳理和理解，帮助刚接触 ODPS 开发的同学快速上手。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img height=&quot;366&quot; src=&quot;https://oscimg.oschina.net/oscnet/86432241-6808-4fce-83a3-b8dc249c7a3a.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FqjAVoQNwR4W2chAilYSc9A&quot; target=&quot;_blank&quot;&gt;微软中国员工被禁止使用 Android 手机工作：只能用 iPhone&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：这事在微软都吵翻了，有人买个便宜安卓当工作机的发了 iPhone，有人觉得安卓不方便，花了一万多刚买了 iPhone pro max 当主力机的反而要自费&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：工作机免费送，可以了。又不限制你生活手机使用。工作机软件环境有要求，再说了，员工也不多，能有什么影响，一个工作机可算不上什么抵制和制裁&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：为什么不用微软手机呢？是因为没有么？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：公司为受影响的员工每人发一台 iPhone15，那我还能说啥&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：太正常了，现在 ms 的账户都要绑定 authenticator，国内的安卓机器不用特殊手段都用不了，要么就是换 iphone 要么用硬件令牌&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：啊，为什么我在 oppo 的软件商店能搜到并安装 authenticator?&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：包含基础 gms 框架的是可以用的，但网络原因，你不手动打开是接收不到验证推送的&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：发一台苹果有这样的要求不过分，用安卓自己生活用。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：公司发手机这可太良心了，不像某些体制内不让你用苹果又不给发华为逼你自己花钱买，买华为的手机壳&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：友情提示，微软是有过自己的 windows 系统手机的，这次算是彻底向苹果举白旗投降了吧&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 11：authenticator 不就是实现了一个共享 key 来生成动态密码的软件吗？根本不依赖 GMS 吧？安卓本身的安全性才是问题吧？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 12：发了那还行。全球未来信息战略明显是要绑定果子和谷歌那一套了，另一种意义上也算是针对种花家了。 巨硬知道自己在国内名声不好，直接摆烂了，活该被骂。&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 13：有没有可能，我说是可能哈。国内的安卓都是阉割掉基础谷歌框架和服务的，这些装了魔改 os 的安卓国产机没法接收公司内部的一些验证服务推送，才被迫选择了苹果？都是成年人了，应该有能力思考下，真的是啥问题都是外面势力有意针对吗？&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 14：不是哥们，微软跟谷歌什么仇什么怨非得禁用 Android？（智慧的眼神.jpg）&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 15：没 GMS 是借口，本质还是不想适配国内的手机系统，等鸿蒙 Next 出来，看微软拥抱不拥抱就知道了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 16：就是个简单的经济问题，受影响的只有几百个员工，为这几百个员工，在国内各个平台长期维护一套应用的成本，要远高于直接给这些人配一台新手机。&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FaJ-1mCeoTqIs_VbrVLnDZg&quot; target=&quot;_blank&quot;&gt;美国加州起草法案——既要把开源管起来，还要「一举两得」限制中国&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：哈哈哈，我倒是想看看通过了会怎么样，企业屏蔽加州 IP 吗&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：这个话题，我认为是有前车之鉴可以遵循的。就是电脑病毒和杀毒软件。法律以非常粗略的框架说明了什么该做什么不该做。由杀毒软件公司生产的杀毒软件作为执法者，在技术层面与电脑病毒对抗，保护用户。这样避免了在法律层面引入太多技术概念，又在经济层面创造了价值，使安全成为有利可图的领域。 恶意不会消亡的，法律无法控制思想和不遵守法律的人。应该鼓励一些人去在安全领域获得收益，对冲恶意的成本。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：果然是 SB 法案&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：该法案表达的思想遥遥领先，能通过该多好啊&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：开源精神呢&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：因为 OSI 还没有发布正式的开源大模型定义，所以实际大模型领域还没有法律意义上的「开源」概念，也就没法复用之前对开源软件的保护法条、判例。中国开源年会的主办方开源社作为中国大陆首个 OSI 成员协会，已经提交了中国在开源大模型领域的修订意见，相信很快正式版本就会发布。&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：对程序员是利好&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Ff63w-6gUQdOERiq576btiQ&quot; target=&quot;_blank&quot;&gt;去哪儿正式推行「3+2」混合办公模式，员工每周有 2 天可自主选择办公地点&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：每周有四天要考虑「去哪儿」。将旅行办公模式发扬光大&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：我要做一款 app，去哪儿办公&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/301392</link>
            <guid isPermaLink="false">https://www.oschina.net/news/301392</guid>
            <pubDate>Wed, 10 Jul 2024 10:37:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>腾讯开源 tlbs-map 地图组件库</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;腾讯宣布开源 tlbs-map，一个基于腾讯位置服务地图 API 开发的 web 端地图组件库，支持在网页绘制地图并在地图上绘制点、线、面、热力图等效果，支持 Vue2、Vue3、React 等业界主流技术栈，旨在帮助开发者低成本开发地图业务。&lt;/p&gt; 
&lt;p&gt;腾讯位置服务地图 API：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flbs.qq.com%2FwebApi%2FjavascriptGL%2FglGuide%2FglOverview&quot; target=&quot;_blank&quot;&gt;https://lbs.qq.com/webApi/javascriptGL/glGuide/glOverview&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;263&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-98a32525f71425c67235df807a7c0ff3f0b.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;特性优势&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;降低使用门槛，提升开发效率：封装腾讯地图 API 为响应式组件，无需关心复杂的地图 API，只需要操作数据即可&lt;/li&gt; 
 &lt;li&gt;兼容前端主流框架：tlbs-map 支持最流行的 2 个前端框架 Vue 框架和 React 框架，并且做到了一套代码兼容 Vue2、Vue3 版本的前端项目&lt;/li&gt; 
 &lt;li&gt;提升可扩展性：组件提供地图和图层实例，用户可编写自定义组件或直接调用地图 API 满足定制化需求&lt;/li&gt; 
 &lt;li&gt;详尽的文档示例：提供了详尽的组件使用文档和示例代码，可以轻松上手，快速开发&lt;/li&gt; 
 &lt;li&gt;提供丰富的地图组件: 已上线基础地图、点、线、面等 10 个常用组件，助力开发者低成本开发地图业务&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;开源规划&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;提供更多实用的地图组件&lt;/li&gt; 
 &lt;li&gt;组件能够兼容 Vue2、Vue3 框架使用&lt;/li&gt; 
 &lt;li&gt;完善单元测试，保证组件更加可靠&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;项目地址：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Vue 组件库：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTencent%2Ftlbs-map-vue&quot; target=&quot;_blank&quot;&gt;https://github.com/Tencent/tlbs-map-vue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;React 组件库：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTencent%2Ftlbs-map-react&quot; target=&quot;_blank&quot;&gt;https://github.com/Tencent/tlbs-map-react&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/301674</link>
            <guid isPermaLink="false">https://www.oschina.net/news/301674</guid>
            <author>来源: 投稿</author>
        </item>
    </channel>
</rss>