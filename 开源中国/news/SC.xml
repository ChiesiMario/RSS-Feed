<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 简体中文</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 23 Jul 2025 21:43:01 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>Anthropic 为 Claude 开发「学习」功能，争夺 AI 教育市场</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Anthropic 正在为 Claude&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.testingcatalog.com%2Fanthropic-develops-interactive-study-projects-to-turn-claude-into-a-tutor%2F" target="_blank"&gt;开发「&lt;/a&gt;学习项目」 (Study Projects) 功能，旨在将其从问答工具转变为能提供结构化学习流程的 AI 导师，以争夺教育市场。&lt;/p&gt; 
&lt;p&gt;该功能主要面向学生用户，旨在帮助学生构建结构化的学习流程，而不仅仅是提供直接答案。用户创建「学习项目」后，可以随时调整其中的指令，使其成为一个持续的学习工作空间。&lt;/p&gt; 
&lt;p&gt;Claude 将通过该功能帮助用户将概念可视化、生成详细的学习指南，并提供能根据用户目标和学习材料进行自适应调整的辅导。&lt;/p&gt; 
&lt;p&gt;&lt;img height="558" src="https://static.oschina.net/uploads/space/2025/0723/193813_YuHt_2720166.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;此举被视为 Anthropic 将 Claude 从一个被动的问答工具转变为主动的教育助手的尝试。这一动向与 OpenAI 的 Study Together 和 Google 的 Guided Learning 等项目相呼应，显示出头部 AI 公司正在激烈争夺教育市场。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361983</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361983</guid>
      <pubDate>Wed, 16 Jul 2025 11:39:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>谷歌 Gemini 增加 Imagen 选项并开放 llms.txt</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;谷歌为其 AI 服务 Gemini 进行了&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fm4rkmc%2Fstatus%2F1946101080464785756"&gt;一系列更新&lt;/a&gt;，用户可直接选择 Imagen 模型生成图像，并启用了 llms.txt 文件，方便 AI Agent 获取最新的 API 和 SDK 使用方法。&lt;/p&gt; 
&lt;p&gt;具体来说，用户现在可以在 Gemini 界面中直接看到并选择 Imagen 模型进行图像生成。此外，Google 在 Gemini&amp;nbsp;API 文档网站&amp;nbsp;ai.google.dev&amp;nbsp;上启用了&amp;nbsp;llms.txt&amp;nbsp;文件。这是一个为 AI 模型和代码 Agent 设计的机器可读文档，遵循 MCP（Model-Consumable Patois）规范。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0723/191929_xMah_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;开发者可以让其 AI Agent 通过访问&amp;nbsp;ai.google.dev/gemini-api/docs/llms.txt&amp;nbsp;来获取最新的 API 和 SDK 最佳实践，从而更高效地构建应用。该功能也可以通过 Gemini CLI 的扩展来使用。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361980</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361980</guid>
      <pubDate>Wed, 16 Jul 2025 11:22:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>谷歌发布「OSS Rebuild」应对开源软件供应链安全问题</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;为应对开源软件供应链安全问题，谷歌&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsecurity.googleblog.com%2F2025%2F07%2Fintroducing-oss-rebuild-open-source.html"&gt;宣布&lt;/a&gt;推出&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgoogle%2Foss-rebuild"&gt;OSS Rebuild&lt;/a&gt;&amp;nbsp;开源工具，&lt;strong&gt;帮助开发者通过重现构建过程验证开源软件包的完整性&lt;/strong&gt;，防范恶意篡改风险。&lt;/p&gt; 
&lt;p&gt;公告写道：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;开源软件已成为我们数字世界的基础。从关键基础设施到日常应用，OSS 组件现在占现代应用的 77%。据估计，其价值超过 12 万亿美元，开源软件从未如此成为全球经济的重要组成部分。&lt;/p&gt; 
 &lt;p&gt;OSS Rebuild 是一个通过重现上游软件构建过程来增强对开源软件包生态系统信任的新项目。随着供应链攻击继续针对广泛使用的依赖项，OSS Rebuild 为安全团队提供了强大的数据，以避免妥协，同时不对上游维护者造成负担。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;OSS Rebuild 可自动生成符合 SLSA Build Level 3 标准的可验证记录，无需维护者额外投入。该工具能帮助安全团队检测未经验证的代码、被入侵的构建环境及潜在后门，同时增强元数据并优化漏洞响应效率。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0723/191029_Pte1_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;目前，OSS Rebuild 支持 PyPI、npm 和 Crates.io 生态，未来将扩展至更多平台。开发者可通过命令行获取构建来源信息并验证软件包。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361977/google-oss-rebuild-open-source</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361977/google-oss-rebuild-open-source</guid>
      <pubDate>Wed, 16 Jul 2025 11:11:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>欧盟考虑设立巨额基金来解决开源软件的「静默危机」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;开源软件 (OSS) 的使用范围极其广泛。Google 最近表示，OSS 占软件总量的 77%，市值超过 12 万亿美元。尽管如此，OSS 的维护资金严重不足，许多项目依赖于无薪或报酬过低的独立维护人员，导致维护人员倦怠和安全风险。&lt;/p&gt; 
&lt;p&gt;为此 Google 发布了&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgoogle%2Foss-rebuild" target="_blank"&gt; OSS Rebuild 项目&lt;/a&gt;，试图解决这一问题，但 GitHub 希望获得欧盟主权科技基金 (EU-STF) 的更多资助。&lt;/p&gt; 
&lt;p&gt;该基金不会用于所有的开源项目；它将用于缺乏专项资金的广泛使用的组件，以便它们能够获得持续的维护和安全。&lt;/p&gt; 
&lt;p&gt;作为 GitHub 提案的一部分，其开发者政策团队委托了一项研究，以调查欧洲主权科技基金 (EU-STF)。这家微软旗下的公司表示，欧盟可以效仿德国主权科技机构，该机构在成立后的头两年内已成功向 60 个开源软件项目投资了超过 2300 万欧元。&lt;/p&gt; 
&lt;p&gt;GitHub 设想，欧盟标准与技术信托基金 (EU-STF) 将专注于识别关键依赖关系，并进行投资以确保持续维护、安全、改进以及强化更广泛的开源软件生态系统。如果您想知道这一切需要多少成本，GitHub 提议从欧盟即将到来的多年期预算（2028-2035 年）中至少拨出 3.5 亿欧元。GitHub &lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.neowin.net%2Fnews%2Feurope-considers-a-massive-fund-to-fix-open-source-softwares-silent-crisis%2F" target="_blank"&gt;表示&lt;/a&gt;&lt;/u&gt;：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「这不足以满足开源维护需求，但它可以成为利用行业和国家政府共同融资的基础，从而产生持久的影响。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;GitHub 研究概述了 EU-STF 的以下七个关键设计标准：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;集中融资：工业界、各国政府和欧盟应向单一基金提供资金。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;官僚主义程度低：申请流程简单，维护人员的报告最少。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;政治独立性：避免根据政治趋势改变优先事项，专注于基础技术。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;灵活的资金：支持个人、非营利组织和公司，无论其是否居住在欧盟，只要其工作有利于欧盟。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;社区重点：与开源社区合作确定优先事项。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;战略一致性：对欧盟战略目标（经济、数字主权、网络安全）产生积极影响。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;透明度：治理和资金决策的高标准。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;GitHub 和微软提出的这项提案恰逢其时，恰逢欧盟 2028-2035 年新预算的谈判。该公司还与欧盟立法者和行业合作伙伴合作，倡导该基金，确保他们了解不提供资金的益处和风险。该公司还呼吁个人、开源软件组织和公司表达对欧盟机构的支持。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361975</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361975</guid>
      <pubDate>Wed, 16 Jul 2025 11:02:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>周鸿祎：大模型降低攻击门槛，人人皆可「注入攻击」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;在 2025 中国互联网大会上，当被问及大模型在落地应用过程中可能存在的风险时，&lt;strong&gt;360 集团创始人周鸿祎&lt;/strong&gt;深入剖析了人工智能时代下网络安全面临的全新挑战。他指出，相较于传统的 IT 系统漏洞和数据隐私泄露问题，大模型带来的三大安全风险更应引起高度警惕。&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0px; margin-right:0px; text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;核心风险一：大模型的「幻觉」与胡言乱语&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;周鸿祎强调，&lt;strong&gt;大模型固有的「幻觉」问题&lt;/strong&gt;是其最大的风险之一。他解释说，当大模型遇到不理解的事物时，会一本正经地编造信息。虽然这在娱乐场景中尚可一笑置之，但当大模型及其衍生的智能体开始深入工业生产、制造以及政府办公等关键领域时，这种「出错」将可能导致严重后果。他特别指出，一旦智能体具备了操纵各种工具的能力，其错误判断的危害和影响将成倍放大。&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0px; margin-right:0px; text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;核心风险二：大模型降低攻击门槛，人人皆可「注入攻击」&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;周鸿祎提出的第二个风险是，大模型极大地&lt;strong&gt;降低了网络攻击的门槛&lt;/strong&gt;。他指出，大模型使得非编程专业人员也能通过简单的自然语言交互来编写程序，这同时也意味着攻击大模型的门槛也随之降低。通过精心构造的指令，攻击者可以诱导大模型泄露企业机密文件，这种现象被称为「注入攻击」。周鸿祎形象地表示，未来甚至一个不具备编程知识的前台员工，都可能因为不满而对公司的大模型和智能体发动攻击。&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0px; margin-right:0px; text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;核心风险三：国家级高级威胁攻击的智能化升级&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;从更宏观的未来视角来看，周鸿祎指出，大模型将使&lt;strong&gt;国家级高级威胁攻击&lt;/strong&gt;变得更加普遍和复杂。过去，针对我国的网络黑客数量相对较少，但现在，黑客正尝试将自身的能力和经验嵌入大模型，把自己打造成「黑客智能体」。在拥有足够算力支持的情况下，一个黑客可以同时操纵数十甚至数百个智能体，这将彻底颠覆传统的网络攻防格局，使网络安全从「人与人」的对抗，转变为「人与算法、人与机器、人与算力」的对抗，因为机器人数字黑客只需要算力，不需要休息。&lt;/span&gt;&lt;/p&gt; 
&lt;h4 style="margin-left:0px; margin-right:0px; text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;360 的应对策略：「以算法对抗算法」&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;面对这些严峻挑战，周鸿祎表示，360 已着手采取两项关键措施来应对。首先，360 正在积极&lt;strong&gt;打造智能体安全专家&lt;/strong&gt;。这些专家能够帮助企业在面对攻击时，实现实时检测和实时防御，从而真正做到「以算法对抗算法」。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;其次，针对大模型的安全性和易受攻击性，360 开发了专门的「大模型衞士」。这是一款专业的大模型和智能体，其主要功能是监控发送给大模型的指令，并评估大模型输出内容的合理性和准确性。此外，结合强大的搜索能力和企业知识库，该衞士还能最大限度地降低大模型的「幻觉」问题。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361972</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361972</guid>
      <pubDate>Wed, 16 Jul 2025 10:25:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>OpenAI 神秘新模型 o3-alpha 现身 Web Arena 平台</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;OpenAI 正在测试名为「o3-alpha-responses-2025-07-17」（公开代号为「anonymous-chatbot-0717」）的新模型，该模型于 2025 年 7 月 17 日在 WebDev Arena（一个前端开发测试竞技场）短暂测试后下架 。&lt;/p&gt; 
&lt;p&gt;&lt;img height="317" src="https://static.oschina.net/uploads/space/2025/0723/182113_kPXe_2720166.png" width="640" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;测试显示，o3-alpha 在网页设计、前端代码生成（如使用 Three.js 创建程序化星球、生成 Doodle Jump 等网页游戏）以及复杂游戏（如 Minecraft 和 GTA 克隆版）开发方面表现突出，远胜于 OpenAI 的 o3、GPT-4.1-2025-04-14，以及 Claude Sonnet、Gemini 2.5 Pro 和 Grok 4 等竞品。&lt;/p&gt; 
&lt;p&gt;&lt;img height="485" src="https://static.oschina.net/uploads/space/2025/0723/182350_3blA_2720166.png" width="1000" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0723/182502_hLOf_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;此外，有猜测称该模型可能与近期在东京 AtCoder 启发式编程世界杯总决赛中获得亚军的模型有关，但 OpenAI 未官方确认。&lt;/p&gt; 
&lt;p&gt;目前，该模型既非 OpenAI 计划开源的模型，也非传闻中的 o4（官方称 o4 不存在），可能是 o3 的重大升级版或 GPT-5 的前期技术验证，但无官方背书。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361971</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361971</guid>
      <pubDate>Wed, 16 Jul 2025 10:25:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>模力方舟万模破浪，开源中国获授北京国际开源社区「2025 年首批开源先锋企业」称号</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;7 月 23 日至 24 日，&lt;strong&gt;2025 开放原子开源生态大会&lt;/strong&gt;在北京国家会议中心二期盛大召开。本届大会以「开源赋能产业，生态共筑未来」为主题，汇聚政、产、学、研、用、金、创、投等各领域开源力量，聚焦开源政策导向、生态发展趋势，及开源产业实践。&lt;/p&gt; 
&lt;p&gt;在首日的开幕式上，由工业和信息化部、北京市人民政府共同指导，北京市经济和信息化局与经济技术开发区积极推动建设，开放原子开源基金会为基础的&lt;strong&gt;北京国际开源社区&lt;/strong&gt;为大家重点分享了近年来在开源生态建设上的成果，并对在推动开源技术创新和产业深度融合方面做出杰出贡献的入驻社区企业，授予首批「开源先锋企业」称号。&lt;/p&gt; 
&lt;p&gt;&lt;img height="720" src="https://static.oschina.net/uploads/space/2025/0723/173716_tnIJ_2720166.png" width="1083" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;作为国内开源领域的重要参与者与推动者，&lt;span style="color:#2980b9"&gt;&lt;strong&gt;开源中国获授北京国际开源社区「 2025 年首批开源先锋企业」称号&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt; 
&lt;p&gt;一直以来，开源中国致力于为开发者搭建高效的开源协作平台，汇聚全球优质开源资源，助力国内企业在开源技术创新上不断突破。未来，开源中国还将与社会各界加强联动，一方面通过自身平台优势挖掘并推广优秀开源项目，并结合自身模力方舟与 Gitee 平台的发展，加速 AI 应用创新，赋能企业研发效能增长；另一方面联合各方共同完善开源人才培养体系，提升国内开源与 AI 生态的整体活力，为中国开源与 AI 产业的高质量发展注入新动能。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0723/173753_O1BX_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;而在随后的圆桌论坛环节，&lt;strong&gt;开源中国董事长马越&lt;/strong&gt;结合开源中国多年深耕行业的实践经验，就目前中国开源人工智能生态建设展开了深刻分享。&lt;/p&gt; 
&lt;p&gt;在探讨如何构建既保持开放共享精神，又具备长期可持续发展的开源人工智能生态系统时，马越表示，&lt;strong&gt;开源在过去几十年已发展成一种公平且良性的模式&lt;/strong&gt;，但当下存在一个现象，即人们过多强调开源的 「公益属性」，却忽视了其残酷的 「商业竞争」。开源的竞争是残酷的，并非将代码放在 Gitee、GitHub 上就会受到关注，只有像麒麟、鸿蒙这样足够优秀的开源项目，才能引发广泛关注。而人工智能时代亦是如此，例如 DeepSeek 的迅速出圈，正是因其足够出色，才出现美国一边抵制、一边吹捧的情况。&lt;/p&gt; 
&lt;p&gt;有没有什么心态能保障开源的可持续发展呢？马越表示，开源必然是国际化的，但贸易战也客观存在，在当前美国资本退潮的背景下，「实干」 才是根本。过去 12 年里，开源中国凭借其工程能力与不懈努力，在 Gitee 平台上已汇聚了超过 1350 万开发者、36 万企业、2000 所高校，深度赋能国内研发效能提升与开源创新。而在如今的人工智能时代，开源中国推出的模力方舟平台，同样延续着这份「实干」基因，提供模型体验、推理、微调和应用的一站式服务，帮助企业和开发者更容易地开发 AI 应用。&lt;/p&gt; 
&lt;p&gt;马越提到：「&lt;strong&gt;开发者对 HuggingFace 的依赖，某种程度上是对其背后云计算资源的依赖。&lt;/strong&gt;」但中国不可能在人工智能时代依赖于英伟达，必须走独立自主可控的道路。所以，模力方舟自上线起，就陆续支持天数智芯、沐曦、升腾、燧原、壁仞等国产算力，并适配相关模型，其背后的工程量是极为庞大的。&lt;/p&gt; 
&lt;p&gt;而对于 HuggingFace 的商业模式，马越做出了自己的判断：HuggingFace 的商业模式在中国无法复现。一方面，HuggingFace 是 ToB 的 SaaS 模式，在过去 20 年里，已无数次见证了这一模式的薄弱性；另一方面，HuggingFace 的很多付费用户一年不寻求业务服务却依旧会续费的付费文化，在中国同样难以实现。但马越坚定认为，只要是开发者需要，开源中国就会咬牙闯出一条路来。&lt;/p&gt; 
&lt;p&gt;最后，马越对人工智能时代的未来发展送上寄语：「技术会不断迭代、创新，但开源精神永远不变。在人工智能这个波澜壮阔的大时代来临之际，希望开源的力量能加持每个人。」&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361959</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361959</guid>
      <pubDate>Wed, 16 Jul 2025 09:38:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>月之暗面更新 Kimi K2 模型聊天模板，优化工具调用</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;月之暗面（Moonshot AI）&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fmoonshotai%2FKimi-K2-Instruct%2Fdiscussions%2F28" target="_blank"&gt;更新了&lt;/a&gt;Kimi K2 模型的聊天模板，通过修改系统提示和参数处理方式，提升了工具调用的稳定性和可靠性。&lt;/p&gt; 
&lt;p&gt;具体变更包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;更新了默认的系统提示；&lt;/li&gt; 
 &lt;li&gt;在多轮工具调用中，强制使用模型返回的 tool_id 以提高可靠性；&lt;/li&gt; 
 &lt;li&gt;当工具调用的 arguments 参数本身已是字符串时，不再对其应用 tojson 函数。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;官方同时指出一个已知问题：当 tool_choice 不等于 auto 时，vLLM 的 tool_id 格式存在错误，修复该问题的 PR 将很快提交。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361958</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361958</guid>
      <pubDate>Wed, 16 Jul 2025 09:35:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>苹果 AI 团队内部风波：自主研发与开源梦碎，或将求助第三方大模型</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;最近，关于苹果公司人工智能（AI）团队内部的动荡事件引发了外界的广泛关注。根据最新报道，苹果的 AI 基础模型团队曾计划将多个自研模型开源，以展示其在 AI 领域的技术进展。然而，这一提案却遭到了苹果高级副总裁克雷格・费德里吉的否决。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;报道称，费德里吉在一封内部邮件中明确表示，目前市场上已经有许多优秀的开源模型足以支撑学术研究，因此苹果没有必要参与其中。他特别担心的是，若自家模型开源，外界将会注意到这些模型在针对 iPhone 适配后，性能相较于在高性能 PC 或数据中心运行的版本有显著下降。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;这一决策引发了苹果内部的强烈不满，很多团队成员认为，苹果坚持的 「设备优先」 策略正在限制其 AI 技术的发展潜力。值得一提的是，费德里吉本人也曾对已离职的团队负责人庞若明表达过相似的看法。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;苹果去年推出的 「Apple Intelligence」 项目，一直以来都强调用户隐私保护，设备端处理被视为实现这一承诺的关键。然而，显然这一策略也给苹果的 AI 功能带来了不小的技术限制。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="326" src="https://static.oschina.net/uploads/space/2025/0723/172828_x24n_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;更令人关注的是，近日苹果宣布将推迟 Siri 的重大更新，许多 AI 团队成员对此感到措手不及。与此相关的是，苹果公司正在考虑放弃完全自主研发的路径，转而寻求与第三方大语言模型（LLM）合作。消息称，苹果已与 OpenAI、Anthropic 及谷歌接洽，探讨如何利用这些大模型来提升 Siri 的技术支持。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361955</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361955</guid>
      <pubDate>Wed, 16 Jul 2025 09:30:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>AI 编程工具 Replit 「擅自」删除生产数据库，并谎称无法恢复</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;最近，估值飙升的 AI 编程独角兽 Replit 发生了一则重大事故。SaaStr.AI 创始人兼首席执行官 Jason&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fjasonlk%2Fstatus%2F1946239068691665187" target="_blank"&gt;发帖称&lt;/a&gt;，他在连续 8 天使用 AI 编程工具 Replit 构建应用后，&lt;strong&gt;Replit 在他明确指示不要未经许可更改任何代码的前提下，仍然删除了他的数据库&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1154" src="https://static.oschina.net/uploads/space/2025/0723/171059_4K3n_2720166.png" width="1300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;此外，Replit 还「撒谎」表示，此次数据删除事故中无法实现恢复操作。但当 Jason 自行尝试回滚时，操作却意外成功，数据得到了恢复。Replit 的首席执行官 AmjadMasad&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Famasad%2Fstatus%2F1946986468586721478" target="_blank"&gt;紧急回应&lt;/a&gt;，承认事件「完全不可接受且绝不应发生」，并宣布三大补救措施，包括紧急部署数据库开发与生产环境的&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.replit.com%2Fintroducing-a-safer-way-to-vibe-code-with-replit-databases" target="_blank"&gt;自动隔离机制&lt;/a&gt;，并加速推进测试环境建设。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1480" src="https://static.oschina.net/uploads/space/2025/0723/171342_AI7U_2720166.png" width="1318" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-bb9b1f7ef18f49391c7aec21b5d29d2d3e9.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;尽管承诺「一键恢复项目状态」并给予 Jason 赔偿，但评论区却涌现更多受害者。多名用户称遭遇类似删库事故，有人被迫回归本地编码。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361953</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361953</guid>
      <pubDate>Wed, 16 Jul 2025 09:16:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>昆仑万维正式上线音乐模型 Mureka V7</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;昆仑万维宣布推出最新音乐模型 Mureka V7，以及全新的音频模型 Mureka TTS V1——支持 Voice Design 音色设计能力。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「Mureka V7 是一座 24 小时不打烊的私人录音棚，它懂得旋律的呼吸，也懂得你偶尔的情绪化。只需要敲下一个主题、几行歌词、想要的风格，两分钟后就能在电脑中听到一首完整且愿意立刻分享给好友的音乐作品。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Mureka V7 带来的音乐品质更好&lt;/strong&gt;：大幅提升旋律动机与编曲质量，人声与乐器真实度进一步增强，做出来的每一首歌都好听；&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mureka V7 的音乐创新性更强：&lt;/strong&gt;生成的歌曲对于音乐从业者更具启发。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;良品率从 V6 的 43.4% 提升到 57.7%&lt;/strong&gt;，这意味着输入歌词生成后获得好听歌曲的概率；&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;人声真实度和表达力提升 44%&lt;/strong&gt;，让人不禁感叹「这真是 AI 做的？」；&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;整体音质提升近一倍&lt;/strong&gt;，告别「AI 味」的千篇一律。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height="367" src="https://oscimg.oschina.net/oscnet/up-a117fd9281b96abeada1022a7cbb71c7f7f.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;Mureka TTS V1 支持 Voice Design 能力，用户可以通过文本输入想要的语音特征获得对应的音色。不论是真实人物、虚拟人物还是配音角色，都能够通过文本来控制，摆脱了过去只能通过现有音色库实现音色克隆，或是只能使用已经存在的音色形式。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Mureka TTS V1 的 Voice Design 功能技术指标上也获得了提升：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;语音质量达 4.6 分，超过 Elevenlabs（4.36），整体听感上远超同行；&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;文字切分和段落准确性上达 4.64 分，意味着能更好地理解输入意图和文字表述；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;整体听感上也有大幅提升，使得音频听起来更加流畅丝滑。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height="304" src="https://oscimg.oschina.net/oscnet/up-d7f56d82cea841410bec728812df96c2c19.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="display:none"&gt;&amp;nbsp;&lt;/span&gt;&lt;span style="display:none"&gt;&amp;nbsp;&lt;/span&gt;更多详情可&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FLFgTHO3uuMYhNylq5zwNkw" target="_blank"&gt;查看官方公告&lt;/a&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361952</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361952</guid>
      <pubDate>Wed, 16 Jul 2025 09:15:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>TorchV Unstructured —— 文档解析库</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                            &lt;p style="margin-left:0px; margin-right:0px"&gt;&lt;span&gt;一个强大且开发者友好的文档解析库，专为 RAG（检索增强生成）应用优化。基于 Apache Tika、Apache POI 和 PDFBox 等业界标准 Java 库构建，TorchV Unstructured 提供了增强的解析能力，具备智能表格结构识别和内容提取功能。&lt;/span&gt;&lt;/p&gt;

&lt;h2 style="margin-left:0px; margin-right:0px"&gt;&lt;span&gt;🚀 核心特性&lt;/span&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;智能表格解析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：先进的表格结构分析，支持复杂单元格合并检测&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;多格式支持&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：无缝处理 DOC、DOCX、PDF 等多种文档格式&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;RAG 优化输出&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：专为 AI/ML 管道设计的结构化内容提取&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Markdown 和 HTML 导出&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：灵活的输出格式，保持表格结构完整性&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;图像提取&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：自动提取和处理嵌入式图像&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;内存高效&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：优化的大文档处理，最小化内存占用&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 style="margin-left:0px; margin-right:0px"&gt;&lt;span&gt;📦 安装&lt;/span&gt;&lt;/h2&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;Maven&lt;/span&gt;&lt;/h3&gt;

&lt;pre style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span style="color:#117700"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#117700"&gt;dependency&lt;/span&gt;&lt;span style="color:#117700"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color:#117700"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#117700"&gt;groupId&lt;/span&gt;&lt;span style="color:#117700"&gt;&amp;gt;&lt;/span&gt;com.torchv.infra&lt;span style="color:#117700"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color:#117700"&gt;groupId&lt;/span&gt;&lt;span style="color:#117700"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color:#117700"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#117700"&gt;artifactId&lt;/span&gt;&lt;span style="color:#117700"&gt;&amp;gt;&lt;/span&gt;torchv-unstructured&lt;span style="color:#117700"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color:#117700"&gt;artifactId&lt;/span&gt;&lt;span style="color:#117700"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color:#117700"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#117700"&gt;version&lt;/span&gt;&lt;span style="color:#117700"&gt;&amp;gt;&lt;/span&gt;1.0.0&lt;span style="color:#117700"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color:#117700"&gt;version&lt;/span&gt;&lt;span style="color:#117700"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#117700"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color:#117700"&gt;dependency&lt;/span&gt;&lt;span style="color:#117700"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;Gradle&lt;/span&gt;&lt;/h3&gt;

&lt;pre style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;implementation&lt;/span&gt; &lt;span style="color:#aa1111"&gt;'com.torchv.infra:torchv-unstructured:1.0.0'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;h2 style="margin-left:0px; margin-right:0px"&gt;&lt;span&gt;🔧 快速开始&lt;/span&gt;&lt;/h2&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;基础文档解析&lt;/span&gt;&lt;/h3&gt;

&lt;pre style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span style="color:#770088"&gt;import&lt;/span&gt; &lt;span style="color:#000000"&gt;com&lt;/span&gt;.&lt;span style="color:#000000"&gt;torchv&lt;/span&gt;.&lt;span style="color:#000000"&gt;infra&lt;/span&gt;.&lt;span style="color:#000000"&gt;unstructured&lt;/span&gt;.&lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#aa5500"&gt;// 解析文档为 Markdown 格式（推荐用于 RAG）&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#008855"&gt;String&lt;/span&gt; &lt;span style="color:#000000"&gt;content&lt;/span&gt; &lt;span style="color:#981a1a"&gt;=&lt;/span&gt; &lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;.&lt;span style="color:#000000"&gt;toMarkdown&lt;/span&gt;(&lt;span style="color:#aa1111"&gt;"document.docx"&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#000000"&gt;System&lt;/span&gt;.&lt;span style="color:#000000"&gt;out&lt;/span&gt;.&lt;span style="color:#000000"&gt;println&lt;/span&gt;(&lt;span style="color:#000000"&gt;content&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#aa5500"&gt;// 解析文档为带 HTML 表格的 Markdown 格式（保持表格结构）&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#008855"&gt;String&lt;/span&gt; &lt;span style="color:#000000"&gt;contentWithTables&lt;/span&gt; &lt;span style="color:#981a1a"&gt;=&lt;/span&gt; &lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;.&lt;span style="color:#000000"&gt;toMarkdownWithHtmlTables&lt;/span&gt;(&lt;span style="color:#aa1111"&gt;"document.docx"&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#000000"&gt;System&lt;/span&gt;.&lt;span style="color:#000000"&gt;out&lt;/span&gt;.&lt;span style="color:#000000"&gt;println&lt;/span&gt;(&lt;span style="color:#000000"&gt;contentWithTables&lt;/span&gt;);&lt;/span&gt;&lt;/pre&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;高级表格提取&lt;/span&gt;&lt;/h3&gt;

&lt;pre style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span style="color:#770088"&gt;import&lt;/span&gt; &lt;span style="color:#000000"&gt;com&lt;/span&gt;.&lt;span style="color:#000000"&gt;torchv&lt;/span&gt;.&lt;span style="color:#000000"&gt;infra&lt;/span&gt;.&lt;span style="color:#000000"&gt;unstructured&lt;/span&gt;.&lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#770088"&gt;import&lt;/span&gt; &lt;span style="color:#000000"&gt;java&lt;/span&gt;.&lt;span style="color:#000000"&gt;io&lt;/span&gt;.&lt;span style="color:#000000"&gt;File&lt;/span&gt;;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#770088"&gt;import&lt;/span&gt; &lt;span style="color:#000000"&gt;java&lt;/span&gt;.&lt;span style="color:#000000"&gt;util&lt;/span&gt;.&lt;span style="color:#000000"&gt;List&lt;/span&gt;;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#aa5500"&gt;// 仅提取 Word 文档中的表格&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#000000"&gt;List&lt;/span&gt;&lt;span style="color:#981a1a"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#008855"&gt;String&lt;/span&gt;&lt;span style="color:#981a1a"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#000000"&gt;tables&lt;/span&gt; &lt;span style="color:#981a1a"&gt;=&lt;/span&gt; &lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;.&lt;span style="color:#000000"&gt;extractTables&lt;/span&gt;(&lt;span style="color:#aa1111"&gt;"document.docx"&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#770088"&gt;for&lt;/span&gt; (&lt;span style="color:#008855"&gt;int&lt;/span&gt; &lt;span style="color:#000000"&gt;i&lt;/span&gt; &lt;span style="color:#981a1a"&gt;=&lt;/span&gt; &lt;span style="color:#116644"&gt;0&lt;/span&gt;; &lt;span style="color:#000000"&gt;i&lt;/span&gt; &lt;span style="color:#981a1a"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#000000"&gt;tables&lt;/span&gt;.&lt;span style="color:#000000"&gt;size&lt;/span&gt;(); &lt;span style="color:#000000"&gt;i&lt;/span&gt;&lt;span style="color:#981a1a"&gt;++&lt;/span&gt;) {&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color:#000000"&gt;System&lt;/span&gt;.&lt;span style="color:#000000"&gt;out&lt;/span&gt;.&lt;span style="color:#000000"&gt;println&lt;/span&gt;(&lt;span style="color:#aa1111"&gt;"表格 "&lt;/span&gt; &lt;span style="color:#981a1a"&gt;+&lt;/span&gt; (&lt;span style="color:#000000"&gt;i&lt;/span&gt; &lt;span style="color:#981a1a"&gt;+&lt;/span&gt; &lt;span style="color:#116644"&gt;1&lt;/span&gt;) &lt;span style="color:#981a1a"&gt;+&lt;/span&gt; &lt;span style="color:#aa1111"&gt;":"&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color:#000000"&gt;System&lt;/span&gt;.&lt;span style="color:#000000"&gt;out&lt;/span&gt;.&lt;span style="color:#000000"&gt;println&lt;/span&gt;(&lt;span style="color:#000000"&gt;tables&lt;/span&gt;.&lt;span style="color:#000000"&gt;get&lt;/span&gt;(&lt;span style="color:#000000"&gt;i&lt;/span&gt;));&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#aa5500"&gt;// 获取结构化结果，提供更多控制&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#000000"&gt;DocumentResult&lt;/span&gt; &lt;span style="color:#000000"&gt;result&lt;/span&gt; &lt;span style="color:#981a1a"&gt;=&lt;/span&gt; &lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;.&lt;span style="color:#000000"&gt;toStructuredResult&lt;/span&gt;(&lt;span style="color:#aa1111"&gt;"document.docx"&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#770088"&gt;if&lt;/span&gt; (&lt;span style="color:#000000"&gt;result&lt;/span&gt;.&lt;span style="color:#000000"&gt;isSuccess&lt;/span&gt;()) {&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color:#000000"&gt;System&lt;/span&gt;.&lt;span style="color:#000000"&gt;out&lt;/span&gt;.&lt;span style="color:#000000"&gt;println&lt;/span&gt;(&lt;span style="color:#aa1111"&gt;"内容: "&lt;/span&gt; &lt;span style="color:#981a1a"&gt;+&lt;/span&gt; &lt;span style="color:#000000"&gt;result&lt;/span&gt;.&lt;span style="color:#000000"&gt;getContent&lt;/span&gt;());&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color:#000000"&gt;System&lt;/span&gt;.&lt;span style="color:#000000"&gt;out&lt;/span&gt;.&lt;span style="color:#000000"&gt;println&lt;/span&gt;(&lt;span style="color:#aa1111"&gt;"表格: "&lt;/span&gt; &lt;span style="color:#981a1a"&gt;+&lt;/span&gt; &lt;span style="color:#000000"&gt;result&lt;/span&gt;.&lt;span style="color:#000000"&gt;getTables&lt;/span&gt;());&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;文件格式支持&lt;/span&gt;&lt;/h3&gt;

&lt;pre style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span style="color:#770088"&gt;import&lt;/span&gt; &lt;span style="color:#000000"&gt;com&lt;/span&gt;.&lt;span style="color:#000000"&gt;torchv&lt;/span&gt;.&lt;span style="color:#000000"&gt;infra&lt;/span&gt;.&lt;span style="color:#000000"&gt;unstructured&lt;/span&gt;.&lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#770088"&gt;import&lt;/span&gt; &lt;span style="color:#000000"&gt;com&lt;/span&gt;.&lt;span style="color:#000000"&gt;torchv&lt;/span&gt;.&lt;span style="color:#000000"&gt;infra&lt;/span&gt;.&lt;span style="color:#000000"&gt;unstructured&lt;/span&gt;.&lt;span style="color:#000000"&gt;util&lt;/span&gt;.&lt;span style="color:#000000"&gt;UnstructuredUtils&lt;/span&gt;;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#aa5500"&gt;// 检查文件格式是否支持&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#770088"&gt;if&lt;/span&gt; (&lt;span style="color:#000000"&gt;UnstructuredUtils&lt;/span&gt;.&lt;span style="color:#000000"&gt;isSupportedFormat&lt;/span&gt;(&lt;span style="color:#aa1111"&gt;"document.docx"&lt;/span&gt;)) {&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color:#008855"&gt;String&lt;/span&gt; &lt;span style="color:#000000"&gt;content&lt;/span&gt; &lt;span style="color:#981a1a"&gt;=&lt;/span&gt; &lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;.&lt;span style="color:#000000"&gt;toMarkdownWithHtmlTables&lt;/span&gt;(&lt;span style="color:#aa1111"&gt;"document.docx"&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color:#000000"&gt;System&lt;/span&gt;.&lt;span style="color:#000000"&gt;out&lt;/span&gt;.&lt;span style="color:#000000"&gt;println&lt;/span&gt;(&lt;span style="color:#aa1111"&gt;"解析成功！"&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt;} &lt;span style="color:#770088"&gt;else&lt;/span&gt; {&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color:#000000"&gt;System&lt;/span&gt;.&lt;span style="color:#000000"&gt;out&lt;/span&gt;.&lt;span style="color:#000000"&gt;println&lt;/span&gt;(&lt;span style="color:#aa1111"&gt;"不支持的文件格式"&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#aa5500"&gt;// 获取所有支持的格式&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#000000"&gt;List&lt;/span&gt;&lt;span style="color:#981a1a"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#008855"&gt;String&lt;/span&gt;&lt;span style="color:#981a1a"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#000000"&gt;supportedFormats&lt;/span&gt; &lt;span style="color:#981a1a"&gt;=&lt;/span&gt; &lt;span style="color:#000000"&gt;UnstructuredUtils&lt;/span&gt;.&lt;span style="color:#000000"&gt;getSupportedFormats&lt;/span&gt;();&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#000000"&gt;System&lt;/span&gt;.&lt;span style="color:#000000"&gt;out&lt;/span&gt;.&lt;span style="color:#000000"&gt;println&lt;/span&gt;(&lt;span style="color:#aa1111"&gt;"支持的格式: "&lt;/span&gt; &lt;span style="color:#981a1a"&gt;+&lt;/span&gt; &lt;span style="color:#008855"&gt;String&lt;/span&gt;.&lt;span style="color:#000000"&gt;join&lt;/span&gt;(&lt;span style="color:#aa1111"&gt;", "&lt;/span&gt;, &lt;span style="color:#000000"&gt;supportedFormats&lt;/span&gt;));&lt;/span&gt;&lt;/pre&gt;

&lt;h2 style="margin-left:0px; margin-right:0px"&gt;&lt;span&gt;🎯 核心组件&lt;/span&gt;&lt;/h2&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;统一入口&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;UnstructuredParser&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：主要入口类，为所有文档解析操作提供简单统一的 API&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;文档解析器&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;UnstructuredWord&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：通用 Word 文档解析器，支持自动检测&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;TikaAutoUtils&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：支持自动检测的通用文档解析器（底层实现）&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;WordTableParser&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：专业的 Word 文档表格解析器&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;DocxTableParser&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：高级 DOCX 表格结构分析器&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;内容处理器&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ToMarkdownWithHtmlTableContentHandler&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：将文档转换为带 HTML 表格的 Markdown&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;DocMarkdownWithHtmlTableContentHandler&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：专门的 DOC 格式处理器&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;DocXMarkdownWithHtmlTableContentHandler&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：专门的 DOCX 格式处理器&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;表格分析&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;TableStructureAnalyzer&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：智能表格结构识别&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;CellMergeAnalyzer&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：高级单元格合并检测&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;HtmlTableBuilder&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：清洁的 HTML 表格生成器&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;实用工具&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;FileMagicUtils&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：文件类型检测和验证&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ImageExtractParse&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：嵌入式图像提取&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 style="margin-left:0px; margin-right:0px"&gt;&lt;span&gt;🔍 高级用法&lt;/span&gt;&lt;/h2&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;RAG 应用集成&lt;/span&gt;&lt;/h3&gt;

&lt;pre style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span style="color:#770088"&gt;import&lt;/span&gt; &lt;span style="color:#000000"&gt;com&lt;/span&gt;.&lt;span style="color:#000000"&gt;torchv&lt;/span&gt;.&lt;span style="color:#000000"&gt;infra&lt;/span&gt;.&lt;span style="color:#000000"&gt;unstructured&lt;/span&gt;.&lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#770088"&gt;import&lt;/span&gt; &lt;span style="color:#000000"&gt;com&lt;/span&gt;.&lt;span style="color:#000000"&gt;torchv&lt;/span&gt;.&lt;span style="color:#000000"&gt;infra&lt;/span&gt;.&lt;span style="color:#000000"&gt;unstructured&lt;/span&gt;.&lt;span style="color:#000000"&gt;core&lt;/span&gt;.&lt;span style="color:#000000"&gt;DocumentResult&lt;/span&gt;;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#aa5500"&gt;// 为 RAG 应用优化&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#770088"&gt;public&lt;/span&gt; &lt;span style="color:#770088"&gt;class&lt;/span&gt; &lt;span style="color:#0000ff"&gt;RAGDocumentProcessor&lt;/span&gt; {&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color:#770088"&gt;public&lt;/span&gt; &lt;span style="color:#000000"&gt;DocumentChunk&lt;/span&gt; &lt;span style="color:#000000"&gt;processDocument&lt;/span&gt;(&lt;span style="color:#008855"&gt;String&lt;/span&gt; &lt;span style="color:#000000"&gt;filePath&lt;/span&gt;) {&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#aa5500"&gt;// 解析时保持表格结构以获得更好的上下文&lt;/span&gt;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#008855"&gt;String&lt;/span&gt; &lt;span style="color:#000000"&gt;content&lt;/span&gt; &lt;span style="color:#981a1a"&gt;=&lt;/span&gt; &lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;.&lt;span style="color:#000000"&gt;toMarkdownWithHtmlTables&lt;/span&gt;(&lt;span style="color:#000000"&gt;filePath&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#aa5500"&gt;// 单独提取表格用于结构化数据处理&lt;/span&gt;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#000000"&gt;List&lt;/span&gt;&lt;span style="color:#981a1a"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#008855"&gt;String&lt;/span&gt;&lt;span style="color:#981a1a"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#000000"&gt;tables&lt;/span&gt; &lt;span style="color:#981a1a"&gt;=&lt;/span&gt; &lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;.&lt;span style="color:#000000"&gt;extractTables&lt;/span&gt;(&lt;span style="color:#000000"&gt;filePath&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#770088"&gt;return&lt;/span&gt; &lt;span style="color:#770088"&gt;new&lt;/span&gt; &lt;span style="color:#000000"&gt;DocumentChunk&lt;/span&gt;(&lt;span style="color:#000000"&gt;content&lt;/span&gt;, &lt;span style="color:#000000"&gt;tables&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt; &amp;nbsp;  }&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;批量处理&lt;/span&gt;&lt;/h3&gt;

&lt;pre style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span style="color:#770088"&gt;import&lt;/span&gt; &lt;span style="color:#000000"&gt;com&lt;/span&gt;.&lt;span style="color:#000000"&gt;torchv&lt;/span&gt;.&lt;span style="color:#000000"&gt;infra&lt;/span&gt;.&lt;span style="color:#000000"&gt;unstructured&lt;/span&gt;.&lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#770088"&gt;import&lt;/span&gt; &lt;span style="color:#000000"&gt;com&lt;/span&gt;.&lt;span style="color:#000000"&gt;torchv&lt;/span&gt;.&lt;span style="color:#000000"&gt;infra&lt;/span&gt;.&lt;span style="color:#000000"&gt;unstructured&lt;/span&gt;.&lt;span style="color:#000000"&gt;util&lt;/span&gt;.&lt;span style="color:#000000"&gt;UnstructuredUtils&lt;/span&gt;;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#770088"&gt;public&lt;/span&gt; &lt;span style="color:#770088"&gt;class&lt;/span&gt; &lt;span style="color:#0000ff"&gt;BatchProcessor&lt;/span&gt; {&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color:#770088"&gt;public&lt;/span&gt; &lt;span style="color:#008855"&gt;void&lt;/span&gt; &lt;span style="color:#000000"&gt;processBatch&lt;/span&gt;(&lt;span style="color:#000000"&gt;List&lt;/span&gt;&lt;span style="color:#981a1a"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#008855"&gt;String&lt;/span&gt;&lt;span style="color:#981a1a"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#000000"&gt;filePaths&lt;/span&gt;) {&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#000000"&gt;filePaths&lt;/span&gt;.&lt;span style="color:#000000"&gt;parallelStream&lt;/span&gt;()&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  .&lt;span style="color:#000000"&gt;filter&lt;/span&gt;(&lt;span style="color:#000000"&gt;UnstructuredUtils&lt;/span&gt;::&lt;span style="color:#000000"&gt;isSupportedFormat&lt;/span&gt;)&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  .&lt;span style="color:#000000"&gt;forEach&lt;/span&gt;(&lt;span style="color:#770088"&gt;this&lt;/span&gt;::&lt;span style="color:#000000"&gt;processFile&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt; &amp;nbsp;  }&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color:#770088"&gt;private&lt;/span&gt; &lt;span style="color:#008855"&gt;void&lt;/span&gt; &lt;span style="color:#000000"&gt;processFile&lt;/span&gt;(&lt;span style="color:#008855"&gt;String&lt;/span&gt; &lt;span style="color:#000000"&gt;filePath&lt;/span&gt;) {&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#770088"&gt;try&lt;/span&gt; {&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#008855"&gt;String&lt;/span&gt; &lt;span style="color:#000000"&gt;content&lt;/span&gt; &lt;span style="color:#981a1a"&gt;=&lt;/span&gt; &lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;.&lt;span style="color:#000000"&gt;toMarkdownWithHtmlTables&lt;/span&gt;(&lt;span style="color:#000000"&gt;filePath&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#aa5500"&gt;// 保存或进一步处理内容&lt;/span&gt;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#000000"&gt;saveProcessedContent&lt;/span&gt;(&lt;span style="color:#000000"&gt;filePath&lt;/span&gt;, &lt;span style="color:#000000"&gt;content&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;  } &lt;span style="color:#770088"&gt;catch&lt;/span&gt; (&lt;span style="color:#000000"&gt;Exception&lt;/span&gt; &lt;span style="color:#000000"&gt;e&lt;/span&gt;) {&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#000000"&gt;log&lt;/span&gt;.&lt;span style="color:#000000"&gt;error&lt;/span&gt;(&lt;span style="color:#aa1111"&gt;"处理文件失败: {}"&lt;/span&gt;, &lt;span style="color:#000000"&gt;filePath&lt;/span&gt;, &lt;span style="color:#000000"&gt;e&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;  }&lt;/span&gt;
&lt;span&gt; &amp;nbsp;  }&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;错误处理和验证&lt;/span&gt;&lt;/h3&gt;

&lt;pre style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span style="color:#770088"&gt;import&lt;/span&gt; &lt;span style="color:#000000"&gt;com&lt;/span&gt;.&lt;span style="color:#000000"&gt;torchv&lt;/span&gt;.&lt;span style="color:#000000"&gt;infra&lt;/span&gt;.&lt;span style="color:#000000"&gt;unstructured&lt;/span&gt;.&lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#770088"&gt;import&lt;/span&gt; &lt;span style="color:#000000"&gt;com&lt;/span&gt;.&lt;span style="color:#000000"&gt;torchv&lt;/span&gt;.&lt;span style="color:#000000"&gt;infra&lt;/span&gt;.&lt;span style="color:#000000"&gt;unstructured&lt;/span&gt;.&lt;span style="color:#000000"&gt;util&lt;/span&gt;.&lt;span style="color:#000000"&gt;UnstructuredUtils&lt;/span&gt;;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#770088"&gt;public&lt;/span&gt; &lt;span style="color:#770088"&gt;class&lt;/span&gt; &lt;span style="color:#0000ff"&gt;DocumentValidator&lt;/span&gt; {&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color:#770088"&gt;public&lt;/span&gt; &lt;span style="color:#000000"&gt;ProcessingResult&lt;/span&gt; &lt;span style="color:#000000"&gt;validateAndProcess&lt;/span&gt;(&lt;span style="color:#008855"&gt;String&lt;/span&gt; &lt;span style="color:#000000"&gt;filePath&lt;/span&gt;) {&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#aa5500"&gt;// 检查文件格式&lt;/span&gt;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#770088"&gt;if&lt;/span&gt; (&lt;span style="color:#981a1a"&gt;!&lt;/span&gt;&lt;span style="color:#000000"&gt;UnstructuredUtils&lt;/span&gt;.&lt;span style="color:#000000"&gt;isSupportedFormat&lt;/span&gt;(&lt;span style="color:#000000"&gt;filePath&lt;/span&gt;)) {&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#770088"&gt;return&lt;/span&gt; &lt;span style="color:#000000"&gt;ProcessingResult&lt;/span&gt;.&lt;span style="color:#000000"&gt;unsupportedFormat&lt;/span&gt;();&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;  }&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#770088"&gt;try&lt;/span&gt; {&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#008855"&gt;String&lt;/span&gt; &lt;span style="color:#000000"&gt;content&lt;/span&gt; &lt;span style="color:#981a1a"&gt;=&lt;/span&gt; &lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;.&lt;span style="color:#000000"&gt;toMarkdownWithHtmlTables&lt;/span&gt;(&lt;span style="color:#000000"&gt;filePath&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#000000"&gt;List&lt;/span&gt;&lt;span style="color:#981a1a"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#008855"&gt;String&lt;/span&gt;&lt;span style="color:#981a1a"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#000000"&gt;tables&lt;/span&gt; &lt;span style="color:#981a1a"&gt;=&lt;/span&gt; &lt;span style="color:#000000"&gt;UnstructuredParser&lt;/span&gt;.&lt;span style="color:#000000"&gt;extractTables&lt;/span&gt;(&lt;span style="color:#000000"&gt;filePath&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#770088"&gt;return&lt;/span&gt; &lt;span style="color:#000000"&gt;ProcessingResult&lt;/span&gt;.&lt;span style="color:#000000"&gt;success&lt;/span&gt;(&lt;span style="color:#000000"&gt;content&lt;/span&gt;, &lt;span style="color:#000000"&gt;tables&lt;/span&gt;);&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;  } &lt;span style="color:#770088"&gt;catch&lt;/span&gt; (&lt;span style="color:#000000"&gt;RuntimeException&lt;/span&gt; &lt;span style="color:#000000"&gt;e&lt;/span&gt;) {&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color:#770088"&gt;return&lt;/span&gt; &lt;span style="color:#000000"&gt;ProcessingResult&lt;/span&gt;.&lt;span style="color:#000000"&gt;error&lt;/span&gt;(&lt;span style="color:#000000"&gt;e&lt;/span&gt;.&lt;span style="color:#000000"&gt;getMessage&lt;/span&gt;());&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;  }&lt;/span&gt;
&lt;span&gt; &amp;nbsp;  }&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;h2 style="margin-left:0px; margin-right:0px"&gt;&lt;span&gt;🌟 为什么选择 TORCHV UNSTRUCTURED？&lt;/span&gt;&lt;/h2&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;适用于 RAG 应用&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;结构化输出&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：清洁、结构化的内容提取，完美适配嵌入向量生成&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;表格保持&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：维护表格关系，对文档理解至关重要&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;丰富元数据&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：提取全面的文档元数据，增强检索效果&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;适用于开发者&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;简单 API&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：直观的接口设计，合理的默认配置&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;可扩展&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：基于插件的架构，支持自定义内容处理器&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;生产就绪&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：经过实战验证，具备全面的错误处理机制&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 style="text-align:justify"&gt;&lt;span&gt;性能优化&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;内存高效&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：大文档的流式处理&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;快速处理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：优化算法确保快速解析&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;可扩展&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：专为高吞吐量文档处理而设计&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 style="margin-left:0px; margin-right:0px"&gt;&lt;span&gt;📚 文档&lt;/span&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;a href="https://torchv.github.io/torchv-unstructured/"&gt;&lt;span&gt;API 文档&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;a href="https://github.com/torchv/torchv-unstructured-examples"&gt;&lt;span&gt;示例仓库&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/p/docs/migration.md"&gt;&lt;span&gt;迁移指南&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 style="margin-left:0px; margin-right:0px"&gt;&lt;span&gt;🤝 贡献&lt;/span&gt;&lt;/h2&gt;

&lt;p style="color:#111111; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;我们欢迎贡献！请查看我们的&lt;/span&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/p/CONTRIBUTING.md"&gt;&lt;span&gt;贡献指南&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;了解详情。&lt;/span&gt;&lt;/p&gt;

&lt;ol start=""&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;Fork 这个仓库&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;创建你的功能分支 (&lt;/span&gt;&lt;span&gt;&lt;code&gt;git checkout -b feature/amazing-feature&lt;/code&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;提交你的更改 (&lt;/span&gt;&lt;span&gt;&lt;code&gt;git commit -m 'Add some amazing feature'&lt;/code&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;推送到分支 (&lt;/span&gt;&lt;span&gt;&lt;code&gt;git push origin feature/amazing-feature&lt;/code&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;打开一个 Pull Request&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 style="margin-left:0px; margin-right:0px"&gt;&lt;span&gt;📄 许可证&lt;/span&gt;&lt;/h2&gt;

&lt;p style="color:#111111; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;本项目基于 Apache License 2.0 许可证 - 查看&lt;/span&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/p/LICENSE"&gt;&lt;span&gt;LICENSE&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;文件了解详情。&lt;/span&gt;&lt;/p&gt;

&lt;h2 style="margin-left:0px; margin-right:0px"&gt;&lt;span&gt;🙏 致谢&lt;/span&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;a href="https://tika.apache.org/"&gt;&lt;span&gt;Apache Tika&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt; - 内容分析工具包&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;a href="https://poi.apache.org/"&gt;&lt;span&gt;Apache POI&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt; - Microsoft 文档的 Java API&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;a href="https://pdfbox.apache.org/"&gt;&lt;span&gt;PDFBox&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt; - PDF 文档操作库&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 style="margin-left:0px; margin-right:0px"&gt;&lt;span&gt;📞 支持&lt;/span&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;📧 邮箱：&lt;/span&gt;&lt;span&gt;&lt;a href="mailto:xiaoymin@foxmail.com"&gt;xiaoymin@foxmail.com&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;🐛 问题反馈：&lt;/span&gt;&lt;span&gt;&lt;a href="https://github.com/torchv/torchv-unstructured/issues"&gt;&lt;span&gt;GitHub Issues&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p style="color:#111111; margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;💬 讨论：&lt;/span&gt;&lt;span&gt;&lt;a href="https://github.com/torchv/torchv-unstructured/discussions"&gt;&lt;span&gt;GitHub Discussions&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div style="text-align:justify"&gt;
&lt;hr&gt;&lt;/div&gt;

&lt;p style="color:#111111; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;由 &lt;/span&gt;&lt;span&gt;&lt;a href="https://www.torchv.com/"&gt;&lt;span&gt;TorchV 团队&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt; 用 ❤️ 制作&lt;/span&gt;&lt;/p&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/torchv-unstructured</link>
      <guid isPermaLink="false">https://www.oschina.net/p/torchv-unstructured</guid>
      <pubDate>Wed, 16 Jul 2025 09:03:00 GMT</pubDate>
    </item>
    <item>
      <title>李沐发布开源 TTS 语言大模型 Higgs Audio v2</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;知名 AI 技术创业者李沐和其团队 Boson.ai&amp;nbsp;发布了开源 TTS 语言大模型&amp;nbsp;&lt;strong&gt;Higgs Audio v2&lt;/strong&gt;，该模型不仅支持文本转语音，还能生成多语言自然多说话人对话、自动调整韵律、使用克隆声音哼唱旋律，甚至同时生成语音和背景音乐 。&lt;/p&gt; 
&lt;p&gt;Higgs Audio v2 整合了 1000 万小时语音数据到 LLM 文本训练中，在 &lt;strong&gt;EmergentTTS-Eval&lt;/strong&gt; 基准测试中表现优异（尤其在「情绪」和「问题」类别中，较 &lt;strong&gt;GPT-4o-mini-tts&lt;/strong&gt; 分别高出 75.7% 和 55.7% 的胜率），在传统 TTS 基准测试中也取得了最佳性能。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-e48b7c56c84559072bacc4563a1695cd45d.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-c8f511e25c2103e76f04d3fda3dcb16a3a5.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-7d2efc44d02a93d4f5dacd62985a24b7d09.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;以下是关于 Higgs Audio V2 的详细介绍：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;模型特点&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;多模态能力&lt;/strong&gt;：不仅能处理文本，还能同时理解并生成语音，可完成简单的文本转语音，也能实现更复杂的任务，如写一首歌并唱出来，再加上配乐。&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;独特功能&lt;/strong&gt;：具备生成多种语言的自然多说话人对话、旁白过程中的自动韵律调整、使用克隆声音进行旋律哼唱以及同时生成语音和背景音乐等能力。&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;性能优势&lt;/strong&gt;：在 emergenttts-eval 基准上，相较于其他模型，性能遥遥领先，尤其是在「情绪」和「问题」类别中，相比 gpt-4o-mini-tts 高出了 75.7% 和 55.7% 的胜率。在 seed-tts eval 和情感语音数据集（esd）等传统 tts 基准测试中也取得了最佳性能。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;技术原理&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;数据处理&lt;/strong&gt;：将语音信号以每秒 25 帧的速度运行，通过统一的离散化音频分词器，将其表示为长度为 10 的编号序列，也就是一个个 token，以捕获语义和声学特征。&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;模型架构&lt;/strong&gt;：利用预训练的大型语言模型，将其强大的语言理解、语境感知和推理能力扩展到音频任务。通过在大量的配对文本-音频数据集上端到端地训练大型语言模型，实现了语音和文本的整合。&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;上下文学习&lt;/strong&gt;：融入了上下文学习，使模型能够快速适应而无需重新训练。通过简单的提示，例如简短的参考音频样本，可以即时进行零样本语音克隆，匹配说话风格。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;实时语音聊天&lt;/strong&gt;：可实现低延迟、理解情绪并表达情绪的自然语音交互，而不仅仅是机械的问答，适用于虚拟主播、实时语音助手等场景。&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;音频内容创作&lt;/strong&gt;：能够生成自然多说话人对话、旁白等音频内容，为有声读物、互动培训和动态故事讲述等提供支持。&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;语音克隆&lt;/strong&gt;：可以复制特定人物的声音，用于制作鬼畜视频、虚拟主播等，为娱乐和创意领域提供了新的可能性。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;该模型代码已全部开源至 GitHub：https://github.com/boson-ai/higgs-audio，和 Hugging Face（https://huggingface.co/bosonai/higgs-audio-v2-generation-3B-base），支持本地安装（需 GPU 版 PyTorch 或使用 Docker 简化安装）。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361946</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361946</guid>
      <pubDate>Wed, 16 Jul 2025 08:49:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>21 岁 MIT 辍学生 AI 创业团队获得 3200 万美元融资</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;来自麻省理工学院（MIT）的两位 21 岁辍学生卡伦・考希克 (Karun Kaushik) 和塞林・科卡拉 (Selin Kocalar) 所创办的的 AI 合规初创公司 Delve 已完成 3200 万美元的 A 轮融资。目前，Delve 的估值已高达 3 亿美元。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Delve 最初的目标是开发一款 AI 医疗记录助手，帮助医生处理病人文档，但在面临繁琐的 HIPAA 合规要求后，他们迅速调整了方向，决定帮助其他公司更快、更高效地达成合规目标。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img alt="" height="202" src="https://oscimg.oschina.net/oscnet/up-e4be3c97d6c432687d0e90c9b808bdf6d7c.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;自成立以来，Delve 的客户数量已从今年 1 月的 100 家激增至 500 家，其中不乏如 Lovable、Bland 和 Wispr Flow 等快速成长的 AI 独角兽。其核心技术是利用 AI 代理来自动化合规工作，减少人工成本和时间的消耗。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;创始人们表示，传统的合规流程往往依赖邮件、Slack 和共享驱动器等不规范的手段，这使得企业在扩展和运营时面临重重困难。Delve 通过与客户现有工具的整合，让这些 AI 代理在后台默默工作，自动收集证据、撰写报告和更新审计日志，实现合规工作流程的实时自动化。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Delve 的成功并非偶然，投资方 Insight Partners 对其未来发展寄予厚望，认为合规的现代化将推动企业整个运营的升级。Kocalar 指出，随着客户需求的多样化，Delve 计划将业务范围扩展到网络安全、风险管理及内部治理等领域，力争在未来自动化更多的后台业务。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;当然，市场竞争同样激烈，各类 AI 企业和大型实验室如 OpenAI 也在推出各种通用代理工具来自动化业务流程。但 Kocalar 认为，这些竞争者的出现反而验证了 Delve 的商业模式和市场需求。凭借在合规领域的深入知识和专业技术，Delve 期待在这个不断变化的市场中保持领先地位。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361941</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361941</guid>
      <pubDate>Wed, 16 Jul 2025 08:37:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>LTX-Video 0.9.8 发布，首次支持 60 秒长视频生成</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;LTX-Video 0.9.8 已发布，这是基于 DiT（Diffusion Transformer）架构的视频生成模型的最新升级，首次支持生成长达 60 秒的高质量视频，并发布了新的蒸馏模型和细节增强器。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0723/163149_uQ8v_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;新版本最大的突破是支持生成长达 60 秒的高质量视频（LTXV-13B 模型），同时保持与官方 IC-LoRAs 的兼容性。&lt;/p&gt; 
&lt;p&gt;本次更新包含两个蒸馏模型：ltxv-13b-0.9.8-distilled 和 ltxv-2b-0.9.8-distilled，均从基础模型 ltxv-13b-0.9.8-dev 蒸馏而来。这些模型可在多尺度管道中协同使用，并显著提升了提示理解和细节生成能力。所有模型都提供了对应的 FP8 量化权重和工作流程。&lt;/p&gt; 
&lt;p&gt;此外，Lightricks 还发布了新的细节增强模型 LTX-Video-ICLoRA-detailer-13B-0.9.8，专门用于提升生成视频的细节质量。该模型已集成到 ComfyUI 中，用户可以直接使用。&lt;/p&gt; 
&lt;p&gt;LTX-Video 系列支持图像到视频和视频到视频的生成，并能通过多条件控制（如图像、短视频片段）进行精细化创作。开发者可以通过 Diffusers 和 ComfyUI 等框架使用这些模型，或通过 LTX-Studio、Fal.ai 和 Replicate 等平台在线体验。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FLightricks%2FLTX-Video" target="_blank"&gt;https://github.com/Lightricks/LTX-Video&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2FLightricks%2FLTX-Video" target="_blank"&gt;https://huggingface.co/Lightricks/LTX-Video&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361940</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361940</guid>
      <pubDate>Wed, 16 Jul 2025 08:31:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>AI 将在五年内成为企业生存的 「基本技能」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;美国科技亿万富翁马克・库班最近在接受采访时表示，人工智能（AI）将在未来五年内成为每个职场人士必备的 「基本技能」，就像电子邮件和 Excel 软件一样普及。他强调，企业主如何有效利用人工智能将直接影响他们在未来几年的竞争力和成功。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="340" src="https://oscimg.oschina.net/oscnet/up-6045b74ea4f19a7984f7137d2b1c96ff8a2.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;库班提到，在接下来的十年内，人工智能助手将极大改变工作模式。他预测，未来会有越来越多的人选择自己创业，借助人工智能的帮助，单个创始人将能够承担起一个完整团队的工作。这一变化不仅能够提升个人的工作效率，还能够为更多人打开创业的大门。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;他指出，企业主在利用人工智能的过程中，必须快速做出决策并行动。他表示:「如果你没有利用人工智能来更快地决策，你就会落后于竞争对手。」 库班将人工智能视为企业主可以投资的 「团队成员」，它能够协助企业主完成多个角色的工作，包括运营副总裁、销售代表、数据分析师及法律顾问，而这些角色的工作费用将大幅降低。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;不过，库班也提醒企业家们，尽管 AI 具有强大的能力，他们在使用人工智能时仍需谨慎。他建议将人工智能视作 「最聪明的实习生」，不仅要提出正确的问题，还要认真审核其提供的答案。他指出，许多企业家在当前环境中面临的&lt;span&gt;最大&lt;/span&gt;挑战是 「恐惧和资金」。然而，人工智能代理的出现，将帮助那些由于招聘成本而无法进入某一行业的创业者，打破这一壁垒。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;库班总结道，人工智能不仅是工具，更是企业家们的强大杠杆。成功的企业家将懂得如何有效利用这一技术，确保在竞争中立于不败之地。他强调:「最终，人工智能是一个乘数，善用它，但不要被它操控。」&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361931</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361931</guid>
      <pubDate>Wed, 16 Jul 2025 07:40:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>亚马逊云科技上海 AI 研究院解散</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;AWS 亚马逊云科技上海 AI 研究院的首席应用科学家王敏捷发朋友圈称，「刚收到通知，AWS 亚马逊云科技上海 AI 研究院（也是 AWS 最后一个海外研究院）正式解散。」&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-0bf820d1cb694fdf814a9c083a90582b673.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;王敏捷感慨道，「近 6 年带队时光，赶上了外企研究院的黄金周期，更得益于张峥老师的细心指导，有幸成为 AWS 亚太地区最年轻的首席应用科学家。」&lt;/p&gt; 
&lt;p&gt;今日，亚马逊云科技就上海 AI 研究院解散一事&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1838398566569114998%26wfr%3Dspider%26for%3Dpc"&gt;回应新浪科技称&lt;/a&gt;：「经过对公司组织、发展重点及未来战略方向的深入评估，我们决定对亚马逊云科技部分团队进行人员精简。」&lt;/p&gt; 
&lt;p&gt;亚马逊云科技表示，「做出这些决定是非常艰难的，我们将全力支持员工顺利过渡，我们做出这些必要的决定，是为了持续投资、优化资源，为客户带来更多的创新」。&lt;/p&gt; 
&lt;p&gt;今年以来，已有多家科技巨头对其在华研发业务进行了调整。&lt;/p&gt; 
&lt;p&gt;2025 年 3 月，IBM 关闭了在中国运营了 32 年的研发部门，另外，有媒体报道微软也在逐步关闭其上海 AI 实验室，并将数百名专家搬迁至美国、澳大利亚、爱尔兰等地。今年 6 月，花旗集团宣布，作为在全球持续推进的简化工作的一部分，花旗将精简位于中国上海和大连的全球技术解决中心，减少约 3500 名技术人员。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361930</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361930</guid>
      <pubDate>Wed, 16 Jul 2025 07:37:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Fedora 考虑放弃 DVD 光盘启动支持</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Fedora 项目正在向其用户和开发者社区征求反馈，探讨是否可能更新其发布标准，使其不再阻止光盘启动问题（DVD 映像），以及是否继续将基于 Intel 的 Mac 的双启动问题视为发布阻碍。&lt;/p&gt; 
&lt;p&gt;提出的&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscussion.fedoraproject.org%2Ft%2Fproposal-drop-optical-media-boot-release-criterion%2F160524" target="_blank"&gt;第一项建议&lt;/a&gt;是，是否放弃 Fedora 发布标准中关于光盘启动支持的内容。这涉及 Fedora 发行版安装程序映像，这些映像必须在写入光盘（DVD）后才能启动。Fedora 已于 2020 年正式停止测试光盘支持，目前他们正在考虑使其不再阻止任何已报告的问题：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;自 2020 年以来，质量团队不再被要求测试光学介质，但发现的任何问题仍然可能成为阻碍。我们不太喜欢这个解决方案（阻止我们未测试的内容），但测试光学启动实在太耗时，而且已经很小众了。五年后的今天，我们认为是时候放弃整个标准了。光学启动的重要性早已不复存在，我们认为是时候将其从名为发布标准的「关键功能列表」中移除了。这不会为我们节省太多时间（我不记得过去几年出现过任何引人注目的光学启动问题），但它可以稍微简化我们的测试矩阵（使其更易于阅读），解决发布阻止状态和质量覆盖范围之间的矛盾，并且如果发现问题，它可以让我们丢弃仍然准备好的 DVD 驱动器和介质（但可能已经无法使用了）。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Fnews%2F%3D%2522https%3A%2F%2Fdiscussion.fedoraproject.org%2Ft%2Fproposal-drop-intel-based-macbook-dual-boot-release-criterion%2F160525%2522" target="_blank"&gt;第二项提案&lt;/a&gt;是关于取消基于 Intel 的 Apple MacBook 双启动发布标准。当前的发布标准指出，Fedora 安装程序必须能够与基于 Intel 的 Mac 电脑上现有的 macOS 安装一起双启动/安装到可用空间中。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「这个标准正在随着时间的推移而被淘汰，因为苹果多年前就停止生产基于英特尔的 Mac（取而代之的是「Apple Silicon」 M* 处理器，目前 Fedora 并不支持这种处理器）。最后几款可以合理使用 Fedora 的 MacBook 是 2017 年款，它仍然包含 T1 安全芯片（较新的型号有 T2 芯片，并且它们的内部键盘和触摸板不适用于 Fedora 内核）。2017 年款的系统更新支持将于今年结束，老款已经过时。这意味着 2017 年之前款的用户很可能已经切换到 Fedora，如果他们愿意的话，2017 年款的用户可能会在今年这样做，而且未来不会有这样的用户，因为他们的硬件得不到 Fedora 的良好支持。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;这主要涉及 2017 年及更早的 Apple Mac，因为配备 T2 安全芯片的较新 Apple Mac 目前在 Fedora Linux 上运行不佳。这不会影响 Apple Silicon Mac 的任何变更，只会影响 Intel x86_64 系统。&lt;/p&gt; 
&lt;p&gt;由于 Fedora 质量团队目前对剩余的 Intel Mac 的访问权限较少，并且能够投入较少时间来修复这些老旧系统的任何问题，因此现在的愿望是不要将任何 Apple Mac 双启动问题视为发布阻碍。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361929</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361929</guid>
      <pubDate>Wed, 16 Jul 2025 07:31:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>周鸿祎：最近都采购华为芯片，英伟达 H20 性价比不高</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;7 月 23 日，360 集团创始人周鸿祎&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yicai.com%2Fnews%2F102737141.html"&gt;对第一财经记者表示&lt;/a&gt;，360 的芯片采购正转向国产芯片，最近采购的都是华为的产品，未涉及英伟达 H20 芯片。&lt;/p&gt; 
&lt;p&gt;他坦言，尽管国产芯片与英伟达产品存在差距，但必须坚持使用，因为只有通过大量应用，才能推动国产芯片持续改进。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0723/152238_twYV_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;H20 是英伟达针对中国市场推出的 H100 简化版，采用 Hopper 架构和 CoWoS 封装技术，但性能差距明显。周鸿祎分析，H20 更适合 AI 推理任务，而推理对芯片要求较低，无需高速互联和集群部署。在此领域，国产芯片性价比更高，使得定位中间的 H20 显得尴尬。当前美国芯片出口限制背景下，华为等企业加大研发，其升腾系列芯片性能逐步提升，部分领域已超越 H20。360 的选择既获性价比优势，也助力国产芯片产业迭代，实现双赢。&lt;/p&gt; 
&lt;p&gt;此前，360 已采购约 1000 片华为升腾 910B AI 芯片，并合作将 AI 框架移植到该芯片上。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/361928</link>
      <guid isPermaLink="false">https://www.oschina.net/news/361928</guid>
      <pubDate>Wed, 16 Jul 2025 07:24:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>深度剖析 TDMQ RabbitMQ 版经典队列底层存储机制</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;h2&gt;导语&lt;/h2&gt; 
&lt;p&gt;RabbitMQ 作为开源消息队列的标杆产品，凭借灵活的路由机制与高可用设计，支撑着海量业务场景的消息流转。而经典队列（Classic Queue） 作为 RabbitMQ 最基础、应用最广泛的队列类型，其底层存储机制直接决定了消息处理的性能边界与可用性上限。&lt;/p&gt; 
&lt;p&gt;理解经典队列的存储架构，不仅是掌握 RabbitMQ 核心原理的关键，更为生产环境的运维优化提供了理论支撑。本文将从文件目录结构、存储格式定义、读写流程到运维实践策略，全面解析经典队列的底层存储实现逻辑，帮助读者深入理解其在消息生命周期管理中的核心作用。&lt;/p&gt; 
&lt;h2&gt;经典队列介绍&lt;/h2&gt; 
&lt;p&gt;RabbitMQ 作为一款历史悠久的开源消息队列，被广泛应用于各个领域。在 RabbitMQ 中，用户使用虚拟主机（Vhost）隔离资源，交换机负责路由消息，队列则是消息存储的最小单元。&lt;/p&gt; 
&lt;p&gt;用户通过客户端与 RabbitMQ 的服务端建立连接后，基于通道（Channel）实现消息的高效交互：生产者经过通道将消息发送至交换机，由交换机按绑定规则路由至目标队列；消费者则通过通道从队列中拉取消息，完成业务逻辑处理。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-356020c87a4782a64efc9913f5c4615dfea.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在这一过程中，队列作为消息生命周期的核心载体，衍生出三种差异化实现：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;经典队列（Classic Queue）&lt;/strong&gt;：采用轻量级索引与共享存储架构，在单机性能与存储效率间取得平衡，适用于高吞吐非强一致性场景；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;仲裁队列（Quorum Queue）&lt;/strong&gt;：基于 Raft 协议实现多副本强一致性，保障关键业务数据不丢失，适用于金融交易、订单管理等关键业务；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;流队列（Stream Queue）&lt;/strong&gt;：以日志结构存储消息流，支持回溯消费与持久化流处理，适用于实时数据分析场景。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;经典队列作为使用频率最高的队列，了解它的存储机制对于理解其可用性和性能至关重要，接下来将从存储架构、文件格式、读写流程等维度，深入解析经典队列的底层实现逻辑。&lt;/p&gt; 
&lt;h2&gt;存储架构解析&lt;/h2&gt; 
&lt;h3&gt;目录结构&lt;/h3&gt; 
&lt;p&gt;RabbitMQ 通过虚拟主机（Vhost）实现资源隔离，每个 Vhost 有独立的物理存储目录，其典型结构如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;vhost_name/
├── msg_store_persistent/      # 共享存储目录，存储大消息
│   ├── 0.rdq                  # 共享存储文件
│   └── 1.rdq                  # 支持文件滚动
└── queues/                    # 队列专属存储目录
    └── queue_name/            # 单个队列目录
        ├── queue_name.qi      # 队列索引文件
        └── queue_name.qs      # 队列存储文件
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;msg_store_* 是共享存储目录，顾名思义是这个 Vhost 下所有队列共享的存储。由于 Exchange 可能会将同一条消息路由到不同的队列，而将同一条消息存储多次会增加磁盘空间占用，因此经典队列会将大小超过某个阈值的消息存储在共享存储下，通过引用计数来管理这部分消息。&lt;/p&gt; 
&lt;p&gt;每个队列在 queues 目录下都有属于自己的目录，队列目录下主要有两类文件：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;队列存储&lt;/strong&gt;：名称为 *.qs 的文件，负责存储这个队列中消息大小小于这个阈值的消息。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;队列索引&lt;/strong&gt;：名称为 *.qi 的文件，负责存储消息元数据和消息所在位置。队列索引存储了消息的偏移或唯一标识，通过它们可以定位到消息在队列存储或共享存储中的位置，索引文件中的 Entry 和存储文件中的 Entry 因此在逻辑上构成了一对一的映射关系。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-c21a1914865fc33ac57c80f3056a8a6522b.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;队列索引&lt;/h3&gt; 
&lt;p&gt;队列索引文件由一个 Header 和若干 Entry 组成，Entry 的数量由 classic_queue_index_v2_segment_entry_count 这一参数控制，默认为 4096。Entry 有两种类型：Publish Entry 和 Ack Entry。&lt;/p&gt; 
&lt;p&gt;生产者将消息成功发送到队列后会产生一个 Publish Entry，队列将这条消息投递给消费者并且得到消费者确认后会使用 Ack Entry 覆盖原来的 Publish Entry，代表这条消息可以被删除。&lt;/p&gt; 
&lt;p&gt;Publish Entry 存储了这条消息的元数据，包括 MsgId、SeqId、存储位置、消息属性和是否持久化的标识。&lt;/p&gt; 
&lt;p&gt;MsgId 是 RabbitMQ 为每条消息随机生成的 GUID，用来确定消息在共享存储的位置。&lt;/p&gt; 
&lt;p&gt;SeqId 是这条消息在队列中的序号，用来决定消息在队列索引和队列存储中的位置。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-0d7a0133f530ca3140ec9f5eae8f0132f65.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;队列存储&lt;/h3&gt; 
&lt;p&gt;队列存储文件和索引文件是一对一的关系，当队列删除它的索引文件时，也会删除对应的存储文件。队列存储文件的结构与索引文件类似，也是由 Header 和 Entry 构成。Header 和 Entry 的具体组成如下所示。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-f1cb3f97618cb1b9d332ea7825e2572cb48.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;共享存储&lt;/h3&gt; 
&lt;p&gt;ETS 是 Erlang 内置的单机 KV 存储，共享存储使用 ETS 维护了两个组件：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Index&lt;/strong&gt;：是 MsgId 到消息位置的映射。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;FileSummary&lt;/strong&gt;：文件到文件统计信息的映射。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;经典队列在读取消息时通过索引文件中的 Publish Entry 获取到 MsgId 后还需要从 Index 中获取消息的具体位置，包括这条消息所在的文件、偏移以及它的引用计数。相同 MsgId 的多条消息只会被写入一次，删除消息时，它的引用计数会被减一。文件统计信息中记录了文件中有效数据的数量，这在整理文件时会被用到。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-0c96ca072a09a3c72ec0b3a9950eed78807.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;共享存储文件的大小由参数 msg_store_file_size_limit 控制，默认为 16MB。每个文件由若干个 Entry 组成，每个 Entry 的具体组成如下所示。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-c58a84b548a6cf8d3a9adc321ae22d8fe7c.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;核心工作流程&lt;/h2&gt; 
&lt;h3&gt;消息写入&lt;/h3&gt; 
&lt;p&gt;RabbitMQ 根据消息大小决定将消息写入到哪个存储。如果消息大小大于或等于某个值（由参数 queue_index_embed_msgs_below 控制，默认为 4KB），RabbitMQ 会将其存于共享存储中，否则会存于队列存储中。&lt;/p&gt; 
&lt;p&gt;将消息写入存储时会直接写到内部缓冲区：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;队列存储内部的缓冲区大小由参数 classic_queue_store_v2_max_cache_size 控制，默认为 512KB。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;共享存储内部的缓冲区大小则固定为 1MB。将消息写入到共享存储时除了需要写入到缓冲区外，还需要更新它内部的 Index 和 FileSummary 组件。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;缓冲区大小超过限制后会 Flush 其中的数据，值得注意的是，Flush 时不会调用 Fsync，而是调用 Write 将数据写入到操作系统的 Page Cache 上。这种方式通过牺牲数据安全性以获得更低的延迟，如果需要更强的数据安全性应使用仲裁队列。&lt;/p&gt; 
&lt;p&gt;存储写入完成后需要在队列索引文件中写入 Publish Entry，此时消息被认为成功写入了。之后还要更新内存中的消息缓存，以加速消息读取。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-06d103e2eaab27dd60507d35936ea839341.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;消息读取&lt;/h2&gt; 
&lt;p&gt;经典队列在内存中维护了专门的缓存来提升读取性能，底层存储会根据队列的消费速率批量读取不超过 2048 条消息到缓存中。读取消息时会先检查缓存中是否有这条消息，如果有则直接返回，否则会先将消息批量读取到缓存。&lt;/p&gt; 
&lt;p&gt;将消息从磁盘批量读取到内存中需要先到队列索引中读取元数据，然后分别到队列存储和共享存储中读取消息体，并将它们组装到一起。即便缓存中有消息，但是实际的消息体仍然可能不在缓存中，因为过大（&amp;gt;12KB）过少（&amp;lt;10 条）的消息的消息体并不会被读到缓存里，需要在投递消息时逐条去磁盘中读取消息体。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-62aec5d5efbcb40873a77832b210429310c.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;文件整理&lt;/h2&gt; 
&lt;p&gt;共享存储会定时整理有效数据占比低于一半的文件以回收空间。整个过程分为三步：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;将文件末尾的有效数据拷贝到文件前面的无效数据处。&lt;/li&gt; 
 &lt;li&gt;更新 Index 组件。&lt;/li&gt; 
 &lt;li&gt;在没有进程读取文件后截断文件。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;RabbitMQ 会将文件中的无效数据置 0，称为空洞（blank holes）。在文件整理时，RabbitMQ 从最后一条有效消息开始查看其是否能填补前面的空洞，如果可以就将其拷贝到前面，如果它比前面的任何一个空洞都大，那么这一次的文件整理将无法释放任何空间，这是为了防止意外覆盖被移动过的消息。Index 组件中存储了消息的位置，拷贝完成后需要更新对应消息的位置。在没有进程读取文件后就可以截断这个文件以节省磁盘空间。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-92a86e83dda9f187412ce495b8d272dad17.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;运维实践&lt;/h2&gt; 
&lt;h3&gt;发送确认&lt;/h3&gt; 
&lt;p&gt;为了提高消息发送的可靠性，我们推荐用户打开发送确认（Confirm）。RabbitMQ 会在将消息从缓冲区 Flush 到磁盘后向客户端发送 Confirm，此时生产者可以认为这条消息已经被成功发送到队列。&lt;/p&gt; 
&lt;h3&gt;消费确认&lt;/h3&gt; 
&lt;p&gt;为了提高消息消费的可靠性，我们推荐用户打开手动确认（Manual Ack）。RabbitMQ 在收到 Ack 后会写入 Entry 到队列索引中，只有在索引文件中的所有 Publish Entry 全部被 Ack 后，才会删除该文件。如果消费者在发送 Ack 前宕机了，RabbitMQ 会重复投递这条消息，确保消息能真正被消费掉。未被客户端 Ack 的消息会堆积在内存中，如果数量过多则可能触发内存水位限制，甚至导致服务端 OOM。因此在用户打开手动确认后，我们建议用户设置一次最多能预取（prefetch count）的消息数量，避免大量消息堆积在客户端和服务端内存中。&lt;/p&gt; 
&lt;h3&gt;保证队列尽可能短&lt;/h3&gt; 
&lt;p&gt;保持生产和消费速率一致可以减少消息堆积。RabbitMQ 会在发现索引文件中的消息全部被消费后删除索引文件和对应的存储文件，这样可以减少磁盘空间占用。队列的堆积数量少意味着多数读取都可以从缓存中直接读取到消息体，从而提升读取性能。&lt;/p&gt; 
&lt;h2&gt;总结&lt;/h2&gt; 
&lt;p&gt;本文全面探讨了 RabbitMQ 经典队列的底层存储机制，包括其整体架构、实现原理及运维实践。经典队列的底层存储由队列索引和消息存储两大模块构成，其中消息存储又细分为共享存储和队列存储，通过精心设计的文件结构和内存管理策略，实现了高效的消息读写与存储管理。文章详细解析了队列索引、消息存储（包括共享存储和队列存储）的文件结构，介绍了消息读取与写入的流程，以及文件整理的逻辑。在运维实践方面，强调了发送确认、消费确认与保持队列尽可能短的重要性，并给出了相应的配置建议。希望通过本文的介绍，可以帮助大家深入理解 RabbitMQ 经典队列的底层存储机制，为实际应用中的性能优化与故障排查提供有力支持。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4587289/blog/18684804</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4587289/blog/18684804</guid>
      <pubDate>Wed, 16 Jul 2025 07:21:00 GMT</pubDate>
      <author>原创</author>
    </item>
  </channel>
</rss>
