<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 简体中文</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 03 Jun 2025 21:44:24 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>​​字节跳动开源 Computer Use Agent：引领人机交互新革命​</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;div class="ckeditor-html5-video"&gt; 
 &lt;video controlslist="nodownload"&gt;
  &amp;nbsp;
 &lt;/video&gt; 
&lt;/div&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;字节跳动开源 Computer Use Agent：引领人机交互新革命&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;在人工智能技术日新月异的今天，字节跳动再次以创新者的姿态，宣布开源其自主研发的 Computer Use Agent（以下简称 CUA）。这一举措不仅标志着字节跳动在 AI 领域的又一重大突破，更为全球开发者提供了一个强大的工具，以前所未有的方式与计算机进行交互。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;CUA：从对话到行动的跨越&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;传统的 AI 助手往往停留在「对话式人工智能」的层面，即通过自然语言处理理解用户意图，并给出相应的回答或建议。然而，CUA 则实现了从「对话」到「行动」的跨越。它不仅能够理解用户的指令，更能通过自研的 Doubao 1.5 UI-TARS 模型，直接与计算机的图形用户界面（GUI）进行交互，执行复杂的任务。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;Doubao 1.5 UI-TARS 模型融合了视觉能力与高级推理，能够精准捕捉用户指令背后的场景意图。无论是视频剪辑、演示文稿制作，还是自媒体账号运维，CUA 都能轻松应对，极大地提升了用户的工作效率。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;强大的技术支撑&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;CUA 的强大背后，是字节跳动在 AI 领域的深厚积累。其核心技术包括：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;感知能力&lt;/strong&gt;：CUA 能够截取计算机屏幕图像，对数字环境中的内容进行情境化处理，为决策提供依据。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;推理能力&lt;/strong&gt;：借助思维链推理，CUA 能够评估观察结果，跟踪中间步骤的进展，动态适应新的挑战和不可预见的变化。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;行动能力&lt;/strong&gt;：利用虚拟鼠标和键盘，CUA 能够执行键入、点击和滚动等操作，实现与计算机的无缝交互。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;多系统支持与极致性能&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;CUA 不仅支持 Windows 操作系统，还兼容 Linux 系统，满足了不同用户的需求。Windows 系统拥有丰富的传统软件生态，而 Linux 系统则更加轻量与灵活，适合企业级计算环境。此外，依托字节跳动分布式架构的底层技术积累，CUA 实现了云主机实例的秒级启动响应，动态负载均衡机制可根据业务流量实时调整资源分配，构建从资源申请到服务就绪的极致弹性链路。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;灵活的服务组合&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;CUA 采用高内聚低耦合的微服务架构设计，支持全栈式部署与组件化调用。对于大型互联网客户，可以按需编排 Agent Planer、MCP Server、Sandbox Manager 等服务；对于小型客户，则提供全栈式的一体化解决方案，满足不同规模用户的需求。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;开源与社区支持&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;字节跳动此次开源 CUA，不仅是为了分享技术成果，更是为了与全球开发者共同构建一个更加智能、高效的人机交互生态。开发者可以通过 GitHub 轻松获取 CUA 的代码，并参与到其开发与优化中来。此外，字节跳动还提供了丰富的文档和社区支持，帮助开发者快速上手并充分利用 CUA 的强大功能。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;展望未来&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;随着人工智能技术的不断发展，人机交互将变得更加自然、高效。字节跳动开源 CUA，无疑为这一趋势注入了新的动力。未来，CUA 有望在更多领域得到应用，如智能家居、远程办公、教育培训等，为用户带来更加便捷、智能的体验。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;结语&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;字节跳动开源 Computer Use Agent，是其在 AI 领域的一次重要布局，也是对全球开发者的一份厚礼。通过开源 CUA，字节跳动不仅分享了其技术成果，更与全球开发者共同探索人机交互的未来。让我们期待 CUA 在未来的发展中，为用户带来更多惊喜与便利。&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;开源链接&lt;/strong&gt;：&lt;span style="background-color:#f3f3f3; color:rgba(0, 0, 0, 0.9)"&gt;https://github.com/volcengine/ai-app-lab/tree/main/demohouse/computer_use&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353373</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353373</guid>
      <pubDate>Sat, 10 May 2025 11:42:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>11Labs 发布对话式 AI 2.0，集成话轮转换和知识库，多语言多角色多模态</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1920" src="https://oscimg.oschina.net/oscnet/up-fb27eb9853e5a2ba39b1a40c448360774ba.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;开发者朋友们大家好：&lt;/p&gt; 
&lt;p&gt;这里是 &lt;strong&gt;「RTE 开发者日报」&lt;/strong&gt; ，每天和大家一起看新闻、聊八卦。我们的社区编辑团队会整理分享 RTE（Real-Time Engagement） 领域内「有话题的 &lt;strong&gt;技术&lt;/strong&gt; 」、「有亮点的 &lt;strong&gt;产品&lt;/strong&gt; 」、「有思考的 &lt;strong&gt;文章&lt;/strong&gt; 」、「有态度的 &lt;strong&gt;观点&lt;/strong&gt; 」、「有看点的 &lt;strong&gt;活动&lt;/strong&gt; 」，但内容仅代表编辑的个人观点，欢迎大家留言、跟帖、讨论。&lt;/p&gt; 
&lt;p&gt;本期编辑：@赵怡岭、@鲍勃&lt;/p&gt; 
&lt;h2&gt;01 有话题的技术&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1、通义实验室语音团队推出 OmniAudio 技术，可直接从 360° 视频生成 FOA 空间音频&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;5 月 29 日，阿里通义大模型公布了「空间音频生成」模型——OmniAudio。据通义团队介绍，OmniAudio 能够直接从 360° 视频生成空间音频。&lt;/p&gt; 
&lt;p&gt;为了解决「如何利用全景视频生成与之匹配的空间音频」这一问题，通义实验室语音团队提出了 360V2SA（360-degree Video to Spatial Audio）任务，旨在直接从 360° 视频生成 FOA（First-order Ambisonics）音频。&lt;/p&gt; 
&lt;p&gt;据悉，FOA 是一种标准的 3D 空间音频格式，能够捕捉声音的方向性，实现真实的 3D 音频再现。&lt;/p&gt; 
&lt;p&gt;受限于现有的配对 360° 视频和空间音频数据极为稀缺，通义团队还为此精心设计并构建了 Sphere360 数据集。该数据集包含大量高质量的 360° 视频和相应的 FOA 空间音频。这是一个包含超过 10.3 万个真实世界视频片段的数据集，涵盖 288 种音频事件，总时长达到 288 小时。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img height="528" src="https://oscimg.oschina.net/oscnet/up-0dbe15c65229d3de4c65a785c1399b0d386.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;另外，OmniAudio 的训练方法分为了「自监督的 coarse-to-fine 流匹配预训练」以及「基于双分支视频表示的有监督微调」两个阶段。&lt;/p&gt; 
&lt;p&gt;目前，OmniAudio 已上架 GitHub 并同步公布了代码、数据开源仓库，以及相关技术论文。&lt;/p&gt; 
&lt;p&gt;项目主页：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fomniaudio-360v2sa.github.io%2F" target="_blank"&gt;https://omniaudio-360v2sa.github.io/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;代码和数据开源仓库：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fliuhuadai%2FOmniAudio" target="_blank"&gt;https://github.com/liuhuadai/OmniAudio&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;论文地址：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2504.14906" target="_blank"&gt;https://arxiv.org/abs/2504.14906&lt;/a&gt; （@APPSO、@阿里语音 AI）&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2、可灵 2.1 系列视频模型发布，拥有卓越的动态效果表现，更强的语义响应&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;快手可灵 AI 发布了其 KLING 2.1 系列视频模型。据悉，可灵 2.1 系列拥有标准版和大师版两个版本模型：&lt;/p&gt; 
&lt;p&gt;标准版支持标准（720P）和高品质（1080P）两种模式。价格方面，标准模式为 20 积分/5 秒，高品质模式为 35 积分/5 秒。&lt;/p&gt; 
&lt;p&gt;大师模式全面升级为 1080P 输出，拥有卓越的动态效果表现，更强的语义响应。可灵 2.1 标准版暂仅支持「图生视频」功能，「文生视频」功能将在近期上线。目前，可灵 AI 官网已可体验可灵 2.1 系列模型。&lt;/p&gt; 
&lt;p&gt;可灵 AI：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapp.klingai.com%2Fcn%2F" target="_blank"&gt;https://app.klingai.com/cn/&lt;/a&gt; （@APPSO）&lt;/p&gt; 
&lt;h2&gt;02 有亮点的产品&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1、PlayDiffusion：一种基于扩散的修补模型，具有修改现有语音的能力&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;PlayDiffusion 是一个让用户能够通过简单编辑文本来编辑音频/视频内容中语音的模型。该模型是一种基于扩散的修补模型，具有修改现有语音的能力，通过该模型可以像编辑文档一样编辑语音，无需重新录制。只需上传音频/视频，编辑自动生成的转录文本，即可获得更新后的语音。现已开源。&lt;/p&gt; 
&lt;p&gt;工作原理：&lt;/p&gt; 
&lt;p&gt;1、上传内容；&lt;/p&gt; 
&lt;p&gt;2、模型转录语音；&lt;/p&gt; 
&lt;p&gt;3、你编辑转录文本；&lt;/p&gt; 
&lt;p&gt;4、模型使用相同的声音进行更改。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img height="618" src="https://oscimg.oschina.net/oscnet/up-8ff87eed051a2f090ed7f43ab900a6cc0c7.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;并且 PlayDiffusion 不是像自回归模型那样逐个生成标记，而是能够一次性预测所有标记，并在大约 20 个去噪步骤中进行优化。这使得生成步骤的效率提高了最多 50 倍，同时没有任何损失。&lt;/p&gt; 
&lt;p&gt;GitHub: &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fplayht%2FPlayDiffusion" target="_blank"&gt;https://github.com/playht/PlayDiffusion&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Demo: &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fspaces%2FPlayHT%2FPlayDiffusion" target="_blank"&gt;https://huggingface.co/spaces/PlayHT/PlayDiffusion&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Fal: &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffal.ai%2Fmodels%2Ffal-ai%2Fplayai%2Finpaint%2Fdiffusion" target="_blank"&gt;https://fal.ai/models/fal-ai/playai/inpaint/diffusion&lt;/a&gt; (@HammadH4@X、 @PlayAIOfficial@X)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2、ElevenLabs 发布对话式人工智能 2.0 ，具备新一代先进的轮流发言功能和全面支持企业级应用&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;ElevenLabs 发布 Conversational AI 2.0，实现了自然转换对话能力，能识别语气词判断用户意图，避免尴尬停顿和不当打断。ElevenLabs Conversational AI 现已支持多模态，用户可以创建能够通过文本、语音或同时通过两者进行交流的智能体。&lt;/p&gt; 
&lt;p&gt;ElevenLabs 开发了批量呼叫功能，使用户能够自动化并扩展外呼语音通信。批量呼叫允许使用用户的对话式 AI 智能体同时发起多个外呼，非常适合发送警报、进行调查或向庞大联系人列表传递个性化信息等用例，提升速度和一致性。 新系统集成了多语言自动识别功能和检索增强生成（RAG）技术，支持多模态交互，一个 AI 助手可同时处理文本和语音。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img height="464" src="https://oscimg.oschina.net/oscnet/up-2268b07cc714d7df61acc312e4021b9d1f0.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;新功能概览：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;新一代先进的轮流发言模型；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;语言切换；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;多角色模式；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;多模态；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;批量调用；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;内置 RAG。（@elevenlabsio@X、@腾讯研究院、@海波学者聊 AI）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3、马斯克宣布推出 XChat，具备消息「阅后即焚」和无需电话号码即可使用的网络通话/视频功能&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1024" src="https://oscimg.oschina.net/oscnet/up-641ef9a7fa2678ebfb7b35f9975ecb87baa.png" width="1024" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;日前，马斯克宣布推出一款名为「XChat」的即时通信服务平台。据悉，该平台将具备消息「阅后即焚」和无需电话号码即可使用的网络通话/视频功能。&lt;/p&gt; 
&lt;p&gt;马斯克宣称 XChat 采用了「比特币风格的加密」，并用 Rust 语言开发，号称「全新架构」。&lt;/p&gt; 
&lt;p&gt;据 The Information 报道指出，XChat 本质上是为了与 WhatsApp、Telegram，甚至是微信展开竞争。&lt;/p&gt; 
&lt;p&gt;值得一提的是，Telegram 创始人 Pavel Durov 在一周前曾表示其与马斯克旗下的 xAI 签署了合作协议，并在 Telegram 中接入了 xAI 的 AI 聊天机器人 Grok。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;端到端加密：消息、通话内容只有通信双方能看到，第三方（包括 X 平台）无法窥探；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;阅后即焚：可以设置消息在一定时间后自动删除，比如 10 分钟后，保护隐私更彻底；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任意文件传输：支持发送任何类型的文件，包括照片、视频、文档等，不再受限于格式或大小；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;跨平台音视频通话：无需手机号即可拨打，支持手机、电脑等多设备，通话内容同样加密。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;(@APPSO、@Techub Info)&lt;/p&gt; 
&lt;h2&gt;03 Real-Time AI Demo&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1、使用手势和语音命令控制 3D 模型，包括移动、旋转、缩放、动画&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;来自 X 上的@measure_plan：你现在可以导入任何 3D 模型，并使用手势+语音来控制它&lt;/p&gt; 
&lt;h2&gt;04 有态度的观点&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1、Anthropic CEO：未来五年 AI 或取代一半白领工作&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;最近在旧金山总部接受采访时，Anthropic CEO Dario Amodei 发出严峻警告：AI 的迅猛发展可能在未来一到五年内淘汰多达一半的初级白领岗位，社会失业率或飙升至 10% 到 20%。&lt;/p&gt; 
&lt;p&gt;Amodei 表示，现在是时候停止对 AI 潜在影响的「美化」，技术、金融、法律、咨询等多个行业的初级职位将面临大规模消失，而多数普通人对此几乎一无所知，也缺乏足够的重视。&lt;/p&gt; 
&lt;p&gt;他希望通过公开发声，促使政策制定者与同行开始采取行动，为社会转型做准备。「大多数人并不知道这件事就要发生，听起来像疯话，但他们不信。」&lt;/p&gt; 
&lt;p&gt;Amodei 表示，虽然 AI 也带来医疗突破、经济增长等潜力，但其风险同样不可忽视。「癌症治好了，GDP 每年增长 10%，财政平衡……可有 20% 的人失去了工作。」他坦言，这样的情境极可能在技术爆发中同时发生。(@APPSO)&lt;/p&gt; 
&lt;p&gt;&lt;img height="411" src="https://oscimg.oschina.net/oscnet/up-02d9ba069382d25ac98e7b02d29ed2b79ba.png" width="696" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;更多 Voice Agent 学习笔记：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FSqXLZvq_zwWDcOVKbAb7HQ" target="_blank"&gt;级联 vs 端到端、全双工、轮次检测、方言语种、商业模式…语音 AI 开发者都在关心什么？丨 Voice Agent 学习笔记&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F7QPgzp8kDR_9iHUa4oFeiA" target="_blank"&gt;a16z 最新报告：AI 数字人应用层即将爆发，或将孕育数十亿美金市场丨 Voice Agent 学习笔记&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FUM1qs2IT1S6kJ4sZf_k3uA" target="_blank"&gt;a16z 合伙人：语音交互将成为 AI 应用公司最强大的突破口之一，巨头们在 B2C 市场已落后太多丨 Voice Agent 学习笔记&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FWI0gE4x-TZG0gdgSV_bVSA" target="_blank"&gt;ElevenLabs 33 亿美元估值的秘密：技术驱动+用户导向的「小熊软糖」团队丨 Voice Agent 学习笔记&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FSVsgDF8F1hxy3-e5-ntGbw" target="_blank"&gt;端侧 AI 时代，每台家居设备都可以是一个 AI Agent 丨 Voice Agent 学习笔记&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F4K5wdUEDxrs1afHZSAIuqg" target="_blank"&gt;世界最炙手可热的语音 AI 公司，举办了一场全球黑客松，冠军作品你可能已经看过&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FJCYzc1Ig-HFFAN3sTQDYbw" target="_blank"&gt;多模态 AI 怎么玩？这里有 18 个脑洞&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FrN9poD_X6SDxRLMsudg_xg" target="_blank"&gt;AI 重塑宗教体验，语音 Agent 能否成为突破点？&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FeFS1mnAbUpAJdiLSSGWpSA" target="_blank"&gt;对话 TalktoApps 创始人：Voice AI 提高了我五倍的生产力，语音输入是人机交互的未来&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fr2z1bilamX6YWTg90F8xYA" target="_blank"&gt;a16z 最新语音 AI 报告：语音将成为关键切入点，但非最终产品本身（含最新图谱）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;写在最后：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;我们欢迎更多的小伙伴参与 &lt;strong&gt;「RTE 开发者日报」&lt;/strong&gt; 内容的共创，感兴趣的朋友请通过开发者社区或公众号留言联系，记得报暗号「共创」。&lt;/p&gt; 
&lt;p&gt;对于任何反馈（包括但不限于内容上、形式上）我们不胜感激、并有小惊喜回馈，例如你希望从日报中看到哪些内容；自己推荐的信源、项目、话题、活动等；或者列举几个你喜欢看、平时常看的内容渠道；内容排版或呈现形式上有哪些可以改进的地方等。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img height="241" src="https://oscimg.oschina.net/oscnet/up-486853450499be2bd7283c3af3f26b7bef1.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;素材来源官方媒体/网络新闻&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353371</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353371</guid>
      <pubDate>Sat, 10 May 2025 11:34:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>腾讯跨端框架 Kuikly 鸿蒙版正式开源</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;Kuikly 是腾讯开源的跨端开发框架，基于 Kotlin Multiplatform 技术构建，为开发者提供了技术栈更统一的跨端开发体验。&lt;/p&gt; 
&lt;p&gt;在 Android、iOS 开源基础上，本次开源鸿蒙平台支持和 Compose DSL 支持，进一步提升业务多端适配和鸿蒙开发效率。&lt;/p&gt; 
&lt;p&gt;据介绍，目前 Kuikly 鸿蒙版已接入腾讯多款业务，开发并上架鸿蒙 App，如 QQ 浏览器、腾讯新闻、搜狗输入法、全民 K 歌、自选股等。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;在鸿蒙平台上，Kuiky 打开页面速度比 RN 快 6 倍：&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height="836" src="https://static.oschina.net/uploads/space/2025/0603/184902_dwpK_2720166.png" width="765" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Kuikly 基于 Kotlin MultiPlatform（KMP）技术，它利用了 KMP 逻辑跨平台的能力，并抽象出通用的跨平台 UI 渲染接口，复用平台的 UI 组件，从而达到 UI 跨平台，具有轻量、高性能、可动态化等优点；&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;Kuikly 包括「KuiklyUI」和「KuiklyBase」两部分。其中，KuiklyUI 支持业务使用自研 DSL 和 Compose DSL 进行 UI 跨端开发，采用轻量、原生渲染方式，支持页面级动态化；KuiklyBase 支持 UI 和 KMP 逻辑全面跨端的基础能力和设施，包括丰富的跨端组件，完善的调试、构建、发布、监控配套工具链，稳定性监控能力等。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;同时，KuiklyBase 基建同样支持逻辑跨端。 让开发者&lt;strong&gt;可以使用 Kotlin 创建 Android、iOS、鸿蒙、Web、小程序应用&lt;/strong&gt;。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-911df639ea27ac02b452b9a379738d91ddd.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353362</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353362</guid>
      <pubDate>Sat, 10 May 2025 10:51:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>深入协议层：tlmqtt 如何通过自定义编解码器实现高性能 MQTT Broker</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;strong&gt;tlmqtt 是一款基于 Java 开发、底层依赖 Netty 和 Project Reactor 的完全开源免费的高性能 MQTT Broker。它提供完整的 MQTT 协议解析、QoS 0/1/2 消息支持、自定义消息存储、可扩展的认证机制以及数据桥接功能。&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;MQTT 编解码：深入控制与理解&lt;/h1&gt; 
&lt;p&gt;在分析众多开源 &lt;code&gt;MQTT Broker&lt;/code&gt;实现时，发现绝大多数（约 99%）都直接使用 &lt;code&gt;Netty&lt;/code&gt;提供的编解码器，如下所示：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;pipeline.addLast(MqttEncoder.INSTANCE);
pipeline.addLast(new MqttDecoder(maxBytesInMessage));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这种方式让开发者无需关注协议解析细节，专注于业务逻辑开发，是其显著优势。然而，它也带来了两个关键限制：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;高度依赖 &lt;code&gt;Netty&lt;/code&gt;： 扩展性和灵活性受限于&lt;code&gt;Netty&lt;/code&gt;的实现&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;协议理解不足： 开发者容易停留在「知其然」层面，对 &lt;code&gt;CONNECT&lt;/code&gt;、&lt;code&gt;PUBLISH&lt;/code&gt;等报文的具体结构和解析过程缺乏深入理解&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;tlmqtt&lt;/strong&gt; 选择了自定义编解码器的实现路径，对 &lt;code&gt;MQTT&lt;/code&gt;消息报文进行逐步解析。这为我们提供了更深入的控制、灵活性和扩展性，同时也是深入理解&lt;code&gt;MQTT&lt;/code&gt;协议细节的实践。&lt;/p&gt; 
&lt;h1&gt;Netty 基础与 MQTT 协议的挑战&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;Java&lt;/code&gt;高性能网络开发离不开 &lt;code&gt;Netty&lt;/code&gt;。它提供了多种开箱即用的编解码器，如固定长度、分隔符和基于长度域的帧解码器。在实现自定义编解码器之前，必须理解 &lt;code&gt;MQTT&lt;/code&gt;协议对消息长度的独特定义方式 &lt;strong&gt;剩余长度编码规则：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;单个字节可表示 0 到 127 的值。&lt;/li&gt; 
 &lt;li&gt;大于 127 的值处理如下： &amp;nbsp; &amp;nbsp; &amp;nbsp;- 每个字节的，低 7 位 (bits 0-6) 用于编码数据。 &amp;nbsp;&amp;nbsp; &amp;nbsp;- 最高位 (bit 7) 作为标识位：1 表示还有后续字节，0 表示结束。&lt;/li&gt; 
 &lt;li&gt;剩余长度最多由，四个字节，表示。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;显然， &lt;code&gt;MQTT&lt;/code&gt;的这种变长编码方式与 &lt;code&gt;Netty&lt;/code&gt;内置的标准长度域解码器（通常是固定字节数表示长度）并不完全匹配。因此，自定义编解码器成为必然选择。&lt;/p&gt; 
&lt;h2&gt;解码器实现：从字节流到消息对象&lt;/h2&gt; 
&lt;p&gt;自定义解码器需继承 &amp;nbsp;&lt;code&gt;Netty&lt;/code&gt;的 &amp;nbsp;&lt;code&gt;ByteToMessageDecoder&lt;/code&gt;类，核心任务是将接收到的 &lt;code&gt;ByteBuf&lt;/code&gt;字节流转换为业务逻辑所需的 &lt;code&gt;AbstractTlMessage&lt;/code&gt;对象（及其各种具体子类，如 &amp;nbsp;&lt;code&gt;TlMqttConnectReq&lt;/code&gt;）。 核心 &amp;nbsp;&lt;code&gt;decode&lt;/code&gt;方法流程如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;protected void decode(ChannelHandlerContext ctx, ByteBuf in, List&amp;lt;Object&amp;gt; out) throws Exception {
&amp;nbsp; &amp;nbsp; // 1. 检查基本长度：可读字节数小于 2(固定头最小长度)，等待更多数据
&amp;nbsp; &amp;nbsp; if (in.readableBytes() &amp;lt; MIN_LENGTH) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;
&amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; // 2. 标记当前读指针位置，以便后续数据不足时回退
&amp;nbsp; &amp;nbsp; in.markReaderIndex();

&amp;nbsp; &amp;nbsp; // 3. 读取第 1 字节：包含消息类型 (高 4 位) 和标志位 (低 4 位)
&amp;nbsp; &amp;nbsp; short firstByte = in.readUnsignedByte();
&amp;nbsp; &amp;nbsp; // 4. 解码剩余长度 (变长编码)
&amp;nbsp; &amp;nbsp; int remainingLength = decodeRemainingLength(in);

&amp;nbsp; &amp;nbsp; // 5. 检查载荷数据是否完整到达 (剩余长度指的就是载荷长度)
&amp;nbsp; &amp;nbsp; if (in.readableBytes() &amp;lt; remainingLength) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; in.resetReaderIndex(); // 数据不足，重置读指针，等待后续数据
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;
&amp;nbsp; &amp;nbsp; }

&amp;nbsp; &amp;nbsp; // 6. 数据完整：读取载荷部分到临时 ByteBuf
&amp;nbsp; &amp;nbsp; ByteBuf payloadBuf = in.readBytes(remainingLength);
&amp;nbsp; &amp;nbsp; // 可选：打印原始报文 (十六进制) - TlLog.logger("mqtt raw hex", payloadBuf);
&amp;nbsp; &amp;nbsp; try {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // 7. 提取消息类型 (右移 4 位取高 4 位)
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int messageType = firstByte &amp;gt;&amp;gt; Constant.MESSAGE_BIT;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MqttMessageType mqttType = MqttMessageType.valueOf(messageType);

&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // 8. 根据消息类型，分派给对应的具体解码器构建请求对象
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; AbstractTlMessage req = switch (mqttType) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case CONNECT -&amp;gt; connectDecoder.build(payloadBuf, firstByte, remainingLength);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case DISCONNECT -&amp;gt; disConnectDecoder.build(payloadBuf, firstByte, remainingLength);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case PUBLISH -&amp;gt; publishDecoder.build(payloadBuf, firstByte, remainingLength);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case PUBACK -&amp;gt; pubAckDecoder.build(payloadBuf, firstByte, remainingLength);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case PUBREC -&amp;gt; pubRecDecoder.build(payloadBuf, firstByte, remainingLength);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case PUBREL -&amp;gt; pubRelDecoder.build(payloadBuf, firstByte, remainingLength);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case PUBCOMP -&amp;gt; pubCompDecoder.build(payloadBuf, firstByte, remainingLength);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case SUBSCRIBE -&amp;gt; subscribeDecoder.build(payloadBuf, firstByte, remainingLength);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case UNSUBSCRIBE -&amp;gt; unSubscribeDecoder.build(payloadBuf, firstByte, remainingLength);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case PINGREQ -&amp;gt; heartBeatDecoder.build(payloadBuf, firstByte, remainingLength);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; default -&amp;gt; throw new IllegalArgumentException("Unknown MQTT message type: " + mqttType);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; };
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; out.add(req); // 9. 将解析好的消息对象加入输出列表，传递给后续 Handler
&amp;nbsp; &amp;nbsp; } finally {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; payloadBuf.release(); // 10. 确保临时 ByteBuf 资源释放
&amp;nbsp; &amp;nbsp; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;关键辅助方法：剩余长度解码 ( &lt;code&gt;decodeRemainingLength&lt;/code&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;private int decodeRemainingLength(ByteBuf in) {
&amp;nbsp; &amp;nbsp; int multiplier = 1; // 乘数因子 (128^0, 128^1, ...)
&amp;nbsp; &amp;nbsp; int value = 0; &amp;nbsp; &amp;nbsp; &amp;nbsp;// 累积计算出的剩余长度值
&amp;nbsp; &amp;nbsp; byte encodedByte;
&amp;nbsp; &amp;nbsp; do {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; encodedByte = in.readByte(); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// 读取一个编码字节
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value += (encodedByte &amp;amp; 0x7F) * multiplier; // 取低 7 位数据并乘以当前乘数
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; multiplier *= 128; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// 乘数递增 (128^1, 128^2, ...)
&amp;nbsp; &amp;nbsp; } while ((encodedByte &amp;amp; 0x80) != 0); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // 检查最高位 (标识位) 是否为 1 (还有后续字节)
&amp;nbsp; &amp;nbsp; return value;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;根据解析出的消息类型，数据会被分派给对应的具体解码器（如 &amp;nbsp;&lt;code&gt;TlMqttConnectDecoder&lt;/code&gt;）。这些解码器通常采用模块化设计，包含 &lt;code&gt;decodeFixedHeader&lt;/code&gt;（固定头）、 &lt;code&gt;decodeVariableHeader&lt;/code&gt;（可变头）和 &lt;code&gt;decodePayload&lt;/code&gt;（载荷）三个核心方法。 以 &amp;nbsp;&lt;code&gt;CONNECT&lt;/code&gt;报文解码 ( &lt;code&gt;TlMqttConnectDecoder&lt;/code&gt;) 为例：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;// 解码固定头 (相对简单，主要是类型和长度)
TlMqttFixedHead decodeFixedHeader(int remainingLength) {
&amp;nbsp; &amp;nbsp; TlMqttFixedHead fixedHead = new TlMqttFixedHead();
&amp;nbsp; &amp;nbsp; fixedHead.setMessageType(MqttMessageType.CONNECT);
&amp;nbsp; &amp;nbsp; fixedHead.setLength(remainingLength); // 设置整个报文剩余长度
&amp;nbsp; &amp;nbsp; return fixedHead;
}

// 解码可变头 (包含协议名、版本、连接标志和保活时间)
TlMqttConnectVariableHead decodeVariableHeader(ByteBuf buf) {
&amp;nbsp; &amp;nbsp; TlMqttConnectVariableHead variableHead = new TlMqttConnectVariableHead();

&amp;nbsp; &amp;nbsp; // 1. 协议名 (通常是"MQTT")
&amp;nbsp; &amp;nbsp; int protocolNameLen = buf.readUnsignedShort(); // 长度域 (2 字节)
&amp;nbsp; &amp;nbsp; variableHead.setProtocolNameLength(protocolNameLen);
&amp;nbsp; &amp;nbsp; byte[] protocolNameBytes = new byte[protocolNameLen];
&amp;nbsp; &amp;nbsp; buf.readBytes(protocolNameBytes);
&amp;nbsp; &amp;nbsp; String protocolName = new String(protocolNameBytes, StandardCharsets.UTF_8); // 显式指定字符集

&amp;nbsp; &amp;nbsp; // 2. 协议版本 (e.g., 4 for MQTT 3.1.1)
&amp;nbsp; &amp;nbsp; short protocolVersion = buf.readUnsignedByte();
&amp;nbsp; &amp;nbsp; variableHead.setProtocolVersion(protocolVersion);

&amp;nbsp; &amp;nbsp; // 3. 连接标志字节 (Connect Flags) - 关键!
&amp;nbsp; &amp;nbsp; int connectFlags = buf.readUnsignedByte();
&amp;nbsp; &amp;nbsp; // 位运算解析各个标志位
&amp;nbsp; &amp;nbsp; variableHead.setReserved(connectFlags &amp;amp; 0x01); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Bit 0 (保留位，必须为 0)
&amp;nbsp; &amp;nbsp; variableHead.setCleanSession((connectFlags &amp;gt;&amp;gt; 1) &amp;amp; 0x01); // Bit 1 (Clean Session)
&amp;nbsp; &amp;nbsp; int willFlag = (connectFlags &amp;gt;&amp;gt; 2) &amp;amp; 0x01; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Bit 2 (Will Flag)
&amp;nbsp; &amp;nbsp; variableHead.setWillFlag(willFlag);
&amp;nbsp; &amp;nbsp; variableHead.setWillQos((connectFlags &amp;gt;&amp;gt; 3) &amp;amp; 0x03); &amp;nbsp; &amp;nbsp; // Bits 3-4 (Will QoS: 0, 1, 2)
&amp;nbsp; &amp;nbsp; variableHead.setWillRetain((connectFlags &amp;gt;&amp;gt; 5) &amp;amp; 0x01); &amp;nbsp;// Bit 5 (Will Retain)
&amp;nbsp; &amp;nbsp; variableHead.setPasswordFlag(((connectFlags &amp;gt;&amp;gt; 6) &amp;amp; 0x01) &amp;gt; 0); // Bit 6 (Password Flag)
&amp;nbsp; &amp;nbsp; variableHead.setUsernameFlag(((connectFlags &amp;gt;&amp;gt; 7) &amp;amp; 0x01) &amp;gt; 0); // Bit 7 (Username Flag)

&amp;nbsp; &amp;nbsp; // 4. 保活时间 (Keep Alive Timer - 秒)
&amp;nbsp; &amp;nbsp; short keepAlive = buf.readShort();
&amp;nbsp; &amp;nbsp; variableHead.setKeepAlive(keepAlive);

&amp;nbsp; &amp;nbsp; log.debug("解析【CONNECT】可变头: 协议名=[{}], 版本=[{}], CleanSession=[{}], "
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; + "WillFlag=[{}], WillQos=[{}], WillRetain=[{}], 用户名标志=[{}], 密码标志=[{}], KeepAlive=[{}]",
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; protocolName, protocolVersion, variableHead.getCleanSession(),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; willFlag, variableHead.getWillQos(), variableHead.getWillRetain(),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; variableHead.isUsernameFlag(), variableHead.isPasswordFlag(), keepAlive);
&amp;nbsp; &amp;nbsp; return variableHead;
}

// 解码载荷 (内容由可变头中的标志位决定)
TlMqttConnectPayload decodePayload(ByteBuf buf, TlMqttConnectVariableHead variableHead) {
&amp;nbsp; &amp;nbsp; TlMqttConnectPayload payload = new TlMqttConnectPayload();

&amp;nbsp; &amp;nbsp; // 1. Client Identifier (必选)
&amp;nbsp; &amp;nbsp; int clientIdLen = buf.readUnsignedShort();
&amp;nbsp; &amp;nbsp; byte[] clientIdBytes = new byte[clientIdLen];
&amp;nbsp; &amp;nbsp; buf.readBytes(clientIdBytes);
&amp;nbsp; &amp;nbsp; payload.setClientId(new String(clientIdBytes, StandardCharsets.UTF_8));

&amp;nbsp; &amp;nbsp; // 2. Will Topic &amp;amp; Will Message (如果 Will Flag = 1)
&amp;nbsp; &amp;nbsp; if (variableHead.getWillFlag() == 1) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int willTopicLen = buf.readUnsignedShort();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; byte[] willTopicBytes = new byte[willTopicLen];
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; buf.readBytes(willTopicBytes);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; payload.setWillTopic(new String(willTopicBytes, StandardCharsets.UTF_8));

&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int willMessageLen = buf.readUnsignedShort();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; byte[] willMessageBytes = new byte[willMessageLen];
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; buf.readBytes(willMessageBytes);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; payload.setWillMessage(new String(willMessageBytes, StandardCharsets.UTF_8));
&amp;nbsp; &amp;nbsp; }

&amp;nbsp; &amp;nbsp; // 3. Username (如果 Username Flag = true)
&amp;nbsp; &amp;nbsp; if (variableHead.isUsernameFlag()) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int usernameLen = buf.readUnsignedShort();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; byte[] usernameBytes = new byte[usernameLen];
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; buf.readBytes(usernameBytes);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; payload.setUsername(new String(usernameBytes, StandardCharsets.UTF_8));
&amp;nbsp; &amp;nbsp; }

&amp;nbsp; &amp;nbsp; // 4. Password (如果 Password Flag = true)
&amp;nbsp; &amp;nbsp; if (variableHead.isPasswordFlag()) { // 使用 VariableHead 中的标志位判断
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int passwordLen = buf.readUnsignedShort();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; byte[] passwordBytes = new byte[passwordLen];
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; buf.readBytes(passwordBytes);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; payload.setPassword(new String(passwordBytes, StandardCharsets.UTF_8));
&amp;nbsp; &amp;nbsp; }

&amp;nbsp; &amp;nbsp; log.debug("解析【CONNECT】载荷: clientId=[{}], willFlag=[{}], willQos=[{}], willTopic=[{}], username=[{}]",
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; payload.getClientId(), variableHead.getWillFlag(), variableHead.getWillQos(),
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; payload.getWillTopic(), payload.getUsername());
&amp;nbsp; &amp;nbsp; return payload;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;其他 &lt;code&gt;MQTT&lt;/code&gt;报文类型（ &lt;code&gt;PUBLISH&lt;/code&gt;, &amp;nbsp;&lt;code&gt;SUBSCRIBE&lt;/code&gt;, &amp;nbsp;&lt;code&gt;PUBACK&lt;/code&gt;等）的解码逻辑遵循类似模式，具体实现可参考对应的解码器类。&lt;/p&gt; 
&lt;p&gt;解码完成后，会得到一个具体的请求对象（如 &amp;nbsp;&lt;code&gt;TlMqttConnectReq&lt;/code&gt;）。该对象随后会被传递给专门处理该类型消息的 &lt;code&gt;ChannelInboundHandler&lt;/code&gt;，例如 &amp;nbsp;&lt;code&gt;TlMqttConnectHandler&lt;/code&gt;：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;public class TlMqttConnectHandler extends SimpleChannelInboundHandler&amp;lt;TlMqttConnectReq&amp;gt; {
&amp;nbsp; &amp;nbsp; @Override
&amp;nbsp; &amp;nbsp; protected void channelRead0(ChannelHandlerContext ctx, TlMqttConnectReq req) throws Exception {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // 在此处实现 CONNECT 请求的核心业务逻辑：
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // 1. 认证 (用户名/密码校验)
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // 2. 会话管理 (新建或复用会话)
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // 3. 遗嘱消息处理
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // 4. 构建并发送 CONNACK 响应
&amp;nbsp; &amp;nbsp; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;编码器实现：从对象到网络字节流&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;tlmqtt&lt;/strong&gt; 的编码器负责将业务逻辑中需要发送给客户端的消息对象（如 &amp;nbsp;&lt;code&gt;TlMqttConnack&lt;/code&gt;, &amp;nbsp;&lt;code&gt;TlMqttPublish&lt;/code&gt;等）序列化为符合 &lt;code&gt;MQTT&lt;/code&gt;协议规范的二进制数据。开发者只需操作这些对象即可：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;// 业务逻辑中创建 CONNACK 响应对象
TlMqttConnack connack = TlMqttConnack.build(cleanSessionPresent, MqttConnectReturnCode.CONNECTION_ACCEPTED);
// 通过通道管理器发送
channelManager.writeAndFlush(clientId, connack);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;编码器（继承 &amp;nbsp;&lt;code&gt;Netty&lt;/code&gt;的 &amp;nbsp;&lt;code&gt;MessageToByteEncoder&lt;/code&gt;）则透明地处理对象到字节流的转换。 以 &lt;code&gt;CONNACK&lt;/code&gt;报文编码 ( &lt;code&gt;TlMqttConnackEncoder&lt;/code&gt;) 为例：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;@ChannelHandler.Sharable // 标记为可共享，通常无状态
@Slf4j // 日志注解
public class TlMqttConnackEncoder extends MessageToByteEncoder&amp;lt;TlMqttConnack&amp;gt; {

&amp;nbsp; &amp;nbsp; @Override
&amp;nbsp; &amp;nbsp; protected void encode(ChannelHandlerContext ctx, TlMqttConnack connack, ByteBuf out) throws Exception {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; TlMqttFixedHead fixedHead = connack.getFixedHead();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; TlMqttConnackVariableHead variableHead = connack.getVariableHead();

&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // 1. 固定头编码
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; byte fixedHeaderByte = (byte) (fixedHead.getMessageType().value() &amp;lt;&amp;lt; 4); // 消息类型 (高 4 位) + 保留位 (低 4 位=0)
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; out.writeByte(fixedHeaderByte);

&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // 2. 剩余长度编码 (CONNACK 固定为 2 字节)
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; out.writeByte(2); // Remaining Length = 2

&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // 3. 可变头编码
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; out.writeByte(variableHead.getSessionPresent()); // Byte 1: Session Present Flag (0 或 1)
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; out.writeByte(variableHead.getConnectReturnCode().getValue()); // Byte 2: Connect Return Code
&amp;nbsp; &amp;nbsp; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;贡献与反馈&lt;/h2&gt; 
&lt;p&gt;欢迎通过以下方式参与项目共建：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;提交 Issue：反馈 Bug 或提出功能建议&lt;/li&gt; 
 &lt;li&gt;提交 PR：优化代码或新增功能（建议先创建 Issue 沟通方案）&lt;/li&gt; 
 &lt;li&gt;Star/Fork：支持项目持续发展&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;联系方式：&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;邮箱：2534798858@qq.com&lt;/li&gt; 
 &lt;li&gt;项目地址：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FZHSQJM%2Ftlmqtt%23" target="_blank"&gt;https://github.com/ZHSQJM/tlmqtt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;项目地址：&lt;a href="https://gitee.com/PiQiHenHaoDeGangTieXia/tlmqtt"&gt;https://gitee.com/PiQiHenHaoDeGangTieXia/tlmqtt&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;tlmqtt 致力于为物联网开发者提供轻量、高效的 MQTT 消息服务，期待您的加入！ 🚀&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353356</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353356</guid>
      <pubDate>Sat, 10 May 2025 09:59:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>三星计划投资 Perplexity AI，将其搜索技术深度整合至 Galaxy 设备</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2025-06-01%2Fsamsung-nears-wide-ranging-deal-with-perplexity-for-ai-features" target="_blank"&gt;彭博社报道称&lt;/a&gt;&lt;/u&gt;，三星电子即将达成一项涉及面广泛的协议，其将投资 Perplexity AI Inc.，并将这家人工智能初创公司的搜索技术置于其设备的核心位置。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0603/161937_vxgK_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;据知情人士透露，两家公司正在洽谈在即将推出的三星设备上预装 Perplexity 的应用程序和助手，并将 Perplexity 的搜索功能集成到三星网络浏览器中。&lt;/p&gt; 
&lt;p&gt;由于谈判是私下进行的，这些知情人士不愿透露姓名。知情人士表示，两家公司还讨论了将 Perplexity 的技术融入三星的 Bixby 虚拟助手。&lt;/p&gt; 
&lt;p&gt;三星计划最早在今年宣布与 Perplexity 的集成，目标是将该服务作为 Galaxy S26 系列手机的默认助手选项，该系列手机将于 2026 年上半年推出。不过，具体细节尚未最终确定，仍有可能发生变化。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-4ce528b30fdd0be47815eec1cbf00ac3ba5.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;知情人士表示，这家科技巨头预计还将是 Perplexity 新一轮融资的最大投资者之一。据彭博社报道，这家初创公司正就融资 5 亿美元、估值 140 亿美元进行深入洽谈。&lt;/p&gt; 
&lt;p&gt;此次广泛的合作可能有助于三星减少对谷歌的依赖，并为其与多家人工智能开发商合作铺平道路，类似于苹果公司针对其设备和服务的战略。对于 Perplexity 而言，此次合作将是其迄今为止最大的移动合作伙伴关系，此前该公司最近与摩托罗拉达成了一项整合协议。&lt;/p&gt; 
&lt;p&gt;三星和 Perplexity 的代表均拒绝置评。&lt;/p&gt; 
&lt;p&gt;据彭博社 4 月报道，两家公司已于今年早些时候就合作展开洽谈。知情人士称，最近几周，双方在韩国会面，最终达成协议。&lt;/p&gt; 
&lt;p&gt;知情人士称，三星和 Perplexity 还讨论了构建一个融合人工智能的操作系统和一款人工智能代理应用程序，这些应用程序可以利用 Perplexity 和其他一系列人工智能助手的功能。&lt;/p&gt; 
&lt;p&gt;苹果也表现出了与 Perplexity 合作的兴趣。据彭博社报道，这家 iPhone 制造商已讨论使用 Perplexity 作为 Google 搜索的替代品，以及替代 Siri 语音助手中 ChatGPT 集成的功能。&lt;/p&gt; 
&lt;p&gt;「我们对 Perplexity 的表现印象深刻，因此我们已开始与他们讨论他们的工作」，苹果服务高级副总裁 Eddy Cue 在最近一次 Google 反垄断审判的证词中表示。&lt;/p&gt; 
&lt;p&gt;目前尚不清楚 Perplexity 与苹果最强劲竞争对手之一三星的关系将如何影响 Perplexity 的这一举措。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353340</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353340</guid>
      <pubDate>Sat, 10 May 2025 08:21:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Snowflake 收购 PostgreSQL 云服务提供商 Crunchy Data</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.wsj.com%2Farticles%2Fsnowflake-to-buy-crunchy-data-for-250-million-233543ab" target="_blank"&gt;据报道&lt;/a&gt;&lt;/u&gt;，美国数据分析软件制造商 Snowflake 计划收购数据库初创公司 Crunch Data。知情人士透露称，这笔交易的价格为 2.5 亿美元。&lt;/p&gt; 
&lt;p&gt;Snowflake 表示，该交易需要获得监管部门的批准和惯常的成交条件。数据显示，Snowflake 周一美股上涨逾 2%。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Snowflake 工程高级副总裁 Vivek Raghunathan 表示：「我们的愿景是为客户提供全球最值得信赖、最全面的数据和人工智能平台。今天我们宣布拟收购 Crunchy Data，再次证明了 Snowflake 是满足所有企业数据和人工智能需求的终极目标。」&lt;/p&gt; 
&lt;p&gt;「我们正在抓住一个价值 3500 亿美元的巨大市场机遇，并满足客户将 Postgres 引入 Snowflake AI 数据云的真实需求。」&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0603/155834_4Bmf_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;Crunchy Data 是一家在 PostgreSQL 领域拥有深厚技术积累的公司，其提供的 PostgreSQL 数据库托管服务、咨询和培训等服务具有很高的质量和安全性，能够帮助企业在云上更好地部署和管理 PostgreSQL 数据库。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;此外，Crunchy Data 对 PostgreSQL 开源社区有着巨大的贡献，其团队成员在社区中具有一定的影响力和话语权，这有助于 Snowflake 更好地与 PostgreSQL 开源社区合作，共同推动技术的发展和创新。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353336/snowflake-to-buy-crunchy-data-for-250-million</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353336/snowflake-to-buy-crunchy-data-for-250-million</guid>
      <pubDate>Sat, 10 May 2025 08:08:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>企业即时通讯平台，助力企业数字化转型的即时通讯工具</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;在数字化时代，大型政企单位对高效协作和数据安全的需求极为迫切。&lt;/span&gt;&lt;span&gt;BeeWorks&amp;nbsp;作为一款专为政企领域打造的协作平台，凭借其出色的安全性能、强大的组织管理功能和丰富的协作功能，成为了众多大型政企单位的首选。&lt;br&gt; &lt;img alt="团队畅快交流.png" src="https://oscimg.oschina.net/oscnet//124238aedb86ab89a0c731581f277c04.png" width="1265" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;一、高度安全稳定，保障数据资产&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;对于大型政企单位而言，数据安全至关重要。&lt;/span&gt;&lt;span&gt;BeeWorks&amp;nbsp;支持私有化部署，企业可将服务器架设在自身内网或自有云环境中，从根本上杜绝了第三方平台介入导致的数据泄露风险。所有数据，包括聊天记录、文件传输内容等，均在企业内部流转，确保数据的安全性和自主可控。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;在数据传输环节，&lt;/span&gt;&lt;span&gt;BeeWorks&amp;nbsp;采用先进的加密技术，如&amp;nbsp;TLS/SSL&amp;nbsp;协议、256&amp;nbsp;位&amp;nbsp;AES&amp;nbsp;加密技术等，对数据进行加密处理，防止数据在传输过程中被窃取或篡改。对于存储在服务器上的数据，同样进行加密存储，即使服务器遭受攻击，黑客也无法轻易获取有价值的信息。此外，BeeWorks&amp;nbsp;在应用安全、身份鉴别、访问控制、安全审计、用户数据完整性及用户数据保密性等安全功能方面均通过了达标认证，为企业构建了&amp;nbsp;「端、管、链」&amp;nbsp;全方位安全架构，企业还可根据自身需求定制安全策略，如防火墙设置、入侵检测、数据加密、内外网隔离等，全面守护企业数据资产。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;在稳定性方面，&lt;/span&gt;&lt;span&gt;BeeWorks&amp;nbsp;经过严格的压力测试和优化，能够支持高并发的用户访问。即便企业内部大量用户同时在线，也能确保流畅的使用体验，不会出现卡顿或掉线的情况，为企业日常办公和业务运转提供了坚实可靠的技术支撑。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;二、强大组织管理，适配复杂架构&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;大型政企单位通常拥有庞大而复杂的组织架构，人员变动频繁。&lt;/span&gt;&lt;span&gt;BeeWorks&amp;nbsp;具备强大的组织管理功能，能够高效同步组织架构信息，人员变动后信息可及时更新，极大地提升了企业内部沟通效率。通过按角色、部门设置访问权限，企业可以实现精细化权限管理。例如，限制敏感文件的下载与转发，并完整记录用户操作日志，便于进行审计与追溯，确保企业信息安全和合规运营。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;三、丰富协作功能，满足多元需求&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;即时通讯&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;BeeWorks&amp;nbsp;提供了专业的即时通讯能力，支持多种消息类型，包括文字、语音、图片和文件等，满足不同场景下的沟通需求。独特的消息反馈机制可实时显示消息的已读未读状态，确保重要信息及时传达。此外，平台还支持&amp;nbsp;「强通知」&amp;nbsp;功能，关键信息能够第一时间送达，避免信息遗漏，有效提升沟通效率。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;文件共享&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;企业内部文件的安全共享与协作至关重要。&lt;/span&gt;&lt;span&gt;BeeWorks&amp;nbsp;的文件共享功能允许员工便捷地上传、下载和管理文件，并且可以针对用户、部门及岗位进行细致的权限控制，如设置用户的管理、浏览、编辑、下载、打印等操作权限，确保关键信息不外泄。同时，自有文档中心保障了组织专属的内部协作环境，提升团队协作效率。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;会议功能&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;BeeWorks&amp;nbsp;提供了完全私有化的视频会议系统，支持主持人、演示者、普通参会人等多种角色权限设置，确保会议安全私密。该视频会议系统具备高清画质、稳定的音频传输和流畅的会议体验，无论是日常工作会议、远程培训还是重要决策会议，都能轻松满足需求，打破时空限制，实现高效远程协作。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;四、应用案例&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;众多大型政企单位已经成功应用&lt;/span&gt;&lt;span&gt;BeeWorks，显著提升了工作效率和管理水平。例如，深圳市的&amp;nbsp;「深&amp;nbsp;i&amp;nbsp;企」&amp;nbsp;项目，通过&amp;nbsp;BeeWorks&amp;nbsp;构建了一套完整、完备和完善的政务即时通讯底座平台，促进了深圳市公共服务体系建设。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353329</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353329</guid>
      <pubDate>Sat, 10 May 2025 07:40:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>BeeWorks：私有化即时通讯，筑牢企业信息安全防线</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;在数字化时代，即时通讯已成为企业日常运营中不可或缺的工具。然而，数据安全问题一直是企业使用即时通讯服务时的重要考量因素。&lt;/span&gt;&lt;span&gt;BeeWorks 即时通讯系统以其私有化部署模式，为企业提供了一个安全、可靠、自主可控的沟通平台。&amp;nbsp;&lt;br&gt; &lt;img alt="应用管控.png" src="https://oscimg.oschina.net/oscnet//ee97a22bb8b37e198b3953823bde855d.png" width="1096" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;私有化部署，数据自主可控&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;BeeWorks 即时通讯系统的私有化部署模式是其最显著的优势之一。与依赖公有云的即时通讯服务不同，BeeWorks 允许企业在自己的内部服务器上进行部署，这意味着企业可以完全掌控数据的存储和管理。数据不再存储在第三方的服务器上，而是保存在企业自己的数据中心内，企业能够自主决定数据的访问权限和使用方式。这种自主可控的数据管理模式，让企业在面对数据安全问题时更加从容，能够有效避免因外部因素导致的数据泄露风险。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;先进加密技术，保障通信安全&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;在数据安全方面，&lt;/span&gt;&lt;span&gt;BeeWorks 采用了先进的加密技术，对通信内容进行全方位的加密处理。无论是文字消息、语音通话还是文件传输，所有数据在传输和存储过程中都会被加密，确保信息的保密性和完整性。这种端到端的加密机制，使得即使数据在传输过程中被截获，也无法被解读，从而最大程度地保护了企业的商业机密和客户隐私。通过这种加密技术，BeeWorks 为企业构建了一个安全可靠的即时通讯环境，让企业内部的沟通交流无后顾之忧。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;全方位保护，构建信息安全屏障&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;BeeWorks 即时通讯系统不仅在技术上提供了强大的安全保障，还在功能设计上充分考虑了企业的实际需求。系统支持多种通讯方式，包括单聊、群聊、语音通话、视频会议等，满足企业不同场景下的沟通需求。同时，BeeWorks 还提供了丰富的管理功能，企业可以根据自身的组织架构和管理要求，灵活设置用户权限、群组管理、消息审核等，进一步增强了系统的安全性和可控性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;无论是涉及商业机密的高层会议，还是包含客户隐私的客户服务交流，&lt;/span&gt;&lt;span&gt;BeeWorks 都能提供全方位的保护。企业可以放心地在平台上进行各种敏感信息的交流和文件的共享，无需担心数据泄露的问题。通过私有化部署和先进的加密技术，BeeWorks 为企业构建起了一道坚固的信息安全屏障，让企业在数字化转型的道路上更加稳健地前行。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;企业数字化转型的可靠伙伴&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;在企业数字化转型的过程中，即时通讯系统是提升工作效率、促进团队协作的重要工具。&lt;/span&gt;&lt;span&gt;BeeWorks 以其私有化部署模式和强大的安全性能，为企业提供了一个稳定、可靠的即时通讯平台。通过使用 BeeWorks，企业不仅能够享受到即时通讯带来的便利和高效，还能确保数据的安全和自主可控。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#444444; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;BeeWorks 即时通讯系统是企业在数字化时代构建信息安全防线的可靠选择。它通过私有化部署和先进的加密技术，从根本上消除了数据泄露的可能性，为企业提供了全方位的数据保护。无论是大型企业还是中小型企业，BeeWorks 都能满足其对即时通讯安全性和可靠性的要求，成为企业数字化转型的坚实后盾。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353328</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353328</guid>
      <pubDate>Sat, 10 May 2025 07:40:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>尤雨溪宣布 Rolldown-Vite：基于 Rolldown 构建的 Vite</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;尤雨溪近日宣布了新开源项目&lt;code&gt;rolldown-vite&lt;/code&gt;，这是基于 Rolldown 构建的 Vite，功能与 Vite 保持一致，可以直接替换使用。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;rolldown-vite&lt;/code&gt;核心特性包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;性能提升显著&lt;/strong&gt;：在多个项目中测试显示，生产构建时间缩短 3 到 16 倍，内存使用最多减少 100 倍。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;兼容现有项目&lt;/strong&gt;：&lt;code&gt;rolldown-vite&lt;/code&gt;&amp;nbsp;可替代原有 Vite 包，配置无需大改。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;基于 Oxc 构建&lt;/strong&gt;：Rolldown 使用 Oxc 工具集代替&amp;nbsp;&lt;code&gt;esbuild&lt;/code&gt;，在代码解析、转换和压缩方面表现更好。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-7fe2c87e649c54d0da39a42e1133b265749.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Vite（法语意为 "快速的"，发音&lt;code&gt;/vit/&lt;/code&gt;，发音同 "veet"）是一种新型前端构建工具，能够显著提升前端开发体验。它主要由两部分组成：&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;一个开发服务器，它基于&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FGuide%2FModules"&gt;原生 ES 模块&lt;/a&gt;提供了&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.vite.dev%2Fguide%2Ffeatures.html"&gt;丰富的内建功能&lt;/a&gt;，如速度快到惊人的&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.vite.dev%2Fguide%2Ffeatures.html%23hot-module-replacement"&gt;模块热替换（HMR）&lt;/a&gt;。&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;一套构建指令，它使用&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frollupjs.org%2F"&gt;Rollup&lt;/a&gt;&amp;nbsp;打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Rolldown 是一个用 Rust 编写的 JavaScript 打包器，旨在作为 Vite 未来使用的打包器。它提供与 Rollup 兼容的应用程序接口和插件接口，但在功能范围上更类似于 esbuild。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;尤雨溪表示，通过使用&lt;code&gt;rolldown-vite&lt;/code&gt;对各种项目进行测试，从基本设置到大型企业应用。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvoidzero.dev%2Fposts%2Fannouncing-rolldown-vite%23real-world-impact" target="_blank"&gt;结果令人印象深刻&lt;/a&gt;——生产构建时间减少了 3 倍到 16 倍，构建过程中的内存使用量减少了高达 100 倍。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353318/rolldown-vite</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353318/rolldown-vite</guid>
      <pubDate>Sat, 10 May 2025 07:25:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>微软发布由 Sora 驱动的 Bing Video Creator</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;微软 Bing&amp;nbsp;&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.bing.com%2Fsearch%2FJune-2025%2FIntroducing-Bing-Video-Creator"&gt;宣布&lt;/a&gt;&lt;/u&gt;将在应用中引入全新的视频生成功能，该功能由 OpenAI 的 Sora 模型让用户根据文字提示生成视频。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-0d148235dedc9b3da38ee834909e72c7592.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;所有用户只要登录微软账户，就可以使用必应应用程序免费创建 10 个视频片段，而这之后的视频，用户需要为每个视频支付 100 微软奖励积分才能生成。这些积分可通过使用必应搜索或在微软商店购物获得，例如，使用必应在个人电脑上每搜索一次可获得 5 点积分，每天的积分上限为 150 点。&lt;/p&gt; 
&lt;p&gt;OpenAI 与微软有着长期的合作关系，但只有付费用户才能使用 Sora 的视频生成功能。它与微软必应的整合标志着它将首次免费提供。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353316/bing-video-creator</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353316/bing-video-creator</guid>
      <pubDate>Sat, 10 May 2025 07:07:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>🔥 前端开发三大神器助你快速进入</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;还记得那些熬夜调试、满屏红色报错的日子吗？MCP(Model Context Protocol) 正在让这一切成为历史。看看这三个神器如何把我们从"代码搬砖工"升级为"AI 协作大师"！&lt;/p&gt; 
&lt;h3&gt;三大核心模块深度解析&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;🧠 context7 - 你的专属项目大脑&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;自动记录项目架构、依赖关系、命名规范&lt;/li&gt; 
 &lt;li&gt;跨会话保持上下文，AI 永远记得你项目的"个性"&lt;/li&gt; 
 &lt;li&gt;基于 Upstash 云存储，毫秒级访问项目历史&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;⚡ sequential-thinking - 逻辑推理引擎&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;将复杂开发任务拆解为可执行步骤&lt;/li&gt; 
 &lt;li&gt;支持链式思考：需求分析 → 技术选型 → 代码实现 → 测试验证&lt;/li&gt; 
 &lt;li&gt;可视化展示推理过程，每一步都清晰可控&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;🔄 mcp-feedback-enhanced - 智能反馈优化器&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;实时分析代码运行结果和用户反馈&lt;/li&gt; 
 &lt;li&gt;自动调整代码风格和实现策略&lt;/li&gt; 
 &lt;li&gt;构建个人化的最佳实践知识库&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;💻 写代码场景实战演示&lt;/h2&gt; 
&lt;h3&gt;场景一：从零搭建 React 项目&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;以前的你&lt;/strong&gt;：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 各种配置文件手动创建
npx create-react-app my-app
# 反复查文档配置 webpack、eslint、prettier...
# 花费 2-3 小时才能开始写业务代码

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;现在的你&lt;/strong&gt;：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;"帮我搭建一个带 TypeScript 的 React 项目，集成 Tailwind 和 Zustand"

🧠 context7: 记住你偏好的技术栈和项目结构
⚡ sequential-thinking:
   1. 分析需求 → 2. 选择最佳实践 → 3. 生成配置文件 → 4. 创建基础组件
🔄 mcp-feedback-enhanced: 根据你的使用习惯调整代码风格

结果：5 分钟完整项目脚手架，代码风格完全符合你的习惯！

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;场景二：复杂组件开发&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;以前的你&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;在 Stack Overflow 翻找解决方案&lt;/li&gt; 
 &lt;li&gt;复制粘贴代码后各种调试&lt;/li&gt; 
 &lt;li&gt;花一天时间实现一个表格组件&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;现在的你&lt;/strong&gt;：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;"基于我们项目的设计系统，创建一个支持排序、筛选、分页的数据表格"

🧠 context7: 自动获取项目的 UI 组件库、主题配置、已有组件
⚡ sequential-thinking:
   1. 分析设计系统 → 2. 复用已有组件 → 3. 实现新功能 → 4. 添加类型支持
🔄 mcp-feedback-enhanced: 基于项目中类似组件的实现模式优化代码

结果：30 分钟完成，代码风格统一，性能优化到位！

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;场景四：大型电商项目重构 - 三模块完美协作演示&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;：你接手一个有着 200+组件的老旧电商项目，需要从 Vue2+Webpack 迁移到 Vue3+Vite，同时重构状态管理和优化性能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;第一阶段：项目诊断与规划&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;"分析这个电商项目，制定 Vue2 到 Vue3 的完整迁移方案"

🧠 context7 启动：
- 扫描项目结构，发现 208 个.vue 文件、34 个 Vuex store 模块
- 记录项目依赖：vue-router@3.x、vuex@3.x、element-ui@2.x
- 识别关键业务模块：用户系统、商品管理、订单流程、支付集成
- 建立项目知识图谱，标记高风险重构点

⚡ sequential-thinking 接管：
Step 1: 依赖兼容性分析 → 发现 23 个不兼容依赖
Step 2: 业务模块优先级排序 → 核心支付流程优先
Step 3: 迁移策略制定 → 渐进式迁移，保证系统稳定
Step 4: 风险评估 → 识别可能的 breaking changes
Step 5: 时间规划 → 3 周迁移计划，每周一个里程碑

🔄 mcp-feedback-enhanced 预警：
- 基于历史类似项目数据，预测迁移过程中的常见问题
- 建议优先处理 element-ui 到 element-plus 的组件迁移
- 推荐使用@vue/compat 作为过渡方案

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;第二阶段：核心模块迁移&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;"开始迁移用户登录和商品列表模块"

🧠 context7 提供支持：
- 调取用户模块的完整调用链：Login.vue → UserStore → AuthAPI
- 识别商品列表的性能瓶颈：无虚拟滚动，一次加载 1000+商品
- 记住你偏好的新架构：Composition API + Pinia + TypeScript

⚡ sequential-thinking 执行迁移：
Step 1: 创建新的用户 store（Pinia）
   └─ 保持原有 API 兼容，确保其他模块不受影响
Step 2: Login.vue 重写为 Composition API
   └─ 重构表单验证逻辑，使用 VueUse 工具库
Step 3: 商品列表性能优化
   └─ 引入 virtual-list，实现 10000+商品秒级渲染
Step 4: TypeScript 类型定义
   └─ 为用户和商品数据创建完整类型体系

🔄 mcp-feedback-enhanced 实时优化：
- 监测迁移后的性能指标：页面加载时间从 3.2s 降至 0.8s
- 发现新的 TypeScript 类型错误，自动修复
- 根据团队成员的 code review 反馈，调整代码风格

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;第三阶段：状态管理重构&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;"重构整个状态管理架构，从 Vuex 迁移到 Pinia"

🧠 context7 深度分析：
- 绘制完整的数据流图：34 个 store 模块的依赖关系
- 识别冗余状态：发现 12 个重复的用户信息存储
- 记录异步操作模式：支付流程的复杂状态机

⚡ sequential-thinking 系统重构：
Step 1: 核心 store 优先迁移
   └─ user、cart、order 三大核心 store
Step 2: 状态合并与优化
   └─ 消除重复状态，建立统一的数据源
Step 3: 异步操作标准化
   └─ 统一错误处理、loading 状态、缓存策略
Step 4: 跨组件通信优化
   └─ 使用 provide/inject 替代事件总线

🔄 mcp-feedback-enhanced 质量保证：
- 检测到订单状态更新存在 race condition
- 自动生成状态管理的单元测试用例
- 根据性能监控数据，优化状态持久化策略

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;第四阶段：性能优化与部署&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;"优化构建配置，准备生产环境部署"

🧠 context7 历史回顾：
- 对比迁移前后的 bundle size：从 2.3MB 降至 1.1MB
- 记录优化过程中的所有配置变更
- 保存性能基准数据，用于后续对比

⚡ sequential-thinking 最终优化：
Step 1: 代码分割优化 → 路由级别的懒加载
Step 2: 资源压缩 → Gzip + Brotli 双重压缩
Step 3: CDN 配置 → 静态资源分离部署
Step 4: 缓存策略 → 强缓存 + 协商缓存

🔄 mcp-feedback-enhanced 持续监控：
- 部署后性能监控：首页加载时间稳定在 800ms 以内
- 用户反馈收集：页面响应速度提升 73%
- 建立性能告警机制，异常时自动通知

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;协作成果&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;开发效率&lt;/strong&gt;：原本需要 2 个月的重构工作，3 周完成&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;代码质量&lt;/strong&gt;：TypeScript 覆盖率 100%，单元测试覆盖率 85%&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;性能提升&lt;/strong&gt;：页面加载速度提升 75%，bundle size 减少 52%&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;团队协作&lt;/strong&gt;：标准化的代码风格，详细的重构文档&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;三模块协作的精髓&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;context7 像项目的"记忆大师"，记住每一个细节&lt;/li&gt; 
 &lt;li&gt;sequential-thinking 是"策略规划师"，系统性解决复杂问题&lt;/li&gt; 
 &lt;li&gt;mcp-feedback-enhanced 是"质量监督员"，确保每一步都是最优解&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 开发效率革命性提升&lt;/h2&gt; 
&lt;h3&gt;量化对比：&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;学习成本&lt;/strong&gt;：从查文档 2 小时 → AI 对话 5 分钟&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;代码质量&lt;/strong&gt;：从个人经验 → 最佳实践沉淀&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;调试时间&lt;/strong&gt;：从盲目试错 → 精准定位&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;知识传承&lt;/strong&gt;：从零散笔记 → 结构化知识库&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;真实感受：&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;// 以前写代码的心情
const mood = useState('焦虑')
const energy = useState('疲惫')
const confidence = useState('不确定')

// 现在写代码的心情
const mood = useState('轻松')
const energy = useState('专注')
const confidence = useState('胸有成竹')

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;💡 未来编程新范式&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;从"写代码"到"聊需求"&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;自然语言描述需求，AI 生成最佳实现&lt;/li&gt; 
 &lt;li&gt;专注业务逻辑，告别重复性工作&lt;/li&gt; 
 &lt;li&gt;代码质量自动优化，性能问题提前预防&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;个人化开发助手&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;学习你的编码习惯和偏好&lt;/li&gt; 
 &lt;li&gt;记住项目的历史演进和决策背景&lt;/li&gt; 
 &lt;li&gt;提供定制化的技术建议和解决方案&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🎯 立即体验 MCP&lt;/h2&gt; 
&lt;p&gt;如果你还在手动配置开发环境、复制粘贴 Stack Overflow 代码、为调试 bug 熬夜，那你真的 out 了！&lt;/p&gt; 
&lt;p&gt;MCP 不是在替代程序员，而是在解放程序员 - 让我们从重复性劳动中解脱，专注于真正有创造性的工作。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;这就是 2025 年前端开发的标配！&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;#MCP #前端开发 #AI 编程 #开发效率 #React #TypeScript #Vue3&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;em&gt;已经体验 MCP 的前端 er 们，在评论区分享你们的"爽点"时刻！还没体验的赶紧上车，别让 AI 时代的红利从指缝溜走～&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353270</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353270</guid>
      <pubDate>Sat, 10 May 2025 03:21:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>Wine 10.9 开发版发布，Windows 应用兼容层</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;Wine 10.9 开发版&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.winehq.org%2Fnews%2F2025060101" target="_blank"&gt;已发布&lt;/a&gt;，共计修复了 34 个 BUG，涵盖打印、游戏、应用崩溃等多个领域，显著提升用户体验。&lt;/p&gt; 
&lt;p&gt;主要变化如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;绑定的 vkd3d 升级到 1.16 版本&lt;/li&gt; 
 &lt;li&gt;初步支持在 WIDL 中生成 Windows 运行时元数据&lt;/li&gt; 
 &lt;li&gt;支持使用 Clang 进行基于编译器的异常处理。&lt;/li&gt; 
 &lt;li&gt;EGL 库支持所有图形驱动程序。&lt;/li&gt; 
 &lt;li&gt;修复多项错误&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下载地址：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgitlab.winehq.org%2Fwine%2Fwine%2F-%2Freleases%2Fwine-10.9" target="_blank"&gt;https://gitlab.winehq.org/wine/wine/-/releases/wine-10.9&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353267/wine-10-9</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353267/wine-10-9</guid>
      <pubDate>Sat, 10 May 2025 03:02:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Dante Cloud Spring Boot 3.5 Spring Cloud 2025 实战落地</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;h2&gt;[一] 项目简介&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Dante Cloud&lt;/strong&gt; 国内首个支持阻塞式和响应式服务并行的微服务平台。是采用&lt;strong&gt;领域驱动模型 (DDD)&lt;strong&gt;设计思想，以「&lt;strong&gt;高质量代码、低安全漏洞&lt;/strong&gt;」为核心，基于 Spring 生态全域开源技术，高度&lt;/strong&gt;模块化和组件化设计&lt;/strong&gt;，支持&lt;strong&gt;智能电视、IoT 等物联网设备&lt;/strong&gt;认证，满足&lt;strong&gt;国家三级等保要求&lt;/strong&gt;，支持&lt;strong&gt;接口国密数字信封加解密&lt;/strong&gt;等一系列安全体系的多租户微服务解决方案。可以「&lt;strong&gt;一套代码实现微服务和单体两种架构&lt;/strong&gt;」的企业级应用系统。&lt;/p&gt; 
&lt;h2&gt;[二] 项目理念&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Dante Cloud&lt;/strong&gt; 一直秉承着「简洁、高效、包容、务实」的理念，使用微服务领域及周边相关的各类新兴技术或主流技术进行建设，不断地深耕细作、去粗取精、用心打造。目标是构建一款&lt;code&gt;代码质量高、维护投入低、安全防护强&lt;/code&gt;的，可以帮助用户快速跨越架构技术选型、技术研究探索阶段，降低传统项目中因安全漏洞、技术负债、低质代码等潜在隐患所产生的高维护投入，期望像项目名字寓意一样，在行业变革的时期承上启下，助力企业信息化建设和变革的产品。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Dante Cloud&lt;/strong&gt; 核心关注点是：&lt;strong&gt;「高质量的系统代码」&lt;/strong&gt;、&lt;strong&gt;「合理的系统架构」&lt;/strong&gt;、&lt;strong&gt;「低耦合的模块划分」&lt;/strong&gt;、&lt;strong&gt;「高安全性系统实现」&lt;/strong&gt;、&lt;strong&gt;「灵活的功能扩展能力」&lt;/strong&gt;，&lt;strong&gt;「优质的微服务实现」&lt;/strong&gt;，而不是追求 &lt;strong&gt;业务功能&lt;/strong&gt; 堆叠的 &lt;strong&gt;丰富&lt;/strong&gt; 性。&lt;/p&gt; 
&lt;h2&gt;[三] 架构设计&lt;/h2&gt; 
&lt;p&gt;Dante Cloud 除了提供一套完整的微服务架构以外，还支持以单体架构运行。这里的微服务架构和单体架构并不是分离的两套代码，也不是分离的两个项目。而是完全融合的一整套代码，使用时可以根据需要选择是以微服务模式或者单体模式运行。这是 Dante Cloud 微服务最大的特色之一：&lt;strong&gt;「一套代码、两种架构」&lt;/strong&gt;。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;基于 &lt;code&gt;Spring Boot&lt;/code&gt; 和 &lt;code&gt;Spring Cloud&lt;/code&gt; 的微服务架构，已经成为企业级应用建设的主流方案。但不可否认的是，搭建一套微服务架构所需的基础设施越来越多，也越来越复杂。仅仅是在开发电脑上搭建一套运行开发调试环境，其复杂度和所需的资源也不容小觑。而很多应用特别是小型应用，在早期开发中或者用户量不大的前期，很多情况下一套单体的，前后端分离的后台就足以满足。完全没有必要上一整套微服务，额外增加复杂度。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Dante Cloud &lt;strong&gt;「一套代码、两种架构」&lt;/strong&gt; 的特点，可以帮助企业在项目早期以单体架构快速建设项目、方便开发人员在本地进行开发以及新技术研究。在项目后期随着用户规模增大以及并发需求提升时，可以快速无缝迁移至微服务架构。&lt;/p&gt; 
&lt;h2&gt;[四] 特性介绍&lt;/h2&gt; 
&lt;p&gt;Dante Cloud 演示系统已发布，目前包括在线版、单体离线版 (Docker) 和微服务镜像版, 欢迎体验使用！&lt;/p&gt; 
&lt;p&gt;体验地址：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.herodotus.vip%2Fget-started%2Fpreview%2Fonline.html" target="_blank"&gt;https://www.herodotus.vip/get-started/preview/online.html&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;有任何意见和建议，可以&lt;a href="https://gitee.com/dromara/dante-cloud/issues"&gt;【发 ISSUE】&lt;/a&gt;留言。&lt;/p&gt; 
&lt;h2&gt;[五] Spring 生态新特性总结&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th&gt;特性领域&lt;/th&gt; 
   &lt;th&gt;Spring Boot 3.5&lt;/th&gt; 
   &lt;th&gt;Spring Cloud 2025.0.0&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Java 支持&lt;/td&gt; 
   &lt;td&gt;Java 17+（优化 Java 21）&lt;/td&gt; 
   &lt;td&gt;依赖 Spring Boot 3.5&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Web/HTTP&lt;/td&gt; 
   &lt;td&gt;HTTP/3、WebSocket 优化&lt;/td&gt; 
   &lt;td&gt;API 网关智能路由&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;安全&lt;/td&gt; 
   &lt;td&gt;Spring Security 6.x 增强&lt;/td&gt; 
   &lt;td&gt;动态配置加密&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;数据访问&lt;/td&gt; 
   &lt;td&gt;Hibernate 6.x、JDBC 优化&lt;/td&gt; 
   &lt;td&gt;Config 热更新&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;监控&lt;/td&gt; 
   &lt;td&gt;Micrometer 1.12.x、Actuator 增强&lt;/td&gt; 
   &lt;td&gt;Sleuth/OpenTelemetry 优化&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;云原生&lt;/td&gt; 
   &lt;td&gt;Kubernetes/Docker 优化&lt;/td&gt; 
   &lt;td&gt;服务发现、熔断增强&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;开发体验&lt;/td&gt; 
   &lt;td&gt;构建工具优化、Kotlin 支持&lt;/td&gt; 
   &lt;td&gt;动态配置、智能路由&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;[六] 更新内容&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;主要更新&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;[升级] Spring Boot 版本升级至 3.5.0&lt;/li&gt; 
   &lt;li&gt;[升级] Spring Authorization Server 版本升级至 1.5.0&lt;/li&gt; 
   &lt;li&gt;[升级] Spring Cloud 版本升级至 2025.0.0&lt;/li&gt; 
   &lt;li&gt;[升级] Spring Cloud Tencent 版本升级至 2.0.1.0-2023.0.3&lt;/li&gt; 
   &lt;li&gt;[升级] Spring Boot Admin 版本升级至 3.5.0&lt;/li&gt; 
   &lt;li&gt;[升级] Nacos 版本升级至 3.0.1。自封装支持 Postgresql 的 Nacos Docker 镜像已经上传至 Docker Hub 和 &lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2FQuay.IO" target="_blank"&gt;Quay.IO&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;其它更新&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;[新增] 增加设置设备属性和调用设备服务参数校验控制&lt;/li&gt; 
   &lt;li&gt;[新增] 新增设置设备属性和调用设备服务接口&lt;/li&gt; 
   &lt;li&gt;[新增] 新增组合文件管理器定义，以支持不同用途文件的本地及对象存储组合管理。同时解决原有 FileTemplate 和 FileTransformer 定义逻辑不够清晰问题。&lt;/li&gt; 
   &lt;li&gt;[新增] 新增 JsonSchema 默认组合文件管理器，并在 core-autoconfigure 模块中默认注入，以保证代码正确运行。&lt;/li&gt; 
   &lt;li&gt;[新增] 新增平台级 JsonSchema 组合文件存储管理器定义。&lt;/li&gt; 
   &lt;li&gt;[修复] 修复因使用 Import 方式依赖 SCT 导致 Springdoc 版本被干扰导致无法升级问题。&lt;/li&gt; 
   &lt;li&gt;[修复] 修复证书工厂测试用例执行错误问题&lt;/li&gt; 
   &lt;li&gt;[优化] hikari 和数据库连接相关配置，进一步提升数据库连接和使用效能&lt;/li&gt; 
   &lt;li&gt;[优化] 优化 MqttTopic 定义，支持更多 Mqtt 主题应用场景&lt;/li&gt; 
   &lt;li&gt;[优化] Spring Boot Test Starter 不再采用全局配置，修改为各模块按需引&lt;/li&gt; 
   &lt;li&gt;[优化] 调整对 JustAuth 依赖所在位置及相关代码，提升相关代码内聚性&lt;/li&gt; 
   &lt;li&gt;[重构] 重构核心基础模块代码，调整部分代码包路径和结构，减少各模块间的依赖和耦合。&lt;/li&gt; 
   &lt;li&gt;[重构] 重构 OAuth2 Client 代码适配最新版本 Spring Security OAuth2&lt;/li&gt; 
   &lt;li&gt;[重构] 重构 WebPathUtils 工具类，适配最新版 Spring Security&lt;/li&gt; 
   &lt;li&gt;[重构] 重构 Spring Authorization Server 认证相关代码，支持 DPoP&lt;/li&gt; 
   &lt;li&gt;[重构] 重构 Spring Authorization Server 认证相关代码，支持 PAR&lt;/li&gt; 
   &lt;li&gt;[重构] 重构 FileTemplate 和 FileTransformer 定义，减少不必要的方法定义和交互。&lt;/li&gt; 
   &lt;li&gt;[升级] minio docker 镜像版本升级至 RELEASE.2025-05-24T17-08-30Z&lt;/li&gt; 
   &lt;li&gt;[升级] grafana docker 镜像版本升级至 12.0.1&lt;/li&gt; 
   &lt;li&gt;[升级] loki docker 镜像版本升级至 3.5.1&lt;/li&gt; 
   &lt;li&gt;[升级] promtail docker 镜像版本升级至 3.5.1&lt;/li&gt; 
   &lt;li&gt;[升级] emqx docker 镜像版本升级至 5.9.0&lt;/li&gt; 
   &lt;li&gt;[升级] influxdb docker 镜像版本升级至 2.7.12&lt;/li&gt; 
   &lt;li&gt;[升级] clickhouse docker 镜像版本升级至 25.5.1&lt;/li&gt; 
   &lt;li&gt;[升级] tdengine docker 镜像版本升级至 3.3.6.6&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;依赖更新&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;[升级] alipay-sdk-java 版本升级至 4.40.237.ALL&lt;/li&gt; 
   &lt;li&gt;[升级] com.baidu.aip 版本升级至 4.16.20&lt;/li&gt; 
   &lt;li&gt;[升级] grpc 版本升级至 1.73.0&lt;/li&gt; 
   &lt;li&gt;[升级] json-schema-validator 版本升级至 1.5.7&lt;/li&gt; 
   &lt;li&gt;[升级] protobuf 版本升级至 3.25.8&lt;/li&gt; 
   &lt;li&gt;[升级] redisson 版本升级至 3.48.0&lt;/li&gt; 
   &lt;li&gt;[升级] software.amazon.awssdk 版本升级至 2.31.53&lt;/li&gt; 
   &lt;li&gt;[升级] software.amazon.awssdk.crt 版本升级至 0.38.3&lt;/li&gt; 
   &lt;li&gt;[升级] sweetalert2 webjars 版本升级至 11.22.0&lt;/li&gt; 
   &lt;li&gt;[升级] vue webjars 版本升级至 3.5.16&lt;/li&gt; 
   &lt;li&gt;[升级] weixin java 版本升级至 4.7.5-20250529.111829&lt;/li&gt; 
   &lt;li&gt;[升级] okio 版本升级至 3.12.0&lt;/li&gt; 
   &lt;li&gt;[升级] influxdb-client 版本升级至 7.3.0&lt;/li&gt; 
   &lt;li&gt;[升级] json 版本升级至 20250517&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;[七] 文档说明&lt;/h2&gt; 
&lt;p&gt;原文档站点 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.herodotus.cn" target="_blank"&gt;https://www.herodotus.cn&lt;/a&gt; 因服务器到期，已经停止服务。&lt;/p&gt; 
&lt;p&gt;需要查阅 Dante Cloud 项目文档的朋友，可以查看【企业版】文档 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.herodotus.vip" target="_blank"&gt;https://www.herodotus.vip&lt;/a&gt;。（该文档除了功能上的差异外，部署方法和使用逻辑等与开源版本完全一致，而且内容更精细易懂，不会影响开源版的使用）。&lt;/p&gt; 
&lt;p&gt;或者可以访问本项目【社区版】文档 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdante-cloud.dromara.org" target="_blank"&gt;https://dante-cloud.dromara.org&lt;/a&gt;，该站点初次访问可能会有点慢，甚至出现部分地区有时打不开的情况。&lt;/p&gt; 
&lt;p&gt;敬请悉知！&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;如果本项目对你有所帮助，欢迎 Star 一波来支持我们！&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Gitee&lt;/strong&gt;：&lt;a href="https://gitee.com/dromara/dante-cloud"&gt;https://gitee.com/dromara/dante-cloud&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt;：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdromara%2Fdante-cloud" target="_blank"&gt;https://github.com/dromara/dante-cloud&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Gitcode&lt;/strong&gt;：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgitcode.com%2Fdromara%2Fdante-cloud" target="_blank"&gt;https://gitcode.com/dromara/dante-cloud&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353266</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353266</guid>
      <pubDate>Sat, 10 May 2025 02:51:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>AI 造物社区作品分享——赛博挂坠</title>
      <description/>
      <link>https://www.oschina.net/ai-creation/details/2006</link>
      <guid isPermaLink="false">https://www.oschina.net/ai-creation/details/2006</guid>
      <pubDate>Sat, 10 May 2025 02:47:00 GMT</pubDate>
    </item>
    <item>
      <title>OpenAI 用 Rust 重写 AI 编程工具 Codex CLI</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;OpenAI 工程师 Fouad Matin 在 GitHub &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopenai%2Fcodex%2Fdiscussions%2F1174" target="_blank"&gt;表示&lt;/a&gt;，他们计划使用 Rust 语言重写其实验性 AI 编码工具 Codex CLI。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0603/102511_pMq0_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Codex CLI 是一个轻量级的 AI 编程助手，采用 TypeScript 和 Node.js 编写，可以直接在用户的终端命令行运行，旨在充分发挥 o3、o4-mini 等模型强大的推理能力，连接本地代码环境，甚至支持处理截图或草图进行多模态编程。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;OpenAI 工程师表示，尽管现有版本开发迅速，但 Rust 的优势更为突出。新版本将实现零依赖安装，降低用户门槛；通过引入沙箱技术（如 macOS 的 sandbox-exec 和 Linux 的 Landlock），增强隔离安全性；同时，Rust 的无垃圾回收机制将进一步优化内存性能。&lt;/p&gt; 
&lt;p&gt;此外，Rust 还支持 Model Context Protocol，使 Codex CLI 能更高效地作为客户端和服务器运行。TypeScript 版本将持续维护，直至 Rust 版本功能齐平。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;相关阅读：&lt;a href="https://www.oschina.net/news/345034/openai-codex-cli" target="_blank"&gt;OpenAI 发布开源 AI 编程工具 Codex CLI&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353256/openai-rewrites-ai-coding-tool-in-rust</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353256/openai-rewrites-ai-coding-tool-in-rust</guid>
      <pubDate>Sat, 10 May 2025 02:28:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Windows 记事本支持 Markdown</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;微软通过博客&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.windows.com%2Fwindows-insider%2F2025%2F05%2F30%2Ftext-formatting-in-notepad-begin-rolling-out-to-windows-insiders%2F" target="_blank"&gt;宣布&lt;/a&gt;，目前已向 Windows 11 的 Canary/Dev 版本的用户推送最新版本记事本（version 11.2504.50.0）。&lt;/p&gt; 
&lt;p&gt;据介绍，最新版的记事本正式加入了 Markdown 输入语法，支持大小标题、粗体、斜体、超链接、列表等功能。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-289b67e2ce64fd489659c1ffb1e9d844a9f.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;微软表示，记事本的 Markdown 支持开关，也可以一键清除所有 Markdown 文本的格式。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;如果你在任何时候想回到纯文本状态，你可以从格式化工具栏或编辑菜单中清除所有格式。&lt;/p&gt; 
 &lt;p&gt;你可以在视图菜单中或在窗口底部状态栏中选择的切换按钮之间切换格式化 Markdown 和 Markdown 语法视图。&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353253/windows-notepad-markdown</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353253/windows-notepad-markdown</guid>
      <pubDate>Sat, 10 May 2025 02:14:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>国产数据迁移同步工具 CloudCanal v4.7.2.0 发布，支持可视化打宽表</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;CloudCanal&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;免费社区版&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;是&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;ClouGence&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;公司推出的一款&lt;strong&gt;全自研&lt;/strong&gt;、&lt;strong&gt;可视化&lt;/strong&gt;、&lt;strong&gt;自动化&lt;/strong&gt;数据迁移同步工具，具备&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;结构迁移&lt;/strong&gt;、&lt;strong&gt;数据迁移&lt;/strong&gt;、&lt;strong&gt;数据同步&lt;/strong&gt;、&lt;strong&gt;数据校验&lt;/strong&gt;、&lt;strong&gt;数据订正&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;等功能，支持&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;30+ 款&lt;/strong&gt;流行关系型数据库、实时数仓、消息中间件、缓存数据库和搜索引擎之间数据互通，其中包含国产数据库&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;OceanBase&lt;/strong&gt;、&lt;strong&gt;PolarDB&lt;/strong&gt;、&lt;strong&gt;TiDB&lt;/strong&gt;、&lt;strong&gt;StarRocks&lt;/strong&gt;、&lt;strong&gt;Doris&lt;/strong&gt;、&lt;strong&gt;RocketMQ&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;等。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;结合开源项目&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://gitee.com/clougence/cloudcanal-data-process"&gt;CloudCanalProcess&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;，可方便实现如下功能：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;wide-table&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;: 打宽表数据处理插件，主要包括事实表和单维表组合处理&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;data-transform&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;: 数据通用转换插件，比如做操作变幻、额外加字段、清洗回填数据&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;data-gather&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;: 数据汇聚插件，将分库分表、垂直拆分、异地数据进行实时汇聚&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;data-compare&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;: 数据对比插件，根据源端数据变化进行业务对账&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;business-alert&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;: 业务告警插件，根据数据变化趋势做出相应告警&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;CloudCanal&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;产品功能对标阿里云 DTS、亚马逊 DMS、StreamSets、AirByte，助力开发、DBA 或运维同学快速构建在线数据应用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1582" src="https://oscimg.oschina.net/oscnet/up-4787b0331b802b4e95ed1ccd108c23cea9c.png" width="1850" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;Release-Note&lt;/strong&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;新链路&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;开放 Dameng -&amp;gt; Dameng 结构迁移、全量迁移、增量同步、数据校验、数据订正、DDL 同步（加列/减列）&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;开放 TiDB -&amp;gt; SelectDB 结构迁移、全量迁移、增量同步、数据校验、数据订正、DDL 同步（加列/减列）&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;开放 PostgreSQL &amp;amp; Oracle &amp;amp; SQL Server -&amp;gt; Iceberg 结构迁移、全量迁移、增量同步&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;开放 SshFile &amp;amp; S3File &amp;amp; OssFile -&amp;gt; StarRocks &amp;amp; MongoDB Atlas &amp;amp; Elasticsearch 向量构建&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;开放 StarRocks &amp;amp; MongoDB Atlas &amp;amp; Elasticsearch -&amp;gt; RagApi 链路提供 RAG 服务&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;新特性&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;支持 MySQL -&amp;gt; MySQL/StarRocks/Doris/SelectDB 可视化打宽表的能力&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;支持 Dameng &amp;amp; SQL Server 源端全量定时迁移&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;支持 Redis &amp;lt;-&amp;gt; Redis Decr、DecrBy、LPop、RPop、LTrim、ZIncrBy、Publish、ZRemRangeByRank、ZRemRangeByLex 指令&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;支持 SQL Server -&amp;gt; Oracle 自定义虚拟列能力&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;支持 Kafka securityProtocol（安全协议）PLAINT_TEXT 认证方式&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;支持 Redis -&amp;gt; Redis 数据校验通过正则表达式过滤数据&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;支持 MySQL 对端不对 DATETIME 类型数据做时区转换（新增参数：convertDateTimeTimeZone）&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;支持，具备向量能力的数据库 -&amp;gt; RagApi 修改订阅（修改对话模型）&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;支持 Anthropic、AWS Bedrock 类型数据源，为数据向量化和 RagApi 服务&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;支持，文件到 PostgreSQL 根据嵌入模型不同创建不同的向量（维度 2000 以下，4000 以下）&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;支持 MCP 工具过滤参数 (filterToolNames) 和调用失败策略参数（failIfOneServerFails）&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;支持，大模型请求时 timeout 参数，可以动态调整请求超时时间，默认 300 秒&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;支持，文件源端全量修改订阅&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;支持，导入任务允许额外创建已完成状态的全量迁移，以便用户重跑任务&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;支持 Kubernetes Helm 安装方式&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;优化&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;优化 Redis -&amp;gt; Redis 同步期间 KeyDiff 上报频率以及分片集群差值累加问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;优化 Redis -&amp;gt; Redis 数据校验批量扫描逻辑&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;优化，重跑任务可能出现状态机状态不对的问题，延迟 1 秒执行挂载、激活等操作的异步任务&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;优化，额外添加订正任务可能出现状态机状态不对的问题，延迟 1 秒执行创建的异步任务&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;问题修复&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复 MySQL -&amp;gt; ClickHouse 创建任务数据处理页面弹窗报错的问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复 MySQL 源端 fix String length (20030999) exceeds the maximum length (20000000) 问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复 TiDB -&amp;gt; StarRocks DDL 兼容问题（加列/减列/修改列）&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复 TiDB -&amp;gt; TiDB 结构迁移 PK/UK/INDEX 未指定索引列前缀导致的索引长度溢出问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复 TDengine 源端 Timestamp 主键时区转换后数据校验不准确问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复 PostgreSQL 创建任务时 sslMode 配置未生效问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复 SQL Server -&amp;gt; StarRocks 结构迁移 decimal 类型缺失精度的问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复，获取 StarRocks 表唯一键时返回结果为空的问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复 subAccountAuthType 参数为 PASSWORD 时，设置通用参数 subAccountPwdVerifyExpr 保存报错的问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复 MongoDB -&amp;gt; MongoDB Array 类型空数组增量同步到对端数据值为 NULL 的问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复 MySQL 目标端结构迁移，字段注释含有 '' 时报错的问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复 PostgreSQL 配置心跳未生效的问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复，创建文件到向量数据库相似任务，dimension 参数未复制的问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复，向量数据库 -&amp;gt; RagApi 结构迁移显示同步表为 0 的问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复，文件 -&amp;gt; 向量数据库设置统一对端表名后结构迁移日志冗余的问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复 Ollama 和 ZhipuAI 展示思维不准确的问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复 Redis 集群源端数据校验期间集群数据迁移出现的异常问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复 Redis -&amp;gt; Redis 同步追加数据校验订正任务异常问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复 MySQL -&amp;gt; Iceberg DDL 同步表名映射失效问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复，查看关联任务展示异常的问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;修复，参数修改中（新增数据源、修改数据源参数等），撤销修改的时候会把其他开关类型的参数都撤销的问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;免费下载和使用&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;快速上手：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.clougence.com%2Fcc-doc%2Fquick%2Fquick_start" target="_blank"&gt;https://www.clougence.com/cc-doc/quick/quick_star&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353250/rn-cloudcanal-4-7-2-0</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353250/rn-cloudcanal-4-7-2-0</guid>
      <pubDate>Sat, 10 May 2025 01:54:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>夜莺 V8.Beta11 发版，支持 CK 告警、事件 Pipeline 等</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#333333; text-align:left"&gt;这个版本来得迟了一些，主要是新功能加的多，下面简单介绍一下新功能，下下周也计划做一次直播讲解。&lt;/p&gt; 
&lt;h2&gt;支持 ClickHouse 告警&lt;/h2&gt; 
&lt;p style="color:#333333; text-align:left"&gt;夜莺最重要的定位是告警引擎，所以会持续增加各类数据源的告警支持，ClickHouse 之后还有 Doris、MySQL、Postgres 等。&lt;/p&gt; 
&lt;p style="color:#333333; text-align:left"&gt;开源版主要是支持告警，不会支持看图可视化，实在是做不过来，答疑也答疑不过来。&lt;/p&gt; 
&lt;h2&gt;引入事件 Pipeline&lt;/h2&gt; 
&lt;p style="color:#333333; text-align:left"&gt;告警引擎根据告警规则产生告警事件之后，会有需求对事件做各种二次处理，比如：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;有些事件要做 relabel&lt;/li&gt; 
 &lt;li&gt;有些事件要做标签丰富&lt;/li&gt; 
 &lt;li&gt;有些事件要 drop 掉&lt;/li&gt; 
 &lt;li&gt;有些事件要和 AI 联动生成分析建议&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; text-align:left"&gt;于是，我们抽象了事件 Pipeline 的功能，并且在开源版里支持了常用的处理器。&lt;/p&gt; 
&lt;h2&gt;新版菜单&lt;/h2&gt; 
&lt;p style="color:#333333; text-align:left"&gt;重新整理了菜单，很多菜单收敛到了 Tab 里，有些甚至收敛到侧拉板里，整体功能排布更清晰，更容易找到相关入口。&lt;/p&gt; 
&lt;p style="color:#333333; text-align:left"&gt;另外推荐一下菜单快捷跳转功能，&lt;code&gt;Ctrl + K&lt;/code&gt;(Mac 里是&amp;nbsp;&lt;code&gt;Command + K&lt;/code&gt;) 很好用，很极客。&lt;/p&gt; 
&lt;h2&gt;新版活跃告警&lt;/h2&gt; 
&lt;p style="color:#333333; text-align:left"&gt;改进活跃告警的 UI，整合了聚合卡片视图和列表视图，平时可以把这个页面投到 On-call 大屏上。&lt;/p&gt; 
&lt;h2&gt;其他一些变动&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;告警规则支持跨业务组克隆&lt;/li&gt; 
 &lt;li&gt;修复临时分享图表白屏问题&lt;/li&gt; 
 &lt;li&gt;夜莺自身增加对 Redis 操作的指标&lt;/li&gt; 
 &lt;li&gt;优化了指标转发性能&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; text-align:left"&gt;更多改动请参考 github release 的 changelog。&lt;/p&gt; 
&lt;h2&gt;升级须知&lt;/h2&gt; 
&lt;p style="color:#333333; text-align:left"&gt;大家可以从夜莺的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fccfos%2Fnightingale%2Freleases" target="_blank"&gt;github releases&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;页面下载到最新的发布包。&lt;/p&gt; 
&lt;p style="color:#333333; text-align:left"&gt;v6/v7 版本都可以平滑升级：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;建议先备份老版本的二进制、配置、integrations 目录等，留好后路然后就可以放心大胆升级了&lt;/li&gt; 
 &lt;li&gt;如果夜莺所用的 DB 账号有建表、改表权限，会自动更新表结构，否则就要参考代码仓库里&amp;nbsp;docker/migratesql&amp;nbsp;手工改表结构了&lt;/li&gt; 
 &lt;li&gt;integrations 目录可以直接替换成新版&lt;/li&gt; 
 &lt;li&gt;配置文件 etc/config.toml 建议认真 diff 一下&lt;/li&gt; 
 &lt;li&gt;容器启动的话，直接拉取 latest 镜像重启即可&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;夜莺产品特性介绍的 PPT&lt;/h2&gt; 
&lt;p style="color:#333333; text-align:left"&gt;有些人可能对夜莺的产品还不太了解，特准备了一份 PPT，请参考：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fc9xudyniiq.feishu.cn%2Fslides%2FO6xJsUzZclzeUrdMb9DcynVtnSf" target="_blank"&gt;PPT&lt;/a&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353235/nightingale-release-v8-beta11</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353235/nightingale-release-v8-beta11</guid>
      <pubDate>Sat, 10 May 2025 01:08:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>Skyeye 云智能制造办公系统 v3.16.6 发布</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="background-color:#ffffff; color:#6a737d"&gt;&lt;span&gt;Skyeye 云智能制造，采用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;Springboot (微服务) + Layui + UNI-APP + Ant Design Vue&lt;/span&gt;&lt;span style="background-color:#ffffff; color:#6a737d"&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;的低代码平台。包含 30 多个应用模块、50 多种电子流程，CRM、PM、ERP、MES、ADM、EHR、笔记、知识库、项目、门店、商城、财务、多班次考勤、薪资、招聘、云售后、论坛、公告、问卷、报表设计、工作流、日程、云盘等全面管理，实现智能制造行业一体化管理。实现管理流程 「客户关系 -&amp;gt; 线上 / 线下报价 -&amp;gt; 销售报价 -&amp;gt; 销售合同 -&amp;gt; 生产计划 -&amp;gt; 商品设计 -&amp;gt; 采购 -&amp;gt; 加工制造 -&amp;gt; 入库 -&amp;gt; 发货 -&amp;gt; 售后服务」 的高效运作，同时实现企业员工的管理以及内部运作的流程操作，完善了员工从 「入职 -&amp;gt; 培训 -&amp;gt; 转正 -&amp;gt; 办公 -&amp;gt; 离职」 等多项功能。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;&lt;a href="https://gitee.com/dromara/skyeye/blob/company_server/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.md"&gt;常见问题&lt;/a&gt;&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;strong&gt;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Farticles.zsxq.com%2Fid_xi3xhacte72g.html" target="_blank"&gt;开发文档&lt;/a&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Fspace.bilibili.com%2F87396008%2Fchannel%2Fseries" target="_blank"&gt;视频教程&lt;/a&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/strong&gt;&lt;strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.qq.com%2Fsheet%2FDYUtPdWhTbVBITlpL%3Ftab%3D000001" target="_blank"&gt;功能点&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;Skyeye&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;云【源代码】针对 {星球用户} 开源。拿到源码后可进行学习、毕设、企业等使用。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;Skyeye 云智能制造 v3.16.6 发布 ，发布内容如下：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;span&gt;Skyeye 云已加入 Dromara 社区&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;业务对象适配 Saas 进展 80%&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;VUE 版开发&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;云盘管理完成 100%&lt;/li&gt; 
   &lt;li&gt;报表设计进展 100%&lt;/li&gt; 
   &lt;li&gt;新增商品上架商城的组件&lt;/li&gt; 
   &lt;li&gt;MES 新增班次管理&lt;/li&gt; 
   &lt;li&gt;新增客户应收事项&lt;/li&gt; 
   &lt;li&gt;供应商管理新增应付事项、付款、发票抬头、发票&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;span&gt;源代码只对星球用户开放&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;解决若干问题。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;Skyeye 具备&lt;/span&gt;&lt;strong&gt;&lt;span&gt;低代码、快捷开发、可视化设计、微服务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;等特点，方便客户二次开发，极大的提高了开发效率。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;erp：&amp;nbsp;&lt;/span&gt;&lt;span&gt;https://gitee.com/doc_wei01/skyeye&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;OA：&amp;nbsp;&lt;/span&gt;&lt;span&gt;https://gitee.com/dromara/skyeye&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;报表：&lt;/span&gt;&lt;span&gt;https://gitee.com/doc_wei01/skyeye-report&lt;/span&gt;&lt;span&gt;&amp;nbsp; 有问题可以联系作者，详情请看开发计划。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;PC 端效果图&lt;/strong&gt;&lt;/p&gt; 
&lt;table cellspacing="0" style="--darkreader-inline-bgcolor:#181a1b; --darkreader-inline-border-bottom:currentcolor; --darkreader-inline-border-left:currentcolor; --darkreader-inline-border-right:currentcolor; --darkreader-inline-border-top:currentcolor; --darkreader-inline-color:#bdb7af; -webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:1px; border:medium none; box-sizing:border-box; color:#444444; display:block; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif; font-size:14px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px; max-width:100%; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:776px; word-break:keep-all; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th style="text-align:center"&gt;效果图&lt;/th&gt; 
   &lt;th style="text-align:center"&gt;效果图&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-35a653b1c873ab9501f7187b0901a27cc64.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-a8f7c658a21594b2787c667fc1214c673b1.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-50138b38c37d750b93db5b37493f71bf4ca.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-00fd5dbd8a44f8d815ecf77d93d37062616.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-6499d74ddcfe9a99997d8c797aae7b7f0b0.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-e97af4a2caccb199b76d906ecbb339a7575.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-a58e6cb3e687de2a468cb095516951f077c.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-9eb76f53a99358fdf1ce532dc711baec41a.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-ce7c58e9fe940d58b2cb9cec441176b3481.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-ca685ab278a861067f5850e12470e155e59.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1837" src="https://oscimg.oschina.net/oscnet/up-270d853e879bc14cf6632d67e0168c656c0.png" width="3839" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1837" src="https://oscimg.oschina.net/oscnet/up-0bebb255d3c79c13a69bfa0fbb7fcd80836.png" width="3839" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1837" src="https://oscimg.oschina.net/oscnet/up-90cde5042c0effeea9e85761ff8dc7283d5.png" width="3839" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1837" src="https://oscimg.oschina.net/oscnet/up-47ccf76ab671effc6142727caf066d67071.png" width="3839" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;移动端效果图&lt;/strong&gt;&lt;/p&gt; 
&lt;table border="1" cellpadding="1" cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:1px; border:none; box-sizing:border-box; color:#444444; display:block; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif; font-size:14px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px; max-width:100%; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:776px; word-break:keep-all; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果图&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果图&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果图&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果图&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1637" src="https://oscimg.oschina.net/oscnet/up-6850576a0a01188e6b2a9d1ecce58ed7455.png" width="755" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1637" src="https://oscimg.oschina.net/oscnet/up-770416ac656e0b41097dc917b2b404e62f2.png" width="755" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1637" src="https://oscimg.oschina.net/oscnet/up-754034f48dd04fd9ee1e6618db0e37f6ecb.png" width="755" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1637" src="https://oscimg.oschina.net/oscnet/up-d7707ebc67ddf3842adbb54fdc0c062a2a1.png" width="755" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353234</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353234</guid>
      <pubDate>Sat, 10 May 2025 01:03:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>袋鼠数据库工具 7.98.1 版已上线（Redis）</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;袋鼠数据库工具，是一款 AI 驱动的热门数据库系统客户端 (MariaDB / MySQL / Oracle / PostgreSQL / Redis / SQLite / SQL Server / ...) ，支持建表、查询、模型、同步、导入导出等功能，支持 Windows / Mac / Linux 等操作系统，致力于打造一款好用、好玩、开发友好的开发者工具。&lt;/p&gt; 
&lt;h2&gt;重点特性介绍&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;这个版本实现 Redis 的支持，实现了数据库对象视图、键视图、函数、模块、用户、客户端、频道对象的支持；支持多键视图，支持键值即时修改保存，支持频道创建、订阅、暂停、消息合并等；设计过程中始终聚焦核心体验，超越与创新同在；&lt;/p&gt; 
&lt;h2&gt;新特性或修复的缺陷列表&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Redis: 数据库对象支持&lt;/li&gt; 
 &lt;li&gt;Redis: 键对象支持&lt;/li&gt; 
 &lt;li&gt;Redis: 客户端对象支持&lt;/li&gt; 
 &lt;li&gt;Redis: 聚簇对象支持&lt;/li&gt; 
 &lt;li&gt;Redis: 频道对象支持&lt;/li&gt; 
 &lt;li&gt;Redis: 用户对象支持&lt;/li&gt; 
 &lt;li&gt;Redis: 分片支持&lt;/li&gt; 
 &lt;li&gt;Redis: 模块/函数/命令对象支持&lt;/li&gt; 
 &lt;li&gt;Redis: 控制枱支持&lt;/li&gt; 
 &lt;li&gt;Redis: 查询支持&lt;/li&gt; 
 &lt;li&gt;重构错误消息样式&lt;/li&gt; 
 &lt;li&gt;开放标题栏背景设置&lt;/li&gt; 
 &lt;li&gt;工作空间: 网格支持行统计和选择信息&lt;/li&gt; 
 &lt;li&gt;更新中文语言支持 (zh-CN/zh-SG/zh-Hans/zh-Hant)&lt;/li&gt; 
 &lt;li&gt;MySQL: 修复数据库/架构对象加载问题&lt;/li&gt; 
 &lt;li&gt;修复: 应用工作空间创建问题&lt;/li&gt; 
 &lt;li&gt;修复: 资源浏览视图公共菜单确实问题&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;下载与安装&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.datatable.online%2Fzh%2Fdownload%2Fv7.98.1.603.html" target="_blank"&gt;袋鼠数据库管理工具 7.98.1&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;新版本功能快照&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.datatable.online%2Fzh%2Fdownload%2Fv7.98.1.603.html" target="_blank"&gt;&lt;img alt="Redis 键编辑截图" src="https://oscimg.oschina.net/oscnet/up-bb04d911533d016ad6de240dd0b97a8907c.png" referrerpolicy="no-referrer"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.datatable.online%2Fzh%2Fdownload%2Fv7.98.1.603.html" target="_blank"&gt;&lt;img alt="Redis 键对象浏览截图" src="https://oscimg.oschina.net/oscnet/up-9c0adf1c2d8b1362bee523f1cd07fdd6f04.png" referrerpolicy="no-referrer"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.datatable.online%2Fzh%2Fdownload%2Fv7.98.1.603.html" target="_blank"&gt;&lt;img alt="Redis 命令浏览截图" src="https://oscimg.oschina.net/oscnet/up-4edbd0b56b08cdaa3afda34416dd305aae0.png" referrerpolicy="no-referrer"&gt;&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353226/kangaroo-7-98-1</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353226/kangaroo-7-98-1</guid>
      <pubDate>Fri, 09 May 2025 23:12:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
  </channel>
</rss>
