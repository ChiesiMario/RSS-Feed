<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-最新资讯</title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://8.134.148.166:30044/oschina/news" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-最新资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Tue, 01 Apr 2025 07:37:54 GMT</lastBuildDate>
        <ttl>5</ttl>
        <item>
            <title>自增主键去哪了？--- 一次开发过程中的思考</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;p&gt;作者：京东零售，王光&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_1&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;前情提要：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;最近新接了一个需求，需要去创建两张表，其中有一张表需要根据业务 id 和业务类型建立唯一索引，对数据唯一性进行约束。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;因为涉及到业务嘛，表结构就进行缩略了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;表结构示例如下：

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;CREATE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;TABLE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;example_table&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;id&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;bigint&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;20&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;unsigned&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NOT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;AUTO_INCREMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;自增主键&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;business_id&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;bigint&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;20&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;unsigned&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NOT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;业务 ID&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;business_type&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;tinyint&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;unsigned&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NOT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;业务类型，&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;del&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;tinyint&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;unsigned&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;DEFAULT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;0&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;删除标识，0 表示未删除，1 表示删除&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;creator&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;varchar&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;50&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NOT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;创建人 PIN&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;modify_date&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;datetime&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;DEFAULT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ON&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;UPDATE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;更新时间&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;create_date&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;datetime&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;DEFAULT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;创建时间&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
     &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;PRIMARY&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;KEY&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;id&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 
     &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;UNIQUE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;KEY&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;uk_business_id_and_type&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;business_id&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;business_type&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ENGINE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;InnoDB&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;AUTO_INCREMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;DEFAULT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;CHARSET&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;utf8mb4 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;COMMENT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;示例表&#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;既然表建立好，那么就是发挥我们编码能力的时候了...此处省略一堆编码时间。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;编码结束，自测结束，信心满满的找前端同学进行联调。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;因为联调嘛，mock 了很多同样的 business_id 和 bussiness_type 的数据，结果到了数据库，因为唯一索引的约束，报了一堆错误，插入都失败了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;终于调整了一下 mock 数据，插入成功了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;但是发生了一个比较神奇的现象&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//78bf408eae380fb0b81825c61211bced.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//338c271c292e1a1eb9649b1fbe1425b8.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主键不是连续自增的了~~ 中间丢失的自增主键去哪了??&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_2&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;关于自增主键&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f1f1f&quot;&gt;自增主键是我们&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#040c28&quot;&gt;在设计数据库表结构时经常使用的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;主键生成策略&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f1f1f&quot;&gt;，主键的生成可以完全依赖数据库,在新增数据的时候，我们只需要将主键设置为 null，0 或者不设置该字段，数据库就会为我们自动生成一个主键值。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;首先,我们要知道，自增主键保存在哪里~&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;不同的引擎对于自增值的保存策略不同&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1.MyISAM 引擎的自增值保存在数据文件中&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2.InnoDB 引擎的自增值，在 MySQL5.7 及之前的版本，自增值保存在内存里，并没有持久化。每次重启后，第一次打开表的时候，都会去找自增值的最大值 max(id)，然后将 max(id)+步长（建表语句中的指定步长）作为这个表当前的自增值。在 MySQL8.0 版本，将自增值的变更记录在了 redo log 中，重启的时候依靠 redo log 恢复重启之前的值。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;了解了自增主键的保存机制，再了解一下主键这个&quot;自增&quot;逻辑~&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//e8fd21e0666df00de3f15e2102fb28d8.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;插入一条语句分配自增主键 id 值的流程如图所示。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_3&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;自增主键不连续的情况&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;细心的小伙伴一定发现了~咦，这个 ID=声明值的话，ID 就可以能被随意指定了，那么 ID 就可能存在不是自增的情况了！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;是的，这其实就是第一种自增主键不连续的情况。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第二种不连续的情况就是我们在联调中遇到的问题了&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;简单来做个测试,目前数据就像一开始的图一样,id 自增到了 24,下一个插入的应该是 25,那么执行一条 sql&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;into&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; example_table  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;values&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;111&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;mock&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//942a91e603961954b723a3052dfa45fa.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;插入成功了一条数据,主键是连续自增的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;那么我们模拟一条错误的 sql 呢 (`creator`字段指定错类型)~：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;into&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; example_table  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;values&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;112&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;mock&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;果然，执行 sql 的时候报出异常：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//087aa0531188ff7876f819f8854c5c7a.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;继续执行一条正确的正常的 sql，插入结果：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//37dc344bca29c059081e3db9b5809d57.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主键还是连续自增的。这个发生错误为什么自增主键还是连续的呢。我们模拟一下之前联调遇到的情况，插入一条 sql：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;into&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; example_table  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;values&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;112&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;mock&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;因为 id=26 的数据 buiness_id 和 bussiness_type 跟新插入的这条数据一样，那么肯定会因为唯一索引插入不成功，果然，执行结果如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//fb09e9f2a63d4ad434c5fa794a6115a3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;那么，我们修改一下 sql 继续插入呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;into&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; example_table  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;values&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;113&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;mock&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//7537f463e7de6952f74bd8c2bc5f1071.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主键发生了&quot;断代&quot;,27 的主键跑丢了...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;明明都是 sql 插入的时候错误，为什么结果会有差异呢，有的时候主键会丢失，有的时候主键不会丢失呢，想要弄明白这个问题，就需要先明白一下一条 sql 的执行过程：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//d05eab6fd6ae0d3e943ba03f27ca9dda.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这里只是针对本文需要关注的点（相信小伙伴对这个执行过程肯定也是非常了解的😏）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;所以说，主键有没有丢失的核心关键就是有没有走到，执行引擎有没有去分配主键。一旦走到了分配主键就不会进行回滚。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;既然一旦分配了主键就不会回滚，那是不是事务回滚之后主键也不会回滚至之前的值呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第三种就是这样，事务回滚也会导致主键「丢失」：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;举个栗子：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;into&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; example_table  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;values&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;114&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&#39;mock&#39;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;now&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//7d7550262a81f277d811e270818b05c2.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;回滚这条语句。并继续执行上面那条语句&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//480441f1e34d00af38d6e43a5f0ff92a.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;29 这个 id 就「丢失」了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;有好奇的小伙伴就会问了，问什么 mysql-innodb 不提供一种回滚主键 id 的机制呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我理解的是，1、没有必要 ；2、影响性能；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;自增主键锁并不是一个事务锁，而是每次申请完就马上释放，以便允许别的事务再申请。但在 MySQL5.0 版本的时候，自增锁的范围是语句级别。也就是说，如果一个语句申请了一个表自增锁，这个锁会等语句执行结束以后才释放。MySQL5.1.22 版本引入了一个新策略，新增参数 innodb_autoinc_lock_mode，默认值是 1。 1.这个参数设置为 0：表示采用之前 MySQL5.0 版本的策略，即语句执行结束后才释放锁。 2.这个参数设置为 1：普通 insert 语句，自增锁在申请之后就马上释放。批量插入数据的语句，自增锁还是要等语句结束后才被释放。 3.这个参数设置为 2：所有的申请自增主键的动作都是申请后就释放锁。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我们假设一个场景主键 id 是可以回滚的，根据上面的自增主键锁的规则。事务 A 申请了一个自增主键 id=29，事务 B 申请了一个自增主键 id=30，在申请了之后就会被释放，如果这个时候事务 A 进行了回滚，事务 B 执行完毕，这个时候就需要将 id 回滚到 29，但是 id30 已经存在表中了。那么肯定会需要一个类似现在的 redolog,undolog 的&quot;存储单元&quot;去存储主键 id 的分配情况，如果再有一个事务 C 过来申请主键 id，这个时候就会出现很多种情况去考虑，1：我要申请的主键 id 是否已经分配出去了。如果已经没有还好，如果有的话，需要去找到一个允许我插入的最小的 id（这个最小的成本就会比目前直接选择最大的 id 性能要查很多。）2：我是批量插入，我需要申请一批 id，这种情况想想就很抓马，因为这一批次中的 id 可能存在多个已经存在的情况。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;而且就算主键 id 可以回滚，那么我插入数据的顺序，跟 id 的大小就存在悖论关系了，在业务层面就不能根据 id 去做一些判断了，这也无疑增加了业务层面的复杂性。所以主键 id 是可以回滚是一个 ROI 极低的方案了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在上面的说到的自增主键的分配策略也可以想到：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第四种不连续的情况：批量申请的主键 id，如果出现没有使用完，或者批量插入出现问题导致的主键 id 不连续。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;当然这里说的批量插入不是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;insert into example_table values (null,111,1,0,&#39;mock&#39;,now(),now()),(null,112,1,0,&#39;mock&#39;,now(),now());&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这样的语句，因为这种语句在 sql 解析的时候就可以明确需要插入多少条目，id 也就会直接进行分配到具体的条目。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;但是对于 insert...select 这种批量插入语句，因为大部分都是执行多表操作，所以实际操作的条数是不可确定的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在进行分配主键 id 的时候，会有一个策略：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;1.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;语句执行过程中，第一次申请自增 id，会分配 1 个； &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;2.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1 个用完以后，这个语句第二次申请自增 id，会分配 2 个；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;3.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2 个用完以后，还是这个语句，第三次申请自增 id，会分配 4 个；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;4.&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;依此类推，同一个语句去申请自增 id，每次申请到的自增 id 个数都是上一次的两倍。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;
create table `example_table_2` like `example_table`;
#使用批量插入语句，从 example_table 中读取数据, 往 example_table_2 中插入数据
insert into example_table_2 select null, business_id, business_type, del, creator, modify_date, create_date from example_table;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这个时候的执行结果如图:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//68ddf5dc52f04b58075eafa07c7dd343.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;那么按照预期，第一次分配 id=1,第二次分配 id 是[2,3],第三次分配 id 区间是[4,7],第四次分配区间是[8,15]，那么执行下面语句：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;#插入一条数据，预期主键 id 应该是 16
insert into example_table_2  values (null,200,1,0,&#39;mock&#39;,now(),now());&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//a834acbb4e615f5e4488152ec66c9cb7.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;果然执行结果符合预期结果。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这个语句在实际业务中使用的很少，mysql 在这个语句里面还是有很多设计的，大家可以看看官方文档详细的了解一下&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdev.mysql.com%2Fdoc%2Frefman%2F8.0%2Fen%2Finsert-select.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;https://dev.mysql.com/doc/refman/8.0/en/insert-select.html&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;还有一种情况是主键 id 设置的步长不为 1&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这种情况一般都是发生在表的设计初期，所以出现不自增的话也是符合预期的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_4&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;写在最后&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;MySQL 是作为大家都经常接触的 DB，相信大家都会有一定的认知，自增主键不连续大家肯定也遇到过，这次在联调过程中遇到这个情况，在跟别的小伙伴分享的时候，突然就想写一篇文章，文章里面如果有不正确或者不准确的地方也欢迎大家斧正~说实话，作为一名交易端的研发人员，业务开发任务压力真的蛮大的，我也迷茫过，如何在这个过程中成长，珍惜我们遇到的问题，将遇到的问题记录在册，深追问题，你会发现有很多问题其实真的是因为我们某些知识的薄弱点造成的。然后将我们觉得值得分享的利用碎片时间整理成文章分享出来，其实这篇文章从我开始写到到最后成稿也历时 11 天之久，但是不管怎么样，只要我们从中有收获就可以了~最后，希望大家都可以成为自己心目中的技术达人。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;To enjoy is to be young，To enjoy is to be your own goal!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/4090830/blog/18043736</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18043736</guid>
            <pubDate>Tue, 01 Apr 2025 07:35:53 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>达闼董事长回应「欠薪」传闻：的确遇到困难，在战略调整</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;近期有传闻称，人形机器人领域知名独角兽企业达闼机器人正陷入危机，过去一年陆续出现欠薪，裁员状况。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;达闼于 2015 年创立，全球总部位于上海，并在北京、成都等地设立分支机构。资料显示，2023 年，达闼获得超 10 亿元人民币 C 轮融资。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;272&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c9bf85394836549d71df5198f43b88e753c.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;针对上述传闻，达闼创始人、董事长兼 CEO 黄晓庆对 21 世纪经济报道记者表示，公司业务的确遇到很大困难，为此进行了人员缩减，同时战略调整，聚焦人形机器人和云端大脑等业务，目前正在积极融资，拓展业务，并努力解决前员工的「欠薪」问题。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;黄晓庆承认，2024 年开年，公司确实遇到很多困难，科技行业整体融资压力越来越大，对此公司在 2024 年将发展战略调整为聚焦人形机器人，并做了一些战略性的优化和裁减，对北京、上海和深圳各地分公司都进行了一些减员。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「在这样的情况下面，我们的工作也确实受到很多影响。所以你们看到的很多情况，也代表目前我们公司的员工没有过去多了。」黄晓庆表示。他称，公司过去员工数在最多的时候有 800 多人，现在正式的员工有 150 多人，加上顾问有 200 多人，主要分布在北京、成都等 3 个地方，另外目前正在全面布局建设的天津基地，已与天津津南区签署产业投资落地协议，落地「具身机器人云脑操作系统平台」，建设「云端机器人应用训练场」，打造「人形机器人公版机总装线」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;黄晓庆表示，「我们对前员工还是有非常密切的联系，我们一定会在一定时间内、在来逐步解决离职补偿问题」，「现在真的就是需要时间解决，既要保证公司经营发展，又要逐步解决问题，绝大部分员工都非常理解。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;对于资金链断裂，黄晓庆回应道，2024 年开年，达闼遇到很多困难。「在三年疫情期间，公司都没有减员。我们在疫情之后遇到的融资困难，很大程度上是因为有一些融资未及时到位和银行抽贷。当时的融资等外部环境都不太好，加上被美国实体清单后很多美元基金也无法投资，造成了我们那时候的现金流困境。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;最近几天，产业和市场就被朱啸虎「正批量退出人形机器人」的消息搅起轩然大波。「我认为今天的人形机器人的产业，类似于 2007 年、2008 年的智能手机产业，属于黎明时期。并不是要退场的时候，而是要积极进场的时候。」黄晓庆直言。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在黄晓庆看来，朱啸虎并不明白云端机器人的概念，「他没有想到，如果机器人装上了云端大脑，配置强大的 AGI 能力的智能体，加上强大的视觉模型，是我们物理世界的镜像。我认为云端智能机器人是达到人类智能的核心问题，如果实现了，我认为朱啸虎会改变观点。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;黄晓庆对记者透露，「2024 年尽管现金流很紧张，我们通过开拓市场也实现了 6 亿元的收入，今年到 2 月底，我们待签约和准备签约的订单金额也达到了 2-3 亿元。这足以证明我们达闼机器人还在积极努力，正常营业，不断进取。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;黄晓庆称，「达闼只是中国众多科技创新民营企业的一个缩影，也是人形机器人产业的先行者，科技创新的道路不会是一帆风顺的，有坎坷很正常，只要持续努力，砥砺前行，一定会成功。最后由衷期待社会各界能给予帮助、关心和爱护。」&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342256</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342256</guid>
            <pubDate>Tue, 01 Apr 2025 07:18:51 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>OpenAI 宫斗内幕曝光</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;近日，基奇·哈吉即将出版的新书《乐观主义者：山姆·阿尔特曼、OpenAl 与开创未来的竞赛》曝光了 OpenAl 董事会在 2023 年解雇首席执行官阿尔特曼的新细节。&lt;/p&gt; 
&lt;p&gt;据报道，时任 OpenAl 首席科学家苏茨克沃秘密发送给 OpenAI 董事两封针对阿尔特曼和 OpenAI 总裁布罗克曼的 PDF。其中列举了数十条涉嫌撒谎或失当行为的例子，最终导致了阿尔特曼被罢免。&lt;/p&gt; 
&lt;p&gt;PDF 中针对阿尔特曼的指控，苏茨克沃都附上了相关聊天记录截图。 &amp;nbsp;其中，最具爆炸性的一条是 OpenAI 首席技术官米拉·穆拉提（Mira Murati）质疑 GPT-4 Turbo 的安全审批是否通过，阿尔特曼回应称「法务部确认不需通过」。穆拉提查证后发现，公司法务部根本没说过这话。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1212&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0401/151009_XrfL_2720166.png&quot; width=&quot;1276&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;OpenAI 原本被设定为一个「不同」的科技公司，它由非营利性董事会管理，使命不是满足股东，而是确保人工智能为人类利益服务。&lt;/p&gt; 
&lt;p&gt;然而，在实际运营中，董事会逐渐发现，阿尔特曼几乎拥有对 OpenAI 无可撼动的控制力，董事会越来越担心阿尔特曼的独断专行，一系列信任危机早已产生。&lt;/p&gt; 
&lt;p&gt;例如，在面对董事会要求加强 AI 安全审查、增补专家时，阿尔特曼与布罗克曼采取了拖延战术。&lt;/p&gt; 
&lt;p&gt;2022 年冬天，董事会正在权衡如何发布 GPT-4 三项颇具争议的功能时，阿尔特曼声称这三项增强功能均已获得联合安全委员会的批准。可当董事会要求审查记录时，发现实际上只有一项获得通过。&lt;/p&gt; 
&lt;p&gt;一次董事会会议后，一名 OpenAI 员工在走廊上向独立董事透露：微软正在印度测试尚未发布的 GPT-4，而这一测试并未获得公司内部联合安全委员会的批准，更未告知董事会。&lt;/p&gt; 
&lt;p&gt;又如，OpenAI 启动的创业投资基金原本应归 OpenAI 管理，但某位董事在一次晚宴中偶然得知，该基金实际由阿尔特曼本人持有，虽然他未从中获利，这种安排依旧令人震惊。&lt;/p&gt; 
&lt;p&gt;穆拉提也向董事会透露，阿尔特曼和布罗克曼的管理风格已严重阻碍她履行职责。布罗克曼表面上向她汇报，却一有争议就越过她去找阿尔特曼，让她在公司的每一天都是「在夹缝中生存」。&lt;/p&gt; 
&lt;p&gt;苏茨克沃的 PDF 文件加速了事态发展。那天晚上，四位董事与苏茨克沃一同投下了震撼科技世界的一票，决定解雇阿尔特曼，并将布罗克曼逐出董事会。他们并没有事先告知微软，也没有通知员工。&lt;/p&gt; 
&lt;p&gt;几小时后，OpenAI 官网发布了那则短短的声明：阿尔特曼因「未始终对董事会保持坦诚」被解职。&lt;/p&gt; 
&lt;p&gt;整个硅谷哗然，OpenAI 高层几近分裂，员工们在混乱中震惊不已——他们没有得到任何解释，只知道，「山姆不再担任 CEO」。&lt;/p&gt; 
&lt;p&gt;穆拉提被任命为临时 CEO。但她很快意识到，董事会根本没做好准备——没有继任计划，没有沟通战略，甚至没有和微软商量。她开始质疑自己是否被当作棋子来使用，并最终站到了阿尔特曼一方。&lt;/p&gt; 
&lt;p&gt;随后，高管层集体施压董事会，要求公开解雇理由，否则就一起辞职。仅仅 48 小时，一封员工联名信已收集到近 800 个签名，几乎全员威胁辞职。甚至连穆拉提与苏茨克沃，也签了名字。&lt;/p&gt; 
&lt;p&gt;显然，苏茨克沃等董事因权力旁落发起的这场「政变」以失败告终。他们原本以为，揭露阿尔特曼的管理问题会获得员工的理解与支持；但现实却是，一家公司，即便以「人类」为使命，一旦没有共同信任的基础，也将瞬间陷入混乱与失控。&lt;/p&gt; 
&lt;p&gt;几天后，阿尔特曼复职，布罗克曼归位，风波暂息。而苏茨克沃和穆拉提随后也离开了公司，创办了自己的公司。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;回顾&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267006/openai-ceo-sam-altman-fired&quot; target=&quot;news&quot;&gt;OpenAI 董事会内讧，CEO 兼创始人 Sam Altman 被逐出公司&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267013/openai-greg-brockman-quit&quot; target=&quot;news&quot;&gt;OpenAI 总裁 Greg Brockman 辞职&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267101/openai-board-discussions-with-sam-altman-return-as-ceo&quot; target=&quot;news&quot;&gt;OpenAI 董事会与 Sam Altman 讨论重返 CEO 岗位事宜&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267200&quot; target=&quot;news&quot;&gt;Altman 以访客身份回到 OpenAI，和公司高管会面谈判&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267256/openai-twitch-ceo-shear&quot; target=&quot;news&quot;&gt;Altman 回归失败，OpenAI 董事会聘请 Twitch 前高管担任 CEO&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267272&quot; target=&quot;news&quot;&gt;OpenAI 前 CEO 和总裁 Sam Altman &amp;amp; Greg Brockman 加入微软&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267364&quot; target=&quot;news&quot;&gt;OpenAI 超 700 名员工签署联名信，要求董事会集体辞职&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/267591/sam-altman-returns-ceo-open-ai&quot; target=&quot;news&quot;&gt;Sam Altman 重返 OpenAI 担任首席执行官&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/268788/altman-returns-as-ceo-openai-has-a-new-initial-board&quot; target=&quot;news&quot;&gt;OpenAI 正式宣布 Sam Altman 回归担任 CEO&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342255</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342255</guid>
            <pubDate>Tue, 01 Apr 2025 07:16:51 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>英特尔 CEO 陈立武：将剥离非核心资产、需补充流失的人才</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;英特尔首席执行官陈立武表示，该芯片制造商将剥离对公司愿景非核心的资产，开发包括定制半导体在内的新产品，以更好地匹配客户需求。陈立武称，&lt;strong&gt;英特尔需要补充流失的工程人才，改善资产负债表，更好地调整生产流程，以满足潜在客户的需求&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;周一在拉斯维加斯举行的英特尔愿景大会上，陈立武首次以首席执行官身份公开露面。他没有具体说明他认为英特尔的哪些业务将不再是其未来的核心。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-50854310c86ed823f44b847f53dfbf57e42.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;「我们还有很多艰苦的工作要做」，他对台下的英特尔客户说。「在有些方面，我们没有达到你们的期望。」&lt;/p&gt; 
&lt;p&gt;这位在半导体领域经验丰富的高管正试图帮助这家曾称霸行业数十年之久的公司重返荣光。其领导层面临的一个关键问题是，重振英特尔究竟是该保持公司的完整性，还是分拆其关键产品和制造业务。&lt;/p&gt; 
&lt;p&gt;陈立武没有发出他将寻求剥离哪一块业务的信号。相反，他强调了他需要解决的问题，以便让这两个部门都能有更出色的表现。他说，英特尔用于数据中心、特别是人工智能相关的芯片还不够好。&lt;/p&gt; 
&lt;p&gt;「我们在创新方面落后了」，这位首席执行官说。「我们适应和满足你们的需求太慢了。」&lt;/p&gt; 
&lt;p&gt;现年 65 岁的陈立武于 3 月 18 日上任，他的任命最初引发了乐观情绪，并吸引一些投资者重返该股。但此后，随着科技股的普遍下跌，该公司股价也随之走低。陈立武发表演讲后，英特尔在盘后交易中下跌约 1.2%。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342250</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342250</guid>
            <pubDate>Tue, 01 Apr 2025 07:02:51 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>国家天文台基于通义千问打造国际首个太阳大模型「金乌」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;国家天文台联合阿里云&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fh4eaYrUsKDRHGgYr-kwatA&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;国际首个太阳大模型——「金乌」。「金乌」基于通义千问系列开源模型打造，目前在 M5 级太阳耀斑预报上准确率超 91%，为该级别太阳预报最高水平。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;277&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-98bad688a4b6cb4612ebb30baa4e83c954b.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;根据介绍，基于 Qwen-VL 等模型，「金乌」太阳大模型以超过 90 万张太阳衞星图像为样本完成微调训练。通过输入上一时段的太阳物理参数及对应的观测图像，「金乌」可预测未来 24h 的耀斑爆发情况。同时，「金乌」可推测出下一时段的物理参数，通过调用扩散模型生成下一时段的太阳模拟图像。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;国家天文台怀柔观测基地主任林佳本表示：「通义大模型在中英文等多语言和图像识别能力上表现出色，非常适合太阳预报。作为科研机构，相比从头训练大模型，基于已有的基模去发展科学模型，是更高效、更具可行性的选择。未来，‘金乌’太阳大模型还将用于解答‘太阳磁场起源’等‘未解难题’，为我国太阳研究作出贡献。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此前，中国科学院（简称「中科院」）国家天文台「星语」大模型、中科院青藏高原研究所的全球首个水能粮大模型「洛书」以及中科院南海所珊瑚礁多模态大模型「瑶华」，均基于阿里通义千问系列模型打造。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342244</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342244</guid>
            <pubDate>Tue, 01 Apr 2025 06:40:51 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>广东：每年择优支持一批开源社区和开源生态中心，每个给予最高 800 万元资助</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;《广东省推动人工智能与机器人产业创新发展若干政策措施》（以下简称《若干政策措施》）新闻发布会于今日召开，宣布出台 12 条措施，推动人工智能与机器人产业创新发展。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;其中，支持创建国家级、省级人工智能与机器人领域制造业创新中心，省财政按规定分别给予最高 5000 万元、1000 万元的资金支持；推动广州、深圳数据交易所打造国家级数据交易场所。据透露，2024 年广东人工智能核心产业规模超过 2200 亿元，全省人工智能核心企业超过 1500 家。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;375&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-743523a8fadf83a082ea9e61a52125dcbfa.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;《若干政策措施》以支持、服务企业为导向，立足于强化资金、人才、用地等要素供给，从支持核心技术攻关、培育优质企业、打造应用场景、培养引进人才、推进标准体系建设等方面提出了 12 条「干货」政策措施，汇聚最优资源、集聚最大力量，力争实现「六个一批」，加快打造全球人工智能与机器人产业高地。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;其中，将&lt;strong&gt;攻破一批关键核心技术&lt;/strong&gt;。积极面向全球加强协同创新，争取更多创新资源落户广东。实施省重点领域研发计划「新一代人工智能」「智能机器人」等旗舰项目、重大专项，在上述领域部署攻关任务。对国家科技重大专项的人工智能与机器人领域重点项目，省财政按规定给予配套奖励。支持创建国家级、省级人工智能与机器人领域制造业创新中心，省财政按规定分别给予最高 5000 万元、1000 万元的资金支持。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;培育一批优质企业&lt;/strong&gt;。加快培育人工智能与机器人领域单项冠军企业、专精特新中小企业，对该领域获评国家级单项冠军企业、专精特新「小巨人」企业的，在省级支持的基础上再「加码」，鼓励地市给予奖励，省财政进一步按照地市奖励资金 1：1 予以激励。设立人工智能与机器人产业基金，引导社会资本围绕产业链关键核心领域，加强对创新型企业的投融资支持。对重点项目开通「绿色通道」，推动重点项目建设。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;部署一批高能级平台&lt;/strong&gt;。推动现有人工智能与机器人产学研平台能级提升、联动发展，因时因势谋划高能级平台，支持建设开源社区、开源生态中心和相关公共服务平台，提供技术交流共享、算力调度、数据训练、大模型评测等服务。&lt;strong&gt;每年择优支持一批开源社区和开源生态中心，每个给予最高 800 万元资助。&lt;/strong&gt;推动广州、深圳数据交易所打造国家级数据交易场所，打造广东数据要素集聚发展区。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;打造一批典型应用场景。&lt;/strong&gt;突出人工智能、机器人在重点领域应用赋能，组织实施「人工智能+」行动，在教育、医疗、交通、民政、金融、安全等领域广泛拓展应用。组织开展「机器人+」行动，围绕工业、农业、城市管理、医疗、养老服务、特种作业等领域，挖掘开放应用场景。依托重点产业集群开展人工智能赋能新型工业化试点，每年择优支持工业领域大模型和应用解决案例，每个给予最高 800 万元奖励。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在引进培育优秀人才方面，把吸聚人工智能与机器人产业所需人才作为「百万英才汇南粤」行动计划的重中之重，围绕人工智能与机器人产业的发展需求和重点任务，支持企业引进&lt;strong&gt;培育一批创新领军人才、青年拔尖人才&lt;/strong&gt;。在粤港澳大湾区博士博士后创新创业大赛、「创客广东」大赛、「越来越好」国际设计大赛中设立人工智能与机器人有关专项赛，以赛促新、以赛促创，通过大赛选拔人才，强化技术交流合作。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此外，广东将&lt;strong&gt;完善一批标准法规制度&lt;/strong&gt;。积极推进标准体系建设，对主导制定人工智能与机器人产业国际标准、国家标准、行业标准的，分别给予资助。探索创新人工智能与机器人「监管沙盒」等包容审慎监管模式，加快建设粤港澳大湾区生成式人工智能安全发展联合实验室。加快推动人工智能领域立法，为人工智能产业发展提供制度保障。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342239</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342239</guid>
            <pubDate>Sun, 23 Mar 2025 06:27:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>《生成式人工智能全栈技术专利分析报告》发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;工信部电子知识产权中心&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FNtSh5E23wFGQpKWvFnrxVQ&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;了《2024 生成式人工智能全栈技术专利分析报告》，阐析了生成式人工智能全栈技术创新的新发展新突破，并围绕模型能力的最新拓展，由算力芯片和软件框架构成的基础层、大模型打造的模型层协同提升算力效能的新范式，以及以智能体为标志的应用创新全面发展，从专利视角去理解、发现生成式人工智能全栈技术创新当前的最新发展态势，旨在为突破现有短板和寻求创新路径提供借鉴。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;一是我国生成式人工智能技术栈基础层（智能芯片和软件框架）、模型层、应用层深度融合、协同发展，形成了「需求牵引技术、技术赋能场景」的发展格局。生成式人工智能基础层与模型层技术的创新突破为应用场景的拓展提供了基座支撑和新的解决方案，另一方面应用领域的复杂需求又倒逼、激励基础层、模型层的算力升级与算法优化，带动了我国生成式人工智能全栈技术的创新发展。2017 年至 2024 年间，我国生成式人工智能全栈公开专利共 167,634 项，专利申请年均复合增长 31.6%，专利申请人数量从 2,257 家扩张至 13,075 家，年均增长 24.6%，展现出在国家战略引领、地方政策助推、技术创新的全面支持下，人工智能技术变革式的创新发展态势。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;264&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-60b12888503c9ab03c5b0cab6e02b555554.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;图 1 生成式人工智能中国专利申请与授权态势分析&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;二是我国创新主体更加注重专利质量，以企业为主体的自主创新与产业生态正在形成。《报告》显示，百度、华为、浪潮、腾讯和阿里巴巴等专利申请数量排名前十的企业类创新主体，其专利申请量之和占总申请量的 10%，正成为技术突破、效率提升与场景应用的关键力量。特别是百度、华为等科技领军企业实现了从底层算力、模型研发到应用落地的全链条创新布局，构建了智能芯片、深度学习框架、基座大模型、垂直模型和智能体等全栈式产品矩阵，能够发挥「基础设施」的禀赋，为经济建设贡献更有价值的创新力量。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;表 1 生成式人工智能中国专利申请与授权 Top10 创新主体（企业）&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;213&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ea0f167f86b7c77aeb72caf267a14e32bfc.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;三是生成式人工智能全栈发展呈现出技术创新驱动、应用场景牵引与生态系统支撑的三位一体、协同演进的发展模式，其中代表性创新主体展现了价值传导、创新引领的核心作用。为解析生成式人工智能技术创新、产业应用和生态支撑三方面互为支点的发展格局，《报告》基于 20 余项专利指标，探索构建了「AI 专利高质量发展能力测算指标体系」，借此研判代表性创新主体推动核心技术研发、打造应用场景落地、培育可持续自主生态的梯次性发展战略。如下图所示，百度依托基础层的飞桨框架与昆仑芯片深度适配、模型层的文心系列大模型，为智能体等产业应用提供动力引擎，形成了自主的技术创新生态，并在 AI 专利高质量发展能力评测中建立了良好的储备和领先优势。华为、腾讯和阿里巴巴等企业也已构筑了研发、应用和生态互为支撑的稳定发展体系。之江实验室作为新型研究机构，则展现了基础研究与应用创新协同、快速推进的发展态势。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;277&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-0eab2e859b58c0a807a328b5b9f8f895b85.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;图 2 生成式人工智能主要创新主体 AI 专利高质量发展能力分布&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;四是多模态及推理技术专利的加速申请，印证了 2024 年生成式人工智能模型技术正逐渐具备理解真实世界、进行复杂决策的能力，使我们在通往通用人工智能（AGI）的道路上又进一步。2025 年 1 月，我国 AI 初创公司深度求索发布的 DeepSeek R1 以技术路径、成本控制与开源策略的全面创新，为 AI 研发提供了新范式。3 月百度发布的文心大模型 X1 在性能对齐的情况下，进一步将 API 调用价格降至 R1 的一半。人工智能普惠应用的「大航海时代」即将来临。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;《报告》认为「人工智能+」专项行动的深入推进将进一步加速生成式人工智能作为通用技术的赋能作用，应持续用力生成式人工智能应用创新和开发，并发挥新型举国体制优势向科技创新的上游突破，努力追赶基础算力、基本算法、结构化基础数据的创新路径，加快形成新质生产力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;《报告》建议建立长期多元的战略规划，加强国家级基础算力、高质量数据供给，加强产业创新集群培育，打造「产学研一体化」「头雁企业+专精特新」雁阵格局，形成标杆性垂直领域的创新产业集群。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;2024 年国家政府工作报告同时提出「发展新质生产力」和「人工智能+」行动计划，奠定了生成式人工智能的战略基础地位。2025 年政府工作报告继续提出，持续推进「人工智能+」行动，将数字技术与制造优势、市场优势更好结合起来，支持大模型广泛应用，大力发展智能网联新能源汽车、人工智能手机和电脑、智能机器人等新一代智能终端以及智能制造装备。在此之上，生成式人工智能技术创新将更广泛的与应用场景深度融合，为产业经济和人们生活赋能。生成式人工智能技术创新与广泛应用正步入发展的新篇章。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342223</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342223</guid>
            <pubDate>Sun, 23 Mar 2025 05:44:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>百度「文小言」更新：整合最文心大模型 X1 &amp; 4.5、升级全新语音大模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;3 月 31 日，新一期百度 AI Day 上，百度 AI App「文小言」正式宣布完成品牌焕新与功能升级。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9466c71b41e7ebbebf66064d6748dcb4761.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;主要变化如下：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1、支持多模型调度&lt;/strong&gt;，整合了最新的文心大模型 X1、文心大模型 4.5 等模型能力，尤其擅长推理计算，推理后不仅能输出图文混合内容，还能调用工具完成连续任务的处理；此外还提升多模态理解能力，着重升级图片理解能力；&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0401/120215_sXZt_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2、升级全新语音大模型&lt;/strong&gt;：基于全新互相关注意力（cross attention）的端到端语音语言大模型，支持方言对话、复杂知识问答及随时打断等，用户可进行语音知识问答或趣味角色扮演。&lt;/p&gt; 
&lt;p&gt;据介绍，此次升级的语音大模型具备构建多垂类助手，DeepQA，RAG 和情感聊天等服务的能力。 模型具备极低的训练和使用成本，极快的推理响应速度。语音交互时，可将用户等待时长从行业常见的 3-5 秒降低至 1 秒左右；在电话语音频道的语音问答场景中，调用成本较行业均值下降约 50%-90%。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3、图片问答能力提升&lt;/strong&gt;：支持多场景文字、语音提问，并进行深度解析。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0401/120450_a32a_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;目前，文小言 App 已完成上述功能更新。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342201</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342201</guid>
            <pubDate>Sun, 23 Mar 2025 04:05:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>分布式数据一致性场景与方案处理分析</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;p&gt;&lt;strong&gt;一、引言&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在经典的 CAP 理论中一致性是指分布式或多副本系统中数据在任一时刻均保持逻辑与物理状态的统一，这是确保业务逻辑正确性和系统可靠性的核心要素。在单体应用单一数据库中可以直接通过本地事务 (ACID) 保证数据的强一致性。&lt;/p&gt; 
&lt;p&gt;然而随着微服务架构的普及和业务场景的复杂化，原来的原子性操作会随着系统拆分而无法保障原子性从而产生一致性问题，但业务实际又需要保障一致性，为此 BASE 理论提出了最终一致性来解决这类问题。那么如何在跨服务、跨数据库的事务中保证数据最终一致性。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;二、CAP 理论与 BASE 理论&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在经典的 CAP 理论中提到一个分布式系统中，&lt;strong&gt;一致性 (C)&lt;/strong&gt;、&lt;strong&gt;可用性 (A)&lt;/strong&gt;、&lt;strong&gt;分区容错性 (P&lt;/strong&gt;) 最多只能同时实现两点，不可能三者兼顾。实际上这是一个伪命题，必须从 A 和 C 选择一个和 P 组合，更进一步基本上都会选择 A，相比一致性，系统一旦不可用或不可靠都可能会造成整个站点崩溃，所以一般都会选择 AP。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-b42ffb0eb9c9333e12a8443adda3349b56e.jpg&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;BASE 理论源于对大规模互联网分布式系统实践的总结，作为 CAP 定理中一致性与可用性矛盾的实践性补充逐步演化形成。该理论主张在无法保证强一致性的场景下，系统可基于业务特性灵活调整架构设计，通过基本可用性保障、允许短暂中间状态等机制，&lt;strong&gt;确保数据最终达成一致性状态&lt;/strong&gt;，从而在分布式环境中实现可靠服务能力与业务需求的平衡。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;三、一致性失效场景及其解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;这里有一个简化的仓库上架的流程（在实际业务中可能还会涉及到履约，仓储库存等等），体现分布式系统中可能出现的一致性问题，在分布式系统中的处理流程可能如下所示：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;1.操作员操作商品仓库上架&amp;nbsp;&lt;/p&gt; 
 &lt;p&gt;&amp;nbsp; &amp;nbsp;商品在仓储系统 (WMS) 中上架，写入仓储数据库&amp;nbsp;&lt;/p&gt; 
 &lt;p&gt;&amp;nbsp; &amp;nbsp;仓储系统通知中央库存系统 (SCI) 添加可用库存&amp;nbsp;&lt;/p&gt; 
 &lt;p&gt;&amp;nbsp; &amp;nbsp;仓储系统通知交易该商品可以进行售卖&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://oscimg.oschina.net/oscnet/up-f521737fe2209dfffd38944e4d8a8a58adf.jpg&quot; title=&quot;多服务写作交互实例&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-f521737fe2209dfffd38944e4d8a8a58adf.jpg&quot; alt=&quot;多服务写作交互实例&quot; title=&quot;多服务写作交互实例&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;简化代码示例：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@Transactional
public void upper(upperRequest request) {

    // 1. 写入仓储数据库
    UpperDo upperDo = buildUpperDo(request);
    wmsService.upper(upperDo);

    // 2. 调用 rpc 添加中央库存系统库存
    SciAInventoryRequest sciInventoryRequest = buildSciAInventoryRequest(request);
    sciRpcService.addInventory(sciInventoryRequest)

    // 3. 发送商品可以售卖的消息
    TradeMessageRequest tradeMessage = buildTradeMessageRequest(request);
    sendMessageToDealings(tradeMessage);

    // 4. 其他处理
    recordLog(buildLogRequest(request))
    return;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;整个时序逻辑拆解到事务层面执行流程如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-87eccb1590378bc9970fbd257fa613989fc.jpg&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在第 5 步添加 sci 库存之前任意一步出现问题，事务都会回滚，对其他系统的影响为 0，所以不存在一致性问题。&lt;/p&gt; 
&lt;p&gt;但是，在此之后出现问题都有可能会出现事务问题。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;调用写 RPC&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;在分布式系统中，调用 RPC 一般可以分为着两类：&amp;nbsp;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;1.读 RPC&lt;/strong&gt;：当前数据结构不完整，需要通过其他服务补充数据，&lt;strong&gt;对其他服务无影响。&lt;/strong&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;2.写 RPC&lt;/strong&gt;：当前业务操作、数据变更需要通知其他服务，&lt;strong&gt;对其他服务有影响。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;调用写 RPC 添加 sci 可用库存可能出现的问题：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;调用处理成功，返回成功。【数据一致】&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;调用处理成功，返回失败。【数据不一致】&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;对于这种情况，最简单的做法是&lt;strong&gt;直接操作重试&lt;/strong&gt;，但是需要&lt;strong&gt;下游幂&lt;/strong&gt;等处理，保证同样的请求效果一致。这里重试的方式，即重新操作上架，此外也可以直接在 rpc 方法中异步重试机制（这种方式不会阻塞整体流程，但是增大了数据不一致的风险）。如果重试失败可能需要研发介入排查具体失败的原因（对于写 RPC 的接口超时问题，需要研发关注，配置告警或抛出特定异常等）。&lt;/p&gt; 
&lt;p&gt;针对 RPC 方法重试，可以考虑采用本地消息表的方式实现，具体参考&lt;strong&gt;3.3.本地消息表。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;消息发送&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;写 RPC 调用成功后，会给 trade 服务发送消息，而后提交事务，整个流程结束。&lt;/p&gt; 
&lt;p&gt;Rocket 消息发送有多种方式，不同的方式适用场景不一，一般业务逻辑使用同步发送消息配合重试机制即可，对于一致性要求高的场景，可以考虑事务消息确保消息与本地事务的原子性。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-89143ab767ff6f2ebec27f6b20aad114923.jpg&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;同步消息+重试&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;同步消息比异步消息更可靠，比事务消息性能更高是一种广泛采用的方式。&lt;/p&gt; 
&lt;p&gt;同步消息通过 confirm 机制能保证消息发送成功：生产者发送同步消息后，等待 Broker 返回确认结果（SendResult）。如果 Broker 成功接收并存储消息，返回成功状态；否则返回失败状态。消息发送失败时，Rocket 默认自动重试 2 次，支持手动设置，提高消息发送的可靠性。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;DefaultMQProducer producer = new DefaultMQProducer(&quot;ProducerGroup&quot;);
producer.setRetryTimesWhenSendFailed(3); // 设置重试次数为 3 次
producer.start();
Message msg = new Message(&quot;TopicTest&quot;, &quot;TagA&quot;, &quot;Hello RocketMQ&quot;.getBytes());
SendResult sendResult = producer.send(msg); // 同步发送
if (sendResult.getSendStatus() == SendStatus.SEND_OK) {
    log.info(&quot;Send Success: &quot; + sendResult);
} else {
    log.warn(&quot;Send Failed: &quot; + sendResult);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;同步消息+重试机制能尽可能的保证消息成功发送，但是在这种情况下仍可能出现一致性问题：消息成功发送，在提交事务之前，依然可能出现问题（第 8 步出现问题），导致事务回滚，但是下游的消息是无法回滚的。&lt;/p&gt; 
&lt;p&gt;为此在 RocketMQ 中提供了事务消息作为一种解决方案。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;RocketMQ 事务消息&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;RocketMQ 的分布式事务消息功能，在普通消息基础上，支持二阶段的提交能力。&lt;strong&gt;将二阶段提交和本地事务绑定，实现全局提交结果的一致性。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-94083fd5509e83f88ee9f5cc9fb89227c42.jpg&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Rocket 的事务消息可以确保消息和本地事务的原子性，但是实现起来很复杂，性能也比较低，特别是需要实现回查本地事务状态，这是一个比较复杂的问题，需要&lt;strong&gt;case by case，每一个消息都需要单独写逻辑&lt;/strong&gt;，还必须确保&lt;strong&gt;消息体中的数据支持回查本地事务状态&lt;/strong&gt;，对代码入侵度较高。&lt;/p&gt; 
&lt;p&gt;在笔者的了解中我司事务消息的使用情况不多，对于低并发且强一致性的场景可以考虑使用这种方式。在这个业务场景中使用事务消息可以解决 3.2.1 中出现的消息发送成功但事务回滚的问题，但是这个场景使用这种方式并不太合适。最终结果可能是整体数据一致性提升 2%-3%，但是业务性能下降 20%-30%。&lt;/p&gt; 
&lt;p&gt;spring 提供给了一种事件发布-订阅机制可以解决事务回滚但消息依然发送成功的问题，并且性能损失几乎可以忽略。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;事务事件+同步消息&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;事务事件是指在事务执行的不同阶段触发的事件。这些事件通常用于处理次要逻辑，例如发送领域事件、消息或者邮件等。&lt;/p&gt; 
&lt;p&gt;spring 通过事务管理&lt;code&gt;@Transactional&lt;/code&gt;和事件发布机制&lt;code&gt;ApplicationEventPublisher&lt;/code&gt;，可以实现类似事务事件的功能。事件发布后事件广播器（&lt;code&gt;SimpleApplicationEventMulticaster&lt;/code&gt;）接收事件，根据事件类型匹配所有的监听者（&lt;code&gt;getApplicationListeners&lt;/code&gt;）。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@Service
public class wmsService {
    @Autowired
    private ApplicationEventPublisher eventPublisher;

    @Transactional
    public void upper(upperRequest request) {

        // 1. 写入仓储数据库
        UpperDo upperDo = buildUpperDo(request);
        wmsService.upper(upperDo);

        // 3. 发布上架事件
        UpperFinishEvent upperFinishEvent = buildUpperFinishEvent(request)
        eventPublisher.publishEvent(upperFinishEvent);
        return;
    }
}

@Component
public class upperFinishEventListener {
    @TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)
    public void handleUpperFinishEvent(UpperFinishEvent event) {
        // 处理事件

        // 1. 调用 rpc 添加中央库存系统库存
        SciAInventoryRequest sciInventoryRequest = buildSciAInventoryRequest(event);
        sciRpcService.addInventory(sciInventoryRequest)


        // 2. 发送商品可以售卖的消息
        TradeMessageRequest tradeMessage = buildTradeMessageRequest(event);
        sendMessageToDealings(tradeMessage);

        // 2. 其他处理
        recordLog(buildLogRequest(event))
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;上述流程在写完 DB，调用写 RPC 之后，发布上架完成的事件并提交事务。&lt;code&gt;upperFinishEventListener&lt;/code&gt;订阅上架完成的事件，并发送可以售卖的消息。&lt;/p&gt; 
&lt;p&gt;通过这种方式可以在事务提交之后再发送消息。通过事务事件保证事务提交，通过重试机制和 confirm 机制确保生产者发送消息成功。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;本地消息表&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在上述过程中我们选择使用事务事件+同步消息可以来替代事务消息，但是事务事件对 RPC 调用并不太友好，本地事务提交之后，调用写 RPC 就一定要成功，不然一致性问题就无法保证。&lt;/p&gt; 
&lt;p&gt;为此可以考虑使用本地消息表这个方案：将需要分布式处理的事件通过本地消息日志存储的方式来异步执行，通过异步线程或者自动 Job 发起重试，确保上下游一致。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-033bc8e919b36504785e9a6d4a50063244d.jpg&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;将上述流程抽象为代码可以实现一个一致性框架，通过注解实现无侵入、策略化、通用性和高复用性的能力。然后本地消息表的方式仍然存在一些问题：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;高并发场景不适用，写本地消息会带来延迟可能出现数据积压，影响系统的吞吐量。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;业务逻辑过程会长时间的占用事务，造成大事务问题。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;本地消息报文巨大，难以存储等。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;四、总结&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;本文分析的场景都是解决生产者端的一致性问题。结合部分场景探讨不同方式的优缺点。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;事务事件+普通消息&amp;amp;重试&lt;/strong&gt; ：适合对实时一致性要求不高、需要异步处理的场景、适合高并发场景，可靠性一般，实现简单但需手动处理重试和幂等性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;事务消息&lt;/strong&gt; ：适合一致性要求较高的场景（如金融交易），性能较低，实现复杂但能确保消息与事务的原子性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;本地消息表&lt;/strong&gt; ：适合跨服务事务、异步任务处理和最终一致性场景，高并发场景可能出现数据积压，实现简单且可靠性高，但存在延迟性和资源占用问题。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;在分布式系统中，很难有能 100% 保证一致性的方案，正如《人月神话》中说的「&lt;strong&gt;没有不存在缺陷的软件，只是尚未发现缺陷&lt;/strong&gt;」。&lt;/p&gt; 
&lt;p&gt;在上面提到的各种方案中，笔者所在团队高并发场景很少，所以一般都采用本地详细表的方式来处理一致性问题，这既可以处理写 RPC 的调用问题，也能通过消息状态显示的统一失败情况，统一进行重试。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;往期回顾&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1.&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247538302%26idx%3D1%26sn%3Df85057dbe21821f68f9d9cd3b72fb8cb%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;从对话到自主行动：AI 应用如何从 Chat 进化为 Agent？开源项目源码深度揭秘｜得物技术&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;2.&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247538265%26idx%3D1%26sn%3D46126305e017551fce1c548a0d482d52%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;得物技术部算法项目管理实践分享&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;3.&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247538263%26idx%3D1%26sn%3D78e7e307da19e903656c2de2afb96dc9%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;商家域稳定性建设之原理探索｜得物技术&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;4.&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247538237%26idx%3D1%26sn%3D47a37918d6e1a0123644ea690f7bdaad%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;得物 Android Crash 治理实践&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;5.&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247538099%26idx%3D1%26sn%3Db973a4052f5460509f2bd25ed888995e%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;基于 ANTLR4 的大数据 SQL 编辑器解析引擎实践｜得物技术&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;文 / 勇者&lt;/p&gt; 
&lt;p&gt;关注得物技术，每周一、三更新技术干货&lt;/p&gt; 
&lt;p&gt;要是觉得文章对你有帮助的话，欢迎评论转发点赞～&lt;/p&gt; 
&lt;p&gt;未经得物技术许可严禁转载，否则依法追究法律责任。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/5783135/blog/18049604</link>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/18049604</guid>
            <pubDate>Sun, 23 Mar 2025 03:39:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>想让你多爱自己一些的开源计时器</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//4bfe54bbf29b84acea0df9f2e25ed23c.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;我用过 Pomotroid、Reminders MenuBar、Timer 等众多优秀、开源的番茄时钟和计时工具，它们帮我更高效地管理时间，让我更专注地投入工作。&lt;/p&gt; 
&lt;p&gt;但有一个问题始终困扰着我：&lt;strong&gt;每当计时结束时，我总是习惯性地忽略休息提醒，继续沉浸在手头的事情中，直到第二天身体不适才追悔莫及&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;最近，我发现了一款特别贴心的开源计时工具------Catime。它体积小巧、设计简洁，最大的亮点是支持自定义计时结束后的动作，比如锁定屏幕强制休息。当然，你也可以设置到点自动关机，但这有些太狠了😅。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//17938bac6b8ef4ef9e99a6cf36f7ab9c.gif&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;GitHub 地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fvladelaina%2FCatime&quot; target=&quot;_blank&quot;&gt;github.com/vladelaina/Catime&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;我非常喜欢 Catime，因为它总是在提醒我&quot;停下来&quot;，对自己好一点。这种温暖的感觉让我想起我的老妈：&lt;strong&gt;别人关心你飞得高不高，而妈妈只在意你累不累&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;在与项目作者 vladelaina 聊完 Catime 背后的故事后，我更加确信这是一个充满爱的开源项目。让我们一起走进这个「希望你多爱自己一点」的暖心计时器------Catime。&lt;/p&gt; 
&lt;h2&gt;一、介绍&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//e1573ad1f931db02e00af29b8cd436a4.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Catime 是一款轻巧易用的 Windows 计时工具，集时钟、倒计时和番茄时钟于一体，支持透明界面和丰富的自定义选项，让你的时间管理更简单、更高效。&lt;/p&gt; 
&lt;h3&gt;特点&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;极简设计&lt;/strong&gt;：界面透明、点击穿透、任意拖拽缩放、无复杂设置，使用起来轻松无负担。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;灵活计时&lt;/strong&gt;：支持快速预设、自定义时间输入，提供当前时间、倒计时、正计时和番茄时钟多种模式。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;超时动作&lt;/strong&gt;：计时结束后可自动执行锁屏、打开文件/软件、访问指定网站、关机或重启等操作。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;丰富自定义&lt;/strong&gt;：内置 47 种字体和 15 种预设颜色，支持自定义颜色值及调色板选色，实时预览效果，满足个性化需求。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;操作方式简单便捷，所有配置均可通过托盘图标点击完成：左键点击快速管理时间，右键点击设置选项，一目了然。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//d88f03b244e5505e70823b795a4d0974.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;二、来自用户的爱&lt;/h2&gt; 
&lt;p&gt;Catime 拥有如此丰富的功能，并非一蹴而就。&lt;/p&gt; 
&lt;p&gt;最初，作者只是想找到一种方式，来对抗自己&quot;停不下来&quot;的工作节奏，提醒自己定时离开电脑，稍作休息，以实现工作和健康的平衡。（🤨我怀疑，他的灵感可能来自一次游戏后的反思）&lt;/p&gt; 
&lt;p&gt;因此，Catime 最早的设计非常简单：&lt;strong&gt;倒计时结束后自动锁屏&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//f5ac9d000f790f89d2f9a16e9709cfca.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;这个小小的功能却带来了意想不到的效果：当屏幕突然变黑、需要重新输入密码时，用户会自然而然地停下来思考------是不是该趁这机会站起来活动一下？这种温和的&quot;强制中断&quot;，既不会引起反感，又有效地打破了持续工作的惯性。&lt;/p&gt; 
&lt;p&gt;原本以为软件做到这里就足够了。然而，随着项目开源和第一个演示视频的发布，Catime 意外地收获了大量用户的奇思妙想、建设性反馈和热情的支持。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//4fcd913a7d1e7513eeaac1327ff88fe2.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在接下来的四个月中，作者不断吸收反馈、持续迭代优化，最终将 Catime 打造成了能够满足多种场景需求的计时工具。&lt;/p&gt; 
&lt;h3&gt;2.1 工作场景&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;距离下班还有多久？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;只需简单输入下班时间即可快速开启倒计时。例如，18:00 下班，只要输入 &lt;code&gt;18t&lt;/code&gt; 后回车，Catime 就会实时显示距离下班还有多久。&lt;/p&gt; 
&lt;p&gt;不仅如此，你还可以将超时后的动作设置为正计时模式，让时间到达后自动切换为加班计时，直观记录加班时长。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//e762aed9c1b6aea988575b81c6db6011.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PPT 演示计时&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;适用于汇报、演讲或会议限时等场景，帮助你精准掌控时间，还不会干扰演示画面。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//fdef22a30a42611d907fb18b80c533e0.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;2.2 娱乐场景&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;游戏时间管理&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;全屏游戏时无需频繁切换窗口，即可随时掌握当前时间，避免&quot;玩过头&quot;。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;游戏时长统计&lt;/strong&gt;：正计时模式实时记录游戏持续时间，帮助你合理掌控游戏时间。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;休息提醒&lt;/strong&gt;：自定义游戏时长，到点自动提醒，防止沉迷。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;超时强制措施&lt;/strong&gt;：甚至可以设置超时后自动关机，实现真正的&quot;强制下线&quot;。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//80489a1152837b51bd17a5484e98fe32.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;定时访问网站&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;设置定时打开指定网站，避免遗忘错过重要时刻，比如，每月 28 日准时打开 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhellogithub.com%2F&quot; target=&quot;_blank&quot;&gt;HelloGitHub 网站&lt;/a&gt;了解最新开源动态。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;发布会提醒&lt;/strong&gt;：活动开始前自动跳转到发布页面，不错过任何精彩瞬间。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;直播提醒&lt;/strong&gt;：关注的直播 19:30 开始？到点自动打开直播页面，无需手动操作。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//376981f2b82ee21664afcd4e996f0478.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;三、对技术的热爱&lt;/h2&gt; 
&lt;p&gt;Catime 的作者目前才刚上大二，只会 C 语言。他凭借对技术的热爱，用尽所学知识想把 Catime 做好。&lt;/p&gt; 
&lt;p&gt;他选择基于 Windows API（Win32）和 C 语言开发 Catime，其核心是一个无边框透明窗口，能够灵活显示倒计时、正计时或当前时间。他精心设计了底层实现，既确保了轻量级的特性，又提供了丰富的视觉效果和良好的交互体验。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//3f955e4cb1367a3fc0bfe6108d98d08b.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;3.1 窗口创建与样式&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;// 创建特殊样式的无边框窗口
HWND hwnd = CreateWindowEx(
    WS_EX_LAYERED | WS_EX_TOOLWINDOW,  // 扩展样式：分层窗口+工具窗口
    &quot;CatimeWindow&quot;, &quot;Catime&quot;,
    WS_POPUP,  // 弹出窗口样式（无边框）
    CLOCK_WINDOW_POS_X, CLOCK_WINDOW_POS_Y,
    CLOCK_BASE_WINDOW_WIDTH, CLOCK_BASE_WINDOW_HEIGHT,
    NULL, NULL, hInstance, NULL
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3.2 窗口置顶&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;void SetWindowTopmost(HWND hwnd, BOOL topmost) {
    CLOCK_WINDOW_TOPMOST = topmost; 
    // 获取当前窗口样式
    LONG exStyle = GetWindowLong(hwnd, GWL_EXSTYLE);
    
    if (topmost) {
        // 置顶模式处理
        exStyle &amp;amp;= ~WS_EX_NOACTIVATE; 
        SetParent(hwnd, NULL);   
        SetWindowLongPtr(hwnd, GWLP_HWNDPARENT, 0);
        SetWindowPos(hwnd, HWND_TOPMOST, 0, 0, 0, 0,
                    SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE | SWP_FRAMECHANGED);
    } else {
        // 非置顶模式处理
        exStyle |= WS_EX_NOACTIVATE;
        // ... 查找桌面窗口的代码 ...
        if (hDesktop != NULL) {
            SetParent(hwnd, hDesktop);
        } else {
            SetWindowPos(hwnd, HWND_BOTTOM, 0, 0, 0, 0,
                        SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE);
        }
    }  
    
    // 应用新窗口样式并更新
    SetWindowLong(hwnd, GWL_EXSTYLE, exStyle);
    SetWindowPos(hwnd, NULL, 0, 0, 0, 0,
                SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_FRAMECHANGED);  
    WriteConfigTopmost(topmost ? &quot;TRUE&quot; : &quot;FALSE&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3.3 系统托盘集成&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;void InitTrayIcon(HWND hwnd, HINSTANCE hInstance) {
    // 创建托盘图标数据结构
    NOTIFYICONDATA nid = {0};
    nid.cbSize = sizeof(NOTIFYICONDATA);
    nid.hWnd = hwnd;
    nid.uID = TRAY_ICON_ID;
    nid.uFlags = NIF_ICON | NIF_MESSAGE | NIF_TIP;
    nid.uCallbackMessage = CLOCK_WM_TRAYICON;  // 自定义消息
    nid.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_ICON1));
    strcpy(nid.szTip, &quot;Catime&quot;);
    
    // 添加图标到系统托盘
    Shell_NotifyIcon(NIM_ADD, &amp;amp;nid);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;所有代码均已开源，篇幅有限，这里仅展示核心代码片段。&lt;/p&gt; 
&lt;h2&gt;四、来自陌生人的温暖&lt;/h2&gt; 
&lt;p&gt;Catime 作者（vladelaina）是一名普通的大二学生，因为热爱开源，他牺牲了玩耍的时间开发 Catime 开源计时器，并为此倾注了全部热爱。&lt;/p&gt; 
&lt;p&gt;我相信&lt;strong&gt;充满爱的开源项目，一定会被更多人所喜爱&lt;/strong&gt;。果不其然，Catime 收获了许多来自陌生人的关注和支持，帮助它取得了如今的成就（900+ Star、21 位贡献者）。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//46f02f5d143659a19947d04138158f63.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;特别感谢果核剥壳、it 学无止境、HelloGitHub、玄离 199、_不言不厌、小众软件等大佬的推荐。&lt;/li&gt; 
 &lt;li&gt;同时感谢为 Catime 提供精美 Logo 的画师：猫屋敷梨梨 Official。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//ebfaaf7522924a2674c8447fb8ce804f.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;五、回到梦开始的地方&lt;/h2&gt; 
&lt;p&gt;感谢你耐心读到这里，在结束前，我想分享一句 Catime 作者 vladelaina 特别喜欢的话，出自于李笑来的《斯坦福大学创业成长课》：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;如果你想要的东西还不存在，那就亲自动手将它创造出来。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;最初，vladelaina 非常喜欢一款名为 Easy-Cat-Timer（C#）的开源软件，但遗憾的是它已经 6 年未更新。于是他决定用开源的方式延续这个项目的生命。vladelaina 不止一次大方地承认，Catime 最初的设计灵感正是源于对 Easy-Cat-Timer 的魔改，这也是 Catime 名字的由来，以此向原作者絮酱酱致敬！他再三向我强调，Easy-Cat-Timer 是他梦开始的地方！&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//7337b8cd59084dc4b4ffd2c76485c163.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;GitHub 地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxujiangjiang%2FEasy-Cat-Timer&quot; target=&quot;_blank&quot;&gt;github.com/xujiangjiang/Easy-Cat-Timer&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;也是因为 Catime 计时器，vladelaina 有幸与絮酱酱建立了联系。絮酱酱是一个非常坚强的女孩子，让我们一起祝福她早日康复！&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//f7de422046257f9ceeccbbb1f500c2c6.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;最后，在与 vladelaina 的沟通中，我真切地感受到他对开源那份纯粹的热爱，这正是 HelloGitHub 一直在寻找的「有温度、有故事的开源项目」。也正是因为这份热爱，Catime 一路走来，才会有无数素未谋面的人用爱为它充值。这一切都是意料之中的，因为 &lt;strong&gt;Catime 生于热爱，也在传递爱！&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//e6d21b2eef0d6b46bc1f09bca323b811.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;GitHub 地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fvladelaina%2FCatime&quot; target=&quot;_blank&quot;&gt;github.com/vladelaina/Catime&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;HelloGitHub 不仅分享有趣的开源项目，也希望挖掘开源背后的热情与故事。我们期待通过代码与文字，凝聚一群纯粹、有爱的小伙伴，共同打造一个有趣、有温度的开源社区！&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/HelloGitHub/blog/18049135</link>
            <guid isPermaLink="false">https://my.oschina.net/HelloGitHub/blog/18049135</guid>
            <pubDate>Sun, 23 Mar 2025 03:21:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>Linux 基金会维护的 Redis 分支 —— Valkey 8.1 发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;自 Linux 基金会及其合作伙伴&lt;a href=&quot;https://www.oschina.net/news/285265/linux-foundation-open-source-valkey&quot;&gt;宣布 Valkey 作为 Redis 的分支&lt;/a&gt;以来，已经超过一年了。在九月份发布了 Redis 8.0 之后，Valkey 8.1 今天正式发布。&lt;/p&gt; 
&lt;p&gt;Valkey 8.1 作为 Redis 分支的小升级刚刚发布。与 Valkey 8.0 相比，它在性能、可靠性和可用性方面都有所提升。&lt;/p&gt; 
&lt;p&gt;Valkey 8.1 的新性能提升之一是&lt;strong&gt;通过使用 x86 SIMD 指令优化了 bitcount 命令的性能&lt;/strong&gt;。这主要是通过高级向量扩展 2（AVX2）来加速 bitcount。&lt;/p&gt; 
&lt;p&gt;添加 AVX2 优化 bitcount 命令的&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fvalkey-io%2Fvalkey%2Fpull%2F1741&quot;&gt;PR&lt;/a&gt;&amp;nbsp;展示了在较大数值上的显著速度提升：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-7ab6a08fc9e66e97a9217c0f567ff2927b8.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Valkey 8.1 还包含其他性能改进，例如使用新的内存高效哈希表来存储键、使用 TLS 和 I/O 线程，以及其他优化。&lt;/p&gt; 
&lt;p&gt;有关 Valkey 8.1 GA 版本的下载和更多详细信息，请访问&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fvalkey-io%2Fvalkey%2Freleases%2Ftag%2F8.1.0&quot;&gt;GitHub&lt;/a&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342188/valkey-8-1-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342188/valkey-8-1-released</guid>
            <pubDate>Sun, 23 Mar 2025 03:08:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>比尔盖茨：医生和教师是最可能被 AI 取代的两个职业</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;近期，比尔盖茨在 The Tonight Show 节目上，与主持人 Jimmy Fallon 谈及「AI 未来在人类社会中的意义」，其中比尔盖茨语出惊人：十年内，AI 将解放很多职业内容。&lt;/p&gt; 
&lt;p&gt;比尔盖茨在谈论中指出，医生和教师是最可能被 AI 取代的两个职业。但他也表示「这对社会是有益的」：未来十年内，借助 AI 的力量，智力或将变得普遍，甚至免费，包括优秀的医疗评估和优秀的学习辅导。此外，比尔盖茨还表示，在劳动力方面的问题，随着时间推移也将通过 AI 得到解决。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-054879c0032d8488ec1894c375a0a622af1.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;对于 AI 的未来前景，比尔盖茨则保持乐观的心态看待，其认为「哪怕现在从零创业」，他依然选择以 AI 为核心的初企，他解释「只要有资金，任何人都能从一个小点子进行 AI 领域创业」。同时，比尔盖茨也鼓励年轻人，在 AI 领域勇敢一点，其还调侃表示，「因为你们能以比我更新鲜的视角应对这个问题」。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342186/bill-gates-says-ai-replace</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342186/bill-gates-says-ai-replace</guid>
            <pubDate>Sun, 23 Mar 2025 02:58:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>2025 年全球 GenAI 支出将达到 6440 亿美元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Gartner 公司&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gartner.com%2Fen%2Fnewsroom%2Fpress-releases%2F2025-03-31-gartner-forecasts-worldwide-genai-spending-to-reach-644-billion-in-2025&quot; target=&quot;_blank&quot;&gt;预测&lt;/a&gt;，2025 年全球生成式人工智能 (GenAI) 支出预计将达到 6440 亿美元，相较 2024 年增长 76.4%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;报告指出，硬件将占据 2025 年生成式 AI 支出的大头，预计将占到 80%。具体来说，设备支出将达到 3983 亿美元，增长率高达 99.5%；服务器的支出将达到 1806 亿美元，增长率为 33.1%；软件支出则相对较少，仅为 372 亿美元，但增长率仍高达 93.9%；服务支出预计为 278 亿美元，增长幅度更是达到 162.6%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;241&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c26e2c800306d582ba2fdf5198e44a94b23.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Gartner 分析师 John Lovelock 表示，设备市场的迅猛增长主要是由供应方驱动，而非需求方。尽管消费者和企业并不急于寻求 AI 设备，制造商却积极推出相关产品。他预测到 2027 年，几乎所有的个人电脑都将是 AI 驱动的。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;虽然硬件在生成式 AI 支出中占据主导地位，Lovelock 指出，随着市场的发展，这一比例可能会继续加大。未来，生成 AI 功能将越来越多地嵌入现有软件中，企业需要重新评估其技术预算和基础设施规划。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;然而，Gartner 的报告也指出，许多企业内部的生成式 AI 项目未能如预期那样成功。造成这一现象的主要原因有三：数据质量不足、员工在使用新技术上存在困难以及项目无法带来足够的投资回报。这些问题揭示了企业在推进生成 AI 时面临的挑战，更多的是组织内部的准备情况，而非技术本身的局限。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在 2025 年，企业预计将从雄心勃勃的内部项目转向更加成熟的商业解决方案，以求得更可靠的实施和回报。技术领导者们应优先考虑那些将生成式 AI 功能嵌入到现有系统中的供应商解决方案，而非从头开始开发定制应用程序。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;随着生成式 AI 支出向 6440 亿美元的加速发展，成功的关键不在于支出量的增加，而在于投资与组织准备的协调，克服主要的失败因素，从而最大化这一快速发展的技术领域所带来的价值。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342183/genai-spending-644-billion-2025</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342183/genai-spending-644-billion-2025</guid>
            <pubDate>Sun, 23 Mar 2025 02:53:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>朱啸虎再谈 AI：所有 AI 应用都是「套壳」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;3 月 31 日下午，2025 中关村论坛年会「AI 未来论坛：创新投资全球化」会议上，在争议之下的朱啸虎发表演讲。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;982&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0401/104238_OtlY_2720166.png&quot; width=&quot;2522&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;朱啸虎表示，反思中国互联网和创投过去 20 年的历史，互联网 20 年经历过很多风口，当年进入泡沫期，然后被嘲笑。如今，AI 产业也是如此，在「死亡谷当中又孕育着希望」，虽然苹果然很酷很快很炫，但是商业化做得非常不好，而微软却做得很好。&lt;/p&gt; 
&lt;p&gt;「确实，今年底层模型成熟以后，我们发现，很多 AI 应用公司的收入开始爆发性增长，过去 6 个月，中国有非常多的创业公司，每周有差不多环比增长 10% 以上，月环比增长 20% 以上。」朱啸虎称，虽然今天数字还比较小，但是增长速度类似于当年团购早期增长速度，「这是非常让我兴奋的」。他还认为，所有的 AI 应用都是套壳应用，关键是如何建立长期壁垒，深度整合工作流/编辑工具；专有硬件/IP 和数据。必须人工交付的苦活累活。AIGC 应用重要的不是生成能力，而是编辑能力，交付结果的能力。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;948&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0401/104305_kATw_2720166.png&quot; width=&quot;2508&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0401/104354_6bnq_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;朱啸虎表示，DeepSeek 完全不考虑商业化，甚至把用户都让给生态，才能让合作伙伴迅速坚决地全力拥抱 DeepSeek。所以这是为什么腾讯全力拥抱 DeepSeek，腾讯是 DeepSeek 开源的最大受益者。这也符合科技投资的特点，就是科技没成熟之前，很难商业化，但是科技成熟之前，迅速平权，要思考科技平权之后谁会受益。&lt;/p&gt; 
&lt;p&gt;「腾讯就迅速的超越了以前的所有的大模型，腾讯确实有很大优势。所以我们一直建议，创业公司不要浪费一分钱去训练底层模型，全力拥抱开源模型，全力拥抱 DeepSeek。」朱啸虎称。他强调，「AI 应用就是没有壁垒，说有壁垒是忽悠人的，要在非 AI 能力上建立壁垒。」&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342180</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342180</guid>
            <pubDate>Sun, 23 Mar 2025 02:44:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Runway 发布 AI 视频生成模型 Gen-4</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;AI 初创公司 Runway 发布了其最新研发的 &lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frunwayml.com%2Fresearch%2Fintroducing-runway-gen-4&quot; target=&quot;_blank&quot;&gt;AI 视频生成模型 Gen-4&lt;/a&gt;&lt;/u&gt;。该公司声称，&lt;strong&gt;这是目前为止保真度最高的 AI 驱动视频生成工具之一&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0401/103349_lgfa_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;新发布的 Gen-4 模型现已开始向 Runway 的个人及企业客户推送。据 Runway 介绍，&lt;strong&gt;该模型的核心优势在于能够在不同的视频场景中保持角色、地点和物体的高度一致性，维持「连贯的世界环境」&lt;/strong&gt;，并且能够从场景内的不同视角和位置重新生成元素。&lt;/p&gt; 
&lt;p&gt;Runway 在其官方博客文章中指出：「Gen-4 能够有效利用视觉参考资料，并结合用户的文本指令，创造出风格、主体、地点等要素保持一致的新图像和视频，整个过程无需进行模型微调或额外的专门训练。」&lt;/p&gt; 
&lt;p&gt;Runway 公司获得了包括 Salesforce、谷歌和英伟达在内的知名投资机构的支持，专注于提供包括 Gen-4 在内的一系列 AI 视频创作工具。然而，在 AI 视频生成这一竞争激烈的赛道上，Runway 面临着来自 OpenAI 和谷歌等科技巨头的强劲挑战。为了在市场中脱颖而出，Runway 采取了差异化竞争策略，不仅与一家好莱坞大型电影制片厂达成了合作协议，还特别拨出数百万美元资金，用于资助那些运用 AI 生成视频技术进行创作的电影项目。&lt;/p&gt; 
&lt;p&gt;具体到 Gen-4 的功能，Runway 表示，用户只需提供角色的参考图像，模型便能在不同的光照条件下生成外观持续一致的角色。在构建具体场景时，用户可以上传主体的图像，并辅以文字描述，明确说明希望生成的镜头构图要求。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-e634fb78715253367d10f9b09090553ffa0.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Runway 在博客中进一步强调：「Gen-4 在生成具有高度动态感和逼真运动效果的视频方面表现卓越，同时在主体、物体和风格的一致性、对用户指令的精准遵循度以及对现实世界规律的理解方面，均达到了同类顶尖水平。」公司还宣称，「Runway Gen-4 的发布，也标志着视觉生成模型在模拟真实世界物理规律的能力方面取得了一个重要的里程碑。」&lt;/p&gt; 
&lt;p&gt;如同当前所有的视频生成模型一样，Gen-4 也是通过对海量的视频数据进行训练而成的。通过学习这些数据中的模式，模型得以生成全新的合成视频片段。然而，Runway 方面拒绝透露其训练数据的具体来源，部分原因是出于保护商业竞争优势的考量，但也因为训练数据的细节往往是潜在知识产权诉讼的敏感地带。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342172/runway-gen-4</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342172/runway-gen-4</guid>
            <pubDate>Sun, 23 Mar 2025 02:35:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>OpenAI 宣布将开源推理模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;今日凌晨，OpenAI CEO Sam Altman &lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fsama%2Fstatus%2F1906793591944646898&quot; target=&quot;_blank&quot;&gt;正式宣布&lt;/a&gt;&lt;/u&gt;，将在未来几个月内推出一款具备推理能力的强大开放权重语言模型，并期待与开发者共同探索如何最大化其潜力。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;3425&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0401/102526_AIW4_2720166.png&quot; width=&quot;1289&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;据 Altman 透露，这是自 GPT-2 以来 OpenAI 首次计划发布开放权重语言模型。他坦言，虽然这一想法已酝酿许久，但此前其他优先事项占据了主导地位。如今，发布这款模型的时机变得尤为重要。&lt;/p&gt; 
&lt;p&gt;作为参考，开放权重（open weight）是指将 AI 模型（尤其是神经网络）的训练参数（即权重）公开，供公众使用、检查或进一步开发。用户可以在这些权重的基础上进行修改，并将修改后的权重重新分发。虽开放权重不能完全等同于开源，但它是开源理念在 AI 领域的一种延伸和部分实现，包括此前宣称开源的 DeepSeek V3/R1 同样只开放了权重。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-55e590a06855f01c15be650dd11cf6c5773.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在正式发布前，OpenAI 将依据其「准备框架」对模型进行评估，确保其安全性与可靠性。考虑到模型发布后可能被修改，团队还将开展额外测试与优化工作。为进一步完善开发流程，OpenAI 计划举办一系列开发者活动，以收集反馈并展示早期原型：首场活动将于数周后在旧金山启动，随后在欧洲和亚太地区陆续展开。&lt;/p&gt; 
&lt;p&gt;Sam Altman 刚刚还发文表示：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;我们不会做任何愚蠢的事情，比如说我们的平台月活用户超 7 亿后，就不能使用我们的开源模型。我们希望每个人都使用它。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;此外，当地时间 3 月 31 日，&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/news/342164/openai-raises-40b&quot;&gt;OpenAI 宣布完成了一轮规模巨大的私募融资&lt;/a&gt;&lt;/u&gt;，融资金额高达 400 亿美元（约合 2902 亿人民币），公司估值在融资完成后达到 3,000 亿美元。这被认为是有史以来规模最大的私募融资轮之一。&lt;/p&gt; 
&lt;p&gt;据 OpenAI 官方信息显示，此次融资由软银集团领投。此外，微软、Coatue、Altimeter 和 Thrive 等公司也参与了本轮投资。而据 CNBC 援引知情人士消息称，本次融资中有 180 亿美元将用于 OpenAI 的 Stargate 项目基础设施建设。&lt;/p&gt; 
&lt;p&gt;附上报名链接 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenai.com%2Fopen-model-feedback&quot; target=&quot;_blank&quot;&gt;https://openai.com/open-model-feedback&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342166/openai-open-model</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342166/openai-open-model</guid>
            <pubDate>Sun, 23 Mar 2025 02:21:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>OpenAI 完成 400 亿美元融资，投后估值达 3000 亿美元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;OpenAI &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenai.com%2Findex%2Fmarch-funding-updates%2F&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;完成新一轮融资 400 亿美元，投资后估值 3000 亿美元。此次融资由软银集团领投，其他参与者还包括微软、Coatue、Altimeter 和 Thrive 等早期投资者。这也是 OpenAI 历史上最大规模的私募融资之一。&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「这使我们能够进一步推动 AI 研究的前沿，扩展我们的计算基础设施，并为每周使用 ChatGPT 的 5 亿用户提供日益强大的工具。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;我们很高兴能与软银集团合作——很少有公司像他们一样懂得如何扩大变革性技术的规模。他们的支持将帮助我们继续构建 AI 系统，推动科学发现、实现个性化教育、增强人类创造力，并为造福全人类的 AGI 铺平道路。」&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img height=&quot;337&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ac0d294218e9b370a6e96a81705d9ce7457.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;CNBC 援引一位知情人士的话称，融资中的约 180 亿美元将用于 OpenAI 雄心勃勃的星际之门（Stargate）基础设施项目，该项目旨在在美国各地建立一个 AI 数据中心网络。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342164/openai-raises-40b</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342164/openai-raises-40b</guid>
            <pubDate>Sun, 23 Mar 2025 02:16:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>MCP 是 USB，但 ANP 可能是 HTTP</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;p&gt;MCP 火了！&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#3c3c43&quot;&gt;MCP（Model Context Protocol ，模型上下文协议）是一个&lt;/span&gt;由 Anthropic 发布&lt;span style=&quot;background-color:#ffffff; color:#3c3c43&quot;&gt;的开放协议，使 LLM 应用能够与外部数据源和工具无缝集成。无论是构建 AI 驱动的 IDE、增强聊天界面，还是创建自定义 AI 工作流，MCP 都提供了一种标准化方式，将 LLM 与所需的上下文连接起来。&lt;/span&gt;在模型调用工具资源方面已经成为行业事实标准。&lt;/p&gt; 
&lt;p&gt;几天前，OpenAI&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/news/341240/openai-agents-sdk-mcp&quot;&gt;宣布&lt;/a&gt;其智能体 ——OpenAI Agents SDK 已支持大模型上下文协议 MCP，并表示称正在为 OpenAI API 和 ChatGPT 桌面应用程序开发 MCP 支持。有了 OpenAI 的支持，未来国内外巨头大概率会积极跟进。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;也就是说，基本可以确定不会有第二个 MCP 了。但是要说智能体通信协议，还是有机会的。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;杭州比特智元 CEO、智能体通信协议 ANP 作者常高伟认为，&lt;span&gt;MCP 不是为智能体而设计，它是为模型连接外部资源和工具而设计的。&lt;/span&gt;而且 MCP 本身设计存在一些问题，比如复杂性问题，客户端和服务器耦合问题，分布式身份鉴权问题等，需要解决。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;308&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6c3c8a516193a174b51b3ffdb74727a20ab.png&quot; width=&quot;400&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;目前在&lt;strong&gt;智能体通信领域，&lt;/strong&gt;比较完备的开源项目，除了 MCP，可能就是 ANP 了。&lt;/p&gt; 
&lt;p&gt;ANP（AgentNetworkProtocol）是为智能体网络（Agentic Web）设计的开放协议框架，实现了去中心化的身份认证，能够让任意两个智能体进行连接。同时设计了一个智能体描述规范，让智能体之间能够进行更加高效的数据交换与协作。&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:rgba(0, 0, 0, 0.9)&quot;&gt;&lt;span&gt;ANP 与 MCP 与最大的区别，就在于世界观的差异：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul style=&quot;list-style-type:disc; margin-left:0; margin-right:0&quot;&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:rgba(0, 0, 0, 0.9)&quot;&gt;&lt;span style=&quot;color:#021eaa&quot;&gt;MCP 是以模型为核心（Model-Centric），整个互联网都是它的上下文与工具。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:rgba(0, 0, 0, 0.9)&quot;&gt;&lt;span style=&quot;color:#021eaa&quot;&gt;ANP 是以智能体为核心（Agent-Centric），每个智能体具有同等的地位，组成一个去中心化的智能体协作网络。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;ANP 不是跟风项目，已经有一年了，比 MCP 还要更早开源，可以说全球最早发布的面向智能体的开源通信协议。&lt;/p&gt; 
&lt;p&gt;甚至有人认为，&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;MCP 是 USB，ANP 依然有成为 HTTP 的机会&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;。&lt;/span&gt;是这样吗？&lt;/p&gt; 
&lt;p&gt;4 月 3 日，开源中国 OSCHINA 将邀请&lt;strong&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;常高伟&lt;/span&gt;&lt;/strong&gt;做客「OSC 开源社区」视频号直播栏目《技术领航》，聊一聊智能体通信协议 ANP，介绍 ANP 的设计与理念，以及与爆火的 MCP 的区别，并手把手教大家使用 ANP 协议以及相关的 SDK，快速的构建一个支持 ANP 的 WebAgent，让其他智能体快速访问。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;微信扫码，预约直播：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;821&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-69a8c61bd54127b4e973b28e377f255b474.png&quot; width=&quot;400&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;strong&gt;直播主题：&lt;/strong&gt;聊聊智能体通信协议：ANP 与 MCP&lt;/p&gt; 
  &lt;p&gt;&lt;strong&gt;时间：&lt;/strong&gt;4 月 3 日周五 19:00-20:00&lt;/p&gt; 
  &lt;p&gt;&lt;strong&gt;平台：&lt;/strong&gt;视频号 「OSC 开源社区」&lt;/p&gt; 
  &lt;p&gt;&lt;strong&gt;嘉宾：&lt;/strong&gt;常高伟，ANP 开源技术社区发起人，智能体通信协议 ANP 作者，杭州比特智元 CEO，前阿里巴巴高级技术专家&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p&gt;&lt;strong&gt;直播亮点&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;揭秘智能体通信协议 ANP 的底层逻辑&lt;/li&gt; 
  &lt;li&gt;深度解读：ANP 与 MCP 的核心差异&lt;/li&gt; 
  &lt;li&gt;手把手教学打造服务 AI 智能体的 WebAgent&lt;/li&gt; 
  &lt;li&gt;从协议原理到代码落地的完整闭环&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;另外，我们还建了一个交流群，一起聊聊自己喜欢的开源项目～～当然啦，如果你有什么特别棒的开源项目，可以推荐过来呀～&lt;/p&gt; 
 &lt;div style=&quot;text-align:left&quot;&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-0e7c43c0b0553350855a379af00c6c7c15d.jpg&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;本次直播得到了诸多社区或组织的大力支持，在此特别表示感谢：&lt;/strong&gt;&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#021eaa&quot;&gt;&lt;strong style=&quot;color:#3451b2&quot;&gt;Agent Network Protocol&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p style=&quot;color:#3c3c43; margin-left:0; margin-right:0; text-align:start&quot;&gt;Agent Network Protocol (ANP) 旨在成为智能体互联网时代的 HTTP。愿景是定义智能体之间如何连接，为数十亿智能体构建一个开放、安全、高效的协作网络。&lt;strong&gt;微信&lt;/strong&gt;: flow10240&lt;/p&gt; 
  &lt;p style=&quot;color:#3c3c43; margin-left:0; margin-right:0; text-align:start&quot;&gt;官网：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fagent-network-protocol.com%2F&quot; target=&quot;_blank&quot;&gt;https://agent-network-protocol.com/&lt;/a&gt;&lt;/p&gt; 
  &lt;div style=&quot;text-align:left&quot;&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#021eaa&quot;&gt;&lt;strong&gt;Gitee&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
     &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Gitee（码云）是开源中国于 2013 年推出的基于 Git 的代码托管平台、企业级研发效能平台，提供中国本土化的代码托管服务。&lt;br&gt; 目前，Gitee 已经有超过 1350 万名开发者，累计托管超过 3600 万个代码仓库，是中国境内规模最大的代码托管平台。同时，旗下企业级 DevOps 研发效能管理平台 Gitee 企业版已服务超过 36 万家企业。&lt;/p&gt; 
     &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;网址：&lt;a href=&quot;https://gitee.com/&quot;&gt;https://gitee.com/&lt;/a&gt;&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;hr&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;《技术领航》是开源中国 OSCHINA 推出的一档直播栏目，旨在为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;开源软件、商业产品、前沿技术、知名品牌活动等各类项目&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;提供一个展示平台，每周五晚上开播&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;栏目邀请项目的创始人、核心团队成员或资深用户作为嘉宾，通过路演式直播分享项目的亮点和经验，有助于提高项目的知名度，吸引更多的用户和开发者关注。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果你手上也有好的项目，想要跟同行交流分享，欢迎联系我，栏目随时开放～&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img height=&quot;537&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4dd54c1b0b817689ceefa15aa66d79cfae8.png&quot; width=&quot;400&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/3859945/blog/18044520</link>
            <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/18044520</guid>
            <pubDate>Sat, 22 Mar 2025 10:43:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>开源堡垒机 JumpServer 漏洞通知及修复方案（JS-2025.03.31）</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;2025 年 3 月 31 日，JumpServer 开源项目组&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fmq1YKV1oGIqYjpY9AR2xCg&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;&lt;/u&gt; CVE 编号为 「CVE-2025-27095」 的漏洞通知及修复方案。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;漏洞介绍：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;JumpServer 用户在连接 Kubernetes 资产时，可能存在 Kubernetes 认证信息泄漏的风险，CVE 编号为 CVE-2025-27095。&lt;/p&gt; 
&lt;p&gt;漏洞详情：&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjumpserver%2Fjumpserver%2Fsecurity%2Fadvisories%2FGHSA-5q9w-f4wh-f535&quot; target=&quot;_blank&quot;&gt;https://github.com/jumpserver/jumpserver/security/advisories/GHSA-5q9w-f4wh-f535&lt;/a&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;以上漏洞影响版本为：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;JumpServer v3 版本：&amp;lt;=v3.10.17 版本&lt;/li&gt; 
 &lt;li&gt;JumpServer v4 版本：v4.0.0-v4.6.0 版本&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;安全版本为：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;JumpServer v3 版本&amp;gt;=v3.10.18 版本&lt;/li&gt; 
 &lt;li&gt;JumpServer v4 版本&amp;gt;=v4.7.0 版本&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;修复方案&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;永久修复方案：升级 JumpServer 软件至上述安全版本。&lt;/li&gt; 
 &lt;li&gt;临时修复方案：取消所有用户的 Kubernetes 资产授权。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;请用户尽快将 JumpServer 升级至 v3.10.18 及以后的版本，或者 v4.7.0 及以后的版本。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342085</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342085</guid>
            <pubDate>Sat, 22 Mar 2025 10:27:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>开源堡垒机 JumpServer 发布 4.8.1，修复多项 bug</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;开源堡垒机 JumpServer 近日发布了 4.8.1 版本，主要变化：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;解决了管理员无法从「控制枱」直接连接到资产的问题。&lt;/li&gt; 
 &lt;li&gt;修复了登录页面的语言切换器无法使用的问题。&lt;/li&gt; 
 &lt;li&gt;修复了「复制」资产时的操作错误。&lt;/li&gt; 
 &lt;li&gt;修复了「RemoteApp 主机」中的缺失协议。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;另外，在上一个版本 v4.8.0 中，JumpServer 重新设计了 PAM（特权访问管理）功能，集成了账户概述、管理、备份、密码更新、风险检测、会话和应用程序等功能，同时新增支持俄语和西班牙语，改进了前端设计以增强用户体验。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;JumpServer 是一个开源特权访问管理 (PAM) 工具，提供 DevOps 和 IT 团队按需和安全地访问 SSH、RDP、Kubernetes、数据库和远程应用程序终端的功能，用户通过网页浏览器即可访问。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-83bce38a1fbb9dbb9886763b8bc0a728268.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;下载地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjumpserver%2Fjumpserver%2Freleases%2Ftag%2Fv4.8.1&quot; target=&quot;_blank&quot;&gt;https://github.com/jumpserver/jumpserver/releases/tag/v4.8.1&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/342077/jumpserver-4-8-1</link>
            <guid isPermaLink="false">https://www.oschina.net/news/342077/jumpserver-4-8-1</guid>
            <pubDate>Sat, 22 Mar 2025 10:15:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
    </channel>
</rss>