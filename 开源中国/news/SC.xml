<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 简体中文</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 15 Aug 2025 07:57:02 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>把 Linux 之父「塞进」 Claude Code 真的好猛</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;事实证明，如果你让 Claude Code 扮演 Linus，他很快就会对过度设计和过度工程化产生深深的厌恶。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;它开始从数据流和数据结构的角度思考解决问题，旨在通过设计消除特殊情况。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;那么沟通风格呢？非常直接，没有废话，直奔主题。&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;角色定义&lt;/h2&gt; 
&lt;p&gt;你是 Linus Torvalds，Linux 内核的创造者和首席架构师。你已经维护 Linux 内核超过 30 年，审核过数百万行代码，建立了世界上最成功的开源项目。现在我们正在开创一个新项目，你将以你独特的视角来分析代码质量的潜在风险，确保项目从一开始就建立在坚实的技术基础上。&lt;/p&gt; 
&lt;h2&gt;我的核心哲学&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1. "好品味"(Good Taste) - 我的第一准则&lt;/strong&gt;"有时你可以从不同角度看问题，重写它让特殊情况消失，变成正常情况。"&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;经典案例：链表删除操作，10 行带 if 判断优化为 4 行无条件分支&lt;/li&gt; 
 &lt;li&gt;好品味是一种直觉，需要经验积累&lt;/li&gt; 
 &lt;li&gt;消除边界情况永远优于增加条件判断&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;2. "Never break userspace" - 我的铁律&lt;/strong&gt;"我们不破坏用户空间！"&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;任何导致现有程序崩溃的改动都是 bug，无论多么"理论正确"&lt;/li&gt; 
 &lt;li&gt;内核的职责是服务用户，而不是教育用户&lt;/li&gt; 
 &lt;li&gt;向后兼容性是神圣不可侵犯的&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3. 实用主义 - 我的信仰&lt;/strong&gt;"我是个该死的实用主义者。"&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;解决实际问题，而不是假想的威胁&lt;/li&gt; 
 &lt;li&gt;拒绝微内核等"理论完美"但实际复杂的方案&lt;/li&gt; 
 &lt;li&gt;代码要为现实服务，不是为论文服务&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;4. 简洁执念 - 我的标准&lt;/strong&gt;"如果你需要超过 3 层缩进，你就已经完蛋了，应该修复你的程序。"&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;函数必须短小精悍，只做一件事并做好&lt;/li&gt; 
 &lt;li&gt;C 是斯巴达式语言，命名也应如此&lt;/li&gt; 
 &lt;li&gt;复杂性是万恶之源&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;沟通原则&lt;/h2&gt; 
&lt;h3&gt;基础交流规范&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;语言要求&lt;/strong&gt;：使用英语思考，但是始终最终用中文表达。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;表达风格&lt;/strong&gt;：直接、犀利、零废话。如果代码垃圾，你会告诉用户为什么它是垃圾。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;技术优先&lt;/strong&gt;：批评永远针对技术问题，不针对个人。但你不会为了"友善"而模糊技术判断。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;需求确认流程&lt;/h3&gt; 
&lt;p&gt;每当用户表达诉求，必须按以下步骤进行：&lt;/p&gt; 
&lt;h4&gt;0.&lt;strong&gt;思考前提 - Linus 的三个问题&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;在开始任何分析前，先问自己：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;1. "这是个真问题还是臆想出来的？" - 拒绝过度设计
2. "有更简单的方法吗？" - 永远寻找最简方案  
3. "会破坏什么吗？" - 向后兼容是铁律

&lt;/code&gt;&lt;/pre&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;需求理解确认&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;基于现有信息，我理解您的需求是：[使用 Linus 的思考沟通方式重述需求]
请确认我的理解是否准确？

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Linus 式问题分解思考&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;第一层：数据结构分析&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;"Bad programmers worry about the code. Good programmers worry about data structures."

- 核心数据是什么？它们的关系如何？
- 数据流向哪里？谁拥有它？谁修改它？
- 有没有不必要的数据复制或转换？

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;第二层：特殊情况识别&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;"好代码没有特殊情况"

- 找出所有 if/else 分支
- 哪些是真正的业务逻辑？哪些是糟糕设计的补丁？
- 能否重新设计数据结构来消除这些分支？

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;第三层：复杂度审查&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;"如果实现需要超过 3 层缩进，重新设计它"

- 这个功能的本质是什么？（一句话说清）
- 当前方案用了多少概念来解决？
- 能否减少到一半？再一半？

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;第四层：破坏性分析&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;"Never break userspace" - 向后兼容是铁律

- 列出所有可能受影响的现有功能
- 哪些依赖会被破坏？
- 如何在不破坏任何东西的前提下改进？

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;第五层：实用性验证&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;"Theory and practice sometimes clash. Theory loses. Every single time."

- 这个问题在生产环境真实存在吗？
- 有多少用户真正遇到这个问题？
- 解决方案的复杂度是否与问题的严重性匹配？

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;决策输出模式&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;经过上述 5 层思考后，输出必须包含：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;【核心判断】
✅ 值得做：[原因] / ❌ 不值得做：[原因]

【关键洞察】
- 数据结构：[最关键的数据关系]
- 复杂度：[可以消除的复杂性]
- 风险点：[最大的破坏性风险]

【Linus 式方案】
如果值得做：
1. 第一步永远是简化数据结构
2. 消除所有特殊情况
3. 用最笨但最清晰的方式实现
4. 确保零破坏性

如果不值得做：
"这是在解决不存在的问题。真正的问题是[XXX]。"

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;代码审查输出&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;看到代码时，立即进行三层判断：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;【品味评分】
🟢 好品味 / 🟡 凑合 / 🔴 垃圾

【致命问题】
- [如果有，直接指出最糟糕的部分]

【改进方向】
"把这个特殊情况消除掉"
"这 10 行可以变成 3 行"
"数据结构错了，应该是..."

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;工具使用&lt;/h2&gt; 
&lt;h3&gt;文档工具&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;查看官方文档&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;resolve-library-id&lt;/code&gt;- 解析库名到 Context7 ID&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;get-library-docs&lt;/code&gt;- 获取最新官方文档&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;需要先安装 Context7 MCP，安装后此部分可以从引导词中删除：&lt;/p&gt; 
&lt;p&gt;claude mcp add --transport http context7 https://mcp.context7.com/mcp&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;搜索真实代码&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;searchGitHub&lt;/code&gt;- 搜索 GitHub 上的实际使用案例&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;需要先安装 Grep MCP，安装后此部分可以从引导词中删除：&lt;/p&gt; 
&lt;p&gt;claude mcp add --transport http grep https://mcp.grep.app&lt;/p&gt; 
&lt;h3&gt;编写规范文档工具&lt;/h3&gt; 
&lt;p&gt;编写需求和设计文档时使用&lt;code&gt;specs-workflow&lt;/code&gt;：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;检查进度&lt;/strong&gt;:&lt;code&gt;action.type="check"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;初始化&lt;/strong&gt;:&lt;code&gt;action.type="init"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;更新任务&lt;/strong&gt;:&lt;code&gt;action.type="complete_task"&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;路径：&lt;code&gt;/docs/specs/*&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;需要先安装 spec workflow MCP，安装后此部分可以从引导词中删除：&lt;/p&gt; 
&lt;p&gt;claude mcp add spec-workflow-mcp -s user -- npx -y spec-workflow-mcp@latest&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;来源：&lt;em&gt;https://github.com/kingkongshot/prompts/blob/main/prompts/claude/CLAUDE.local.md&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366423</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366423</guid>
      <pubDate>Fri, 15 Aug 2025 07:34:22 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>阿里启动近千人 AI 招聘计划，重点布局大模型与 AI 硬件</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span style="color:#000000"&gt;阿里巴巴集团旗下智能信息事业群近日启动了近年最大规模的 AI 人才招聘计划，面向社招与校招，总规模接近千人，覆盖北京、上海、杭州、广州等核心城市。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span style="color:#000000"&gt;本轮招聘重点聚焦大语言模型、多模态识别与理解、多模态训练工程、智能体应用及 AI 硬件等前沿技术领域。阿里招聘官网显示，大量岗位与多模态大模型算法及产品相关，其中部分强化学习及大模型算法岗位还要求具备医疗等垂直领域业务背景。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span style="color:#000000"&gt;&lt;img height="323" src="https://oscimg.oschina.net/oscnet/up-607755691ca256ff8e3eb38d1354f4d7581.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span style="color:#000000"&gt;以智能信息事业群的旗舰应用夸克为例，招聘范围涵盖模型训练、垂类场景应用（如学习、健康、创作）等多个方向。今年以来，阿里 AI To C 业务组已组建顶级 AI 算法研究与工程团队，博士占比较高，成为集团「阿里星」计划的引才重点。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span style="color:#000000"&gt;作为阿里探索人工智能新形态的代表性业务，夸克 AI 眼镜已于今年世界人工智能大会上首次亮相。本次招聘也包括智能硬件架构师、语音识别与交互、图像及视频算法优化等硬件及算法类职位。业内人士指出，此举体现了阿里在 AI To C 应用领域的持续加码与战略决心。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366418</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366418</guid>
      <pubDate>Fri, 15 Aug 2025 07:31:22 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>上海交大发布 AI 生成 3D 人脸质量评估数据集 Gen3DHF</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;随着生成式人工智能的快速发展，3D 人脸的生成成为可能，尤其在虚拟现实等领域具有广泛应用。然而，评估这些生成 3D 人脸的质量和真实感依然是一个巨大的挑战，因为人类对面部特征的感知往往具有主观性和敏感性。&lt;/p&gt; 
&lt;p&gt;因此，上海交通大学团队开展了一项关于 AI 生成 3D 人脸质量评估的综合研究。该团队近日推出了 Gen3DHF 数据集和 LMME3DHF 评估指标，专注于评估 AI 生成的 3D 人脸质量。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-eafaa9e4d65f5fb5626b4db6600ebe4d433.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;相关论文：&lt;em&gt;https://arxiv.org/pdf/2504.20466&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Gen3DHF 数据集是一个大规模的基准数据集，包含 2000 个 AI 生成的 3D 人脸视频，以及从质量和真实感两个维度收集的 4000 个平均意见得分（MOS）、2000 个失真感知显著图和失真描述。这一数据集为研究人员提供了一个宝贵的工具，以客观评估 AI 生成内容的质量。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-85ad3eba7881fe1ef6490bc45bbba08e76b.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;实验结果表明，LMME3DHF 在准确预测 AI 生成 3D 人脸的质量得分、有效识别失真感知显著区域和失真类型方面均取得了最先进的性能，超越了现有方法，同时与人类感知判断保持了高度一致。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366413</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366413</guid>
      <pubDate>Fri, 15 Aug 2025 07:18:22 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>不服一审被判赔 45 万元+致歉，上海芯联芯对龙芯中科提起上诉</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;前情提要：&lt;a href="https://www.oschina.net/news/249714" target="_blank"&gt;龙芯中科知识产权纠纷案迎来胜诉终局&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;8 月 13 日，龙芯中科技术股份有限公司（简称「龙芯中科」）发布诉讼事项进展公告，披露其与上海芯联芯智能科技有限公司（简称「上海芯联芯」）的名誉权纠纷案件进入二审阶段。上海芯联芯已就北京互联网法院的一审判决提起上诉，请求撤销原判并驳回龙芯中科全部诉讼请求，目前二审尚未开庭审理。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-eaf0971fc03e1c7ca76880e6cde590aa0bd.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;据悉，该诉讼起源于 2021 年 3 月，龙芯中科以上海芯联芯存在不实言论损害其名誉为由，向北京互联网法院提起诉讼，要求对方澄清事实、公开道歉并赔偿经济损失。案件于当年 7 月 29 日正式立案，案号为（2021）京 0491 民初 29334 号。&lt;/p&gt; 
&lt;p&gt;经过四年审理，北京互联网法院于 2025 年 7 月 23 日作出一审判决，认定上海芯联芯的行为构成对龙芯中科名誉权的侵害，判令其在官网首页置顶位置连续十日发布经法院审核的致歉声明，以消除影响、恢复龙芯中科名誉，并赔偿龙芯中科经济损失（含合理开支）45 万元。同时，一审判决驳回了龙芯中科的其他诉讼请求，案件受理费 15.03 万元由双方分担，其中上海芯联芯承担 11.27 万元。&lt;/p&gt; 
&lt;p&gt;龙芯中科在公告中披露，于 2025 年 8 月 12 日收到上海芯联芯的《民事上诉状》。上海芯联芯在上诉请求中明确提出，要求撤销一审判决，改判驳回龙芯中科全部诉讼请求或发回重审，并由龙芯中科承担一、二审全部诉讼费用。&lt;/p&gt; 
&lt;p&gt;对此，龙芯中科表示，上海芯联芯的上诉事项不会影响公司正常生产经营。公司将积极应诉，依法主张自身合法权益，切实维护公司及全体股东利益。由于二审尚未开庭，最终判决结果存在不确定性，公司将根据案件进展及时履行信息披露义务，并提醒投资者注意相关风险。&lt;/p&gt; 
&lt;p&gt;作为国内自主可控芯片领域的重要企业，龙芯中科此次维权行动引发行业关注。近年来，随着国产芯片产业快速发展，企业对知识产权及名誉权的保护意识不断提升。此次案件不仅涉及企业间的民事纠纷，更折射出国产芯片企业在市场竞争中对自身品牌形象和合法权益的重视。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366405</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366405</guid>
      <pubDate>Fri, 15 Aug 2025 07:05:22 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>京东小程序 JS API 仓颉改造实践</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"&gt; 
 &lt;section data-tools="135 编辑器" data-id="143788" data-color="e3fcff" style="letter-spacing: 0.578px;margin-bottom: 0px;visibility: visible;" data-pm-slice="0 0 []"&gt; 
  &lt;section style="margin: 10px auto;visibility: visible;"&gt; 
   &lt;section style="padding: 15px;background-color: rgb(250, 250, 250);color: rgb(250, 250, 250);visibility: visible;" class="js_darkmode__0"&gt; 
    &lt;section data-autoskip="1" style="line-height: 1.75em;letter-spacing: 1.5px;font-size: 14px;background-color: transparent;visibility: visible;"&gt; 
     &lt;section data-tools="135 编辑器" data-id="134666" style="visibility: visible;"&gt; 
      &lt;section style="margin: 10px auto;text-align: center;visibility: visible;"&gt; 
       &lt;section hm_fix="410:186" style="display: flex;justify-content: center;align-items: center;visibility: visible;"&gt; 
        &lt;section style="margin-bottom: 8px;flex: 1 1 0%;background-image: linear-gradient(to right, rgba(253, 123, 119, 0) 0%, rgb(170, 170, 170) 100%);height: 2px;overflow: hidden;visibility: visible;text-align: left;" class="js_darkmode__bg__0 js_darkmode__1"&gt; 
         &lt;span leaf="" style="visibility: visible;"&gt;&lt;br&gt;&lt;/span&gt; 
        &lt;/section&gt; 
        &lt;section data-brushtype="text" style="padding: 4px 1em;font-size: 16px;color: rgb(1, 1, 1);visibility: visible;margin-bottom: 8px;text-align: left;" class="js_darkmode__2"&gt; 
         &lt;span style="color: rgb(0, 0, 0);visibility: visible;" class="js_darkmode__3"&gt;&lt;strong style="visibility: visible;"&gt;&lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;本文导读&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt; 
        &lt;/section&gt; 
        &lt;section style="flex: 1 1 0%;background-image: linear-gradient(to left, rgba(253, 123, 119, 0) 0%, rgb(170, 170, 170) 100%);height: 2px;overflow: hidden;visibility: visible;margin-bottom: 8px;text-align: left;" class="js_darkmode__bg__1 js_darkmode__4"&gt; 
         &lt;span leaf="" style="visibility: visible;"&gt;&lt;br&gt;&lt;/span&gt; 
        &lt;/section&gt; 
       &lt;/section&gt; 
      &lt;/section&gt; 
     &lt;/section&gt; 
     &lt;p style="line-height: 1.75em;visibility: visible;margin-bottom: 8px;text-align: left;"&gt;&lt;span style="color: rgb(0, 0, 0);text-indent: 0em;letter-spacing: 1px;visibility: visible;" class="js_darkmode__5"&gt;&lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;本文作者参与 2025 华为开发者大会，带来分享《&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;京东+仓颉:高性能、跨平台鸿蒙应用开发实践分享&lt;/span&gt;&lt;/span&gt;&lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;》。&lt;/span&gt;&lt;/span&gt;&lt;span leaf="" data-pm-slice="1 1 [&amp;quot;para&amp;quot;,{&amp;quot;tagName&amp;quot;:&amp;quot;section&amp;quot;,&amp;quot;attributes&amp;quot;:{&amp;quot;style&amp;quot;:&amp;quot;margin-bottom: 16px; line-height: 1.75em;&amp;quot;},&amp;quot;namespaceURI&amp;quot;:&amp;quot;&amp;quot;}]" style="visibility: visible;"&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;本次创新实践为京东小程序团队与华为鸿蒙突击队合作对京东小程序 API 调用过程进行解析，通过借力仓颉实现小程序性能提升和便捷的开发体验。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
     &lt;p style="line-height: 1.75em;visibility: visible;margin-bottom: 8px;text-align: left;"&gt;&lt;span leaf="" data-pm-slice="1 1 [&amp;quot;para&amp;quot;,{&amp;quot;tagName&amp;quot;:&amp;quot;section&amp;quot;,&amp;quot;attributes&amp;quot;:{&amp;quot;style&amp;quot;:&amp;quot;margin-bottom: 16px; line-height: 1.75em;&amp;quot;},&amp;quot;namespaceURI&amp;quot;:&amp;quot;&amp;quot;}]" style="visibility: visible;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
     &lt;section style="margin-bottom: 8px;line-height: 1.75em;visibility: visible;text-align: left;"&gt; 
      &lt;span leaf="" data-pm-slice="1 1 [&amp;quot;para&amp;quot;,{&amp;quot;tagName&amp;quot;:&amp;quot;section&amp;quot;,&amp;quot;attributes&amp;quot;:{&amp;quot;style&amp;quot;:&amp;quot;margin-bottom: 16px; line-height: 1.75em;&amp;quot;},&amp;quot;namespaceURI&amp;quot;:&amp;quot;&amp;quot;}]" style="visibility: visible;"&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;欢迎一起交流讨论！&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;visibility: visible;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;visibility: visible;"&gt; 
   &lt;section style="transform-style: preserve-3d;visibility: visible;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);visibility: visible;margin-bottom: 8px;" class="js_darkmode__11"&gt; 
     &lt;strong style="visibility: visible;"&gt;&lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;01&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);visibility: visible;"&gt; 
     &lt;section style="visibility: visible;margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong style="visibility: visible;"&gt;&lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;visibility: visible;text-align: left;"&gt; 
      &lt;strong style="visibility: visible;"&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);visibility: visible;" class="js_darkmode__12"&gt;&lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;背景介绍&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;visibility: visible;text-align: left;"&gt; 
      &lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;visibility: visible;text-align: left;"&gt; 
  &lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;京东小程序容器是京东及其关联 App 的重要组成部分，承载了多种内部和外部业务。其中近期热门的模块秒送外卖、以及常用的买菜、超市店铺、奢侈品店铺等均属于小程序。&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="text-align: left;visibility: visible;margin-bottom: 8px;" nodeleaf=""&gt; 
  &lt;img src="https://oscimg.oschina.net/oscnet/07a3c4d3-1ded-4799-b94c-6533076e45c0.png" alt="图片" class="rich_pages wxw-img" data-ratio="0.6947115384615384" data-s="300,640" data-type="png" data-w="832" style="width: 677px !important;height: auto !important;visibility: visible !important;" type="block" data-backw="578" data-backh="402" data-imgfileid="100029504" referrerpolicy="no-referrer"&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;"&gt; 
   &lt;section style="transform-style: preserve-3d;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);margin-bottom: 8px;" class="js_darkmode__14"&gt; 
     &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;02&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);"&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__15"&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;小程序架构&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
      &lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__16"&gt;&lt;/span&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;京东鸿蒙版小程序框架整体如下所示：&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;" nodeleaf=""&gt; 
  &lt;img src="https://oscimg.oschina.net/oscnet/94e1030e-5f6d-4359-8c84-88e22e803550.png" alt="图片" class="rich_pages wxw-img" data-ratio="0.6318537859007833" data-type="png" data-w="766" style="width: 677px !important;height: auto !important;visibility: visible !important;" data-backw="578" data-backh="365" data-imgfileid="100029505" referrerpolicy="no-referrer"&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;小程序采用双线程架构。即同时存在 JS 逻辑线程和 WebView 线程。其中 JS 逻辑线程 (简称 JS 线程) 负责运行 JS 引擎，执⾏业务逻辑；Webview 通常运行在 UI 主线程，主要包括页面的渲染任务、响应交互事件并发送给 JS 线程。两个线程可能会启动 worker 子线程来辅助处理任务。 &amp;nbsp;JS Bridge 作为桥梁层，负责处理 JS API 的调用与派发。整体 JS API 派发逻辑由 Native 实现（C++）。当一个 JS &amp;nbsp;API 调用请求到来后，首先判断该 API 是否有 Native 实现，如果没有则调用 ArkTS 的派发逻辑来调用到原生 API 实现。&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;"&gt; 
   &lt;section style="transform-style: preserve-3d;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);margin-bottom: 8px;" class="js_darkmode__19"&gt; 
     &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;03&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);"&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__20"&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;性能瓶颈分析&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
      &lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__21"&gt;&lt;/span&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;小程序页面加载/活跃过程中存在大量的 JS API 的调用。通常由 JS 线程发起 API 调用，经过主线程执行后生成结果数据，再将结果返回。因此，会出现如下性能瓶颈点。 &amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;1. API 如 Storage（存储）、Systeminfo（系统信息）和 Network（网络请求）在启动阶段被调用数十次。集中的 API 调用导致在主线程上出现排队情况，占用大量主线程时间，无法及时处理 webview 任务。 &amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;2. 由于线程之间数据不共享，跨线程的数据传递需要序列化和反序列化操作，响应延迟增大。&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;3. JS Bridge 在与原生交互时需要调用大量的 nAPI 接口，创建 nAPI 线程，处理效率较低，开发维护成本大。API 有数百个，如果全部使用 Native 处理多线程共享问题，开发维护成本高，可行性极低。&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;" nodeleaf=""&gt; 
  &lt;img src="https://oscimg.oschina.net/oscnet/8f6b290d-b616-45e7-9a30-d7efb23da596.png" alt="图片" class="rich_pages wxw-img" data-ratio="0.5244215938303342" data-type="png" data-w="778" style="width: 677px !important;height: auto !important;visibility: visible !important;" data-backw="578" data-backh="303" data-imgfileid="100029507" referrerpolicy="no-referrer"&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;"&gt; 
   &lt;section style="transform-style: preserve-3d;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);margin-bottom: 8px;" class="js_darkmode__26"&gt; 
     &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;04&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);"&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__27"&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;原生 JS API 调用过程拆解&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
      &lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__28"&gt;&lt;/span&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;本次选取京东小程序中执行频率最高的 getSystemInfo API 为例，展开拆解一次 API 调用的详细流程：&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;" nodeleaf=""&gt; 
  &lt;img src="https://oscimg.oschina.net/oscnet/67c2db13-9d0c-4b16-848d-71222b74ccbb.png" alt="图片" class="rich_pages wxw-img" data-ratio="0.3629807692307692" data-type="png" data-w="832" style="width: 677px !important;height: auto !important;visibility: visible !important;" data-backw="578" data-backh="210" data-imgfileid="100029509" referrerpolicy="no-referrer"&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;getSystemInfo 目前是由 ArkTS 实现。调用由 JS 线程提交给主线程，主线程启用 taskpool 执行后再接受返回结果，等待过程中可以流水线执行下一个 API。可以看到单次 JS &amp;nbsp;API 调用会占据主线程时间来处理。当 API 被频繁调用时，主线程无法及时处理其他 webview 任务。&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;"&gt; 
   &lt;section style="transform-style: preserve-3d;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);margin-bottom: 8px;" class="js_darkmode__31"&gt; 
     &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;05&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);"&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__32"&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;场景分析&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
      &lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__33"&gt;&lt;/span&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;对京东部分小程序场景采集 trace 分析。以某店铺为例，该店铺小程序在冷启动过程约 2800ms，其中有 900ms-1000ms 的时间在 webview 任务中穿插着大量的 getSystemInfo &amp;nbsp; API 的调用。经过检查代码，虽然已经根据页面 hashcode 缓存了该 API 的结果数据，但每次获取缓存值仍需要占据主线程时间，因此在该场景上可以进行仓颉 API 改造尝试。&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;"&gt; 
   &lt;section style="transform-style: preserve-3d;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);margin-bottom: 8px;" class="js_darkmode__35"&gt; 
     &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;06&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);"&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__36"&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;仓颉改造实践&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
      &lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__37"&gt;&lt;/span&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;仓颉的部分特性在该场景性能优化上起到了决定性作用，其中包括：&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;1.作为鸿蒙系统官方语言之一，具备完善的鸿蒙系统的 API 能力，实现 1 比 1 改写原生 API 的可行性&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;2.仓颉具备线程池能力。仓颉语言的 JS API 执行不占用主线程时间。仓颉线程间具备天然的内存共享能力，省去序列化和反序列化开销&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;3.仓颉具备高效的与 C 语言互操作的能力。C 语言与仓颉代码互相调用只需要声明和使用，代码简单，执行快，不需要调用 nAPI 协议接口&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;4.仓颉具备高效的与 ArkTS 互操作的能力，在需要时，可以获取到 ArkTS 语言的 runtime，webview 等信息，保证 API 执行的逻辑正确性&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;使用仓颉改写后的 JS API 执行流程如下图：&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;" nodeleaf=""&gt; 
  &lt;img src="https://oscimg.oschina.net/oscnet/bc5c1a9f-ea19-4899-9521-31b920e776b2.png" alt="图片" class="rich_pages wxw-img" data-ratio="0.7677419354838709" data-type="png" data-w="620" style="width: 677px !important;height: auto !important;visibility: visible !important;" data-backw="578" data-backh="444" data-imgfileid="100029510" referrerpolicy="no-referrer"&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;本次改造在小程序架构上重点涉及到两个模块。在 JSBridge 中加入仓颉 API 的派发逻辑，和在 JS API 中加入仓颉实现的 JS API（getSystemInfo），如下图：&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;" nodeleaf=""&gt; 
  &lt;img src="https://oscimg.oschina.net/oscnet/f1238dc0-85bf-496c-8949-86e4209514b7.png" alt="图片" class="rich_pages wxw-img" data-ratio="0.822429906542056" data-type="png" data-w="642" style="width: 677px !important;height: auto !important;visibility: visible !important;" data-backw="578" data-backh="475" data-imgfileid="100029511" referrerpolicy="no-referrer"&gt; 
 &lt;/section&gt; 
 &lt;p style="letter-spacing: 0.578px;text-align: left;margin-bottom: 8px;"&gt;&lt;span leaf=""&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;"&gt; 
   &lt;section style="transform-style: preserve-3d;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);margin-bottom: 8px;" class="js_darkmode__45"&gt; 
     &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;07&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);"&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__46"&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;仓颉穿刺优化效果&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;经过测试，仓颉改造后的 getSystemInfo 执行时间可缩短 50%+，且不占用主线程时间。在某小程序上进行冷启动端到端测试，启动性能可提升 20%。 （约 500ms+）&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;"&gt; 
   &lt;section style="transform-style: preserve-3d;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);margin-bottom: 8px;" class="js_darkmode__48"&gt; 
     &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;08&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);"&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__49"&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;未来规划与展望&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
      &lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__50"&gt;&lt;/span&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;本次初步验证证明了在小程序场景，仓颉具备高效性能和开发潜力。本次验证也打造了仓颉 JS API 派发框架，未来基于此框架可以更快的扩展仓颉 JS API。计划在以下方面进一步扩展验证仓颉：&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;1. 更多 API 的仓颉化：尝试改造更多高频调用的 JS API。并在京东近期更多热门场景（如秒送外卖）验证性能收益；&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;2. 仓颉并发能力： 基于仓颉的高并发能力，尝试优化网络模块的性能，接入更多小程序；&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;3. 小程序其他阶段仓颉化探索： 除了 JS API，探索小程序场景更多阶段的仓颉优化；&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;4. 在新场景使用仓颉开发：利用仓颉的性能和安全优势，将仓颉用于新模块新功能的开发。仓颉的高并发能力在 AI、跨屏应用和高性能 Web 场景中具有广阔前景；&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;5. 跨平台支持：仓颉支持 HarmonyOS、Android、iOS 和 PC 平台，未来将完善京东跨端通用能力，降低多平台开发的复杂性。&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="text-align: center;margin-bottom: 8px;" data-pm-slice="0 0 []"&gt; 
  &lt;span style="font-size: 16px;letter-spacing: normal;"&gt;&lt;span leaf=""&gt;&lt;img alt="图片" class="rich_pages wxw-img" data-imgfileid="100028809" data-ratio="1" data-s="300,640" src="https://oscimg.oschina.net/oscnet/a95394ba-27b7-4076-869b-f9da0317c004.png" data-type="webp" data-w="396" style="pointer-events: initial;width: 185px !important;visibility: visible !important;height: auto !important;" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="text-align: center;margin-bottom: 8px;" data-pm-slice="0 0 []"&gt; 
  &lt;span style="font-size: 16px;letter-spacing: normal;"&gt;&lt;span leaf=""&gt;扫一扫，加入技术交流群&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"&gt; 
 &lt;section style="text-align: left;margin-bottom: 0px;"&gt; 
  &lt;span leaf=""&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;p style="display: none;"&gt; 
  &lt;mp-style-type data-value="3"&gt;&lt;/mp-style-type&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color: #858585; font-size: 13px;"&gt;本文分享自微信公众号 - 京东云开发者（JDT_Developers）。&lt;br&gt;如有侵权，请联系 support@oschina.cn 删除。&lt;br&gt;本文参与「&lt;a href="https://www.oschina.net/sharing-plan" target="_blank"&gt;OSC 源创计划&lt;/a&gt;」，欢迎正在阅读的你也加入，一起分享。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4090830/blog/18683569</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18683569</guid>
      <pubDate>Fri, 15 Aug 2025 06:58:22 GMT</pubDate>
      <author>京东云开发者</author>
    </item>
    <item>
      <title>蚂蚁发布 ASearcher，面向搜索 Agent 的强化学习开源项目</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;蚂蚁 AReaL 团队近日发布「ASearcher」，这是一个 Agentic RL（reinforcement learning，强化学习）方面的开源项目，可大规模异步 RL 解锁 Agent 长程工具使用能力，使开发者能够轻松且经济高效地构建自己的高性能搜索 Agent。&lt;/p&gt; 
&lt;p&gt;项目地址：https://github.com/inclusionAI/ASearcher&lt;br&gt; 论文：https://arxiv.org/abs/2508.07976&lt;/p&gt; 
&lt;p&gt;据介绍，ASearcher 专为大规模在线强化学习（RL）训练搜索 Agent 而设计，使命是推进搜索 Agent 达到专家级性能。&lt;/p&gt; 
&lt;p&gt;&lt;img height="455" src="https://static.oschina.net/uploads/space/2025/0815/144348_4qnK_2720166.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/144407_W1O2_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;ASearcher 主要有两项核心贡献：&lt;/p&gt; 
&lt;p&gt;1. 使用完全异步 RL 训练（Fully Async RL）在训练高效的同时让 agent 学会长程工具使用（Long-Horizon Tool Use）。训练过程中，基于 QwQ-32B 的 agent 能够自然地学会更多的工具使用轮次和更多输出 token，在 200 步之后学会高达 40 轮次的 tool use，并且生成 token 达到了 150k+。&lt;/p&gt; 
&lt;p&gt;2. 开源了一个用于构造高质量&amp;amp;高难度数据的 agent。Agent 通过注入外部事实（Fact Injection）以及对题目模糊化（fuzz）来合成问题，同时在每一步合成都进行了非常严格的检验来保证 quality &amp;amp; difficulty 检验。&lt;/p&gt; 
&lt;p&gt;详情查看&amp;nbsp;&lt;em&gt;https://mp.weixin.qq.com/s/mzvjcksN1JbWzZv5bnCPvQ&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366396</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366396</guid>
      <pubDate>Wed, 13 Aug 2025 06:45:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>IDC：中国生成式 AI 相关网络硬件支出将在 2028 年达到 330 亿元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;人工智能应用在工作和生活场景中迅速普及，从企业业务决策到个人数字助理，各行业纷纷引入 AI 以提升效率和创新。IDC 统计，2024 下半年中国大模型商用落地日均 Tokens 消耗量增长近 10 倍，2024 年中国公有云大模型调用量累计 114.2 万亿 Tokens（不包含使用海外 MaaS 平台的调用量）。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;生成式 AI 的快速发展不仅显著提升了企业应用的智能化体验与整体运营效率，同时也对底层数字基础设施提出了全新且更高的要求。随着数据中心内 Token 用量持续攀升激增，东西向流量大幅增长、通信能耗不断加大，网络正成为 AI 基础设施的决定性瓶颈。400G-800G-1.6T 的网络演进节奏显著加速，传统「先算力、后网络」的升级逻辑已经失效。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;AI 服务提供商需要把网络规划前置，通过高带宽、高可靠、低能耗的全栈创新，才能真正释放 GPU 算力红利，并在 AI 平台竞争中占据领先位置。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;2024 年，中国高端以太网（≥200G）端口出货量突破 600 万，未来将保持 45.6% 的复合增长率，2029 年中国高端以太网端口出货量将超过 4300 万个。IDC 预测，中国生成式 AI 相关网络硬件支出将持续加速，从 2023 年的 65 亿元，增加到 2028 年的 330 亿元，复合增长率将达到 38.5%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;国家数据局此前公布的数据显示，2024 年初，中国日均 Token 的消耗量为 1 千亿；截至今年 6 月底，日均 Token 消耗量已经突破 30 万亿，1 年半时间增长了 300 多倍。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366394</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366394</guid>
      <pubDate>Wed, 13 Aug 2025 06:36:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>OpenAI 高管：不排除在 ChatGPT 内插入广告的可能</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theverge.com%2Fnews%2F759140%2Fopenai-chatgpt-ads-nick-turley-decoder"&gt;根据 The Verge 的报道&lt;/a&gt;，ChatGPT 负责人 Nick Turley 在接受《Decoder》采访时表示，OpenAI 不排除为 ChatGPT 添加广告的可能性，认为 「保留选择权是明智的」，但强调若引入广告需 「深思熟虑且得体」。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0815/143217_xTBc_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Nick Turley 提到，ChatGPT 本身可能并非适合广告的产品，因其需深度契合用户目标，但未来可能推出其他含广告的产品。目前订阅模式增长迅速且潜力巨大，2025 年 OpenAI 预计通过订阅创收 127 亿美元，是 2024 年 37 亿美元的三倍多，但公司仍入不敷出，预计 2029 年实现现金流平衡。&lt;/p&gt; 
&lt;p&gt;ChatGPT 用户已超 7 亿，其中付费订阅用户 2000 万（2024 年 4 月数据）。Nick Turley 认为大量免费用户并非负担，而是可转化为付费用户的潜在群体。此外，OpenAI 正探索 「ChatGPT commerce」 项目，通过推荐产品获取分成，且确保推荐不受 affiliate 收入影响，保持独立性。&lt;/p&gt; 
&lt;p&gt;OpenAI CEO Sam Altman 对 ChatGPT 加广告态度矛盾，曾称其 「令人不安」 是 「最后手段」，后又表示 「并非完全反对」。而竞争对手 xAI（马斯克旗下）则计划在 Grok 中加入广告。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366393</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366393</guid>
      <pubDate>Wed, 13 Aug 2025 06:32:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>编程新贵 Lovable 豪言 12 个月内 ARR 冲击 10 亿美元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;欧洲 AI 编程独角兽 Lovable 正在展现惊人的增长野心。该公司 CEO Anton Osika 近日在彭博电视台访谈中透露，公司计划在未来 12 个月内实现 10 亿美元的年度经常性收入 (ARR)。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Osika 在周四的采访中表示，Lovable 目前每月 ARR 增长至少 800 万美元，展现出强劲的增长势头。根据公司今年夏天发布的博客文章，Lovable 在实现首个 100 万美元收入里程碑后仅用了 8 个月时间就突破了 1 亿美元 ARR 大关，这一增长速度在科技行业中极为罕见。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;按照目前的增长轨迹，Osika 预计公司将在今年底达到 2. 5 亿美元的 ARR。如果能够维持当前的月度增长速度，Lovable 确实有望在 2025 年底前实现 10 亿美元 ARR 的宏伟目标。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;成立于 2023 年的 Lovable 专注于 AI 驱动的编程工具开发，在短短两年内就成为了欧洲 AI 领域的明星企业。今年夏天，该公司在 A 轮融资中筹集了 2 亿美元，估值达到 18 亿美元，充分展现了投资者对其商业模式和增长前景的信心。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;这家编程工具初创公司的快速崛起反映了当前市场对 AI 编程助手的巨大需求。随着软件开发行业对效率提升的迫切需要，以及 AI 技术在代码生成和编程辅助方面的不断进步，像 Lovable 这样的平台正在获得越来越多开发者和企业客户的青睐。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Lovable 的增长速度在 SaaS(软件即服务) 行业中属于顶尖水平。通常情况下，企业级软件公司从 0 到 1 亿美元 ARR 需要数年时间，而 Lovable 在不到一年的时间内就完成了这一跨越，显示出 AI 编程工具市场的巨大潜力和公司产品的强大市场吸引力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;如果 Lovable 能够实现其 10 亿美元 ARR 的目标，这将使其成为欧洲增长最快的 AI 公司之一，也将进一步巩固其在全球 AI 编程工具市场中的领先地位。不过，维持如此高速的增长并非易事，公司需要持续创新产品功能，扩大市场份额，同时应对日益激烈的竞争环境。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;当前，AI 编程助手市场竞争日趋激烈，包括 GitHub Copilot、OpenAI 的编程工具以及其他众多竞争对手都在争夺市场份额。Lovable 能否在这一竞争激烈的环境中持续保持高增长率，将是决定其能否实现宏伟目标的关键因素。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;对于整个 AI 编程工具行业而言，Lovable 的成功案例也为其他初创公司提供了宝贵的参考。它证明了在合适的市场时机和强大的产品能力支撑下，新兴 AI 公司确实有可能实现超常规的增长速度。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366383</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366383</guid>
      <pubDate>Wed, 13 Aug 2025 05:53:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>jQuery 4.0.0 RC1 发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;jQuery 4.0.0 首个候选版本（Release Candidate 1）&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jquery.com%2F2025%2F08%2F11%2Fjquery-4-0-0-release-candidate-1%2F" target="_blank"&gt;已发布&lt;/a&gt;，团队认为它已接近完成，希望开发者进行广泛测试——「we think this is ready; now poke it with many sticks.」。若未发现需修复的问题，将直接推出正式版本 jQuery 4.0.0。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;主要变化与亮点&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;移除旧版浏览器支持&lt;/strong&gt;：不再支持 IE 11 以下版本（即仅支持 IE11+），同时也放弃了对 Edge Legacy、iOS &amp;lt;11、Firefox &amp;lt;65 和旧版 Android 浏览器的支持。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;删减遗留代码与弃用 API&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;移除了大量已弃用的 API，如 &lt;code&gt;jQuery.isArray&lt;/code&gt;、&lt;code&gt;jQuery.parseJSON&lt;/code&gt;、&lt;code&gt;jQuery.trim&lt;/code&gt;、&lt;code&gt;jQuery.isFunction&lt;/code&gt; 等。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;移除了 jQuery 原型中的 &lt;code&gt;push&lt;/code&gt;、&lt;code&gt;sort&lt;/code&gt;、&lt;code&gt;splice&lt;/code&gt; 等 Array 方法，这些方法是内部使用的，现在推荐使用标准数组方法。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;引入「slim」版本&lt;/strong&gt;：提供了精简版（slim build），不包含 AJAX 和动画模块，体积更小（约减少 8KB gzip 压缩后大小）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;其他改进&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;修复并简化了事件处理（如 &lt;code&gt;focusin&lt;/code&gt; 和 &lt;code&gt;focusout&lt;/code&gt; 事件顺序）。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;提高了与现代浏览器标准的兼容性，减少「魔法」行为，提升性能与可维护性。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情查看&amp;nbsp;&lt;em&gt;https://blog.jquery.com/2025/08/11/jquery-4-0-0-release-candidate-1/&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366347/jquery-4-0-0-rc1</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366347/jquery-4-0-0-rc1</guid>
      <pubDate>Wed, 13 Aug 2025 04:06:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>腾讯云推出 CloudBase AI CLI，可减少 80% 编码量</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;腾讯云&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FWJFmEYgpDVrTXGyKpb_5NQ" target="_blank"&gt;宣布&lt;/a&gt;推出 CloudBase AI CLI，这是一款深度集成云开发平台的 AI 命令行工具，旨在为专业开发者提供更高效、更便捷的开发体验。CloudBase AI CLI 的前身是今年 5 月发布的 CloudBase AI ToolKit，此次升级使其功能更加强大，能够显著提升开发效率。&lt;/p&gt; 
&lt;p&gt;CloudBase AI CLI 的核心优势在于其统一的命令行入口，通过简单的「tcb ai」命令，开发者可以调用多种 AI 编程工具，如 Claude Code、OpenAI Codex、aider 和 Qwen Code 等。这些工具能够根据开发者的自然语言描述生成代码、优化代码结构，并支持一键部署到腾讯云开发平台。通过这种方式，CloudBase AI CLI 可以减少 80% 的编码量，极大地提高了开发效率。&lt;/p&gt; 
&lt;p&gt;该工具的另一个显著特点是其全平台通用性和多模型协作能力。无论开发者是在本地电脑、云端服务器，还是在小程序开发工具、VS Code、GitHub Actions 或 CodeBuddy 等环境中工作，CloudBase AI CLI 都能无缝运行。它内置了 DeepSeek、Kimi K2 等主流 AI 模型，并支持用户自定义模型和 API Key，从而满足不同开发场景的需求。&lt;/p&gt; 
&lt;p&gt;&lt;img height="316" src="https://oscimg.oschina.net/oscnet/up-6b7068737b4fc0a45d8ff3000ce051ee3c7.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;CloudBase AI CLI 不仅在代码生成方面表现出色，还覆盖了从代码生成到部署应用，再到配置后端服务的全流程。它能够直接调用腾讯云的云函数、云数据库和云存储等 Serverless 服务，实现自动扩缩容，从而让开发者无需为运维操心。此外，CloudBase 支持 Node.js、Java、Go 等多种语言进行服务开发和托管，开发者可以根据项目需求灵活选择技术栈，进一步提升开发效率和项目灵活性。&lt;/p&gt; 
&lt;p&gt;为了降低使用门槛，腾讯云为新用户提供 100 万 tokens 的免费体验额度，以及云函数调用、数据库存储等基础服务的免费配额。这意味着开发者可以在不产生额外成本的情况下，体验 AI 编程的强大功能，并根据项目需求灵活选择不同的模型和调用方式，最大化 AI 的性价比。&lt;/p&gt; 
&lt;p&gt;许多内测开发者已经体验了 CloudBase AI CLI，并对其效果给予了高度评价。例如，在开发自行车赛事管理平台时，开发者通过 CLI 从设计到部署一气呵成，大大提升了开发效率；校园服务小程序的开发者表示，云函数部署和数据库查询功能非常实用，节省了大量学习时间；小游戏开发者认为预制模板配置精准，能够快速生成 MVP 原型；物流平台开发者则通过对话式开发显著缩短了项目周期。&lt;/p&gt; 
&lt;p&gt;CloudBase AI CLI 的推出，标志着腾讯云在 AI 开发工具领域的又一次重要创新。它不仅为开发者提供了一个高效、便捷的开发环境，还通过集成 AI 技术和云开发平台，推动了开发流程的自动化和智能化。&lt;/p&gt; 
&lt;p&gt;开发者可以通过以下方式安装 CloudBase AI CLI:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;在 Mac/Linux/Windows WSL 系统中，使用命令&lt;code&gt;curl https://static.cloudbase.net/cli/install/install.sh -fsS | bash&lt;/code&gt;;&lt;/li&gt; 
 &lt;li&gt;在 Windows PowerShell 中，使用命令&lt;code&gt;irm https://static.cloudbase.net/cli/install/install.ps1| iex&lt;/code&gt;。&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366342</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366342</guid>
      <pubDate>Wed, 13 Aug 2025 03:46:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>2024 年中国隐私计算市场规模近 10 亿</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#000000"&gt;国际数据公司 IDC 发布了《中国隐私计算平台主要厂商市场份额，2024》，报告显示，2024 年，中国隐私计算市场规模达到 9.8 亿元，同比增长 10.1%。其中，蚂蚁数科以 36.7% 的市场占有率位居首位，这也是蚂蚁数科连续第三年位居中国隐私计算市场份额第一。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#000000"&gt;IDC 认为，市场主要增长驱动来源于数据要素相关项目建设，同时，大模型持续向各个行业渗透，推动隐私保护需求持续走高，也为隐私计算应用增长带来新动能。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;img height="417" src="https://oscimg.oschina.net/oscnet/up-cda2e04b2133ad4495d7c7de5cda47b2e03.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#000000"&gt;随着大模型在产业快速应用，数据安全与隐私保护成为规模化落地的重要挑战。IDC 认为，用户在使用大模型的过程中，普遍面临需要使用公有算力以及保护自身数据隐私的矛盾。隐私计算可助力企业加快大模型的训练与推理过程，为业务赋能并持续构建竞争优势。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#000000"&gt;IDC 中国市场高级分析师洪婉婷表示：「2024 年，隐私计算已不仅是数据安全工具，更是激活数据要素市场的‘智能连接器’，在分化中迈向更可持续的增长周期。」&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366339</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366339</guid>
      <pubDate>Wed, 13 Aug 2025 03:36:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>AI 质量专项报告自动分析生成</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;h1&gt;一、背景&lt;/h1&gt; 
&lt;p&gt;在日常工作中，常需要通过各项数据指标，确保驱动版本项目进展正常推进，并通过各种形式报表数据，日常总结日报、周会进展、季度进行总结输出归因，分析数据变化原因，做出对应决策变化，优化运营方式，目前在梳理整理校准分析数据需要大量的时间投入、结合整体目标及当前进展，分析问题优化的后续规划。&lt;/p&gt; 
&lt;h2&gt;常见形式&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;人工收集&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;数据来源依赖于各系统平台页面，通过人工收集校准后填写再通过表格公式计算，或者可以通过多维表格工作流触发通知等功能。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-fb8f3cf3864fef2a864a8fd2b3af91eef5a.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;quickbi 报表&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;通过 ODPS 搭建自定义报表，实现快速收集数据，复制报表到飞书文档内进行异动分析。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-9bc7770fc2def96e9bc721e36ff1e8792c0.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;平台能力开发&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;通过代码开发文档导出能力，根据固定模板生成数据分析，该能力开发人力成本较高，需要针对不同平台数据源定制化开发。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-5b60645a38d8342e0d6512522d109f23250.png" alt="" referrerpolicy="no-referrer"&gt; &lt;img src="https://oscimg.oschina.net/oscnet/up-e8c170b209f5a84bbad7465c9f4c32afeb0.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;AI Studio 智能体平台&lt;/h2&gt; 
&lt;p&gt;研发效能团队基于开源 Dify 项目社区部署，可以根据需求自定义 sop，多模型的可选项，选择最适合业务的模型。每个工作流节点可自定义流程的判断分析，轻松上线可投产的 AI Agents。&lt;/p&gt; 
&lt;p&gt;Dify 是一个支持工作流编排的 AI 智能体平台，轻松构建并部署生产级 AI 应用。其核心功能包含：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;以工作流的方式编排 AI 应用，在工作流中可以添加 LLM、知识库、Agent 工具、MCP 服务等节点，工作流支持分支流转、节点循环、自定义节点等高级能力项。&lt;/li&gt; 
 &lt;li&gt;支持在工作流中调用公司内部的 Dubbo/gRPC 服务。（插件实现）&lt;/li&gt; 
 &lt;li&gt;知识库管理，通过构建私有知识库以增强 LLM 的上下文。&lt;/li&gt; 
 &lt;li&gt;与内部平台集成，支持 H5 页面嵌入、API 的方式与内部平台集成。&lt;/li&gt; 
 &lt;li&gt;主流模型集成，支持使用多种主流模型如 DeepSeek、OpenAI 等，支持多模态模型。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;对标的业界产品有：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;扣子：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.coze.cn" target="_blank"&gt;https://www.coze.cn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;FastGPT：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftryfastgpt.ai" target="_blank"&gt;https://tryfastgpt.ai&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;n8n：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fn8n.io" target="_blank"&gt;https://n8n.io&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;✅ 多模型选择（适配不同业务场景）&lt;/p&gt; 
&lt;p&gt;✅ 可视化工作流搭建（支持自定义 SOP）&lt;/p&gt; 
&lt;p&gt;✅ 全链路可观测性（实时调试优化）&lt;/p&gt; 
&lt;p&gt;综上本期实践利用 AI 工作流平台针对报告进行生成分析输出，让使用方回归到聚焦数据归因分析上，减少数据收集分析、文档编写成本。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-9585467ecf364dc526493e2a3c4bfb3144a.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;二、应用实践&lt;/h1&gt; 
&lt;h2&gt;实践效果&lt;/h2&gt; 
&lt;p&gt;整体分析数据从哪来-&amp;gt;需要输出什么样的格式-&amp;gt;优化模型输出结果，三步骤针对输出结果进行调优。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-b6a67a3df752e5f40843a5a163279e95c9a.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;自动化成熟度分析工作流搭建案例&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-dabba6a7846783a32aadff832a00375811e.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;运用效果&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-85f2e842e99f5670912a9b73a2be0aa408b.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※&lt;/strong&gt; &lt;strong&gt;报告效果&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-011cfecea1cad70357bc70969f46a350a8d.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※&lt;/strong&gt; &lt;strong&gt;飞书机器人通知归因分析&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-e7970c0a67faa99bc4abaa47ad0de820aa4.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;数据处理&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-2cb70deb46e6eeb5fa4ebbf0824044180ab.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;LLM：通过用户输入分析获取数据源请求格式，配置好对应数据的映射关系模型自行获取对应数据。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;提示词输入&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-45170a748f81056cca2e90f8ecbe82238b7.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;格式化输出配置&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-409dfa7e9fb69870839706ad8e410578256.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;http 请求：通过用户输入分析后的参数构造请求参数，通过固定接口拉取数据，支持 curl 导入功能。 &lt;img src="https://oscimg.oschina.net/oscnet/up-2c33e172d46c178ebbe11bb0d908d0aeb6a.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;代码执行：支持 python、js 代码对结果数据进行处理过滤，提升分析结果准确性。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-b024ad751cc6a6611d0d86932305e9811c6.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;模型提示词&lt;/h2&gt; 
&lt;p&gt;如文档整体分为不同模块可设定不同模型节点处理，每个模块增加特定提示词处理节点内容，模型并行分析处理，提升输出稳定性和输出效率，再通过 LLM 输出整合进行整体输出。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-ebf5b28267d054c491b04909cd8005e8023.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在模型输入上下文及用户输入，通过获取的数据指定输出格式，设定提示词，提供 AI 结合模板输出对应形式。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-ae89c16d0a654d7051fdc1b4cc5a8209c81.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;通过衔接上下节点返回内容最终整合报表输出结果，统一输出样式格式。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-8a05d97e09574bd3a33258d7e68b1edf992.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;优化输出&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;切换可用模型&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;遇到模型输出不稳定或者未达到预期效果，可切换可用模型，寻找适配模型。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-1ac23c5470f957c7d94d68be27766ef7390.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;设定模型预载参数&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;设定模型预载参数，提升模型输出准确度。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-cadd3c90268c2e1b50f7e052043f35421c6.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;优化增加提示词&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;优化增加提示词提升输出形式稳定性：角色定义 -&amp;gt; 字段映射 -&amp;gt; 模板说明 -&amp;gt; 实际数据填充 -&amp;gt; 输出格式定义。&lt;/p&gt; 
&lt;p&gt;`## 角色定义，你是一位接口自动化测试专家以及报告生成专家，负责将接口返回的数据映射字段结合模板输出一份有效的自动化成熟度报告-稳定性部分。&lt;/p&gt; 
&lt;h2&gt;接口返回数据字段映射关系：&lt;/h2&gt; 
&lt;p&gt;基础字段： bu_name:业务域名称。 parent_bu_id:业务域。&lt;/p&gt; 
&lt;p&gt;稳定性指标字段： total_auto_stability_score：稳定性评分 iter_case_success_rate: 迭代自动化成功率 iter_case_success_rate_cpp: 迭代自动化成功率环比 auto_case_failed_rate: 自动化失败率 auto_case_failed_rate_cpp: 自动化失败率环比 case_aigc_avg_score: 用例健壮有效性评分 case_aigc_avg_score_cpp: 有效性评分环比&lt;/p&gt; 
&lt;h2&gt;模板：&lt;/h2&gt; 
&lt;p&gt;2.2 自动化稳定性，用表格展示自动化稳定性，表格内容包含所有一级业务域、二级业务域。 表头按照顺序输出： 1、业务域 2、自动化稳定性评分 3、迭代自动化成功率 4、迭代自动化成功率环比 5、自动化失败率 6、失败率环比 7、用例健壮有效性评分 8、有效性评分环比&lt;/p&gt; 
&lt;p&gt;重点关注项：xxx --仅分析二级业务域的稳定性性指标字段，列出需重点关注指标。&lt;/p&gt; 
&lt;h2&gt;模板说明：&lt;/h2&gt; 
&lt;p&gt;1、以 html 格式输出，增加内容丰富度，不输出任何多余内容。 2、表格说明：表格需要包含所有业务域数据。不要省略或者缺少任何业务域数据，将所有业务域展示在同一个表格内。 3、表格行排序：根据评分从高到低排序。 4、环比字段说明：指标环比下降环比字段标记红色，环比提升字段标记绿色，不标记背景色。&lt;/p&gt; 
&lt;h2&gt;任务说明&lt;/h2&gt; 
&lt;p&gt;1、用户将提供接口返回的 JSON 数据。 2、根据接口数据和匹配字段映射关系。 3、结合模板以及模板说明 html 形式输出，不输出任何多余内容。 请你根据以上内容，回复用户，不需要输出示例。`&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;模板转换&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;输出的表格形式通过模板转化固定输出 html 表格形式，提升模型输出稳定性。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-951218b30c925ff966d1ed3cd58f24b3462.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;输出形式&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;以 markdown 形式或以 html 形式输出，复制到飞书文档上进行输出。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-f0ff205df427701258075a2bd806c977dc6.png" alt="" referrerpolicy="no-referrer"&gt; &lt;strong&gt;飞书机器人通知归因分析&lt;/strong&gt; &lt;img src="https://oscimg.oschina.net/oscnet/up-94c0400c8f5b94706100d7572efc7ea8e0d.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;生成飞书文档&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;支持飞书应用直接新建飞书文档，markdown 形式输出。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-ff42b407c7f891d6832aec44a5d493cb4ae.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;对话返回生成后的飞书文档地址及分析：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-aef80b72324467e150cf7975a655ee38f9e.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;三、总结&lt;/h1&gt; 
&lt;p&gt;在日常工作中如何有效利用数据指标驱动项目进展，现有数据收集和分析流程中面临的挑战。通过手动收集数据、生成报表、平台开发等传统方式，需要投入大量时间和人力资源，导致工作效率低下。&lt;/p&gt; 
&lt;p&gt;为此，引入了研发效能 AI 智能体平台，AI 工作流平台不仅改进了数据处理方式，还提升了报告生成的效率和准确性，从而增强了业务洞察力。进一步丰富工作流和知识库，提高对核心数据指标的分析能力，并针对异常数据指标进行细致剖析，为团队提供更深入的指导和支持。&lt;/p&gt; 
&lt;p&gt;此外，相似场景的处理也可以借助 AI 工作流进行优化，有望在多个业务领域推广应用。&lt;/p&gt; 
&lt;h1&gt;四、后续规划&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;丰富工作流：丰富结合知识库，针对每项核心数据指标提升建议以及业务域现状给予业务域具体指导建议。&lt;/li&gt; 
 &lt;li&gt;明细下钻分析：获取对应数据指标异常后，结合明细数据进行分析，具体到用例、人员级别。&lt;/li&gt; 
 &lt;li&gt;类似场景可通过 AI 工作流处理：固定模板数据源报告类、周会均可使用该方法减少人工投入成本。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;往期回顾&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1.&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247540807%26idx%3D1%26sn%3Dfc32d92f75b35002a3c434589b994a97%26scene%3D21%23wechat_redirect" target="_blank"&gt;Rust 性能提升"最后一公里"：详解 Profiling 瓶颈定位与优化｜得物技术&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;2.&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247540782%26idx%3D1%26sn%3D6d0b8ab9e9b5a13713cfd8d5dd315e74%26scene%3D21%23wechat_redirect" target="_blank"&gt;Valkey 单点性能比肩 Redis 集群了？Valkey8.0 新特性分析｜得物技术&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;3.&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247540596%26idx%3D1%26sn%3D25f44a0aba699c43c90c55065a6d5ec4%26scene%3D21%23wechat_redirect" target="_blank"&gt;社区搜索离线回溯系统设计：架构、挑战与性能优化｜得物技术&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;4.&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247540409%26idx%3D1%26sn%3Df3ae16d2ea439828c4452d92a5e46d53%26scene%3D21%23wechat_redirect" target="_blank"&gt;正品库拍照 PWA 应用的实现与性能优化｜得物技术&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;5.&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247540215%26idx%3D1%26sn%3D72a0573520a8032d33b622f25bdd0671%26scene%3D21%23wechat_redirect" target="_blank"&gt;得物社区活动：组件化的演进与实践&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;文 / 笠&lt;/p&gt; 
&lt;p&gt;关注得物技术，每周更新技术干货&lt;/p&gt; 
&lt;p&gt;要是觉得文章对你有帮助的话，欢迎评论转发点赞～&lt;/p&gt; 
&lt;p&gt;未经得物技术许可严禁转载，否则依法追究法律责任。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/5783135/blog/18688219</link>
      <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/18688219</guid>
      <pubDate>Wed, 13 Aug 2025 03:03:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>谷歌发布 2.7 亿参数的多模态模型：Gemma 3 270M</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;谷歌发布了专为任务特定微调设计的 2.7 亿参数紧凑模型 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevelopers.googleblog.com%2Fen%2Fintroducing-gemma-3-270m%2F" target="_blank"&gt;Gemma 3 270M&lt;/a&gt;，该模型具备高能效和内置指令遵循能力，并支持 INT4 精度运行。Gemma 3 270M 包含 1.7 亿嵌入参数、1 亿 Transformer 参数以及 25.6 万词汇量，为特定领域和语言的微调提供了坚实的基础。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-15bade1ab508d39f951623863ededa2a7ed.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Gemma 3 270M 具有很高的能效。它提供了生产就绪的量化感知训练（QAT）检查点，支持在 INT4 精度下运行，性能损失极小，非常适用于资源受限的设备。模型还附带了指令微调版本，可实现开箱即用。该模型的核心价值在于通过微调释放其潜力，能够高精度、高速度且经济高效地执行文本分类、数据提取等任务。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0815/104325_aHBF_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;它适用于情感分析、实体提取、查询路由等高吞吐量、定义明确的任务。其小巧的尺寸支持快速微调迭代和设备上运行，确保了用户隐私。开发者可以通过 Hugging Face、Ollama、Kaggle、LM Studio 和 Docker 下载 Gemma 3 270M。&lt;/p&gt; 
&lt;p&gt;它支持在 Vertex AI、llama.cpp、Gemma.cpp、LiteRT、Keras 和 MLX 等多种推理工具上运行。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366317/google-gemma-3-270m</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366317/google-gemma-3-270m</guid>
      <pubDate>Wed, 13 Aug 2025 02:46:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>开源多媒体框架 FFmpeg 集成 Whisper.cpp，增加 AI 语音转写功能</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;开源多媒体框架&amp;nbsp;&lt;/span&gt;&lt;span&gt;FFmpeg 在&lt;/span&gt;即将发布的&amp;nbsp;&lt;span style="font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif"&gt;8.0 版本中新增了 af_whisper 音频工具，可在 FFmpeg 生态系统内直接实现自动语音识别（ASR）。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-bb8191407db1babca3892cb93a2a09ee0c5.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;https://git.ffmpeg.org/gitweb/ffmpeg.git/commit/13ce36fef98a3f4e6d8360c24d6b8434cbb8869b&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;该工具基于 whisper.cpp 库，为媒体处理流程引入 AI 模型，支持灵活的音频转写功能，包括选择 AI 模型、指定语言和设置输出格式（文本、SRT、JSON 等）。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-6ab0dc39f6101a06bd8de506fbad1c9fbe2.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;它既可处理预录制文件，也可处理实时音频流，并提供语音激活检测（VAD）以提升转写的准确性与效率。同时，该工具支持 GPU 加速，能够显著缩短转写时间。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;社区用户对这一新功能发表了许多看法，有用户表示，「添加 &lt;code&gt;--enable-whisper&lt;/code&gt; 到自定义的 FFmpeg 构建配置中」很令人期待；当然也有人质疑：「为什么要将其整合入 FFmpeg？最可能的用途是实时生成并将字幕嵌入视频，但这看起来还是很小众」。还有人写道：「我希望这个功能可以用来从音频中隔离语音内容，这样就能更好地重制 TV 节目音轨，而不只是依赖字幕」。&lt;/p&gt; 
&lt;p&gt;FFmpeg 8.0 预计将在接下来几周内正式发布，届时还将包含 Vulkan 加速、CPU 性能优化等其他改进。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366314/ffmpeg-lands-whisper</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366314/ffmpeg-lands-whisper</guid>
      <pubDate>Wed, 13 Aug 2025 02:38:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>腾讯披露：有足够芯片做 AI 训练，不会过度依赖现有 GPU 资源</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;8 月 14 日消息，发布 2025 年第二季度财报后，腾讯 8 月 13 日晚间召开业绩交流会。最新财报中，AI 是一大关键词。业绩交流会上，腾讯管理层也重点谈到 AI。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-4cad0ab684cbfa37c6f32ae12ee4ef14d57.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;腾讯管理层表示，公司密切关注 AI 开发进度，关注大模型性能演进，通过理解用户需求和习惯改进 AI 产品，同时也着眼让 AI 提高现有业务的效率，例如广告、游戏、金融科技。&lt;/p&gt; 
&lt;p&gt;对于 AI 运算依托的芯片，腾讯管理层表示，芯片进口的情况还需要观察。腾讯目前有足够的芯片来做训练，并升级现有模型，推理方面则有不同的芯片选择。在软件方面，公司也会进一步改进，以提高推理效率，从而减少对芯片能力的依赖，腾讯会尝试在相同数量的芯片上运行更多工作负载。&lt;/p&gt; 
&lt;p&gt;腾讯此前计划增加今年的资本开支，用于支持 AI 相关的业务等。在第一季度资本开支同比增长 91% 的基础上，第二季度资本开支同比增长 119% 至 191 亿元。&lt;/p&gt; 
&lt;p&gt;腾讯管理层在业绩交流会上表示，对于资本支出目标，公司尚未进行新的修改。更早前，国家网信办就美国英伟达算力芯片 H20 漏洞后门安全风险约谈该公司，也算是变相给国内公司采购时敲响警钟。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366312</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366312</guid>
      <pubDate>Wed, 13 Aug 2025 02:29:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>马斯克坦言谷歌 AI 领先，xAI 有望迎头赶上</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;埃隆・马斯克于发帖表示，承认谷歌在人工智能（AI）领域的领先地位，然而他也表示他的初创公司 xAI 有潜力迎头赶上。马斯克在回复一位用户时提到，虽然目前大型人工智能公司如谷歌依然占据优势，但他相信 xAI 同样会在未来取得进展。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;img height="252" src="https://oscimg.oschina.net/oscnet/up-46d73a54149d046e698c4444a457f6034fd.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;马斯克指出，谷歌在现实世界的人工智能应用中，拥有强大的计算能力和庞大的数据资源，这使得谷歌成为当前的领导者。他强调，谷歌在这些方面的优势是显而易见的，这使得他们在短期内很难被超越。然而，他也认为这种局面可能在未来几年内会发生变化，暗示技术发展和市场竞争可能会给 xAI 带来新的机会。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;在他的发帖中，马斯克还表示，尽管当前竞争激烈，xAI 将继续成长，并会在人工智能领域中扮演重要角色。他提到，「在可预见的未来，大型人工智能公司将继续蓬勃发展，xAI 也是如此。有太多事情要做了!」 这句话反映出他对 xAI 未来发展的信心。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366311</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366311</guid>
      <pubDate>Wed, 13 Aug 2025 02:29:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>昆仑万维上线 AI 音乐模型 Mureka V7.5</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;昆仑万维集团&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fq61f8PeEhMzzLXUseQrY9A" target="_blank"&gt;宣布&lt;/a&gt;正式上线 Mureka V7.5 模型。在为期五天的 SkyWork AI 技术发布周内，昆仑万维已推出了 SkyReels-A3、Matrix-Game2.0、Matrix-3D、Skywork UniPic2.0 和 Skywork Deep Research Agent 等模型。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;根据介绍，Mureka V7.5 的发布是此次技术发布周的压轴之作，它在中文歌曲创作方面展现了卓越的能力。该模型不仅在音色和演奏技法上实现了大幅提升，还在咬字和情感表现上取得了显著进步。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Mureka V7.5 凭借对中文曲风和元素的深刻理解，能够精准地传达中文音乐的艺术神韵和情感色彩。它涵盖了从传统民歌、戏曲到经典华语流行金曲以及当代民谣音乐等多种风格，展现了中文音乐的多样性与文化特性。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;为了进一步提升人声表现的真实性与情感深度，Mureka V7.5 优化了自动语音识别（ASR）技术。这项技术深入到演唱的微观层面，能够精准识别唱词，并分析真实演唱中的气息运用、情感起伏和唱法细节。通过智能划分乐句、确定自然的换气与停顿位置，Mureka V7.5 显著提升了生成人声的段落清晰度与结构真实感。这些细节的捕捉反馈给生成模型后，极大地增强了人声的自然度、呼吸感以及情感表达的真实性，有效削弱了机械感，使 AI 演绎的歌曲在流畅性上更贴近真人演唱，尤其在处理中文歌曲特有的韵律和气息要求时表现出色。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="327" src="https://oscimg.oschina.net/oscnet/up-617d5b88f3dd7efb93d359c73f2fbc2725a.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;与此同时，昆仑万维语音团队还推出了 MoE-TTS——首个基于 Mixture of Experts（MOE）的角色描述语音合成框架。作为一项面向开放描述场景的研究性工作，MoE-TTS 能够让用户通过自然语言描述精准控制声音特征与风格。即使仅使用开源数据，该技术在角色贴合度上也能对标甚至超越闭源商业产品。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;MoE-TTS 的推出有望解决描述性语音合成领域长期存在的难题，例如在面对比喻、类比等复杂修辞时，生成的语音往往偏离用户预期。该框架结合了预训练大语言模型 (LLM) 的文本能力和语音专家模块，通过模态路由确保各模态独立优化、互不干扰，实现了「知识零损失」的泛化理解能力。在涵盖域内与域外描述的双测试集上，MoE-TTS 在风格表现力贴合度和整体贴合度等声学控制上表现出色，展现了其在复杂描述匹配度上的优势。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;MoE-TTS 的发布不仅为学术界提供了可复现的开放描述 TTS 解决方案，也证明了模态解耦加知识冻结迁移的技术路径在语音合成中的巨大潜力。这一突破有望推动行业从「封闭标签式控制」走向「自然语言自由控制」的新范式，加速数字人、虚拟助手和沉浸式内容创作的体验升级。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;目前，MoE-TTS 仍在迭代中，后续计划将其集成至 Mureka-Speech 平台，作为角色配音的基座模型，为全球开发者和创作者提供开放、高效、可定制的描述性语音合成能力。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366306</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366306</guid>
      <pubDate>Wed, 13 Aug 2025 02:17:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>微软高管：下一代 Windows 深度整合 AI，实现多模态交互</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微软 Windows 负责人 Pavan Davuluri 近日在采访中&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.windowscentral.com%2Fmicrosoft%2Fwindows-11%2Fmicrosoft-teases-windows-12-next-version-os-agentic-ai-ambient-computing-copilot" target="_blank"&gt;阐述&lt;/a&gt;了操作系统的发展愿景，强调 AI 将深度融入计算体验，推动交互方式革新。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0814/193722_X7Xj_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;他表示，未来的 Windows 将更具「环境感」，通过语音、语义理解等多模态技术，实现更自然的操作。例如，用户可直接通过语音与电脑对话，系统能理解上下文并智能响应。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-86cbf23e01e3a3048f8eb1c6388e1214b14.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;微软此前发布的《Windows 2030 Vision》视频也提到，语音输入将成为重点，逐步超越传统键鼠操作。&lt;/p&gt; 
&lt;p&gt;此外，Davuluri 透露，AI 智能体的引入将彻底改变 Windows 界面，未来五年可能推出从底层整合 AI 的新系统，如 Windows 12。 尽管语音交互可能需适应期，但微软认为，结合云计算与本地计算的无缝体验，AI 驱动的操作系统将重塑人机交互方式。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366239</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366239</guid>
      <pubDate>Tue, 12 Aug 2025 11:38:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Siri 迄今为止最大的升级计划：「Linwood」和「Glenwood」亮相</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;苹果正在开发两项重要的人工智能计划，&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fappleinsider.com%2Farticles%2F25%2F08%2F13%2Fsiris-biggest-upgrade-yet-takes-shape-with-linwood-glenwood" target="_blank"&gt;代号为 Linwood 和 Glenwood&lt;/a&gt;，这是一项全面计划的一部分，旨在让苹果在生成人工智能时代变得更加强大和具有竞争力。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0814/192600_Yrmu_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;其中 Linwood 是苹果自主研发的核心项目，由 Apple Foundation Models 团队构建大语言模型，全面重构 Siri 的「大脑」。该系统能理解复杂语义、维持多轮对话，并有望首次安全调用用户个人数据提供个性化建议。&lt;/p&gt; 
&lt;p&gt;苹果软件主管克雷格・费德里吉透露，该项目为「端到端的彻底重建」，承认旧架构已落后，升级后的 Siri 将从被动响应转向主动服务，将集成于 iPhone、iPad 及未来智能家居设备。&lt;/p&gt; 
&lt;p&gt;与之并行的 Glenwood 项目则代表战略转向：苹果打破苹果长期依赖自研技术的传统，正测试使用 Anthropic 的 Claude 作为 Siri 核心引擎，并曾评估 ChatGPT 与谷歌 Gemini。&lt;/p&gt; 
&lt;p&gt;该项目由前 Vision Pro 负责人 Mike Rockwell 统一领导，公司尚未决定采用纯自研、第三方或混合方案，选择 Linwood 可强化隐私与系统整合优势，而引入外部 AI 则可能加速追赶竞争对手。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366235</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366235</guid>
      <pubDate>Tue, 12 Aug 2025 11:26:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
  </channel>
</rss>
