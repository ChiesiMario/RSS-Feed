<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 简体中文</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 23 Jun 2025 16:50:30 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>宇树王兴兴为高考生送上报考建议</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;随着高考成绩、分数线陆续公布，对于那些想投身具身智能行业的考生，宇树科技创始人王兴兴发文结合自身的经历给出一些专业报考建议。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="264" src="https://oscimg.oschina.net/oscnet/up-513fc7219a635ce3cbb2d6d3d7ae7738440.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;如果你从小喜欢拆解维修一些电子产品，或者动手 DIY 做点东西，推荐学习机械或电子相关专业。具体的专业细分名字很多，请注意区分，对于自己感兴趣的学校和专业，大家最好直接去对应学院的官网，直接看看具体的详细介绍，看看老师们在做什么课题或项目。哪怕专业名字一模一样，每个学校的差别也非常大。中间如果想多学习 AI，也可以多花时间自学。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;如果你对智能如何产生感兴趣、如果你有 AGI 的梦想，且数学还不错，推荐直接学习计算机科学/人工智能相关专业，也一并请直接多查查对应学院的详细信息，甚至可以直接先去对应实验室看看。当然，还是建议中间可以稍微花一些时间，学习一些硬件相关的原理，比如自己动手画个 PCB 板子等，简单实用。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;当然，现实里，大多数同学没有那么幸运，能直接进入自己理想的学校和专业，或者进入以后发现不适合自己或者不喜欢。这其实完全不是大问题，非常常见和正常。请不要放弃努力寻找自己喜欢和擅长的事，寻找新的方向，并请一定努力去实践。你可以转专业，哪怕转不了，也一点问题没有，你可以直接去找自己感兴趣方向的老师，直接沟通去他的实验室做事，甚至完全可以直接全都自学。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;后续上学时，请大家也不要局限于书本和论文，具身智能是物理世界的智能，一定要多动手，拧螺丝、调电路、写程序、debug，马上自己动手编程，进入实验室、参与机器人比赛等等，在实战中迅速提升自己。我自己至今，也还会自己直接上手拆装零部件，敲敲代码等。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;如果你想成为最顶尖的人才，一定要超脱课本，主动持续学习，学习当下最前沿的科技领域。持续关注顶级学术会议最新论文等；积极参与最具探索性的开源项目并尝试复现和改进；与同样渴望挑战边界的同学、研究者组建小组，共同探讨前沿问题，碰撞思想。每个同学，都有机会成为全人类未来科技方向的探索者和实践者。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;最后，我想说，在未来的学业中，你们或许会感到迷茫，不知前进的方向，但不要担心，每个人都会迷茫，我也一样。在大学期间，要较多的探索自己的多种可能性，多尝试，找到爱好点和擅长点。如果你的爱好恰巧也是你擅长的，那恭喜你，你找到了可以为之奋斗一生的目标。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;在成长过程中，你们可能目睹了一次又一次的时代浪潮，见证了一个又一个商业奇迹，外贸、房地产、基建、互联网、消费电子、移动互联网、新能源汽车，等等。可能你们会羡慕前人，觉得机会变少了，觉得宇宙的科技树没有太多可以探索的了。但请不要灰心，AI 和机器人的时代才刚刚开始，还有大量的挑战和机会在等你们。&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356888</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356888</guid>
      <pubDate>Sat, 10 May 2025 10:18:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>网易有道开源首个专注数学教育的模型 Confucius3-Math</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;网易有道宣布正式开源「子曰 3」系列大模型的数学模型（英文名称 Confucius3-Math），这是国内首个专注于数学教育，可在单块消费级 GPU 上高效运行的开源推理模型。&lt;/p&gt; 
&lt;p&gt;据了解，Confucius3-Math 是由网易有道 AI 团队开发的&lt;strong&gt;140 亿参数开源推理大语言模型&lt;/strong&gt;，专门针对 K-12 数学教育场景进行优化。与通用模型不同，Confucius3-Math 具有以下特点：&lt;/p&gt; 
&lt;p&gt;✅&lt;strong&gt;数学任务上的顶尖性能&lt;/strong&gt;&lt;br&gt; 通过专门的强化学习训练，在中文 K-12 数学问题上的表现超越了参数规模更大的模型&lt;/p&gt; 
&lt;p&gt;✅&lt;strong&gt;高性价比的部署方案&lt;/strong&gt;&lt;br&gt; 可在单张消费级 GPU（如 RTX 4090D）上高效运行&lt;/p&gt; 
&lt;p&gt;✅&lt;strong&gt;文化与课程体系的深度契合&lt;/strong&gt;&lt;br&gt; 针对中国国家数学课程标准和解题方法论进行了优化&lt;/p&gt; 
&lt;p&gt;Confucius3-Math 采用纯强化学习的后期训练流程，结合创新的数据调度策略和改进的组相对优势估计器开发而成。Confucius3-Math 在解决国内数学问题任务中展现出了显著优势。其通过大规模增强学习以及一系列的创新算法，训练成本仅为 2.6 万美元，推理性能约为 DeepSeek R1 的 15 倍。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-8732b5278351553b8f60ad1d228c44e8d50.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;附 1：Demo 地址，欢迎试用&lt;br&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fconfucius.youdao.com%2F" target="_blank"&gt;https://confucius.youdao.com/&lt;/a&gt;&lt;br&gt; 附 2：模型开源地址&lt;br&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnetease-youdao%2FConfucius3-Math" target="_blank"&gt;https://github.com/netease-youdao/Confucius3-Math&lt;/a&gt;&lt;br&gt; 附 3：论文地址&lt;br&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnetease-youdao%2FConfucius3-Math%2Fblob%2Fmain%2FConfucius3-Math.pdf" target="_blank"&gt;https://github.com/netease-youdao/Confucius3-Math/blob/main/Confucius3-Math.pdf&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356885</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356885</guid>
      <pubDate>Sat, 10 May 2025 09:50:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>ChinaTextbook —— 所有小初高、大学 PDF 教材</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                        
                                                                                    &lt;p&gt;&lt;span style="background-color:#ffffff; color:#1f2328"&gt;虽然国内教育网站已提供免费资源，但大多数普通人获取信息的途径依然受限。有些人利用这一点，在某站上销售这些带有私人水印的资源。为了应对这种情况，将这些资源集中并开源，以促进义务教育的普及和消除地区间的教育贫困。&lt;/span&gt;&lt;/p&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;小学数学&lt;/h3&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%20%C2%B7%20%E6%95%B0%E5%AD%A6%E4%B8%80%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;一年级上册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%B8%80%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;一年级下册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%20%C2%B7%20%E6%95%B0%E5%AD%A6%E4%BA%8C%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;二年级上册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%BA%8C%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;二年级下册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%20%C2%B7%20%E6%95%B0%E5%AD%A6%E4%B8%89%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;三年级上册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%B8%89%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;三年级下册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%20%C2%B7%20%E6%95%B0%E5%AD%A6%E5%9B%9B%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;四年级上册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E5%9B%9B%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;四年级下册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%20%C2%B7%20%E6%95%B0%E5%AD%A6%E4%BA%94%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;五年级上册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%BA%94%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;五年级下册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%20%C2%B7%20%E6%95%B0%E5%AD%A6%E5%85%AD%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;六年级上册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%B0%8F%E5%AD%A6/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E5%85%AD%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;六年级下册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;初中数学&lt;/h3&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%88%9D%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88-%E4%BA%BA%E6%B0%91%E6%95%99%E8%82%B2%E5%87%BA%E7%89%88%E7%A4%BE/%E4%B8%83%E5%B9%B4%E7%BA%A7/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%B8%83%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;初一上册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%88%9D%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88-%E4%BA%BA%E6%B0%91%E6%95%99%E8%82%B2%E5%87%BA%E7%89%88%E7%A4%BE/%E4%B8%83%E5%B9%B4%E7%BA%A7/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%B8%83%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;初一下册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%88%9D%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88-%E4%BA%BA%E6%B0%91%E6%95%99%E8%82%B2%E5%87%BA%E7%89%88%E7%A4%BE/%E5%85%AB%E5%B9%B4%E7%BA%A7/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E5%85%AB%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;初二上册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%88%9D%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88-%E4%BA%BA%E6%B0%91%E6%95%99%E8%82%B2%E5%87%BA%E7%89%88%E7%A4%BE/%E5%85%AB%E5%B9%B4%E7%BA%A7/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E5%85%AB%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;初二下册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%88%9D%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88-%E4%BA%BA%E6%B0%91%E6%95%99%E8%82%B2%E5%87%BA%E7%89%88%E7%A4%BE/%E4%B9%9D%E5%B9%B4%E7%BA%A7/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%B9%9D%E5%B9%B4%E7%BA%A7%E4%B8%8A%E5%86%8C.pdf"&gt;初三上册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/blob/master/%E5%88%9D%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88-%E4%BA%BA%E6%B0%91%E6%95%99%E8%82%B2%E5%87%BA%E7%89%88%E7%A4%BE/%E4%B9%9D%E5%B9%B4%E7%BA%A7/%E4%B9%89%E5%8A%A1%E6%95%99%E8%82%B2%E6%95%99%E7%A7%91%E4%B9%A6%C2%B7%E6%95%B0%E5%AD%A6%E4%B9%9D%E5%B9%B4%E7%BA%A7%E4%B8%8B%E5%86%8C.pdf"&gt;初三下册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;高中数学&lt;/h3&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/tree/master/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%BA%BA%E6%95%99%E7%89%88%EF%BC%88A%E7%89%88%EF%BC%89%EF%BC%88%E4%B8%BB%E7%BC%96%EF%BC%9A%E7%AB%A0%E5%BB%BA%E8%B7%83%26%E6%9D%8E%E5%A2%9E%E6%B2%AA%EF%BC%89-%E4%BA%BA%E6%B0%91%E6%95%99%E8%82%B2%E5%87%BA%E7%89%88%E7%A4%BE"&gt;目录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;大学数学&lt;/h3&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/tree/master/%E5%A4%A7%E5%AD%A6/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E5%90%8C%E6%B5%8E%E5%A4%A7%E5%AD%A6%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E7%AC%AC%E4%B8%83%E7%89%88"&gt;高等数学&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/tree/master/%E5%A4%A7%E5%AD%A6/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0"&gt;线性代数&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/tree/master/%E5%A4%A7%E5%AD%A6/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6"&gt;离散数学&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook/tree/master/%E5%A4%A7%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA"&gt;概率论&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.dxsx.net/index.php"&gt;更多数学资料-(大学数学网)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div style="text-align:start"&gt;
&lt;h2&gt;问题：如何合并被拆分的文件？&lt;/h2&gt;
&lt;/div&gt;

&lt;p style="color:#1f2328; text-align:start"&gt;由于 GitHub 对单个文件的上传有最大限制，超过 100MB 的文件会被拒绝上传，超过 50MB 的文件上传时会收到警告。因此，文件大小超过 50MB 的文件会被拆分成每个 35MB 的多个文件。&lt;/p&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;示例&lt;/h3&gt;
&lt;/div&gt;

&lt;p style="color:#1f2328; text-align:start"&gt;文件被拆分的示例：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;义务教育教科书 · 数学一年级上册.pdf.1&lt;/li&gt;
&lt;li&gt;义务教育教科书 · 数学一年级上册.pdf.2&lt;/li&gt;
&lt;/ul&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;解决办法&lt;/h3&gt;
&lt;/div&gt;

&lt;p style="color:#1f2328; text-align:start"&gt;要合并这些被拆分的文件，您只需执行以下步骤 (其他操作系统同理)：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将合并程序&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;mergePDFs-windows-amd64.exe&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;下载到包含 PDF 文件的文件夹中。&lt;/li&gt;
&lt;li&gt;确保&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;mergePDFs-windows-amd64.exe&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;和被拆分的 PDF 文件在同一目录下。&lt;/li&gt;
&lt;li&gt;双击&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;mergePDFs-windows-amd64.exe&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;程序即可自动完成文件合并。&lt;/li&gt;
&lt;/ol&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;下载方式&lt;/h3&gt;
&lt;/div&gt;

&lt;p style="color:#1f2328; text-align:start"&gt;您可以通过以下链接，下载文件合并程序：&lt;/p&gt;

&lt;p style="color:#1f2328; text-align:start"&gt;&lt;a href="https://github.com/TapXWorld/ChinaTextbook-tools/releases"&gt;下载文件合并程序&lt;/a&gt;&lt;/p&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;文件和程序示例&lt;/h3&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;mergePDFs-windows-amd64.exe&lt;/li&gt;
&lt;li&gt;义务教育教科书 · 数学一年级上册.pdf.1&lt;/li&gt;
&lt;li&gt;义务教育教科书 · 数学一年级上册.pdf.2&lt;/li&gt;
&lt;/ul&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/chinatextbook</link>
      <guid isPermaLink="false">https://www.oschina.net/p/chinatextbook</guid>
      <pubDate>Sat, 10 May 2025 09:43:00 GMT</pubDate>
    </item>
    <item>
      <title>谷歌 AI 编程工具 Gemini Code Assist 发布更新，增强上下文管理能力</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;谷歌 AI 编程助手&amp;nbsp;Gemini Code Assist 近日&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2FGoogleCloudTech%2Fstatus%2F1936136971849441648" target="_blank"&gt;发布更新&lt;/a&gt;&lt;/u&gt;，集成了最新的&amp;nbsp;Gemini 2.5&amp;nbsp;模型，带来了更强的个性化和更灵活的上下文管理。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0623/174100_cmzw_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;用户现在可以创建自定义快捷命令来处理重复性任务，并在&amp;nbsp;VS Code&amp;nbsp;或&amp;nbsp;JetBrains IDE&amp;nbsp;的&amp;nbsp;Gemini&amp;nbsp;设置中配置项目编码规范，这些规则在每次生成代码时自动生效。&lt;/p&gt; 
&lt;p&gt;上下文管理方面，Gemini Code Assist&amp;nbsp;支持将整个文件夹或工作区加入上下文，上下文窗口可达&amp;nbsp;100 万 tokens，并可通过「@」符号精确添加特定文件或目录。&lt;/p&gt; 
&lt;p&gt;此外，新增的上下文抽屉（Context Drawer）可视化面板能显示当前参与对话的文件与路径，支持一键添加/移除。聊天窗口右上角现可开启多个会话，所有历史对话会自动保存并支持一键恢复。&lt;/p&gt; 
&lt;p&gt;同时，Google 的&amp;nbsp;Jules 异步编码代理也将登陆&amp;nbsp;AI Studio，未来可能以「Vibe coding」桌面应用的形式推出。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356882</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356882</guid>
      <pubDate>Sat, 10 May 2025 09:41:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>开源鸿蒙代码规模突破 1.3 亿行</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FEGCrwLfPlELGTq0DGmeTZw" target="_blank"&gt;据 OpenAtom OpenHarmony 分享&lt;/a&gt;，2025 年 6 月 21 日，由开源鸿蒙项目群工作委员会主办的开源鸿蒙社区年中技术会议在东莞三丫坡盛大召开。&lt;/p&gt; 
&lt;p&gt;开源鸿蒙项目群工作委员会主席、华为终端 BG 软件部总裁龚体为本次大会致辞。他表示，&lt;strong&gt;开源四年多来，开源鸿蒙实现全面生态跃迁：代码规模突破 1.3 亿行，凝聚 8700 多位开发者智慧&lt;/strong&gt;；社区治理持续升级，新增 8 个关键 SIG，系统性补齐路由、北斗、Web 等关键技术版图；400 余家生态伙伴的 1200 余款产品通过兼容性测评，覆盖金融、交通、教育、医疗、航天等多个行业领域。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-a8c873b452dab8e67e8a87ad3868acef8dc.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;消费端同步跨越升级 —— 鸿蒙 PC、Pura X 及 nova 系列设备全面搭载 HarmonyOS 5 操作系统，2 万多个原生应用与元服务成功上架，标志着万物智联生态正式进入规模化落地新阶段。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356872</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356872</guid>
      <pubDate>Sat, 10 May 2025 09:13:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>百度文心快码 AI IDE 上线</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;百度文心快码宣布上线独立 AI 原生开发环境工具 Comate AI IDE。根据介绍，Comate AI IDE 是行业首个多模态、多智能体协同 AI IDE，首创设计稿一键转代码，模型已接入文心 4.0 X1 Turbo，开箱即用。目前百度每天新增的代码中，文心快码生成的代码占比已超过 43%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="271" src="https://oscimg.oschina.net/oscnet/up-933809d1b828cf04041454b88391e408dd4.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#1a1a1a; text-align:justify"&gt;&lt;span style="color:#000000"&gt;不同于当前主流 AI 代码助手以插件形态附着在 VS Code、JetBrains 等开发平台，Comate AI IDE 完全自研，重构从编辑器交互到底层逻辑的全链路开发体验。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#1a1a1a; text-align:justify"&gt;&lt;span style="color:#000000"&gt;核心技术上，Comate AI IDE 集成了文心 4.0 X1 Turbo 模型与升级版 Zulu 智能体，支持自动任务拆解与自主决策执行。开发者可通过自然语言或语音输入复杂需求，由智能体自主生成代码、实时预览、持续优化。例如，开发者上传 Figma 设计稿，系统可自动生成高还原度前端代码，省去大量重复性编写工作。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356871</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356871</guid>
      <pubDate>Sat, 10 May 2025 09:09:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>马斯克：xAI 计划用 Grok 3.5 重写人类知识库</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近日，马斯克在 X&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Felonmusk%2Fstatus%2F1936333964693885089" target="_blank"&gt;宣布&lt;/a&gt;，旗下 AI 公司 xAI 将用新一代大模型 Grok 3.5（或许直接叫 Grok 4）重写整个人类知识库，添加缺失信息，删除错误内容，然后基于这个「纯净版」知识库重新训练模型。&lt;/p&gt; 
&lt;p&gt;马斯克认为，在任何基于未修正数据训练的基础模型中，都有太多的垃圾。&lt;/p&gt; 
&lt;p&gt;AI 为了迎合用户的要求，会自己加戏，从而凭空想象出很多不存在，或者还未发生的细节，直接当成真实事件嵌入到文章里。而一旦这样的内容多了，这些看似真实的内容甚至会被 AI 重新咀嚼回去训练，再被下一次输出时引用。这时候，真真假假就更难以分辨了。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-b1fa8925a68e196d59d0eb4bed7287ebb5b.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;简单来说，马斯克想让 Grok 成为人类知识的审核员和补全者。据悉，新一代 Grok 拥有高级推理能力，能够识别知识库中的错误和缺失。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356867</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356867</guid>
      <pubDate>Sat, 10 May 2025 08:48:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>《鸿蒙智能体框架白皮书》发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;华为正式发布了鸿蒙智能体框架（Harmony Agent Framework，HMAF）以及《Agent 时代，鸿蒙应用生而智能 —— 鸿蒙智能体框架白皮书》，全面且系统地定义了在鸿蒙系统下，操作系统、鸿蒙应用 / 元服务与智能体之间相互交互以及协同合作的全新范式。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1660" src="https://static.oschina.net/uploads/space/2025/0623/162018_MUZn_2720166.png" width="1316" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;鸿蒙智能体框架的核心目标是建立一个具备自主决策、群体协作能力的 AI 生态系统，全面赋能应用智能化升级。&lt;/p&gt; 
&lt;p&gt;无论是手机、手表、PC，还是其他智能终端，鸿蒙智能体都能够在各设备之间高度协同与互动。系统级智能体小艺和应用 Agent 的深度融合，能够实现无缝协作，让用户的需求和意图可以通过智能体间的协作流畅实现。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1664" src="https://static.oschina.net/uploads/space/2025/0623/162449_PJXg_2720166.png" width="2234" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0623/162552_RABO_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;与此同时，华为还推出了小艺智能体开放平台，旨在全方位赋能开发者，驱动智能体开发的蓬勃开展。通过小艺智能体开放平台，开发者可以快速构建符合自己需求的智能体，并借助鸿蒙系统级的分发入口，精准触达目标用户。平台还提供了丰富的插件、新手引导指南等，将开发门槛降低到新手开发者也能够迅速上手的程度。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0623/163017_fsUG_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;更多内容查看&amp;nbsp;&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.huawei.com%2Fconsumer%2Fcn%2Fdoc%2Fguidebook%2Fai-agent-0000002355199797" target="_blank"&gt;https://developer.huawei.com/consumer/cn/doc/guidebook/ai-agent-0000002355199797&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;阅读更多：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/news/356477" target="news"&gt;《鸿蒙编程语言白皮书》发布&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356864</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356864</guid>
      <pubDate>Sat, 10 May 2025 08:31:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>第二届壁仞科技 「飞翔杯」 AI 应用创新挑战赛</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;6 月 20 日，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;由上海市计算机行业协会、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;上海&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;壁仞科技&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;股份有限公司&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;主办&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;上海临港浦江国际科技城&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;发展有限公司&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;、浙江大学&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;上海&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;高等研究院、模力方舟（ Gitee AI ）、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;杭州&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一蓦&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;信息&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;科技&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;有限公司&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;承办&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;上海农村商业银行股份有限公司协办的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#c00000"&gt;&lt;strong&gt;第二届壁仞科技「飞翔杯」 AI 应用创新挑战赛&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;正式启幕。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:center"&gt;&lt;img height="4146" src="https://oscimg.oschina.net/oscnet/up-8adee0809261b27666b62893ecf019e0589.png" width="2160" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本届大赛以&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;「智领创新应用，芯启 AI 蓝图」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;为主题，基于壁仞科技自主研发的高性能 GPU ，通过「技术赋能+场景驱动」的双轮机制，聚焦智能政务、医疗健康、教育科技、金融法律等八大重点行业领域，面向企业开发者、高校科研团队及个人创客征集具备商业价值与社会效益的 AI 应用，旨在促进国产算力基础设施与实体经济深度融合。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;据悉，本届大赛获得了重点高校、场景企业、投资机构、金融机构等 12 家单位支持。壁仞科技更是携手合作伙伴向参赛选手提供了「五重惊喜」，打造国产 GPU 背景下的更宏伟的 AI 应用蓝图。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;第二届壁仞科技「飞翔杯」AI 应用创新挑战赛&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:center"&gt;&lt;strong&gt;&lt;a href="https://www.oschina.net/biren_fxcup/" rel="nofollow"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;报，名&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;赛事日程&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;table cellspacing="0" style="border-collapse:collapse; border:none; font-family:&amp;quot;Times New Roman&amp;quot;; font-size:10pt; margin-left:-0.6000pt; width:427.8000pt"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-bottom:none; border-left:none; border-right:none; border-top:none; height:59.0500pt; vertical-align:top; width:71.3000pt"&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;报，名 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;6 月 20 日&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-bottom:none; border-left:none; border-right:none; border-top:none; height:59.0500pt; vertical-align:top; width:76.2500pt"&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;开，始 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;提，交 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;7 月 11 日&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-bottom:none; border-left:none; border-right:none; border-top:none; height:59.0500pt; vertical-align:top; width:80.5000pt"&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;截，止&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;提，交&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;8 月 15 日&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-bottom:none; border-left:none; border-right:none; border-top:none; height:59.0500pt; vertical-align:top; width:57.1500pt"&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;复，审&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;- 9&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;月&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-bottom:none; border-left:none; border-right:none; border-top:none; height:59.0500pt; vertical-align:top; width:71.3000pt"&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;决，赛 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;8 - &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;月&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-bottom:none; border-left:none; border-right:none; border-top:none; height:59.0500pt; vertical-align:top; width:71.3000pt"&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;颁，奖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;9 月&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;参赛对象&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;面向企业开发者、高校科研团队及个人创客，并以团体赛形式报名，每队限定 1~5 个人。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;赛题设置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本次大赛设置揭榜赛题和常规赛题两类赛题。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;揭榜赛题由壁仞科技、华山医院、一蓦科技出题，聚焦 AI4S、智慧医疗、实训项目三大场景。揭榜赛题直接匹配企业现有需求，更有机会直接获取合作机会及资金支持。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;常规赛题聚焦智慧政务、医疗健康、教育科技、金融法律、文化传媒、具身智能、先进制造、互联网电商等八大重点行业领域。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;报名方式&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;即日起，第二届壁仞科技「飞翔杯」AI 应用创新挑战赛正式开启报名啦！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;报名方式一：&lt;/span&gt;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fruw9xpnpiv.feishu.cn%2Fshare%2Fbase%2Fform%2Fshrcnp5GagUPERraQX0KsrkqHIc" rel="nofollow" target="_blank"&gt;&lt;u&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#0000ff"&gt;&lt;u&gt;&lt;span&gt;https://ruw9xpnpiv.feishu.cn/share/base/form/shrcnp5GagUPERraQX0KsrkqHIc&lt;/span&gt;&lt;/u&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;报名方式二：扫描下方二维码，获取报名信息。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;img height="252" src="https://oscimg.oschina.net/oscnet/up-a9e468acbf6bd697baae4d8393b3e2d3616.png" width="257" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;作品提交&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;报名成功后，行业组与高校组作品分不同的平台进行提交。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;行业组作品提交&lt;/strong&gt;：模力方舟平台；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;高校组作品提交&lt;/strong&gt;：浙大智海 Mo 平台；&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;提交内容为 zip 压缩包，包含在线演示视频录制、应用介绍 PPT、DEMO 体验地址、代码工程（可选）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;参赛即可获得五重惊喜！&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;1、高性能算力支持：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;依托壁仞科技自主研发的高性能 GPU，大赛组织方已上线 8 大类近 20 种典型模型的 API 接口，并提供大量免费算力券！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;2、全栈式技术指导：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;强大技术团队坐镇！参赛者可获得来自壁仞科技及合作伙伴提供的 GPU 算力支持及模型调用专业指导。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;3、专业评审团队：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;由行业专家、资深工程师、学术界大咖、资深投资人组成的评审委员会，确保比赛的公正性和专业性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;4、&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;最高可获 5 万元奖励：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本届「飞翔杯」大赛设立丰厚奖金池！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本次大赛分为卓越、标杆、创新、潜力四大等级，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;行业组最高奖励可达 5 万元，高校组最高奖励 3 万元！&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;值得一提的是，所有获奖团队将会获得赛事组织方颁发的获奖证书，获奖团队队员可获得壁仞科技提供的优秀 AI 应用开发者证书！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;5、&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;超豪华曝光大礼包：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;投资人面对面：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;进入决赛的团队可获得与投资机构交流的机会！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;OFFER 请查收：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;优胜者将有机会获得壁仞科技合作机会、实习就业直通卡！参与技术社区线下沙龙活动，与大咖深入交流！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;大商机强曝光：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;参与揭榜题及有意商业化的项目，主办方将于赛事结束后为团队对接感兴趣的企业，为项目提供业务合作机会！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;赶快报名「飞翔杯」AI 应用创新挑战赛吧，让梦想在这里启航！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#8f959e"&gt;*大赛解释权归大赛组委会&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;关于壁仞科技：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;壁仞科技成立于 2019 年，致力于研发高性能通用 GPU，打造自主原创的高性能 GPU 软硬件体系，构建国产智能计算产业生态。首代壁仞通用 GPU 产品基于原创训推一体芯片架构，已在多地智算中心落地。新一代全国产产品研发正全面推进。近期，壁仞科技实现中国首个四种及以上异构芯片混训技术落地，突破了大模型算力孤岛难题，引领业界异构混训技术发展趋势。合作伙伴包括中国移动、中国电信、中兴通讯等。截至目前，壁仞科技在全球多个国家和地区累计申请专利近 1200 项，获得专利授权 430 余项&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:.0001pt; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;想了解壁仞科技更多信息，请前往&lt;/span&gt;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.birentech.com%2F%25E8%258E%25B7%25E5%258F%2596%25E3%2580%2582" rel="nofollow" target="_blank"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3370ff"&gt;https://www.birentech.com/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;获取。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4806939/blog/18633161</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4806939/blog/18633161</guid>
      <pubDate>Sat, 10 May 2025 08:03:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>模力方舟 17 款 Embedding 和 Reranker 模型全部免费使用</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;为了让更多开发者和企业能够零门槛体验最前沿的 AI 能力，模力方舟携手国产 GPU 伙伴，已将模型广场中 17 款 Embedding 与 Reranker 模型全部开放免费使用——其中包括最新的 4096 维 Qwen3-Embedding-8B。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0623/160005_Q4xj_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;RAG 架构必备的检索向量和重排序能力，即刻零成本上手！&lt;/p&gt; 
&lt;p&gt;更多免费模型，尽在模力方舟模型广场：&lt;em&gt;&lt;strong&gt;&lt;a href="https://ai.gitee.com/serverless-api" target="_blank"&gt;https://ai.gitee.com/serverless-api&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356859</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356859</guid>
      <pubDate>Sat, 10 May 2025 08:00:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Anthropic 发布 Claude Code 的 VS Code 扩展</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Anthropic 已为&amp;nbsp;VS Code&amp;nbsp;发布了&amp;nbsp;Claude Code&amp;nbsp;扩展。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0623/155007_jjcF_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;据介绍，它能自动检测并安装，通过自动添加选定文本到&amp;nbsp;Claude&amp;nbsp;的上下文、在&amp;nbsp;VSCode&amp;nbsp;的差异查看器中显示代码更改、支持快捷键以及查看编辑器中打开的文件等功能来提升编码体验。&lt;/p&gt; 
&lt;p&gt;Claude Code for VSCode 插件主要特性：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;集成紧密&lt;/strong&gt; ：安装后，Claude Code 能与 VSCode 紧密集成， Claucte 提出的编辑建议以内联方式在文件中显示，简化代码审查和跟踪过程。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;操作便捷&lt;/strong&gt; ：在 VSCode 中，使用 &lt;code&gt;Cmd+Esc&lt;/code&gt;（Mac）或 &lt;code&gt;Ctrl+Esc&lt;/code&gt;（Windows/Linux）可直接从编辑器打开 Claude Code，也可点击 UI 中的相应按钮；使用 &lt;code&gt;Cmd+Option+K&lt;/code&gt;（Mac）或 &lt;code&gt;Alt+Ctrl+K&lt;/code&gt;（Linux/Windows）可插入文件引用。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;功能实用&lt;/strong&gt; ：如代码片段所述，该插件支持自动检测已安装插件，可通过快捷键将选中代码发送至 Claude，还能在 VSCode 的 Diff 视图中直接查看代码变更。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下载地址：&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Danthropic.claude-code" target="_blank"&gt;https://marketplace.visualstudio.com/items?itemName=anthropic.claude-code&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356857/claude-code-for-vs-code</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356857/claude-code-for-vs-code</guid>
      <pubDate>Sat, 10 May 2025 07:56:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>MiniMax 宣布 Hailuo Video Agent 开启 Beta 公测</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;MiniMax 宣布旗下视频创作 Agent 产品——Hailuo Video Agen&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FyphAy5SDzmOzUsNB21lsvA" target="_blank"&gt;t 已开放 Beta 版本&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-118191fd968c50acaec868448d58c4508b0.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;据介绍，在 Hailuo Video Agent 中，为了提供足够大的创意空间，且保证好的质量， MiniMax 做了以下设计：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;抛弃传统工作流+节点的工具模式，通过 LLM 语言模型的工具调用能力，创新性地支持用户在自然语言描述中构建完整视频；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;打造视频构思、资料收集、分镜制作、剪辑、配音等视频制作全流程工具集，并通过 Agent 模型在不同阶段实现自动调用。为了提高短片创作的质量，我们遴选了所有视频创作需要的最佳工具集；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Agent 思维链可视化，用户实时查看 Agent 创作流程，为自定义编辑功能提供可视窗口与操作空间。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Web 端登录 https://hailuoai.com/ 即可体验。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356853</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356853</guid>
      <pubDate>Sat, 10 May 2025 07:41:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>图挖掘在反作弊场景的应用</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;本文全面探讨了营销活动反作弊与电商反作弊的图算法应用。首先介绍了黑产薅取活动奖励、刷单等作弊行为的背景，随后深入讲解了同人挖掘技术，包括同人建模、挖掘步骤及稳定性处理。接着，依次介绍了标签传播算法、Fraudar 算法、GCN 网络的原理、优缺点及应用。最后，文章展望了未来图算法在风控反作弊应用的发展方向，如多模态数据融合与动态图实时计算，旨在应对黑产的快速演化，确保营销活动的公平性与数据真实性。&lt;/p&gt; 
&lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
&lt;h1&gt;01 业务背景&lt;/h1&gt; 
&lt;p&gt;在营销活动场景中，黑产团伙通过自动化手段大规模获取活动奖励，挤占真实用户权益造成营销资金浪费，并污染数据指标导致活动效果失真，从而影响运营决策准确性。&lt;/p&gt; 
&lt;p&gt;以当前主流作弊模式为例，黑产实施路径如下：&lt;/p&gt; 
&lt;p&gt;1. 资源准备阶段：通过虚拟机登录批量购买的百度账号。&lt;/p&gt; 
&lt;p&gt;2. 任务执行阶段：部署自动化脚本模拟用户行为，如视频播放、广告点击等。&lt;/p&gt; 
&lt;p&gt;3. 资金变现阶段：使用分散的真实微信账号进行提现操作。&lt;/p&gt; 
&lt;p&gt;在与反作弊的对抗中，黑产工具持续升级（如改机工具、IP 池轮换等），传统特征采集数据趋于分散。我们的反作弊体系从两个方向不断提升防御能力：&lt;/p&gt; 
&lt;p&gt;1. 多维特征挖掘，包括设备指纹、行为特征以及环境特征。&lt;/p&gt; 
&lt;p&gt;2. 关联团伙分析，包括用户操作模式量化、暱称相似度分析以及基于账号-设备-提现账户等信息建立关联图谱。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片" src="https://oscimg.oschina.net/oscnet/up-b567c76d759b133c58127296b4127e848a9.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上图为云手机工具示例。&lt;/p&gt; 
&lt;p&gt;在电商场景中，存在着类似于营销活动的批量团伙作弊，典型的即刷单。刷单作弊即非真实有购买需求的用户（机器或众包真人）为了提升店铺的销量、评分，替店铺虚假的下单、评价，然后收取店铺报酬的一种作弊方式。&lt;/p&gt; 
&lt;span id="OSC_h1_2"&gt;&lt;/span&gt; 
&lt;h1&gt;02 同人挖掘&lt;/h1&gt; 
&lt;span id="OSC_h2_3"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.1 同人建模&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;黑产为了节省成本往往存在账号、设备共用的情况，因此我们定义「同人」概念：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;若参与活动的账号、设备背后的主体相同，则为一个同人团伙。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在账号之外，增加一个同人粒度进行数据监控和风险控制。例如，某人使用 5 个手机号分别注册 5 个 uid，并使用 2 个身份证进行实名认证，每天在 3 个设备上参与活动，并将收益提取到 2 个微信账号中，我们希望通过构图将其归类为一个同人团伙。&lt;/p&gt; 
&lt;span id="OSC_h3_4"&gt;&lt;/span&gt; 
&lt;h3&gt;2.1.1 同人挖掘&lt;/h3&gt; 
&lt;p&gt;挖掘步骤可分为以下 3 步：&lt;/p&gt; 
&lt;p&gt;1. 以用户百度账号为节点，共设备 ID/手机号/提现 ID/身份证号（加密）为边构图&lt;/p&gt; 
&lt;p&gt;2. 挖掘极大连通子图，即有边的强连通判为同人关系&lt;/p&gt; 
&lt;p&gt;3. 在多天参与活动的用户上挖掘同人关系，并与历史挖掘结果进行拼接，做同人 ID 稳定性处理&lt;/p&gt; 
&lt;span id="OSC_h3_5"&gt;&lt;/span&gt; 
&lt;h3&gt;2.1.2 稳定性处理&lt;/h3&gt; 
&lt;p&gt;在与历史同人结果拼接时，可将情况分为以下几类：&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片" src="https://oscimg.oschina.net/oscnet/up-ab1a6ef3b27b0b9b955c9dc6b8740c0fc75.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;经过稳定性处理后，整体同人 ID 稳定性达 96.8%，排除已知合并等不稳定因素稳定性达 99.3%。&lt;/p&gt; 
&lt;span id="OSC_h2_6"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.2 挖掘结果&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;由于线上已有一对多业务规则，同人团伙会采用多对多打散以绕过规则。&lt;/p&gt; 
&lt;p&gt;以下展示部分典型团伙构图：&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片" src="https://oscimg.oschina.net/oscnet/up-7ce79c7f88211177a7133e1a96d8e3daec7.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_7"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.3 同人应用&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;作弊识别&lt;/strong&gt;&lt;/strong&gt;：按照团大小逐渐收敛，从同人作弊株连、团内作弊风险浓度高、同人且有作弊风险几个思路进行策略迭代。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;发放打压&lt;/strong&gt;&lt;/strong&gt;：对于作弊风险较低的羊毛党用户，业务侧可根据情况进行奖励发放打压。&lt;/p&gt; 
&lt;span id="OSC_h1_8"&gt;&lt;/span&gt; 
&lt;h1&gt;03 标签传播算法及其应用&lt;/h1&gt; 
&lt;span id="OSC_h2_9"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.1 标签传播算法&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;标签传播算法（Label Propagation Algorithm，LPA）是一种基于图的&lt;strong&gt;&lt;strong&gt;半监督&lt;/strong&gt;&lt;/strong&gt;学习算法，常用于社区检测和节点分类任务。它通过迭代传播标签信息，利用数据结构的相似性来推断未知节点的标签。&lt;/p&gt; 
&lt;span id="OSC_h3_10"&gt;&lt;/span&gt; 
&lt;h3&gt;3.1.1 算法流程&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;输入&lt;/strong&gt;：图&lt;span class="math-tex"&gt;\(G=(V,E)\)&lt;/span&gt;，已知标签节点集合&lt;span class="math-tex"&gt;\(V_L\)&lt;/span&gt;，未知标签节点集合&lt;span class="math-tex"&gt;\(V_U\)&lt;/span&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;输出&lt;/strong&gt;：所有节点预测标签&lt;span class="math-tex"&gt;\({\{y_i\}}_{i\in V}\)&lt;/span&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;初始化阶段&lt;/strong&gt;：为每个已标记节点&lt;span class="math-tex"&gt;\(v\in V_L\)&lt;/span&gt;分配固定标签&lt;span class="math-tex"&gt;\(y_v\)&lt;/span&gt;，为每个未标记节点&lt;span class="math-tex"&gt;\(v\in V_U\)&lt;/span&gt;随机分配标签（或按先验分布分配）。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;迭代传播阶段&lt;/strong&gt;：对于每个未标记节点，将出现频率最高的邻居标签作为自己的新标签。&lt;/p&gt; 
&lt;p&gt;定义&lt;span class="math-tex"&gt;\(N(v)\)&lt;/span&gt;为节点&lt;span class="math-tex"&gt;\(v\)&lt;/span&gt;的邻居集合，&lt;span class="math-tex"&gt;\(y_v^{(t)}\)&lt;/span&gt;为节点&lt;span class="math-tex"&gt;\(v\)&lt;/span&gt;在迭代&lt;span class="math-tex"&gt;\(t\)&lt;/span&gt;时的标签，Ⅱ为指示函数（当&lt;span class="math-tex"&gt;\(y_u=l\)&lt;/span&gt;时为 1，否则为 0）。&lt;/p&gt; 
&lt;p&gt;无权图标签更新规则&lt;span class="math-tex"&gt;\(y_v^{(t+1)} = \argmax_l \displaystyle\sum_{u\in N(v)} \Pi(y_u^{t}=l)\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;加权图标签更新规则&amp;nbsp;&lt;span class="math-tex"&gt;\(y_v^{(t+1)} = \argmax_l \displaystyle\sum_{u\in N(v)} w_{uv} \cdot\Pi(y_u^{t}=l)\)&lt;/span&gt;，其中&lt;span class="math-tex"&gt;\(w_{uv}\)&lt;/span&gt;为边权重。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;终止条件&lt;/strong&gt;：当迭代不再改变任何节点的标签时；或达到最大迭代次数。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片" src="https://oscimg.oschina.net/oscnet/up-9f71c1149e2ddfb7d9ae359bbdbcd6fc955.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上图为标签传播示例。&lt;/p&gt; 
&lt;span id="OSC_h3_11"&gt;&lt;/span&gt; 
&lt;h3&gt;3.1.2 实践细节&lt;/h3&gt; 
&lt;p&gt;最高频率标签不唯一时：随机选择（结果可能不稳定），或结合其他信息（如节点度数等）。&lt;/p&gt; 
&lt;p&gt;传播顺序：同步更新（所有节点同时更新，可能振荡），或异步更新（按随机或度排序等顺序逐个更新）。&lt;/p&gt; 
&lt;span id="OSC_h3_12"&gt;&lt;/span&gt; 
&lt;h3&gt;3.1.3 无监督改进&lt;/h3&gt; 
&lt;p&gt;在&lt;strong&gt;&lt;strong&gt;完全无监督&lt;/strong&gt;&lt;/strong&gt;的情况下，仍然可以通过改进方法实现社区检测或聚类任务。面对局部最优问题，使用模块度作为目标函数多次运行。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;算法流程：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1. 随机初始化所有节点的标签（如 1 到 K，K 为社区数）&lt;/p&gt; 
&lt;p&gt;2. 执行标准 LPA 迭代，直到收敛，计算模块度 Q&lt;/p&gt; 
&lt;p&gt;3. 重复多次，选择模块度最高的划分结果&lt;/p&gt; 
&lt;p&gt;模块度指标的核心思想：社区内部的连接应显著高于随机情况&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(Q = \frac{1}{2m} \sum_{i,j}\Big[A_{ij}-\frac{k_ik_j}{2m}\Big]\delta(c_i,c_j)\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;其中&lt;span class="math-tex"&gt;\(A_{ij}\)&lt;/span&gt;为邻接矩阵元素（节点&lt;span class="math-tex"&gt;\(i\)&lt;/span&gt;和&lt;span class="math-tex"&gt;\(j\)&lt;/span&gt;相连时为 1，否则为 0），&lt;span class="math-tex"&gt;\(k_i\)&lt;/span&gt;为节点&lt;span class="math-tex"&gt;\(i\)&lt;/span&gt;的度数，&lt;span class="math-tex"&gt;\(m\)&lt;/span&gt;为图中总边数&lt;span class="math-tex"&gt;\(m=\frac{1}{2}\sum_iki\)&lt;/span&gt;，&lt;span class="math-tex"&gt;\(c_i\)&lt;/span&gt;节点&lt;span class="math-tex"&gt;\(i\)&lt;/span&gt;所属的社区，&lt;span class="math-tex"&gt;\(\delta(c_i,c_j)\)&lt;/span&gt;若&lt;span class="math-tex"&gt;\(c_i=c_j\)&lt;/span&gt;则为 1，否则为 0。&lt;/p&gt; 
&lt;span id="OSC_h3_13"&gt;&lt;/span&gt; 
&lt;h3&gt;3.1.4 算法优缺点&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1. 计算高效：每轮迭代复杂度&lt;span class="math-tex"&gt;\(O(|E|)\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;2. 无需参数调优：完全基于图结构&lt;/p&gt; 
&lt;p&gt;3. 自然并行化：节点更新可并行执行&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;局限性：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1. 结果可能不稳定：受初始化顺序影响&lt;/p&gt; 
&lt;p&gt;2. 仅利用拓扑结构：忽略节点特征信息&lt;/p&gt; 
&lt;p&gt;3. 对稀疏图效果差：邻居信息不足时传播受限&lt;/p&gt; 
&lt;span id="OSC_h2_14"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.2 在营销活动场景的应用&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;在营销活动场景中，黑产在资源准备和任务执行阶段存在批量化的账号生成和活动行为，在挖掘结果中也经常发现存在暱称、行为序列等相似的聚集特征。&lt;/p&gt; 
&lt;span id="OSC_h3_15"&gt;&lt;/span&gt; 
&lt;h3&gt;3.2.1 构图&lt;/h3&gt; 
&lt;p&gt;以用户账号为节点，以暱称与活动点位行为序列为例，分别采用针对字符串、序列相似度的建边算法。&lt;/p&gt; 
&lt;p&gt;暱称相似度：两两计算用户暱称的编辑距离，编辑距离越小说明两个暱称越相似。&lt;/p&gt; 
&lt;p&gt;序列相似度：拼接用户活动点位（活动行为类型标记）-时间作为行为序列，将序列中的打点转换为词频矩阵，使用 MinHash 估计 Jaccard 相似度。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;实践细节&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1. 预处理，如做暱称长度分桶、异常用户筛选等，减少相似度计算量。&lt;/p&gt; 
&lt;p&gt;2. 使用局部敏感哈希（LSH）进行优化，减少搜索空间。&lt;/p&gt; 
&lt;p&gt;3. 可结合业务场景做相似度阈值过滤，缩减构图输入。&lt;/p&gt; 
&lt;span id="OSC_h3_16"&gt;&lt;/span&gt; 
&lt;h3&gt;3.2.2 团伙挖掘&lt;/h3&gt; 
&lt;p&gt;使用无监督的 LPA 算法进行团伙挖掘，设定团伙阈值、或结合业务场景添加其他特征进行作弊识别。&lt;/p&gt; 
&lt;p&gt;下表为实际应用中，通过用户行为序列相似挖掘出的一个团伙部分数据，其设备和地域并不聚集，但暱称可看出为批量操作。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片" src="https://oscimg.oschina.net/oscnet/up-cd8efca074b9009b15bde0cbb5f30c8cc46.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_17"&gt;&lt;/span&gt; 
&lt;h1&gt;04 Fraudar 算法及其应用&lt;/h1&gt; 
&lt;p&gt;在电商场景中，用户-店铺之间天然形成一种二部图的结构，二部图是指图中的节点有两类、边有一类，两类节点互相连接，每类节点本身之间没有连接。Fraudar 算法是一种适用于二部图结构的算法，下文详细介绍我们在电商场景的应用。&lt;/p&gt; 
&lt;span id="OSC_h2_18"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;4.1 Fraudar 算法原理&lt;/strong&gt;&lt;/h2&gt; 
&lt;span id="OSC_h3_19"&gt;&lt;/span&gt; 
&lt;h3&gt;4.1.1 全局可疑度度量&lt;/h3&gt; 
&lt;p&gt;Fraudar 定义了一个全局度量&lt;span class="math-tex"&gt;\(g(S) = \frac{f(S)}{|S|}\)&lt;/span&gt;，其中：&lt;br&gt; ● &lt;span class="math-tex"&gt;\(f(S) = f_v(S) + f_{\epsilon}(S)\)&lt;/span&gt;：子网络&lt;span class="math-tex"&gt;\(S\)&lt;/span&gt;中节点的可疑度之和（&lt;span class="math-tex"&gt;\(f_v\)&lt;/span&gt;）与边的可疑度之和（&lt;span class="math-tex"&gt;\(f_{\epsilon}\)&lt;/span&gt;）；&lt;br&gt; ● 假设在一个用户-商品二部图中，那么&lt;span class="math-tex"&gt;\(f_v(S)\)&lt;/span&gt;可以理解为用户或商品的独立可疑度，&lt;span class="math-tex"&gt;\(f_{\epsilon}(S)\)&lt;/span&gt;可以理解为用户在商品下的订单/评论的可疑度。&lt;br&gt; ● &lt;span class="math-tex"&gt;\(|S|\)&lt;/span&gt;：子网络的规模（节点数）。&lt;br&gt; &lt;span class="math-tex"&gt;\(g(S)\)&lt;/span&gt;表示一个网络的平均可疑度，满足以下四个属性：&lt;/p&gt; 
&lt;p&gt;1. （节点可疑度）当节点总数、边可疑度保持一致时，由较高可疑度的节点组成的网络比由较低可疑度节点组成的网络更可疑。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(|S| = |S'| \land f_{\epsilon}(S) = f_{\epsilon}(S') \land f_v(S) &amp;gt; f_v(S') \Rightarrow g(S) &amp;gt; g(S')\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;2. （边可疑度）其他条件不变，在网络中添加边会增加该网络的可疑度。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(e \notin \epsilon \Rightarrow g(S(v, \epsilon \cup \{e\})) &amp;gt; g(S(v, \epsilon))\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;3. （大小）假设节点和边的权重都相等，边的密度也相等，那么更大的网络比小的网络更可疑。其中边的密度$\rho(S)$定义为网络中的边数除以它可能的最大边数。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(|S| &amp;gt; |S'| \land S \supset S' \land \rho(S) = \rho(S') \Rightarrow g(S) &amp;gt; g(S')\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;4. (集中度) 较小的网络比相同总可疑度但规模更大的网络更可疑。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(|S| &amp;lt; |S'| \land f(S) = f(S') \Rightarrow g(S) &amp;gt; g(S')\)&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_20"&gt;&lt;/span&gt; 
&lt;h3&gt;4.1.2 抗伪装设计&lt;/h3&gt; 
&lt;p&gt;即使虚假账户添加大量正常连接（伪装），算法仍能通过识别局部密集子网络发现异常，因为伪装行为会导致整体网络稀疏化，而欺诈子网络仍保持高密度。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片" src="https://oscimg.oschina.net/oscnet/up-12ea6c9656a0117fc3f04e647772db3cd0d.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上图是虚假账户常用的伪装方法，假设为用户-商品网络，那么（a）刷单用户通过向正常商品随机下单伪装；（b）刷单用户通过向正常商品添加有偏的伪装；（c）刷单用户劫持一些正常账户。&lt;/p&gt; 
&lt;p&gt;算法使用了列权重作为边权的方式来抗伪装，即利用商品的边数来定义边权。在一个用户商品图中，算法先确定商品节点的数量，利用 1/log(商品节点边数+5) 确定边权 （边可疑度），然后按照边权汇总求取商品节点、用户节点的权重（节点可疑度）。&lt;/p&gt; 
&lt;span id="OSC_h3_21"&gt;&lt;/span&gt; 
&lt;h3&gt;4.1.3 算法实现流程&lt;/h3&gt; 
&lt;p&gt;利用列权重定义边权能够抵抗虚假账户向正常商品增加边的伪装，因为是往正常商品增加边，不会影响欺诈商品的边数，也即三种伪装方式的欺诈块仍然是高权重的/密集的。而如果使用行权重，那么一个用户通过向正常商品增加边，就可以稀释自己的欺诈边的可疑度，达到伪装的目的。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片" src="https://oscimg.oschina.net/oscnet/up-3f0893250a1894485d2ba5248e81434106c.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上图是 Fraudar 算法的步骤。迭代移除当前优先级最高的节点（可疑度贡献最低的节点），逐步缩小网络规模，直至所有节点被移除。每一步记录剩余子网络的全局可疑度&lt;span class="math-tex"&gt;\(g(S)\)&lt;/span&gt;。在所有迭代步骤中，&lt;span class="math-tex"&gt;\(g(S)\)&lt;/span&gt;值会先增大后减小，算法保留每一步的迭代结果，选择&lt;span class="math-tex"&gt;\(g(S)\)&lt;/span&gt;达到最大值的子网络作为最可疑的欺诈团伙。&lt;/p&gt; 
&lt;p&gt;由于遍历删除图中可疑度最低的节点是个&lt;span class="math-tex"&gt;\(O(|V|^2)\)&lt;/span&gt;的操作（迭代&lt;span class="math-tex"&gt;\(|V|\)&lt;/span&gt;次，每次找到可疑度最低的节点&lt;span class="math-tex"&gt;\(O(|V|)\)&lt;/span&gt;），因此算法引入了优先树（小顶堆），叶子节点对应图中的节点，父节点记录子节点中的最高优先级，以此实现快速访问和更新优先级。优化后算法需要迭代边数次，每次查找和更新节点优先级的复杂度变为&lt;span class="math-tex"&gt;\(O(log|V|)\)&lt;/span&gt;，算法的总时间复杂度为&lt;span class="math-tex"&gt;\(O(|\epsilon| log|V|)\)&lt;/span&gt;。&lt;/p&gt; 
&lt;p&gt;另外，在实际应用中，只获得可疑度最大的子图可能并不够用，可以在获取一个可疑度最大子图后将其中原始图中删除，然后再在剩余的图中获取次可疑的子图，循环往复得到多个可疑子图。&lt;/p&gt; 
&lt;span id="OSC_h3_22"&gt;&lt;/span&gt; 
&lt;h3&gt;4.1.4 优缺点及改进方向&lt;/h3&gt; 
&lt;p&gt;优势：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 抗伪装能力&lt;/strong&gt;&lt;/strong&gt;通过全局度量而非局部密度，算法能抵抗虚假账户添加正常连接的行为，即使部分节点被「污染」，仍能准确识别核心欺诈簇。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 高效性与可扩展性&lt;/strong&gt;&lt;/strong&gt;利用优先树结构优化节点移除操作，时间复杂度为&lt;span class="math-tex"&gt;\(O(|\epsilon| log |V|)\)&lt;/span&gt;，适用于大规模网络。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 实际应用场景&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;电商刷单检测&lt;/strong&gt;&lt;/strong&gt;：识别虚假评论形成的密集用户-商品子网络。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;社交网络反欺诈&lt;/strong&gt;&lt;/strong&gt;：检测伪卡交易或虚假关注关系。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;金融反洗钱&lt;/strong&gt;&lt;/strong&gt;：发现异常交易团伙。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_23"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;4.2 Fraudar 算法应用&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;img alt="图片" src="https://oscimg.oschina.net/oscnet/up-928573e7eca9a5c3ce222a41201de5f7d3a.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_24"&gt;&lt;/span&gt; 
&lt;h3&gt;4.2.1 构图与关系降噪&lt;/h3&gt; 
&lt;p&gt;实践中，我们利用用户-店铺的订单关系构建二部图，并且为了提升二部图中的风险浓度，对低风险店铺等做了剪枝实现关系的降噪，然后输入 Fraudar 算法挖掘异常子图。&lt;/p&gt; 
&lt;p&gt;原始的 Fraudar 算法只能挖掘出风险最高的一个子图，但实际业务中，一般不止一个作弊团伙，因此我们在每次运行 Fraudar 算法产生一个子图后，就将这个子图从原始图中裁剪掉，再次运行 Fraudar 算法得到次可疑的子图，即循环 Fraudar。通过这种方法，我们可以获得期望数量的异常子图。&lt;/p&gt; 
&lt;span id="OSC_h3_25"&gt;&lt;/span&gt; 
&lt;h3&gt;4.2.2 结合监督模型&lt;/h3&gt; 
&lt;p&gt;挖掘出的风险子图由用户和店铺构成，而实际业务的识别目标是订单，且风险子图中会掺杂少量正常用户的订单。为了进一步提升算法识别结果的准确率，我们将挖掘出的风险子图输入到 LR 模型进行精细判别。LR 模型使用用户、店铺的特征作为输入，异常订单为正样本、正常订单为负样本训练，最后在风险子图的用户、店铺的订单上区分出异常订单并落地到业务。&lt;/p&gt; 
&lt;span id="OSC_h1_26"&gt;&lt;/span&gt; 
&lt;h1&gt;05 GCN 模型及其应用&lt;/h1&gt; 
&lt;p&gt;上文提到 Fraudar 模型为了提升图的风险浓度做了剪枝降噪，这样提升算法精准的同时会损失一部分召回。并且 Fraudar 本身是无监督模型，还需要结合监督模型做精细化判别。因此我们尝试了端到端的 GCN 模型，提升召回的同时简化了识别链路。&lt;/p&gt; 
&lt;span id="OSC_h2_27"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;5.1 GCN 模型原理&lt;/strong&gt;&lt;/h2&gt; 
&lt;span id="OSC_h3_28"&gt;&lt;/span&gt; 
&lt;h3&gt;5.1.1 GCN 的核心思想：消息传递与聚合&lt;/h3&gt; 
&lt;p&gt;GCN 的核心是通过邻域聚合更新节点特征，其本质是让每个节点从邻居节点中提取有效信息：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 基础聚合公式：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(H^{(l+1)} = \sigma\left(\hat{D}^{-1/2} \hat{A} \hat{D}^{-1/2} H^{(l)} W^{(l)}\right)\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;其中：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span class="math-tex"&gt;\(\hat{A} = A + I\)&lt;/span&gt;：邻接矩阵加入自连接，防止节点自身信息丢失。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span class="math-tex"&gt;\(\hat{D}\)&lt;/span&gt;：度矩阵的对称归一化，解决节点度数差异导致的权重偏差。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span class="math-tex"&gt;\(W^{(l)}\)&lt;/span&gt;：可学习的权重矩阵，用于特征变换，即卷积核。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span class="math-tex"&gt;\(H^{(l)}\)&lt;/span&gt;：激活值，对于输入层可以理解成特征矩阵。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 关键设计：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;归一化：通过&lt;span class="math-tex"&gt;\(\hat{D}^{-1/2} \hat{A} \hat{D}^{-1/2}\)&lt;/span&gt;避免度数高的节点主导信息传播，使模型更稳定。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;非线性激活：如 ReLU 函数，增强模型的表达能力。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_29"&gt;&lt;/span&gt; 
&lt;h3&gt;5.1.2 数学视角：从拉普拉斯矩阵到频谱域卷积&lt;/h3&gt; 
&lt;p&gt;GCN 的理论基础源自图谱理论，通过将图信号转换到频域进行卷积操作，核心概念：&lt;/p&gt; 
&lt;p&gt;1. 拉普拉斯矩阵：定义为&lt;span class="math-tex"&gt;\(L = D - A\)&lt;/span&gt;，其特征分解&lt;span class="math-tex"&gt;\((L = U \Lambda U^T)\)&lt;/span&gt;将图结构映射到频域空间。&lt;/p&gt; 
&lt;p&gt;2. 图傅里叶变换：利用特征向量矩阵&lt;span class="math-tex"&gt;\(U\)&lt;/span&gt;对节点特征进行频域投影，卷积操作简化为频域的乘积。&lt;/p&gt; 
&lt;p&gt;a. 卷积定理：函数卷积的傅里叶变换是函数傅里叶变换的乘积，即对于函数&lt;span class="math-tex"&gt;\(f(t)\)&lt;/span&gt;与&lt;span class="math-tex"&gt;\(h(t)\)&lt;/span&gt;两者的卷积是其函数傅里叶变换乘积的逆变换。&lt;br&gt; b. 图傅里叶变换把图上定义的任意向量，表示成了拉普拉斯矩阵特征向量的线性组合。&lt;/p&gt; 
&lt;p&gt;3. 切比雪夫近似：为降低计算复杂度，GCN 采用一阶近似（仅考虑直接邻居），公式退化为经典聚合形式。&lt;br&gt; 第一代 GCN：将输入特征通过图傅里叶变换从空域映射到谱域，做卷积运算后再映射回空域。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(Y = U \cdot g_\theta(\Lambda) \cdot U^T X\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;第二代 GCN：利用切比雪夫多项式近似&lt;span class="math-tex"&gt;\(g_\theta(\Lambda)\)&lt;/span&gt;，避免&lt;span class="math-tex"&gt;\(O(N^3)\)&lt;/span&gt;复杂度的拉普拉斯矩阵分解。&lt;br&gt; 卷积核用 K 阶段切比雪夫多项式展开：&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(g_\theta(\Lambda) = \sum_{k=0}^K \theta_k T_k(\tilde{\Lambda})\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;最终 GCN 公式：&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(Y = \sum_{k=0}^K \theta_k T_k(\tilde{L}) X\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;第三代 GCN：只保留一阶切比雪夫多项式，并加入自环和归一化。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(H^{(l+1)} = \sigma \left( \hat{A} H^{(l)} W^{(l)} \right)\)&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_30"&gt;&lt;/span&gt; 
&lt;h3&gt;5.1.3 模型结构：轻量化与高效性&lt;/h3&gt; 
&lt;p&gt;GCN 的典型结构通常仅需 2-4 层即可完成高效学习，原因在于：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 层数限制&lt;/strong&gt;&lt;/strong&gt;：过深的网络会导致&lt;strong&gt;&lt;strong&gt;过平滑（图中同一连通分量的节点特征趋同）&lt;/strong&gt;&lt;/strong&gt;，因此实践中常用浅层架构。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 参数共享&lt;/strong&gt;&lt;/strong&gt;：每层共享权重矩阵，大幅减少参数量，适合处理大规模图数据。（相对于一个节点一个权重矩阵的全连接形式）&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 应用场景&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;节点分类&lt;/strong&gt;&lt;/strong&gt;（如电商刷单用户检测）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;图分类&lt;/strong&gt;&lt;/strong&gt;（如分子属性判断）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;链接预测&lt;/strong&gt;&lt;/strong&gt;（如推荐系统好友关系推断）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_31"&gt;&lt;/span&gt; 
&lt;h3&gt;5.1.4 GCN 的优缺点与改进方向&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 优势&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;天然融合图结构与节点特征，适合复杂关系建模。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;计算高效，支持稀疏矩阵优化。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 局限&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;过平滑问题&lt;/strong&gt;&lt;/strong&gt;：深层网络性能下降。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;静态图假设&lt;/strong&gt;&lt;/strong&gt;：难以处理动态变化的图结构。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_32"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;5.2 GCN 模型应用&lt;/strong&gt;&lt;/h2&gt; 
&lt;span id="OSC_h3_33"&gt;&lt;/span&gt; 
&lt;h3&gt;5.2.1 构图&lt;/h3&gt; 
&lt;p&gt;利用订单作为节点、订单之间的属性关联关系构建同构图。特征上采用用户、 店铺等风险属性刻画订单，异常订单为正样本、正常订单为负样本。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片" src="https://oscimg.oschina.net/oscnet/up-e413211583231cf96809e8be84b96306075.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_34"&gt;&lt;/span&gt; 
&lt;h3&gt;5.2.2 风险订单挖掘&lt;/h3&gt; 
&lt;p&gt;由于实际业务中有标签的风险订单、正常订单仅是全量订单的一小部分，因此我们采用了半监督的方式训练 GCN 模型，利用有标签的订单对无标签的订单进行推理。GCN 模型设计上针对的是静态图，应用中我们采用了随着时间窗口滚动构图的方式来适应动态变化的数据，滚动过程中排除了 GCN 模型本身推理的标签，防止对模型自身结果过拟合。&lt;/p&gt; 
&lt;p&gt;这里解释下，为什么我们不采用一个训练好的模型在线上不断的推理，而是滚动的训练推理。这是因为 GCN 模型从原理上属于直推式模型，通常的训练好一个模型后不断的对新数据推理的模型是归纳式模型。GCN 的直推式，本质上是因为卷积计算用到了图的拉普拉斯矩阵，图发生了变化，那么这个拉普拉斯矩阵也就发生变化，训练的模型也就失效了。&lt;/p&gt; 
&lt;p&gt;既然 GCN 是直推式的，这里又产生一个问题，为什么我们不使用归纳式模型呢？事实上，我们对比了 GraphSage 等模型在同样图结构、特征数据上的效果，在我们的场景中比 GCN 效果差，为了保证业务效果我们最终采用的是 GCN。&lt;/p&gt; 
&lt;span id="OSC_h1_35"&gt;&lt;/span&gt; 
&lt;h1&gt;06 总结和展望&lt;/h1&gt; 
&lt;p&gt;在风控反作弊的业务中，我们落地了 LPA、Fraudar、GCN 等算法并取得了良好的效果，未来我们希望做的更多。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 多模态数据融合：从单一图谱到全域关联&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;未来风控需整合图数据、时序数据（如交易频率）、文本数据（如聊天记录）等多模态信息。例如，通过图嵌入技术将设备、IP、地理位置等实体统一表征，构建全域风险画像。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 动态图实时计算：应对黑产快速演化&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;当前黑产通过「少边构造」（刻意断开部分关联）绕过静态图检测，需引入动态图算法（如时序 GNN）实时捕捉行为演变，并结合增量计算优化性能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 可解释性与对抗防御：提升算法可信度&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;探索可视化工具（如子图归因分析）解释 GCN 决策逻辑，并研发对抗训练技术抵御黑产对模型的逆向攻击。&lt;/p&gt; 
&lt;p&gt;图算法正从「辅助工具」升级为风控系统的核心引擎，而未来的挑战在于如何平衡技术效能、业务合规与用户体验。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4939618/blog/18627800</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/18627800</guid>
      <pubDate>Sat, 10 May 2025 07:21:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>jsoup 1.21.1 发布，Java HTML 解析器</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;jsoup 1.21.1 现已发布。此版本具有强大的全新节点选择功能，可让用户使用 CSS 选择器锁定特定的 DOM 节点（例如注释和文本节点）、通过新的 TagSet 回调系统进行动态标签自定义，并通过简化的属性转义增强了对突变 XSS 攻击的防御能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此版本还默认提供 HTTP/2 支持，并进行了多项 API 改进以提升开发者体验，并修复了多个 edge-case parsing 问题。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style="color:#192943"&gt;Changes&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul style="margin-left:0; margin-right:0"&gt; 
 &lt;li&gt;删除了以前弃用的方法。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fpull%2F2317" target="_blank"&gt;#2317&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;由于&lt;code&gt;:matchText&lt;/code&gt;pseduo-selector 对 DOM 的副作用，已将其弃用；改用新的&lt;code&gt;::textnode&lt;/code&gt;&lt;span style="color:#192943"&gt;&amp;nbsp;selector&lt;/span&gt;和 &lt;span style="color:#192943"&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fnodes%2FElement.html%23selectNodes%28java.lang.String%2Cjava.lang.Class%29" target="_blank"&gt;Element#selectNodes(String css, Class&amp;lt;T&amp;gt; type)&lt;/a&gt;&lt;/code&gt;方法。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fpull%2F2343" target="_blank"&gt;#2343&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;已弃用&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.Response.html%23bufferUp%28%29" target="_blank"&gt;Connection.Response#bufferUp()&lt;/a&gt;&lt;/code&gt;，以代替&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.Response.html%23readFully%28%29" target="_blank"&gt;Connection.Response#readFully()&lt;/a&gt;&lt;/code&gt;，后者会抛出一个已检查的 IOException。&lt;/li&gt; 
 &lt;li&gt;已弃用的内部方法&lt;span style="color:#192943"&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fhelper%2FValidate.html%23ensureNotNull%28java.lang.Object%29" target="_blank"&gt;Validate#ensureNotNull(Object)&lt;/a&gt;&lt;/code&gt;（由 t&lt;span style="color:#192943"&gt;yped&amp;nbsp;&lt;/span&gt;&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fhelper%2FValidate.html%23expectNotNull%28T%29" target="_blank"&gt;Validate#expectNotNull(T)&lt;/a&gt;&lt;/code&gt;替代）；来自 Attribute 和 Node 的受保护 HTML 附加程序。&lt;/li&gt; 
 &lt;li&gt;如果你碰巧正在使用任何已弃用的方法，官方建议立即借此机会迁移它们，因为它们将在未来的版本中被删除。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style="color:#192943"&gt;Improvements&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul style="margin-left:0; margin-right:0"&gt; 
 &lt;li&gt;增强了&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fselect%2FSelector.html" target="_blank"&gt;Selector&lt;/a&gt;&lt;/code&gt;，支持直接匹配注释和文本节点等节点。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fpull%2F2324" target="_blank"&gt;#2324&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;新增&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fparser%2FTagSet.html%23onNewTag%28java.util.function.Consumer%29" target="_blank"&gt;TagSet#onNewTag(Consumer&amp;lt;Tag&amp;gt; customizer)&lt;/a&gt;：注册一个回，当每个新的或克隆的标签插入到集合中时，都会调用该回调函数。该函数支持动态调整标签选项（例如，将所有自定义标签标记为自闭合，或将给定命名空间中的所有内容标记为保留空格）。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2330" target="_blank"&gt;#2330&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;使&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fparser%2FTokenQueue.html" target="_blank"&gt;TokenQueue&lt;/a&gt;&lt;/code&gt;和&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fparser%2FCharacterReader.html" target="_blank"&gt;CharacterReader&lt;/a&gt;&lt;/code&gt;可自动关闭，以确保它们将缓冲区释放回缓冲池，以供以后重用。&lt;/li&gt; 
 &lt;li&gt;添加了&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fselect%2FSelector.html%23evaluatorOf%28java.lang.String%29" target="_blank"&gt;Selector#evaluatorOf(String css)&lt;/a&gt;&lt;/code&gt;，以更清晰的方式从 CSS 查询中获取评估器。这是&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fselect%2FQueryParser.html%23parse%28java.lang.String%29" target="_blank"&gt;QueryParser.parse(String css)&lt;/a&gt;&lt;/code&gt;的别名。&lt;/li&gt; 
 &lt;li&gt;可以将外部命名空间（例如 SVG）中的自定义标签（通过&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fparser%2FTagSet.html" target="_blank"&gt;TagSet&lt;/a&gt;&lt;/code&gt;定义）配置为数据标签进行解析。&lt;/li&gt; 
 &lt;li&gt;添加&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fselect%2FNodeVisitor.html%23traverse%28org.jsoup.nodes.Node%29" target="_blank"&gt;NodeVisitor#traverse(Node)&lt;/a&gt;&lt;/code&gt;以简化节点遍历调用（相对于导入&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fselect%2FNodeTraversor.html" target="_blank"&gt;NodeTraversor&lt;/a&gt;&lt;/code&gt;）。&lt;/li&gt; 
 &lt;li&gt;更新了默认用户代理字符串以提高兼容性。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2341" target="_blank"&gt;#2341&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;HTML 解析器现在允许为已知标签自定义特定的文本数据类型 (Data、RcData)。（之前此功能仅支持自定义标签。）&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2326" target="_blank"&gt;#2326&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;添加了&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.Response.html%23readFully%28%29" target="_blank"&gt;Connection.Response#readFully()&lt;/a&gt;&lt;/code&gt;，以替代&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.Response.html%23bufferUp%28%29" target="_blank"&gt;Connection.Response#bufferUp()&lt;/a&gt;&lt;/code&gt;，并明确了 IOException。同样，添加&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.Response.html%23readBody%28%29" target="_blank"&gt;Connection.Response#readBody()&lt;/a&gt;&lt;/code&gt;代替&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.Response.html%23body%28%29" target="_blank"&gt;Connection.Response#body()&lt;/a&gt;&lt;/code&gt;。已弃用&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.Response.html%23bufferUp%28%29" target="_blank"&gt;Connection.Response#bufferUp()&lt;/a&gt;&lt;/code&gt;。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fpull%2F2327" target="_blank"&gt;#2327&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;序列化 HTML 时，属性中的&lt;code&gt;&amp;lt;&lt;/code&gt;和&lt;code&gt;&amp;gt;&lt;/code&gt;字符现在会被转义。这有助于防止一类变异 XSS 攻击。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fpull%2F2337" target="_blank"&gt;#2337&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;已更改&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.html" target="_blank"&gt;Connection&lt;/a&gt;&lt;/code&gt;为优先使用 JDK 的 HttpClient 而非 HttpUrlConnection（如果可用），以默认启用 HTTP/2 支持。用户可以通过禁用&lt;code&gt;-Djsoup.useHttpClient=false&lt;/code&gt;关闭该功能。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fpull%2F2340" target="_blank"&gt;#2340&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style="color:#192943"&gt;Bug Fixes&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul style="margin-left:0; margin-right:0"&gt; 
 &lt;li&gt;&lt;code&gt;svg&lt;/code&gt;外部上下文中的&lt;code&gt;script&lt;/code&gt;内容应被解析为脚本数据，而非文本。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2320" target="_blank"&gt;#2320&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fparser%2FTag.html%23isFormSubmittable%28%29" target="_blank"&gt;Tag#isFormSubmittable()&lt;/a&gt;&lt;/code&gt;正在更新标签的选项。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2323" target="_blank"&gt;#2323&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;当文本跟在块元素中的内联元素之后时，HTML pretty-printer&amp;nbsp;会错误地修剪空格。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2325" target="_blank"&gt;#2325&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;名称中带有连字符或其他非字母字符的自定义标签现在可以正确用作 Data 或 RcData 标签。它们的结束标签现在也能正确标记。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2332" target="_blank"&gt;#2332&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;克隆元素时，克隆将保留源的缓存子元素列表（如果有），这可能导致在修改克隆的子元素时出现不正确的结果。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2334" target="_blank"&gt;#2334&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;更新说明：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fnews%2Frelease-1.21.1" target="_blank"&gt;https://jsoup.org/news/release-1.21.1&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356839/jsoup-1-21-1-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356839/jsoup-1-21-1-released</guid>
      <pubDate>Sat, 10 May 2025 06:40:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>JDK 高版本特性总结与 ZGC 实践</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;blockquote&gt; 
 &lt;p&gt;美团信息安全技术团队核心服务升级 JDK 17 后，性能与稳定性大幅提升，机器成本降低了 10%。高版本 JDK 与 ZGC 技术令人惊艳，且 Java AI SDK 最低支持 JDK 17。本文总结了 JDK 17 的主要特性，然后重点分享了 JDK 17+ZGC 在安全领域的一些实践，希望能对大家有所帮助或启发。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-31d46a32fb835d661ed43d399296dac8a92.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;从一句调侃的话 "你发任你发，我用 Java 8！" 可以看出，在开发新项目时，Java 8 依然是大家的首选。美团 Java 8 服务占比超过 70%，可以说 Java 8 依然是绝对的主流。但是，我们在多个核心服务上遇到较多的性能问题，这些问题无法通过 JVM 参数微调来解决，为此我们对部分核心服务使用了 JDK 17，升级后服务性能和稳定性指标也得到巨大的飞跃，同时机器成本可以下降约 10%，升级 JDK 版本收益十分明显。另外，目前正处在 AI 时代的爆发期，Java AI SDK 的最小支持版本为 JDK 17，这让升级 JDK 版本变得更具价值。接下来，期望跟大家一起探索 JDK 高版本和 ZGC 技术的奥秘，开启优化 Java 应用的新征程。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;JDK 17 的主要特性&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;包含 JDK 9~17 等中间版本的特性。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;从 JDK 8 直接升级到 JDK 17，以下是需要重点关注的特性，这些特性对开发效率、代码风格、性能优化和安全性都有显著影响。&lt;/p&gt; 
&lt;h3&gt;1.1 语言特性[1]&lt;/h3&gt; 
&lt;h4&gt;1.1.1 局部变量类型推断&lt;/h4&gt; 
&lt;p&gt;使用 var 关键字来声明局部变量，而无需显式指定变量的类型。在 Java 17 中，可以使用局部变量类型推断的扩展来编写更简洁的代码。其他语言如 Golang 很早就支持了 var 变量。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// JDK8
String str = "Hello world";

// JDK17
var str = "Hello world";
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;需要注意的是，var 类型的局部变量仍然具有静态类型，一旦被推断出来，类型就会固定下来，并且不能重新赋值为不兼容的类型。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;1.1.2 密封类&lt;/h4&gt; 
&lt;p&gt;它允许我们将类或接口的继承限制为一组有限的子类。如果想将类或接口的继承限制为一组有限的子类时，这非常有用。在下面的示例中，可以看到我们如何使用 sealed 关键字将类的继承限制为一组有限的子类。我们可以通过在类的声明前加上 sealed 关键字来将该类声明为密封类。然后，可以使用 permits 关键字列出该密封类允许继承的子类。这些子类必须直接或间接地继承自密封类。这样，只有在这个预定义的子类中，才能继承该密封类。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;//使用 permits 关键字列出了允许继承的子类 Circle、Rectangle 和 Triangle
public sealed class Shape permits Circle, Rectangle, Triangle {
    // 省略实现
}

// 在与密封类相同的模块或包中，定义以下三个允许的子类， Circle，Square 和：Rectangle
public final class Circle extends Shape {
    public float radius;
}
 
public non-sealed class Square extends Shape {
   public double side;
}   
 
public sealed class Rectangle extends Shape permits FilledRectangle {
    public double length, width;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.1.3 Record 类&lt;/h4&gt; 
&lt;p&gt;Record 类的主要目的是提供一种更简洁、更安全的方式来定义不可变的数据载体类。它自动实现了常见的方法（如&lt;code&gt;equals()&lt;/code&gt;、&lt;code&gt;hashCode()&lt;/code&gt;、&lt;code&gt;toString()&lt;/code&gt;和构造函数），从而减少了样板代码。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;不可变性&lt;/strong&gt; ：Record 类的字段默认是&lt;code&gt;final&lt;/code&gt;的，因此 Record 类是不可变的。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;简洁性&lt;/strong&gt; ：Record 类自动提供了构造函数、&lt;code&gt;equals()&lt;/code&gt;、&lt;code&gt;hashCode()&lt;/code&gt;和&lt;code&gt;toString()&lt;/code&gt;方法，无需手动编写。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;组件访问&lt;/strong&gt; ：Record 类的字段可以通过&lt;code&gt;recordName.fieldName&lt;/code&gt;的方式直接访问。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;模式匹配&lt;/strong&gt; ：Record 类支持模式匹配（Pattern Matching），可以与&lt;code&gt;instanceof&lt;/code&gt;和&lt;code&gt;switch&lt;/code&gt;表达式结合使用。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Record 类的定义非常简单，只需要使用&lt;code&gt;record&lt;/code&gt;关键字，并声明字段类型和名称即可。例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// 这里有一个包含两个字段的记录类
record Rectangle(double length, double width) { }

// 这个简洁的矩形声明等同于以下普通类
public final class Rectangle {
    private final double length;
    private final double width;

    public Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }

    double length() { return this.length; }
    double width()  { return this.width; }

    // ...
    public boolean equals...
    public int hashCode...

    // ...
    public String toString() {...}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.1.4 switch 表达式优化&lt;/h4&gt; 
&lt;p&gt;在 Java 17 中使用 switch 表达式时，不必使用关键字 break 来跳出 switch 语句，或 return 在每个 switch case 上使用关键字来返回值；相反，我们可以返回整个 switch 表达式。这种增强的 switch 表达式使整体代码看起来更清晰，更易于阅读。switch 打印一周中某一天的字母数量的语句。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;JDK 8&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;public enum Day { SUNDAY, MONDAY, TUESDAY,
    WEDNESDAY, THURSDAY, FRIDAY, SATURDAY; }

// ...

    int numLetters = 0;
    Day day = Day.WEDNESDAY;
    switch (day) {
        case MONDAY:
        case FRIDAY:
        case SUNDAY:
            numLetters = 6;
            break;
        case TUESDAY:
            numLetters = 7;
            break;
        case THURSDAY:
        case SATURDAY:
            numLetters = 8;
            break;
        case WEDNESDAY:
            numLetters = 9;
            break;
        default:
            throw new IllegalStateException("Invalid day: " + day);
    }
    System.out.println(numLetters);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;JDK 17&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Day day = Day.WEDNESDAY;    
    System.out.println(
        switch (day) {
            case MONDAY, FRIDAY, SUNDAY -&amp;gt; 6;
            case TUESDAY                -&amp;gt; 7;
            case THURSDAY, SATURDAY     -&amp;gt; 8;
            case WEDNESDAY              -&amp;gt; 9;
            default -&amp;gt; throw new IllegalStateException("Invalid day: " + day);
        }
    ); 
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.1.5 文本块&lt;/h4&gt; 
&lt;p&gt;在不使用转义序列的情况下创建多行字符串。在创建 SQL 查询或 JSON 字符串时非常有用。在下面的示例中，可以看到使用文本块时代码看起来更加简洁。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// JDK8
String message = "'The time has come,' the Walrus said,\n" +
                 "'To talk of many things:\n" +
                 "Of shoes -- and ships -- and sealing-wax --\n" +
                 "Of cabbages -- and kings --\n" +
                 "And why the sea is boiling hot --\n" +
                 "And whether pigs have wings.'\n";

// 使用文本块可以消除大部分混乱：
String message = """
    'The time has come,' the Walrus said,
    'To talk of many things:
    Of shoes -- and ships -- and sealing-wax --
    Of cabbages -- and kings --
    And why the sea is boiling hot --
    And whether pigs have wings.'
    """;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;SQL 注解描述&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// JDK8    
@Select("select distinct ta.host_name from tb_agent_info tai, tb_agent ta where 1=1 " +
        "and ta.host_name=tai.host_name and ta.status=1 and ta.master=1 and tai.report_pid_count &amp;gt; 0")
Set&amp;lt;String&amp;gt; queryAllJavaHost();

// JDK17
@Select("""
    SELECT DISTINCT ta.host_name
    FROM tb_agent_info tai, tb_agent ta
    WHERE 1=1
      AND ta.host_name = tai.host_name
      AND ta.status = 1
      AND ta.master = 1
      AND tai.report_pid_count &amp;gt; 0
 """)
 Set&amp;lt;String&amp;gt; queryAllJavaHost2();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;可读性更强&lt;/strong&gt;：文本结构清晰可见，无需处理转义字符或字符串连接。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;减少错误&lt;/strong&gt;：不需要手动添加换行符（\n），降低了出错的可能性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;易于编辑&lt;/strong&gt;：可以直接复制粘贴格式化好的 JSON，而不需要额外的处理。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;保留缩进&lt;/strong&gt;：文本块会保留的缩进，使得其在 Java 代码中的呈现更加美观。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1.1.6 模式匹配 instanceof 优化&lt;/h4&gt; 
&lt;p&gt;它允许将 instanceof 运算符用作返回已转换对象的表达式。当我们使用嵌套的 if-else 语句时，这非常有用。在下面的示例中，可以看到我们如何使用 instanceof 运算符来捕获对象，而不是进行显式转换。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;JDK 8&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Object obj = ...;

if (obj instanceof String) {
    String str = (String) obj;
    int length = str.length();
    System.out.println("字符串长度：" + length);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;JDK 17&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Object obj = ...;

if (obj instanceof String str) {
    int length = str.length();
    System.out.println("字符串长度：" + length);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.1.7 NullPointerExceptions 的优化&lt;/h4&gt; 
&lt;p&gt;对象空指针在日常开发中遇到的比较多，一般代码报错只能精确的某一行，如果该行的代码比较复杂，涉及到多个对象，往往不能直接确定是哪一个对象为空。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;public class NpeDemo { 
  public static void main(String[] args) { 
    Address address=new Address();
    User user=new User();
    user.setAddress(address);
    log.info(user.getAddress().getCity().toLowerCase()); 
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;上面代码中的第 6 行链式调用，如果某一个环节出现空指针，将会抛出空指针的异常：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Exception in thread "main" java.lang.NullPointerException 
at NpeDemo.main(Main.java:6)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;使用 JDK 17&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Exception in thread "main" java.lang.NullPointerException: 
Cannot invoke "String.toLowerCase()" because the return value of "Address.getCity()" is null 
  at NpeDemo.main(Main.java:6)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.1.8 集合、Stream 和 Optional 的增强&lt;/h4&gt; 
&lt;p&gt;Java 在集合（Collections）、Stream API 和 Optional 类方面引入了许多增强功能。主要有：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;集合增强&lt;/strong&gt;：不可变集合： 引入了创建不可变集合的便捷方法，如 List.of()、Set.of() 和 Map.of()。这些方法用于快速创建不可变集合，减少了代码量并提高了安全性。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import java.util.*;

public class CollectionsDemo {
    public static void main(String[] args) {
        // 创建不可变 list
        List&amp;lt;String&amp;gt; list = List.of("Java", "Golang", "Python");
        // 创建不可变 set
        Set&amp;lt;String&amp;gt; set = Set.of("Java", "Golang", "Python");
        // 创建不可变 map
        Map&amp;lt;String, Integer&amp;gt; map = Map.of("Java", 1, "Golang", 2, "Python", 3);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;集合工厂方法&lt;/strong&gt;：Java 17 还引入了集合工厂方法，如 List.copyOf()、Set.copyOf() 和 Map.copyOf()，用于从现有集合创建不可变副本。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Stream API 增强&lt;/strong&gt; ：&lt;code&gt;takeWhile&lt;/code&gt;和&lt;code&gt;dropWhile&lt;/code&gt;：基于条件截取或跳过元素；&lt;code&gt;iterate&lt;/code&gt;：支持终止条件的迭代；&lt;code&gt;ofNullable&lt;/code&gt;：将可能为&lt;code&gt;null&lt;/code&gt;的值转换为 Stream。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Optional 增强&lt;/strong&gt; ： &lt;code&gt;ifPresentOrElse&lt;/code&gt;：值存在时执行操作，否则执行另一个操作；&lt;code&gt;or&lt;/code&gt;：在值不存在时提供替代值；&lt;code&gt;stream&lt;/code&gt;：将&lt;code&gt;Optional&lt;/code&gt;转换为 Stream。&lt;/p&gt; 
&lt;h3&gt;1.2 新 API 和工具&lt;/h3&gt; 
&lt;h4&gt;1.2.1 新的 HttpClient&lt;/h4&gt; 
&lt;p&gt;可以使用&lt;code&gt;HttpClient&lt;/code&gt;使用来发送请求并检索其响应。 &lt;code&gt;HttpClient&lt;/code&gt;可以通过&lt;code&gt;builder&lt;/code&gt;来创建。该&lt;code&gt;newBuilder&lt;/code&gt;方法返回一个构建器，用于创建默认&lt;code&gt;HttpClient&lt;/code&gt;实现的实例。该构建器可用于配置每个客户端的状态，例如：首选协议版本（HTTP/1.1 或 HTTP/2）、是否遵循重定向、代理、身份验证器等。 构建完成后，&lt;code&gt;HttpClient&lt;/code&gt;是不可变的，可用于发送多个请求。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// 同步示例
HttpClient client = HttpClient.newBuilder()
        .version(Version.HTTP_1_1)
        .followRedirects(Redirect.NORMAL)
        .connectTimeout(Duration.ofSeconds(20))
        .proxy(ProxySelector.of(new InetSocketAddress("proxy.example.com", 80)))
        .authenticator(Authenticator.getDefault())
        .build();
   HttpResponse&amp;lt;String&amp;gt; response = client.send(request, BodyHandlers.ofString());
   System.out.println(response.statusCode());
   System.out.println(response.body());  

// 异步示例
HttpRequest request = HttpRequest.newBuilder()
        .uri(URI.create("https://foo.com/"))
        .timeout(Duration.ofMinutes(2))
        .header("Content-Type", "application/json")
        .POST(BodyPublishers.ofFile(Paths.get("file.json")))
        .build();
   client.sendAsync(request, BodyHandlers.ofString())
        .thenApply(HttpResponse::body)
        .thenAccept(System.out::println);  
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;如果不希望引入三方依赖（三方依赖漏洞和 Bug 等需要经常升级），可以使用 JDK 提供的原生的 httpClient API，适用场景&lt;code&gt;中间件&lt;/code&gt;。&lt;/p&gt; 
&lt;h4&gt;1.2.2 打包工具 jpackage[2]&lt;/h4&gt; 
&lt;p&gt;该工具将以 Java 应用程序和 Java 运行时镜像作为输入，生成包含所有必要依赖项的 Java 应用程序镜像。它能够生成特定平台格式的原生软件包，例如 Windows 上的 exe 文件或 macOS 上的 dmg 文件。每种格式都必须在其运行的平台上构建，不支持跨平台。该工具将提供一些选项，允许以各种方式定制打包的应用程序。该工具最大特点是无需单独安装 JDK 环境，例如用 JDK17 写了一个 MCP Server 工具，直接打包为可执行文件安装即可，减少环境依赖安装。&lt;/p&gt; 
&lt;h4&gt;1.2.3 进程相关 API[3]&lt;/h4&gt; 
&lt;p&gt;进程管理功能得到了显著增强，&lt;code&gt;ProcessHandle&lt;/code&gt;提供了更强大的功能来创建、监控和管理本地进程。这些改进使得 Java 程序能够更灵活地与操作系统交互，同时提供了更详细的进程信息和更强大的生命周期管理功能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1.创建进程&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 Java 中，创建新进程通常使用&lt;code&gt;ProcessBuilder&lt;/code&gt;或&lt;code&gt;Runtime.getRuntime().exec()&lt;/code&gt;。而 Java 17 上&lt;code&gt;ProcessHandle&lt;/code&gt;提供了更强大的功能来管理这些进程。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ProcessBuilder pb = new ProcessBuilder("echo", "Hello World!");
Process p = pb.start();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2.监控进程&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;public class ProcessTest {

  // ...

  static public void startProcessesTest() throws IOException, InterruptedException {
    List&amp;lt;ProcessBuilder&amp;gt; greps = new ArrayList&amp;lt;&amp;gt;();
    greps.add(new ProcessBuilder("/bin/sh", "-c", "grep -c \"java\" *"));
    greps.add(new ProcessBuilder("/bin/sh", "-c", "grep -c \"Process\" *"));
    greps.add(new ProcessBuilder("/bin/sh", "-c", "grep -c \"onExit\" *"));
    ProcessTest.startSeveralProcesses (greps, ProcessTest::printGrepResults);      
    System.out.println("\nPress enter to continue ...\n");
    System.in.read();  
  }

  static void startSeveralProcesses (
    List&amp;lt;ProcessBuilder&amp;gt; pBList,
    Consumer&amp;lt;Process&amp;gt; onExitMethod)
    throws InterruptedException {
    System.out.println("Number of processes: " + pBList.size());
    pBList.stream().forEach(
      pb -&amp;gt; {
        try {
          Process p = pb.start();
          System.out.printf("Start %d, %s%n",
            p.pid(), p.info().commandLine().orElse("&amp;lt;na&amp;gt;"));
          p.onExit().thenAccept(onExitMethod);
        } catch (IOException e) {
          System.err.println("Exception caught");
          e.printStackTrace();
        }
      }
    );
  }
  
  static void printGrepResults(Process p) {
    System.out.printf("Exit %d, status %d%n%s%n%n",
      p.pid(), p.exitValue(), output(p.getInputStream()));
  }

  private static String output(InputStream inputStream) {
    String s = "";
    try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {
      s = br.lines().collect(Collectors.joining(System.getProperty("line.separator")));
    } catch (IOException e) {
      System.err.println("Caught IOException");
      e.printStackTrace();
    }
    return s;
  }

  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;3.获取进程信息&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;public static void getInfoTest() throws IOException {
        ProcessBuilder pb = new ProcessBuilder("echo", "Hello World!");
        String na = "&amp;lt;not available&amp;gt;";
        Process p = pb.start();
        ProcessHandle.Info info = p.info();
        System.out.printf("Process ID: %s%n", p.pid());
        System.out.printf("Command name: %s%n", info.command().orElse(na));
        System.out.printf("Command line: %s%n", info.commandLine().orElse(na));

        System.out.printf("Start time: %s%n",
            info.startInstant().map((Instant i) -&amp;gt; i
                .atZone(ZoneId.systemDefault()).toLocalDateTime().toString())
                .orElse(na));

        System.out.printf("Arguments: %s%n",
            info.arguments().map(
                (String[] a) -&amp;gt; Stream.of(a).collect(Collectors.joining(" ")))
                .orElse(na));

        System.out.printf("User: %s%n", info.user().orElse(na));
}

输出
Process ID: 18761
Command name: /usr/bin/echo
Command line: echo Hello World!
Start time: 2017-05-30T18:52:15.577
Arguments: &amp;lt;not available&amp;gt;
User: administrator
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.2.4 AI 工具最低版本为 JDK17&lt;/h4&gt; 
&lt;p&gt;最近火热的 AI 大模型工具，JDK 8 不再兼容，运行的最低版本为 JDK 17，例如 Spring AI 工具。&lt;/p&gt; 
&lt;h3&gt;1.3 性能优化与 Bug 修复&lt;/h3&gt; 
&lt;h4&gt;1.3.1 垃圾回收器改进 ZGC&lt;/h4&gt; 
&lt;p&gt;ZGC 作为新一代的垃圾回收器，主要目标：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;支持 TB 级内存&lt;/li&gt; 
 &lt;li&gt;停顿时间控制在 10ms 之内&lt;/li&gt; 
 &lt;li&gt;对程序吞吐量影响小于 15%&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;据官方测评数据，在内存为 128GB 的机器上，相比于 G1 来说，性能提高 30%，停顿时间减少 99%。&lt;/p&gt; 
&lt;h4&gt;1.3.2 NIO 重写与优化&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;支持 Unix-Domain 套接字&lt;/strong&gt;：在 JDK8 上如果想要使用 UDS，一般使用 Netty 或者开源的 Juds 库，JDK 17 支持了该功能，无需使用第三方库；&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;文件通道的优化&lt;/strong&gt;：可以将文件的某个区域直接映射到内存中，从而实现高效的读写操作。这种方式利用了操作系统的内存映射机制，减少了 I/O 操作的开销；&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;零拷贝支持&lt;/strong&gt;：允许数据直接从磁盘的一个位置复制到另一个位置，而无需经过用户态内存。这减少了数据在用户态和内核态之间的拷贝次数，从而显著提高了性能。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1.3.3 Java SDK 模块化设计&lt;/h4&gt; 
&lt;p&gt;JVM 的模块化是 Java 9 引入的一个重要特性，通过 Java Platform Module System (JPMS) 实现。这一特性旨在解决 Java 应用在可扩展性和维护上的问题，提供更高级别的封装和依赖管理机制。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;减少环境资源开销&lt;/strong&gt;：在 JDK 9 之前，每次启动 JVM 都要耗费至少 30MB 到 60MB 的内存空间，因为 JVM 需要加载整个 rt.jar。模块化允许 JVM 选择性地加载必需的模块，从而减少内存占用。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;提升开发效率和运行速度&lt;/strong&gt;：随着代码库的复杂性增加，开发效率和运行速度会受到影响。模块化通过规范化路径和依赖关系，使系统更安全、更高效。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;规范化路径及依赖关系&lt;/strong&gt;：JDK 9 之前，系统没有对不同 JAR 之间的依赖或敏感路径进行限制，导致所有 JAR 都可以被访问，暴露了安全问题。模块化通过管理模块间的依赖关系，隐藏不必要的模块，提高了安全性和空间利用率。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1.3.4 Java Agent 机制的 Attach Bug 修复&lt;/h4&gt; 
&lt;p&gt;Java Attach Socket 文件被删除后会导致 Java Agent 注入失败，在 JDK 8 上只能通过重启解决，而 JDK 17 会重新创建一个新的文件。&lt;/p&gt; 
&lt;h4&gt;1.3.5 弹性元空间[4]&lt;/h4&gt; 
&lt;p&gt;更及时地将未使用的元空间内存回收，减少元空间占用的内存。&lt;/p&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;JDK17+ZGC 在安全领域的实践&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;h3&gt;2.1 美团 JDK 的现状&lt;/h3&gt; 
&lt;p&gt;在美团信息安全部，JDK8（Oracle JDK8u201）依然是主流版本，其次是 Open JDK17，剩下为 Open JDK 11。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//741b89994a9cb115f8cfa24e32a8c514.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;2.2 ZGC 适用场景&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//63b1d3093a63550bd74f5489a0c68462.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;服务器成本压力大：服务器数量大于 100 台、单机配置大于 16C16G、Java 堆内存超过 16G 等。&lt;/li&gt; 
 &lt;li&gt;单机 CPU 高：峰值大约在 50%&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//33bd0463bac3ff69b941c53beb498801.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;性能火焰图中 GC 占比高&lt;/li&gt; 
 &lt;li&gt;高峰期故障雷达、监控大盘和服务日志等告警频繁&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2.3 ZGC 效果&lt;/h3&gt; 
&lt;h4&gt;2.3.1 性能压测效果&lt;/h4&gt; 
&lt;p&gt;在测试服务不同接口中，ZGC 在高 QPS 场景中收益较大（服务的 QPS 超过 1 万）：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;TP9999&lt;/strong&gt;：下降 220~380ms，下降幅度 18%~74%。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;TP999&lt;/strong&gt;：下降 60-125ms，下降幅度 10%~63%。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;TP99&lt;/strong&gt;：下降 3ms-20ms，下降幅度 0%-25%。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;一些重度依赖外部的接口中性能优化不大，原因是这些服务的响应时间瓶颈不是 GC，而是外部依赖的性能，在一些低 QPS 接口中对比不太明显。&lt;/p&gt; 
&lt;h4&gt;2.3.2 案例 1：智能决策系统（JDK 11+ZGC 升级到 JDK 17+ZGC）&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;峰值 cpu.busy 指标下降&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;升级前: 47.8565%&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//f718dd4d745bb448173cbe960ab78a8f.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;升级后: 41.4933%&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//6da00d3b35876b2f54ef3da8ce680972.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;系统长期运行时 TP9999 性能稳定&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;运行 15 天，JDK11 机器长时间不重启三九、四九线会逐渐升高，JDK 17 机器较为稳定。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//a82620036e2172e5eed80eede0944f36.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;服务失败率显著降低&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;UGC 集群升级效果：错误数量由峰值 6000 下降到 349。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//9d6499c78dd50077ab3a09c8b9a5fded.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;JVM 元空间使用降低&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//14e0e2f136345f99ea5521fe4de3de52.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;单机维度高峰期性能指标&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//1b3e2d500a2966651ec0ac9ecd2a5663.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h4&gt;2.3.3 案例 2：内容安全核心服务 (JDK 8+CMS 升级到 JDK 17+ZGC）&lt;/h4&gt; 
&lt;p&gt;该服务是内容安全的代理层，主要负责匹配请求的分发、辅助功能支撑（日志、监控、熔断）以及一些个性化业务需求。当前该服务 GC 是 CMS，该服务线上的 Young GC 平均耗时是 17ms，平均每分钟 GC 次数是 6 次，该服务接口平均响应时间是 2.6ms。&lt;/p&gt; 
&lt;p&gt;根据文章《&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.meituan.com%2F2017%2F12%2F29%2Fjvm-optimize.html" target="_blank"&gt;从实际案例聊聊 Java 应用的 GC 优化&lt;/a&gt;》中提供的计算方式，受到 Young GC 影响的请求占比是：&lt;/p&gt; 
&lt;p&gt;$$受 GC 影响请求占比 = \frac{N * \left ( GC 时间 + 接口响应时间 \right ) }{T} = \frac{6 * \left ( 17 + 2.6 \right ) }{60000} = 0.196%$$&lt;/p&gt; 
&lt;p&gt;即有 0.196% 的请求收到 GC 时间 0-17ms 不等的影响。其中收到 GC 停顿完整影响的请求占比：&lt;/p&gt; 
&lt;p&gt;$$受 GC 完整影响请求占比 = \frac{N * \left (接口响应时间 \right ) }{T} = \frac{6 * 2.6}{60000} = 0.026%$$&lt;/p&gt; 
&lt;p&gt;即其中有 0.026% 的请求受到完整的 GC 停顿时间影响，即耗时增加 17ms，可以大致理解为请求响应的 9999 线会因 GC 停顿而导致 17ms 的上涨。&lt;/p&gt; 
&lt;p&gt;根据 ZGC 的 STW 的耗时在毫秒甚至亚毫秒级别，因此理论上升级后服务的 9999 线可以降低 17ms 左右。在实际生产中，还会有 Full GC 的影响，会带来耗时的进一步提升，ZGC 在该部分可以避免 Full GC 带来的影响。&lt;/p&gt; 
&lt;p&gt;服务升级采用的是 Tomcat 9+JDK 17 的配置，录制线上流量进行压测，使用同样的流量对先前采用 CMS 垃圾回收的以及采用 ZGC 垃圾回收方式的同时进行压测。服务器配置均为 8C16G，800QPS 的压测，通过 2h 左右的压测，&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;分析接口耗时统计&lt;/strong&gt;：可得到以下数据，发现耗时均有明显下降，9999 线的下降量低于理论的 17ms，由于实际环境中其他因素的影响也基本符合预期。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//56b4d79c7da3403c9fde82947bf34f88.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;分析 CPU 和 JVM 占用情况：CPU 和 JVM 占用情况发现，CPU 占用在峰值处会提升 10% 左右，JVM 占用情况基本一致。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//5c62be54cdd72cde90060ce5bf8c78cc.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;2.4 ZGC 实现原理简介&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;更多详情，可参考《&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.meituan.com%2F2020%2F08%2F06%2Fnew-zgc-practice-in-meituan.html" target="_blank"&gt;新一代垃圾回收器 ZGC 的探索与实践&lt;/a&gt;》一文。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;2.4.1 CMS 与 G1 停顿时间瓶颈&lt;/h4&gt; 
&lt;p&gt;在介绍 ZGC 之前，首先回顾一下 CMS 和 G1 的 GC 过程以及停顿时间的瓶颈。CMS 新生代的 Young GC、G1 和 ZGC 都基于标记-复制算法，但算法具体实现的不同就导致了巨大的性能差异。&lt;/p&gt; 
&lt;p&gt;标记-复制算法应用在 CMS 新生代（ParNew 是 CMS 默认的新生代垃圾回收器）和 G1 垃圾回收器中。标记-复制算法可以分为三个阶段：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;标记阶段&lt;/strong&gt;，即从 GC Roots 集合开始，标记活跃对象；&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;转移阶段&lt;/strong&gt;，即把活跃对象复制到新的内存地址上；&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;重定位阶段&lt;/strong&gt;，因为转移导致对象的地址发生了变化，在重定位阶段，所有指向对象旧地址的指针都要调整到对象新的地址上。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下面以 G1 为例，通过 G1 中标记-复制算法过程（G1 的 Young GC 和 Mixed GC 均采用该算法），分析 G1 停顿耗时的主要瓶颈。G1 垃圾回收周期如下图所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//475b53df8e7a764b5b232636407dfcaa.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;G1 的混合回收过程可以分为标记阶段、清理阶段和复制阶段：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;标记阶段停顿分析&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;初始标记阶段&lt;/strong&gt;：初始标记阶段是指从根节点（GC Roots）出发标记全部直接子节点的过程，该阶段是 STW 的。由于 GC Roots 数量不多，通常该阶段耗时非常短。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;并发标记阶段&lt;/strong&gt;：并发标记阶段是指从 GC Roots 开始对堆中对象进行可达性分析，找出存活对象。该阶段是并发的，即应用线程和 GC 线程可以同时活动。并发标记耗时相对长很多，但因为不是 STW，所以我们不太关心该阶段耗时的长短。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;再标记阶段&lt;/strong&gt;：重新标记那些在并发标记阶段发生变化的对象。该阶段是 STW 的。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;清理阶段停顿分析&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;清理阶段清点出有存活对象的分区和没有存活对象的分区，该阶段不会清理垃圾对象，也不会执行存活对象的复制。该阶段是 STW 的。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;复制阶段停顿分析&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;复制算法中的转移阶段需要分配新内存和复制对象的成员变量。转移阶段是 STW 的，其中内存分配通常耗时非常短，但对象成员变量的复制耗时有可能较长，这是因为复制耗时与存活对象数量与对象复杂度成正比。对象越复杂，复制耗时越长。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;四个 STW 过程中，初始标记因为只标记 GC Roots，耗时较短。再标记因为对象数少，耗时也较短。清理阶段因为内存分区数量少，耗时也较短。转移阶段要处理所有存活的对象，耗时会较长。因此，G1 停顿时间的瓶颈主要是标记-复制中的转移阶段 STW。为什么转移阶段不能和标记阶段一样并发执行呢？主要是 G1 未能解决转移过程中准确定位对象地址的问题。&lt;/p&gt; 
&lt;h4&gt;2.4.2 ZGC 原理&lt;/h4&gt; 
&lt;p&gt;与 CMS 中的 ParNew 和 G1 类似，ZGC 也采用标记-复制算法，不过 ZGC 对该算法做了重大改进：&lt;strong&gt;ZGC 在标记、转移和重定位阶段几乎都是并发的&lt;/strong&gt;，这是 ZGC 实现停顿时间小于 10ms 目标的最关键原因。&lt;/p&gt; 
&lt;p&gt;ZGC 垃圾回收周期如下图所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//ff472f97b6b955687ebeabd32e9a9ee7.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;ZGC 只有三个 STW 阶段：&lt;strong&gt;初始标记，再标记，初始转移&lt;/strong&gt;。其中，初始标记和初始转移分别都只需要扫描所有 GC Roots，其处理时间和 GC Roots 的数量成正比，一般情况耗时非常短；再标记阶段 STW 时间很短，最多 1ms，超过 1ms 则再次进入并发标记阶段。即，ZGC 几乎所有暂停都只依赖于 GC Roots 集合大小，停顿时间不会随着堆的大小或者活跃对象的大小而增加。与 ZGC 对比，G1 的转移阶段完全 STW 的，且停顿时间随存活对象的大小增加而增加。&lt;/p&gt; 
&lt;h4&gt;2.4.3 主要特点&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;单代&lt;/strong&gt;：ZGC 没有分代，基于"大部分对象朝生夕死"的假设，没有 Young GC 的概念（这里仅指 JDK 17，JDK 21 支持分代回收，性能更高）。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;基于 Region&lt;/strong&gt;： G1 的每个 Region 大小是完全一样的，而 ZGC 的 Region 更灵活，其中大型 Region 大小不固定,可以动态变化，也不会被重分配，因为复制一个大对象代价太高。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;部分压缩&lt;/strong&gt;： 基于 Region，"标记-整理"，相对 CMS 压缩时间更短。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;支持 NUMA&lt;/strong&gt;： 对应有 UMA，每个 CPU 对应有一块内存，每个 CPU 优先访问这块内存。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//addc3e92b946e1d9221a8cb50eff2b94.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;染色指针&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//143532af9ea5101d47ac6e49dec629eb.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;以前的垃圾回收器的 GC 信息都保存在对象头中，ZGC 将 GC 信息保存在了染色指针上,无需进行对象访问就可以获得 GC 信息。这就是 ZGC 在标记和转移阶段速度更快的原因。Marked0、Marked1 和 Remapped 这三个虚拟内存作为 ZGC 的三个视图空间，在同一个时间点内只能有一个有效。ZGC 就是通过这三个视图空间的切换，来完成并发的垃圾回收。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;读屏障&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;读屏障，在标记和移动对象的阶段，每次从堆里对象的引用类型中读取一个指针的时候，都需要加上一个 Load Barriers。用于确定对象的引用地址是否满足条件，并作出相应动作。&lt;/p&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;JDK 17 升级实践过程&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;p&gt;主要分为三个阶段：安装部署、解决兼容性问题、性能测试与参数优化。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;如果公司的中间件大部分基于 JDK 8，工程代码编译可以基于 JDK 8，运行环境使用 JDK 17。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;3.1 安装与兼容性问题&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;1.主要的问题举例&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;JVM 运行的报错信息：module java.base does not "opens java.util.concurrent.locks" to unnamed module&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[ERROR] main JsonUtil Json parse failed
java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock java.util.concurrent.locks.ReentrantReadWriteLock.readerLock accessible: module java.base does not "opens java.util.concurrent.locks" to unnamed module @1ba9117e
at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
at com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(ClassUtil.java:939)
at com.fasterxml.jackson.databind.deser.impl.FieldProperty.fixAccess(FieldProperty.java:104)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2.原因&lt;/strong&gt;：JDK9 之后 Java API 使用了模块化设计方案，用户模块无法反射调用 Java 代码，需要使用开启对应模块访问权限（没有引入新的安全问题，相当于没有用模块隔离的功能）。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.解决方式&lt;/strong&gt;：　JVM 参数增加如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/java.math=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-opens java.base/java.security=ALL-UNNAMED --add-opens java.base/java.text=ALL-UNNAMED --add-opens java.base/java.time=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.util.concurrent=ALL-UNNAMED --add-opens java.base/java.util.concurrent.locks=ALL-UNNAMED --add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED --add-opens java.base/jdk.internal.access=ALL-UNNAMED --add-opens java.base/jdk.internal.misc=ALL-UNNAMED
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;其他软件等兼容性问题，根据自身服务报错，对应解决问题。&lt;/p&gt; 
&lt;h3&gt;3.2 性能压测&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;基准&lt;/strong&gt;： JDK 8+CMS&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;压测&lt;/strong&gt;：实验组和对照组压测后重启避免性能优化为结果影响并取平均值&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;指标监控&lt;/strong&gt;： 峰值 CPU、平均 CPU、TP9999、报错数量、GC 总时间和次数、JVM 堆内存和元空间变化等&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;其他&lt;/strong&gt;：性能火焰图&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3.3 JVM 参数&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;-Xmx18g -Xms18g 堆大小&lt;/li&gt; 
 &lt;li&gt;-XX:MaxDirectMemorySize=2G 直接内存&lt;/li&gt; 
 &lt;li&gt;-XX:+HeapDumpOnOutOfMemoryError 当 JVM 发生 OOM 时，自动生成 DUMP 文件。&lt;/li&gt; 
 &lt;li&gt;-XX:ReservedCodeCacheSize=256m -XX:InitialCodeCacheSize=256m 设置 codecache 大小，默认 128m&lt;/li&gt; 
 &lt;li&gt;-XX:+UseZGC 使用 ZGC&lt;/li&gt; 
 &lt;li&gt;-XX:ZAllocationSpikeTolerance=2 ZGC 触发自适应算法的修正系数，默认 2，数值越大，越早的触发 ZGC&lt;/li&gt; 
 &lt;li&gt;-XX:ZCollectionInterval=0 ZGC 的周期。默认值为 0，表示不需要触发垃圾回收。固定周期垃圾回收。ZGC 发生的最小时间间隔，单位秒&lt;/li&gt; 
 &lt;li&gt;-XX:ConcGCThreads=4 并发阶段的 GC 线程数，默认是总核数的 12.5%&lt;/li&gt; 
 &lt;li&gt;-XX:ZStatisticsInterval=10 控制统计信息输出的间隔，默认 10s&lt;/li&gt; 
 &lt;li&gt;-XX:ParallelGCThreads=16 并行工作线程数据，STW 阶段使用线程数，默认是总核数的 60%&lt;/li&gt; 
 &lt;li&gt;-Xlog:safepoint,classhisto*=trace,age*,gc*=info:file=/opt/logs/logs/gc-%t.log:time,tid,tags:filecount=5,filesize=50m' 设置 GC 日志中的内容、格式、位置以及每个日志的大小&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;本服务 prod 机器 16c，16g 成功运行起来的 JVM 参数（还在调整中，仅供参考）：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;-server -Xmx12g -Xms12g -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+UseZGC -XX:+UseDynamicNumberOfGCThreads -XX:ConcGCThreads=3 -XX:ParallelGCThreads=8 -XX:ZCollectionInterval=130 -XX:ZAllocationSpikeTolerance=1 -XX:MaxDirectMemorySize=460m -XX:MetaspaceSize=330m -XX:MaxMetaspaceSize=330m -XX:ReservedCodeCacheSize=256m -XX:InitialCodeCacheSize=256m -XX:+UseCountedLoopSafepoints -XX:+SafepointTimeout -XX:SafepointTimeoutDelay=500 -XX:GuaranteedSafepointInterval=0 -XX:+DisableExplicitGC -XX:+HeapDumpOnOutOfMemoryError -XX:ZStatisticsInterval=130 -XX:+PrintGCDetails -Xlog:safepoint,class+load=info,class+unload=info,classhisto*=trace,age*,gc*=info:file=/opt/logs/logs/gc-%t.log:time,tid,tags:filecount=5,filesize=50m --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/java.math=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-opens java.base/java.security=ALL-UNNAMED --add-opens java.base/java.text=ALL-UNNAMED --add-opens java.base/java.time=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.util.concurrent=ALL-UNNAMED --add-opens java.base/java.util.concurrent.locks=ALL-UNNAMED --add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED --add-opens java.base/jdk.internal.access=ALL-UNNAMED --add-opens java.base/jdk.internal.misc=ALL-UNNAMED --add-opens java.base/sun.reflect.generics.reflectiveObjects=ALL-UNNAMED --add-opens java.base/jdk.internal.perf=ALL-UNNAMED --add-opens java.base/java.instrument=ALL-UNNAMED --add-opens jdk.attach/sun.tools.attach=ALL-UNNAMED 
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;总结&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li&gt;ZGC 作为新一代垃圾回收器，各项性能指标都比较突出，升级之后，机器成本和性能收益明显；&lt;/li&gt; 
 &lt;li&gt;Spring AI SDK 支持的 JDK 版本最小为 17，升级到 JDK 17 能更好地拥抱 AI 新技术；&lt;/li&gt; 
 &lt;li&gt;直接从 JDK 8 升级到 JDK 17 跨度较大，需要解决的兼容性问题较多，如果公司的基础组件不支持 JDK 17，可以考虑先升级到 JDK 11 做一个过渡；&lt;/li&gt; 
 &lt;li&gt;如果在升级与实践的过程中遇到了一些问题，可以结合 AI 大模型来给出解决方案，帮助提高升级效率。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;注释&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[1] &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fen%2Fjava%2Fjavase%2F17%2Flanguage%2Fjava-language-changes-summary.html" target="_blank"&gt;语言特性&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[2] &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fen%2Fjava%2Fjavase%2F17%2Fdocs%2Fspecs%2Fman%2Fjpackage.html" target="_blank"&gt;打包工具 jpackage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[3] &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fen%2Fjava%2Fjavase%2F17%2Fcore%2Fprocess-api1.html" target="_blank"&gt;进程相关 API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[4] &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F387" target="_blank"&gt;弹性元空间&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[5] TP999：指的是 OctoService.TP999&lt;/li&gt; 
 &lt;li&gt;[6] &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmalloc.se%2Fblog%2Fzgc-jdk16" target="_blank"&gt;TP9999&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;阅读更多&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;| 关注「美团技术团队」微信公众号，在公众号菜单栏对话框回复【2024 年货】、【2023 年货】、【2022 年货】、【2021 年货】、【2020 年货】、【2019 年货】、【2018 年货】、【2017 年货】等关键词，可查看美团技术团队历年技术文章合集。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//99197a0cda5599168313884ca25c4fd6.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;| 本文系美团技术团队出品，著作权归属美团。欢迎出于分享和交流等非商业目的转载或使用本文内容，敬请注明 "内容转载自美团技术团队"。本文未经许可，不得进行商业性转载或者使用。任何商用行为，请发送邮件至 &lt;a href="https://www.oschina.net/action/GoToLink?url=mailto%3Atech%40meituan.com" target="_blank"&gt;tech@meituan.com&lt;/a&gt; 申请授权。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/meituantech/blog/18627969</link>
      <guid isPermaLink="false">https://my.oschina.net/meituantech/blog/18627969</guid>
      <pubDate>Sat, 10 May 2025 03:41:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>深圳程序员住车里，被质疑占用公共资源</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;今年 4 月，深圳程序员张运来因不租房住车里引发大量关注。报道称，张运来工作日期间天天睡车里，周五晚上再开车约 300 公里回阳江老家陪家人，周一一早再开车回深圳上班。利用公园的公共衞生间洗漱，每晚只需花费 6 元停车费，每日消费仅 100 元上下。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;通过住进车里，「三年多省了差不多十万块钱」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="416" src="https://oscimg.oschina.net/oscnet/up-a27f5633fe69b3d829c02629eb8616161d2.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;但该行为也引来了许多网友的质疑，认为他占用了公共资源。对此，红星新闻记者近日专访张运来。张运来解释称，自己并没有不文明行为。深圳湾晚上的空闲车位很多，他只是刚好利用空闲时间在那边过夜，最多也只是在公园的洗手间进行刷牙洗脸。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356800</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356800</guid>
      <pubDate>Sat, 10 May 2025 03:20:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>微软发布 WSL 2.6 作为首个开源版本更新</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微软于 5 月在 Build 开发者大会上宣布&lt;a href="https://www.oschina.net/news/350716/wsl-open-source"&gt;WSL 开源&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-68339f59c1f8585f833f947f24d261183ab.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;近日，微软发布了该项目的首个开源版本，同时带来了稳定性改进以及各种错误修复和其他增强功能。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;更新本地化字符串&lt;/li&gt; 
 &lt;li&gt;在 BasePath 不存在时不要抛出异常&lt;/li&gt; 
 &lt;li&gt;修复如果 URL 包含参数时分布下载失败&lt;/li&gt; 
 &lt;li&gt;修复与 systemd 用户会话的各种问题&lt;/li&gt; 
 &lt;li&gt;修复从 wslservice 调用 wslsettings 时崩溃&lt;/li&gt; 
 &lt;li&gt;在移动分布 VHD 时设置 MOVEFILE_WRITE_THROUGH&lt;/li&gt; 
 &lt;li&gt;解析 Windows 的'hosts'文件时丢弃 BOM 头&lt;/li&gt; 
 &lt;li&gt;在 mount() 因 EUCLEAN 失败时正确报告损坏的磁盘&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;WSL 2.6.0 版本的下载和更多详情查看&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2FWSL%2Freleases%2Ftag%2F2.6.0" target="_blank"&gt;https://github.com/microsoft/WSL/releases/tag/2.6.0&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356799/wsl-2-6-open-source</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356799/wsl-2-6-open-source</guid>
      <pubDate>Sat, 10 May 2025 03:20:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Spring Boot 3.4.7 正式发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Spring Boot 3.4.7 已正式&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspring.io%2Fblog%2F2025%2F06%2F19%2Fspring-boot-3-4-7-available-now" target="_blank"&gt;发布&lt;/a&gt;，这是 Spring Boot 3.4 系列的最新版本。&lt;/p&gt; 
&lt;p&gt;以下是该版本的一些更新内容：&lt;/p&gt; 
&lt;h3&gt;修复了多项错误&lt;/h3&gt; 
&lt;p&gt;共修复了 49 个错误，涵盖了应用的各个方面的潜在问题，可有效提高应用的稳定性和可靠性。&lt;/p&gt; 
&lt;h3&gt;改进了文档&lt;/h3&gt; 
&lt;p&gt;对相关文档进行了完善和更新，使开发者能够更准确地理解和使用 Spring Boot 的各项功能。&lt;/p&gt; 
&lt;h3&gt;依赖项升级&lt;/h3&gt; 
&lt;p&gt;更新了部分依赖项，让 Spring Boot 能够与更高版本的库和框架兼容，从而更好地利用新技术和新特性，提升整体性能和安全性。&lt;/p&gt; 
&lt;h3&gt;改进了可观测性&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;新增应用分组功能&lt;/strong&gt; ：引入 &lt;code&gt;spring.application.group&lt;/code&gt; 属性，可将属于同一业务单元或大型应用组的多个应用进行分组。当设置该属性时，其值还会包含在日志消息中，也可通过 &lt;code&gt;logging.include-application.group&lt;/code&gt; 属性控制此行为，便于对应用进行分类监控和管理。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;增强 OTLP 支持&lt;/strong&gt; ：支持通过 gRPC 传输 OTLP span，并引入新的配置属性 &lt;code&gt;management.otlp.tracing.transport&lt;/code&gt;，其默认值为 http。同时增加了对服务连接的支持，并新增了 &lt;code&gt;management.otlp.logs&lt;/code&gt; 下的属性，用于自动配置 OpenTelemetry 的 &lt;code&gt;OtlpHttpLogRecordExporter&lt;/code&gt; 和 &lt;code&gt;SdkLoggerProvider&lt;/code&gt;。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;对 Spring Integration 的支持升级&lt;/h3&gt; 
&lt;p&gt;升级了对 Spring Integration 的支持，现在它要求使用 Spring Integration 6.1.5 或更高版本。&lt;/p&gt; 
&lt;h3&gt;增强了对虚拟线程的支持&lt;/h3&gt; 
&lt;p&gt;如果启用了虚拟线程，那么 &lt;code&gt;OtlpMeterRegistry&lt;/code&gt; 和 Undertow web 服务器将使用虚拟线程，从而提高性能和可扩展性。&lt;/p&gt; 
&lt;h3&gt;Docker Compose 改进&lt;/h3&gt; 
&lt;p&gt;Docker Compose 支持多个 Docker Compose 配置文件，并新增了 &lt;code&gt;spring.docker.compose.start.arguments&lt;/code&gt;、&lt;code&gt;spring.docker.compose.stop.arguments&lt;/code&gt; 和 &lt;code&gt;spring.docker.compose.arguments&lt;/code&gt; 属性，分别用于在启动和停止服务时向 Docker Compose 子命令传递额外的命令行参数以及向 Docker Compose 传递参数。&lt;/p&gt; 
&lt;h3&gt;改进了测试容器相关功能&lt;/h3&gt; 
&lt;p&gt;新增了对 &lt;code&gt;org.testcontainers.kafka.KafkaContainer&lt;/code&gt; 的支持，同时也支持了 Redis Stack 和 Redis Stack Server，分别使用 &lt;code&gt;redis/redis-stack&lt;/code&gt; 和 &lt;code&gt;redis/redis-stack-server&lt;/code&gt; 镜像，还支持了 &lt;code&gt;org.testcontainers.grafana.LgtmStackContainer&lt;/code&gt; 和 Hazelcast 以及 OTLP 日志等。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356793/spring-boot-3-4-7</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356793/spring-boot-3-4-7</guid>
      <pubDate>Sat, 10 May 2025 03:06:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>罗永浩：3 个月后发布新 AI 产品，梁文锋建议我「靠嘴吃饭」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;罗永浩近日以「科技创业者」身份出席线下活动时表示，接下来两三个月内，他会发布一款与邮件等场景相关的提高工作效率的 AI 生产力软件工具。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;罗永浩表示，他认为用 AI 做图片生成、视频生成等技术比较惊艳。但他认为，具体到 Email 场景中，无论是雅虎还是谷歌，当前很多 Email 和 AI 结合的 AI 邮件产品体验做得不好。而且，很多相关的美国明星创业公司也融了不少钱，但产品做得很差。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;「然后我就感觉，我们可以把 AI 邮件这块做得更好，这个过程里我们虽然没有资源和钱去做预训练，但基于第一批的用户不断优化，我们是有信心的。而且我不担心这个事儿会被大公司覆盖掉。所以我们想要做得更好，被收费也是一个好的出路。」罗永浩表示，用 GUI 设计出来的工作流可以处理海量的邮件，如果利用 AI 把邮件产品优化的话，可以节省掉 2/3 以上的时间。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="335" src="https://oscimg.oschina.net/oscnet/up-ccc7ab26346d316e69b64e6f303f93227d1.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;谈到 AI 取代人类话题，罗永浩表示，「我经常被非科技行业的人问，AI 替代了人怎么办。为什么都问我呢？毕竟我也还没做出来 AI 产品」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;罗永浩说，AI 并不意味着所有人都会失业，但是每个人都要学会 AI，哪怕是在办公室里偷懒，也要把更多的时间用在 AI 上，否则被裁员而失业了，你们也不知道该怎么办。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;「我们以前招了几个人做战略分析，写 15000 字战略报告那种，现在用 AI 很快能写出来，15 分钟做到之前一周内的水平，质量还好。结果还没裁这几个人，他们就自己走了。去了哪里呢？去了那些对 AI 还不懂的传统公司。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此外，罗永浩也谈到 DeepSeek，他曾在去年见过一次梁文锋。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;罗永浩表示，他在酒店大堂里面和梁文锋见面攀谈，他认为梁文锋不像是老板，而像一名学生，甚至像是「没找到工作的博士后」，非常朴素。对于 AI 创业，梁文锋给罗永浩提了意见，问他为什么要做 AI，说他用嘴说话的能力是中国前三，就应该专注在用嘴这件事，建议去做个播客节目。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;「他说我没有别的意思，我说我只是觉得一个人在任何领域里，如果能做到全国前几名，应该要坚持做这件事。」因此，罗永浩现场表示，2025 今年底前，他将可能创立一个 AI 领域的播客节目。而梁文锋对于罗永浩做 AI 应用称「结果我不好判断」。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356791</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356791</guid>
      <pubDate>Sat, 10 May 2025 03:01:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>网信办整治 AI 滥用，3500 余款违规 AI 产品被处置</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;「清朗·整治 AI 技术滥用」专项行动于 2025 年 4 月启动。第一阶段累计处置违规小程序、应用程序、智能体等 AI 产品 3500 余款，清理违法违规信息 96 万余条，处置账号 3700 余个，各项工作取得积极进展。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="245" src="https://oscimg.oschina.net/oscnet/up-61fa8623f6acb022a23177614c906e2d7ea.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;其中，在处置违规 AI 产品方面，腾讯规范应用程序管理，提高准入门槛，优化巡查机制，驳回、处置违规小程序、应用程序等共计 570 余款。在清理违规 AI 产品教程和商品方面，微博通过策略识别、用户举报等多渠道审核，累计处置违规内容 4800 余条，并公布典型案例。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在加强训练语料管理方面，通义平台围绕数据生命周期建立安全管理体系，在数据采集、训练、使用等阶段加强训练语料管理。在强化安全管理措施方面，抖音建立「红蓝对抗」机制，模拟攻击案例，修复潜在安全漏洞，优化模型对虚假信息的识别能力。在落实内容标识要求方面，阿里、快手、稀宇等重点平台积极推进元数据隐式标识落地落实。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在防范重点领域安全风险方面，小红书在模型后置训练阶段输入专业领域数据，提升模型对医疗、金融、未成年人等重点领域问题的理解能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;据悉，下一步，中央网信办将聚焦 AI 造谣、低俗内容等 7 类突出问题，开展「清朗·整治 AI 技术滥用」专项行动第二阶段工作，构建技术监测体系，形成处置处罚规范，推动内容标识如期落地，形成长效工作机制，着力维护清朗网络生态，推动人工智能向善向好。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356788</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356788</guid>
      <pubDate>Sat, 10 May 2025 02:44:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
  </channel>
</rss>
