<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 简体中文</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 15 Sep 2025 07:42:40 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>阿里 Qoder 新升级，Repo Wiki 支持共享、编辑和导出</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;过去两年虽有众多 AI 编程工具涌现，但在真实软件开发中仍面临诸多挑战，如工程复杂度高、不确定性强和知识无沉淀传承等，现有工具难以满足开发需要，Qoder 正是为解决这些问题而推出。Qoder 是阿里巴巴发布的一款全新的 Agentic 编程平台，它集成了全球顶尖的编程模型，提供最强的上下文工程能力，可一次检索 10 万个代码文件。基于强大的编程智能体，可实现 AI 自主研发，大幅提升真实软件的开发效率。&lt;/p&gt; 
&lt;p&gt;据官方披露，Qoder 上线 5 天用户规模突破 10 万，&lt;strong&gt;其中 Repo Wiki 功能受到开发者广泛好评。&lt;/strong&gt; Repo Wiki 能基于代码自动为工程生成结构化的文档，涵盖工程架构、引用关系图谱、技术文档等内容，并持续跟踪代码与文档的变更，把知识沉淀为可复用的工程资产。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-6d025ed54bfc027f70832d07af8b3f21d11.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;举例来说，&lt;strong&gt;在新项目开始时&lt;/strong&gt; ，Repo Wiki 可以根据工程代码自动生成架构图谱、模块文档、API 手册以及依赖关系文档，帮助团队搭建工程框架，让成员快速了解工程结构。&lt;strong&gt;对于遗留系统研发&lt;/strong&gt; ，Repo Wiki 能快速分析工程结构，帮助开发者理解代码逻辑，解决遗留工程文档缺失或过时的问题。更为重要的是，&lt;strong&gt;工程中存在许多隐性知识&lt;/strong&gt; ，如设计决策考量、模块之间深层依赖关系等，这些知识通常散落在文档、邮件或口头交流中，难以被有效获取。Repo Wiki 能够将这些隐性知识显性化，以结构化的形式存储和呈现，方便开发者和智能体更全面、准确地理解代码工程。同时 Repo Wiki 对于&lt;strong&gt;软件代码的学习和传承&lt;/strong&gt;大有帮助，让开发者更快地理解陌生代码库，提高开发、学习和交接效率。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;今天， Repo Wiki 正式上线新功能：支持 Wiki 共享、编辑和导出。&lt;/strong&gt; 为了让知识更好地在团队中流转，Qoder 提供了 Wiki 共享能力。当用户在本地生成 Wiki 时，会自动在代码库中创建一个专属目录，只需将该目录推送至代码仓库，即可将生成的文档轻松共享给团队成员，实现协作共建。&lt;/p&gt; 
&lt;p&gt;此外，为确保 Wiki 与代码始终保持一致，Qoder 内置了自动检测机制。当发现代码变更导致文档滞后时，系统会及时提醒更新 Wiki。同时为了支持灵活自定义，开发者可以直接修改 Wiki 内容， 实现手工维护。&lt;/p&gt; 
&lt;p&gt;Qoder 目前在公测期，欢迎免费下载体验：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fqoder.com%2F" target="_blank"&gt;https://qoder.com/&lt;/a&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/3874284/blog/18691841</link>
      <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/18691841</guid>
      <pubDate>Mon, 15 Sep 2025 07:22:26 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>蚂蚁开源发布《大模型开源开发生态全景与趋势》报告</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;蚂蚁开源联合 Inclusion AI&amp;nbsp;发布了一份大模型开发生态下的开源项目全景图，和一份对生态趋势的洞察报告。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0915/151228_jv6C_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;https://antoss-landscape.my.canva.site/&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;据悉，这是报告 5 月首次发布后的 2.0 版本，不仅全面揭示了人工智能开源领域的发展现状和未来趋势，还纳入了百余天内开源社区的新动向，为行业发展提供重要参考。&lt;/p&gt; 
&lt;p&gt;报告最初起源于蚂蚁集团内部的技术趋势洞察，其中的数据全部来源于开源社区，通过对 GitHub 全平台项目的分析，使用 OpenRank 算法对项目进行筛选和排名。&lt;/p&gt; 
&lt;p&gt;具体来看，本次发布的大模型开源开发生态全景图共收录了分布在 22 个技术领域的 114 个最受关注的开源项目，分为 AI Agent 和 AI Infra 两大技术方向。&lt;/p&gt; 
&lt;p&gt;据报告显示，在参与全景图项目开发的约 36 万全球开发者中，统计到美国开发者占比 24%，中国开发者占比 18%，其次是印度（8%）、德国（6%）和英国（5%）。中美两国合计贡献超四成核心力量。更值得关注的是，在大模型开源策略上，中国厂商更倾向于开放权重的开源模型路线，而美国头部厂商则多采用闭源模式。&lt;/p&gt; 
&lt;p&gt;和全景图一同发布的还有一份详尽的洞察报告《从社区数据出发，再看大模型开源开发生态全景与趋势》。该报告指出，62% 的大模型生态下的开源项目诞生于 2022 年 10 月「GPT 时刻」之后，平均「年龄」仅 30 个月，这反映出 AI 开源生态的高速迭代特性。&lt;/p&gt; 
&lt;p&gt;另外，AI 编程工具的爆发式增长也成为了瞩目的趋势。数据显示，2025 年新出现的 Coding 工具平均获得 3 万以上开发者 Star 关注，其中 Gemini CLI 开源仅 3 个月，星标数已突破 6 万，成为增长最快的项目之一。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372284</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372284</guid>
      <pubDate>Mon, 15 Sep 2025 07:17:26 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>火山引擎发布命令行 AI Agent：veCLI</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;火山引擎&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F-UTsE4yDf2XRrbpP3TqOww" target="_blank"&gt;宣布&lt;/a&gt;推出命令行 AI Agent：veCLI，无缝集成豆包大模型 1.6，veCLI 通过将大模型 AI 能力整合到命令行界面，让开发者能够在熟悉的环境中获得智能助手的全方位支持，为开发者提供更智能、更高效的开发体验。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-4f862d843b686e87e6ce50cfbbc0423f4f4.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;https://www.volcengine.com/product/vecli&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-ccc5e33323ef3899349dbac8ac9ecd86ef8.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在技术架构上，veCLI 采用了「思考-行动」循环机制（ReAct），使 AI 助手能够像经验丰富的开发者一样进行多步推理和问题解决。veCLI 不仅和豆包大模型无缝调用，还集成了 Kimi-K2、DeepSeek v3.1 等三方模型供用户选择，确保在复杂开发场景下的准确理解和高效响应。同时，还集成火山引擎 MCP Server 等，帮助用户从构建到部署都更便捷调用火山引擎云服务，提升云上 AI 应用开发的效率。&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372278</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372278</guid>
      <pubDate>Mon, 15 Sep 2025 07:01:26 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>🔥真宠物小精灵？还能智能操控家具？</title>
      <description/>
      <link>https://www.oschina.net/ai-creation/details/2208</link>
      <guid isPermaLink="false">https://www.oschina.net/ai-creation/details/2208</guid>
      <pubDate>Mon, 15 Sep 2025 07:00:26 GMT</pubDate>
    </item>
    <item>
      <title>钉钉首款 AI 硬件 DingTalk A1 开售</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;9 月 15 日，钉钉首款 AI 硬件 DingTalk A1 旗舰版正式在天猫钉钉官方旗舰店开售。&lt;/p&gt; 
&lt;p&gt;DingTalk A1 旗舰版售价 799 元。购买产品的个人用户，将免费获得每月 1000 分钟语音转文字时长和 10GB 个人云存储空间。也可以选择开通 599 元/年的专业版和 1499 元/年尊享版会员，享受更长语音转文字时长和更多 AI 权益。消费者下单后，产品 48 小时内即可发货。&lt;/p&gt; 
&lt;p&gt;&lt;img height="300" src="https://oscimg.oschina.net/oscnet/up-63a507278e97aa6453ed75aa78203221ab0.jpg" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;DingTalk A1 厚度仅 3.8 毫米，只相当于几张信用卡厚度。通过磁吸在手机背面，能够记录电话及日常沟通语音。依靠钉钉 AI 听记能力，它能够把语音转换成文字，通过 AI 大模型总结分析。它还能实时翻译和多语种互译，特别是针对学习、跨国会议等场景。&lt;/p&gt; 
&lt;p&gt;DingTalk A1 还内置了 30 多种 AI 场景化分析模板，在开会、采访、心理咨询、法律咨询、客户拜访、面试问答等工作场合，都能用它对语音沟通进行总结分析划重点。&lt;/p&gt; 
&lt;p&gt;这款产品主要面向销售、人事、客服、律师、医生、教师等岗位和职业，能够帮助用户把沟通语音转化为经过整理提炼的线上知识，在钉钉上分享、协作，同时这些工作过程数据会沉淀为高质量资产，助力企业经营和个人积累。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372276</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372276</guid>
      <pubDate>Mon, 15 Sep 2025 07:00:26 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>经济日报：谷歌反垄断案折射搜索行业变革</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近日，谷歌在一场持续 5 年的反垄断案中取得阶段性胜利，成功避免被强制拆分。令人关注的是，在这场危机中「救局」的，恰恰是被视为谷歌竞争对手的 OpenAI 等生成式人工智能（AI）公司。谷歌一案的判决让业界更清晰地看到，AI 正在重塑全球搜索引擎市场的竞争格局。&lt;/p&gt; 
&lt;p&gt;多年来，美国政府持续加强对硅谷巨头的反垄断审查，谷歌正是其中的代表性企业。2020 年，美国司法部及多个州对谷歌提起反垄断诉讼，指控其搜索引擎年利润达数十亿美元、处理近 90% 的网络搜索请求，要求拆分谷歌相关业务。&lt;/p&gt; 
&lt;p&gt;经过长达 5 年的拉锯，美国联邦地区法院法官阿米特·梅塔近日裁定，谷歌无需剥离 Chrome 浏览器及安卓操作系统，只需向竞争对手开放更多搜索结果数据，并设立反垄断技术委员会以监督公司运营。这一相对宽松的判决提振了市场信心，消息公布后，谷歌盘后股价一度大涨超 8%。&lt;/p&gt; 
&lt;p&gt;谷歌能够避免被拆分，生成式 AI 意外成了「救命稻草」。梅塔在判决书中多次强调生成式 AI 的影响。判决书指出，越来越多的用户正通过 ChatGPT 等 AI 聊天机器人获取信息，而非传统搜索引擎。尽管生成式 AI 尚未完全取代谷歌搜索，但它显著加剧了搜索市场的竞争，削弱了对谷歌进行彻底拆分的必要性。&lt;/p&gt; 
&lt;p&gt;如判决书所言，当前已有一批 AI 浏览器新品发布，让沉寂多时的浏览器市场再次硝烟弥漫。例如，AI 搜索引擎的独角兽 Perplexity 已正式发布了自己的浏览器 Comet。几乎同一时间，OpenAI 也宣布在未来几周发布新款 AI 浏览器。这些 AI 搜索并非传统搜索引擎的简单升级，而是借助深度学习与自然语言处理技术，重新定义了信息获取的方式。Perplexity 联合创始人阿拉温德·斯里尼瓦斯将其称为「答案引擎」——当用户提出问题，它会给出一个简洁明确的答案，且所有的答案都标明了来源，给出系列联想问题，可以让用户连续追问，进一步拓展和延伸相关话题。&lt;/p&gt; 
&lt;p&gt;但当前 AI 搜索完全取代传统搜索引擎仍不现实。多年来，传统搜索巨头已构建起坚实的「护城河」。以谷歌为例，Chrome 浏览器背后有 YouTube、Gmail、地图等生态服务支持。当用户使用 Chrome 登录谷歌账号，就能同步这些应用中的书签、密码、浏览记录等，换个电脑也能无缝衔接。这种生态黏性是新兴 AI 浏览器一时难以突破的。&lt;/p&gt; 
&lt;p&gt;传统搜索引擎还掌握着生成式 AI 发展的关键资源——算力与数据。例如，OpenAI 训练 ChatGPT 需依赖庞大算力，而谷歌云位居全球前三；模型优化需要海量数据，其中大量仍存储于谷歌服务器中。而这些 AI 公司若想跳过这一枷锁，自建数据索引库，不仅技术门槛高，也意味着巨额成本。&lt;/p&gt; 
&lt;p&gt;无论如何，随着 AI 技术不断发展，全球搜索业务已站在转型的十字路口。新兴 AI 搜索能否突破成本与技术壁垒，开辟新格局？传统搜索巨头又能否摆脱固有商业模式的束缚，成功实现 AI 化转型？答案尚未揭晓。可以确定的是，AI 不再只是技术革命的推动者，也正在成为塑造市场竞争与监管走向的关键力量。谷歌一案的判决，被业内称为「本世纪科技行业最具深远影响的法院裁决之一」，将为同样面临反垄断诉讼的 Meta、亚马逊和苹果提供重要参考和借鉴。（经济日报，杨啸林）&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372272</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372272</guid>
      <pubDate>Mon, 15 Sep 2025 06:51:26 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>「Google Gemini」登顶 App Store 免费榜榜首</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;谷歌旗下 AI 应用「Google Gemini」在美国 App Store 免费榜单上跃居第一，成为 iPhone 上最受欢迎的免费应用。这一成绩部分得益于广受欢迎的 Nano Banana 图像编辑模型。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-f32d258f67a978346ec2dba1fa5857c6603.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;截至周五晚，Gemini 位列美国 App Store 免费榜第一位，OpenAI 的 ChatGPT 排名第二，社交应用 Threads 位居第三。Google 搜索 App 排在第六，Google 地图第八，Chrome 第十三，Gmail 则排在第二十一。&lt;/p&gt; 
&lt;p&gt;在加拿大与英国市场，Gemini 的表现同样强劲，均居榜单第二位。&lt;/p&gt; 
&lt;p&gt;自 8 月 26 日发布至 9 月 9 日短短两周，Gemini 应用已新增 2300 万用户，Nano Banana 图像编辑工具在此期间被使用超 5 亿次。该编辑模型因能精准保持人物特征一致性而走红，支持多张照片混合生成、风格迁移及对话化编辑等功能。&lt;/p&gt; 
&lt;p&gt;所有免费用户每天可生成或编辑最多 100 张图片，付费订阅用户（每月 19.99 美元起）每日额度则提升至 1000 张。&lt;/p&gt; 
&lt;p&gt;据了解，Gemini 的火爆也带动了谷歌在 iOS 生态中的各类应用整体排名上升，显示出生成式 AI 工具在移动端继续受到强烈关注。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372266</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372266</guid>
      <pubDate>Sun, 14 Sep 2025 06:36:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>苹果 AI 领域人事调整：前 Siri 高管 Robby Walker 将于 10 月底离职</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;据路透社报道，苹果公司在人工智能（AI）领域再迎人事变动。消息披露，前 Siri 高管、曾负责「Apple Intelligence」版本 Siri 研发的 Robby Walker，计划于 2025 年 10 月底正式离开苹果。&lt;/p&gt; 
&lt;p&gt;&lt;img height="248" src="https://oscimg.oschina.net/oscnet/up-48a88ba0ad3262605a5f5cbf1737efcb81c.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;公开信息显示，Walker 在苹果 AI 业务推进中曾承担重要角色。此前，在「Apple Intelligence」版 Siri 项目出现延期后，他曾在内部会议中以「挑战游泳纪录的失败尝试」作比，客观评价团队工作——既坦诚项目未达预期目标，也肯定了团队在研发过程中取得的阶段性成果。同时，Walker 还提及，尽管部分竞争对手已推出质量相对较低的类似功能，但苹果始终坚持更高的质量标准，不急于推出未达标的产品。&lt;/p&gt; 
&lt;p&gt;项目调整后，Walker 转岗至苹果「Answers」团队，牵头研发基于人工智能技术的搜索工具。目前，彭博社等多方信息显示，「Answers」项目仍在正常推进中，预计将于 2026 年正式上线，此次 Walker 离职暂未对该项目整体进展造成公开披露的影响。&lt;/p&gt; 
&lt;p&gt;值得关注的是，此次人事变动并非苹果近期在 Siri 相关业务上的唯一调整。此前，苹果已对 Siri 项目管理权进行调整，将其从 AI 主管 John Giannandrea 手中移交至曾主导打造 Vision Pro 及 visionOS 的 Mike Rockwell。按照当前规划，新版 Siri 最早有望在 2026 年春季与用户见面。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372246</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372246</guid>
      <pubDate>Sun, 14 Sep 2025 03:41:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>主流 AI 聊天机器人传播虚假信息概率翻倍，高达 35%</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Newsguard 最近发布了一项研究，显示截至 2023 年 8 月，十大生成式 AI 工具在处理实时新闻时，有高达 35% 的概率传播虚假信息。相比去年 8 月的 18%，这一数字几乎翻了一番。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;研究指出，这一虚假信息传播率的显著上升与 AI 聊天机器人引入实时网络搜索功能密切相关。随着拒绝回答用户问题的比例从 31% 降至 0%，AI 开始接入一个充满不实信息的网络生态系统，导致虚假信息的传播现象愈加严重。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;该研究发现，许多不良行为者利用 AI 的特性故意散布虚假信息。去年，Newsguard 就曾标记出 966 个以 16 种语言运营的 AI 生成新闻网站，这些网站通过模仿正规媒体的名称，如 「iBusiness Day」，向公众传播假消息。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;具体来看，Inflection 公司的 AI 模型传播虚假信息的概率最高，达到了 56.67%;而 Perplexity 模型也不容乐观，出错率为 46.67%。ChatGPT 和 Meta 的 AI 模型则各自为 40%，而 Copilot（微软必应聊天）和 Mistral 的虚假信息传播率为 36.67%。表现最好的两款模型是 Claude 和 Gemini，错误率分别为 10% 和 16.67%。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;值得注意的是，Perplexity 的表现大幅下滑，去年 8 月时该模型对虚假信息的揭穿率达到 100%，然而到今年 8 月，这一概率接近 50%。引入网络搜索功能的初衷是解决 AI 回答内容过时的问题，但却引发了新的挑战。这些聊天机器人开始从不可靠的来源获取信息，使得用户在判断事实与假消息时愈发困难。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Newsguard 指出，早期的 AI 通过拒绝回答问题来避免传播虚假信息的风险，但如今网络生态中虚假信息泛滥，辨别真伪愈发复杂。OpenAI 也承认，当前的语言模型总是可能产生 「幻觉内容」，即虚假或无根据的信息。该公司表示正在研发新技术，力图让未来的模型能够更好地提示不确定性，而不是笃定地生成虚假信息。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372244</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372244</guid>
      <pubDate>Sun, 14 Sep 2025 03:27:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>VS 2026 最佳配置提升为 64GB 内存 16 核 CPU，微软工程师给出原因：方便程序员申请高配机</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/news/371552/visual-studio-2026-insiders" target="_blank"&gt;微软最近推出了 Visual Studio 2026 的预览版&lt;/a&gt;，在硬件建议上推荐使用 64GB 内存和 16 核 CPU。在此前版本如 Visual Studio 2019 和 2022 中，硬件要求均为至少 4 核处理器和 4GB 内存，而到了 2026 版本，微软则专门建议 64GB 内存和 16 核处理器。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0915/111252_72AB_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;对此 Visual Studio 团队的性能架构师 David Kean 解释了这一变化背后的原因，简单来说就是一些公司看到最低内存要求 8G，就只肯给员工配 8G 的机器，干脆写个 64G 让工程师更方便申请高配机。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-9b11c480f0cc1c4434d99db8eb9508f39cf.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;他指出，Visual Studio 2026 的最低和推荐配置与 2022 和 2019 版本相同，但新版本在相同硬件上的性能将显著提升，新版本使用更少的资源，并在需要时更好地利用可用资源。&lt;/p&gt; 
&lt;p&gt;David Kean 表示「我经常和开发者交流，他们的 IT 部门通常会严格按照最低/推荐配置来配备硬件。」因此他的目标之一就是为开发者提供依据，让他们能够与 IT 部门、经理或决策者交涉，争取到更好更快的硬件。&lt;/p&gt; 
&lt;p&gt;他提到，虽然 Visual Studio 可以在低配置上运行，但根据工作负载、项目大小或已安装的扩展，少于 8GB 内存可能会导致体验不佳。他还表示，64GB 内存和 16 核 CPU 的配置在硬件成本与性能之间达到了最佳平衡，如果使用更高配置，如 128GB 内存和 32 核 CPU，效果会更好。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372242</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372242</guid>
      <pubDate>Sun, 14 Sep 2025 03:17:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>0 基础带你精通 Java 对象序列化 -- 以 Hessian 为例</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
&lt;h1&gt;一、概述&lt;/h1&gt; 
&lt;p&gt;在高级编程语言的世界中，开发者始终与**【object/struct】**这类高度抽象的数据结构打交道。然而在分布式架构下，任何服务进程都不是数据孤岛——跨进程数据交换是必然需求。&lt;/p&gt; 
&lt;p&gt;以 Java 为例，业务逻辑的输入输出都是**【object】&lt;strong&gt;。但在 RPC 场景中，这些对象必须经由网络传输。这里出现了一个根本性矛盾：网络介质 (网线/光纤) 对面向对象编程 (OOP) 一无所知，它们只会用光和电忠实地传输&lt;/strong&gt;扁平化**的字节流 (&lt;strong&gt;byte[]&lt;/strong&gt;)。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//a0cedde6f9c31265f57bce8e896481f6.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;软件工程经典的分层理论驱使我们去添加一个&lt;strong&gt;转换层&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//93923be5e7dee6b3519f0fbab774a8b5.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//8a35581e9f80f33e26df7eed4c78df53.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;我们需要有个工具或者组件来协助进行**【object】&lt;strong&gt;和&lt;/strong&gt;【byte[]】&lt;strong&gt;之间的&lt;/strong&gt;双向转换**。这个过程包含两个对称的流程：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;【&lt;strong&gt;object&lt;/strong&gt;】-&amp;gt;【&lt;strong&gt;byte[]&lt;/strong&gt;】：业界一般称为&lt;strong&gt;序列化/serialize&lt;/strong&gt;，但是那个单词念起来很拗口，本文我们都叫它【编码/&lt;strong&gt;encode&lt;/strong&gt;】好了。&lt;/li&gt; 
 &lt;li&gt;【&lt;strong&gt;byte[]&lt;/strong&gt;】-&amp;gt;【&lt;strong&gt;object&lt;/strong&gt;】：业界一般称为&lt;strong&gt;反序列化/deserialize&lt;/strong&gt;，但是那个单词念起来很拗口，本文我们都叫它【解码/&lt;strong&gt;decode&lt;/strong&gt;】好了。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Hessian 作为 Java 生态中久经考验的对象编解码器，相较于同类产品具有以下两大核心优势：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;深度 Java 生态适配&lt;/strong&gt;：与 JSON、Protobuf 等语言中立的通用协议不同，Hessian 专为 Java 深度优化，对泛型、多态等&lt;strong&gt;Java 特有语言特性提供原生支持&lt;/strong&gt;。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;高效二进制协议&lt;/strong&gt;：相较 JSON 等文本协议，Hessian 采用精心设计的二进制编码方案，在编解码效率和数据压缩率方面表现更优。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;需要强调的是，软件工程没有银弹——业务场景的差异决定了编解码器的选择必然需要权衡取舍。但就 Java RPC 而言，Hessian 应该是经过广泛实践验证的稳健选择。&lt;/p&gt; 
&lt;p&gt;本文将系统解析 Hessian 的编码流程，重点揭示其实现【&lt;strong&gt;object&lt;/strong&gt;】-&amp;gt;【&lt;strong&gt;byte[]&lt;/strong&gt;】转换的核心机制。&lt;/p&gt; 
&lt;span id="OSC_h1_2"&gt;&lt;/span&gt; 
&lt;h1&gt;二、基础编码原理&lt;/h1&gt; 
&lt;p&gt;对象编码过程主要包含如下两大核心：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;对象图遍历&lt;/strong&gt;：遍历高级数据结构&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;通过反射或元编程技术遍历对象图（Object Graph）。&lt;/li&gt; 
   &lt;li&gt;是同类产品的通用逻辑，不管 jackson、fastjson、hessian 都需要用&lt;strong&gt;不同的方式做类似的事情。&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;编码格式&lt;/strong&gt;：将高级数据结构按协议拍平放到&lt;strong&gt;byte[]&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;同类产品百家争鸣，各有各的思路。&lt;/li&gt; 
   &lt;li&gt;是同类产品的竞技场，&lt;strong&gt;各个产品在这里体现差异化的竞争力&lt;/strong&gt;。&lt;/li&gt; 
   &lt;li&gt;设计权衡包括： 
    &lt;ul&gt; 
     &lt;li&gt;二进制效率 vs 可读性（如 Hessian 二进制 vs JSON 文本）&lt;/li&gt; 
     &lt;li&gt;编码紧凑性 vs 扩展灵活性&lt;/li&gt; 
     &lt;li&gt;跨语言支持 vs 语言特性深度优化&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;对象图遍历&lt;/strong&gt;决定了编码能力的下限 (能否正确处理对象结构)，而&lt;strong&gt;编码格式&lt;/strong&gt;决定了编码能力的上限 (传输效率、兼容性等)。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;对象图遍历&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//be559029d05ec34091e74cb6e6141e9a.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;对象图遍历的本质是&lt;strong&gt;按深度优先&lt;/strong&gt;进行&lt;strong&gt;对象属性导航&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;举个例子：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//b10fb4203811541f2408894498531740.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;宏观来看，A 类型的对象其实是&lt;strong&gt;一棵树 (或图)&lt;/strong&gt;，如果脑补不出来的话，我给你画个图：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//3c6628413a7422c5be5773cef2612c75.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;可以看到这棵树的叶子结点都一定是 Java 内置的基本数据类型。换句话说，Java 的&lt;strong&gt;8 种基础数据类型&lt;/strong&gt;和他们的&lt;strong&gt;数组变体&lt;/strong&gt;，支撑了 Java 丰富的预定义/自定义数据结构。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;八股文：Java 的 8 种基础数据类型是哪些？String 算不算基础数据类型？&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;编码的本质就是深度优先的遍历这棵树，拍平它，然后放到**byte[]**里。&lt;/p&gt; 
&lt;p&gt;我举个例子吧。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;伪代码&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;为降低伪代码复杂度，我们假设 Java 只有 1 种基础数据类型 int，也就是说 Java 里只有 int 和只包含 int 字段的自定义 POJO。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;我们定义 POJO 指的是用于传输、存储使用的简单 Java Bean 或者常说的 DTO。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;从某种意义上来说，Integer 也是基于 int 封装的自定义 POJO。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;字节流抽象&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;我们使用标准库里的 java.io.DataOutput 来进行伪代码说理，这个类提供了一些语义化的编码 function。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//239f91dfc543c0ff88fb90cf15e8fff5.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;java.io.DataOutput&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;对象图遍历&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//c9f64aaf28e83e372ea67c932db0937c.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;字节流布局&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;最终呈现出来的字节流层面的数据布局会是这样：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//77ecb08f4d5f27695f0f76d7c10cbee6.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;看起来没毛病，唯一的问题就是不好解码。&lt;/p&gt; 
&lt;p&gt;当解码端收到一个 16 字节的字节流以后，它分不清哪块数据是 A 对象的，哪块数据是 B 对象的。甚至都分不清这到底是 4 个 int32 还是 2 个 int64。&lt;/p&gt; 
&lt;p&gt;这个问题需要&lt;strong&gt;编码格式&lt;/strong&gt;来解决。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;编码格式&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;上面遗留的问题，聪明的你肯定想到了答案。&lt;/p&gt; 
&lt;p&gt;就是因为编码产物太太太简陋了，整个过程中只是一股脑的把树拍平，把叶子节点的值写入字节流，缺少&lt;strong&gt;结构元数据&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;最最最重要的&lt;strong&gt;结构元数据&lt;/strong&gt;就是数据块的边界，上述 4 个数据块，最起码应该添加 3 个边界标识。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//01cadc75fb4261e8778896a92e5beca7.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;我们先用我们耳熟能详的 JSON 格式来理解下编码格式这个事情。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;伪代码&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;JSON 是这样解决这个问题的：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//457465c678f29743ca41d351dd932ab2.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;JSON 协议在嵌套的 POJO 上用**{}&lt;strong&gt;来作为边界，POJO 内部的字段键值用 &lt;strong&gt;,&lt;/strong&gt; 来做边界，&lt;/strong&gt;:**拆分字段键值。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;字节流布局&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;结果就变成这样：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//718a030c1291d7f86e7c4c886c3d01cd.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;这样在解码的时候，可以通过**{&lt;strong&gt;、&lt;/strong&gt;}&lt;strong&gt;、&lt;/strong&gt;,&lt;strong&gt;、&lt;/strong&gt;:** 等&lt;strong&gt;token&lt;/strong&gt;来切割 JSON 字符串，判定&lt;strong&gt;数据块边界&lt;/strong&gt;并恢复出&lt;strong&gt;对象图&lt;/strong&gt;。&lt;/p&gt; 
&lt;span id="OSC_h1_3"&gt;&lt;/span&gt; 
&lt;h1&gt;三、Hessian 编码格式&lt;/h1&gt; 
&lt;p&gt;接下来我们可以开始介绍 Hessian 的编码魔法了。&lt;/p&gt; 
&lt;p&gt;需要强调的是：Hessian 跟 JSON 不同，Hessian 是二进制格式。如果一个字节流直接按字符集解码不能得到一个完整的、有意义的字符串，那它就是二进制编码数据。&lt;/p&gt; 
&lt;p&gt;Hessian 在编码时，按&lt;strong&gt;数据块类型&lt;/strong&gt;为每一个数据块添加一个&lt;strong&gt;前缀字节 (byte)&lt;strong&gt;作为结构元数据，这些&lt;/strong&gt;元数据&lt;/strong&gt;和&lt;strong&gt;数据块&lt;/strong&gt;一起，交给解码端使用。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;数据块&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;对象图里的每一个节点，都是一个数据块。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//3115085d696f405a881e61692a063b92.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;如上图所示，以 A 对象为根的对象图，一共有 6 个&lt;strong&gt;数据块&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;数据块标签（tag）&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Hessain 在编码每一个数据块时，都会根据数据块的类型在字节流中写入一个&lt;strong&gt;前缀字节&lt;/strong&gt;(&lt;strong&gt;0-255&lt;/strong&gt;)，这个字节说明了数据块的&lt;strong&gt;语义和结构&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;以&lt;strong&gt;int32&lt;/strong&gt;为例，其最基础的编码格式如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//fb9f5e4ffbe04e67cc8526e86038ce87.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;除该基础编码格式外，int32 的编码还有其他变体。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;上述 &lt;strong&gt;I&lt;/strong&gt; 就是整数类型的 tag。解码端读取 tag 后，按 tag 值来解码数据。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//6db73099018e0bb91d7b0eb8d7a998d7.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;com.alibaba.com.caucho.hessian.io.Hessian2Input#readObject(java.util.List&amp;lt;java.lang.Class&amp;lt;?&amp;gt;&amp;gt;)&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;由此延伸、拓展，其他的数据类型都是类似的模式。常见数据类型及其对应的 tag 值如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//bdc6fc4ca7b3d70f391b9ea328b36a26.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;值得注意的是，&lt;strong&gt;N&lt;/strong&gt;、&lt;strong&gt;F&lt;/strong&gt;、&lt;strong&gt;T&lt;/strong&gt;三个 tag 是自解释的，和固定值映射、绑定。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;POJO 编码&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;POJO 是一种特殊的&lt;strong&gt;数据块&lt;/strong&gt;，Hessian 将 POJO 的&lt;strong&gt;结构&lt;/strong&gt;和&lt;strong&gt;值&lt;/strong&gt;拆开，分别编码。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;POJO 结构编码&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;POJO 结构&lt;/strong&gt;的 tag 为&lt;strong&gt;C&lt;/strong&gt;，对照 int32 的编码格式，POJO 结构的编码格式如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//f82feb9cef8ee37be26fa5e236e1cafc.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;举个例子：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//57fce9ec2ed617db45fc440313c0c184.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;编码 POJO 时，Hessain 会将 POJO 的类名、字段名列表写入字节流，供解码端使用。后续编码 POJO 字段值时，需要&lt;strong&gt;按照字段名列表&lt;/strong&gt;(如上述&lt;strong&gt;bb&lt;/strong&gt;、&lt;strong&gt;cc&lt;/strong&gt;)&lt;strong&gt;的顺序&lt;/strong&gt;来编码字段值。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//e0478bcef5e562ad49afa590a79185ab.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;POJO 字段值编码&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;POJO 字段值&lt;/strong&gt;的 tag 为&lt;strong&gt;O&lt;/strong&gt;，对照 int32 的编码格式，POJO 字段值的编码格式如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//147cb7b396ba5fcad0c15a00a5c6f6d6.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;举个例子：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//1ec3dd805e8ba21d9cc0c7e64fca7824.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;可以看到，编码 POJO 字段值的时候，在 tag 后面有一个&lt;strong&gt;POJO 结构序号&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;这是 Hessian 的一个&lt;strong&gt;数据复用&lt;/strong&gt;的小技巧。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;POJO 结构复用&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;JSON 协议有一个缺点，那就是重复数据带来的存储/传输开销。举个例子：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//c0f290170c6fbe02c4a22668f81e31f0.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;如上图，B 类型的字段名 (&lt;strong&gt;dd&lt;/strong&gt;、&lt;strong&gt;ee&lt;/strong&gt;) 在编码产物中&lt;strong&gt;重复出现&lt;/strong&gt;！&lt;/p&gt; 
&lt;p&gt;Hessian 希望解决这个问题，同一类型的多个 POJO 对象在序列化时，只需要在第一次的时候编码&lt;strong&gt;类名、字段名&lt;/strong&gt;等元数据，后续可以被重复的引用、使用，无需重复编码。&lt;/p&gt; 
&lt;p&gt;如果用 Hessian 来编码，结果会是这样：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;数据布局&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//ae454fbec4eae9f73efea262750e29f0.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;数据布局详解&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//d0f362d8687736273afdf6c9e45b04a6.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;如上图，APojo、BPojo 的字段名只会编码一次。多个 BPojo 对象在编码时会通过**结构引用序号 (1)**来引用它。相对 JSON，Hessian 避免了多次编码 BPojo 字段名的开销。&lt;/p&gt; 
&lt;p&gt;为什么 APojo 的序号是 1、BPojo 的序号是 2？&lt;/p&gt; 
&lt;p&gt;Hessain 在编码过程中，每次遇到一个新的、没有处理过的新 POJO 类型时，会给它分配一个&lt;strong&gt;从 0 开始、单调递增&lt;/strong&gt;的序号。&lt;/p&gt; 
&lt;p&gt;遥相呼应的，&lt;strong&gt;解码侧&lt;/strong&gt;每次解码一个 tag 为&lt;strong&gt;C&lt;/strong&gt;的 POJO 结构数据块时，也会按&lt;strong&gt;解码顺序&lt;/strong&gt;维护好其索引序号。&lt;/p&gt; 
&lt;span id="OSC_h1_4"&gt;&lt;/span&gt; 
&lt;h1&gt;四、Hessian 编码细节&lt;/h1&gt; 
&lt;p&gt;到现在，我们已经对 Hessian 编码有了一个的概括性的认识，接下来我们来看看一些值得注意的细节。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;重复对象复用&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//77f9679e85811f93d0fcdb046ad714f3.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;A 对象里有两个字段 (d、e) 指向同一个对象 B。如果不做处理，会因为重复编码而带来不必要的开销。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//7f723ff30877e885b2f4a5bbef0265a2.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;相同的一个 B 对象，因为被两个字段重复引用，导致&lt;strong&gt;2 次编码&lt;/strong&gt;、产生&lt;strong&gt;2 份数据空间占用！&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;如果只是有额外的开销，没有可用性问题那都还好。关键是在&lt;strong&gt;循环引用&lt;/strong&gt;场景下，会因为&lt;strong&gt;引用成环&lt;/strong&gt;导致&lt;strong&gt;递归&lt;/strong&gt;进行对象图遍历时触发方法栈溢出！&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//4f959593079f42c81c5f5901540dd995.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;循环引用是重复引用的特例&lt;/strong&gt;，只要将重复引用处理掉，循环引用也就没问题了。&lt;/p&gt; 
&lt;p&gt;Hessian 通过&lt;strong&gt;对象引用&lt;/strong&gt;来解决这个问题。在对象图遍历过程中，遇到一个之前没有遇到过、处理过的 POJO 对象时，会给它分配一个&lt;strong&gt;从 0 开始、单调递增&lt;/strong&gt;的序号。&lt;/p&gt; 
&lt;p&gt;后续再次需要序列化相同的对象时，直接&lt;strong&gt;跳过&lt;/strong&gt;编码流程，将这个对象的&lt;strong&gt;序号&lt;/strong&gt;写入字节流。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//7c90939b732ed84f63bcb8ea21b63546.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;解码时，解码侧按相同的顺序来恢复出&lt;strong&gt;引用序号表&lt;/strong&gt;，解码后续的对象引用。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;小整数内联 (direct)&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;很多编码类型，都需要在 tag 后再维护一个&lt;strong&gt;整数类型&lt;/strong&gt;的字段。比如：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;POJO 的编码 tag &lt;strong&gt;O&lt;/strong&gt;需要一个整数来引用 POJO 结构引用&lt;strong&gt;序号&lt;/strong&gt;。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//60853c7e321632c599984c66b22cb8aa.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;类似 String 的变长类型需要一个整数来标识变长数据的&lt;strong&gt;长度&lt;/strong&gt;。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//10f03bd8e5e43dd19a3484e1f1fee510.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;当字符串很短，就比如**"hi"&lt;strong&gt;吧，短字符串编码格式的&lt;/strong&gt;长度字段**可能比实际字符数据还大（用 4 字节存储长度 2），效率低下。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;tag 分段&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Hessian 将一些 tag 值的语义富化，让它既体现数据类型，也体现小数值。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;因为 tag 是一个&lt;strong&gt;byte(int8)&lt;/strong&gt;，取值范围是&lt;strong&gt;0-255&lt;/strong&gt;，每个 tag 标识一种特定的数据类型 (int、boolean 等)，但是这些数据类型最多&lt;strong&gt;几十种&lt;/strong&gt;，取值范围内还有很大的数值区间没有被使用，其实比较浪费。那我们就可以把这些空闲的 tag 值，挪作他用，提升 tag 数值空间利用率。&lt;/p&gt; 
&lt;p&gt;我举个例子，注意这个是参考 Hessian 思路的一个简单示意，&lt;strong&gt;具体的 Tag 值和 Hessian 无关&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//3e4c45ee3365b0258eb67d931eff94c3.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;长度内联&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;对于&lt;strong&gt;长度≤31&lt;/strong&gt;的字符串，Hessian 用&lt;strong&gt;tag 同时编码类型和长度&lt;/strong&gt;。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;当 0 &amp;lt;= tag &amp;lt;= 31 时，标识后续的数据块为字符串。&lt;/li&gt; 
 &lt;li&gt;tag 的数值即为后续数据块的长度。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;示例如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//6dd4c9e15c8208157f4a3e53320e3813.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;序号内联&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;当结构引用&lt;strong&gt;序号&amp;lt;=16&lt;/strong&gt;时，Hessain 用&lt;strong&gt;tag 同时编码类型和序号&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;1. 当 0x60 &amp;lt;= tag &amp;lt;= 0x70 时，标识后续的数据块为 POJO 字段值。&lt;/p&gt; 
&lt;p&gt;2. tag - 0x60 的值，即为 POJO 结构 (类名+字段名) 引用序号。&lt;/p&gt; 
&lt;p&gt;示例如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//08031efdb62b1e14cb8c6ade63888486.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;相关源码如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//237bc12726766598c175abc821760060.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;com.alibaba.com.caucho.hessian.io.Hessian2Output#writeObjectBegin&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;字符串编码&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Hessian 编码字符串的关键流程是：&lt;strong&gt;字符串分段+不同长度的子串使用不同的 tag。&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;分段原则&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;字符串会被分割为若干块，每块最大长度为 32768（0x8000）。前 N-1 块均为完整长度的子串（32768 字节），使用固定 tag &lt;strong&gt;R&lt;/strong&gt;标识；最后一块为剩余部分，长度范围为 0-32768 字节，根据实际长度选择动态 tag。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;尾段 tag 的选择基于尾块的长度决定&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;长度≤31（0x1F）：使用单字节 tag 0x00-0x1F 直接内联长度值。&lt;/li&gt; 
   &lt;li&gt;32≤长度≤1023（0x3FF）：使用 tag &lt;strong&gt;0&lt;/strong&gt;后跟 1 字节长度 (大端序)，&lt;strong&gt;10bit&lt;/strong&gt;的计数空间由 tag 字节和长度字节共同提供。这个地方有点绕，看下代码吧。&lt;/li&gt; 
   &lt;li&gt;长度≥1024：使用 tag &lt;strong&gt;S&lt;/strong&gt;后跟 2 字节长度（大端序）。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;相关源码&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//0d46a7cdf992687d78fc5d21f2bbccaa.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;com.alibaba.com.caucho.hessian.io.Hessian2Output#writeString(java.lang.String)&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;这种设计通过减少长字符串的冗余长度标记，在保持兼容性的同时显著提升了编码效率。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;整数压缩&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;基础编码&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;整数 (int32) 的的取值范围很大 (-23^31 - 2^31)，保守的编码格式会用 4 个 byte 来编码整数。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//50ee2c14cb9e43fdbd52a30c58e19a1d.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;但是日常使用中，我们会大量使用&lt;strong&gt;小整数&lt;/strong&gt;，比如 1、31。这时候如果还用 4 字节编码就很不划算啦~&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;变长编码&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Hessian 根据整数的值范围，动态的选择不同的编码方式，且&lt;strong&gt;不同的编码方式有不同的 tag&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;单字节整数编码&lt;/strong&gt;：&lt;strong&gt;类似【长度压缩】，tag 中直接内联数值&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;适用范围：-16 到 47（共 64 个值）&lt;/p&gt; 
&lt;p&gt;编码方式：使用单字节，值为 value + &lt;strong&gt;0x90&lt;/strong&gt;（144）&lt;/p&gt; 
&lt;p&gt;例如：0 编码为 0x90，-1 编码为 0x8f，47 编码为 0xbf&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;双字节整数编码&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;适用范围：-2048 到 2047&lt;/p&gt; 
&lt;p&gt;编码方式：首字节为 &lt;strong&gt;0xc8&lt;/strong&gt; + (value &amp;gt;&amp;gt; 8)，后跟一个字节存储 value 剩下的 bit。&lt;/p&gt; 
&lt;p&gt;这种编码可以表示&lt;strong&gt;12bit&lt;/strong&gt;有符号整数&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;三字节整数编码&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;适用范围：-262144 到 262143&lt;/p&gt; 
&lt;p&gt;编码方式：首字节为 &lt;strong&gt;0xd4&lt;/strong&gt; + (value &amp;gt;&amp;gt; 16)，后跟两个字节存储 value 的高 8 位和低 8 位。&lt;/p&gt; 
&lt;p&gt;这种编码可以表示&lt;strong&gt;19bit&lt;/strong&gt;有符号整数。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;五字节整数编码&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;适用范围：超出上述范围的所有 32 位整数&lt;/p&gt; 
&lt;p&gt;编码方式：以 &lt;strong&gt;'I'&lt;/strong&gt;（0x49）开头，后跟 4 个字节表示完整的 32 位整数值。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;相关源码&lt;/strong&gt;：&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//a6fdb7cd76b7cd2cb3bb2130f078a10c.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;com.alibaba.com.caucho.hessian.io.Hessian2Output#writeInt&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;收益&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;小整数（如 0、-1）仅需 1 字节 ，而传统 int32 固定 4 字节。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;大整数动态扩展，避免固定长度浪费（如 1000 仅需 2 字节）。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;其他的数值类型比如 int64 也有类似的机制。&lt;/p&gt; 
&lt;span id="OSC_h1_5"&gt;&lt;/span&gt; 
&lt;h1&gt;五、总结&lt;/h1&gt; 
&lt;p&gt;Hessian 专为 Java 优化，采用高效二进制协议，通过对象图遍历和编码协议实现对象与字节流的转换，利用数据块标签、重复对象复用、数据压缩等机制，提升编解码效率和数据压缩率。&lt;/p&gt; 
&lt;p&gt;本文没有去展开 Hessian 的代码细节，而是尽可能深入浅出的介绍了 Hessain 的核心编码原理，以帮助读者建立对 Hessian 的宏观认知，从而可以更好的去理解和使用它。&lt;/p&gt; 
&lt;p&gt;尽管不同语言/生态的序列化框架选型让人眼花缭乱，但是各自需要解决的问题和解决问题的思路都大同小异；我们对 Hessain 原理的认识可以迁移到其他序列化框架，甚至自己写一个领域特定的序列化框架。&lt;/p&gt; 
&lt;p&gt;相关内容均为笔者走读源码整理而来，如有疏漏，欢迎指正。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 2.0 Serialization Protocol&lt;/strong&gt;（&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fhessian.caucho.com%2Fdoc%2Fhessian-serialization.html" rel="nofollow" target="_blank"&gt;http://hessian.caucho.com/doc/hessian-serialization.html&lt;/a&gt;&lt;/em&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 2.0 序列化协议（中文版）&lt;/strong&gt;&lt;em&gt;（&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.diguage.com%2Fpost%2Fhessian-serialization-protocol%2F%25EF%25BC%2589" rel="nofollow" target="_blank"&gt;https://www.diguage.com/post/hessian-serialization-protocol/）&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 协议解释与实战（一）：布尔、日期、浮点数与整数&lt;/strong&gt;（&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.diguage.com%2Fpost%2Fhessian-protocol-interpretation-and-practice-1%2F" rel="nofollow" target="_blank"&gt;https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/&lt;/a&gt;&lt;/em&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 协议解释与实战（二）：长整型、二进制数据与 Null&lt;/strong&gt;（&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.diguage.com%2Fpost%2Fhessian-protocol-interpretation-and-practice-2%2F" rel="nofollow" target="_blank"&gt;https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/&lt;/a&gt;&lt;/em&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 协议解释与实战（三）：字符串&lt;/strong&gt;（&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.diguage.com%2Fpost%2Fhessian-protocol-interpretation-and-practice-3%2F" rel="nofollow" target="_blank"&gt;https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/&lt;/a&gt;&lt;/em&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 协议解释与实战（四）：数组与集合&lt;/strong&gt;（&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.diguage.com%2Fpost%2Fhessian-protocol-interpretation-and-practice-4%2F" rel="nofollow" target="_blank"&gt;https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/&lt;/a&gt;&lt;/em&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 协议解释与实战（五）：对象与映射&lt;/strong&gt;（&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.diguage.com%2Fpost%2Fhessian-protocol-interpretation-and-practice-5%2F" rel="nofollow" target="_blank"&gt;https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/&lt;/a&gt;&lt;/em&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 源码分析（Java）&lt;/strong&gt;（&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.diguage.com%2Fpost%2Fhessian-source-analysis-for-java%2F" rel="nofollow" target="_blank"&gt;https://www.diguage.com/post/hessian-source-analysis-for-java/&lt;/a&gt;&lt;/em&gt;）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;往期回顾&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1. 前端日志回捞系统的性能优化实践｜得物技术&lt;/p&gt; 
&lt;p&gt;2. 得物灵犀搜索推荐词分发平台演进 3.0&lt;/p&gt; 
&lt;p&gt;3. R8 疑难杂症分析实战：外联优化设计缺陷引起的崩溃｜得物技术&lt;/p&gt; 
&lt;p&gt;4. 可扩展系统设计的黄金法则与 Go 语言实践｜得物技术&lt;/p&gt; 
&lt;p&gt;5. 营销会场预览直通车实践｜得物技术&lt;/p&gt; 
&lt;p&gt;文 / 羊羽&lt;/p&gt; 
&lt;p&gt;关注得物技术，每周更新技术干货&lt;/p&gt; 
&lt;p&gt;要是觉得文章对你有帮助的话，欢迎评论转发点赞～&lt;/p&gt; 
&lt;p&gt;未经得物技术许可严禁转载，否则依法追究法律责任。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/5783135/blog/18691458</link>
      <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/18691458</guid>
      <pubDate>Sun, 14 Sep 2025 03:06:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>彭斯克集团起诉 Google，指控 AI 摘要侵权并威胁数字媒体未来</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;彭斯克媒体集团（Penske Media）向美国华盛顿特区联邦法院提起诉讼，控告科技巨头 Google 在未经授权的情况下使用其新闻内容生成人工智能（AI）摘要。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;这起诉讼标志着美国主流出版商&lt;/span&gt;&lt;span&gt;&lt;span&gt;首次&lt;/span&gt;&lt;/span&gt;&lt;span&gt;就 Google 搜索结果中现有的 AI 生成摘要提起法律行动。彭斯克集团旗下包括《滚石》（RollingStone）、Billboard 和 Variety 等知名媒体，每月吸引 1.2 亿的网络访问者。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="274" src="https://oscimg.oschina.net/oscnet/up-6754ce01e89dc9798ddac2728e0f7784c02.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;彭斯克集团在诉讼中指出，Google 在生成 AI 摘要时使用了出版商的文章，但并未支付任何费用。他们认为，如果没有 Google 对出版商内容的使用，Google 本应向这些出版商支付相应的费用，以合法使用其内容或将其内容用于训练自己的 AI 系统。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;彭斯克集团强调，Google 的行为不仅损害了出版商的广告收入和订阅收入，还使得其网站流量大幅下降，预计到 2024 年底，该集团的关联收入将比峰值下降超过三分之一。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Google 对这一诉讼做出回应，表示其 AI 摘要提升了用户的搜索体验，实际上能够为更多类型的网站带来流量。Google 发言人何塞・卡斯塔涅达（Jose Castaneda）指出，AI 摘要使得搜索功能更实用，并创造了新的内容被发现的机会，Google 将会为这些 「毫无根据的指控」 进行辩护。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在此之前，在线教育公司 Chegg 也曾起诉 Google，认为其 AI 生成摘要削弱了用户对原创内容的需求，损害了出版商的竞争力。彭斯克集团的诉讼反映了当前媒体行业对 Google 垄断地位的担忧，认为其在搜索市场接近 90% 的份额使得出版商处于弱势地位。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;新闻 / 媒体联盟（News/Media Alliance）也对此表示关注，认为这一情况导致出版商无法拒绝 Google 使用其内容进行 AI 摘要生成。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372231</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372231</guid>
      <pubDate>Sun, 14 Sep 2025 02:49:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>马斯克旗下 xAI 数据标注团队裁员 500 人</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.businessinsider.com%2Felon-musk-xai-layoffs-data-annotators-2025-9" target="_blank"&gt;据报道&lt;/a&gt;，马斯克旗下 AI 初创公司 xAI 宣布，已从其数据标注团队裁员约 500 人，约占该团队三分之一。该团队曾在训练 xAI 聊天机器人 Grok 时，通过对数据进行分类和情境化处理发挥关键作用。&lt;/p&gt; 
&lt;p&gt;在裁员前，xAI 数据标注团队是其规模最大的一个工作组，成员超过 1500 人，涵盖全职员工和合同工。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;xAI 在通知裁员之前，公司要求部分员工参加技能评估/测试，这些测试内容涉及 STEM（科学、技术、工程、数学）、编码、金融、医学、模型行为与安全性等多个领域。测试被用于判断哪些通用导师或其主管可能被保留或转为更「专才」的角色。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0915/103652_R1Bm_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;此次裁员是 xAI 战略转变的一部分，该公司现专注于招聘 STEM、金融、医学和安全领域的专业 AI 导师，同时减少普通岗位。xAI 表示，计划将专业导师团队扩大 10 倍。这一举措反映了更广泛的行业趋势，随着 AI 处理日常任务能力的提升，企业正优先考虑能提供专业领域知识的员工。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372229</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372229</guid>
      <pubDate>Sun, 14 Sep 2025 02:39:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Solon AI v3.5.2 发布，面向全场景的 Java AI 应用开发框架</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Solon AI v3.5.2 已经发布，面向全场景的 Java AI 应用开发框架&lt;/p&gt; 
&lt;p&gt;此版本更新内容包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;添加 solon-ai-core ToolSchemaUtil 简化方法&lt;/li&gt; 
 &lt;li&gt;添加 solon-ai-mcp McpClientProperties:timeout 属性，方便简化超时配置（可省略 httpTimeout, requestTimeout, initializationTimeout）&lt;/li&gt; 
 &lt;li&gt;添加 solon-ai-mcp McpClientProvider:toolsChangeConsumer,resourcesChangeConsumer,resourcesUpdateConsumer,promptsChangeConsumer 配置支持&lt;/li&gt; 
 &lt;li&gt;添加 solon-ai-mcp McpClientProvider 缓存锁和变更刷新控制&lt;/li&gt; 
 &lt;li&gt;添加 solon-ai-mcp IMcpServerEndpoint 接口（方便可批量获取组件）&lt;/li&gt; 
 &lt;li&gt;优化 solon-ai-core RepositoryStorable 接口定义，用 save 替代 insert(标为弃用)&lt;/li&gt; 
 &lt;li&gt;调整 solon-ai-core FunctionToolDesc:doHandle 改用 ToolHandler 参数类型（之前为 Function），方便传递异常&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情查看：&lt;a href="https://gitee.com/opensolon/solon-ai/releases/v3.5.2"&gt;https://gitee.com/opensolon/solon-ai/releases/v3.5.2&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372219</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372219</guid>
      <pubDate>Sun, 14 Sep 2025 02:20:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>OpenAI 拟将与微软分成比例降至 8%，获 500 亿美元额外收入</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;据美国科技媒体《The Information》报道，人工智能公司 OpenAI 正寻求调整其与主要投资方微软的财务协议，以期保留更多收入，用于支付其庞大的计算开销。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;报道援引知情人士透露，OpenAI 已向部分投资者表示，计划将微软获得的收入分成比例从目前略低于 20% 的水平，到 2030 年逐步降至 8% 左右。根据最初的协议，到 2030 年，微软将获得 20% 的分成。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="251" src="https://oscimg.oschina.net/oscnet/up-879eb71753d9c8a6f9579fa9d00e263ca1e.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;这一调整意义重大，预计将为 OpenAI 带来超过 500 亿美元的额外收入。这笔资金将成为其维持和扩展 AI 模型训练所需的宝贵「弹药」。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;作为回报，微软将获得重组后 OpenAI 实体的三分之一股份，而剩余部分将归其非营利组织所有。不过，报道称，微软仍将不会在 OpenAI 董事会中拥有席位。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;此外，两家公司还在就通用人工智能（AGI）的潜在应用、服务器费用及合同条款进行深入谈判。目前，尚不清楚这是否已体现在两家公司近期宣布的非约束性协议中。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;相关阅读：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:left"&gt;&lt;a href="https://www.oschina.net/news/371712" target="_blank"&gt;OpenAI 与微软达成非约束性协议：允许将营利部门转型公益股份公司&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372214</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372214</guid>
      <pubDate>Sun, 14 Sep 2025 02:04:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Skyeye 云智能制造办公系统 - Saas v3.17.4 发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="background-color:#ffffff; color:#6a737d"&gt;&lt;span&gt;Skyeye 云智能制造，&lt;/span&gt;智能制造一体化，采用 SpringBoot+ UNI-APP + Ant Design Vue 的低代码平台开发模式。包含 50 多种电子流程，CRM、PM、ERP、MES、ADM、OA、EHR、AI、项目、商城、财务、多班次考勤、薪资、招聘、云售后、论坛、问卷、报表设计、工作流、Saas 等功能。打造全网首套低代码、功能最全的智能制造行业供应链一体化管理软件&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fip.makerview.cn%3A30003%2FskyPortal" target="_blank"&gt;官方网站&lt;/a&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Farticles.zsxq.com%2Fid_xi3xhacte72g.html" target="_blank"&gt;开发文档&lt;/a&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Fspace.bilibili.com%2F87396008%2Fchannel%2Fseries" target="_blank"&gt;视频教程&lt;/a&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/strong&gt;&lt;strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkdocs.cn%2Fl%2Fcbf2cgCLrUyz" target="_blank"&gt;功能点&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;Skyeye&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;云【源代码】针对 {Skyeye 会员} 开源。拿到源码后可进行学习、毕设、企业等使用。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;Skyeye 云智能制造 v3.17.4 发布 ，发布内容如下：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;span&gt;Skyeye 云已加入 Dromara 社区&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;业务对象适配 Saas 进展 100%&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;VUE 版开发&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;完成文本转语音功能 (window 服务器可以免费使用，Linux 服务器需要对接百度智能云)&lt;/li&gt; 
   &lt;li&gt;完成学校模块校内导航功能，为后续仓库寻件、园区导航做准备&lt;/li&gt; 
   &lt;li&gt;完成导航模块得路线规划、导航计算、位置搜索等功能&lt;/li&gt; 
   &lt;li&gt;支持管理端得路线规划&lt;/li&gt; 
   &lt;li&gt;低代码生成器完成，支持 Skyeye 云内置四种低代码模板，可自由选择模板生成代码&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;span&gt;源代码只对 Skyeye 会员开放&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;Skyeye 具备&lt;/span&gt;&lt;strong&gt;&lt;span&gt;低代码、快捷开发、可视化设计、微服务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;等特点，方便客户二次开发，极大的提高了开发效率。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;strong&gt;项目地址：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;Gitee：&amp;nbsp;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;https://gitee.com/doc_wei01/skyeye&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;https://gitee.com/dromara/skyeye&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;GitCode：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://gitcode.com/doc_wei/erp-pro&lt;/li&gt; 
 &lt;li&gt;https://gitcode.com/doc_wei/skyeye-oa&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;PC 端效果图&lt;/strong&gt;&lt;/p&gt; 
&lt;table cellspacing="0" style="--darkreader-inline-bgcolor:#181a1b; --darkreader-inline-border-bottom:currentcolor; --darkreader-inline-border-left:currentcolor; --darkreader-inline-border-right:currentcolor; --darkreader-inline-border-top:currentcolor; --darkreader-inline-color:#bdb7af; -webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:1px; border:medium none; box-sizing:border-box; color:#444444; display:block; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif; font-size:14px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px; max-width:100%; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:776px; word-break:keep-all; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th style="text-align:center"&gt;效果图&lt;/th&gt; 
   &lt;th style="text-align:center"&gt;效果图&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-35a653b1c873ab9501f7187b0901a27cc64.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1919" src="https://oscimg.oschina.net/oscnet/up-f571611575c569395f75d2766052fab6120.png" width="3840" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-50138b38c37d750b93db5b37493f71bf4ca.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p&gt;&lt;img height="1911" src="https://oscimg.oschina.net/oscnet/up-c281a05f7ef637b7a7686865dd36493f1ff.png" width="3843" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-6499d74ddcfe9a99997d8c797aae7b7f0b0.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-e97af4a2caccb199b76d906ecbb339a7575.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1919" src="https://oscimg.oschina.net/oscnet/up-be4cfd4da0048b3fbe82e830fab3aae132c.png" width="3840" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-9eb76f53a99358fdf1ce532dc711baec41a.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-ce7c58e9fe940d58b2cb9cec441176b3481.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-ca685ab278a861067f5850e12470e155e59.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1919" src="https://oscimg.oschina.net/oscnet/up-ec6e551aca1cae85af43a94d3e2061445b1.png" width="3840" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1837" src="https://oscimg.oschina.net/oscnet/up-0bebb255d3c79c13a69bfa0fbb7fcd80836.png" width="3839" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1837" src="https://oscimg.oschina.net/oscnet/up-90cde5042c0effeea9e85761ff8dc7283d5.png" width="3839" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1837" src="https://oscimg.oschina.net/oscnet/up-47ccf76ab671effc6142727caf066d67071.png" width="3839" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;移动端效果图&lt;/strong&gt;&lt;/p&gt; 
&lt;table border="1" cellpadding="1" cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:1px; border:none; box-sizing:border-box; color:#444444; display:block; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif; font-size:14px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px; max-width:100%; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:776px; word-break:keep-all; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果图&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果图&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果图&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果图&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1637" src="https://oscimg.oschina.net/oscnet/up-6850576a0a01188e6b2a9d1ecce58ed7455.png" width="755" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1266" src="https://oscimg.oschina.net/oscnet/up-b5a18816a9e0e785ec5efcbd5baaac89d91.png" width="585" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1266" src="https://oscimg.oschina.net/oscnet/up-df25b57cc822bc730f41ca85c69caee46b6.png" width="588" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1637" src="https://oscimg.oschina.net/oscnet/up-d7707ebc67ddf3842adbb54fdc0c062a2a1.png" width="755" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p&gt;&lt;img height="1269" src="https://oscimg.oschina.net/oscnet/up-8bff9dc60bdbf9fd632676cccab7b0b4ea6.png" width="582" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&amp;nbsp;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&amp;nbsp;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&amp;nbsp;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372204</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372204</guid>
      <pubDate>Sun, 14 Sep 2025 00:33:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>Forest v1.7.4 已经发布，轻量级 HTTP 客户端</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Forest v1.7.4 已经发布，轻量级 HTTP 客户端&lt;/p&gt;
&lt;p&gt;此版本更新内容包括：&lt;/p&gt;
&lt;p&gt;Forest v1.7.4 版本发布了！此次版本发布主要支持了在编程式接口中使用和修改字符串模板变量&lt;/p&gt; 
&lt;h4&gt;编程式接口中的模板变量&lt;/h4&gt; 
&lt;p&gt;可以在 URL 中使用模板变量&lt;/p&gt; 
&lt;div class="markdown-code-block"&gt; 
 &lt;pre class="java"&gt;&lt;code&gt;Forest.get("{baseURL}/test/{myPath}");
&lt;/code&gt;&lt;/pre&gt; 
 &lt;div class="markdown-code-block-copy-btn"&gt;&lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;可以在请求头中使用模板变量&lt;/p&gt; 
&lt;div class="markdown-code-block"&gt; 
 &lt;pre class="java"&gt;&lt;code&gt;Forest.post("/test")
        .addHeader("Content-Type", "{myContentType}")
        .addHeader("name", "{myName}");
&lt;/code&gt;&lt;/pre&gt; 
 &lt;div class="markdown-code-block-copy-btn"&gt;&lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;可以在字符串型请求体中使用模板变量&lt;/p&gt; 
&lt;div class="markdown-code-block"&gt; 
 &lt;pre class="java"&gt;&lt;code&gt;Forest.post("/test")
        .contentTypeJson()
        .addBody("{myBody}");
&lt;/code&gt;&lt;/pre&gt; 
 &lt;div class="markdown-code-block-copy-btn"&gt;&lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;可以在 K-V 型请求体中使用模板变量&lt;/p&gt; 
&lt;div class="markdown-code-block"&gt; 
 &lt;pre class="java"&gt;&lt;code&gt;Forest.post("/test")
        .contentFormUrlEncoded()
        .addBody("a", "{a}")
        .addBody("b", "{b}");
&lt;/code&gt;&lt;/pre&gt; 
 &lt;div class="markdown-code-block-copy-btn"&gt;&lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;其他可以使用模板变量的编程式接口&lt;/p&gt; 
&lt;div class="markdown-code-block"&gt; 
 &lt;pre class="java"&gt;&lt;code&gt;Forest.get("/")
      .host("{myHost}") // host
      .port("{myPort}") // port
      .path("{myPath}") // path
      .charset("{myCharset}") // charset
      .connectTimeout("{myConnTimeout}") // connect timeout
      .readTimeout("{myReadTimeout}"); // read timeout
&lt;/code&gt;&lt;/pre&gt; 
 &lt;div class="markdown-code-block-copy-btn"&gt;&lt;/div&gt; 
&lt;/div&gt; 
&lt;h4&gt;新特性&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;feat: 在编程式接口中，在&lt;code&gt;ForestRequest&lt;/code&gt;对象中新增&lt;code&gt;var(name, value)&lt;/code&gt;、&lt;code&gt;var(name)&lt;/code&gt;、&lt;code&gt;varAs(name, class)&lt;/code&gt;方法，用于修改和获取请求级别的变量&lt;/li&gt; 
 &lt;li&gt;feat: 在编程式接口中，&lt;code&gt;url&lt;/code&gt;、&lt;code&gt;header&lt;/code&gt;、Key-Value 形式的&lt;code&gt;body&lt;/code&gt;支持使用字符串模板&lt;/li&gt; 
 &lt;li&gt;feat: 在编程式接口中，&lt;code&gt;connectTimeout&lt;/code&gt;方法和&lt;code&gt;readTimeout&lt;/code&gt;方法支持接受字符串模板作为参数&lt;/li&gt; 
 &lt;li&gt;feat: 在编程式接口中，&lt;code&gt;charset&lt;/code&gt;方法支持接受字符串模板作为参数&lt;/li&gt; 
 &lt;li&gt;feat: OAuth2 增加&lt;code&gt;OAuth2#forestInterceptor&lt;/code&gt;属性，可以增加自定义拦截器来对获取 Token 的请求进行一些操作&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;修复问题&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;fix: 默认不对 cookie 的值进行编码和反编码 (#ICVPUG)&lt;/li&gt; 
&lt;/ul&gt;
&lt;p&gt;详情查看：&lt;a href="https://gitee.com/dromara/forest/releases/v1.7.4" rel="nofollow"&gt;https://gitee.com/dromara/forest/releases/v1.7.4&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372190</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372190</guid>
      <pubDate>Sat, 13 Sep 2025 17:03:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>重塑研发组织形态：从「中心软件工厂」到「移动软件工厂」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;数字化转型的加速，让软件研发从幕后走到前台，成为组织创新和产业升级的关键引擎。无论是科研攻关、产业制造，还是信息基础设施建设，软件都已经渗透到最核心的环节。 然而，在现实环境中，研发并非总是发生在高速网络与开放环境下。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;有时，它需要在&lt;strong&gt;严格隔离的网络&lt;/strong&gt;中完成；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;有时，它需要跨越地域，在&lt;strong&gt;多团队协作&lt;/strong&gt;中推进；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;有时，它要面对&lt;strong&gt;安全与合规&lt;/strong&gt;的高压要求，容不得半点松懈。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;这就是今天的研发新常态：复杂、分布、受限，却又必须高效、统一、可控。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;行业挑战：研发必须跨越的三重门槛&lt;/h2&gt; 
&lt;p&gt;面对这样的新常态，研发组织普遍遭遇三道门槛：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;协同门槛&lt;/strong&gt;：不同地域、不同团队之间，工具链与流程标准不一致，导致研发成果常常无法顺畅对接。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;网络门槛&lt;/strong&gt;：在断网或弱网的条件下，环境一致、基线相同、依赖拉取、制品共享、版本同步都成了奢望。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;合规门槛&lt;/strong&gt;：即使是短期的现场研发，也必须满足严格的标准与安全要求，否则创新成果难以落地。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;这三道门槛，几乎成了所有组织共同面对的困境。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;新形态的亮相：中心与移动软件工厂&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0912/185857_1Zh5_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在这样的背景下，软件工厂的形态正在发生演进。&lt;/p&gt; 
&lt;p&gt;Gitee 带来了一个新的答案：&lt;strong&gt;中心软件工厂与移动软件工厂的双重驱动模式&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;它不是简单的功能叠加，而是研发组织能力的一次重塑：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;中心软件工厂&lt;/strong&gt;：承载统一的研发基线与标准，形成高效、安全、合规的研发中心；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;移动软件工厂&lt;/strong&gt;：作为灵活的延伸，将研发能力带到任何需要的地方，让创新不再受限。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;中心软件工厂：标准的承载者&lt;/h2&gt; 
&lt;p&gt;在中心软件工厂里，研发流程被整体化、规范化：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;统一的代码管理与版本基线；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;标准化的流水线与构建环境；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;安全可控的制品仓库与扫描规则；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;全局适配的权限与合规策略。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0912/185923_8uvl_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;它是研发的「大本营」，确保所有成果都有迹可循、有规可依。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;移动软件工厂：灵活的延伸者&lt;/h2&gt; 
&lt;p&gt;移动软件工厂的使命，是让研发能力突破环境的限制。&lt;/p&gt; 
&lt;p&gt;它并不是「缩减版」，而是&lt;strong&gt;完整工厂能力的便携延伸&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;携带基线&lt;/strong&gt;：将中心工厂中经过验证的基线，带到断网或弱网的现场；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;独立运行&lt;/strong&gt;：在隔离条件下完成开发、构建与测试；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;成果回传&lt;/strong&gt;：生成资产包，回传中心工厂，完成入库、复用与追踪；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;快速部署&lt;/strong&gt;：无需长期建设，即插即用，满足现场研发需求。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;一句话概括：移动软件工厂让研发随时随地发生，同时与中心保持标准一致。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0912/185946_9FIg_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;场景化小故事&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;隔离环境中的创新&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在一处无法连接外部网络的现场，团队依然能够基于移动工厂的基线顺利开发，研发成果在返回中心后快速入库，形成统一管理。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;弱网条件下的交付&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在网络条件不足的地区，移动工厂携带所需的依赖和制品，避免频繁的远程请求。研发节奏不再因网络波动而停滞。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;跨组织的协作&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在大型项目中，不同组织以中心工厂为标准，各自研发成果通过移动工厂快速接入与同步，协作效率显著提升。&lt;/p&gt; 
&lt;p&gt;这些故事有一个共同点：&lt;strong&gt;研发不再因环境受限而止步&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0912/190005_a74I_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;双工厂模式的价值&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;效率不受限&lt;/strong&gt;：研发团队可以在任何环境中持续迭代，项目进度更有保障。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;标准不走样&lt;/strong&gt;：中心工厂统一的基线与规则，让所有研发成果始终符合合规与质量要求。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;扩展不昂贵&lt;/strong&gt;：移动工厂以低成本实现灵活部署，避免重复建设与资源浪费。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;成果可复用&lt;/strong&gt;：通过资产回传机制，现场研发的成果也能纳入中心，成为可追溯、可检索、可复用的知识资产。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;这不仅仅是一种工具组合，而是一种新的研发组织能力。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;展望：研发的新未来&lt;/h2&gt; 
&lt;p&gt;中心与移动双工厂模式，正在成为下一代软件研发体系的关键基石。 让研发在复杂环境中依然顺畅，让创新在任何场景下都能发生。 未来，无论研发场景如何变化，这一模式都将持续释放价值：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;让效率与合规不再对立，而是并行；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;让组织在变化的环境中，依然保持稳健与敏捷；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;让创新真正随时随地、无处不在。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:left"&gt;Gitee DevSecOps 的现代化研发生态&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;Gitee DevSecOps 是一站式国产化研发与交付平台，集成了代码托管（Code）、项目协作（Team）、持续集成（CI）、持续部署（CD）、代码安全（Scan）、数据洞察（Insight）等多项能力，致力于打造具备全生命周期管控能力的现代软件工厂。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0523/174619_MpFL_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;平台设计充分考虑关键领域行业对安全性、可控性、合规性的极高要求，具备以下核心特征：&lt;/p&gt; 
&lt;ul style="list-style-type:disc; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;国产化适配与私有化部署能力：全面兼容国产操作系统与基础设施，支持灵活部署于内网环境，保障数据主权；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;全流程 DevSecOps 管控体系：代码从提交、审核、构建、扫描、部署到发布全流程可视、可追溯、安全可控；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;模块化产品结构：各能力模块（如 Code、Team、Repo、Pipe、Scan、Insight 等）可灵活组合、渐进集成，适配多样化团队与流程要求；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;深度可观测与度量体系：内置研发效能度量与数据洞察引擎，支撑管理者宏观掌控项目态势与交付健康度。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img alt="162046_MD15_2720166.png" src="https://static.oschina.net/uploads/space/2025/0516/162046_MD15_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;在多个国家级重大项目与关键领域单位落地实践中，Gitee DevSecOps 已成为构建「自主、可控、高效、安全」的软件工程体系的重要基石。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-825957ffbed1798ea7b6a37079fd6c99d18.gif" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371860</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371860</guid>
      <pubDate>Fri, 12 Sep 2025 11:00:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>微软正加大投资训练自己的人工智能模型</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;微软正在进行重大的投资，以增强其用于训练自主 AI 模型的服务器能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="334" src="https://oscimg.oschina.net/oscnet/up-85c73e1b3777c036f3526be295fc3e499f7.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;微软 AI 负责人穆斯塔法・苏莱曼在公司内部会议上表示，微软正在为未来的前沿模型进行 「显著的投资」。他指出：「我们应该具备内部构建&lt;span&gt;世界级&lt;/span&gt;前沿模型的能力，涵盖各种规模的模型，但在必要时也应理性地使用其他模型。」 这一战略显示出微软的决心，希望在 AI 领域与 Meta、谷歌及 xAI 等公司并肩竞争。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;据悉，微软目前正在建设自己的计算集群。目前，MAI-1-preview 模型仅在 15000 个 H100GPU 上进行训练，这在整体看来仍然是一个相对较小的集群。苏莱曼提到，微软计划训练的模型集群规模将是目前的 「六到十倍」，以增强其在 AI 研发中的实力。他表示:「还有很多工作要做，但迈出了&lt;span&gt;第一&lt;/span&gt;步，这很好。」&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在同一场会议上，微软首席执行官萨提亚・纳德拉也表达了他对未来模型能力建设的期待。他强调，微软将 「&lt;span&gt;绝对&lt;/span&gt;支持多种模型」 的应用，并以 GitHub Copilot 为例，说明该战略的成功。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;此外，微软还计划在即将推出的 Microsoft365 中引入 Anthropic 的 AI 模型。据《信息时报》报道，Microsoft365Copilot 将 「部分由 Anthropic 模型驱动」，因为这些模型在 Excel 和 PowerPoint 的性能上超过了 OpenAI。这表明微软正在积极探索各种合作，以提升其产品的智能化水平。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371856</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371856</guid>
      <pubDate>Fri, 12 Sep 2025 10:30:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>JuiceFS on Windows: 首个 Beta 版的探索与优化之路</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;在近期发布的 JuiceFS 社区版 1.3 和企业版 5.2 中，我们对 Windows 客户端进行了大量的优化工作。在早期版本中，JuiceFS 也尝试支持 Windows 平台，但是在使用体验和稳定性方面存在诸多问题，无法达到一个稳定的可用状态。&lt;/p&gt; 
&lt;p&gt;去年，我们决定重新对 Windows 客户端，进行全面改进，力求在提高性能的同时，提供更加稳定和高质量的用户体验。在近期的一次云端渲染场景测试中，我们对 3000 台 Windows 客户端进行了小文件读写性能测试，结果表明性能已能满足大规模使用需求。我们将在下一篇博客中分享此次测试的详细情况。&lt;/p&gt; 
&lt;p&gt;在此次历时一年的优化过程中，由于 Windows 客户端相关文档和资料相对有限，我们面临了诸多挑战。本文将详细阐述过程中遇到的关键问题、采取的方案以及目前已取得的进展。需要注意的是，目前的版本处于 Beta 阶段，即主要功能已完成，但仍需通过持续的测试和用户反馈进行优化。希望有需求的用户积极使用，并在社区中提出建议，我们也将积极支持并解决大家的问题。&lt;/p&gt; 
&lt;h2&gt;01 目标是什么？&lt;/h2&gt; 
&lt;p&gt;对于 Windows 版本，的开发，核心任务是将现有文件系统逻辑迁移到 Windows 平台。接入方式主要有两种：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;一是通过 Linux 挂载并启动 Samba 服务，将文件共享给 Windows 使用；这种方式可能带来额外的协议开销和配置复杂性，进而影响性能和稳定性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;二是直接在 Windows 上运行客户端，这种方式更接近 Windows 原生的使用体验，但历史版本存在较多 bug。在此次 Beta 版本，中，我们主要针对第二种方式对 Windows 客户端进行优化。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;我们希望这个版本能够达到真正可用的状态，包括确保大多数 Windows 应用程序能够在 JuiceFS 的文件系统上正常运行，支持数据读写操作以及文件管理功能；确保系统具有合格的性能。为此，Beta 版本需要完成的工作可以分为几个方面：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. 修复工具集&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;工具集是 JuiceFS 使用过程中的重要组成部分，但许多常用命令在 Windows 客户端上无法正常使用。我们将在下文详细描述各个主要命令，所进行的优化和改进工作。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. 优化使用体验&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在过去的版本中，用户体验存在许多问题，尤其在性能方面和操作简便性方面。因此，我们需要着重优化这些方面，使得使用过程更加流畅、简便。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3. 修复 Bug&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;与身份验证和权限管理相关的问题，过去的版本在这些方面比较混乱。&lt;/li&gt; 
 &lt;li&gt;与 Windows API 相关的 Bug，特别是错误码返回值和某些逻辑问题。&lt;/li&gt; 
 &lt;li&gt;一些零散的 Bug，需要在 Beta 版本中一并修复。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;02 怎么做 ？&lt;/h2&gt; 
&lt;p&gt;在这个优化过程中，我们依旧借助了一个非常重要的组件------WinFsp（Windows File System Proxy），它是一个开源库，提供了两个至关重要的特性：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;提供了一个高效的文件系统驱动接口，实现了 Windows 文件系统驱动（FSD, File System Driver）。&lt;/li&gt; 
 &lt;li&gt;还提供了 FUSE（Filesystem in Userspace）接口中的 high-level 接口。FUSE 本身提供了两套接口------high-level 接口和 low-level 接口。在 JuiceFS 中，我们使用的是 low-level 的接口，但通过做一些路径转换，我们已经可以成功对接 FUSE 层。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在引入 WinFsp 后，Windows 上的读取流程大致是这样的。下图中上半部分代表用户空间，下半部分代表内核空间。&lt;/p&gt; 
&lt;p&gt;图中展示的流程是数据从应用程序到驱动程序之间的流转路径。在用户空间中，应用程序执行 I/O 操作（如文件读写）会传递到内核空间，并流转到 Windows 内核中的一个核心组件 ------ Windows I/O Manager。该组件负责管理所有的 I/O 操作。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-b57a140b1efff9c20e1868dcd2ae1dbe89a.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;接下来，Windows I/O Manager 会将这些 I/O 操作转换为 Windows I/O Request Package（IRP），然后将其转发到文件系统驱动层。此处简化了部分层级，最终这些请求会传递到文件系统驱动层，具体来说就是 WinFsp 文件系统驱动。&lt;/p&gt; 
&lt;p&gt;当文件系统驱动接收到请求时，它会将请求转发给 WinFsp 的 DLL。这个 DLL 承担了与 Windows 系统内核数据进行接口转换的责任。&lt;/p&gt; 
&lt;p&gt;在我们 JuiceFS 的实现中，应用程序通过链接 WinFsp DLL 来处理 I/O 请求。当 Windows I/O 请求被传递到 DLL 时，WinFsp 会将其转换为 FUSE 接口，并通过 Windows FUSE 兼容层，进行回调处理。绝大部分的工作集中在这一层，包括 bug 修复和性能优化。&lt;/p&gt; 
&lt;p&gt;处理完这些操作后，最终的请求会交给 JuiceFS 核心 VFS（虚拟文件系统）层，核心 VFS 负责执行具体的文件系统逻辑和请求处理。&lt;/p&gt; 
&lt;h3&gt;还有 4 个困难&lt;/h3&gt; 
&lt;h4&gt;1. Unix vs Windows&lt;/h4&gt; 
&lt;p&gt;尽管 WinFsp 已经帮助我们将 I/O 请求转换为 FUSE 接口，但我们依然需要面对 Unix 和 Windows 之间的本质性差异。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;权限管理差异&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;例如，Linux 中的文件权限（可读、可写、可执行等）和扩展权限（如 ACL）与 Windows 中的权限模型完全不同。Windows 使用 DACL（Discretionary Access Control List）进行权限定义，同时支持权限继承，这与 Unix 的权限模型有很大差异。因此，虽然 WinFsp 处理了一部分权限的转换，但我们仍需解决如何将这两种，权限体系进行有效映射，以便更好地支持 Windows 应用。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;系统特性的差异&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Unix 和 Windows 在文件系统特性方面也存在较多的本质差异。诸如硬链接、软链接、挂载方式、目录长度、字符限制等、文件属性等，而我们的 JuiceFS 核心文件系统是基于 Unix 的文件系统设计，因此我们需要解决或者绕开这些差异，以确保在 Windows 平台上也能正常运行。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;API 差异&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Unix 和 Windows 在系统 API 上也有许多差异，尽管我们使用了 Go 语言来简化部分 API 差异的处理，但依然存在一些需要手动解决的情况。例如，获取 UID 和 GID 等信息，在 Windows 系统中并没有直接的对应方式。虽然 Go 语言在跨平台处理上做了很多优化，但一些特定的系统 API 仍然需要我们自行处理这些差异，确保系统的兼容性和稳定性。&lt;/p&gt; 
&lt;h4&gt;2. Linux FUSE vs WinFsp FUSE&lt;/h4&gt; 
&lt;p&gt;之前，JuiceFS 一直与 low-level FUSE 接口进行对接，而 WinFsp FUSE 则是一个 high-level FUSE 接口，这两者存在本质的区别。&lt;/p&gt; 
&lt;p&gt;首先，low-level FUSE 通常使用 inode 作为回调参数，而高级 FUSE 则主要使用路径作为回调参数，这是两者的一个显著差异。然而，差异不仅限于此。&lt;/p&gt; 
&lt;p&gt;尽管 WinFsp 提供了一个 high-level 的 FUSE 回调接口，但其实现逻辑并未完全遵循 Linux 中 libfuse 的实现方式。因此，在使用 WinFsp FUSE 时，我们常常会遇到一种情况：在 Linux 中，某些行为表现得很自然和一致，完全如 FUSE 文档所述的一致，但在 WinFsp 中，这些行为的回调逻辑却有所不同。这使得我们需要特别注意并解决这些平台之间的行为差异。&lt;/p&gt; 
&lt;h4&gt;3. 黑盒的 Windows 内核&lt;/h4&gt; 
&lt;p&gt;在开发过程中，我们还需要面对一个，黑盒的 Windows 内核。由于 Windows 内核没有开源，且相关文档资料非常有限，调试和观察 Windows 内核的行为变得较为困难。这使得整个开发过程充满了不确定性，对于开发人员来说，Windows 内核的工作机制就像一个封闭的黑盒，需要通过不断的实验和反向工程来理解和适应。&lt;/p&gt; 
&lt;h4&gt;4. 有限的 FSD 文档资源&lt;/h4&gt; 
&lt;p&gt;除了 Windows 内核本身的黑盒特性外，关于文件系统驱动（FSD）的文档资源也非常有限。微软并未公开完整的 Windows 内核开发文档，很多 API 仅由第三方整理，官方文档稀缺。事实上，唯一一本专注于 Windows 文件系统驱动的书籍是 1997 年出版的 《Windows NT File System Internals: A Developer's Guide》。尽管该书中包含大量错误（多数是由于不适用于当前版本），直到今天，Windows 文件系统驱动的开发者仍然只能依赖这本书作为参考。这些有限的文档资源使得我们在排查问题和理解 Windows 文件系统行为时，必须付出更多的时间和精力来收集资料并进行学习。&lt;/p&gt; 
&lt;h2&gt;03 做到了哪些？&lt;/h2&gt; 
&lt;p&gt;接下来，我们将介绍我们在 Beta 版本中进行的具体工作。主要可以分为两个部分：JuiceFS 端的工作以及 WinFsp 端的工作。&lt;/p&gt; 
&lt;h4&gt;1. JuiceFS 部分&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;工具集&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;首先，工具集在我们日常使用 JuiceFS 时至关重要。使用者在部署之后，都需要借助工具集来进行性能测试、监控等操作。例如，最基本的性能测试通常会运行 bench 命令。然而，在早期版本中，这个命令在 Windows 平台上无法运行，系统会提示命令不支持 Windows。&lt;/p&gt; 
&lt;p&gt;此外，挂载文件系统后，我们通常需要观察一些关键的性能指标，例如原始数据的延迟、吞吐量、对象存储的表现，以及分布式缓存的吞吐量等。然而，在之前的版本中，这些监控功能也无法正常使用，系统会提示无法打开 &lt;code&gt;.control&lt;/code&gt; 文件。&lt;/p&gt; 
&lt;p&gt;JuiceFS 1.3 和，企业版 5.2 中，这些问题都得到了修复。目前，工具集已经从几乎完全不可用，发展到了基本可用的状态。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;API 兼容性&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在早期版本中，一些用户可能会遇到问题，特别是当将 JuiceFS 用作 Git 目录时。有些用户发现直接执行 Git 命令时，操作无法正常执行。问题的主要原因在于错误码的处理不兼容 Windows 系统。我们没有像 Windows 本身那样处理特定的错误码，导致应用程序依赖于某些特定错误码时无法正常工作。这一部分主要涉及到 API 兼容性，的改进。&lt;/p&gt; 
&lt;p&gt;此外，早期版本中还可能出现挂载状态异常的情况。例如，挂载过程完成后，系统提示挂载失败，实际上文件系统已经挂载；或是挂载成功的提示显示不正确。在当前的 Beta 版本中，我们已经对这些行为进行了修复和优化，包括 Git 命令相关的错误。&lt;/p&gt; 
&lt;p&gt;本质上，Linux 和 Windows 在错误码方面的差异是难以完全匹配的，因此实现 100% 的一致性非常困难。尽管如此，我们依然通过持续的反馈和改进，不断优化这些兼容性问题，力求提供更稳定的 Windows 版本。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;User/permission&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在早期版本中，我们的权限管理还存在一些模糊之处。比如，当用户 A 设置了某些权限或在其他区域设置了权限时，我们并没有清晰的预期和统一的处理方式。这导致了一些问题，例如，用户 A 挂载了文件系统后，他希望同事能够读取文件，但当时我们没有明确的方案来处理这种情况。为了实现文件共享，我们曾使用一个名为 as-root 的参数，将所有用户权限提升为 root 权限，这种做法虽然能暂时解决问题，但并不理想。&lt;/p&gt; 
&lt;p&gt;而在 Beta 版本中，我们对权限管理进行了优化。重新设计了权限机制，明确了权限管理的目标，确保在 Windows API 的正常工作下，尽可能地与 POSIX 行为保持一致。具体来说，我们在没有开启 UID 映射的情况下，确保 Linux 用户的 UID（如 1001）能够在 Windows 系统中正确映射和共享，保证相同 UID 的用户被视为相同的用户。&lt;/p&gt; 
&lt;p&gt;此外，如果启用了 UID 映射功能，这是一个更为复杂的话题，但我们也将提供支持。总之，我们的目标是确保 Windows 系统的权限管理尽可能与 POSIX 行为一致，为用户提供更清晰、可靠的权限控制。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;挂载相关&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在早期版本中，挂载操作只能在前台进行，无法支持后台挂载。这导致了一个问题：如果用户希望后台挂载文件系统以便共享给其他用户，他们不得不依赖第三方工具或手动配置。例如，他们可能需要使用微软自带的命令行工具来创建系统服务，或者手写 YAML 配置文件，这样的过程既繁琐又容易出错。&lt;/p&gt; 
&lt;p&gt;在 JuiceFS 1.3 和，企业版 5.2 中，我们解决了这一问题，直接支持了后台挂载。与 Linux 版本一致，用户可以通过 &lt;code&gt;-d&lt;/code&gt; 参数在社区版中实现后台挂载，而企业版默认支持后台挂载。如果用户需要前台挂载，则可以使用 &lt;code&gt;-f&lt;/code&gt; 参数。&lt;/p&gt; 
&lt;p&gt;此外，过去的社区版也不支持将同一个文件系统挂载到多个盘符上。现在，在，企业版，中，我们已实现了这一功能，允许用户将同一个文件系统挂载到多个盘符上。目前，这项功能仅在企业版中可用。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;性能提升&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在早期版本中，存在一个广泛且严重的问题，那就是小文件的读写性能非常差，文件属性的读取效率也很低。&lt;/p&gt; 
&lt;p&gt;在 JuiceFS 1.3 和，企业版 5.2 版本中，我们进行了大幅优化，显著提升了小文件的读写性能。具体的优化进展可以通过 bench 工具来测试和反馈，该工具能够提供关于大文件和小文件的读写性能指标。&lt;/p&gt; 
&lt;p&gt;以阿里云上一个 88 核 16 GB 的机器为例，使用阿里云的 Redis 和自建的 MinIO 进行性能测试。在默认命令行参数下，我们发现小文件的写入性能接近 1.2 版本，而小文件的读取性能则有了显著提升：从 1.2 版本，的每秒 200 个小文件提升至 1.3 版本，的每秒接近 1000 个小文件。&lt;/p&gt; 
&lt;p&gt;此外，文件属性的读取性能也得到了优化。过去每秒大约只能获取 200 个文件属性，而现在可以达到 4500 次每秒。当然，这一结果受缓存的影响，实际性能可能会有所波动，但总体上优化效果非常显著。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-e99aa801f3ab93281f35c83c5641a364771.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;另一项重要的优化涉及路径深度的影响。在 1.2 版本，中，当文件路径深度增加时，性能急剧下降。例如，在三层目录的情况下，读取小文件的性能大幅下降，可能每秒只能读取几十个小文件。而在 1.3 版本，中，即使路径深度达到三层，性能几乎没有显著变化，保持了稳定的表现。这一改进确保了用户在使用过程中，不会因为创建更多目录而导致性能下降。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-d3ecb240d7be9c8504d22847a6baebef086.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;其他优化与修复&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;子目录挂载和文件重命名操作在之前的版本中可能无法正常进行，尤其是在重命名时，常常会遇到一些难以解释的错误，导致操作无法完成。现在，这些问题已经得到了优化和修复。此外，可能还有一些其他因素未在此列出，仍在持续改进中。&lt;/p&gt; 
&lt;h3&gt;2. FSD 相关问题修复与定位&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;POSIX 文件权限映射&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在之前的版本中，我们遇到一个与文件权限映射相关的问题，尤其是 0666 权限设置。根据 POSIX 标准，0666 权限意味着文件对于所有用户都是可读可写的。然而，在 Windows 上，即使我们为某个文件设置了 0666 权限，Everyone 组（即所有用户）仍然无法进行覆盖写操作。&lt;/p&gt; 
&lt;p&gt;这个问题的根本原因在于 WinFsp 目前没有完全处理这些权限映射。即使在 Windows 上设置了类似的权限，实际上它并不会如 POSIX 系统那样让所有用户都能够读取和写入文件。&lt;/p&gt; 
&lt;p&gt;目前，WinFsp 的版本仍然存在这个问题，我们已经向上游提交 PR 来修复这个问题，期望能够使 Windows 上的行为与 POSIX 系统一致，确保在 Windows 平台上也能正确地处理文件权限。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;close to open 一致性&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;默认情况下，JuiceFS 遵循 close-to-open 一致性模型，这意味着在文件关闭之后，下次打开该文件时，用户能够看到之前写入的数据，即使是在不同的机器上也是如此。&lt;/p&gt; 
&lt;p&gt;然而，在 WinFsp 及 Windows 系统中，文件关闭的处理方式与此不同。WinFsp 的默认行为并不会在文件关闭时，异步等待 FUSE 应用程序处理完数据。具体来说，当应用程序调用 CloseHandle 关闭文件句柄时，经由 WinFsp 的 Windows 应用程序并不会阻塞在 CloseHandle 的调用处，而是直接返回，哪怕本地还有未上传至云端的数据。这种方式导致了 close-to-open 一致性无法得到保证，甚至本机用户，在下一次打开此文件时，依旧可能读取到的是错误的文件长度信息。&lt;/p&gt; 
&lt;p&gt;为了解决这个问题，我们已经向 WinFsp 的源代码做出相应调整，以确保在 Windows 平台上也能够维持 close-to-open 一致性，确保数据的同步和一致性不受影响。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;内核 cache manager 使用&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 WinFsp 的处理过程中，默认情况下它并未利用内核的 Cache Manager，这直接导致了文件读取性能较差。Cache Manager 通常会负责缓存和预读操作，这有助于提升文件系统的读取效率。然而，在 WinFsp 的默认配置下，Cache Manager 并未得到有效利用，从而影响了系统的性能表现。&lt;/p&gt; 
&lt;p&gt;为了解决这一问题，我们在 FSD 层面进行了问题定位和修复，并研究了如何在 WinFsp 中正确启用 Cache Manager。我们的目标是通过正确启用和配置缓存管理，显著提升文件读取性能，并优化系统的整体表现。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-5e3109a0cee8c5df150e577ae7e76e404f0.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;03 未来计划&lt;/h2&gt; 
&lt;p&gt;我们将持续聚焦 Windows 客户端的可用性，包括 bug 修复、功能扩展以及对软链接（symlink）的支持；性能提升也是我们不断努力的方向。随着使用场景日益复杂，数据规模不断扩大，且涉及的技术点较为广泛，Windows 客户端，的优化将是一个长期过程。&lt;/p&gt; 
&lt;p&gt;此外，许多用户反馈希望能够与 AD 域账号进行集成。在 Windows 环境下，与 AD 域账号的绑定将是一个非常实用的特性，我们正在研究这一需求。如果大家有相关的建议或希望实现的功能，欢迎与我们讨论。&lt;/p&gt; 
&lt;p&gt;最后，感谢大家对 Windows 版本的支持，欢迎大家体验和反馈，希望我们能为大家提供更好的使用体验。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相关阅读推荐&lt;/strong&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuicefs.com%2Fzh-cn%2Fblog%2Fsolutions%2Fjuicefs-windows--performance-test" target="_blank"&gt;3000 台 JuiceFS Windows 客户端性能评估&lt;/a&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuicefs.com%2Fzh-cn%2Fblog%2Fsolutions%2Fbuilding-high-throughput-cache-pool-resilience-with-juicefs" target="_blank"&gt;从资源闲置到弹性高吞吐，JuiceFS 如何构建 70GB/s 吞吐的缓存池？&lt;/a&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/5389802/blog/18691611</link>
      <guid isPermaLink="false">https://my.oschina.net/u/5389802/blog/18691611</guid>
      <pubDate>Fri, 12 Sep 2025 10:15:00 GMT</pubDate>
      <author>原创</author>
    </item>
  </channel>
</rss>
