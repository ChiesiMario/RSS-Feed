<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 简体中文</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 18 Aug 2025 03:30:16 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>我国首个法律垂直大模型「小包公」发布</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;span style="color:#000000"&gt;我国首个法律领域垂直大模型「小包公法律内容大模型」于日前发布。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;该模型由华南师范大学法学院王燕玲教授团队研发，已通过国家互联网信息办公室深度合成服务算法备案，采用「先进通用大模型+专业垂直大模型」双引擎架构，深度整合 2 亿余份裁判文书、420 万余部法律法规，结合法律知识图谱和检索增强生成技术，可在全法律场景提供可溯源、可验证的精准服务。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="335" src="https://oscimg.oschina.net/oscnet/up-324a218385c3269f90403dec94cebed6441.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;王燕玲介绍，该模型具备动态学习机制，能根据实践反馈持续迭代，以法律为准绳动态干预回答准确性，目前已在广东、安徽等地司法实践中广泛应用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在非法采矿等公益诉讼案件办理中，系统可通过人物关系图谱排查涉案人员；在刑事审查环节，12 类典型案件的办案人员输入完整卷宗后，系统能自动生成分析报告与相关文书，有效提升阅卷与量刑分析效率。现场嘉宾指出，法律 AI 的普及将缓解我国法律服务资源分布不均问题——当前全国 70 万名执业律师主要集中于东部发达地区，西部部分县域无律师事务所，智能系统可成为普惠法律服务的重要补充。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在基层司法实践中，大模型的赋能效果已逐步显现。据介绍，湛江市司法局引入「小包公」智能行政复议一体化系统后，在当事人材料齐全的情况下，案件焦点识别准确率达 100%，证据识别采信准确率约 95%，文书撰写时间缩减 75%，成为全国首个在两级司法局运用司法大模型赋能行政复议工作的城市。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;安徽怀宁检察院自 2018 年开展认罪认罚精准量刑试点以来，运用该系统生成的量刑建议采纳率超过 99%；清远市人民检察院借助系统人物关系图谱，成功识别传统办案中易遗漏的涉案人员，检察官 AI 工具使用率达 100%。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366880</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366880</guid>
      <pubDate>Mon, 18 Aug 2025 03:25:15 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>虚引用 GC 耗时分析优化（由 1.2 降低至 0.1 秒）</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;线上应用频繁出现超时告警（超时时间 1 s）： getUiToken 接口异常状态码「-1」出现 4037 次 (失败描述:业务请求异常)，超过阈值 50，协议：http，为服务端接口。当前失败率为 0%，当前平均响应时间为 150ms，TP50 为 2ms,TP90 为 896ms，TP99 为 1024ms,TP999 为 1152ms,MAX 为 1280ms。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_2"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;环境信息&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;div&gt; 
 &lt;span style="color:#000000"&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;服务器配置为，Linux 4c8g 标配机器&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="color:#000000"&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;JVM 参数配置：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;-server -Djava.library.path=/usr/local/lib -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/export/log -Djava.awt.headless=true -Dsun.net.client.defaultConnectTimeout=60000 -Dsun.net.client.defaultReadTimeout=60000 -Djmagick.systemclassloader=no -Dnetworkaddress.cache.ttl=300 -Dsun.net.inetaddr.ttl=300 -Xms5G -Xmx5G -XX:+UseG1GC -XX:G1HeapRegionSize=4m -Xloggc:/export/log/$APP_NAME/gc_detail.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=10m -XX:MaxTenuringThreshold=15 -XX:+PrintTenuringDistribution -XX:+PrintHeapAtGC&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;div&gt; 
 &lt;span style="color:#000000"&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;接口流量情况：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//c8ebd5b4ebdc22b41187bcf663870fbd.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h1_3"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;问题排查&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;分析代码实现，getUiToken 只是简单的内存数据获取并返回，没有其他复杂操作，不存在有耗时操作&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//7d264c94f843fd53fefc04a5ec2b61cf.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;接着借助 SGM 监控平台分析下接口耗时情况，发现方法执行的耗时都处在等待中，为什么会有这多长的等待时间呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//1c5605b1f1d9d9253dc8ed6c54437413.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;业务代码很简单，只是内存级别的获取，序列化和反序列化也不可能耗时这么久， 难道是 GC 的原因 ？ 因为 JVM 之前就配置了 -Xloggc 日志输出，所以先分析下 GC 日志情况，看看 GC 是否存在异常情况（工具 gcViewer）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//a9062cc1660d6f240fa4e602a7cadd85.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;果然，光看吞吐量 99.3% 和 full gc 次数 0，感觉性能好像还不错的，但 4227 次 young gc （平均 20 多秒一次） 和 max 1.25 秒的耗时，就有点离谱，分析 GC 日志详情&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//c7163e4712619389f5446972e0f165f0.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;随机搜查了一个 GC 耗时在 1s 以上的日志，发现 1.02 s 的 gc 有 977.3 ms 是在处理 Ref Proc，为什么这个耗时会这么长 ？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;ref-proc 是对各种软弱虚引用等的处理，处理 soft、weak、phantom、final、JNI 等等引用的时间&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;具体是那种引用类型的耗时长，可以通过增加 JVM 参数 -XX:+PrintReferenceGC 打印引用 GC 类型 ，重新上线一段时间后观察 GC 日志&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//557127b6d3daf4dcb964809775d3d0d6.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;发现耗时基本都在 PhantomReference 类型的对象上，为什么会有这么多这个对象？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;PhantomReference 是什么？ 1、虚引用也称为「幽灵引用」，它是最弱的一种引用关系。 2、如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。 3、为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。 4、当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在垃圾回收后，将这个虚引用加入引用队列，在其关联的虚引用出队前，不会彻底销毁该对象。所以可以通过检查引用队列中是否有相应的虚引用来判断对象是否已经被回收了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;为了搞清楚 PhantomReference 具体都是哪些对象，我们需要 dump 堆文件查看对象的分布（内存分析工具 MAT），dump 时最好将流量摘除后操作，以免影响线上。查看直方图中的对象发现有 4340 个虚引用对象，和 GC 日志中的数量基本对的上。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//5bdbcf18eaa7f63199e2311d76f088ab.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;那为什么会有这么多 ConnectionPhantomReference 对象呢 ？ 这个东西有什么用呢 ？ 源码如下 （mysql-connector-java 版本 5.1.44）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 相关的核心逻辑&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NonRegisteringDriver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;implements&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;java.sql.Driver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;final&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;ConnectionPhantomReference, ConnectionPhantomReference&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; connectionPhantomRefs &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;ConnectionPhantomReference, ConnectionPhantomReference&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;final&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ReferenceQueue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;ConnectionImpl&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; refQueue &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ReferenceQueue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;ConnectionImpl&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;trackConnection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; newConn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionPhantomReference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; phantomRef &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionPhantomReference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionImpl&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; newConn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; refQueue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        connectionPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;put&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;phantomRef&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; phantomRef&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionImpl&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;extends&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionPropertiesImpl&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;implements&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;MySQLConnection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionImpl&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;String&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; hostToConnectTo&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; portToConnectTo&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Properties&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; info&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;String&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; databaseToConnectTo&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;String&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; url&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;SQLException&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NonRegisteringDriver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;trackConnection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通过代码发现，每次新建数据库连接 Connection 时都会向 connectionPhantomRefs 存放一个对象，那么已经使用 druid （版本：1.0.15）线程池为什么还会生成这么多新链接 ？ 接着查看项目中的数据库配置，发现数据源使用的是默认配置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;# 线程池使用的默认配置
spring:
  datasource:
    url: jdbc:mysql://xxxxxxxxx?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;allowMultiQueries=true&amp;amp;serverTimezone=GMT%2B8
    username: xxxx
    password: xxxx
    driver-class-name: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//e1d56e1b7808007139709112a2545684.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;默认配置中，线程池中的连接存活时间为 30 分钟，最小闲置线程数为 0，因此虽使用了线程池也还是会不断的创建新的链接，并增加到 connectionPhantomRefs 集合中，累计一定量之后就会影响 ref-proc 耗时。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_4"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如何解决 ？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;既然因为它累计的量大导致 gc 时长变高，那么我们分析下 connectionPhantomRefs 的作用到底是什么 ？ &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;跟进 connectionPhantomRefs 引用处理对象，发现 connectionPhantomRefs 中的元素都是被 AbandonedConnectionCleanupThread 处理的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;/**
 * This class implements a thread that is responsible for closing abandoned MySQL connections,
 * i.e., connections that are not explicitly closed. 
 * There is only one instance of this class and there is a single thread to do this task. 
 * This thread's executor is statically referenced in this same class.
 *
 * 该类实现了一个负责关闭被遗弃的 MySQL 连接的线程，即未显式关闭的连接。该类的实例只有一个，并且由单个线程执行此任务。该线程的执行器在此类中以静态方式引用。
 */&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;AbandonedConnectionCleanupThread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;implements&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Runnable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;final&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ExecutorService&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; cleanupThreadExcecutorService&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; threadRef &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        cleanupThreadExcecutorService &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Executors&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;newSingleThreadExecutor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ThreadFactory&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;newThread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Runnable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; r&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; t &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;r&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"Abandoned connection cleanup thread"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;setDaemon&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;setContextClassLoader&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;AbandonedConnectionCleanupThread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;getClassLoader&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; threadRef &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        cleanupThreadExcecutorService&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;execute&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;AbandonedConnectionCleanupThread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;run&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;try&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;checkContextClassLoaders&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;? extends ConnectionImpl&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ref &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NonRegisteringDriver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;refQueue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;remove&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;5000&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ref &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;try&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionPhantomReference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;cleanup&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NonRegisteringDriver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;connectionPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;remove&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;InterruptedException&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; e&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                threadRef &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Exception&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ex&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;// Nowhere to really log this.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;根据 com.mysql.jdbc.AbandonedConnectionCleanupThread 类注释信息，发现该类是 mysql 连接的兜底处理逻辑，负责关闭被遗弃的 MySQL 连接，主要有两种情况&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1. 未显式关闭的连接（代码遗漏）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2. 异常未处理的连接（程序崩溃/未捕获异常/网络或事务超时导致的连接失效）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_5"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;解决方案&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1. 优化 druid 连接池连接数配置 （按实际流量情况评估），增加连接存活时长到 59 分钟（&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;MySql wait_timeout 默认为 3600 秒&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;），最大限度减少新连接生成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;spring:
  datasource:
    url: jdbc:mysql://xxxxxxxxx?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;allowMultiQueries=true&amp;amp;serverTimezone=GMT%2B8
    username: xxxx
    password: xxxx
    driver-class-name: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 增加线程数
      minIdle: 4
      maxActive: 10
      initialSize: 4
      # 启动检测线程回收
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      validationQuery: select 1
      timeBetweenEvictionRunsMillis: 60000
      minEvictableIdleTimeMillis: 3540000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2. 开启 ref-proc 并行处理：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#f3f5f9; color:#0abf5b"&gt;-XX:+ParallelRefProcEnabled&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; ，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt; G1 官网建议&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;Reference Object Processing Takes Too Long Information about the time taken for processing of Reference Objects is shown in the Ref Proc and Ref Enq phases. During the Ref Proc phase, G1 updates the referents of Reference Objects according to the requirements of their particular type. In Ref Enq, G1 enqueues Reference Objects into their respective reference queue if their referents were found dead. If these phases take too long, then consider enabling parallelization of these phases by using the option &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#ff4d4f"&gt;-XX:+ParallelRefProcEnabled.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3. 由于 connectionPhantomRefs 只是作为异常情况出现的兜底处理，我们项目中使用的线程池都会自动处理资源释放的情况，不存在手动操作的情况，是不是可以定时清理这部分的内容或者不使用，目前使用最多的两种方式是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;定时任务：清理虚引用列表数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;CleanPhantomRefsSchedule&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;final&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ScheduledExecutorService&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; CLEANER_EXECUTOR &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Executors&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;newSingleThreadScheduledExecutor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;r &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; t &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;r&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"mysql-phantom-ref-cleaner"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;setDaemon&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;@PostConstruct&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;doTask&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;info&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"CleanPhantomRefsSchedule#doTask start"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;try&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Field&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; field &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NonRegisteringDriver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;getDeclaredField&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"connectionPhantomRefs"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            field&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;setAccessible&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;// 定时轮训&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            CLEANER_EXECUTOR&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;scheduleAtFixedRate&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;try&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Map&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?, ?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; connectionPhantomRefs &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Map&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?, ?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; field&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;get&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;// 这里我设置的稍微大一些，对 gc 没太大影响时不进行干预&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                   &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;connectionPhantomRefs &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; connectionPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;size&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;500&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                        connectionPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;clear&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                        log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;info&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"Cleared MySQL phantom references (count={})"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; connectionPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;size&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Exception&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; e&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;error&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"connectionPhantomRefs clear error!"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; e&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;TimeUnit&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;HOURS&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NoSuchFieldException&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; e&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;IllegalStateException&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"Failed to initialize MySQL phantom refs field"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; e&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;@PreDestroy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;shutdown&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        CLEANER_EXECUTOR&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;shutdownNow&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;升级 mysql-connector-java 版本（8.0 以上），可以通过参数 -Dcom.mysql.cj.disableAbandonedConnectionCleanup=true 禁用虚引用生成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;abandonedConnectionCleanupDisabled&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;getBoolean&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"com.mysql.cj.disableAbandonedConnectionCleanup"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;trackConnection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;MysqlConnection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; conn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NetworkResources&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; io&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;!&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;abandonedConnectionCleanupDisabled&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;···
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionFinalizerPhantomReference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;reference&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionFinalizerPhantomReference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;conn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;io&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;referenceQueue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;connectionFinalizerPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;add&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;reference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;···&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我采用的是定时任务这种方式，因为项目升级 mysql-connector-java 版本会存在兼容性问题，其次是在虚引用量比较小的情况我希望这种兜底策略依旧可以生效，所以定时任务中只有在 connectionPhantomRefs.size() &amp;gt; 500 时才会干预清理，而不是直接杜绝使用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_6"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;验证优化结果&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;代码及配置调整完成后再次上线，等待一天后，继续分析 GC 日志和堆转储文件 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//6440df82f8599d87cc53b61026e84e84.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//c58d0dbaaa585a67a28e5d7e697da2e7.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//5f41e588501b799ae57e534b121b6004.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;结论：上线后近 12 小时数据，GC 时间最大停顿时间由原先 1.25 降低至 0.1 秒，young gc 频率由原先的 20 秒一次优化到 6 分钟一次，PhantomReference 引用耗时缩减到 0.0001966 s， 持续观察几天，线上服务无超时告警且系统响应正常，优化符合预期结果。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4090830/blog/18688164</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18688164</guid>
      <pubDate>Mon, 18 Aug 2025 03:08:48 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>360 官宣「All in Agent」战略</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;在日前举办的 360 集团 20 周年荣耀庆典上，创始人周鸿祎发布 360 集团下一阶段的公司战略：All In Agent。&lt;/p&gt; 
&lt;p&gt;周鸿祎表示，AI 的巨大机遇就在眼前，智能体将带来个人角色和组织形态的重塑，当前正是重新出发、转向新赛道的时刻，All in Agent 就是 360 的明确路线图。周鸿祎勉励全体员工要上下同心，坚定聚焦，力争实现 「三个超级」：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;一是鼓励 360 全员建立 AI 信仰、培养 AI 素养，思考「如何用智能体放大自身价值」，全员都要学会使用、搭建、管理、监督、领导智能体，与智能体深度协同，每个人都可以把自己打造成超级个体、超级员工；&lt;/li&gt; 
 &lt;li&gt;二是要求全公司各业务线、各部门以智能体化率衡量所有业务流程、岗位职能的进化水平，打造超级团队、超级组织；&lt;/li&gt; 
 &lt;li&gt;三是用智能体重塑公司所有产品。在软件开发 3.0 时代，新产品必须以智能体为范式进行功能开发，已在运营、服务的产品，必须以智能体进行重塑。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;为适配「All in Agent」战略，360 全面升级使命、愿景与价值观：使命升级为「让 AI 世界更安全更美好」，愿景升级为「成为最安全的 AI 创新者」，核心价值观聚焦「用户为先、始终创业、持续创新、追求卓越、协作律己」五大维度。&lt;/p&gt; 
&lt;p&gt;&lt;img height="275" src="https://oscimg.oschina.net/oscnet/up-3c375902fe76b5eb714c9f20f3d280a7e19.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;同时，周鸿祎公布了公司在智能体领域的技术突破：目前纳米 AI 已实现 L3 级推理型智能体连续执行 100 步任务 0 出错、单次消耗 Token100 万、调用 100+工具，任务成功率达 98.2%。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366872</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366872</guid>
      <pubDate>Mon, 18 Aug 2025 02:58:48 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>2025 Gtest 全球软件测试技术峰会售票进行中，前沿技术等你解锁！</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Gtest 大会，测试人的年度盛宴！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;为促进测试技术与行业应用的深度交流，2025 年 9 月 5 日-9 月 6 日，「全球软件测试技术峰会」（简称：Gtest）将在北京市丽亭华苑酒店举办。本届峰会将聚集超 500 位来自&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;测试、质量、大模型、开源测试工具等&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;领域的行业专家、技术负责人及一线工程师，构建多元化交流与合作平台。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="312" src="https://oscimg.oschina.net/oscnet/up-c7ebd1f7f5fb6544dff1a03652ee9ed5dc7.png" width="554" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;这是一场面向全球测试领域的顶尖技术峰会，如果您关注：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;·&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;大模型与智能测试的结合模式与落地实践&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 银行、保险等典型行业测试技术的趋势与创新路径&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 证券、游戏等行业领域从业者的实战经验与方法论&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 行业标杆企业的测试技术与管理案例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 测试团队的组织与效率优化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;本次峰会将为您提供深入交流与学习的契机。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;参会您将收获&lt;/strong&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 了解软件测试领域的前沿技术应用与创新趋势&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 参考行业企业的真实业务实践案例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 建立与测试行业从业者及专家的专业联系&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 掌握软件测试行业的发展动态与方向&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;精彩议题抢先看：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="4618" src="https://oscimg.oschina.net/oscnet/up-2545d00b1641a0a012ed7449712f41ab33c.png" width="1712" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;时间：2025 年 9 月 5 日-9&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;月&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;日&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;地点：北京丽亭华苑酒店 (北京市海淀区知春路 25 号)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;席位有限，速来锁定你的年度技术盛会！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;立即购票&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gtest.net.cn%2Fbuy%2F" rel="nofollow" target="_blank"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;https://www.gtest.net.cn/buy/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4806939/blog/18688477</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4806939/blog/18688477</guid>
      <pubDate>Mon, 18 Aug 2025 02:53:48 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>Valkey 9.0.0-rc1 发布，Linux 基金会维护的 Redis 分支</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;Valkey 9.0-rc1 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fvalkey-io%2Fvalkey%2Freleases%2Ftag%2F9.0.0-rc1" target="_blank"&gt;已发布&lt;/a&gt;，新版本带来了显著的性能提升，尤其是在使用 SIMD 指令（AVX2、AVX-512、ARM NEON、SSE2）优化关键路径（如 &lt;code&gt;BITCOUNT&lt;/code&gt;、字符串-整数转换、&lt;code&gt;findBucket&lt;/code&gt;）方面。其新增的集群功能（如多数据库支持与 MPTCP、多功能迁移等）也为未来版本奠定了功能基础。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-7f654be54bf7014a9538ed8834ed0250832.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-e8293973af2307d31e62eb3559de25b78ea.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Valkey 9.0-rc1 亮点&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;AVX2 优化 &lt;code&gt;BITCOUNT&lt;/code&gt; 命令&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;在 1 MB 值上使用 SIMD AVX2 优化，性能提升达 &lt;strong&gt;+514%&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;在 4 KB 值上有约 &lt;strong&gt;+10%&lt;/strong&gt; 的提升，在 64 KB 值上提升达 &lt;strong&gt;+116%&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;利用 AVX-512 提升字符串到整数转换性能&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;通过 AVX-512 指令，字符串-整数转换性能提升约 &lt;strong&gt;17–19%&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;其它性能优化&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;增强复制（replication）的稳定性&lt;/li&gt; 
   &lt;li&gt;ARM NEON SIMD 优化 &lt;code&gt;BITCOUNT&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;SSE2 SIMD 加快 &lt;code&gt;findBucket&lt;/code&gt;，提升最高达 &lt;strong&gt;6%&lt;/strong&gt;&amp;nbsp;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Valkey 9.0 中引入的新增功能（计划）&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;集群模式下的多数据库支持&lt;/li&gt; 
   &lt;li&gt;Multi-Patch TCP (MPTCP) 支持&lt;/li&gt; 
   &lt;li&gt;原子槽迁移（atomic slot migration）&lt;/li&gt; 
   &lt;li&gt;以及其他功能改进&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下载地址：&lt;em&gt;https://valkey.io/download/releases/v9-0-0-rc1/&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366870/valkey-9-0-0-rc1-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366870/valkey-9-0-0-rc1-released</guid>
      <pubDate>Mon, 18 Aug 2025 02:47:04 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Cline v3.25 正式发布，引入 Deep Planning、Focus Chain 和 Auto Compact 三大协同机制</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;Cline v3.25 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcline.bot%2Fblog%2Fcline-v3-25" target="_blank"&gt;已正式发布&lt;/a&gt;，新版本通过引入 Deep Planning、Focus Chain 和 Auto Compact 三大核心系统，以解决大语言模型（LLMs）在多轮长对话中因上下文累积导致的「中间遗忘」&amp;nbsp;("lost in the middle") 和性能衰退问题。&lt;/p&gt; 
&lt;p&gt;这三大系统如同一个分工明确的团队：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Deep Planning 负责「战略规划」与上下文压缩；&lt;/li&gt; 
 &lt;li&gt;Focus Chain 保持「战术执行」的一致性；&lt;/li&gt; 
 &lt;li&gt;Auto Compact 则负责「战场清理」，确保资源高效流动。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;p&gt;文章指出，当任务变得越来越复杂且涉及多轮交互时，LLM 的性能会显著下降。这并非仅仅因为上下文长度不足，而是「中间内容」的噪音逐渐掩盖了原始任务意图，从而引发语义偏离或幻觉。&lt;/p&gt; 
&lt;p&gt;为了解决「长上下文多轮任务偏离」的问题，Cline v3.25 引入了三大协同机制：&lt;/p&gt; 
&lt;h3&gt;1. &lt;strong&gt;Deep Planning&lt;/strong&gt; — 打好基础，避免污染&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;使用 &lt;code&gt;/deep-planning&lt;/code&gt; 命令后，Cline 会先非冗余地全面探索项目（grep、分析依赖、阅读文件等），构建项目「心智模型」。&lt;/li&gt; 
 &lt;li&gt;接着向用户提问澄清歧义，并生成统一的 &lt;code&gt;implementation_plan.md&lt;/code&gt;，保存到项目根目录。&lt;/li&gt; 
 &lt;li&gt;最后，启动一个全新任务，仅载入核心上下文（关键文件 + 计划文件），避免早期探索中的多余噪音污染实现阶段。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;这样，实施阶段从一个纯净、高价值的上下文切入，从而维持最优性能。&lt;/p&gt; 
&lt;h3&gt;2. &lt;strong&gt;Focus Chain&lt;/strong&gt; — 稳定任务方向&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;默认启用，Cline 自动从任务中生成待办清单（todo list），并每 &lt;strong&gt;六条消息&lt;/strong&gt;定期注入上下文中，以提醒自己当前进度与目标。&lt;/li&gt; 
 &lt;li&gt;待办清单内容会随着任务进展自动更新：完成项被标记、新任务加入、优先级调整，确保模型不会偏离主线 。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. &lt;strong&gt;Auto Compact&lt;/strong&gt; — 自动压缩上下文，延续任务&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;当上下文接近极限时，Cline 会自动总结当前会话的关键内容（技术决策、代码变化、进度等），并将其压缩为摘要，替换掉膨胀的历史记录，然后继续任务。&lt;/li&gt; 
 &lt;li&gt;例如，一个需要 500 万 token 的任务，在 20 万 token 的上下文窗口下也能顺利完成。配合 Claude 4 Sonnet 的 100 万 token 窗口，显得尤为高效。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;其他 v3.25 更新亮点&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;增加了对 Claude Sonnet 4（200k context window）的支持（OpenRouter 和 Cline Providers）；&lt;/li&gt; 
 &lt;li&gt;支持自定义 Requesty Provider 的 base URL；&lt;/li&gt; 
 &lt;li&gt;修复了 checklist 更新过程中重复执行 &lt;code&gt;attempt_completion&lt;/code&gt; 的 bug；&lt;/li&gt; 
 &lt;li&gt;修复 Banner 无法关闭的问题；&lt;/li&gt; 
 &lt;li&gt;在 AWS Bedrock 中加入了 GPT-OSS 模型支持。&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366869/cline-v3-25</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366869/cline-v3-25</guid>
      <pubDate>Mon, 18 Aug 2025 02:39:04 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>先进算力新选择 | 2025 华为算力场景发布会暨北京 xPN 伙伴大会成功举办</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;2025 年 8 月 15 日，以「先进算力新选择」为主题的「2025 华为算力场景发布会暨北京 xPN 伙伴大会」成功举办。众多计算产业和相关行业精英齐聚一堂，聚焦先进算力与行业场景的深度融合，共同探讨如何推动算力价值释放；同时分享了华为在通用计算、大模型技术及 AI 应用创新等领域的最新成果，以及基于升腾、鲲鹏体系，与伙伴在教育、政务、医疗、制造等场景的创新实践。会上还重磅发布了「xPN 先锋行动」，华为将从研营销供服全方位支撑伙伴，深耕根技术，协同伙伴打造有竞争力的产品和方案，服务千行万业数智化升级，共赢智能化未来。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;img alt="图片 1.png" src="https://static.oschina.net/uploads/img/202508/15232531_Y2ZT.png" referrerpolicy="no-referrer"&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;2025 华为算力场景发布会暨北京 xPN 伙伴大会现场&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;华为商业销售部总裁张海平带来开场致辞，为活动拉开序幕。他谈到，2024 年华为经营稳健，中国区政企业务同比增长 25%，中国区政企计算产业增长 80%，鲲鹏、升腾平台作用关键，分别应用于多领域及加速 AI 技术落地。面向中小企业，华为坚持伙伴主导，2024 年钻金银伙伴、商业交易伙伴数量分别增长 25%、22%，并推出 APN 和 KPN 计划深化合作。2025 年华为计算产品全面升级，开放鲲鹏模组、升腾板卡等，鲲鹏升级工具链和引擎，升腾支持伙伴开发边端 AI 产品，已发布众多相关产品。两大计划加持下，部件伙伴业务增长翻番，已认证 APN 伙伴近 30 家、KPN 伙伴 20+家，伙伴数量和质量显著提升。未来，华为将持续投入计算产业，坚持根技术创新，强化伙伴体系。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;img alt="图片 3.png" src="https://static.oschina.net/uploads/img/202508/15232557_U5jD.png" referrerpolicy="no-referrer"&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;华为商业销售部总裁，张海平&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;IDC 中国研究副总裁周震刚在演讲中指出，当前数字化和智能化成为经济增长新引擎，数字经济蓬勃发展，中国数智化转型支出增长显著，智能化推动产业升级，生成式 AI 在多行业渗透。全球及中国 ICT 支出稳步增长，IT 市场进入 AI 大转型时代，生成式 AI 带来新的技术栈和架构变化。算力是智能化发展的支撑，全球服务器保有量和 CPU 核数提升，ARM 架构服务器增长迅速，中国市场增速更高。大模型推动下 AI 基础架构市场高速增长，算力需求结构从训练向推理倾斜，自主创新算力崛起，智能算力需求爆发式增长且供给部署方式多元。数智时代算力基础设施需具备高性能多核处理器等特性，并具备面向 AI 应用的加速技术。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片 4.png" src="https://static.oschina.net/uploads/img/202508/15232610_KmVB.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;IDC 中国研究副总裁，周震刚&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;在升腾技术与实践分享环节，嘉宾围绕「升腾无处不在，智能化升级新选择」主题展开，聚焦教育、管理、医疗监护场景，展现了升腾算力赋能智能化升级的实践分享。&lt;/p&gt; 
&lt;p&gt;华为升腾计算领域副总裁刘伟在演讲中谈到，升腾部件及解决方案致力于做好伙伴背后的支持力量，其部件产品覆盖 AI 全场景，部件产品从模组到标卡共 9 款，满足伙伴开发需求，助力自主创新。2025 年下半年，升腾将实施从低算力到高算力全面覆盖边端场景的策略，同时，部件产品重点投入 Atlas 300I A2 和 310 模组，以此提升产品解决方案的竞争力并完善生态丰富度。CANN 全面开源开放，架构灵活，工具链完备，2025 年底将完成 A2 版本开源，助力场景化创新。升腾硬件与 CANN 形成软硬双引擎，赋能千行万业，同时通过多方协同支撑伙伴发展，共同构建万物互联的智能世界。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片 5.png" src="https://static.oschina.net/uploads/img/202508/15232625_AMg7.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;华为升腾计算领域副总裁，刘伟&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;图灵智感（深圳）科技有限公司北京分公司总经理王元凯分享了公司基于升腾算力平台的自主创新 AI 应用实践，包括癫痫病患者智能监护系统、Shine Nexus 法律系统、Cloudasis 代码开发平台等解决方案，同时还介绍了升腾 AIPC 产品线的智能终端产品及适老机器人等产品的规划，展现了 AI 应用的广阔前景。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片 6.png" src="https://static.oschina.net/uploads/img/202508/15232633_1BHv.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;图灵智感（深圳）科技有限公司北京分公司总经理，王元凯&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;软通华方企业级产品管理部总经理邓忠良围绕软通华方计算 APN 业务展开的介绍中，提及了多款核心产品及合作项目。其中，超炫 3700 液冷工作站以鲲鹏 920 和升腾 310 处理器为基础，不仅性能强劲、应用领域广泛，还拥有自主知识产权。此外，软通华方还联合多方力量，打造了政务、应急、医疗等领域的 AI 一体机，在教育行业推行「一省一策」的发展策略，这些举措展现了其在计算领域的技术实力与生态整合能力。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片 7.png" src="https://static.oschina.net/uploads/img/202508/15232655_uFiJ.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;软通华方企业级产品管理部总经理，邓忠良&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;北京杰创永恒科技有限公司 CTO 赵鹏翀着重介绍了升腾教育行业 AI 教学场景应用，以启智 01 开发者套件为核心，构建 AI 教育全链条，搭载立体化课程与实训项目，推动教学与实践结合，培养符合产业需求的升腾 AI 人才。其拥有一站式 AI+教育社区，课程体系丰富，涵盖多类课程与岗位任务，平台运行数据可观。还推出多种实验设备，包括训推一体机、移动机器人、智能电子实验台等，形成多学期课程体系，构建知识、工具、技能链。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片 8.png" src="https://static.oschina.net/uploads/img/202508/15232718_yP9N.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;北京杰创永恒科技有限公司 CTO 赵鹏翀&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;鲲鹏算力场景发布环节，围绕「鲲鹏无处不在，通算场景新选择」主题，嘉宾针对网安、DPI 场景，阐释了鲲鹏算力支撑通算场景创新的路径。&lt;/p&gt; 
&lt;p&gt;华为鲲鹏计算领域副总裁刘云强在演讲中指出，以鲲鹏为代表的 ARM 创新力量发展迅猛，算力增长率 10 倍于 x86 算力，鲲鹏已成为自主创新首选算力。鲲鹏坚持计算生态战略，突破根技术，聚焦芯、硬、软协同，持续开放助力伙伴创新，推出多系列模组且算力全覆盖。同时，通过全流程工具链等激发行业应用创新，在多场景具备解决方案，2025 年已与 50+伙伴打造 70+款产品，KPN 体系蓬勃发展，布局「1+N+X」全国生态支持创新中心，为算力产业自主创新发展注入澎湃动能，驱动数字经济迈向新高度。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片 9.png" src="https://static.oschina.net/uploads/img/202508/15232723_6ZNm.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;华为鲲鹏计算领域副总裁，刘云强&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;北京乐研科技股份有限公司研发中心副总经理兼产品总监张帅介绍到，乐研深耕行业近 20 年，是网络安全硬件平台领军者，拥有多项专利，研发占比超 30%，具备高效硬件定制、严格质量管控、快速制造及优质供应链整合能力。其鲲鹏产品具有明确技术路线，2024 - 2025 年推出中高阶网络安全硬件，后续将逐步拓展。随后详细展示了多款基于鲲鹏模组的网络安全硬件产品参数，凸显出乐研在网络安全硬件领域的技术实力与发展潜力，为行业注入强劲「芯」动能。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片 10.png" src="https://static.oschina.net/uploads/img/202508/15232730_cGIW.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;北京乐研科技股份有限公司研发中心副总经理兼产品总监，张帅&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;航天联志技术有限公司产品线副总经理马成龙重点介绍了两款核心产品。一是 Z2551-M0，作为自研高性能一体化设备，专为大规模 DPI 场景设计，搭载鲲鹏 KP920 模组，模块化设计且全栈优化，具备自主创新等亮点，可应用于信息安全服务、政企合规审计等领域；二是 Z2651-M0，为针对网络安全市场的多节点模块化计算平台，基于鲲鹏 KPN 组开发，有多种节点规格，单节点配置灵活，能为多领域提供计算解决方案，彰显了品牌技术高度与市场竞争力。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="图片 11.png" src="https://static.oschina.net/uploads/img/202508/15232801_kAtG.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;航天联志技术有限公司产品线副总经理，马成龙&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;会上，华为中国政企计算解决方案销售总经理程龙飞、华为北京政企伙伴与商业销售部部长公磊、华为北京政企计算解决方案销售部部长李峰、华为北京整合营销部部长林鹏以及 5 位伙伴代表共同发布「xPN 先锋行动」，华为将从研营销供服全方位支撑伙伴，深耕根技术，旨在协同更多伙伴，打造更有竞争力的产品和方案，更好地服务千行万业客户数智化转型升级。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;img alt="图片 2.png" src="https://static.oschina.net/uploads/img/202508/15232812_ru5G.png" referrerpolicy="no-referrer"&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;「xPN 先锋行动发布」仪式启动&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;从政策解读到技术实践，从场景分享到生态共建，大会为计算产业搭建交流合作平台，推动先进算力从技术参数转化为行业数智化转型动力，以算力支点撬动产业升级，绘就数智时代生态蓝图，助力千行万业迈向数智发展新高度。未来，华为将持续深化与伙伴协同，以先进算力为引擎，驱动更多行业场景创新实践，加速数智化转型进程，共创数智时代新价值。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366517</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366517</guid>
      <pubDate>Fri, 15 Aug 2025 15:28:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>Gitee 企业版测试管理全面升级：流程更顺畅，交付更可靠</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;Gitee 企业版近日对测试管理功能进行了集中优化，围绕测试用例管理、测试计划执行与测试报告生成三大核心模块，显著提升了规范性、可追溯性与协作效率。&lt;/p&gt; 
&lt;h2&gt;用例管理：版本清晰，评审规范&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;支持查看用例被引用情况&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;用例详情页新增「测试计划」Tab，展示该用例被哪些测试计划引用及其版本；用例列表支持显示「被引用测试计划数」字段。&lt;/p&gt; 
&lt;p&gt;&lt;img height="318" src="https://static.oschina.net/uploads/space/2025/0815/192049_CjRf_2720166.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192106_Yr0n_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;用例版本与评审一一对应&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;每个用例版本仅对应一个评审记录，评审结果固定为「待评审」「已通过」「未通过」，评审通过后不可修改。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192134_yLGs_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;版本维护机制优化&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;用户修改已通过评审的用例后，系统将自动生成新版本，无需手动新建。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;支持自动提示发起新评审&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;当评审中的用例已有新版本，系统将在评审列表中提示是否重新评审。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192228_4bhZ_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;用例评审检查更新&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;测试计划：执行可追，缺陷直连&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;新增用例评审限制&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;测试计划仅支持添加评审通过的用例，确保计划执行的用例质量。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;支持多次执行记录&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;每条用例可记录多次执行结果，包括步骤实际表现、结果备注等，已提交结果不可修改，仅允许调整最近一次执行备注。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192251_8nAZ_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;用例列表新增查看结果分布、最新执行结果、新增执行结果&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192304_ZMNE_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;用例详情记录多次执行过程&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;快速创建缺陷&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;用例详情和列表页面支持快速创建缺陷，系统自动关联该用例并回填前置条件、步骤及实际结果。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192329_24FO_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;用例详情页面快速创建缺陷&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192344_8Wa4_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;用例列表页面快速创建缺陷&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192358_4EEW_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;缺陷描述自动回填步骤信息&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;执行记录支持富文本&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;用例的「实际结果」和「结果备注」字段支持富文本编辑。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192414_jDYP_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192423_wsJS_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;自动检测用例新版本&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;测试计划将提示用例是否存在新的评审通过版本，支持一键更新。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192445_thwU_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;测试报告：结构自定义，导出灵活&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;报告内容可配置&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;新增组件化报告配置功能，用户可按需选择报告组件，自定义顺序及筛选条件。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192459_lHUl_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;自定义测试报告&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192515_0RUZ_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;测试报告示例&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;支持富文本总结与模板复用&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;报告总结支持富文本编辑，并可基于模板快速填写。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192532_6ceE_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;生成静态报告&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;支持导出 PDF、Excel、用例执行明细等多种格式和场景，并可复制报告链接或配置，方便共享与复用。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;如果线上报告的列表类（缺陷列表、工作项列表、PR 列表）组件内数据超过 100 条时，PDF 无法导出超过 100 条的部分，可能需要导出 Excel 格式报告查看完整列表数据&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192544_tV6X_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;导出测试报告&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192607_tYjy_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;复制报告链接&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192620_PF3S_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;复制报告配置&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;欢迎访问&amp;nbsp;&lt;a href="https://gitee.com/enterprises" target="_blank"&gt;https://gitee.com/enterprises&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;本次更新进一步夯实了 Gitee 企业版在研发测试管理场景下的流程完整性与协作效率，特别适用于对质量管理要求较高的项目团队，欢迎企业版用户前往体验崭新的测试管理模块。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192635_G9l9_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366490</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366490</guid>
      <pubDate>Fri, 15 Aug 2025 11:26:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>软件工厂之可信依赖库，守护装备研制软件供应链安全</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;h2 style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;引言：军工软件供应链安全的战略意义与治理目标&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;军工软件供应链安全是国防科技工业高质量发展的核心保障，其战略必要性根植于第三方组件安全风险的普遍性与军工场景特殊性的叠加效应。根据 Gartner 报告显示，75% 的企业安全事件源于第三方组件漏洞，这一行业共性问题在军工领域被进一步激化。与民用场景相比，军工软件供应链具有网络物理隔离、装备长周期服役、涉密信息保护及国产化替代等特殊要求，传统组件管理模式的固有缺陷在此场景下呈现显著放大效应，&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;其不可持续性已成为制约装备研制安全的关键瓶颈&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;军工可信组件依赖源治理的核心目标在于构建从组件引入到装备退役全链路的安全管控体系，实现&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「来源可溯、版本可控、安全可信、供应稳定」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;的治理要求。作为这一体系的关键支撑，&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「软件工厂之可信依赖库」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;定位为供应链安全的「守门人」，通过整合全生命周期管理能力，为解决传统模式痛点、保障装备研制供应链安全提供系统性解决方案。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/190934_y36j_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;军工行业开源依赖组件管理的核心挑战&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;网络物理隔离与开源组件获取受限的矛盾&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191009_bKJV_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在军工装备研制领域，网络物理隔离是保障涉密信息安全的核心架构，其设计初衷源于「涉密信息不上网」的合规要求，通过将内网与外部网络彻底物理隔离，构建起涉密数据与外部风险的安全屏障。然而，这种隔离机制在强化安全的同时，也形成了研发资源获取的天然壁垒，导致外部优质组件及更新资源难以接入内网环境，制约了装备研制过程中对外部先进技术的吸收与整合，由此引发&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「安全隔离」与「资源获取」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;的根本矛盾。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;该矛盾的直接影响体现在安全与效率的双重层面。一方面，外部依赖风险显著加剧。传统模式下，内网组件获取渠道高度单一，且依赖人工操作（如 U 盘摆渡、光盘刻录等）实现外部资源向内网的迁移，这种模式不仅导致组件更新滞后，更使研发系统面临「断供即瘫痪」的风险——一旦外部资源供应中断或人工操作链条受阻，装备研制进程将直接陷入停滞。另一方面，人工操作过程本身成为新的安全隐患。人工摆渡不仅效率低下，延长了组件获取周期，还因操作环节的复杂性提升了失误概率。例如，某军工项目曾因 U 盘摆渡过程中的操作不当，导致恶意代码被引入内网系统，对涉密研发环境造成严重威胁，凸显了人工干预在安全管控中的不可靠性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;从资源管理视角看，物理隔离进一步放大了组件存储的低效问题。由于军工内网的独立存储特性，分散化的组件管理模式导致重复存储现象普遍，相关数据显示，内网中组件重复存储占比超过 30%，造成存储资源的严重浪费。这种「安全优先、资源冗余」的传统模式，既无法满足装备研制对高效资源利用的需求，也未能从根本上消除人工操作带来的安全漏洞，最终陷入安全与效率的双重困境，为后续构建内网可信依赖库的解决方案提出了现实需求。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;涉密项目追溯与分散管理的冲突&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191027_bcsX_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在装备研制的涉密场景中，涉密项目追溯与分散管理的冲突集中体现在「合规-效率」的双重矛盾上。从合规角度而言，明确规定了「配置项变更控制」要求，强调装备研制需满足全生命周期可追溯性，确保&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「一物一码、全程留痕」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;然而，传统分散式管理模式下，制品数据往往碎片化存储于不同研发环节，缺乏统一的版本控制与追溯机制，直接导致了版本管理的混乱。典型表现为「研发环境使用 A 版本、测试环境使用 B 版本」的现象，使得审计链条断裂，无法满足全生命周期可追溯的合规要求，这不仅违反了相关条款，还可能导致装备承制单位面临资格审查不通过的风险。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;从运营效率角度分析，分散管理模式显著增加了管理成本与问题解决周期。在该模式下，由于版本信息分散且缺乏统一追溯能力，问题定位时间被延长至周级；而采用统一版本池管理时，同类问题定位时间可控制在分钟级，两者效率差异显著。这种效率损失不仅增加了研发过程中的管理负担，还可能因问题解决周期过长影响项目整体进度。因此，解决涉密项目追溯与分散管理的冲突，建立统一版本池管理机制，成为平衡合规要求与运营效率、保障装备研制软件供应链安全的紧迫需求。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;合规审计效率低下与监管风险&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191050_bYmH_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;军工领域的合规审计工作面临着监管要求与传统人工模式之间的&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;结构性矛盾&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。其核心监管要求具有高度特殊性，包括国产化组件占比需达到 90% 以上，以及明确禁止使用特定来源的组件，这些指标直接关系到装备研制项目的合规性基础。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;然而，传统人工审计模式在应对此类要求时存在显著短板。一般项目涉及超过 5000 余个组件，采用人工梳理方式需较长的才能完成审计，不仅效率低下，更难以全面覆盖复杂的全量依赖关系，易因人为疏漏导致关键信息遗漏，如国产化比例不达标、禁用组件未被识别等问题，直接影响合规结论的准确性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;人工审计模式的不可靠性进一步加剧了监管风险，一旦因疏漏导致合规结论失真，装备研制项目将面临合规性不通过的重大隐患，可能引发项目停滞、相关资质取消等严重后果。这种风险并非孤例，民用领域因合规审计疏漏导致项目受阻的案例已充分证明，合规问题对项目推进的致命影响。因此，传统人工审计模式已无法满足军工领域对合规审计效率与准确性的双重需求，构建自动化合规引擎以实现实时、全面的合规校验，成为化解合规审计效率低下与监管风险的必然选择。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;僵尸组件与断供风险的长期安全隐患&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191105_hMkQ_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;军工装备具有&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「长生命周期」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;特性，其服役周期往往长达数十年，而组件的开发与维护周期通常较短，这种特性使得组件管理面临严峻挑战。其中，「僵尸组件」作为永久性风险点，对装备的长期安全运行构成显著威胁。此类组件通常因开发团队解散、技术支持终止等原因，在装备服役期间逐渐失去维护能力，一旦暴露安全漏洞，将因缺乏持续更新机制而无法修复。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;除僵尸组件外，开源组件的断供风险同样对装备研发与维护的连续性构成重大挑战。在传统模式下，由于缺乏替代储备机制，一旦遭遇开源组件断供，研发团队往往需要重构模块，耗时通常超过 3 个月，严重影响研发进度。&lt;/span&gt;&lt;/p&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;软件工厂可信依赖库的解决方案架构&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191120_o1Dc_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;总体设计理念：全链路可信与军工适配&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;软件工厂可信依赖库的总体设计理念以&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「全链路可信」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;与&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「军工专属适配」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;为核心，通过架构层面的针对性设计，系统性解决装备研制软件供应链面临的物理隔离、分散管理及审计追溯等关键挑战，并实现与军工场景的深度融合。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;该理念指导下的架构以 Gitee 可信依赖库构建的&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;军工专属「三位一体」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;解决方案为基础，采用分层设计方法，将技术特性与军工场景需求紧密结合，覆盖&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「环境-制品-管控」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;全链条，形成主动防御能力以保障制品管理的安全可控与自主可靠。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191150_0IVW_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在解决核心挑战方面，架构通过多维度设计实现精准应对：&lt;/span&gt;&lt;/p&gt; 
&lt;ol style="list-style-type:decimal; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;军工内网物理隔离要求：方案在「环境」层采用内网独立部署模式，确保依赖库运行环境与外部网络严格隔离，从物理层面阻断非授权访问与数据泄露风险；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;依赖制品分散管理问题：通过构建全品类制品池实现统一管控，整合各类软件构件、工具及 metadata 信息，消除多源分散带来的版本混乱与管理盲区；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;审计追溯痛点：在「管控」层集成安全合规引擎，实现对制品全生命周期操作的实时记录、自动化审计与追溯分析，满足军工领域对过程可追溯性的严苛要求。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;「军工专属」设计是该架构区别于民用方案的核心特征，主要体现在国产化环境适配与安全机制强化两方面。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在国产化适配层面，架构深度兼容国产操作系统、数据库及中间件，确保在军工特定 IT 环境中稳定运行；在安全机制上，全面应用国密算法（如 SM2、SM3、SM4）对制品进行加密存储与传输校验，同时结合断供保护机制，通过本地缓存与镜像同步策略，保障在外部资源不可用时的持续供应能力，实现「自主可靠」的底线要求。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191212_e9oR_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;此外，架构通过「三位一体」的分层协同（环境层保障基础安全、制品层实现全品类统一管理、管控层强化合规审计），实现&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「安全-效率-合规」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;的三重平衡。在安全维度，通过全链路可信验证与主动防御机制构建纵深防护体系；在效率维度，全品类池与自动化管控流程减少人工干预，提升依赖获取与管理效率；在合规维度，内置军工行业特定的合规检查规则，确保所有操作符合国家及行业标准。这种平衡设计使架构既能满足军工领域对安全性与合规性的极高要求，又能保障装备研制过程中的研发效率与供应链连续性。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;核心技术组件：构建可信依赖源阵地&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;构建可信依赖源阵地的核心在于通过关键技术组件与供应链安全核心挑战的精准对应，形成全链路防护能力。针对物理隔离环境下组件获取难题，采用内网独立部署层与自动化摆渡机制相结合的方案：通过构建与外部网络物理隔离的独立运行环境，支持麒麟 OS、统信 UOS 等国产化操作系统，确保依赖组件的获取、存储及分发全过程限定在内部网络，严格遵循&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「涉密信息不上网，上网信息不涉密」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的安全原则。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;同时，自动化摆渡机制实现外部可信资源的高效引入，较传统人工摆渡方式效率&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;提升 24 倍&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，有效解决了物理隔离场景下组件获取的时效性与安全性矛盾。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191233_6e25_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;针对传统模式下组件来源分散、版本混乱导致的资源浪费问题，全品类可信池与存储去重技术形成协同解决方案。全品类可信池覆盖 Java、.NET、C、C++ 等主流开发语言组件，并纳入达梦、人大金仓等国产化数据库驱动，同时兼容 Docker 镜像、Helm Charts 等云原生制品，实现多类型组件的统一管理；结合存储去重技术，有效降低组件存储重复率达 30%，显著减少存储空间占用，解决了分散管理模式下的资源冗余问题，实现组件全生命周期的可追溯与版本规范化控制。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在合规审计层面，安全合规引擎承担核心防护职责。该引擎集成 CNNVD、CNVD 等国产化漏洞库，可实时监测组件已知漏洞并触发预警；通过内置协议分析模块，对 GP L 等限制性开源协议组件实现自动阻断，同时支持配置国产化组件占比阈值（如≥90%），通过硬性指标推动供应链国产化转型，从源头规避合规风险。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;针对开源组件断供及僵尸组件风险，断供保护机制构建双重防护体系。一方面，预置国产化替代组件库，形成关键组件的自主可控备份；另一方面，通过实时监测开源社区动态，可在 30 分钟内完成断供风险评估并推送替代方案，有效降低技术依赖风险，保障装备研制软件供应链的连续性与稳定性。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;内网可信源构建：物理隔离下的组件统一收敛&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191250_FYBY_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在装备研制领域的物理隔离环境中，由于网络与外部完全隔绝且内部系统独立运行，组件获取、管理及共享存在显著的「组件孤岛」问题。各部门或系统间的组件资源难以统一管控，不仅导致重复开发和资源浪费，还因缺乏标准化准入机制而增加了安全风险，严重制约了软件供应链的协同效率与安全可控性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;针对上述问题，解决方案需在安全与效率之间建立平衡机制，通过&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「白名单准入+自动化摆渡」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;的双重策略实现组件统一收敛。首先，在安全管控层面，构建支持国产化操作系统的独立内网环境，严格遵循「涉密信息不上网」原则，确保环境与外部网络物理隔离。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;同时，建立「白名单+人工审核」双重准入机制，仅允许通过认证的合规组件入库，从源头保障组件的安全性与可靠性。其次，在效率提升层面，集成自动化摆渡工具，将外部组件引入流程优化为&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「扫描-审批-入库」的一键式操作&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，替代传统人工摆渡的繁琐流程。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;该方案的实施效果显著。通过自动化摆渡工具的应用，外部组件引入周期从传统&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;48 小时的人工处理缩短至 2 小时内&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，大幅提升了组件获取效率；某院所的实践案例表明，在实现组件统一管理与安全管控的基础上，有效破解了&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「物理隔离导致组件孤岛」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的痛点，验证了&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「安全可控前提下效率提升」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的核心价值。这一机制不仅确保了物理隔离环境下组件的安全准入，还通过流程优化实现了资源的高效利用，为装备研制软件供应链的可信化管理提供了关键支撑。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;断供保护与国产化替代闭环&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;针对装备研制软件供应链中&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「断供-替代」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的核心痛点，需构建&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「预防-响应-保障」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;三位一体的断供保护与国产化替代闭环体系，以满足军工领域自主可控要求，支撑「科技强军」战略实施。&lt;/span&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;预防体系&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;建立动态化的风险识别与管控机制。通过构建国外组件与国产化组件的映射关系库，实现对关键依赖的精准替代路径规划，例如将 Spring Boot 映射至国产化组件「金蝶天燕 JBoot」，并按季度更新映射关系及安全等级标注，确保替代方案的时效性与适配性。同时，实时监测开源社区动态，对「6 个月无更新」等异常状态的组件标记为高风险，并在 30 分钟内完成风险评估及替代方案推送，从源头降低断供风险。&lt;/span&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;响应体系&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;建立「预警-评估-替代」三级快速响应机制。通过「1 小时预警-4 小时评估-24 小时替代」的标准化流程，实现对断供事件的快速处置。&lt;/span&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;保障体系&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;构建多副本灾备体系以应对极端场景。核心国产化组件需在 3 个物理隔离节点存储副本，形成分布式冗余架构，尤其支持「中心库故障时边缘节点本地只读」模式。该设计确保在中心库完全不可用的极端情况下，边缘节点仍能通过本地存储的只读副本维持基本研发活动，最大化保障装备研制的连续性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;综上，「预防-响应-保障」三层体系通过动态清单实现风险前置防控，通过三级机制提升应急响应效率，通过多副本灾备强化极端场景韧性，有效缩短替代周期并保障研发连续性，同时也为构建「国产化替代闭环」方案奠定了实践基础，为装备研制软件供应链的自主可控提供了坚实支撑，切实响应了军工领域「科技强军」的战略需求。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;涉密装备项目全链路追溯&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;涉密装备项目对软件供应链安全的核心需求在于实现「全程可追溯」，以满足严苛的合规性要求与风险管控目标。针对这一需求，软件工厂可信依赖库通过构建&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「四级管控」机制&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，可全面覆盖组件从准入到部署的全生命周期，实现从需求到制品的端到端追溯能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;组件准入管控&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;组件准入管控作为全链路追溯的起点，通过建立国产化及非涉密组件白名单，严格限定可使用的组件范围，并对外部引入组件执行三重审批流程，从源头阻断不合规组件进入供应链的风险。这一环节确保了组件来源的合规性与安全性，为后续追溯奠定基础。&lt;/span&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;版本链追溯&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;版本链追溯环节通过元数据关联技术，将组件的涉密等级、项目代号等关键信息与构建、测试、环境等全流程数据整合，形成「制品 ID→构建流水线→代码提交→需求文档」的逆向追溯路径。该路径实现了从最终制品到原始需求的双向溯源，确保每个版本的组件都能清晰定位至具体的研发活动与业务背景。&lt;/span&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;操作审计&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;操作审计机制通过记录所有制品操作（如上传、下载、修改）的操作人、IP 地址、时间戳等信息，形成完整的操作轨迹。审计日志采用不可篡改技术存储，保存期限不低于 5 年，为合规审查与事件追责提供了客观依据。&lt;/span&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;环境隔离&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;环境隔离则按涉密等级划分独立仓库，研发、测试、生产环境的制品通过单向光闸进行物理隔离传输，并依托中央仓库的「成品版本池」统一管理跨环境版本，有效避免不同涉密等级环境间的信息泄露风险。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;「四级管控」机制的协同作用显著提升了追溯效率，使审计准备时间从传统模式的 2 周缩短至 1 天，追责效率提升 90%，大幅降低了合规审查的时间成本。同时，该机制严格遵循相关标准对软件过程管理的要求，通过全生命周期的追溯能力与不可篡改的审计记录，满足了涉密场景下对过程可追溯性、数据完整性及合规性的核心诉求，为同类涉密装备项目提供了可复用的全链路追溯实施模板。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;多环境安全分发与一致性管控&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在装备研制软件供应链中，多环境一致性是保障软件可靠交付的关键挑战之一。不同环境（如研发、测试、生产）的配置差异、依赖版本混乱常导致「研发环境能正常运行，生产环境却报错」的问题，严重影响软件部署效率与运行稳定性。为此，需构建兼顾安全隔离、传输加密与高效同步的多环境依赖分发体系，实现「研发-生产」全链路的依赖一致性管控。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191308_U5QN_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;针对环境隔离与版本精准管控需求，方案设计&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「中心库→区域节点→环境节点」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;三级分级分发网络，并结合环境标签强制管控机制。其中，中心库作为核心枢纽存储全量依赖资源，区域节点承担跨区域分发与缓存职能，环境节点则直接服务于具体研发或生产环境。通过标签化管控，研发环境仅允许存储和使用开发版依赖，生产环境则严格限定接收「测试通过+审批完成」的正式版本，从源头避免因版本混用导致的环境不一致问题。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;为保障依赖包在多级网络传输中的安全性，方案采用国密算法构建传输防护体系：使用 SM4 对称加密算法对传输数据进行加密处理，防止传输过程中信息泄露；同时通过 SM3 哈希算法对依赖包进行校验，确保数据完整性，避免恶意篡改或传输错误。此外，建立元数据关联机制，将依赖包与代码 commit ID、测试报告等关键信息绑定，实现依赖版本的全链路可追溯，进一步强化分发过程的可控性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在效率与可靠性优化方面，方案引入&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;智能分发网络技术&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，通过动态路由与边缘缓存策略，将跨区域传输延迟从秒级降至毫秒级；结合多副本存储与边缘节点本地只读模式，构建灾备与容灾机制，提升系统抗风险能力。针对野外装备研制场景，区域节点支持车载部署，通过衞星链路实现增量同步，有效减少跨区域传输流量达 60%，适配野外网络不稳定的特殊环境需求。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;该方案通过分级&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;网络隔离、标签化管控、国密加密与智能优化&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的协同作用，在保障多环境依赖一致性的同时，显著提升了分发效率与安全性。实际应用中，跨区域依赖同步效率与稳定性得到有效验证，为装备研制软件供应链的&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「安全-效率-一致性」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;平衡提供了有力支撑。&lt;/span&gt;&lt;/p&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;实施价值与军工专属保障体系&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;多维度价值转化&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;可信依赖库的实施价值可通过「安全-效率-合规-战略」四维量化分析得以全面呈现，其综合效益体现在风险管控、研发提效、合规保障及战略自主等多个层面。&lt;/span&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;安全价值&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;显著降低开源组件引入的安全风险，高危漏洞引入率下降 92%，开源组件整体安全风险降低 80% 以上，符合相关标准要求。通过阻断高危漏洞传播路径，有效减少单次故障造成的损失超千万元，形成了对装备软件供应链安全的系统性风险管控能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191421_qe4k_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;效率价值&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;实现了研发全流程的效能提升。存储成本下降 50% 以上，组件跨项目复用率提升 65%，使用效率提升 80%；构建部署周期从 2 小时缩短至 30 分钟以内，新功能从「代码合并到全球可用」的时间从 48 小时压缩至 6 小时（效率提升 87.5%），装备软件测试周期缩短 40%，显著减少了研发过程中的无效工时消耗，提升了装备软件的迭代速度。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191435_G7S1_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;合规价值&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;确保 100% 满足国防科工局等监管审计要求，为装备研制活动提供了坚实的合规底线保障，有效规避了因不合规导致的处罚风险，确保软件供应链管理过程的透明可追溯。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191449_dy9X_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;战略价值&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;通过构建自主可控的军工软件供应链，支撑了「科技强军」目标的实现。某军工集团已实现核心装备软件 100% 国产化组件构建，彻底摆脱对国外开源生态的依赖，增强了国防科技工业的核心竞争力，为军工领域软件供应链的自主可控发展奠定了基础。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191507_qdyU_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;综上，可信依赖库从多维度实现了价值转化，既解决了当前装备研制中的安全与效率痛点，又满足了合规要求，更助力了军工软件供应链的战略自主，展现了显著的综合收益。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;军工专属保障机制&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;针对军工领域「高保密、高可靠」的核心要求，可信依赖库方案设计了&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「人员-流程-合规」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;三重专属保障机制，以确保在复杂军工环境中的稳定落地与安全运行。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191519_GqsY_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;通过「人员-流程-合规」三重机制的协同作用，该保障体系全面覆盖了军工环境中的保密要求、可靠性需求与合规压力，为可信依赖库方案在军工复杂场景下的稳定运行提供了系统性支撑。&lt;/span&gt;&lt;/p&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;结语：以可信依赖库筑牢装备研制安全基石&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;装备研制作为国防科技工业的核心环节，其软件供应链安全直接关系国家战略能力建设。可信依赖库作为软件工厂体系的关键支撑，通过系统性破解装备研制全链路的安全挑战，为实现全生命周期安全可控提供了底层保障。针对网络物理隔离环境下的依赖管理难题、全生命周期追溯需求、合规审计要求、僵尸组件治理及断供风险防控等核心挑战，&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;可信依赖库构建了一体化解决方案，实现了从「被动防御」到「主动防控」的范式转变&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;通过安全保障能力、研发效率提升、合规管理强化与战略自主实现的多维度价值转化，可信依赖库不仅为装备研制提供了安全可控、自主可靠的依赖组件支撑，更推动了军工企业研发模式的优化与管理体系的升级。面对复杂的技术竞争与供应链安全形势，加快构建自主可控的依赖源体系已成为军工企业提升核心竞争力的必然要求。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;以可信依赖库为核心筑牢装备研制安全基石，既是落实「科技强军」战略的具体实践，也是提升国防科技工业自主创新能力的关键举措，将为国防现代化建设与国家长治久安提供坚实保障。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;em&gt;&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgitee.cn%2Ffactory" target="_blank"&gt;https://gitee.cn/factory&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191532_CvbZ_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366488</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366488</guid>
      <pubDate>Fri, 15 Aug 2025 11:16:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>英伟达、AMD 等参投，Cohere 估值达 68 亿美元</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;Cohere 公司&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcohere.com%2Fblog%2Faugust-2025-funding-round" target="_blank"&gt;宣布&lt;/a&gt;成功完成一轮 5 亿美元的融资。这轮融资由 Radical Ventures 和 Inovia Capital 共同牵头，参与者还包括 Nvidia、AMD Ventures、Salesforce Ventures 等多个机构投资者。此次融资使得 Cohere 的估值从此前的 50 亿美元增至 68 亿美元。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="375" src="https://oscimg.oschina.net/oscnet/up-d24220d0df394904462da42ac9f9ff2a73c.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;Cohere 总部位于多伦多，是一家专注于开发企业级大型语言模型（LLM）的公司。该公司推出了一系列名为 「Command」 的模型，其中最强大的 「Command A」 于今年三月首次亮相。Cohere 声称，其模型在多项任务上能够匹配 GPT-4 的性能，并且响应速度提高了 75%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;除了语言模型，Cohere 还提供嵌入模型，这是一种将文件转化为神经网络可以理解的紧凑数值形式的技术。Cohere 表示，其最新的嵌入模型能够处理长度达到 200 页的多模态记录和文档。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;企业用户可以通过云端 API 访问 Cohere 的模型，或选择在本地部署，后者还可选择使用 「隔离配置」。这种配置的 LLM 只能在内部基础设施上运行，无法通过互联网访问。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;Cohere 近期也显示出强劲的需求增长。据《信息周刊》报道，该公司预计到年底年化收入将超过 2 亿美元，这比 2 月份的数字几乎翻了一番。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;在宣布融资的同时，Cohere 还任命了两位高管。知名机器学习研究者 Joelle Pineau 成为新的首席人工智能官，而前 Uber 高管 Francois Chadwick 则担任首席技术官。Pineau 曾领导 Meta 的 FAIR 机器学习实验室，她表示将把更多研究力量集中在上周推出的 AI 生产力平台 North 上。该平台利用 AI 代理自动化数据同步等任务。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;Pineau 还透露，Cohere 计划扩大其 AI 开发团队，或将从 Meta 招募机器学习研究员。Francois Chadwick 的任命暗示 Cohere 可能为未来的上市做准备。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;在短期内，Cohere 可能会利用新募集的资金进行收购。此次融资发生在 Cohere 收购位于温哥华的 AI 公司 Ottogrid 之后，后者开发了一个利用 AI 代理加速市场研究项目的平台。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366486</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366486</guid>
      <pubDate>Fri, 15 Aug 2025 10:59:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>华为、小米等大厂商抢占 AI 眼镜千亿元级市场</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;智能眼镜成为今年消费电子赛道的「黑马」。根据调研机构 Counterpoint 发布的《全球智能眼镜型号出货量追踪》报告，2025 年上半年国际智能眼镜市场的出货量同比增长 110%。&lt;/p&gt; 
&lt;p&gt;据 IDC 预测，2025 年中国智能眼镜出货量预计达到 290.7 万台，同比增长 121.1%。业内人士普遍认为，这缘于技术突破、市场需求释放以及产业链成熟等多重因素。&lt;/p&gt; 
&lt;p&gt;「2025 年智能眼镜行业发展的最大亮点在于 AI 大模型与 AR 技术的深度结合。」中国电子工业标准化技术协会部长王连升在接受《证券日报》记者采访时表示，「未来两年是智能眼镜商业化应用关键期，生态构建能力是决定企业规模能否增长的重要因素。」&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;AI 眼镜出货量大增&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;作为智能眼镜的细分品类，AI 眼镜年内表现较为亮眼。Counterpoint 报告显示，2025 年上半年，AI 智能眼镜出货量占智能眼镜总出货量的 78%，相较于 2024 年上半年的 46% 和 2024 年下半年的 66% 有了显著提升。&lt;/p&gt; 
&lt;p&gt;国内市场方面，IDC 数据显示，2025 年第一季度中国智能眼镜市场出货量为 49.4 万台，同比增长 116.1%。其中，中国音频和音频拍摄眼镜市场出货量 35.9 万台，同比增长 197.4%。第二季度，AI 眼镜出货量上涨态势得以延续。&lt;/p&gt; 
&lt;p&gt;在各大线上平台，AI 眼镜的销量也出现激增。《证券日报》记者注意到，李未可、小米、华为等品牌 AI 眼镜在电商平台上销量排名靠前，相关产品具有拍照、变光、翻译等功能。&lt;/p&gt; 
&lt;p&gt;「今年以来，公司 AI 眼镜的订单量出现大幅增长，产品逐步得到市场认可。」湖北星纪魅族科技有限公司相关负责人对《证券日报》记者说。&lt;/p&gt; 
&lt;p&gt;深圳市雷鸟网络科技有限公司创新硬件产品负责人杨克晓称，公司上半年产品出货量提升，首购用户占比达到 81%，用户月活同比增长 314%。目前，AI 眼镜正加速成为大众消费产品。&lt;/p&gt; 
&lt;p&gt;杭州灵伴科技有限公司（以下简称「灵伴科技」）CEO 祝铭明表示，公司不断迭代 AI 眼镜，开拓多重功能和增值服务，吸引了一批企业订单。近期，公司联合支付宝上线了全球首个智能眼镜支付方案。&lt;/p&gt; 
&lt;p&gt;谈及 2025 年上半年 AI 眼镜市场的迅速发展，迈睿资产管理有限公司首席执行官王浩宇对《证券日报》记者表示，这主要由三大核心因素共同推动：AI 大模型与增强现实技术实现深度融合，带来 AI 眼镜更沉浸式的使用体验；智能眼镜被纳入补贴范围后政策红利持续释放，产品性价比显著提升，有效刺激消费需求；头部厂商加速产品迭代，通过轻量化设计和多元化功能拓展，使产品覆盖办公、医疗、娱乐等多场景应用需求。&lt;/p&gt; 
&lt;p&gt;随着技术革新、政策扶持与产品升级形成合力，AI 眼镜市场进入高速增长通道，产品价格也更容易被消费者接受。综合来看，年初以来，国内 AI 眼镜均价已从数千元降至千元左右。在王浩宇看来，随着下半年销售旺季来临，国内 AI 眼镜的整体出货量有望保持增长。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;构建差异化竞争力&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在行业加速发展的同时，市场竞争加剧。国内品牌纷纷锚定细分赛道，构建差异化竞争力。&lt;/p&gt; 
&lt;p&gt;小米、雷鸟等跨界品牌通过技术创新和价格策略快速崛起，出货量位居前列；灵伴科技、大朋 VR 等品牌在 AI 眼镜细分市场上不断推陈出新，并持续拓展功能和适用场景；华为、阿里、字节跳动等品牌也纷纷入局。&lt;/p&gt; 
&lt;p&gt;国泰海通科技资深分析师李轩对《证券日报》记者表示，目前，AI 眼镜行业呈现「百花齐放」态势。从技术路线来看，有尝试先做空间计算 AR 眼镜的 Rokid，也有研发眼镜光学摄像 AI 功能的小米等。不过，目前 AI 眼镜市场还未出现真正的爆款。预计今年是 AI 眼镜厂商突围的一年，各大品牌迭代产品将带动整体渗透率持续提升。&lt;/p&gt; 
&lt;p&gt;「2025 年下半年将有多款 AI 眼镜新品问世。目前厂商在加快布局轻量级的眼镜产品，并根据自身特色深耕细分市场。AI 眼镜有望成为 AI 应用的重要载体，得益于软硬件不断升级以及生态瓶颈的突破，未来 3 年至 5 年有望迎来产量突破的拐点。」王浩宇认为。&lt;/p&gt; 
&lt;p&gt;在王浩宇看来，下一步，产业链企业将重点突破光学显示与芯片技术，解决「轻薄」与「性能」的矛盾；加强端侧 AI 芯片研发，实现大模型本地化高效运行；优化能源管理，开发柔性电池与无线充电技术等。&lt;/p&gt; 
&lt;p&gt;王连升认为，AI 眼镜有望打开千亿元级市场空间，带动新一轮数字消费升级。未来几年是智能眼镜从概念验证向规模化应用过渡的关键节点，企业只有持续打磨产品、构建开放生态，才能赢得长期竞争优势。国内企业应把握当前市场爆发机遇，在核心技术自主可控的基础上，加快生态布局和场景创新。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366481</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366481</guid>
      <pubDate>Fri, 15 Aug 2025 10:22:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>翟佳：在中国，做世界的 Pulsar</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;p&gt;在用微信发消息的时候，你是否想像过，点发送按钮的瞬间，信息就从手机出发，经由服务中心，流向朋友的手机。来来回回之间，无数这样的信息持续传递，便汇聚成一条条消息流。&lt;/p&gt; 
&lt;p&gt;可是，每天有十多亿用户打开微信，如此庞大的信息流，怎么保证不出错呢？&lt;/p&gt; 
&lt;p&gt;其实，在服务中心内部，有一个关键的东西在发挥作用，那就是消息流中间件，这些中间件集群协同运作，负责解决海量消息的存储、排序、调度问题，所以这些消息能够快速、安全、准确、稳定地送达。即便在亿万人同时发消息的高峰期，系统也依然井井有条，不会拥堵混乱。&lt;/p&gt; 
&lt;p&gt;不只是微信——从滴滴的实时派单、12306 的抢票队列，到银行秒级支付通知，甚至工厂里千台设备的运行数据同步，背后都是消息流中间件在支撑。&lt;/p&gt; 
&lt;p&gt;市面上的消息流中间件众多， Apache Pulsar 凭借存算分离架构和云原生设计，越来越受关注。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;翟佳做的就是 Pulsar 的生意，这是他的第三次创业旅程。成立谙流科技的第一天，就定下方向：要坚持做中国的社区，做中国的公司。在中国打好根基后，才能更好地走向全球市场。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;如此笃定，如此清晰。&lt;/p&gt; 
&lt;p&gt;不久前，在一场创业者活动上，大家让翟佳用一句话介绍自己，他给出了一个简单却少有人能做到的回答：「我专注一个开源项目十年了。」&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="508" src="https://oscimg.oschina.net/oscnet/up-01c27879733db2a82e3d13a05cd2e953858.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;翟佳&lt;/p&gt; 
&lt;span id="OSC_h4_1"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;迁往美国？不，留在中国！&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;2023 年，在中美科技博弈加剧的背景下，StreamNative 和许多跨国科技公司一样面临着抉择：中国团队是解散，还是整体迁往美国？&lt;/p&gt; 
&lt;p&gt;StreamNative 是一家基于开源项目 Pulsar 做商业化的公司，此时发展如日中天。不过，StreamNative 希望塑造更「美国化」的形象，以迎合北美客户和投资人的期待。但对翟佳和中国团队的几位技术骨干而言，这意味着放弃他们最熟悉、也最看重的本土战场。&lt;/p&gt; 
&lt;p&gt;「这关乎职业生涯，也关乎家庭。」翟佳回忆当时的纠结。作为联合创始人，翟佳已经为这家公司奋斗了近五年。&lt;/p&gt; 
&lt;p&gt;而与 Pulsar 结缘，还要更早。&lt;/p&gt; 
&lt;p&gt;那是在 2015 年，翟佳还只是存储巨头 EMC 北京研发中心的一个工程师。彼时，云原生浪潮初起， 公司正在构建融合流计算与存储的云原生方案。在对比了 Kafka 等多种 MQ 之后，Pulsar 表现出的企业级能力让他们眼前一亮。此前，业内曾认为消息流领域的技术已经固化了，尤其在海外市场，Kafka 和 Tibco 已经一统天下。直到 Pulsar 的出现，像一条鲶鱼打破了这种认知。&lt;/p&gt; 
&lt;p&gt;存储与计算分离的架构设计，让 Pulsar 特别适合在云原生环境中运行。而存算绑定的 Kafka 并不能满足企业级服务的场景。尤其在面临严重硬件错误或者节点故障的情况下，Kafka 读写的延迟并不可控，而 Pulsar 能保证读写延迟在几毫秒内，服务质量可预期。&lt;/p&gt; 
&lt;p&gt;不过两年时间，翟佳就从 Pulsar 使用者成为深度贡献者， 之后在 2019 年，与 Pulsar 创始团队成员郭斯杰共同创立 StreamNative，并且进展顺利，不久，就在零销售人员的情况下积累了几十家全球客户，而且基本都是海外客户。&lt;/p&gt; 
&lt;p&gt;当时没有人能想到会有二选一的这一天。&lt;/p&gt; 
&lt;p&gt;翟佳最终决定留在中国。既不解散，也不迁往美国，而是从中国出发、走向世界。&lt;/p&gt; 
&lt;p&gt;2024 年元旦那天，翟佳作为联合创始人兼 CEO，带领一支 20 人左右的中国核心团队，创立了谙流科技。这是他围绕 Pulsar 的第三次创业旅程，却也是最不同的一次——立足中国市场、走人民币路线。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;翟佳相信中国的社区基础和市场潜力：「中国有全球最活跃的 Pulsar 社区，有腾讯、华为、快手和小红书这样的大公司在贡献代码，更有对开源包容的客户群体。」&lt;/p&gt; 
&lt;p&gt;中国还有大量数据规模极大、服务质量要求极致的场景，比如腾讯的交易数据、小红书的社交爆发、快手的短视频流量……这些场景对消息流中间件的需求远超海外，且更加严苛。&lt;/p&gt; 
&lt;span id="OSC_h4_2"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;市场空间足够大， 但一定要聚焦&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;相比操作系统、数据库等基础设施，消息流中间件的市场份额要小得多，但它仍是各软件系统中必不可少的组件。所以翟佳认为，消息流的全球市场足够大。至少对当前没有太多竞争对手的谙流科技来说，足够大。&lt;/p&gt; 
&lt;p&gt;但市场空间从来不是成功的保证。&lt;/p&gt; 
&lt;p&gt;2017 年，翟佳在他的第一次创业旅程中就遭遇了多线作战的困境。Streamlio 公司同时推进多个开源项目，精力分散，商业化举步维艰。「计算、数据传输、存储，公司都有涉及。尽管在工程师看来这很不错，天天接触新技术，加班加点写代码，一步步完善功能、解决问题，过得很充实。」但结果很残酷：无论在社区发展、用户认可度，亦或者是商业化上，都不如意。&lt;/p&gt; 
&lt;p&gt;失败的教训很深刻，这让翟佳意识到，必须要聚焦。&lt;/p&gt; 
&lt;p&gt;因此，在 2019 年，他与 Pulsar 社区伙伴郭斯杰二次创业，聚焦 Pulsar，在服务腾讯计费平台、华为终端等高要求场景实现了突破。&lt;/p&gt; 
&lt;p&gt;一次失败，一次成功，就这样验证了翟佳的想法：业务聚焦以后，在获取用户以及价值宣导上，更有成效。「这是一个逐渐聚焦的过程：从多个开源产品到聚焦一个开源产品（Pulsar），再到聚焦到一个市场，最后到聚焦到一个产品的使用模式。」翟佳总结道。&lt;/p&gt; 
&lt;p&gt;这种策略延续到谙流科技，基于 Pulsar 为企业提供更稳定的私有化部署产品。&lt;/p&gt; 
&lt;p&gt;谙流科技之所以选择私有化部署这条路，是因为中国市场有其特殊性。&lt;/p&gt; 
&lt;p&gt;海外企业偏向公有云托管，中国企业更青睐私有化部署。翟佳介绍，国内客户，尤其是金融、电信和制造业企业，对数据不丢失、快速故障恢复和合规性有极高要求。比如半导体制造企业的 MES 系统一旦宕机，可能导致生产线上的晶圆报废，损失巨大。而社区版 Pulsar 无法满足这些需求。&lt;/p&gt; 
&lt;p&gt;因此，谙流科技基于 Pulsar 打造了 ASP 平台，进行了深度优化和国产化适配，强化私有化部署下的易用性与可管理性。&lt;/p&gt; 
&lt;p&gt;与此同时，大型金融企业和央企对合规、监管和运维也有更高标准，谙流科技对 Pulsar 进行了强化，例如打通各种健全认证的体系、开发与审计复核系统对接的功能，确保交易日志满足监管要求。此外，还引入了监控系统，提前预警潜在风险。&lt;/p&gt; 
&lt;p&gt;「某头部证券公司是我们的一个早期客户，其部署的 Pulsar 系统已稳定运行三年，系统零故障，业务零中断，直接验证了服务的高可用性。」翟佳表示 。&lt;/p&gt; 
&lt;p&gt;当前，Kafka 仍然在消息流处理领域占据主导地位。为方便国内大量用户从 Kafka 迁移至 Pulsar，翟佳等人在协议兼容这块做了大量工作，客户无需修改客户端代码即可平滑切换。&lt;/p&gt; 
&lt;p&gt;在谙流科技的 ASP 平台，这些能力都变成了开箱即用的解决方案。&lt;/p&gt; 
&lt;p&gt;这条路是通的。在当前投资环境趋紧的情况下，谙流科技成功实现自我造血。&lt;/p&gt; 
&lt;p&gt;成立一年多来，团队规模保持在 20 人左右，服务中国银联、浦发银行、华泰证券、中信证券等十余家头部客户，收入已能覆盖运营成本。今年 2 月，谙流科技还宣布完成数千万元人民币天使轮融资，将主要用于开源社区建设、产品研发以及商业化落地。&lt;/p&gt; 
&lt;span id="OSC_h4_3"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;未来：&lt;/strong&gt;&lt;strong&gt;AI&lt;/strong&gt;&lt;strong&gt; 浪潮与 Pulsar 演进&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;翟佳透露，自 2022 年开始，Pulsar 就已进入平台稳定期，社区工作重心从功能扩张转向系统优化。在这一两年间，新功能的开发速度明显放缓，谙流科技及社区核心成员（包括众多 Committer 和 PMC 成员）都将主要精力投入到系统稳定运行保障，以及用户体验优化——包括改进用户引导机制和交互设计，同时强化既有功能。&lt;/p&gt; 
&lt;p&gt;随着 AI 热潮席卷全球，Pulsar 也在探索新的应用场景。社区正在讨论如何将消息流中间件的功能适配到 AI 场景下。&lt;/p&gt; 
&lt;p&gt;翟佳解释，在分布式系统架构中，消息流中间件（如 Pulsar）的核心价值在于通过削峰填谷机制解决系统间处理速度不匹配的问题。以腾讯计费平台为例，当突发性高并发用户请求直接冲击后端服务时，长链路处理极易导致失败，而引入消息流中间件后，通过异步处理和请求持久化，既能保障服务健壮性，又将系统间复杂的 M×N 耦合关系简化为 M+N 的连接模式。&lt;/p&gt; 
&lt;p&gt;在 AI 场景里，类似的诉求也很多。比如和大模型对话时，用户通过网页发请求，但模型可能要「想」很久，这时候就需要一个缓冲层，先把请求接住，等后端处理完再把结果返回，解耦前端和后端。实际上，从数据输入、RAG 检索到多业务模型协同，各环节不同的处理速度都需要消息流中间件来缓存中间状态和数据。此外，Pulsar 社区还在探索作为 AI Agent 的上下文存储或记忆（memory）载体。&lt;/p&gt; 
&lt;p&gt;在翟佳眼里，这都是「消息流中间件（比如 Pulsar）在传统场景里的老本行，现在只是针对 AI 的特点做了适配」。&lt;/p&gt; 
&lt;p&gt;「Pulsar 在 AI 时代的技术迭代与其在云原生时代的崛起类似。好的技术都是在实际使用中慢慢打磨出来的。大家先尝试各种方案，然后通过实践摸索出最佳实现方式，最后形成行业标准。这是一个很自然的技术演进过程。」翟佳对 Pulsar 的未来充满信心：凭借技术优势和社区基础，它迟早会在消息流中间件领域占据主导地位。&lt;/p&gt; 
&lt;p&gt;当 AI 浪潮席卷而来，能接住这场技术革命的，或许就是像翟佳这样十年专注一个方向的人。技术会变，但专业精神永不过时。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/3859945/blog/18688371</link>
      <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/18688371</guid>
      <pubDate>Fri, 15 Aug 2025 10:11:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>可灵 AI 启动全新首尾帧功能内测</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;快手旗下的可灵 2.1 视频生成模型于近日开启了全新的首尾帧功能内测。根据官方的介绍，此次升级不仅显著提升了视频生成的效果，还使得运镜控制变得更加流畅，展现出 「电影级」 的画面表现。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;img height="333" src="https://oscimg.oschina.net/oscnet/up-50cea486a7d67cc055485378ddd4c680b0e.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;新的首尾帧功能让视频的开头和结尾部分拥有了更精细的控制，这样一来，整体的视觉流畅度得到了有效提升。尤其是在处理复杂场景和语义时，可灵 2.1 显示出了更高的精准度，非常适合用于表达复杂故事或概念的视频创作。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;用户可以通过自定义首尾帧图像，生成连贯且高质量的视频内容。这一功能的引入，解决了以往 AI 视频生成中常见的转场生硬和文本响应不足等问题。此外，全新的首尾帧功能进一步提升了视频的一致性和稳定性，特别适合于产品宣传片、AI 电影、AI 短剧等专业创作场景。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;据了解，可灵 2.1 系列模型自今年 5 月 29 日正式推出以来，已经迭代升级超过 30 次。其高品质模式下，生成 5 秒的视频仅需不到 1 分钟，标准模式则在 20 灵感值内即可完成生成，成本下降幅度达到 65%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;可灵 2.1 在动态表现方面也做了显著提升。模型的动态细节更加精致，动态响应更加灵敏，物理模拟的真实度也有了提升，人物动作的幅度更加贴近现实。同时，模型的提示词响应也进一步优化，能够更好地理解用户的意图，生成符合预期的视频内容。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;该模型分为标准（720p）和高品质 (1080p) 两种模式，定位高端的可灵 2.1 大师版则提供更卓越的运动表现和更强的语义响应。根据快手发布的数据，可灵 AI 在全球已有超过 4500 万的创作者，累计生成超过 2 亿个视频和 4 亿张图片，显示出其广泛的应用潜力和强大的用户基础。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366479</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366479</guid>
      <pubDate>Fri, 15 Aug 2025 10:05:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>三大运营商上半年加码布局 AI 应用</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;span style="color:#000000"&gt;随着中国电信披露 2025 年半年度报告，三大运营商上半年业绩成绩单均已披露完毕。整体来看，今年上半年三家企业均实现净利润同比增长，营业收入增速则出现分化。业务方面，AI+仍是三家企业布局的重点方向。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;具体来看，中国移动今年上半年实现营业收入 5437.69 亿元，同比下降 0.5%；实现归属于母公司股东的净利润 842.35 亿元，同比增长 5.0%。中国电信今年上半年实现营业收入为 2694 亿元，同比增长 1.3%；实现归属于上市公司股东的净利润为 230 亿元，同比增长 5.5%。中国联通今年上半年实现营业收入 2002.02 亿元，同比增长 1.5%；实现归属于上市公司股东的净利润 63.49 亿元，同比增长 5.1%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此外，三大运营商均披露了半年度利润分配方案。其中，中国移动合计将派发中期股息 594.32 亿港元，拟宣派的中期股息以 2025 年 6 月 30 日汇率折算合计 541.99 亿元；中国电信拟向全体股东每股派发现金红利 0.1812 元，合计拟派发现金红利 165.81 亿元；中国联通共计拟向公司股东派发约 34.77 亿元的股利。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;纷纷大力发展 AI&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;今年上半年，三大运营商 AI 相关业务均交出亮眼成绩单。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;据中国移动半年报，上半年中国移动 AI 创新发展和规模应用步伐加快，上半年 AI 直接收入实现高速增长。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;中国移动董事长杨杰在 2025 年度中期业绩说明会上表示，目前中国移动从 AI 获得的直接收入及相关收入已达数十亿元规模，且这一业务自去年起进入实质性收益阶段，成为公司数智化转型的重要增长极。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;中国电信上半年实现智能收入 63 亿元，同比增长 89.4%。半年报显示，中国电信智能收入包括面向客户提供的人工智能、智算服务等收入。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;中国联通董事长陈忠岳则在业绩说明会上表示，中国联通加快 AI 赋能网络运营，提升用户体验感知，推动公司降本增效。由此，网络资产的科技含量更高、市场空间更大，蕴藏着前所未有的新价值。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;今年是人工智能规模应用的元年，三大运营商均就 AI 应用加码布局。今年上半年，中国移动联合能源、水利、农业等行业央企共建行业大模型；推动全量产品和服务嵌入 AI；发布 AI 智能助理灵犀智能体 2.0；发布 AI 智能终端、智能机器人、智能网联汽车等首批信息消费「新三样」产品。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;中国电信在工业、应急、交通等领域建成 80 多个行业大模型；推进云电脑、云盘等产品 AI 化升级；在天翼 AI 手机内置星辰大模型；围绕云网运营、客户服务、渠道营销、科技研发和企业管理等 21 个重点领域，打造形成 160 余个 AI 应用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;中国联通亦加快人工智能应用产品布局，以「用」为统领，深耕政务、经济、工业、医疗、教育、文旅等高价值场景，打造一批有实效、可复制的行业模型和智能体，加速赋能产业数智化升级。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;资本开支稳中有降&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;整体来看，今年上半年三大运营商资本开支稳中有降。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;今年上半年，中国移动完成资本开支 584 亿元。中国移动总经理何飚在业绩说明会上表示，今年下半年中国移动资本开支将主要投向算力。去年中国移动 AI 投资规模超过百亿元，今年 AI 相关的投资仍然会在原有基础上进一步提升，从而强化 AI 作为公司核心战略的目标，并形成新的增长动能，打造新的增长曲线。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;今年上半年，中国电信累计完成资本开支 342 亿元，其中移动网投资 121 亿元，产业数字化投资 116 亿元。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;上半年，中国联通资本开支 202 亿元，同比下降 15%。中国联通高级副总裁苗守野表示，中国联通 2025 年固定资产投资在 550 亿元左右。预计未来 2 年至 3 年，投资保持相对平稳，下降幅度会收窄。未来，中国联通将紧跟市场变化和技术演进，面对人工智能、6G 发展，持续跟踪国际、国内发展趋势，适时调整投资规模和节奏，以结构优化、精准建设为抓手开展布局，满足公司发展需求，做好投资保障。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;今年年初，中国移动预计 2025 年全年资本开支合计约为 1512 亿元，比 2024 年下降 128 亿元；中国电信 2025 年资本开支计划为 836 亿元，预计下滑 10.6%，算力方面资本开支预计同比增长 22%；中国联通预计全年资本开支规模下调至 550 亿元左右，其中算力投资同比增长 28%。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366477</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366477</guid>
      <pubDate>Fri, 15 Aug 2025 09:50:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Surya - 文档 OCR 工具包</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                            &lt;p style="text-align:start"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Surya 是一个文档 OCR 工具包，它可以执行以下操作：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持 90 多种语言的 OCR，其基准性能优于云服务&lt;/li&gt;
&lt;li&gt;任何语言的行级文本检测&lt;/li&gt;
&lt;li&gt;布局分析（表格、图像、标题等检测）&lt;/li&gt;
&lt;li&gt;阅读顺序检测&lt;/li&gt;
&lt;li&gt;表格识别（检测行/列）&lt;/li&gt;
&lt;li&gt;LaTeX OCR&lt;/li&gt;
&lt;/ul&gt;

&lt;p style="text-align:start"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;它适用于一系列文档（有关更多详细信息，可参阅&lt;a href="https://github.com/datalab-to/surya#usage"&gt;使用&lt;/a&gt;和&lt;a href="https://github.com/datalab-to/surya#benchmarks"&gt;基准）。&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="" height="226" src="https://static.oschina.net/uploads/space/2025/0814/140052_N92U_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="" height="226" src="https://static.oschina.net/uploads/space/2025/0814/140105_IORL_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/surya</link>
      <guid isPermaLink="false">https://www.oschina.net/p/surya</guid>
      <pubDate>Fri, 15 Aug 2025 09:40:00 GMT</pubDate>
    </item>
    <item>
      <title>Claude Code 新增「Output Styles」 功能，支持学习模式</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;Anthropic&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fclaudeai%2Fstatus%2F1956038897793716228" target="_blank"&gt; 宣布&lt;/a&gt;&amp;nbsp;Claude Code 新增 Output styles 功能来定制沟通风格：允许用户将 Claude Code 调整为任意类型 Agent 进行工作流配合，并且能保留其核心能力；此外，Claude 新增两种输出风格：解释性（Explanatory）和学习性（Learning）。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/165415_Qik8_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-6bb5c158ce06f99193220ce20646146ad4c.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;具体来看：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;解释性&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;能够让 Claude 深入探讨其操作过程和原因，并将架构决策背后的推理展现给用户，解释权衡取舍，并在编程中给到用户最佳实践。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;学习性&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;类似老师一样的定位，能偶尔暂停任务并请求用户自己完成部分内容，引导用户「边做边学」，并给出指导与反馈。它甚至会在代码中添加 TODO(human) 标记，等着你来填坑。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-59c5999b431daf19dc67a73403fb54c6ef1.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;详情查看文档&lt;em&gt;&amp;nbsp;https://docs.anthropic.com/en/docs/claude-code/output-styles&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366456</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366456</guid>
      <pubDate>Fri, 15 Aug 2025 09:09:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>马斯克测试由 Grok 4 Mini 驱动的全新 𝕏 算法</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;span&gt;马斯克近日&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Felonmusk%2Fstatus%2F1956580440136966203" target="_blank"&gt;透露&lt;/a&gt;，他正在测试由 Grok 4 Mini 驱动的全新 𝕏 算法，并明确表示：「它确实更好。」 &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="732" src="https://static.oschina.net/uploads/space/2025/0818/102119_fy42_2720166.png" width="1270" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;根据他的说法，这一新算法在性能上有明显提升，但要将其全面推广给所有用户，需要动用约 2 万块 GPU，并且会带来更高的延迟。尽管如此，马斯克仍认为「为了获得更好的性能，这些代价是值得的」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;目前尚未公开该算法的具体技术细节，如是否用于推荐系统、内容排序或 AI 生成内容优化等，但从马斯克的表态来看，Grok 4 Mini 在 𝕏 平台的应用已进入实测阶段，未来可能成为 𝕏 体验升级的核心技术之一。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;马斯克透露他正在测试由首次公开的 Grok 4 Mini 模型驱动的𝕏平台新算法，并表示全面推广需要约 20,000 块 GPU。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366866</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366866</guid>
      <pubDate>Wed, 13 Aug 2025 02:25:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>我国空间站首次应用专业领域 AI 大模型</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;据中国载人航天工程办公室消息，北京时间 2025 年 8 月 15 日 22 时 47 分，经过约 6.5 小时的出舱活动，神舟二十号乘组航天员陈冬、陈中瑞、王杰密切协同，在空间站机械臂和地面科研人员的配合支持下，圆满完成既定任务，出舱航天员陈冬、王杰已安全返回问天实验舱，出舱活动取得圆满成功。&lt;/p&gt; 
&lt;p&gt;与以往不同的是，此次神二十乘组在开展工作时有了一个新的助手，就是由天舟九号货运飞船搭载上行的「悟空 AI」大模型。在神二十乘组第三次出舱活动的准备工作中，「悟空 AI」大模型就发挥了辅助支撑作用，同时它还为航天员在轨工作提供了智能化、专业化的支持。&lt;/p&gt; 
&lt;p&gt;「悟空 AI」基于国内开源模型开发，结合载人航天飞行任务需求，采用预训练和指令微调技术，构建了专业领域大语言模型和以航天飞行知识规范为核心的知识库。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;中国航天员科研训练中心，邹鹏飞：&lt;/strong&gt;航天员根据他的需要去询问「悟空 AI」，比如说今天有哪些工作，在工作过程中可能有哪些操作的指南性质的、说明性质的知识。&lt;/p&gt; 
&lt;p&gt;&lt;img height="264" src="https://oscimg.oschina.net/oscnet/up-3f0d42fe3a0577cb2b09461d25dd5333bde.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;大模型技术在我国空间站首次应用验证，构建了天地协同的智能问答支持系统，通过地面和在轨两个模型，分别提供专业知识深度解析能力和解决重难点问题。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;中国航天员科研训练中心，邹鹏飞：&lt;/strong&gt;「悟空 AI」大模型为航天员在轨的复杂操作和故障处置提供快速有效的信息支持。助力航天员更有效地开展工作，丰富在轨的心理保障，也有助于天地协同效率的提高。&lt;/p&gt; 
&lt;p&gt;此外，针对载人航天飞行任务专业多元、类型复杂、数据海量等特点，「悟空 AI」大模型通过开发场景化数据处理等多种功能，确保响应快速，回答内容严谨正确，后续可拓展增加&lt;strong&gt;任务规划、数据分析、智能预测&lt;/strong&gt;等功能。「悟空 AI」大模型在轨一个月运行状态稳定，乘组航天员反馈良好，这一成果标志着我国空间站在轨智能化应用取得重要进展。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366864</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366864</guid>
      <pubDate>Wed, 13 Aug 2025 02:18:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>阿里推出多模态深度研究智能体 WebWatcher</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;阿里巴巴自然语言处理团队&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fwsm1OBCpYao63TPCnsnFdg" target="_blank"&gt;宣布&lt;/a&gt;推出 WebWatcher，这是一个开源的多模态深度研究智能体，旨在突破现有闭源系统和开源 Agent 在多模态深度研究领域的局限性。WebWatcher 通过整合网页浏览、图像搜索、代码解释器和内部 OCR 等多种工具，能够像人类研究员一样处理复杂的多模态任务，展现出强大的视觉理解、逻辑推理、知识调用、工具调度和自我验证能力。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;WebWatcher 的开发团队指出，尽管现有的闭源系统如 OpenAI 的 DeepResearch 在文本深度研究方面表现出色，但它们大多局限于纯文本环境，难以处理现实世界中复杂的图像、图表和混合内容。而现有的开源 Agent 也面临两大瓶颈:一类是专注于文本检索的 Agent，虽然能够整合信息，但无法处理图像;另一类是视觉 Agent，虽然能够识别图像，但缺乏跨模态推理和多工具协同能力。WebWatcher 正是为了解决这些瓶颈而设计的。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;WebWatcher 的技术方案覆盖了从数据构建到训练优化的完整链路，其核心目标是让多模态 Agent 在高难度多模态深度研究任务中具备灵活推理和多工具协作能力。为此，研究团队设计了一个全自动多模态数据生成流程，通过随机游走收集跨模态知识链，并引入信息模糊化技术，提升任务的不确定性和复杂性。所有复杂问题样本通过 QA-to-VQA 转换模块扩展为多模态版本，进一步增强了模型的跨模态理解能力。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="222" src="https://oscimg.oschina.net/oscnet/up-49fb7e96ad99da53f5c2a535d842f908428.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在高质量推理轨迹构建与后训练方面，WebWatcher 采用了 Action-Observation 驱动的轨迹生成方法，通过收集真实的多工具交互轨迹并进行监督微调（SFT），让模型在训练初期快速掌握多模态 ReAct 式推理和工具调用的基本模式。随后，模型进入强化学习阶段，通过 GRPO 进一步提升多模态 Agent 在复杂环境下的决策能力。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;为了全面验证 WebWatcher 的能力，研究团队提出了 BrowseComp-VL，这是 BrowseComp 在视觉-语言任务上的扩展版本，旨在逼近人类专家的跨模态研究任务难度。在多轮严格评测中，WebWatcher 在复杂推理、信息检索、知识整合以及聚合类信息寻优等任务上全面领先于当前主流的开源与闭源多模态大模型。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;具体来说，在人类&lt;span&gt;终极&lt;/span&gt;考试（Humanity’s Last Exam，HLE-VL）这一多步复杂推理基准上，WebWatcher 以 13.6% 的 Pass@1 分数一举夺魁，大幅领先于 GPT-4o(9.8%)、Gemini2.5-flash(9.2%) 和 Qwen2.5-VL-72B(8.6%) 等代表性模型。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在更贴近真实多模态搜索的 MMSearch 评测中，WebWatcher 的 Pass@1 得分高达 55.3%，相比 Gemini2.5-flash(43.9%) 和 GPT-4o(24.1%) 大幅领先。在 LiveVQA 评测中，WebWatcher 的 Pass@1 成绩达到 58.7%，领先于其他主流模型。在最具综合挑战的 BrowseComp-VL 基准上，WebWatcher 以 27.0% 的平均得分 (Pass@1)&lt;span&gt;遥遥领先&lt;/span&gt;，成绩提升超过一倍。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366863</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366863</guid>
      <pubDate>Wed, 13 Aug 2025 02:10:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Zed 编辑器团队发声：LLM 为何无法真正构建软件？</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;近日，开源代码编辑器 Zed 的开发团队发布了一篇引人深思的博文，标题直击要害：《为什么 LLM 无法真正构建软件》。这篇由 Conrad Irwin 撰写的文章不仅在技术圈引发热议，更是在 Hacker News 上掀起了一场关于 AI 辅助编程本质的深度讨论。&lt;/p&gt; 
&lt;h2&gt;软件工程的核心循环被 AI 误解了？&lt;/h2&gt; 
&lt;p&gt;Irwin 在文章中提出了一个关键观察：当你观察一个熟练的软件工程师工作时，会发现他们在不断循环四个步骤——构建需求的心智模型、编写代码、理解代码实际行为、识别差异并更新。而「区分优秀工程师的关键因素，是他们构建和维护清晰心智模型的能力」。&lt;/p&gt; 
&lt;p&gt;这个观点立即引起了社区的共鸣。用户 usrbinbash 形象地补充道：「我们不会只盯着调试器输出想着『怎么让这个错误消失』。当遇到认证错误时，软件工程师会退一步，思考整个系统，找出问题的根源。」他举例说，可能问题根本不在认证本身，而是测试用低权限用户调用了高权限函数——这种全局思考能力，正是 LLM 所欠缺的。&lt;/p&gt; 
&lt;h2&gt;LLM 的致命缺陷：无法维持心智模型&lt;/h2&gt; 
&lt;p&gt;文章指出，LLM 在编写代码时表现不错，在更新代码时也还可以，但它们「根本无法维持清晰的心智模型」。当测试失败时，LLM 会陷入无休止的困惑——它们假设自己写的代码能工作，不知道该修复代码还是测试，最后干脆删掉重来。&lt;/p&gt; 
&lt;p&gt;用户 9cb14c1ec0 深有感触：「我使用 Claude Code 越多，就越对这个问题感到沮丧。我不确定一个基于文本的通用 LLM 能否真正解决这个问题。」他的经历代表了许多开发者的心声——AI 工具在处理复杂项目时，往往会失去对整体架构的把握。&lt;/p&gt; 
&lt;p&gt;然而，并非所有人都认同这种悲观看法。andrewmutz 反驳道：「作者不理解今天的 LLM 和编码工具的能力。」他分享了自己使用 Cline 配合 Anthropic Sonnet 3.7 进行 TDD 开发的经验，认为 LLM 的表现「不亚于甚至优于初级工程师」。&lt;/p&gt; 
&lt;h2&gt;记忆与理解：技术瓶颈还是架构问题？&lt;/h2&gt; 
&lt;p&gt;Irwin 深入分析了 LLM 的三个根本性问题：「上下文遗漏」（难以发现被遗漏的上下文）、「近期偏见」（过度关注最近的信息）、以及「幻觉」（凭空捏造不存在的细节）。这些问题直接影响了它们维护心智模型的能力。&lt;/p&gt; 
&lt;p&gt;「即使不断增加上下文窗口」，文章写道，「我们人类处理问题的方式完全不同——我们能够临时存储完整上下文，专注解决问题，然后回到主线任务。我们不会简单地不断往上下文窗口里塞更多词汇。」&lt;/p&gt; 
&lt;p&gt;dlivingston 提出了一个有趣的类比：「这让我想起 Google 的 Genie 3 只能运行约一分钟就会失去内部状态。我的直觉是，除非发明某种新架构——规模堪比 Transformer 的突破——允许短期上下文、长期上下文和自我调节模型权重，否则这个问题无法解决。」&lt;/p&gt; 
&lt;h2&gt;实践者的两极分化&lt;/h2&gt; 
&lt;p&gt;社区对 AI 编程工具的看法呈现明显的两极分化。chollida1 从投资者角度提供了独特视角：「多年的投资经验让我形成了一个心智模型——寻找那些虽然糟糕但仍在增长的技术。90 年代的互联网很慢、经常断线，但人们还是在用；Twitter 经常出现失败鲸，但人们依然用它看新闻。『永远寻找那些虽然糟糕但人们仍在使用的技术，因为它提供了价值。』」&lt;/p&gt; 
&lt;p&gt;另一边，怀疑者们则提出尖锐批评。bagacrap 直言：「AI 编程爱好者总是说『你只是用错了模型』。当没有模型能用时，他们又说『6 个月后就会好了』。敏捷编程在复杂项目中的效用似乎永远无法被证伪。」&lt;/p&gt; 
&lt;p&gt;最有意思的是来自 diwank 的实践案例。他分享了一个完全由 AI 编写的项目 steadytext：「7000 行代码，包括 Python 库、CLI 和 Postgres 扩展，完全由 Claude Opus 编写和维护。我从未看过 90% 的代码，但它有完整的测试覆盖，通过 CI，我们在生产环境使用它！」这个案例引发了激烈讨论，有人质疑其真实性，有人则认为这代表了 AI 编程的未来可能。&lt;/p&gt; 
&lt;h2&gt;工具还是革命？业界的理性声音&lt;/h2&gt; 
&lt;p&gt;JimDabell 提供了一个更加平衡的视角：「LLM 无法构建软件，是因为我们期望它们听几句话就立即开始编码直到完成原型。如果我们让人类工程团队这样做，也会得到糟糕的结果。」他建议通过可执行规范、严格测试、架构决策记录等工具，让 AI 在有界问题上完成同样的循环。&lt;/p&gt; 
&lt;p&gt;robomartin 分享了他使用 Cursor 完成两个项目的详细经验：「基于这次经验，有一点非常清楚：『如果你不知道自己在做什么，你就完了。』」他发现，虽然 AI 能处理 Django 中大量的样板代码，但代码质量参差不齐，需要不断手动干预和修正。&lt;/p&gt; 
&lt;p&gt;skydhash 从更哲学的角度评论：「程序员主要是将业务规则翻译成计算机世界中非常正式的流程执行。你需要知道规则的含义，也要知道计算机如何工作。翻译一开始总是混乱的，这就是为什么需要一遍遍修订。」&lt;/p&gt; 
&lt;h2&gt;展望：不是终点，而是起点&lt;/h2&gt; 
&lt;p&gt;文章最后，Zed 团队表达了他们的立场：「在 Zed，我们相信人类和 AI 代理可以协作构建软件。但我们坚信，『至少现在，你还是驾驶员，LLM 只是另一个可以使用的工具。』」&lt;/p&gt; 
&lt;p&gt;这个观点得到了许多开发者的认同。cmrdporcupine 总结道：「它迫使你退一步做规划。你可以让它做苦力编码和低层分析测试，但你必须负责设计。这给了我更多时间思考大局，我喜欢这一点。」&lt;/p&gt; 
&lt;p&gt;正如 ethan_smith 所说：「真正的生产力提升不仅是打字速度，而是认知负载的转移——尽管我们必须小心，不要因为委托实现细节而失去维护准确心智模型的能力。」&lt;/p&gt; 
&lt;p&gt;这场关于 LLM 能否真正构建软件的讨论，不仅揭示了当前 AI 工具的局限性，更重要的是促使整个行业思考：在 AI 辅助编程的时代，什么是软件工程的本质？人类工程师的价值究竟在哪里？也许答案不在于 AI 能否取代人类，而在于如何让两者更好地协作，各自发挥所长。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366685</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366685</guid>
      <pubDate>Tue, 12 Aug 2025 02:22:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
  </channel>
</rss>
