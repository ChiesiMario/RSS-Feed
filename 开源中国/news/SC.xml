<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-最新资讯</title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://rsshub.app/oschina/news" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-最新资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Wed, 18 Sep 2024 04:05:18 GMT</lastBuildDate>
        <ttl>180</ttl>
        <item>
            <title>Java 23 / JDK 23 正式发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Java 23 现已全面&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmail.openjdk.org%2Fpipermail%2Fjdk-dev%2F2024-September%2F009395.html&quot; target=&quot;_blank&quot;&gt;推出&lt;/a&gt;。这是一个非 LTS（长期支持）版本，Oracle 仅提供六个月的支持。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此版本包含 12 个 JEP，其中包括将 ZGC 的默认模式切换为分代模式。&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;455：模式中的原始类型、instanceof 和 switch（Preview）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;466：Class-File API（Second Preview）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;467：Markdown 文档注释&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;469：Vector API（Eighth Incubator）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;473：Stream Gatherers（Second Preview）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;471：弃用 sun.misc.Unsafe 中的内存访问方法并删除&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;474：ZGC：默认的分代模式&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;476：模块导入声明（Preview）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;477：隐式声明的类和实例主方法（Third Preview）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;480：结构化并发（Third Preview）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;481：范围值（Third Preview）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;482：灵活的构造函数主体（Third Preview）&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;与往常一样，此版本还包含数百个较小的增强功能和数千个错误修复。&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;下载地址：&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjdk.java.net%2F23%2F&quot; target=&quot;_blank&quot;&gt;https://jdk.java.net/23/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;发行说明：&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjdk.java.net%2F23%2Frelease-notes&quot; target=&quot;_blank&quot;&gt;https://jdk.java.net/23/release-notes&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/312381/java-23-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/312381/java-23-released</guid>
            <pubDate>Wed, 18 Sep 2024 03:13:47 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Linux Kernel 6.11</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;Linus Torvalds 在内核邮件列表正式&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flkml.org%2Flkml%2F2024%2F9%2F15%2F282&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;了&amp;nbsp;Linux Kernel 6.11，以及开启 6.12 合并窗口。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0918/102938_VsFH_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Linux 6.11 主要新特性包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;io_uring 子系统支持 bind() 和 listen() 操作，&lt;/li&gt; 
 &lt;li&gt;对实时内核减少延迟的新锁定机制&lt;/li&gt; 
 &lt;li&gt;减少文本占用错误信息 ETXTBSY&lt;/li&gt; 
 &lt;li&gt;支持用 Rust 开发块驱动程序&lt;/li&gt; 
 &lt;li&gt;支持块层的原子写入操作&lt;/li&gt; 
 &lt;li&gt;专用 bucket slab 分配器加固内核防御堆喷射（heap spraying）攻击&lt;/li&gt; 
 &lt;li&gt;getrandom() 的 vDSO 实现，等等&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;此外，Linux 6.12 有望成为新的长期支持版本 (LTS)。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/312376/linux-6-11-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/312376/linux-6-11-released</guid>
            <pubDate>Wed, 18 Sep 2024 02:45:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>Linux 基金会宣布成立 OpenSearch 软件基金会</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Linux 基金会&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linuxfoundation.org%2Fpress%2Flinux-foundation-announces-opensearch-software-foundation-to-foster-open-collaboration-in-search-and-analytics&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;成立 OpenSearch 软件基金会。该基金会是一个社区驱动的倡议，旨在支持 OpenSearch 及其搜索软件，全球开发者使用这些软件构建搜索、分析、可观测性和向量数据库应用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;OpenSearch 软件基金会将由 Linux 基金会托管，目前已得到了 AWS、SAP 和 Uber 以及 Canonical 等成员的支持。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;288&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-90ed510c1445c5ba1d915830efd5a354230.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;OpenSearch 成立于 2021 年，之前由 AWS&amp;nbsp; 托管。随着 OpenSearch 软件基金会的成立，AWS 将 OpenSearch 转交给 Linux 基金会。该基金会将专注于支持 OpenSearch，以便它继续被全球组织采用，推动关键业务工作负载。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;AWS 搜索与云运营副总裁 Nandini Ramani 称：「将 OpenSearch 转交给 Linux 基金会，我们为项目和社区的下一阶段发展奠定了基础。中立的治理将促进更大的合作，加上编程和运营资源，我们期待与新基金会共同努力，让每个人都能继续受益于 OpenSearch。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;延伸阅读：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/137178/aws-opensearch&quot; target=&quot;_blank&quot;&gt;AWS 推出 OpenSearch：基于 Elasticsearch 的开源分支&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/309509/elasticsearch-is-open-source-again&quot; target=&quot;news&quot;&gt;Elasticsearch 再次开源&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/312371/linux-foundation-opensearch-software-foundation</link>
            <guid isPermaLink="false">https://www.oschina.net/news/312371/linux-foundation-opensearch-software-foundation</guid>
            <pubDate>Wed, 18 Sep 2024 02:22:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>凹语言 v0.16.0 中秋特别版本发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(60, 60, 67, 0.92)&quot;&gt;凹语言是国内首个面向 WebAssembly 设计的通用编程语言，也是国内首个被 CNCF 基金会 wasm 全景图收录的开源编程语言。&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(60, 60, 67, 0.92)&quot;&gt;新版本有以下更新：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;「国产语言论坛」被动关闭:&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://gitee.com/link?target=https%3A%2F%2Fzh-lang.osanswer.net&quot; target=&quot;_blank&quot;&gt;https://zh-lang.osanswer.net&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;增加&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;__package__&lt;/code&gt;/&lt;code&gt;__FILE__&lt;/code&gt;/&lt;code&gt;__LINE__&lt;/code&gt;/&lt;code&gt;__func__&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;预定义常量, 表示当前位置信息&lt;/li&gt; 
 &lt;li&gt;完善 wasm4 游戏支持, 增加俄罗斯方块/pong/life 等多个游戏, 并提供在线试玩页面&lt;/li&gt; 
 &lt;li&gt;重构&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;syscall&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;部分子包和文档&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;以下是俄罗斯方块的效果图 (&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwa-lang.org%2Fwa%2Fw4-tetris%2F&quot; target=&quot;_blank&quot;&gt;https://wa-lang.org/wa/w4-tetris/&lt;/a&gt;)：&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;638&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-f00b3fce61658618b7951e42d403f1ee597.jpg&quot; width=&quot;370&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//b8e0d42f0367c077b45c06977ee767dd.svg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;凹语言官网：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwa-lang.org%2F&quot; target=&quot;_blank&quot;&gt;https://wa-lang.org/&lt;/a&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/312142/walang-0-16-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/312142/walang-0-16-released</guid>
            <pubDate>Sun, 15 Sep 2024 21:39:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>Redmonk：开源软件许可变更及其对企业财务结果的影响</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Redmonk 高级分析师 Rachel Stevens &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fredmonk.com%2Frstephens%2F2024%2F08%2F26%2Fsoftware-licensing-changes-and-their-impact-on-financial-outcomes%2F&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;了一份研究报告，旨在探究：从开源许可证转换为专有许可证的公司的财务状况在许可证变更后是否有了实质性的改善？&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;虽然因为奉行这一战略并公开财务信息的公司数量很少，外部观察者很难给出一个准确的回答，但 Rachel 认为，「即使在小样本量内是否存在显著的趋势也是值得探讨的。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;该研究希望利用面向公开的财务数据来检查：公司收入随时间的变化、公司市值随时间的变化、以及公司净收入随时间的变化。不过 Rachel 也声明，相关数据集仍然存在很大的局限性。因为财务结果并不仅仅受到许可证变更的影响，还与市场竞争、公司业绩的其他方面以及总体宏观经济环境等其他因素有关。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;观察的样本主要有：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;MongoDB：&lt;/strong&gt;公司于 2017 年 10 月上市，在 2018 年 10 月将底层数据库的许可证从 AGPL 更改为 Server Side Public License 。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;Elastic：&lt;/strong&gt;公司于 2018 年 10 月上市。在 2021 年 1 月将底层 Elasticsearch 源代码的许可证从 Apache 2.0 更改为双重 SSPL/Elastic 许可证。（但在这份研究报告发布几天后，Elasticsearch 又宣布再次开源，计划添加 AGPL 作为 ELv2 和 SSPL 之外的另一个许可选项。此举或许也验证了一个观点：即专有许可并不一定更有利可图。）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;HashiCorp：&lt;/strong&gt;公司于 2021 年 12 月上市。在 2023 年 8 月将其软件许可证从 Mozilla Public License v2.0 更改为 Business Source License。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;Confluent：&lt;/strong&gt;于 2018 年 12 月将其平台组件从 Apache 2.0 更改为 Confluent Community License，当时他们还是一家私营公司。之后于 2021 年 6 月上市。（与其他公司不同的是，Confluent 是在变更许可后才上的市，因此其变更前的财务信息是没有公开的，无从得知。）&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;收入&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;第一个问题是：更改许可证的公司收入是否会增加？下图显示了每家公司的收入随时间的变化，蓝色垂直线代表了更改许可证的时间。为了便于比较，X 轴和 Y 轴保持不变，这意味着较早上市的公司有更多可用数据。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;625&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8864aaf07a4fc32c2069f34f47e2a642153.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;结果表明，许可证变更后收入有所增加，但是增长率与许可证变更前的增长率并没有实质性的差别。&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;市值&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;下图显示了公司市值随时间的变化；当公司市值高于其 IPO 估值时，线条为黑色，低于 IPO 估值时，线条为红色。同样，蓝色垂直线代表了更改许可证的时间，X 轴和 Y 轴保持不变。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;625&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-047c3f0c5b02ca0bad05585d58aba8e83d3.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;鉴于 Mongo 的增长数字使图表出现很大偏差，还为每个公司提供了一个自由浮动 y 轴的版本。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;625&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c845c7fa097950f7d293c518ed71a3c7a6b.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;结果表明：MongoDB 在许可证变更后，公市值大幅增长。Elastic 有所增长，但速度要温和得多。HashiCorp 一直举步维艰，许可证变更后估值有所下降。&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;净利&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;值得注意的是，上述公司目前均未实现盈利。这意味着估值主要取决于未来现金流的预期增长。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;625&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4838795f4988c87782a525d27c8695597aa.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;总的来说，分析师认为，这些公司在许可证变更后收入有所增长，但增长率并没有显著变化。且公司估值结果参差不齐，&lt;strong&gt;从开源许可证转向专有许可证与公司价值提升之间似乎没有明显的联系&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevclass.com%2F2024%2F09%2F09%2Fredmonk-no-clear-link-between-moving-from-open-source-to-a-proprietary-license-and-increasing-company-value%2F&quot; target=&quot;_blank&quot;&gt;DevClass &lt;/a&gt;指出，转向更严格的许可证的最大因素是超大规模云供应商以服务形式提供开源软件产品，从托管中获利，但开源软件的供应方却没有直接受益。MongoDB 早在 2018 年就&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2018%2F10%2F16%2Fmongodb_licensning_change%2F&quot; target=&quot;_blank&quot;&gt;表示&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;，「一旦开源项目变得有趣或流行，云厂商就很容易获取所有价值，且不会给社区带来任何回报。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;专注于开源数据库管理器的 Percona 联合创始人 Peter Zaitsev 发表观点称，为了增加利润而放弃开源许可证的做法不会成功，因为已经有大量代码采用了宽松式许可证 (Permissive Licenses)，而且这种做法往往会阻碍创新。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/312020/redmonk-software-licensing-changes-financial</link>
            <guid isPermaLink="false">https://www.oschina.net/news/312020/redmonk-software-licensing-changes-financial</guid>
            <pubDate>Sun, 15 Sep 2024 01:07:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>开源日报 | 「纯血」鸿蒙 9 月底正式发布；VirtualBox 7.1；OpenAI o1 的价值及意义；云计算的底色；丰田的软件危机</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.9.14&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ithome.com%2F0%2F795%2F867.htm&quot; target=&quot;_blank&quot;&gt;华为「纯血」鸿蒙系统 HarmonyOS NEXT 将于 9 月底推出正式版&lt;/a&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p&gt;钛媒体独家获悉，正在举行的 2024 年中国国际服务贸易交易会（以下简称「服贸会」）一场论坛上，华为鸿蒙行业解决方案总经理陈欣欣透露，华为完全自主开发、原生安全、原生智能的华为「纯血」鸿蒙系统 HarmonyOS NEXT 将于今年 9 月底推出正式版本。&lt;/p&gt; 
 &lt;p&gt;「从发布第一个版本到今年的 9 月份，这个（9 月）月底我们会正式发布 HarmonyOS NEXT，这一版本是完全独立开发、独立自主的，而且是不兼容安卓系统。」陈欣欣表示。&lt;/p&gt; 
 &lt;p&gt;陈欣欣透露，截至目前，HarmonyOS 操作系统自发布以来历经 4 代，目前鸿蒙生态设备已经超 9 亿台，开发者数量达到 254 万，应用开发服务月调用次数达到 827 亿次。同时，鸿蒙还发起「耀星计划」，将投入超过 70 亿元人民币，持续激励鸿蒙原生应用、技术服务、SDK 等创新，打造鸿蒙生态体系。&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/311859/virtualbox-7-1-released&quot;&gt;VirtualBox 7.1 发布&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p&gt;甲骨文称 VirtualBox 7.1 是一个重大更新 —— 该版本启用了具有 「现代化的外观和体验」 的新 UI，并提供了 「基础」 和 「专业」 两种 UI 模式（「Basic」 &amp;amp; 「Expert」），用于配置不同的界面功能。&lt;/p&gt; 
   &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-82dc07347e1e4f4b5f1b5b6d172ee054503.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
   &lt;p&gt;值得关注的变化包括：&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;基于 Qt 6 的全新现代化 UI&lt;/li&gt; 
    &lt;li&gt;在 Wayland 环境下使用剪贴板共享功能&lt;/li&gt; 
    &lt;li&gt;支持 Apple Silicon&lt;/li&gt; 
    &lt;li&gt;优化屏幕录制功能&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/311858/google-search-internet-archive-wayback-machine&quot;&gt;谷歌在搜索结果集成互联网档案馆「Wayback Machine」&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.archive.org%2F2024%2F09%2F11%2Fnew-feature-alert-access-archived-webpages-directly-through-google-search%2F&quot; target=&quot;_blank&quot;&gt;根据互联网档案馆 (Internet Archive) 的官方公告&lt;/a&gt;，谷歌已开始在搜索结果中加入互联网档案馆「Wayback Machine」的链接，此举旨在为结果加入&lt;strong&gt;历史背景（historical context）&lt;/strong&gt;。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;谷歌表示：「我们知道，包括研究社区在内，许多人都希望能够查看网页的先前版本。因此，&lt;strong&gt;我们在 「关于本页」 功能中添加了互联网档案馆 Wayback Machine 的链接&lt;/strong&gt;，以便人们能够快速获取历史背景，并通过搜索轻松访问这些有帮助的信息。」&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-c6b1529b72aa77f2692f7c1b7d4ac302ff0.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#245bdb&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/311854&quot;&gt;快手自研 Spark 向量化引擎发布，性能提升 200%&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Blaze 是快手自研的基于 Rust 语言和 DataFusion 框架开发的 Spark 向量化执行引擎，旨在通过本机矢量化执行技术来加速 Spark SQL 的查询处理。现已开源发布，开源版本全面兼容 Spark 3.0~3.5。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;公告称，在 TPC-DS 1TB 的测试中，Blaze 相较于 Spark 3.3 版本减少了 60% 的计算时间、Spark 3.5 版本减少了 40% 的计算时间，并大幅降低了集群资源的消耗；此外，Blaze 在快手内部上线的数仓生产作业也观测到了平均 30% 的算力提升，实现了较大幅度的降本增效。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Spark+Blaze 的架构设计原理如下图：&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;270&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5c54e6e0d5b68a9d45a23bb4289cb006543.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;307&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-fb4879973f0e55873be39c07a7c7bb0643f.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F720078255&quot; target=&quot;_blank&quot;&gt;OpenAI o1 的价值及意义&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     &lt;span style=&quot;background-color:#ffffff; color:#191b1f&quot;&gt;所以目前大模型的核心能力提升，聚焦到不断通过合成数据等方式构造更多比例的逻辑推理数据上来。但是大部分逻辑推理数据的形式是&amp;lt;问题，正确答案&amp;gt;，缺了中间的详细推理步骤，而 o1 本质上是让大模型学会自动寻找从问题到正确答案的中间步骤，以此来增强复杂问题的解决能力。 OpenAI o1 提到了关于 RL 在训练和推理时候的 Scaling law，并指出这与预训练时候的 Scaling law 具有不同特性。&lt;/span&gt;
    &lt;/div&gt; 
    &lt;div&gt;
     &amp;nbsp;
    &lt;/div&gt; 
    &lt;div&gt;
     &lt;span style=&quot;background-color:#ffffff; color:#191b1f&quot;&gt;很明显，如果 o1 走的是 MCTS 搜索技术路线，那么把 COT 拆分的越细（增加搜索树的深度），或提出更多的可能选择（节点的分支增多，就是说树的宽度越宽），则搜索空间越大，找到好 COT 路径可能性越大，效果越好，而训练和推理的时候需要算力肯定越大。看上去有着效果随着算力增长而增长的态势，也就是所谓的 RL 的 Scaling law。这其实是树搜索本来应有之义，我倒觉得把这个称为 RL 的 Scaling law 有点名不副实。&lt;/span&gt;
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;张俊林&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2Fttarticle%2Fp%2Fshow%3Fid%3D2309405078432919978029&quot; target=&quot;_blank&quot;&gt;硬件工程师设计出错是什么体验？&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;曾经我认为硬件工程师是一种需要具备高度产品设计思维的职业，从大学毕业到职场。但最近我知道了一种硬件工程师的高效率工作方式，抄板和开源文件借鉴。&lt;/p&gt; 
     &lt;p&gt;当然，抄来的板子也不一定适合自己的方案，抄来再改也能锻炼工程师的基本功的，至于出错一是看什么项目，二是看板子的成本，三是看工程师的工作经验。刚入职场的新手肯定也就应该是可以庆幸可以参与一次项目了，出错了表示还有很高的提升空间，而且接触的项目肯定也是不太重要的，有点经验的硬件工程师也就改板子，只要不是特别重大的错误，在公司越有经验技术过硬还真就没啥事。&lt;/p&gt; 
     &lt;p&gt;而且现在抄板和开源，从 0 开始做项目真的很少，所以俺的体验就是集中在和老板和客户讨论改板子时祈祷千万不要给我那种大项目，我还是小白。&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;捷配 PCB&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1727858283%2FOwWrh2lA3&quot; target=&quot;_blank&quot;&gt;o1 在医疗数据集（AgentClinic-MedQA）上表现出色&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;o1 在医疗数据集（AgentClinic-MedQA）上表现出色，远远超越了 GPT-4o。以后 AI 在处理复杂医疗信息、提供准确诊断、给出医疗建议以及推荐治疗方案方面的快速进步将会持续加速。&lt;/p&gt; 
    &lt;p&gt;像诊断疾病、解读医学影像和制定治疗计划等医疗任务，未来人工智能系统也许能比人类医生更快、更一致的方式完成。 &lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&amp;nbsp;&lt;/span&gt;&lt;strong&gt;宝玉 xp&lt;/strong&gt;&lt;/p&gt; 
  &lt;div&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1862172703%2FOwX41DI1c%3Frefer_flag%3D1001030103_&quot; target=&quot;_blank&quot;&gt;开芯红完成了超亿元种子轮融资，依托「香山」处理器 IP 打造 RISC-V 生态圈&lt;/a&gt;&lt;/h4&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     北京开芯红科技有限公司（#开芯红# ）于近日成功完成了超亿元种子轮融资，本轮融资由启航投资旗下北科中发展启航基金、芯创二期基金领投，多家知名投资机构跟投。开芯红是北京市开源芯片研究院唯一的成果转化项目平台，公司依托开芯院「香山」系列高性能处理器 IP，致力于打造以「香山 IP 核定制优化+先进工艺芯片设计服务」平台服务型公司，成为中国 RISC-V 产业的生态发动机。
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;div style=&quot;text-align:right&quot;&gt;
     &lt;span style=&quot;color:#000000&quot;&gt;- 微博&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt; 
     &lt;strong&gt;集微网官方微博&lt;/strong&gt;
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.com.cn%2Farticle_7517400647_1c0126e4705905oqf2.html&quot; target=&quot;_blank&quot;&gt;中国人工智能核心产业规模已近 6000 亿元&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;中国工业和信息化部信息技术发展司副司长杨亚俊 13 日表示，中国初步构建了较为全面的人工智能产业体系，相关企业超过 4500 家，核心产业规模已接近 6000 亿元人民币，产业链覆盖芯片、算法、数据、平台、应用等上下游关键环节。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;人民资讯&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.cn%2Farticle_1826017320_6cd6d02802001c97o.html&quot; target=&quot;_blank&quot;&gt;北京发出首张「具身智能机器人食品经营许可证」：AI 大厨即将登场&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;考虑到智能机器人进入餐饮领域后的监管空白，海淀区市场监管局还在全国率先制定了「餐饮服务智能机器人」的管理规范和 47 项监管项目，确保机器人安全上岗。届时，在后厨忙着炸薯条、炸鸡块、炒饭的将不再是真人厨师，而是具有 AI 功能的机器人大厨。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;IT 之家&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMjM5ODIzNTc2MA%3D%3D%26mid%3D2661036700%26idx%3D3%26sn%3D0e5048efc3619b6baed2e68534bac468%26chksm%3Dbc0e0c0ab89c113c5636c6cbf1d87d77729eff8dfdb672753c46d16be152f75d3958adbb9c4a%23rd&quot; target=&quot;_blank&quot;&gt;回看十五年，云计算的底色&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#222222; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#292934&quot;&gt;从突破资源限制的起点出发，如今的云计算不仅带来技术的革新，更对整个经济模式和社会结构进行了的一次深刻变革，与此同时支撑着 AI 共同驱动数字经济飞轮向前。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#292934&quot;&gt;钛媒体&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.eeo.com.cn%2F2024%2F0914%2F687440.shtml&quot; target=&quot;_blank&quot;&gt;AI 视频「卷」成红海，创业公司还有机会吗&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;AI 视频的未来听起来很美好，但这个领域，目前并没有出现一个出圈的爆款应用。无论是 AI 视频产品还是由 AI 生成的视频作品，都像是少数影视专业人士的玩具，局限在小圈子范围内，始终未能像 ChatGPT（美国头部 AI 应用）一样在大众层面获得认可。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;经济观察网&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnew.qq.com%2Frain%2Fa%2F20240913A08WGT00%3Fsuid%3D%26media_id%3D&quot; target=&quot;_blank&quot;&gt;丰田的软件危机：做了很多，一无所获&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;与电动化转型上的迟钝形象不同，丰田很可能是最早投身车载操作系统的车企。&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;种种迹象表明，丰田章男很早就意识到，谷歌和微软这类科技公司会凭借软件优势切入汽车市场，并动摇由丰田主导的利益分配规则。从操作系统到自动驾驶，丰田在过去二十年间从未缺席。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;远川科技评论&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8crvEaVTy7w&quot; target=&quot;_blank&quot;&gt;北清华、南交大，孵出 10 家人形机器人顶流创企&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;机器人这一产业的研究早期集中在高校和科研机构，其中清华大学和上海交通大学是我国机器人研究历程较为悠久的院校，因此这一波人形机器人创业热潮中呈现出「北清华、南交大」的格局，人形机器人竞赛的创业者中有 14 位来自清华大学和上海交通大学。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;智东西&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsemgrep%2Fsemgrep&quot; target=&quot;_blank&quot;&gt;semgrep/semgrep&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;348&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1bdaf1b89258aad4562cc9005c7078c95c4.jpg&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsemgrep%2Fsemgrep&quot; target=&quot;_blank&quot;&gt;https://github.com/semgrep/semgrep&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Semgrep 是一个快速、开源的静态分析工具，用于在编辑、提交和 CI 时查找错误并执行代码标准。Semgrep 在你的电脑或构建环境中分析本地代码：默认情况下，代码永远不会上传。&lt;/span&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/morflameblog/blog/15316524&quot; target=&quot;_blank&quot;&gt;可观测性与传统监控的区别和联系&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;可观测性认为，你的应用是如何运行的以及是否在正确的运行，应该主动地、默认地通过 Metrics、Logging、Tracing、Events 等多种数据维度实时的暴露出来，然后通过工具进行可视化、告警、分析和数据洞察。对应用内部状态和行为的暴露，是系统设计之初就要考虑的重要组成，是系统功能不可分割的一部分。在可观测体系下，「埋点」 是一种文化，应用的开发者承担着主体责任，系统的维护者反而作为数据的使用方存在。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img height=&quot;233&quot; src=&quot;https://fcpub-1301667576.cos.ap-nanjing.myqcloud.com/flashcat/images/blog/o11y-vs-mon/2.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/311797&quot; target=&quot;_blank&quot;&gt;deepin 25 开发计划大揭秘：新增功能与性能优化一览&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：这个版本号是什么规则，怎么跳过 24 了，按照年份来的？&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：立项在哪一年就是那一年的年份做版本&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：嵌入式开发用 deepin 还是用 Ubuntu ?&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：能不能优化一下分屏的支持，看看 windows 的分屏多好用，我一开始双屏幕用 deepin 有好多问题，后来一咬牙换成 49 寸带鱼屏了，分屏却不方便&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：幸好我把自己电脑换成 win10 了。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：25❎&amp;nbsp;23.1✅&amp;nbsp;&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/311859/virtualbox-7-1-released&quot; target=&quot;_blank&quot;&gt;VirtualBox 7.1 发布&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：各位不要急着更新，更新完之后 linux 虚拟机不支持 3D 加速了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：vagrant 什么时候支持 7.1 我才更&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FkfbplH38IgDfdw0o-f0z-A&quot; target=&quot;_blank&quot;&gt;PHP 程序员相亲时请注意用词&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：看吧，我就说不能写 PHP&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：就说写世界上最好的编程语言。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：应该解释 PHP 是面向对象工作。再解释工作时候，我的对象给同事用，同事的对象也给我用，PHP 是开放的，对象是共享的。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：没错呀有许多黄色网站都是 php 写的&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：是个拒绝的好方法&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：众所周知 php！=程序员&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311972</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311972</guid>
            <pubDate>Sat, 14 Sep 2024 11:00:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>可观测性与传统监控的区别和联系</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;span id=&quot;OSC_h2_1&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;什么是可观测性？&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;可观测性（Observability）是一种软件开发和系统构建的哲学，是对系统内部状态及行为的度量和推断能力，通常包括日志、指标、链路追踪等多个度量维度。也就是说，在软件开发和运维领域中，可观测性是指对于一个复杂的系统，能够通过监控、日志、指标、追踪等手段，快速地发现、诊断、解决问题的能力。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;Observability 最早是起源于控制论的一个概念：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;color:#333333&quot;&gt;In 1960, Kálmán introduced a characterization he called observability to describe mathematical control systems in his paper. In control theory, observability is defined as a measure of how well internal states of a system can be inferred from knowledge of its external outputs.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;span id=&quot;OSC_h2_2&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;传统监控的局限&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;从核心出发点来讲，传统的监控和可观测性，背后解决的是同样的问题，就是及时、准确的掌握系统的运行状况，提升对系统运行的控制能力。因此常有人讲可观测性之于监控是「&lt;strong&gt;新瓶装旧酒&lt;/strong&gt;」，换汤不换药。实则不然，随着技术架构的演进，传统监控的局限愈发突出：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;color:#333333&quot;&gt;&lt;strong&gt;侧重于依赖「经验主义」，应对「已知问题」&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;传统监控，要预先知晓采集哪些指标，添加什么样的告警策略，定制什么样的仪表盘，以便发现某种类型的故障后，采用什么样的 Runbook 来应对。比如技术团队根据过往经验，知道一台服务器上打开的文件句柄数量不能太多，超过某个上限就会影响到网络通信以及文件读写，因此我们会采集一个&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;node_filefd_allocated&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;的指标，然后配置一个告警策略：当&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;node_filefd_allocated &amp;gt; 1000k&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;则触发告警，同时我们会提前制作一个 Linux 主机 Dashboard，其中包含有&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;node_filefd_allocated&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;的趋势图。准备好这些工作之后，接下来就是守株待兔，等待告警的触发，值班的技术团队就可以按照 Runbook 中载明的排查步骤，检查是否有进程泄露文件句柄，或者是否有大量的网络链接建立等等。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;&lt;strong&gt;经验主义，总是有限的，无法预知可能发生的各种未知的故障&lt;/strong&gt;。因此在实际情况中，告警策略的完善往往靠「故障覆盘」来驱动，每次故障覆盘后，必定会有的一个改进项：继续完善监控、加更多的告警。技术团队总会处于一种对未知故障缺乏掌控的不安全的状态中，产生焦虑感，反过来又会促使技术团队添加更多的监控，久而久之，告警会越加越多，却又永远不够，告警风暴就这样产生了。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;color:#333333&quot;&gt;&lt;strong&gt;告警驱动的传统监控，缺乏对故障的全局感知&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;在传统监控中，告警充当着举足轻重的作用。当使用传统监控方式，发出某个告警之后，值班的技术团队看到的只是一个孤立的」技术问题「，这个技术问题的影响面有多大，重要程度如何，是否需要立即处理，是否需要上升和协同，很难快速的做出判断。某个」技术问题「是否重要，是否紧急，不取决于该技术问题本身的难易程度，也不取决于所涉及的服务器规模多寡，唯一的衡量标准是」对用户体验产生的影响有多大「。&lt;strong&gt;使用传统监控无法快速的评估某个告警事件和用户体验之间的必然联系&lt;/strong&gt;，导致无法投入准确的应急处置资源，无法确定合理的应急响应时效，也无法和其他资源产生有效的联动协同，最终使得稳定性保障工作效率低下。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;color:#333333&quot;&gt;&lt;strong&gt;传统监控认为，系统的开发者和系统的维护者，职责是相对分割的，导致监控以外挂形式为主&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;系统在设计之初，开发者的重心在于完成必备的业务逻辑，对于自身运行状态的暴露，并没有考虑的很完善甚至有时候都没有考虑。大家可能会经常遇到，做的好的开发者可能还会打印较为详细的日志，做的不好的，连日志也打的不全，更不必说提供主动暴露系统状态的 Metrics 接口或者为实现 Tracing 进行埋点了。一旦系统到了上线运行阶段，维护人员接手后，往往只能开启「外挂」模式，通过写各种各样的脚本，去探测进程是否存在、去分析匹配日志中是否有关键的错误字段。如果要进一步统计系统的访问量、访问延迟、资源消耗等等，就会更加被动。&lt;strong&gt;「外挂」往往是传统监控数据采集的特征&lt;/strong&gt;。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;color:#333333&quot;&gt;&lt;strong&gt;传统监控面向的通常是基础设施，Metrics 是传统监控的基础&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;传统监控面向基础设施，基础设施的变化较慢，且变化带来的结果相对可预测。Metrics 类型的监控指标，具有采集存储成本低、简单直观、易于聚合计算的特点，因此在过去的二三十年里，基于 Metrics 为基础，出现了各种各样的采集器、时序数据库、可视化工具、告警工具等，基于前面提到的」经验主义「，尚能应付面向基础设施的稳定性保障工作。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_3&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;传统监控工具发展的三个阶段&lt;/h2&gt; 
&lt;span id=&quot;OSC_h3_4&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;阶段 1：Metrics 监控之&lt;em&gt;互联网大流行前&lt;/em&gt;&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;color:#333333&quot;&gt;&lt;strong&gt;互联网大流行前，擅长于局部场景，部分工具到现在仍然被广泛使用&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;&lt;img src=&quot;https://fcpub-1301667576.cos.ap-nanjing.myqcloud.com/flashcat/images/blog/o11y-vs-mon/1.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Cacti：最悠久的监控系统之一，2001 年 9 月，一个名叫 Lan Berry 的高中生，当时他还在为一家小的 ISP 厂商工作，为了更好地监控网络质量，开发了 Cacti 的第一个版本，基于 RRDtool，提供更友好的使用体验。&lt;/li&gt; 
  &lt;li&gt;Nagios：Nagios 可谓是早期告警方向事实上的工业标准，可以用来监控主机和网络基础设施，以及各种应用服务。在监控对象出现问题时，及时发送邮件或者短信通知相关人员；当问题解决后，发送恢复信息。一段时间的主流，后来以难用闻名。&lt;/li&gt; 
  &lt;li&gt;Ganglia： UC Berkeley 发起的一个开源集群监视项目，设计用于测量数以千计的节点。主要是用来监控系统性能，如：cpu 、mem、硬盘利用率， I/O 负载、网络流量情况等，至今仍然在 Hadoop 监控领域流行。&lt;/li&gt; 
  &lt;li&gt;RRDtool：在时间序列数据（time-series data）的存储、展示方面，其独创的 round-robin database 数据存储格式，曾经是事实上的时序数据存储工业标准。包括 Cacti、MRTG、Collectd、Ganglia、Zenoss 等系统，都是采用 RRDtool 的格式来存储数据，以及使用 RRDtool 的 Graph 工具来绘图。&lt;/li&gt; 
  &lt;li&gt;Collectd：定位是收集和传输数据。在告警方面不是 Collectd 的设计初衷，不过它也支持一些简单的阈值判定，并发送告警信息。要支持更高级的一些告警需求，Collectd 可以和 Nagios 配合使用。&lt;/li&gt; 
  &lt;li&gt;StatsD：最早是 2008 年 Flickr 公司用 Perl 写的，StatsD 其实就是一个监听 UDP（默认）或者 TCP 的守护程序，根据简单的协议收集 statsd 客户端发送来的数据，聚合之后，定时推送给后端，如 graphite 和 influxdb 等，再通过 grafana 等展示。&lt;/li&gt; 
  &lt;li&gt;Graphite：一个开源实时的、显示时间序列度量数据的图形系统。Graphite 并不收集度量数据本身，而是像一个数据库，通过其后端接收度量数据，然后以实时方式查询、转换、组合这些度量数据。Graphite 支持内建的 Web 界面，它允许用户浏览度量数据和图。&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;span id=&quot;OSC_h3_5&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;阶段 2：Metrics 监控之&lt;em&gt;互联网快速发展期&lt;/em&gt;&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;color:#333333&quot;&gt;&lt;strong&gt;互联网快速发展的时代，监控往一体化方向发展，注重体验的提升&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;span id=&quot;OSC_h4_6&quot;&gt;&lt;/span&gt; 
&lt;h4&gt;Zabbix&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;作为一款企业级分布式监控系统，功能齐全，用户体验良好，文档完善，API 强大，存储可以对接主要的 SQL 接口数据库，适合于中小规模的公司或者团队使用。Zabbix 由 Alexei Vladishev (阿列克谢.弗拉迪谢夫、拉脱维亚人）创建，目前由其成立的公司 —— Zabbix SIA（一家总部位于拉脱维亚里加的软件公司） 积极的持续开发更新维护， 并为用户提供技术支持服务。&lt;/p&gt; 
&lt;span id=&quot;OSC_h4_7&quot;&gt;&lt;/span&gt; 
&lt;h4&gt;Open-Falcon&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;小米技术团队于 2015 年开源的一款互联网企业级监控系统，重在解决日益增长的监控数据量和监控系统的容量限制之间的矛盾。Open-Falcon 在架构设计上，一个最关键的考量点就是「&lt;em&gt;如何做到水平扩展&lt;/em&gt;」，底层存储采用的是 RRDtool 标准。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;在 Zabbix 被广泛使用的时期，Open-Falcon 为何能够在中国获得重要影响力：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open-Falcon 的初衷就是解决 zabbix 在大数据量情况下无法扩展伸缩的问题；&lt;/li&gt; 
 &lt;li&gt;Open-Falcon 引入了标签概念，该特性让监控数据的分析变得非常灵活而强大，是下一代监控主要特点之一；&lt;/li&gt; 
 &lt;li&gt;Zabbix 的用户体验在当时不太符合中国工程师的习惯；&lt;/li&gt; 
 &lt;li&gt;Open-Falcon 借助小米在互联网公司的影响获得快速推广；&lt;/li&gt; 
 &lt;li&gt;Zabbix 基于 C 语言开发，而 Open-Falcon 基于 Go 语言开发，在二开上更为友好；&lt;/li&gt; 
 &lt;li&gt;Open-Falcon 的中文文档和支持能力；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h3_8&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;阶段 3：Metrics 监控之&lt;em&gt;云原生时代&lt;/em&gt;&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;color:#333333&quot;&gt;&lt;strong&gt;Prometheus 成为时代的王者&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;span id=&quot;OSC_h4_9&quot;&gt;&lt;/span&gt; 
&lt;h4&gt;Prometheus&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;由前 Google 工程师从 2012 年开始在 Soundcloud 以开源软件的形式进行研发的系统监控和告警工具包，产品设计源于 Google 的 Borgmon。Prometheus 的开发者和用户社区非常活跃，Prometheus 于 2016 年 5 月加入 CNCF 基金会，成为继 Kubernetes 之后的第二个 CNCF 托管项目。&lt;/p&gt; 
&lt;span id=&quot;OSC_h4_10&quot;&gt;&lt;/span&gt; 
&lt;h4&gt;Nightingale&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;夜莺 (Nightingale) 是一款开源云原生监控工具，是中国计算机学会接受捐赠并托管的第一个开源项目，在 GitHub 上有 8000 颗星，有数千家企业用户使用。夜莺集合了 Prometheus 和 Grafana 的优点，你可以在 UI 上管理和配置告警策略，也可以对分布在多个 Region 的指标、日志、链路追踪数据进行统一的可视化和分析。&lt;/p&gt; 
&lt;span id=&quot;OSC_h4_11&quot;&gt;&lt;/span&gt; 
&lt;h4&gt;高性能时序数据库代表&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Prometheus：Prometheus 自带的高性能单机存储数据库；&lt;/li&gt; 
 &lt;li&gt;InfluxDB：支持按标签存储查询，该领域最著名的时序数据库之一；&lt;/li&gt; 
 &lt;li&gt;TDengine：国内最著名的开源时序数据存储之一，面向 IoT 领域，表结构存储，支持 SQL 查询；&lt;/li&gt; 
 &lt;li&gt;TimescaleDB：表结构存储的代表，支持 SQL 查询；&lt;/li&gt; 
 &lt;li&gt;VictoriaMetrics：被广泛应用的标签存储时序数据库，和 prometheus 做了无缝兼容；&lt;/li&gt; 
 &lt;li&gt;M3DB：Uber 开发开源，高性能可扩展时序数据库，支持按标签存储查询，兼容 prometheus，扩展性比 VictoriaMetrics 好，但运维更复杂；&lt;/li&gt; 
 &lt;li&gt;Mimir：Grafana 于 2022 年 3 月 30 日发布的时序数据存储，完全兼容 prometheus 生态；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_12&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;可观测性的特点&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;可观测性认为，你的应用是如何运行的以及是否在正确的运行，应该主动地、默认地通过 Metrics、Logging、Tracing、Events 等多种数据维度实时的暴露出来，然后通过工具进行可视化、告警、分析和数据洞察。对应用内部状态和行为的暴露，是系统设计之初就要考虑的重要组成，是系统功能不可分割的一部分。在可观测体系下，「埋点」是一种文化，应用的开发者承担着主体责任，系统的维护者反而作为数据的使用方存在。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;&lt;img src=&quot;https://fcpub-1301667576.cos.ap-nanjing.myqcloud.com/flashcat/images/blog/o11y-vs-mon/2.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;以终端用户发起对服务端的一次请求为例，在该请求的整个生命周期内，尽可能多的细节都应该被记录下来，以便在未来的某个时刻用于 troubleshooting，这些细节数据可能包括：请求 ID（request_id）、请求头（headers）、请求参数（parameters）、请求执行的时间（duration_time）、对下游的 rpc 调用（rpc_calls)、执行 rpc 调用的耗时、rpc 调用的结果、环境变量、元信息（metadata）等等。在可观测体系下，这些数据都应该被实时的记录下来，并以结构化的形式存储。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;相较于传统监控关注基础设施，可观测性强调面向」Application「。随着云原生架构和微服务模型的普及，现代化的应用出现了一些新的特点：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;ol&gt; 
  &lt;li&gt;相比单体应用，技术团队面临着更多的服务需要管理；&lt;/li&gt; 
  &lt;li&gt;很多服务之间都是松耦合，而且像云数据库、云存储、第三方 API 等服务，都不处于你的掌控之下；&lt;/li&gt; 
  &lt;li&gt;代码的发布和变更，频率越来越高，持续集成、持续发布成为主流；&lt;/li&gt; 
  &lt;li&gt;基础设施动态化，容量也在动态的弹性伸缩；&lt;/li&gt; 
  &lt;li&gt;现代化的系统架构下，可能出现故障的点位越来越多」，长尾问题「出现的频率也越来越高，难以定位和分析；&lt;/li&gt; 
  &lt;li&gt;研发工程师更多的参与到系统的运行维护工作中来；&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/blockquote&gt; 
&lt;span id=&quot;OSC_h3_13&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;OpenTelemetry&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;也被称为 OTel。是一个供应商无关的开源可观测性框架，用于测量、生产、收集、导出可观测数据。可观测数据主要包含 traces 链路、metrics 度量和 logs 日志。使用 OpenTelemetry 后，可观测的三要素日志、链路追踪、指标，将从过去的相互独立，变的关联性更强，方便我们进行更快速的问题定位：&lt;/p&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;&lt;img alt=&quot;OTel&quot; src=&quot;https://fcpub-1301667576.cos.ap-nanjing.myqcloud.com/flashcat/images/blog/o11y-vs-mon/3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_14&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;Flashcat&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fflashcat.cloud%2F&quot; target=&quot;_blank&quot;&gt;Flashcat&lt;/a&gt;是一个兼容 OpenTelemetry 的可观测性平台，构建了一个数据、平台、场景打通的一体化可观测方案，具有以下四个特点：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;一体化&lt;/strong&gt;：从业务到应用到基础实施，打通 Metrics、Logging、Tracing、Event，是一个立体的监控产品体系和解决方案。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;统一管理&lt;/strong&gt;：采集适配云原生、公有云、物理机/虚拟机、混合云等环境。产品层实现多环境、多集群的监控统一管理。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;集成融合&lt;/strong&gt;：可集成企业内部已有的可观测配套系统，无需推倒重来，串联打通数据，发挥协同定位的价值。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;引导定位&lt;/strong&gt;：结合服务稳定性保障的理论实践，从上往下引导用户按照最佳实践，层层下钻，加速故障处理。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;&lt;strong&gt;你可以通过 Flashcat 平台，有效改善以下问题：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;希望整个公司统一用一个工具，就可以支持指标、日志、链路追踪数据的采集、可视化、告警，免去搭建和维护多套 Prometheus、Zabbix、Grafana、ELK、Jaeger 的工作量。&lt;/li&gt; 
 &lt;li&gt;如果有在用多云，并且在多个公有云监控控制枱来回切换不方便，希望监控数据、监控视图都是统一的，有更一致的用户体验，同时降低给所有的工程师开通公有云控制枱权限带来的安全隐患。&lt;/li&gt; 
 &lt;li&gt;告警太多，工作老被打断， 可以利用我们提供的 OnCall 值班平台（类似于 PagerDuty），支持告警聚合、降噪、认领、升级、排班，可以在飞书、钉钉、企微中接收和处理告警。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_15&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;最易被忽视的&lt;em&gt;OnCall&lt;/em&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;&lt;strong&gt;在传统监控领域，OnCall 是最容易被技术团队忽视的一个概念，运维和研发人员往往面临以下典型的困扰：&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;技术团队每天接收到大量的告警。&lt;/li&gt; 
  &lt;li&gt;很多告警长时间无响应，长期无人问津。&lt;/li&gt; 
  &lt;li&gt;告警与告警之间缺乏关联性，处理效率低下。&lt;/li&gt; 
  &lt;li&gt;告警处理缺乏协同，处理过程不透明，信息难以共享，知识难以沉淀。&lt;/li&gt; 
  &lt;li&gt;很多告警并未准确反应实际情况，无谓的消耗技术团队精力。&lt;/li&gt; 
  &lt;li&gt;客户/用户往往先于技术团队发现故障，客户满意度持续走低。&lt;/li&gt; 
  &lt;li&gt;无法量化的衡量应急响应的现状和效率，无法制定出改进和优化路线。&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;&lt;img alt=&quot;OnCall&quot; src=&quot;https://fcpub-1301667576.cos.ap-nanjing.myqcloud.com/flashcat/images/blog/o11y-vs-mon/4.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;&lt;strong&gt;一个好的 OnCall 工具，能够大幅提升运维和研发人员的效率和幸福感：&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;strong&gt;告警聚合收敛&lt;/strong&gt;：解决告警风暴问题，按照业界的实践，压缩率为 70%~80%。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;告警全生命周期管理&lt;/strong&gt;：告警认领、转派、升级，解决告警不能及时处理、告警漏处理、告警散落在各个监控系统的问题。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;告警排班&lt;/strong&gt;：引入值班表，以排班的形式高效的 OnCall，减少疏忽和失误，减少告警对非值班 team 的打扰，让团队可持续发展。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;故障管理&lt;/strong&gt;：相关的告警聚合为故障，基于故障的告警处理协作模式，解决跨团队协同不畅的问题。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;ChatOps 交互&lt;/strong&gt;：在电话、短信之外，通过各种 IM 触达通知技术团队，在 IM 中交互式的响应和处理告警。&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;&lt;strong&gt;没有度量就没有改进&lt;/strong&gt;，在实际工作中，运维负责人表面看到的是告警太多、团队成员疲于奔命，但苦于看不清告警处理的工作量，没法规划协调补充人力，更严重的是看不清优化告警的方向，导致情况持续恶化，最终团队散了，故障频发。所以在告警处理的领域，尤其需要「可观测」，推荐关注下面 5 个关键的 OnCall 度量指标：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;strong&gt;降噪比&lt;/strong&gt;：即告警的压缩比，通过算法、规则将众多相关的告警聚合后，再通知到值班人员。告警聚合能有效降低告警风暴，减少值班人员的工作量，提高信息处理的效率（&lt;code&gt;该指标越高越好&lt;/code&gt;）。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;响应比&lt;/strong&gt;：被认领的告警占所有告警的比例。在告警管理领域，需要响应或者认领的告警，才是有用的告警，因此通过统计和观察「响应比「，能整体的评估告警是否足够有效和有用，并持续的推动提升告警」响应比「（&lt;code&gt;该指标越高越好&lt;/code&gt;）。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;告警总量&lt;/strong&gt;：一段时间窗口内产生的告警数量。过高的告警总量，意味着值班的压力越大，对技术团队注意力的干扰越多，潜在的意味着告警的噪音可能也过大，因此过多的告警，会让整个系统处于不可运维的状态，应该该尽力的降低告警总量，譬如采用基于 SLO 的告警，就可以答复降低该指标（&lt;code&gt;该指标越低越好&lt;/code&gt;）。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;MTTA（平均响应或认领用时）&lt;/strong&gt;：从告警发生到值班人员响应或者认领的时间间隔。越快的 MTTA，标志着越高的告警处理效率，潜在的代表着越高的服务稳定性。通过 MTTA 我们可以有效的度量团队的工作压力，以便决策合适的资源投入，确保团队始终处于可持续发展的状态（&lt;code&gt;该指标合适就好&lt;/code&gt;）。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;MTTR（平均恢复或解决用时）&lt;/strong&gt;：从告警发生到问题解决的时间间隔。越快的 MTTR，往往意味着团队拥有更先进的观测技术、更强大的基础设施平台、更熟练的工作技能、以及对业务系统有更深入的理解（&lt;code&gt;该指标越快越好&lt;/code&gt;）。&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;&lt;strong&gt;兵器推荐：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;国外推荐采用&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpagerduty.com%2F&quot; target=&quot;_blank&quot;&gt;PagerDuty&lt;/a&gt;，PagerDuty 是全球范围内 OnCall 产品的领导者。&lt;/li&gt; 
 &lt;li&gt;国内推荐采用&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fflashcat.cloud%2Fproduct%2Fflashduty&quot; target=&quot;_blank&quot;&gt;FlashDuty&lt;/a&gt;，FlashDuty 是开源监控工具&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fccfos%2Fnightingale&quot; target=&quot;_blank&quot;&gt;夜莺&lt;/a&gt;背后的开发者团队推出的 OnCall 产品，相比 PagerDuty 对国内的各种监控工具、IM 工具适配性更好，产品体验也更简洁。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_16&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;可观测性的技术趋势&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;在可观测性三大支柱在外，Continuous Profiling 作为一种持续性能分析技术，应用也越来越广泛。Continuous Profiling 用于实时监测和分析应用程序的性能特征。它通过不间断地采集应用程序的性能数据，例如函数调用、内存使用情况、CPU 利用率等，以实现对应用程序性能的全面了解。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;eBPF（Extended Berkeley Packet Filter）是 Linux 内核的扩展功能，用于在内核层面执行安全、性能和观测等任务。eBPF 技术允许用户在不修改内核代码的情况下，通过安全的、可编程的虚拟机在内核中注入代码。它能够捕获和处理系统的事件，例如网络数据包、系统调用、文件访问等，并进行实时分析或转发，从而实现更高级的网络分析、安全监控和性能优化等功能。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; text-align:left&quot;&gt;在可观测性领域，Continuous Profiling 和 eBPF 技术都为开发人员和运维团队提供了更加全面、实时和深入的监控能力。原文：《&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fflashcat.cloud%2Fblog%2Fobservability-vs-monitoring%2F&quot; target=&quot;_blank&quot;&gt;传统监控与可观测性的区别与联系&lt;/a&gt;》&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/morflameblog/blog/15316524</link>
            <guid isPermaLink="false">https://my.oschina.net/morflameblog/blog/15316524</guid>
            <pubDate>Sat, 14 Sep 2024 08:50:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>字节跳动开放计算最佳实践，亮相 2024 开放计算中国峰会</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;img height=&quot;170&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c64b6e0967898ff29fd8cd7feb8253630cd.png&quot; width=&quot;900&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;8 月 8 日，2024 开放计算中国峰会在北京举行，&amp;nbsp;全球开放计算组织 OCP 基金会首次颁发了开放计算最佳创新奖、开放计算最佳实践奖和开放计算生态贡献奖，用以表彰在开放计算领域做出卓越贡献的社区成员。&lt;strong&gt;&lt;span style=&quot;color:#0052ff&quot;&gt;字节跳动在本次大会中荣获开放计算最佳实践奖&lt;/span&gt;&lt;/strong&gt;，字节跳动开源委员会 TOC 战略评审组委员、STE 团队负责人张宇受邀接受 CSDN 采访，分享了相关的开放计算实践经验。以下为本次采访报道的内容。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#888888&quot;&gt;文章来源｜字节跳动 STE 团队&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;开放计算作为一种数据中心产业协同创新的方式，经过多年发展，汇聚了广泛的计算服务提供商、用户，为实现 IT 基础设施在产品、规范、知识产权等方面的最大化的开放共享而共同努力，成果卓著。这其中，开放计算组织功不可没。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;而随着人工智能、大模型的爆发，传统的计算正在朝着多模态、多元算力等智能计算融合发展，如何进一步实现生态协同、开放共赢，对开放计算提出了新的要求。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;8 月 8 日，由两大开放计算组织 OCP（Open Compute Project）与 OCTC（开放计算标准工作委员会）联合主办的主题为「开放协同：协作、智慧、创新」的 2024 开放计算中国峰会在北京举行，以期与全球开放计算领域的社区和企业领袖、技术专家以及行业先锋，共同探讨新时代开放计算技术的最新进展和实践经验，促进生态融合、智能化实践和技术创新。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;为了表彰企业在开放计算领域的探索和实践，OCP 首次颁发了年度开放计算最佳实践奖。字节跳动因其在云固件、OpenBMC、Universal Payload、液冷和整机柜等多个领域的创新实践，特别是&lt;span style=&quot;color:#0052ff&quot;&gt;&lt;strong&gt;&lt;span&gt;在云固件生态建设方面贡献突出&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;，自 2021 年以来，已部署超过 1 万台设备，并积极参与 OCP OSF 工作组的创建，完成多平台云固件方案支持，获得&lt;span style=&quot;color:#0052ff&quot;&gt;&lt;strong&gt;开放计算最佳实践奖&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;720&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6cb587d8221292e22d97f67ce258722fc6a.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;在人工智能时代，业务对于底层计算、存储、网络、数据中心等方面的需求与日俱增，抖音、今日头条、豆包等上层业务能够稳定运行，高效、稳定、可靠的 IT 基础设施功不可没。这其中，开放计算相关的技术创新占得一席之地。据了解，字节跳动一直致力于开放计算领域的创新和实践，并在多个领域取得了显著的成绩，不仅提升了公司的业务效率，同时也为与业界提供了有益的方案和实践经验参考。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;在服务器固件方面，字节跳动分别在 2021 年和 2023 年发布了新一代的固件解决方案 Cloud Firmware 1.0 和 2.0，成为全球第一个在 x86 服务器中产品化 coreboot、LinuxBoot 固件解决方案的厂商，目前 3.0 正在开发中，支持更多架构平台。从 2020 年开始，在 OCP 社区和合作伙伴们共同探讨和完善 Cloud Firmware 解决方案，共同打造更加开放、简单易用、融合的&lt;/span&gt;固件新生态。Cloud Firmware 于 2022 年底被 OCP-OSF 接受为新一代固件解决方案并推广，STE 团队固件架构师葛士建也在 2023 年成为 OCP-OSF Project Leader，主导和推进固件开源工作。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;另外，通过拥抱开源创新和稳步迭代上量的策略，基于 OpenBMC 开源社区的原生方案，逐步开发形成了具备大批量工程交付成熟度的 BMC 产品。从 2021 年到现在，已经实现从 DPU 形态支持到 server 产品化全量覆盖，并逐步上量。在 2024 年，进一步进行架构迭代，支持更广泛的芯片平台和更全面的可观测能力，为多元算力基础设施提供了灵活、全面的运维管理解决方案。与此同时，积极贡献社区生态，共向 OpenBMC 社区提交 310+ patches，取得了良好的社区认可。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;字节跳动不仅在服务器硬件方面开展创新实践，而且随着公司业务的扩展，对底层数据中心提出了更高的要求。与此同时，还在系统虚拟化、Linux 内核等方面持续进行创新和优化，以更好地满足业务对数据中心的需求，达成提升效率、节省能耗、降低成本的目标。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;在系统虚拟化方面&lt;/strong&gt;，自主研发了面向云原生场景的下一代高性能设备虚拟化框架 VDUSE（vDPA Device in Userspace），该框架能够为容器和虚机提供统一的 I/O 虚拟化层。目前在云原生场景下，容器/安全容器/虚机等计算资源侧在实现分布式块/fs 等设备接入时依赖的接入方案多种多样，无论是性能还是在高可用热升级层面都面临很多可用性/可靠性的挑战。基于这个背景 STE 团队与存储团队紧密合作完成了虚机/容器等资源的统一 VDUSE 接入方案，实现了高性能、高可用以及有状态热升级的核心特性支持，同时 VDUSE 方案也已经被合入到 Kernel / Qemu 等上游社区，作为 vDPA 用户态实现方案丰富了整体虚拟化设备接入的方案生态。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;在操作系统内核方面&lt;/strong&gt;，STE 团队一直深耕在 Linux 内核的内存管理领域，一方面通过内核软件层面的优化节省出更多的可用内存，另一方面降低内存紧张、跨节点内存访问、内存锁竞争等问题导致的系统稳定性风险。而在内存节省方面，除了之前已经被社区接纳的 HVO（HugeTLB Vmemmap Optimization，一种内核内存去重技术方案），还在开发 PTE（Page Table Entry）页面优化，在比较极端的情况下单机可以节省 100GB 的用户态页表内存，目前方案和代码已贡献给 Kernel 社区。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;之所以能取得这样的成绩，在张宇看来，与公司的开放生态（开源）理念息息相关。「&lt;span style=&quot;color:#2980b9&quot;&gt;&lt;strong&gt;字节跳动的开源理念是激发创造、拥抱开源，看重参与开源的长期价值，愿与全球合作伙伴共同实现生态繁荣&lt;/strong&gt;&lt;/span&gt;」，张宇表示。&lt;/p&gt; 
&lt;p&gt;据了解，字节跳动的开源历程经历了使用开源、贡献开源、主动开源三个阶段。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#0052ff&quot;&gt;&lt;strong&gt;使用开源&lt;/strong&gt;&lt;/span&gt;：早期，公司内部积极采用开源技术来快速构建基础设施技术中台能力，帮助公司解决基础设施问题，加速核心业务迭代，推动了抖音、今日头条等业务的发展。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#0052ff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#0052ff&quot;&gt;贡献开源&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;：在使用开源过程中，逐步开始结合自身业务场景对相应的开源技术进行了优化改进，并反馈到社区中参与开源贡献。例如云固件 Cloud Firmware 就是针对固件技术的优化改进并反馈给 OCP 社区的，并由此成为开放计算领域的新一代固件的解决方案，在社区里推广开来。目前，云固件 Cloud Firmware 已历经两次产品化迭代——LinuxBoot、coreboot。为了推动云固件生态的繁荣，字节跳动于 2023 年联合英特尔、浪潮信息、OCP-OSF 、OSFF 社区举办了云固件沙龙交流会，推进云固件领域的技术发展与合作共赢。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#0052ff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#0052ff&quot;&gt;主动开源&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;：而当贡献累积越多之后，公司开始尝试主动系统性地将自身的技术形成一个个项目，回馈给开源社区。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;此外，从与张宇的采访过程中了解到，&lt;span style=&quot;color:#0052ff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#0052ff&quot;&gt;字节跳动的企业文化注重开放、包容&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;，鼓励员工发挥创造力，激发员工的奇思妙想。公司非常鼓励大家进行技术创新，参与开源建设、行业技术交流，同时也会自行主办一些技术会议，促进行业的交流合作、技术生态的发展，前面提到的云固件沙龙交流会就是一个例子。在这样的企业文化指引下，字节跳动技术创新实践与开源社区形成了正向循环，在开放计算领域也由此硕果累累。因此，在本次开放计算大会中获得评委的一致认可，获得开放计算最佳实践奖。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;当前，大模型引领的智能时代，正在重构人工智能基础设施，数据中心迎来算力、网络、存储、管理、能效的全向 Scale 创新挑战，需构建全球化的开放协作平台，合力解决上述重大问题，全面优化人工智能基础设施。已走过参与开源，正在贡献开源、主动开源的字节跳动，将继续加大在开放计算领域的投入，与行业伙伴共同推动开放计算技术的发展，为用户提供更加高效、高质量的计算服务。同时也将积极参与开放计算标准的制定，为行业的规范化和可持续发展贡献力量。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;未来，随着技术的不断进步和业务需求的持续增长，开放计算将在更多领域发挥重要作用。字节跳动将紧跟时代步伐，不断探索创新，为开放计算的发展注入新的活力。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#0654ea&quot;&gt;&lt;strong&gt;关于 STE 团队&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#0052ff&quot;&gt;&lt;strong&gt;字节跳动 STE 团队&lt;/strong&gt;&lt;/span&gt;（&lt;span&gt;System Technologies&amp;amp;Engineering，系统技术与工程&lt;/span&gt;），一直致力于操作系统内核与虚拟化、系统基础软件与基础库的构建和性能优化、超大规模数据中心的系统稳定性和可靠性建设、新硬件与软件的协同设计等基础技术领域的研发与工程化落地，具备全面的基础软件工程能力，为字节上层业务保驾护航。同时，团队积极关注社区技术动向，拥抱开源和标准，欢迎更多同学加入我们，一起交流学习。扫描下方二维码了解职位详情，欢迎大家投递简历至&lt;span style=&quot;color:#0052ff&quot;&gt;huangxuechun.hr@bytedance.com&lt;/span&gt;&lt;span style=&quot;color:#00c8d2&quot;&gt;&amp;nbsp;&lt;/span&gt;、&lt;span style=&quot;color:#0052ff&quot;&gt;wangan.hr@bytedance.com&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311920</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311920</guid>
            <pubDate>Sat, 14 Sep 2024 08:23:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>李飞飞创办的 World Labs 获 2.3 亿美元融资</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;被誉为「AI 教母」的斯坦福大学教授李飞飞已经为她的新创业公司 World Labs 筹集了 2.3 亿美元，投资者包括 Andreessen Horowitz、NEA 和 Radical Ventures。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;科技媒体&amp;nbsp;TechCrunch 曾在八月份报道，World Labs 的估值超过 10 亿美元，其融资是在几个月内分两轮融资完成的。World Labs 成立于今年 4 月，在四个月内就从创始公司成长为独角兽。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;371&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-bcf34c9f750cb9da0eda82b2e5e2b5ef382.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;World Labs&amp;nbsp;希望在 2025 年推出首款产品，旨在构建能够理解 3D 世界并与之互动的 AI 模型。World Labs 正在开发所谓的「large world models」，供艺术家、设计师、开发人员和工程师等专业人士使用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Andreessen Horowitz 的普通合伙人 Martin Casado 透露，World Labs 的客户可能包括游戏公司或电影制片厂。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311905/world-labs-230m-funding</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311905/world-labs-230m-funding</guid>
            <pubDate>Sat, 14 Sep 2024 07:21:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>java ORM 神器 mybatis-mp，新框架、新设计、更好用！！！</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;h1&gt;官网 ：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmybatis-mp.cn&quot; target=&quot;_blank&quot;&gt;https://mybatis-mp.cn&lt;/a&gt;&lt;/h1&gt; 
&lt;h1&gt;为什么推荐 mybatis-mp ？：&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;mybatis-mp 是一款超级强大的 ORM 框架&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;1：可多表 join（不再只能单表了）&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;2：良好 resultMap 结果映射能力（不怕映射错误了）&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;3：良好的扩展能力：orm+sql 模板 （让 ORM 框架不再死板，扩展性极强）&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;4：就算 xml 也不用再增加什么插件了，自带 xml 分页&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;5：强大的各种数据库适配，可在一套代码中，实现多个数据库适配；真正的 ORM hibernate 都做不到&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;6：极简的 api 设计，让开发者，不再迷糊&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;7：还很多很多独特优良的设计，只有前往体验，才能感受了；不相信可以试试！！！&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;span&gt;&amp;nbsp;1.&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;单表 +@Fetch 注解 + fetchFilter 方法&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;@Data&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;@ResultEntity&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(SysUser&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;) &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;public&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;SysUserVo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;{

    &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; Integer id;

    &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; String userName;

    &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; String password;

    &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; Integer roleId;

    &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; LocalDateTime create_time;

    &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;@Fetch&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(source = SysUser&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;, &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;property&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;= &lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&quot;roleId&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, target = SysRole&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;, &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;targetProperty&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;= &lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)
    &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; List&amp;lt;SysRoleVo&amp;gt; sysRoles;

}&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;List&amp;lt;SysUserVO&amp;gt; list = QueryChain.of(sysUserMapper)
        .from(SysUser&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
        .fetchFilter(SysUserVO::getRoles,where-&amp;gt;where.eq(SysRole::getStatus,&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;))
        .returnType(SysUserVO&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
        .list();&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;fetchFilter 方法是对 @Fetch 注解的增强，没有特殊要求一般，可忽略&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;2. 单表查询&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;SysUser sysUser = QueryChain.of(sysUserMapper)
        .e&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;q(SysUser::getId, 1)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
        .e&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;q(SysUser::getUserName,&#39;admin&#39;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
        .get();
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3.VO 映射&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;@Data&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;@ResultEntity&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(SysUser.class)
public class SysUserVo {

    &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;

    &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;userName&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;

    &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;//字段名字不一样时&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    @&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;ResultEntityField&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(property = &lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)
    &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;pwd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;SysUserVO sysUserVO = QueryChain.of(sysUserMapper)
        .e&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;q(SysUser::getId, 1)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
        .e&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;q(SysUser::getUserName,&#39;admin&#39;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
        .returnType(SysUserVO.class)
        .list();
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;4. join 查询&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;@Data&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;@ResultEntity(SysUser.class)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;public&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;SysUserVo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;{

    &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; Integer id;

    &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; String userName;

    &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;//字段名字不一样时&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;@ResultEntityField(property = &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span&gt;&quot;password&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; String pwd;
    
    &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;//映射一个对象 1 对 1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;@NestedResultEntity(target = SysRole.class)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    prviate SysRole sysRole;
    
    &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;//映射多个对象 1 对多&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;@NestedResultEntity(target = SysRole.class)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    prviate List&amp;lt;SysRole&amp;gt; sysRoles;

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;List&amp;lt;SysUserRoleVO&amp;gt; list = QueryChain.&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(sysUserMapper)
        .&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;from&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(SysUser&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
        .join(SysUser&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;, &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;SysRole&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
        .returnType(SysUserRoleVO&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
        .list();&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;还有很多很多超级方便有趣的写法，欢迎大家来使用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmybatis-mp.cn&quot; target=&quot;_blank&quot;&gt;https://mybatis-mp.cn&lt;/a&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;例如：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;1 . 多表 join A 内嵌 B B 内嵌 C 都可以&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;2 . 不使用 join 使用 @Fetch 注解 + fetchFilter 方法实现，将 A JOIN B 变成 query A + query B&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;3 . 使用 @Paging 注解，实现你的 xml 自动分页&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;4 . 使用 SQL 模板，让你 ORM 更简单更容易扩展，再也不怕被框架限制了&lt;/p&gt; 
&lt;/blockquote&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311901</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311901</guid>
            <pubDate>Sat, 14 Sep 2024 07:17:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>网信办发布《人工智能生成合成内容标识办法 (征求意见稿)》</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;国家互联网信息办公室&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cac.gov.cn%2F2024-09%2F14%2Fc_1728000680671017.htm&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;关于《人工智能生成合成内容标识办法 (征求意见稿)》公开征求意见的通知。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;同时明确，行业组织、企业、教育和科研机构、公共文化机构、有关专业机构等研发、应用人工智能生成合成技术，未向境内公众提供服务的，不适用本办法的规定。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;231&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0914/141856_I69U_4252687.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;其中提到，人工智能生成合成内容标识包括显式标识和隐式标识。显式标识是指在生成合成内容或者交互场景界面中添加的，以文字、声音、图形等方式呈现并可被用户明显感知到的标识。隐式标识是指采取技术措施在生成合成内容文件数据中添加的，不易被用户明显感知到的标识。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;服务提供者提供的生成合成服务属于《互联网信息服务深度合成管理规定》第十七条第一款情形的，应当按照有关要求对生成合成内容添加显式标识。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;互联网应用程序分发平台在应用程序上架或上线审核时，应当核验服务提供者是否按要求提供生成合成内容标识功能。用户向提供网络信息内容传播平台服务的服务提供者上传生成合成内容时，应当主动声明并使用平台提供的标识功能进行标识。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;任何组织和个人不得恶意删除、篡改、伪造、隐匿本办法规定的生成合成内容标识，不得为他人实施上述恶意行为提供工具或服务，不得通过不正当标识手段损害他人合法权益。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311893</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311893</guid>
            <pubDate>Sat, 14 Sep 2024 06:17:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>VirtualBox 7.1 发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;VirtualBox 是一款功能强大的 x86 虚拟机软件，它不仅具有丰富的特色，而且性能也很优异。VirtualBox 7.1&amp;nbsp;现已&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.virtualbox.org%2Fwiki%2FChangelog&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;，这是一次重大更新。添加了以下新功能：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;GUI：现代化的外观和感觉，提供了 「基础」 和 「专业」 两种 UI 模式（「Basic」 &amp;amp; 「Expert」）供用户选择，UI 功能可减可全&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;OCI Integration：性能仪表板现在显示云虚拟机的资源使用情况&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;OCI Integration：克隆计算实例&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;OCI Integration：重置计算实例&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;Oracle VirtualBox 扩展包：更新 PUEL 许可证，删除评估选项。如需评估使用扩展包，建议从 &amp;nbsp;Oracle Software Delivery Cloud 下载&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;VRDE：如果用户未使用自定义证书设置 TLS，建议使用自签名证书启用，包括在旧证书过期前签发新证书&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;NAT：支持 IPv6 的新引擎&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;macOS/Arm host：适用于 Linux 和 BSD VM 的 Arm 虚拟化&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;Linux host and guest：为 Clipboard sharing 添加了 Wayland 支持（bug#20808）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;Shared Clipboard：添加了对在 Linux 和 Windows hosts / guests 上传输文件的初始支持。这需要安装 7.1 Guest Additions。有关已知限制，可参阅用户指南&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;Screen Recording：编码管道的性能显著提高，从而降低了录制激活时的 CPU 占用率。这需要在 Windows guests 上安装 7.1 Guest Additions&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此外，还修复和/或添加了下列项目：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;VMM：修复了使用 Hyper-V 时对 CPUID 指令的 &lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2FEFLAGS.TF&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;EFLAGS.TF&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt; 处理（bug#17961）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;virtio-net：针对 FreeBSD 12.3 和 pfSense 2.6.0 的后续修复（bug#21201）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;EFI：能够为新创建的虚拟机添加新的 Microsoft DB/KEX 证书&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;Oracle Extension Pack：修复了为完整 VM 加密提供加密支持模块的问题&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;GUI：提高整体可访问性&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;GUI：更新所用的 Qt 版本&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;Unattended Installation：增加了对基于 subiquity/cloud-init 的安装程序的支持；这使得能够在 Unattended 模式下安装更多基于 Linux 的现代客户操作系统&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;Unattended Installation：增加了为 user 和 admin / root&amp;nbsp; 帐户指定单独密码的支持&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;VBoxManage：增加了显示和（重新）附加虚拟机（视频）录制进度的功能&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;VBoxManage：添加了通过新的「mount」Guest Control 子命令查询 guest 挂载点的功能。至少需要 7.1 Guest Additions&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;Python：针对 Python 2.x 的 API 绑定现已标记为已弃用，并将在未来版本中删除。建议用户升级代码以使用 Python 3&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;VBoxShell：大量大大小小的错误修复 + Python 3.x 兼容性&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;详情可查看：&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.virtualbox.org%2Fwiki%2FChangelog&quot; target=&quot;_blank&quot;&gt;https://www.virtualbox.org/wiki/Changelog&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;下载地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.virtualbox.org%2Fwiki%2FDownloads&quot; target=&quot;_blank&quot;&gt;https://www.virtualbox.org/wiki/Downloads&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相关阅读：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/304543/virtualbox-7-1-new-ui&quot; target=&quot;_blank&quot;&gt;VirtualBox 7.1 Beta 发布：采用全新现代化 UI、更换 Logo&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311859/virtualbox-7-1-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311859/virtualbox-7-1-released</guid>
            <pubDate>Sat, 14 Sep 2024 02:46:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>谷歌在搜索结果集成互联网档案馆「Wayback Machine」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.archive.org%2F2024%2F09%2F11%2Fnew-feature-alert-access-archived-webpages-directly-through-google-search%2F&quot; target=&quot;_blank&quot;&gt;根据互联网档案馆 (Internet Archive) 的官方公告&lt;/a&gt;，谷歌已开始在搜索结果中加入互联网档案馆「Wayback Machine」的链接，此举旨在为结果加入&lt;strong&gt;历史背景（historical context）&lt;/strong&gt;。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0914/102711_OKOu_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;谷歌对 9to5Google &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F9to5google.com%2F2024%2F09%2F11%2Fgoogle-search-internet-archive-wayback-machine%2F&quot; target=&quot;_blank&quot;&gt;发表声明称&lt;/a&gt;：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;我们知道，包括研究社区在内，许多人都希望能够查看网页的先前版本。&lt;/p&gt; 
 &lt;p&gt;因此，&lt;strong&gt;我们在 「关于本页 」功能中添加了互联网档案馆 Wayback Machine 的链接&lt;/strong&gt;，以便人们能够快速获取历史背景，并通过搜索轻松访问这些有帮助的信息。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;谷歌快照此前提供了类似的功能，但该功能今年早些时候被谷歌杀死了。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-1db958065a51564516fd6ec5c09f9897ce5.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;相关阅读：&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/news/277666&quot;&gt;谷歌已从搜索结果页面删除「缓存链接」&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;现在谷歌与互联网档案馆合作，将该功能重新提供给用户，只不过快照不是由它托管而是由一家非盈利组织托管。&lt;/p&gt; 
&lt;p&gt;要访问互联网档案馆的 Wayback Machine 链接，用户需要点击搜索结果页条目旁的三点按钮，点击「More about this page」。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c6b1529b72aa77f2692f7c1b7d4ac302ff0.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;互联网档案馆对此表示，双方的合作突出了 Web 存档的重要性。&lt;/p&gt; 
&lt;p&gt;关于 Wayback Machine 以及如何探索 Web 历史的更多信息，请访问 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweb.archive.org%2F&quot; target=&quot;_blank&quot;&gt;https://web.archive.org/&lt;/a&gt;。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;延伸阅读&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/113814/brave-browser-integrate-the-wayback-machine&quot; target=&quot;_blank&quot;&gt;404 也能访问？Brave 原生集成 「网站时光机」 服务&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/121454/flash-animations-live-forever-at-the-internet-archive&quot; target=&quot;news&quot;&gt;互联网档案馆永久保存 Flash 动画&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311858/google-search-internet-archive-wayback-machine</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311858/google-search-internet-archive-wayback-machine</guid>
            <pubDate>Sat, 14 Sep 2024 02:40:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>快手自研 Spark 向量化引擎发布，性能提升 200%</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Blaze 是快手自研的基于 Rust 语言和 DataFusion 框架开发的 Spark 向量化执行引擎，旨在通过本机矢量化执行技术来加速 Spark SQL 的查询处理。现已开源发布，开源版本全面兼容 Spark 3.0~3.5。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;公告称，在 TPC-DS 1TB 的测试中，Blaze 相较于 Spark 3.3 版本减少了 60% 的计算时间、Spark 3.5 版本减少了 40% 的计算时间，并大幅降低了集群资源的消耗；此外，Blaze 在快手内部上线的数仓生产作业也观测到了平均 30% 的算力提升，实现了较大幅度的降本增效。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Spark+Blaze 的架构设计原理如下图：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;270&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5c54e6e0d5b68a9d45a23bb4289cb006543.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;307&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-fb4879973f0e55873be39c07a7c7bb0643f.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#3e3e3e; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Blaze 架构中的核心模块有四个，共同驱动着大数据性能的显著提升。这些模块分别为：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;Native Engine：&lt;/strong&gt;基于 Datafusion 框架实现的与 Spark 功能一致的 Native 算子，以及相关内存管理、FFI 交互等功能。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;ProtoBuf：&lt;/strong&gt;定义用于 JVM 和 native 之间的算子描述协议，对 Datafusion 执行计划进行序列化和反序列化。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;JNI Bridge：&lt;/strong&gt;实现 Spark Extension 和 Native Engine 之间的互相调用。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;Spark Extension：&lt;/strong&gt;Spark 插件，实现 Spark 算子到 Native 算子之间的翻译。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#3e3e3e; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;具体而言，Blaze 目前已具备以下关键能力：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;Parquet 向量化读写能力：&lt;/strong&gt;实现了对 Parquet 格式数据的高效向量化读写，极大地提升了数据处理的速度与效率。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong style=&quot;color:#333333&quot;&gt;全面算子与表达式支持：&lt;/strong&gt;覆盖了线上常用的所有算子与表达式，少量不支持的表达式和 UDF 也可以细粒度回退，确保用户能够无缝迁移并享受向量化处理带来的性能提升。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;Remote Shuffle Service 集成：&lt;/strong&gt;内部集成了自研的 Remote Shuffle Service，同时我们也在和阿里合作，增加对 Apache Celeborn 的支持，预计 9 月份可以提交到社区。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;TPC-H/TPC-DS 测试优异表现：&lt;/strong&gt;在业界权威的 TPC-H/TPC-DS 基准测试中，Blaze 成功通过全部测试场景，并以 TPC-H 平均 3 倍以上、TPC-DS 2.5 倍的性能提升展示了其在复杂查询处理上的卓越能力。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;&lt;img height=&quot;345&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d03108ca53dc6bf37862095a5681ed85a0f.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在真实的生产环境中,向量化引擎大规模上线应用，算力平均提升 30%+，成本节约年化数千万元。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;未来规划&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;持续迭代优化，内部线上推全。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;支持更多引擎或场景，例如数据湖等。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;加强开源社区运营建设，共建生态繁荣。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;更多详情可&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F79vWI2O-Mef8lviGy0cTjg&quot; target=&quot;_blank&quot;&gt;查看官方公告&lt;/a&gt;。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311854</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311854</guid>
            <pubDate>Sat, 14 Sep 2024 02:13:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>开源日报 | OpenAI「草莓」发布；Docker 修改订阅计划；中国最大 MoE 开源大模型；AI 编程提高局部生产效率；中东土豪盯上了半导体</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.9.13&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/311730/openai-o1&quot;&gt;OpenAI 发布全新的 o1 系列模型&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt;
   OpenAI 宣布推出其全新产品 OpenAI o1，也就是此前广受期待的代号为「草莓（Strawberry）」模型。按照官方技术博客说法，o1 在推理能力上代表了人工智能最强的水平。「o1 在回答问题之前会先思考，它可以在回复用户之前产生很长的内部思考链。」OpenAI CEO Sam Altman 表示：「OpenAI o1 是一个新范式的开始：可以进行通用复杂推理的 AI。」
  &lt;/div&gt; 
  &lt;div&gt;
   &amp;nbsp;
  &lt;/div&gt; 
  &lt;div&gt;
   &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-71a55861df9e8ce27d364a533b80051ac1d.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/311774/docker-november-2024-updated&quot;&gt;Docker 修改其订阅计划&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;p&gt;Docker 宣布正在重新制定其订阅计划，以便所有计划都可以使用更多功能和服务，并且还将更新定价以反映新增功能。&lt;/p&gt; 
  &lt;p&gt;Docker 的计划包括 Docker Personal、Docker Pro、Docker Team 和 Docker Business，这些计划均经过重新制定，使客户能够通过单一订阅访问所需的一切，并明确规定消费限制，还能够根据需要添加更多内容。计划变更将于 11 月 15 日生效。&lt;/p&gt; 
  &lt;p&gt;随着新变化而来的还有价格的变化。Docker Personal 仍然免费，Docker Business 的定价也保持不变。Docker Pro 的价格从 5 美元 / 月涨至 9 美元 / 月，Docker Team 的价格从 9 美元 / 用户 / 月涨至 15 美元 / 用户 / 月。&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ft.cj.sina.com.cn%2Farticles%2Fview%2F2118746300%2F7e4980bc02001h73q&quot; target=&quot;_blank&quot;&gt;元象发布中国最大 MoE 开源大模型，落地应用登顶港台榜&lt;/a&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p&gt;元象 XVERSE 发布中国最大 MoE 开源模型：XVERSE-MoE-A36B，加速 AI 应用低成本部署，将国产开源提升至国际领先水平。&lt;/p&gt; 
   &lt;p&gt;该模型总参数 255B，激活参数 36B，达到 100B 模型性能的「跨级」跃升，同时训练时间减少 30%，推理性能提升 100%，使每 token 成本大幅下降。&lt;/p&gt; 
   &lt;p&gt;免费下载大模型&lt;/p&gt; 
   &lt;p&gt;Hugging Face：https://huggingface.co/xverse/XVERSE-MoE-A36B&lt;br&gt; 魔搭：https://modelscope.cn/models/xverse/XVERSE-MoE-A36B&lt;br&gt; Github：https://github.com/xverse-ai/XVERSE-MoE-A36B&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1871474290%2FOwL5iplDT&quot; target=&quot;_blank&quot;&gt;神神叨叨的 OpenAI 和神神叨叨的草莓&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
      可以这么理解，o1 的 Reasoning 不是靠 reflect 的，这是 relection70B 的方式，但在对一个靠知识驱动的模型让它来去 reasoning 复杂的问题，其实就是自己问自己，还不是长步骤的思考（虽然 cot 能帮上一些忙）。o1 的 resaoning 的实现是数据集的方式，草莓 RL 吐出来的数据就是带多步逻辑的，拿这个做 pretrain。
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&amp;nbsp;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;Transformer-周&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6974787068%2FOwHkTCeUr&quot; target=&quot;_blank&quot;&gt;英伟达 CEO 黄仁勋接受高盛采访&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     英伟达 CEO 黄仁勋昨天在接受高盛采访时，深度阐述了大家关心的重要问题：AI 市场的前景，英伟达的护城河，以及供应链安全等。投资者显然对他的回答比较买账，英伟达股价昨天至今上涨了将近 10%。这个采访信息量很大，比美国总统选举辩论精彩多了。无论是否同意他的观点，都值得一读。
    &lt;/div&gt; 
    &lt;div&gt;
     采访全文见
     &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fseekingalpha.com%2Farticle%2F4720501-nvidia-corporation-nvda-ceo-jensen-huang-presents-goldman-sachs-communacopia-technology&quot; target=&quot;_blank&quot;&gt;https://seekingalpha.com/article/4720501-nvidia-corporation-nvda-ceo-jensen-huang-presents-goldman-sachs-communacopia-technology&lt;/a&gt;
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;硅谷陈源博士&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1873355712%2FOwHoRlzFZ&quot; target=&quot;_blank&quot;&gt;AI 编程能提高局部生产效率的一个确定性的例子&lt;/a&gt;&lt;/h4&gt; 
  &lt;p&gt;AI 编程能提高局部生产效率的一个确定性的例子: 在所有需要打日志的地方，Copilot 都能在输入一两个 log 开头的代码后，自动补全猜测的规整的日志打印，包含必要的局部变量打印。人工写的时候，这点通常是费劲的，有经验的程序员会力求打印好必要的 debug, info, warning, error 日志。新手往往日志不全或者不规整，诊断问题的时候就缺必要的日志。不过 AI 插件应该做的更 Agent 一点，在 git 提交的时候，自动把所有该打日志的地方批量补全，这是可以做到的，也是比较安全的操作。&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&amp;nbsp;&lt;/span&gt;&lt;strong&gt;幻灰龙&lt;/strong&gt;&lt;/p&gt; 
  &lt;div&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1762253415%2FOwGhAbWxR&quot; target=&quot;_blank&quot;&gt;知识图谱介绍：事物，而非字符串&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;最近 GraphRAG 比较受关注，翻译一篇很早之前谷歌介绍知识图谱搜索的文章，理解下底层逻辑。&lt;br&gt; 搜索在很大程度上与发现有关——这是人类学习和拓宽视野的基本需求。但搜索仍然需要用户付出很多努力。所以今天我真的很兴奋的推出知识图谱，它将帮助你快速轻松的发现新的信息。执行一个查询，比如：[taj mahal]（泰姬陵），四十多年以来，搜索基本上是对查询关键词的匹配。对于搜索引擎来讲，[taj mahal]这个关键词只是两个词而已。&lt;/p&gt; 
   &lt;div&gt; 
    &lt;div style=&quot;text-align:right&quot;&gt;
     &lt;span style=&quot;color:#000000&quot;&gt;- 微博&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;
     &lt;strong&gt;庆丰&lt;/strong&gt;
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1233486457%2FOwHkP4N0M%3Fpagetype%3Dprofilefeed&quot; target=&quot;_blank&quot;&gt;一个独特的数据集：提示词数据集&lt;/a&gt;&lt;/h4&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
       这个数据集是从四个平台（Reddit、Discord、网站和开源数据集）中收集的 15140 个提示词，时间范围为 2022 年 12 月至 2023 年 12 月。其中，包括 1,405 个 Jailbreak 提示词（有统计规模最大）。
       &lt;br&gt; 类比起来，提示词数据集就相当于之前的代码库吧。
       &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fverazuo%2Fjailbreak_llms&quot; target=&quot;_blank&quot;&gt;https://github.com/verazuo/jailbreak_llms&lt;/a&gt;
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&amp;nbsp;&lt;/span&gt;&lt;strong&gt;高飞&lt;/strong&gt;&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.cn%2Farticle_1654203637_629924f5020012hi0.html&quot; target=&quot;_blank&quot;&gt;创新承压、洗牌持续，摩尔线程要做「国产英伟达」？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;换言之，摩尔线程已建立从芯片、板卡、服务器、集群到软件的全栈 AI 智算产品线，市场认为摩尔线程是国内仅有能从功能上对标英伟达的国产 GPU 芯片厂商。但持续补齐软件生态、AI 大模型技术迭代速度快带来的技术持续创新压力，以及国内 GPU 市场正进入洗牌阶段，让摩尔线程真正成为英伟达仍需持续发力。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;DoNews&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.thepaper.cn%2FnewsDetail_forward_28718832&quot; target=&quot;_blank&quot;&gt;大模型「鬼故事」缠上的不止百度&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;过去半年，市场对 AI 大模型的关注焦点从模型技术本身转向了智能应用的实际落地，AI 预期也开始回调。因此，在基础大模型的投入与 AI 应用落地之间做出取舍，实际上已成为所有大模型玩家不可回避的共同难题。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;市象&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.com.cn%2Froll%2F2024-09-13%2Fdoc-incnyivw9120216.shtml&quot; target=&quot;_blank&quot;&gt;旋智即将推出多核心处理器！助力实现高性能电机控制产品&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#222222; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#292934&quot;&gt;随着产业装备更新、汽车电子、新型空调热泵、工业控制等新兴应用需求的发展，电机控制芯片市场正经历快速增长，特别是对高能效、高性能电机控制处理器的需求急速上升。其中，国产替代空间巨大，亟待提升渗透率。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#292934&quot;&gt;网易新闻&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ft.cj.sina.com.cn%2Farticles%2Fview%2F7310786248%2F1b3c1bec801901mol4&quot; target=&quot;_blank&quot;&gt;中东土豪盯上了半导体&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;芯片已成为现代社会不可或缺的关键资源之一。中东对半导体的进军，已然拉开帷幕，未来会如何演绎还不得而知。在推进先进人工智能的过程中，中东地区还面临如何在沙漠中确保计算设施能够有效运行，以及大量水资源消耗的问题。&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;在中东的沙漠中，能否开出半导体的花，仍面临诸多挑战，前路漫漫。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;芯东西&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.cn%2F2024-09-13%2Fdetail-incnyivy5830670.d.html&quot; target=&quot;_blank&quot;&gt;我们的《黑神话：悟空》，应该由自己的网络靶场来守护&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt;
  &lt;span style=&quot;color:#000000&quot;&gt;2024 年，《黑神话：悟空》在全球玩家的热切期盼中上线，然而首个周末，Steam 平台却因大规模 DDoS 攻击而崩溃，上百万玩家无法登录。据悉，这次攻击涉及近 60 个僵尸网络，攻击指令在一夜之间激增了 2 万多倍，攻击发生后，《黑神话：悟空》的实时在线人数一度骤降至百万以下。这场恶意攻击不仅重创了游戏体验，还为全球网络平台敲响了警钟，揭示了网络攻击的无处不在。&lt;/span&gt;
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;数据猿&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jfdaily.com%2Fnews%2Fdetail%3Fid%3D795582&quot; target=&quot;_blank&quot;&gt;外滩大会专门发起倡议 「开源」为何如此重要？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;随着 AI 技术的发展，提高其安全性成为一个亟待解决的紧迫课题，而开源则是可靠一招。在日前举行的外滩大会上，赛事组委会发起开源倡议——支持并鼓励优秀参与者开源比赛模型，降低技术门槛、加强技术交流，进而帮助更多人检测伪造内容，助力 AI 向善。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;上观新闻&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fo2sh%2Fonefetch&quot; target=&quot;_blank&quot;&gt;o2sh/onefetch&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;368&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-442f7a4242ab3a475a9ba902eed757caf79.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fo2sh%2Fonefetch&quot; target=&quot;_blank&quot;&gt;https://github.com/o2sh/onefetch&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;Onefetch 是一款由&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;Rust&lt;/code&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;编写的命令行 Git 信息工具，它将直接在终端中展示本地 Git 仓库的项目详情和代码统计等内容。工具完全离线可用（不需要网络连接)。&lt;/span&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/meituantech/blog/10946678&quot; target=&quot;_blank&quot;&gt;分布式因果推断在美团履约平台的探索与实践&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;美团履约平台技术部在因果推断领域持续的探索和实践中，自研了一系列分布式的工具。本文重点介绍了分布式因果树算法的实现，并系统地阐述如何设计实现一种分布式因果树算法，以及因果效应评估方面 qini_curve/qini_score 的不足与应对技巧。希望能为从事因果推断相关工作的同学们提供一些启发或帮助。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img alt=&quot;图 1 美团履约因果推断工具包&quot; height=&quot;178&quot; src=&quot;https://p0.meituan.net/travelcube/d7f63a42a10c2ddd373a56ac2d1204b6212498.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FTbbDsD4PNK6ttCvFAELxSg&quot; target=&quot;_blank&quot;&gt;「你的开源项目真不错，但跟我的闭源软件功能类似，所以希望你能闭源，好方便我割韭菜」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：现在很多开源确实导致了企业对程序员的需求没有那么大，所以现在那么程序员被裁掉，而且企业之间都用开源相互恶性竞争，导致产品利润减少，而且质量不高。&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：你也是个奇葩&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：考虑过造张假钞再要求人行别发行人民币吗&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：我有点怀疑那个闭源软件是不是用了开源的代码&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：别怀疑，现在没有人能不依靠开源的力量从头造轮子&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：哈哈哈哈哈哈，这人这个发言多少带点脑缺&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：和大佬说话还班门弄斧的，问人家懂不懂网络攻防&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：分分钟已经找过 linux 要求闭源了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：李胜传奇之重生之前干 IT&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：凭本事吃饭，大佬开源的都是大佬玩剩下的，实在是可笑不自量&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 11：把 kvm、openstack、k8s、c、c++、python、go、postgres…等等全部闭源，他做一个出来收费，真是吃饱了，然后把锅砸了的逻辑……格局太小了，一辈子吃不了几个菜&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 12：这像是说，成龙不懂演戏，张学友不懂唱歌，哈哈&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 13：尤雨溪不懂 vue，jk 罗琳不懂哈利波特&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 14：&amp;gt; 无需 CA&amp;nbsp;证书即可捕获 SSL/TLS 通讯明文，这个怎么做到的 ……&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 15：直接用 ebpf 把密钥截获&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 16：国内开源届现状大赏&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 17：太抽象了，以至于我以为今天是愚人节&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 18：希望那人可以和鸿蒙对一下线，我看看谁能让他的 ass off&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 19：他的意思是：我抄完了，你可以闭源了！&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 20：难道他真的是天才&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 21：没有开源的话，写源码的人不断的在给自己打补丁，但是个人能力有限；对源码有需求的，不断在重复造轮子&lt;img alt=&quot;[破涕为笑]&quot; src=&quot;https://res.wx.qq.com/mpres/zh_CN/htmledition/comm_htmledition/images/pic/common/pic_blank.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;。没有开源精神，互联网能发展到现在？？？这都是写系统，写语言的大佬们带头奉献的结果&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 22：第一反应，不应该是合作吗？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 23：不如 sspl 直接看源，闭源的都得逼着开给你&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 24：因为我无耻，所以我希望你跟我一样无耻。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 25：没有闭源的商业思维还想做闭源产品&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F4k5qIVcSDL2F5tVDBW3OUg&quot; target=&quot;_blank&quot;&gt;OpenAI「草莓」发布：全新 o1 系列模型、具备类似人类的推理能力、开启「推理时间扩展」范式时代&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：终于上道了，gpt 感觉就是玩具，推理才是真正实用的东西&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：实际使用下来，我个人的使用场景，并没有看到 o1 的特别大的优势。反而 Claude 3 Opus 依然效果是最好的。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：希望工程师同行们可以指教我的看法是否正确，因为这方面我的掌握还不够。我个人认为是不是他们在跨区域「适配数据」所谓的思考就是单纯的「数据内容匹配」！如果 open ai 说他可以独立思考那我个人认为，这种能力未来不好说但是现在并不存在！是不是又是个大忽悠，炒股票吹泡泡的套路。哈哈&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：AI 本质就是信息压缩，那么你相信 md5 可逆吗，反正我不信它&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311802</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311802</guid>
            <pubDate>Fri, 13 Sep 2024 10:46:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>全球 6G 标准化工作进入实质阶段</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;由中国移动代表担任主报告人的 6G 场景用例与需求研究项目，已在澳大利亚墨尔本召开的第三代合作伙伴计划（英文缩写 3GPP，是制定全球通信国际标准的重要组织）业务与系统技术规范组全会上获得通过。这是 3GPP 的首个 6G 标准项目，得到全球超过 90 家公司的支持，标志着全球 6G 标准化工作正式进入实质阶段。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;第三代合作伙伴计划（3GPP）是制定全球通信国际标准的重要组织，3GPP 根据国际电信联盟（ITU）制定的框架，制定产业事实技术规范和标准，移动通信的全球 3G、4G、5G 标准均由该组织制定。3GPP 开始 6G 的标准化工作，意味着 6G 网络产业化的正式开启。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;据了解，业务场景定义了每一代通信系统的走向，是网络性能、功能设计及服务能力的根本依据。中国公司此次担任报告人，将协调管理 6G 标准制定节奏、牵引技术讨论方向、主导形成有效结论，对标准有序推进和质量严格把控起到至关重要的作用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;本次通过的 6G 需求项目受到业界广泛关注，全球超过 90 家公司参与，比 5G 需求项目的支持公司多了一倍多。政府部门、研究机构、垂直行业和终端公司的参与数量从 5G 时期的 8 家增长到 46 家。衞星公司从 5G 时期的「0」参与到 6G 时期 9 家公司积极参与，也体现了移动通信网络边界的不断延伸拓展。从前期讨论看，移动通信与算力及 AI 的融合、通信和感知的融合、空天地一体化的组网、沉浸式通信将成为代表性的新能力。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311800</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311800</guid>
            <pubDate>Fri, 13 Sep 2024 10:36:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>deepin 25 开发计划大揭秘：新增功能与性能优化一览</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeveloper-community%2Fplanning%2F&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;查看 deepin 25 版本规划&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;为使社区用户提前了解深度操作系统（以下简称「deepin」）版本规划，深度团队会在版本发布前，提前公布下一个预发布版本的规划目标，从技术与功能角度发布规划内容，以便大家初步了 deepin 的开发计划。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;deepin 25 计划发布时间为 2025 年年初，此版本主要目标是修复 deepin 23 中遗留问题，提升系统稳定性，同时完成技术更新换代（Treeland）的功能试点。&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;版本发布计划&lt;/strong&gt;&lt;/h1&gt; 
&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; style=&quot;border-collapse:collapse; width:544.23pt&quot;&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;height:15.6pt; text-align:center; width:130.8pt&quot;&gt;deepin 23&lt;/td&gt; 
   &lt;td style=&quot;height:15.6pt; text-align:center; width:413.95pt&quot;&gt;2024 年 08 月【已发布】&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;height:15.6pt; text-align:center&quot;&gt;deepin 25&lt;/td&gt; 
   &lt;td style=&quot;height:15.6pt; text-align:center&quot;&gt;2025 年 01 月 【开发中】&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;deepin 25 版本规划&lt;/strong&gt;&lt;/h1&gt; 
&lt;table style=&quot;width:907px&quot;&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;功能新增&lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;开放 Treeland 预览环境：带来全新的桌面交互体验与使用体验&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;支持窗口管理器打开、关闭、最大、最小化等功能实现&lt;/li&gt; 
     &lt;li&gt;支持触碰版多指触碰跟随展示支持，让人机交互合一&lt;/li&gt; 
     &lt;li&gt;支持 alt+tab 窗口预览效果实现&lt;/li&gt; 
     &lt;li&gt;支持多任务视图切换方式全新交互形式&lt;/li&gt; 
     &lt;li&gt;基于行云设计的全新控制中心（提供部分模块）&lt;/li&gt; 
    &lt;/ul&gt; &lt;p&gt;安装器：全盘加密支持使用 AES 加密方式&lt;/p&gt; &lt;p&gt;控制中心：更新模块新增支持智能镜像源选择&lt;/p&gt; &lt;p&gt;如意玲珑：提供 Appimage、Flatpak、DEB 转制玲珑工具&lt;/p&gt; &lt;p&gt;应用商店：支持 ARM、LoongArch 等架构&lt;/p&gt; &lt;p&gt;* 更多产品特性待版本发布后揭晓&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;不可变系统&lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;开放不可变系统体验版本（用于不可变系统体验）&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;支持只读挂载&lt;/li&gt; 
     &lt;li&gt;支持支持系统快照管理&lt;/li&gt; 
     &lt;li&gt;支持系统无忧还原&lt;/li&gt; 
     &lt;li&gt;apt/dpkg 支持只读安装 deb 包&lt;/li&gt; 
     &lt;li&gt;支持升级失败自动回滚&lt;/li&gt; 
    &lt;/ul&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;性能优化&lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;优化镜像文件大小&lt;/p&gt; &lt;p&gt;优化安装器非中文环境的使用体验，提升开箱即用体验&lt;/p&gt; &lt;p&gt;优化 X11 环境下动效，提升用户交互感知&lt;/p&gt; &lt;p&gt;提升机械硬盘设备使用性能&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;问题修复&lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;对 X11 环境进行质量问题修复，提升系统稳定性与易用性&lt;/p&gt; &lt;p&gt;修复 deepin 23 遗留的任务栏、窗口图标、启动等的问题，提高 DDE 组件质量&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;其他&lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;基础组件更新：更新部分软件包，提升系统稳定性&lt;/p&gt; &lt;p&gt;新平台支持：如意玲珑对 ARM、LoongArch 架构支持&lt;/p&gt; &lt;p&gt;安全漏洞修复：及时跟进修复已知的安全漏洞&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;*以上核心特性规划与最终发布内容可能存在部分偏差，详细功能敬请关注 deepin 25 版本发行注记。&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;相关阅读&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;（1）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fdownload%2F&quot; target=&quot;_blank&quot;&gt;deepin 23&amp;nbsp; 镜像下载&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;（2）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-23-is-officially-released%2F&quot; target=&quot;_blank&quot;&gt;deepin 23 发行注记&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;（3）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdistrowatch.com%2Findex.php%3Fdistribution%3Ddeepin&quot; target=&quot;_blank&quot;&gt;deepin 历史版本镜像（含 deepin 15）&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311797</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311797</guid>
            <pubDate>Fri, 13 Sep 2024 10:22:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>分布式因果推断在美团履约平台的探索与实践</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;blockquote&gt; 
 &lt;p&gt;美团履约平台技术部在因果推断领域持续的探索和实践中，自研了一系列分布式的工具。本文重点介绍了分布式因果树算法的实现，并系统地阐述如何设计实现一种分布式因果树算法，以及因果效应评估方面 qini_curve/qini_score 的不足与应对技巧。希望能为从事因果推断相关工作的同学们提供一些启发或帮助。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-e809bdb66865f05c47ccb33debbaeb14106.jpg&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;1. 业务背景&lt;/h2&gt; 
&lt;p&gt;近年来，因果推断在商品定价、补贴、营销等领域得到广泛应用并取得了显著的业务效果提升，例如用户增长、活动营销等业务场景。这些领域的共性是需要「反事实推断能力」，传统机器学习算法更关注预测问题，而因果推断提供了更佳的反事实推断能力。以营销活动为例，我们不仅需要知道当前优惠券金额下，订单数是多少（预测问题），还要知道在改变金额的情况下，订单数会发生怎样的变化（反事实问题）。&lt;/p&gt; 
&lt;p&gt;常见的因果建模方法主要包含 Meta-Learner、深度表征学习和 Tree-Base 算法三大类。其中以因果树为代表的 Tree-Base 算法泛化性强，适用于多种业务场景。相较于 Meta-Learner，树模型建模流程简单；相较于深度表征学习，树模型特征处理和调参过程简单并且具备极强的可解释性。&lt;/p&gt; 
&lt;p&gt;开源社区涌现出了微软的 EconML 和 DoWhy，Uber 的 CausalML，以及因果森林作者的 grf-lab 等等众多优秀开源项目，但这些项目均为单机实现，不能满足工业场景下亿级样本的模型训练、评估、解释分析。Meta-Learner 和深度表征学习可以轻松借助 XGBoost、LGBM、Spark MLlib、Tensorflow 等开源工具支持海量数据，但是这些项目都不支持因果树相关的 Tree-Base 算法的分布式训练。&lt;/p&gt; 
&lt;p&gt;具体来说，XGBoost、LGBM、Spark Random Forests 等树模型是为解决预测问题而提出的经典算法实现，而因果树算法引入了新的训练理论以及因果理论独有的干预变量、工具变量等概念。这意味着我们并不能通过对现有分布式树模型的简单改造，来实现因果理论下树模型的分布式训练，而是需要充分理解各类单机因果树算法的原理之后，选择合适的分布式编程范式高效地实现出来。&lt;/p&gt; 
&lt;p&gt;为了解决上述问题，美团履约平台技术部对开源项目进行了精细梳理，集各家之所长实现了一套高性能的分布式因果森林框架，在半小时内即可完成亿级样本 100 棵树的训练，突破了单机开源项目仅支持百万级样本的瓶颈。并经过复杂的抽象设计，最终实现通过自定义损失函数即可支持各类因果森林算法的能力，极大提升了框架的扩展性。&lt;/p&gt; 
&lt;p&gt;除此之外，美团履约平台技术部还在因果效应评估、观测数据去偏等方面建设了大量高效实用的分布式工具。本文将重点为大家分享如何设计实现一个分布式的因果森林算法，以及因果效应评估方面的经验技巧，将我们在分布式因果推断领域的一些探索和内部的实践经验分享给大家。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://p0.meituan.net/travelcube/d7f63a42a10c2ddd373a56ac2d1204b6212498.png&quot; alt=&quot;图 1 美团履约因果推断工具包&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;2. 分布式因果森林框架&lt;/h2&gt; 
&lt;p&gt;因果森林算法的提出引发了 Tree-Base 算法应用于因果建模的研究热潮，众多学者相继在因果森林的基础上提出了多种多样的改进算法。监督学习领域的树模型有众多优秀的开源分布式实现，例如 Xgboost、LightGBM、Spark Random Forest 等等。&lt;/p&gt; 
&lt;p&gt;但是开源的因果树模型分布式实现基本处于空白状态。因果树算法引入了新的训练理论（比如 Honesty Tree）并且因果树的分裂还依赖于干预变量、工具变量，这导致我们无法通过对现有分布式树实现做简单来更改来实现。因此，我们立足于论文，充分调研并借鉴业内优秀的开源实现，最终设计实现了一套高性能的分布式框架，并能提供统一的 Serving 方案。&lt;/p&gt; 
&lt;p&gt;借助这套框架，新增因果森林类算法只需要专注于损失函数设计即可，完全不必考虑分布式的工程实现。截止到目前，我们已经实现了四种因果森林算法，能够灵活支持多维连续 treatment 和及工具变量，半小时内即可完成亿级样本 100 棵树的训练。下面我们将从技术选型与框架设计、性能优化、Serving 实现这几个方面为大家介绍这套框架。&lt;/p&gt; 
&lt;h3&gt;2.1 技术选型与框架设计&lt;/h3&gt; 
&lt;p&gt;单机树模型的工程实现可以概括为：遍历所有潜在的切分点并计算分裂指标（损失函数），取指标指标最佳的分裂点分裂，不断分裂树节点直到满足退出条件。而分布式环境下每台机器只包含部分样本，分布式环境下任何全局指标计算都会带来极大的通讯成本，因此需要选择合适的分布式架构帮助我们计算分裂指标。&lt;/p&gt; 
&lt;p&gt;因此，对于分布式因果森林框架，我们关心三个问题：第一，如何计算因果树的分裂指标（损失函数）；第二，如何求潜在分裂点；第三，选用何种分布式编程架构。在此基础上进一步抽象整合，就可以实现不同树模型共用一套分布式框架的目标。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;从论文出发&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;为了深入了解因果森林类算法，我们仔细阅读了因果森林论文以及其作者 Susan Athey 的另一篇在因果领域有重要影响力的《&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F1610.01271&quot; target=&quot;_blank&quot;&gt;Generalized Random Forests&lt;/a&gt;》论文。Susan Athey 认为随机森林本质上是一种自适应的最近邻算法（KNN），也就是通过对样本空间的递归划分从而找到距离该样本点最近的 K 个点（落入同一个叶子节点）来表示该点的值。而因果森林算法本质上是随机森林算法在因果推断领域的一种特殊应用。&lt;/p&gt; 
&lt;p&gt;因果森林和传统分类、回归森林一样采用了二叉的 CART 树（Classification And Regression Tree）作为基模型。与分类和归回问题相同，特征值仅用于样本划分而不参与分裂指标的计算。不同之处在于，分类和回归问题仅研究预测观测值 Y，而因果建模需要研究 treatment、instrumental variable 等变量与观测值 Y 之间的关联。此外，多维连续 treatment 是学界的热门研究方向。因此，相较于分类和回归问题，因果推断需要在样本表示上做出相应调整。&lt;/p&gt; 
&lt;p&gt;因果森林论文提出 honestyTree 的概念：将样本分成 growSet 和 predictionSet 两个部分，growSet 用于树的生长，predictionSet 用于 prediction 值的计算。在论文《Generalized Random Forests》中证明了最小化子节点评估值与真实值之间的误差等价于最大化左右节点间的异质性，并对 CART 树的生长过程做了更加广义的抽象，将其分解成 labeling step 和 regression step 两步。Susan Athey 的单机 C++开源项目 grf-lab 中将这两种观点融合在一起，把树的生长定义为 relabeling/splitting/prediction 三个步骤。&lt;/p&gt; 
&lt;p&gt;综上，我们可以得出一些指导方案设计的结论：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;因果森林本质上是 CART 树 Bagging 算法在因果建模领域的特殊应用。因此 CART 树相关的论文和开源项目都可以广泛借鉴。&lt;/li&gt; 
 &lt;li&gt;不同于 CART 树，因果树的样本表示需要做相应抽象，根据不同算法灵活支持单维 treatment 多维 treatment 和工具变量。&lt;/li&gt; 
 &lt;li&gt;因果树的支持 honestyTree，可以将树的生长拆分为 relabeling/splitting/prediction 三个步骤，根据不同算法灵活实现。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Pre-sorted Algorithm Or Histogram-based Algorithm ？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;主流 CART 树模型求分裂点的实现有两种方式，以早期 XGBoost 为代表的预排序算法，以 LightGBM 和 SparkRandomForest 为代表的直方图算法（目前 XGBoost 也提供了直方图算法的实现）。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;预排序算法&lt;/strong&gt;：对每一个特征的所有取值排序，依次遍历这些值计算分裂指标，取指标最佳的分裂点将节点分裂为左右子节点。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;直方图算法&lt;/strong&gt;：直方图的主要思想是将连续特征离散化到最大 k 个桶中，同时构造一个宽度为 k 的直方图。在遍历样本时，以离散化值为索引在直方图中累积统计量。遍历每个特征的每个分桶计算分裂指标，取指标最佳的分裂点将节点分裂为左右子节点。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src=&quot;https://p1.meituan.net/travelcube/4851e0866552b7b91ee722833eda8fe935298.png&quot; alt=&quot;图 2 离散化分桶&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://p0.meituan.net/travelcube/23437a2df5083d8b50106009269973e629162.png&quot; alt=&quot;图 3 直方图作差&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;相较于预排序的实现，直方图算法的时间复杂度由$O(data&lt;em&gt;features)$降低为$O(bin&lt;/em&gt;features)$，同时离散化后的特征内存占用更低，并且可以通过直方图作差的方式（父节点直方图减去左节点直方图）进一步降低计算量。受限于篇幅，预排序算法与直方图算法的差异这里不再赘述。最终我们选择了直方图算法方案，这也意味着需要在框架中采样计算直方图和特征离散化的环节。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;AllReduce Or MapReduce ？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;工业界主流的分布式机器学习架构有 AllReduce、ParameterServer、MapReduce 三种，其中 AllReduce 性能最高（ParameterServer 架构也可以和 AllReduce 结合，为了方便讨论，这里不再细究）。&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;架构&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;实现&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;性能&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;代表框架&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;AllReduce&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;C++&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;最优&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;XGBoost、微软 LightGBM、谷歌 Tensorflow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;ParameterServer&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;C++&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;居中&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;谷歌 Tensorflow (PS 模式)、Tencent Angel，主要应用在深度学习领域&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;MapReduce&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Java/Scala&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;一般&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Spark MLlib、H2O （Uplift Random Forest）&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;因为 XGBoost 内建了一个 AllReduce 框架 RABIT 可以直接复用，因此我们迅速拟定了两个调研方向——复用 XGBoost 的 AllReduce 高性能实现和 Spark MapReduce 实现。&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;方案&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;架构&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;明细&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;性能&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;技术栈&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;开发难度&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;测试难度&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;支持的样本量级&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;方案 1&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;AllReduce&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;XGB RABIT + Spark&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;高&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;C++和 Scala&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;高&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;高&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;百亿&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;方案 2&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;MapReduce&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Spark&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;一般&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Scala/Java&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;较高&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;较高&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;十亿&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;由于履约使用的样本量在几千万级别，综合考虑开发测试成本和训练性能后，我们最终选择了 MapReduce 方案。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;框架设计&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;综合上文的分析，我们为分布式因果森林框架设计了 4 个模块：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://p0.meituan.net/travelcube/01a4da85b6b815345a2fc4eb1559f69646266.png&quot; alt=&quot;图 4 分布式因果森林框架&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;训练入口与参数模块&lt;/strong&gt;：抽象出 Abstract CFEstimator 用来整合树模型的通用参数，新增算法继承此类后添加专属参数即可作为对应算法的训练入口。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;样本转换模块&lt;/strong&gt;：负责采样构建直方图与特征离散化，上文中单维 treatment 多维 treatment、工具变量、观测值 y 的转换也封装在此模块中。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;森林生长模块&lt;/strong&gt;：框架的核心模块，使用 MapReduce 实现。包含随机森林需要的树采样、特征采样，同时实现 honesty。抽象出 relabeling/splitting/predcition 这几个接口，不同的算法按需实现树的生长逻辑，并以此为基石抽象损失函数接口。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;模型保存和 serving 模块&lt;/strong&gt;：抽象出统一的树模型保存和加载方案。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;2.2 性能优化&lt;/h3&gt; 
&lt;p&gt;在选定 MapReduce+直方图的方案后，我们迅速将目光锁定在同样使用直方图算法的 Spark RandomForest 算法上（以下简称 SparkRF）。我们在 SparkRF 上快速实现了一版分布式因果森林框架，并进一步实现了&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2203.10975&quot; target=&quot;_blank&quot;&gt;Generalized Causal Forests&lt;/a&gt;算法。&lt;/p&gt; 
&lt;p&gt;但是测试过程中我们发现，随着总节点数的增加，跨节点通信量（也就是 Shuffle）剧增，同时还非常容易溢出。为了支持更大规模的模型训练，我们从跨节点通信、内存占用、计算复杂度、剪枝以及 CPU 缓存命中优化等多个方面优化了整个框架。为了讲清楚我们优化逻辑，大家先来看看 SparkRF 是如何实现的。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;SparkRF 的实现&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;SparkRF 整个实现过程可以概括为如下几个步骤：&lt;/p&gt; 
&lt;p&gt;（1）将全量样本离散化并 cache 到内存，这一步包含三部分：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;采样 collect 到 driver 为每个特征等距分桶，得到潜在切分点 split。&lt;/li&gt; 
 &lt;li&gt;使用潜在切分点 split，将每个样本的特征离散化，此时特征值从 double 被转换成 int。&lt;/li&gt; 
 &lt;li&gt;根据树采样比例，为每条样本生成标记数组（由 int 数组实现），标记这条样本用于哪棵树的生长。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（2）树的生长&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;将整个森林看做一张图，采用深度优先搜索待分裂的节点，一次迭代一组节点，由 maxMemoryInMB 参数控制节点数。&lt;/li&gt; 
 &lt;li&gt;根据样本的标记数组，计算每个样本在每个节点的每个 split 下的直方图（统计信息）。&lt;/li&gt; 
 &lt;li&gt;通过 reduceByKey 算子，将同一个待分裂节点的所有 split 下的直方图汇总到同一个 worker 中。&lt;/li&gt; 
 &lt;li&gt;将待分裂节点的每个切分点直方图积分，例如 feature0 有 3 个切分点[a,b,c]，积分后为[a, a+b, a+b+c]，使用直方图作差，计算左右子节点增益，获取最佳切分点。&lt;/li&gt; 
 &lt;li&gt;将待分裂节点的最佳切分点 collect 回 driver，完成森林的生长。&lt;/li&gt; 
 &lt;li&gt;使用 rdd cache 记录样本所属节点 id（由 useNodeIdCache 参数控制）或广播模型。&lt;/li&gt; 
 &lt;li&gt;持续迭代直到达成退出条件。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;可以看到，Spark 的实现除了直方图，还有不少精妙的地方。例如在每次可训练的总结点数有限的情况下，深度优先搜索相较于广度优先搜索更倾向于快速完成单棵树的训练，从而减少后续训练需要广播的树模型。篇幅所限，下面将主要为大家介绍分布式因果森林框架在内存占用方面的优化。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;减少 Cache 体积&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;从上文可以看出，SparkRF 使用 int 来表示最大分桶个数，而 lightGBM 使用无符号 byte 来存储，支持最多 256 个分桶。我们认为 128 个分桶足以支撑因果森林的业务需要，所以使用了有符号 byte 来表示分桶，相比 int 内存占用减少至 1/4。&lt;/p&gt; 
&lt;p&gt;前文中提到，SparkRF 为每个样本创建了一个标记数组。例如训练一个 2 棵树的森林，这个标记数组为[4,0]，这表示此样本在 tree0 有放回采样 4 次，在 tree1 未被使用。此外，框架需要支持 honestyTree，也就意味着需要另一个标记数组记录样本在 growSet 还是 predictionSet。考虑到无放回采样足以覆盖绝大部分场景，并且为了不引入第二个标记数组，我们最终选择了 BitSet 实现。每棵树最多使用 2 个 bit，1 个 bit 表示是否是该树的样本，1 个 bit 表示是否是 honesty 样本。当关闭 honesty 或者不使用下采样时，每棵树只需要 1 个 bit，内存占用最多减少至 1/32。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;支持更大模型广播&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;上文中提到，SparkRF 每一轮迭代调用 reduceByKey 之前都需要计算出哪些样本属于待分裂的节点，Spark 通过 useNodeIdCache 参数提供了两种策略：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;策略一&lt;/strong&gt;：每次迭代将树模型跟随闭包广播到各个 worker 节点通过 predict 获取节点 id。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;策略二&lt;/strong&gt;：使用 RDD[Array[Int]]类型来缓存当前样本隶属于每棵树的哪个节点（例如训练 100 棵树，则创建长度为 100 的 int 数组，每一个元素记录了此条样本在对应下标的树模型中的叶节点编号）。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;从源代码中我们发现，策略二每一轮迭代都会卸载上一轮持久化的 nodeIdCache，再创建一个新的 nodeIdCache 持久化到内存。以 1 亿条样本 100 棵树的森林举例，每一轮迭代就是 1 亿个长度为 100 的 int 数组的创建与垃圾回收。实际测试中我们也发现策略二的效率不如方案一高。那么策略一又如何呢？&lt;/p&gt; 
&lt;p&gt;SparkRF 在每一轮迭代中能够训练的最大节点数由 maxMemoryInMB 控制，我们希望通过增大这个参数来减少迭代次数。但随着树或树深的增加，往往陷入增大该参数就导致树模型广播到 worker 溢出的尴尬境地。经过对 SparkRF 源码分析，我们发现每个 LearningNode 都会存储当前节点、左子节点、右子节点的直方图，最终实现在一套通用框架下计算出每个节点的增益、纯度、预测值等等属性，但这导致了 3 倍的内存占用。&lt;/p&gt; 
&lt;p&gt;考虑到因果森林 honestyTree 原则，叶节点 prediction 值的计算使用 predictionSet，因此生长过程中每个节点全都带着 growSet 的直方图是完全没有意义的。因此我们优化了树的生长逻辑，每个节点仅保留自身的直方图，对于已分裂的节点则清除直方图。以二叉满树为例，叶节点约占整棵树节点的 1/2，结合直方图从 3 倍冗余到 1 倍存储，这一优化使树模型直方图的内存占用下降到原本的 1/6，极大降低了模型体积。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;BenchMark&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;经过一系列优化，最终实现了百棵树亿级样本小时级训练的目标。&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;样本量&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;特征数量&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;树棵树&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;最大树深&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;资源配置&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Generalized Causal Forest 算法&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Continuous Causal Forest 算法&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;1 亿&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;127&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;100&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;8&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;400*(7core16g)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;29min&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;17min&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;备注：不同森林算法的复杂度不同，跨节点通讯量不同，总耗时会存在明显的差异。&lt;/p&gt; 
&lt;h3&gt;2.3 Serving 实现&lt;/h3&gt; 
&lt;p&gt;因果森林本质上是随机森林算法的变种，由一棵棵彼此独立的二叉因果树构成，每棵树由 innerNode 和 leafNode 构成。其 prediction 的逻辑非常简单，每棵因果树单独 predict 获取 leafOutput 向量，森林中所有树预估的 leafOutput 向量求均值即可得到森林的输出值。因此，整个树模型的结构其实非常清晰，innerNode 存储特征 split 信息，leafNode 存储输出向量。除此之外还包含 gain、impurity、count 等属性用于计算特征重要性。&lt;/p&gt; 
&lt;p&gt;模型 serving 除了性能还需要考虑模型离线存储体积、模型的内存占用、模型字段的扩展性。结合因果树的特点，就需要特别注意 leafOutput 向量的实现。以下表中的场景为例，使用 float 数组大约就需要 500&lt;em&gt;4096&lt;/em&gt;40* 4 byte / 1024/ 1024 = 312.5mb，而 List 则需要约 4 倍内存，正因如此我们快速放弃了简单快捷的 Protobuff 方案。&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;树&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;树深&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;满树节点数&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;满树叶节点数&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;叶节点统计指标长度&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;500&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;12&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;8191&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;4096&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;40（例如 ccf 算法 20 维 treatment 下的输出）&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;为什么要重视模型字段的扩展性呢？这是因为离线模型训练追求快速迭代而在线 Serving 追求稳定性。模型的扩展性好，不仅可以轻松做到新版本服务向下兼容老模型，还可以做到在不使用新特性的情况下，老版本服务向上兼容新模型，从而减少在线服务更新发版的次数。综合考虑以上因素以及对 Spark 的兼容性和对 java serving 生态的兼容性，我们设计了如下方案。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;使用 parquet 文件格式存储模型文件。 
  &lt;ul&gt; 
   &lt;li&gt;字段扩展性：好，读取类似 KV，模型文件可以随意扩展而不影响线上服务&lt;/li&gt; 
   &lt;li&gt;模型内存体积：好，相较于 protobuf，可以逐行读取转换为 float 数组而非 Float List&lt;/li&gt; 
   &lt;li&gt;模型存储体积：好，采用 snappy 算法压缩&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;字段平铺的方式存储树模型。相较于 SparkRF 的采用 tree-node 嵌套的方式，更利于字段扩展。虽然会带 treeId 等个别字段的冗余存储，但是列存储的压缩效率非常高，影响很小。&lt;/li&gt; 
 &lt;li&gt;提供独立 jar 包 cos-serving 实现模型加载和 prediction 的功能，实现了离线模型训练升级而在线服务可以不升级的目标。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;我们将离线模型的保存和加载逻辑抽象封装到了因果森林框架中，进一步增强了因果森林框架的扩展性，开发新森林算法时专注于将论文中树的生长逻辑实现即可。&lt;/p&gt; 
&lt;h2&gt;3. 分布式因果效应评估&lt;/h2&gt; 
&lt;p&gt;业内常见的因果效应评估手段主要评估 ITE 的序关系，例如 qini score 和 auuc。但是存在如下三方面不足：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;缺乏对数据和模型无偏性的校验&lt;/li&gt; 
 &lt;li&gt;缺乏因果效应量级关系的评估，qini-score 和 auuc 只能反应弹性的序关系&lt;/li&gt; 
 &lt;li&gt;开源因果评估工具都是单机实现，仅支持百万级样本的计算&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;下文将为大家一一进行说明。&lt;/p&gt; 
&lt;h3&gt;3.1 无偏性校验&lt;/h3&gt; 
&lt;p&gt;无偏性校验分为数据无偏性和模型无偏性。&lt;/p&gt; 
&lt;p&gt;数据无偏性校验可以通过 X⊥T 验证。首先可以训练一个 X-&amp;gt;T 的倾向性得分模型，如果倾向性得分模型的 auc 在 0.5 附近则说明 X 无法正确地预测 T，也就是说 X⊥T，此时数据无偏。例如，使用了 post-treatmen 特征会导致特征穿越，最终导致数据是有偏的，这时候使用 X⊥T 的校验工具可以快速帮我们排查出这一类问题。&lt;/p&gt; 
&lt;p&gt;模型无偏性校验使用 ITE⊥T 验证。首先用训练好的弹性模型在随机实验数据上预测 ITE，接着对样本按照 ITE 升序排列后等频分桶，计算每个 ITE 分桶下实验组样本占比（下图的 trtRatio 曲线）。理想情况下，每个 ITE 分桶中实验组样本占比应该和随机试验中实验组样本占比一致，此时 ITE 正交于 treatment。比如，随机实验中实验组比对照组为 1 比 1，那么 trtRatio 就应该在 1/2 附近浮动。如果 trtRatio 比例不符合预期，我们就可以进一步去排查模型结构的问题。这项工具更是作为标准测试组件融入到分布式因果森林早期的开发过程中。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://p0.meituan.net/travelcube/4143f18914cfa26f00ddace0aa6cbdf3354727.png&quot; alt=&quot;图 5 模型偏差大&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://p0.meituan.net/travelcube/c9066565b8c3cdcad38b2572e2f9a881343353.png&quot; alt=&quot;图 6 模型偏差小&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;3.2 因果效应量级关系评估&lt;/h3&gt; 
&lt;p&gt;因果效应的序关系和量级关系同样重要，只是将弹性的序关系学习准确而没有将弹性的量级关系学习准确，决策者无法预估该 treatment 对用户的影响程度。例如，将量级错误的弹性应用到运筹优化决策中，可能会导致无法满足重要约束从而无法求得可行解。针对弹性量级无法评估的问题，我们在原有的 qini_curve 基础上增加了 qini_pred_curve_counterfactual 和 qini_pred_curve。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;qini_curve 及其扩展&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;qini_pred_curve_counterfactual：将每个样本按照模型预测的 ITE 降序排列，按照如下公式依次计算前 t 个样本的反事实 qini_pred 即可得到曲线。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-5ecb167108beb8ff379cab897d06d6f09be.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;通过比较 qini_pred_curve_counterfactual 和 qini_curve 这两条曲线的重合程度和右端点纵座标，我们可以观察出 ITE 的预估量级和真实量级是否一致。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;qini_pred_curve&lt;/strong&gt;：每个样本按照模型预测的 ITE 降序排列，按照如下公式依次计算前 t 个样本的 qini_pred 即可得到曲线。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-a3b2affd62412dbc8d62ea2a54687f455c5.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;qini_pred_curve 和 qini_pred_curve_counterfactual 差异越大，模型偏差越大，也就是 ITE 与 T 不正交。我们以下图的案例来说明这三条曲线。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://p0.meituan.net/travelcube/be3f50392fd423182d5dafbd8b5a8472379525.png&quot; alt=&quot;图 7 模型偏差大&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://p1.meituan.net/travelcube/1898fa0ff4b6d85e0d86641c38174c1e383597.png&quot; alt=&quot;图 8 模型偏差小&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;根据这些曲线的形状、覆盖面积、重合程度，我们可以得到如下的判断：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;如果数据无偏，那么 qini_pred_curve_counterfactual 会和 qini_pred_curve 重合，反之则表示数据有偏，即 ITE 不独立于 T。&lt;/li&gt; 
 &lt;li&gt;qini_pred_curve_counterfactual 和 qini_curve 的右端点纵轴的差距，代表了弹性预估的量级和弹性真实的量级存的差距。&lt;/li&gt; 
 &lt;li&gt;label 曲线的 qini score&amp;gt;0.5，也就是 label 曲线有明显向下的趋势时，存在过拟合现象，即学到了负弹性。&lt;/li&gt; 
 &lt;li&gt;如果弹性模型对于弹性序关系和弹性量级关系学习得非常准确，那么三条曲线会几乎重合在一起。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;avgITE 和 ATE 的对比&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;上文中提到的三项指标都是累计因果效应的评估，我们还想更有针对性地观察每个弹性分桶下预估因果效应和真实因果效应量级的差异，所以开发了 avgITE 和 CATE 的对比工具。&lt;/p&gt; 
&lt;p&gt;同样将样本按照模型预测的 ITE 降序排列，然后等频分桶，统计每个分桶内预估 ITE 的均值（下图的 avgITE 曲线）和 CATE 值（下图的 cate 曲线）。对比 avgITE 和 CATE，可以评估出真实因果效应和预估因果效应量级的差异。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-82835cb07762e4fb5fc9f8b8c8a619acf49.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://p0.meituan.net/travelcube/734da9b3cb35ac978be28396ddf5bd0e288654.png&quot; alt=&quot;图 9 预测与真实 ITE 量级偏差大&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;3.3 分布式评估体系&lt;/h3&gt; 
&lt;p&gt;早期我们也使用了 pandas 实现的单机评估算法，当样本量增加到 400w 条以上时遇到了严重的单机瓶颈。为此，我们对上述评估指标全部做了分布式改造。排序类指标的实现有分桶积分和逐条积分两种实现思路。考虑到逐条积分会有更高的精度，最终选择了分布式环境下逐条积分的方案。&lt;/p&gt; 
&lt;p&gt;不仅如此，我们还使用 Spark 实现了带权重的分布式的因果效应评估，能够支持十亿样本的评估。此外我们还融入了评估预估 y 与观测值 Y 之间的差异的指标，包括 mae/mse/rmse，并将这些指标封装到二元因果效应评估组件中。由于我们实现的部分因果森林算法能够输出多元 treatment 下预估的 y，因此我们还进一步封装了多元因果效应（拆分成多个二元因果效应）评估功能。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://p0.meituan.net/travelcube/b6c0a0f476c06dd3b40373370fb88186213057.png&quot; alt=&quot;图 10 Causal n Spark&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;4. 总结&lt;/h2&gt; 
&lt;p&gt;经过两年持续迭代，我们实现的分布式因果推断工具包已经发展成集模型训练、评估、去偏、Serving 于一身的综合型因果工具包。我们内部为这个项目命名为 Causal On Spark，简称 COS。目前这个项目也已经全部集成到图灵机器学习平台中。将来有机会我们会再次为大家分享美团履约技术团队在分布式因果推断领域的探索和实践经验。&lt;/p&gt; 
&lt;h2&gt;5. 本文作者&lt;/h2&gt; 
&lt;p&gt;立煌、子青、郑宸、琦帆、兆军，均来自美团到家事业群/履约平台技术部。&lt;/p&gt; 
&lt;h2&gt;6. 参考资料&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;[1] Wager S, Athey S. Estimation and inference of heterogeneous treatment effects using random forests[J]. Journal of the American Statistical Association, 2018, 113(523): 1228-1242.&lt;/li&gt; 
 &lt;li&gt;[2] Athey S, Tibshirani J, Wager S. Generalized random forests[J]. The Annals of Statistics, 2019, 47(2): 1148-1178.&lt;/li&gt; 
 &lt;li&gt;[3] Li, G., Chen, Q., &amp;amp; Usunier, N. (2017). LightGBM: A Highly Efficient Gradient Boosting Decision Tree. Proceedings of the 31st International Conference on Neural Information Processing Systems (NIPS 2017), 3146-3154.&lt;/li&gt; 
 &lt;li&gt;[4] Chen, T., &amp;amp; Guestrin, C. (2016). XGBoost: A Scalable Tree Boosting System. Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD &#39;16), 785-794.&lt;/li&gt; 
 &lt;li&gt;[5] 微软亚洲研究院：《开源 | LightGBM：三天内收获 GitHub 1000 星》.&lt;/li&gt; 
 &lt;li&gt;[6] &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgrf-labs.github.io%2Fgrf%2Findex.html&quot; target=&quot;_blank&quot;&gt;https://grf-labs.github.io/grf/index.html&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;[7] &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgrf-labs.github.io%2Fgrf%2Findex.html&quot; target=&quot;_blank&quot;&gt;https://github.com/uber/causalml&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;[8] &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgrf-labs.github.io%2Fgrf%2Findex.html&quot; target=&quot;_blank&quot;&gt;https://github.com/apache/spark&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/meituantech/blog/10946678</link>
            <guid isPermaLink="false">https://my.oschina.net/meituantech/blog/10946678</guid>
            <pubDate>Fri, 13 Sep 2024 08:24:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>Docker 修改其订阅计划</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Docker 宣布正在重新制定其订阅计划，以便所有计划都可以使用更多功能和服务，并且还将更新定价以反映新增功能。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Docker 的计划包括 Docker Personal、Docker Pro、Docker Team 和 Docker Business，这些计划均经过重新制定，使客户能够通过单一订阅访问所需的一切，并明确规定消费限制，还能够根据需要添加更多内容。计划变更将于 11 月 15 日生效。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;263&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ec29dec3f37fe212e7c8418cd5f44b2f9f3.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;所有计划均包括访问 Docker Desktop、Docker Hub、Docker Build Cloud、Docker Scout 和 Testcontainers Cloud。Team 和 Business 计划将包括 Docker Scout 中的无限制漏洞分析，并且所有计划现在都包括 Docker Build Cloud minutes 和 Docker Scout analyzed repos。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此外，Docker Hub 的镜像拉取和存储限制正在转向基于消费的定价，Docker 表示这只会影响最高级别的商业客户，相当于不到 3% 的账户。提高镜像拉取限制的目的是让大多数服务账户上的 Docker Team 和 Docker Business 客户受益，因为更高的限制将免除之前产生的费用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;随着新变化而来的还有价格的变化。Docker Personal 仍然免费，Docker Business 的定价也保持不变。Docker Pro 的价格从 5 美元/月涨至 9 美元/月，Docker Team 的价格从 9 美元/用户/月涨至 15 美元/用户/月。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;更多详情可&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.docker.com%2Fblog%2Fnovember-2024-updated-plans-announcement%2F&quot; target=&quot;_blank&quot;&gt;查看官方博客&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311774/docker-november-2024-updated</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311774/docker-november-2024-updated</guid>
            <pubDate>Fri, 13 Sep 2024 07:38:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>Servo 网页引擎助力打造全新浏览器 Verso，支持多视图与多窗口</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;最近，Servo 开源社区宣布他们正在使用 Servo 网页引擎开发一款名为 Verso 的全新网页浏览器。Servo 是由 Mozilla 主导开发的高性能网页渲染引擎，其主要负责网页脚本执行和布局渲染等关键功能。去年 Servo 社区基于 egui 构建了新的浏览器 UI 后，今年 Servo 技术指导委员会（TSC）成员吴昱纬（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fwusyong&quot; target=&quot;_blank&quot;&gt;@wusyong&lt;/a&gt;）进一步创建了 Verso 项目，旨在探索使用 Servo 打造功能完善网页浏览器所需的特性。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;190&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-f086f106e06bd7c81b1e5ad919a156651dc.png&quot; width=&quot;580&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Verso 项目的一大亮点是支持多视图（multi-view）功能。通过在单个窗口中以标签页的形式创建多个网页，Verso 还能利用额外的视图绘制浏览器 UI 界面，从而在实战中检验 Servo 是否能满足各种实用需求，如弹窗、右键菜单、文件选择器等。Servo 核心开发者@delan 为此提供了多视图的基础支持。&lt;/p&gt; 
&lt;p&gt;除了多视图，Verso 还实现了多窗口（multi-window）功能。由于多窗口会影响到渲染、图形 API、VR 等多个组件，Verso 开发者不得不从底层解决问题。Servo 目前使用基于 OpenGL 的 WebRender 进行渲染，要支持多窗口就需要支持多个 OpenGL surface。Verso 采用了单 context 多 surface 的方案，在节省内存和线程的同时，仍有一些需要进一步完善之处。&lt;/p&gt; 
&lt;p&gt;展望未来，Verso 将以多视图和多窗口为基础，持续探索浏览器 UI 构建。与此同时，Servo 社区还计划从改进统计数据、支持更多 Web API、引入多进程架构和沙盒等方面，不断完善 Servo 引擎本身。欧盟委员会旗下的 NLNet 基金会对这一开源项目提供了资助，表明开放的浏览器生态正在得到越来越多的认可与支持。我们也期待 Servo 和 Verso 能给 Web 开发领域带来更多创新。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311754</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311754</guid>
            <pubDate>Fri, 13 Sep 2024 05:46:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
    </channel>
</rss>