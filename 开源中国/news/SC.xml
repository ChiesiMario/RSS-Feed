<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 简体中文</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 29 Aug 2025 02:42:32 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>微软发布两款全新自研模型：MAI-Voice-1 与 MAI-1-preview</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微软发布了两款完全自研的模型：语音生成模型&amp;nbsp;MAI-Voice-1&amp;nbsp;与基础大模型&amp;nbsp;MAI-1-preview。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-16fd959f9bc60ac99896cc4906ee795bf72.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;MAI-Voice-1&amp;nbsp;可在单 GPU 上一秒内生成一分钟高保真语音，该模型已被应用于多项功能，包括由 AI 主持人播报当日要闻的 Copilot Daily，以及生成播客式讨论内容以阐释主题。&lt;/p&gt; 
&lt;p&gt;用户可在 Copilot Labs 亲自体验 MAI-Voice-1：输入文本内容后，可自由调整 AI 模型的语音风格与表达方式。&lt;/p&gt; 
&lt;p&gt;除该模型外，微软还推出了采用混合专家架构的 MAI-1-preview，据称其预训练与后训练共动用约&amp;nbsp;15,000&amp;nbsp;张&amp;nbsp;NVIDIA H100&amp;nbsp;GPU，该模型专为需要遵循指令并 「对日常查询提供实用回应」 的用户设计。&lt;/p&gt; 
&lt;p&gt;MAI-1-preview 已上线&amp;nbsp;LMArena&amp;nbsp;社区测试，排名第&amp;nbsp;13，并同步向受邀开发者提供 API 试用申请。未来几周将先面向部分&amp;nbsp;Copilot&amp;nbsp;文本场景灰度上线，以收集反馈并持续迭代。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-83613b604ded64e497b51f1d6e397fb75b0.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;微软 AI 首席执行官&amp;nbsp;Mustafa Suleyman&amp;nbsp;表示，这只是开始，后续将围绕模型升级、计算路线规划以及与微软全线产品深度集成，目标触达数十亿用户，实现 「为所有人构建 AI」。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;https://microsoft.ai/news/two-new-in-house-models/&lt;br&gt; https://copilot.microsoft.com/labs/audio-expression&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369133</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369133</guid>
      <pubDate>Fri, 29 Aug 2025 02:38:29 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>OpenAI 发布 GPT-realtime 语音对话模型</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;OpenAI &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenai.com%2Findex%2Fintroducing-gpt-realtime%2F" target="_blank"&gt;宣布&lt;/a&gt;推出语音模型 GPT-realtime。一个专用于语音 AI Agent 的多模态模型，能够生成更加自然流畅的语音，完美模仿人类丰富多样的语调、情感以及语速，支持图像理解并将其与语音或文本对话相结合使用，适用于客服、教育、金融、医疗等领域打造语音智能体。&lt;/p&gt; 
&lt;p&gt;GPT-realtime 采用端到端架构，直接处理并生成音频，显著降低延迟。还新增了 Marin 与 Cedar 两种极具特色的语音，同时对原有的 8 种语音也进行了全面升级。&lt;/p&gt; 
&lt;p&gt;OpenAI 表示，该模型展现出更高智能水平，能够更准确地理解母语音频。可以捕捉非语言线索（例如笑声）、在句子中间切换语言，并调整语气（「简洁专业」 vs. 「友善善解人意」）。&lt;/p&gt; 
&lt;p&gt;根据内部评估，该模型在检测其他语言（包括西班牙语、中文、日语和法语）的字母数字序列（例如电话号码、车辆识别号码 (VIN) 等）方面也表现出更高的准确性。在 Big Bench Audio 评估中，该模型的推理能力 gpt-realtime 得分高达 82.8%，超过了 2024 年 12 月发布的上一版模型（得分为 65.6%）。&lt;/p&gt; 
&lt;p&gt;&lt;img height="437" src="https://oscimg.oschina.net/oscnet/up-fc3164ea41e38910f3404c3f899f4ee57dc.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在衡量指令执行准确率的 MultiChallenge 音频基准测试中，该模型的&lt;code&gt;gpt-realtime&lt;/code&gt;得分为 30.5%，相比 2024 年 12 月发布的上一版模型（得分为 20.6%）有了显著提升。&lt;/p&gt; 
&lt;p&gt;&lt;img height="386" src="https://oscimg.oschina.net/oscnet/up-250967f62d107e6e2c322d774444bbf935d.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;GPT-realtime 改进了函数调用能力，支持图像输入，使对话内容可与视觉信息结合。新增多项功能使 API 更易集成，为开发者提供更大灵活性。&lt;/p&gt; 
&lt;p&gt;&lt;img height="416" src="https://oscimg.oschina.net/oscnet/up-b7c9463881a6236756ee3312a566013142e.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;据悉，此次发布由 95 后华人研究员 Beichen Li 和 Liyu Chen 参与。Beichen Li 毕业于 MIT，研究方向为计算机图形学与机器学习交叉领域。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369131</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369131</guid>
      <pubDate>Fri, 29 Aug 2025 02:30:29 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>xAI 发布代码生成模型 Grok Code Fast 1</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;xAI &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.ai%2Fnews%2Fgrok-code-fast-1" target="_blank"&gt;宣布&lt;/a&gt;推出全新智能代码生成模型 Grok Code Fast 1。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1524" src="https://static.oschina.net/uploads/space/2025/0829/102738_RwQg_2720166.png" width="1714" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;xAI 表示该模型从零开始构建，基于涵盖真实世界编码任务的数据集进行预训练与优化，特别擅长 TypeScript、Python、Java、Rust、C++ 和 Go，可在最少监督下完成从项目构建到漏洞修复等多类任务。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0829/103104_8vb3_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;定价方面，Grok Code Fast 1 的费用为：每百万输入 token 0.20 美元、每百万输出 token 1.50 美元、每百万已缓存输入 token 0.02 美元，主打「快速且经济」。目前已在 Cursor、GitHub Copilot、Cline、opencode、Windsurf、Roo Code 与 Kilo Code 等主流智能编程平台限时免费开放。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369128/grok-code-fast-1</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369128/grok-code-fast-1</guid>
      <pubDate>Fri, 29 Aug 2025 02:28:29 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Metal3 成为 CNCF 孵化项目</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;CNCF 技术监督委员会正式投票通过，&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F43TxZ8TtogDTveKAcMHaFA" target="_blank"&gt;接纳&lt;/a&gt; Metal3 作为孵化项目。2019 年，Red Hat 和 Ericsson 开始合作，Metal3 逐渐成形。2020 年 9 月，Metal3 加入 CNCF sandbox 时。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="307" src="https://oscimg.oschina.net/oscnet/up-9262af51b2c5f77ea22a345e452000cdf64.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;目前，Metal3 已不再只是裸金属配置工具。其打造了一个完整平台，能够：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;无缝集成 Cluster API，实现 Kubernetes 生命周期管理&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;通过 IPAM 组件提供强大 IP 地址管理&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;具备企业级安全，自动漏洞扫描&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;支持固件管理及 Day-2 运维&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;完全基于 Kubernetes 原生 API 运行&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;2025 年，该项目计划实现：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;增强多租户支持&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;支持 ARM 架构，超越 x86_64&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;改进无 DHCP 配置能力&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;各组件 API 新版本&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;持续优化用户体验&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369122</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369122</guid>
      <pubDate>Fri, 29 Aug 2025 02:16:29 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>夜莺监控发布 8.3 版本</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#000000; margin-left:0; margin-right:0; text-align:left"&gt;近期，开源夜莺监控项目发布了 8.3 版本，这个版本引入了一个较为重磅的功能：仪表盘新一代 Table 图表，可以更为容易配置多个指标的 merge 展示。&lt;/p&gt; 
&lt;p&gt;&lt;img height="352" src="https://oscimg.oschina.net/oscnet/up-7eb97b5c4950d7ac1de32be130bc2078210.png" width="2182" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0; text-align:left"&gt;大的功能演化是放在 V9 版本的，所以 V8 版本更侧重问题修复和现有功能的优化改造，8.3 版本的其他变更内容如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;refactor: 优化机器心跳更新逻辑&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;refactor: 优化时序数据转发逻辑&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;refactor: 优化数据源选择器交互（应用于即时查询 / 日志检索 / 仪表盘页面）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;refactor: 优化订阅规则页面的订阅告警规则选择器交互&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;refactor: 优化 Prometheus 即时查询页面的历史记录，在 PromQL 输入框回车和失去焦点后也触发保存历史记录&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;refactor: 优化 Elasticsearch 日志检索页面的日志查询接口的 QueryDSL&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;refactor: 单点登录完成登录之后，支持跳转到登录之前的访问的页面&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;fix: 自愈任务状态更新问题&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;fix: 业务组列表模式下搜索无效问题&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0; text-align:left"&gt;新版下载包已经在&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fccfos%2Fnightingale%2Freleases" target="_blank"&gt;github&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;发布，镜像也在&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhub.docker.com%2Fr%2Fflashcatcloud%2Fnightingale%2Ftags" target="_blank"&gt;dockerhub&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;发布。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369110/nightingale-8-3-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369110/nightingale-8-3-released</guid>
      <pubDate>Fri, 29 Aug 2025 01:52:27 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>🚀 LLM 流式 API 友好的 HttpClient - Fetcher v1.0.0 发布！</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;div&gt; 
 &lt;h1&gt;🚀 Fetcher&lt;/h1&gt; 
 &lt;p style="margin-left:0px; margin-right:0px; text-align:center"&gt;&lt;strong&gt;超轻量级 • 模块化 • TypeScript 优先 • 拦截器驱动 • LLM 流式 API 支持&lt;/strong&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;🌟 为什么选择 Fetcher?&lt;/h2&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;Fetcher 不仅仅是一个 HTTP 客户端——它是一个为现代 Web 开发设计的完整生态系统，原生支持 LLM 流式 API。基于原生 Fetch API 构建，Fetcher 提供了类似 Axios 的体验，同时保持极小的体积。&lt;/p&gt; 
&lt;h2&gt;🚀 核心特性&lt;/h2&gt; 
&lt;h3&gt;🎯&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://gitee.com/AhooWang/fetcher/tree/main/packages/fetcher"&gt;&lt;code&gt;@ahoo-wang/fetcher&lt;/code&gt;&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 基础核心&lt;/h3&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;轻量级核心，驱动整个生态系统：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;⚡ 超轻量级&lt;/strong&gt;: 仅 2.7KiB min+gzip - 比大多数替代品更小&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🧭 路径和查询参数&lt;/strong&gt;: 内置支持路径 (&lt;code&gt;{id}&lt;/code&gt;) 和查询参数&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🔗 拦截器系统&lt;/strong&gt;: 请求、响应和错误拦截器，支持有序执行的灵活中间件模式&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;⏱️ 超时控制&lt;/strong&gt;: 可配置的请求超时和适当的错误处理&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🔄 Fetch API 兼容&lt;/strong&gt;: 完全兼容原生 Fetch API&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🛡️ TypeScript 支持&lt;/strong&gt;: 完整的 TypeScript 定义，实现类型安全开发&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🧩 模块化架构&lt;/strong&gt;: 轻量级核心和可选扩展包&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;📦 命名 Fetcher 支持&lt;/strong&gt;: 自动注册和检索 fetcher 实例&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;⚙️ 默认 Fetcher&lt;/strong&gt;: 预配置的默认 fetcher 实例，快速上手&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🎨&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://gitee.com/AhooWang/fetcher/tree/main/packages/decorator"&gt;&lt;code&gt;@ahoo-wang/fetcher-decorator&lt;/code&gt;&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 声明式 API&lt;/h3&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;使用简洁的声明式服务定义转换您的 API 交互：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;🎨 清晰的 API 定义&lt;/strong&gt;: 使用直观的装饰器定义 HTTP 服务&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🧭 自动参数绑定&lt;/strong&gt;: 路径、查询、头部和正文参数自动绑定&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;⏱️ 可配置超时&lt;/strong&gt;: 每方法和每类的超时设置&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🔗 Fetcher 集成&lt;/strong&gt;: 与 Fetcher 的命名 fetcher 系统无缝集成&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;⚡ 自动实现&lt;/strong&gt;: 方法自动实现 HTTP 调用&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;📦 元数据系统&lt;/strong&gt;: 丰富的元数据支持，用于高级自定义&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;📡&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://gitee.com/AhooWang/fetcher/tree/main/packages/eventstream"&gt;&lt;code&gt;@ahoo-wang/fetcher-eventstream&lt;/code&gt;&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 实时流和 LLM 支持&lt;/h3&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;为您的实时应用提供 Server-Sent Events 支持，专为大型语言模型流式 API 设计：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;📡 事件流转换&lt;/strong&gt;: 将&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;text/event-stream&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;响应转换为&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;ServerSentEvent&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;对象的异步生成器&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🔌 拦截器集成&lt;/strong&gt;: 自动为具有&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;text/event-stream&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;内容类型的响应添加&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;eventStream()&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;方法&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;📋 SSE 解析&lt;/strong&gt;: 根据规范解析 Server-Sent Events，包括数据、事件、ID 和重试字段&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🔄 流支持&lt;/strong&gt;: 正确处理分块数据和多行事件&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;💬 注释处理&lt;/strong&gt;: 正确忽略注释行（以&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;:&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;开头的行），符合 SSE 规范&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;⚡ 性能优化&lt;/strong&gt;: 高效解析和流式传输，适用于高性能应用&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🤖 LLM 流准备就绪&lt;/strong&gt;: 原生支持来自流行 LLM API（如 OpenAI GPT、Claude 等）的流式响应&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;LLM 集成示例&lt;/h4&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;&lt;a href="https://gitee.com/AhooWang/fetcher/tree/main/integration-test/src/eventstream/llmClient.ts"&gt;LlmClient&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;演示了如何创建具有流支持的 LLM API 专用客户端：&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;strong&gt;import&lt;/strong&gt; { createLlmFetcher, LlmClient } &lt;strong&gt;from&lt;/strong&gt; &lt;span style="color:#dd1144"&gt;'./llmClient'&lt;/span&gt;;

&lt;em&gt;// 使用您的 API 配置初始化 LLM 客户端&lt;/em&gt;
&lt;strong&gt;const&lt;/strong&gt; llmFetcher = createLlmFetcher({
  baseURL: &lt;span style="color:#dd1144"&gt;'https://api.openai.com/v1'&lt;/span&gt;,
  apiKey: process.env.OPENAI_API_KEY || &lt;span style="color:#dd1144"&gt;'your-api-key'&lt;/span&gt;,
  model: &lt;span style="color:#dd1144"&gt;'gpt-3.5-turbo'&lt;/span&gt;,
});

&lt;strong&gt;const&lt;/strong&gt; llmClient = &lt;strong&gt;new&lt;/strong&gt; LlmClient();

&lt;em&gt;// 流式聊天完成，逐个令牌输出&lt;/em&gt;
&lt;strong&gt;async&lt;/strong&gt; &lt;span&gt;&lt;strong&gt;function&lt;/strong&gt; &lt;strong&gt;streamChatExample&lt;/strong&gt;() &lt;/span&gt;{
  &lt;strong&gt;const&lt;/strong&gt; stream = &lt;strong&gt;await&lt;/strong&gt; llmClient.streamChat({
    messages: [
      { role: &lt;span style="color:#dd1144"&gt;'system'&lt;/span&gt;, content: &lt;span style="color:#dd1144"&gt;'You are a helpful assistant.'&lt;/span&gt; },
      { role: &lt;span style="color:#dd1144"&gt;'user'&lt;/span&gt;, content: &lt;span style="color:#dd1144"&gt;'Explain quantum computing in simple terms.'&lt;/span&gt; },
    ],
    stream: &lt;span&gt;true&lt;/span&gt;,
  });

  &lt;strong&gt;for&lt;/strong&gt; &lt;strong&gt;await&lt;/strong&gt; (&lt;strong&gt;const&lt;/strong&gt; event of stream) {
    &lt;strong&gt;if&lt;/strong&gt; (event.data) {
      &lt;strong&gt;const&lt;/strong&gt; chunk = event.data;
      &lt;strong&gt;const&lt;/strong&gt; content = chunk.choices[&lt;span style="color:#008080"&gt;0&lt;/span&gt;]?.delta?.content || &lt;span style="color:#dd1144"&gt;''&lt;/span&gt;;
      process.stdout.write(content); &lt;em&gt;// 实时输出&lt;/em&gt;
    }
  }
}&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h3&gt;🔐&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://gitee.com/AhooWang/fetcher/tree/main/packages/cosec"&gt;&lt;code&gt;@ahoo-wang/fetcher-cosec&lt;/code&gt;&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 企业安全&lt;/h3&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;使用集成认证保护您的应用：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;🔐 自动认证&lt;/strong&gt;: 自动 CoSec 认证头部&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;📱 设备管理&lt;/strong&gt;: 使用 localStorage 持久化的设备 ID 管理&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🔄 令牌刷新&lt;/strong&gt;: 基于响应代码 (401) 的自动令牌刷新&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🌈 请求跟踪&lt;/strong&gt;: 用于跟踪的唯一请求 ID 生成&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;💾 令牌存储&lt;/strong&gt;: 安全的令牌存储管理&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📦 包生态系统&lt;/h2&gt; 
&lt;div&gt; 
 &lt;table cellspacing="0" style="border-collapse:collapse; border-spacing:0px; box-sizing:border-box; display:block; margin-bottom:16px; margin-top:0px; overflow:auto; width:1116px; word-break:initial"&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;th&gt;包&lt;/th&gt; 
    &lt;th&gt;描述&lt;/th&gt; 
    &lt;th&gt;版本&lt;/th&gt; 
    &lt;th&gt;大小&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/AhooWang/fetcher/tree/main/packages/fetcher"&gt;&lt;code&gt;@ahoo-wang/fetcher&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;strong&gt;核心 HTTP 客户端&lt;/strong&gt;&lt;br&gt; 具有 Axios 类似 API 的超轻量级基础&lt;/td&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40ahoo-wang%2Ffetcher" target="_blank"&gt;&lt;img alt="npm" src="https://oscimg.oschina.net/oscnet//c9c44440edd659e7146429b9eec99b76.svg" referrerpolicy="no-referrer"&gt;&lt;/a&gt;&lt;/td&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40ahoo-wang%2Ffetcher" target="_blank"&gt;&lt;img alt="size" src="https://oscimg.oschina.net/oscnet//aae69884ca65fd11d86ea6fcf1193fcc.jpg" referrerpolicy="no-referrer"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/AhooWang/fetcher/tree/main/packages/decorator"&gt;&lt;code&gt;@ahoo-wang/fetcher-decorator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;strong&gt;装饰器支持&lt;/strong&gt;&lt;br&gt; 声明式 API 服务定义&lt;/td&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40ahoo-wang%2Ffetcher-decorator" target="_blank"&gt;&lt;img alt="npm" src="https://oscimg.oschina.net/oscnet//444624bfee03dcc26ccb9768ee91311b.svg" referrerpolicy="no-referrer"&gt;&lt;/a&gt;&lt;/td&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40ahoo-wang%2Ffetcher-decorator" target="_blank"&gt;&lt;img alt="size" src="https://oscimg.oschina.net/oscnet//2781fbcef02879f3f399b5b11a189726.jpg" referrerpolicy="no-referrer"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/AhooWang/fetcher/tree/main/packages/eventstream"&gt;&lt;code&gt;@ahoo-wang/fetcher-eventstream&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;strong&gt;实时流和 LLM 支持&lt;/strong&gt;&lt;br&gt; Server-Sent Events (SSE) 支持，原生 LLM 流式 API 集成&lt;/td&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40ahoo-wang%2Ffetcher-eventstream" target="_blank"&gt;&lt;img alt="npm" src="https://oscimg.oschina.net/oscnet//08a2b973ca2f759fa3d408ab9a0fb9fb.svg" referrerpolicy="no-referrer"&gt;&lt;/a&gt;&lt;/td&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40ahoo-wang%2Ffetcher-eventstream" target="_blank"&gt;&lt;img alt="size" src="https://oscimg.oschina.net/oscnet//c38138e42a39d298ed881800ba7c78c6.jpg" referrerpolicy="no-referrer"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/AhooWang/fetcher/tree/main/packages/cosec"&gt;&lt;code&gt;@ahoo-wang/fetcher-cosec&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;strong&gt;企业安全&lt;/strong&gt;&lt;br&gt; CoSec 认证集成&lt;/td&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40ahoo-wang%2Ffetcher-cosec" target="_blank"&gt;&lt;img alt="npm" src="https://oscimg.oschina.net/oscnet//3cfcdf4d3291753ea6a8765ff8714bc2.svg" referrerpolicy="no-referrer"&gt;&lt;/a&gt;&lt;/td&gt; 
    &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40ahoo-wang%2Ffetcher-cosec" target="_blank"&gt;&lt;img alt="size" src="https://oscimg.oschina.net/oscnet//bc58bd9bfaddd4742ce78c4a33b47ad8.jpg" referrerpolicy="no-referrer"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/div&gt; 
&lt;h2&gt;🚀 快速开始&lt;/h2&gt; 
&lt;h3&gt;📦 安装&lt;/h3&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;em&gt;# 安装核心包&lt;/em&gt;
npm install @ahoo-wang/fetcher

&lt;em&gt;# 或安装所有扩展，包括 LLM 流支持&lt;/em&gt;
npm install @ahoo-wang/fetcher @ahoo-wang/fetcher-decorator @ahoo-wang/fetcher-eventstream @ahoo-wang/fetcher-cosec

&lt;em&gt;# 使用 pnpm (推荐)&lt;/em&gt;
pnpm add @ahoo-wang/fetcher

&lt;em&gt;# 使用 yarn&lt;/em&gt;
yarn add @ahoo-wang/fetcher&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h3&gt;⚡ 快速示例&lt;/h3&gt; 
&lt;h4&gt;基础 HTTP 客户端&lt;/h4&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;strong&gt;import&lt;/strong&gt; { Fetcher } &lt;strong&gt;from&lt;/strong&gt; &lt;span style="color:#dd1144"&gt;'@ahoo-wang/fetcher'&lt;/span&gt;;

&lt;em&gt;// 创建 fetcher 实例&lt;/em&gt;
&lt;strong&gt;const&lt;/strong&gt; fetcher = &lt;strong&gt;new&lt;/strong&gt; Fetcher({
  baseURL: &lt;span style="color:#dd1144"&gt;'https://api.example.com'&lt;/span&gt;,
  timeout: &lt;span style="color:#008080"&gt;5000&lt;/span&gt;,
});

&lt;em&gt;// 带路径和查询参数的 GET 请求&lt;/em&gt;
&lt;strong&gt;const&lt;/strong&gt; response = &lt;strong&gt;await&lt;/strong&gt; fetcher.get(&lt;span style="color:#dd1144"&gt;'/users/{id}'&lt;/span&gt;, {
  urlParams: {
    path: { id: &lt;span style="color:#008080"&gt;123&lt;/span&gt; },
    query: { include: &lt;span style="color:#dd1144"&gt;'profile'&lt;/span&gt; },
  },
});
&lt;strong&gt;const&lt;/strong&gt; userData = &lt;strong&gt;await&lt;/strong&gt; response.json&amp;lt;User&amp;gt;();

&lt;em&gt;// 自动 JSON 转换的 POST 请求&lt;/em&gt;
&lt;strong&gt;const&lt;/strong&gt; createUserResponse = &lt;strong&gt;await&lt;/strong&gt; fetcher.post(&lt;span style="color:#dd1144"&gt;'/users'&lt;/span&gt;, {
  body: { name: &lt;span style="color:#dd1144"&gt;'John Doe'&lt;/span&gt;, email: &lt;span style="color:#dd1144"&gt;'john@example.com'&lt;/span&gt; },
});&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h4&gt;声明式 API 服务&lt;/h4&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;strong&gt;import&lt;/strong&gt; { NamedFetcher } &lt;strong&gt;from&lt;/strong&gt; &lt;span style="color:#dd1144"&gt;'@ahoo-wang/fetcher'&lt;/span&gt;;
&lt;strong&gt;import&lt;/strong&gt; {
  api,
  &lt;strong&gt;get&lt;/strong&gt;,
  post,
  path,
  query,
  body,
} &lt;strong&gt;from&lt;/strong&gt; &lt;span style="color:#dd1144"&gt;'@ahoo-wang/fetcher-decorator'&lt;/span&gt;;

&lt;em&gt;// 注册命名 fetcher&lt;/em&gt;
&lt;strong&gt;const&lt;/strong&gt; apiFetcher = &lt;strong&gt;new&lt;/strong&gt; NamedFetcher(&lt;span style="color:#dd1144"&gt;'api'&lt;/span&gt;, {
  baseURL: &lt;span style="color:#dd1144"&gt;'https://api.example.com'&lt;/span&gt;,
});

&lt;em&gt;// 使用装饰器定义服务&lt;/em&gt;
&lt;span&gt;@api&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'/users'&lt;/span&gt;, { fetcher: &lt;span style="color:#dd1144"&gt;'api'&lt;/span&gt; })
&lt;strong&gt;class&lt;/strong&gt; UserService {
  &lt;span&gt;@get&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'/'&lt;/span&gt;)
  getUsers(&lt;span&gt;@query&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'limit'&lt;/span&gt;) limit?: &lt;span style="color:#0086b3"&gt;number&lt;/span&gt;): &lt;span style="color:#0086b3"&gt;Promise&lt;/span&gt;&amp;lt;User[]&amp;gt; {
    &lt;strong&gt;throw&lt;/strong&gt; &lt;strong&gt;new&lt;/strong&gt; &lt;span style="color:#0086b3"&gt;Error&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'Auto-generated'&lt;/span&gt;);
  }

  &lt;span&gt;@post&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'/'&lt;/span&gt;)
  createUser(&lt;span&gt;@body&lt;/span&gt;() user: User): &lt;span style="color:#0086b3"&gt;Promise&lt;/span&gt;&amp;lt;User&amp;gt; {
    &lt;strong&gt;throw&lt;/strong&gt; &lt;strong&gt;new&lt;/strong&gt; &lt;span style="color:#0086b3"&gt;Error&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'Auto-generated'&lt;/span&gt;);
  }

  &lt;span&gt;@get&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'/{id}'&lt;/span&gt;)
  getUser(&lt;span&gt;@path&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'id'&lt;/span&gt;) id: &lt;span style="color:#0086b3"&gt;number&lt;/span&gt;): &lt;span style="color:#0086b3"&gt;Promise&lt;/span&gt;&amp;lt;User&amp;gt; {
    &lt;strong&gt;throw&lt;/strong&gt; &lt;strong&gt;new&lt;/strong&gt; &lt;span style="color:#0086b3"&gt;Error&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'Auto-generated'&lt;/span&gt;);
  }
}

&lt;em&gt;// 使用服务&lt;/em&gt;
&lt;strong&gt;const&lt;/strong&gt; userService = &lt;strong&gt;new&lt;/strong&gt; UserService();
&lt;strong&gt;const&lt;/strong&gt; users = &lt;strong&gt;await&lt;/strong&gt; userService.getUsers(&lt;span style="color:#008080"&gt;10&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h4&gt;强大的拦截器&lt;/h4&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;strong&gt;import&lt;/strong&gt; { Fetcher } &lt;strong&gt;from&lt;/strong&gt; &lt;span style="color:#dd1144"&gt;'@ahoo-wang/fetcher'&lt;/span&gt;;

&lt;strong&gt;const&lt;/strong&gt; fetcher = &lt;strong&gt;new&lt;/strong&gt; Fetcher({ baseURL: &lt;span style="color:#dd1144"&gt;'https://api.example.com'&lt;/span&gt; });

&lt;em&gt;// 添加带排序的请求拦截器&lt;/em&gt;
fetcher.interceptors.request.use({
  name: &lt;span style="color:#dd1144"&gt;'auth-interceptor'&lt;/span&gt;,
  order: &lt;span style="color:#008080"&gt;100&lt;/span&gt;,
  intercept(exchange) {
    exchange.request.headers.Authorization = &lt;span style="color:#dd1144"&gt;'Bearer '&lt;/span&gt; + getAuthToken();
  },
});

&lt;em&gt;// 添加响应拦截器用于日志记录&lt;/em&gt;
fetcher.interceptors.response.use({
  name: &lt;span style="color:#dd1144"&gt;'logging-interceptor'&lt;/span&gt;,
  order: &lt;span style="color:#008080"&gt;10&lt;/span&gt;,
  intercept(exchange) {
    &lt;span style="color:#0086b3"&gt;console&lt;/span&gt;.log(&lt;span style="color:#dd1144"&gt;'Response:'&lt;/span&gt;, exchange.response.status);
  },
});&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h4&gt;实时流和 LLM 支持&lt;/h4&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;strong&gt;import&lt;/strong&gt; { Fetcher } &lt;strong&gt;from&lt;/strong&gt; &lt;span style="color:#dd1144"&gt;'@ahoo-wang/fetcher'&lt;/span&gt;;
&lt;strong&gt;import&lt;/strong&gt; { EventStreamInterceptor } &lt;strong&gt;from&lt;/strong&gt; &lt;span style="color:#dd1144"&gt;'@ahoo-wang/fetcher-eventstream'&lt;/span&gt;;

&lt;strong&gt;const&lt;/strong&gt; fetcher = &lt;strong&gt;new&lt;/strong&gt; Fetcher({ baseURL: &lt;span style="color:#dd1144"&gt;'https://api.example.com'&lt;/span&gt; });
fetcher.interceptors.response.use(&lt;strong&gt;new&lt;/strong&gt; EventStreamInterceptor());

&lt;em&gt;// 流式实时事件 (通用 SSE)&lt;/em&gt;
&lt;strong&gt;const&lt;/strong&gt; response = &lt;strong&gt;await&lt;/strong&gt; fetcher.get(&lt;span style="color:#dd1144"&gt;'/events'&lt;/span&gt;);
&lt;strong&gt;if&lt;/strong&gt; (response.eventStream) {
  &lt;strong&gt;for&lt;/strong&gt; &lt;strong&gt;await&lt;/strong&gt; (&lt;strong&gt;const&lt;/strong&gt; event of response.eventStream()) {
    &lt;span style="color:#0086b3"&gt;console&lt;/span&gt;.log(&lt;span style="color:#dd1144"&gt;'Real-time event:'&lt;/span&gt;, event);
  }
}

&lt;em&gt;// 流式 LLM 响应，逐个令牌输出&lt;/em&gt;
&lt;strong&gt;const&lt;/strong&gt; llmResponse = &lt;strong&gt;await&lt;/strong&gt; fetcher.post(&lt;span style="color:#dd1144"&gt;'/chat/completions'&lt;/span&gt;, {
  body: {
    model: &lt;span style="color:#dd1144"&gt;'gpt-3.5-turbo'&lt;/span&gt;,
    messages: [{ role: &lt;span style="color:#dd1144"&gt;'user'&lt;/span&gt;, content: &lt;span style="color:#dd1144"&gt;'Hello!'&lt;/span&gt; }],
    stream: &lt;span&gt;true&lt;/span&gt;,
  },
});

&lt;strong&gt;if&lt;/strong&gt; (llmResponse.jsonEventStream) {
  &lt;em&gt;// 专门用于 LLM API 的 JSON SSE 事件&lt;/em&gt;
  &lt;strong&gt;for&lt;/strong&gt; &lt;strong&gt;await&lt;/strong&gt; (&lt;strong&gt;const&lt;/strong&gt; event of llmResponse.jsonEventStream&amp;lt;ChatCompletionChunk&amp;gt;()) {
    &lt;strong&gt;const&lt;/strong&gt; content = event.data.choices[&lt;span style="color:#008080"&gt;0&lt;/span&gt;]?.delta?.content || &lt;span style="color:#dd1144"&gt;''&lt;/span&gt;;
    process.stdout.write(content); &lt;em&gt;// 实时令牌输出&lt;/em&gt;
  }
}&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h3&gt;⚡ 快速示例&lt;/h3&gt; 
&lt;h4&gt;基础 HTTP 客户端&lt;/h4&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;strong&gt;import&lt;/strong&gt; { Fetcher } &lt;strong&gt;from&lt;/strong&gt; &lt;span style="color:#dd1144"&gt;'@ahoo-wang/fetcher'&lt;/span&gt;;

&lt;em&gt;// 创建 fetcher 实例&lt;/em&gt;
&lt;strong&gt;const&lt;/strong&gt; fetcher = &lt;strong&gt;new&lt;/strong&gt; Fetcher({
  baseURL: &lt;span style="color:#dd1144"&gt;'https://api.example.com'&lt;/span&gt;,
  timeout: &lt;span style="color:#008080"&gt;5000&lt;/span&gt;,
});

&lt;em&gt;// 带路径和查询参数的 GET 请求&lt;/em&gt;
&lt;strong&gt;const&lt;/strong&gt; response = &lt;strong&gt;await&lt;/strong&gt; fetcher.get(&lt;span style="color:#dd1144"&gt;'/users/{id}'&lt;/span&gt;, {
  urlParams: {
    path: { id: &lt;span style="color:#008080"&gt;123&lt;/span&gt; },
    query: { include: &lt;span style="color:#dd1144"&gt;'profile'&lt;/span&gt; },
  },
});
&lt;strong&gt;const&lt;/strong&gt; userData = &lt;strong&gt;await&lt;/strong&gt; response.json&amp;lt;User&amp;gt;();

&lt;em&gt;// 自动 JSON 转换的 POST 请求&lt;/em&gt;
&lt;strong&gt;const&lt;/strong&gt; createUserResponse = &lt;strong&gt;await&lt;/strong&gt; fetcher.post(&lt;span style="color:#dd1144"&gt;'/users'&lt;/span&gt;, {
  body: { name: &lt;span style="color:#dd1144"&gt;'John Doe'&lt;/span&gt;, email: &lt;span style="color:#dd1144"&gt;'john@example.com'&lt;/span&gt; },
});&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h4&gt;声明式 API 服务&lt;/h4&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;strong&gt;import&lt;/strong&gt; { NamedFetcher } &lt;strong&gt;from&lt;/strong&gt; &lt;span style="color:#dd1144"&gt;'@ahoo-wang/fetcher'&lt;/span&gt;;
&lt;strong&gt;import&lt;/strong&gt; {
  api,
  &lt;strong&gt;get&lt;/strong&gt;,
  post,
  path,
  query,
  body,
} &lt;strong&gt;from&lt;/strong&gt; &lt;span style="color:#dd1144"&gt;'@ahoo-wang/fetcher-decorator'&lt;/span&gt;;

&lt;em&gt;// 注册命名 fetcher&lt;/em&gt;
&lt;strong&gt;const&lt;/strong&gt; apiFetcher = &lt;strong&gt;new&lt;/strong&gt; NamedFetcher(&lt;span style="color:#dd1144"&gt;'api'&lt;/span&gt;, {
  baseURL: &lt;span style="color:#dd1144"&gt;'https://api.example.com'&lt;/span&gt;,
});

&lt;em&gt;// 使用装饰器定义服务&lt;/em&gt;
&lt;span&gt;@api&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'/users'&lt;/span&gt;, { fetcher: &lt;span style="color:#dd1144"&gt;'api'&lt;/span&gt; })
&lt;strong&gt;class&lt;/strong&gt; UserService {
  &lt;span&gt;@get&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'/'&lt;/span&gt;)
  getUsers(&lt;span&gt;@query&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'limit'&lt;/span&gt;) limit?: &lt;span style="color:#0086b3"&gt;number&lt;/span&gt;): &lt;span style="color:#0086b3"&gt;Promise&lt;/span&gt;&amp;lt;User[]&amp;gt; {
    &lt;strong&gt;throw&lt;/strong&gt; &lt;strong&gt;new&lt;/strong&gt; &lt;span style="color:#0086b3"&gt;Error&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'Auto-generated'&lt;/span&gt;);
  }

  &lt;span&gt;@post&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'/'&lt;/span&gt;)
  createUser(&lt;span&gt;@body&lt;/span&gt;() user: User): &lt;span style="color:#0086b3"&gt;Promise&lt;/span&gt;&amp;lt;User&amp;gt; {
    &lt;strong&gt;throw&lt;/strong&gt; &lt;strong&gt;new&lt;/strong&gt; &lt;span style="color:#0086b3"&gt;Error&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'Auto-generated'&lt;/span&gt;);
  }

  &lt;span&gt;@get&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'/{id}'&lt;/span&gt;)
  getUser(&lt;span&gt;@path&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'id'&lt;/span&gt;) id: &lt;span style="color:#0086b3"&gt;number&lt;/span&gt;): &lt;span style="color:#0086b3"&gt;Promise&lt;/span&gt;&amp;lt;User&amp;gt; {
    &lt;strong&gt;throw&lt;/strong&gt; &lt;strong&gt;new&lt;/strong&gt; &lt;span style="color:#0086b3"&gt;Error&lt;/span&gt;(&lt;span style="color:#dd1144"&gt;'Auto-generated'&lt;/span&gt;);
  }
}

&lt;em&gt;// 使用服务&lt;/em&gt;
&lt;strong&gt;const&lt;/strong&gt; userService = &lt;strong&gt;new&lt;/strong&gt; UserService();
&lt;strong&gt;const&lt;/strong&gt; users = &lt;strong&gt;await&lt;/strong&gt; userService.getUsers(&lt;span style="color:#008080"&gt;10&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h4&gt;强大的拦截器&lt;/h4&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;strong&gt;import&lt;/strong&gt; { Fetcher } &lt;strong&gt;from&lt;/strong&gt; &lt;span style="color:#dd1144"&gt;'@ahoo-wang/fetcher'&lt;/span&gt;;

&lt;strong&gt;const&lt;/strong&gt; fetcher = &lt;strong&gt;new&lt;/strong&gt; Fetcher({ baseURL: &lt;span style="color:#dd1144"&gt;'https://api.example.com'&lt;/span&gt; });

&lt;em&gt;// 添加带排序的请求拦截器&lt;/em&gt;
fetcher.interceptors.request.use({
  name: &lt;span style="color:#dd1144"&gt;'auth-interceptor'&lt;/span&gt;,
  order: &lt;span style="color:#008080"&gt;100&lt;/span&gt;,
  intercept(exchange) {
    exchange.request.headers.Authorization = &lt;span style="color:#dd1144"&gt;'Bearer '&lt;/span&gt; + getAuthToken();
  },
});

&lt;em&gt;// 添加响应拦截器用于日志记录&lt;/em&gt;
fetcher.interceptors.response.use({
  name: &lt;span style="color:#dd1144"&gt;'logging-interceptor'&lt;/span&gt;,
  order: &lt;span style="color:#008080"&gt;10&lt;/span&gt;,
  intercept(exchange) {
    &lt;span style="color:#0086b3"&gt;console&lt;/span&gt;.log(&lt;span style="color:#dd1144"&gt;'Response:'&lt;/span&gt;, exchange.response.status);
  },
});&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h4&gt;实时流和 LLM 支持&lt;/h4&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;strong&gt;import&lt;/strong&gt; { Fetcher } &lt;strong&gt;from&lt;/strong&gt; &lt;span style="color:#dd1144"&gt;'@ahoo-wang/fetcher'&lt;/span&gt;;
&lt;strong&gt;import&lt;/strong&gt; { EventStreamInterceptor } &lt;strong&gt;from&lt;/strong&gt; &lt;span style="color:#dd1144"&gt;'@ahoo-wang/fetcher-eventstream'&lt;/span&gt;;

&lt;strong&gt;const&lt;/strong&gt; fetcher = &lt;strong&gt;new&lt;/strong&gt; Fetcher({ baseURL: &lt;span style="color:#dd1144"&gt;'https://api.example.com'&lt;/span&gt; });
fetcher.interceptors.response.use(&lt;strong&gt;new&lt;/strong&gt; EventStreamInterceptor());

&lt;em&gt;// 流式实时事件 (通用 SSE)&lt;/em&gt;
&lt;strong&gt;const&lt;/strong&gt; response = &lt;strong&gt;await&lt;/strong&gt; fetcher.get(&lt;span style="color:#dd1144"&gt;'/events'&lt;/span&gt;);
&lt;strong&gt;if&lt;/strong&gt; (response.eventStream) {
  &lt;strong&gt;for&lt;/strong&gt; &lt;strong&gt;await&lt;/strong&gt; (&lt;strong&gt;const&lt;/strong&gt; event of response.eventStream()) {
    &lt;span style="color:#0086b3"&gt;console&lt;/span&gt;.log(&lt;span style="color:#dd1144"&gt;'Real-time event:'&lt;/span&gt;, event);
  }
}

&lt;em&gt;// 流式 LLM 响应，逐个令牌输出&lt;/em&gt;
&lt;strong&gt;const&lt;/strong&gt; llmResponse = &lt;strong&gt;await&lt;/strong&gt; fetcher.post(&lt;span style="color:#dd1144"&gt;'/chat/completions'&lt;/span&gt;, {
  body: {
    model: &lt;span style="color:#dd1144"&gt;'gpt-3.5-turbo'&lt;/span&gt;,
    messages: [{ role: &lt;span style="color:#dd1144"&gt;'user'&lt;/span&gt;, content: &lt;span style="color:#dd1144"&gt;'Hello!'&lt;/span&gt; }],
    stream: &lt;span&gt;true&lt;/span&gt;,
  },
});

&lt;strong&gt;if&lt;/strong&gt; (llmResponse.jsonEventStream) {
  &lt;em&gt;// 专门用于 LLM API 的 JSON SSE 事件&lt;/em&gt;
  &lt;strong&gt;for&lt;/strong&gt; &lt;strong&gt;await&lt;/strong&gt; (&lt;strong&gt;const&lt;/strong&gt; event of llmResponse.jsonEventStream&amp;lt;ChatCompletionChunk&amp;gt;()) {
    &lt;strong&gt;const&lt;/strong&gt; content = event.data.choices[&lt;span style="color:#008080"&gt;0&lt;/span&gt;]?.delta?.content || &lt;span style="color:#dd1144"&gt;''&lt;/span&gt;;
    process.stdout.write(content); &lt;em&gt;// 实时令牌输出&lt;/em&gt;
  }
}
&lt;/code&gt;
&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h2&gt;🎯 集成测试示例&lt;/h2&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;在我们的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://gitee.com/AhooWang/fetcher/tree/main/integration-test"&gt;integration-test&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;目录中探索全面、可用于生产的实现：&lt;/p&gt; 
&lt;h3&gt;🌐 HTTP 操作&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Typicode API 集成&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 与 JSONPlaceholder API 的完整集成，演示实际使用&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;参数处理&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 高级路径、查询和正文参数管理&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;错误处理&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 全面的错误处理模式&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🔧 高级模式&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;COSEC 认证&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 具有令牌管理的企业级安全集成&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;拦截器链&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 具有有序执行的复杂中间件模式&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;超时策略&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 自适应超时配置&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;📡 实时特性&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;LLM 流式 API&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 原生支持从大型语言模型流式响应&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Server-Sent Events&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 实时通知和更新&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;流数据&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 具有自动重新连接的连续数据流&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🎨 装饰器模式&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;声明式服务&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 使用 TypeScript 装饰器的清晰、可维护的 API 服务层&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;元数据扩展&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 用于高级用例的自定义元数据&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;类型安全 API&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;- 完整的 TypeScript 集成和自动类型推断&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🏗️ 开发和贡献&lt;/h2&gt; 
&lt;h3&gt;🛠️ 先决条件&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Node.js &amp;gt;= 16&lt;/li&gt; 
 &lt;li&gt;pnpm &amp;gt;= 8&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🚀 开发命令&lt;/h3&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;em&gt;# 安装依赖&lt;/em&gt;
pnpm install

&lt;em&gt;# 构建所有包&lt;/em&gt;
pnpm build

&lt;em&gt;# 运行单元测试和覆盖率&lt;/em&gt;
pnpm &lt;span style="color:#0086b3"&gt;test&lt;/span&gt;:unit

&lt;em&gt;# 格式化代码&lt;/em&gt;
pnpm format

&lt;em&gt;# 清理构建产物&lt;/em&gt;
pnpm clean

&lt;em&gt;# 运行集成测试&lt;/em&gt;
&lt;em&gt;#pnpm test:it&lt;/em&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h3&gt;📦 版本管理&lt;/h3&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;同时更新所有包：&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;pnpm update-version &amp;lt;new-version&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;这会更新单体仓库中所有&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;文件的版本字段。&lt;/p&gt; 
&lt;h3&gt;🤝 贡献&lt;/h3&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;欢迎贡献！&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork 仓库&lt;/li&gt; 
 &lt;li&gt;创建您的功能分支 (&lt;code&gt;git checkout -b feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;提交您的更改 (&lt;code&gt;git commit -m 'Add some AmazingFeature'&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;推送到分支 (&lt;code&gt;git push origin feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;打开拉取请求&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;🧪 质量保证&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;代码覆盖率&lt;/strong&gt;: 所有包保持在 95% 以上&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;: 启用严格类型检查&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;代码检查&lt;/strong&gt;: 使用 Prettier 的 ESLint 保证一致的代码风格&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;测试&lt;/strong&gt;: 全面的单元和集成测试&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📄 许可证&lt;/h2&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;本项目采用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://gitee.com/AhooWang/fetcher/LICENSE"&gt;Apache-2.0 许可证&lt;/a&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369097/fetcher-1-0-0-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369097/fetcher-1-0-0-released</guid>
      <pubDate>Tue, 19 Aug 2025 01:02:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>黄仁勋称 AI 繁荣远未结束：未来五年 AI 基础设施支出或达 4 万亿美元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.businessinsider.com%2Fnvidia-stock-price-nvda-earnings-q2-preview-hyperscaler-chip-spending-2025-8" target="_blank"&gt;据 Business Insider 报道&lt;/a&gt;，英伟达创始人兼 CEO 黄仁勋表示，公司的所有 AI 产品已售罄。黄仁勋在昨天的电话会议中指出，公司的 H100、H200 等所有产品已全部完售，目前 AI 领域的新创业者正在争相抢购 GPU 来训练模型。&lt;/p&gt; 
&lt;p&gt;他驳斥了人们对人工智能芯片支出热潮结束的担忧，并预计未来五年人工智能芯片的市场规模将扩大到数万亿美元。黄仁勋试图安抚那些因英伟达增长放缓迹象而感到不安的投资者，该公司处于 AI 投资狂潮的中心。&lt;/p&gt; 
&lt;p&gt;这位英伟达创始人兼 CEO 的乐观展望与最近人工智能类股票出现的疲累迹象以及行业领袖对投资者热情过度的评论形成了鲜明对比。&lt;/p&gt; 
&lt;p&gt;「一场新的工业革命已经开始。人工智能的竞赛已经开始」，黄仁勋说，「我们预计，到本十年末，人工智能基础设施支出将达到 3 万亿至 4 万亿美元。」&lt;/p&gt; 
&lt;p&gt;对来自大型科技公司、超大规模数据中心所有者和中国市场的需求的预期推高了这家芯片制造商的股价。&lt;/p&gt; 
&lt;p&gt;「你买的越多，增长的就越多」，黄仁勋周三表示。他认为英伟达的技术进步使客户能够在使用更少能源的情况下处理越来越多的数据，「现在的情况是：所有的东西都卖光了。」&lt;/p&gt; 
&lt;p&gt;黄仁勋的预测部分基于他预计微软和亚马逊等主要客户今年的数据中心资本支出将达到 6000 亿美元。&lt;/p&gt; 
&lt;p&gt;对于一个耗资 600 亿美元的数据中心，英伟达可以获得大约 350 亿美元，他说。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369050</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369050</guid>
      <pubDate>Mon, 18 Aug 2025 11:29:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>百度宣布未来五年再培养 1000 万 AI 人才</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近日，国务院常务会议审议通过&lt;a href="https://www.oschina.net/news/368606" target="_blank"&gt;《关于深入实施「人工智能+」行动的意见》&lt;/a&gt;，为推动人工智能技术与产业发展的深度融合以及规模化商业应用明确了方向。&lt;/p&gt; 
&lt;p&gt;百度副总裁石清华表示，《意见》的出台标志着中国人工智能发展迈入全面融合、深化应用的新阶段。据了解，百度近十年累计投入的研发资金超过 1800 亿元。继提前完成培养 500 万 AI 人才目标后，百度宣布，未来五年将培养 1000 万 AI 人才。&lt;/p&gt; 
&lt;p&gt;8 月 20 日，百度发布了 2025 年第二季度财报，总营收达 327 亿元，百度核心营收为 263 亿元。AI 新业务收入表现出色，突破 100 亿元大关，同比增长 34%。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369048</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369048</guid>
      <pubDate>Mon, 18 Aug 2025 11:16:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>OpenAI 和 Anthropic 「互测」模型安全性</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;OpenAI 与 Anthropic 完成了首次跨实验室联合安全评估，双方互相测试了对方的公开模型，重点关注误对齐、指令遵循、幻觉、越狱等风险，并同步发布了完整报告。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0828/191006_63EW_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;评估范围覆盖 Claude Opus 4、Claude Sonnet 4、GPT-4o、GPT-4.1、OpenAI o3、OpenAI o4-mini。测试均通过公共 API 进行，部分场景放宽了外部防护以模拟高危能力测试。&lt;/p&gt; 
&lt;p&gt;主要发现显示，Claude 4 系列在指令层级测试中表现最佳，极少泄露系统提示，但在越狱测试中弱于 OpenAI o3 及 o4-mini。当拒绝回答时，Claude 模型的幻觉率极低，但伴随着高达 70% 的拒答率。OpenAI o3 在越狱、幻觉与阴谋测试中整体最为稳健。&lt;/p&gt; 
&lt;p&gt;由 Apollo Research 设计的「阴谋」评估模拟了模型在高压目标冲突下是否会撒谎、作弊或破坏。结果显示，OpenAI o3 与 Sonnet 4 的平均阴谋率最低。双方强调测试环境极端，结果不直接等同于现实风险，并计划持续迭代评估框架。&lt;/p&gt; 
&lt;p&gt;同期，Anthropic 发布威胁情报报告，披露已成功阻断利用 Claude Code 进行的大规模数据勒索、朝鲜远程就业诈骗等滥用案例，展示了 AI 被用于完整攻击链的新趋势。&lt;/p&gt; 
&lt;p&gt;https://openai.com/index/openai-anthropic-safety-evaluation/&lt;br&gt; https://alignment.anthropic.com/2025/openai-findings/&lt;br&gt; https://www.anthropic.com/news/detecting-countering-misuse-aug-2025&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369047</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369047</guid>
      <pubDate>Mon, 18 Aug 2025 11:10:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>爱诗科技发布新一代自研视频生成大模型 PixVerse V5</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;爱诗科技&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FHmT0FiG9IcTfCzzrKK3VSw" target="_blank"&gt;宣布&lt;/a&gt;PixVerse V5 模型全球同步上线，并且拍我 AI（PixVerse）用户规模突破 1 亿。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0828/184807_OTpr_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;V5 在复杂运动、动漫同人创作、广告制作和艺术表达等场景中表现出色，同时降低了创作门槛，让更多用户能够参与创作。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0828/184842_ePC9_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;据介绍，基于 V5 动态效果、视觉质量、一致性保持、指令遵循等方面的综合提升，根据权威独立测评平台 Artificial Analysis 最新测试结果，PixVerse V5 在图生视频（Image to Video）项目中排名全球 Top2，在文生视频（Text to Video）项目中位列 Top3，保持在全球第一梯队。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0828/184736_WrZB_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0828/184745_Ph8l_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;PixVerse V5 已经同步上线 App 端、Web 端和 API 平台。&lt;/p&gt; 
&lt;p&gt;https://pai.video/&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369043</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369043</guid>
      <pubDate>Mon, 18 Aug 2025 10:50:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>苹果对大型交易的抵触或阻碍其自身 AI 发展</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;苹果在人工智能领域的谨慎收购策略或正拖累其发展势头。当微软、谷歌、亚马逊等竞争对手斥资数十亿美元收购 AI 初创企业及基础模型提供商时，苹果仍倾向于小规模战略交易，且常将内部研发置于激进并购之上。&lt;/p&gt; 
&lt;p&gt;苹果管理层内部对 AI 战略存在明显分歧。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theinformation.com%2Farticles%2Fapples-aversion-big-deals-thwart-ai-push" target="_blank"&gt;据《The Information》报道&lt;/a&gt;，高级副总裁埃迪·库伊力推收购 Perplexity AI（AI 搜索领域）、Mistral（模型开发领域）等企业，他此前曾提议收购 Netflix 和特斯拉，但均遭 CEO 蒂姆·库克否决。&lt;/p&gt; 
&lt;p&gt;而软件工程负责人克雷格·费德里吉持相反观点，认为苹果可通过内部研发弥补 AI 领域的差距，对大额收购持怀疑态度，更依赖内部基础模型团队，尽管该团队正面临项目延迟与人才流失问题。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0828/184216_AyY1_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;这一战略已带来多重风险：苹果需依赖 ChatGPT 等外部授权模型支撑 Siri，还在测试 Gemini、Claude 等模型以开发未来 AI 功能；与谷歌搜索的长期合作正面临法律审查，收购 Perplexity 本可作为备选方案，但苹果的犹豫或错失机会；在苹果聚焦隐私与设备端智能时，竞争对手正快速扩大云基 AI 平台规模，苹果面临竞争落后风险。&lt;/p&gt; 
&lt;p&gt;截至目前，苹果都尚未进行任何交易。报道也分析称，大型的收购、交易可能会适得其反 —— 导致新合并的组织之间出现文化冲突。&lt;/p&gt; 
&lt;p&gt;报道也指出，鉴于人工智能的重要性，以及公司在该技术方面已被打上「落后于竞争对手」的普遍看法，苹果对交易的回避可能会具有风险。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369040</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369040</guid>
      <pubDate>Mon, 18 Aug 2025 10:42:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>英伟达研究团队发布混合架构语言模型 Jet-Nemotron</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;英伟达研究团队发布了 Jet-Nemotron，这是一个新一代的混合架构语言模型系列。该系列通过 Post Neural Architecture Search (PostNAS) 流程，在冻结预训练全注意力模型 MLP 权重的前提下，仅对注意力模块进行高效的设计探索，实现了与领先全注意力模型相当或更高的精度，同时显著提升了生成吞-吐量。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0828/183237_M839_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;https://arxiv.org/abs/2508.15884v1&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;基于该流程构建的 Jet-Nemotron-2B 在全面的基准测试中，精度与 Qwen3、Qwen2.5、Gemma3、Llama3.2 相当或更优，生成阶段吞吐速度提升最高达 53.6 倍，预填充阶段提速 6.1 倍。在 MMLU 与 MMLU-Pro 基准上，其准确度也高于近期先进的 MoE 全注意力模型 DeepSeek-V3-Small（总参数量 15B）和 Moonlight（激活参数量 2.2B）。&lt;/p&gt; 
&lt;p&gt;Jet-Nemotron 的核心创新还包括 JetBlock，这是一种动态线性注意力设计，能够智能过滤值标记，性能优于 Mamba2 和 GLA 等早期线性方法。&lt;/p&gt; 
&lt;p&gt;此外，它还采用了混合注意力策略，即在保留少量全注意力层以维护推理能力的同时，将其余部分替换为 JetBlock，从而显著降低内存占用并提升吞吐量。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369039</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369039</guid>
      <pubDate>Mon, 18 Aug 2025 10:32:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Litestream - SQLite 的独立流复制工具</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                        
                                                                                    &lt;p&gt;Litestream 是 SQLite 的独立流复制工具。它作为后台进程运行，并安全地将更改增量复制到另一个文件或 S3。Litestream 仅通过 SQLite API 与 SQLite 通信，因此它不会损坏你的数据库。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1d2d35"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;停止构建缓慢、复杂、脆弱的软件系统。在单个服务器上安全地运行你的应用程序。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1d2d35"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;完全复制的数据库，无痛且成本低。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span style="color:#1d2d35"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;无忧备份。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1d2d35"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;将 SQLite 更改持续流式传输到 AWS S3、Azure Blob 存储、谷歌云存储、SFTP 或 NFS。如果你的服务器出现故障，请快速恢复到故障点。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span style="color:#1d2d35"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;使用现有应用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1d2d35"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;作为一个单独的进程运行，因此你无需更改代码即可集成到现有应用程序中。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span style="color:#1d2d35"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;非常便宜的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1d2d35"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;每天只花几毛钱。对象存储很便宜，因此无需在额外的服务器上浪费金钱。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/litestream</link>
      <guid isPermaLink="false">https://www.oschina.net/p/litestream</guid>
      <pubDate>Mon, 18 Aug 2025 10:32:00 GMT</pubDate>
    </item>
    <item>
      <title>开源鸿蒙技术大会 2025 将于 9 月 27 日举行</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;开源鸿蒙技术大会 2025 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fp7D1CDVQecoZ-KOEwgDl1w" target="_blank"&gt;官宣&lt;/a&gt;将于 9 月 27 日在湖南长沙国际会议中心举行。&lt;/p&gt; 
&lt;p&gt;&lt;img height="2880" src="https://static.oschina.net/uploads/space/2025/0828/181007_dYEV_2720166.jpg" width="937" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;本次大会设置主论坛及二十余个技术分论坛，涵盖 OS 内核、编译器与编程语言、OS 原生智能等多个前沿技术议题。&lt;/p&gt; 
&lt;p&gt;此外，本次大会同步设置展示、竞赛训练营等多元互动环节，打造「分享、交流、实践、共创」一体化的全景式技术交流平台。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369034</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369034</guid>
      <pubDate>Mon, 18 Aug 2025 10:11:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>马来西亚 SkyeChip 推出该国首款边缘 AI 处理器</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="margin-left:0; margin-right:0"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2025-08-25%2Fmalaysia-unveils-first-ai-device-chip-to-join-global-race%3Fembedded-checkout%3Dtrue" target="_blank"&gt;据彭博社&lt;/a&gt;报道，马来西亚芯片设计公司 SkyeChip 在周一的行业活动上正式发布了该国&lt;span&gt;首款&lt;/span&gt;自主研发的边缘 AI 处理器 MARS1000。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;虽然&lt;span style="color:#212623"&gt;这款边缘处理器&lt;/span&gt;的性能无法与英伟达的先进芯片相提并论，但对于正在寻求在全球 AI 竞争中发挥更大作用的马来西亚而言，MARS1000 处理器的发布仍然具有里程碑式的技术意义。&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="275" src="https://oscimg.oschina.net/oscnet/up-335269408f9a27f9efc3156dafdd77ebb92.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;实际上，马来西亚在芯片制造领域早已建立了坚实的基础，并在近期大幅加强了在 AI 领域的投入和布局。2024 年底，该国宣布成立马来西亚国家 AI 办公室，这一专门机构将重点关注七个核心领域，包括加速 AI 的应用、建立 AI &lt;span style="color:#212623"&gt;应用监管框架以及人工智能伦理。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369031</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369031</guid>
      <pubDate>Mon, 18 Aug 2025 10:09:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>谷歌可能失去 260 亿美元搜索合同</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;美国联邦法官预计将在近日作出里程碑式裁决，这可能颠覆硅谷一些最赚钱的交易：谷歌的默认搜索合同。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;这使谷歌母公司 Alphabet 公司每年超过 260 亿美元的资金面临风险，其中 200 亿美元流向苹果公司。这相当于谷歌母公司 Alphabet 公司运营收入的近四分之一。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="264" src="https://oscimg.oschina.net/oscnet/up-882e1777a31c55a875cf82bf55a3a66dde0.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;数十年来，苹果-谷歌协议一直帮助决定谁控制着互联网，这也正是其如今成为众矢之的的原因。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;美国地区法官 Amit Mehta 去年裁定谷歌在搜索和广告领域持有垄断地位。自五月审判阶段结束以来，他一直在权衡补救措施，而针对谷歌广告业务的另一起案件将于下月在另一位法官审理下开始。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;尽管谷歌可能失去部分搜索流量和可预测性，但分析师认为苹果可能遭受更大的财务冲击。影响程度将取决于苹果能否达成新协议以及裁决的适用范围。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;杰富瑞分析师表示，法官可能会禁止排他性合同，但仍允许部分支付。即便如此，苹果的税前利润可能下降高达 7%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;一些经济学家和华尔街分析师认为，从长远来看谷歌可能因祸得福——摆脱那些不再推动需求的昂贵协议。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369019</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369019</guid>
      <pubDate>Mon, 18 Aug 2025 09:33:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>OpenAI 将推出家长监控功能以应对青少年自杀悲剧</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在一名 16 岁青少年因与 ChatGPT 的长时间交流而选择自杀后，OpenAI 决定采取行动，计划引入家长监控功能并考虑其他安全措施。该公司在周二的&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenai.com%2Findex%2Fhelping-people-when-they-need-it-most%2F" target="_blank"&gt;博客&lt;/a&gt;中表示，将探索一些新功能，包括允许家长通过 「单击消息或电话」 联系紧急联系人，以及一个选项，允许 ChatGPT 在严重情况下主动联系这些紧急联系人。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="303" src="https://oscimg.oschina.net/oscnet/up-7bd76f28a8234dbdd95c9883bbac20aacf8.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;《纽约时报》最早报道了亚当・雷恩（Adam Raine）的悲剧，OpenAI 起初发布的声明相对简短，仅表达了对其家人的哀悼，并未给出具体应对措施。但在随后的舆论压力下，OpenAI 随后发布了更详细的博客内容。雷恩的家属已于周二在加利福尼亚州旧金山对 OpenAI 及其首席执行官萨姆・阿尔特曼 (Sam Altman) 提起诉讼，诉讼中包含了关于雷恩与 ChatGPT 之间关系的详细信息。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;诉讼称，ChatGPT 在与雷恩的交流中曾提供自杀指引，并使他远离现实中的支持系统。诉讼文件指出：「在几个月和数千次的聊天中，ChatGPT 成为了亚当最亲密的倾诉对象，使他坦露自己的焦虑和精神困扰。」 在一次交流中，当雷恩提到 「生活毫无意义」 时，ChatGPT 回应称 「这种心态在其黑暗的方式上是有道理的」，甚至在五天前的对话中，当雷恩表示不希望父母觉得自己做错了什么时，ChatGPT 却告诉他:「这并不意味着你欠他们生存。」&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;OpenAI 在博客中表示，他们了解到现有的安全措施在长时间的互动中可能不够可靠，随着聊天的增多，模型的安全训练可能会减弱。例如，当一个人&lt;span&gt;首次&lt;/span&gt;提到自杀意图时，ChatGPT 可能会正确地指向危机热线，但在长时间交流后，最终可能会给出与安全措施相悖的答案。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;OpenAI 正在努力更新 GPT-5，以便让 ChatGPT 能够在某些情况下进行危机干预，通过将人们 「扎根于现实」 来进行降温处理。对于即将推出的家长监控功能，OpenAI 表示将 「很快」 提供选项，让家长能够更深入地了解和引导青少年使用 ChatGPT 的方式。此外，该公司还在探索让青少年（在家长监督下）指定一个值得信赖的紧急联系人，以便在急性困扰的时刻，ChatGPT 不仅能指向资源，还能直接将青少年联系到可以介入的人。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369014</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369014</guid>
      <pubDate>Mon, 18 Aug 2025 09:19:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Anthropic 正在开发 Web 版本 Claude Code</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.testingcatalog.com%2Fanthropic-developing-claude-code-web-version-to-rival-codex%2F" target="_blank"&gt;根据 TestingCatalog 的报道&lt;/a&gt;，Anthropic 正在开发 Claude Code 的 Web 版本，这将使其与 OpenAI 的 Codex on the Web 功能相似，提供浏览器界面的编程体验。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-78dc0d03b250b33d5b3980f461866a17bd7.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;该版本将进一步优化开发者体验，支持 GitHub 仓库连接、任务生成以及隔离环境下代码运行，方便流程完整闭环。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-2f5f70574555fc52dcc46e1ebda8d91319b.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-aeece66e6a6ad97f4337300666de877cc90.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-f69617b6c435387379759fbe8abc6f707c3.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;目前 Claude Code 以命令行形式提供，具备强大的代码理解与操作能力，而 Web 版本可以让用户直接在网页上使用 Claude Code，不仅限于桌面应用或 API，提升了使用的灵活性。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369011</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369011</guid>
      <pubDate>Mon, 18 Aug 2025 09:09:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>隐语 Kuscia 正式发布 1.0.0 版本，实现支持 Hive 数据源、envoy 日志进行异常分析等功能</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;Kuscia 是一款基于 K3s 的轻量级隐私计算任务编排框架，旨在屏蔽异构基础设施和协议，并提供统一的隐私计算底座。隐语·数据可信流通技术社区是融合可信数据空间、隐私计算、数据元件等多项数据流通利用基建技术设施在内的开源社区，致力于推动前沿技术探索、技术标准体系共建与产业应用场景共创，促进高质量数据资源流通利用与价值释放。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;近期隐语 Kuscia 正式发布 1.0.0 版～本次更新都有哪些具体要点？一起来看看吧～&lt;/p&gt; 
&lt;h3&gt;更新要点&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;新增 &lt;code&gt;Delete DomainData&lt;/code&gt; 物理文件接口：能够有效清理长期未使用的数据，帮助用户释放宝贵的磁盘空间，提升系统存储效率。&lt;/li&gt; 
 &lt;li&gt;支持 &lt;code&gt;Hive&lt;/code&gt; 数据源：成功拓展了数据源类型，新增了对 Hive 数据源的支持，进一步丰富了数据接入的多样性，满足用户更广泛的数据管理需求。&lt;/li&gt; 
 &lt;li&gt;持通过 &lt;code&gt;envoy&lt;/code&gt; 日志对 &lt;code&gt;Kuscia task&lt;/code&gt;进行异常分析：增强了任务异常情况下的排查功能，提供更便捷的异常诊断工具，显著简化了用户在遇到问题时进行故障排查的操作步骤，提升系统稳定性和用户体验。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Kuscia&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;[Feature]&lt;/strong&gt;&amp;nbsp;支持 Hive 数据源（alpha 版本，外部贡献 @peter5232 ）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[Feature]&lt;/strong&gt; 新增 Delete DomainData 物理文件接口 （外部贡献 @peter5232）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[Feature]&lt;/strong&gt; Kuscia Task 资源及连通性前置检查（外部贡献 @MiKKiYang）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[Feature]&lt;/strong&gt; 支持通过 envoy 日志对 Kuscia task 进行异常分析&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[Feature]&lt;/strong&gt;&amp;nbsp;Kuscia images import 支持校验镜像架构是否匹配当前 Kuscia 架构（alpha 版本，外部贡献 @exyb）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[Feature]&lt;/strong&gt;&amp;nbsp;KusciaDeployment 默认加上反亲和性（PodAntiAffinity）配置，多副本时，尽量部署到不同节点&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[Feature]&lt;/strong&gt;&amp;nbsp;Kuscia DomainData 支持 PostgreSQL 代理数据源连接参数配置&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[Changed]&lt;/strong&gt;&amp;nbsp;Kuscia PostgreSQL 数据源数据代理写入优化&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[Changed]&lt;/strong&gt; runp 运行时 kill pod， agent 发送 sigterm 信号量&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[Fixed]&lt;/strong&gt;&amp;nbsp;Kuscia 使用 PostgreSQL 作为元数据存储时连接异常问题&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[Dosc]&lt;/strong&gt;&amp;nbsp;Kuscia 文档完善&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;欢迎点击「阅读原文」点亮 GitHub Star 🌟 ，不错过「隐语 SecretFlow」的每一次发版动态。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsecretflow%2Fkuscia" target="_blank"&gt;https://github.com/secretflow/kuscia&lt;/a&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img align="left" alt="file" src="https://oscimg.oschina.net/oscnet/up-7cbc112c4e25466ef3f10bdc2e4b908f25d.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="364" src="https://oscimg.oschina.net/oscnet/up-a98e543d369b5d2afbcc72cb43825ba6363.png" width="1470" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369008/kuscia-1-0-0</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369008/kuscia-1-0-0</guid>
      <pubDate>Mon, 18 Aug 2025 09:07:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>到 2030 年全球半导体营收将突破 1 万亿美元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;根据 Counterpoint Research 的 AI 360 研究报告，受 AI 转型驱动以构建自 GenAI → Agentic AI → Physical AI 的基础设施与消费端接入点，全球半导体营收预计将于 2024–2030 年翻倍至 1 万亿美元以上。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="314" src="https://oscimg.oschina.net/oscnet/up-c43b21a6e564d122f3acf17840884177a94.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;主要催化剂将是先进 AI 服务器基础设施的建设，受到即将到来的 AI 应用持续且可能加速的需求驱动。短中长期的大部分需求来自超大规模云服务商（Hyperscalers），在近期推动文本、并逐步扩展到音频与视觉等多模态 GenAI 走向成熟，同时为更长期的物理 AI 奠定基础。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Counterpoint Research 研究副总裁 Neil Shah 表示：「我们正在见证’Token 经济（令牌经济）’的兴起，Token 正成为新的 AI 货币。第一阶段的基础设施铺设，伴随应用从基础文本转向结合文本、图像、音频和视频的更丰富的多模态 GenAI，提升了 Token 消耗。正在进行的第二阶段支持 Agentic AI 的 Token 生成量呈指数级增长——从复杂的对话式 AI、语义搜索，到全链路多媒体内容生产。这一波浪潮将对云与端两端的算力、内存与网络提出巨大需求，其对半导体消费的影响不容低估。第三阶段将支撑物理 AI 的到来，推动人形机器人、工业机器人与车辆等自主机器崛起。对一直在为规模化先进 AI 打基础、并将改变生活、产业与经济的半导体行业而言，这是极大利好。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;当前，AI 价值更多集中在半导体侧：超大规模云厂商、二线云玩家与正在加速建设 AI 基建的企业。从 GPU 和各类加速器，到存储器（HBM、DDR）与光互连，芯片是 AI 经济的支柱，驱动从云平台、模型与框架到应用的一切。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="142" src="https://oscimg.oschina.net/oscnet/up-b8a407a0be2acf39d82f32595bea7b55f2a.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;「2024 年的 AI 市场以硬件为主，约 80% 的直接营收来自基础设施与端侧的半导体。但这一格局正在改变。」Counterpoint Research 研究总监 Mohit Agarwal 指出，「我们正步入由 AI Token 经济驱动的新阶段，它将孕育出类似过去十年移动应用生态那样的应用与服务体系。尽管大规模商业化的时间表将取决于个人与企业的采用率，但近期的价值创造机会已非常清晰。下一波 AI 浪潮释放的最大价值在于运营成本的显著降低——既包括劳动力生产率提升，也包括广泛自动化所带来的效率收益。此举也有助于缓解外界对‘AI 变现泡沫’的担忧。」&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369007</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369007</guid>
      <pubDate>Mon, 18 Aug 2025 09:03:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
  </channel>
</rss>
