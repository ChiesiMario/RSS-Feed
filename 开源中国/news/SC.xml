<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 简体中文</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 18 Aug 2025 08:35:58 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>2025 年 8 月中国数据库排行榜：双星竞入三甲榜，TDSQL 连跃位次升</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;p&gt;盛夏八月，数据库赛道的热度依旧不减。2025 年 8 月最新发布的&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2FdbRank%3F0818" target="_blank"&gt;《中国数据库流行度排行榜》&lt;/a&gt;如期出炉，共覆盖 175 款数据库产品。本月看点之一，是&lt;strong&gt;前三甲座次发生变动&lt;/strong&gt;，再次为国产数据库竞争格局增添悬念。&lt;/p&gt; 
&lt;p&gt;接下来，小编将带大家逐一盘点，本月排行榜前十名以及亮点数据库产品的核心表现与技术动向。&lt;/p&gt; 
&lt;h3&gt;一、金仓位次连攀升，三甲格局起新篇&lt;/h3&gt; 
&lt;p&gt;本月排行榜最大的看点集中在前三甲位置的更替。OceanBase 持续强势领跑，稳居榜首；GoldenDB 自 5 月以来实现连续两位跃升，本月成功夺得榜眼；金仓数据库凭借技术新品和生态创新，从第四位再次挺进前三。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-fb1916210931260f8002d270ad560285fea.png" alt="" referrerpolicy="no-referrer"&gt; 图 1:排行榜 1-3 位得分情况&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fwiki%2F34%3F0818" target="_blank"&gt;&lt;strong&gt;OceanBase&lt;/strong&gt;&lt;/a&gt; 以 793.36 分继续蝉联榜首，已连续五个月稳居第一。凭借强大的事务处理能力、分布式架构和高可用特性，OceanBase 广泛应用于金融、电信等关键行业，成为国产数据库的标杆产品。&lt;/p&gt; 
&lt;p&gt;近期，OceanBase 荣登 Gartner 发布的《2025 年云数据库管理系统"客户之声"》报告，凭借 4.8/5 的总体评分和 84% 的推荐率，连续两年获评"客户之选"，并跻身全球"卓越表现者"象限。该荣誉使其与 Redis、Google Cloud Spanner 等国际顶尖产品比肩，充分彰显了 OceanBase 在技术实力与客户满意度上的领先地位。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-c58fa341bbcc5e451719769c5177f66656a.png" alt="" referrerpolicy="no-referrer"&gt; &lt;em&gt;图 2:报告显示 OceanBase、PingCAP、腾讯云入选亚太区"客户之选"第一象限&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;金篆信科&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fwiki%2F51%3F0818" target="_blank"&gt;&lt;strong&gt;GoldenDB&lt;/strong&gt;&lt;/a&gt;本月以 632.16 分升至第二位，自 5 月以来已连续两次排名上升。近期，其产品在运营商与金融行业持续落地：支撑河北移动账务系统实现全面国产化，成功中标长沙银行数据库项目（金额超 1100 万元）；与广东移动联合申报的分布式改造方案，也连续第五年获评"信创典型解决方案"。&lt;/p&gt; 
&lt;p&gt;在市场和行业层面，&lt;strong&gt;GoldenDB&lt;/strong&gt; 荣登赛迪顾问《2024-2025 中国平台软件市场研究报告》分布式事务型数据库市场榜首，并被评为&lt;strong&gt;中国数据库管理系统市场领导者&lt;/strong&gt; 。同时，IDC 发布的《中国银行业本地部署分布式事务型数据库市场份额（2024）》报告显示，&lt;strong&gt;GoldenDB 蝉联银行分布式数据库本地部署市场第一，市场占比达 28.9%&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-309f3c788168fe6774ee5c85cc6e4268933.png" alt="" referrerpolicy="no-referrer"&gt; 图 3:报 2024 年中国银行业本地部署分布式数据库市场份额&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;GoldenDB 正加速向"金融级核心系统国产替代"标杆迈进&lt;/strong&gt;，展现出强劲的发展动能与战略潜力。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fwiki%2F13%3F0818" target="_blank"&gt;&lt;strong&gt;金仓数据库&lt;/strong&gt;&lt;/a&gt;得分 624.28 分，进军前三甲。近期，电科金仓围绕"融合进化，智领未来"，持续推进产品技术与生态建设：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;发布&lt;strong&gt;新一代融合数据库产品矩阵，覆盖 AI 融合、统一管控、一体机部署等多项核心能&lt;/strong&gt;力；&lt;/li&gt; 
 &lt;li&gt;"数据库平替用金仓"口号发布，实现品牌升级，强化国产替代解决方案；&lt;/li&gt; 
 &lt;li&gt;金兰组织 2.0 战略启动，成员超 700 家，生态协同持续扩大...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;这一系列动作不仅体现了金仓的产品竞争力，也折射出国产数据库加速替代进程下的生态跃升。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-4e96ec6f4442aa48354140c819c4b97c39c.png" alt="" referrerpolicy="no-referrer"&gt; &lt;em&gt;图 4:排行榜 4-10 位得分情况&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;阿里云&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fwiki%2F37%3F0818" target="_blank"&gt;&lt;strong&gt;PolarDB&lt;/strong&gt;&lt;/a&gt;本月以 589.52 分位列第四，。值得一提的是，阿里云与云和恩墨在软硬生态层面实现深度合作，联合推出 zData X for PolarDB 一体机，全面适配国产芯片（ARM/x86）和操作系统（统信、麒麟、龙蜥），实现"开箱即用"的国产一体化数据库基础设施方案。该方案不仅优化了 PolarDB 的性能与稳定性，还显著降低部署与运维成本，推动国产数据库在关键行业的规模化落地。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fwiki%2F10%3F0818" target="_blank"&gt;&lt;strong&gt;达梦数据库&lt;/strong&gt;&lt;/a&gt;以 553.14 分位列第五，排名稳定。7 月，IDC 发布《中国金融行业集中式事务型数据库市场份额 2024》报告，达梦以 13.48% 市场份额跃居国产厂商第一，稳坐金融行业集中式数据库的"龙头交椅"。此前，达梦在赛迪顾问等多份权威报告中也屡次斩获市场份额第一，进一步验证了其在银行、保险等核心系统中的技术实力与市场认可度。&lt;/p&gt; 
&lt;p&gt;南大通用 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fwiki%2F26%3F0818" target="_blank"&gt;&lt;strong&gt;GBASE&lt;/strong&gt;&lt;/a&gt; 本月以 547.37 分排名第六。南大通用数据库主力产品包括适用于 OLTP 的 GBase 8s 及适配大规模分析场景的 GBase 8a，构建了涵盖交易与分析的完整产品线。&lt;/p&gt; 
&lt;p&gt;本月，GBase 8s 助力天津地铁 4 号线北段自动售检票系统（AFC）稳定上线，同时已服务天津轨交多条线路，体现了其在高并发、关键业务场景下的可靠性和行业适应力。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fwiki%2F50%3F0818" target="_blank"&gt;&lt;strong&gt;腾讯云 TDSQL&lt;/strong&gt;&lt;/a&gt; 本月以 461.49 分排名上升两位，进入第七名。根据 IDC 发布的《2024 年中国金融行业分布式事务型数据库市场》报告，腾讯云以 21.32% 的市场份额稳居行业第一，在银行子市场更以 22.48% 占有率蝉联冠军，连续两年实现"双料第一"。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-2140824c511a7a5be32f0482eff29a33996.png" alt="" referrerpolicy="no-referrer"&gt; &lt;em&gt;图 5:2024 中国金融行业分布式事务型数据库市场主要厂商市场份额&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fwiki%2F20%3F0818" target="_blank"&gt;&lt;strong&gt;TiDB&lt;/strong&gt;&lt;/a&gt; 本月得分 388.14 分，排名保持第八位，继续在新兴趋势方向上稳扎稳打。 TiDB AgentX Hackathon 近日正式启动，鼓励全球开发者基于 TiDB Cloud 构建 AI Agent 应用。大赛聚焦 GenAI 与数据库融合方向，延续去年吸引来自 85 个国家、超 2000 名开发者参与的热度。作为兼容 HTAP（混合事务与分析处理）架构的开源数据库，TiDB 正加速拥抱 AI 发展。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fwiki%2F46%3F0818" target="_blank"&gt;&lt;strong&gt;GaussDB&lt;/strong&gt;&lt;/a&gt; 本月以 382.98 分位列第九，依托对 GaussDB 企业版、DWS 数据仓库及开源 openGauss 的全面兼容，其&lt;strong&gt;生态融合能力持续增强，适配场景不断扩展&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;在生态集成方面，NineData DevOps 平台已实现对 GaussDB 的全面对接，支持多环境统一管理；同时，最新版本的 DBdoctor 也已纳入其全生命周期运维能力，支持 Oracle RAC 模式、SQL 限流等功能，进一步提升其在混合云和企业级应用中的智能化运维水平。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fwiki%2F601%3F0818" target="_blank"&gt;&lt;strong&gt;openGauss&lt;/strong&gt;&lt;/a&gt; 本月得分 297.02 分，位列第十。7 月 11 日，其 7.0.0 创新版在 HyBench HTAP 基准测试中斩获 1713.72 分的国内最高成绩。&lt;/p&gt; 
&lt;p&gt;该版本在与鲲鹏平台的深度协同下，在线程池优化、NUMA 绑定与内存调度等关键维度实现深层调优，显著提升了高并发处理能力，为企业构建新一代数据基础设施提供了强有力的技术支撑。&lt;/p&gt; 
&lt;h3&gt;二、场景生态原生进，价值落地展风采&lt;/h3&gt; 
&lt;p&gt;此外，还有多款国产数据库凭借卓越的技术进步和应用深度实现排名提升。"&lt;strong&gt;行业场景驱动 + 社区生态 + 原生化演进&lt;/strong&gt;"三大趋势正推动国产数据库从"能力构建"向"价值落地"迈进。小编也摘选了本月表现突出的几款国产数据库点评------&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-9c4a018d0d987fe2e81ad06b9cd79d9b18b.png" alt="" referrerpolicy="no-referrer"&gt; &lt;em&gt;图 6:8 月榜单表现亮眼数据库&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;本月排名第 13 位的&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fwiki%2F87%3F0818" target="_blank"&gt;&lt;strong&gt;AnalyticDB&lt;/strong&gt;&lt;/a&gt;，&lt;strong&gt;在智能问答等场景中持续深化技术应用&lt;/strong&gt;。其 GraphRAG 技术融合知识图谱与语义检索，有效解决模糊提问与话题跳跃问题，已在家电诊断、医疗预问诊等领域成功部署。作为阿里云瑶池平台核心组件，AnalyticDB 正不断提升查询理解与推理能力。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fwiki%2F623%3F0818" target="_blank"&gt;&lt;strong&gt;KaiwuDB&lt;/strong&gt;&lt;/a&gt; 本月排名上升 2 位，展现稳定增长。针对工业物联网等高频数据场景，KaiwuDB 优化了实时数据处理和智能分析能力。同时，积极参与开源社区建设，借助&lt;strong&gt;开放原子开发者大赛等平台，汇聚社区力量&lt;/strong&gt;，促进产品与生态的同步成长。&lt;/p&gt; 
&lt;p&gt;本月排名跃升 7 位、进入前 20 的 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fwiki%2F912%3F0818" target="_blank"&gt;&lt;strong&gt;Apache IoTDB&lt;/strong&gt;&lt;/a&gt;，于 2025 时序数据库大会&lt;strong&gt;发布 2.0 版本及 Timer 3.0 大模型，集成联邦查询与智能分析能力&lt;/strong&gt;，提升工业监控、设备运维与预测建模等复杂场景的支持力度。结合清华大学研发的时序模型，IoTDB 正迈向智能时序平台的目标。&lt;/p&gt; 
&lt;p&gt;本月排名第 21 位的 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fwiki%2F6%3F08180" target="_blank"&gt;&lt;strong&gt;DolphinDB&lt;/strong&gt;&lt;/a&gt;，继续巩固其在金融领域的领先地位。其 ORCA 平台支持毫秒级流处理及统一数据建模，满足高频交易和智能投研对实时性与可靠性的高要求。DolphinDB 正通过技术创新，持续强化金融智能系统的基础架构。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fwiki%2F6509%3F0818" target="_blank"&gt;&lt;strong&gt;Easysearch&lt;/strong&gt;&lt;/a&gt;本月排名上升至第 33 位。v1.14.0 版本引入了文本嵌入模型、语义检索 API 及搜索管道机制，大幅提升向量处理效率和内存利用率。作为国产轻量级中文语义搜索引擎，Easysearch 正以低成本和强适配性，拓展问答系统与企业检索的应用边界。&lt;/p&gt; 
&lt;h3&gt;三、智能引领变革，ACDU 蓄力前行&lt;/h3&gt; 
&lt;p&gt;随着 2025 年 8 月《中国数据库流行度排行榜》的发布，国产数据库在智能化融合、生态建设和行业应用方面展现出强劲势头。智能运维与 AI 技术正成为行业共识，推动数据库管理进入新的变革阶段。&lt;/p&gt; 
&lt;p&gt;在上周刚刚落幕的广州站【&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fevent%2F935%3F0818" target="_blank"&gt;ACDU·中国行&lt;/a&gt;】活动中，我们也聚焦这一热点，汇聚了近百名数据库专家与从业者，共同探讨国产替代与智能运维的最新实践与未来趋势。活动围绕数据库升级实战展开，现场气氛热烈，嘉宾分享深入，覆盖了金融、电信、制造等多个关键行业的技术应用与智能运维创新。为方便更多技术爱好者回顾学习，活动 PPT 资料已开放下载，助力行业知识传播与交流。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;PPT 下载合辑（陆续更新中）：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Ftopic%2F659757%3F0818" target="_blank"&gt;https://www.modb.pro/topic/659757&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;图文回顾：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fdb%2F1952304613068124160%3F0818" target="_blank"&gt;https://www.modb.pro/db/1952304613068124160&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;展望未来，随着多源异构环境的普及与 AI 能力的深度融合，国产数据库将在智能化管理、风险控制及自动化运维等方面持续突破，推动数据库技术迈向更高效、更安全、更智能的新阶段。墨天轮社区也将于近期在武汉举办下一站【ACDU·中国行】活动，期待与更多行业同仁携手共进，推动国产数据库生态的繁荣与创新。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;相关阅读&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2FdbRank%3F0818" target="_blank"&gt;国产数据库流行度排行榜-墨天轮&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2FdbRank%23dataSource%3F0818" target="_blank"&gt;国产数据库流行度排名规则-墨天轮&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Ftopic%2F4704%3F0818" target="_blank"&gt;《往期国产数据库流行度排行榜解读》&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Ftopic%2F402751%3F0818" target="_blank"&gt;《中国数据库行业分析报告》往期合辑&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fdb%2F1930153792016756736%3F0818" target="_blank"&gt;2025 年 5 月国产数据库中标情况一览&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;原文链接&lt;/em&gt; ：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2Fdb%2F1953283586862362624%3F0818" target="_blank"&gt;&lt;em&gt;https://www.modb.pro/db/1953283586862362624&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;更多精彩内容尽在&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%3F0818" target="_blank"&gt;&lt;strong&gt;墨天轮数据社区&lt;/strong&gt;&lt;/a&gt;，围绕数据人的学习成长提供一站式的全面服务，持续促进数据领域的知识传播和技术创新。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4559794/blog/18688537</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4559794/blog/18688537</guid>
      <pubDate>Mon, 18 Aug 2025 08:24:54 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>苹果联合创始人 Steve Wozniak：已捐赠大部分财富</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;近日，苹果联合创始人 Steve Wozniak（史蒂夫·沃兹尼亚克）于 75 岁生日当天，在社交网站上参与讨论，回顾了自己的人生与价值观。&lt;/p&gt; 
&lt;p&gt;他在科技资讯网站 Slashdot 的评论区&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fslashdot.org%2Fcomments.pl%3Fsid%3D23765914%26cid%3D65583466" target="_blank"&gt;表示&lt;/a&gt;，自己已经把从苹果获得的所有财富都捐出去了，因为财富和权力不是他生活的目的。&lt;/p&gt; 
&lt;p&gt;他不知道自己有多少钱，但通过二十年各处演讲，财富可能达到 1000 万美元，外加几栋房子，缴的综合税大约是 55%。他还表示「自己是最幸福的人」，人生不是为了成就，而是为了幸福，幸福就是笑容减去皱眉。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0818/155838_BVcv_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;沃兹尼亚克设计的 Apple II 被认为是个人计算机的里程碑，其集成电路设计、彩色图形和易编程特性使电脑走进家庭和学校。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-805cbfb48f0506adafc41e91feeb5a6386b.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;沃兹尼亚克不仅是工程师，也是将计算机带入大众生活的重要人物。近年来，沃兹尼亚克继续探索科技前沿，尤其关注轨道碎片问题。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;他创办的太空可持续发展公司正在研发「共享航天器」，清理威胁衞星和未来任务的轨道垃圾，其方案强调协作与可扩展性。&lt;/p&gt; 
&lt;p&gt;如果沃兹尼亚克「仅仅」设计了早期个人电脑时代的奠基之作 Apple II，他依然足以成为计算机界的传奇。 &amp;nbsp;但这位与乔布斯、比尔盖茨和马斯克不同，他更关注社区、教育和幸福感，在 80 年代中期离开苹果，随后协助创立了电子前哨基金会，资助了圣何塞儿童探索博物馆，并将过去四十年投身于慈善事业、公开演讲。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366947</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366947</guid>
      <pubDate>Mon, 18 Aug 2025 08:05:54 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Meta 「超级智能实验室」将被拆分为四个专业团队</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theinformation.com%2Farticles%2Fmeta-plans-fourth-restructuring-ai-efforts-six-months" target="_blank"&gt;据 The Information 报道&lt;/a&gt;，Meta 计划在六个月内对其 AI 业务进行第四次重大重组。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0818/155254_JNkF_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Meta 新成立的「超级智能实验室」（Meta Superintelligence Labs）将被拆分为四个专业团队，其中包括一个暂时名为「TBD 实验室」的新部门，该实验室主要负责 Meta 旗舰大语言模型 Llama 最新版本的开发工作。&lt;/p&gt; 
&lt;p&gt;此外还将设立专门负责 Meta AI 助手等产品的团队、基础设施团队，以及继续从事长期研究的基础 AI 研究实验室。其中，TBD 实验室预计将配备六位负责人，这些高管全部来自 Meta 外部的新近招聘。&lt;/p&gt; 
&lt;p&gt;据悉，前 Google 员工杰克·雷将负责预训练工作，这是 AI 模型开发中的关键环节，涉及让模型从互联网和其他数据集收集的数万亿词汇中学习文本预测能力。&lt;/p&gt; 
&lt;p&gt;曾在苹果公司领导模型开发的庞若鸣将负责 TBD 实验室的基础设施建设，但这与更广泛的基础设施团队相互独立。前 OpenAI 员工余家辉则将负责多媒体项目，旨在让 AI 模型具备理解和生成文本以外内容的能力。&lt;/p&gt; 
&lt;p&gt;后训练团队则由前 OpenAI 的 Hongyu Ren 和前 Google 的 Pei Sun 共同负责。&lt;/p&gt; 
&lt;p&gt;在整体管理架构上，前 GitHub CEO 纳特·弗里德曼将继续监管超级智能实验室的产品工作，而共同创立基础 AI 研究实验室的罗伯特·弗格斯将继续领导该部门。长期担任基础设施工程副总裁的阿帕娜·拉马尼则将加入新组织，负责管理更广泛的基础设施团队。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366942</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366942</guid>
      <pubDate>Mon, 18 Aug 2025 07:53:54 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Altman：上市后或不再担任 OpenAI CEO</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;OpenAI 首席执行官萨姆・奥尔特曼（Sam Altman）在接受媒体采访时透露，他对在公司上市后继续担任 CEO 持保留态度。尽管 OpenAI 正在推进数万亿美元级的计算基础设施投资计划，奥尔特曼表示自己并不确定是否适合这一角色。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="289" src="https://oscimg.oschina.net/oscnet/up-00c90d549391f31138004181e72cc2fff73.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;奥尔特曼在采访中坦言，尽管自己主导了 OpenAI 的多项战略项目，但他自认为缺乏作为上市公司 CEO 所需的核心管理素质和市场敏感度。他特别提到，上市企业的&lt;span&gt;领导者&lt;/span&gt;需要具备应对复杂投资者关系和监管环境的能力，而这正是他所缺乏的。他表示:「我相信公司最终会走向上市，但不确定自己是否适合执掌上市后的 OpenAI。」&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;根据外媒的报道，OpenAI 在未来几年内计划投入数万亿美元以构建其计算基础设施，并探索创新的金融工具以支持公司的扩展。该战略旨在进一步巩固 OpenAI 在人工智能领域的全球领导地位。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;此外，当被问及 OpenAI 的上市可能性时，奥尔特曼承认这是一个潜在的发展路径，但仍然强调了对领导角色适配性的问题。他认为，能够胜任这一角色的人需要具备相应的管理能力和市场应对能力，而他对此感到不确定。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366943</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366943</guid>
      <pubDate>Mon, 18 Aug 2025 07:53:54 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Flutter 3.35 发布</title>
      <description/>
      <link>https://www.oschina.net/news/366938/flutter-3-35-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366938/flutter-3-35-released</guid>
      <pubDate>Mon, 18 Aug 2025 07:40:57 GMT</pubDate>
    </item>
    <item>
      <title>OpenCat，从木头到智能，一个机器生命的诞生</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#252933; text-align:justify"&gt;你可能听过 OpenCat，或者在某个视频见过它小跑的身影。今天，我想和你们聊聊，这只小小的四足机器人，是如何从我脑海中的一个模糊念头，一步步走到今天的公司化运营的。这不仅仅是一个创客项目，更像是一场漫长的、充满惊喜与挑战的造物之旅。回首这些年，有无数个挑灯夜战的夜晚，有无数次从头再来的挫败，但每一次小小的突破，都像一束光，照亮了前行的路。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-27a06295e45840dd9977d4d99fc2e34e.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-27a06295e45840dd9977d4d99fc2e34e.png" width="754" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style="color:#252933; text-align:justify"&gt;&lt;strong&gt;&lt;span style="color:#e74c3c"&gt;先插入一个广告：&lt;/span&gt;8 月 28 日，开源中国源创会（以及 IOTE 国际物联网展会）将会举办&lt;span style="color:#e74c3c"&gt;，届时 OpenCat 会在线下与大家相见，可编程机器猫将与你互动，看完本文，如果你感兴趣欢迎到活动现场玩耍！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;div style="text-align:left"&gt;
  ⏰活动时间：8 月 28 日 (周 4️⃣) 14:00 - 17:00
 &lt;/div&gt; 
 &lt;div style="text-align:left"&gt;
  🏠地点：深圳・国际会展中心 (宝安) 11 号馆・会场五
 &lt;/div&gt; 
 &lt;div style="text-align:left"&gt;
  活动详情：
  &lt;span&gt;&amp;nbsp;&lt;/span&gt;
  &lt;a href="https://www.oschina.net/event/8598019"&gt;https://www.oschina.net/event/8598019&lt;/a&gt;
 &lt;/div&gt; 
 &lt;div style="text-align:left"&gt; 
  &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="301" src="https://static.oschina.net/uploads/space/2025/0818/141219_KzV4_3820517.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:start"&gt;萌芽：当「肌肉记忆」遇上微控制器——那段树莓派与我的独行岁月&lt;/h2&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;2016 年我 28 岁，刚刚博士和硕士毕业，在收尾一个波音的专利项目，同时寻找工作，出于「技多不压身」的想法开始玩树莓派。我也是在那时看到了波士顿动力的灵活的「大狗」 ，它在视频里展现的动态平衡和敏捷，让我心潮澎湃，也让我看到了一个未来的幻影。当我用树莓派搭建起一个带探头的旋转平台时，我脑子里就升起一个简单的念头：能不能造一个平价版的、能像真动物一样灵活的小机器人？&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-4bf60ae18621356ad86c91edc2b4ae49.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-4bf60ae18621356ad86c91edc2b4ae49.png" width="690" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p style="color:#252933; text-align:center"&gt;&lt;span style="color:#7f7f7f"&gt;在我发布 OpenCat 项目之前，有人认为我的想法是不可能的&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;我不想造那种笨拙的、只会重复固定动作的玩具，而是希望能像真正的小动物一样，带着点灵气，甚至能「学习」的伙伴。这个念头在我心里生根发芽，最终凝结成了 OpenCat 的核心哲学：&lt;strong&gt;以仿生和平价的物料，通过设计巧思和算法让机器拥有有生命感&lt;/strong&gt;。仅仅过了一个月，能东张西望，四处行走的雪糕棒机器猫就在我的单间宿舍诞生了。&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-12efcc8e2d9456a4e4bb774573c8ace8.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-12efcc8e2d9456a4e4bb774573c8ace8.png" width="660" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;虽然初具雏形，但要让机器人走得自然、优美并不简单，想当然的公式只能勉强让它挪动。我基于物理和算法的第一性原理，结合观察动物视频和自己在地板上爬行，推导出了一套可调参的步态算法，并在后来和机器人专业的朋友谈起时才知道，这就是他们熟知的运动学逆解。然后，按照当时刷算法题的习惯，对这套算法进行了一系列的优化，实现更快的调用和平衡的反馈。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;这听起来有点玄乎，但其实很简单。就像我们走路、跑步，大脑不会实时计算每一步的肌肉收缩，而是调用那些早已固化的「模式」。我想，机器人也应该如此。把那些复杂的、周期性的运动模式预先存储起来，让它在需要时能瞬间调用，而不是每次都从头计算。这种「肌肉记忆」的设计，不仅让机器人的动作更流畅、更具生命感，更重要的是，它大大降低了对主控芯片实时计算能力的严苛要求，从而&lt;strong&gt;显著降低了硬件成本&lt;/strong&gt;，让平价的机器人也能拥有高级的运动能力。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;最初，OpenCat 就是一个基于树莓派的学习项目，我尝试了多进程和多线程编程，把感知、决策、运动和通信任务希望最大限度地平均分配到它的 4 个运算核心上。但树莓派这块小板子，虽然能处理复杂的图像、规划行为，但处理简单的实时性的运动任务反而不够快。所以光有「大脑」不够，还需要一个能实时控制「肌肉」的「小脑」。那时候，我一个人摸索，无数次尝试，无数次失败，才终于找到了那个平衡点——巧妙地引入了 Arduino，让它成为我们核心的「中央模式生成器」 。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;这种分层架构，就像是把机器人的「思考」和「行动」解耦了。树莓派可以专注于复杂的视觉识别、路径规划和智能决策，而无需承担实时计算每一个关节运动的繁重任务。而 Arduino 则能精确、低延迟地控制每一个舵机，确保动作的流畅和稳定。这种设计，在当时的我看来，是克服了无数技术难题后，才找到的兼顾性能与成本的「最优解」，它大大降低了技术和财务的门槛，让更多人能接触到动态四足机器人。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;经过一年的专注研发，我把所有的积蓄和精力都投入了进去，创立了 Petoi 有限责任公司。2018 年，OpenCat 的基础代码正式发布，我希望它能像智能手机的 Android 操作系统一样，成为一个开放的、人人可用的框架，鼓励更多人参与到四足机器人、物联网和人工智能的开发中来。那段日子，虽然孤独，但每当看到代码在机器上跑起来，就觉得一切都值了。它就像一块画布，等待着每一个开发者、每一个梦想家去添上自己的色彩。&lt;/p&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:start"&gt;初啼：Nybble 的木质足迹——我的第一个「孩子」与众筹的奇迹&lt;/h2&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-0d985b1be9f3f6fa5112d1dfa692295d.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-0d985b1be9f3f6fa5112d1dfa692295d.png" width="804" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;我的第一个产品化的「孩子」，是 Nybble。它就像一个粗糙却充满生命力的草图，承载了我最初的梦想。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;Nybble 的身体是用激光切割的木头拼起来的。选择木头，正是我们「平价物料」哲学的第一步。它成本低廉，易于加工，非常适合快速原型开发和早期迭代，让更多人能以可承受的价格拥有自己的机器人。看着那些木质部件在手中慢慢拼凑成一只猫的形状，那种感觉，就像是赋予了它最初的骨架，充满了仪式感。&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-3b780ae2c888f526bf2767016e10714f.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-3b780ae2c888f526bf2767016e10714f.png" width="603" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p style="color:#252933; text-align:center"&gt;&lt;span style="color:#7f7f7f"&gt;NyBoard V0&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;它的「大脑」是一块小小的 Arduino Pro Mini，和我们熟悉的 Arduino Uno 用的是同一颗 ATmega328P 芯片。别看它小（16MHz CPU, 32KB Flash, 2KB SRAM），Nybble 所有的自适应运动逻辑和 UI，都通过我刷题时练出来的奇技淫巧在这颗芯片上实现了。我给它写了一套固件，让它能持续监听来自外界的「指令」。你可以通过 Arduino IDE 的串口监视器，或者蓝牙模块，甚至外接一块树莓派，给它发号施令。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;我至今还记得，第一次给它发送「m8 30」（让第 8 个关节转 30 度）或者「kwkL」（让它向左走）时，Nybble 真的动起来了！那种激动，就像是看着自己的孩子迈出了第一步。Nybble 能够「奔跑并向用户学习」，这证明了我的「肌肉记忆」设计是可行的。它虽然简单，却为 OpenCat 的未来奠定了坚实的基础，也吸引了第一批志同道合的伙伴加入。那时候，我常常一个人在实验室里，看着它笨拙却充满希望的步伐，心里充满了对未来的憧憬。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;为了让 Nybble 真正走向大众，我需要资金来获得 NyBoard 的认证并启动大规模生产。于是，我发起了第一次众筹。2018 年 11 月 21 日，Nybble 在 Indiegogo 上成功筹集了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;136,536 美元&lt;/strong&gt;，得到了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;585 位支持者&lt;/strong&gt;的慷慨相助。这笔资金对我们来说，简直是雪中送炭，它不仅证明了我们的想法得到了认可，更让我看到了社区的力量和这个项目巨大的潜力。&lt;/p&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:start"&gt;蜕变：Bittle 的智能飞跃——从「我」到「我们」的征程与市场的认可&lt;/h2&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;Nybble 成功了，但它也教会了我很多。木质框架虽然便宜，但不够坚固；控制板虽然能用，但集成度不高。我深知，要让 OpenCat 走得更远，必须进行一次彻底的升级。于是，我开始构思 OpenCat 的下一个篇章——Bittle。&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-cdc38c254c7740acbb8139d131c7f0da.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-cdc38c254c7740acbb8139d131c7f0da.png" width="790" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;在 Bittle 的开发阶段，我从美国回到了国内，先是在柴火空间入驻了半年，解决了 Nybble 的本地化生产。疫情爆发后，我应供应商的邀请，搬去了他们东莞的工厂，他们提供免费的食宿。我不再是孤军奋战，有幸，一些志同道合的朋友加入了进来，他们被 OpenCat 的愿景所吸引，也愿意和我一起，把这个梦想变成现实。于是，我们的故事开始了。Bittle，对我们来说，是一次全面的技术飞跃，一次从「原型」到「艺术品」的蜕变，也是我们团队协作，共同克服无数困难的里程碑。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;为了将 Bittle 推向市场，我们再次选择了众筹。2020 年 10 月，Bittle 在 Kickstarter 上成功筹集了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;567,218 美元&lt;/strong&gt;，获得了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;2,052 位支持者&lt;/strong&gt;的鼎力相助。这次众筹的巨大成功，不仅为 Bittle 的量产提供了充足的资金，更重要的是，它向我们证明了，OpenCat 的理念和产品，在全球范围内都拥有广阔的市场和热情的支持者。&lt;/p&gt; 
&lt;h3 style="margin-left:0; margin-right:0; text-align:start"&gt;坚韧的骨骼与灵动的肌肉：从经验中汲取的设计智慧，赋予生命感&lt;/h3&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-0fa0e996ce00d83c7d136c5718b47e03.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-0fa0e996ce00d83c7d136c5718b47e03.png" width="594" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;首先是身体。我们放弃了木头，选择了高强度注塑塑料。这不仅仅是为了美观，更是为了让它更耐用、更抗摔。Nybble 的木头框架在多次测试中暴露出脆弱的一面，我们从这些「磨难」中吸取教训，决定用更坚固的材料。我特别喜欢它的互锁式 3D 拼图设计，螺丝用得很少，组装起来就像玩乐高，一个小时就能拼好。这种「设计巧思」不仅简化了组装，降低了用户门槛，也让它拥有了更精致的「外壳」，更接近有生命感的宠物。它甚至能承受一个成年人的踩踏而毫发无损（当然，别真的去试！）。&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-450488e1ef94621dbb3e38fbd111dbd9.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-450488e1ef94621dbb3e38fbd111dbd9.png" width="564" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;我们也为 Bittle 设计了&lt;strong&gt;弹簧加载的大腿&lt;/strong&gt;。这是个小小的巧思，却能大大延长舵机的寿命。舵机在四足机器人里是易损件，Nybble 时代我们没少为它头疼。现在，就像给关节加了减震器，缓冲了运动中的冲击，让它的步态更平稳、更自然。这种仿生设计，不仅保护了核心部件，也让 Bittle 的动作更加流畅，更具「生命感」。而且，我们还设置了一些「弱链」 。万一真的遇到极端情况，它会在这里「解体」，而不是损坏昂贵的核心部件。这些「薄弱环节」很容易重新安装或更换，成本也很低廉，这都是为了让它更「好养活」，让用户能更放心地去探索。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;驱动 Bittle 运动的，是九个 P1S 舵机。八个用于行走关节，一个用于头部平移。这些 P1S 舵机，除了速度快、控制范围广，还有一个关键的进步：它们集成了&lt;strong&gt;位置反馈&lt;/strong&gt;功能。这意味着机器人不再是‘盲目’地执行指令，它能实时‘知道’每个关节的实际位置。如果遇到障碍或者没有达到预设位置，它能立刻感知并进行调整，这对于实现更平稳、更精确、更可靠的动态运动至关重要。想象一下，它能更精准地保持平衡，甚至在不平坦的地面上也能稳健行走，这让它的动作更具‘生命力’。&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-ab8ad0088e36dbbe303b49a575fe739c.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-ab8ad0088e36dbbe303b49a575fe739c.png" width="573" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3 style="margin-left:0; margin-right:0; text-align:start"&gt;智慧的心脏：NyBoard V1 与 BiBoard 的崛起——我们对性能的极致追求与平价的平衡&lt;/h3&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;如果说 Nybble 的 Arduino Pro Mini 是个「初级大脑」，那 Bittle 的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;NyBoard V1&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;就是我们为它量身定制的「智慧心脏」。它依然基于 Atmega328P 芯片，但我们把更多功能集成到了这块定制板上。&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-9d31111bde7cee23d03e9363af05ef1a.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-9d31111bde7cee23d03e9363af05ef1a.png" width="755" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p style="color:#252933; text-align:center"&gt;&lt;span style="color:#7f7f7f"&gt;NyBoard V1&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;我们给它加了 8K 的 I2C EEPROM，专门用于存储「肌肉记忆」数据。更重要的是，我们集成了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;IMU（惯性测量单元）&lt;/strong&gt;。这就像是 Bittle 的「平衡感」，能实时感知身体的姿态、方向和加速度，这对维持它的动态平衡至关重要。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;NyBoard V1 还预留了一个 2x5 的插座，专门用于安装树莓派等上位机。这意味着，你可以轻松地给 Bittle 注入人工智能的「灵魂」，让它能进行更复杂的感知和决策。此外，还有四个 Seeed Grove 插座，这就像是给 Bittle 留下了无限的「感官扩展」接口。它的头部甚至设计成一个夹子，可以方便地夹住这些模块，实现快速的传感器集成。&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-abb7aff29aef3abee792a112124858df.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-abb7aff29aef3abee792a112124858df.png" width="568" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p style="color:#252933; text-align:center"&gt;&lt;span style="color:#7f7f7f"&gt;Bittle 连接树莓派 3 A+和相机&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;随着项目的发展，我们对主控板的性能有了更高的追求。我们深知，要实现更复杂的智能和更流畅的动作，必须有更强大的「心脏」。于是，&lt;strong&gt;BiBoard&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;系列应运而生，它标志着 OpenCat 硬件的又一次飞跃，也是我们团队攻克无数技术难关的结晶。&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-a0f711171e885f1c51ab57ed3d0183a7.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-a0f711171e885f1c51ab57ed3d0183a7.png" width="600" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p style="color:#252933; text-align:center"&gt;&lt;span style="color:#7f7f7f"&gt;BiBoard V0 ，基于 ESP32&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&lt;strong&gt;BiBoard V0&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;的出现是一个关键发展，最初作为功能性测试版本面向开发者。它基于高性能的 ESP32 芯片构建，拥有强大的 240MHz 双核 CPU，辅以 520KB SRAM 和高达 16MB 的大容量闪存。与 NyBoard 相比，计算资源的显著增加使得更复杂的算法和更大的代码库能够直接在主板上运行。BiBoard V0 的一个关键进步是集成了内置的 WiFi 和蓝牙模块，以及音频放大器和扬声器。这意味着，许多之前需要外部模块或树莓派才能实现的功能，现在可以直接在主板上完成，大大简化了硬件设置，也让机器人更加独立和响应迅速。这种集成度提升，在保证「生命感」所需复杂功能的同时，也进一步控制了整体成本，体现了「平价」的理念。&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-1c2702512bb3106076380f91e6a13119.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-1c2702512bb3106076380f91e6a13119.png" width="670" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p style="color:#252933; text-align:center"&gt;&lt;span style="color:#7f7f7f"&gt;BiBoard V1&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;BiBoard V1 最令人兴奋的特性之一，是它包含了「支持双语多词的独立智能语音识别」 。这意味着，机器人现在能更细致地理解你的语音指令，并用清晰的声音回应你，甚至无需外部模块就能实现复杂的语音交互。这背后是我们团队在语音识别算法和硬件集成上付出的巨大努力，让机器人拥有了更自然的「听」和「说」的能力，极大地增强了它的「生命感」。此外，它还支持 4 个电容式触摸板，增强了产品的互动性。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;尽管板载智能显著增强，BiBoard V1 仍明确增强了对树莓派 3A+、4 和 5 等强大外部 AI 计算平台的兼容性。这种平衡的设计策略，确保了机器人开箱即用就具备高能力，同时仍然是用于 AI 开发的灵活平台。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;以下表格对比了两代主控板的核心技术参数：&lt;/p&gt; 
&lt;table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-color:#cccccc; border-style:solid; border-width:1px; box-sizing:border-box; color:#252933; font-family:&amp;quot;Helvetica Neue&amp;quot;,helvetica,arial,&amp;quot;Heti Hei&amp;quot;,sans-serif,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:0.32px; margin-block:12px 24px; margin-bottom:16px; margin-inline:auto; min-width:100px; orphans:2; outline:none; table-layout:fixed; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:730px; word-break:break-word; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;特性&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;NyBoard V1&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;BiBoard V0 (开发者测试版)&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;BiBoard V1 (生产版)&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;控制器芯片&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;Atmega328P&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;ESP32&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;ESP32-mini&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;CPU 速度&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;16MHz&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;240MHz 双核&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;240MHz 双核&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;SRAM&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;2KB&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;520KB&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;520KB&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;闪存&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;32KB&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;高达 16MB&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;4MB&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;集成无线&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;无 (可加扩展模块)&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;WiFi/蓝牙&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;WiFi/蓝牙&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;集成音频&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;蜂鸣器&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;音频放大器/扬声器&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;高保真扬声器&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;语音识别&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;无 (可加模块)&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;扩展 Hat&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;板载&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;树莓派接口&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;2x5 插座&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;留有接口&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;2x5 插座 (支持 Pi 3A+, 4, 5)&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;可扩展插座&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;4 个，板载 Grove&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;4 个扩展板上的 Grove&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;4 个板载 Grove&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;USB 端口&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;Mini-USB&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;USB Type-C&lt;/p&gt; &lt;/td&gt; 
   &lt;td colspan="1" rowspan="1" style="border-color:#cccccc; border-style:solid; border-width:1px"&gt; &lt;p style="text-align:justify"&gt;USB Type-C&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;[13, 14]&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3 style="margin-left:0; margin-right:0; text-align:start"&gt;灵动的双眼与无限的可能：传感器的世界——让它感知我的世界&lt;/h3&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;IMU（惯性测量单元）作为所有主板迭代（包括 NyBoard V1 和随后的 BiBoard 系列）的基本组件，都集成其中 。它对于维持机器人的平衡不可或缺，尤其是在动态和复杂运动期间。它的数据被积极利用来检测机器人何时倒置，从而允许采取纠正措施，并可以微调身体角度调整和稳定性控制，让它在各种复杂动作中都能保持优雅，这无疑是赋予它「生命感」的关键一步。借助于陀螺仪的快速反馈，我们实现了机器人在单杠上的连续翻滚，从平地翻转站上天花板，以及在舵机四足机器人上全球首次后空翻和连续后空翻。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;除了核心的 IMU，我们还为 Bittle 准备了一系列丰富的「感官」扩展，让它能更全面地感知并与环境互动，真正融入我们的生活：&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-553b4b439848346949d556bd45a760b1.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-553b4b439848346949d556bd45a760b1.png" width="570" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;ul style="list-style-type:disc"&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;智能摄像头模块（MU Camera）&lt;/strong&gt;：它能利用深度学习算法识别色块、球、人体和特定卡片。所有算法都在设备上本地处理，最大限度地减少了主控制器的延迟和计算负载，让 Bittle 拥有了「眼睛」，能看懂它面前的世界。&lt;/p&gt; &lt;/li&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;Petoi AI 视觉模块&lt;/strong&gt;：作为视觉感知方面更先进的飞跃，它基于 Arm Cortex-M55 和 Ethos-U55 嵌入式视觉模块构建，Ethos-U55 是一种专用的微型 NPU，提供 64 到 512 GOP/s 的强大算力。这意味着，更复杂的机器学习推理可以直接在机器人「边缘」进行，无需依赖外部强大的电脑，让机器人的视觉感知和响应更加实时、智能，这让它的「生命感」更上一层楼。&lt;/p&gt; &lt;/li&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;超声波传感器&lt;/strong&gt;：它能像蝙蝠一样探测距离，帮助机器人避开障碍物，实现更安全的导航。&lt;/p&gt; &lt;/li&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;光线传感器&lt;/strong&gt;：让 Bittle 能感知环境光线的强弱，甚至可以实现「追光」或「避光」的行为。&lt;/p&gt; &lt;/li&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;触摸传感器&lt;/strong&gt;：当你的手指靠近它时，它能通过电容变化感知到，实现更自然的物理交互。&lt;/p&gt; &lt;/li&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;手势传感器&lt;/strong&gt;：让 Bittle 能识别你的手势，比如「向上」、「向下」、「向左」、「向右」，甚至更复杂的多方向手势，实现直观的非接触式控制。&lt;/p&gt; &lt;/li&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;PIR 运动传感器&lt;/strong&gt;：它能检测到范围内的运动，通常是人类的运动，让机器人能感知到你的到来并做出反应。&lt;/p&gt; &lt;/li&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;红外距离传感器&lt;/strong&gt;：通过反射红外光来测量距离，特别适合物体跟踪或循线等应用。&lt;/p&gt; &lt;/li&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;语音指令模块&lt;/strong&gt;：它让机器人能听懂你的声音，无需唤醒词，支持中英文，甚至可以自定义指令，让交互变得无比自然和流畅。&lt;/p&gt; &lt;/li&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;三自由度机械爪&lt;/strong&gt;：它可以接插上述扩展模块，并能实现在 1 秒内连续 3 次开合捕获物体。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;这些多样化的传感器，让 Bittle 不再只是一个执行命令的机器，它能更全面地感知世界，并以更自然的方式与我们互动，真正变得「有血有肉」。&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-19646698612d945ff1d9feea574a22f6.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-19646698612d945ff1d9feea574a22f6.png" width="350" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3 style="margin-left:0; margin-right:0; text-align:start"&gt;多维度的交互与编程：让智能触手可及——我的坚持与分享&lt;/h3&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;我们一直致力于让 OpenCat 的控制和编程变得简单而强大，满足从初学者到专业开发者的所有需求。这其中，有我最初的坚持，也有团队伙伴们共同的努力和智慧。&lt;/p&gt; 
&lt;ul style="list-style-type:disc"&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;语音指令：让它听懂你的心声&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul style="list-style-type:circle"&gt; 
   &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;我一直梦想着能和机器人像和宠物一样自然地交流。&lt;strong&gt;语音指令模块&lt;/strong&gt;就是我们实现这一梦想的关键一步。我们砍掉了唤醒词，你不用喊「嘿，Bittle」，直接说出指令它就能听懂，这让交互变得无比流畅和自然。&lt;/p&gt; &lt;/li&gt; 
   &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;它支持 40 个预设的英语和中文指令，更棒的是，你还可以录制多达 10 个自定义指令，每个最多六个音节，让你的机器人拥有独一无二的「口令「。&lt;/p&gt; &lt;/li&gt; 
   &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;在 NyBoard 时代，它通过 Grove 接口连接。但随着 BiBoard 的到来，特别是 BiBoard V1，语音识别功能已经深度集成到主板上，实现了支持双语多词的独立智能语音识别，还有 10 个可由用户录制的开放指令。这意味着，机器人能更精准地理解你的指令，并用清晰的声音回应你，甚至无需外部模块就能实现复杂的语音交互，极大地增强了它的「生命感」。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;手柄与游戏手柄：指尖的舞动&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul style="list-style-type:circle"&gt; 
   &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;除了语音，我们还提供了多种物理控制方式。比如，基于 Micro:Bit 的&lt;strong&gt;游戏手柄&lt;/strong&gt;。这个小巧的控制器集成了操纵杆和按钮，甚至还有蜂鸣器和振动马达，让你能通过指尖的舞动，实时、精准地控制 Bittle 的每一个动作。这对于教学、竞赛或者只是享受纯粹的操控乐趣来说，都是绝佳的选择。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-87cb64b071c1eb1e072284284d7408b4.jpg" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-87cb64b071c1eb1e072284284d7408b4.jpg" width="556" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;ul style="list-style-type:disc"&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;移动应用程序：掌上指挥中心&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul style="list-style-type:circle"&gt; 
   &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;为了让控制更便捷，我们开发了功能强大的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;Petoi 移动应用程序&lt;/strong&gt;。它就像你的掌上指挥中心，可以轻松完成关节校准、控制机器人执行各种姿态和步态，甚至直接在手机上进行编程。无论是 Android 还是 iOS 用户，都能通过蓝牙（BiBoard 无需加密狗）轻松连接，随时随地与你的机器人互动。你甚至可以在应用里创建自定义命令，或者从 GitHub 导入新的技能，让你的机器人不断学习新花样。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-8ef7a6c45f4f7cb9995355841aad2605.jpg" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-8ef7a6c45f4f7cb9995355841aad2605.jpg" width="540" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;ul style="list-style-type:disc"&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;桌面应用程序：专业开发者的利器&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul style="list-style-type:circle"&gt; 
   &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;对于更专业的开发者和创客，我们提供了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;Petoi 桌面应用程序&lt;/strong&gt;。它是一个功能丰富的工具集，不仅能用来上传固件、校准关节，更重要的是，它内置了&lt;strong&gt;技能合成器&lt;/strong&gt;。你可以可视化地设计机器人的动作序列，然后导出为代码，这大大简化了复杂动作的创作过程。这款应用是用 Python 和 Tkinter 编写的，而且是开源的，这意味着你可以深入了解它的实现细节，甚至根据自己的需求进行修改和扩展。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-522b1f21fc0e38c35ee671d0ec44a9ac.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-522b1f21fc0e38c35ee671d0ec44a9ac.png" width="611" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;ul style="list-style-type:disc"&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;编程积木：人人都是创造者&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul style="list-style-type:circle"&gt; 
   &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;我们坚信，编程不应该有门槛。所以，我们投入大量精力，为 OpenCat 打造了直观的&lt;strong&gt;编程积木环境&lt;/strong&gt;。&lt;/p&gt; 
    &lt;ul style="list-style-type:square"&gt; 
     &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;Petoi 编程积木&lt;/strong&gt;：这是一个基于 Scratch 的拖拽式编程环境，支持有线和蓝牙连接，最棒的是，它能生成 Python 代码，让初学者在玩乐中自然过渡到文本编程。&lt;/p&gt; &lt;/li&gt; 
     &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;Codecraft&lt;/strong&gt;：TinkerGen 为 Bittle 开发的图形化编程环境，同样提供了免费课程，让孩子们轻松学习编程。&lt;/p&gt; &lt;/li&gt; 
     &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;Mind+&lt;/strong&gt;：另一个类似 Scratch 的编程工具，可以直接对机器人硬件编程，并支持自动翻译成 Python。它甚至能通过积木读取摄像头和 IMU 数据，让图形化编程也能玩转高级功能。 这些积木环境，是我们为了让更多人，特别是孩子们，能够轻松进入机器人世界而付出的努力。它大大降低了学习门槛，培养他们的计算思维和解决问题的能力，真正实现了「人人都是创造者」的愿景，让每个人都能为自己的机器人注入「生命感」。&lt;/p&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;文本编程：深度定制与无限可能&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul style="list-style-type:circle"&gt; 
   &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;当然，对于那些渴望深度定制和探索高级应用的朋友，OpenCat 也提供了强大的文本编程接口：&lt;/p&gt; 
    &lt;ul style="list-style-type:square"&gt; 
     &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;Arduino IDE (C/C++)&lt;/strong&gt;：作为 OpenCat 固件的核心开发环境，它允许我们用 C/C++ 进行低级控制和性能优化，直接与传感器和执行器交互。我们还提供了免费的 C++ 机器人课程，帮助大家深入学习。&lt;/p&gt; &lt;/li&gt; 
     &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;Python API&lt;/strong&gt;：Python 作为机器人和 AI 领域的「胶水语言」，我们的 Python API 提供了高级控制接口，可以发送串行命令，实现多机器人连接，以及语音、视觉和深度学习等高级 AI 应用的集成。你可以用它来编排复杂的任务序列，甚至让机器人执行无限长的任务列表。&lt;/p&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;&lt;strong&gt;课程与教育资源：知识的灯塔&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul style="list-style-type:circle"&gt; 
   &lt;li style="list-style-type:unset"&gt; &lt;p style="text-align:justify"&gt;OpenCat 不仅仅是一个机器人，它更是一个教育平台。我们为此投入了大量资源，构建了一套从 K12 到研究生阶段的&lt;strong&gt;综合 STEM 和机器人课程体系&lt;/strong&gt;。无论是基于积木的入门课程，还是深入 C++ 和 Python 的高级编程，我们都提供了丰富的教程、视频和项目，甚至与科罗拉多大学博尔德分校等机构合作，将 OpenCat 引入课堂。我们希望通过这些资源，点亮更多人对机器人和人工智能的兴趣，培养未来的工程师和创造者。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:start"&gt;展望：与你同行，共创未来——我的梦想与我们的征途&lt;/h2&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
 &lt;img alt="http://oscimg.oschina.net/AiCreationDetail/up-28fa374a2755c9946fe21379500c475a.png" height="auto" src="http://oscimg.oschina.net/AiCreationDetail/up-28fa374a2755c9946fe21379500c475a.png" width="893" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;从 Nybble 的木质骨架到 Bittle 的智能身躯，OpenCat 的每一步都凝聚了我们无数的心血和汗水。这七八年走来，有孤独的探索，有团队的并肩作战，有成功的喜悦，也有无数次跌倒再爬起来的磨砺。它不再仅仅是一个机器人，它是一个平台，一个梦想的载体。它证明了，开源的力量，能够让复杂的机器人技术变得触手可及。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;如今，我们的 OpenCat 机器人已经通过&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2FPetoi.com" target="_blank"&gt;&lt;strong&gt;Petoi.com&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;官方商店&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;和 **Amazon（美国、加拿大、墨西哥站点）**&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;面向全球销售。无论是 Bittle、Bittle X 还是 Nybble Q，以及各种配件和传感器，我们都建立了稳定的生产线，确保这些经济实惠的机器人套件能送达世界各地的爱好者手中&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;[3, 37]&lt;/code&gt;。看到它们被应用于教育、研究，甚至成为家庭中的一员，我感到无比欣慰。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;我们诚挚地邀请你，造物社区的每一位成员，加入到 OpenCat 的旅程中来。无论你是代码高手，还是创意无限的设计师，亦或是刚刚踏入机器人世界的新手，你的每一次贡献，无论是代码、教程、创意，还是仅仅是分享你的使用经验，都将成为推动 OpenCat 持续发展的强大动力。因为，OpenCat 的成功，离不开每一个像你一样，对创造充满热情的人。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;未来，我们看到 OpenCat 能够集成更强大的边缘 AI 芯片，拥有更精准的视觉和更智能的决策能力；我们梦想它能实现更精细、更仿生的运动，在各种复杂地形上自由穿梭；我们期待它能连接更多奇妙的传感器，感知更丰富的世界。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;OpenCat 的故事，才刚刚开始。让我们一起，用代码和创意，继续书写这个关于机器生命、关于创造、关于分享的篇章。&lt;/p&gt; 
&lt;p style="color:#252933; text-align:justify"&gt;期待在社区里与你相遇！&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style="color:#252933; text-align:justify"&gt;&lt;strong&gt;8 月 28 日，开源中国源创会（以及 IOTE 国际物联网展会）将会举办&lt;span style="color:#e74c3c"&gt;，届时 OpenCat 会在线下与大家相见，可编程机器猫将与你互动，看完本文，如果你感兴趣欢迎到活动现场玩耍！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;div style="text-align:left"&gt;
  ⏰活动时间：8 月 28 日 (周 4️⃣) 14:00 - 17:00
 &lt;/div&gt; 
 &lt;div style="text-align:left"&gt;
  🏠地点：深圳・国际会展中心 (宝安) 11 号馆・会场五
 &lt;/div&gt; 
 &lt;div style="text-align:left"&gt;
  活动详情：
  &lt;span&gt;&amp;nbsp;&lt;/span&gt;
  &lt;a href="https://www.oschina.net/event/8598019"&gt;https://www.oschina.net/event/8598019&lt;/a&gt;
 &lt;/div&gt; 
 &lt;div style="text-align:left"&gt; 
  &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="301" src="https://static.oschina.net/uploads/space/2025/0818/141219_KzV4_3820517.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366918</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366918</guid>
      <pubDate>Mon, 18 Aug 2025 06:31:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>这一次的源创会，不会只让你坐着听讲</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;div&gt; 
 &lt;div&gt;
  这一次，我们不仅带来前沿的技术分享，还准备了丰富的互动体验环节！在现场，你不仅能聆听专家的深度演讲，还能和 
  &lt;strong&gt;机器猫、&lt;/strong&gt;
  &lt;strong&gt;机器狗&lt;/strong&gt;
  &lt;strong&gt;、&lt;/strong&gt;
  &lt;strong&gt;AI&lt;/strong&gt;
  &lt;strong&gt; 智能助手&lt;/strong&gt; 等一大波 AI 硬件设备面对面玩耍。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  ✨ 来看几个「明星选手」：
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;span style="color:#245bdb"&gt;🐾 &lt;/span&gt;
  &lt;span style="color:#245bdb"&gt;&lt;strong&gt;OpenCat 仿生四足机器人&lt;/strong&gt;&lt;/span&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0818/140749_rMVD_3820517.gif" referrerpolicy="no-referrer"&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  基于 Arduino &amp;amp; Raspberry Pi 的开源框架，从宿舍走向世界舞台的开源宠物机器人。它的灵活动作和 STEM 教育理念，让你看到「平价波士顿动力」的可能。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;span style="color:#245bdb"&gt;🐕 &lt;/span&gt;
  &lt;span style="color:#245bdb"&gt;&lt;strong&gt;灵动狗 LinkDog&lt;/strong&gt;&lt;/span&gt;
  &lt;br&gt; 
  &lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0818/141023_7bfA_3820517.gif" referrerpolicy="no-referrer"&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  通过微信小程序就能遥控的四足机器狗，能跑、能趴、还能撒娇「伸懒腰」。更妙的是，它还能接入 AI，实现语音对话与个性化动作编程。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;span style="color:#245bdb"&gt;👆 &lt;/span&gt;
  &lt;span style="color:#245bdb"&gt;&lt;strong&gt;Finger Point 动态手势交互&lt;/strong&gt;&lt;/span&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0818/141103_4bs3_3820517.gif" referrerpolicy="no-referrer"&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  基于机器视觉的手势追踪技术，挥挥手就能操作 XR、电视、会议大屏，未来的人机交互就藏在你的指尖。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;span style="color:#245bdb"&gt;🛠️ &lt;/span&gt;
  &lt;span style="color:#245bdb"&gt;&lt;strong&gt;MeowKit —— 创客的 &lt;/strong&gt;&lt;/span&gt;
  &lt;span style="color:#245bdb"&gt;&lt;strong&gt;AI&lt;/strong&gt;&lt;/span&gt;
  &lt;span style="color:#245bdb"&gt;&lt;strong&gt; 多功能工具&lt;/strong&gt;&lt;/span&gt;
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;img height="1024" src="https://static.oschina.net/uploads/space/2025/0818/141134_APVv_3820517.png" width="1448" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
  &lt;p&gt;一个开箱即用、完全开源的创客神器：AI 对话、机器学习实验、硬件 DIY、桌面互动……玩到停不下来！&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;span style="color:#245bdb"&gt;📡 &lt;/span&gt;
  &lt;span style="color:#245bdb"&gt;&lt;strong&gt;ESP32-C6 多传感器智能家居&lt;/strong&gt;&lt;/span&gt;
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;img height="716" src="https://static.oschina.net/uploads/space/2025/0818/141150_3jDq_3820517.png" width="1354" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
  二氧化碳、温湿度、雷达、气压、光照……各种传感器一体化，支持 Zigbee/WiFi，轻松接入 Home Assistant，感受真正的「万物皆可联动」。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  当然，不仅仅这几个。更惊喜的是，本次活动与 
  &lt;strong&gt;IOTE 国际&lt;/strong&gt;
  &lt;strong&gt;物联网&lt;/strong&gt;
  &lt;strong&gt;展&lt;/strong&gt; 同场举办，更多物联网项目和酷炫黑科技，等你一站式体验！
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;img height="1746" src="https://static.oschina.net/uploads/space/2025/0818/141200_t3hi_3820517.png" width="1488" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;span style="color:#e74c3c"&gt;⏰活动时间：8 月 28 日 (周 4️⃣) 14:00 - 17:00&lt;/span&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;span style="color:#e74c3c"&gt;🏠地点：深圳・国际会展中心 (宝安) 11 号馆 · 会场五&lt;/span&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  活动详情：
  &lt;a href="https://www.oschina.net/event/8598019"&gt;https://www.oschina.net/event/8598019&lt;/a&gt;
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;img height="301" src="https://static.oschina.net/uploads/space/2025/0818/141219_KzV4_3820517.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366915</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366915</guid>
      <pubDate>Mon, 18 Aug 2025 06:12:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>做好这几件事，软件公司才有可能赚钱</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;p&gt;&lt;strong&gt;这是我关于软件公司赚钱系列的第三篇文章。前面我分别写了&lt;/strong&gt;&lt;a href="https://my.oschina.net/easysoft/blog/18687330" target="_blank"&gt;&lt;span style="color:#337fe5"&gt;&lt;strong&gt;《为什么中国的软件公司不赚钱》&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;strong&gt;和&lt;/strong&gt;&lt;a href="https://my.oschina.net/easysoft/blog/18688181" target="_blank"&gt;&lt;strong&gt;&lt;span style="color:#337fe5"&gt;《在中国做软件行业如何赚钱》&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;两篇文章。&lt;/strong&gt;&lt;br&gt; &lt;br&gt; &lt;span style="background-color:#ffffff; color:#39485d"&gt;这两篇文章发布后，赢得了众多网友的共鸣，大家展开了热烈的讨论，这些讨论也给了我很多的启发。中国软件公司之所以不赚钱，是因为中国的软件公司是在非标准化的市场里面做非标准化的事。要想赚钱，就尽量选标准化的市场，并且尽可能地提高公司软件管理的标准化程度。&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="background-color:#ffffff; color:#337fe5"&gt;&lt;strong&gt;今天就这个话题再来展开聊聊，做好哪些事情，能够帮助中国软件公司赚钱呢？&lt;/strong&gt;&lt;/span&gt;&lt;span style="background-color:#ffffff; color:#39485d"&gt;关于市场定位、公司战略方面，这篇文章里面就不涉及了。篇幅有限，讲得都是一些大框的东西，更具体的实操层面的大家可以翻翻我之前写的一些文章。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span style="color:#337fe5"&gt;&lt;strong&gt;首先是要严格控制公司规模。&lt;/strong&gt;&lt;/span&gt;国外有很多规模很大的软件公司，非常赚钱，比如微软、甲骨文。他们拥有几十年的技术沉淀和市场的垄断地位，赚得是品牌和垄断的钱。但对于绝大多数的中国软件公司来讲，很难再有机会成长为像微软、甲骨文这样规模的软件公司。中国近十多年 toB 领域的投资热了一阵，拿到投资的软件公司都走上了规模扩张的道路。但人员规模扩展带来的收入增加，远远比不上人员规模扩展带来的成本增加，这些公司也因此陷入了中间规模的死亡地带。&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;所以如非必要，不要增加人员规模。&lt;/strong&gt;公司可以想办法通过流程优化、工具优化、人员提升、外部合作等方式来应对业务的增长。如果确实需要增加人员，也要采取紧缩的人员配置策略。只有严格控制公司规模，才有可能保证公司的效率，控制住运营的成本，从而提升公司的盈利水平。&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span style="color:#337fe5"&gt;&lt;strong&gt;其次是控制公司的层级。&lt;/strong&gt;&lt;/span&gt;公司层级越高，管理成本越高，沟通效率越低，响应速度越慢，竞争力越差，赚钱越不容易。在中国有很多的软件公司，规模比不上微软、甲骨文这样的规模，但公司层级与之相比却毫不逊色。一层层的管理层级下来，头衔都很亮眼，但效率没有了，盈利空间也被吃掉了。&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;所以如非必要，不要增加管理层级，尽量保持扁平化管理。&lt;/strong&gt;我比较提倡公司选择开放性办公空间，管理层和员工在一起办公，也有助于协同效率的提升。&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span style="color:#337fe5"&gt;&lt;strong&gt;第三是流程。&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;公司流程不是越松越好，也不是越严越好，应当在中间取一个度。&lt;/strong&gt;如果流程比较宽松，或者就没有明确的流程，协作主要靠开会、聊天、文档等形式。这是大部分小规模团队的现状。这种协作方式容易出错，不容易追溯，而且经验都沉淀在个人身上，不利于组织的知识传承。&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;但流程过严也不好，有很多团队上了规模之后，制定了比较严苛的流程规范，而且流程制定的目的不是为了协作效率，更多是为了管控留痕和责任共担，这样的流程会让人反感，不仅会增加大量的不必要的成本，还会严重地降低协作的效率，最终会把公司的文化推向官僚主义、形式主义，这也是要不得的。&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span style="color:#337fe5"&gt;&lt;strong&gt;第四就是工程。&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;工程实践方面我的建议是越重视越好，投入越大越好。&lt;/strong&gt;因为这是一个软件公司最终生存的根本。一大群人花了大量的时间做出的所有努力，最终就沉淀在一行行的代码里面。&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;如果不重视软件工程的话，那么代码就是屎山，是包袱，是负债，最终的结局就是团队被拖垮。相反如果团队比较重视软件工程，一直在通过各种的方法来保证代码的可维护性，譬如重构、代码评审、自动化测试等实践，这样的代码就是资产，是能够跟其他竞争对手逐渐拉开差距的竞争优势。&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span style="color:#337fe5"&gt;&lt;strong&gt;第五就是文化。&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;越开放、越尊重团队的文化，越有助于公司提高盈利水平。&lt;/strong&gt;文化不是挂在墙面上的几个词，几个字，这种叫做口号。一个团队刻在骨子里面的东西，遇到重大问题时用来做决策判断的东西，这才是文化。&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;不同的文化会直接决定一个公司的管理方式和对外发布的产品的定位、质量，也决定了产品的创新性、原创性，最终决定了产品的生命力。&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;国内的软件行业汇聚了一大批优秀的人才，能在软件行业坚守的，都是有情怀的一群人。现阶段中国的软件行业大环境如此，公司要想实现盈利，就需要付出更多的努力。&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#39485d; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span style="color:#337fe5"&gt;&lt;strong&gt;以上是我自己的一些总结和思考，与各位共勉。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/easysoft/blog/18688521</link>
      <guid isPermaLink="false">https://my.oschina.net/easysoft/blog/18688521</guid>
      <pubDate>Mon, 18 Aug 2025 05:54:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>ChatGPT 移动端收入突破 20 亿美元</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;OpenAI 的 ChatGPT 移动应用正在移动端市场创造惊人的收入神话。根据应用情报提供商 Appfigures 最新分析，自 2023 年 5 月推出以来，ChatGPT 的 iOS 和 Android 应用已在全球消费者支出中达到 20 亿美元，这一数字约为 Claude、Copilot 和 Grok 等竞争对手移动端终身消费总和的 30 倍。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;2025 年至今，ChatGPT 移动应用已创造 13.5 亿美元收入，与 2024 年同期（1-7 月）的 1.74 亿美元相比，同比增长高达 673%。该应用目前平均每月创造近 1.93 亿美元收入，远超去年同期的 2500 万美元。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;这一表现显著超越了最接近的竞争对手。排名第二的 Grok 今年迄今约创造 2560 万美元收入，仅为 ChatGPT 的 53 分之一。Grok 的平均月消费者支出约为 360 万美元，仅占 ChatGPT 的 1.9%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;这些数据表明，其他消费级聊天机器人在移动设备上要追赶 ChatGPT 的主导地位还有很长的路要走。需要注意的是，这些数字并未提供 AI 公司整体收入的完整画面，因为消费者、团队和企业还可以通过网页订阅 AI 服务，这些公司还通过 API 等其他方式创造收入。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;img height="270" src="https://oscimg.oschina.net/oscnet/up-b4bc1ff8c60f19ece93e7fe8f9d9de508b7.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;然而，这些新数据为了解应用在消费者中的受欢迎程度提供了重要窗口，反映了用户通过移动应用商店发现和付费使用这些 AI 助手的情况。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;值得注意的是，当 xAI 的 Grok 于 2023 年 11 月推出时（晚于 ChatGPT），最初并没有独立的 iOS 或 Android 应用。用户只能通过 X 平台与这款 AI 聊天机器人互动。Grok 直到 2025 年 1 月初才通过自己的 iOS 应用在移动设备上提供服务，并于 3 月 4 日登陆 Google Play。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;从单次下载消费来看，ChatGPT 的终身全球单次下载支出为 2.91 美元，而 Claude 为 2.55 美元，Grok 为 0.75 美元，Copilot 仅为 0.28 美元。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;在美国市场，ChatGPT 的单次下载支出更高，达到 10 美元，美国市场占该应用迄今总收入的 38%。德国是第二大市场，占 ChatGPT 终身总支出的 5.3%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;从下载量角度看，ChatGPT 的领先优势同样明显。该应用迄今已被全球安装约 6.9 亿次，而 Grok 仅有 3950 万次。这也为 X 平台所有者埃隆·马斯克最近关于 App Store 涉嫌偏袒 ChatGPT 在排行榜中地位的抱怨提供了更好的背景理解。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;ChatGPT 目前全球平均月下载量约为 4500 万次，比 2024 年 1-7 月的约 1600 万次增长了 180%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;2025 年至今，ChatGPT 应用已被下载 3.18 亿次，是去年同期 1.13 亿次的 2.8 倍。按安装数量计算，印度是最大市场，占终身下载量的 13.7%，而排名第二的美国占所有下载量的 10.3%。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366909</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366909</guid>
      <pubDate>Mon, 18 Aug 2025 05:52:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>多家企业盯上谷歌 Chrome，奥特曼表态 OpenAI 或考虑收购</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;OpenAI 首席执行官山姆·奥特曼近日在接受媒体采访时，披露了公司多项发展计划，其中表露对谷歌 Chrome 浏览器的收购兴趣，引发业界广泛关注。&lt;/p&gt; 
&lt;p&gt;奥特曼在采访中提及，ChatGPT 目前用户增长态势迅猛，每周触达用户已超 7 亿，较一年前规模扩大四倍，API 流量在 48 小时内翻倍，用户数量持续刷新纪录。他表示，未来 ChatGPT 的用户规模有望进一步扩大，「很快，每天都会有数十亿人在使用 ChatGPT」。&lt;/p&gt; 
&lt;p&gt;关于收购 Chrome 浏览器的话题，&lt;strong&gt;奥特曼明确表示：「如果 Chrome 真的要出售，我们应该考虑。」&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;事实上，此前已有多家科技公司加入对 Chrome 的竞逐。美国 AI 初创公司 Perplexity 已向谷歌提出 345 亿美元的收购要约，其公司估值约为 180 亿美元；美国 AI 搜索引擎 Search.com 也宣布参与，提出 350 亿美元的收购意向。不过，目前业界普遍认为谷歌同意出售的可能性较低。&lt;/p&gt; 
&lt;p&gt;值得注意的是，美国司法部正对谷歌提起反垄断诉讼，其中提出包括拆分 Chrome 浏览器在内的多项要求，这也成为科技公司关注 Chrome 的背景因素之一。&lt;/p&gt; 
&lt;p&gt;在行业判断上，奥特曼承认当前存在「AI 泡沫」，投资者对人工智能领域「过度兴奋」，但他强调，人工智能仍是「近年来最重要的技术变革」。对于公司治理，他坦言自己未必适合领导上市公司，甚至表示三年后或许会由 AI 掌管 OpenAI。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相关阅读&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/news/349444/don-t-make-google-sell-chrom" target="news"&gt;不要让谷歌出售 Chrome&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/news/346989/google-chrome-suffer-if-forced-to-sell-parisa-tabriz" target="news"&gt;谷歌认为自己是唯一能运营 Chrome 的公司，如若转手，将「万劫不复」&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366896</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366896</guid>
      <pubDate>Mon, 18 Aug 2025 04:03:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>ReiserFS 文件系统在 Linux 内核的最后残留被移除</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;去年发布的 Linux 6.13 正式移除了 ReiserFS 文件系统，但它的痕迹并没有完全清除掉。SUSE 开发者 David Sterba 在内核文档和部分工具中发现 ReiserFS 的残留后，&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flkml%2F20250813100053.1291961-1-dsterba%40suse.com%2F" target="_blank"&gt;提交补丁&lt;/a&gt;移除了这些内容。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0818/112840_DLss_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;尽管代码已删除，但&amp;nbsp;ReiserFS R5 哈希函数仍被保留，这是因为该哈希函数仍被部分内核代码所使用，因此不能完全清除。&lt;/p&gt; 
&lt;p&gt;与 ReiserFS 相关的扩展如 Reiser4 和 Reiser5 目前仍处于 out-of-tree 状态，已经多年无人维护。开发仓库三年未更新，显示这些项目已经真正走到尽头。这标志着 Hans Reiser 创造的 Linux 文件系统时代彻底结束，连文档中的最后痕迹都被清理干净了。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366884/reiserfs-documentation-cleanse</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366884/reiserfs-documentation-cleanse</guid>
      <pubDate>Mon, 18 Aug 2025 03:33:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>我国首个法律垂直大模型「小包公」发布</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;span style="color:#000000"&gt;我国首个法律领域垂直大模型「小包公法律内容大模型」于日前发布。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;该模型由华南师范大学法学院王燕玲教授团队研发，已通过国家互联网信息办公室深度合成服务算法备案，采用「先进通用大模型+专业垂直大模型」双引擎架构，深度整合 2 亿余份裁判文书、420 万余部法律法规，结合法律知识图谱和检索增强生成技术，可在全法律场景提供可溯源、可验证的精准服务。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="335" src="https://oscimg.oschina.net/oscnet/up-324a218385c3269f90403dec94cebed6441.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;王燕玲介绍，该模型具备动态学习机制，能根据实践反馈持续迭代，以法律为准绳动态干预回答准确性，目前已在广东、安徽等地司法实践中广泛应用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在非法采矿等公益诉讼案件办理中，系统可通过人物关系图谱排查涉案人员；在刑事审查环节，12 类典型案件的办案人员输入完整卷宗后，系统能自动生成分析报告与相关文书，有效提升阅卷与量刑分析效率。现场嘉宾指出，法律 AI 的普及将缓解我国法律服务资源分布不均问题——当前全国 70 万名执业律师主要集中于东部发达地区，西部部分县域无律师事务所，智能系统可成为普惠法律服务的重要补充。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在基层司法实践中，大模型的赋能效果已逐步显现。据介绍，湛江市司法局引入「小包公」智能行政复议一体化系统后，在当事人材料齐全的情况下，案件焦点识别准确率达 100%，证据识别采信准确率约 95%，文书撰写时间缩减 75%，成为全国首个在两级司法局运用司法大模型赋能行政复议工作的城市。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;安徽怀宁检察院自 2018 年开展认罪认罚精准量刑试点以来，运用该系统生成的量刑建议采纳率超过 99%；清远市人民检察院借助系统人物关系图谱，成功识别传统办案中易遗漏的涉案人员，检察官 AI 工具使用率达 100%。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366880</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366880</guid>
      <pubDate>Mon, 18 Aug 2025 03:25:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>虚引用 GC 耗时分析优化（由 1.2 降低至 0.1 秒）</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;线上应用频繁出现超时告警（超时时间 1 s）： getUiToken 接口异常状态码「-1」出现 4037 次 (失败描述:业务请求异常)，超过阈值 50，协议：http，为服务端接口。当前失败率为 0%，当前平均响应时间为 150ms，TP50 为 2ms,TP90 为 896ms，TP99 为 1024ms,TP999 为 1152ms,MAX 为 1280ms。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_2"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;环境信息&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;div&gt; 
 &lt;span style="color:#000000"&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;服务器配置为，Linux 4c8g 标配机器&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="color:#000000"&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;JVM 参数配置：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;-server -Djava.library.path=/usr/local/lib -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/export/log -Djava.awt.headless=true -Dsun.net.client.defaultConnectTimeout=60000 -Dsun.net.client.defaultReadTimeout=60000 -Djmagick.systemclassloader=no -Dnetworkaddress.cache.ttl=300 -Dsun.net.inetaddr.ttl=300 -Xms5G -Xmx5G -XX:+UseG1GC -XX:G1HeapRegionSize=4m -Xloggc:/export/log/$APP_NAME/gc_detail.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=10m -XX:MaxTenuringThreshold=15 -XX:+PrintTenuringDistribution -XX:+PrintHeapAtGC&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;div&gt; 
 &lt;span style="color:#000000"&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;接口流量情况：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//c8ebd5b4ebdc22b41187bcf663870fbd.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h1_3"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;问题排查&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;分析代码实现，getUiToken 只是简单的内存数据获取并返回，没有其他复杂操作，不存在有耗时操作&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//7d264c94f843fd53fefc04a5ec2b61cf.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;接着借助 SGM 监控平台分析下接口耗时情况，发现方法执行的耗时都处在等待中，为什么会有这多长的等待时间呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//1c5605b1f1d9d9253dc8ed6c54437413.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;业务代码很简单，只是内存级别的获取，序列化和反序列化也不可能耗时这么久， 难道是 GC 的原因 ？ 因为 JVM 之前就配置了 -Xloggc 日志输出，所以先分析下 GC 日志情况，看看 GC 是否存在异常情况（工具 gcViewer）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//a9062cc1660d6f240fa4e602a7cadd85.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;果然，光看吞吐量 99.3% 和 full gc 次数 0，感觉性能好像还不错的，但 4227 次 young gc （平均 20 多秒一次） 和 max 1.25 秒的耗时，就有点离谱，分析 GC 日志详情&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//c7163e4712619389f5446972e0f165f0.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;随机搜查了一个 GC 耗时在 1s 以上的日志，发现 1.02 s 的 gc 有 977.3 ms 是在处理 Ref Proc，为什么这个耗时会这么长 ？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;ref-proc 是对各种软弱虚引用等的处理，处理 soft、weak、phantom、final、JNI 等等引用的时间&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;具体是那种引用类型的耗时长，可以通过增加 JVM 参数 -XX:+PrintReferenceGC 打印引用 GC 类型 ，重新上线一段时间后观察 GC 日志&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//557127b6d3daf4dcb964809775d3d0d6.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;发现耗时基本都在 PhantomReference 类型的对象上，为什么会有这么多这个对象？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;PhantomReference 是什么？ 1、虚引用也称为「幽灵引用」，它是最弱的一种引用关系。 2、如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。 3、为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。 4、当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在垃圾回收后，将这个虚引用加入引用队列，在其关联的虚引用出队前，不会彻底销毁该对象。所以可以通过检查引用队列中是否有相应的虚引用来判断对象是否已经被回收了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;为了搞清楚 PhantomReference 具体都是哪些对象，我们需要 dump 堆文件查看对象的分布（内存分析工具 MAT），dump 时最好将流量摘除后操作，以免影响线上。查看直方图中的对象发现有 4340 个虚引用对象，和 GC 日志中的数量基本对的上。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//5bdbcf18eaa7f63199e2311d76f088ab.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;那为什么会有这么多 ConnectionPhantomReference 对象呢 ？ 这个东西有什么用呢 ？ 源码如下 （mysql-connector-java 版本 5.1.44）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 相关的核心逻辑&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NonRegisteringDriver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;implements&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;java.sql.Driver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;final&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;ConnectionPhantomReference, ConnectionPhantomReference&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; connectionPhantomRefs &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;ConnectionPhantomReference, ConnectionPhantomReference&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;final&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ReferenceQueue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;ConnectionImpl&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; refQueue &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ReferenceQueue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;ConnectionImpl&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;trackConnection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; newConn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionPhantomReference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; phantomRef &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionPhantomReference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionImpl&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; newConn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; refQueue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        connectionPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;put&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;phantomRef&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; phantomRef&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionImpl&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;extends&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionPropertiesImpl&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;implements&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;MySQLConnection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionImpl&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;String&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; hostToConnectTo&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; portToConnectTo&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Properties&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; info&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;String&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; databaseToConnectTo&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;String&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; url&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;SQLException&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NonRegisteringDriver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;trackConnection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通过代码发现，每次新建数据库连接 Connection 时都会向 connectionPhantomRefs 存放一个对象，那么已经使用 druid （版本：1.0.15）线程池为什么还会生成这么多新链接 ？ 接着查看项目中的数据库配置，发现数据源使用的是默认配置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;# 线程池使用的默认配置
spring:
  datasource:
    url: jdbc:mysql://xxxxxxxxx?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;allowMultiQueries=true&amp;amp;serverTimezone=GMT%2B8
    username: xxxx
    password: xxxx
    driver-class-name: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//e1d56e1b7808007139709112a2545684.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;默认配置中，线程池中的连接存活时间为 30 分钟，最小闲置线程数为 0，因此虽使用了线程池也还是会不断的创建新的链接，并增加到 connectionPhantomRefs 集合中，累计一定量之后就会影响 ref-proc 耗时。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_4"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如何解决 ？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;既然因为它累计的量大导致 gc 时长变高，那么我们分析下 connectionPhantomRefs 的作用到底是什么 ？ &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;跟进 connectionPhantomRefs 引用处理对象，发现 connectionPhantomRefs 中的元素都是被 AbandonedConnectionCleanupThread 处理的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;/**
 * This class implements a thread that is responsible for closing abandoned MySQL connections,
 * i.e., connections that are not explicitly closed. 
 * There is only one instance of this class and there is a single thread to do this task. 
 * This thread's executor is statically referenced in this same class.
 *
 * 该类实现了一个负责关闭被遗弃的 MySQL 连接的线程，即未显式关闭的连接。该类的实例只有一个，并且由单个线程执行此任务。该线程的执行器在此类中以静态方式引用。
 */&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;AbandonedConnectionCleanupThread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;implements&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Runnable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;final&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ExecutorService&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; cleanupThreadExcecutorService&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; threadRef &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        cleanupThreadExcecutorService &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Executors&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;newSingleThreadExecutor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ThreadFactory&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;newThread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Runnable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; r&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; t &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;r&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"Abandoned connection cleanup thread"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;setDaemon&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;setContextClassLoader&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;AbandonedConnectionCleanupThread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;getClassLoader&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; threadRef &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        cleanupThreadExcecutorService&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;execute&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;AbandonedConnectionCleanupThread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;run&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;try&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;checkContextClassLoaders&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;? extends ConnectionImpl&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ref &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NonRegisteringDriver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;refQueue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;remove&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;5000&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ref &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;try&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionPhantomReference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;cleanup&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NonRegisteringDriver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;connectionPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;remove&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;InterruptedException&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; e&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                threadRef &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Exception&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ex&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;// Nowhere to really log this.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;根据 com.mysql.jdbc.AbandonedConnectionCleanupThread 类注释信息，发现该类是 mysql 连接的兜底处理逻辑，负责关闭被遗弃的 MySQL 连接，主要有两种情况&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1. 未显式关闭的连接（代码遗漏）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2. 异常未处理的连接（程序崩溃/未捕获异常/网络或事务超时导致的连接失效）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_5"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;解决方案&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1. 优化 druid 连接池连接数配置 （按实际流量情况评估），增加连接存活时长到 59 分钟（&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;MySql wait_timeout 默认为 3600 秒&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;），最大限度减少新连接生成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;spring:
  datasource:
    url: jdbc:mysql://xxxxxxxxx?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;allowMultiQueries=true&amp;amp;serverTimezone=GMT%2B8
    username: xxxx
    password: xxxx
    driver-class-name: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 增加线程数
      minIdle: 4
      maxActive: 10
      initialSize: 4
      # 启动检测线程回收
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      validationQuery: select 1
      timeBetweenEvictionRunsMillis: 60000
      minEvictableIdleTimeMillis: 3540000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2. 开启 ref-proc 并行处理：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#f3f5f9; color:#0abf5b"&gt;-XX:+ParallelRefProcEnabled&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; ，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt; G1 官网建议&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;Reference Object Processing Takes Too Long Information about the time taken for processing of Reference Objects is shown in the Ref Proc and Ref Enq phases. During the Ref Proc phase, G1 updates the referents of Reference Objects according to the requirements of their particular type. In Ref Enq, G1 enqueues Reference Objects into their respective reference queue if their referents were found dead. If these phases take too long, then consider enabling parallelization of these phases by using the option &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#ff4d4f"&gt;-XX:+ParallelRefProcEnabled.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3. 由于 connectionPhantomRefs 只是作为异常情况出现的兜底处理，我们项目中使用的线程池都会自动处理资源释放的情况，不存在手动操作的情况，是不是可以定时清理这部分的内容或者不使用，目前使用最多的两种方式是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;定时任务：清理虚引用列表数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;CleanPhantomRefsSchedule&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;final&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ScheduledExecutorService&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; CLEANER_EXECUTOR &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Executors&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;newSingleThreadScheduledExecutor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;r &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; t &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;r&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"mysql-phantom-ref-cleaner"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;setDaemon&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;@PostConstruct&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;doTask&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;info&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"CleanPhantomRefsSchedule#doTask start"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;try&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Field&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; field &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NonRegisteringDriver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;getDeclaredField&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"connectionPhantomRefs"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            field&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;setAccessible&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;// 定时轮训&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            CLEANER_EXECUTOR&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;scheduleAtFixedRate&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;try&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Map&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?, ?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; connectionPhantomRefs &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Map&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?, ?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; field&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;get&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;// 这里我设置的稍微大一些，对 gc 没太大影响时不进行干预&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                   &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;connectionPhantomRefs &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; connectionPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;size&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;500&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                        connectionPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;clear&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                        log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;info&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"Cleared MySQL phantom references (count={})"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; connectionPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;size&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Exception&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; e&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;error&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"connectionPhantomRefs clear error!"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; e&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;TimeUnit&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;HOURS&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NoSuchFieldException&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; e&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;IllegalStateException&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"Failed to initialize MySQL phantom refs field"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; e&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;@PreDestroy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;shutdown&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        CLEANER_EXECUTOR&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;shutdownNow&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;升级 mysql-connector-java 版本（8.0 以上），可以通过参数 -Dcom.mysql.cj.disableAbandonedConnectionCleanup=true 禁用虚引用生成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;abandonedConnectionCleanupDisabled&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;getBoolean&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"com.mysql.cj.disableAbandonedConnectionCleanup"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;trackConnection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;MysqlConnection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; conn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NetworkResources&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; io&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;!&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;abandonedConnectionCleanupDisabled&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;···
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionFinalizerPhantomReference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;reference&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionFinalizerPhantomReference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;conn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;io&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;referenceQueue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;connectionFinalizerPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;add&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;reference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;···&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我采用的是定时任务这种方式，因为项目升级 mysql-connector-java 版本会存在兼容性问题，其次是在虚引用量比较小的情况我希望这种兜底策略依旧可以生效，所以定时任务中只有在 connectionPhantomRefs.size() &amp;gt; 500 时才会干预清理，而不是直接杜绝使用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_6"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;验证优化结果&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;代码及配置调整完成后再次上线，等待一天后，继续分析 GC 日志和堆转储文件 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//6440df82f8599d87cc53b61026e84e84.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//c58d0dbaaa585a67a28e5d7e697da2e7.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//5f41e588501b799ae57e534b121b6004.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;结论：上线后近 12 小时数据，GC 时间最大停顿时间由原先 1.25 降低至 0.1 秒，young gc 频率由原先的 20 秒一次优化到 6 分钟一次，PhantomReference 引用耗时缩减到 0.0001966 s， 持续观察几天，线上服务无超时告警且系统响应正常，优化符合预期结果。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4090830/blog/18688164</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18688164</guid>
      <pubDate>Mon, 18 Aug 2025 03:08:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>360 官宣「All in Agent」战略</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;在日前举办的 360 集团 20 周年荣耀庆典上，创始人周鸿祎发布 360 集团下一阶段的公司战略：All In Agent。&lt;/p&gt; 
&lt;p&gt;周鸿祎表示，AI 的巨大机遇就在眼前，智能体将带来个人角色和组织形态的重塑，当前正是重新出发、转向新赛道的时刻，All in Agent 就是 360 的明确路线图。周鸿祎勉励全体员工要上下同心，坚定聚焦，力争实现 「三个超级」：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;一是鼓励 360 全员建立 AI 信仰、培养 AI 素养，思考「如何用智能体放大自身价值」，全员都要学会使用、搭建、管理、监督、领导智能体，与智能体深度协同，每个人都可以把自己打造成超级个体、超级员工；&lt;/li&gt; 
 &lt;li&gt;二是要求全公司各业务线、各部门以智能体化率衡量所有业务流程、岗位职能的进化水平，打造超级团队、超级组织；&lt;/li&gt; 
 &lt;li&gt;三是用智能体重塑公司所有产品。在软件开发 3.0 时代，新产品必须以智能体为范式进行功能开发，已在运营、服务的产品，必须以智能体进行重塑。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;为适配「All in Agent」战略，360 全面升级使命、愿景与价值观：使命升级为「让 AI 世界更安全更美好」，愿景升级为「成为最安全的 AI 创新者」，核心价值观聚焦「用户为先、始终创业、持续创新、追求卓越、协作律己」五大维度。&lt;/p&gt; 
&lt;p&gt;&lt;img height="275" src="https://oscimg.oschina.net/oscnet/up-3c375902fe76b5eb714c9f20f3d280a7e19.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;同时，周鸿祎公布了公司在智能体领域的技术突破：目前纳米 AI 已实现 L3 级推理型智能体连续执行 100 步任务 0 出错、单次消耗 Token100 万、调用 100+工具，任务成功率达 98.2%。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366872</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366872</guid>
      <pubDate>Mon, 18 Aug 2025 02:58:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>2025 Gtest 全球软件测试技术峰会售票进行中，前沿技术等你解锁！</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Gtest 大会，测试人的年度盛宴！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;为促进测试技术与行业应用的深度交流，2025 年 9 月 5 日-9 月 6 日，「全球软件测试技术峰会」（简称：Gtest）将在北京市丽亭华苑酒店举办。本届峰会将聚集超 500 位来自&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;测试、质量、大模型、开源测试工具等&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;领域的行业专家、技术负责人及一线工程师，构建多元化交流与合作平台。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="312" src="https://oscimg.oschina.net/oscnet/up-c7ebd1f7f5fb6544dff1a03652ee9ed5dc7.png" width="554" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;这是一场面向全球测试领域的顶尖技术峰会，如果您关注：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;·&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;大模型与智能测试的结合模式与落地实践&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 银行、保险等典型行业测试技术的趋势与创新路径&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 证券、游戏等行业领域从业者的实战经验与方法论&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 行业标杆企业的测试技术与管理案例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 测试团队的组织与效率优化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;本次峰会将为您提供深入交流与学习的契机。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;参会您将收获&lt;/strong&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 了解软件测试领域的前沿技术应用与创新趋势&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 参考行业企业的真实业务实践案例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 建立与测试行业从业者及专家的专业联系&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 掌握软件测试行业的发展动态与方向&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;精彩议题抢先看：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="4618" src="https://oscimg.oschina.net/oscnet/up-2545d00b1641a0a012ed7449712f41ab33c.png" width="1712" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;时间：2025 年 9 月 5 日-9&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;月&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;日&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;地点：北京丽亭华苑酒店 (北京市海淀区知春路 25 号)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;席位有限，速来锁定你的年度技术盛会！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;立即购票&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gtest.net.cn%2Fbuy%2F" rel="nofollow" target="_blank"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;https://www.gtest.net.cn/buy/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4806939/blog/18688477</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4806939/blog/18688477</guid>
      <pubDate>Mon, 18 Aug 2025 02:53:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>Valkey 9.0.0-rc1 发布，Linux 基金会维护的 Redis 分支</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;Valkey 9.0-rc1 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fvalkey-io%2Fvalkey%2Freleases%2Ftag%2F9.0.0-rc1" target="_blank"&gt;已发布&lt;/a&gt;，新版本带来了显著的性能提升，尤其是在使用 SIMD 指令（AVX2、AVX-512、ARM NEON、SSE2）优化关键路径（如 &lt;code&gt;BITCOUNT&lt;/code&gt;、字符串-整数转换、&lt;code&gt;findBucket&lt;/code&gt;）方面。其新增的集群功能（如多数据库支持与 MPTCP、多功能迁移等）也为未来版本奠定了功能基础。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-7f654be54bf7014a9538ed8834ed0250832.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-e8293973af2307d31e62eb3559de25b78ea.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Valkey 9.0-rc1 亮点&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;AVX2 优化 &lt;code&gt;BITCOUNT&lt;/code&gt; 命令&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;在 1 MB 值上使用 SIMD AVX2 优化，性能提升达 &lt;strong&gt;+514%&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;在 4 KB 值上有约 &lt;strong&gt;+10%&lt;/strong&gt; 的提升，在 64 KB 值上提升达 &lt;strong&gt;+116%&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;利用 AVX-512 提升字符串到整数转换性能&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;通过 AVX-512 指令，字符串-整数转换性能提升约 &lt;strong&gt;17–19%&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;其它性能优化&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;增强复制（replication）的稳定性&lt;/li&gt; 
   &lt;li&gt;ARM NEON SIMD 优化 &lt;code&gt;BITCOUNT&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;SSE2 SIMD 加快 &lt;code&gt;findBucket&lt;/code&gt;，提升最高达 &lt;strong&gt;6%&lt;/strong&gt;&amp;nbsp;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Valkey 9.0 中引入的新增功能（计划）&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;集群模式下的多数据库支持&lt;/li&gt; 
   &lt;li&gt;Multi-Patch TCP (MPTCP) 支持&lt;/li&gt; 
   &lt;li&gt;原子槽迁移（atomic slot migration）&lt;/li&gt; 
   &lt;li&gt;以及其他功能改进&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下载地址：&lt;em&gt;https://valkey.io/download/releases/v9-0-0-rc1/&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366870/valkey-9-0-0-rc1-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366870/valkey-9-0-0-rc1-released</guid>
      <pubDate>Mon, 18 Aug 2025 02:46:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Cline v3.25 正式发布，引入 Deep Planning、Focus Chain 和 Auto Compact 三大协同机制</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;Cline v3.25 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcline.bot%2Fblog%2Fcline-v3-25" target="_blank"&gt;已正式发布&lt;/a&gt;，新版本通过引入 Deep Planning、Focus Chain 和 Auto Compact 三大核心系统，以解决大语言模型（LLMs）在多轮长对话中因上下文累积导致的「中间遗忘」&amp;nbsp;("lost in the middle") 和性能衰退问题。&lt;/p&gt; 
&lt;p&gt;这三大系统如同一个分工明确的团队：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Deep Planning 负责「战略规划」与上下文压缩；&lt;/li&gt; 
 &lt;li&gt;Focus Chain 保持「战术执行」的一致性；&lt;/li&gt; 
 &lt;li&gt;Auto Compact 则负责「战场清理」，确保资源高效流动。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;p&gt;文章指出，当任务变得越来越复杂且涉及多轮交互时，LLM 的性能会显著下降。这并非仅仅因为上下文长度不足，而是「中间内容」的噪音逐渐掩盖了原始任务意图，从而引发语义偏离或幻觉。&lt;/p&gt; 
&lt;p&gt;为了解决「长上下文多轮任务偏离」的问题，Cline v3.25 引入了三大协同机制：&lt;/p&gt; 
&lt;h3&gt;1. &lt;strong&gt;Deep Planning&lt;/strong&gt; — 打好基础，避免污染&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;使用 &lt;code&gt;/deep-planning&lt;/code&gt; 命令后，Cline 会先非冗余地全面探索项目（grep、分析依赖、阅读文件等），构建项目「心智模型」。&lt;/li&gt; 
 &lt;li&gt;接着向用户提问澄清歧义，并生成统一的 &lt;code&gt;implementation_plan.md&lt;/code&gt;，保存到项目根目录。&lt;/li&gt; 
 &lt;li&gt;最后，启动一个全新任务，仅载入核心上下文（关键文件 + 计划文件），避免早期探索中的多余噪音污染实现阶段。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;这样，实施阶段从一个纯净、高价值的上下文切入，从而维持最优性能。&lt;/p&gt; 
&lt;h3&gt;2. &lt;strong&gt;Focus Chain&lt;/strong&gt; — 稳定任务方向&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;默认启用，Cline 自动从任务中生成待办清单（todo list），并每 &lt;strong&gt;六条消息&lt;/strong&gt;定期注入上下文中，以提醒自己当前进度与目标。&lt;/li&gt; 
 &lt;li&gt;待办清单内容会随着任务进展自动更新：完成项被标记、新任务加入、优先级调整，确保模型不会偏离主线 。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. &lt;strong&gt;Auto Compact&lt;/strong&gt; — 自动压缩上下文，延续任务&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;当上下文接近极限时，Cline 会自动总结当前会话的关键内容（技术决策、代码变化、进度等），并将其压缩为摘要，替换掉膨胀的历史记录，然后继续任务。&lt;/li&gt; 
 &lt;li&gt;例如，一个需要 500 万 token 的任务，在 20 万 token 的上下文窗口下也能顺利完成。配合 Claude 4 Sonnet 的 100 万 token 窗口，显得尤为高效。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;其他 v3.25 更新亮点&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;增加了对 Claude Sonnet 4（200k context window）的支持（OpenRouter 和 Cline Providers）；&lt;/li&gt; 
 &lt;li&gt;支持自定义 Requesty Provider 的 base URL；&lt;/li&gt; 
 &lt;li&gt;修复了 checklist 更新过程中重复执行 &lt;code&gt;attempt_completion&lt;/code&gt; 的 bug；&lt;/li&gt; 
 &lt;li&gt;修复 Banner 无法关闭的问题；&lt;/li&gt; 
 &lt;li&gt;在 AWS Bedrock 中加入了 GPT-OSS 模型支持。&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366869/cline-v3-25</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366869/cline-v3-25</guid>
      <pubDate>Mon, 18 Aug 2025 02:38:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>马斯克测试由 Grok 4 Mini 驱动的全新 𝕏 算法</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;span&gt;马斯克近日&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Felonmusk%2Fstatus%2F1956580440136966203" target="_blank"&gt;透露&lt;/a&gt;，他正在测试由 Grok 4 Mini 驱动的全新 𝕏 算法，并明确表示：「它确实更好。」 &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="732" src="https://static.oschina.net/uploads/space/2025/0818/102119_fy42_2720166.png" width="1270" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;根据他的说法，这一新算法在性能上有明显提升，但要将其全面推广给所有用户，需要动用约 2 万块 GPU，并且会带来更高的延迟。尽管如此，马斯克仍认为「为了获得更好的性能，这些代价是值得的」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;目前尚未公开该算法的具体技术细节，如是否用于推荐系统、内容排序或 AI 生成内容优化等，但从马斯克的表态来看，Grok 4 Mini 在 𝕏 平台的应用已进入实测阶段，未来可能成为 𝕏 体验升级的核心技术之一。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;马斯克透露他正在测试由首次公开的 Grok 4 Mini 模型驱动的𝕏平台新算法，并表示全面推广需要约 20,000 块 GPU。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366866</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366866</guid>
      <pubDate>Mon, 18 Aug 2025 02:25:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>我国空间站首次应用专业领域 AI 大模型</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;据中国载人航天工程办公室消息，北京时间 2025 年 8 月 15 日 22 时 47 分，经过约 6.5 小时的出舱活动，神舟二十号乘组航天员陈冬、陈中瑞、王杰密切协同，在空间站机械臂和地面科研人员的配合支持下，圆满完成既定任务，出舱航天员陈冬、王杰已安全返回问天实验舱，出舱活动取得圆满成功。&lt;/p&gt; 
&lt;p&gt;与以往不同的是，此次神二十乘组在开展工作时有了一个新的助手，就是由天舟九号货运飞船搭载上行的「悟空 AI」大模型。在神二十乘组第三次出舱活动的准备工作中，「悟空 AI」大模型就发挥了辅助支撑作用，同时它还为航天员在轨工作提供了智能化、专业化的支持。&lt;/p&gt; 
&lt;p&gt;「悟空 AI」基于国内开源模型开发，结合载人航天飞行任务需求，采用预训练和指令微调技术，构建了专业领域大语言模型和以航天飞行知识规范为核心的知识库。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;中国航天员科研训练中心，邹鹏飞：&lt;/strong&gt;航天员根据他的需要去询问「悟空 AI」，比如说今天有哪些工作，在工作过程中可能有哪些操作的指南性质的、说明性质的知识。&lt;/p&gt; 
&lt;p&gt;&lt;img height="264" src="https://oscimg.oschina.net/oscnet/up-3f0d42fe3a0577cb2b09461d25dd5333bde.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;大模型技术在我国空间站首次应用验证，构建了天地协同的智能问答支持系统，通过地面和在轨两个模型，分别提供专业知识深度解析能力和解决重难点问题。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;中国航天员科研训练中心，邹鹏飞：&lt;/strong&gt;「悟空 AI」大模型为航天员在轨的复杂操作和故障处置提供快速有效的信息支持。助力航天员更有效地开展工作，丰富在轨的心理保障，也有助于天地协同效率的提高。&lt;/p&gt; 
&lt;p&gt;此外，针对载人航天飞行任务专业多元、类型复杂、数据海量等特点，「悟空 AI」大模型通过开发场景化数据处理等多种功能，确保响应快速，回答内容严谨正确，后续可拓展增加&lt;strong&gt;任务规划、数据分析、智能预测&lt;/strong&gt;等功能。「悟空 AI」大模型在轨一个月运行状态稳定，乘组航天员反馈良好，这一成果标志着我国空间站在轨智能化应用取得重要进展。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366864</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366864</guid>
      <pubDate>Mon, 18 Aug 2025 02:18:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>阿里推出多模态深度研究智能体 WebWatcher</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;阿里巴巴自然语言处理团队&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fwsm1OBCpYao63TPCnsnFdg" target="_blank"&gt;宣布&lt;/a&gt;推出 WebWatcher，这是一个开源的多模态深度研究智能体，旨在突破现有闭源系统和开源 Agent 在多模态深度研究领域的局限性。WebWatcher 通过整合网页浏览、图像搜索、代码解释器和内部 OCR 等多种工具，能够像人类研究员一样处理复杂的多模态任务，展现出强大的视觉理解、逻辑推理、知识调用、工具调度和自我验证能力。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;WebWatcher 的开发团队指出，尽管现有的闭源系统如 OpenAI 的 DeepResearch 在文本深度研究方面表现出色，但它们大多局限于纯文本环境，难以处理现实世界中复杂的图像、图表和混合内容。而现有的开源 Agent 也面临两大瓶颈:一类是专注于文本检索的 Agent，虽然能够整合信息，但无法处理图像;另一类是视觉 Agent，虽然能够识别图像，但缺乏跨模态推理和多工具协同能力。WebWatcher 正是为了解决这些瓶颈而设计的。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;WebWatcher 的技术方案覆盖了从数据构建到训练优化的完整链路，其核心目标是让多模态 Agent 在高难度多模态深度研究任务中具备灵活推理和多工具协作能力。为此，研究团队设计了一个全自动多模态数据生成流程，通过随机游走收集跨模态知识链，并引入信息模糊化技术，提升任务的不确定性和复杂性。所有复杂问题样本通过 QA-to-VQA 转换模块扩展为多模态版本，进一步增强了模型的跨模态理解能力。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="222" src="https://oscimg.oschina.net/oscnet/up-49fb7e96ad99da53f5c2a535d842f908428.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在高质量推理轨迹构建与后训练方面，WebWatcher 采用了 Action-Observation 驱动的轨迹生成方法，通过收集真实的多工具交互轨迹并进行监督微调（SFT），让模型在训练初期快速掌握多模态 ReAct 式推理和工具调用的基本模式。随后，模型进入强化学习阶段，通过 GRPO 进一步提升多模态 Agent 在复杂环境下的决策能力。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;为了全面验证 WebWatcher 的能力，研究团队提出了 BrowseComp-VL，这是 BrowseComp 在视觉-语言任务上的扩展版本，旨在逼近人类专家的跨模态研究任务难度。在多轮严格评测中，WebWatcher 在复杂推理、信息检索、知识整合以及聚合类信息寻优等任务上全面领先于当前主流的开源与闭源多模态大模型。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;具体来说，在人类&lt;span&gt;终极&lt;/span&gt;考试（Humanity’s Last Exam，HLE-VL）这一多步复杂推理基准上，WebWatcher 以 13.6% 的 Pass@1 分数一举夺魁，大幅领先于 GPT-4o(9.8%)、Gemini2.5-flash(9.2%) 和 Qwen2.5-VL-72B(8.6%) 等代表性模型。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在更贴近真实多模态搜索的 MMSearch 评测中，WebWatcher 的 Pass@1 得分高达 55.3%，相比 Gemini2.5-flash(43.9%) 和 GPT-4o(24.1%) 大幅领先。在 LiveVQA 评测中，WebWatcher 的 Pass@1 成绩达到 58.7%，领先于其他主流模型。在最具综合挑战的 BrowseComp-VL 基准上，WebWatcher 以 27.0% 的平均得分 (Pass@1)&lt;span&gt;遥遥领先&lt;/span&gt;，成绩提升超过一倍。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366863</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366863</guid>
      <pubDate>Mon, 18 Aug 2025 02:10:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
  </channel>
</rss>
