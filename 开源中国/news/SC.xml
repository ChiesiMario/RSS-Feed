<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-最新资讯</title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://rsshub.app/oschina/news" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)</description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>en</language>
        <lastBuildDate>Thu, 25 Apr 2024 14:18:13 GMT</lastBuildDate>
        <ttl>1</ttl>
        <item>
            <title>开源日报 | 「鸿蒙原生版」微信；小镇里的「大模型」；全网最刚游戏公司；半个 AI 圈向李彦宏「开炮」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.4.25&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要点&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/289383/nginx-1-26-released&quot; target=&quot;_blank&quot;&gt;nginx 1.26.0 稳定版实验性支持 HTTP/3&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;主要变化&lt;/p&gt; 
&lt;ul style=&quot;list-style-type:disc; margin-left:0; margin-right:0&quot;&gt; 
 &lt;li&gt;合并来自 1.25.x 主线分支的新功能和错误修复&lt;/li&gt; 
 &lt;li&gt;实验性支持 HTTP/3&lt;/li&gt; 
 &lt;li&gt;流模块 (stream module) 引入&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnginx.org%2Fen%2Fdocs%2Fstream%2Fngx_stream_core_module.html%23server_name&quot; target=&quot;_blank&quot;&gt;虚拟服务器&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;支持将流连接&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnginx.org%2Fen%2Fdocs%2Fstream%2Fngx_stream_pass_module.html&quot; target=&quot;_blank&quot;&gt;传递&lt;/a&gt;给监听套接字&lt;/li&gt; 
 &lt;li&gt;HTTP/2 on a&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnginx.org%2Fen%2Fdocs%2Fhttp%2Fngx_http_v2_module.html%23http2&quot; target=&quot;_blank&quot;&gt;per-server&lt;/a&gt;&amp;nbsp;basis&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnginx.org%2Fen%2Fdownload.html&quot; target=&quot;_blank&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/289394/apple-openelm&quot; target=&quot;_blank&quot;&gt;苹果开源面向移动设备打造的小尺寸模型 OpenELM&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;苹果在 Hugging Face 平台上发布了一个「具有开源训练和推理框架的高效语言模型」，名为 OpenELM。&lt;/span&gt;OpenELM 使用分层缩放策略，可以有效地分配 Transformer 模型每一层的参数，从而提高准确率。例如，在参数量约为 10 亿的情况下，OpenELM 与 OLMo 相比准确率提升了 2.36%，同时所需的预训练 tokens 数量仅有原来的 50%。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;OpenELM 有四种尺寸：2.7 亿、4.5 亿、11 亿和 30 亿个参数。而微软 Phi-3 模型为 38 亿，因此前者在小型机型上运行成本更低，可在手机和笔记本电脑等移动设备上运行，是做 AI 硬件的绝佳小模型。&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/289497/wechat-mmkv-support-harmonyos-next&quot; target=&quot;news&quot;&gt;最新开源代码证实！「鸿蒙原生版」微信正在积极开发中&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;MMKV 是微信客户端自用的 key-value 组件，于 2018 年&lt;a href=&quot;https://www.oschina.net/news/100210/tecent-opensource-mmkv&quot;&gt;正式开源&lt;/a&gt;，支持 Android /macOS/ Windows / POSIX 平台。MMKV 底层序列化 / 反序列化使用 protobuf 实现，性能高，稳定性强。从 2015 年中至今在微信上使用，其性能和稳定性经过了时间的验证。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;官方公告显示，最新发布的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTencent%2FMMKV%2Freleases%2Ftag%2Fv1.3.5&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;MMKV&amp;nbsp;v1.3.5&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;已正式支持&amp;nbsp;HarmonyOS NEXT&lt;/strong&gt;，目前大部分功能在该平台上可正常使用。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-23464b9424efb7293554a65a98292c32ae6.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;MMKV for HarmonyOS NEXT 使用文档：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTencent%2FMMKV%2Fwiki%2Fohos_setup&quot; target=&quot;_blank&quot;&gt;https://github.com/Tencent/MMKV/wiki/ohos_setup&lt;/a&gt;&lt;/p&gt; 
&lt;h3 style=&quot;margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/289471/snowflake-s-open-source-arctic-llm&quot; target=&quot;_blank&quot;&gt;Snowflake 开源 Arctic LLM 挑战 Llama 3、Grok 等&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;数据库公司 Snowflake&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.snowflake.com%2Fblog%2Farctic-open-efficient-foundation-language-models-snowflake%2F%3Futm_cta%3Dwebsite-homepage-featured-blog-snowflake-artic-intro&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;开源了新的大语言模型&amp;nbsp;Arctic，号称 「高效智能且真正开放」。专为复杂企业工作负载而设计，以成本效益为主要亮点。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;与训练预算远高于所需的模型相比，它可以高效地完成 SQL 生成、编码和指令跟踪等企业智能任务，满足或超过这些领域的基准。 Snowflake 表示，这些指标对企业很重要，因为这些是构建生成式人工智能副驾驶所需的能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Snowflake 声称，其 Arctic 模型的性能优于大多数开源模型和一些参数较少的闭源模型，并且使用较少的计算能力进行训练。较低的训练成本将使公司能够训练定制模型，而无需花费过多的资金。&lt;/span&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6182606334%2FObcWj1sxJ&quot; target=&quot;_blank&quot;&gt;字节和旷视发布的项目 HiDiffusion，代码开源了&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;无需训练，只需要一行代码就可以提高 SD 生成图像的清晰度和生成速度。&lt;/p&gt; 
   &lt;p&gt;支持将图像生成的分辨率提高至 4096×4096，同时将图像生成速度提升 1.5 至 6 倍。&lt;/p&gt; 
   &lt;p&gt;支持所有 SD 模型同时也支持 SD 模型的下游模型，比如 Playground。&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;归藏的 AI 工具箱&lt;/strong&gt;&lt;/p&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1727858283%2FObbl8kXSU&quot; target=&quot;_blank&quot;&gt;Meta 宣布推出 Llama 3 的介绍视频（双语字幕）&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;在我们深入了解 Llama 之前，先给大家介绍一些背景信息。我们实际上在 2023 年 2 月在 Meta 组织了一个团队。这个团队集结了公司内从 SysML 到模型开发，再到数据处理，甚至是一些在各个领域进行深度研究的顶级研究员。我们还聘请了一些创新型的人才。&lt;/p&gt; 
   &lt;p&gt;Llama 2 模型在 7 月份发布，可商业使用。参数范围从 7 到 70。这是当时的最先进成果。然后在八月和一月，我们发布了 Code Llama。12 月推出 Purple Llama 项目，关注安全和信任。&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;宝玉 xp&lt;/strong&gt;&lt;/p&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6105753431%2FObkDInc3e&quot; target=&quot;_blank&quot;&gt;开源可商用文本转语音模型&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;加拿大初创公司 MyShell 和 MIT 升级推出 OpenVoice V2。&lt;/p&gt; 
   &lt;p&gt;作为一种文本转语音模型，OpenVoice V2 仅使用一小段人声就能克隆语音。&lt;/p&gt; 
   &lt;p&gt;而且支持转成其他语言，包括英语、西班牙语、法语、中文、日语和韩语。&lt;/p&gt; 
   &lt;p&gt;PS：官方宣布 OpenVoice V2 完全开源，允许免费商业使用~&lt;/p&gt; 
   &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;在线体验：&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.lepton.ai%2Fplayground%2Fopenvoice&quot; target=&quot;_blank&quot;&gt;网页链接&lt;/a&gt;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博 &lt;strong&gt;量子位&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.com.cn%2Farticle_7517400647_1c0126e47059050t3e.html&quot; target=&quot;_blank&quot;&gt;信息软件业，加快「拥抱」大模型&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;根据行动方案，北京将探索人工通用智能前沿技术，支持攻关内容生成、检索增强生成、人工智能内容安全标识、深度学习框架、向量数据库等大模型工具类软件，搭建大模型原生软件应用商店、大模型安全靶场。以建设单体万卡智能算力中心为目标，组织攻关算力芯片、高性能通信、调度系统、容器编排等云计算关键技术。支持在教育、医疗、文化、工业等领域建设人工智能场景应用实验室，打造示范性场景落地项目。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;人民资讯&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.com.cn%2Farticle_3205514555_bf10453b02001lvrq.html&quot; target=&quot;_blank&quot;&gt;中国经济向前「进」丨小镇里的「大模型」 这里有 100 万台电脑的算力→&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;进军，代表着在新领域开拓新空间。当前我国不断增长的高技术产业，就体现出了这样一种势头。&lt;/p&gt; 
 &lt;p&gt;同比增长 11.4%!这是高技术产业投资跑出的增速，这个增速比全部投资增速还要高出 6.9 个百分点，投资新引擎的地位日渐凸显。&lt;/p&gt; 
 &lt;p&gt;分领域来看，高技术制造业投资同比增长 10.8%!高技术服务业投资同比增长 12.7%!&lt;/p&gt; 
 &lt;p&gt;这组高速增长的数据，意味着有更多企业正在抓紧向「高技术」攀登，向前沿领域进军。人工智能可以说是今年最火的领域之一。在浙江杭州钱塘江畔，一个人工智能小镇里，大模型、各类 AI 应用正在加速生长。&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;安徽财经网&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fi.ifeng.com%2Fc%2F8Z3yMkcdKSE&quot; target=&quot;_blank&quot;&gt;英伟达收购两家 AI 创企，要让 AI 芯片变得更便宜&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;英伟达正成为 AI 热潮中最活跃的企业投资方之一，在去年投资 30 多家创企后，现在它的投资名单又新增两家以色列 AI 创企——Run:ai 与 Deci。&lt;/p&gt; 
 &lt;p&gt;英伟达今日宣布达成一项最终协议，收购 Run:ai。据 CTech 报道，这笔交易价预计约为 7 亿美元。根据 LinkedIn，Run:ai 约有 150 名员工，累计融资 1.18 亿美元；Deci 拥有约 100 名员工，累计融资 5500 万美元。英伟达与 Deci 的交易未公开披露，交易价未知。&lt;/p&gt; 
 &lt;p&gt;据 The Information 报道，被英伟达最近达成收购交易的这两家创企，旨在降低开发或运行生成式 AI 模型的成本，帮助客户更有效地利用 AI 计算资源，进而提振英伟达 AI 芯片的需求。&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;- &lt;strong&gt;芯东西&lt;/strong&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkevmo314%2Fmagic-copy&quot; target=&quot;_blank&quot;&gt;kevmo314/magic-copy&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;248&quot; src=&quot;https://static.oschina.net/uploads/space/2023/0414/184116_YyZh_5430600.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkevmo314%2Fmagic-copy&quot; target=&quot;_blank&quot;&gt;https://github.com/kevmo314/magic-copy&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;Magic Copy 是一个 Chrome 扩展，可从图像中提取前景对象并将其复制到剪贴板，基于&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;&amp;nbsp;Meta 的 Segment Anything Model。&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/u/5783135/blog/11054744&quot; target=&quot;_blank&quot;&gt;大模型下 B 端前端代码辅助生成的思考与实践&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;B 端页面列表、表单、详情都支持生成，链路大概可分为以下几个步骤。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;img alt=&quot;&quot; height=&quot;312&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-865640d7af801189d2dad45b3f22b568e07.gif&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;输入自然语言&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;结合大模型按照指定规则提取出相应搭建信息&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;搭建信息结合代码模板与 AST 输出前端代码&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;div&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;事件点评&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289460&quot; target=&quot;_blank&quot;&gt;知名游戏公司出新规：员工娶妻彩礼不得超过 10 万元&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;日前知名游戏公司多益网络发布公告称，公司规定：公司任何员工娶妻彩礼不得超过 10 万人民币价值，否则全公司通报批评并严惩。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;公开资料显示，多益网络成立于 2006 年 7 月，总部位于广东省广州市，公司专注于网络游戏的研发与运营，是中国十大网游研发及运营公司之一。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;多益网络的业务涵盖大型网络游戏、移动游戏、电子邮箱、IM 即时通讯软件和社交网站等，旗下拥有多款知名游戏产品，如《神武 4》端手游、《梦想世界》端手游等。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;224&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8e5d0f2f76f8ec6b802487165dda682abd6.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;点评&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2328; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;这一规定在业界引起了一定的争议。一方面，它反映了企业对员工个人生活的干预，这在现代企业管理中较为罕见。另一方面，这也反映了企业在制定内部政策时对文化和社会习俗的考虑。彩礼传统上被视为男性家庭对女性家庭的补偿，这一规定可能被解读为对这一传统性别角色的挑战，从而引发关于性别平等和传统性别角色定位的讨论。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2328; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;以及可能会影响员工对公司的看法和忠诚度，同时也可能引起公众对企业文化和社会责任的讨论，反映了当前社会对传统习俗与现代企业管理的冲突的关注。在现代企业环境中，如何平衡企业文化、员工个人权益以及社会习俗，是一个值得深思的问题。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2328; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;此举还可能会引起公众对多益网络企业形象的关注，影响其品牌形象和公众信任度。&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289441/ftc-bans-noncompete-agreements&quot; target=&quot;_blank&quot;&gt;美国废除绝大部分职业的《竞业禁止协议》&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;4 月 24 日，美国媒体 NPR&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.npr.org%2F2024%2F04%2F23%2F1246655366%2Fftc-bans-noncompete-agreements-lina-khan&quot; target=&quot;_blank&quot;&gt;报道称&lt;/a&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;，美国联邦贸易委员会 (FTC) 周二发以 3 票对 2 票的微弱优势&lt;/span&gt;&lt;strong&gt;禁止了几乎所有职业的竞业禁止协议&lt;/strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;。此类协议会禁止员工加入竞争企业或创办自己的企业。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;据称这是 50 多年来 FTC 官员首次发布一项规定，要求在整个经济范围内改变公司企业的竞争方式。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;FTC 主席 Lina Khan 在一份声明中表示：「竞业禁止条款压低了工资，遏制了新想法，并剥夺了美国经济的活力。一旦禁止竞业禁止条款，每年将会有 8500 多家新的初创公司诞生，员工平均每年也将多赚 524 美元。」&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;272&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6ce1bff7b6ae17ffeefd93492175c935f26.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;点评&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;FTC 废除竞业禁止协议的决定不仅对员工和雇主产生影响，还可能对市场竞争、法律框架以及经济结构产生深远的影响。这一决策反映了政府在平衡商业利益和劳动力权益方面的重要作用，同时也表明了在不断变化的经济环境中，法律和政策需要不断适应和调整。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;竞业禁止协议的废除意味着员工将有更大的自由度去选择他们的工作，而不受前雇主合同的限制。这有助于提高员工的工作满意度和职业流动性，同时促进市场竞争。废除竞业禁止协议将减少企业间的垄断行为，增强市场竞争。这有助于新企业的成立和发展，从而促进创新和经济增长。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;FTC 估计，这一禁令将使工资和福利在十年内增加 4880 亿美元。这表明废除竞业禁止协议可能对工人的经济福祉产生积极影响。虽然 FTC 的决定已经作出，但预计会有来自雇主和商业团体的法律挑战。这些挑战可能会延迟该禁令的实施，甚至可能导致其最终无法生效。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;对于企业来说，这一决策意味着他们需要寻找其他方式来保护其商业秘密和知识产权，而不是依赖于竞业禁止协议。&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289440/is-php-still-worth-it-in-2024&quot; target=&quot;_blank&quot;&gt;PHP 在 2024 年还值得学习吗？&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;IOBE 在&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/news/286796/tiobe-index-202404&quot;&gt;2024&amp;nbsp;年 4 月榜单&lt;/a&gt;中曾指出，随着众多竞争对手进入市场以及语言本身出现的一些问题；PHP 已经不复往日辉煌，在 TIOBE 指数中的排名跌至历史最低点（第 17 位）。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;在有关 PHP 已经日渐没落的言论四起的背景下，软件工程师&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;Sotiris Kourouklis&amp;nbsp;&lt;span style=&quot;color:#000000&quot;&gt;近日发布了一篇名为 「&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsotergreco.com%2Fis-php-still-worth-it-in-2024&quot; target=&quot;_blank&quot;&gt;Is PHP still worth it in 2024 ?&lt;/a&gt;」 的博客文章，对 PHP 语言进行了一番详尽的分析，探讨该语言在现代 Web&amp;nbsp;开发中的实用性和效率。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;并最终得出结论称，&lt;strong&gt;PHP 在 2024 年仍然是 Web 开发的一个不错选择。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;203&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-138c3b04e87d1fef7bf375ce68eae75cd0b.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;点评&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;PHP 在 2024 年的编程语言发展和市场方面仍具有重要地位。尽管面临新兴技术的挑战，但其在 Web 开发领域的普及度、社区支持、灵活性和与其他技术的良好集成，使其继续在市场上保持竞争力。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;PHP 仍然是网络开发中最受欢迎的编程语言之一，支撑着包括 Facebook、Wikipedia 和 WordPress 在内的大量网站。PHP 社区仍然活跃，持续有贡献者参与 PHP 核心的开发，这些贡献不仅包括错误修复和小补丁，还包括许多前瞻性的增强，推动 PHP 进入现代网络开发的现代时代。&lt;/span&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.xinhuanet.com%2Ftech%2F20240425%2Fb4292ac6fe234709ac2fd21ddb15d0ce%2Fc.html&quot; target=&quot;_blank&quot;&gt;周鸿祎参加中关村论坛：2024 是大模型场景之年，有望实现「万模万企万场景」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;color:#1a1a1a; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;360 集团创始人周鸿祎认为，大模型不是泡沫，将引领新一轮工业革命。大模型有两条路，一条是越做越大，OpenAI 走的就是这条路。这条路需要政府层面多指导，鼓励开源、开放、共享的理念，组织一个开源社区，让更多人参与进来，共同推动技术的进步，实现产业的跨越式发展。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1a1a1a; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;「除了越做越大，还能越做越专。专业大模型这条路，可以让我们不被 OpenAI 牵着鼻子走。2023 年，是百模大战，解决了大模型从无到有的问题。2024 年则是场景之年，如果有一万家企业寻找了一万个场景，开发了一万个大模型，那大模型就真正进入百行千业。新一轮工业革命因此会在中国率先出现。」&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;央广网&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.com.cn%2Farticle_1642634100_61e89b7401901e0cu.html&quot; target=&quot;_blank&quot;&gt;半个 AI 圈，向李彦宏「开炮」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#27282d; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;「目前李彦宏认为开源模型会越来越落后，最主要的理由还是训练和推理成本高。」但事实上，「office、数据库等人力成本很高的项目也有许多不错的开源项目，为何大模型就不行了呢？」&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#27282d; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;「如果百度市占率高，那你的对手可能就会考虑推开源版本，哪怕是不如闭源版本好，但是客观上也是一个选择，有些客户的需求也未必很高，那开源版本就足够了。」在他看来，「开源闭源都是一种选择，很难一刀切地评价开源好坏。毕竟，开源赚的是名气和社区，闭源做的是收入。」&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;新浪科技&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8Z41fmEzREk&quot; target=&quot;_blank&quot;&gt;一个大模型引发的停牌：商汤科技股价为何一日暴涨 30%？&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;商汤将股价暴涨的原因指向了日前发布的「日日新 SenseNova 5.0」大模型。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;不过，时代周报记者从多位 AI 从业者口中获知，「日日新 5.0」带来的行业震动也许没有想象中那么大。有从业者表示，如今大模型的突破已经很难在科技圈掀起波澜了。在他们看来，国内各家大模型的差距并不大，且多为大参数，除非有完全不同的技术路线出现，或者是有开源的且通过小参数、小算力达到良好的效果。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;-&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;时代周报&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.ce.cn%2Fcysc%2Ftech%2Fgd2012%2F202404%2F25%2Ft20240425_38982717.shtml&quot; target=&quot;_blank&quot;&gt;鸿蒙系统迎「决战时刻」 原生应用成「关键之战」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;前方无限风光，脚步铿锵有力。站在 2024 年，华为鸿蒙操作系统的建设迎来「决战时刻」。日前，中国证券报记者调研发现，尽管面临巨大的挑战和不确定性，但鸿蒙的成功已经具备了多重有利因素，而一旦跨过临界点，鸿蒙将实现华为在操作系统领域的历史性跨越。&lt;/span&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;中国证券报&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F5vKismrj3JQLRTwPM2Akag&quot; target=&quot;_blank&quot;&gt;全网最刚游戏公司&lt;span&gt;——&lt;/span&gt;规定员工娶妻彩礼不得超过 10 万元&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：公司效益越好，工资就越降的多？&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：这个董事长，可以了解一下一夫多妻制的推崇者&lt;/span&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：不是正常人能想到的观点&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：「公司效益良好，允许员工自愿降薪 10%」 这真是奇葩中的战斗机啊&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：这个董事长戏真多啊，上蹿下跳的&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：为什么不要求女性要多少，而要求娶妻给多少&lt;/span&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：多益的女员工已经被裁得差不多了&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：他就是想让你们单身好加班&lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289272/us-china-risc-v-risk&quot; target=&quot;_blank&quot;&gt;路透社：美国正在审查中国使用 RISC-V 芯片技术的风险&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：看来技术真的有国界&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：这东西为什么开源呢？&lt;/span&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：不开源早被 arm 灭了&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289250/2024-bad-bot-report&quot; target=&quot;_blank&quot;&gt;近一半的互联网流量是机器人，32% 是恶意机器人&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：人类在用互联网训练大量恶意机器人，等这些 AI 真的出现了智能后果难以想象，终结那一天时问他为啥如此，他说都是人类教的。&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：恶意的不是机器人，是有意识的&lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;程序员梗图&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-0c69f9102f46babc98decd7d1644947ed7c.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289528</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289528</guid>
            <pubDate>Thu, 25 Apr 2024 11:27:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>一文搞懂 Vue3 defineModel 双向绑定：告别繁琐代码！</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                        
                                                                                            &lt;span id=&quot;OSC_h1_1&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;前言&lt;/h1&gt; 
&lt;p&gt;随着&lt;code&gt;vue3.4&lt;/code&gt;版本的发布，&lt;code&gt;defineModel&lt;/code&gt;也正式转正了。它可以简化父子组件之间的双向绑定，是目前官方推荐的双向绑定实现方式。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_2&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;code&gt;vue3.4&lt;/code&gt;以前如何实现双向绑定&lt;/h1&gt; 
&lt;p&gt;大家应该都知道&lt;code&gt;v-model&lt;/code&gt;只是一个语法糖，实际就是给组件定义了&lt;code&gt;modelValue&lt;/code&gt;属性和监听&lt;code&gt;update:modelValue&lt;/code&gt;事件，所以我们以前要实现数据双向绑定需要给子组件定义一个&lt;code&gt;modelValue&lt;/code&gt;属性，并且在子组件内要更新&lt;code&gt;modelValue&lt;/code&gt;值时需要&lt;code&gt;emit&lt;/code&gt;出去一个&lt;code&gt;update:modelValue&lt;/code&gt;事件，将新的值作为第二个字段传出去。&lt;/p&gt; 
&lt;p&gt;我们来看一个简单的例子，父组件的代码如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;CommonInput v-model=&quot;inputValue&quot; /&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;
import { ref } from &quot;vue&quot;;

const inputValue = ref();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;子组件的代码如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;input
    :value=&quot;props.modelValue&quot;
    @input=&quot;emit(&#39;update:modelValue&#39;, $event.target.value)&quot;
  /&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;
const props = defineProps([&quot;modelValue&quot;]);
const emit = defineEmits([&quot;update:modelValue&quot;]);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;上面的例子大家应该很熟悉，以前都是这样去实现&lt;code&gt;v-model&lt;/code&gt;双向绑定的。但是存在一个问题就是&lt;code&gt;input&lt;/code&gt;输入框其实支持直接使用&lt;code&gt;v-model&lt;/code&gt;的，我们这里却没有使用&lt;code&gt;v-model&lt;/code&gt;而是在&lt;code&gt;input&lt;/code&gt;输入框上面添加&lt;code&gt;value&lt;/code&gt;属性和&lt;code&gt;input&lt;/code&gt;事件。&lt;/p&gt; 
&lt;p&gt;原因是因为从&lt;code&gt;vue2&lt;/code&gt;开始就已经是单向数据流，在子组件中是不能直接修改&lt;code&gt;props&lt;/code&gt;中的值。而是应该由子组件中抛出一个事件，由父组件去监听这个事件，然后去修改父组件中传递给&lt;code&gt;props&lt;/code&gt;的变量。如果这里我们给&lt;code&gt;input&lt;/code&gt;输入框直接加一个&lt;code&gt;v-model=&quot;props.modelValue&quot;&lt;/code&gt;，那么其实是在子组件内直接修改&lt;code&gt;props&lt;/code&gt;中的&lt;code&gt;modelValue&lt;/code&gt;。由於单向数据流的原因，&lt;code&gt;vue&lt;/code&gt;是不支持直接修改&lt;code&gt;props&lt;/code&gt;的，所以我们才需要将代码写成上面的样子。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_3&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;使用&lt;code&gt;defineModel&lt;/code&gt;实现数据双向绑定&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;defineModel&lt;/code&gt;是一个宏，所以不需要从 vue 中&lt;code&gt;import&lt;/code&gt;导入，直接使用就可以了。这个宏可以用来声明一个双向绑定 prop，通过父组件的&amp;nbsp;&lt;code&gt;v-model&lt;/code&gt;&amp;nbsp;来使用。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_4&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;基础 demo&lt;/h2&gt; 
&lt;p&gt;父组件的代码和前面是一样的，如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;CommonInput v-model=&quot;inputValue&quot; /&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;
import { ref } from &quot;vue&quot;;

const inputValue = ref();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;子组件的代码如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;input v-model=&quot;model&quot; /&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;
const model = defineModel();
model.value = &quot;xxx&quot;;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在上面的例子中我们直接将&lt;code&gt;defineModel&lt;/code&gt;的返回值使用&lt;code&gt;v-model&lt;/code&gt;绑定到 input 输入框上面，无需定义 &lt;code&gt;modelValue&lt;/code&gt; 属性和监听 &lt;code&gt;update:modelValue&lt;/code&gt; 事件，代码更加简洁。&lt;code&gt;defineModel&lt;/code&gt;的返回值是一个&lt;code&gt;ref&lt;/code&gt;，我们可以在子组件中修改&lt;code&gt;model&lt;/code&gt;变量的值，并且父组件中的&lt;code&gt;inputValue&lt;/code&gt;变量的值也会同步更新，这样就可以实现双向绑定。&lt;/p&gt; 
&lt;p&gt;那么问题来了，从&lt;code&gt;vue2&lt;/code&gt;开始就变成了单向数据流。这里修改子组件的值后，父组件的变量值也被修改了，那这不就变回了&lt;code&gt;vue1&lt;/code&gt;的双向数据流了吗？其实并不是这样的，这里还是单向数据流，我们接下来会简单讲一下&lt;code&gt;defineModel&lt;/code&gt;的实现原理。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_5&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;实现原理&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;defineModel&lt;/code&gt;其实就是在子组件内定义了一个叫&lt;code&gt;model&lt;/code&gt;的 ref 变量和&lt;code&gt;modelValue&lt;/code&gt;的 props，并且&lt;code&gt;watch&lt;/code&gt;了 props 中的&lt;code&gt;modelValue&lt;/code&gt;。当&lt;code&gt;props&lt;/code&gt;中的&lt;code&gt;modelValue&lt;/code&gt;的值改变后会同步更新&lt;code&gt;model&lt;/code&gt;变量的值。并且当在子组件内改变&lt;code&gt;model&lt;/code&gt;变量的值后会抛出&lt;code&gt;update:modelValue&lt;/code&gt;事件，父组件收到这个事件后就会更新父组件中对应的变量值。&lt;/p&gt; 
&lt;p&gt;实现原理代码如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;input v-model=&quot;model&quot; /&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;
import { ref, watch } from &quot;vue&quot;;

const props = defineProps([&quot;modelValue&quot;]);
const emit = defineEmits([&quot;update:modelValue&quot;]);
const model = ref();

watch(
  () =&amp;gt; props.modelValue,
  () =&amp;gt; {
    model.value = props.modelValue;
  }
);
watch(model, () =&amp;gt; {
  emit(&quot;update:modelValue&quot;, model.value);
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;看了上面的代码后你应该了解到了为什么可以在子组件内直接修改&lt;code&gt;defineModel&lt;/code&gt;的返回值后父组件对应的变量也会同步更新了吧。我们修改的其实是&lt;code&gt;defineModel&lt;/code&gt;返回的&lt;code&gt;ref&lt;/code&gt;变量，而不是直接修改 props 中的&lt;code&gt;modelValue&lt;/code&gt;。实现方式还是和&lt;code&gt;vue3.4&lt;/code&gt;以前实现双向绑定一样的，只是&lt;code&gt;defineModel&lt;/code&gt;这个宏帮我们将以前的那些繁琐的代码给封装到内部实现了。&lt;/p&gt; 
&lt;p&gt;其实&lt;code&gt;defineModel&lt;/code&gt;的源码中是使用 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.vuejs.org%2Fapi%2Freactivity-advanced.html%23customref&quot; target=&quot;_blank&quot;&gt;customRef&lt;/a&gt; 和 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.vuejs.org%2Fapi%2Freactivity-core.html%23watchsynceffect&quot; target=&quot;_blank&quot;&gt;watchSyncEffect&lt;/a&gt; 去实现的，我这里是为了让大家能够更容易的明白&lt;code&gt;defineModel&lt;/code&gt;的实现原理才举的&lt;code&gt;ref&lt;/code&gt;和&lt;code&gt;watch&lt;/code&gt;的例子。如果大家对&lt;code&gt;defineModel&lt;/code&gt;的源码感兴趣，请在评论区留言，如果感兴趣的小伙伴比较多，我会在下一期出一篇&lt;code&gt;defineModel&lt;/code&gt;源码的文章。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_6&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;code&gt;defineModel&lt;/code&gt;如何定义&lt;code&gt;type&lt;/code&gt;、&lt;code&gt;default&lt;/code&gt;等&lt;/h1&gt; 
&lt;p&gt;既然&lt;code&gt;defineModel&lt;/code&gt;是声明了一个 prop，那同样也可以定义 prop 的&lt;code&gt;type&lt;/code&gt;、&lt;code&gt;default&lt;/code&gt;。具体代码如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const model = defineModel({ type: String, default: &quot;20&quot; });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;除了支持&lt;code&gt;type&lt;/code&gt;和&lt;code&gt;default&lt;/code&gt;，也支持&lt;code&gt;required&lt;/code&gt;和&lt;code&gt;validator&lt;/code&gt;，用法和定义&lt;code&gt;prop&lt;/code&gt;时一样。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_7&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;code&gt;defineModel&lt;/code&gt;如何实现多个 &amp;nbsp; &lt;code&gt;v-model&lt;/code&gt; &amp;nbsp; 绑定&lt;/h1&gt; 
&lt;p&gt;同样也支持在父组件上面实现多个 &amp;nbsp; &lt;code&gt;v-model&lt;/code&gt; &amp;nbsp; 绑定，这时我们给&lt;code&gt;defineModel&lt;/code&gt;传的第一个参数就不是对象了，而是一个字符串。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const model1 = defineModel(&quot;count1&quot;);
const model2 = defineModel(&quot;count2&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在父组件中使用&lt;code&gt;v-model&lt;/code&gt;时代码如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;CommonInput v-model:count1=&quot;inputValue1&quot; /&amp;gt;
&amp;lt;CommonInput v-model:count2=&quot;inputValue2&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;我们也可以在多个&lt;code&gt;v-model&lt;/code&gt;中定义&lt;code&gt;type&lt;/code&gt;、&lt;code&gt;default&lt;/code&gt;等&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const model1 = defineModel(&quot;count1&quot;, {
  type: String,
  default: &quot;aaa&quot;,
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;span id=&quot;OSC_h1_8&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;code&gt;defineModel&lt;/code&gt;如何使用内置修饰符和自定义修饰符&lt;/h1&gt; 
&lt;p&gt;如果要使用系统内置的修饰符比如&lt;code&gt;trim&lt;/code&gt;，父组件的写法还是和之前是一样的：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;CommonInput v-model.trim=&quot;inputValue&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;子组件也无需做任何修改，和上面其他的&lt;code&gt;defineModel&lt;/code&gt;例子是一样的：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const model = defineModel();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;defineModel&lt;/code&gt;也支持自定义修饰符，比如我们要实现一个将输入框的字母全部变成大写的&lt;code&gt;uppercase&lt;/code&gt;自定义修饰符，同时也需要使用内置的&lt;code&gt;trim&lt;/code&gt;修饰符。&lt;/p&gt; 
&lt;p&gt;我们的父组件代码如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;CommonInput v-model.trim.uppercase=&quot;inputValue&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;我们的子组件需要写成下面这样的：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;input v-model=&quot;modelValue&quot; /&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;
const [modelValue, modelModifiers] = defineModel({
  // get 我们这里不需要
  set(value) {
    if (modelModifiers.uppercase) {
      return value?.toUpperCase();
    }
  },
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这时我们给&lt;code&gt;defineModel&lt;/code&gt;传进去的第一个参数就是包含&lt;code&gt;get&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code&gt;set&lt;/code&gt;&amp;nbsp;方法的对象，当对&lt;code&gt;modelValue&lt;/code&gt;变量进行读操作时会走到&lt;code&gt;get&lt;/code&gt;方法里面去，当对&lt;code&gt;modelValue&lt;/code&gt;变量进行写操作时会走到&lt;code&gt;set&lt;/code&gt;方法里面去。如果只需要对写操作进行拦截，那么可以不用写&lt;code&gt;get&lt;/code&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;defineModel&lt;/code&gt;的返回值也可以解构成两个变量，第一个变量就是我们前面几个例子的&lt;code&gt;ref&lt;/code&gt;对象，用于给&lt;code&gt;v-model&lt;/code&gt;绑定。第二个变量是一个对象，里面包含了有哪些修饰符，在这里我们有&lt;code&gt;trim&lt;/code&gt;和&lt;code&gt;uppercase&lt;/code&gt;两个修饰符，所以&lt;code&gt;modelModifiers&lt;/code&gt;的值为：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
  trim: true,
  uppercase: true
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在输入框进行输入时，就会走到&lt;code&gt;set&lt;/code&gt;方法里面，然后调用&lt;code&gt;value?.toUpperCase()&lt;/code&gt;就可以实现将输入的字母变成大写字母。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_9&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;总结&lt;/h1&gt; 
&lt;p&gt;这篇文章介绍了如何使用&lt;code&gt;defineModel&lt;/code&gt;宏实现双向绑定以及&lt;code&gt;defineModel&lt;/code&gt;的实现原理。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;在子组件内调用&lt;code&gt;defineModel&lt;/code&gt;宏会返回一个&lt;code&gt;ref&lt;/code&gt;对象，在子组件内可以直接对这个&lt;code&gt;ref&lt;/code&gt;对象进行赋值，父组件内的相应变量也会同步修改。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;defineModel&lt;/code&gt;其实就是在子组件内定义了一个 ref 变量和对应的 prop，然后监听了对应的 prop 保持 ref 变量的值始终和对应的 prop 是一样的。在子组件内当修改 ref 变量值时会抛出一个事件给父组件，让父组件更新对应的变量值，从而实现双向绑定。&lt;/li&gt; 
 &lt;li&gt;使用&lt;code&gt;defineModel({ type: String, default: &quot;20&quot; })&lt;/code&gt;就可以定义 prop 的&lt;code&gt;type&lt;/code&gt;和&lt;code&gt;default&lt;/code&gt;等选项。&lt;/li&gt; 
 &lt;li&gt;使用&lt;code&gt;defineModel(&quot;count&quot;)&lt;/code&gt;就可以实现多个&lt;code&gt;v-model&lt;/code&gt;绑定。&lt;/li&gt; 
 &lt;li&gt;通过解构&amp;nbsp;&lt;code&gt;defineModel()&lt;/code&gt;&amp;nbsp;的返回值拿到&lt;code&gt;modelModifiers&lt;/code&gt;修饰符对象，配合&amp;nbsp;&lt;code&gt;get&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code&gt;set&lt;/code&gt;&amp;nbsp;转换器选项实现自定义修饰符。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;关注公众号：【前端欧阳】，解锁我更多 vue 原理文章。还可以加我微信，让你的朋友圈多一位对 vue 有深入理解的人。也可以通过微信给我说你想看哪些 vue 原理文章，我会根据大家的反馈进行创作。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/3322222/blog/11053418</link>
            <guid isPermaLink="false">https://my.oschina.net/u/3322222/blog/11053418</guid>
            <pubDate>Thu, 25 Apr 2024 09:02:10 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>微信客户端底层组件 MMKV 官宣支持 HarmonyOS NEXT</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;MMKV 是微信客户端自用的 key-value 组件，于 2018 年&lt;a href=&quot;https://www.oschina.net/news/100210/tecent-opensource-mmkv&quot;&gt;正式开源&lt;/a&gt;，支持 Android / macOS / Windows / POSIX 平台。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;MMKV 是基于 mmap 内存映射的 key-value 组件，底层序列化/反序列化使用 protobuf 实现，性能高，稳定性强。从 2015 年中至今在微信上使用，其性能和稳定性经过了时间的验证。&lt;/p&gt; 
 &lt;p&gt;近期也已移植到 Android / macOS / Windows / POSIX / HarmonyOS NEXT 等平台，一并开源。&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-98fec1f555bf09389fa2ebffea665cf744d.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;官方公告显示，最新发布的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTencent%2FMMKV%2Freleases%2Ftag%2Fv1.3.5&quot; target=&quot;_blank&quot;&gt; &lt;strong&gt;MMKV&amp;nbsp;v1.3.5 &lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;已正式支持&amp;nbsp;HarmonyOS NEXT&lt;/strong&gt;，目前大部分功能在该平台上可正常使用。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-23464b9424efb7293554a65a98292c32ae6.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;MMKV for HarmonyOS NEXT 使用文档：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTencent%2FMMKV%2Fwiki%2Fohos_setup&quot; target=&quot;_blank&quot;&gt;https://github.com/Tencent/MMKV/wiki/ohos_setup&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;此前一度有传言称，华为鸿蒙和微信之间的合作谈崩，但之后又有消息称华为与腾讯关于微信推送机制谈判结束，同意华为采用同 iOS 墓碑机制的推送方式，微信接入鸿蒙 NEXT 版本。&lt;/p&gt; 
&lt;p&gt;近日有接近华为的人士&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cls.cn%2Fdetail%2F1650707&quot; target=&quot;_blank&quot;&gt;告诉《科创板日报》&lt;/a&gt;：谈崩是谣言，进度还不方便透露，到时会有正式官宣。&lt;/p&gt; 
&lt;p&gt;目前看来，&lt;span&gt;微信的鸿蒙原生版确实正在开发中，并且已经取得了一定的进展。这对于鸿蒙操作系统的推广和生态建设是一个积极信号，有助于吸引更多用户和开发者加入鸿蒙生态。&lt;/span&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/281254&quot; target=&quot;_blank&quot;&gt;深圳发布政策支持鸿蒙原生应用发展&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/283921&quot; target=&quot;_blank&quot;&gt;深圳成立鸿蒙生态创新中心&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/288303&quot; target=&quot;news&quot;&gt;华为：用 1 年时间将 5000 个常用手机应用全面迁移至鸿蒙&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289497/wechat-mmkv-support-harmonyos-next</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289497/wechat-mmkv-support-harmonyos-next</guid>
            <pubDate>Thu, 25 Apr 2024 08:49:10 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Snowflake 开源 Arctic LLM 挑战 Llama 3、Grok 等</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;数据库公司 Snowflake &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.snowflake.com%2Fblog%2Farctic-open-efficient-foundation-language-models-snowflake%2F%3Futm_cta%3Dwebsite-homepage-featured-blog-snowflake-artic-intro&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;开源了新的大语言模型&amp;nbsp;Arctic，号称「高效智能且真正开放」。专为复杂企业工作负载而设计，以成本效益为主要亮点。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;与训练预算远高于所需的模型相比，它可以高效地完成 SQL 生成、编码和指令跟踪等企业智能任务，满足或超过这些领域的基准。 Snowflake 表示，这些指标对企业很重要，因为这些是构建生成式人工智能副驾驶所需的能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Snowflake 声称，其 Arctic 模型的性能优于大多数开源模型和一些参数较少的闭源模型，并且使用较少的计算能力进行训练。较低的训练成本将使公司能够训练定制模型，而无需花费过多的资金。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Arctic 在企业指标上与 LLAMA 3 8B 和 LLAMA 2 70B 相当或更好，而使用的训练计算预算不到 1/2。同样，尽管训练预算减少了 17 倍，Arctic 在编码（HumanEval+ 和 MBPP+）、SQL（Spider）和指令跟踪（IFEval）等方面仍然与 Llama3 70B 相当。且尽管使用的计算量比 DBRX 少 7 倍，但它在语言理解和推理（11 个指标的集合）方面仍然具有竞争力，同时在数学 (GSM8K) 方面表现更好。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;358&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-0509fae3f9129291ed25c678f9085b5c3d7.webp&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;189&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6a7436479c9aa80a1eb974196c00f123e80.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Snowflake AI 研究团队在一篇博客文章中写道： 「传统上，使用 LLM 构建顶级企业级智能的成本高昂，而且资源匮乏，通常需要花费数千万至数亿美元。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Snowflake 首席执行官 Sridhar Ramaswamy 表示：「通过以真正开放的方式向 AI 社区提供行业领先的智能和效率，我们正在进一步拓展开源 AI 的前沿。我们与 Arctic 的研究将显着增强我们为客户提供可靠、高效的人工智能的能力。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Snowflake 在 Apache 2.0 许可证下提供 Arctic 及其其他文本嵌入模型以及代码模板和模型权重，允许商业使用而无需任何许可成本。Arctic LLM 现已通过 Hugging Face 提供。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289471/snowflake-s-open-source-arctic-llm</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289471/snowflake-s-open-source-arctic-llm</guid>
            <pubDate>Thu, 25 Apr 2024 07:40:12 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>「deepin 生态共建小组」正式启动！三大生态共建项目，速来 ！</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;383&quot; src=&quot;https://storage.deepin.org/thread/202404250700454329_%E5%95%86%E4%B8%9A%E6%8A%95%E8%B5%84%E8%93%9D%E8%89%B2%E7%AE%80%E7%BA%A6%E5%85%AC%E4%BC%97%E5%8F%B7%E9%A6%96%E5%9B%BE__2024-04-25+14_58_57.jpg&quot; width=&quot;900&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;基于社区开源精神，为提高大家对 deepin 生态建设的参与感，应用商店将正式开放众多软件给广大开源爱好者进行维护。参与小组工作可获得多项专属小组福利，工作项目分为玲珑格式迁移、wine 应用打包、deb 原生应用维护。&lt;/p&gt; 
&lt;h1&gt;&amp;nbsp;&lt;strong&gt;招募条件&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;1）不限性别年龄职业地区，认同开源文化，愿投身 deepin 软件生态建设，且有一定的时间投入；&lt;/p&gt; 
&lt;p&gt;2）有一定的计算机基础，拥有一定的 linux 技术积累，对源码有一定的认识；&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;&amp;nbsp;项目介绍&lt;/strong&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;strong&gt;项目一、玲珑格式迁移&lt;/strong&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;项目目标：玲珑是一种新型的独立包管理工具集，致力于治理 Linux 系统下传统软件包格式复杂、交叉的依赖关系导致的各种兼容性问题，迁移项目的目标是让玲珑能实际应用于常见的发行版操作系统，包括四大架构：amd64、arm64、loongarch64、riscv&amp;nbsp;；现阶段仅支持 amd64 的迁移&lt;/li&gt; 
 &lt;li&gt;参与要求：需要具备文档阅读能力，有源码编译构建、开源应用维护经验更佳&lt;/li&gt; 
 &lt;li&gt;参与方式：认领迁移任务，任务一般分为 1、入门迁移任务：该部分可使用转格式工具快速将现有的 deb 包转为玲珑格式，难度较低，可以作为玲珑入门学习；2、进阶迁移任务及转格式失败的入门任务：该部分需手动编译构建，需要对玲珑有比较深入的了解；构建完毕的应用通过开发者平台或社区投递系统上架应用商店（有特殊需求可以申请官方的机器设备支持）&lt;/li&gt; 
 &lt;li&gt;参考文档：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flinglong.dev%2Fguide%2Fll-builder%2Fmanifests.html%23runtime-20-5-0-%25E5%258C%2585%25E5%2590%25AB%25E4%25BE%259D%25E8%25B5%2596%25E9%25A1%25B9&quot; target=&quot;_blank&quot;&gt;玲珑在线文档&lt;/a&gt;&amp;nbsp;、转换工具及文档（目前只有 amd64，群内分享）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;项目二、wine 应用打包&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;第一期 wine 打包活动进行中，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fzh%2Fpost%2F271247&quot; target=&quot;_blank&quot;&gt;详情见 &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;项目目标：将常用 exe 格式的 Windows 应用转成 deepin/UOS 可用的 deb 格式并上架应用商店&lt;/li&gt; 
 &lt;li&gt;参与要求：有 wine 容器配置、调试经验更佳&lt;/li&gt; 
 &lt;li&gt;参与方式：Windows 应用可通过官方一键打包工具将软件转成 deepin/UOS 下可用的 deb 包（提供清单方向），部分打包失败或打开后功能异常的软件需要手动调试配置，打包后通过开发者平台或社区投递系统上架应用商店；&lt;/li&gt; 
 &lt;li&gt;参考文档：进群领取 wine 一键打包工具，已支持一键生成 amd64&amp;amp;arm64 的 deb&lt;/li&gt; 
 &lt;li&gt;划重点！&lt;strong&gt;wine 有奖打包活动&lt;/strong&gt;即将上线&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;项目三、deb 原生应用维护&lt;/strong&gt;&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;项目目标：遵循开源精神，商店内开源应用放开给社区用户自行维护，能保证深度商店应用的正常使用、新版本的及时更新&lt;/li&gt; 
 &lt;li&gt;参与要求：SHELL 脚本读写能力、对 Linux 桌面发行版运行库相互关系有一定的了解&lt;/li&gt; 
 &lt;li&gt;参与方式：除部分重点应用保持官方维护外，绝大多数开源应用公开给社区用户自行维护，平台定期公开应用新版本或问题修复的需求任务，感兴趣的可认认领任务，成为应用的维护者。打包后通过开发者平台或社区投递系统上架应用商店，并此后保持应用的维护或及时转出&lt;/li&gt; 
 &lt;li&gt;参考文档：&amp;nbsp;&lt;a href=&quot;https://gitee.com/ziggy615/packing-master-pool&quot; target=&quot;_blank&quot;&gt;packing master pool: 打包仙人自动化构建模版池&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;.&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;工作流程&lt;/strong&gt;&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;扫码入群，报名登记&lt;img alt=&quot;&quot; height=&quot;200&quot; src=&quot;https://storage.deepin.org/thread/202404250700268021_202404170843266411_%E7%94%9F%E6%80%81%E5%85%B1%E5%BB%BA%E5%B0%8F%E7%BB%84%E4%BA%8C%E7%BB%B4%E7%A0%81(1).png&quot; width=&quot;200&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;成为小组成员（不定期公示小组成员）&lt;/li&gt; 
 &lt;li&gt;认领任务（共享云文档登记，不可重复认领任务）&lt;/li&gt; 
 &lt;li&gt;适配打包（回填任务完成情况，打包成功/已上架/打包失败及原因）&lt;/li&gt; 
 &lt;li&gt;上架商店（可选通过&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fappdelivery.deepin.org.cn%2F%23%2Findex&quot; target=&quot;_blank&quot;&gt;社区投递系统&lt;/a&gt;或&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogin.uniontech.com%2F&quot; target=&quot;_blank&quot;&gt;开发者平台&lt;/a&gt;进行上架，上架需通过基础测试）&lt;/li&gt; 
 &lt;li&gt;获得激励（积分公示、定期发放奖励等）&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;&lt;strong&gt;小组福利&lt;/strong&gt;&lt;/h1&gt; 
&lt;h2&gt;1）打包激励标准&lt;/h2&gt; 
&lt;p&gt;完成各类型应用打包及上架可以获得一定的生态积分&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th&gt;打包类型&lt;/th&gt; 
   &lt;th&gt;应用新增上架&lt;/th&gt; 
   &lt;th&gt;应用维护更新&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;生态积分&lt;/td&gt; 
   &lt;td&gt;对生态共建项目中涉及的应用进行&lt;strong&gt;打包上新&lt;/strong&gt;&lt;br&gt; 可以获得对应的积分激励：&lt;br&gt; ● wine 应用：20 分/架构包&lt;br&gt; ● 玲珑格式：50 分/架构包&lt;br&gt; ● deb 原生：40 分/架构包&lt;/td&gt; 
   &lt;td&gt;对生态共建项目中涉及的应用进行&lt;strong&gt;升级维护&lt;/strong&gt;&lt;br&gt; 可以获得对应的维护积分激励：&lt;br&gt; ● wine 应用：10 分/架构包&lt;br&gt; ● 玲珑格式：30 分/架构包&lt;br&gt; ● deb 原生：20 分/架构包&lt;br&gt; 备注：需要规范管理版本号，不可无故刷新版本号。&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;按实际上架到应用商店的架构包数量计算积分，包括 amd64、arm64、loongarch64，其中 loongarch64 的包可额外多奖励 50% 积分；&lt;/li&gt; 
 &lt;li&gt;目前社区投递系统仅支持单一架构包提交，一个应用多个架构的需要通过开发者平台提交；&lt;/li&gt; 
 &lt;li&gt;如果完成了高难度的软件包适配，可以与官方运营沟通，评估后可以一定比例提升积分；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;strong&gt;2）生态积分激励&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;获得生态积分达到一定数量，可以获得对应的社区荣誉称号，并且积分可以用于兑换 deepin 周边礼品。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;A. 专属 deepin 社区荣誉称号&lt;/strong&gt;&lt;/h3&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th&gt;生态积分&lt;/th&gt; 
   &lt;th&gt;50-599&lt;/th&gt; 
   &lt;th&gt;600-2999&lt;/th&gt; 
   &lt;th&gt;3000-9999&lt;/th&gt; 
   &lt;th&gt;≥10000&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;deepin 社区称号&lt;/td&gt; 
   &lt;td&gt;生态共建组成员&lt;/td&gt; 
   &lt;td&gt;生态共建组骨干&lt;/td&gt; 
   &lt;td&gt;生态共建组专家&lt;/td&gt; 
   &lt;td&gt;生态共建组导师&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;&lt;strong&gt;B. 积分可兑换周边奖励&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;生态积分可自选兑换 deepin 积分商城内奖品池的等价值礼品，具体兑换说明后续共建小组群内同步&lt;/li&gt; 
 &lt;li&gt;周边奖励：小浣熊公仔/小浣熊钥匙扣/deepin 笔记本/deepinT 恤/deepin 超大鼠标垫/deepin 鼠标/deepin 徽章/小浣熊帆布袋等等&lt;/li&gt; 
 &lt;li&gt;达到 50 生态积分可申请获得 UOS 专业版半年期激活码&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;C. 2024 年度限定荣誉证书&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;截止至 2024 年 12 月 31 日，年度生态积分 top10 的小组成员，颁发荣誉证书——deepin 生态共建小组-卓越贡献奖.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;特殊说明&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;在共建小组工作中已上架的应用软件包，在没有新版本的情况下，可以直接用于申报参与 1 次后续的生态适配活动（积分不重复计算）&lt;/li&gt; 
 &lt;li&gt;每个月末核算小组成员的积分情况，并在 deepin 社区论坛公示&lt;/li&gt; 
 &lt;li&gt;社区荣誉称号按获得的总积分计算，消耗积分兑换奖励并不影响已获得的称号&lt;/li&gt; 
 &lt;li&gt;当小组成员大于 12 个月未有软件维护或更新，已获得的社区荣誉称号将会被取消&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;strong&gt;3）用户特权&lt;/strong&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;优秀软件将被商店重点推荐，优秀个人获得商店专属展示专区&lt;/li&gt; 
 &lt;li&gt;生态活动出谋划策，邀请成为生态适配导师&lt;/li&gt; 
 &lt;li&gt;社区论坛、Github 项目定期公示成员及贡献&lt;/li&gt; 
 &lt;li&gt;成为深度各技术沙龙的特邀讲师&lt;/li&gt; 
 &lt;li&gt;作为特邀嘉宾参与 DDUC 年度大会&lt;/li&gt; 
 &lt;li&gt;在校生可获得实习机会，社招工作优先录取&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;&lt;strong&gt;&amp;nbsp;官方支持&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;1）官方提供打包教程、打包规范；&lt;/p&gt; 
&lt;p&gt;2）官方组织开展系统化打包培训；&lt;/p&gt; 
&lt;p&gt;3）官方打包维护群，提供在线答疑；&lt;/p&gt; 
&lt;p&gt;4）官方不定期公开任务给社区维护者。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;以上为本小组的详细介绍，欢迎加入生态共建小组，共谋大事~&lt;/p&gt; 
&lt;p&gt;本方案试运行，可能会参考大家的意见进行一定的调整，欢迎大家提出各种建设性意见。最终解释权归 deepin 深度应用商店运营组所有。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相关链接：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;社区投递系统介绍：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fzh%2Fpost%2F265432&quot; target=&quot;_blank&quot;&gt;deepin 社区「应用投递系统」全新上线，诚邀您来共建应用生态！&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.chinauos.com%2F%23document3%3Fdirid%3D656ef276bd766615b0b0300c%26id%3D657036f6bd766615b0b03132&quot; target=&quot;_blank&quot;&gt;开发者认证及上架指南&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;了解 deepin（深度操作系统）：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdistrowatch.com%2Findex.php%3Fdistribution%3Ddeepin&quot; target=&quot;_blank&quot;&gt;DistroWatch.com: Put the fun back into computing. Use Linux, BSD.&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289464</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289464</guid>
            <pubDate>Thu, 25 Apr 2024 07:23:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>知名游戏公司出新规：员工娶妻彩礼不得超过 10 万元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;日前知名游戏公司多益网络发布公告称，公司规定：公司任何员工娶妻彩礼不得超过 10 万人民币价值，否则全公司通报批评并严惩。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-4719edabcb32a121346342ca9e4906fa130.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;u&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F5088502796%2FObbRPb9ZR&quot; target=&quot;_blank&quot;&gt;https://weibo.com/5088502796/ObbRPb9ZR&lt;/a&gt;&lt;/em&gt;&lt;/u&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;公开资料显示，多益网络成立于 2006 年 7 月，总部位于广东省广州市，公司专注于网络游戏的研发与运营，是中国十大网游研发及运营公司之一。&lt;/p&gt; 
&lt;p&gt;多益网络的业务涵盖大型网络游戏、移动游戏、电子邮箱、IM 即时通讯软件和社交网站等，旗下拥有多款知名游戏产品，如《神武 4》端手游、《梦想世界》端手游等。&lt;/p&gt; 
&lt;p&gt;多益网络还位列 2017 年中国互联网企业百强榜第 25 位，2018 年被评为「广东年度十大互联网领军企业」，2019 年获得「年度中国十大游戏研发企业」和「年度中国十大游戏出版运营企业」等称号。&lt;/p&gt; 
&lt;p&gt;在去年 3 月份，多益网络发布《前女高管们利用网络水军造假导致公司损失几亿的情况公告》。公告提到：前 CEO 唐忆鲁为首的腐败团伙，利用职务之便以权谋私，伙同广告代理皮包公司、网络水军刷量公司等制造虚假广告，对公司进行合同欺诈，给公司带来直接经济损失高达 5 亿元。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289460</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289460</guid>
            <pubDate>Thu, 25 Apr 2024 07:19:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Apache Doris 基于 Workload Group 的负载隔离能力｜Deep Dive</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                        
                                                                                            &lt;p&gt;作者：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fc.d4t.cn%2Fyjdpth&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;SelectDB&lt;/a&gt; 技术团队&lt;/p&gt; 
&lt;p&gt;现如今企业的数据查询需求在不断增多，在共享同一集群时，往往需要同时面对多个业务线或多种分析负载的并发查询。在有限的资源条件下，查询任务间的资源抢占将导致性能下降甚至集群不稳定，因此负载管理的重要性不言而喻。&lt;/p&gt; 
&lt;p&gt;从业务场景出发，用户负载管理的需求主要来自以下几方面：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;多个业务部门或租户可能共享同一套集群时，为避免不同租户间的负载相互影响，需保证每个租户的资源使用独立性和性能稳定性。&lt;/li&gt; 
 &lt;li&gt;不同业务对查询任务的响应度和优先级有着不同要求，对于关键业务或高优先级任务，如实时数据分析、在线交易等，需要确保这些任务能够获得足够的资源并优先执行，避免因资源竞争对查询性能产生影响。&lt;/li&gt; 
 &lt;li&gt;用户不仅关心资源的分配和管理，还注重成本控制和资源利用率。负载管理方案需在满足隔离要求的同时，实现用户对低使用成本和高资源利用率的诉求。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在早期版本中，Apache Doris 推出了基于资源标签（Resource Tag）的隔离方案，包括集群内节点级别的资源组划分以及针对单个查询的资源限制，实现了不同用户间的资源物理隔离。而为给用户提供更完善的负载管理方案，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fc.d4t.cn%2Fyjdpth&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Apache Doris&lt;/a&gt; 自 2.0 版本起，推出了基于 Workload Group 的管理方案，&lt;strong&gt;实现了 CPU 资源的软限，为用户提供较高的资源利用率。&lt;strong&gt;在新发布的 2.1 版本基于 Linux 内核提供的 CGroup 技术，进一步地&lt;/strong&gt;实现了对 CPU 资源的硬限，为用户提供更好的查询稳定性。&lt;/strong&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_1&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;基于 Resource Tag 的物理隔离方案&lt;/h2&gt; 
&lt;p&gt;在 Apache Doris 中有 FE 和 BE 两类节点，FE 节点负责元数据存储、集群管理、用户请求接入以及查询计划解析等，BE 节点则负责数据的存储和计算。在查询执行过程中涉及资源消耗的主要是 BE 节点，因此 Apache Doris 负载隔离方案都是面向 BE 节点设计。&lt;/p&gt; 
&lt;p&gt;在 Resource Tag 资源物理隔离方案中，可以对同一个集群内的 BE 节点设置标签，标签相同的 BE 节点会组成一个资源组（Resource Group），可将资源组看作数据存储和计算的一个单元。数据入库时会按照资源组配置将数据的副本写入到不同的资源组中，查询时按照资源组的划分使用对应资源组上的计算资源进行计算。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;参考文档：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fc.d4t.cn%2Fii4x6r&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://doris.apache.org/zh-CN/docs/2.0/admin-manual/resource-admin/multi-tenant&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;我们以常见的读写分析场景为例，假设集群中有 3 台 BE，具体使用步骤如下：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;BE 节点绑定 Resource Tag：将两台 BE 绑定到 Tag Read 上，服务于读负载；一台 BE 绑定到 Tag Write 上，服务于写负载。读负载和写负载位于不同的机器上，以实现读写隔离。&lt;/li&gt; 
 &lt;li&gt;数据副本绑定 Resource Tag：Table 1 有三个副本，两个副本绑定到 Tag Read 上，一个副本绑定到 Tag write 上。写入 replica 3 的数据会自动同步到 replica 1 和 replica 2 上，同步过程不会占用过多 BE 1 和 BE 2 的计算资源。&lt;/li&gt; 
 &lt;li&gt;工作负载绑定到 Resource Tag：如果查询 SQL 携带的 Tag 为 Read，查询将被自动路由到 Tag 为 Read 上的机器上（BE 1 、BE 2）上执行；如果将 Stream Load 导入负载指定 Tag 为 Write，那么 Stream Load 就会路由到 Tag 为 Write 的机器上（ BE 3）。在此过程除了副本同步时产生的开销，查询和导入之间不再有资源的竞争。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/Resource_Tag_67d668b5cb.png&quot; alt=&quot;基于 Resource Tag 的物理隔离方案.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Resource Tag 还可以实现多租户的功能。例如有两个用户 UserA 和 UserB，期望创建各自独立的租户以避免相互影响，那么可以把 UserA 的计算和存储资源绑定到名为 UserA 的 Tag 上，把 UserB 的计算和存储资源绑定到名为 UserB 的 Tag 上，那么两个用户在 BE 侧就实现了租户间的资源隔离。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/Resource_Tag_2_13c66f617b.png&quot; alt=&quot;基于 Resource Tag 的物理隔离方案-2.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Resource Tag 本质是通过对 BE 节点的分组实现了资源隔离，这个方案的优点是：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;隔离性好，多个租户之间通过物理机隔离，对 CPU、内存、IO 都实现了完全的隔离；&lt;/li&gt; 
 &lt;li&gt;故障隔离，当一个租户出现问题（比如进程崩溃），另外一个租户丝毫不受影响；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;基于这个技术，有的用户将不同的资源组放置到不同的物理机房内，实现同城 2 个机房的双活。&lt;/p&gt; 
&lt;p&gt;但是也存在一定的局限性：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;读写隔离场景下，当写入负载停止时，Tag 为 Write 的机器就处于空闲状态，从而降低整个集群的资源利用率，显然无法满足用户对资源充分利用的期望。&lt;/li&gt; 
 &lt;li&gt;多租户场景下，同一个租户内的多个业务方的负载之间也会相互影响。即使可以通过为每个业务方配置单独物理机来满足隔离性，却带来了高成本、低资源利用率等问题。&lt;/li&gt; 
 &lt;li&gt;灵活性差，租户的数量实际是跟副本数绑定的，如果要建立 5 个租户，那么至少需要有 5 个副本才可以，这在一定程度上造成了存储空间的浪费。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_2&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;基于 Workload Group 的负载管理方案&lt;/h2&gt; 
&lt;p&gt;为解决上述问题，Apache Doris 推出了基于 Workload Group 的管理方案，支持了更细粒度的资源隔离机制——进程内的资源隔离，这意味着同一个 BE 内多个 Query 间也可以实现一定程度上的隔离，有效避免了进程内的资源竞争，提高资源的利用率。&lt;/p&gt; 
&lt;p&gt;Workload Group 是通过对工作负载进行分组管理，实现对内存和 CPU 资源的精细化管控。通过将用户执行的 Query 与 Workload Group 相关联，限制单个 Query 在单个 BE 节点上的 CPU 和内存资源的百分比。同时可以配置开启内存资源限制，集群资源紧张时自动终止组内高内存占用查询以缓解压力。资源空闲时，多个 Workload Group 共享空闲资源并自动突破限制，确保查询稳定执行。&lt;/p&gt; 
&lt;p&gt;CPU 资源的限制可细分为软限和硬限，CPU 软限具备资源利用率更高的特点，允许在资源空闲时候灵活分配资源；而 CPU 硬限则更侧重于性能稳定性的保障，确保各 Group 之间不会因负载变化而相互干扰。&lt;/p&gt; 
&lt;p&gt;（&lt;em&gt;CPU 硬限和软限这两种隔离方式可匹配不同使用场景，但不可同时应用，用户可根据自身需求灵活选择）&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/Workload_Group_e4dba91c4d.png&quot; alt=&quot;基于 Workload Group 的负载管理方案.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Workload Group 与 Resource Tag 的方案主要有以下不同：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;从计算资源的角度来说，Workload Group 是对 BE 进程内的 CPU 和内存资源进一步划分，多个 Workload Group 需要在同一个 BE 上竞争资源。而 Resource Tag 则是对 BE 节点进行分组，不同业务方的负载发送到不同分组的 BE 上实现资源隔离，不同 BE 分组间的业务负载不会有直接的资源竞争。&lt;/li&gt; 
 &lt;li&gt;从存储资源的角度来说，Workload Group 无需关注存储资源，只关注单 BE 内计算资源的分配。Resource Tag 则需要对数据的副本进行分组，确保需要隔离的业务方数据分布在不同的 BE 上。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h3_3&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;01 CPU 软限制&lt;/h3&gt; 
&lt;p&gt;CPU 优先级主要通过参数 &lt;code&gt;cpu_share&lt;/code&gt; 体现，可以将它类比为权重的概念。在相同的时间周期内，权重越高的 Group 可以获得更多的 CPU 时间。&lt;/p&gt; 
&lt;p&gt;以 Group A 和 Group B 为例，若配置 Group A 的 &lt;code&gt;cpu_share&lt;/code&gt; 为 1、Group B 的 &lt;code&gt;cpu_share&lt;/code&gt; 为 9，给定 10s 的时间周期。当两者负载均饱和时，权重更高的 Group B 可以获得 CPU 的时间为 9s（所有资源的 90%），Group A 可获得 CPU 时间为 1s（所有资源的 10%）。而在实际使用中，并非所有业务都是满负载运行，若 Group B 的负载较低或无负载，那么 Group A 可以独占 10s 的 CPU 时间。这种方式可以提供更高的资源分配灵活性，从而提高集群 CPU 资源的整体利用率。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/CPU_e856b0fbad.png&quot; alt=&quot;CPU&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_4&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;02 CPU 硬限制&lt;/h3&gt; 
&lt;p&gt;使用 CPU 软限时，如果系统负载较高或 CPU 资源紧张时，可能引起查询性能的波动。为满足更用户对查询性能稳定的高要求， &lt;strong&gt;Apache Doris 在最新的 2.1 版本中，实现了 Workload Group 的 CPU 硬限制——无论当前物理机整体 CPU 是否空闲，配置了硬限的 Group 最大 CPU 用量不能超过预先配置的限制值。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;以 Group A 和 Group B 为例，若配置 Group A 的 &lt;code&gt;cpu_hard_limit=10%&lt;/code&gt;，Group B 的&lt;code&gt;cpu_hard_limit=90%&lt;/code&gt;。当两者单机 CPU 资源均达到饱和时， Group A 的 CPU 利用率为 10%， Group B 的 CPU 利用率为 90%，这与 CPU 软限是一样的。但是当 Group B 的负载降低或没有负载时，即便 Group A 增加查询负载，其最大 CPU 利用率仍被严格限制在 10%，无法获得更多的资源。虽然这种方式牺牲了资源分配的弹性，但也确保了查询性能的稳定性。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/CPU_ec2c0fd7f0.png&quot; alt=&quot;硬限制&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_5&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;03 内存资源限制&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;使用须知，BE 节点内存主要划分为以下几部分：&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;操作系统保留内存&lt;/li&gt; 
  &lt;li&gt;BE 进程内非查询部分的内存，暂时无法被 Workload Group 统计到。&lt;/li&gt; 
  &lt;li&gt;BE 进程内的查询部分的内存（包括导入操作），可被 Workload Group 统计并管理。&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;内存资源限制主要通过参数 &lt;code&gt;memory_limit&lt;/code&gt; 来限制（设置可以使用 BE 内存的百分比）。不仅可以设置预配置内存用量，还影响内存过度分配（Overcommit）之后的归还优先级。&lt;/p&gt; 
&lt;p&gt;在初始状态下，高优先级的资源组会被配置更多的内存、低优先级的资源组被分配较少的内存。为了提升内存的利用率，可以通过 &lt;code&gt;enable_memory_overcommit&lt;/code&gt; 开启资源组的内存软限制，如果系统有空闲内存资源时可以超限使用。&lt;/p&gt; 
&lt;p&gt;为了保证系统稳定运行，当系统整体内存资源不足时，系统将会优先取消占用内存较大的任务，以回收超额分配（Overcommit）的内存资源。在此过程中，系统会尽量保留高优先级的资源组内存资源，低优先级资源组超额内存将被更快收回。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/_153887415b.png&quot; alt=&quot;内存资源限制&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_6&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;04 查询排队&lt;/h3&gt; 
&lt;p&gt;当业务负载超过系统可承载上限时，继续提交新的查询不仅无法有效执行，还会对运行中的查询造成影响。为避免该问题出现，Workload Group 支持查询排队功能。当查询达到预设的最大并发时，新提交计划会进入排队逻辑，当队列已满或等待超时，查询会被拒绝，以此来缓解高负载下系统的压力。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/_6e1a32f528.png&quot; alt=&quot;查询排队.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;查询排队功能主要有三个属性：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;max_concurrency&lt;/code&gt;：当前 Group 允许同时运行的最大 SQL 数，如果超过最大数值，则进入排队逻辑。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;max_queue_size&lt;/code&gt;：排队队列中的允许最大查询个数，如果队列满了，那么查询会被拒绝、执行失败。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;queue_timeout&lt;/code&gt;：队列中排队的时间限制，如果超时会直接失败，单位是毫秒。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;参考文档：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fc.d4t.cn%2FA2KmBm&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://doris.apache.org/zh-CN/docs/admin-manual/workload-group&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;span id=&quot;OSC_h2_7&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;Workload Group 使用测试&lt;/h2&gt; 
&lt;p&gt;接下来，我们对 Workload Group 的 CPU 软限制和硬限制进行详细测试，以便为用户清晰呈现这两种限制在相同硬件条件下的负载管理效果与性能表现。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;测试环境：16 核 64G 内存单台物理机&lt;/li&gt; 
 &lt;li&gt;部署方式：1 台 FE、1 台 BE&lt;/li&gt; 
 &lt;li&gt;测试数据集：Clickbench、TPCH&lt;/li&gt; 
 &lt;li&gt;压测工具：JMeter&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h3_8&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;01 CPU 软限测试&lt;/h3&gt; 
&lt;p&gt;启动两个客户端（1、2），分别在未使用/使用 CPU 软限的前提下，测试 CPU 软限制对负载管理的效果。需要注意的是，在该测试中 Page Cache 会影响测试结果，需要关闭 Page Cache 才会达到理想的测试效果。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/CPU_a28bb3b520.png&quot; alt=&quot;CPU 软限测试.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;通过对比分析两次测试中的客户端的吞吐量数据，我们可以得出以下结论：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;未使用 Workload Group 的情况下&lt;/strong&gt;，两个客户端的吞吐量比例为 1:1，表明它们在相同运行时间内获得的 CPU 资源是相同的。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;使用 Workload Group 之后，&lt;/strong&gt; 分别设置 &lt;code&gt;cpu_share&lt;/code&gt; 为 2048 及 1024，结果表明吞吐量比例变为 2:1。这说明在相同的运行时间内，&lt;code&gt;cpu_share&lt;/code&gt;参数更大的客户端 1 获得了更高比例的 CPU 资源。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h3_9&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;02 CPU 硬限测试&lt;/h3&gt; 
&lt;p&gt;由上文介绍可知，CPU 硬限制在负载较高时，可以保证很好的隔离性。因此我们使用硬限限制 CPU 使用率为 50%（&lt;code&gt;cpu_hard_limit=50%&lt;/code&gt;），并使用同一客户端分别在并发数为 1、2、4 时（模拟不同负载）下执行 q23 查询测试，每次测试运行时间为 5 分钟。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/CPU_5bfebd10d0.jpeg&quot; alt=&quot;CPU 硬限测试.jpeg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;从上方测试结果可知，随着查询并发数的增加，CPU 的利用率的始终稳定在 800% 上下（在一个 16 核的机器上，800% 的意味着使用 8 个核，&lt;strong&gt;实际的 CPU 利用率，为 50%&lt;/strong&gt;）。由于 CPU 资源被硬限，因此在并发增加时，tp99 延时增加是符合预期的。&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_10&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;03 模拟生产环境测试&lt;/h3&gt; 
&lt;p&gt;在实际生产环境中，用户往往更关注查询的延迟性能而非单纯的吞吐量。为了更贴近实际应用场景并准确评估性能，我们选取了一系列延迟约为 1 秒的查询 SQL（包括 CKBench 的 q15、q17、q23 和 TPCH 的 q3、q7、q19），构成一个 SQL 集合。这些查询涵盖了单表聚合和 Join 计算等多种特性，使用的 TPCH 数据集大小为 100G。&lt;/p&gt; 
&lt;p&gt;我们设计了两组测试，分别模拟了未使用 Workload Group 和使用 Workload Group 的场景。在客户端 1 和客户端 2 上进行了四次测试，重点关注 tp90 和 tp99 的延迟情况。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.selectdb.com/static/_f8188b69dd.png&quot; alt=&quot;模拟生产环境测试.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;通过观察上表 4 次测试中查询延迟，可得出以下结论：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;未使用 Workload Group（测试 1、2）&lt;/strong&gt;：当客户端 2 的并发量从 1 增加到 4 时，客户端 1、2 的查询延迟均显著上升。对比客户端 1 的性能表现，median、tp90 和 tp95 查询响应时间均增加了 2-3 倍。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;使用 Workload Group（测试 3、4）：&lt;/strong&gt; 这两次测试中应用了 CPU 硬限制：设置客户端 1 &lt;code&gt;cpu_hard_limit=90%&lt;/code&gt;、客户端 2 &lt;code&gt;cpu_hard_limit=90%&lt;/code&gt;。从测试结果可知，即使客户端 2 的并发量增加，客户端 1 的查询延迟仅呈现小幅上升，明显优于测试 2 中性能表现。这一结果充分展现了 Workload Group 在负载隔离和性能稳定保障上的有效性。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_11&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;结束语&lt;/h2&gt; 
&lt;p&gt;目前 Resource Tag 和 Workload Group 功能已经在多个社区用户的生产业务中上线并得到大规模验证，推荐有资源隔离需求的用户使用。&lt;/p&gt; 
&lt;p&gt;无论是 Resource Tag 或是 Workload Group，其目标都在于&lt;strong&gt;在资源隔离的独立性和资源的利用率二者之间进行平衡&lt;/strong&gt;，前者采取了更彻底的隔离方案，而后者在保证隔离性的同时实现了资源的充分利用，并通过查询队列和任务排队机制进一步保证了在高工作负载场景下的系统稳定性。&lt;/p&gt; 
&lt;p&gt;在资源隔离的实际使用过程中，我们建议两种方案可以根据业务场景结合起来应用：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;如果是跨体系/跨业务部门之间共享同一集群，希望实现资源和数据的物理隔离，可以采取 Resource Tag 方案；&lt;/li&gt; 
 &lt;li&gt;如果是在同一集群内同时面对多种类型的查询负载，可以通过 Workload Group 将不同负载区分开来，通过灵活的资源分配保证多种查询负载均可以获得合适的资源；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;在后续的功能完善上，我们还有很多规划：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;当前内存限制通过 Cancel Query 来释放内存，未来通过算子落盘可以进一步提升大查询的稳定性、避免资源紧张时的查询任务失败。&lt;/li&gt; 
 &lt;li&gt;目前在 BE 进程的内存模型中，还存在部分非查询的内存未被统计到，这可能导致用户看到的 BE 进程内存和 Workload Group 使用内存之间存在差异，未来版本中将尝试解决这个问题。&lt;/li&gt; 
 &lt;li&gt;查询排队功能只支持根据最大查询并发数排队，未来将通过 BE 的资源用量来约束最大并发数，从而对客户端形成自动的反压，提升 Doris 在客户端持续提交高负载情况下的可用性。&lt;/li&gt; 
 &lt;li&gt;Resource Tag 功能是对 BE 机器资源的划分，Workload Group 则是对单机进程内的资源划分，这两种资源划分的方式都对用户暴露了 BE 节点的概念。而用户在使用资源管理功能时，本质上仅需要关注自己的工作负载在整个集内的可用资源量和资源分配的优先级。未来会探索资源划分新方式，降低用户的理解和使用成本。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_12&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;致谢&lt;/h2&gt; 
&lt;p&gt;Workload Group 功能是开源社区合作开发的项目，感谢以下同学的贡献：罗甑林（luozenglin），刘立家（liutang123），赵立伟（levy5307）&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/selectdb/blog/11054766</link>
            <guid isPermaLink="false">https://my.oschina.net/selectdb/blog/11054766</guid>
            <pubDate>Thu, 25 Apr 2024 06:47:29 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>美国废除绝大部分职业的《竞业禁止协议》</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;4 月 24 日，美国媒体 NPR &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.npr.org%2F2024%2F04%2F23%2F1246655366%2Fftc-bans-noncompete-agreements-lina-khan&quot; target=&quot;_blank&quot;&gt;报道称&lt;/a&gt;，美国联邦贸易委员会 (FTC) 周二发以 3 票对 2 票的微弱优势&lt;strong&gt;禁止了几乎所有职业的竞业禁止协议&lt;/strong&gt;。此类协议会禁止员工加入竞争企业或创办自己的企业。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-657098ad88ce07e1acce5c96073ba62e30e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;据称这是 50 多年来 FTC 官员首次发布一项规定，要求在整个经济范围内改变公司企业的竞争方式。&lt;/p&gt; 
&lt;p&gt;在投票的几个月前，FTC 收到了逾 2.6 万条公众意见。FTC 估计，从最低工资收入者到 CEO，美国有大约五分之一的从业者相当于 3000 万人受到了竞业禁止协议的约束。&lt;/p&gt; 
&lt;p&gt;很多人直到想要换工作时才知道自己签署了竞业禁止协议。&lt;/p&gt; 
&lt;p&gt;FTC 主席 Lina Khan 在一份声明中表示：「竞业禁止条款压低了工资，遏制了新想法，并剥夺了美国经济的活力。一旦禁止竞业禁止条款，每年将会有 8500 多家新的初创公司诞生，员工平均每年也将多赚 524 美元。」&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-6ce1bff7b6ae17ffeefd93492175c935f26.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Khan 表示，最终规定将公司企业通过在职场实施竞业禁止条款所攫取的权利交还给了美国人。她说：「抢夺人们的经济自由权也就抢夺了他们的各种其他自由权。」&lt;/p&gt; 
&lt;p&gt;FTC 于 2023 年 1 月提议修改规定。该委员会后来收到了 2.6 万条关于该方案的公众评论，绝大多数人赞同禁止。&lt;/p&gt; 
&lt;p&gt;倡导自由企业、一直反对禁令的美国商会则誓言要就这项规定起诉 FTC，称该规定是不必要的、非法的，是公然夺权。&lt;/p&gt; 
&lt;p&gt;美国商会总裁兼首席执行官 Suzanne Clark 在一份声明中表示：「这一决定为政府对企业的微观管理（即管得太细）开了一个危险的先例，可能会损害雇主、员工和我们的经济。」&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289441/ftc-bans-noncompete-agreements</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289441/ftc-bans-noncompete-agreements</guid>
            <pubDate>Thu, 25 Apr 2024 06:40:29 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>PHP 在 2024 年还值得学习吗？</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;IOBE 在&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/news/286796/tiobe-index-202404&quot;&gt;2024&amp;nbsp;年 4 月榜单&lt;/a&gt;中曾指出，随着众多竞争对手进入市场以及语言本身出现的一些问题；PHP 已经不复往日辉煌，在 TIOBE 指数中的排名跌至历史最低点（第 17 位）。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在有关 PHP 已经日渐没落的言论四起的背景下，软件工程师 &lt;/span&gt;Sotiris Kourouklis&amp;nbsp;&lt;span style=&quot;color:#000000&quot;&gt;近日发布了一篇名为「&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsotergreco.com%2Fis-php-still-worth-it-in-2024&quot; target=&quot;_blank&quot;&gt;Is PHP still worth it in 2024 ?&lt;/a&gt;」的博客文章，对 PHP 语言进行了一番详尽的分析，探讨该语言在现代 Web&amp;nbsp;开发中的实用性和效率。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;并最终得出结论称，&lt;strong&gt;PHP 在 2024 年仍然是 Web 开发的一个不错选择。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;以下为全文译文：&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;尽管许多人认为 PHP 是一种古老而不合格的语言，但在 2024 年，它仍然是所有网站中使用最多的语言。它的糟糕名声往往与 WordPress 有关，后者被认为是 21 世纪最糟糕的软件之一。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;撇开 WordPress 不谈，让我们快速了解一下 PHP 以及为什么它在 2024 年可能是 Web&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;开发的一个不错选择。&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;性能&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;PHP 随着时间的推移正在变得更快，尤其是最新版本，如 PHP 8.1 及以上版本，速度相当快。尽管在某些情况下它可能比 Go 或 Java 等编程语言慢，但在速度上，它至少可以与 Python 或 Node.js 媲美，甚至可能更快。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;203&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-138c3b04e87d1fef7bf375ce68eae75cd0b.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;开发速度&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;即使你不熟悉 PHP，它其实与 Python 非常相似，只有一些细微的差别。这种相似性有助于加快开发速度。从执行简单的 CRUD 操作，到处理文件、webhook 和 websocket，几乎所有事情都可以用最少的代码完成。这是因为几乎对于你可能需要完成的任何任务，都有现成的库可用，从而无需你自己编写大量代码。&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;部署&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;PHP 的关键优势之一是其部署的简便性，即使是在大规模应用中也是如此。只需一个简单的 PHP 服务器和 nginx，你就可以在几个小时内启动并运行&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;可扩展性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;那么可扩展性如何呢？当然，使用任何编程语言对应用程序进行负载均衡是必要的，尤其是当你每天接到数百万个请求时。但即便你没有，只要你在端点上正确实现缓存，就不会有任何问题。&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;代码整洁与可读性&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在编写整洁代码方面，PHP 可能会出现混乱。然而，使用像 Laravel 这样提供模板的框架就能解决这个问题。即使在拥有超过 20 万行代码（不包括自动生成的文件）的大型 API 中，只要保持代码简单，代码的可读性仍然可以非常高。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;我认为唯一更适合编写简洁代码的编程语言是 Python。&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;总之，建议使用 PHP/Laravel 构建主要的单体 API，因为其强大的框架功能能够简化大型代码库的管理。对于特殊需求，特别是涉及人工智能或其他 CPU 密集型操作的需求，可以考虑使用针对这些任务进行优化的其他编程语言。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;这种战略性的划分使你能够利用每种语言和技术的优势，确保项目在效率和可维护性方面表现出色。&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289440/is-php-still-worth-it-in-2024</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289440/is-php-still-worth-it-in-2024</guid>
            <pubDate>Thu, 25 Apr 2024 06:40:29 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>案例与脚本实践：DolphinDB 轻量级实时数仓的构建与应用</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                        
                                                                                            &lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;DolphinDB 高性能分布式时序数据库，具有分布式计算、事务支持、多模存储、及流批一体等能力，非常适合作为一款理想的轻量级大数据平台，轻松搭建一站式的高性能实时数据仓库。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;本教程将以案例与脚本的方式，介绍如何通过 DolphinDB 快速搭建实时数仓&lt;/strong&gt;，助力各个行业（如能源电力、航空航天、车联网、石油化工、矿业、智能制造、贸易政务、金融等）在复杂业务场景下快速实现海量数据的低延时复杂指标计算和分析。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;本教程包括原理介绍和实践操作，配套示例代码，&lt;strong&gt;用户可以根据教程，结合自身业务特点，动手搭建一个轻量级高性能的实时数据仓库&lt;/strong&gt;。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_1&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;1. 引言&lt;/h2&gt; 
&lt;span id=&quot;OSC_h3_2&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;1.1 案例背景与需求&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;随着大数据时代的来临，各行各业对数据处理的实时性和准确性要求越来越高。传统的离线数仓，虽然能够在一定程度上满足企业的数据存储和离线分析需求，但在处理大规模实时数据时，往往显得力不从心。尤其是在对数据实时性要求非常高的物联网和金融的头部企业，离线数仓的局限性更加明显。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;以电力行业的发电厂为例，每个发电厂都拥有大量的测点，这些测点实时采集着电站的运行数据。如何结合海量的电站运行数据，对实时数据进行精准复杂的计算和分析，成为了发电厂面临的一大挑战。传统的实时数据库欠缺对海量数据的聚合分析与计算能力，而传统大数据系统搭建的离线数仓由于处理速度慢、时延高、架构复杂，难以满足更深层次的业务需求。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;DolphinDB 作为一款轻量级一站式实时数仓解决方案，凭借其高性能分布式计算框架、实时流数据处理能力、分布式多模态存储引擎以及内存计算技术，成为了解决这一问题的理想选择。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;本文将通过 DolphinDB 实现一个典型的发电侧需求场景。在发电侧 4 万个测点秒采样的情况下，实时获取每个测点在 1 分钟、5 分钟、30 分钟、小时、天、月、直至最近 1 年的各项测点指标（最大值、最小值、平均值、中位数、95% 分位数、5% 分位数、变化量、变化率、开始值、结束值等），并且实现毫秒级查询响应。这些指标对于电站的运行监控、故障预警、能效分析，大数据展示等方面至关重要。&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_3&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;1.2 数据仓库的基本概念&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;数据仓库（Data Warehouse，简称 DW 或 DWH）是一种用于存储、处理和分析大量数据的系统，旨在支持特定业务场景下的决策制定过程。数据仓库也是一种技术架构，能够汇集并融合来自多个数据源（如 MySQL、Oracle、MongoDB、HBase 等）的异构数据（如数据表、Json、CSV、Protobuf 等），通过数据清洗、集成和转换，将数据整合至统一的存储体系（如 DolphinDB，Hadoop）中，从而支持业务的多维分析、数据挖掘以及精准决策。&lt;/p&gt; 
&lt;div&gt; 
 &lt;img height=&quot;536&quot; src=&quot;https://pic1.zhimg.com/80/v2-c6dcd67596578af4b731d4bd90699658_720w.webp&quot; width=&quot;1106&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;1.1 传统数据仓库典型架构图&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;数据仓库的重要性在于它能够帮助企业实现数据的集中管理和高效利用，根据用途和实时性区分，可以分为离线数仓和实时数仓两种类型。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;离线数据仓库通常采用 T -1 的方式实现，即每天定时（如凌晨）通过作业任务将前一天的历史数据导入数据仓库，再通过 OLAP（Online Analytical Processing） 对海量历史数据（批数据）进行分析查询。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;对于大部分企业来说，业务上迫切需要 T +0 实现实时风控、实时效果分析、实时过程管控等功能。传统离线数仓无法满足实时性要求，因此出现了兼顾实时性和分析性的新型数据仓库架构，即实时数仓。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;实时数仓在技术要求和实现难度上，要远远超过传统的数据仓库。相比传统数仓来说，实时数仓可以更高效的数据处理能力和实时（准实时）的数据更新频率。在低延时的性能要求下，需要解决数据源异构性、数据质量控制、事务和强一致性、多模存储、高性能聚合分析等技术难题。并且，如何让普通开发人员具备实时数仓的开发和运维能力，并持续稳定的进行产品迭代，也是非常大的考验。&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_4&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;1.3 传统的实时数仓典型架构&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;传统的实时数仓，通常以 Hadoop 大数据框架为基础，使用 Lambda 架构或 Kappa 架构。技术复杂，开发周期长，无论在开发人员成本、时间成本还是硬件投入成本等方面来看，对企业都是极大的负担。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;传统实时数仓典型的技术栈如下所示：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;采集（Sqoop、Flume、Flink CDC、DataX、Kafka）&lt;/li&gt; 
 &lt;li&gt;存储（HBase、HDFS、Hive、MySQL、MongoDB）&lt;/li&gt; 
 &lt;li&gt;数据加工和计算（Hive、Spark、Flink、Storm、Presto）&lt;/li&gt; 
 &lt;li&gt;OLAP 分析及查询（TSDB/HTAP、ES、Kylin、DorisDB）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;企业要落地应用传统的实时数仓，将会面临学习成本高、资源消耗大、扩展性和实时性不足等诸多问题。&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_5&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;1.4 DolphinDB 实时数仓架构与性能&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;与复杂的传统实时数仓不同，DolphinDB 可通过自身产品能力，快速实现轻量级实时数仓。既可独立进行采集、存储、流计算、ETL、决策分析与计算、可视化展示。亦可以作为企业已部署的各类第三方应用（如大数据平台、AI 中台、驾驶舱）的有效补充，为企业级应用系统、集团级数据中台提供实时数仓的技术支撑，以实现更复杂的应用场景。&lt;/p&gt; 
&lt;div&gt; 
 &lt;img height=&quot;606&quot; src=&quot;https://pic3.zhimg.com/80/v2-ef303091e8a454da6873c0a69e0bca2e_720w.webp&quot; width=&quot;930&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;DolphinDB 实时数仓业务架构图&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;DolphinDB 在物联网和金融等各行各业均拥有丰富且成熟的数据仓库实践案例，充分展现了其广泛的应用价值。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;以某省海关电子口岸公司的实时数仓项目为例，DolphinDB 构建的实时数仓充分发挥了 All In One 轻量级一站式的产品优势。支持多源异构数据的接入，兼容标准 SQL ，支持复杂的多表关联，强大的 ETL 数据清洗能力，极大缩短了数据处理链条，减少运维和开发成本。其业务架构及技术特点如下图所示：&lt;/p&gt; 
&lt;div&gt; 
 &lt;img height=&quot;829&quot; src=&quot;https://pic4.zhimg.com/80/v2-bb54f34b7dd2393ca16d850bae1b1477_720w.webp&quot; width=&quot;1503&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;某省电子口岸实时数仓项目业务架构图&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;以下是在三机高可用集群部署的情况下，DolphinDB 可支持的实时数仓性能指标参考：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;测点数量支持：&amp;gt;1 亿测点&lt;/li&gt; 
 &lt;li&gt;写入吞吐量：&amp;gt;1 亿测点/秒&lt;/li&gt; 
 &lt;li&gt;ODS 支持存储的记录数：&amp;gt; 1 万亿条&lt;/li&gt; 
 &lt;li&gt;客户端最大连接数：&amp;gt;5000&lt;/li&gt; 
 &lt;li&gt;并发查询（QPS）：&amp;gt; 5000&lt;/li&gt; 
 &lt;li&gt;多维度聚合查询：毫秒级&lt;/li&gt; 
 &lt;li&gt;实时流计算特征值提取：&amp;gt;50 万/秒&lt;/li&gt; 
 &lt;li&gt;单条记录、单进程的删改（软删除、upsert）同步耗时：≈ 10ms&lt;/li&gt; 
 &lt;li&gt;高可用集群：多副本（数据高可用），多控制节点（元数据高可用），客户端断线重连和故障切换（客户端高可用）&lt;/li&gt; 
 &lt;li&gt;弹性扩展：不停机水平扩展（加节点）、不停机垂直扩展（加磁盘卷），支持灰度升级&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_6&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;2. DolphinDB 实时数仓实践&lt;/h2&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;接下来，我们将以水电站发电机组设备实时监控的真实需求为案例，通过 DolphinDB 搭建轻量级实时数仓。该案例可应用于能源电力、工业物联网、车联网等行业中。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;欢迎大家动手尝试，一起来验证一下！&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_7&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;2.1 DolphinDB 安装部署&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;1. 下载官网社区最新版，建议 2.00.11 及以上版本。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;传送门：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fwww.dolphindb.cn%2Fdownloads%2FDolphinDB_Win64_V2.00.9.3.zip&quot; target=&quot;_blank&quot;&gt;https://cdn.dolphindb.cn/downloads/DolphinDB_Win64_V2.00.11.3.zip&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;2. windows 解压路径，不能有空格，避免安装到 Program Files 路径下。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;官网教程：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fdocs.dolphindb.cn%2Fzh%2Ftutorials%2Fdeploy_dolphindb_on_new_server.html&quot; target=&quot;_blank&quot;&gt;https://docs.dolphindb.cn/zh/tutorials/deploy_dolphindb_on_new_server.htm&lt;/a&gt;l&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;3. 本次测试使用企业版，license 可申请免费试用。如使用免费社区版，建议降低测试的数据量级。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;获取方式：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fdolphindb.cn%2Fproduct%2523downloads&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;background-color:transparent; color:transparent&quot;&gt;https://&lt;/span&gt;&lt;span&gt;dolphindb.cn/product#&lt;/span&gt;&lt;span style=&quot;background-color:transparent; color:transparent&quot;&gt;downloads&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;4. 安装及测试过程中，有任何问题，可后台私信咨询。&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_8&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;2.2 实时数仓指标需求&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;数据基本情况&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;测点个数：40000&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;采样频率：秒级&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;计算指标（聚合值）&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div&gt; 
 &lt;img height=&quot;97&quot; src=&quot;https://pic4.zhimg.com/80/v2-ce31230d9a3c69a299416d66364a127b_720w.webp&quot; width=&quot;805&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;span id=&quot;OSC_h3_9&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;2.3 实践方案规划&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;以 DolphinDB 流计算框架为基础，搭建边缘端轻量级实时数仓。所有计算结果在数据写入的同时高效完成，时延控制在毫秒级。&lt;/p&gt; 
&lt;div&gt; 
 &lt;img height=&quot;1081&quot; src=&quot;https://pic1.zhimg.com/80/v2-7f5ac0fa8b7ce01a05af07228ed9cf48_720w.webp&quot; width=&quot;1131&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;对于 1 分钟计算周期、5 分钟计算周期的指标，以原始实时数据为基表；&lt;/li&gt; 
 &lt;li&gt;对于 30 分钟计算周期、1 小时计算周期的指标，以 1 分钟计算结果为基表；&lt;/li&gt; 
 &lt;li&gt;对于 24 小时计算周期指标，以 5 分钟计算结果作为基表；&lt;/li&gt; 
 &lt;li&gt;对于 1 年计算周期指标，以 24 小时计算结果作为基表。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;每类指标的计算窗口及滑动步长如下表所示：&lt;/p&gt; 
&lt;table cellspacing=&quot;0&quot; style=&quot;-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; color:#191b1f; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Helvetica Neue&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Source Han Sans SC&amp;quot;,&amp;quot;Noto Sans CJK SC&amp;quot;,&amp;quot;WenQuanYi Micro Hei&amp;quot;,sans-serif; font-size:15px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin:1.4em auto; max-width:100%; orphans:2; table-layout:fixed; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:690px; word-spacing:0px&quot;&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th style=&quot;height:24px&quot;&gt;计算周期&lt;/th&gt; 
   &lt;th style=&quot;height:24px&quot;&gt;窗口长度&lt;/th&gt; 
   &lt;th style=&quot;height:24px&quot;&gt;滑动步长&lt;/th&gt; 
   &lt;th style=&quot;height:24px&quot;&gt;备注&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 分钟&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 分钟&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 分钟&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;每间隔 1 分钟，对过去 1 分钟窗口内的值进行计算&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;5 分钟&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;5 分钟&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;5 分钟&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;每间隔 5 分钟，对过去 5 分钟窗口内的值进行计算&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;30 分钟&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;30 分钟&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;30 分钟&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;每间隔 30 分钟，对过去 30 分钟窗口内的值进行计算&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 小时&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 小时&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 小时&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;每间隔 1 小时，对过去 1 小时窗口内的值进行计算&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;24 小时&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;24 小时&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;24 小时&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;每间隔 24 小时，对过去 24 小时窗口内的值进行计算&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 年&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;1 年&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;24 小时&lt;/td&gt; 
   &lt;td style=&quot;border-color:#c4c7ce; border-style:solid; border-width:1px; height:24px&quot;&gt;每间隔 1 天，对过去 1 年窗口内的值进行计算&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;span id=&quot;OSC_h2_10&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;3. 性能测试及结果&lt;/h2&gt; 
&lt;span id=&quot;OSC_h3_11&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;3.1 测试环境&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;为了方便测试和验证，采用单机单节点的部署方式实现轻量级实时数仓，服务器配置如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CPU：12 核&lt;/li&gt; 
 &lt;li&gt;内存：32GB&lt;/li&gt; 
 &lt;li&gt;磁盘：1.1T HDD 150MB/s&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;通过脚本模拟全量测点（40000）24 小时内的实时数据（2023.01.01T00:00:00—2023.01.02T00:00:01.000），进行 1 分钟、5 分钟、30 分钟、1 小时、24 小时的窗口聚合计算，并将计算结果写入分布式数据库。（在某个窗口内，数据条数有可能比窗口长度要小）&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;对于 1 年窗口的计算，另模拟 24 小时窗口计算结果实时数据，对该模拟的结果进行实时聚合计算。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;详细的测试脚本，包含在文末的附件中。&lt;/p&gt; 
&lt;span id=&quot;OSC_h3_12&quot;&gt;&lt;/span&gt; 
&lt;h3&gt;3.2 测试结果&lt;/h3&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;性能测试结果见下表：&lt;/p&gt; 
&lt;div&gt; 
 &lt;img height=&quot;366&quot; src=&quot;https://pic4.zhimg.com/80/v2-34ede83e34d89088149c56a5c0a5ed0b_720w.webp&quot; width=&quot;766&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;注：上表中，全部测点计算耗时为时间窗口内所有测点指标计算的耗时；单测点/多测点计算耗时为时间窗口内所选测点指标计算的耗时。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_13&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;4. 总结&lt;/h2&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;通过本教程的学习和实践，我们深入了解了 DolphinDB 在构建轻量级实时数仓方面的强大能力。DolphinDB 以其高性能、分布式、实时计算的特点，为各个行业提供了快速实现海量数据低延时复杂指标计算和分析的有力工具。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;通过实践操作，我们可以体验到了 DolphinDB 的易用性和高效性。无论是数据导入、数据查询还是复杂的流式计算，DolphinDB 都提供了简洁明了的语法和强大的功能。附件中所提供的脚本不仅包括 DolphinDB 的基本使用和操作方法，更能够深入了解实时数仓的构建原理和应用场景。这使得我们可以快速构建出符合业务需求的实时数仓，并实时响应各种复杂的分析需求。&lt;/p&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;最后，希望读者能够结合本教程的示例代码和自身业务特点，动手搭建一个轻量级高性能的实时数据仓库。在实际应用中，不断挖掘 DolphinDB 的潜力，无论是能源电力、石油化工、智能制造、航空航天还是车联网、金融等行业，DolphinDB 均可为实时数仓的广泛应用提供有力支持。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_14&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;5. 附件&lt;/h2&gt; 
&lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;测试结果可通过以下脚本，在 DolphinDB 服务器上进行复现：&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;def clearEnv(){
    //取消订阅
    unsubscribeTable(tableName=`inputStream, actionName=&quot;dispatch1&quot;)
    unsubscribeTable(tableName=`inputStream, actionName=&quot;dispatch2&quot;)
    unsubscribeTable(tableName=`oneMinuteResult, actionName=&quot;calcHalfHour&quot;)
    unsubscribeTable(tableName=`oneMinuteResult, actionName=&quot;calcOneHour&quot;)
    unsubscribeTable(tableName=`fiveMinuteResult, actionName=&quot;calcOneDay&quot;)
    unsubscribeTable(tableName = `oneDayResultSimulate,actionName=`calcOneYear)

    unsubscribeTable(tableName = `oneMinuteResult,actionName=`appendInToDFS)
    unsubscribeTable(tableName = `fiveMinuteResult,actionName=`appendInToDFS)
    unsubscribeTable(tableName = `halfHourResult,actionName=`appendInToDFS)
    unsubscribeTable(tableName = `oneHourResult,actionName=`appendInToDFS)
    unsubscribeTable(tableName = `oneDayResult,actionName=`appendInToDFS)
    unsubscribeTable(tableName = `oneYearResult,actionName=`appendInToDFS)

    //删除流计算引擎
    for(i in 1..2){
        try{dropStreamEngine(`dispatchDemo+string(i))}catch(ex){print(ex)}
    }
    for(i in 1..5){
        try{dropStreamEngine(`oneMinuteCalc+string(i))}catch(ex){print(ex)}
        try{dropStreamEngine(`fiveMinuteCalc+string(i))}catch(ex){print(ex)}
    }
    try{dropStreamEngine(`halfHourCalc)}catch(ex){print(ex)}
    try{dropStreamEngine(`oneHourCalc)}catch(ex){print(ex)}
    try{dropStreamEngine(`oneDayCalc)}catch(ex){print(ex)}
    try{dropStreamEngine(`oneYearCalc)}catch(ex){print(ex)}

    //删除流数据表
    try{dropStreamTable(`inputStream)}catch(ex){print(ex)}
    try{dropStreamTable(`oneMinuteResult)}catch(ex){print(ex)}
    try{dropStreamTable(`fiveMinuteResult)}catch(ex){print(ex)}
    try{dropStreamTable(`halfHourResult)}catch(ex){print(ex)}
    try{dropStreamTable(`oneHourResult)}catch(ex){print(ex)}
    try{dropStreamTable(`oneDayResult)}catch(ex){print(ex)}
    try{dropStreamTable(`oneDayResultSimulate)}catch(ex){print(ex)}
    try{dropStreamTable(`oneYearResult)}catch(ex){print(ex)}

}

def createStreamTable(){
    //定义输入流表
    enableTableShareAndPersistence(table = streamTable(1000:0,`Time`deviceId`value,`TIMESTAMP`SYMBOL`DOUBLE),
            tableName = `inputStream,cacheSize = 1000000,precache=1000000)

    colName = `Time`deviceId`filterTime`MAX`MIN`MEAN`MED`P95`P5`CHANGE`CHANGE_RATE`first`last`endTime
    colType = `TIMESTAMP`SYMBOL`NANOTIMESTAMP join take(`DOUBLE,10) join `NANOTIMESTAMP
    //定义 1 分钟窗口计算结果流表            
    enableTableShareAndPersistence(table = streamTable(1000:0,colName,colType),
        tableName = `oneMinuteResult,cacheSize = 1000000,precache=1000000)

    //定义 5 分钟窗口计算结果流表            
    enableTableShareAndPersistence(table = streamTable(1000:0,colName,colType),
        tableName = `fiveMinuteResult,cacheSize = 1000000,precache=1000000)

    //定义 30 分钟窗口计算结果流表            
    enableTableShareAndPersistence(table = streamTable(1000:0,colName,colType),
        tableName = `halfHourResult,cacheSize = 1000000,precache=1000000)

    //定义 1 小时窗口计算结果流表            
    enableTableShareAndPersistence(table = streamTable(1000:0,colName,colType),
        tableName = `oneHourResult,cacheSize = 1000000,precache=1000000)
    
    //定义 24 小时窗口计算结果流表            
    enableTableShareAndPersistence(table = streamTable(1000:0,colName,colType),
        tableName = `oneDayResult,cacheSize = 1000000,precache=1000000)

    //定义模拟 24 小时窗口计算结果流表
    colName = `TIME`deviceId`MAX`MIN`MEAN`MED`P95`P5`CHANGE`CHANGE_RATE`first`last
    colType = `DATE`SYMBOL join take(`DOUBLE,10)           
    enableTableShareAndPersistence(table = streamTable(1000:0,colName,colType),
        tableName = `oneDayResultSimulate,cacheSize = 1000000,precache=1000000)

    //定义 1 年窗口计算结果流表
    colName = `Time`deviceId`filterTime`MAX`MIN`MEAN`MED`P95`P5`CHANGE`CHANGE_RATE`first`last`endTime
    colType = `DATE`SYMBOL`NANOTIMESTAMP join take(`DOUBLE,10) join `NANOTIMESTAMP            
    enableTableShareAndPersistence(table = streamTable(1000:0,colName,colType),
       tableName = `oneYearResult,cacheSize = 1000000,precache=1000000)    
}

def createDFS(){
    //创建存储计算 1 分钟窗口计算结果表
    if(existsDatabase(&quot;dfs://oneMinuteCalc&quot;)){dropDatabase(&quot;dfs://oneMinuteCalc&quot;)}
    db1 = database(, VALUE,2023.01.01..2023.01.03)
    db2 = database(, HASH,[SYMBOL,20])
    db = database(directory=&quot;dfs://oneMinuteCalc&quot;, partitionType=COMPO, partitionScheme=[db1,db2],engine=&quot;TSDB&quot;)
    colName =  `Time`deviceId`filterTime`MAX`MIN`MEAN`MED`P95`P5`CHANGE`CHANGE_RATE`first`last`endTime
    colType = `TIMESTAMP`SYMBOL`NANOTIMESTAMP join take(`DOUBLE,10) join `NANOTIMESTAMP
    t = table(1:0,colName,colType)
    pt = db.createPartitionedTable(table=t,tableName =&quot;test&quot; ,partitionColumns = [&quot;Time&quot;,&quot;deviceId&quot;],
            sortColumns =[&quot;deviceId&quot;,&quot;Time&quot;],compressMethods={Time:&quot;delta&quot;})

    //创建存储计算 5 分钟窗口计算结果表        
    if(existsDatabase(&quot;dfs://fiveMinuteCalc&quot;)){dropDatabase(&quot;dfs://fiveMinuteCalc&quot;)}
    db = database(directory=&quot;dfs://fiveMinuteCalc&quot;, partitionType=VALUE,
           partitionScheme=2023.01.01..2023.01.03,engine=&quot;TSDB&quot;)
    t = table(1:0,colName,colType)
    pt = db.createPartitionedTable(table=t,tableName =&quot;test&quot; ,partitionColumns = [&quot;Time&quot;],
            sortColumns =[&quot;deviceId&quot;,&quot;Time&quot;],compressMethods={Time:&quot;delta&quot;},
            sortKeyMappingFunction=[hashBucket{,100}])        

    //创建存储计算 30 分钟窗口计算结果表
    if(existsDatabase(&quot;dfs://halfHourCalc&quot;)){dropDatabase(&quot;dfs://halfHourCalc&quot;)}
    db = database(directory=&quot;dfs://halfHourCalc&quot;, partitionType=VALUE, 
            partitionScheme=2023.01.01..2023.01.03,engine=&quot;TSDB&quot;)
    t = table(1:0,colName,colType)
    pt = db.createPartitionedTable(table=t,tableName =&quot;test&quot; ,partitionColumns = [&quot;Time&quot;],
            sortColumns =[&quot;deviceId&quot;,&quot;Time&quot;],compressMethods={Time:&quot;delta&quot;})  

    //创建存储计算 1 小时窗口计算结果表
    if(existsDatabase(&quot;dfs://oneHourCalc&quot;)){dropDatabase(&quot;dfs://oneHourCalc&quot;)}
    db = database(directory=&quot;dfs://oneHourCalc&quot;, partitionType=VALUE,
             partitionScheme=2023.01.01..2023.01.03,engine=&quot;TSDB&quot;)
    t = table(1:0,colName,colType)
    pt = db.createPartitionedTable(table=t,tableName =&quot;test&quot; ,partitionColumns = [&quot;Time&quot;],
            sortColumns =[&quot;deviceId&quot;,&quot;Time&quot;],compressMethods={Time:&quot;delta&quot;})
            
    //创建存储计算 24 小时窗口计算结果表
    if(existsDatabase(&quot;dfs://oneDayCalc&quot;)){dropDatabase(&quot;dfs://oneDayCalc&quot;)}
    db = database(directory=&quot;dfs://oneDayCalc&quot;, partitionType=VALUE, 
          partitionScheme=2023.01.01..2023.01.03,engine=&quot;TSDB&quot;)
    t = table(1:0,colName,colType)
    pt = db.createPartitionedTable(table=t,tableName =&quot;test&quot; ,partitionColumns = [&quot;Time&quot;],
            sortColumns =[&quot;deviceId&quot;,&quot;Time&quot;],compressMethods={Time:&quot;delta&quot;})

    //创建存储计算 1 年窗口计算结果表
    if(existsDatabase(&quot;dfs://oneYearCalc&quot;)){dropDatabase(&quot;dfs://oneYearCalc&quot;)}
    db = database(directory=&quot;dfs://oneYearCalc&quot;, partitionType=VALUE, 
          partitionScheme=2023.01.01..2023.01.03,engine=&quot;TSDB&quot;)
    t = table(1:0,colName,colType)
    pt = db.createPartitionedTable(table=t,tableName =&quot;test&quot; ,partitionColumns = [&quot;Time&quot;],
            sortColumns =[&quot;deviceId&quot;,&quot;Time&quot;],compressMethods={Time:&quot;delta&quot;})
}

//1 分钟窗口计算过滤函数
def filter1(msg){
    t = select *,now(true) as filterTime from msg 
    getStreamEngine(`dispatchDemo1).append!(t)
}

//5 分钟窗口计算过滤函数
def filter2(msg){
    t = select *,now(true) as filterTime from msg 
    getStreamEngine(`dispatchDemo2).append!(t)
}

//30 分钟窗口计算过滤函数
def filter3(msg){
    t = select *,now(true) as filterTime2 from msg 
    getStreamEngine(`halfHourCalc).append!(t)
}

//1 小时窗口计算
def filter4(msg){
    t = select *,now(true) as filterTime2 from msg 
    getStreamEngine(`oneHourCalc).append!(t)
}

//24 小时窗口计算
def filter5(msg){
    t = select *,now(true) as filterTime2 from msg 
    getStreamEngine(`oneDayCalc).append!(t)
}

clearEnv();
createStreamTable();
createDFS();

schemas1 = table(1:0,`Time`deviceId`value`filterTime,`TIMESTAMP`SYMBOL`DOUBLE`NANOTIMESTAMP)
metrics1 = &amp;lt;[first(filterTime),max(value),min(value),mean(value),med(value),percentile(value,95),
              percentile(value,5),last(value)-first(value),
              (last(value)-first(value))/first(value),first(value),last(value),now(true)]&amp;gt;
//创建 1 分钟窗口聚合计算引擎
for(i in 1..5){
    engine1 = createTimeSeriesEngine(name=&quot;oneMinuteCalc&quot;+string(i), windowSize=60000, step=60000,
                metrics=metrics1 , dummyTable=schemas1 , outputTable=objByName(`oneMinuteResult),
                timeColumn = `Time, useSystemTime=false, keyColumn = `deviceId)
}

//创建 5 分钟窗口聚合计算引擎
for(i in 1..5){
    engine2 = createTimeSeriesEngine(name=&quot;fiveMinuteCalc&quot;+string(i), windowSize=300000, step=300000, 
                metrics=metrics1 , dummyTable=schemas1 , outputTable=objByName(`fiveMinuteResult),
                timeColumn = `Time, useSystemTime=false, keyColumn = `deviceId)
}

//1 分钟、5 分钟窗口聚合计算分发引擎
dispatchEngine1=createStreamDispatchEngine(name=&quot;dispatchDemo1&quot;, dummyTable=schemas1, keyColumn=`deviceId, 
        outputTable=[getStreamEngine(&quot;oneMinuteCalc1&quot;),getStreamEngine(&quot;oneMinuteCalc2&quot;),
                        getStreamEngine(&quot;oneMinuteCalc3&quot;),getStreamEngine(&quot;oneMinuteCalc4&quot;),
                        getStreamEngine(&quot;oneMinuteCalc5&quot;)])
dispatchEngine2=createStreamDispatchEngine(name=&quot;dispatchDemo2&quot;, dummyTable=schemas1, keyColumn=`deviceId, 
        outputTable=[getStreamEngine(&quot;fiveMinuteCalc1&quot;),getStreamEngine(&quot;fiveMinuteCalc2&quot;),
                        getStreamEngine(&quot;fiveMinuteCalc3&quot;),getStreamEngine(&quot;fiveMinuteCalc4&quot;),
                        getStreamEngine(&quot;fiveMinuteCalc5&quot;)])


colName =  `Time`deviceId`filterTime`MAX`MIN`MEAN`MED`P95`P5`CHANGE`CHANGE_RATE`first`last`endTime`filterTime2
colType = `TIMESTAMP`SYMBOL`NANOTIMESTAMP join take(`DOUBLE,10) join `NANOTIMESTAMP`NANOTIMESTAMP
schemas2 = table(1:0,colName,colType)
metrics2 = &amp;lt;[first(filterTime2),max(MAX),min(MIN),mean(MEAN),med(MED),avg(P95),avg(P5),last(last)-first(first),
                (last(last)-first(first))/first(first),first(first),last(last),now(true)]&amp;gt;
//创建 30 分钟窗口聚合计算引擎
engine3 = createTimeSeriesEngine(name=&quot;halfHourCalc&quot;, windowSize=1800000, step=1800000, metrics=metrics2 , 
                dummyTable=schemas2 , outputTable=objByName(`halfHourResult),
                timeColumn = `Time, useSystemTime=false, keyColumn = `deviceId)

//创建 1 小时窗口聚合计算引擎
engine4 = createTimeSeriesEngine(name=&quot;oneHourCalc&quot;, windowSize=3600000, step=3600000, metrics=metrics2 , 
                dummyTable=schemas2 , outputTable=objByName(`oneHourResult),
                timeColumn = `Time, useSystemTime=false, keyColumn = `deviceId)

//创建 24 小时窗口聚合计算引擎
engine5 = createTimeSeriesEngine(name=&quot;oneDayCalc&quot;, windowSize=86400000, step=86400000, 
                metrics=metrics2 , dummyTable=schemas2 , outputTable=objByName(`oneDayResult),
                timeColumn = `Time, useSystemTime=false, keyColumn = `deviceId)


//订阅
subscribeTable(tableName=`inputStream, actionName=&quot;dispatch1&quot;, handler=filter1, msgAsTable = true,
          batchSize = 10240)
subscribeTable(tableName=`inputStream, actionName=&quot;dispatch2&quot;, handler=filter2, msgAsTable = true,
          batchSize = 10240)

subscribeTable(tableName=`oneMinuteResult, actionName=&quot;calcHalfHour&quot;, handler=filter3,
           msgAsTable = true,batchSize = 10240)
subscribeTable(tableName=`oneMinuteResult, actionName=&quot;calcOneHour&quot;, handler=filter4, 
          msgAsTable = true,batchSize = 10240)
subscribeTable(tableName=`fiveMinuteResult, actionName=&quot;calcOneDay&quot;, handler=filter5, 
          msgAsTable = true,batchSize = 10240)


subscribeTable(tableName = `oneMinuteResult,actionName=`appendInToDFS,offset=0,
          handler=loadTable(&quot;dfs://oneMinuteCalc&quot;,&quot;test&quot;),
          msgAsTable=true,batchSize=10240)
subscribeTable(tableName = `fiveMinuteResult,actionName=`appendInToDFS,offset=0,
          handler=loadTable(&quot;dfs://fiveMinuteCalc&quot;,&quot;test&quot;),
          msgAsTable=true,batchSize=10240)
subscribeTable(tableName = `halfHourResult,actionName=`appendInToDFS,offset=0,
          handler=loadTable(&quot;dfs://halfHourCalc&quot;,&quot;test&quot;),
          msgAsTable=true,batchSize=10240)
subscribeTable(tableName = `oneHourResult,actionName=`appendInToDFS,offset=0,
          handler=loadTable(&quot;dfs://oneHourCalc&quot;,&quot;test&quot;),
          msgAsTable=true,batchSize=10240)
subscribeTable(tableName = `oneDayResult,actionName=`appendInToDFS,offset=0,
          handler=loadTable(&quot;dfs://oneDayCalc&quot;,&quot;test&quot;),
          msgAsTable=true,batchSize=10240)


def filter6(msg){
    tmp = select * ,now(true) as filterTime from msg 
    getStreamEngine(`oneYearCalc).append!(tmp)
}        

colName =  `Time`deviceId`MAX`MIN`MEAN`MED`P95`P5`CHANGE`CHANGE_RATE`first`last`filterTime
colType = `DATE`SYMBOL join take(`DOUBLE,10) join `NANOTIMESTAMP
schemas3 = table(1:0,colName,colType)
metrics3 = &amp;lt;[last(filterTime),max(MAX),min(MIN),mean(MEAN),med(MED),avg(P95),avg(P5),last(last)-first(first),
                (last(last)-first(first))/first(first),first(first),last(last),now(true)]&amp;gt;
engine6 = createTimeSeriesEngine(name=&quot;oneYearCalc&quot;, windowSize=365, step=1, metrics=metrics3 , 
            dummyTable=schemas3 , outputTable=objByName(`oneYearResult),
            timeColumn = `Time, useSystemTime=false, keyColumn = `deviceId)

subscribeTable(tableName = `oneDayResultSimulate,actionName=`calcOneYear, handler=filter6, 
            msgAsTable = true,batchSize = 10240)
subscribeTable(tableName = `oneYearResult,actionName=`appendInToDFS,offset=0,
            handler=loadTable(&quot;dfs://oneYearCalc&quot;,&quot;test&quot;),
            msgAsTable=true)



deviceIdList = lapd(string(rand(10000,700)),6,&quot;0&quot;)  //测点 id

//模拟数据的函数，一共模拟 1 小时的数据
def simulateData(deviceIdList){
    num = deviceIdList.size()
    startTime = timestamp(2023.01.01)
    do{
        Time = take(startTime,num)
        deviceId = deviceIdList
        value = rand(100.0,num)
        objByName(`inputStream).append!(table(Time,deviceId,value))
        startTime = startTime+1000
        sleep(100)
    }while(startTime&amp;lt;=2023.01.02T00:00:10.000)
}

def simulateOneDay(deviceIdList){
    num = deviceIdList.size()
    startTime =2022.01.01
    do{
        Time = take(startTime,num)
        deviceId = deviceIdList
        MAX = rand(100.0,num)
        MIN = rand(100.0,num)
        MEAN = rand(100.0,num)
        MED = rand(100.0,num)
        P95 = rand(100.0,num)
        P5 = rand(100.0,num)
        CHANGE = rand(100.0,num)
        CHANGE_RATE = rand(100.0,num)
        first = rand(100.0,num)
        last = rand(100.0,num)
        tmp = table(Time,deviceId,MAX,MIN,MEAN,MED,P95,P5,CHANGE,CHANGE_RATE,first,last)
        objByName(`oneDayResultSimulate).append!(tmp)
        startTime = startTime+1
        sleep(500)
    }while(startTime&amp;lt;=2023.12.31)
}


submitJob(&quot;simulateData&quot;,&quot;write&quot;,simulateData,deviceIdList)
submitJob(&quot;simulateOneDay&quot;,&quot;write&quot;,simulateOneDay,deviceIdList)


//耗时统计
tmp1 = select Time,deviceId,filterTime,endTime from loadTable(&quot;dfs://oneYearCalc&quot;,&quot;test&quot;) order by Time,deviceId
tmp2 = select Time,deviceId,next(filterTime) as startTime,endTime from tmp1 context by deviceId
select avg(endTime-startTime)\1000\1000 as timeUsed from tmp2 group by deviceId  //统计单个测点的计算耗时
tmp3 = select min(startTime) as st,max(endTime) as dt from tmp2 group by Time  
select (dt-st)\1000\1000 as used from tmp3 //统计整个时间窗口的计算耗时&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt;
                                                                                    &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/4865736/blog/11054780</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4865736/blog/11054780</guid>
            <pubDate>Thu, 25 Apr 2024 03:46:20 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>苹果开源面向移动设备打造的小尺寸模型 OpenELM</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;在 WWDC24 之前，苹果在 Hugging Face 平台上发布了一个「具有开源训练和推理框架的高效语言模型」，名为 OpenELM。&lt;/p&gt; 
&lt;p&gt;官方介绍称：大型语言模型的可重复性和透明性对于推进开放研究、确保结果的可信度以及调查数据和模型偏差以及潜在风险至关重要。为此，我们发布了 OpenELM，一个最先进的开源语言模型。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6f1c87c8957e0c4f4a27e1d3fd76bc1044e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;OpenELM 使用分层缩放策略，可以有效地分配 Transformer 模型每一层的参数，从而提高准确率。例如，在参数量约为 10 亿的情况下，OpenELM 与 OLMo 相比准确率提升了 2.36%，同时所需的预训练 tokens 数量仅有原来的 50%。&lt;/p&gt; 
&lt;p&gt;OpenELM 有四种尺寸：2.7 亿、4.5 亿、11 亿和 30 亿个参数。而微软 Phi-3 模型为 38 亿，因此前者在小型机型上运行成本更低，可在手机和笔记本电脑等移动设备上运行，是做 AI 硬件的绝佳小模型。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;OpenELM 核心特性如下&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;功能：该模型能够执行生成文本、代码、翻译、总结摘要等功能。&lt;/li&gt; 
 &lt;li&gt;预训练数据：尽管最小的模型只有 2.7 亿参数，但苹果使用了 1.8 万亿 tokens 的数据进行预训练，这是其小参数下仍能表现出色的原因之一。&lt;/li&gt; 
 &lt;li&gt;苹果的开源策略：苹果通常在手机领域采取闭源策略，但此次开源可能是为了吸引用户，未来可能会推出闭源产品实现商业化。&lt;/li&gt; 
 &lt;li&gt;技术贡献：苹果不仅发布了模型权重和推理代码，还发布了完整的训练和评估框架，包括数据准备、模型训练、微调和评估流程，以及多个预训练检查点和训练日志。&lt;/li&gt; 
 &lt;li&gt;OpenELM 架构：OpenELM 的架构，包括其技术创新点，如无编码器的 transformer 架构、层级缩放策略、不使用全连接层中的可学习偏置参数等。&lt;/li&gt; 
 &lt;li&gt;训练流程与数据集：苹果使用 CoreNet 作为训练框架，Adam 优化算法，以及动态分词和数据过滤的方法。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;论文地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2404.14619&quot; target=&quot;_blank&quot;&gt;https://arxiv.org/abs/2404.14619&lt;/a&gt;&lt;br&gt; 模型地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fapple%2FOpenELM&quot; target=&quot;_blank&quot;&gt;https://huggingface.co/apple/OpenELM&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289394/apple-openelm</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289394/apple-openelm</guid>
            <pubDate>Thu, 25 Apr 2024 03:08:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>Atlassian 开源最强「实用」前端拖拽组件：性能和兼容性俱佳、支持跨窗口拖动、适用于任何前端框架</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;​Pragmatic drag and drop 是一款前端拖拽组件，由知名软件开发公司 Atlassian 开源。&lt;/p&gt; 
&lt;p&gt;正如名字中的&amp;nbsp;Pragmatic（「实用」）所言，该组件支持许多拖拽场景，十分注重性能，并且通过使用浏览器强大而灵活的内置拖拽功能变得安全而简单。&lt;/p&gt; 
&lt;p&gt;目前&amp;nbsp;Atlassian 公司旗下核心产品 Trello、Jira 和 Confluence 等均使用了&amp;nbsp;Pragmatic&amp;nbsp;drag and drop。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-069de10d4ff639cca6480f25d48b742c307.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在 Pragmatic&amp;nbsp;drag and drop 之前，该组件作者 Alex Reardon 还打造了另一款流行的 React 开源拖拽组件&amp;nbsp;&lt;strong&gt;react-beautiful-dnd&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;与之相比，Pragmatic&amp;nbsp;drag and drop 支持了更多的拖拽场景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;列表&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;面板&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;表格&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;树&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Grids&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Drawing&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Resizing&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-94b6db72d4113d06c166d6f96526d61654f.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;下图展示了 Pragmatic Drag and Drop 在不同场景的运行效果：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-dbf425a891de9dbbc643f2e1dd09a719759.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-1a1d06ccd389f1df79d68fc064a4782d48c.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Pragmatic drag and drop 还支持在任何前端框架（如 React、Svelte、Vue、Angular）中使用，不受特定技术栈的限制。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8c77133d269dab03a7d429d112d2bd3ed2d.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在不同框架中使用的写法如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;React&lt;br&gt; &lt;br&gt; &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-00e35c0e3d694933f9112098dd6864080ca.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Svelte&lt;br&gt; &lt;br&gt; &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c3494a999b592b17d69eacc5ca002608a51.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;JS&lt;br&gt; &lt;br&gt; &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1a47c9ab905b482c197e690100d6484a94f.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;对比其他同类型的开源拖拽组件，Pragmaticdrag and drop&amp;nbsp;核心包经过压缩后更加轻量，仅 4.7kb。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-55df7155c1ff15a0b672074e83653c583d9.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;性能方面，对比以下同类型开源框架：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;react-beautiful-dnd&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;react-dnd&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;dnd-kit&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Pragmaticdrag and drop 的&amp;nbsp;TTI 指标可谓是「遥遥领先」。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;TTI: Time to Interactive，可交互时间。该指标主要用于测量页面从开始加载到主要子资源完成渲染，并能够快速、可靠地响应用户输入所需要的时间。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-145754a9398db4c824b6bd3246b3ac84e91.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;参考链接&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D5SQkOyzZLHM&quot; target=&quot;_blank&quot;&gt;https://www.youtube.com/watch?v=5SQkOyzZLHM&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fatlassian.design%2Fcomponents%2Fpragmatic-drag-and-drop%2Fabout&quot; target=&quot;_blank&quot;&gt;https://atlassian.design/components/pragmatic-drag-and-drop/about&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMjM5OTExNzQ3NQ%3D%3D%26mid%3D2450963563%26idx%3D1%26sn%3Dc5a58b5b52dbf9e36123cb923db4dfd4%26chksm%3Db1224ba78655c2b1004c1f9e085b89c32060af4477fe9c15a44e756df33bbefe3e7d086cc185%26poc_token%3DHArEKWajFvhQDByJ05Dti33GLNu_z4q8albNvq6z&quot; target=&quot;_blank&quot;&gt;https://mp.weixin.qq.com/&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289391</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289391</guid>
            <pubDate>Thu, 25 Apr 2024 02:47:38 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>eMule v0.50b CN-9 Build 540 LTS（中国驴 CN Mod）</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;eMule CN Mod（中国驴）是由中国程序员开发的的一款 eMule mod。它拥有较好的上传能力，改进了的随机上传队列、下载带宽分配、下载磁盘缓存、客户端匹配等算法，支持&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.emulefans.com%2Fnews%2Fplugin%2Fdlp%2F&quot; target=&quot;_blank&quot;&gt;反吸血 DLP&lt;/a&gt;和显示地区名称的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.emulefans.com%2Fnews%2Fplugin%2Fip-to-country%2F&quot; target=&quot;_blank&quot;&gt;IP 定位&lt;/a&gt;功能。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3c335e76b0ca7e692778c705daccad86bc4.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;中国驴 CN Mod 的开发者 Enig123 于 2021 年新建了一个 CN Mod 的官方网站&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.emule-secret.com%2F&quot; target=&quot;_blank&quot;&gt;emule-secret.com&lt;/a&gt;，并发布了新版的中国驴 CN Mod。原官网 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fchnp2p.com%2Forg&quot; target=&quot;_blank&quot;&gt;chnp2p.com/org&lt;/a&gt; 甚至更早的 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fedonkey2000.cn&quot; target=&quot;_blank&quot;&gt;edonkey2000.cn&lt;/a&gt; 均已失效。原官网是一个 ed2k 资源论坛，并曾经定期公布一个名为 「驴榜」 的 CN mod 上传积分排行系统，论坛用户可申请参与。&lt;/p&gt; 
&lt;p&gt;eMule v0.50b CN-9 Build 540 LTS 发布于 2022 年 8 月 12 日，其没有随&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.emulefans.com%2Fnews%2Femule%2Femule-official&quot; target=&quot;_blank&quot;&gt;eMule Community 社区版&lt;/a&gt;更新。但根据更新日志，有来自社区版的改进。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;更新日志&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;eMule v0.50b CN-9 Build 540 LTS&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;独有的随机上传选择算法改进，算法简化及调整，更稳健适配何种状况；&lt;/li&gt; 
  &lt;li&gt;修正长时间运行时可能出现 kademlia 失效的问题（抱歉，是过度优化导致的）；&lt;/li&gt; 
  &lt;li&gt;修正合并 eMule Community 版本不完整、所导致的搜索结果保存错误，可能导致启动缓慢（升级前请先删除 config/StoredSearches.met）；&lt;/li&gt; 
  &lt;li&gt;修正 kademlia 的 DataIO 的包内容有效性判断代码中的错误；&lt;/li&gt; 
  &lt;li&gt;微调下载带宽控制算法。&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;这一版本使用 Visual Studio Community 2022 编译，并更新了 eMule 的依赖库，尤其是 zlib 库更新到最新开发版&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;来自：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.emulefans.com%2Femule-v0-50b-cn-9-build-540-lts%2F&quot; target=&quot;_blank&quot;&gt;https://www.emulefans.com/emule-v0-50b-cn-9-build-540-lts/&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289389/emule-v0-50b-cn-9-build-540-lts</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289389/emule-v0-50b-cn-9-build-540-lts</guid>
            <pubDate>Thu, 25 Apr 2024 02:37:38 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>nginx 1.26.0 稳定版发布，实验性支持 HTTP/3</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;nginx 1.26.0 稳定版已发布。&lt;/p&gt; 
&lt;p&gt;主要变化&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;合并来自 1.25.x 主线分支的新功能和错误修复&lt;/li&gt; 
 &lt;li&gt;实验性支持 HTTP/3&lt;/li&gt; 
 &lt;li&gt;流模块 (stream module) 引入&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnginx.org%2Fen%2Fdocs%2Fstream%2Fngx_stream_core_module.html%23server_name&quot; target=&quot;_blank&quot;&gt;虚拟服务器&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;支持将流连接&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnginx.org%2Fen%2Fdocs%2Fstream%2Fngx_stream_pass_module.html&quot; target=&quot;_blank&quot;&gt;传递&lt;/a&gt;给监听套接字&lt;/li&gt; 
 &lt;li&gt;HTTP/2 on a&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnginx.org%2Fen%2Fdocs%2Fhttp%2Fngx_http_v2_module.html%23http2&quot; target=&quot;_blank&quot;&gt;per-server&lt;/a&gt;&amp;nbsp;basis&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnginx.org%2Fen%2Fdownload.html&quot; target=&quot;_blank&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289383/nginx-1-26-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289383/nginx-1-26-released</guid>
            <pubDate>Thu, 25 Apr 2024 02:30:38 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>大模型下 B 端前端代码辅助生成的思考与实践 ｜ 得物技术</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    &lt;div class=&quot;ad-wrap&quot; style=&quot;margin-bottom: 8px;&quot;&gt;
            &lt;div data-traceid=&quot;news_comment_top_ad&quot; data-tracepid=&quot;news_comment_top&quot; style=&quot;text-align: center;&quot;&gt;
&lt;a style=&quot;color:#A00;font-weight:bold;&quot; href=&quot;https://www.oschina.net/action/visit/ad?id=1603&quot; target=&quot;_blank&quot;&gt;【直播预告】大模型会取代程序员吗？」 &lt;img src=&quot;https://www.oschina.net/img/hot3.png&quot; align=&quot;absmiddle&quot; style=&quot;max-height: 32px;max-width: 32px;margin-top: -4px;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
            &lt;/div&gt;
                                                        
                                                                                            &lt;span id=&quot;OSC_h2_1&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;一、背景&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;重复工作，代码规范：&lt;/strong&gt;B 端前端代码开发过程中开发者总会面临重复开发的痛点，很多 CRUD 页面的元素模块基本相似，但仍需手动开发，将时间花在简单的元素搭建上，降低了业务需求的&lt;strong&gt;开发效率&lt;/strong&gt;，同时因为不同开发者的&lt;strong&gt;代码风格不一致&lt;/strong&gt;，使得敏捷迭代时其他人上手成本较高。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;AI 代替简单脑力：&lt;/strong&gt;AI 大模型的不断发展，已经具备简单的理解能力，并可以进行&lt;strong&gt;语言到指令的转换&lt;/strong&gt;。对于基础页面搭建这样的通用指令可以满足日常基础页面搭建的需要，提升通用场景业务开发效率。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_2&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;二、生成链路一览&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;B 端页面列表、表单、详情都支持生成，链路大概可分为以下几个步骤。&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-865640d7af801189d2dad45b3f22b568e07.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;输入自然语言&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;结合大模型按照指定规则提取出相应搭建信息&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;搭建信息结合代码模板与 AST 输出前端代码&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id=&quot;OSC_h2_3&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;三、表达需求&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;图形化配置&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;辅助代码生成第一步是告诉它开发出怎样的界面，提到这里，我们首先想到的是&lt;strong&gt;页面配置&lt;/strong&gt;，即目前主流的低代码产品形式，用户通过一系列的图形化配置对页面进行搭建，如下图：&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;664&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e52cbe02c18dc1b38482a6afee34aa8baed.png&quot; width=&quot;1356&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;以上配置方式对于通用场景（如后台逻辑较为简单的 CURD 页面）或是特定的业务场景（如会场搭建）有较好的提效作用 。而对于需要不断迭代逻辑相对复杂的需求来说，由于是通过图形化操作的方式进行配置，对于交互设计要求较高，并且具备一定的上手成本，并且随着需求的复杂度越来越高，配置表单交互越来越复杂，维护成本也越来越高。因此，页面配置的方式前端领域的使用是相对&lt;strong&gt;克制&lt;/strong&gt;的。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;AI 直接生成代码&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;AI 生成代码在工具函数场景下应用较多，但对于公司内部特定业务场景的需求，可能需要考虑以下几点：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;生成定制化：&lt;/strong&gt;公司团队内部有自己的技术栈与重型通用组件，需要将这些知识进行预训练，目前对于长文本的预训练内容仅支持单次会话注入，token 数消耗较高；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;准确度：&lt;/strong&gt;AI 生成代码的准确度挑战是比较大的，加上预训练包含大段 prompt，因为代码输出的内容细节过多，加上模型幻觉，目前来看业务代码的失败率是较高的，而准确度是考量辅助编码的核心指标，如果这一点无法解决，辅助编码效果将大打折扣；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;生成内容残缺：&lt;/strong&gt;由于 GPT 单次会话的存在限制，对于复杂需求，代码生成有一定几率被截断，影响生成成功率。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;自然语言转指令&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;GPT 其实还有个很重要的能力，那就是&lt;strong&gt;自然语言转指令&lt;/strong&gt;，指令即行动，举个例子：我们假设一个函数方法实现，输入是自然语言，结合 GPT 与内置的 prompt，让其稳定的输出某几个单词，我们是不是就可以通过对这些单词输出做出进一步的行动？这相对于&lt;strong&gt;图形化配置&lt;/strong&gt;有以下几个&lt;strong&gt;优点&lt;/strong&gt;：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;学习门槛低：&lt;/strong&gt;因为自然语言本身就是人类的原生语言，你只需要根据你的想法描述页面即可，当然描述的内容是需要遵循一些规范的，但相对于图形化配置来说效率是有明显提升的；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;复杂度黑盒：&lt;/strong&gt;图形化配置的复杂度会随着配置页面复杂度的上升而上升，而这样的复杂度会一览无余地展示在用户面前，用户可能会迷失在复杂的配置页面交互中，配置成本逐步上升；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;敏捷迭代：&lt;/strong&gt;如果要在用户端新增一个页面配置功能，基于大模型的交互方式可能只需要新增几个 prompt，但图形化配置需要开发复杂表单以便于快速输入。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;这里大家可能会有个疑问：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;生成的指令信息不也会出现大模型幻觉吗？如何保证每次生成指令信息是稳定且一致的呢？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;自然语言转指令可行大致有以下几个原因：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;由长文本转关键信息属于总结内容，大模型在总结场景下的准确度远高于扩散型场景；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;由于指令信息只是提取需求中的关键信息，不需要做代码技术栈上的预训练，因此 prompt 存在很大的可优化空间，通过优化完善 prompt 内容可以有效提升输出准确度；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;准确性可验证，对于每一个场景不同表述需求输入，可以通过单测预测输出验证准确性，当出现 badCase，我们在优化后针对该 badCase 接入单测。保证准确度不断提高。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;让我们来看最终的信息转化结果：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;对于代码辅助来说，基于用户的需求描述，经过 PROMPT 处理，可以拿到这样的信息。为代码生成提供基础信息。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1187&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-40d8202f2c6579aaf62af80dd1f85fec3da.png&quot; width=&quot;865&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_4&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;四、信息转化为代码&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;通过大模型拿到自然语言对应可编码的信息（即上面例子中的 JSON）后，我们就可以基于这个信息转化代码了。对于一个有明确场景的页面而言，一般情况下可分为主代码模板（列表、表单、描述框架）+&amp;nbsp;业务组件。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;转化流程&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1173&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-7a48ed8cf5e91801c2807f2642febcaab1b.png&quot; width=&quot;1507&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;我们如何开发代码的？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;其实这一步很像我们自己开发代码，我们拿到需求后，大脑中会提取其中的关键信息，即上方提到的&lt;strong&gt;自然语言转指令&lt;/strong&gt;，然后我们会在 vscode 中创建一个文件，然后会进行以下操作：&lt;/p&gt; 
&lt;p&gt;首先一定是创建代码模板，然后根据场景引入对应重型组件，如列表就引入 ProTable，表单就引入 ProForm。&lt;/p&gt; 
&lt;p&gt;基于 ProTable 等重型组件并向其中添加一些属性，如 headerTitle、pageSize 等列表相关信息。&lt;/p&gt; 
&lt;p&gt;根据需求描述引入组件，比如识别到筛选项中存在类目选择，会在 useColumns 新增业务组件，识别到需求描述中存在导入导出组件，会在页面的指定位置新增导入导出业务组件。&lt;/p&gt; 
&lt;p&gt;拿到 mock 链接，新增请求层，在页面指定位置引入。&lt;/p&gt; 
&lt;p&gt;对于以上常用的代码插入场景都可以封装进 JSON 中，然后通过代码模板结合 AST 插入或字符串模板替换的方式生成对应代码。&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_5&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;五、源码生成&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;定位&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;源码辅助主要帮助开发者减少重复的工作，提升编码效率，和低代码页面搭建属于完全不同的赛道，低代码重在特定场景下搭建完整的页面，并且页面功能数量是可枚举的，业界低代码搭建也有很优秀的实践。而源码辅助工具旨在帮助用户尽可能多的初始化业务需求代码，后面的修改维护在代码层面交给用户，提升新增页面的开发效率。&lt;/p&gt; 
&lt;p&gt;具体的功能架构见下方：&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;574&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-10a3e7083fb654dbe05509ba7e826504583.png&quot; width=&quot;1208&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_6&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;六、组件向量搜索与嵌入&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;对于前端开发来说，提效的本质是少开发代码，更快的页面生成是一方面，良好的组件抽离是相当重要的一环，我们结合向量对组件的引入链路进行了优化，在初始化模板与存量代码中快速搜索定位组件。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;组件向量引入链路&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;650&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1576ee8c75af651f89628fce11084f9812d.png&quot; width=&quot;1752&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;组件信息录入&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;支持快速获取组件的描述内容与组件引入范式，一键录入组件，组件描述会转化为向量数据存入向量数据库。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;592&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ea11af01ef770e833806a26694aabff8066.gif&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;组件向量搜索&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;用户输入描述后，会将描述转化为向量，基于余弦相似度与组件列表进行比对，找到相似度最高的组件 TOP N。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;718&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-463882cffc8d66e44062e99010d5413e7b8.gif&quot; width=&quot;382&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;组件快速插入&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;用户可以在存量代码中快速通过描述搜索匹配度最高的组件，回车进行插入。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;660&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3d97928b4a52dc11c0a64eea5f606a1cbe9.gif&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h2_7&quot;&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;七、未来展望&lt;/strong&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;组件嵌入模板：&lt;/strong&gt;目前组件已支持向量搜索，通过结合源码页面生成，支持动态匹配组件并嵌入模板；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;存量代码的编辑生成：&lt;/strong&gt;目前仅支持新增页面的源码生成，后续将支持存量页面的局部代码新增；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;代码模板流水线：&lt;/strong&gt;AST 的代码操作工具化，将自然语言与代码写入进一步打通，提升场景拓展效率。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&amp;nbsp;*文/&lt;/strong&gt;天意&lt;/p&gt; 
&lt;p&gt;本文属得物技术原创，更多精彩文章请看：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Ftech.dewu.com&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;得物技术官网&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;未经得物技术许可严禁转载，否则依法追究法律责任！&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/5783135/blog/11054744</link>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/11054744</guid>
            <pubDate>Thu, 25 Apr 2024 02:26:00 GMT</pubDate>
            <author>得物技术</author>
        </item>
        <item>
            <title>IBM 以 64 亿美元收购 HashiCorp</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;IBM &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnewsroom.ibm.com%2F2024-04-24-IBM-to-Acquire-HashiCorp-Inc-Creating-a-Comprehensive-End-to-End-Hybrid-Cloud-Platform&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;将以每股 35 美元的现金收购云基础设施软件供应商 HashiCorp，交易扣除现金后的企业价值为 64 亿美元。该交易预计将于 2024 年底完成。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;公告称，HashiCorp 的能力将为 IBM 在多个战略增长领域带来显著的协同效应，包括 Red Hat、watsonx、数据安全、IT 自动化和咨询领域。例如，红帽的 Ansible 自动化平台的配置管理和 Terraform 的自动化的强大组合将简化混合云环境中应用程序的调配和配置。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;作为 IBM 的一部分，HashiCorp 预计将加速创新并加强其市场推广、增长和货币化举措。在上市和产品协同效应的推动下，该交易将加速 IBM 的增长。这种增长与运营效率相结合，预计将为收购的业务实现短期利润率的大幅增长。预计该交易将在第一年内增加调整后的 EBITDA，并在第二年增加交易后的自由现金流。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;281&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-cd62178bd2b51a790a7d2e885d803b51e15.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前，IBM 和 HashiCorp 的董事会均已批准这项交易。收购尚需获得 HashiCorp 股东的批准、监管部门的批准和其他常规成交条件。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;数据显示，HashiCorp 共拥有 4400 多家客户，包括彭博社、康卡斯特、德意志银行、GitHub、摩根大通、星巴克和沃达丰等。HashiCorp 的产品在开发者社区得到广泛采用，《财富》500 强中 85% 的公司都在使用 HashiCorp 的产品。在 HashiCorp 的 2024 财年，其基础设施和安全方面的社区产品下载量超过 5 亿次。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;IBM 主席兼首席执行官 Arvind Krishna 称：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&quot;企业客户正面临着基础设施和应用在公共云、私有云以及内部环境中前所未有的扩张。全球围绕人工智能的热潮加剧了这些挑战，首席信息官和开发人员的技术战略面临着巨大的复杂性。HashiCorp 在帮助客户管理当今基础架构的复杂性和应用程序的无序扩张方面有着良好的记录。将 IBM 的产品组合和专业知识与 HashiCorp 的能力和人才相结合，将创建一个专为人工智能时代设计的全面混合云平台。&quot;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289379/ibm-acquire-hashicorp-6-4-billion</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289379/ibm-acquire-hashicorp-6-4-billion</guid>
            <pubDate>Thu, 25 Apr 2024 02:10:12 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>NetBSD 9.4 发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;NetBSD 是一个免费的、安全的及高度可移植的类 UNIX 操作系统，它适合于很多种平台，从 64 位的 AlphaServers 及桌面系统到手持及嵌入式系统。它在设计上非常整洁，并拥有先进的特性，这使得它在业界和学术界都有口皆碑。用户可通过完整的源代码来获得支持。很多应用程序都可容易地从 NetBSD Packages Collection 获得。&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/285572/netbsd-10-0-released&quot;&gt;NetBSD 10.0&lt;/a&gt;&amp;nbsp;已于上月发布，其中包含了过去几年中积累的一长串改进和其他增强功能。对于那些尚未升级到 NetBSD 10.0 的用户来说，NetBSD 9 系列近日已更新至 9.4。&lt;/p&gt; 
&lt;p&gt;NetBSD 9.4 带来了各种稳定性增强和安全修复。NetBSD 9.3 早在 2022 年就已发布，因此 NetBSD 9.4 的修复内容非常丰富。&lt;/p&gt; 
&lt;p&gt;NetBSD 9.4 还包括一些更新的硬件支持，如在各种驱动程序中支持英特尔 600 和 700 系列芯片组，在温度驱动程序和相关组件中支持 AMD Zen 3 和 Zen 4，在 tprof 中支持更新的 CPU，以及为不同的有线/无线网络适配器和其他设备 ASIC 添加各种支持。&lt;/p&gt; 
&lt;p&gt;NetBSD 9.4 还针对过去两年中发现的所有安全漏洞更新了 X.Org 服务器，更新了 OpenSSL 以及其他软件包更新。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.netbsd.org%2Ftnf%2Fentry%2Fnetbsd_9_4_released&quot; target=&quot;_blank&quot;&gt;发布公告&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289373</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289373</guid>
            <pubDate>Thu, 25 Apr 2024 01:51:50 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>开源日报 | 工业开源项目 OGG 1.0；姐姐，你要和我一起配置火狐吗；苹果 AI 遥遥落后？Fedora 40</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.4.24&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要点&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/289248/opengeometry-ogg-1-0-huawei&quot; target=&quot;_blank&quot;&gt;工业软件大事件 —— OGG 1.0 发布，华为贡献全部源代码&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;OpenGeometry Group (OGG) 是由数字化工业软件联盟 (英文译名为「Digital Industrial Software Alliance」 ， 英文缩写 「DISA」) 孵化，由开元几何落地运营的开源项目。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;OGG 代码仓库已创建完成（目前 Fork 自 OCCT），托管在 Gitee：&lt;a href=&quot;https://gitee.com/opengeometry&quot;&gt;https://gitee.com/opengeometry&lt;/a&gt;。OCCT 是为特定领域快速开发程序而设计的面向对象的开源 C++库，主要涵盖 3D 几何建模 (CAD)，制造/测量 (CAM) 或数值模拟 (CAE) 领域，可开发二维和三维几何建模应用程序，包括通用的或专业的计算机辅助设计 CAD 系统、制造或分析领域的应用程序、仿真应用程序或图形。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;OGG 1.0（OGG 2024.4 Preview Beta）版本已在 Open Geometry 开源社区官网发布并开启公测：&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopengeometry.cn%2Fhome%2Findex&quot; target=&quot;_blank&quot;&gt;https://opengeometry.cn/home/index&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/289206/apple-corenet&quot; target=&quot;_blank&quot;&gt;苹果开源 CoreNet：一个用于训练深度神经网络的库&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;苹果公司开源了一个用于训练深度神经网络的库 CoreNet。允许研究人员和工程师训练标准和新型的小型和大型模型，以完成各种任务，包括基础模型（如 CLIP 和 LLM）、对象分类、对象检测和语义分割。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;CoreNet 基于 CVNet 演变而来，涵盖计算机视觉之外更广泛的应用。该公司声称，CoreNet 的扩展促进了包括 LLM 在内的基础模型的训练。&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;CVNets 是苹果公司在去年开源的一个计算机视觉工具包，允许研究人员和工程师为各种任务训练标准和移动 / 非移动计算机视觉模型，包括对象分类、对象检测、语义分割和基础模型（例如，CLIP）。&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/289194/fedora-linux-40&quot; target=&quot;_blank&quot;&gt;Fedora Linux 40 正式发布&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;主要变化包括：升级桌面环境、增加 AI 开发工具，以及更新软件包。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Fedora Workstation 默认使用最新的 GNOME 46 桌面环境，KDE Spin 版本搭载 KDE Plasma 6，并默认使用 Wayland。此外，Fedora 还正式恢复了 「Fedora Atomic Desktop」 品牌，用于所有使用 ostree 或基于镜像的配置的变体。Fedora Linux 40 还首次提供了 PyTorch 软件包，这是一个用于深度学习的流行框架。此外，还提供了用于 AMD 显卡加速支持的 ROCm 6 软件。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Fedora Linux 40 还更新了大量软件包，包括编译器和库的更新，这些更新带来了 bug 修复、安全改进和性能提升。这次发布还包括了来自数千个上游项目的最新开源软件版本的集成。&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/289216/qemu-9-0-0-released&quot; target=&quot;_blank&quot;&gt;QEMU 9.0 发布&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;跨架构全系统模拟器 QEMU 正式发布 v9.0.0，主要新特性包括：virtio-blk 支持多队列；使用多线程同时处理内存后端预分配；支持 mapped-ram 功能允许更高效的虚拟机快照；龙芯的 LoongArch 架构支持 KVM 加速，包括 LSX/LASX 矢量扩展；改进 RISC-V 支持，等等。&lt;/p&gt; 
&lt;p&gt;QEMU 项目由 Fabrice Bellard 创建，最初设想在非 x86 平台上运行 x86 Linux 二进制程序，随后转变成跨架构的全系统模拟器。&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2557120465%2FOb4krsKmS&quot; target=&quot;_blank&quot;&gt;OGG 1.0 开源几何建模引擎面世，是我国工业能力软实力提升的重要体现&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;全球造汽车的国家有十几个，造航空发动机的国家有五六个，而造几何建模引擎的国家不过三四个！曾几何时，人们把航空发动机比喻为皇冠上的明珠。更稀缺的皇冠明珠其实是几何建模引擎。看不见、摸不着，无比重要——没有几何建模引擎，就没有工业软件，就没有新型工业化发展。如果我国真的与对手发生全方位、多领域、多形态战争，几何建模引擎有可能会变成一种制裁「武器」。&lt;/p&gt; 
   &lt;p&gt;华为在这个事情上起到主导作用，华为将所掌握的全部 OCCT 源代码和 486 项增强，贡献给 OGG 社区。从此源代码社区在手，几何建模引擎无忧。&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;机工战略&lt;/strong&gt;&lt;/p&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1727858283%2FOb5TlojZn&quot; target=&quot;_blank&quot;&gt;AI 研究者更偏爱开源项目而不是闭源的商业模式&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;OpenAI 拥有 20 亿美元的收入，但可能赚得并不多。而 Meta 的毛利润超过了 1000 亿美元，他们在计算资源和人才投入上可能是 OpenAI 的十倍。而且，很多 AI 研究者更偏爱开源项目而不是闭源的商业模式，这意味着 Meta 可能会吸引更多顶尖人才。相对而言，谷歌还在为 AI 技术可能冲击其主要营收渠道而犹豫，不太可能全力以赴像 Meta 那样投入。&lt;/p&gt; 
   &lt;p&gt;在这一切中，应用开发者可能是最大的受益者。你可以选择托管 Llama 3 的任何 API 服务，或者按照自己的规则来自行托管。&lt;/p&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;宝玉 xp&lt;/strong&gt;&lt;/p&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1727858283%2FOb2igvMkh&quot; target=&quot;_blank&quot;&gt;Mistral 入门指南&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;在《Mistral 入门指南》课程中，由 Mistral 的 Sophia Yang, Ph.D. 主讲，你将会了解到：&lt;/p&gt; 
   &lt;p&gt;- 通过 API 调用及 Mistral AI 的 Le Chat 网站，探索 Mistral 的开源模型（Mistral 7B、Mixtral 8x7B）及商业模型。&lt;br&gt; - 实施 JSON 模式来生成可直接融入大型软件系统的结构化输出。&lt;br&gt; - 学习如何使用函数调用进行工具操作，比如使用自定义 Python 代码查询表格数据。&lt;br&gt; - 将你的大语言模型（LLM）的响应与外部知识源结合，使用 RAG 技术增强实用性。&lt;br&gt; - 创建一个可以参照外部文档的 Mistral 驱动聊天界面。&lt;/p&gt; 
   &lt;p&gt;本课程将助力提升你的提示工程能力。&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;宝玉 xp&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6503323978%2FObcwdolB7&quot; target=&quot;_blank&quot;&gt;《姐姐，你要和我一起配置火狐吗》&lt;/a&gt;&lt;/h4&gt; 
  &lt;h4&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6f18ca12c9faec1d99438dd00fb8c3f18b1.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/h4&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;一口一个玛丽酥&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F86XnP3h6Md92tWD-knUUqg&quot; target=&quot;_blank&quot;&gt;李彦宏说开源模型会越来越落后，为什么很多人不认同？&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;开源与闭源并非一个单选题，很多公司都采用了开源与闭源双轮驱动的战略，比如智谱 AI、百川智能、零一万物等等。&lt;/p&gt; 
 &lt;p&gt;王小川就认为，从 to B 角度，开源闭源其实都需要。未来 80% 的企业会用到开源的大模型，因为闭源没有办法对产品做更好的适配，或者成本特别高，闭源可以给剩下的 20% 提供服务。二者不是竞争关系，而是在不同产品中互补的关系。」&lt;/p&gt; 
 &lt;p&gt;不论开源还是闭源，大模型商业化面临的根本问题是，如何降低推理成本。只有降低了推理成本，大模型才有可能真正大规模落地。&lt;/p&gt; 
 &lt;p&gt;今天，开源与闭源阵营分别有自己的支持者。但如果参考 iOS 与安卓操作系统的发展轨迹来看，彼此之间的良性竞争大大促进了产品的迭代与用户体验的升级。这才是开闭源之争最终的价值。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;甲子光年&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8Z2Gc8ZNWN7&quot; target=&quot;_blank&quot;&gt;6000 亿参数的商汤多模态大模型发布，性能超越 GPT-4 Turbo&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;4 月 23 日下午，人工智能（AI）上市公司商汤科技在上海发布「日日新 SenseNova」5.0 多模态大模型系列，采用混合专家（MoE）架构，支持多达 10T Tokens 中英文与训练数据，推理合成数据高达数千亿 Token，推理时上下文窗口可以有效到 200K 左右，拥有端侧扩散和语言模型，知识、推理、数学、代码等综合能力全面对标 GPT-4 Turbo。&lt;/p&gt; 
 &lt;p&gt;商汤科技董事长兼 CEO 徐立表示，在尺度定律（Scaling Law）的准则下，商汤持续推动自身大模型研发，会持续探索大模型能力的 KRE 三层架构（知识-推理-执行），不断突破大模型能力边界。&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;钛媒体&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.pingwest.com%2Fa%2F294361&quot; target=&quot;_blank&quot;&gt;苹果 AI，遥遥落后？&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;据 Mark Gurman 爆料，苹果正在研发一种端侧大模型，并兼顾运算速度和隐私保护能力。这也意味着将来 iPhone 的 AppleGPT 语音助手将会完全在设备本地运行，无需将请求发送到云端，同时也能保证用户的隐私安全。&lt;/p&gt; 
 &lt;p&gt;只是这也衍生出来了一个问题，如果 AppleGPT 不上云，那么它如何获取当前最新的信息呢？还是说升级后的 Siri 只是能力范围更强，仍然无法跟上瞬息万变的互联网？假如所有设备的 Siri 能够同步升级，那么在 Vision Pro 上又能有什么不同？&lt;/p&gt; 
 &lt;p&gt;而这一切，或许都将在 6 月的 WWDC 中得到解答。&lt;/p&gt; 
 &lt;p&gt;最后一个问题，如果苹果有在芯片上改名的习惯，那么得到 AI 加强的 iPhone 会不会改名 AIPhone 呢？&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;- &lt;strong&gt;品玩&lt;/strong&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopen5gs%2Fopen5gs&quot; target=&quot;_blank&quot;&gt;open5gs/open5gs&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;300&quot; src=&quot;https://static.oschina.net/uploads/space/2023/0427/224739_hG2x_12.jpg&quot; width=&quot;418&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopen5gs%2Fopen5gs&quot; target=&quot;_blank&quot;&gt;https://github.com/open5gs/open5gs&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;Open5GS 是一个开源 5G 核心网的实现。Open5GS 包含一系列软件组件和网络功能，实现 4G / 5G NSA 和 5G SA 核心功能。&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/u/3808186/blog/11054097&quot; target=&quot;_blank&quot;&gt;从 0 到 1：社区论坛小程序开发笔记&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;论坛小程序：为用户提供了一个社交互动的平台，使用户可以分享经验、交流观点、解决问题，促进社区成员之间的互动和交流。 用户可以在论坛小程序上发布有关各种话题的帖子，分享自己的知识、经验和见解，帮助其他用户获取信息和解决问题。 用户可以通过参与论坛讨论，扩展自己的知识面，学习他人的经验和见解，促进个人成长和进步。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;891&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-2f4f9cd27b5766011f1642ee6f8753950e3.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;div&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;事件点评&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289272/us-china-risc-v-risk&quot; target=&quot;_blank&quot;&gt;路透社：美国正在审查中国使用 RISC-V 芯片技术的风险&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;路透社&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reuters.com%2Ftechnology%2Fus-is-reviewing-risks-chinas-use-risc-v-chip-technology-2024-04-23%2F&quot; target=&quot;_blank&quot;&gt;消息称&lt;/a&gt;，美国商务部正在审查中国在开源 RISC-V 芯片技术方面的工作对其国家安全的影响。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;来自美国国会参众两院的 18 名议员曾在去年向拜登政府施压，要求其制定计划，阻止中国 「在 RISC-V 技术领域取得主导地位」。而路透社在日前所看到一封 「致美国立法者的信」 中，美国商务部则表示，正在 「努力审查潜在风险，并评估商务部门是否采取适当行动来有效解决任何潜在问题。」&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;但美国商务部也指出，需要谨慎行事，避免损害隶属于从事 RISC-V 技术的国际组织的美国公司。因为其此前对中国 5G 技术的管制措施，就给相关的美国公司造成了障碍。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;223&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-17e31c2a4f62c83a771874fdf6b84dc32eb.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;点评&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#1f2328; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;美国对中国在 RISC-V 芯片技术方面的审查和可能的限制措施，对全球科技产业和国际关系产生了广泛影响：&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;中美科技竞争加剧&lt;/strong&gt;：这一事件凸显了中美在科技领域的竞争，特别是在半导体技术方面。美国对中国的审查和潜在限制，反映了两国在技术领先地位上的竞争。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;全球半导体产业影响&lt;/strong&gt;：RISC-V 作为一种开放标准，其发展对全球半导体产业具有重要意义。任何限制措施都可能影响全球芯片技术的发展和创新。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;国际合作与开源文化&lt;/strong&gt;：RISC-V 的开放性和国际合作性质使其成为全球技术合作的典范。美国对 RISC-V 的限制可能对全球创新和开源文化产生负面影响。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;中国半导体产业的发展&lt;/strong&gt;：中国在 RISC-V 的采纳方面处于领先地位，任何限制措施都可能加速中国在半导体技术领域的自主研发。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;全球供应链和安全问题&lt;/strong&gt;：RISC-V 技术的国际应用和合作对全球供应链的稳定和安全至关重要。限制措施可能加剧供应链的不确定性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;国际关系和地缘政治&lt;/strong&gt;：这一事件不仅涉及科技竞争，还可能影响国际关系和地缘政治格局，特别是在半导体技术日益成为国际竞争焦点的背景下。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289213/give-up-open-source&quot; target=&quot;_blank&quot;&gt;我决定放弃开源&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Simon Hofmann 是开源 UI 自动化 / 测试工具&amp;nbsp;nut.js 的核心开发者和创始人。近日他发表文章《I&#39;m giving up — on open source》讨论了对开源项目可持续性和收费的看法。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Simon 在博客中提到，他一直对开源项目持有积极的态度，但最终决定收费是因为他在开发新插件时投入了大量时间和金钱，并且遇到了一些不愉快的经历。他认为开源项目的维护者也应该得到应有的回报，而不应该被指责为追求金钱。他还表示，他将继续维护 nut.js，但会对新功能和更新进行延迟发布，并且决定对部分功能进行收费。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;249&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a05c0fe349ab06e5c5aec45bd31c8e3caf8.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;点评&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;这一决定反映了开源社区中一个长期存在的问题：开源项目的维护者往往得不到应有的回报。开源项目的维护者通常需要投入大量的时间和精力，但他们往往得不到足够的回报。这可能导致他们在经济压力下放弃开源项目，转向收费项目。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;这对开源社区来说是一个挑战，因为它可能导致一些优秀的开源项目无法得到持续的维护和发展。Hofmann 的决定也揭示了开源社区的一些矛盾，如用户对开源项目的期望与维护者能力的匹配问题，以及开源项目如何平衡社区贡献和商业利益。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;这个事件提醒我们，尽管开源项目为我们带来了很多好处，但我们也不能忽视开源项目维护者的付出。我们需要找到一种平衡，既能享受到开源项目带来的好处，又能确保开源项目的可持续性。&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289258/mozilla-rust-crash-reporter&quot; target=&quot;_blank&quot;&gt;Mozilla 用 Rust 重写 Firefox 的崩溃报告程序&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Mozilla 正在用 Rust 编程语言重写 Firefox 的崩溃报告程序。Mozilla 工程师 Alex Franchuk 在 Mozilla Hacks 上撰文，详细介绍了他们如何使用 Rust 编程语言将崩溃报告器重写为跨平台 GUI 应用程序。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;虽然时至今日 Firefox 崩溃的情况已经有所减少，但 Mozilla 工程师认为，重写崩溃报告程序对深入了解崩溃情况非常重要。由于现有的崩溃报告器错误库 &quot;困难且容易出错&quot;，他们决定用 Rust 进行重写。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e8281052fa3bed36c8e1fff522c982932ca.png&quot; width=&quot;416&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;点评&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;这一举措反映了 Mozilla 对提高软件质量和性能的持续关注。Rust 语言以其内存安全和并发能力而闻名，这可能有助于改善崩溃报告程序的稳定性和可靠性。通过使用 Rust，Mozilla 能够创建一个更加健壮和跨平台的崩溃报告程序，这对于用户和开发者来说都是一个积极的进步。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;它将有助于提高 Firefox 的稳定性和安全性，优化错误处理，增强跨平台兼容性，并提升用户体验。此举也再次证明了 Rust 在现代软件开发中的重要地位，并展示了开源社区对新兴技术的接受和使用，鼓励其他项目考虑采用 Rust。&lt;/span&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F3g.k.sohu.com%2Ft%2Fn784866654&quot; target=&quot;_blank&quot;&gt;苹果 16 或将取消实体按键上热搜，新机能否拯救销量滑坡局面&lt;/a&gt;&lt;/h4&gt; 
&lt;p style=&quot;color:#1a1a1a; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;在手机行业更新换代快、在用户换机动力不足的背景下，AI 大模型将成为手机厂商竞争的重要利器，同时也将成为提升未来销量预期的关键技术手段。而生成式人工智能的出现已经促使中国手机品牌厂商将此类功能集成到其旗舰设备中，而苹果在这方面似乎已经落后。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;南方都市报&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.huxiu.com%2Farticle%2F2943255.html&quot; target=&quot;_blank&quot;&gt;AI 风口吹不起科大讯飞&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#27282d; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;自 ChatGPT 发布后，全球掀起了一股 AI 大模型的盛宴。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#27282d; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;雷军曾说过，「站在风口，猪都能飞起来」。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#27282d; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;如果，雷军说的不是假话；那么，科大讯飞该好好思考为何没有飞起来。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#27282d; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;4 月 22 日，科大讯飞已经发布了 2023 年年报，业绩低于预期。在 AI 爆发的 2023 年，科大讯飞为何没有进入高速增长的快车道呢？&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;妙投 APP&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.com.cn%2Farticle_6105713761_16bedcc61020019lu4.html&quot; target=&quot;_blank&quot;&gt;月之暗面成立一年估值 180 亿，创始人被曝套现数千万美金，公司回应：消息不实&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;红星资本局 4 月 24 日消息，有报道称，人工智能初创公司月之暗面（Moonshot AI）创始人杨植麟通过售出个人持股已套现数千万美金，「创始人及相关人员套现金额在 4000 万美金。」&lt;/p&gt; 
&lt;p&gt;同时，还有市场传言称，曾参与投资过杨植麟首个创业项目「循环智能」的前金沙江创投管理合伙人张予彤已从金沙江创投离职，将加入月之暗面。&lt;/p&gt; 
&lt;p&gt;对于上述两则传言，月之暗面回应称，创始人套现的消息不实，月之暗面此前已公布员工激励计划；张予彤并未入职月之暗面。&lt;/p&gt; 
&lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&amp;nbsp;&lt;strong&gt;红星新闻&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F694157001&quot; target=&quot;_blank&quot;&gt;算力不足，小模型成 AI 模型发展下个方向？&lt;/a&gt;&lt;/h4&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;大模型不是 AI 的唯一出路，把模型做小也是本事。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;显然，如果持续「大力出奇迹」，通过堆砌参数量来实现 AI 性能的提升，那么以上这些问题迟早会遇到，但是如果把大模型做小，使用较小的参数量，实现同样或者更好的性能，那么将可以显著减少对算力资源的需求，进而减少对电力资源的消耗，从而让 AI 在有限资源的情况下，得到更好的发展。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#191b1f; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;因此，接下来，谁能在将模型做小的同时，还能实现性能的增长，也是实力的体现。&lt;/span&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;新火种&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FuFBGnuXiNMHiemtfzvE8gw&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;华为将鸿蒙操作系统推向全球&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：自己做没问题，但 tree new bee 哗众取宠，就不对了，鸿蒙内核超越传统内核，鸿蒙系统是真正的操作系统，从编程语言到编译器都是全栈自研。吹的自己都信了&lt;/span&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：不知道你们在嘲笑啥&lt;img alt=&quot;[脸红]&quot; src=&quot;https://res.wx.qq.com/mpres/zh_CN/htmledition/comm_htmledition/images/pic/common/pic_blank.gif&quot; referrerpolicy=&quot;no-referrer&quot;&gt;，我们目前正在接入鸿蒙 5.0，虽然目前还在开发中，但有一说一，鸿蒙 Next 设计还是很不错的。&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：没有嘲笑，两句话就把发展计算机这么多年的精粹给否定了，超越传统内核，真正的，也就说老子天下第一，其他的都不是系统，我才是真正的，全面超越，语言，编译器都是自研，秒杀一切，是吧，殊不知，语言是基于 ts 编译器是基于 llvm 至于内核嘛，也是基于 rtos 的，夸大宣传，太离谱了&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：国外的软件是否跟进才是关键&lt;/span&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：国内全面跟进才是关键&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：华为手机在国外的市占率才多少？有多少海外开发者愿意花更多成本为你这点用户量专门进行适配？海外不像国内，没人把你当回事&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：估计会很难，加油吧&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：会不会又是下一个 WP，全靠国内人口基数大优势来玩………彻底不支持安卓 APP 的话，为啥还要用华为？不然怎么刷 IG 和 X、tiktok、TG………&lt;/span&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：跟 WP 不同，WP 是纯属自己作死。&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：不管怎么样，先尝试一把，万一成功了呢&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 11：有兴趣接触一下 Harmony Next 但是请问：我可以用现有的手机，或者电脑里安装这个功能系统吗？我没有资金再去买新的硬件。期待大佬们的解疑，谢谢！&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 12：这个应该向小米初发家时的策略学习，组建专门团队和发烧友爱好者一起，对那些常见的第三方品牌手机进行系统移植，让更多第三方手机可以在非官方情况下用上&lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289194/fedora-linux-40&quot; target=&quot;_blank&quot;&gt;Fedora Linux 40 正式发布&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：下游企业版又可以升级一波了！！！&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：很多非本行业的人都不知道它准时发布，不跳票意味着什么……&lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/289216/qemu-9-0-0-released&quot; target=&quot;_blank&quot;&gt;QEMU 9.0 发布&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：支持 QEMU，是没钱买 RISCV 板子又想在上面写玩具 OS 的穷程序员的福音&lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;程序员梗图&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;内存回收（物理版）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-fb082b05114e07a4b16bed404f7b9417b0f.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em style=&quot;font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif&quot;&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289306</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289306</guid>
            <pubDate>Wed, 24 Apr 2024 11:28:25 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>华为输入法不上传用户输入内容至云端</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;加拿大多伦多大学公民实验室 (CitizenLab) 的研究人员分析了&lt;strong&gt;百度、荣耀、华为、讯飞、OPPO、Vivo、三星、腾讯、小米&lt;/strong&gt;九家厂商的云输入法，发现八家输入法软件包含严重漏洞，允许研究人员完整破解厂商设计用于保护用户输入内容的加密法。还有&lt;strong&gt;部分厂商并未使用任何加密法保护用户输入内容&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-f5080677c6f4c4cc7cfd1c09ceea8fd5374.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;▲ 百度 IME 在 Android 和 iOS 上使用的 BCTR 模式加密方案示意图&lt;/p&gt; 
&lt;p&gt;研究人员向受影响的九家开发商提交了漏洞报告，大部分开发商均认真看待问题并予以回应，修补了漏洞，但仍有少数输入法未修补漏洞。&lt;/p&gt; 
&lt;p&gt;在测试的九家厂商的应用程序中，仅有&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#e67e22&quot;&gt;华为的产品未发现任何上传用户输入内容至云端&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;相关的安全问题，其余每一家厂商都至少有一个应用程序含有漏洞，使得被动型网络攻击者得以监看用户输入的完整内容。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-5d3b9577a75ce1cf91a4859bccd729a4880.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;参考链接&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcitizenlab.ca%2F2024%2F04%2Fvulnerabilities-across-keyboard-apps-reveal-keystrokes-to-network-eavesdroppers%2F&quot; target=&quot;_blank&quot;&gt;https://citizenlab.ca/2024/04/vulnerabilities-across-keyboard-apps-reveal-keystrokes-to-network-eavesdroppers/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcitizenlab.ca%2F2024%2F04%2F%25e6%2595%25b2%25e6%2595%25b2%25e6%2589%2593%25e6%2589%2593%25e4%25b8%2580%25e7%25b3%25bb%25e5%2588%2597%25e4%25ba%2591%25e7%25ab%25af%25e8%25be%2593%25e5%2585%25a5%25e6%25b3%2595%25e6%25bc%258f%25e6%25b4%259e%25e4%25bd%25bf%25e7%25bd%2591%25e7%25bb%259c%25e6%2594%25bb%25e5%2587%25bb%25e8%2580%2585%25e5%25be%2597-zh-cn%2F&quot; target=&quot;_blank&quot;&gt;https://citizenlab.ca/2024/04/%e6%95%b2%e6%95%b2%e6%89%93%e6%89%93%e4%b8%80%e7%b3%bb%e5%88%97%e4%ba%91%e7%ab%af%e8%be%93%e5%85%a5%e6%b3%95%e6%bc%8f%e6%b4%9e%e4%bd%bf%e7%bd%91%e7%bb%9c%e6%94%bb%e5%87%bb%e8%80%85%e5%be%97-zh-cn/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcitizenlab.ca%2Fwp-content%2Fuploads%2F2024%2F04%2FCitizenLabReport175-keyboardvuln.pdf&quot; target=&quot;_blank&quot;&gt;https://citizenlab.ca/wp-content/uploads/2024/04/CitizenLabReport175-keyboardvuln.pdf&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289288</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289288</guid>
            <pubDate>Wed, 24 Apr 2024 09:36:55 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>拼多多因不正当竞争被判赔偿 500 万元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;根据封面新闻的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.cn%2Ftech%2F2024-04-24%2Fdetail-inasxkkw7856800.d.html&quot; target=&quot;_blank&quot;&gt;报道&lt;/a&gt;，拼多多涉不正当竞争纠纷败诉，被判赔偿 500 万元。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-7067418aa142659c588b68b8aec1ec0c228.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;以下为报道原文。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;近日，浙江省高院对菜鸟网络诉拼多多不正当竞争案作出终审判决，驳回拼多多上诉，维持一审法院判决，并赔偿菜鸟网络经济损失及及合理维权费用 500 万元。&lt;/p&gt; 
&lt;p&gt;根据判决书，此案是两家企业在快递物流领域不正当竞争的二审案件，涉诉双方均为互联网相关领域的重要企业。庭审中，法院认定了该案的三大焦点：菜鸟网络是否就本案末端物流系统的竞争性权益享有诉权；其诉请的三项不正当竞争行为适用的相关法律条例是否成立；如构成上述不正当竞争行为，拼多多应承担的法律责任。&lt;/p&gt; 
&lt;p&gt;法院审理查明，拼多多电商平台向消费者提供的「自提点」名称、图示中出现「菜鸟」「菜鸟驿站」的标识，在网页版「拼多多快递代收」以及「拼多多门店端」APP 中所用的门店名称中、在「拼多多」门店交接单中均有使用了「菜鸟驿站」「菜鸟」标识。&lt;/p&gt; 
&lt;p&gt;根据判决书中的审查分析，本案中拼多多作为同业竞争者，通过对抗性的业务推广实质入驻菜鸟网络已签约的加盟门店，在明知「菜鸟驿站」加盟现状的情况下悄然入驻开展同业经营，实质性侵占了菜鸟网络已有的可合理期待的竞争优势，由此不正当地增加了自身的交易机会和业务收入，也造成了菜鸟网络额外的经营损失，明显有失诚信，属于违反商业道德、造成竞争秩序损害的行为。&lt;/p&gt; 
&lt;p&gt;判决书中显示，菜鸟网络及相关公司主张的竞争性财产权益为菜鸟系统，是物流业务的末端系统，为快递包裹从「快递公司」 到消费者「最后一公里」提供解决方案。快递末端网点作为末端物流企业业务流程中的关键资源，是末端物流产业经营者的核心竞争力所在。拼多多的部分行为构成反不正当竞争法第六条的混淆行为，该行为事实上不当增强了其竞争优势，并造成了菜鸟网络的竞争优势受损。&lt;/p&gt; 
&lt;p&gt;最终，法院宣布驳回拼多多的上诉请求，维持一审法院判决。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289285</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289285</guid>
            <pubDate>Wed, 24 Apr 2024 09:27:55 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
    </channel>
</rss>