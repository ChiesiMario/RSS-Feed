<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-最新资讯</title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://8.134.148.166:30044/oschina/news" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-最新资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Mon, 24 Mar 2025 12:41:39 GMT</lastBuildDate>
        <ttl>5</ttl>
        <item>
            <title>开源等宽编程字体 Maple Mono 正式发布 7.0</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;Maple Mono V7.0 稳定版已正式发布。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0324/192426_YCfP_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Maple Mono 是一款开源等宽字体，专注于优化&lt;strong&gt;编码体验，&lt;/strong&gt;带有圆角、连字和 Nerd-Font，适用于 IDE 和终端，具有细粒度的自定义选项。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;特性&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;可变 - 无限的字体粗细，以及手工微调的斜体字形。&lt;/li&gt; 
 &lt;li&gt;丝滑 -&lt;strong&gt;圆角&lt;/strong&gt;，独特的&lt;code&gt;@ $ % &amp;amp; Q -&amp;gt;&lt;/code&gt;字形，以及手写风格的斜体&lt;code&gt;f i j k l x y&lt;/code&gt;。&lt;/li&gt; 
 &lt;li&gt;实用 - 大量的智能连字，详见&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsubframe7536%2Fmaple-font%2Fblob%2Fvariable%2Fsource%2Ffeatures%2FREADME.md&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;features/&lt;/code&gt;&lt;/a&gt;。&lt;/li&gt; 
 &lt;li&gt;图标 - 提供&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fryanoasis%2Fnerd-fonts&quot; target=&quot;_blank&quot;&gt;Nerd-Font&lt;/a&gt;嵌入的版本，添加图标支持。&lt;/li&gt; 
 &lt;li&gt;定制 - 自由开关或者构建 OpenType 字体特性，打造您专属的字体。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;开发者称 V7 是一个完全重制版本，提供了可变字体格式和字体工程源文件，重新设计了超过一半的字形，并提供更智能的连字。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;预览效果&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1748&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/192534_vSvQ_2720166.png&quot; width=&quot;1746&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;下载地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsubframe7536%2Fmaple-font%2Freleases%2Ftag%2Fv7.0&quot; target=&quot;_blank&quot;&gt;https://github.com/subframe7536/maple-font/releases/tag/v7.0&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340721/maple-mono-font-7-0</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340721/maple-mono-font-7-0</guid>
            <pubDate>Sun, 23 Mar 2025 11:28:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>IBM CEO：AI 短期内不会取代程序员</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;IBM 首席执行官阿尔温德·克里希纳（Arvind Krishna）表示，尽管特朗普政府曾大力抨击全球化，但全球贸易并没有消亡。相反，他认为美国经济增长的关键恰恰在于积极拥抱国际贸易。&lt;/p&gt; 
&lt;p&gt;在 3 月 11 日 SXSW 的访谈中，克里希纳表示：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「我坚信全球贸易的重要性，这个观点其实可以追溯到 19 世纪的经济学家。他们当时就发现，每当全球贸易额增加 10%，当地 GDP 就能提升 1%。因此，要想真正优化本地经济增长，就必须积极参与全球贸易。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;克里希纳强调，全球贸易的繁荣与人才的国际流动密不可分。他指出，美国政府和部分支持者曾主张对外国留学生和 H-1B 签证实行更严格限制，声称这些外国劳动力会削弱美国公民的就业优势。&lt;/p&gt; 
&lt;p&gt;对此，克里希纳表示：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「我们希望全球人才带着他们的知识和技能来到美国，同时我们也要培养自己的本地人才。然而，如果无法吸引全球顶尖的人才，让本地人才有机会学习与成长，本地人才的培养就会受到限制。因此，美国应该成为国际人才中心，并制定与此相适应的人才政策。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;在这场内容丰富的访谈中，克里希纳不仅谈及了地缘政治问题，也提到了备受关注的人工智能（AI）。在他看来，AI 是一种有价值的技术，但绝不是万能的解决方案。&lt;/p&gt; 
&lt;p&gt;克里希纳对近期 Anthropic 公司 CEO 达里奥·阿莫迪（Dario Amodei）的预测表示了不同意见。此前阿莫迪预测，在未来 3 到 6 个月内，90% 的代码可能都会由 AI 自动生成。&lt;/p&gt; 
&lt;p&gt;而克里希纳则认为：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「我觉得实际数字更可能是 20% 到 30% 的代码会由 AI 编写，而绝不是 90%。简单的场景确实可能很容易由 AI 完成，但也存在大量复杂的场景，AI 根本做不到。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;克里希纳进一步指出，AI 最终会提高程序员的工作效率，而非像一些 AI 批评者担忧的那样完全取代编程岗位：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「如果你能让现有人员多写 30% 的代码，你会因此减少还是增加代码总量呢？历史表明，更高效的公司往往能扩大市场份额，从而生产更多产品，最终获得更大的市场优势。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;当然，IBM 也有理由强调 AI 对就业不构成威胁，因为该公司自身就提供各种 AI 产品和服务，包括辅助编程工具。&lt;/p&gt; 
&lt;p&gt;克里希纳这番话也稍显自相矛盾。早在 2023 年，他曾公开表示，IBM 计划暂停后台部门的招聘工作，因为公司预计这些岗位很快就能被 AI 技术所取代。&lt;/p&gt; 
&lt;p&gt;谈及 AI 取代人类工作的争议时，克里希纳将此类争论比作早年计算器替代数学家，或 Photoshop 替代艺术家的担忧。他承认 AI 在知识产权领域仍存在许多尚未解决的问题，但强调这项技术本质上仍是一股积极而且增强人类能力的力量：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「AI 只是一个工具。当所有人借助这些工具做出更高质量的产品时，最终受益的是广大消费者，因为他们能够享受到品质更高的产品。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;他预测 AI 技术未来的成本会持续下降。尽管目前的推理模型（例如 OpenAI 的 o1 模型）需要大量算力和能源消耗，但克里希纳认为，新兴的技术（例如中国初创公司 DeepSeek 展示的方案）能够极大降低 AI 能耗，使之降到当前能耗的 1% 以下：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「DeepSeek 已经向我们展示，即使是小型模型也能发挥巨大作用。当然，问题在于我们是否仍需要一些巨大的模型作为起点，这是 DeepSeek 尚未谈及的地方。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;然而，虽然克里希纳认为 AI 会变得越来越普遍和廉价，但他并不认为 AI 能真正帮助人类创造全新的知识，这与 Hugging Face 联合创始人托马斯·沃尔夫（Thomas Wolf）近期的一篇文章观点一致。相反，克里希纳认为，量子计算才是加速科学发现的真正关键技术，而这也正是 IBM 长期以来重金投入的领域：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「AI 所做的都是基于已有的知识、文献、图像等去学习，而并非探索未知。我并不相信目前这一代的 AI 能够真正实现所谓的『通用人工智能』，也就是说，这些 AI 无法提供完全可靠的、超越爱因斯坦、奥本海默或所有诺贝尔奖得主所能回答的问题。」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;值得注意的是，克里希纳的这些言论与 OpenAI CEO 山姆·奥特曼（Sam Altman）的看法截然不同。奥特曼此前曾预测，人类在未来数年内就可能创造出具备超级智能的 AI，大幅加速人类创新的速度。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;转载自&amp;nbsp;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1727858283%2FPjZwSjy2I&quot; target=&quot;_blank&quot;&gt;https://weibo.com/1727858283/PjZwSjy2I&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;阅读更多&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/338784&quot; target=&quot;news&quot;&gt;计算机科学家吴恩达对「AI 将取代程序员」的看法&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/338372/anthropic-ceo-ai-will-be-writing-90-of-code-in-3-6-months&quot; target=&quot;news&quot;&gt;Anthropic CEO：未来 3-6 个月内，90% 的代码将由 AI 编写&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/337519/anthropic-mike-krieger-how-software-engineering-work-changing&quot; target=&quot;news&quot;&gt;未来三年，软件工程师或将转型为「AI 代码审核员」&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/259402&quot; target=&quot;news&quot;&gt;GitHub CEO：AI 无法取代程序员&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/282381&quot; target=&quot;news&quot;&gt;李彦宏：未来可能不会存在程序员这种职业&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340717/ibms-ceo-doesnt-think-ai-will-replace-programmers-anytime-soon</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340717/ibms-ceo-doesnt-think-ai-will-replace-programmers-anytime-soon</guid>
            <pubDate>Sun, 23 Mar 2025 10:51:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Endeavour OS 「Mercury Neo」 发布，基于 Arch Linux 的发行版</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;Endeavour OS 是一个基于 Arch Linux 的 Linux 发行版，采用滚动发行计划，是 2019 年终止开发的 Antergos 的继任者，该发行版基于 Arch Linux 构建，现已发布 2025 年 3 月 ISO 更新，代号为 「Mercury Neo」，包含最新软件包，随附最新的上游软件。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-f6ef1b15908530983897bd993f59172a315.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Endeavour OS 的最新更新包括更新的 Calamares 安装程序、Linux 6.13.7 内核、Mesa 25.0.1 图形驱动程序、NVIDIA 570 封装图形驱动程序、Firefox 136 和许多其他软件包更新。&lt;/p&gt; 
&lt;p&gt;Endeavour OS 新版安装介质修复了一些安装处理方面的错误，从 NVIDIA 启动菜单中删除了过时的 NVIDIA 选项，并且在自动安装模式下创建 2GB EFI 分区，而不仅仅是 1GB 分区。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fendeavouros.com%2Fnews%2Fmercury-neo-with-linux-6-13-7-and-arch-mirror-ranking-bug-fix%2F&quot;&gt;通过 EndeavourOS.com&lt;/a&gt;下载 Endeavour OS Linux 发行版的新每月 ISO 更新并获取更多详细信息。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340715/endeavour-os-mercury-neo</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340715/endeavour-os-mercury-neo</guid>
            <pubDate>Sun, 23 Mar 2025 10:39:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>《龙架构生态白皮书（2024 年）》发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FuSWFJv8T8peD9nj9b9J_xg&quot; target=&quot;_blank&quot;&gt;龙芯中科官方正式发布了《龙架构生态白皮书（2024 年）》&lt;/a&gt;&lt;/u&gt;。官方表示，&lt;strong&gt;经过 3 年转型发展，龙芯自主 CPU 设计已经达到国际主流水平&lt;/strong&gt;，基于龙架构的新一代产品性能倍增、成本倍降，自主优势转化为性价比和软件生态优势威力初显。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;龙芯强调，真正的核心技术是买不来、换不来的。只能靠自力更生，才能彻底打破锁链、摆脱发展受制于人的命运。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;目前，龙架构已经得到主要国际软件开源社区及国产操作系统、基础应用的广泛支持，可支持运行多数主流应用，独立于 x86 和 ARM 的第三套信息技术体系和产业生态基本建成。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-be406abfe3378e1bb9fcf57d0afe574f08e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;白皮书分为龙架构生态发展现状、龙芯 CPU 及配套芯片介绍、龙芯基础软件、基于龙芯 CPU 的软硬件产品、基于龙芯 CPU 的行业实践案例、龙芯教育生态、龙芯生态培育与展望等章节。&lt;/p&gt; 
&lt;p&gt;白皮书最后，还附上了&lt;strong&gt;龙芯处理器路线图，确认面向服务器的龙芯 3C6000 系列、针对移动端的龙芯 3B6000M 都将在今年发布，适合桌面端的龙芯 3B6000 则要等到明年。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;其中，龙芯 3C6000 分为 S、Q、D 等不同版本，LA664 微架构，16/32/64 核心，主频 2.0-2.2GHz。龙芯 3B6000M 集成最多 8 个 LA364 微架构核心，主频 2.0-2.4GHz。&lt;/p&gt; 
&lt;p&gt;龙芯二号家族还将在明年新增龙芯 2K2500。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-68c6ab00f06494b8024a6e6e8de129f3320.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;白皮书主要内容——&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;★ 龙架构 CPU 新品：性能跃升，自主技术再突破&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;经过二十余年的技术积累，龙芯成功构建了面向桌面和服务器、工控和终端、嵌入式专用的三大系列芯片，形成自主 CPU 研发和软件生态建设的体系化关键核心技术积累。&lt;/p&gt; 
&lt;p&gt;2024 年，龙芯推出了面向移动终端、工业控制、通信设备等领域的多款处理器。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;★ 基础软件生态：开源共建，破局生态壁垒&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;白皮书从国际开源软件生态、基础软件技术体系、操作系统发行版、龙芯平台特色软件四大维度，全面阐述了龙芯 2024 年基础软件生态建设的核心成果。&lt;/p&gt; 
&lt;p&gt;同时，白皮书新增了基于开源鸿蒙社区版本开发的新型操作系统 Loonghong，以及龙芯跨平台融合方案等特色软件。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;★ 软硬件产品：千款产品，引领产业变革&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;龙芯与国内众多一线品牌合作，共同推出上千款 PC、服务器、信息化一体机、网络通信设备等软硬件产品。这&lt;/p&gt; 
&lt;p&gt;些成果不仅彰显了龙芯在产品化能力上的领先优势，更标志着国产信息技术生态实现从「可用」到「好用」的跨越发展。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;★ 行业实践案例: 多场景落地，赋能千行百业&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;龙芯在电子政务、能源、通信、金融、交通、医疗等行业已形成成熟的应用方案，为各领域的信息化建设提供有力支撑。&lt;/p&gt; 
&lt;p&gt;白皮书新增了龙芯在税务、先进制造、仪器仪表等领域的最新实践案例，展现了龙芯在多元化行业场景中的创新应用能力，同时也为国产信息技术在更多领域的落地应用提供示范与借鉴。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;★ 教育生态建设：产教融合，培育创新人才&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;白皮书新增「龙芯教育生态」专章，系统阐述了龙芯在高校专业教育、基础教育信息技术应用创新和信创特色化教育等领域的生态建设成果。&lt;/p&gt; 
&lt;p&gt;从学科竞赛到「百芯」计划，从人才认证到万套试点，龙芯始终致力于为我国芯片产业发展培养优秀人才，实现信息技术教学「授人以鱼」向「授人以渔」的转变。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;白皮书地址：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.kdocs.cn%2Fl%2Fcay9SNLZ1m0s%3Fsessionid%3D-954285235&quot; target=&quot;_blank&quot;&gt;https://www.kdocs.cn/l/cay9SNLZ1m0s?sessionid=-954285235&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340714</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340714</guid>
            <pubDate>Sun, 23 Mar 2025 10:27:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>美团王莆中：正研发 Native AI 产品</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;自上周五美团公布其 AI 进展后，美团核心本地商业 CEO 王莆中今日在社交媒体即刻上透露，美团正在内部的数据、场景和产业优势做一款 NativeAI 产品，&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;他表示，这款应用的愿景是「每个人都能有一个专属的生活小秘书」。项目由王莆中发起，目前在招聘 AI 研发和产品人员。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;267&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-bd91af9bf07365d323d0f1cd4e00b51eb63.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相关阅读：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/340605&quot; target=&quot;_blank&quot;&gt;美团王兴：AI 策略是进攻而非防守，GPU 资源投入累计达数十亿元&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340713</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340713</guid>
            <pubDate>Sun, 23 Mar 2025 10:12:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>LiblibAI 接入阿里通义大模型，推出 10 秒 AI 视频生成功能</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;国内 AI 图像创作平台 LiblibAI 近日宣布接入阿里通义系列大模型。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此次接入后，基于万相最新开源模型，LiblibAI 推出了文生视频和图生视频功能。用户只需输入文本提示词，或者上传图片，就能快速生成 10 秒短视频。这一功能的实现，让创意转化为视频内容变得更加高效便捷，无论是用于短视频创作、创意展示还是其他场景，都极大地降低了视频制作门槛。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;除了视频生成功能，LiblibAI 还借助阿里大模型 Qwen-turbo 打造了提示词优化窗口。这个窗口能通过系统提示，帮助用户优化输入内容，并且支持将中文提示词自动翻译成模型可理解的英文提示词。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;接入 Qwen-turbo 后，LiblibAI 提示词优化时间缩短了超过 50%，大大提升了 AI 创作的效率和用户体验，让创作者能更专注于创意表达，减少在技术操作上耗费的时间。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;336&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-db873de161757a7b20dfabf5fb583a9914e.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;作为国内首家通过国家备案的 AI 平台，LiblibAI 已积累了超 2000 万创作者，平台上的原创模型数量超过 10 万个。凭借「开源模型 + 模块化工具流」的创新平台模式，LiblibAI 构建了一个涵盖 AI 内容创作、分享、版权管理与售卖的完整生态链。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340704</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340704</guid>
            <pubDate>Sun, 23 Mar 2025 09:21:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>万字长文，带你读懂 Anthropic MCP</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;div&gt; 
 &lt;span id=&quot;OSC_h1_1&quot;&gt;&lt;/span&gt; 
 &lt;h1&gt;背景&lt;/h1&gt; 
 &lt;div&gt;
   随着大模型的快速发展，如何让模型与企业数据、工具高效对接成为核心挑战。传统方式需为每个数据源/工具编写定制化代码，导致开发成本高、扩展性差、安全性低，形成「烟囱式开发」。 
 &lt;/div&gt; 
 &lt;div&gt;
   如何让大语言模型与外部系统交互，已经成为 AI 系统急需解决的问题。从 2023 年到现在，业界也有过多种尝试，我们也一起来梳理一下： 
 &lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     原始时代——prompt 转 json。大家现在回头看看写在代码里面的 prompt 是否还有大量的提示词转结构化数据的要求。优点就是可以很快的事项让大模型给出符合格式的结果。缺陷也是很大，就是不可靠。常遇到的比如 json 的 key 错误，json 格式不对，时间格式不匹配。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     农耕时代——Plugins。2023 年 3 月份，OpenAI 官方发布了重磅的「ChatGPT plugins」。也是大模型首次允许通过插件与外部应用交互的能力，也给了 AI 应用很大的想象。比如当前大模型都具备的实时信息检索，也是这个时候引入的。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     铁器时代——Function Calling。2023 年 6 月，OpenAI 在 GPT-3.5 和 GPT-4 模型中首次引入 Function Calling 机制，赋予模型调用外部函数的能力，使其能够结合真实的数据或计算结果，而非单纯依赖模型自身的推理能力，这样不仅可以提高模型的可控性和准确性，还能让其更适应实际业务需求。Function Calling 的意义在于让大模型结果闭环且可控，在大模型流程中加入函数能力，让其获取到外部数据，不必再自行幻想出来结果，并且结构化的输入给到大模型，输出的结果更加稳定。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     蒸汽时代——Agent 框架 Tools。Agent 可以根据任务动态选择 Tool 是完成任务，所以 Tool 应该是大模型能力的补充。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     电气时代——MCP。在上一时代中的 Agent 的 Tool 诞生可以补充大模型的缺失的能力和数据，但是还需要一个大问题，一个企业或者应用面对不同的大模型不同的系统如何快速集成到一起，一个个是开发 Tools？这是一个重复且繁琐的工作。为此本文的主角——MCP 协议诞生了。 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h1_2&quot;&gt;&lt;/span&gt; 
 &lt;h1&gt;MCP 是什么？&lt;/h1&gt; 
 &lt;div&gt;
   2024 年 11 月 25 日 Anthropic 发布的文章： 
  &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.anthropic.com%2Fnews%2Fmodel-context-protocol&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Introducing the Model Context Protocol&lt;/a&gt; ，标志着 MCP 协议诞生。 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;img src=&quot;https://dedao.feishu.cn/space/api/box/stream/download/asynccode/?code=NDI4NzM3MTZmYTgyNTFkYTZmOGI4NjczZjU2MzBjODVfbTNtOHpRZTVjWkdaNFdrVjJMWmk2SjdTMzIxTEdBckxfVG9rZW46Q21VUmJHaURPb3RzM2l4U1JaRmN3SlNzbjllXzE3NDI3MjM2NDc6MTc0MjcyNzI0N19WNA&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   按照博文所说：MCP （Model Context Protocol，模型上下文协议）为连接 AI 系统和数据源提供了一个通用的开放标准，用单一协议取代了分散的集成。换一个说法是 
  &lt;strong&gt;以一致的方式将各种数据源、工具和功能连接到 AI 模型&lt;/strong&gt;中间协议。可以说 MCP 协议类似大家现在使用的 type-c 接口，可以让不同的设备通过相关的接口协议连接在一起，组成不同功能的系统。更通俗的方式类比是，你拿着一个万能翻译器，去不同的国家和地区旅游，可以以不同的人员通过万能翻译器实时对话，这个万能翻译器就是 MCP 协议。 
 &lt;/div&gt; 
 &lt;div&gt;
   针对 MCP 有几点需要注意： 
 &lt;/div&gt; 
 &lt;ol&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     Function Calling 是大模型与外部数字世界的交互方式。MCP 是 MCP host(chatbot 或者 AI 工具) 与外部工具/资源之间的交互方式。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP 比 Plugins 规范性更好，定义了清晰的数据格式、传输协议、身份验证方法等，能力也更强。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     GPTs 是 OpenAI 的应用市场，主要是给人使用的。MCP server 主要是给 AI 使用的，不直接给人用。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP 与 Agent 是合作关系，彼此有对应的关系： 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;div&gt; 
  &lt;table cellspacing=&quot;0&quot; style=&quot;border-collapse:collapse; border:none; table-layout:fixed; width:500px&quot;&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Agent 能力 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        MCP 特性 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        工具（技能）调用 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Tool 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        LUI 交互 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Prompt 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        感知 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Resource（Changed Notification） 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        深度思考 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Resource（Listing/Reading Resources） 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   那为什么需要 MCP 协议呢？下面通过一张图来说明。 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;span&gt;暂时无法在飞书文档外展示此内容&lt;/span&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   可以看到，MCP 协议将原本 M×N 集成问题（M AI 客户端×N 数据源）转化为 M+N 问题-任何 MCP 兼容的 AI 客户端都可以与任何 MCP 兼容的数据源或工具一起工作。 
 &lt;/div&gt; 
 &lt;div&gt;
   为什么需要 MCP？ 
 &lt;/div&gt; 
 &lt;ol&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP 的出现可以解决大模型的数据和能力补充问题，大模型的训练是在大量的数据上训练出来的，这些知识是过去的，也可能是不完整的，比如今天的天气数据，我们团队刚刚写出来的产品报告，需要帮助我在饿了么订外卖等。这些数据和能力是大模型不具备的。有了 MCP 后大模型就可以获取到最新的数据，拥有更多的能力补充，可以极大的降低幻觉，让 AI 更加可靠。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP 是通用的 AI 模型集成方法。上面的图已经说明了，没有 MCP 时候，AI 模型访问多个系统意味着要处理大量的应用编程接口、软件开发工具包和身份验证方法。而且服务之间的连接会随着功能的增加出现指数式增长，必然会导致系统脆弱。MCP 用一个标准接口取代了这种复杂性，大大简化了开发。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP 不绑定任何厂商。Anthropic 开源了 MCP 规范，并由社区驱动。当前与 AI 模型是一致的，开放性才是不断增长的系统，大家一起努力才可以把生态构建出来。 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;div&gt;
   总之出现 MCP，根本原因是 
  &lt;strong&gt;大模型百家争鸣，各有所长并且数据孤岛的壁垒无法打破&lt;/strong&gt;。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h1_3&quot;&gt;&lt;/span&gt; 
 &lt;h1&gt;MCP 可以做什么？&lt;/h1&gt; 
 &lt;div&gt;
   MCP 作为连接 AI 模型与外部系统的标准化协议，其核心价值在于打破数据孤岛、提升模型交互能力，并推动 AI 从「被动响应」向「主动执行」转型。目前可以预知到的 MCP 的应用场景有四大核心场景。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h2_4&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;场景一 AI 模型治理与合规管理&lt;/h2&gt; 
 &lt;div&gt;
   军政、金融、医疗等强监管行业需对 AI 访问权限进行细粒度控制，例如限制模型仅读取脱敏数据或禁止写入关键系统。通过 MCP 的数据沙箱机制和权限审批流程，实现动态策略调整与操作审计，满足 GDPR、HIPAA 等法规要求。MCP 服务器可以支持不同的访问策略并且可以实现访问时进行身份验证，有效地充当 AI 模型和企业之间的门神。内部数据的获取和响应都是通过 MCP 服务器，类似数据网关，实时监控模型行为，发现异常（如数据泄露风险）时自动触发防护机制（如阻断敏感 API 调用）。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h2_5&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;场景二，实时上下文增强与知识更新&lt;/h2&gt; 
 &lt;div&gt;
   AI 模型对过去交互的记忆有限，因此在推理时提供相关的、实时的上下文至关重要。MCP 服务器连接实时数据源（如 OS Drive、Slack、数据库），确保 AI 响应基于最新信息（如客户最新订单、库存状态）。通过 MCP 资源功能加载专业文档（如法律条款、产品手册），提升 AI 在垂直领域的专业性（如法律咨询、技术支持）。通过 MCP 服务器允许 AI 模型可以在需要的时候从指定的渠道获取到相关的数据甚至可以进行相关的操作。比如创建一个 Excel 文档将收集和整理好的简历写入。在客服场景中，可以关联用户的信息（订单、兴趣、）和之前与客服的沟通内容，结合企业内的 SOP，为用户解决问题。还有在 AI 编码的场景也是有很好的应用，AI 模型可以通过 MCP 服务器获取 git 仓库的代码和接口文档、产品设计、方案设计甚至是编码规范，可以为程序员提供更好的编码提示和建议。 
 &lt;/div&gt; 
 &lt;div&gt;
   同时，使用结构化格式传递信息避免歧义，可以更有效地指导 AI 模型推理。更可靠的知识源，结合结构化的数据上下文，AI 模型就可以应用在要求可靠性更高的场景，比如医疗诊断。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h2_6&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;场景三，工具生态扩展与系统互联&lt;/h2&gt; 
 &lt;div&gt;
   试想一下，这样的场景。用户反馈 APP 的一个 bug 上来后，AI 模型自动根据 Git 的 MCP 服务器，结合产品文档需求和用户描述，自动化实现 bug 修复并通过 CI/CD MCP 服务器实现服务上线。MCP 协议将会是 AI 模型和各个工具之间互联互动的桥梁。MCP 如果成为了标准协议，将各个 AI 模型和丰富的工具和平台链接起来，打破信息孤岛，让 AI 的自动化升级为 AI 智能化。MCP 可以成为 AI 模型对工具和平台的监督和驱动大脑，让它们协同的完成工作。 
 &lt;/div&gt; 
 &lt;div&gt;
   对于不同的企业和平台来说，MCP 可以让不同 AI 模型的能力获取最大化，也建议让 AI 模型方案统一化。 
  &lt;strong&gt;AI 模型不应该只是在浏览器上，也不应该只是在 APP 应用上，而是应该集成到操作系统中，在系统层面获得更大的能力&lt;/strong&gt;。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h2_7&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;场景四，企业级智能助手与 Agent 构建&lt;/h2&gt; 
 &lt;div&gt;
   MCP 作为企业内部 AI Agent 的「数据总线」，整合 CRM、MES 等多系统数据，例如制造业 AI Agent 通过 MCP 协调 IoT 传感器与生产调度系统。企业部署 MCP 驱动的虚拟助手，可统一响应员工 IT 支持、审批进度查询等需求，响应时效缩短至秒级。在医院，可通过 MCP 构建 AI 助手，实时分析患者病史并提醒医生药物相互作用风险。MCP 可以让 Agent 的构建更加强大。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h1_8&quot;&gt;&lt;/span&gt; 
 &lt;h1&gt;MCP 有什么？&lt;/h1&gt; 
 &lt;span id=&quot;OSC_h2_9&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;组件&lt;/h2&gt; 
 &lt;div&gt;
   MCP 本质还是一种 C/S 架构，官方给出的架构图： 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;img src=&quot;https://dedao.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGQ4M2I3ZWQ1MDQzZjQzNjZiYTg0ZDkwMzBlN2MwNjNfZDVSUms3Y3FlTmRsMHZWaXVpMWVMNEFJd1BiNVE5N2hfVG9rZW46VXdJYWJ2NlJlb1lrWTZ4Skh4SWNubFhQbkhoXzE3NDI3MjM2NDc6MTc0MjcyNzI0N19WNA&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   MCP 由三个核心组件构成：Host、Client 和 Server。 
 &lt;/div&gt; 
 &lt;ol&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP Hosts: 负责接收用户提问并与 AI 模型交互，充当容器和协调者： 
   &lt;/div&gt; 
   &lt;ol&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       创建和管理多个客户端实例 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       控制客户端连接权限和生命周期 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       协调 AI/LLM 集成和采样 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       管理 Clients 之间的上下文聚合 
     &lt;/div&gt; &lt;/li&gt; 
   &lt;/ol&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP Clients：与服务器保持 1:1 连接的协议客户端，将 Server 连接到的客户端中，组成不同功能的应用： 
   &lt;/div&gt; 
   &lt;ol&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       和每个 server 建立一个有状态的会话 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       处理协议协商和能力交换 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       双向路由协议消息 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       管理订阅和通知 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       维护 servers 之间的安全边界 
     &lt;/div&gt; &lt;/li&gt; 
   &lt;/ol&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     MCP Servers： 轻量级程序，每个程序都通过标准化模型上下文协议公开特定功能： 
   &lt;/div&gt; 
   &lt;ol&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       通过 MCP 原语暴露 resources、tools 和 prompts 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       通过 client 提供的接口请求 sampling 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       可以是本地进程或远程服务 
     &lt;/div&gt; &lt;/li&gt; 
    &lt;li&gt; 
     &lt;div&gt;
       具备特定的功能 
     &lt;/div&gt; &lt;/li&gt; 
   &lt;/ol&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;span id=&quot;OSC_h2_10&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;协议&lt;/h2&gt; 
 &lt;div&gt;
   MCP 的规范中协议层、传输层和消息类型： 
 &lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     协议层处理消息框架、请求/响应链接和高级通信模式。具备有状态的连接和能力协商。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     传输层处理客户端和服务器之间的实际通信， 
    &lt;strong&gt;MCP 所有传输均使用&lt;/strong&gt; 
    &lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jsonrpc.org%2F&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;JSON-RPC&lt;/a&gt;&lt;/strong&gt; 
    &lt;strong&gt; 2.0 来交换消息&lt;/strong&gt;。 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     消息类型定义请求和响应格式和处理机制。 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;span id=&quot;OSC_h3_11&quot;&gt;&lt;/span&gt; 
 &lt;h3&gt;传输层&lt;/h3&gt; 
 &lt;div&gt;
   MCP 目前定义了两种标准的 client-server 通信传输机制：stdio（标准输入输出）和基于 SSE 的 HTTP。此外，客户端和服务器也可以以可插拔的方式实现自定义传输机制。 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;table cellspacing=&quot;0&quot; style=&quot;border-collapse:collapse; border:none; table-layout:fixed; width:500px&quot;&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        通信传输机制 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        部署方式 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        网络要求 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        场景 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        应用 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        &amp;nbsp; 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Stdio transport 标准传输 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        本地子进程 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        无需网络 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;ul&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          本地开发 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          高效实现同机通讯 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          简单的流程管理 
        &lt;/div&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        filesystem 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        &amp;nbsp; 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        HTTP with SSE transport 带有 SSE 传输的 HTTP 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        独立服务器进程 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        需要网络连接 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;ul&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          分布式部署、多客户端 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          对于需要 HTTP 兼容性的场景使用 SSE 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          考虑安全影响，包括身份验证和授权 
        &lt;/div&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        search 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        &amp;nbsp; 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h3_12&quot;&gt;&lt;/span&gt; 
 &lt;h3&gt;消息类型&lt;/h3&gt; 
 &lt;div&gt;
   所有在 MCP clients 和 servers 之间的消息必须遵循 JSON-RPC 2.0 规范，基于 
  &lt;strong&gt;JSON-RPC 2.0&lt;/strong&gt;，确保消息格式结构统一。该协议定义了三种基本类型的消息： 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;table cellspacing=&quot;0&quot; style=&quot;border-collapse:collapse; border:none; table-layout:fixed; width:500px&quot;&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        消息类型 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        描述 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        约束 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Requests 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        用于具体操作的消息 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;ul&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          必须包含唯一的 ID 和方法名称 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          ID 不能为 null 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          请求 ID 在同一会话中不得被请求者之前使用过 
        &lt;/div&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Responses 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        请求的响应 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;ul&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          必须包含与请求相同的 ID 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          必须设置 result 或 error 之一。不得同时出现 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          错误代码必须是整数 
        &lt;/div&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Notifications 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        单向消息，不需要回复 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        不得包含 ID 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h4_13&quot;&gt;&lt;/span&gt; 
 &lt;h4&gt;Requests&lt;/h4&gt; 
 &lt;div&gt;
   Requests 可以从 Client 端或者 Server 端发起，其格式为： 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  jsonrpc: &quot;2.0&quot;;
  id: string | number;
  method: string;
  params?: {
    [key: string]: unknown;
  };
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   在 MCP Server 中对请求需要做到： 
 &lt;/div&gt; 
 &lt;ol&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     彻底验证输入，验证 JSON-RPC 格式 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     使用类型安全架构 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     妥善处理错误 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     实施超时处置 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;div&gt;
   在 MCP 中定义的 requests 的业务类型： 
 &lt;/div&gt; 
 &lt;div&gt;
   表格，还在加载中，请等待加载完成后再尝试复制 
 &lt;/div&gt; 
 &lt;div&gt;
   initialized 是非常重要的阶段，是 MCP Client 和 MCPServer 之间的第一次交互。类似 HTTPS 一样需要确认彼此协议版本的兼容性、交换和协商各自能力。Client 必须发送其支持的协议版本，如果 server 支持请求的协议版本，则必须以相同的版本进行响应。否则，server 必须以其支持的其他协议版本进行响应。这应该是 server 支持的最新版本。 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;initialized 能力协商&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   表格，还在加载中，请等待加载完成后再尝试复制 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Prompts&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   MCP 还提供 Prompt 能力，可将重复使用的提示模板和工作流程放在 Server 以便 Client 使用。Prompts 的主要价值是对 Resource 的内容进行解释，让 LLMs 能够更好的理解返回的数据，从而更好的完成任务。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h4_14&quot;&gt;&lt;/span&gt; 
 &lt;h4&gt;Responses&lt;/h4&gt; 
 &lt;div&gt;
   Responses 是对 requests 的回复，其格式为： 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  jsonrpc: &quot;2.0&quot;;
  id: string | number;
  result?: {
    [key: string]: unknown;
  }
  error?: {
    code: number;
    message: string;
    data?: unknown;
  }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   MCP 的核心就是将资源暴露给到 AI 模型，Response 的类型是多种多样的，有文本、二进制文件、API 等等。Server 拥有的 Responses 如何让 AI 模型知道呢？这就需要 Direct resources 直连资源，MCP Server 通过 esources/list 端点公开固定的资源列表，每个资源的属性包含： 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{  
    uri: string;           // Unique identifier for the resource  
    name: string;          // Human-readable name  
    description?: string;  // Optional description  
    mimeType?: string;     // Optional MIME type
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   如果 Server 端的 Responses 的生成是动态资源，那么还可以通过 Resource templates 来支持。在实际中，Server 的 Resource 并不会固定不变，而是时常变化，MCP 提供了资源更新（Resource updates）机制： 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;table cellspacing=&quot;0&quot; style=&quot;border-collapse:collapse; border:none; table-layout:fixed; width:500px&quot;&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        机制类型 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        机制描述 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        应用场景 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        核心特点 
      &lt;/div&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        资源列表变更通知 
      &lt;/div&gt; 
      &lt;div&gt;
        &amp;nbsp; 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        服务器通过 notifications/resources/list_changed 通知客户端资源列表结构性变化 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        目录结构变动、新增资源类型等全局性更新 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;ul&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          结构化变更推送 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          客户端需主动拉取更新 
        &lt;/div&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        资源内容实时订阅 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        客户端通过 resources/subscribe 订阅资源，服务器通过 notifications/resources/updated 推送变更 
      &lt;/div&gt; 
      &lt;div&gt;
        &amp;nbsp; 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        日志文件追加、API 数据刷新等动态内容更新 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;ul&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          支持实时推送 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          可随时取消订阅 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          客户端主动拉取最新内容 
        &lt;/div&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        Streamable HTTP 传输 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        新增流式传输协议，支持断点续传、无状态服务器及动态 SSE 升级 
      &lt;/div&gt; 
      &lt;div&gt;
        &amp;nbsp; 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;div&gt;
        高并发场景、云平台部署、需要兼容 CDN/API 网关的场景 
      &lt;/div&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#dee0e3; border-style:solid; border-width:1px; height:39px; vertical-align:top&quot;&gt; 
      &lt;ul&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          断点续传解决掉线问题 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          无状态服务器降低部署成本 
        &lt;/div&gt; &lt;/li&gt; 
       &lt;li&gt; 
        &lt;div&gt;
          兼容标准 HTTP 生态 
        &lt;/div&gt; &lt;/li&gt; 
      &lt;/ul&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   现在 AI 模型已经知道 Server 有哪些资源了，还需要可以读取到这么 Resource，就需要使用 resources/read 请求。 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt;
   在 MCP Server 中对响应需要做到： 
 &lt;/div&gt; 
 &lt;ol&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     对长时间操作使用进度标记，可逐步报告进度 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     使用适当的错误代码，包含有用的错误消息和发生错误时清理资源 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     不要泄露敏感信息并记录与安全相关的错误 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;span id=&quot;OSC_h4_15&quot;&gt;&lt;/span&gt; 
 &lt;h4&gt;Notifications&lt;/h4&gt; 
 &lt;div&gt;
   Notifications 是从 client 发送到 server 或反向发送的，不需要回复。其格式为： 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  jsonrpc: &quot;2.0&quot;;
  method: string;
  params?: {
    [key: string]: unknown;
  };
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h3_16&quot;&gt;&lt;/span&gt; 
 &lt;h3&gt;案例&lt;/h3&gt; 
 &lt;div&gt;
   本小节以 github.com/mark3labs/mcp-filesystem-server 为例介绍 MCP 相关的消息类型。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h4_17&quot;&gt;&lt;/span&gt; 
 &lt;h4&gt;&lt;strong&gt;初始化会话：initialized&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Request&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;method&quot;: &quot;initialize&quot;,
    &quot;params&quot;: {
        &quot;protocolVersion&quot;: &quot;1.0&quot;,
        &quot;capabilities&quot;: {
            &quot;roots&quot;: {
                &quot;listChanged&quot;: true
            }
        },
        &quot;clientInfo&quot;: {
            &quot;name&quot;: &quot;test-client&quot;,
            &quot;version&quot;: &quot;1.0.0&quot;
        }
    }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Responses&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;result&quot;: {
        &quot;protocolVersion&quot;: &quot;2024-11-05&quot;,
        &quot;capabilities&quot;: {
            &quot;resources&quot;: {
                &quot;subscribe&quot;: true,
                &quot;listChanged&quot;: true
            },
            &quot;tools&quot;: {

            }
        },
        &quot;serverInfo&quot;: {
            &quot;name&quot;: &quot;secure-filesystem-server&quot;,
            &quot;version&quot;: &quot;0.4.1&quot;
        }
    }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h4_18&quot;&gt;&lt;/span&gt; 
 &lt;h4&gt;&lt;strong&gt;发现可用的工具:tools/list&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Request&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;method&quot;: &quot;tools/list&quot;,
    &quot;params&quot;: {
    }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Responses&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;result&quot;: {
        &quot;tools&quot;: [
            {
                &quot;description&quot;: &quot;Create a new directory or ensure a directory exists.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;,
                    &quot;properties&quot;: {
                        &quot;path&quot;: {
                            &quot;description&quot;: &quot;Path of the directory to create&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;path&quot;
                    ]
                },
                &quot;name&quot;: &quot;create_directory&quot;
            },
            {
                &quot;description&quot;: &quot;Retrieve detailed metadata about a file or directory.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;,
                    &quot;properties&quot;: {
                        &quot;path&quot;: {
                            &quot;description&quot;: &quot;Path to the file or directory&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;path&quot;
                    ]
                },
                &quot;name&quot;: &quot;get_file_info&quot;
            },
            {
                &quot;description&quot;: &quot;Returns the list of directories that this server is allowed to access.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;
                },
                &quot;name&quot;: &quot;list_allowed_directories&quot;
            },
            {
                &quot;description&quot;: &quot;Get a detailed listing of all files and directories in a specified path.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;,
                    &quot;properties&quot;: {
                        &quot;path&quot;: {
                            &quot;description&quot;: &quot;Path of the directory to list&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;path&quot;
                    ]
                },
                &quot;name&quot;: &quot;list_directory&quot;
            },
            {
                &quot;description&quot;: &quot;Move or rename files and directories.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;,
                    &quot;properties&quot;: {
                        &quot;destination&quot;: {
                            &quot;description&quot;: &quot;Destination path&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;source&quot;: {
                            &quot;description&quot;: &quot;Source path of the file or directory&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;source&quot;,
                        &quot;destination&quot;
                    ]
                },
                &quot;name&quot;: &quot;move_file&quot;
            },
            {
                &quot;description&quot;: &quot;Read the complete contents of a file from the file system.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;,
                    &quot;properties&quot;: {
                        &quot;path&quot;: {
                            &quot;description&quot;: &quot;Path to the file to read&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;path&quot;
                    ]
                },
                &quot;name&quot;: &quot;read_file&quot;
            },
            {
                &quot;description&quot;: &quot;Recursively search for files and directories matching a pattern.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;,
                    &quot;properties&quot;: {
                        &quot;path&quot;: {
                            &quot;description&quot;: &quot;Starting path for the search&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;pattern&quot;: {
                            &quot;description&quot;: &quot;Search pattern to match against file names&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;path&quot;,
                        &quot;pattern&quot;
                    ]
                },
                &quot;name&quot;: &quot;search_files&quot;
            },
            {
                &quot;description&quot;: &quot;Create a new file or overwrite an existing file with new content.&quot;,
                &quot;inputSchema&quot;: {
                    &quot;type&quot;: &quot;object&quot;,
                    &quot;properties&quot;: {
                        &quot;content&quot;: {
                            &quot;description&quot;: &quot;Content to write to the file&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;path&quot;: {
                            &quot;description&quot;: &quot;Path where to write the file&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;path&quot;,
                        &quot;content&quot;
                    ]
                },
                &quot;name&quot;: &quot;write_file&quot;
            }
        ]
    }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h4_19&quot;&gt;&lt;/span&gt; 
 &lt;h4&gt;&lt;strong&gt;发现可用的工具:tools/call&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Request&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;method&quot;: &quot;tools/call&quot;,
    &quot;params&quot;: {
        &quot;name&quot;: &quot;list_allowed_directories&quot;,
        &quot;arguments&quot;: {
            &quot;path&quot;: &quot;/Users/ouerqiang/Downloads/1.txt&quot;
        }
    }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Responses&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;result&quot;: {
        &quot;content&quot;: [
            {
                &quot;type&quot;: &quot;text&quot;,
                &quot;text&quot;: &quot;Allowed directories:\n\n/Users/ouerqiang/project/gopath/src/github.com/mark3labs/mcp-filesystem-server (file:///Users/ouerqiang/project/gopath/src/github.com/mark3labs/mcp-filesystem-server)\n/Users/ouerqiang/Downloads (file:///Users/ouerqiang/Downloads)\n&quot;
            }
        ]
    }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h3_20&quot;&gt;&lt;/span&gt; 
 &lt;h3&gt;发现可用的资源：resources/list&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Request&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;result&quot;: {
        &quot;content&quot;: [
            {
                &quot;type&quot;: &quot;text&quot;,
                &quot;text&quot;: &quot;Allowed directories:\n\n/Users/ouerqiang/project/gopath/src/github.com/mark3labs/mcp-filesystem-server (file:///Users/ouerqiang/project/gopath/src/github.com/mark3labs/mcp-filesystem-server)\n/Users/ouerqiang/Downloads (file:///Users/ouerqiang/Downloads)\n&quot;
            }
        ]
    }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;Responses&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;jsonrpc&quot;: &quot;2.0&quot;,
    &quot;id&quot;: 12,
    &quot;resources&quot;: [
        {
            &quot;uri&quot;: &quot;file://&quot;,
            &quot;name&quot;: &quot;File System&quot;,
            &quot;description&quot;: &quot;Access to files and directories on the local file system&quot;
        }
    ]
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   其他的格式就请各位同学自行去验证。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h2_21&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;服务层&lt;/h2&gt; 
 &lt;div&gt;
   MCP 服务器可以提供三种主要类型的功能： 
 &lt;/div&gt; 
 &lt;ol&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     Resources：客户端可以读取的类似文件的数据（例如 API 响应或文件内容） 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     Tools：可由 LLM 调用的函数（需经用户批准） 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     Prompts：预先编写的模板，帮助用户完成特定任务 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;div&gt;
   上面的三个功能并不要求 MCP Server 全部提供，可以提供一种或者多种类型的功能。 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt;
   看着也是在 MCP Server 实现了对外部服务的 API 对接给到 AI 模型，为什么还需要多加 MCP，直接让 AI 模型直接调用外部服务 API 不是更好吗？这是因为，MCP 不仅实现了 API 的功能，还带来了更高的标准化和灵活性。 
 &lt;/div&gt; 
 &lt;div&gt;
   表格，还在加载中，请等待加载完成后再尝试复制 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h2_22&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;客户端&lt;/h2&gt; 
 &lt;div&gt;
   对于大多数开发者而言，主要开发的模块还是 MCP Server，而 MCP Client 主要面对的还是直接的用户。客户端可以向服务器提供以下功能： 
 &lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     Sampling： 服务器发起的代理行为和递归交互。采样是一个强大的 MCP 功能，它允许服务器通过客户端请求 AI 模型完成，从而在保持安全性和隐私的同时实现复杂的代理行为。换句话说，Sampling 把 MCP Server 从给 AI 模型提供资源的服务变成一个使用 AI 模型的用户。 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt;
   在业界中也有很多支持 MCP 的应用程序，每个客户端可能支持不同的 MCP 功能，从而允许与 MCP 服务器进行不同程度的集成。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h3_23&quot;&gt;&lt;/span&gt; 
 &lt;h3&gt;业界 MCP Client&lt;/h3&gt; 
 &lt;div&gt;
   https://modelcontextprotocol.io/clients 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;img src=&quot;https://dedao.feishu.cn/space/api/box/stream/download/asynccode/?code=YjExNDVlZDZjNjNhMTRlN2Q3MTliYjc5MTNmZmJlMzZfVW9QNmVwa2dtZUlob0dlNkhtWHZ5R1N5ak5PM1RMSEJfVG9rZW46RlRLemJKRFQ0b0ZZWG54bnRnTmNrSkhvblI4XzE3NDI3MjM2NDc6MTc0MjcyNzI0N19WNA&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h1_24&quot;&gt;&lt;/span&gt; 
 &lt;h1&gt;MCP 实践&lt;/h1&gt; 
 &lt;div&gt;
   本人主要使用 Golang 为主，但是官网上只提供了 Python、TypeScript、Java、Kotlin 的 SDK，并未提供 golang。我也查看了 github 库，也亲身验证了一些框架，目前比较好的 Go MCP 框架有两个： 
 &lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     https://github.com/metoro-io/mcp-golang 
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
     https://github.com/mark3labs/mcp-go 
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt;
   我们可以对比一下这两个框架。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h2_25&quot;&gt;&lt;/span&gt; 
 &lt;h2&gt;对比&lt;/h2&gt; 
 &lt;span id=&quot;OSC_h3_26&quot;&gt;&lt;/span&gt; 
 &lt;h3&gt;核心功能对比&lt;/h3&gt; 
 &lt;div&gt;
   表格，还在加载中，请等待加载完成后再尝试复制 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h3_27&quot;&gt;&lt;/span&gt; 
 &lt;h3&gt;技术选型决策矩阵&lt;/h3&gt; 
 &lt;div&gt;
   表格，还在加载中，请等待加载完成后再尝试复制 
 &lt;/div&gt; 
 &lt;div&gt;
   从代码的设计、使用灵活度和对外部框架的集成而言，使用 
  &lt;strong&gt;metoro-io/mcp-golang&lt;/strong&gt;是不错的选择。 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h1_28&quot;&gt;&lt;/span&gt; 
 &lt;h1&gt;总结&lt;/h1&gt; 
 &lt;div&gt;
   MCP 作为 Anthropic 开源的 AI 系统与数据源交互协议，凭借其统一性、可控性和高效性在 AI 集成领域展现出潜力。该协议通过标准化工具调用、资源访问和提示模板，解决了传统插件或自定义工具开发的高成本问题，尤其为非技术人员提供了便捷的 AI 能力扩展途径。例如，开发者可通过 MCP Server 快速暴露功能，供 Claude、Cursor 等客户端直接调用，显著提升跨系统协作的灵活性。 
 &lt;/div&gt; 
 &lt;div&gt;
   然而，MCP 仍面临多重挑战。协议公布仅半年，主流编程语言（如 Go、Rust）的支持尚不完善，生态建设仍处于早期阶段，可用工具数量和质量难以满足复杂场景需求。同时，LangChain 创始人 Nuno Campos 指出，当前模型对工具的调用成功率仅约 50%，且 MCP 的双向通信机制和本地化部署方式增加了实现复杂度，对比 IBM 新推出的 ACP 协议，其在无状态设计、跨平台兼容性等方面可能存在劣势。 
 &lt;/div&gt; 
 &lt;div&gt;
   尽管如此，MCP 的前景值得期待。随着基础模型能力的迭代优化，工具调用准确率有望提升。若协议能进一步简化部署流程（如云端托管）、扩大语言支持范围，并借助社区力量构建高质量工具生态，其有望成为连接 AI 系统与现实世界的核心桥梁。正如 Harrison Chase 所言，MCP 的核心价值在于为不可控的第三方 Agent 提供标准化接入方案，这种开放性使其在长尾场景中具备持久生命力。 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;strong&gt;一句话，MCP 未来可期！&lt;/strong&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;span id=&quot;OSC_h1_29&quot;&gt;&lt;/span&gt; 
 &lt;h1&gt;附录&lt;/h1&gt; 
 &lt;div&gt;
   https://www.anthropic.com/news/model-context-protocol 
 &lt;/div&gt; 
 &lt;div&gt;
   https://mp.weixin.qq.com/s/WndS_QSbQFalFvBcGzur4A 
 &lt;/div&gt; 
 &lt;div&gt;
   https://mp.weixin.qq.com/s/kQrltrzRk-SVLfWm_zsPoA 
 &lt;/div&gt; 
 &lt;div&gt;
   https://github.com/CherryHQ/cherry-studio/releases/tag/v1.1.7 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;notranslate&quot;&gt;
  &amp;nbsp; 
&lt;/div&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/qiangmzsx/blog/17987222</link>
            <guid isPermaLink="false">https://my.oschina.net/qiangmzsx/blog/17987222</guid>
            <pubDate>Sun, 23 Mar 2025 08:53:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>AutoGluon —— 仅用 3 行代码即可实现快速准确的 ML</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                        
                                                                                    &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;AutoGluon 由 AWS AI 开发，可自动执行机器学习任务，使你能够轻松在应用程序中实现强大的预测性能。只需几行代码，你就可以在图像、文本、时间序列和表格数据上训练和部署高精度机器学习和深度学习模型。&lt;/span&gt;&lt;/p&gt;

&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#1f2328&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;AutoGluon 支持 Python 3.9 - 3.12，并且可在 Linux、MacOS 和 Windows 上使用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#1f2328&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;可以使用以下方式安装 AutoGluon：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div style=&quot;text-align:start&quot;&gt;
&lt;pre&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:var(--bgColor-muted, var(--color-canvas-subtle))&quot;&gt;&lt;span style=&quot;color:#1f2328&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:var(--fgColor-default, var(--color-fg-default))&quot;&gt;&lt;span style=&quot;background-color:var(--bgColor-muted, var(--color-canvas-subtle))&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;pip&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; &lt;span&gt;autogluon&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#1f2328&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;仅用 3 行代码即可构建准确的端到端 ML 模型&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div style=&quot;text-align:start&quot;&gt;
&lt;pre&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:var(--bgColor-muted, var(--color-canvas-subtle))&quot;&gt;&lt;span style=&quot;color:#1f2328&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:var(--fgColor-default, var(--color-fg-default))&quot;&gt;&lt;span style=&quot;background-color:var(--bgColor-muted, var(--color-canvas-subtle))&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-keyword)&quot;&gt;from&lt;/span&gt;&lt;/span&gt; &lt;span&gt;autogluon&lt;/span&gt;.&lt;span&gt;tabular&lt;/span&gt; &lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-keyword)&quot;&gt;import&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-variable)&quot;&gt;TabularPredictor&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;predictor&lt;/span&gt; &lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-constant)&quot;&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-entity)&quot;&gt;TabularPredictor&lt;/span&gt;&lt;/span&gt;(&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-constant)&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-string)&quot;&gt;&quot;class&quot;&lt;/span&gt;&lt;/span&gt;).&lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-constant)&quot;&gt;fit&lt;/span&gt;&lt;/span&gt;(&lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-string)&quot;&gt;&quot;train.csv&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span&gt;predictions&lt;/span&gt; &lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-constant)&quot;&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span&gt;predictor&lt;/span&gt;.&lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-constant)&quot;&gt;predict&lt;/span&gt;&lt;/span&gt;(&lt;span&gt;&lt;span style=&quot;color:var(--color-prettylights-syntax-string)&quot;&gt;&quot;test.csv&quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

                                                                    &lt;/div&gt;
                                                                </description>
            <link>https://www.oschina.net/p/autogluon</link>
            <guid isPermaLink="false">https://www.oschina.net/p/autogluon</guid>
            <pubDate>Sun, 23 Mar 2025 08:42:00 GMT</pubDate>
        </item>
        <item>
            <title>开源 AI Agent 工具 Browser Use 开发商融资 1700 万美元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2025%2F03%2F23%2Fbrowser-use-the-tool-making-it-easier-for-ai-agents-to-navigate-websites-raises-17m%2F&quot; target=&quot;_blank&quot;&gt;据 TechCrunch 报道&lt;/a&gt;&lt;/u&gt;，Browser Use 近日向已完成 1700 万美元种子轮融资，由 Felicis 的 Astasia Myers 领投，Paul Graham、A Capital 和 Nexus Venture Partners 参投。这笔融资此前尚未被公开报道。&lt;/p&gt; 
&lt;p&gt;作为 Y Combinator2025 年冬季项目的一部分，Browser Use 专注于解决一个关键问题：让网站对 AI Agent 更具&quot;可读性&quot;。该公司由 Magnus Müller 和 Gregor Zunic 于去年通过苏黎世联邦理工学院的加速器创立，两人在五周内开发出首个演示版本并选择开源发布。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-be00974fa2b8a4189cd652a661c93dbfd9a.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;Browser Use 的核心功能是：将网站中的按钮和界面元素解析成更易于处理、类似文本的结构化格式，以便 AI Agent 理解页面上的各种操作选项，并自主做出决策。联合创始人 Müller 表示：&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;「&lt;strong&gt;现在很多 AI Agent 依赖视觉系统，通过截图来导航网页，但这个过程经常出错。我们把网页转换成 Agent 可以理解的形式，这种方法让我们可以用更低的成本反复执行相同的任务。」&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0324/164713_0QIp_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;该公司近期声名鹊起，部分原因是中国初创公司 Butterfly Effect 在其病毒式传播的 Manus 工具中采用了 Browser Use 技术。目前，Y Combinator 冬季批次中已有 20 多家公司使用 Browser Use 的解决方案。&lt;/p&gt; 
&lt;p&gt;领投方 Felicis 的 Astasia Myers 表示:&quot;我们认为 Web AI Agent 是下一个真正有助于实现端到端人工任务自动化的前沿领域。Web AI Agent 是不断变化的数字环境中以文本为中心的静态预训练模型之间的动态桥梁。&quot;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;阅读更多&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/334343/omniparser-v2&quot; target=&quot;news&quot;&gt;微软发布 OmniParser V2，将任意 LLM 变成可操作计算机的 AI Agent&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/331290/openai-operator&quot; target=&quot;news&quot;&gt;OpenAI 发布首个 AI 智能体&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/p/omniparser&quot;&gt;OmniParser&lt;span&gt;&amp;nbsp;——&amp;nbsp;&lt;/span&gt;&lt;span&gt;基于 GUI Agent 的纯视觉屏幕解析工具&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340695/browser-use-the-tool-raises-17m</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340695/browser-use-the-tool-raises-17m</guid>
            <pubDate>Sun, 23 Mar 2025 08:39:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>微信内测聊天界面内置腾讯元宝</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FGXqTLlyx6vml0QNrq8e_kQ&quot; target=&quot;_blank&quot;&gt;根据「市象」的独家报道&lt;/a&gt;&lt;/u&gt;，腾讯似乎正在悄悄把元宝内嵌进微信体系。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0324/162605_tu9T_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;目前看，虽然披着「红包助手」的皮，&lt;strong&gt;但功能上已经具备置顶、分享、互动等权限，形态上有点像「AI 版文件传输助手」&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;实测显示，这个「元宝红包封面助手」不仅能问答图片、文件，还能直接总结公众号文章和网页链接，功能已经不止是简单的对话助手，而是在朝 AI 工作流工具方向靠拢。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0324/162628_3MQL_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0324/162645_XpKg_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;阅读更多&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/339845&quot; target=&quot;news&quot;&gt;腾讯元宝成为中国 DAU 排名第三的 AI 原生移动应用&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/338559&quot; target=&quot;news&quot;&gt;腾讯元宝宣布支持上传、导出腾讯文档&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/336988&quot; target=&quot;news&quot;&gt;腾讯元宝狂砸钱推广，27 天投流近 3 亿&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340690</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340690</guid>
            <pubDate>Sun, 23 Mar 2025 08:28:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Ubuntu 启动核心工具链现代化改造：Rust 重写计划背后的技术决策</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;根据 Canonical 工程副总裁 Jon Seager 在 Ubuntu 论坛的&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.ubuntu.com%2Ft%2Fcarefully-but-purposefully-oxidising-ubuntu%2F56995&quot; target=&quot;_blank&quot;&gt;最新声明&lt;/a&gt;&lt;/u&gt;，Ubuntu 计划从 25.10 版本开始逐步引入基于 Rust 的&lt;code&gt;uutils&lt;/code&gt;工具集，取代沿用数十年的 GNU coreutils（包含&lt;code&gt;ls&lt;/code&gt;、&lt;code&gt;cp&lt;/code&gt;、&lt;code&gt;mv&lt;/code&gt;等经典命令）。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0324/161856_Pqfp_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;这一变革瞄准将于 2026 年发布的 Ubuntu LTS 版本，目标是通过 Rust 的内存安全特性降低攻击面，同时保持与 GNU 工具 100% 的脚本兼容性。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;技术选型逻辑&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;GNU coreutils 作为 C 语言编写的核心基础设施，长期面临内存管理漏洞风险（如缓冲区溢出）。根据&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnvd.nist.gov%2F&quot; target=&quot;_blank&quot;&gt;美国国家漏洞数据库&lt;/a&gt;统计，2024 年 C/C++项目漏洞中，34% 与内存安全相关。而 Rust 凭借所有权模型和编译器强制检查，理论上可消除此类问题。uutils 项目采用 MIT 协议，目前已实现 80% 的核心命令兼容性，开发团队承诺「零脚本适配成本」（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fuutils%2Fcoreutils&quot; target=&quot;_blank&quot;&gt;项目 GitHub 页&lt;/a&gt;）。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;开发者迁移路径&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Canonical 同步推出实验工具&lt;code&gt;oxidizr&lt;/code&gt;，支持在 GNU 工具链与 Rust 版本间动态切换。通过命令&lt;code&gt;oxidizr toggle coreutils&lt;/code&gt;，开发者可实时对比&lt;code&gt;ls -l&lt;/code&gt;等命令的输出差异。初期测试显示，Rust 版工具内存占用降低 12%-18%，但大规模部署仍需验证边缘案例（如&lt;code&gt;find -exec&lt;/code&gt;管道处理）。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;生态影响评估&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;此次替换涉及超过 100 个基础命令，但社区已有成功先例：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;sudo-rs&lt;/code&gt;（Rust 重写的 sudo）通过&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsecurity.googleblog.com%2F2024%2F03%2Frust-in-linux-security.html&quot; target=&quot;_blank&quot;&gt;Google 安全研究审计&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Red Hat 在 Fedora 40 中试点&lt;code&gt;coreutils-rs&lt;/code&gt;模块&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;风险提示：虽然 uutils 承诺兼容性，但企业环境中依赖&lt;code&gt;/proc&lt;/code&gt;文件系统或 LD_PRELOAD 注入的监控工具需重新适配。建议运维团队通过&lt;code&gt;oxidizr benchmark&lt;/code&gt;命令评估性能波动，并关注&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdimage.ubuntu.com%2Fdaily-live%2Fcurrent%2F&quot; target=&quot;_blank&quot;&gt;Ubuntu 25.10 每日构建版&lt;/a&gt;进展。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;em&gt;延伸讨论：&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Rust 是否将重塑 Linux 基础设施？参考 CNCF 2024 报告，83% 的云原生项目已引入 Rust 组件。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;（本文部分数据引用自&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fuutils.github.io%2F&quot; target=&quot;_blank&quot;&gt;uutils 技术文档&lt;/a&gt;与&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.ubuntu.com%2Ft%2Foxidizing-ubuntu-core-utils%2F14536&quot; target=&quot;_blank&quot;&gt;Ubuntu 论坛&lt;/a&gt;）&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340686/ubuntu-should-become-more-modern-with-rust-tools</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340686/ubuntu-should-become-more-modern-with-rust-tools</guid>
            <pubDate>Sun, 23 Mar 2025 08:19:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>蚂蚁回应 AI 训练降本：基于不同芯片持续调优，将逐步开源</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;彭博社援引知情人士报道称，蚂蚁集团使用中国制造的半导体开发训练人工智能模型的技术，可将成本降低 20%。对此，蚂蚁方面回应称：蚂蚁针对不同芯片持续调优，以降低 AI 应用成本，目前取得了一定的进展，也会逐步通过开源分享。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;330&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/163214_FtR9_4252687.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;事件背景：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;蚂蚁集团的 Ling 团队近日在预印版 Arxiv 平台上发布了题为《每一个 FLOP 都至关重要:无需高级 GPU 即可扩展 3000 亿参数混合专家 LING 大模型》的技术论文，介绍了他们研发的两款新型大语言模型:百灵轻量版（Ling-Lite）和百灵增强版 (Ling-Plus)。这两款模型在设计上采用了多项创新，能够在低性能硬件上高效训练，显著降低了成本。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;百灵轻量版的参数规模为 168 亿，其中激活参数为 27.5 亿。而增强版的基座模型则拥有高达 2900 亿的参数，激活参数为 288 亿。这两款模型的性能均达到行业领先水平，尤其是增强版，其 3000 亿参数的 MoE 模型在使用国产 GPU 的低性能设备上进行训练时，表现与高端英伟达芯片的模型相当。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;通常，MoE 模型的训练需要依赖昂贵的高性能 GPU，如英伟达的 H100 和 H800，这不仅成本高昂，还受到芯片短缺的限制，从而影响了其在资源有限环境中的应用。为此，蚂蚁集团 Ling 团队提出了一个全新的目标 ——「不使用高级 GPU」 扩展模型，突破了资源和预算的限制。他们的创新训练策略包括动态参数分配、混合精度调度、以及升级的训练异常处理机制，这些策略有效地缩短了中断响应时间，并且优化了模型评估流程，压缩了验证周期超过 50%。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在实验中，Ling 团队对 9 万亿个 token 进行了 Ling-Plus 的预训练。结果显示，使用高性能硬件配置训练 1 万亿 token 的成本约为 635 万元人民币，而采用蚂蚁的优化方法后，低规格硬件训练成本降至 508 万元左右，节省了近 20%。同时，性能与阿里通义 Qwen2.5-72B-Instruct 和 DeepSeek-V2.5-1210-Chat 相当。&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340684</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340684</guid>
            <pubDate>Sun, 23 Mar 2025 08:17:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Mozilla.ai 发布 OpenStreetMap AI 辅助工具链，计算机视觉提升地图标注效率 5 倍</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Mozilla.ai 近日开源其 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.mozilla.ai%2Fmap-features-in-openstreetmap-with-computer-vision%2F&quot; target=&quot;_blank&quot;&gt;OpenStreetMap AI Helper Blueprint 项目&lt;/a&gt;，通过 YOLOv11 目标检测模型与 Meta SAM 图像分割模型的组合，将衞星影像自动转换为符合 OpenStreetMap 规范的地理多边形数据。实测显示，游泳池等典型地物标注效率较纯人工操作提升 500%&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;img height=&quot;420&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/161425_LmRu_3820517.png&quot; width=&quot;1332&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;技术架构&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;数据采集层&lt;/strong&gt;：整合 Mapbox 衞星瓦片服务（zoom level 18）与 OpenStreetMap Overpass API，构建带地理座标的标注数据集&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;模型训练层&lt;/strong&gt;：基于 Ultralytics 框架微调 YOLOv11，模型体积仅 78MB（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fmozilla-ai%2Fswimming-pool-detector&quot; target=&quot;_blank&quot;&gt;Hugging Face 仓库&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;推理验证层&lt;/strong&gt;：SAM 模型生成像素级掩膜后，通过 GeoJSON 座标转换确保多边形拓扑正确性&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;工作流创新&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;人工选定兴趣区域（如西班牙加利西亚大区）&lt;/li&gt; 
 &lt;li&gt;自动下载 1km² 范围内衞星影像并切片处理&lt;/li&gt; 
 &lt;li&gt;目标检测模型筛选潜在特征，分割模型生成精确轮廓&lt;/li&gt; 
 &lt;li&gt;去重校验后通过 JOSM 编辑器提交变更集&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img height=&quot;618&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/161455_8GPg_3820517.png&quot; width=&quot;1240&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;726&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/161524_IFjw_3820517.png&quot; width=&quot;1422&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;img height=&quot;608&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/161537_PDQe_3820517.png&quot; width=&quot;1298&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;img height=&quot;626&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/161600_LYXJ_3820517.png&quot; width=&quot;1282&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;开发者接入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;支持自定义地物类型训练，需准备 200+ 标注样本（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmozilla-ai%2Fosm-ai-helper&quot; target=&quot;_blank&quot;&gt;数据集规范&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;提供完整 Colab 工作流： 
  &lt;ul&gt; 
   &lt;li&gt;数据准备：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcolab.research.google.com%2Fgithub%2Fmozilla-ai%2Fosm-ai-helper%2Fblob%2Fmain%2Fdemo%2Fcreate_dataset.ipynb%3Fref%3Dblog.mozilla.ai&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;Create Dataset Colab&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;模型微调：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcolab.research.google.com%2Fgithub%2Fmozilla-ai%2Fosm-ai-helper%2Fblob%2Fmain%2Fdemo%2Ffinetune_model.ipynb%3Fref%3Dblog.mozilla.ai&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;Finetune Model Colab&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;生产部署：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcolab.research.google.com%2Fgithub%2Fmozilla-ai%2Fosm-ai-helper%2Fblob%2Fmain%2Fdemo%2Frun_inference.ipynb%3Fref%3Dblog.mozilla.ai&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;Run Inference Colab&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340683/map-features-in-openstreetmap-with-computer-vision</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340683/map-features-in-openstreetmap-with-computer-vision</guid>
            <pubDate>Sun, 23 Mar 2025 08:17:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>百度秒哒全量上线，号称国内首个对话式应用开发平台</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;百度今日宣布，其国内首创的对话式应用开发平台「&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.baidu.com%2Fproduct-s%2Fmiaoda_home&quot; target=&quot;_blank&quot;&gt;秒哒&lt;/a&gt;」已全面上线。该平台允许用户通过自然语言直接描述需求，系统即可自动生成具备完整功能的应用代码，标志着无代码开发工具领域的一大突破。&lt;/p&gt; 
&lt;p&gt;在秒哒的官方网页上，百度强调这是他们精心打造的首款无代码工具，旨在赋予每个人如同程序员般的创造能力，声称「无需编写代码，即可将任何创意变为现实」。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;285&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-904f0fa47a304e6b90a605da832adfe8bd5.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;百度创始人李彦宏在介绍秒哒时曾指出，无代码编程技术依托大模型直接生成代码，彻底颠覆了传统编程模式，实现了零代码门槛，任何人都能快速上手。&lt;/p&gt; 
&lt;p&gt;此外，多智能体协作功能则基于百度文心大模型的先进思考与规划能力，能够智能调度和编排不同的智能体，以协同完成复杂任务。至于多工具调用，则是利用文心大模型的广泛连接性，轻松接入网页检索、iRAG、地图 API 等多种实用工具。&lt;/p&gt; 
&lt;p&gt;「秒哒的推出预示着一个新时代的来临——在这个时代，个人仅需凭借创意与想法，便能驱动多个智能体协同作业，将梦想变为现实，甚至创造经济价值。这无疑为开发者及广大用户开辟了一条前所未有的创新之路。」&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340681</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340681</guid>
            <pubDate>Sun, 23 Mar 2025 08:09:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Next.js 中间件曝高危漏洞 CVE-2025-29927，授权绕过风险波及全版本</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;研究人员在 Next.js 框架的中间件实现中发现严重安全漏洞（CVE-2025-29927），攻击者通过伪造 &lt;code&gt;x-middleware-subrequest&lt;/code&gt; 请求头可绕过身份验证与路由保护机制。该漏洞影响 11.1.4 至 15.2.3 之前的所有版本，覆盖超过 82% 的生产环境部署（依据 Next.js 官方统计面板）。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;漏洞原理&lt;/strong&gt;&lt;br&gt; 当中间件检测到 &lt;code&gt;x-middleware-subrequest&lt;/code&gt; 头时会跳过授权逻辑，攻击者可通过构造特定格式的请求头（如 &lt;code&gt;pages/_middleware&lt;/code&gt; 或 &lt;code&gt;middleware:&lt;/code&gt; 重复序列）触发该机制。该缺陷使得路由重写、JWT 校验等安全措施完全失效。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;影响范围&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;11.1.4 ≤ Next.js &amp;lt; 12.2.0&lt;/li&gt; 
 &lt;li&gt;12.2.0 ≤ Next.js &amp;lt; 14.2.25&lt;/li&gt; 
 &lt;li&gt;15.0.0 ≤ Next.js &amp;lt; 15.2.3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;修复方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;立即升级至安全版本： 
  &lt;ul&gt; 
   &lt;li&gt;Next.js 15.x → ≥15.2.3 (&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnextjs.org%2Fblog%2Fnext-15-2-3&quot; target=&quot;_blank&quot;&gt;更新日志&lt;/a&gt;)&lt;/li&gt; 
   &lt;li&gt;Next.js 14.x → ≥14.2.25 (&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnextjs.org%2Fblog%2Fnext-14-2-25&quot; target=&quot;_blank&quot;&gt;更新日志&lt;/a&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;临时缓解措施：在 CDN/反向代理层过滤&amp;nbsp;&lt;code&gt;x-middleware-subrequest&lt;/code&gt;&amp;nbsp;头（需注意 Nginx 配置需包含&amp;nbsp;&lt;code&gt;proxy_set_header X-Middleware-Subrequest &quot;&quot;;&lt;/code&gt;）&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style=&quot;color:#dbdbdb; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;开发者可通过运行 &lt;code&gt;npx next-info@latest&lt;/code&gt; 快速检测项目风险状态。Vercel 已为托管项目自动部署热补丁，私有部署用户需手动处理。&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzeropath.com%2Fblog%2Fnextjs-middleware-cve-2025-29927-auth-bypass&quot; target=&quot;_blank&quot;&gt;漏洞技术细节&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340680/nextjs-middleware-cve-2025-29927-auth-bypass</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340680/nextjs-middleware-cve-2025-29927-auth-bypass</guid>
            <pubDate>Sun, 23 Mar 2025 08:02:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Cloudflare 与 Vercel CEO 公开互怼</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;近日，全球互联网基础设施领域上演了一场罕见的「CEO 大战」——Cloudflare CEO Matthew Prince 与 Vercel CEO Guillermo Rauch 在社交媒体 X 上展开激烈交锋，双方围绕技术漏洞修复、服务稳定性与行业道德展开唇枪舌战。&lt;/p&gt; 
&lt;p&gt;这场冲突不仅暴露了技术巨头间的生态竞争，也为开发者技术选型提供了重要参考。&lt;/p&gt; 
&lt;h3&gt;事件导火索：Next.js 高危漏洞处置争议&lt;/h3&gt; 
&lt;p&gt;事件始于 Next.js 框架曝出的高危身份验证绕过漏洞（&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fadvisories%2FGHSA-f82v-jwr5-mffw&quot; target=&quot;_blank&quot;&gt;CVE-2025-29927&lt;/a&gt;&lt;/u&gt;），该漏洞允许攻击者无需凭证即可访问受保护路由。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0324/154810_K1Uz_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;作为 Next.js 的主要维护者，Vercel 被社区质疑响应迟缓，而 Cloudflare 则迅速发布 Workers 平台补丁方案，并推出「Diverce」迁移工具（命名戏谑 Divorce+Vercel），宣称可一键将 Next.js 应用从 Vercel 迁移至 Cloudflare 平台。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0324/154853_nrV5_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Cloudflare 这波操作把&lt;span&gt;Vercel CEO 给气炸了，直接贴脸开怼，说 Cloudflare DDoS 是垃圾，而且服务天天故障。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0324/154918_DLMp_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;技术博弈背后的生态竞争&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;架构理念冲突&lt;/strong&gt;&lt;br&gt; Cloudflare 强调边缘计算的性能优势，其 Workers 无服务器平台支持在 300+城市就近处理请求；Vercel 则主张前端优先的开发体验，通过 Next.js 实现服务端渲染与边缘函数的深度整合。二者在「边缘计算」定义上存在根本分歧。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;商业模式碰撞&lt;/strong&gt;&lt;br&gt; 尽管双方都提供免费层服务（Cloudflare Workers 每日 10 万次请求/Vercel 每月 100GB 带宽），但盈利路径迥异：Cloudflare 依赖企业级安全服务，Vercel 则通过 Serverless 资源超额收费。此次漏洞事件暴露了开源项目商业化过程中的责任归属问题。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;开发者体验之争&lt;/strong&gt;&lt;br&gt; Vercel 以「零配置部署」著称，与 Next.js 深度绑定形成技术护城河；Cloudflare 则通过兼容标准（如 WinterCG）构建开放生态，支持多种框架。Diverce 工具的推出，实质是试图打破前端部署的市场格局。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;开发者技术选型启示&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;安全与响应机制评估&lt;/strong&gt;&lt;br&gt; 此次事件表明，依赖单一供应商存在风险。开发者需关注：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;漏洞响应 SLA（Cloudflare 此次 24 小时内提供缓解方案）&lt;/li&gt; 
   &lt;li&gt;漏洞赏金计划覆盖范围（Vercel 未将 Next.js 纳入其漏洞计划）&lt;/li&gt; 
   &lt;li&gt;供应链透明度（漏洞详情披露是否及时）&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;迁移成本考量&lt;/strong&gt;&lt;br&gt; Cloudflare 提供的自动迁移工具虽降低技术门槛，但需注意：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;功能兼容性（Vercel 特有功能如 ISR 需重构）&lt;/li&gt; 
   &lt;li&gt;定价模型差异（Vercel 按访问计费 vs Cloudflare 按请求计费）&lt;/li&gt; 
   &lt;li&gt;监控生态完整性（Vercel 提供一体化性能分析）&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;社区治理模式对比&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Next.js 采用 MIT License 但由 Vercel 主导开发，关键决策缺乏社区参与&lt;/li&gt; 
 &lt;li&gt;Cloudflare Workers 生态基于 Apache 2.0 License，更多厂商参与标准制定，开发者需评估技术栈的锁定风险与长期可维护性。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;行业影响与趋势展望&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;边缘计算标准分化&lt;/strong&gt;&lt;br&gt; Cloudflare 推动的 WinterCG 标准与 Vercel 的 Next.js 私有 API 之争，可能导致边缘运行时碎片化。开发者需关注标准兼容性，避免过度依赖特定平台。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;开源商业化伦理讨论&lt;/strong&gt;&lt;br&gt; 此次事件引发对开源项目「伪开放」的质疑——当核心基础设施由商业公司控制时，如何平衡社区利益与企业诉求？这或推动更严格的开源治理规范出台。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;开发者关系管理升级&lt;/strong&gt;&lt;br&gt; CEO 亲自下场辩论反映技术公司愈发重视开发者心智争夺。预计将有更多厂商推出迁移奖励计划、漏洞响应承诺等开发者友好政策。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;em&gt;这场巨头之争最终将如何影响技术生态？开发者又该如何在性能、安全与供应商锁定之间取得平衡？欢迎在评论区分享你的见解。&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340676</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340676</guid>
            <pubDate>Sun, 23 Mar 2025 07:49:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Ubuntu 22.04 LTS 正式支持 NVIDIA Jetson Orin 系列，助力边缘 AI 开发</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#262626; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;Canonical 宣布 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.omgubuntu.co.uk%2F2025%2F03%2Fubuntu-announces-official-support-for-nvidia.jetson-ai-modules&quot; target=&quot;_blank&quot;&gt;Ubuntu 22.04 LTS 正式支持 NVIDIA Jetson Orin 系列计算模块&lt;/a&gt;，这一合作旨在为边缘 AI、机器学习和机器人等应用提供优化的性能和开箱即用的兼容性。通过这一支持，开发者可以在 NVIDIA Jetson 模块上使用 Ubuntu，享受企业级的安全更新和持续支持，同时减少平台配置的麻烦，从而有更多时间专注于创新和实验。&lt;/p&gt; 
&lt;p style=&quot;color:#262626; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;img height=&quot;804&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/153029_YoEw_3820517.png&quot; width=&quot;1518&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;此外，Canonical 还提供了 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.omgubuntu.co.uk%2F2025%2F03%2Fubuntu-announces-official-support-for-nvidia.jetson-ai-modules&quot; target=&quot;_blank&quot;&gt;Ubuntu Core 24 镜像&lt;/a&gt;，专为物联网和边缘计算设备设计。Ubuntu Core 是一个最小化、安全且严格限制的 Ubuntu 版本，支持 OTA 更新和轻松回滚。虽然预构建的 Ubuntu Core 24 镜像尚未提供下载，但 Canonical 提供了手动创建自定义镜像的文档。&lt;/p&gt; 
&lt;p style=&quot;color:#262626; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;开发者可以从 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.omgubuntu.co.uk%2F2025%2F03%2Fubuntu-announces-official-support-for-nvidia.jetson-ai-modules&quot; target=&quot;_blank&quot;&gt;Ubuntu 官方网站&lt;/a&gt; 下载适用于 NVIDIA Jetson 的 Ubuntu Server 22.04 镜像，支持的模块包括 Jetson AGX Orin 系列、Jetson Orin Nano 系列和 Jetson Orin NX 系列。这一合作标志着在边缘 AI 领域的重大进展，结合了 Ubuntu 的企业级可靠性和 NVIDIA 的尖端加速计算技术，使开发者能够更轻松地将 AI 从概念推向生产。&lt;/p&gt; 
&lt;p style=&quot;color:#262626; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;更多详细信息可以参考 Canonical 的官方公告。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340672/ubuntu-announces-official-support-for-nvidia-jetson-ai-modules</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340672/ubuntu-announces-official-support-for-nvidia-jetson-ai-modules</guid>
            <pubDate>Sun, 23 Mar 2025 07:31:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>2024 年最热门的 20 家开源初创企业</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;欧洲风险投资公司 Runa Capital 发布了一份「&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frunacap.com%2Fross-index%2Fannual-2024%2F&quot; target=&quot;_blank&quot;&gt;2024 年最热门的开源初创公司&lt;/a&gt;」榜单。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;该公司自 2020 年以来一直运营 Runa Open Source Startup (ROSS) 指数，按照 GitHub「star」数量增长速度每季度更新一次榜单。并从 2023 年开始制作年度报告，重点介绍当年最受欢迎的商业开源初创公司。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;2024 年度榜首是 Ollama，其次分别是 Zed Industries 和 Langgenius。具体榜单如下：&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;331&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d316f31d1d286ad464f916ffb9aeb59e957.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;🇨🇦&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Follama.com%2F&quot; target=&quot;_blank&quot;&gt;Ollama&lt;/a&gt;&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Follama%2Follama&quot; target=&quot;_blank&quot;&gt;ollama/ollama&lt;/a&gt;, 105.1K stars, 76.1new stars)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;开发了一个本地推理平台，用于运行 Llama 3.3 和 DeepSeek-R1 等 LLM。2021 年在加拿大多伦多成立。从 Essence、Rogue、Sunflower 和 Y Combinator 筹集了 50 万美元。&lt;/li&gt; 
 &lt;li&gt;🇺🇸&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzed.dev%2F&quot; target=&quot;_blank&quot;&gt;Zed Industries&lt;/a&gt;&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fzed-industries%2Fzed&quot; target=&quot;_blank&quot;&gt;zed-industries/zed&lt;/a&gt;, 52.1K stars, 52.1new stars)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;提供专为人类和 AI 之间的高性能协作而设计的 Zed 代码编辑器。2021 年成立于旧金山。从 Root、Redpoint 等公司筹集了 1250 万美元。&lt;/li&gt; 
 &lt;li&gt;🇺🇸&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdify.ai%2F&quot; target=&quot;_blank&quot;&gt;Langgenius&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Flanggenius%2Fdify&quot; target=&quot;_blank&quot;&gt;langgenius/dify&lt;/a&gt;, 56.7K stars, 43.4new stars)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;是一个 LLM 应用开发平台，可协调从代理到复杂 AI 工作流的应用程序。2023 年在纽约成立。从 5Y、阿里云计算、VCshare、China Growth、Delian 筹集了 140 万美元。&lt;/li&gt; 
 &lt;li&gt;🇺🇸&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcomfy.org%2F&quot; target=&quot;_blank&quot;&gt;ComfyUI&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcomfyanonymous%2Fcomfyui&quot; target=&quot;_blank&quot;&gt;comfyanonymous/comfyui&lt;/a&gt;, 61.9K stars, 40.9new stars)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;是一款 node-based 应用程序，用于使用生成式 AI 模型生成图像、视频和音频。该公司于 2024 年在旧金山成立。&lt;/li&gt; 
 &lt;li&gt;🇺🇸&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fall-hands.dev%2F&quot; target=&quot;_blank&quot;&gt;All Hands&lt;/a&gt;&amp;nbsp;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fall-hands-ai%2Fopenhands&quot; target=&quot;_blank&quot;&gt;all-hands-ai/openhands&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;, 39.6K stars, 39.6new stars&lt;/strong&gt;&lt;strong&gt;)。&lt;/strong&gt;是一款先进的软件开发 AI 代理。2024 年在波士顿成立。从 Rebellion、Menlo、Betaworks、Pillar 等公司筹集了 500 万美元。&lt;/li&gt; 
 &lt;li&gt;🇨🇳&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flobehub.com%2F&quot; target=&quot;_blank&quot;&gt;LobeHub&lt;/a&gt;&amp;nbsp;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Flobehub%2Flobe-chat&quot; target=&quot;_blank&quot;&gt;lobehub/lobe-chat&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;, 50.5K stars, 36.0new stars&lt;/strong&gt;&lt;strong&gt;)。&lt;/strong&gt;是一个 LLM 聊天框架，支持不同的 AI 供应商、多模态和 RAG。2023 年在中国杭州成立。&lt;/li&gt; 
 &lt;li&gt;🇬🇧&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstirlingpdf.com%2F&quot; target=&quot;_blank&quot;&gt;Stirling PDF&lt;/a&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fstirling-tools%2Fstirling-pdf&quot; target=&quot;_blank&quot;&gt;stirling-tools/stirling-pdf&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;, 48.2K stars, 34.7new stars&lt;/strong&gt;&lt;strong&gt;）。&lt;/strong&gt;是一款本地托管的 Web 应用程序，用于编辑、转换和管理 PDF 文件。成立于 2024 年，总部位于英国。&lt;/li&gt; 
 &lt;li&gt;🇺🇸&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmaybefinance.com%2F&quot; target=&quot;_blank&quot;&gt;Maybe Finance&lt;/a&gt;&amp;nbsp;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmaybe-finance%2Fmaybe&quot; target=&quot;_blank&quot;&gt;maybe-finance/maybe&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;, 34.7K stars, 34.7new stars&lt;/strong&gt;&lt;strong&gt;)。&lt;/strong&gt;提供金融工具和见解，以实现更明智的投资。2021 年成立于阿拉巴马州伯明翰。从 Attach、Calm Company、Invicta、Bay Wharf、Bicoastal 等公司筹集了 246 万美元。&lt;/li&gt; 
 &lt;li&gt;🇺🇸&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fastral.sh%2F&quot; target=&quot;_blank&quot;&gt;Astral&lt;/a&gt;&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fastral-sh%2Fuv&quot; target=&quot;_blank&quot;&gt;astral-sh/uv&lt;/a&gt;, 34.1K stars, 34.1new stars)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;提供 UV，一个速度极快的 Python 包和项目管理器。2023 年在纽约成立。从 Accel、Base Case Capital、Caffeinated 等公司筹集了 400 万美元。&lt;/li&gt; 
 &lt;li&gt;🇺🇸&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fscreenshottocode.com%2F&quot; target=&quot;_blank&quot;&gt;Screenshot to Code&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fabi%2Fscreenshot-to-code&quot; target=&quot;_blank&quot;&gt;abi/screenshot-to-code&lt;/a&gt;, 66.3K stars, 33.7new stars)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;将设计截图转换为代码，简化前端开发。2023 年在纽约成立。&lt;/li&gt; 
 &lt;li&gt;🇺🇸&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmyshell.ai%2F&quot; target=&quot;_blank&quot;&gt;MyShell&lt;/a&gt;&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmyshell-ai%2Fopenvoice&quot; target=&quot;_blank&quot;&gt;myshell-ai/openvoice&lt;/a&gt;, 30.3K stars, 29.7new stars)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;提供 OpenVoice，这是一种即时、多语言语音克隆工具，可对风格和情感进行细粒度控制。2023 年在旧金山成立。从 Dragonfly、INCE Capital 等公司筹集了 1680 万美元。&lt;/li&gt; 
 &lt;li&gt;🇨🇦&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffuel.network%2F&quot; target=&quot;_blank&quot;&gt;Fuel&lt;/a&gt;&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffuellabs%2Ffuel-core&quot; target=&quot;_blank&quot;&gt;fuellabs/fuel-core&lt;/a&gt;, 57.8K stars, 28.3new stars)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;是一款高性能以太坊&amp;nbsp;layer-2 rollup。2019 年成立于加拿大温哥华。从 Blockchain Capital、Stratos Technologies、CoinFund 等公司筹集了 8150 万美元。&lt;/li&gt; 
 &lt;li&gt;🇨🇭&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fshardeum.org%2F&quot; target=&quot;_blank&quot;&gt;Shardeum&lt;/a&gt;&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fshardeum%2Fshardeum&quot; target=&quot;_blank&quot;&gt;shardeum/shardeum&lt;/a&gt;, 28.1K stars, 28.1new stars)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;是一个基于 EVM 的线性可扩展智能合约平台。2022 年在瑞士楚格成立。从 Blockchain Founders、Alpha、MH、TPC 等筹集了 2360 万美元。&lt;/li&gt; 
 &lt;li&gt;🇨🇦Puter&amp;nbsp;&lt;strong&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fheyputer%2Fputer&quot; target=&quot;_blank&quot;&gt;heyputer/puter&lt;/a&gt;, 27.2K stars, 27.2new stars)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;是一款互联网操作系统。2022 年在加拿大温哥华成立。&lt;/li&gt; 
 &lt;li&gt;🇨🇿&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fexcalidraw.com%2F&quot; target=&quot;_blank&quot;&gt;Excalidraw&lt;/a&gt;&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fexcalidraw%2Fexcalidraw&quot; target=&quot;_blank&quot;&gt;excalidraw/excalidraw&lt;/a&gt;, 88.4K stars, 27.0new stars)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;是一款浏览器内白板工具，可帮助用户轻松以手绘风格绘制图表。2020 年在捷克布尔诺成立。&lt;/li&gt; 
 &lt;li&gt;🇨🇳&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fragflow.io%2F&quot; target=&quot;_blank&quot;&gt;RAGFlow&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Finfiniflow%2Fragflow&quot; target=&quot;_blank&quot;&gt;infiniflow/ragflow&lt;/a&gt;, 26.8K stars, 26.8new stars)。&lt;/strong&gt;是一款基于深度文档理解的 RAG 引擎。2023 年在中国上海成立。&lt;/li&gt; 
 &lt;li&gt;🇸🇬&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frustdesk.com%2F&quot; target=&quot;_blank&quot;&gt;RustDesk&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frustdesk%2Frustdesk&quot; target=&quot;_blank&quot;&gt;rustdesk/rustdesk&lt;/a&gt;, 78.3K stars, 25.9new stars)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;是一款自托管的远程桌面应用程序。2020 年在新加坡成立。&lt;/li&gt; 
 &lt;li&gt;🇭🇺&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcoolify.io%2F&quot; target=&quot;_blank&quot;&gt;Coolify&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcoollabsio%2Fcoolify&quot; target=&quot;_blank&quot;&gt;coollabsio/coolify&lt;/a&gt;, 35.9K stars, 25.9new stars)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;是 Heroku、Netlify 和 Vercel 的自托管替代方案。成立于 2022 年。&lt;/li&gt; 
 &lt;li&gt;🇺🇸&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flangchain.com%2F&quot; target=&quot;_blank&quot;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Flangchain-ai%2Flangchain&quot; target=&quot;_blank&quot;&gt;langchain-ai/langchain&lt;/a&gt;, 97.2K stars, 24.7new stars)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;是一个用于构建复杂 AI 应用程序的框架。2023 年成立于旧金山。从 Benchmark、Sequoia 等公司筹集了 3500 万美元。&lt;/li&gt; 
 &lt;li&gt;🇸🇬&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjan.ai%2F&quot; target=&quot;_blank&quot;&gt;Jan&lt;/a&gt;&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;(&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjanhq%2Fjan&quot; target=&quot;_blank&quot;&gt;janhq/jan&lt;/a&gt;, 24.7K stars, 24.2new stars)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;让用户直接在电脑上运行和管理 AI 模型。2023 年在新加坡成立。&lt;/li&gt; 
&lt;/ol&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340670/the-20-hottest-open-source-startups-of-2024</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340670/the-20-hottest-open-source-startups-of-2024</guid>
            <pubDate>Sun, 23 Mar 2025 07:26:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>LLVM/Clang 编译器全面适配 AVX10.2，512 位支持成为强制要求</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#262626; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;近期，英特尔发布了更新后的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Fnews%2FLLVM-Clang-AVX10.2-Always-512&quot; target=&quot;_blank&quot;&gt;AVX10 技术白皮书&lt;/a&gt;，其中一项重要决定是 AVX10.2 指令集将不再将 512 位浮点数和整数支持视为可选，而是强制要求。这一变化意味着未来的 AVX10.2 处理器将全面支持 128 位、256 位和 512 位指令集，同时取消了 256 位嵌入式舍入支持，转而专注于 512 位支持。LLVM/Clang 编译器此前基于英特尔最初的 AVX10 设计假设进行了开发，现在正进行调整以适应这些新变化。&lt;/p&gt; 
&lt;p style=&quot;color:#262626; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;img height=&quot;1052&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0324/151103_8P78_3820517.png&quot; width=&quot;1280&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;AVX10 是英特尔推出的新一代高级向量扩展指令集，旨在提升处理器在并行计算任务中的性能。AVX10.2 作为其最新版本，强制要求 512 位支持，这不仅有助于提升性能，还简化了编程，特别是在 x86_64 微架构特性级别方面。LLVM/Clang 作为开源编译器基础设施的重要组成部分，此前已经实现了对 AVX10.2 的支持。然而，随着英特尔的最新决定，LLVM/Clang 需要进行以下调整：修正对 256 位/512 位支持的假设，取消对 AVX10.2 无 512 位支持的保护措施，移除不再需要的 256 位嵌入式舍入支持。&lt;/p&gt; 
&lt;p style=&quot;color:#262626; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;这一变化对开发者来说是一个好消息。未来所有 AVX10.2 处理器都将支持 512 位指令集，这意味着开发者可以更轻松地编写高性能代码，而无需担心底层指令集的兼容性问题。特别是在需要处理大量数据的场景中，512 位指令集将带来显著的性能提升。随着 AVX10.2 指令集的普及，预计将有更多的应用和库开始利用这一技术。LLVM/Clang 的全面支持无疑将加速这一进程，推动高性能计算领域的进一步发展。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340666/llvm-clang-avx10-2-always-512</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340666/llvm-clang-avx10-2-always-512</guid>
            <pubDate>Sun, 23 Mar 2025 07:11:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>谷歌为 Gemini 添加实时 AI 视频功能</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theverge.com%2Fnews%2F634480%2Fgoogle-gemini-live-video-screen-sharing-astra-features-rolling-out&quot; target=&quot;_blank&quot;&gt;据 The Verge 报道&lt;/a&gt;&lt;/u&gt;，谷歌已经开始在 Gemini Live 上推出新的 AI 功能，可以让人工智能「看到」用户设备的屏幕或手机摄像头上的内容，并根据读取的内容来和用户进行互动。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-38ebb095a6cb3952b06c11f505a9866c5f4.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ad27a2296e6c09d3e165f0dc731ba0852ac.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;近一年前，谷歌首次展示了「阿斯特拉计划」 (Project Astra)——该项目为现在这些新功能奠定基础。&lt;/p&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#222222; margin-left:0; margin-right:0&quot;&gt;谷歌公司在去年 5 月召开的 2024 年 I / O 开发者大会上，曾展示了基于 Gemini 的全新 Project Astra 项目，可以本地运行在 Pixel 手机上，被看作是对标 OpenAI GPT-4o 的最新模型。&lt;/p&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#222222; margin-left:0; margin-right:0&quot;&gt;谷歌表示 Project Astra 是最新的多模态 AI 项目，用户打开摄像头，该多模态项目可以直接解释用户画面中物品。&lt;/p&gt; 
 &lt;p style=&quot;color:#222222; margin-left:0; margin-right:0&quot;&gt;&lt;em&gt;相关来源：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F9to5google.com%2F2025%2F03%2F22%2Fgemini-live-astra-rollout-start%2F&quot; target=&quot;_blank&quot;&gt;https://9to5google.com/2025/03/22/gemini-live-astra-rollout-start/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/div&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/340660/google-gemini-live-video-screen-sharing-astra-features</link>
            <guid isPermaLink="false">https://www.oschina.net/news/340660/google-gemini-live-video-screen-sharing-astra-features</guid>
            <pubDate>Sun, 23 Mar 2025 06:52:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
    </channel>
</rss>