<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 简体中文</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 01 Jul 2025 07:48:21 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>微软开源 GitHub Copilot Chat 的 VS Code 扩展</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微软在 5 月举办的开发者大会上&lt;a href="https://www.oschina.net/news/350732/ms-vs-code-open-source-ai-editor"&gt;宣布&lt;/a&gt;要将 VS Code 打造成开源 AI 编辑器，近日该计划达成了&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fblogs%2F2025%2F06%2F30%2FopenSourceAIEditorFirstMilestone" target="_blank"&gt;首个里程碑&lt;/a&gt;——GitHub Copilot Chat 的 VS Code 扩展采用 MIT 开源许可证正式开源。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1098" src="https://static.oschina.net/uploads/space/2025/0701/153012_qXMd_2720166.png" width="2460" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;开源地址：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fvscode-copilot-chat" target="_blank"&gt;https://github.com/microsoft/vscode-copilot-chat&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;该扩展提供了类似 Cursor 的 Chat 面板，通过聊天的方式来编辑代码，它还可以根据代码提交者、变量和斜线命令等信息，给出与代码库相关的回答。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-4a176b7fa906f848e0f9b0982762510cc49.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-190bfc8a0cc77c524892684d44d95a0f15c.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;扩展地址：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DGitHub.copilot-chat" target="_blank"&gt;https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-chat&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;由于 Copilot Chat 与 VS Code 深度集成，其发布与 VS Code 同步进行，因此每个新版本的 Copilot Chat 仅兼容最新版本的 VS Code。这意味着如果你使用的是旧版本的 VS Code，将无法使用最新的 Copilot Chat。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/358178</link>
      <guid isPermaLink="false">https://www.oschina.net/news/358178</guid>
      <pubDate>Tue, 01 Jul 2025 07:31:35 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>字节、腾讯、阿里等 13 家头部企业去年利润总额同比增 19.7%</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;5 月底结束的 2024 年度企业所得税汇算清缴数据显示，字节跳动、腾讯、阿里巴巴等 13 家头部企业营业收入和利润总额同比分别增长 11.9%、19.7%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;上述企业是数字经济领域的代表企业，汇算清缴数据显示，2024 年度，数字经济及其核心产业营业收入和利润总额同比分别增长 5.9%、2.7%。其中，信息传输、软件和信息技术服务业营业收入和利润总额同比分别增长 11.5%、13.2%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;除数字经济外，2024 年度，医药制造、航空航天等高技术产业营业收入和利润总额同比分别增长 8.9%、7.5%。细分行业看，科学研究和技术服务业营业收入和利润总额同比分别增长 11.7%、7.5%，航空航天产业营业收入和利润总额同比分别增长 10.5%、26.3%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此外，机器人产业也步入发展快车道，近两年机器人产业营业收入平均同比增长 10.2%。其中，特殊作业机器人、服务消费机器人、工业机器人 2024 年度同比分别增长 28.4%、12.4%、7%，多场景应用加速落地。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;总体上看，数字经济、高技术产业、机器人产业三个领域 2024 年度共减免企业所得税 1.97 万亿元，总营业收入同比增长 7.1%，利润总额同比增长 5.2%，我国新质生产力持续发展壮大。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;国家税务总局相关负责人表示，税务部门将不折不扣落实落细结构性减税降费政策，同时，依法严厉打击违规享受、恶意骗取税费优惠等违法行为，坚决防止政策「红包」落入不法分子「腰包」。（新京报）&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/358163</link>
      <guid isPermaLink="false">https://www.oschina.net/news/358163</guid>
      <pubDate>Sun, 11 May 2025 06:03:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>蚂蚁数科面向香港市场开放四大自研技术</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;蚂蚁数科面向香港市场开放四大自研技术——Layer2 网络、大模型开发工具、「区块链+IoT」可信架构、机构级 Web3 钱包技术，为香港建设全球数字资产创新中心提供全栈技术服务。&lt;/p&gt; 
&lt;p&gt;&lt;img height="388" src="https://oscimg.oschina.net/oscnet/up-e94b03fe5b81530ba178b109352a29a4037.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;资料显示，蚂蚁数科自 2016 年起投入区块链技术研发，全球区块链授权专利排名第一，核心技术如智能合约、网络传输、存储引擎、跨链技术等已取得重大突破，处于全球领先水平。此前，蚂蚁数科作为核心成员加入香港金管局 Ensemble 沙盒，并宣布将海外总部落户香港。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/358160</link>
      <guid isPermaLink="false">https://www.oschina.net/news/358160</guid>
      <pubDate>Sun, 11 May 2025 05:55:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Forest v1.7 发布！前方高能，一大波新特性来袭！</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;h2&gt;&lt;strong&gt;Forest 介绍&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;Forest 是一个开源的 Java HTTP 客户端框架，它能够将 HTTP 的所有请求信息（包括 URL、Header 以及 Body 等信息）绑定到您自定义的 Interface 方法上，能够通过调用本地接口方法的方式发送 HTTP 请求&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;简单的栗子&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;声明式接口&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;创建一个 interface，并用&lt;code&gt;@Get&lt;/code&gt;注解修饰接口方法。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span style="color:#c678dd"&gt;public&lt;/span&gt; &lt;span&gt;&lt;span style="color:#c678dd"&gt;interface&lt;/span&gt; &lt;span style="color:#e6c07b"&gt;MyClient&lt;/span&gt; &lt;/span&gt;{
    &lt;span style="color:#61aeee"&gt;@Get&lt;/span&gt;(&lt;span style="color:#98c379"&gt;"http://localhost:8080/hello"&lt;/span&gt;)
    &lt;span&gt;String &lt;span style="color:#61aeee"&gt;hello&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;通过&lt;code&gt;@Get&lt;/code&gt;注解，将上面的 MyClient 接口中的&lt;code&gt;simpleRequest()&lt;/code&gt;方法绑定了一个 HTTP 请求， 其 URL 为&lt;code&gt;http://localhost:8080/hello&lt;/code&gt;，并默认使用 GET 方式，且将请求响应的数据以 String 的方式返回给调用者&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;编程式接口&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;Forest.get(&lt;span style="color:#98c379"&gt;"http://localhost:8080/hello"&lt;/span&gt;).execute();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;编程式接口则更为简单直接&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;v1.7 版本升级&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;本次发布包含了很多重大更新内容，我们对字符串模板的语法进行了增强，支持了空安全语法和深度变量引用，并提供了更友好的报错信息；在 Cookie 方面也进行了增强，提供了 Cookie 自动保存和读取的机制，并添加了更完善的 API 接口；我们也对拦截器进行了优化改进，不再建议直接使用&lt;code&gt;Interceptor&lt;/code&gt;接口和它的&lt;code&gt;onSuccess&lt;/code&gt;方法，取而代之的是&lt;code&gt;ForestInterceptor&lt;/code&gt;和&lt;code&gt;onResponse&lt;/code&gt;方法，它们要比前者更安全，性能也更好；除此之外，此次更新对请求的性能进行了全面的优化，在默认使用编程式接口、不打印日志的情况下，可以达到和 hutool 的 HttpUtil 差不多的耗时。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;v1.7 新增的一大波特性&lt;/strong&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;空安全语法&lt;/li&gt; 
 &lt;li&gt;Elvis 表达式&lt;/li&gt; 
 &lt;li&gt;深度引用&lt;/li&gt; 
 &lt;li&gt;嵌套字符串模板&lt;/li&gt; 
 &lt;li&gt;更安全的拦截器&lt;/li&gt; 
 &lt;li&gt;请求级别日志开关&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;strong&gt;空安全语法&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;在原来版本，如果在字符串模板中引用一个没定义过的变量会支持报错。现在用空安全语法可以让它不再报错，而是直接返回 null 值。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;em&gt;// 没定义过 testVar 变量，通过 ? 一样可以正常引用&lt;/em&gt;
Forest.get(&lt;span style="color:#98c379"&gt;"/test/{testVar?}"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;或者，引用了一个不存在或值为 null 的变量后，再用点&lt;code&gt;.&lt;/code&gt;访问它的属性，这在老版本中自然是直接报错的。现在，可以通过&lt;code&gt;?.&lt;/code&gt;符号自动判断是否为空。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;em&gt;// 会先判断 testVar 是否为空，然后 testVar.a 是否为空，其中一个为空就会直接返回 null&lt;/em&gt;
&lt;em&gt;// 不会报错&lt;/em&gt;
Forest.get(&lt;span style="color:#98c379"&gt;"/test/{testVar?.a?.name}"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;strong&gt;Elvis 表达式&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;新版本支持使用 Elvis 操作符&lt;code&gt;??&lt;/code&gt;，也称为是空值合并操作符。简单来说就是在一个变量或一个表达式后面追加两个问号 (&lt;code&gt;??&lt;/code&gt;)，并在它的右边再跟上一个表达式作为左边变量或表达式为空的情况下所返回的默认值。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;em&gt;// 如果变量 a 为空或未定义，则返回字符串 ok&lt;/em&gt;
&lt;em&gt;// 最后 URL 为 http://localhost:8080/ok&lt;/em&gt;
&lt;em&gt;// 若变量 a 不为空，则返回它自己的值&lt;/em&gt;
Forest.get(&lt;span style="color:#98c379"&gt;"http://localhost:8080/{a ?? 'ok'}"&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;Elvis 表达式也可以和空安全属性访问操作符&lt;code&gt;?.&lt;/code&gt;相结合&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;em&gt;// 如果变量 a 为空或未定义，则返回字符串 ok，不会再继续读取 a.b &lt;/em&gt;
&lt;em&gt;// 最后 URL 为 http://localhost:8080/ok&lt;/em&gt;
Forest.get(&lt;span style="color:#98c379"&gt;"http://localhost:8080/{a?.b ?? 'ok'}"&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;strong&gt;深度引用&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;在原来版本中，字符串模板中的变量只能引用到第一层，如果该变量的值是引用其他的变量，字符串模板并不会进行解析。而现在，不管引用了多少层变量，都可以解析到底。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span style="color:#d19a66"&gt;forest:&lt;/span&gt;
  &lt;span style="color:#d19a66"&gt;variables:&lt;/span&gt;
    &lt;span style="color:#d19a66"&gt;var1:&lt;/span&gt; &lt;span style="color:#98c379"&gt;"{user.name}"&lt;/span&gt;
    &lt;span style="color:#d19a66"&gt;var2:&lt;/span&gt; &lt;span style="color:#98c379"&gt;"{user.password}"&lt;/span&gt;
    &lt;span style="color:#d19a66"&gt;user:&lt;/span&gt;
      &lt;span style="color:#d19a66"&gt;name:&lt;/span&gt; &lt;span style="color:#98c379"&gt;foo&lt;/span&gt;
      &lt;span style="color:#d19a66"&gt;password:&lt;/span&gt; &lt;span style="color:#98c379"&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;在 Java 代码中直接引用&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;em&gt;// 最终 URL 为: /test/foo/bar&lt;/em&gt;
Forest.get(&lt;span style="color:#98c379"&gt;"/test/{var1}/{var2}"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;如果不想进行深度引用，可以使用深度引用停止语法，即在变量后加上&lt;code&gt;!&lt;/code&gt;符号，那么就只会引用一层该变量的值，至于该变量的值是否会包含其他字符串模板的内容，就不会再进行解析了。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;em&gt;// 最终 URL 为: /test/{user.name}/{user.password}&lt;/em&gt;
&lt;em&gt;// 变量 var1 和 var2 的值直接返回字符串，而不会进行任何解析&lt;/em&gt;
Forest.get(&lt;span style="color:#98c379"&gt;"/test/{var1!}/{var2!}"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;strong&gt;嵌套字符串模板&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;用两个反引号&lt;code&gt;`&lt;/code&gt;将要拼接的字符串内容包裹起来 (如 &lt;code&gt;`字符串模板内容`&lt;/code&gt;)，并且当中可以使用&lt;code&gt;`#{配置属性}`&lt;/code&gt;、&lt;code&gt;`${表达式}`&lt;/code&gt;、&lt;code&gt;`{表达式}`&lt;/code&gt;等嵌套表达式语法&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;em&gt;// 如果 a 为空，则返回 b 和 c 用斜杠拼接后的字符串&lt;/em&gt;
&lt;em&gt;// 若 a 为空, b 为 foo，c 为 bar，则 URL 为 /foo/bar&lt;/em&gt;
Forest.get(&lt;span style="color:#98c379"&gt;"/{a ?? `{b}/{c}`}"&lt;/span&gt;)

&lt;em&gt;// 任何一种形态内容都可以，可以理解为就是一种字符串，一种在表达式内部可动态拼接的字符串&lt;/em&gt;
Forest.get(&lt;span style="color:#98c379"&gt;"/{a ?? `?b={b}&amp;amp;c={c}`}"&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;strong&gt;更安全的拦截器&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;本次版本更新后，不再建议使用&lt;code&gt;Interceptor&lt;/code&gt;(当然要用也可以用，不影响以前的老代码)，同时引入了更安全的&lt;code&gt;ForestInterceptor&lt;/code&gt;接口&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span style="color:#c678dd"&gt;public&lt;/span&gt; &lt;span&gt;&lt;span style="color:#c678dd"&gt;class&lt;/span&gt; &lt;span style="color:#e6c07b"&gt;MyInterceptor&lt;/span&gt; &lt;span style="color:#c678dd"&gt;implements&lt;/span&gt; &lt;span style="color:#e6c07b"&gt;ForestInterceptor&lt;/span&gt; &lt;/span&gt;{


    &lt;span style="color:#61aeee"&gt;@Override&lt;/span&gt;
    &lt;span&gt;&lt;span style="color:#c678dd"&gt;public&lt;/span&gt; ResponseResult &lt;span style="color:#61aeee"&gt;onResponse&lt;/span&gt;&lt;span&gt;(ForestRequest request, ForestResponse response)&lt;/span&gt; &lt;/span&gt;{
        &lt;span style="color:#c678dd"&gt;if&lt;/span&gt; (response.isError()) {
            &lt;em&gt;// 返回错误标志&lt;/em&gt;
            &lt;span style="color:#c678dd"&gt;return&lt;/span&gt; error(response.getException());
        }
        &lt;em&gt;// 通过 response.getResult() 或 response.get(数据类型.class) 来获取响应数据&lt;/em&gt;

        &lt;em&gt;// 返回继续执行标志&lt;/em&gt;
        &lt;span style="color:#c678dd"&gt;return&lt;/span&gt; proceed();
    }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;strong&gt;请求级别日志开关&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;不再需要 new 一个 LogConfiguration 对象，直接在 ForestRequest 的链式调用中即可设置日志开关&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Forest.post(&lt;span style="color:#98c379"&gt;"/test"&lt;/span&gt;)
        .logEnabled(&lt;span style="color:#c678dd"&gt;true&lt;/span&gt;) &lt;em&gt;// 请求日志总开关&lt;/em&gt;
        .logRequest(&lt;span style="color:#c678dd"&gt;true&lt;/span&gt;) &lt;em&gt;// 请求内容日志开关&lt;/em&gt;
        .logRequestHeaders(&lt;span style="color:#c678dd"&gt;true&lt;/span&gt;) &lt;em&gt;// 请求头日志开关&lt;/em&gt;
        .logRequestBody(&lt;span style="color:#c678dd"&gt;true&lt;/span&gt;)  &lt;em&gt;// 请求体日志开源&lt;/em&gt;
        .logResponseStatus(&lt;span style="color:#c678dd"&gt;true&lt;/span&gt;) &lt;em&gt;// 响应状态日志开关&lt;/em&gt;
        .logResponseHeaders(&lt;span style="color:#c678dd"&gt;true&lt;/span&gt;) &lt;em&gt;// 响应头日志开关&lt;/em&gt;
        .logResponseContent(&lt;span style="color:#c678dd"&gt;false&lt;/span&gt;) &lt;em&gt;// 响应体内容日志开关&lt;/em&gt;
        .execute();
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;strong&gt;官网和仓库地址&lt;/strong&gt;&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;官网地址:&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;http://forest.dtflyx.com&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;Gitee 仓库地址:&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;https://gitee.com/dromara/forest&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;Github 仓库地址:&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style="color:#000000; margin-left:0px; margin-right:0px; text-align:left"&gt;https://github.com/dromara/forest&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;strong&gt;本次更新内容&lt;/strong&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;feat: 字符串模板支持空安全语法&lt;/li&gt; 
 &lt;li&gt;feat: 更友好的字符串模板错误消息&lt;/li&gt; 
 &lt;li&gt;feat: 字符串模板&lt;code&gt;{&lt;/code&gt;、&lt;code&gt;${&lt;/code&gt;等符号支持转义&lt;code&gt;\\\\{&lt;/code&gt;、&lt;code&gt;\\\\${&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;feat: 字符串模板支持深度变量引用&lt;/li&gt; 
 &lt;li&gt;feat: 字符串模板支持停止深度引用的语法&lt;/li&gt; 
 &lt;li&gt;feat: 支持嵌套字符串模板&lt;/li&gt; 
 &lt;li&gt;feat: 新增更安全的 Forest 拦截器接口 ForestInterceptor&lt;/li&gt; 
 &lt;li&gt;feat: 通过配置自定义异步线程池拒绝策略&lt;/li&gt; 
 &lt;li&gt;feat: 支持 Bear 认证器&lt;/li&gt; 
 &lt;li&gt;feat: 支持&lt;code&gt;@Var&lt;/code&gt;作为方法和类的变量绑定注解&lt;/li&gt; 
 &lt;li&gt;feat: 新增 ForestRequest 级别的日志开关接口&lt;/li&gt; 
 &lt;li&gt;feat: 增强 Cookie 相关 API 接口&lt;/li&gt; 
 &lt;li&gt;feat: 后台自动清理过期 Cookie&lt;/li&gt; 
 &lt;li&gt;feat: 支持 Cookie 自动化存取机制&lt;/li&gt; 
 &lt;li&gt;fix: 和老版本 forest 冲突时，新版本 Forest 类缺乏 get(url)、post(url) 等方法签名，造成错误 (#IC7LIH)&lt;/li&gt; 
 &lt;li&gt;fix: body log 在部分环境中文乱码&lt;/li&gt; 
 &lt;li&gt;fix: 修改接口中常量的命名，避免用户在其与只有大小写区别的方法之间产生混淆&lt;/li&gt; 
 &lt;li&gt;fix: 调用声名式接口的 hashCode() 方法会死循环&lt;/li&gt; 
 &lt;li&gt;fix: 以 ForestResponse 为返回类型时，T 的子类匹配问题&lt;/li&gt; 
 &lt;li&gt;fix: 重复读取响应流时报错&lt;/li&gt; 
 &lt;li&gt;fix: 嵌套 json 字符串无法正常解析&lt;/li&gt; 
 &lt;li&gt;refactor: 重构 URL 解析过程&lt;/li&gt; 
 &lt;li&gt;refactor: 重构变量作用域&lt;/li&gt; 
 &lt;li&gt;refactor: 重构 Forest 变量体系&lt;/li&gt; 
 &lt;li&gt;refactor: ForestCookie 不再依赖 OkHttp&lt;/li&gt; 
 &lt;li&gt;refactor: ForestCookie.parse() 接口&lt;/li&gt; 
 &lt;li&gt;refactor: 添加键值对类型请求体删除接口 ForestBody.removeNameValueBody&lt;/li&gt; 
 &lt;li&gt;optimize: 优化请求性能&lt;/li&gt; 
 &lt;li&gt;optimize: 根据 Response 类型动态判断响应是否自动关闭&lt;/li&gt; 
 &lt;li&gt;optimize: 默认后端改为 httpclient&lt;/li&gt; 
 &lt;li&gt;optimize: 拦截器优化&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/358148/forest-1-7-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/358148/forest-1-7-released</guid>
      <pubDate>Sun, 11 May 2025 05:21:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>加锁失效，非锁之过，加之错也</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;作者：京东零售，邢成&lt;/p&gt; 
&lt;span id="OSC_h3_1"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;多个进程或线程同时 (或着说在同一段时间内) 访问同一资源会产生并发问题。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;银行两操作员同时操作同一账户就是典型的例子。比如 A、B 操作员同时读取一余额为 1000 元的账户，A 操作员为该账户增加 100 元，B 操作员同时为该账户减去 50 元，A 先提交，B 后提交。 最后实际账户余额为 1000-50=950 元，但本该为 1000+100-50=1050。&lt;strong&gt;这就是典型的并发问题&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;从事零售供应链库存业务，对库存数量操作增减十分频繁，同样存在类似上述银行取款遇到的问题，库存数量操作有误势必给前台销售产生损失影响，因此需要关注对库存数量并发操作下的一致性。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;下面通过一个真实的案例分享在并发情况下如何保证库存数量的准确性。&lt;/p&gt; 
&lt;span id="OSC_h3_2"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;strong&gt;问题是什么-加锁失效&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;看看下面这段流程和代码，思考会有并发问题吗？&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//c52b6c3f660ed58046c9e16a5be9c444.webp" alt="在这里插入图片描述" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;加锁前&lt;/strong&gt; &lt;strong&gt;，获取箱子明细数据，此处在锁之外，存在并发脏读问题&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//1036ef25fae37b26c448522f6777c80c.webp" alt="在这里插入图片描述" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; &lt;strong&gt;加锁后&lt;/strong&gt; &lt;strong&gt;，并进行箱子上架分批次回传业务处理&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//020a84a9615ca8e8cec22118aefca76f.webp" alt="在这里插入图片描述" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;加锁后，&lt;/strong&gt; &lt;strong&gt;更新箱子明细上架数量逻辑：已上架数量 = 加锁前的明细数据（脏读） + 报文回传的明细数据，直接进行行更新&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//21d80ae4a594960a582dde2c19321099.webp" alt="在这里插入图片描述" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_3"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;strong&gt;原因是什么-加锁的位置不正确&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//20d9ce564f5386039bb12242e16ef05b.webp" alt="在这里插入图片描述" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;核心的问题原因&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1.&lt;strong&gt;业务分布式锁失效：&lt;/strong&gt; 使用分布式锁加锁了，但是仍然使用加锁前查询的数据，导致出现脏读&lt;/p&gt; 
&lt;p&gt;2.&lt;strong&gt;Mysql 锁失效：&lt;/strong&gt; 数据库更新时，未上任何锁，导致脏读的数据直接覆盖更新当前行&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;有同学这时问了，为啥防重码也没有生效呢？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;防重码主要是用作幂等逻辑的，同一个请求多次处理，结果仍然是相同的。&lt;/p&gt; 
&lt;p&gt;但是这是两次不同的请求，防重码是不同的，因此不能只依赖防重码保证一致性。&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_4"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;strong&gt;解决方案有哪些&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;1、代码层面：&lt;/strong&gt; 使用锁（如互斥锁、读写锁、分布式锁等）来控制资源的访问，数据获取的全部操作都需要再获取锁后才进行。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;将获取箱子明细的代码移动到加锁之后，只有获取到分布式锁，才能执行分批次上架查询和更新（串行化）&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//5ffc0121557805521cbb33921c4be06a.webp" alt="在这里插入图片描述" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;对应改造后的代码：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//751c2001d8d70843f24dcf8b6fa5eaa6.webp" alt="在这里插入图片描述" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2、数据库层面：&lt;/strong&gt; 实现事务管理，确保数据的一致性；合理设置事务隔离级别，以防止脏读、或者采用乐观锁或悲观锁来处理并发更新，合理设计查询效率，减少锁竞争。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;数据库的并发上锁处理和业务代码的上锁是互补的关系&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;因为无法保证后续业务的调整或其他业务代码的调用能始终保持获取数据的一致性，数据库的并发上锁处理更多是一种兜底保证机制。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;乐观锁更新&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//e4262e1d681aa19763c8066296032481.webp" alt="在这里插入图片描述" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;悲观锁更新&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//4078a93beef3c9b077595bb8968b3a5d.webp" alt="在这里插入图片描述" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;扩展方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1.&lt;strong&gt;应用程序设计：&lt;/strong&gt; 在应用程序设计阶段，尽量避免长时间持有数据库连接或事务，减少并发操作的可能性，利用 AI 代码评审或者人工提前找出可能出现并发问题的地方；合理设置锁的粒度，避免锁失效。&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;网络负载层面：&lt;/strong&gt; 采用限流控制访问频率；采用分布式数据库，进行数据分片，降低单节点并发压力；使用负载均衡，将网络请求分发到不同的服务器，提高系统处理并发的能力，防止系统过载。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;1.&lt;strong&gt;请求层面：&lt;/strong&gt; 前端点击防重、系统幂等防重、尽可能降低同一请求的多次重试访问引起的一致性问题。&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;通过以上措施，可以在不同层面有效地防止并发问题，保证系统的数据的一致性。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4090830/blog/18638221</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18638221</guid>
      <pubDate>Sun, 11 May 2025 03:26:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>通义千问 Qwen-TTS 新增支持北京话、上海话和四川话中文方言</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;通义千问团队更新并&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F-VDOJrDgVzC6JI4CVTHe4w" target="_blank"&gt;上线&lt;/a&gt;了 Qwen-TTS 文本转语音服务，&amp;nbsp;新增支持生成三种中文方言，包括北京话、上海话和四川话。&lt;/p&gt; 
&lt;p&gt;据介绍，Qwen-TTS 使用了超过 300 万小时的大规模语料库进行训练，合成效果达到了人类级别的自然度和表现力，旨在提供超自然、富有表现力的音频，并能智能处理韵律、语速和情感。&lt;/p&gt; 
&lt;p&gt;值得一提的是，Qwen-TTS 能够根据输入文本自动调整韵律、节奏和情绪变化，进一步提升语音的真实感和表达力。&lt;/p&gt; 
&lt;p&gt;目前，Qwen-TTS 支持七种中英双语音色，包括 Cherry、Ethan、Chelsie、Serena、Dylan（北京话）、Jada（上海话） 和 Sunny（四川话）。未来，我们还将推出更多语言和语音风格，进一步丰富用户的选择体验。&lt;/p&gt; 
&lt;p&gt;详情查看&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fqwenlm.github.io%2Fblog%2Fqwen-tts%2F" target="_blank"&gt;https://qwenlm.github.io/blog/qwen-tts/&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/358128/qwen-tts</link>
      <guid isPermaLink="false">https://www.oschina.net/news/358128/qwen-tts</guid>
      <pubDate>Sun, 11 May 2025 03:06:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>消息称苹果考虑让 Anthropic 和 OpenAI 为 Siri 提供支持</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#212623"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2025-06-30%2Fapple-weighs-replacing-siri-s-ai-llms-with-anthropic-claude-or-openai-chatgpt" target="_blank"&gt;彭博社&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#000000"&gt;报道称，苹果正在考虑使用 OpenAI 和 Anthropic 的 AI 模型来支持其更新版 Siri，而不是使用该公司内部开发的技术。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="329" src="https://oscimg.oschina.net/oscnet/up-b75a8d1cc618ffd03df5516bae4e561bc31.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;消息指出，苹果公司正在继续构建一个名为「LLM Siri」的内部项目，该项目使用内部 AI 模型。但该公司已要求 OpenAI 和 Anthropic 训练其可在苹果云基础设施上运行的 AI 模型版本，以供测试。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;由于一系列技术挑战，苹果被迫将原定于 2025 年发布的人工智能 Siri 推迟到 2026 年或更晚。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;这一失败或许由来已久；过去几年，苹果在 AI 竞赛中一直落后于谷歌、OpenAI 和 Anthropic。虽然 Siri 已经可以调用 ChatGPT 来回答难题，但苹果现在似乎正在探索与第三方 AI 提供商的技术进行更深入的整合。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/358124</link>
      <guid isPermaLink="false">https://www.oschina.net/news/358124</guid>
      <pubDate>Sun, 11 May 2025 02:44:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>AI 编程助手 Cursor 提供 Web 和移动端版本</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;AI 编程助手 Cursor &lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cursor.com%2Fcn%2Fblog%2Fagent-web" target="_blank"&gt;推出&lt;/a&gt;&lt;/u&gt;了可在网页和移动设备上使用的 AI Agent 功能。用户现在可以通过浏览器或手机随时启动复杂的编码任务，例如修复错误或进行代码库问答，并让 Agent 在后台运行。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1522" src="https://static.oschina.net/uploads/space/2025/0701/102654_ieGo_2720166.png" width="1684" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1078" src="https://static.oschina.net/uploads/space/2025/0701/102948_z9W9_2720166.png" width="1398" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;任务完成后，用户可以在桌面端的 Cursor IDE 中无缝衔接，审查、合并代码修改，或与团队成员分享链接进行协作。&lt;/p&gt; 
&lt;p&gt;该功能支持并行执行，用户可以同时启动多个使用不同模型的 Agent，并比较结果以选择最佳方案。为了获得更好的移动端体验，Cursor 支持安装为渐进式网络应用（PWA），从而实现推送通知、全屏界面和离线查看等原生应用体验。此外还集成了 Slack，用户可以直接在 Slack 中通过提及@Cursor 来触发 Agent。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-2c82f625dd429efeb71a6d75f6189dbb4bd.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;定价方面，网页和移动端 Agent 与 Background Agents 采用相同的模式，目前运行计算本身免费，仅根据用户选择的 AI 模型收取使用费。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.cursor.com%2Fget-started%2Fweb-and-mobile-agent%23slack-integration-not-working" target="_blank"&gt;详情查看文档&lt;/a&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/358117/cursor-web-and-mobile-agent</link>
      <guid isPermaLink="false">https://www.oschina.net/news/358117/cursor-web-and-mobile-agent</guid>
      <pubDate>Sun, 11 May 2025 02:27:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>​OpenAI 澄清与谷歌芯片传闻：并无大规模合作计划</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;日前，有报道称&amp;nbsp;OpenAI 正转向其竞争对手的 AI 芯片以满足日益增长的需求。对此，OpenAI 对外发布声明，&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.msn.com%2Fen-us%2Fnews%2Ftechnology%2Fopenai-says-it-has-no-plan-to-use-googles-in-house-chip%2Far-AA1HItOZ%3Focid%3DBingNewsSerp" target="_blank"&gt;否认&lt;/a&gt;了媒体有关其计划采用谷歌自研芯片的报道。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;OpenAI 的一位发言人表示，尽管该公司正在对谷歌的张量处理单元（TPU）进行早期测试，但目前并没有大规模使用这些芯片的打算。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="378" src="https://oscimg.oschina.net/oscnet/up-d1a613253026c0819f2d66ccaa58bfeeeac.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在人工智能领域，实验室测试各种芯片的情况十分普遍，但要实现新硬件的大规模应用通常需要较长时间。此外，这也涉及到不同的架构和软件支持，难度不小。OpenAI 表示，目前正积极使用英伟达的图形处理器（GPU）和 AMD 的人工智能芯片，以满足日益增长的计算需求。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;此外，OpenAI 也在研发自己的芯片，预计将在今年达到 「定型」 里程碑，届时这些芯片的设计将最终确定并投入生产。此前有报道称，OpenAI 已与谷歌云服务达成合作协议，以满足其不断增长的计算能力需求。这一合作被认为是人工智能领域两个主要竞争对手之间的一次意外联手。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;尽管 OpenAI 在计算能力方面的主要来源将是由新兴云公司 CoreWeave 提供支持的 GPU 服务器，谷歌也在积极扩大其自研人工智能芯片（TPU）的外部可用性。TPU 芯片之前主要用于谷歌的内部项目，但现在也开始吸引包括苹果在内的其他科技巨头以及一些初创公司的关注，如 Anthropic 和 Safe Superintelligence，这些公司都是 OpenAI 的竞争对手。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/358116</link>
      <guid isPermaLink="false">https://www.oschina.net/news/358116</guid>
      <pubDate>Sun, 11 May 2025 02:24:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>豆包上线「深入研究」功能</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;豆包「深入研究」功能已经在豆包 App、网页版及电脑版正式开启测试，用户可免费体验。&lt;/p&gt; 
&lt;p&gt;基于模型的搜索、推理及 Agent 能力，「深入研究」可以帮助用户更快速、全面和结构化地处理高难度的复杂任务。针对长途旅行攻略、复杂购买决策、最新政策解读、商业科技趋势发展等需要获取大量资料、长时间研究的问题，借助「深入研究」能力，几分钟即可完成初步方案。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-9f6c1c14ffd9352f40ee1c98040fd7cff53.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;同时，豆包还支持以可视化网页和报告文档两种方式呈现研究结果。&lt;/p&gt; 
&lt;p&gt;据介绍，将豆包更新至最新版后，打开 App 或电脑版，选择「深入研究」，输入详细指令或一句话 prompt，等待几分钟，即可生成一份报告。使用豆包 App 生成报告后，还可以打开报告内容，选择右上角「听」按钮，一键转成播客，随时听。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/358039</link>
      <guid isPermaLink="false">https://www.oschina.net/news/358039</guid>
      <pubDate>Sat, 10 May 2025 11:18:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>德国要求苹果和谷歌从应用商店下架 DeepSeek</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reuters.com%2Fsustainability%2Fboards-policy-regulation%2Fdeepseek-faces-expulsion-app-stores-germany-2025-06-27%2F" target="_blank"&gt;据路透社报道&lt;/a&gt;，德国数据保护专员梅克·坎普发布声明，宣称已要求苹果和谷歌公司从其在德国的应用商店中下架中国初创公司自主研发的人工智能（AI）大语言模型「深度求索」（DeepSeek）的应用。他给出的理由是所谓的数据安全担忧。&lt;/p&gt; 
&lt;p&gt;坎普在声明中指控 DeepSeek「非法将用户个人数据传输至中国」，并要求苹果与谷歌尽快审查这一要求，以决定是否在德国封禁该应用，不过并未设定具体的处理时限。&lt;/p&gt; 
&lt;p&gt;媒体报道显示，谷歌公司证实已收到相关通知，目前正在进行评估；而苹果公司则暂未对此作出回应。&lt;/p&gt; 
&lt;p&gt;此前，DeepSeek 也因所谓数据安全问题，在欧美多地遭遇审查。另据媒体报道，意大利已于今年稍早以「个人数据使用不透明」为由，将 DeepSeek 应用从应用商店下架；荷兰则禁止政府设备使用该应用；比利时也建议政府官员避免使用 DeepSeek，并表示相关评估仍在进行中。与此同时，美国国会议员正计划提出法案，禁止联邦政府机构使用任何中国开发的 AI 模型。&lt;/p&gt; 
&lt;p&gt;针对部分国家传出禁止或限制使用 DeepSeek 的消息，中国外交部发言人此前已作出回应。在今年 2 月 6 日的例行记者会上，外交部发言人表示，中国政府始终高度重视数据隐私和安全保护，并依法开展相关工作，从未要求且将来也不会要求企业或个人以违法形式采集或存储数据。&lt;/p&gt; 
&lt;p&gt;此外，在今年 3 月 18 日的例行记者会上，另一位外交部发言人再次强调，中方一贯反对泛化国家安全概念、将经贸科技问题政治化的做法，并将坚定维护中国企业的合法权益。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/358029</link>
      <guid isPermaLink="false">https://www.oschina.net/news/358029</guid>
      <pubDate>Sat, 10 May 2025 10:36:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>RWKV-8 系列之 DeepEmbedAttention：精简 KV 缓存，尤其适合混合模型</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;5 月 27 日，我们公开了 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FYl79XfbMCO6ecAdKGzboRg" target="_blank"&gt;RWKV-8 首个新特性 DeepEmbed：对端侧友好的稀疏设计，解决 MoE 显存占用&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;今天，我们公开与其相关的另一个新特性：&lt;strong&gt;DeepEmbedAttention（DEA）&lt;/strong&gt; ，这是一种基于 RWKV-8 的 DeepEmbed 思路构建的注意力变体，拥有&lt;strong&gt;极小的 KV 缓存&lt;/strong&gt; ，尤其适合&lt;strong&gt;混合模型&lt;/strong&gt;（例如后续的 RWKV-7s 混合模型），可将它们的长上下文性能提升到 Transformer 水准。&lt;/p&gt; 
&lt;p&gt;DEA 的结构定义例子：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# q: D =&amp;gt; 256
# k: D =&amp;gt; 32, k_up: 32 =&amp;gt; 256, k_emb: V =&amp;gt; 256
# v: D =&amp;gt; 32, vup: 32 =&amp;gt; D, v_emb: V =&amp;gt; D
q = ln_q(q(x))
k = ln_k(k_up(k(x)) * k_emb(idx))
v = ln_v(tanh(v_up(v(x))) * v_emb(idx))   
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;然后将 QKV 的输出加到 RWKV-7 的输出上。这适合并行计算，例如可在不同设备（或异构计算）计算 QKV 和 RWKV-7 部分。&lt;/p&gt; 
&lt;p&gt;这个注意力头的维度是 256，但由于 DEA 的 &lt;code&gt;key&lt;/code&gt; 和 &lt;code&gt;value&lt;/code&gt; 只需缓存 32 维，KV 总共只需缓存 64 个值（32+32）。&lt;/p&gt; 
&lt;p&gt;对于 RWKV-7，只需在每层加上一个 DEA head，就能显著增强长上下文能力。因此，对比现有的高效注意力机制（例如 MLA 使用 576 个值），&lt;strong&gt;DEA 的 KV 缓存进一步缩小到 64/576 = 1/9&lt;/strong&gt;，实现了极致效率。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-c7be8702b07a9534c09539a5fa78e2cdc44.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;图中 loss delta 图的横轴是随着前文长度增加时 token 的位置（token_pos），纵轴表示两种架构在不同 token 位置的 loss 差值（token_loss delta）。&lt;/p&gt; 
&lt;p&gt;实验结果显示：随着前文长度增加，RWKV-7s（加入 DeepEmbed 和 DEA）在越来越长前文的 loss &lt;strong&gt;相较原版 RWKV-7 持续下降&lt;/strong&gt;，从 -0.13 降至 -0.17。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;这意味着 RWKV-7s 这类添加了 DEA 的混合模型，在处理长上下文时表现更好。因为 token 越靠后，所依赖的前文也越长，而 loss 差值持续扩大，代表 RWKV-7s 对比 RWKV-7 更有能力利用越来越长的前文所包含的越来越多的信息，语言建模能力越来越强。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;最后，尽管 DEA 的 KV 缓存非常小，但它仍会随上下文长度而缓慢增长。&lt;strong&gt;RWKV-8 的目标，是在完全无 KV 缓存的情况下也能实现强上下文能力&lt;/strong&gt;，且我们也有方法，后续逐步公布，欢迎大家关注。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/358026</link>
      <guid isPermaLink="false">https://www.oschina.net/news/358026</guid>
      <pubDate>Sat, 10 May 2025 10:11:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>欧洲首台百万兆次级超级计算机 JUPITER 启用</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;位于德国的于利希超级计算中心（Jülich Supercomputing Center）近日&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspectrum.ieee.org%2Fjupiter-exascale-supercomputer-europe" target="_blank"&gt;推出&lt;/a&gt;了欧洲首台百万兆次级超级计算机 JUPITER (木星)。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="312" src="https://oscimg.oschina.net/oscnet/up-37c973b7767f9f8d83e4f3ade8a1fabef7f.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;JUPITER 于 2025 年 6 月首次亮相于全球最强大计算机系统的 TOP500 排行榜上，位列第四。它拥有 5900 个加速计算节点，配备了约 24000 颗 Nvidia Grace-Hopper&amp;nbsp;超级芯片和 1300 个使用 Rhea1 处理器的节点。此外，JUPITER 还采用了 InfiniBand NDR 网络来确保高速数据传输。该计算机的设计旨在支持复杂的科学计算任务，推动气候模型和天气预报的研究。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;这个项目旨在创建一个地球系统的数字复制品，以更好地监测和预测自然现象与人类活动的相互作用。研究者们表示，需要这样一台大型机器来处理气候和大气数据，JUPITER 能以 700 米的分辨率展示这些物理现象，从而为气象学和气候科学提供更深入的洞察。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;此外，德国伊尔梅瑙工业大学的物理学家们也在利用 JUPITER 进行研究。他们专注于可视化热羽流，探讨流体和气体的对流与湍流现象。科学家们通过这台超级计算机的强大运算能力，能够呈现出以前无法获得的细节，进一步理解自然界中复杂的流动模式。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;JUPITER 的建设始于 2018 年，经过多次升级和完善，在 2024 年计划推出的 JEDI 原型机和 JETI 过渡系统模块的支持下，最终在 2025 年全面投入使用。该计算机的能效设计也备受关注，其制冷系统利用附近的鲁尔河水，为校园建筑提供取暖，展现出对能源消耗的关注和可持续发展理念。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/358021/jupiter-exascale-supercomputer-europe</link>
      <guid isPermaLink="false">https://www.oschina.net/news/358021/jupiter-exascale-supercomputer-europe</guid>
      <pubDate>Sat, 10 May 2025 09:38:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>JSON Crack —— 将 JSON 可视化为交互式图表</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                            &lt;p style="text-align:start"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;JSON Crack 是一款以结构化交互式图表形式可视化 JSON 数据的工具，方便用户探索、格式化和验证 JSON。它提供多种功能，例如将 JSON 转换为其他格式（CSV、YAML）、生成 JSON Schema、执行查询以及将可视化结果导出为图像。其设计兼顾了可读性和易用性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可视化工具&lt;/strong&gt;：立即将 JSON、YAML、CSV、XML 和 TOML 转换为暗模式或亮模式下的交互式图形或树。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转换&lt;/strong&gt;：无缝转换数据格式，如将 JSON 转换为 CSV 或将 XML 转换为 JSON，以便于共享。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;格式化和验证&lt;/strong&gt;：美化和验证 JSON、YAML 和 CSV 以获得清晰准确的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码生成&lt;/strong&gt;：生成 TypeScript 接口、Golang 结构和 JSON 模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSON Schema&lt;/strong&gt;：创建 JSON Schema、模拟数据并验证各种数据格式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高级工具&lt;/strong&gt;：解码 JWT、随机化数据以及运行 jq 或 JSON 路径查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;导出图像&lt;/strong&gt;：将你的可视化效果下载为 PNG、JPEG 或 SVG。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隐私&lt;/strong&gt;：所有数据处理都是本地的；服务器上不会存储任何内容。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img height="438" src="https://static.oschina.net/uploads/space/2025/0630/164831_2A2G_4252687.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/jsoncrack</link>
      <guid isPermaLink="false">https://www.oschina.net/p/jsoncrack</guid>
      <pubDate>Sat, 10 May 2025 09:20:00 GMT</pubDate>
    </item>
    <item>
      <title>AI 造物社区项目发布指引</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;strong&gt;使用前请先注册 OSC 开源社区账号，按照以下说明操作，照片清晰，报告整洁，介绍全面，附件有代码， 基本会一次性审核通过。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;&lt;span style="color:#245bdb"&gt;&lt;strong&gt;1. 注册账号&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0630/172849_N1db_9214603.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;完成注册并登录后，进入造物社区&amp;nbsp;&lt;/strong&gt;&lt;em&gt;&lt;u&gt;&lt;a href="https://www.oschina.net/ai-creation"&gt;&lt;strong&gt;https://www.oschina.net/ai-creation&lt;/strong&gt;&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;strong&gt;，点击「发布一个新项目/发布一个新的造物」，发布新项目。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0630/172907_YADg_9214603.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;&lt;span style="color:#245bdb"&gt;&lt;strong&gt;2. 项目基础信息&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;标「&lt;span style="color:#d83931"&gt;*&lt;/span&gt;」的为必填项目。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;封面图片上传格式为 4:3，分辨率 1080P，图片内存大小建议小于 1MB，过大容易上传失败。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;项目介绍部分简要填写项目简介即可。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0630/172927_GAOA_9214603.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;&lt;span style="color:#245bdb"&gt;&lt;strong&gt;3. 「项目详情」页&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;视频请先上传到 B 站/优酷/腾讯，然后在「视频代码」处粘贴视频分享的嵌入代码（iframe 格式），以下是 B 站复制嵌入代码的方式。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0630/173137_W7Ba_9214603.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;项目内容填写可根据实际完成项目内容填写，格式可参考示例。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0630/173149_4iMQ_9214603.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;代码的插入请使用「代码块」工具插入&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0630/173201_y81p_9214603.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;注意格式整洁，正文字号建议用默认字号 14px，标题建议用三级标题&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用 AI 工具前，需先用鼠标选中需要 AI 介入的文段内容，再选择对应的 AI 工具对文段进行润色，AI 翻译当前仅支持「中=英互译」。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0630/173212_caKR_9214603.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;&lt;span style="color:#245bdb"&gt;&lt;strong&gt;4. 「所需物料」页&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;在「硬件组件」一栏点击「添加」，可填写硬件名称、购买网址、购买数量及硬件描述。可添加多个硬件明细。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0630/173223_TJzj_9214603.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;在「软件应用和在线服务」一栏点击「添加」，可添加制作项目所用的软件平台及敏捷制造、供应链服务等。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0630/173234_DrKy_9214603.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;在「手动工具和生产设备」一栏点击「添加」，可填写用于制作项目的设施设备。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&amp;nbsp;&lt;/h4&gt; 
&lt;h3&gt;&lt;span style="color:#245bdb"&gt;&lt;strong&gt;5. 「附件清单」页&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;在「外壳和定制部件」一栏点击「添加」，可上传 3D 模型、结构件设计图纸等内容。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在「代码」一栏点击「添加」，可项目代码及硬件「库」等内容。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在「原理图和电路图」一栏点击「添加」，可项目接线图、原理图等，建议上传 JPG/PNG 格式文件。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;编辑完成后点击「下一步」。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;&lt;span style="color:#245bdb"&gt;&lt;strong&gt;6. 上传团队成员信息，并「发布」项目&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;完成项目内容的编辑之后，先点击「设置为发布」，之后点击「预览项目」可查看自己的项目。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;发布之后若查出存在问题，可在项目预览界面，点击「编辑/删除」再次修改。若在项目通过之后发现存在问题，依旧可再次修改项目，直到项目完善。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0630/173246_6PYI_9214603.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;查询项目发布历史可以在「个人中心」——「我的造物」中进行查询或项目修改/删除。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0630/173255_JgBm_9214603.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;&lt;span style="color:#245bdb"&gt;&lt;strong&gt;参考示例&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/ai-creation/details/2006"&gt;https://www.oschina.net/ai-creation/details/2006&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/ai-creation/details/2005"&gt;https://www.oschina.net/ai-creation/details/2005&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/ai-creation/details/2063"&gt;https://www.oschina.net/ai-creation/details/2063&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/358019</link>
      <guid isPermaLink="false">https://www.oschina.net/news/358019</guid>
      <pubDate>Sat, 10 May 2025 09:19:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>悟了，多模态才是智能应用爆发的关键</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;此前，快手发布 2025 年一季度财报时，一个数字引发关注：成立仅两年的 AI 业务线「可灵 AI」单季度贡献营收 1.5 亿元，同比增长 320%。而可灵 AI 正是一个多模态应用的典型产品，涉及到语言、视频、音频等交互。&lt;/p&gt; 
&lt;p&gt;前不久，在 OSCHINA 和小度教育技术负责人丁小晶的&lt;a href="https://my.oschina.net/u/4489239/blog/18426743" rel="nofollow"&gt;对话&lt;/a&gt;中。丁小晶表示，多模态技术非常重要，甚至可以说，没有多模态技术效果的快速提升，教育行业不可能如此迅猛发展。比如 AI 作业批改和 AI 讲题答疑方向的应用，完全靠纯文本大模型是无法满足需求的，非常依赖对大模型的图片理解能力。还比如超拟人 AI 老师，语音情感大模型就起来非常关键的作用。&lt;/p&gt; 
&lt;p&gt;百度最新发布的发布文心快码 Comate AI IDE 产品，其中也提到了多模态能力的增强，比如支持 Figma 设计稿一键转换为高可用代码，能实现图层的精准还原。百度工程效能部前端研发经理杨经纬告诉开源中国，无论是从自然语言、图片还是设计稿生成代码，最终都是为了能更加接近人类工程的意图，因为人类去描述自己想要实现的想法的方式与形态是多种多样的，也就对应了研发过程中的多模态形式。&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="210" src="https://oscimg.oschina.net/oscnet/up-db06f16dbd4e854566d762bff8c3dfe1e5f.png" width="800" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;人类从不会只用一种感官认知世界。人工智能也势必不能仅有一种交互途径。&lt;/p&gt; 
&lt;p&gt;我们闻到咖啡香气的瞬间，脑海里会立刻浮现深褐色液体与白瓷杯的画面；听到「猫」这个词时，脑海中自动补全毛茸茸的触感和呼噜声。这种多模态信息融合，正是人类智能的底层逻辑。而单一模态交换的 AI 模型的信息处理能力有限，例如文本生成模型难以理解图像语义，无法根据文字生成图像，视频生成工具则无法同步解析声音与画面逻辑。这种时候，就需要多模态模型或是能力的配合。&lt;/p&gt; 
&lt;span id="OSC_h2_1"&gt;&lt;/span&gt; 
&lt;h2&gt;多模态，比文本慢一步&lt;/h2&gt; 
&lt;p&gt;智源研究院院长王仲远不久前公开&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.msn.cn%2Fzh-cn%2F%25E6%258A%2580%25E6%259C%25AF%2F%25E6%258A%2580%25E6%259C%25AF%25E5%2585%25AC%25E5%258F%25B8%2F%25E8%2581%259A%25E7%2584%25A6%25E5%25A4%259A%25E6%25A8%25A1%25E6%2580%2581-chatgpt%25E6%2597%25B6%25E5%2588%25BB%25E6%259C%25AA%25E5%2588%25B0-2025%25E5%25A4%25A7%25E6%25A8%25A1%25E5%259E%258B-%25E5%258F%2598%25E6%2585%25A2-%25E4%25BA%2586%25E5%2590%2597%2Far-AA1GjaHk%3Focid%3DBingNewsSerp" rel="nofollow" target="_blank"&gt;指出&lt;/a&gt;，当前多模态大模型的学习路径，尤其是多模态理解模型，通常是先将语言模型训练到很强的程度，再学习其他模态信息。在这个过程中，模型的能力可能会出现下降。&lt;/p&gt; 
&lt;p&gt;比单一模态更难的是，多模态模型还需解决一个核心问题：如何将图像、文本、音频等异构数据在语义层面对齐并融合。&lt;/p&gt; 
&lt;p&gt;文本、图像、声音等模态的数据结构天然异构——文本是离散符号序列，图像是连续像素矩阵，音频是时间序列信号。比如要让模型理解「猫」的文本描述与猫的图片、叫声之间的关联，需构建跨模态的共享语义空间。&lt;/p&gt; 
&lt;p&gt;早期，有研究尝试通过数据级拼接，将图像像素和文本特征直接拼接，实现跨模态融合，但由于图像和文本的时空特性差异较大，导致特征对齐困难，最终效果不佳。直到对比学习和注意力机制的出现，才实现跨模态语义映射。比如 OpenAI 2021 年推出的一种基于对比学习只的多模态预训练模型 CLIP，它通过大规模的图像和文本数据进行训练，使得模型能够理解图像内容和相关文本之间的语义关系。CLIP 的核心贡献在于它打破了传统的固定类别标签范式，通过对比学习的方式，将图像和文本映射到同一个向量空间中，从而实现跨模态的检索和分类。但是 CLIP 模型的训练数据规模庞大，据 OpenAI 披露，其使用了约 4 亿图像-文本对进行训练，训练成本高达数千 GPU 日，远超 GPT-3 等纯文本模型。&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="304" src="https://oscimg.oschina.net/oscnet/up-4ad6b286433edebde043654fd53af191e30.png" width="800" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;span style="color:#8f959e"&gt;&lt;em&gt;CLIP 模型方法概述 &lt;/em&gt;&lt;/span&gt;&lt;span style="color:#8f959e"&gt;&lt;u&gt;&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2103.00020" rel="nofollow" target="_blank"&gt;Learning Transferable Visual Models From Natural Language Supervision&lt;/a&gt;&lt;/em&gt;&lt;/u&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;多模态融合需处理高维数据，如 4K 视频的像素量是文本的百万倍，传统 Transformer 的二次方计算复杂度成为致命短板。对此，业界也有一些解决方式，比如此前 Mamba 架构通过状态空间模型 SSM 将计算复杂度降至线性，2025 年扩展动态融合模块&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F2985554863" rel="nofollow" target="_blank"&gt; FusionMamba&lt;/a&gt;，在其中实现多模态特征高效交互，推理速度提升 3 倍。&lt;/p&gt; 
&lt;p&gt;不仅如此，相较于文本的资料库和数据集，高质量多模态数据集也更加稀缺，收集难度更大。比如医疗影像、工业质检的报告中的缺陷描述等，就需专家级别的标注人员。&lt;/p&gt; 
&lt;span id="OSC_h2_2"&gt;&lt;/span&gt; 
&lt;h2&gt;落地需求更多&lt;/h2&gt; 
&lt;p&gt;虽然技术上还有诸多难点，但是多模态能力正在逐步提升，并且带来非常可观的价值和效果。&lt;/p&gt; 
&lt;p&gt;比如，从图片或者是 Figma 设计稿直接生成代码可以帮助许多开发者或是产品经理完成一些开发工作。这项能力此前在一些低代码或是辅助编程工具中也存在，但往往是通过 Figma DSL 进行设计稿解析，通过节点虚拟化技术实现像素级还原，其不足在于不一定适配当前项目，比如转了一套 Vue 框架的代码，就无法在 React 框架项目中使用。&lt;/p&gt; 
&lt;p&gt;杨经纬介绍，此次文心快码 Comate AI IDE 的发布以及相关功能更新后，通过大模型能力增强了 Figma to Code 和当前项目的融合度。首先在 IDE 里进行操作，天然就可以理解用户当前环境和本地优势，而 IDE 内智能体 Zulu 的接入，会更深入到本地项目中了解当前的框架、能力、代码风格等，再结合 Image to Code 的能力，可以实现较高的还原度，并且适配当前的项目。&lt;/p&gt; 
&lt;p&gt;而根据一些公开信息显示，可灵 AI 的多模态技术，支持通过图片、文字、声音甚至手绘轨迹等输入生成视频。在上半年的 2.0 模型的迭代中，可灵 AI 也发布了 AI 视频生成的全新交互理念 Multi-modal Visual Language（MVL），让用户能够结合图像参考、视频片段等多模态信息，将脑海中包含身份、外观、风格、场景、动作、表情、运镜在内的多维度复杂创意，直接高效地传达给 AI。MVL 由 TXT（Pure Text，语义骨架）和 MMW（Multi-modal-document as a Word，多模态描述子）组成，能从视频生成设定的基础方向以及精细控制这两个层面。此外，其技术也结合了类 Sora 的 DiT 结构和 Flow 扩散模型，提升在物理模拟和细节上的表现。&lt;/p&gt; 
&lt;p&gt;基于这些技术特征。商业化层面，截至今年 6 月，可灵 AI 已为超过 1 万家企业客户提供 API 服务，覆盖广告营销、影视动画等领域，企业客户续费率较高。&lt;/p&gt; 
&lt;p&gt;此外，一些传统行业或场景也在结合多模态能力，实现与 AI 的加速融合。比如迪瑞医疗近期采用的多模态 AI 大模型算法技术为临床诊断带来了重要的技术革新，结合多种检测结果和患者的多维信息，如尿常规、血常规、生化和化学发光免疫，以及患者的个人背景、临床表现、现病史与既往病史等，进行全面分析。&lt;/p&gt; 
&lt;p&gt;这种跨学科的信息整合使得诊断提示更加精准，对于减少漏诊、误诊的概率具有显著的作用，并进一步提升了医疗诊疗的整体效率。大洋彼岸，斯坦福医学院的科研团队研发出了一种名为&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxMTM0OTQzNQ%3D%3D%26mid%3D2247486194%26idx%3D1%26sn%3D5ac605d67ca7019b3b2e524d65b0f88e%26chksm%3Dc0eed67e545679711993370e69032cc62e9d4fc0c6ff3e283c43854fd93355eae8a07b4fcb02%23rd" rel="nofollow" target="_blank"&gt; MUSK 的 AI 模型&lt;/a&gt;，将视觉数据，如病理图像和文本数据的病历和临床记录相结合，为癌症治疗带来了新的可能。MUSK 模型不仅提高了预测癌症患者预后和治疗反应的准确性，而且通过分析数千个数据点，更准确地确定了哪些疗法对个体患者最有效。&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="285" src="https://oscimg.oschina.net/oscnet/up-196e0ee8b1058ba8ee70698e626a846fe72.png" width="800" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;span style="background-color:#f2f3f5"&gt;&lt;em&gt;视觉问答测试，图片来源于网络&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;在金融领域。江苏银行通过本地化部署微调 DeepSeek-VL2 多模态模型、轻量 DeepSeek-R1 推理模型，分别运用于智能合同质检和自动化估值对账场景中，通过对海量金融数据的挖掘与分析，重塑金融服务模式，实现金融语义理解准确率与业务效率双突破。具体而言，DeepSeek-VL2 多模态模型采用了最新的 Transformer 架构，结合多层次的特征融合机制，有效提升了金融合同、账单等复杂文本与图像信息的理解能力。模型在智能合同质检场景中表现出色，准确率较传统方法提升了 15% 以上，显著降低了人工审核成本。同时，轻量化的 DeepSeek-R1 推理模型则在自动化估值与对账场景中展现出极佳的实时响应能力，推理速度提升了 30%，为金融业务流程的自动化提供了坚实支撑。&lt;/p&gt; 
&lt;span id="OSC_h2_3"&gt;&lt;/span&gt; 
&lt;h2&gt;新的基础设施&lt;/h2&gt; 
&lt;p&gt;应用边界在不断拓宽的同时，多模态模型的能力也在成长。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;而随着应用场景的深化，模型架构也在同步进化，从基础感知迈向复杂推理成为必然趋势。OpenAI 在 2025 年 4 月发布了多模态模型 O3 和 O4-mini，实现了「用图像思考」的突破性能力。这些模型不仅能够识别图像内容，还能将图像信息整合进推理思维链，支持多步推理和因果分析，比如够处理模糊、倒置或复杂的图像输入，并给出合理的推理结果。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;其背后的关键技术包括分层注意力机制，将图像分解为局部细节、全局关系和时序逻辑三层结构，从而提升对图像内容的理解能力；动态工具链调用，在推理过程中，模型可以自主选择 Python 分析、知识图谱检索、图像生成等工具辅助决策，以及安全约束模块，通过对抗训练减少模型的幻觉输出。&lt;/p&gt; 
&lt;p&gt;就在本月，中国科学院自动化研究所等单位的科研人员&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkw.beijing.gov.cn%2Fxwdt%2Fkcyx%2Fxwdtkjqy%2F202506%2Ft20250611_4111006.html" rel="nofollow" target="_blank"&gt;首次证实&lt;/a&gt;，多模态大语言模型在训练过程中自己学会了「理解」事物，而且这种理解方式和人类非常像。&lt;/p&gt; 
&lt;p&gt;科研人员借鉴人脑认知的原理，设计了一个巧妙的实验：让大模型和人类玩「找不同」游戏。实验人员会给出三个物品概念（选自 1854 种常见物品），要求选出最不搭的那个。通过分析高达 470 万次的判断数据，科研人员绘制出了大模型的「思维导图」——「概念地图」。通过实验证实多模态大模型具备类人「概念理解」能力。研究团队设计「找不同」游戏，基于 470 万次判断数据绘制大模型「概念地图」，提炼 66 个理解维度（如物体功能、文化意义），发现其与人脑神经活动高度一致，证明多模态模型比纯文本模型更接近人类思维模式。&lt;/p&gt; 
&lt;p&gt;据谷歌云在 2024 年年底发布的&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.qq.com%2Frain%2Fa%2F20241219A07AW200" rel="nofollow" target="_blank"&gt;《2025 年人工智能商业趋势报告》&lt;/a&gt;，预测到 2025 年，多模态 AI 将成为企业采用 AI 的主要驱动力。这种技术通过整合图像、视频、音频和文本等多种数据源，使 AI 能够以前所未有的准确性从更广泛的上下文源中学习，提供更精确、定制化的输出，创造自然直观的体验。报告预计，全球多模态 AI 市场规模将在 2025 年达到 24 亿美元，到 2037 年底达到 989 亿美元。&lt;/p&gt; 
&lt;p&gt;2025 进度已经过半，我们也能看到市面上许多多模态技术和产品的进展，而这场变革的终极图景，或许正是让 AI 真正成为理解世界、服务人类的「多模态智能伙伴」。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4489239/blog/18679654</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4489239/blog/18679654</guid>
      <pubDate>Sat, 10 May 2025 09:07:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>Mozilla 修复 Firefox 140 在 Windows 上出现的崩溃问题</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Mozilla 正在为 Firefox 浏览器推出又一次更新。140.0.2 版本是刚刚发布的 140.0.1 版本之后的又一次更新，旨在修复更多导致 Windows 在某些情况下崩溃的错误。&lt;/p&gt; 
&lt;p&gt;发行说明内容如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;修复了某些用户在 Windows 上遇到的启动崩溃问题。&lt;/strong&gt;（&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1974259"&gt;1974259&lt;/a&gt;）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;根据 Mozilla 的 Firefox 漏洞追踪器&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1974259"&gt;Bugzilla 上的一篇文章&lt;/a&gt;，浏览器会因 ERROR_INVALID_HANDLE 或 ERROR_INVALID_PARAMETER 错误而崩溃。这种情况发生在 Windows 安全设置中启用了 「漏洞利用保护」 时。&lt;/p&gt; 
&lt;p&gt;虽然普通用户不太可能会碰这个功能，但微软商店中的应用程序已启用漏洞保护。因此，从 Microsoft Store 下载 Firefox 的用户最有可能发生崩溃不过，如果全局启用了漏洞保护，从官方网站下载的 「标准」 Firefox 也会失败。&lt;/p&gt; 
&lt;p&gt;请注意，该漏洞不会影响较新版本的 Firefox。现在，随着 Firefox 140.0.2 的发布，无论您的安全设置或浏览器来源如何，浏览器都不会再崩溃。作为参考，您可以&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mozilla.org%2Fen-US%2Ffirefox%2F140.0.2%2Freleasenotes%2F"&gt;在此处&lt;/a&gt;找到最新更新的发行说明。&lt;/p&gt; 
&lt;p&gt;与往常一样，您可以通过前往菜单 &amp;gt; 帮助 &amp;gt; 关于 Firefox 来更新 Firefox。该浏览器可&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mozilla.org%2Fen-US%2Ffirefox%2Fwindows%2F"&gt;在官方网站&lt;/a&gt;、 Windows 10 和 11 用户&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapps.microsoft.com%2Fdetail%2F9NZVDKPMR9RD"&gt;的 Microsoft Store&lt;/a&gt;下载。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/358008</link>
      <guid isPermaLink="false">https://www.oschina.net/news/358008</guid>
      <pubDate>Sat, 10 May 2025 08:38:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>ECMAScript 2025 标准正式发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;ECMAScript 2025 现已获得 ECMA International 的&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fecma-international.org%2Fnews%2Fecma-international-approves-new-standards-11%2F" target="_blank"&gt;批准&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1444" src="https://static.oschina.net/uploads/space/2025/0630/161138_aINy_2720166.png" width="2342" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;以下是主要新特性：&lt;/p&gt; 
&lt;h3&gt;异步处理改进&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;新增 Promise.try() 方法&lt;/strong&gt; ：用于统一封装同步返回值或抛错的函数，相比以往的 Promise.resolve().then(fn) 或 new Promise(resolve =&amp;gt; resolve(fn()))，Promise.try(fn) 更简洁高效。例如，对于一个可能会抛出异常的函数，使用 Promise.try() 可以更方便地进行错误处理。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;可立即抛出同步异常&lt;/strong&gt; ：使用 Promise.try() 时，若函数同步抛出异常，能够立即捕获并处理，避免了使用 Promise.resolve().then(fn) 时引入的微任务延迟，提高了错误可见性与调试效率，适用于封装第三方同步 API，使其具备统一的异步处理能力。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;集合操作增强&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;新增 Set 实例方法&lt;/strong&gt; ：为 Set 实例新增了七个方法，包括集合运算方法 intersection()（交集）、union()（并集）、difference()（差集）、symmetricDifference()（对称差集），以及集合关系方法 isSubsetOf()（是否为子集）、isSupersetOf()（是否为超集）、isDisjointFrom()（是否无交集），使集合操作更加方便快捷，符合数学上的集合运算逻辑。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;迭代器功能扩展&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;新增同步迭代器辅助函数&lt;/strong&gt; ：为所有同步迭代器添加了一系列辅助方法，如 .map(fn)、.filter(fn)、.flatMap(fn)、.some(fn)、.every(fn)、.find(fn)、.reduce(fn, init)、.forEach(fn)、.drop(n)、.take(n)、.toArray() 等。这些方法支持链式调用，可用于链式处理可迭代对象的数据，实现惰性求值，避免创建多个中间数组，提升内存效率，特别适合处理大型或无限可迭代数据，如生成器、流数据等。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;正则表达式增强&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;新增 RegExp.escape() 方法&lt;/strong&gt; ：可将字符串中的正则元字符转义，使其能够安全地嵌入正则表达式中，避免动态生成正则表达式时出现语法错误，防止正则注入漏洞，替代手动维护的转义函数。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;正则表达式内联标志&lt;/strong&gt; ：允许在正则表达式内部使用内联语法 (?flags:...) 或 (?flags1-flags2:...) 以局部开启或关闭某些标志位，如 i、m、s 等。例如，在正则 /^x(?i:HELLO)x$/ 中，整个表达式外部没有 i 标志，而只对子串 HELLO 应用忽略大小写，避免了正则拆分与多轮匹配逻辑。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;重复命名捕获组&lt;/strong&gt; ：允许在正则表达式的不同分支中使用相同的命名捕获组名称，只要这些同名组不可能同时匹配。这便于对形式不同但结构类似的文本进行统一处理，如解析多种日期格式、键值对格式等，可简化后续处理逻辑，避免代码冗余。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;模块系统优化&lt;/h3&gt; 
&lt;p&gt;新增导入属性，允许在 import 语句中指定附加信息，以指定如何加载模块，主要用于引入非 JavaScript 资源，如 JSON 文件或 CSS 模块。静态导入时，可在路径后加上 with 选项；动态导入时，将其放在第二个参数的 with 字段中，使用起来更加方便简洁，可直接像引用 JS 模块一样使用 JSON 数据等。&lt;/p&gt; 
&lt;h3&gt;数值表示扩展&lt;/h3&gt; 
&lt;p&gt;提供对 16 位浮点数的原生支持，包括 Float16Array、DataView.prototype.getFloat16()/setFloat16() 以及 Math.f16round(number)。这在 WebGPU / WebGL 中可节省带宽与内存，在深度学习中便于传递模型参数，也可用于模拟硬件精度限制。&lt;/p&gt; 
&lt;h3&gt;其他特性&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;后置检查的声明式控制流&lt;/strong&gt; ：引入了 checked { }块和 assert 关键字，在 checked 块中的操作会在执行后立即检查是否出界等，assert 用于断言，若条件不成立会直接抛出异常，为开发者提供了更灵活的错误检查方式。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ArrayBuffer 的构造共享数组&lt;/strong&gt; ：新增了 ArrayBuffer 构造函数的 shared 构造标志，可创建一个共享的 ArrayBuffer，其视图成为共享数组，所有代理都具有相同的内存视图，允许多个 JavaScript 工作线程之间共享和传递 ArrayBuffer，提高了数据共享和传递的效率。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情查看&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fecma-international.org%2Fpublications-and-standards%2Fstandards%2Fecma-262%2F" target="_blank"&gt;https://ecma-international.org/publications-and-standards/standards/ecma-262/&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/358006/ecma-international-approves-ecma-262-standards</link>
      <guid isPermaLink="false">https://www.oschina.net/news/358006/ecma-international-approves-ecma-262-standards</guid>
      <pubDate>Sat, 10 May 2025 08:16:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>AI 造物社区作品分享——灵韵启航者 V1.0 模块化多主控嵌入式学习扩展平台</title>
      <description/>
      <link>https://www.oschina.net/ai-creation/details/2063</link>
      <guid isPermaLink="false">https://www.oschina.net/ai-creation/details/2063</guid>
      <pubDate>Sat, 10 May 2025 07:33:00 GMT</pubDate>
    </item>
    <item>
      <title>Linux 6.16-rc4 发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Linux 6.16-rc4 已发布，这意味着距离最终内核版本的发布仅剩一半的时间，届时我们将在三到四周内获得最终版本。&lt;/p&gt; 
&lt;p&gt;Linus Torvalds &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flkml%2FCAHk-%3DwjqJeFHs_CsO2MeFLi-qceFM7_dVfKBMH4B7oVJaH6tHQ%40mail.gmail.com%2FT%2F%23u" target="_blank"&gt;表示&lt;/a&gt;，此次更新的合并窗口相当大，但同时表示候选版本发布进程仍然保持平稳，这正是我们希望看到的。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0630/150013_dqUh_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Linux 内核开发周期通常会在上一个版本发布后的两周内推出新功能，之后每周都会发布一个新的候选版本，修复新功能和现有功能。稳定版本会在七八个候选版本发布后发布。&lt;/p&gt; 
&lt;p&gt;本周，Torvalds 表示，三分之一的更新涉及文件系统更新，重点关注 bcachefs，以及一些 SMB 和 Btrfs 修复。另外三分之一是驱动程序更新，特别是由于一些性能问题而恢复到设备映射器。&lt;/p&gt; 
&lt;p&gt;最后三分之一的更改是杂项更改，包括文档更新、架构修复（LoongArch、UM、x86）、自检以及各种其他常规修复。与往常一样，Torvalds 请求社区继续测试内核，以便在稳定版本发布时能够保持更好的状态。&lt;/p&gt; 
&lt;p&gt;Linux 6.16 发布后不久，用户就能获得它，尤其是那些运行 Arch 和 Fedora 等尖端 Linux 发行版的用户。如果你有一些目前与 Linux 不兼容的新硬件，请务必在 7 月底左右 Linux 6.16 发布时进行测试，看看是否有任何变化。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Fnews%2FLinux-6.16-Features-Early-Look" target="_blank"&gt;据 Phoronix 报道，Linux 6.16 内核预计将带来一些重大的硬件改进，包括对&lt;/a&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.nvidia.com%2F" target="_blank"&gt;NVIDIA&lt;/a&gt;的开源驱动程序支持 Blackwell 和 Hopper GPU，以及英特尔&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fx86deadandback%2Fstatus%2F1869428945420202447" target="_blank"&gt;Wildcat Lake 处理器&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;虽然 Torvalds 呼吁测试人员试用候选版本，但运行与发行版附带的内核不同的内核并不是一件容易的事，所以不要在生产机器上乱用候选版本。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/357985</link>
      <guid isPermaLink="false">https://www.oschina.net/news/357985</guid>
      <pubDate>Sat, 10 May 2025 06:57:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
  </channel>
</rss>
