<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-最新资讯</title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://8.134.148.166:30044/oschina/news" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-最新资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Fri, 18 Apr 2025 02:38:20 GMT</lastBuildDate>
        <ttl>5</ttl>
        <item>
            <title>谷歌发布 Gemini 2.5 Flash：性能与效率的平衡之作</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;2025 年 4 月 17 日，谷歌正式宣布通过 Google AI Studio 和 Vertex AI 平台推出 Gemini 2.5 Flash 预览版。作为 2.0 Flash 的全面升级，这款新模型在保持速度和成本优势的同时，显著提升了推理能力，成为谷歌首款真正意义上的混合推理模型。&lt;/p&gt; 
&lt;h2&gt;思考能力成为焦点&lt;/h2&gt; 
&lt;p&gt;Gemini 2.5 Flash 最引人注目的特点在于其可控制的思考能力。不同于传统模型直接生成输出，Gemini 2.5 系列模型能够在响应前进行「思考」过程，更好地理解提示，分解复杂任务，并规划回答。这一特性使模型在处理需要多步推理的复杂任务时（如解决数学问题或分析研究问题）能够给出更准确、更全面的答案。&lt;/p&gt; 
&lt;p&gt;据谷歌官方介绍，在 LMArena 的 Hard Prompts 基准测试中，Gemini 2.5 Flash 表现出色，仅次于 2.5 Pro。这一成就标志着较小规模模型也能实现接近顶级模型的推理能力，为开发者提供了更经济的选择。&lt;/p&gt; 
&lt;h2&gt;精细化控制思考预算&lt;/h2&gt; 
&lt;p&gt;谷歌深知不同使用场景对质量、成本和延迟有着不同的权衡要求。为此，Gemini 2.5 Flash 引入了「思考预算」（thinking budget）机制，允许开发者对模型在思考阶段可以生成的最大 token 数量进行精细控制。更高的预算可以让模型进行更深入的推理，提高输出质量。&lt;/p&gt; 
&lt;p&gt;值得注意的是，思考预算仅设置上限，模型不会浪费资源——如果提示不需要太多思考，模型会自动调整使用的思考量。谷歌表示，模型已经训练成能够根据任务复杂度自动决定思考时间的长短。&lt;/p&gt; 
&lt;p&gt;如果开发者希望保持最低成本和延迟，同时仍然获得比 2.0 Flash 更好的性能，可以将思考预算设为 0。当然，他们也可以在 API 中使用参数或在 Google AI Studio 和 Vertex AI 中使用滑块来设置特定的思考预算。对于 2.5 Flash，预算范围可以从 0 到 24576 个 token。&lt;/p&gt; 
&lt;h2&gt;性价比领先的思考模型&lt;/h2&gt; 
&lt;p&gt;Gemini 2.5 Flash 的价格策略引人注目。根据谷歌提供的数据，这款模型保持了最佳的价格性能比，尤其是相较于竞争对手的同类产品。在输入价格方面，每百万 token 为 0.15 美元，输出价格为每百万 token 0.60 美元，相比 OpenAI 的 o4-mini、Anthropic 的 Claude Sonnet 3.7 和 xAI 的 Grok 3 Beta 等竞品，具有明显的成本优势。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;1999&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d67320ae707ff147ab25e0d656d8ad5004a.png&quot; width=&quot;1361&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在性能上，Gemini 2.5 Flash 在多项基准测试中表现出色。例如，在「Humanity&#39;s Last Exam」（无工具）测试中达到了 12.1% 的成绩，在 GPQA Diamond 科学测试中达到了 78.3% 的单次尝试成绩，在 AIME 2025 数学测试中达到了 78.0% 的单次尝试成绩。虽然在某些指标上略逊于更昂贵的模型，但考虑到其价格，这些成绩令人印象深刻。&lt;/p&gt; 
&lt;h2&gt;开发者反应褒贬不一&lt;/h2&gt; 
&lt;p&gt;在技术社区 Hacker News 上，对谷歌 AI 产品的讨论热度颇高。一些用户表示，自从谷歌将 Gemini 2.5 Pro（实验版）免费提供以来，他们已成为谷歌模型的忠实用户。用户 zoogeny 分享道：「Gemini 2.5 Pro 是如此大的进步，以至于我对谷歌的模型整体产生了信心。它不仅在我接触的大多数主题上比我更聪明，而且也不是完全顺从。该模型会对我提出反驳，而不是扭曲自己以找到同意的方式。」&lt;/p&gt; 
&lt;p&gt;一些用户甚至表示已取消对 Anthropic 的订阅，转而使用谷歌的服务。用户 jeeeb 称：「在并排比较 Gemini Pro 和 Claude Sonnet 3.7 的编码回答几次后，我决定取消我的 Anthropic 订阅，只使用 Gemini。」&lt;/p&gt; 
&lt;p&gt;然而，也有用户提出了一些担忧。有人指出，谷歌 Gemini 网页应用存在基本层面的问题，如速度慢、卡在「显示思考」环节、拒绝接受一次性发送的 20 万 token 提示等。另有用户担忧谷歌可能会像过去一样，通过提供免费服务直到竞争对手消亡，然后降低质量的方式来操控市场。&lt;/p&gt; 
&lt;h2&gt;行业影响与前景&lt;/h2&gt; 
&lt;p&gt;Gemini 2.5 Flash 的发布进一步加剧了 AI 模型市场的竞争。有分析认为，谷歌正在 AI 竞赛中悄然领先，特别是在企业应用领域。相较于 OpenAI 和 Anthropic 等竞争对手，谷歌拥有垂直整合的芯片渠道、深厚的供应链和丰富的运营知识，为其提供了显著的成本优势。&lt;/p&gt; 
&lt;p&gt;此外，谷歌拥有的海量数据资源也是其不可忽视的优势。随着基础模型提供商已经处理完普通爬网数据并竞相消费视频和剩余内容，新数据变得越来越有价值，成为长期竞争的关键因素。&lt;/p&gt; 
&lt;p&gt;Gemini 2.5 Flash 的推出标志着谷歌在 AI 领域的野心。虽然目前仍处于预览阶段，但谷歌表示，将继续改进这一模型，并将很快推出更多功能，然后才会将其正式发布用于全面生产。&lt;/p&gt; 
&lt;p&gt;随着 AI 技术的快速发展，不同公司之间的竞争日益激烈。对于开发者和用户来说，这场竞争带来了更多选择，也推动了 AI 技术的不断进步。谷歌能否凭借 Gemini 2.5 Flash 在这场竞争中赢得优势，值得市场持续关注。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345237</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345237</guid>
            <pubDate>Fri, 18 Apr 2025 02:33:20 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>百度创始人李彦宏 2025 年首场演讲海报曝光</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;百度创始人李彦宏的 2025 年首场演讲海报曝光，他将于 4 月 25 日在 Create2025 百度 AI 开发者大会上，带来持续 1 个小时的演讲《模型的世界，应用的天下》。&lt;/p&gt; 
&lt;p&gt;海报背景文案囊括了 MCP、智能体、数字人、模型成本等 AI 热点议题，预告了李彦宏将在大会现场带来百度 AI 的全新产品发布和业务进展。&lt;/p&gt; 
&lt;p&gt;此前，百度预告将在 Create 大会上发布文心大模型 4.5 Turbo，从海报看，李彦宏或将在演讲中详细介绍这款模型的特色和能力。&lt;/p&gt; 
&lt;ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height=&quot;1440&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0418/102350_tW8f_2720166.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;文心大模型 4.5 Turbo 强在哪里？&lt;/li&gt; 
 &lt;li&gt;MCP 会带来更开放的生态吗?&lt;/li&gt; 
 &lt;li&gt;智能体应用的下一站在哪里？&lt;/li&gt; 
 &lt;li&gt;模型迭代太快，应用会不会过时？&lt;/li&gt; 
 &lt;li&gt;开发者的机会在哪里？&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;相关阅读：&lt;a href=&quot;https://www.oschina.net/news/343749&quot; target=&quot;news&quot;&gt;百度文心大模型 4.5 Turbo 将于 4 月 25 日亮相&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345236</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345236</guid>
            <pubDate>Fri, 18 Apr 2025 02:27:20 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>字节跳动开源 UI-TARS-1.5：基于视觉-语言模型构建的多模态智能体</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;字节豆包大模型团队&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FgRqyNlF8BTkh9f36UlW3ew&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;&lt;/u&gt;开源 UI-TARS-1.5。&lt;/p&gt; 
&lt;p&gt;据介绍，这是一款基于视觉-语言模型构建的开源多模态智能体，能够在虚拟世界中高效执行各类任务。目前，UI-TARS-1.5 已在 7 个典型的 GUI 图形用户界面评测基准中取得 SOTA 表现，并首次展现了其在游戏中的长时推理能力和在开放空间中的交互能力。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;684&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0418/101719_9W5Z_2720166.png&quot; width=&quot;1280&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;UI-TARS-1.5 基于该团队此前提出的原生智能体方案 UI-TARS，通过强化学习进一步增强了模型的高阶推理能力，使模型能够在「行动」前先进行「思考」。&lt;/p&gt; 
&lt;p&gt;该版本的模型中，团队还展示了一个新的愿景：以游戏为载体来增强基础模型的推理能力。与数学、编程等领域相比，游戏更多依赖直观的、常识性的推理，并较少依赖专业知识，因此，游戏通常是评估和提升未来模型通用能力的理想测试场景。&lt;/p&gt; 
&lt;p&gt;据介绍，UI-TARS 作为原生 GUI 智能体，具备真实操作电脑和手机系统的能力，同时，还可操控浏览器、完成复杂交互任务。&lt;/p&gt; 
&lt;p&gt;UI-TARS-1.5 能够实现精准 GUI 操作，基于团队在四个维度的技术探索：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;视觉感知增强：依托大规模界面截图数据，模型可理解元素的语义与上下文，形成精准描述。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;System 2 推理机制：在动作前生成「思维（thought）」，支持复杂任务的多步规划与决策。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;统一动作建模：构建跨平台标准动作空间，通过真实轨迹学习提升动作可控性与执行精度。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;可自我演化的训练范式：通过自动化的交互轨迹采集与反思式训练，模型持续从错误中改进，适应复杂环境变化。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;开源地址&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbytedance%2FUI-TARS&quot; target=&quot;_blank&quot;&gt;https://github.com/bytedance/UI-TARS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fseed-tars.com%2F&quot; target=&quot;_blank&quot;&gt;https://seed-tars.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Arxiv&lt;/strong&gt;：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2501.12326&quot; target=&quot;_blank&quot;&gt;https://arxiv.org/abs/2501.12326&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345234/bytedance-ui-tars-1-5</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345234/bytedance-ui-tars-1-5</guid>
            <pubDate>Fri, 18 Apr 2025 02:18:20 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>10 亿上海具身智能基金正式成立</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;由上海国有资本投资有限公司与浦东新区联合发起的上海具身智创创业投资合伙企业（有限合伙）（以下简称「上海具身智能基金」）已于近日完成工商注册，目标规模 10 亿元人民币，首关 5.6 亿元人民币。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;上海具身智能基金由上海国资母基金、浦东创投、张江集团共同担任基石出资人，国投孚腾担任基金管理人，浦东创投担任执行事务合伙人，基金将依托张江机器人谷，聚焦具身智能本体、核心零部件、泛机器人等产业链关键环节，加速技术研发与产业转化，助力上海构建国际领先的具身智能产业集群。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;266&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-7e14f6e8d13867a59603ab9e17aa3ba9e45.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;该基金将重点投向三大领域：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;具身智能本体：支持人形机器人、工业协作机器人等智能体的研发与场景落地&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;核心零部件：突破高精度传感器、仿生驱动装置、边缘计算芯片等「卡脖子」技术&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;泛机器人应用：拓展医疗康复、智慧物流、特种作业等垂直场景的智能化解决方案&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345232</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345232</guid>
            <pubDate>Fri, 18 Apr 2025 02:13:20 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>阿里开源通义万相「首尾帧生视频」14B 模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;阿里通义万相「首尾帧生视频模型」&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FkudRFGW7MZRfESYS__V5LA&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;开源，该模型参数量为 14B，是业界首个百亿参数规模的开源首尾帧视频模型。可根据用户指定的开始和结束图片，生成一段能衔接首尾画面的 720p 高清视频。公告称，此次升级将能满足用户更可控、更定制化的视频生成需求。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;基于现有的 Wan2.1 文生视频基础模型架构，通义万相首尾帧生视频模型进一步引入了额外的条件控制机制，通过该机制可实现流畅且精准的首尾帧变换；在训练阶段，团队还构建了专门用于首尾帧模式的训练数据，同时针对文本与视频编码模块、扩散变换模型模块采用了并行策略，这些策略提升了模型训练和生成效率，也保障了模型具备高分辨率视频生成的效果。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在推理阶段，为了在有限内存资源的条件下支持高清视频推理，万相首尾帧模型分别采用了模型切分策略以及序列并行策略，在确保推理效果无损的前提下，显著缩短了推理时间。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;239&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3ffeced748a2e76ecdd763255e46c87121b.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;基于该模型，用户可完成更复杂、更个性化的视频生成任务，可以实现同一主体的特效变化、不同场景的运镜控制等视频生成。例如，上传相同位置不同时间段的两张外景图片，输入一段提示词，通义万相首尾帧生成模型即可生成一段四季交替变化或者昼夜变化的延时摄影效果视频；上传两张不同画面的场景，还可通过旋转、摇镜、推进等运镜控制衔接画面，在保证视频和预设图片一致性前提下，同时让视频拥有更丰富的镜头。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345229</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345229</guid>
            <pubDate>Fri, 18 Apr 2025 02:03:20 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>有了它，AI 都能直接管理 Gitee 代码仓啦</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                    
                                                                                                                                                    &lt;div&gt; 
 &lt;p&gt;不久前，Gitee 开源了官方的 MCP Server——&lt;a href=&quot;https://gitee.com/oschina/mcp-gitee&quot; rel=&quot;nofollow&quot;&gt;Gitee MCP Server&lt;/a&gt;。有了它，我们就能用 AI 助手直接管理 Gitee 代码仓了！&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;读取文件内容、查看 PR 变更、理解 Issue 描述，甚至直接操作代码管理任务，比如创建 PR、合并分支、发布版本等等，全都不是问题。&lt;/strong&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:left&quot;&gt;简单来说，Gitee MCP Server 让 AI 不再是「代码的旁观者」，真正成为了参与软件开发过程的智能助手。&lt;/p&gt; 
 &lt;p&gt;如果你是&lt;strong&gt;个人开发者&lt;/strong&gt;， Gitee MCP Server 可以让 AI 助手直接参与 PR 审查，减少低级错误，提高代码质量；如果你是&lt;strong&gt;开源项目维护者&lt;/strong&gt;，可以接入 Gitee MCP Server，让 AI 助手帮助处理大量 Issue，并提供自动化代码审查，提升社区协作效率。&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;既然它是一个 MCP Server，那么所有支持 MCP Client 的应用都能用，&lt;/strong&gt;比如 Cursor、claude desktop、windsurf、cherry studio 或是自行实现的带有 mcp client 的 Agent，等等。（之前「马建仓」就&lt;a href=&quot;https://www.oschina.net/news/340077&quot; rel=&quot;nofollow&quot;&gt;秀了把操作&lt;/a&gt;：没写一行代码，只用 Cursor 和 Gitee MCP 做了个贪吃蛇游戏。 ）&lt;/p&gt; 
 &lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;339&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-9a4168709eaed70c553754b7015120c1931.png&quot; width=&quot;800&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;那么，这么好用的东西怎么用呢？&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;4 月 21 日晚，&lt;strong&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;Gitee 研发工程师黄家建&lt;/span&gt;&lt;/strong&gt;将做客【开源中国】直播栏目《技术领航》，手把手教学如何上手 Gitee MCP Server：从安装与配置开始，实战演练如何用 AI 开发工具结合 Gitee MCP Server 实现 AI + 研发流程的融合。&lt;/p&gt; 
 &lt;p&gt;当然啦，作为 Gitee MCP Server 核心开发者，黄家建还会结合自己的实践经验，讲一讲 MCP 协议是什么，与 function call 到底有什么区别。&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;赶紧打开微信，扫码预约直播吧~&lt;/strong&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;img height=&quot;1840&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-858977b0e133cc1bd2a46be9d6dc787b8dc.png&quot; width=&quot;900&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;&lt;strong&gt;Gitee&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Gitee（码云）是开源中国于 2013 年推出的基于 Git 的代码托管平台、企业级研发效能平台，提供中国本土化的代码托管服务。&lt;br&gt; 目前，Gitee 已经有超过 1350 万名开发者，累计托管超过 3600 万个代码仓库，是中国境内规模最大的代码托管平台。同时，旗下企业级 DevOps 研发效能管理平台 Gitee 企业版已服务超过 36 万家企业。&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;网址：&lt;a href=&quot;https://gitee.com/&quot; rel=&quot;nofollow&quot;&gt;https://gitee.com/&lt;/a&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;hr&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;《技术领航》是开源中国 OSCHINA 推出的一档直播栏目，旨在为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;开源软件、商业产品、前沿技术、知名品牌活动等各类项目&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;提供一个展示平台，每周五晚上开播&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;栏目邀请项目的创始人、核心团队成员或资深用户作为嘉宾，通过路演式直播分享项目的亮点和经验，有助于提高项目的知名度，吸引更多的用户和开发者关注。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果你手上也有好的项目，想要跟同行交流分享，欢迎联系我，栏目随时开放～&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img height=&quot;537&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4dd54c1b0b817689ceefa15aa66d79cfae8.png&quot; width=&quot;400&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/3859945/blog/18184933</link>
            <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/18184933</guid>
            <pubDate>Sun, 13 Apr 2025 13:44:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>北京市人工智能产业投资基金追加投资智谱（Z.ai）2 亿元</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1829640482444053837%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;《北京日报》报道称&lt;/a&gt;，&lt;strong&gt;北京市人工智能产业投资基金追加投资北京智谱华章科技股份有限公司（以下简称智谱）2 亿人民币。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;北京市人工智能产业投资基金表示，智谱是基金成立以来投资的第一家 AI 大模型企业，也是目前成长最快的企业。智谱在包括文本、推理、语音、图像、视频、代码等在内的全面模型能力上有深厚积累。此外，商业化布局完善，拥有超过百万规模的开发者社区和企业用户。&lt;/p&gt; 
&lt;p&gt;北京市人工智能产业投资基金表示：希望通过这次投资，进一步推动智谱在开源模型和算法创新方面的能力建设。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4 月 15 日，智谱开源 32B/9B 系列 GLM 模型，包括了基座、推理和沉思模型，所有模型采用宽松的 MIT 许可协议，免费商用、分发，引发业内关注。与此同时，智谱启用全新域名 Z.ai，目前该平台整合了 32B 基座、推理、沉思三类 GLM 模型，后续将作为智谱最新模型的交互体验入口。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;472&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0417/192641_FbK5_2720166.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;智谱此前在开源方面已经做了很多贡献，2023 年率先开源国内第一个 Chat 大模型 ChatGLM-6B，短时间内就吸引超过千万次下载。智谱持续为开源社区和大模型生态发展注入源源不断的活力。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;北京市人工智能产业投资基金自 2023 年 12 月成立以来，围绕北京市在人工智能领域的总体布局，开展直接股权投资。重点方向包括人工智能芯片、训练数据及相关软件等底层技术领域，大模型算法创新、具身智能、可信 AI 等关键领域，以及大模型等人工智能技术产品开发和垂直行业创新应用等相关领域。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;阅读更多&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/344631&quot; target=&quot;news&quot;&gt;智谱启动上市辅导&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/344598&quot; target=&quot;news&quot;&gt;智谱开源 32B/9B 系列 GLM 模型，极速版最高达到 200 tokens/秒&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345155</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345155</guid>
            <pubDate>Sun, 13 Apr 2025 11:29:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>QuickLook 4.0 正式发布，「仿 macOS」的 Windows 文件预览工具</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;QuickLook 是一款 Windows 平台的开源文件快速预览工具，只需要按下空格键，就可以预览文件（没错，正是 macOS 上的 「Quick Look」 功能），支持常见的文档、图片、视频，还能通过插件扩展支持更多的文件类型。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-066752af3ed631a59d1c233f3f73299bfb9.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0417/185452_y23F_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;该项目昨天发布了 4.0 正式版：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;支持多图层 GIMP XCF 文件的预览 [#1224]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;升级 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2FMagick.NET&quot; target=&quot;_blank&quot;&gt;Magick.NET&lt;/a&gt; 至最新版，提升图像处理能力 [#1230]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;修正 GIMP XCF 文件扩展名检测问题 [#1229]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;优化 AllowDarkTheme（允许深色主题）设置的处理 [#1238]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;更新对漫画归档文件类型（如 .cbz、.cbr）的支持 [#1276]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;改进 MarkdownViewer，提升 Markdown 文件预览体验 [#1490]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;托盘菜单新增「打开数据文件夹」选项，并支持深色模式 [#1491]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;增加 Multi Commander 文件管理器的支持 [#1398]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;实现现代化消息框界面 [#1494]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;实现 Windows 阻止检测与自动修复功能 [#1495]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;修复 ArchiveViewer 归档预览相关问题 [#1497]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;修复部分远程桌面软件驱动导致程序启动时因 GPU 信息获取异常而崩溃的问题 [#1532]&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;增加 Scoop 包管理器安装方式 [#1397]&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下载地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FQL-Win%2FQuickLook%2Freleases%2Ftag%2F4.0.0&quot; target=&quot;_blank&quot;&gt;https://github.com/QL-Win/QuickLook/releases/tag/4.0.0&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345150/quicklook-4-0-0</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345150/quicklook-4-0-0</guid>
            <pubDate>Sun, 13 Apr 2025 11:00:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Figma 要求 AI 初创公司停止使用「Dev Mode」一词</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;近日，设计协作平台 Figma 向瑞典人工智能编程初创公司 Loveable 发出了一份停止使用&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2FBillHeyman%2Fstatus%2F1912182928471412932&quot; target=&quot;_blank&quot;&gt;警告&lt;/a&gt;，原因是 &lt;strong&gt;Loveable 将其新产品的某项功能命名为「Dev Mode」，而 Figma 声称该术语已被其注册为商标&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a60eef82084c2c7bde0249e75284af4f5bc.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftsdr.uspto.gov%2F%23caseNumber%3D98045640%26caseSearchType%3DUS_APPLICATION%26caseType%3DDEFAULT%26searchType%3DstatusSearch&quot; target=&quot;_blank&quot;&gt;据美国专利商标局的记录显示&lt;/a&gt;，Figma 在 2024 年 11 月成功注册了「Dev Mode」商标。该公司于 2023 年推出了自己的「Dev Mode」功能，旨在帮助设计师和开发者更好地协作。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1838&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0417/183511_QrFp_2720166.png&quot; width=&quot;2684&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.figma.com%2Fdev-mode%2F&quot; target=&quot;_blank&quot;&gt;https://www.figma.com/dev-mode/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Figma 在致 Loveable 的信中表示：「我们很荣幸您认同‘Dev Mode’是连接设计与开发的软件工具的理想名称。」&lt;/p&gt; 
&lt;p&gt;然而，Figma 强调，该术语已与其软件广泛关联，并且公司需要「保护我们的知识产权」，因此要求 Loveable 停止在其产品中使用「Dev Mode」一词。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345147/figma-the-term-dev-mode</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345147/figma-the-term-dev-mode</guid>
            <pubDate>Sun, 13 Apr 2025 10:37:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Qt AI Assistant v0.9 发布，AI 驱动的开发助手</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;过去两年中，Qt 一直在努力拥抱生成式 AI，以增强 Qt Creator 中 Qt/QML/C++应用程序的编码能力。去年推出的 Qt AI Assistant 是一款 AI 驱动的开发助手，可在 Qt Creator 中运行，支持多种大型语言模型（LLM）。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-45670371548f2d5dce858a5fa6c1497cc5e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1240&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0417/182356_Duh4_2720166.png&quot; width=&quot;2308&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Qt AI Assistant v0.9 已于近日发布，旨在为构建 Qt/C++软件提供最新的 AI 驱动编码帮助。现在，通过 CodeLlama-7B-QML 和 DeepSeekCoder v2 Lite 语言模型支持，Qt AI Assistant 提供了本地 LLM 支持。&lt;/p&gt; 
&lt;p&gt;Qt 还发布了 CodeLlama-7B-QML 和 CodeLlama-13B-QML 作为他们在 HuggingFace 和 Ollama 上微调的模型，这些模型基于额外的 QML 代码片段进行训练。&lt;/p&gt; 
&lt;p&gt;Qt AI Assistant v0.9 还增加了流式文本支持，以便更好地逐段处理大型语言模型的响应。同时，还引入了利用 AI 构建 Google Test 测试的初步支持。此外，Qt AI Assistant 现在还能够为 QML 和 C++ 代码生成内联代码注释。&lt;/p&gt; 
&lt;p&gt;详情查看&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.qt.io%2Fblog%2Fqt-ai-assistant-v0.9-released-deploy-llms-locally-and-enjoy-the-upgraded-user-experience&quot; target=&quot;_blank&quot;&gt;Qt 博客&lt;/a&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345140/qt-ai-assistant-v0-9-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345140/qt-ai-assistant-v0-9-released</guid>
            <pubDate>Sun, 13 Apr 2025 10:24:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Scala 语言未来如何进化？</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;blockquote&gt; 
 &lt;p&gt;Scala 语言创建者 Martin Odersky 以及关键库作者与维护者李浩毅描述了他们对 Scala 语言未来的规划，并希望 Scala 能在现代编程领域保有一席之地。&lt;/p&gt; 
 &lt;p&gt;原文：&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.scala-lang.org%2Fblog%2F2025%2F03%2F24%2Fevolving-scala.html&quot; target=&quot;_blank&quot;&gt;Evolving Scala&lt;/a&gt;&lt;/u&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Scala 应该前进得多快？需要改进什么？语言本身是否应该改变？本文讨论了&lt;strong&gt;Scala 必须不断进化&lt;/strong&gt;的原因，为什么这种进化是必要的，以及我们预计这种进化将采取哪些方向。&lt;/p&gt; 
&lt;p&gt;我们希望这能涵盖许多关于 Scala 语言方向的常见问题，并帮助社区了解语言在未来几个月和几年中将走向何方。&lt;/p&gt; 
&lt;h2&gt;摘要&lt;/h2&gt; 
&lt;p&gt;尽管 Scala 不再像 2010 年代中期那样处于炒作的风口浪尖，根据大多数调查，该语言保持在主流语言列表之外。从技术角度来看，核心语言和生态系统在过去十年中得到了极大的改善。在许多方面，Scala 今天的基石比十年前要好得多。&lt;/p&gt; 
&lt;p&gt;Scala 一直引领着编程领域的潮流。为了换取比主流语言略逊一筹的打磨和稳定性，人们选择 Scala，以便今天就能享受到下个十年的语言特性。Scala 的价值始终在于这些语言特性所赋予的独特组合——&lt;strong&gt;&lt;em&gt;安全性和便利性&lt;/em&gt;&lt;/strong&gt;，以及它将&lt;strong&gt;&lt;em&gt;面向对象和函数式编程&lt;/em&gt;&lt;/strong&gt;思想融合在一起，从而优雅地适应这些特性。&lt;/p&gt; 
&lt;p&gt;但其他语言也在不断进步，因此 Scala 必须继续创新，在它的优势和劣势上不断改进，特别关注新用户的入门体验。当然，有一些持续存在的问题，尤其是在 IDE 支持以及生态系统的易学性方面，随着语言的发展，工具、兼容性和迁移成本等问题也始终会存在。但如果 Scala 想要在未来几年保持其吸引力和相关性，它别无选择，只能继续前进。&lt;/p&gt; 
&lt;h2&gt;Scala 当前所处的位置&lt;/h2&gt; 
&lt;p&gt;尽管炒作已经消退，但从普及度来看，Scala 仍然处於其一贯的位置：并不完全属于主流，但比那些更小众的语言有着更广泛的采用率。例如，RedMonk 语言排名在 2014 年将 Scala 排在第 14 位（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fredmonk.com%2Fsogrady%2F2014%2F06%2F13%2Flanguage-rankings-6-14%2F&quot; target=&quot;_blank&quot;&gt;2014 年的排名&lt;/a&gt;），10 年后的 2024 年仍然在第 14 位（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fredmonk.com%2Fsogrady%2F2024%2F09%2F12%2Flanguage-rankings-6-24%2F&quot; target=&quot;_blank&quot;&gt;2024 年的排名&lt;/a&gt;）。&lt;/p&gt; 
&lt;p&gt;在这段时间里，编程领域发生了显著变化：Swift 取代了 Objective C，Go、Kotlin、Dart 和 Rust 的出现，CoffeeScript 和 Perl 的衰落。然而，Scala 的位置始终保持不变。尽管社区中的个人来来去去，但整体而言，Scala 似乎保持着强大的稳定性，拥有一个坚实的爱好者基础。&lt;/p&gt; 
&lt;p&gt;技术上，Scala 现在比 10 年前拥有更坚实的基础。生态系统已经成熟，各种反应式或纯函数式编程风格已经找到了他们的受众。像&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Ftoolkit%2Fintroduction.html&quot; target=&quot;_blank&quot;&gt;Scala Toolkit&lt;/a&gt;和&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcom-lihaoyi&quot; target=&quot;_blank&quot;&gt;com.lihaoyi&lt;/a&gt;平台这样的替代风格现在也可供选择。新的构建工具如&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fscala-cli.virtuslab.org%2F&quot; target=&quot;_blank&quot;&gt;Scala-CLI&lt;/a&gt;和&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmill-build.org%2F&quot; target=&quot;_blank&quot;&gt;Mill&lt;/a&gt;已经出现，而开发者工具如&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscalameta%2Fscalafmt&quot; target=&quot;_blank&quot;&gt;Scalafmt&lt;/a&gt;和&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscalacenter%2Fscalafix&quot; target=&quot;_blank&quot;&gt;Scalafix&lt;/a&gt;已经得到广泛应用。IDE 仍然是一个痛点，但我们预计到 2025 年它们会有所改进。重用符号运算符的潮流已经逐渐式微。&lt;/p&gt; 
&lt;p&gt;Scala 一直处于语言前沿，证明了像 lambda 表达式、记录和模式匹配等语言特性在 10-15 年后被 Java、Python 和其他主流语言采纳的可行性。目前尚不清楚主流语言在 10-15 年后将会采纳 Scala 的哪些当前特性。&lt;/p&gt; 
&lt;h2&gt;Scala 将走向何方？&lt;/h2&gt; 
&lt;p&gt;在本节中，我们将讨论核心 Scala 开发者将集中精力的一些领域。&lt;/p&gt; 
&lt;h3&gt;安全性与便利性：两者取其一&lt;/h3&gt; 
&lt;p&gt;Scala 一直是一种混合型语言。面向对象和函数式风格的融合经常被提及。但它的另一种融合是 &lt;em&gt;安全性&lt;/em&gt; 和 &lt;em&gt;便利性&lt;/em&gt;。传统上，「脚本」语言如 Python 不安全但方便，而「应用」语言如 Java 安全但不便。Scala 是第一个证明你可以在同一语言中做到这两点的语言。更现代的语言如 Swift 或 Kotlin 也在这条道路上取得了进步，当 Scala 最初开始时，这种想法是闻所未闻的。&lt;/p&gt; 
&lt;p&gt;然而，过去二十年里，编程领域并没有停滞不前。曾经属于 Scala 的许多独特之处现在已成为普遍现象。所有现代语言都提供了泛型、类型推断、lambda 表达式、记录、模式匹配等特性。为了继续吸引用户，Scala 必须在这两个方向上继续创新：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;提升安全性而不牺牲便利性&lt;/strong&gt;：例如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fexperimental%2Fcc.html&quot; target=&quot;_blank&quot;&gt;捕获检查&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fexperimental%2Fexplicit-nulls.html&quot; target=&quot;_blank&quot;&gt;显式空值&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fother-new-features%2Fsafe-initialization.html&quot; target=&quot;_blank&quot;&gt;安全初始化&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Fbook%2Fca-multiversal-equality.html&quot; target=&quot;_blank&quot;&gt;多态等价&lt;/a&gt; 等特性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;在不妥协安全性的前提下提高便利性&lt;/strong&gt;：如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fenums%2Fenums.html&quot; target=&quot;_blank&quot;&gt;枚举&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fother-new-features%2Findentation.html&quot; target=&quot;_blank&quot;&gt;可选括号&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdotty.epfl.ch%2Fdocs%2Freference%2Fother-new-features%2Fnamed-tuples.html&quot; target=&quot;_blank&quot;&gt;命名元组&lt;/a&gt; 等特性。关于 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcontributors.scala-lang.org%2Ft%2Fpre-sip-a-syntax-for-aggregate-literals%2F6697&quot; target=&quot;_blank&quot;&gt;聚合数据字面量&lt;/a&gt; 的讨论激起了广泛的兴趣，尽管目前还太早看到它将带来什么结果。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Scala 生态系统广泛且多样化，但我们认为这些双重目标是共同的主线。无论您是在 JVM 上使用 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fakka.io%2F&quot; target=&quot;_blank&quot;&gt;Akka&lt;/a&gt; 实现后端服务，通过 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fscala.js%2F&quot; target=&quot;_blank&quot;&gt;Scala.js&lt;/a&gt; 在浏览器中构建 Web UI，还是通过 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.chisel-lang.org%2F&quot; target=&quot;_blank&quot;&gt;Chisel&lt;/a&gt; 定制硅芯片，Scala 的安全性和便利性是人们选择这种语言的原因。&lt;/p&gt; 
&lt;p&gt;其他语言也在追求这些目标，但我们相信 Scala 做得比大多数语言都要好：它的类型系统、模式匹配、集合库、多重继承系统等都是业界领先的，即使其他语言也有自己的特色。因此，Scala 能够比其他语言更好地执行和组合特性，并以一种统一、简洁和原则性的方式将这些特性结合起来，而不是临时性地拼接它们。&lt;/p&gt; 
&lt;p&gt;展望未来，Scala 必须继续追求安全性和便利性的双重目标。明天的流行框架可能与今天的不同，而今天的又与几年前的不同。但几十年来，开发者们一直希望获得安全性和便利性，我们预计在未来几年这种需求将继续存在。&lt;/p&gt; 
&lt;h3&gt;打磨「粗糙边缘」&lt;/h3&gt; 
&lt;p&gt;Scala 已不再是新兴语言。二十年前，许多事物看似是好的想法，但并非所有决定都取得了预期的效果。尽管长期使用 Scala 的开发者可能已经习惯了这些特性，但 Scala 语言本身需要不断打磨这些粗糙的边缘：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;一些特性，如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Foverviews%2Fcore%2Factors.html&quot; target=&quot;_blank&quot;&gt;scala-actors&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fscala-parser-combinators&quot; target=&quot;_blank&quot;&gt;scala-parser-combinators&lt;/a&gt; 或 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fscala-xml&quot; target=&quot;_blank&quot;&gt;scala-xml&lt;/a&gt; 已经被移除。它们现在作为独立的库存在，你可以根据需要选择使用或不使用，但已不再是语言的核心部分或标准库的一部分。其他类似的清理工作包括 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.scala-lang.org%2Fblog%2F2018%2F06%2F13%2Fscala-213-collections.html&quot; target=&quot;_blank&quot;&gt;Scala 2.13 集合重写&lt;/a&gt;。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;正在处理的更多问题包括：&lt;code&gt;@unroll&lt;/code&gt; 以避免与默认参数和 &lt;code&gt;case class&lt;/code&gt; 的二进制兼容性问题，这是实验性的（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fimprovement-proposals%2Fpull%2F78&quot; target=&quot;_blank&quot;&gt;SIP-61&lt;/a&gt;），以及 &lt;code&gt;for&lt;/code&gt;-comprehension 的改进处于预览阶段（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fimprovement-proposals%2Fpull%2F79&quot; target=&quot;_blank&quot;&gt;SIP-62&lt;/a&gt;），这些改进应该有助于解决使用这些 Scala 语言特性时长期存在的问题。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;一些其他长期存在的问题尚未得到解决，但正在讨论中：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fimprovement-proposals%2Fpull%2F105&quot; target=&quot;_blank&quot;&gt;灵活的变长参数&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcontributors.scala-lang.org%2Ft%2Funpacking-classes-into-method-argument-lists%2F6329&quot; target=&quot;_blank&quot;&gt;解包&lt;/a&gt;、涉及 &lt;code&gt;for&lt;/code&gt;-comprehension 语法的一些其他问题，等等。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;过去 20 年间，编程领域发生了巨大变化，Swift、Kotlin、Java、C# 和 Python 等语言都迅速发展。有时是发现新的方法，有时是针对常见用例收敛到相似解决方案。仅仅因为 Scala 在 2005 年做出了一个设计决策，并且我们接受了这个决策 20 年，并不意味着这个决策在 2025 年仍然是最佳的。有时，我们可以也应该做得更好。&lt;/p&gt; 
&lt;p&gt;Scala 的核心一直是其面向对象（OO）和函数式编程（FP）特征的融合，以及安全性和便利性的融合，但其他一切都是可以讨论的。例如，Scala 经历了三次集合库的迭代，才到达了今天的地位，尽管经历了变革，但语言也因此变得更加出色。我们今天能够解决哪些长期存在的问题，而我们在 5-10 年后会为此感到庆幸？我们可以从其他语言中采纳哪些特性和约定，而不是以我们独特的方式重新发明轮子？&lt;/p&gt; 
&lt;h3&gt;让新手更容易上手&lt;/h3&gt; 
&lt;p&gt;我们相信 Scala 可以变得更加容易让新入门者掌握。所有高级 Scala 用户在某个时刻也都是新手。你今天所听到的所有大型 Scala 项目最初都是由一群新手开始的：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;大学生尝试使用这门语言来完成他们的研究项目&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Python/Ruby 开发者尝试使用这门语言来提高他们生产系统的稳定性&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;想要更多灵活性、力量和快速开发的 Java 老手&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;我们支持高级用户和高级框架，但根据定义，高级用户能够自我照顾：解决他们自己的问题，编写他们自己的文档，并提出他们自己的语言变更。Scala 的高级用户一直都在提交他们自己的补丁和改进——来自 Akka 世界的&lt;code&gt;scala.concurrent.Future&lt;/code&gt;，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftypelevel%2Fcats%2Fissues%2F2948&quot; target=&quot;_blank&quot;&gt;部分统一&lt;/a&gt;，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.scala-lang.org%2F2021%2F02%2F26%2Ftuples-bring-generic-programming-to-scala-3.html&quot; target=&quot;_blank&quot;&gt;泛型元组&lt;/a&gt;，以及来自纯函数式编程世界的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftypelevel%2Fkind-projector&quot; target=&quot;_blank&quot;&gt;kind-projector&lt;/a&gt;——我们希望他们将继续这样做。相比之下，新来者必须依赖 Scala 的核心维护者来确保他们有一个良好的体验。&lt;/p&gt; 
&lt;p&gt;实际上，这意味着：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;优先支持简单易用的库，如&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Ftoolkit%2Fintroduction.html&quot; target=&quot;_blank&quot;&gt;Scala Toolkit&lt;/a&gt;和&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcom-lihaoyi&quot; target=&quot;_blank&quot;&gt;com.lihaoyi&lt;/a&gt;平台，提供代码和文档支持。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;将 Scala 语法与其他语言中不必要的差异进行对齐。已经实现了通过&lt;code&gt;import foo.*&lt;/code&gt;进行的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fchanged-features%2Fimports.html&quot; target=&quot;_blank&quot;&gt;通配符导入&lt;/a&gt;和通过&lt;code&gt;foo*&lt;/code&gt;进行的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fchanged-features%2Fvararg-splices.html&quot; target=&quot;_blank&quot;&gt;可变参数拼接&lt;/a&gt;，后者取代了旧的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F46418559%2Fextractor-not-compiling-in-scala%2F46420376&quot; target=&quot;_blank&quot;&gt;蜗牛操作符&lt;/a&gt; &lt;code&gt;foo@_*&lt;/code&gt;。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;下一个重要的 Scala 项目很可能会由那些为了解决之前没有人想过要解决的问题而开始学习这门语言的新手发起。他们会很聪明，但不会是那些推动 Scala 语言极限的专家，他们也不会使用最复杂的高级语言特性或设计模式。他们会知道 Java、Python 或 JavaScript，因为那是他们在学校里学的。这就是我们需要确保那些人能够轻松地进入 Scala 语言的原因。&lt;/p&gt; 
&lt;h2&gt;考虑的替代方案&lt;/h2&gt; 
&lt;p&gt;关于 Scala 应该走向何方，总是有不同的意见。我们将讨论两个在语言发展方向上反复出现的主张。&lt;/p&gt; 
&lt;h3&gt;为什么不全面拥抱框架？&lt;/h3&gt; 
&lt;p&gt;社区中常见的请求之一是让 Scala 社区全面拥抱某些框架或工具链。例如：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;将 Scala 全面作为纯函数式编程语言&lt;/li&gt; 
 &lt;li&gt;将 IO monads 作为构建应用程序的方式&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;这些想法值得讨论；毕竟，使用 Scala 进行纯函数式编程和 IO 单子的子社区一直健康且充满活力。然而，当更深入地分析这种做法时，存在一些问题：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Scala 的设计初衷就是灵活且富有表现力。正如历史所证明的那样，这促进了创新：十年前，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fakka%2Fakka&quot; target=&quot;_blank&quot;&gt;Akka&lt;/a&gt; 和 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscalaz%2Fscalaz&quot; target=&quot;_blank&quot;&gt;Scalaz&lt;/a&gt; 是流行的框架。Scalaz 让位于更新的函数式库，如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fzio%2Fzio&quot; target=&quot;_blank&quot;&gt;ZIO&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftypelevel%2Fcats-effect&quot; target=&quot;_blank&quot;&gt;Cats-Effect&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmonix%2Fmonix&quot; target=&quot;_blank&quot;&gt;Monix&lt;/a&gt; 和 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftypelevel%2Ffs2&quot; target=&quot;_blank&quot;&gt;FS2&lt;/a&gt;。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgetkyo%2Fkyo&quot; target=&quot;_blank&quot;&gt;Kyo&lt;/a&gt; 看起来有潜力，但仍然处于早期阶段。Scala 语言必须足够通用，以支持这种自然演变，而不能将自己绑定到那些随时间兴衰的具体框架上。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;核心 Scala 开发者并非框架专家。当 Akka 流行时，他们并非 actor 模型方面的专家，如今也不是 IO monads 方面的专家。因此，我们需要那些子社区中的高级用户为自己发声，并推动语言在社区所需方面的改进。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;因此，Scala 必须保持通用性，通过构建任何框架或库都能从中受益的特性。我们鼓励框架爱好者提出对 Scala 语言的改进建议：虽然并非每个具体想法都会被接受，但反馈会推动语言变化，从而惠及所有框架。&lt;/p&gt; 
&lt;h3&gt;为什么不能冻结所有特性开发？&lt;/h3&gt; 
&lt;p&gt;另一个常见的请求是「停止实现特性」。这经常在语言讨论中出现，来自对工具支持、就业市场或其他事物不满意的人。这些情绪是可以理解的。但现实中，冻结特性开发将注定导致 Scala 语言的衰落。&lt;/p&gt; 
&lt;p&gt;Scala 一直以来都比 Java 等语言功能更丰富，但打磨和稳定性却相对不足。Scala 的核心价值主张是，作为交换，你将获得来自未来的语言特性，而其他语言可能要过 10-15 年才能获得：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Apache Spark 于 2014 年选择 Scala 作为在 JVM 上具有 lambda 表达式和模式匹配功能的语言。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Akka 选择 Scala，因为它是一种简洁、高效的编程语言，支持使用 Futures 或 Actors 进行轻量级并发。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Scalaz 和 Cats 选择 Scala，因为它是一种简洁的语言，拥有丰富的类型系统。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;其他语言开始采用这些特性，给 Scala 带来了创新的压力。到 2025 年，基本上在 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fredmonk.com%2Fsogrady%2F2024%2F09%2F12%2Flanguage-rankings-6-24%2F&quot; target=&quot;_blank&quot;&gt;RedMonk top 20&lt;/a&gt; 的所有语言中，都包含了 lambda 表达式、模式匹配、轻量级并发和类型系统！那么，为什么任何项目会选择 Scala 呢？&lt;/p&gt; 
&lt;p&gt;Scala 仅凭稳定性和完善性是无法与主流语言竞争的，因此如果我们今天停止功能开发，Scala 最终会变成一个功能更差、完善性和稳定性更差的编程语言，并且没有存在的理由。因此，Scala 需要持续不断的改进来维持其发展，为人们和项目提供选择这门语言的理由。我们可能会犯错——没有一条保证成功的道路——但功能冻结是一条保证停滞和失败的道路。&lt;/p&gt; 
&lt;h2&gt;Scala 生态系统中的开放性问题&lt;/h2&gt; 
&lt;p&gt;Scala 生态系统并非没有问题。以下我们将简要介绍我们认为 Scala 当前面临的最大挑战，以及我们将如何应对这些问题。&lt;/p&gt; 
&lt;h3&gt;工具：集成开发环境 (IDEs)&lt;/h3&gt; 
&lt;p&gt;「工具」是上次 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fscalasurvey2023.virtuslab.com%2F&quot; target=&quot;_blank&quot;&gt;VirtusLab Scala 调查&lt;/a&gt; 中指出的最大改进领域。这主要指的是集成开发环境（IntelliJ 和 VSCode）以及构建工具（如 sbt），这些是每位编写 Scala 的人都必须与之交互的工具。&lt;/p&gt; 
&lt;p&gt;在 Scala 社区中，使用的两个主要 IDE 是 IntelliJ 和 VSCode。上述调查表明，大约 80% 的受访者使用 IntelliJ，大约 50% 使用 VSCode，还有一些人同时使用两者。&lt;/p&gt; 
&lt;h4&gt;IntelliJ&lt;/h4&gt; 
&lt;p&gt;IntelliJ 对 Scala 3 的支持仍然需要赶上它对 Scala 2 一直以来的支持质量。尽管如此，进展是稳步的，最近的改进显示出加速的步伐。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Scala 3 最近引入了「预览」功能的概念：这些功能已经从实验性稳定下来，但尚未在 IDE 和其他生态系统中获得支持。这是为了帮助 IntelliJ 和其他 IDE 有足够的时间跟进，以免在语言演变时落后。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fscala%2F2024%2F05%2F13%2Fjetbrains-joins-the-scala-center-advisory-board%2F&quot; target=&quot;_blank&quot;&gt;JetBrains 现已成为 Scala 中心咨询委员会的成员&lt;/a&gt;。这已经改善了 JetBrains 和 Scala 编译器团队之间的沟通和协调，并有助于避免过去出现的问题，即 IntelliJ 需要时间才能跟上 Scala 的变化。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;最近的语言变更已经相对迅速地融入到 IntelliJ 中：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fsips%2Fsips%2Ftypeclasses-syntax.html&quot; target=&quot;_blank&quot;&gt;SIP-64 改进的给定语法&lt;/a&gt; 和 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fsips%2Fnamed-tuples.html&quot; target=&quot;_blank&quot;&gt;SIP-58 命名元组&lt;/a&gt; 已经在 IntelliJ 2024.3 中可用，而 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fsips%2Fbetter-fors.html&quot; target=&quot;_blank&quot;&gt;SIP-62 For 推导改进&lt;/a&gt; 将在 2025.1 中提供。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;我们承认还有很多工作要做。IntelliJ 团队正在努力提供对 Scala 3 的最佳支持，您可以期待在未来几个月看到更多改进。&lt;/p&gt; 
&lt;h4&gt;Metals - Scala 语言服务器&lt;/h4&gt; 
&lt;p&gt;金属（Metals）通常与 VSCode 一起使用，但也支持其他编辑器。金属（Metals）与 IntelliJ 相比面临不同的挑战：它始终使用实际的 Scala 编译器来进行代码智能，因此始终与实际语言保持同步。但它曾遇到过稳定性问题（例如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscalameta%2Fmetals%2Fissues%2F6478&quot; target=&quot;_blank&quot;&gt;#6478&lt;/a&gt;），其中一些问题源于其多进程架构的复杂性，另一些则源于其与 Scala 3 的新集成（例如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscalameta%2Fmetals%2Fissues%2F6628&quot; target=&quot;_blank&quot;&gt;#6628&lt;/a&gt;）。金属（Metals）的维护者目前正在专注于修复最突出的问题，但如果您在自己的代码库中发现了任何问题，请打开 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscalameta%2Fmetals%2Fissues&quot; target=&quot;_blank&quot;&gt;https://github.com/scalameta/metals/issues&lt;/a&gt; 上的问题，VirtusLab 团队将乐意查看（必要时甚至签署保密协议）。&lt;/p&gt; 
&lt;p&gt;Scala 3 编译器的开发者已经广泛使用 IntelliJ 和 Metals，我们也清楚开发者在使用这两个 IDE 时所面临的问题。我们将继续在发现问题时进行报告，并与 IntelliJ 和 Metals 的维护者合作，以改善编译器与 IDE 之间的集成。但我们也需要社区人士积极参与问题报告，以便 IDE 维护者能够进行调查和修复。&lt;/p&gt; 
&lt;h3&gt;构建工具&lt;/h3&gt; 
&lt;p&gt;构建工具 sbt 的复杂性在过去十年或更长时间一直是 Scala 社区的一个长期问题。然而，我们认为隧道尽头已经出现了曙光：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fscala-cli.virtuslab.org%2F&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Scala-CLI&lt;/strong&gt;&lt;/a&gt; 已变得流行。现在它是默认的 Scala 启动器（自 Scala &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fscala3%2Freleases%2Ftag%2F3.5.0&quot; target=&quot;_blank&quot;&gt;3.5.0&lt;/a&gt; 以来）。最新的 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fscalasurvey2023.virtuslab.com%2F&quot; target=&quot;_blank&quot;&gt;VirtusLab Scala 调查&lt;/a&gt; 显示，35% 的人喜欢使用它，另外 35% 的人想要学习它。虽然不适合大型多模块项目，但 Scala-CLI 几乎为几乎所有单模块项目提供了所需的一切。它也是探索性编码小型项目和实验的出色工具。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;替代方案如&lt;/strong&gt; &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmill-build.org%2F&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Mill&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;存在&lt;/strong&gt;。调查发现，10% 的 Scala 开发者喜欢使用&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmill-build.org%2F&quot; target=&quot;_blank&quot;&gt;Mill&lt;/a&gt;，但近 50% 的人希望学习它，而像&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Feed3si9n.com%2Fsbt-remote-cache%2F&quot; target=&quot;_blank&quot;&gt;Scala-CLI&lt;/a&gt;和&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcoursier%2Fcoursier&quot; target=&quot;_blank&quot;&gt;Coursier&lt;/a&gt;这样的基础项目也是使用 Mill 构建的。我们认为，Mill 为大型项目提供了 sbt 的一个很好的替代方案。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Foyvindberg%2Fbleep&quot; target=&quot;_blank&quot;&gt;Bleep&lt;/a&gt;虽然仍处于早期阶段，但在构建工具领域提供了一个不同的视角，同时也展现出了巨大的潜力。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;sbt 本身也随着时间的推移有了很大的改进&lt;/strong&gt;。在过去的几年里，我们看到了诸如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsbt%2Fsbt%2Fpull%2F3434&quot; target=&quot;_blank&quot;&gt;Unified Slash Syntax&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsbt%2Fsbt-projectmatrix&quot; target=&quot;_blank&quot;&gt;sbt Project-Matrix&lt;/a&gt; 等改进，而即将到来的 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.scala-sbt.org%2F2.x%2Fdocs%2Fen%2Fchanges%2Fsbt-2.0-change-summary.html&quot; target=&quot;_blank&quot;&gt;sbt 2.0&lt;/a&gt; 发布将带来 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Feed3si9n.com%2Fsudori-part6%2F&quot; target=&quot;_blank&quot;&gt;构建查询&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Feed3si9n.com%2Fsbt-remote-cache%2F&quot; target=&quot;_blank&quot;&gt;远程缓存&lt;/a&gt; 等其他改进。虽然仍然不是完美无缺，但到 2025 年使用 sbt 的体验已经远远优于十年前。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FdavidB%2Fscala-maven-plugin&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Maven&lt;/strong&gt;&lt;/a&gt; 和 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.gradle.org%2Fcurrent%2Fuserguide%2Fscala_plugin.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Gradle&lt;/strong&gt;&lt;/a&gt; 也可以使用。这些构建工具在 Java 圈子里已经流行了很长时间，并且广为人知。虽然它们在开源社区中并不像 sbt 那样受欢迎，但我们看到它们被广泛应用于许多商业 Scala 代码库中。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;总体而言，我们预计这个问题在将来会自行解决：一方面是通过 sbt 本身随时间不断改进，另一方面是通过项目选择提供优秀替代方案的其他工具。&lt;/p&gt; 
&lt;h3&gt;生态系统易学性&lt;/h3&gt; 
&lt;p&gt;我们在 Scala 语言中看到的第三大问题是生态系统的易学性。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Scala 生态系统始终为高级用户提供了框架：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fakka.io%2F&quot; target=&quot;_blank&quot;&gt;Akka&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftypelevel.org%2Fcats-effect%2F&quot; target=&quot;_blank&quot;&gt;Cats-Effect&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzio.dev%2F&quot; target=&quot;_blank&quot;&gt;ZIO&lt;/a&gt; 以及其他。但它缺乏一个适合初级用户（例如：你的学生学期项目、你的新毕业生创业项目的代码库、由非工程师维护的 devops 或数据分析脚本）的平台。这些领域是 Scala 框架不适合的地方，但 Scala 语言却可以适用。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在 Scala 生态系统中的文档传统上也一直是个问题。这加剧了上述问题：学习一个强大的框架或库已经足够困难，但糟糕的文档使得学习变得更加困难。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;传统上，尽管有人可能喜欢 Scala 语言，但当他们尝试做一些简单的事情，比如「发起一个 HTTP 请求」或「启动一个服务器」时，他们会遇到一个障碍，突然需要学习关于 Actor、IO 单子或其他高级主题的知识，而相关文档或学习资料却不够充分。&lt;/p&gt; 
&lt;p&gt;但在这里，我们也看到了乐观的理由：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Ftoolkit%2Fintroduction.html&quot; target=&quot;_blank&quot;&gt;Scala Toolkit&lt;/a&gt; 和高度重叠的 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcom-lihaoyi&quot; target=&quot;_blank&quot;&gt;com-lihaoyi&lt;/a&gt; 平台，它们包括许多相同的库。这些提供了几乎完整且易于使用的「新手友好」平台。它可能没有更复杂框架的所有功能和装饰，但绝对足够用于许多生产部署，并且如果需要，可以轻松过渡到更复杂的框架。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;最近 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.scala-lang.org%2Fblog%2F2025%2F02%2F25%2Frock-the-jvm-partnership.html&quot; target=&quot;_blank&quot;&gt;Scala Center 与 Rock the JVM 的合作&lt;/a&gt; 有望帮助改善 Scala 的教学方面。来自 Rock the JVM 的 Daniel Ciocîrlan 一直是一位杰出的教育者和高质量教育材料的创作者。我们希望这次合作能够扩大 Rock the JVM 的影响力，并帮助 Scala 新手发现并受益于他优秀的视频和课程。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;这是一个我们一直在缓慢取得进步的领域，我们希望这种「新手友好」的 Scala 风格随着时间的推移而发展：不是以牺牲更高级框架为代价，而是在它们并行发展的同时，随着新手的数量增加，更多的人在需要时选择更复杂的框架。&lt;/p&gt; 
&lt;h2&gt;如何帮助&lt;/h2&gt; 
&lt;p&gt;Scala 是一个社区努力的结果；没有像其他语言那样的庞大企业赞助 Scala 的开发。因此，我们需要社区的帮忙来推动语言的发展。这种帮助可以以各种方式实现。&lt;/p&gt; 
&lt;h3&gt;财政&lt;/h3&gt; 
&lt;p&gt;如果您想从财政上支持 Scala，有两个主要群体您可以支持：&lt;/p&gt; 
&lt;h4&gt;Scala 中心&lt;/h4&gt; 
&lt;p&gt;Scala 中心支持以下两个方面：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;核心 Scala 语言和编译器的开发：探索、原型设计、实施、维护和调试。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持 Scala 社区。这包括 Scala Days 会议、Scala 大使计划以及工具峰会。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;您可以通过以下两种方式向 Scala 中心捐款：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;个人捐款或让您的公司向 Scala 中心捐款 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fscala.epfl.ch%2Fdonate.html&quot; target=&quot;_blank&quot;&gt;https://scala.epfl.ch/donate.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;您可以鼓励您的公司加入 Scala 中心咨询委员会，以持续资助它。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;如果您想支持核心 Scala 语言和社区工作，请向 Scala 中心捐款。他们的大部分工作可能并不光彩夺目，但它们在确保 Scala 生态系统持续健康发展中发挥着关键作用。&lt;/p&gt; 
&lt;h4&gt;VirtusLab&lt;/h4&gt; 
&lt;p&gt;VirtusLab 负责许多 Scala 工具的核心开发：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Metals 和 VSCode Metals 插件&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Scala-CLI&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Scala 3 LTS，Scala 的发布流程和一般项目管理&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Scalameta 组织内的工具&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;如果您在使用 Metals 或 Scala-CLI 时遇到问题，并且想资助修复或改进，您应该联系 VirtusLab，邮箱地址为&amp;nbsp;scala@virtuslab.com.&lt;/p&gt; 
&lt;h3&gt;代码&lt;/h3&gt; 
&lt;p&gt;Scala 生态系统的大部分内容都是开源的。这意味着您可以直接深入代码，修复或改进您自己需要的部分：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;您可以自己修复 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fscala3&quot; target=&quot;_blank&quot;&gt;Scala3&lt;/a&gt;、&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJetBrains%2Fintellij-scala&quot; target=&quot;_blank&quot;&gt;IntelliJ&lt;/a&gt; 和 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscalameta%2Fmetals&quot; target=&quot;_blank&quot;&gt;Metals&lt;/a&gt; 中的错误。尽管代码库很大，但有人能够深入其中并修复他们自己用例所需的错误并不罕见。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;每 three 周都会进行一次 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fcontribute%2F%23so-you-want-to-improve-the-scala-3-compiler&quot; target=&quot;_blank&quot;&gt;Compiler Spree&lt;/a&gt; 和 Tooling Spree。这些是远程编码会议，您可以与 Scala 语言和工具的核心贡献者合作解决小规模的问题，并获取技能和知识，以应对更具挑战性的问题。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;向工具和基础设施贡献修复和改进并不容易，但这也不是不可能的。Scala 工具链的大部分都是开源的，并且在过去多次由个人和公司进行了一次的快速贡献，他们只是需要修复某些问题。向这些项目提交拉取请求与任何专业软件工程师每天已经做的工作没有区别，并且可以帮助你定期改善使用 Scala 的体验。&lt;/p&gt; 
&lt;h3&gt;语言设计&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fsips%2F&quot; target=&quot;_blank&quot;&gt;Scala 改进流程&lt;/a&gt; 并不仅限于核心 Scala 贡献者。任何人都可以提出一个，例如 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fimprovement-proposals%2Fpull%2F40&quot; target=&quot;_blank&quot;&gt;SIP-42 二进制整数字面量&lt;/a&gt;，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fimprovement-proposals%2Fpull%2F78&quot; target=&quot;_blank&quot;&gt;SIP-61 为二进制兼容性@unroll 默认参数&lt;/a&gt;，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fscala%2Fimprovement-proposals%2Fpull%2F97&quot; target=&quot;_blank&quot;&gt;SIP-67 改进严格相等性&lt;/a&gt;。如果核心 Scala 团队没有优先考虑你想要的，你总是可以介入并提出自己对语言改进的建议。毕竟，没有人比你更了解自己的需求！&lt;/p&gt; 
&lt;p&gt;SIPs 进入语言并不容易。无法保证一个 SIP 会被接受。即使 SIP 成功通过，通常也需要数月甚至一年时间来完成整个审查、实施和实验过程，最终才能进入 Scala 的发布。相反，最初被拒绝的想法可能在经过数月或数年的额外实验和改进后找到进入的方式。但我们需要更多的贡献者提出更改，而不仅仅是限于 Martin Odersky 和 EPFL 的团队。&lt;/p&gt; 
&lt;p&gt;如果您有想法要提出，但需要帮助实施，并且有资金支付，请联系 [email&amp;nbsp;protected]，我们可以帮助找到合适的专家进行合作。&lt;/p&gt; 
&lt;h2&gt;结论&lt;/h2&gt; 
&lt;p&gt;语言发展是一个间接的过程。核心 Scala 团队无法独自构建下一个重大的 Scala 成功故事，这也不会一蹴而就。我们能做的就是从各个方面提升 Scala 的体验：语言、工具和社区，并希望某处某个人会为一个新的项目选择 Scala，使其成为「下一个大热门」。&lt;/p&gt; 
&lt;p&gt;我们认为 Scala 语言的核心吸引力在于其安全性与便利性的结合。强大的类型系统和编译器可以防止错误，提供出色的运行时性能，而简洁的语法和类型推断则使其感觉像任何脚本语言一样灵活和富有表现力。毫无疑问，其他语言也在追求相同的目标，我们认为 Scala 凭借其独特的混合函数式-面向对象的设计，可以在多个方面做得更好，从而吸引并留住用户。&lt;/p&gt; 
&lt;p&gt;但 Scala 语言及其生态系统的细节将随着时间的推移而演变，我们不应过度依赖我们已经习惯的偶然复杂性。正如 Scala 在 2.13 版本中极大地简化了&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.scala-lang.org%2Fblog%2F2018%2F06%2F13%2Fscala-213-collections.html&quot; target=&quot;_blank&quot;&gt;集合&lt;/a&gt;，并且用更简单的&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.scala-lang.org%2F2021%2F02%2F26%2Ftuples-bring-generic-programming-to-scala-3.html&quot; target=&quot;_blank&quot;&gt;泛型元组&lt;/a&gt;和其他&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.scala-lang.org%2Fscala3%2Freference%2Fnew-types%2Findex.html&quot; target=&quot;_blank&quot;&gt;类型系统特性&lt;/a&gt;取代了类型级别的体操一样，我们期望继续发现可以改进 Scala 的领域。始终会有关于向后兼容性、迁移和易学性的担忧，但无论如何，Scala 需要不断地、批判性地审视自己，并借鉴过去二十年其他语言所学到的东西来提升开发者体验。&lt;/p&gt; 
&lt;p&gt;Scala 一直是一个社区项目，我们需要社区的帮助来推动它向前发展：无论是通过资金支持、提交拉取请求，还是在语言设计方面。我们希望社区中的每个人都能以自己的方式做出贡献，并推动语言的发展。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345137/evolving-scala</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345137/evolving-scala</guid>
            <pubDate>Sun, 13 Apr 2025 10:12:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>首个云超算国标正式发布：阿里云、华为云等联合起草</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;近日，国家市场监督管理总局、国家标准化管理委员会正式发布首个云超算国家标准 GB/T 45400-2025，将于今年 10 月实施。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e500d685c371b785670bd445adca14e3947.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;该标准由阿里云、华为云、腾讯云、中国电子技术标准化研究院等机构牵头起草，为云超算在更多高性能计算领域的大规模应用奠定基础，推动我国算力基础设施建设迈向标准化、智能化新阶段。&lt;/p&gt; 
&lt;p&gt;云超算是一种新型的高性能计算（HPC），它基于云基础设施对外提供弹性可扩展的高性能计算服务。&lt;/p&gt; 
&lt;p&gt;目前，传统高性能计算在大模型训练、自动驾驶、生命科学、工业制造、半导体芯片等领域展开应用，并逐渐向更多行业渗透。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;但传统 HPC 往往架构复杂、扩展性不佳，并存在性能瓶颈、价格高昂等门槛，很多企业虽然想用，却可能「不懂用」，或「用不好」、「用不起」。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;开箱即用的云超算成为高性能计算的新选择，多家单位在此背景下联合起草首个云超算国家标准，对云超算基础架构、资源协同调度、全栈安全可信体系等关键技术指标作出权威性界定，内容囊括云超算服务的设计研发、部署运维和效能评估全流程。&lt;/p&gt; 
&lt;p&gt;新标准的出炉，相当于给各行各业提供了一份包含云超算服务产品的设计、实现、应用和选型的科学指南。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345132</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345132</guid>
            <pubDate>Sun, 13 Apr 2025 09:44:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>黄仁勋：英伟达坚定不移服务中国市场，AI 将在每个行业引发颠覆性变革</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;4 月 17 日，中国贸促会会长任鸿斌在北京与英伟达公司首席执行官黄仁勋举行会谈。这是黄仁勋时隔 3 个月再次到访北京。黄仁勋在会谈中表示，&lt;strong&gt;中国是英伟达非常重要的市场，希望继续与中国合作。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;372&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1bf052320ee3587eb2eedcd683357c58a5d.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;据央视财经，针对美国政府决定对英伟达对华出口的 H20 芯片，黄仁勋表示：&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;美国政府加强芯片出口管制已对英伟达业务产生重大影响，当前全球正掀起一场激烈的人工智能竞赛，作为当代最具变革性的核心技术，AI 对各行业发展的推动前景广阔，世界各国都在加速推进技术应用，研发创新与能力提升，这必将对包括中国在内的全球市场格局产生深远影响。作为深耕中国市场三十载的企业，我们与中国市场共同成长、相互成就。中国不仅是全球最具规模的消费市场之一，其蓬勃发展的产业生态与领先的软件实力，更成为我们持续创新的重要动力，在中国市场的成功经验推动我们不断加大研发投入，而与中国企业的深度合作，也使我们成长为更具竞争力的国际化企业。因此，&lt;strong&gt;我们将继续不遗余力优化符合监管要求的产品体系，坚定不移地服务中国市场。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;黄仁勋还表示，AI 已经在诸多领域产生了重大影响，例如在软件编程方面，如今几乎所有的英伟达员工都会借助 AI 进行辅助开发。人工智能正在深刻改变众多行业的发展格局，但这仅仅是个开端，无论是医疗健康、金融服务、气候科技还是制造业，每个行业都将迎来人工智能引发的颠覆性变革。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345130</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345130</guid>
            <pubDate>Sun, 13 Apr 2025 09:40:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Vanna —— 基于 RAG 的自然语言生成 SQL 工具</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                            &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;Vanna 是一个 MIT 许可的开源 Python RAG（检索增强生成）框架，用于 SQL 生成和相关功能。&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;工作原理&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img height=&quot;357&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0416/151133_1FdG_4252687.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#1f2328&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Vanna 的工作分为两个简单的步骤 - 在你的数据上训练 RAG「模型」，然后提出问题，这些问题将返回可设置为在你的数据库上自动运行的 SQL 查询。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;在你的数据上训练 RAG「模型」&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提出问题&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;500&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0416/151158_TZIY_4252687.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;

&lt;div style=&quot;text-align:start&quot;&gt;
&lt;p&gt;&lt;strong&gt;Supported LLMs&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/openai&quot;&gt;OpenAI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/anthropic&quot;&gt;Anthropic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/blob/main/src/vanna/google/gemini_chat.py&quot;&gt;Gemini&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/blob/main/src/vanna/hf/hf.py&quot;&gt;HuggingFace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/bedrock&quot;&gt;AWS Bedrock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/ollama&quot;&gt;Ollama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/qianwen&quot;&gt;Qianwen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/qianfan&quot;&gt;Qianfan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/ZhipuAI&quot;&gt;Zhipu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align:start&quot;&gt;
&lt;p&gt;&lt;strong&gt;Supported VectorStores&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/azuresearch&quot;&gt;AzureSearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/opensearch&quot;&gt;Opensearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/pgvector&quot;&gt;PgVector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/pinecone&quot;&gt;PineCone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/chromadb&quot;&gt;ChromaDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/faiss&quot;&gt;FAISS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/marqo&quot;&gt;Marqo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/milvus&quot;&gt;Milvus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/qdrant&quot;&gt;Qdrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/weaviate&quot;&gt;Weaviate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanna-ai/vanna/tree/main/src/vanna/oracle&quot;&gt;Oracle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align:start&quot;&gt;
&lt;p&gt;&lt;strong&gt;Supported Databases&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://prestodb.io/&quot;&gt;PrestoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hive.apache.org/&quot;&gt;Apache Hive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://clickhouse.com/&quot;&gt;ClickHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.snowflake.com/en/&quot;&gt;Snowflake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/sql-server/sql-server-downloads&quot;&gt;Microsoft SQL Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.google.com/bigquery&quot;&gt;BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://duckdb.org/&quot;&gt;DuckDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

                                                                    &lt;/div&gt;
                                                                </description>
            <link>https://www.oschina.net/p/vanna</link>
            <guid isPermaLink="false">https://www.oschina.net/p/vanna</guid>
            <pubDate>Sun, 13 Apr 2025 09:32:00 GMT</pubDate>
        </item>
        <item>
            <title>CVE 基金会成立</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;有 25 年历史的 CVE 项目在漏洞管理中起到了举足轻重的作用，它负责分配和管理漏洞的唯一 CVE ID 编号，确保在提及特定漏洞和补丁时针对的是同一个漏洞。&lt;/p&gt; 
&lt;p&gt;非营利组织 MITRE 与美国国土安全部签订了运营 CVE 项目的合同，MITRE 周二确认，合同没有续签。这意味着从 4 月 16 日（星期三）起&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/news/345038&quot;&gt;美国政府将停止资助 CVE&lt;/a&gt;&lt;/u&gt;。安全行业人士担心在其他人接手前漏洞管理上将会出现巨大混乱。&lt;/p&gt; 
&lt;p&gt;CVE Naming Authority 机构 VulnCheck 表示预留了 1000 个 1000 个 CVE 用于 2025 年的漏洞。MITRE 每月发布 300-600 个 CVE，预留的编号只够用 2-3 个月。&lt;/p&gt; 
&lt;p&gt;为了应对危机，长期担任 CVE 董事会成员的联盟宣布成立&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.thecvefoundation.org%2F&quot; target=&quot;_blank&quot;&gt;CVE 基金会&lt;/a&gt;，这是一个致力于确保漏洞识别系统持续运行的非营利组织。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;700&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0417/165002_yPMw_2720166.png&quot; width=&quot;1670&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;新成立的基金会官员肯特·兰德菲尔德表示：「CVE 作为全球网络安全生态系统的基石，其重要性不容忽视。全球网络安全专业人员的日常工作——从安全工具和公告到威胁情报和响应——都依赖于 CVE 标识符和数据。如果没有 CVE，防御者在应对全球网络威胁时将处于极其不利的地位。」&lt;/p&gt; 
&lt;p&gt;CVE 计划提供了一个标准化的系统，用于识别和分类所有软件和硬件（包括 Apple 的 macOS、iOS、iPadOS 和其他产品）中的安全漏洞。当安全研究人员发现漏洞时，他们会被分配唯一的 CVE 标识符，以便 Apple 等公司协调补丁和更新。&lt;/p&gt; 
&lt;p&gt;MITRE 公司与美国国土安全部签订了合同，负责管理该项目。该公司确认，政府资金已于 4 月 16 日到期。&lt;/p&gt; 
&lt;p&gt;据路透社&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reuters.com%2Ftechnology%2Fus-funding-running-out-critical-cyber-vulnerability-database-manager-says-2025-04-15%2F&quot; target=&quot;_blank&quot;&gt;报道&lt;/a&gt;，该项目的到期可能与联邦政府正在进行的大规模裁员有关，此次裁员的部分原因是政府效率部（DOGE）。&lt;/p&gt; 
&lt;p&gt;受此次裁员影响的美国网络安全和基础设施安全局（CISA）表示，由于突然出现的资金缺口可能会扰乱全球漏洞管理，该局正在「紧急努力减轻影响」。&lt;/p&gt; 
&lt;p&gt;安全专家警告称，如果没有 CVE，网络安全工作将面临「彻底混乱」，因为用于沟通漏洞的通用语言实际上将消失。一位研究人员将其比作「突然删除所有词典」。&lt;/p&gt; 
&lt;p&gt;新成立的 CVE 基金会旨在将该项目转型为不依赖单一政府资助的专门的非营利模式。基金会的组织者透露，他们过去一年一直在为这一可能性做准备。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.thecvefoundation.org%2F&quot; target=&quot;_blank&quot;&gt;该基金会在公告&lt;/a&gt;中表示：「对于国际网络安全界来说，此举代表着一个建立反映当今威胁形势全球性的治理机制的机会。」&lt;/p&gt; 
&lt;p&gt;资金削减还影响了相关的通用弱点枚举 (CWE) 计划，该计划帮助苹果等公司在潜在安全问题成为漏洞之前发现它们。&lt;/p&gt; 
&lt;p&gt;CVE 基金会预计将在未来几天公布更多有关其架构和资金计划的细节。苹果和其他大型科技公司可能会在支持其成为网络安全基础设施关键组成部分方面发挥重要作用。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345117/the-cve-foundation</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345117/the-cve-foundation</guid>
            <pubDate>Sun, 13 Apr 2025 08:55:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>特朗普政府考虑在美国禁用 DeepSeek</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.nytimes.com%2F2025%2F04%2F16%2Ftechnology%2Fnvidia-deepseek-china-ai-trump.html&quot; target=&quot;_blank&quot;&gt;《纽约时报》&lt;/a&gt;周三报道称，特朗普政府正在考虑对中国人工智能实验室 DeepSeek 实施新的限制，限制其购买英伟达的人工智能芯片，并可能禁止美国人访问其人工智能服务。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-203442edacfcf58c37d7ea5f763fad361b4.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;这些限制是特朗普政府在人工智能领域与中国竞争的举措之一。在 DeepSeek 震惊硅谷和华尔街数月后，美国官员似乎正在权衡多种方案，以限制中国获取美国技术和消费者。&lt;/p&gt; 
&lt;p&gt;周二，白宫采取行动限制更多英伟达人工智能芯片以及 AMD 的计算卡产品向中国销售，加强拜登政府制定的规定。&lt;/p&gt; 
&lt;p&gt;近几个月来，DeepSeek 在美国人工智能开发者中的人气飙升，这家初创公司具有竞争力的定价迫使硅谷以更低的成本提供前沿人工智能模型。&lt;/p&gt; 
&lt;p&gt;此前，OpenAI 指控这家中国实验室对其模型进行了篡改，违反了 OpenAI 的使用条款。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;相关阅读：&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/338735/openai-calls-deepseek-state-controlled&quot; target=&quot;news&quot;&gt;OpenAI 呼吁美国政府禁止 DeepSeek&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/344925&quot; target=&quot;news&quot;&gt;英伟达对华特供版 AI 芯片（H20 GPU）遭遇出口管制&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345109/deepseek-china-ai-trump</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345109/deepseek-china-ai-trump</guid>
            <pubDate>Sun, 13 Apr 2025 08:39:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>字节跳动发布视频生成基础大模型 Seaweed-7B</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;字节跳动近日公布了一个仅 70 亿参数的视频生成基础大模型「Seaweed-7B」。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4514fa3f8394e07ea2ee816465b6d9d857e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;u&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fseaweed.video%2F&quot; target=&quot;_blank&quot;&gt;https://seaweed.video/&lt;/a&gt;&lt;/em&gt;&lt;/u&gt;&lt;/p&gt; 
&lt;p&gt;令人惊喜的是，该模型以 66.5 万个 H100 GPU 小时训练成本，在文本/图像到视频生成任务中全面超越 140 亿参数的 Wan 2.1，具体来看：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Seaweed-7B Elo 评分为 1047，胜率 58%，而 Wan 2.1 仅有 53%，OpenAI 的 Sora 更是仅有 36%&lt;/li&gt; 
 &lt;li&gt;可实时生成分辨率为 1280×720、帧率为 24fps 的视频，比同类模型快 62 倍&lt;/li&gt; 
 &lt;li&gt;40GB 显存即可支持 1280×720 分辨率生成&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;据官方介绍，Seaweed-7B 结合了变分自编码器（VAE）和潜在扩散变换器（DiT）。其中，VAE 负责高效的训练和推理，而 DiT 则通过扩散模型生成图像和视频，显著提高了生成的质量与效率。&lt;/p&gt; 
&lt;p&gt;另外，团队为了提升 Seaweed-7B 的训练效率，采用了多阶段训练策略和 GPU 资源的优化调配。预训练阶段通过低分辨率图像开始，逐步引入高分辨率视频训练，提升了模型的泛化能力。此外，在后训练阶段，通过监督微调和基于人类反馈的强化学习（RLHF）进一步提高了生成视频的美学质量和运动一致性。&lt;/p&gt; 
&lt;p&gt;目前，Seaweed-7B 相关报告已公开：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fseaweed.video%2Fseaweed.pdf&quot; target=&quot;_blank&quot;&gt;https://seaweed.video/seaweed.pdf&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345103/bytedance-seaweed-video</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345103/bytedance-seaweed-video</guid>
            <pubDate>Sun, 13 Apr 2025 08:20:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>马斯克：特斯拉将实现纯 AI 自动驾驶，仅需摄像头和 AI 芯片</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;马斯克近日在社交媒体发文称，特斯拉即将实现一种通用的、纯 AI 的全自动驾驶（FSD）解决方案。&lt;/p&gt; 
&lt;p&gt;据其介绍，这一技术将完全依赖于摄像头和特斯拉自主研发的 AI 芯片，并由特斯拉开发的 AI 软件驱动。实际上，这一声明与特斯拉长期以来坚持的仅靠视觉实现自动驾驶的愿景相一致。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0417/160721_YZPO_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;值得注意的是，特斯拉官方 X 账号近日发布视频，称特斯拉德克萨斯工厂现在使用 FSD 无监督技术将汽车从生产线末端运送到发货物流区，同时宣布无监督 FSD 系统已积累超 50000 英里（约 80467.22 公里）驾驶里程，全程无需人工干预。&lt;/p&gt; 
&lt;p&gt;在特斯拉工厂内部，新款 Model Y 和 Cybertruck 实现了从生产线到交付停车场的自动行驶。自动驾驶车辆运用最新 AI4 硬件（4.0 版），可应对交通标志、工厂建设、行人和机械化交通等复杂道路环境，且车辆间能相互通信以避免碰撞。&lt;/p&gt; 
&lt;p&gt;据悉，特斯拉无监督 FSD 公路测试计划即将开启，预计 6 月于奥斯汀率先开展。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;相关阅读：&lt;a href=&quot;https://www.oschina.net/news/340233&quot; target=&quot;news&quot;&gt;马斯克：2024 年特斯拉 AI 投资约 100 亿美元、FSD 安全水平将超过人类&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345100</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345100</guid>
            <pubDate>Sun, 13 Apr 2025 08:08:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Linux 6.16 主线内核将合并 Asahi UAPI，进一步优化支持苹果 M1 / M2 图形驱动</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Fdri-devel%2Fe147ff95-697b-4067-9e2e-7cbd424e162a%40linux.intel.com%2F&quot; target=&quot;_blank&quot;&gt;根据 Linux 内核邮件列表的消息&lt;/a&gt;&lt;/u&gt;，Asahi 驱动用户空间 API（UAPI）的头文件已通过 DRM-Misc-Next，被提交至 DRM-Next 队列，并计划在 Linux 6.16 的合并窗口（预计为 6 月）正式纳入主线内核。&lt;/p&gt; 
&lt;p&gt;这一 UAPI 主要用于支持苹果 M1 和 M2 系列芯片的 GPU，目标是实现 Linux 系统对这些硬件图形功能的驱动。&lt;/p&gt; 
&lt;p&gt;UAPI 的设计参考了其他现代 Vulkan 驱动程序（例如 Xe 和 Panthor），采用了显式虚拟内存管理与同步机制，从而确保运行效率。开发者 Alyssa Rosenzweig 表示，此举的目的是让 Mesa 驱动能够直接基于主线内核构建，减少对外部头文件的依赖，从而提升系统的兼容性。&lt;/p&gt; 
&lt;p&gt;尽管 UAPI 的头文件已经提交，但完整的 Asahi 内核图形驱动目前尚未完成开发。主要原因在于该驱动使用 Rust 语言编写，而 Rust 在内核中的抽象支持仍需大量的上游工作。&lt;/p&gt; 
&lt;p&gt;此外，作为一款生产级图形驱动，Asahi 依赖许多尚未合并的 Rust 抽象层，因此短期内难以实现全面的上游整合。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1dade207fb4a37d21fe204449acb7a922be.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;目前，Mesa 开源堆栈已验证了 UAPI，并支持包括 OpenGL 4.6、OpenGL ES 3.2、OpenCL 3.0 以及 Vulkan 1.4 在内的多种标准。然而，由于用户空间与主线内核之间的对接尚未完全实现，实际应用仍然受到一定限制。&lt;/p&gt; 
&lt;p&gt;Rosenzweig 进一步强调，提交 UAPI 头文件的主要目的是为了接受社区的审查，以确保其稳定性，并在未来以向后兼容的方式进行演进，从而为后续驱动程序的全面落地奠定基础。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345097/linux-6-16-ashai-uapi-header</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345097/linux-6-16-ashai-uapi-header</guid>
            <pubDate>Sun, 13 Apr 2025 08:02:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>豆包公布 Seedream 3.0 文生图模型技术报告</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;字节跳动旗下「豆包大模型团队」&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FmLRMHXq51HDBN_Vaylm_mw&quot; target=&quot;_blank&quot;&gt;发文表示&lt;/a&gt;&lt;/u&gt;，全新图像生成基础模型「Seedream 3.0」技术报告正式发布。&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;Seedream 3.0 是一个原生高分辨率、支持中英双语的图像生成基础模型，亮点如下：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;原生 2K 直出，适配多比例场景：无需后处理可直接输出 2K 分辨率图像，从手机端到巨幅海报场景的视觉需求均可满足；&lt;/li&gt; 
 &lt;li&gt;3 秒出图，大幅提升创作效率：面向海报设计、视觉创意等需求，可实现 3 秒左右快速生成高品质图像，实现「所想即所得」的实时创意交互；&lt;/li&gt; 
 &lt;li&gt;小字更准，文本排版效果增强：优化小字体高保真生成、多行文本语义排版等业界难题，让 AI 具备商业级图文设计能力；&lt;/li&gt; 
 &lt;li&gt;美感 &amp;amp; 结构提升，生成富有感染力：指令遵循进一步增强，人体和物体结构崩坏改善，且进一步弱化了出图的 AI 感，实现从「看得清」到「有感染力」的审美提升。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0417/155350_bNhq_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;值得一提的是，在权威竞技场 Artificial Analysis 上，Seedream 3.0 与 GPT-4o、Imagen 3、Midjourney v6.1、FLUX 1.1 Pro、Ideogram 3.0 等文生图模型同台竞技，在近期打榜中，一度排名第一。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0417/154909_oM7T_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Seedream 3.0 已在本月正式上线，目前已在豆包、即梦等平台全量开放。&lt;/p&gt; 
&lt;p&gt;另外，Seedream 3.0 的相关技术报告以及详细内容也已经上架：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Arxiv：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2504.11346&quot; target=&quot;_blank&quot;&gt;https://arxiv.org/abs/2504.11346&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;技术呈现页：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fteam.doubao.com%2Ftech%2Fseedream3_0&quot; target=&quot;_blank&quot;&gt;https://team.doubao.com/tech/seedream3_0&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/345096/seedream-3-0-technical-report</link>
            <guid isPermaLink="false">https://www.oschina.net/news/345096/seedream-3-0-technical-report</guid>
            <pubDate>Sun, 13 Apr 2025 07:51:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
    </channel>
</rss>