<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 简体中文</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 02 Sep 2025 02:44:54 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>R8 疑难杂症分析实战：外联优化设计缺陷引起的崩溃</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
&lt;h1&gt;一、背景&lt;/h1&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;R8 作为谷歌官方的编译优化工具，在编译阶段会对字节码进行大规模修改，以追求包体优化和性能提升。但是 Android 应用开发者数量太过庞大，无论测试流程多么完善，终究难以避免在一些特定场景下出现问题。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;近期我们在升级项目的 AGP，遇到了一个指向系统 SurfaceTexture 类的 native 崩溃问题。经反编译分析发现问题最终指向了 smali 字节码中多余的一行 new-instance 指令。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//c5f08cf575756e08466c223dc6283005.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//1c03aaa90c06e347c22e752eeb0ccb1d.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;该指令创建了一个 SurfaceTexture 对象，但是并未调用其&amp;lt;init&amp;gt;方法，这意味着构造方法没有执行，但是这个类重写了 finalize 方法，后续被 gc 回收时会调用其中的 nativeFinalize 这个 JNI 方法，最终在 native 层执行析构函数时触发了 SIGNALL 11 的内存访问错误.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//d639c13a4be57106726e6ea52ee6c3f4.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//2210f4a541d54e36690a7e1fbfb16627.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;span id="OSC_h1_2"&gt;&lt;/span&gt; 
&lt;h1&gt;二、复现问题&lt;/h1&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;我们注意到多出来的 new-instance 指令下面紧接着的是对 a0.e 类中的静态方法 i() 的调用，其内部实现就是 SurfaceTexture 的构造方法。这是典型的代码外联操作，即一段相同的代码在工程中多次出现，则会被抽出来单独作为一个静态函数，原先的调用点则替换成该函数的调用，这样可以减小代码体积，是常见的编码思路。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;例如：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;class&amp;nbsp;Activity{
&amp;nbsp; &amp;nbsp;&amp;nbsp;void&amp;nbsp;onCreate(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// ...
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;String&amp;nbsp;a = xx.xxx();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;String&amp;nbsp;b = xx.xxx();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Log.e("log",a+b);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;//...
&amp;nbsp; &amp;nbsp; }


&amp;nbsp; &amp;nbsp;&amp;nbsp;void&amp;nbsp;onReusme(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// ...
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;String&amp;nbsp;a = xx.xxx();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;String&amp;nbsp;b = xx.xxx();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Log.e("log",a+b);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;//...
&amp;nbsp; &amp;nbsp; }


}&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;class&amp;nbsp;Activity{
&amp;nbsp; &amp;nbsp;&amp;nbsp;void&amp;nbsp;onCreate(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// ...
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Activity$Outline.log();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;//...
&amp;nbsp; &amp;nbsp; }


&amp;nbsp; &amp;nbsp;&amp;nbsp;void&amp;nbsp;onReusme(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// ...
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Activity$Outline.log();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;//...
&amp;nbsp; &amp;nbsp; }
}
//外联生成的类
class&amp;nbsp;Activity$Outline{
&amp;nbsp; &amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;log(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;String&amp;nbsp;a = xx.xxx();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;String&amp;nbsp;b = xx.xxx();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Log.e("log",a+b);
&amp;nbsp; &amp;nbsp; }
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;我们根据这个生成类的类名可以知道是 R8 中 ApiModelOutline 功能生成了这个类。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//832dad3a1078a82298590ae249e4c937.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;我们进到 R8 工程中检索下相关的关键字，再加上 demo 多次尝试，可以确认满足以下条件能够必现该问题:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;使用了高于当前 minSdkVersion 的系统函数/变量（仅限系统类，自己写的无效）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;用 synchronized 或者 try 语句块包裹了该调用，或者给该函数传参时有任何计算行为（除了传局部变量）。例如：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;new SurfaceTexture( getParmas() )&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;new SurfaceTexture( if(enable) 1 : 2)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;new SurfaceTexture ( (boolean) enable )&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;span id="OSC_h1_3"&gt;&lt;/span&gt; 
&lt;h1&gt;三、问题分析&lt;/h1&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;在确认复现条件之后，我们带着几个问题来逐个分析。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;ApiModel 外联是什么？&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#ffffff"&gt;R8 中的优化大多数跟包体优化有关，代码外联也是其中一种，但是外联的前提是代码重复的次数满足一定阈值，但是 ApiModel 会对所有调用了高版本系统 API 的代码做外联，包括只调用一次的场景。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;ApiModel 并非为了包体优化，我们通过 R8 工程的 issueTracker&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;（https://issuetracker.google.com/issues/333477035）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;检索到了相关的信息：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//5020bee9863c252049d9f1d8f055c200.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;译：AGP 新增的 ApiModel 功能是为了防止在低版本设备上不可能执行的代码引起类验证错误，从而降低 App 启动耗时。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;从这篇介绍 ART 虚拟机类验证的文档&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;（https://chromium.googlesource.com/chromium/src/+/HEAD/build/android/docs/class_verification_failures.md#chromium_s-solution）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;就能够理解上面这句话的含义：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;ART 虚拟机会在 APK 安装之后立刻执行 AOT class verification，即对 dex 文件中所有的类进行验证，如果验证成功则后续运行时将不需要再进行验证，反之若失败，则该 class 会被 ART 打上&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#e5e5e5"&gt;RetryVerificationAtRuntime&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#3e3e3e"&gt;的标记，后续运行时还得重新执行类验证。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;同时这些失败的类也将无法被 dex2oat 优化成 oat 格式的优化字节码（oat 字节码的加载和执行速度更快）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//5d3b99565c562dff751ba4ac636da574.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;如果是在 MainActivity，启动任务中使用了这些高版本 API，那么在低版本设备 App 启动时就必须额外执行一次类验证（比较耗时，有的类能到 8ms&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;&amp;nbsp;https://issues.chromium.org/issues/40574431&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;），而 ApiModel 外联则是相当于将这些肯定验证失败的函数的调用单独抽到一个生成类中，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;这样运行时就能将类验证失败问题彻底隔离在生成类中，从而规避运行时的类验证耗时。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;//安装 apk 后验证失败，运行时验证失败，但是能正常执行
class&amp;nbsp;MainActivity{
&amp;nbsp; &amp;nbsp;&amp;nbsp;void&amp;nbsp;onCreate(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;if(android.sdk&amp;nbsp;&amp;gt;&amp;nbsp;26){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;new&amp;nbsp;SurfaceTexture(false);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; }
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;ApiModel 后&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;class&amp;nbsp;MainActivity{
&amp;nbsp; &amp;nbsp;&amp;nbsp;void&amp;nbsp;onCreate(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;if(android.sdk &amp;gt;&amp;nbsp;26){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; a0.b();&amp;nbsp;//这样类验证就能成功
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; }
}
//生成的外联类，类验证会失败，但是运行时不可能走到，不影响
class&amp;nbsp;a0{
&amp;nbsp; &amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;b(){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;new&amp;nbsp;SurfaceTexture(false);
&amp;nbsp; &amp;nbsp; }
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;更多关于 ApiModel 的详细介绍，见这篇文章：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;https://medium.com/androiddevelopers/mitigating-soft-verification-issues-in-r8-and-d8-7e9e06827dfd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;为什么会多生成一个&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;new-instance 指令?&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;介绍完 ApiModel 之后，我们已经知道了为什么&amp;lt;init&amp;gt;方法的调用被替换成了一个生成函数的调用，接下来我们再分析下导致崩溃的罪魁祸首 new-instance 指令是如何出现的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;我们先来了解下 java 文件在编译过程中的格式转换过程，因为 ApiModel 是基于 IRCode 格式（R8 自定义的格式）来做外联。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;文件转换&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;javac&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#ffffff"&gt;javac 将 java 文件编译成 class 文件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;值得一提的是 sychronized 语句块在 javac 编译之后会为其内部代码生成 try-catch，这是为了确保在语句块抛异常时能够正常释放锁，因此和问题有关的是 try-catch 语句块，和 synchronized 无关。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//36889c510c4d4a88957306d93cdf7d59.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;D8&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#ffffff"&gt;目前 R8 已经整合 D8，因此输入 class 文件之后就会先通过 D8 转为 dex 格式，并持有在内存中。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;转换之后的指令基本和 class 字节码基本类似。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//876e7cf561f3a8aa1ee57005986ae7f0.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;IRcode&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;为了做进一步的优化，会将 dex 格式的代码转化成 R8 自定义的 IRcode 格式，其特点是代码分块。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;案例：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//b04a46ddb675fd3446029e19aa3fc632.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;问题根因&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;在 R8 工程里检索 ApiModel 关键字，最终定位到针对构造函数生成外联函数和指令替换的代码：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#e5e5e5"&gt;InstanceInitializerOutliner-&amp;gt;rewriteCode&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;执行此方法之前的指令如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;java：
new&amp;nbsp;SurfaceTexture(false);&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;dex：
:&amp;nbsp;-1:&amp;nbsp;NewInstance &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;v1&amp;nbsp;&amp;lt;- &amp;nbsp;android.graphics.SurfaceTexture
: -1: ConstNumber &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;v2(0) &amp;lt;- &amp;nbsp;0 (INT)
: -1: Invoke-Direct &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;v1,&amp;nbsp;v2(0); method:&amp;nbsp;void&amp;nbsp;android.graphics.SurfaceTexture.&amp;lt;init&amp;gt;(boolean)&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;对整个方法中所有的指令从上往下进行遍历，第一次遍历主要是：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;检索 &amp;lt;init&amp;gt;方法调用的指令&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;判断该方法的 androidApiLevel 是否高于 minSDK&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;生成包含完整构造函数指令的外联函数，并替换&amp;lt;init&amp;gt;函数调用为外联函数调用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;执行完替换逻辑，就记录信息到 map 中，key 是&amp;lt;init&amp;gt;对应的 new-instance 指令，value 是前一步中替换的新指令。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;经过这一步，字节码会变成这样：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//e6b105ab1ca583830e11bee8baafc4e5.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;具体替换逻辑如下（可以参考注释理解）：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//c919c6ad05e651de339fb13da747bfaa.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;第二次遍历则是对 new-instance 指令的处理：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;找到 new-instance 指令&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;查询 map，确认&amp;lt;init&amp;gt;方法已完成替换&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;根据&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;canSkipClInit&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;方法返回的结果分为两种场景：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;ul&gt; 
   &lt;li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;无类初始化逻辑：直接移除 new-instance 指令，不影响原代码的语义。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//f1f56bfb61c5396de49e85cc7eec3a7e.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;ul&gt; 
   &lt;li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;有类初始化逻辑：生成外联函数，只包含该 new-instance 指令，和前一次遍历一样进行指令替换。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//1959f35cfade28f57d11667c652bea3e.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;具体替换逻辑:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//fac201236889edc5ad19870621442c23.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;问题重点就在于&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;canSkipClInit&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;这个函数的实现。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;它会检查 new-intance 指令和 invoke &amp;lt;init&amp;gt;指令之间是否存在任何局部变量声明以外的指令，如果存在，他会认为这些指令是这个类初始化的逻辑，因此为了保留源代码的执行顺序，这种情况下就是需要额外执行一次 new-instance 指令来触发类初始化。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//9fe3bbc584708c6a61e6b7a0d4e808bd.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;但是实际上，如果在调用这个构造函数传参时执行了任何运算（和类加载无关），都会生成相关的指令插在中间，例如：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;java 写法&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;new-intance 和 invoke &amp;lt;init&amp;gt;指令之间的指令&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;new SurfaceTexture( getParmas() )&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;invoke-virtual &amp;nbsp; v2 &amp;lt;-; method: void xx.xx.xx&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;new SurfaceTexture( if(enable) 1 : 2)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;StaticGet &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;v3 &amp;lt;- ; field: boolean &amp;nbsp;xxx.xxx.xx&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;new SurfaceTexture ( (boolean) enable )&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;: -1: CheckCast &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;v5 &amp;lt;- v3; java.lang.Boolean&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;: -1: Invoke-Virtual &amp;nbsp; &amp;nbsp; &amp;nbsp; v6 &amp;lt;- v5; method: boolean java.lang.Boolean.booleanValue()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;从作者留下的 todo 也能看出，后续准备扩展这个方法，实现对这些夹在中间的指令的判断，如果是对类初始化无影响的入参计算逻辑，则也将正常移除 new-intance 指令。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//fa19a3d661f5f19c0bf5fdb01d8c8aba.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;值得一提的是，我们最终 APK 里 new-intance 指令并没有被外联，这是因为 SurfaceTexture 这个类本身在安卓 21 之前的版本就已经存在，只是入参为 bool 类型的构造方法是在安卓 26 新增的，所以他其实是被外联之后又被内联回到了调用处，因此看起来像是没有被外联。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//48f375f6e8c147cd435c140b6c8864ba.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;小结&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;至此，我们就明白了多出来一个看似无用的 new-intance 指令，实际上是为了保全源代码的语义，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;触发类加载&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;用的，但是作者没有考虑到这些被优化的类可能重写了 finalize 方法来释放一些本就不存在的资源。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;而且不局限于调用 native 函数，只要是重写了 finalize，并在里面访问一些在构造函数中初始化的成员变量，一样可能造成 NPE 等崩溃。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;R8 是如何计算出 API 的版本？&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//d58a071ec92ca506d6e4f3e1ab4c7122.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;R83.3 版本开始，它编译时会下载一个.ser 格式的数据库文件，里面记录了所有系统 API、变量与安卓版本号的映射信息，在运行时通过行号和偏移量来寻找各自的版本号。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//9842b0b5f78805c080d71cbda30f1c44.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;为什么 try-catch&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;也会导致该问题？&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;前面解释了在构造函数入参中添加函数调用等写法导致的字节码异常原因，但是实际上这次我们遇到的崩溃场景是在 sychronized 里 new 了一个 SurfaceTexture。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//cec26da2ccbd01a385a47d0914cbd615.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;前文中已经解释过，sychronized 在编译成 class 后会生成 try-catch 语句块，这段代码改成用 try-catch 语句块包裹，一样会复现崩溃，因此我们跟踪 try-catch 在文件转换过程中对字节码的影响即可。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;回到 class 文件转 dex 文件的阶段，我们发现 try 语句块中的每一行指令，都会在其后生成一条 FALLTHROUGH 指令。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;dex 格式：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//dc87199452140addbab0d7de45794ad8.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;FALLTHROUGH 是什么指令，他是做什么的？&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;FALLTHROUGH 指令表示指令自然流转，没有实际含义，它主要是为了帮助优化器识别哪些指令是可达的。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;例如下面这种写法，case1 没有写 break，这样会接着执行 case2 的代码：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;switch&amp;nbsp;(value) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;case&amp;nbsp;1:
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.println("One");
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// 故意不写 break
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;case&amp;nbsp;2:
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.println("Two");
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;break;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;case&amp;nbsp;3:
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.println("Three");
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;break;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;其字节码如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;正常有 break 的话，会对应一条 GOTO 指令跳转到 switch 语句块最后一行，但是没写 break 的话，就会出现：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;在 12 行执行 goto 13 跳转到 13 行的指令，这种指令毫无意义，且运行时会消耗性能，因此可以替换成 FALLTHROUGH 指令，这样最终在生成 dex 文件时会被移除掉，从而避免浪费性能。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;switchWithFallthrough(int);
&amp;nbsp; Code:
&amp;nbsp; &amp;nbsp; stack=2, locals=1, args_size=1


&amp;nbsp; &amp;nbsp;&amp;nbsp;// 加载参数
&amp;nbsp; &amp;nbsp;&amp;nbsp;0: iload_0


&amp;nbsp; &amp;nbsp;&amp;nbsp;// 检查 case 1
&amp;nbsp; &amp;nbsp;&amp;nbsp;1: iconst_1
&amp;nbsp; &amp;nbsp;&amp;nbsp;2: if_icmpne&amp;nbsp;13&amp;nbsp; &amp;nbsp;&amp;nbsp;// 如果不等于 1，跳转到 case 2
&amp;nbsp; &amp;nbsp;&amp;nbsp;5: getstatic #2&amp;nbsp; &amp;nbsp;&amp;nbsp;// Field java/lang/System.out:Ljava/io/PrintStream;
&amp;nbsp; &amp;nbsp;&amp;nbsp;8: ldc #3&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// String One
&amp;nbsp; &amp;nbsp;&amp;nbsp;10: invokevirtual #4&amp;nbsp;// Method java/io/PrintStream.println:(Ljava/lang/String;)V
&amp;nbsp; &amp;nbsp;&amp;nbsp;12:&amp;nbsp;goto&amp;nbsp;13


&amp;nbsp; &amp;nbsp;&amp;nbsp;// case 2 (fallthrough 目标)
&amp;nbsp; &amp;nbsp;&amp;nbsp;13: iconst_2
&amp;nbsp; &amp;nbsp;&amp;nbsp;14: if_icmpne&amp;nbsp;28&amp;nbsp; &amp;nbsp;// 如果不等于 2，跳转到 case 3
&amp;nbsp; &amp;nbsp;&amp;nbsp;17: getstatic #2&amp;nbsp; &amp;nbsp;// Field java/lang/System.out:Ljava/io/PrintStream;
&amp;nbsp; &amp;nbsp;&amp;nbsp;20: ldc #5&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// String Two
&amp;nbsp; &amp;nbsp;&amp;nbsp;22: invokevirtual #4&amp;nbsp;// Method java/io/PrintStream.println:(Ljava/lang/String;)V
&amp;nbsp; &amp;nbsp;&amp;nbsp;25:&amp;nbsp;goto&amp;nbsp;40&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;// 跳转到 switch 结束


&amp;nbsp; &amp;nbsp;&amp;nbsp;// case 3
&amp;nbsp; &amp;nbsp;&amp;nbsp;28: iconst_3
&amp;nbsp; &amp;nbsp;&amp;nbsp;29: if_icmpne&amp;nbsp;40&amp;nbsp; &amp;nbsp;// 如果不等于 3，跳转到结束
&amp;nbsp; &amp;nbsp;&amp;nbsp;32: getstatic #2&amp;nbsp; &amp;nbsp;// Field java/lang/System.out:Ljava/io/PrintStream;
&amp;nbsp; &amp;nbsp;&amp;nbsp;35: ldc #6&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// String Three
&amp;nbsp; &amp;nbsp;&amp;nbsp;37: invokevirtual #4&amp;nbsp;// Method java/io/PrintStream.println:(Ljava/lang/String;)V


&amp;nbsp; &amp;nbsp;&amp;nbsp;// switch 结束
&amp;nbsp; &amp;nbsp;&amp;nbsp;40:&amp;nbsp;return&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;既然没用为什么还要加这个指令？&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;class 文件是通过 Exception table 来指定异常处理的指令范围，而 dex 文件则是通过为每一行可能产生 throwable 的指令后面添加 FALLTHROUGH 指令来实现 try-catch。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;这里会把每一行可能崩溃的指令都链接到 catch 指令所在的 block 中，确保任意位置的崩溃都能正常走到 catch 中。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//144f461c63929a79f8346da8a6731ecb.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;问题根因&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;在 R8 4.0.26 版本，IRCode 翻译器新增了对 FALLTHROUGH 指令的处理，即新建一个 block 并&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;生成一条 GOTO 指令指向新的 block。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//941934987c5518db50e697aacc04d794.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;根据前文的结论，GOTO 指令一样会被认为是类初始化相关的逻辑，因此 try-catch 语句块一样会导致最终多出来一个 new-instance 字节码。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;为什么只升级 AGP 会导致&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;R8 功能出问题？&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;我们在数个版本之前就已经单独升级了 R8，正好涵盖了 ApiModel 这个变更，但是直到近期才升级了 AGP。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;可以看到从 AGP7.3-beta 版本开始，才默认打开 ApiModel 功能，这就解释了为什么升级 AGP 之后才出现此崩溃。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//09bde1db3ff6dd55f96188f2c6337b24.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h1_4"&gt;&lt;/span&gt; 
&lt;h1&gt;四、解决方案&lt;/h1&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;禁用 ApiModel&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;ApiModel 通过牺牲些微包体，换来启动阶段类验证耗时，但是从他覆盖的类范围来看，对启动速度的收益微乎其微，因此可以直接通过配置开关关闭整个功能。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;System.setProperty("com.android.tools.r8.disableApiModeling",&amp;nbsp;"1")&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;虽说这是个实验中的功能，且逻辑相对独立，但是考虑到后续还有内联优化等操作，贸然关闭整个功能无法评估影响面，潜在的稳定性风险较高。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;官方修复&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;该问题反馈给 R8 团队后，官方提供了临时规避的方案，即确保高版本 API 在单独的函数中调用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;https://issuetracker.google.com/issues/441137561&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//358c6b1b9714ab22bdff45c27378289c.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;随后不久就提了 MR 针对 SurfaceTexture 这个类禁用了 ApiModel，并未彻底解决此问题。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;https://r8-review.googlesource.com/c/r8/+/109044&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//403f68ae953ddd19b67dc90602d69475.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;官方的修复方案比较权威，且影响面较小，但是并未彻底解决问题。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;自行修复&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;如果要修复此问题，关键是要将多余的 new-instance 指令替换成一个合适的触发类加载的指令，根据 java 官方文档里的介绍，只有 new 对象，访问静态的成员变量或者函数的指令才能安全的触发类加载，比较理想的方案是改成访问静态变量，但是很多类并没有静态变量，比如 SurfaceTexture 就没有。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//168eeaad61d7b9e162730708773e256d.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;因此我们可以考虑结合 getStatic 指令和扫描 finalize 的方式来解决该问题：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//baa3977f849ce680a7684f38a4d68176.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;虽说可以通过打印日志来约束此改动的影响面，但毕竟要自行修改并编译 R8 的 jar 包，且需要自行长期维护，整体影响面还是偏大，对稳定性要求高的 App 不建议采用该方案。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span style="background-color:#ffffff"&gt;业务改造（推荐）&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;在前文中提到的外联函数生成处打印日志，即可感知到工程中有哪些类受 ApiModel 影响，如果数量不多，分别让业务改造其相关的写法，确保传参时是局部变量且无 try-catch/synchronized 语句块即可。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img src="https://oscimg.oschina.net/oscnet//a7fd6ee2c6b96d340b89116b8a76d5d5.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;考虑到 App 整体的稳定性，最终我们采用了业务改造的方式绕过了此问题，并在 R8 异常代码处添加了日志告警来预防后续增量问题，并仿照官方 MR 中的写法补充了类的黑名单，用于应对无法编辑的三方库引入此问题的场景。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h1_5"&gt;&lt;/span&gt; 
&lt;h1&gt;五、总结&lt;/h1&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;在 Android 开发中，即使是 AGP、R8 这样的官方工具链升级，也要保持足够的警惕。毕竟 Android 生态太过复杂，再加上开发者们千奇百怪的代码写法，不论多么完善的测试流程都无法规避这类特定场景的 bug。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;这次的 ApiModel 外联优化问题就是一个很好的例子——它只在特定条件下才会暴露，但一旦出现就是必现的 native 崩溃。所以对于这种影响面无法评估的重大升级，还是需要经过足够长时间的独立灰度验证，才能合入主干分支。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:24px; margin-right:24px; text-align:center"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#ffffff"&gt;&lt;span style="background-color:#5caae9"&gt;往期回顾&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#e9faff"&gt;1.&amp;nbsp;可扩展系统设计的黄金法则与 Go 语言实践｜得物技术&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#e9faff"&gt;2.&amp;nbsp;得物新商品审核链路建设分享&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#e9faff"&gt;3.&amp;nbsp;营销会场预览直通车实践｜得物技术&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#e9faff"&gt;4.&amp;nbsp;基于 TinyMce 富文本编辑器的客服自研知识库的技术探索和实践｜得物技术&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:16px; margin-right:16px"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#6a6a6a"&gt;&lt;span style="background-color:#e9faff"&gt;5.&amp;nbsp;AI 质量专项报告自动分析生成｜得物技术&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;文 / 永乐&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;关注得物技术，每周更新技术干货&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;要是觉得文章对你有帮助的话，欢迎评论转发点赞～&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;&lt;span style="background-color:#ffffff"&gt;未经得物技术许可严禁转载，否则依法追究法律责任。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/5783135/blog/18690286</link>
      <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/18690286</guid>
      <pubDate>Tue, 02 Sep 2025 02:30:37 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>跨平台游戏引擎 Axmol-2.8.0 发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;em&gt;Axmol 2.8.0 版本是一个以错误修复和功能改进为主的次要 &lt;code&gt;LTS&lt;/code&gt; 长期支持版本，发布时间: 2025 年 9 月 1 日&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;🙏感谢所有对 axmol 项目的贡献者，包括财务赞助者：@scorewarrior、@peterkharitonov、@duong、@thienphuoc、@bingsoo、@asnagni、 @paulocoutinhox 以及 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsponsors%2Faxmolengine" target="_blank"&gt;历史赞助者&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;仓库地址&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;GitHub (官方): &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol" target="_blank"&gt;https://github.com/axmolengine/axmol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Gitee (镜像): &lt;a href="https://gitee.com/simdsoft/axmol"&gt;https://gitee.com/simdsoft/axmol&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;错误修复&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;修复 #2669：由于 DriverGL 初始化失败，Windows 11 上的 Windows UWP 无法运行，由 @halx99 修复。&lt;/li&gt; 
 &lt;li&gt;修复 #2655：在 Android 场景包含 ImGui 图层时多点触控不起作用，由 @halx99 修复。&lt;/li&gt; 
 &lt;li&gt;修复 #2674：Linux 上最终应用未链接 OpenSSL，由 @halx99 修复（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2675%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2675）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;修复从普通模式切换到 SDF 时标签渲染的 FontAtlas 错误，由 @halx99 修复（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2629%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2629）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;修复 wasm 中 Device::getTextureDataForText 处理空白文本时抛出异常，由 @halx99 修复。&lt;/li&gt; 
 &lt;li&gt;修复 Linux 上当 LabelType 为 STRING_TEXTURE 时标签颜色不正确的问题，由 @halx99 修复。&lt;/li&gt; 
 &lt;li&gt;修复错误的 fmt::format_to 用法，由 @halx99 修复（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2612%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2612）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;修复 genbindings.ps1 中 LLVM 版本截取逻辑问题，由 @halx99 修复。&lt;/li&gt; 
 &lt;li&gt;修复 Label 的 SDF 在字体缩放时的渲染问题及其他相关错误，由 @halx99 修复（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2625%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2625）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;修复项目包含 Swift 代码时的编译错误，由 @halx99 修复（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2632%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2632）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;修复 wasm Downloader 以错误权限打开文件（#2666），由 @AlexandreK38 修复（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2666%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2666）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;修复在 CMake 4.1 以 Windows 为目标时「找不到汇编器」的构建失败问题，由 @halx99 修复。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;功能改进&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;改进 Apple iOS 平台的渲染视图创建，由 @halx99 提交（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2600%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2600）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;将 GLView 重命名为 RenderView，由 @halx99 提交（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2602%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2602）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;在 2.6.0 版本发布说明中增加 emsdk 降级提示，作者 @halx99。&lt;/li&gt; 
 &lt;li&gt;改进 wasm 开发环境配置说明，作者 @halx99。&lt;/li&gt; 
 &lt;li&gt;将 &lt;code&gt;GLContextAttrs&lt;/code&gt; 重命名为 &lt;code&gt;GfxContextAttrs&lt;/code&gt;，作者 @halx99。&lt;/li&gt; 
 &lt;li&gt;更新 pull_request_template.md，作者 @aismann（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2609%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2609）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;改进 UTF-8 字符计数，移除 strlen 调用，作者 @halx99（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2614%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2614）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;改进 UTF-8 文本处理，作者 @halx99。&lt;/li&gt; 
 &lt;li&gt;移除 sprintf/snprintf 存根，作者 @halx99（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2615%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2615）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;改进 Android SDK 设置，Axmol 指定的 Android SDK 目录优先级：&lt;code&gt;android project local properties&lt;/code&gt; &amp;gt; &lt;code&gt;ANDROID_HOME&lt;/code&gt; &amp;gt; &lt;code&gt;ANDROID_SDK_ROOT&lt;/code&gt; &amp;gt; &lt;code&gt;axmol/tools/external/adt/sdk&lt;/code&gt;，作者 @halx99。&lt;/li&gt; 
 &lt;li&gt;更多头文件使用 pragma once，作者 @halx99（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2616%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2616）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;新增窗口尺寸限制设置支持，作者 @NgVThangBz（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2618%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2618）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;将 cpp-tests 中「Node: Label - New API」重命名为「Node: Label」，作者 @aismann（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2627%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2627）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;更新 ImGui 多视口提示信息，作者 @halx99。&lt;/li&gt; 
 &lt;li&gt;改进测试（统一 cpp-/lua- 测试中的菜单项命名），作者 @aismann（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2640%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2640）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;将 SIMD 可用性检测移入独立的 CMake 文件，作者 @j-jorge（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2642%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2642）。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;将 CMAKE_MSVC_DEBUG_INFORMATION_FORMAT 设为 Embedded，以解决 PDB 体积过大问题，作者 @halx99。&lt;/li&gt; 
 &lt;li&gt;改进 NuGet 包管理，作者 @halx99（PR：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fpull%2F2671%25EF%25BC%2589%25E3%2580%2582" target="_blank"&gt;https://github.com/axmolengine/axmol/pull/2671）。&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;SDK 和工具更新&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;AGP: 8.11.0 =&amp;gt; 8.11.1&lt;/li&gt; 
 &lt;li&gt;gradle: 8.14.3 =&amp;gt; 9.0.0&lt;/li&gt; 
 &lt;li&gt;cmake: 4.0.3 =&amp;gt; 4.1.1&lt;/li&gt; 
 &lt;li&gt;webview2 (msedge): 1.0.992.28 =&amp;gt; 1.0.3045.78&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;三方库更新&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;curl: 8.13.0 =&amp;gt; 8.15.0&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;发布文件 MD5 校验值&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;axmol-2.8.0.zip&lt;/code&gt;: 0100b8b0a73d25b0fb020590fc2e8a54&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;axmol-bs-2.8.0.zip&lt;/code&gt;: 114afdb56e2f507c831163e6cd6385e8&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;下载&lt;/h2&gt; 
&lt;h3&gt;GitHub&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;国内用户可尝试复制链接使用迅雷下载&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Freleases%2Fdownload%2Fv2.8.0%2Faxmol-2.8.0.zip" target="_blank"&gt;axmol-2.8.0.zip&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Freleases%2Fdownload%2Fv2.8.0%2Faxmol-bs-2.8.0.zip" target="_blank"&gt;axmol-bs-2.8.0.zip&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;百度网盘&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpan.baidu.com%2Fs%2F1-gWTCIqU8psNrgaLWNFqeg%3Fpwd%3Dj7p7" target="_blank"&gt;axmol-2.8.0.zip&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpan.baidu.com%2Fs%2F1fBdSZZuctwLsEmJH4QgLMg%3Fpwd%3D3bbk" target="_blank"&gt;axmol-bs-2.8.0.zip&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;SourceForge&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsourceforge.net%2Fprojects%2Faxmol-engine.mirror%2Ffiles%2Fv2.8.0%2F" target="_blank"&gt;Axmol-2.8.0&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;本版亮点详解&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;NuGet 包管理优化&lt;/strong&gt;&lt;br&gt; 本版本对 NuGet 包管理进行了改进：Axmol 依赖的 Microsoft Edge WebView2 和 CppWinRT 包将在 CMake 配置阶段统一下载至 &lt;code&gt;&amp;lt;AX_ROOT&amp;gt;/cache/packages&lt;/code&gt; 目录。&lt;br&gt; 这样，即使删除 &lt;code&gt;build&lt;/code&gt; 目录，这些依赖包也无需重新下载。此前版本会将依赖下载到 &lt;code&gt;CMAKE_BINARY_DIR&lt;/code&gt;，导致清理构建目录后需重复下载。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Axmol 项目最新动态&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;分支管理优化&lt;/strong&gt;&lt;br&gt; 为了让开发者更直观地选择适合生产环境的分支，仓库分支结构进行了调整：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;原 &lt;code&gt;dev&lt;/code&gt; 分支更名为 &lt;code&gt;release/2.x&lt;/code&gt;，作为 &lt;strong&gt;2.x LTS&lt;/strong&gt; 稳定维护与发布分支&lt;/li&gt; 
   &lt;li&gt;原 &lt;code&gt;wip-v3&lt;/code&gt; 分支更名为 &lt;code&gt;dev/v3&lt;/code&gt;，并设为默认开发分支（尚未正式发布，虽处于开发阶段，但依托 CI 持续集成，确保构建与运行始终可用）&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;目录结构优化（dev/v3）&lt;/strong&gt;&lt;br&gt; 将引擎核心代码目录 &lt;code&gt;core&lt;/code&gt; 重命名为 &lt;code&gt;axmol&lt;/code&gt;，并统一替换引擎代码中的 include 语句为 &lt;code&gt;#include "axmol/xxx/xxx.h"&lt;/code&gt;，以简化头文件引用路径。&lt;br&gt; 此调整不仅使代码结构更清晰，还能更方便地与其他代码库协同使用，减少头文件命名冲突的风险。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;渲染后端重构（dev/v3）&lt;/strong&gt;&lt;br&gt; &lt;code&gt;dev/v3&lt;/code&gt; 分支对渲染后端进行了重构，新增 &lt;strong&gt;D3D11 渲染支持&lt;/strong&gt;。在 Windows 平台上，相比原 GLES API，性能提升约 &lt;strong&gt;13.6%&lt;/strong&gt;。&lt;br&gt; 同时，&lt;code&gt;axmol/renderer/backend&lt;/code&gt; 目录已重命名并迁移至 &lt;code&gt;axmol/rhi&lt;/code&gt;，详细说明可参考 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Faxmolengine%2Faxmol%2Fwiki%2FAbout-RHI-in-axmol-v3" target="_blank"&gt;About-RHI-in-axmol-v3&lt;/a&gt;。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;clang-format 增强（dev/v3）&lt;/strong&gt;&lt;br&gt; 为保持引擎核心代码格式统一与规范，增强并完善了 &lt;code&gt;clang-format&lt;/code&gt; Lint CI，对每个 PR 自动检查代码格式是否符合规范。&lt;br&gt; 同时新增 &lt;code&gt;/clang-format&lt;/code&gt; 机器人评论指令：在 PR 评论中发送该指令，机器人将自动修正代码格式并推送至 PR 原分支（需确保提交 PR 时勾选「允许维护者编辑」选项）。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369794</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369794</guid>
      <pubDate>Tue, 02 Sep 2025 02:25:41 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>我国智能算力规模达 788 百亿亿次/秒</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;人民日报北京 9 月 1 日电 &amp;nbsp;（记者刘温馨、郑洋洋）截至今年 6 月底，我国在用算力中心机架总规模达 1085 万标准机架，智能算力规模达 788 百亿亿次/秒 (EFLOPS)；存力规模超过 1680 艾字节 (EB)，相比 2023 年增长约 40%；已发布 1509 个大模型，在全球位居前列。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="334" src="https://oscimg.oschina.net/oscnet/up-f7c4902ec7cb7f48c81c629fb38170914e5.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;近日，中国算力平台完成山西、辽宁、上海、江苏、浙江、山东、河南、青海、宁夏、新疆 10 个省份分平台接入工作，实现「平台、主体、资源、生态、场景」全面贯通。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;作为国家级综合性算力服务平台，中国算力平台集「供、需、服」于一体，可实现不同系统、平台和工具之间的兼容性和互操作性。截至 7 月底，平台运营层注册企业用户超 1000 家，入驻算力服务商逾 100 家，上架优质算力产品 110 余项，接入主流基础大模型和垂类模型 90 余个，累计沉淀数十亿条算力监测大数据。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369793</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369793</guid>
      <pubDate>Tue, 02 Sep 2025 02:23:37 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>智谱上线 Claude Code 专属包月套餐，月费低至 20 元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;智谱&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FJKSKSrjw3aqUODEN_LzRMg" target="_blank"&gt;宣布&lt;/a&gt;，自 9 月 1 日起推出 Claude Code 专属「GLM Coding Plan」限时套餐，月费低至 20 元。&lt;/p&gt; 
&lt;p&gt;该套餐适用于智谱最新旗舰模型 GLM-4.5 及 GLM-4.5-Air。用户可通过扫描活动海报二维码，或者登录智谱开放平台&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbigmodel.cn%2Fclaude-code" target="_blank"&gt;bigmodel.cn&lt;/a&gt;，直接购买并获取详细使用攻略。&lt;/p&gt; 
&lt;p&gt;首期主推 Claude Code，未来将拓展到更多 Coding 工具。目前，GLM-4.5 已接入包括 Claude Code、Cline、Gemini CLI、Grok CLI、CodeGeeX、Kilo Code、Roo Code、Trae 在内的多款主流编程工具，全面支持日常开发流程。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0902/101910_Nw8D_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369792</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369792</guid>
      <pubDate>Tue, 02 Sep 2025 02:20:37 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>腾讯开源 Hunyuan-MT-7B 翻译模型</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;腾讯&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FrKcf7jXAYlCKcwan0o756Q" target="_blank"&gt;宣布&lt;/a&gt;开源在国际机器翻译比赛拿下 30 个第 1 名的翻译模型 Hunyuan-MT-7B，除了中文、英语、日语等常见语种，也包含捷克语、马拉地语、爱沙尼亚语、冰岛语等小语种。&lt;/p&gt; 
&lt;p&gt;Hunyuan-MT-7B 总参数量仅 7B，支持 33 个语种、5 种民汉语言/方言互译，是一个能力全面的轻量级翻译模型。&lt;/p&gt; 
&lt;p&gt;&lt;img height="293" src="https://oscimg.oschina.net/oscnet/up-dfbb59995d2db0c828e006ce4d0041931a0.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;同时开源的还有一个翻译集成模型 Hunyuan-MT-Chimera-7B （奇美拉），是业界首个翻译集成模型，它能够根据原文和多个翻译模型给出的不同内容，再生成一个更优的翻译结果，不仅原生支持 Hunyuan-MT-7B，也支持接入 deepseek 等模型，对于一些有专业翻译需求的用户和场景，可以提供更加准确的回复。&lt;/p&gt; 
&lt;p&gt;公告称，在业界常用的翻译能力测评数据集 Flores200 上，腾讯混元 Hunyuan-MT-7B 模型也有卓越的效果表现，明显领先于同尺寸模型，与超大尺寸模型效果对比也不逊色。&lt;/p&gt; 
&lt;p&gt;取得全面领先的成绩，离不开技术上的全面突破，针对翻译场景，腾讯混元提出了一个完整的翻译模型训练范式，覆盖从预训练、到 CPT 再到监督调参、翻译强化和集成强化全链条，使得模型的翻译效果达到业界最优。&lt;/p&gt; 
&lt;p&gt;&lt;img height="188" src="https://oscimg.oschina.net/oscnet/up-66e18aed212fea1e14be8e0b31d401ea4a1.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Hunyuan-MT-7B 的特点在于仅用少量的参数，就达到甚至超过了更大规模模型的效果，这也为模型的应用带来了众多优势。&lt;/p&gt; 
&lt;p&gt;首先是计算效率，7B 模型的推理速度明显快于大型模型，在相同硬件条件下能够处理更多的翻译请求，并且，基于腾讯自研的 AngelSlim 大模型压缩工具对 Hunyuan-MT-7B 进行 FP8 量化压缩，推理性能进一步提升 30%。&lt;/p&gt; 
&lt;p&gt;其次是部署友好性，Hunyuan-MT-7B 能够在更多样化的硬件环境中部署，从高端服务器到边缘设备都能良好运行，并且模型的部署成本、运行成本和维护成本都相对更低，在保证翻译质量的前提下，为企业和开发者提供了更具吸引力的解决方案。&lt;/p&gt; 
&lt;p&gt;目前，腾讯混元翻译模型已经接入腾讯多个业务，包括腾讯会议、企业微信、QQ 浏览器、翻译君翻译、腾讯海外客服翻译等，助力产品体验提升。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369791</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369791</guid>
      <pubDate>Tue, 02 Sep 2025 02:17:37 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>DeepSeek 公开模型原理与训练方法说明</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;DeepSeek 发布官方说明，披露了其大语言模型的训练原理、数据来源等信息。DeepSeek 表示其线上服务基于深度神经网络大模型，采用「预训练—优化训练」两阶段流程。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0902/100812_xXNj_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在预训练阶段，模型通过大规模自监督学习获取通用语言能力；在优化训练阶段，则使用有监督微调（SFT）或强化学习（RL）对模型进行任务适配；最终部署的模型以自回归方式实时生成文本，而非简单的信息检索。&lt;/p&gt; 
&lt;p&gt;数据来源方面，预训练语料由互联网公开信息和第三方合作数据组成，不主动收集个人信息。优化训练阶段的数据由研究团队自建问答对，少量样本可能源自用户输入，但均经过了去标识化、加密及匿名化处理，并为用户提供了退出机制。&lt;/p&gt; 
&lt;p&gt;完整内容查看：&lt;em&gt;https://cdn.deepseek.com/policies/zh-CN/model-algorithm-disclosure.html&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369790</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369790</guid>
      <pubDate>Tue, 02 Sep 2025 02:09:37 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>🚀 AI + 低代码引擎发布 0.13.15: 全面支持 vue-i18n 国际化，完善企业级应用开发能力</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#3c3c43; margin-left:0; margin-right:0; text-align:start"&gt;领先的开源 AI 低代码引擎&lt;strong&gt;VTJ.PRO&lt;/strong&gt;正式发布&lt;strong&gt;v0.13.15&lt;/strong&gt;版本。该版本重点推出了对&lt;strong&gt;vue-i18n&lt;/strong&gt;国际化的深度集成支持，标志着 VTJ.PRO 已完成对企业级应用核心能力的全面构建。继先前版本支持应用&lt;strong&gt;全局配置&lt;/strong&gt;、&lt;strong&gt;Swagger API 一键导入&lt;/strong&gt;等功能后，VTJ.PRO 现已具备让开发者快速构建现代化、标准化、国际化企业应用的所有关键要素。&lt;/p&gt; 
&lt;p style="color:#3c3c43; margin-left:0; margin-right:0; text-align:start"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet//c947b7a3962c53110b6db614f002ca41.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;完善企业级开发「最后一公里」&lt;/h2&gt; 
&lt;p style="color:#3c3c43; margin-left:0; margin-right:0; text-align:start"&gt;在企业数字化转型浪潮中，应用开发不仅要求高效快速，更需要符合规范、易于维护并支持全球业务。VTJ.PRO 自诞生之初便致力于为开发者提供高性能、高自由度的低代码开发体验。本次更新可视为其迈向&lt;strong&gt;成熟企业级解决方案&lt;/strong&gt;的关键一步。&lt;/p&gt; 
&lt;p style="color:#3c3c43; margin-left:0; margin-right:0; text-align:start"&gt;最新支持的 vue-i18n 国际化功能，允许开发者在可视化设计器中轻松管理多语言词条，绑定动态文本，并实现一键切换语言环境，极大地简化了多语言应用的开发流程。&lt;/p&gt; 
&lt;h2&gt;本次版本核心更新亮点&lt;/h2&gt; 
&lt;h3&gt;🌍 内置国际化（i18n）支持&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;可视化词条管理：&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;无需手动编写语言文件，在设计器中即可轻松完成词条的添加、翻译和维护。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;无缝组件集成：&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;所有 VTJ.PRO 组件均支持国际化属性绑定，UI 与逻辑彻底分离。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;实时预览切换：&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;在设计阶段即可实时预览不同语言下的效果，极大提升开发调试效率。=&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;符合开发规范：&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;完全基于社区标准的 vue-i18n 库构建，开发者原有经验和习惯可无缝迁移。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🔗 此前版本的企业级功能积淀&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;应用全局配置：&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;支持统一设置主题、网络请求、权限等全局参数，保障应用风格和行为的一致性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Swagger API 导入：&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;可一键导入 Swagger 接口文档，自动生成 TypeScript 类型声明和调用代码，极大提升了前后端协作效率。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;企业级权限与控制：&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;提供精细化的路由守衞和功能权限控制，满足企业内部系统的安全要求。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;为开发者创造真正价值&lt;/h2&gt; 
&lt;p style="color:#3c3c43; margin-left:0; margin-right:0; text-align:start"&gt;VTJ.PRO 始终秉持「&lt;strong&gt;降低复杂度，不降低自由度&lt;/strong&gt;」的理念。它不是将开发者禁锢在封闭的系统中，而是通过提供一系列开箱即用的高端能力（如基于 Vite + Vue 3 + TypeScript 的现代开发栈），将开发者从繁琐的配置和重复劳动中解放出来，让其能更专注于业务逻辑和创新。&lt;/p&gt; 
&lt;p style="color:#3c3c43; margin-left:0; margin-right:0; text-align:start"&gt;「v0.13.15 版本的发布，对 VTJ.PRO 而言是一个里程碑。」项目核心贡献者表示，「&lt;strong&gt;国际化是许多成熟产品走向世界的必经之路&lt;/strong&gt;。现在，从基础的项目搭建、全局配置，到接口联调、权限管理，再到最后的国际化，VTJ.PRO 已经为企业级应用开发提供了一条完整、流畅的高效生产线。&lt;/p&gt; 
&lt;h2&gt;未来展望&lt;/h2&gt; 
&lt;p style="color:#3c3c43; margin-left:0; margin-right:0; text-align:start"&gt;随着企业级开发能力的完善，VTJ.PRO 团队接下来的重点将转向进一步提升&lt;strong&gt;AI 辅助开发&lt;/strong&gt;的体验，探索通过自然语言生成组件、业务逻辑甚至完整页面的可能性，持续践行其作为「AI 低代码引擎」的愿景。&lt;br&gt; &lt;img alt="" src="https://oscimg.oschina.net/oscnet//42bb2f3b02fe382d897f4263a6e72838.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;体验与了解更多&lt;/h2&gt; 
&lt;p style="color:#3c3c43; margin-left:0; margin-right:0; text-align:start"&gt;VTJ.PRO 是一个开源项目，开发者可以免费使用并参与贡献。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;立即在线体验：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvtj.pro%2F" target="_blank"&gt;https://vtj.pro&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Gitee 开源地址：&lt;a href="https://gitee.com/newgateway/vtj" target="_blank"&gt;https://gitee.com/newgateway/vtj&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;关于 VTJ.PRO：&lt;/h3&gt; 
&lt;p style="color:#3c3c43; margin-left:0; margin-right:0; text-align:start"&gt;VTJ.PRO 是一款开源 AI 低代码引擎，基于 Vite + Vue 3 + TypeScript 技术栈构建。它通过可视化设计器与底层代码的双向驱动，帮助开发者快速构建 Web、H5、UniApp 等多端企业级应用，在金融、电商、中后台管理系统等领域有广泛应用前景。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369771</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369771</guid>
      <pubDate>Mon, 01 Sep 2025 00:38:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>🚀 Xinference v1.9.1 强势来袭！Qwen-Image 系列重大升级！！！速览！！！</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Xorbits Inference（Xinference）是一个，性能强大且功能全面的，分布式，推理框架。可用于大语言模型（LLM），语音识别模型，多模态模型等各种模型的推理。通过 Xorbits Inference，你可以轻松地，一键部署你自己的模型或内置的前沿开源模型 - &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxorbitsai%2Finference" target="_blank"&gt;https://github.com/xorbitsai/inference&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;无论你是研究者，开发者，或是数据科学家，都可以通过 Xorbits Inference 与最前沿的 AI 模型，发掘更多可能。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Xinference 的功能和亮点有：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🌟 模型推理，轻而易举：大语言模型，语音识别模型，多模态模型的部署流程被大大简化。一个命令即可完成模型的部署工作。&lt;/li&gt; 
 &lt;li&gt;⚡️ 前沿模型，应有尽有：框架内置众多中英文的前沿大语言模型，包括 baichuan，chatglm2 等，一键即可体验！内置模型列表还在快速更新中！&lt;/li&gt; 
 &lt;li&gt;🖥 异构硬件，快如闪电：通过 ggml，同时使用你的 GPU 与 CPU 进行推理，降低延迟，提高吞吐！&lt;/li&gt; 
 &lt;li&gt;⚙️ 接口调用，灵活多样：提供多种使用模型的接口，包括 OpenAI 兼容的 RESTful API（包括 Function Calling），RPC，命令行，web UI 等等。方便模型的管理与交互。&lt;/li&gt; 
 &lt;li&gt;🌐 集群计算，分布协同：支持分布式部署，通过内置的资源调度器，让不同大小的模型按需调度到不同机器，充分使用集群资源。&lt;/li&gt; 
 &lt;li&gt;🔌 开放生态，无缝对接：与流行的三方库无缝对接，包括 LangChain， LlamaIndex， Dify，以及 Chatbox。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;🚀 Xinference v1.9.1 更新日志&lt;/p&gt; 
&lt;p&gt;✅ 本次亮点&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;🖼️ Qwen-Image 系列重大升级&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Qwen-Image：新增，文生图 / 图生图 / 局部重绘（inpainting）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Qwen-Image-Edit：增强图片编辑体验&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Lightning LoRA 加速支持（&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Finference.readthedocs.io%2Fzh-cn%2Flatest%2Fmodels%2Fmodel_abilities%2Fimage.html%23lightning-lora-support%25EF%25BC%2589" target="_blank"&gt;https://inference.readthedocs.io/zh-cn/latest/models/model_abilities/image.html#lightning-lora-support）&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持 4 步或 8 步生图&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在 H20 上，生图速度从 35 秒降到 3 秒&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;模型性能基本保持不变&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;🧠 新增前沿模型支持&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Wan 2.2&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Seed-OSS-36B&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;DeepSeek-V3.1 量化与工具调用&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;🌐 社区版更新&lt;/p&gt; 
&lt;p&gt;📦 安装方式&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;pip 安装：pip install 'xinference==1.9.1'&lt;/li&gt; 
 &lt;li&gt;Docker 使用：拉取最新版镜像，或在容器中使用 pip 更新&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;🆕 新模型支持&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Qwen-Image-Edit&lt;/li&gt; 
 &lt;li&gt;Wan 2.2&lt;/li&gt; 
 &lt;li&gt;Qwen-Image-Lightning&lt;/li&gt; 
 &lt;li&gt;Seed-OSS-36B&lt;/li&gt; 
 &lt;li&gt;DeepSeek-V3.1 Quantized&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;✨ 新特性&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Qwen-Image：支持文生图 / 图生图 / inpainting&lt;/li&gt; 
 &lt;li&gt;Qwen-Image 与 Qwen-Image-Edit：支持 Lightning LoRA 加速&lt;/li&gt; 
 &lt;li&gt;UI：图像模型支持 gpu_count 配置&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;🛠 功能增强&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;音频模型新增零样本 &amp;amp; 声音克隆能力&lt;/li&gt; 
 &lt;li&gt;Qwen3 Reranker 支持 vLLM 模板&lt;/li&gt; 
 &lt;li&gt;llama.cpp 支持 chat_template_kwargs&lt;/li&gt; 
 &lt;li&gt;cosyvoice2 依赖升级&lt;/li&gt; 
 &lt;li&gt;兼容 xllamacpp 0.2.0&lt;/li&gt; 
 &lt;li&gt;清理 Docker 构建遗留缓存&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;🐞 Bug 修复&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;当 GPU 计算能力 &amp;lt; 8.0 时禁用 flash_attention&lt;/li&gt; 
 &lt;li&gt;修复 rerank 模型创建问题&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;📚 文档更新&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;更新自定义模型说明&lt;/li&gt; 
 &lt;li&gt;新增多模态文档中图片数量限制说明&lt;/li&gt; 
 &lt;li&gt;更新模型列表与 README&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;🏢 企业版更新&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;本次版本企业版日常，稳定性与 Bug 修复优化。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;我们感谢每一位参与的社区伙伴对 Xinference 的帮助和支持，也欢迎更多使用者和开发者参与体验和使用 Xinference。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;欢迎您在 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxorbitsai%2Finference" target="_blank"&gt;https://github.com/xorbitsai/inference&lt;/a&gt; 给我们一个，星标，这样你就可以在 GitHub 上及时收到每个新版本的通知。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369751/xinference-1-9-1-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369751/xinference-1-9-1-released</guid>
      <pubDate>Sun, 31 Aug 2025 15:04:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>飞致云开源社区月度动态报告（2025 年 8 月）</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;自 2023 年 6 月起，中国领先的开源软件公司飞致云以月度为单位发布《飞致云开源社区月度动态报告》，旨在向广大社区用户同步飞致云旗下系列开源软件的发展情况，以及当月主要的产品新版本发布、社区运营成果等相关信息。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;飞致云开源运营数据概览（2025 年 8 月）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;&lt;span style="color:#3e3e3e"&gt;2025 年 8 月飞致云开源软件运营数据概览（统计时间为 2025.8.1～2025.8.29）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;img alt="" height="648" src="https://oscimg.oschina.net/oscnet/up-a8b0c9bef3a9289564d711fa8af1360d845.png" width="1070" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;strong&gt;&lt;span style="color:#3370ff"&gt;2025 年 8 月产品发布事件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ SQLBot 智能问数系统&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;2025 年 8 月 7 日，DataEase 开源项目组发布 SQLBot 开源项目（&lt;/span&gt;&lt;em&gt;&lt;span style="color:#010101"&gt;github.com/dataease/SQLBot&lt;/span&gt;&lt;/em&gt;&lt;span style="color:#010101"&gt;）。SQLBot 是一款基于大语言模型（Large Language Model，LLM）和 RAG（Retrieval Augmented Generation，检索增强生成）的智能问数系统。借助 SQLBot，用户可以实现数据的即问即答，快速提炼获取所需的数据信息及可视化图表，并且支持进一步的智能数据分析。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-a6f1da9e1e9331e8fdb267c8384b41b0bfd.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ DataEase 开源 BI 工具&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;2025 年 8 月 19 日，人人可用的开源 BI 工具 DataEase 正式发布 v2.10.12 LTS 版本。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;这一版本的功能变动包括：图表方面，图表提示框的背景颜色支持配置透明度，桑基图提示信息中支持配置总数占比显示项，线面图的纵轴轴值自动分档时可以根据实际使用的数据自动计算最小刻度，堆叠条形图/柱状图可以设置图例排序，基础条形图/柱状图支持点击阴影部分执行下钻、联动、跳转操作；查询组件方面，下拉组件 Tag 支持自定义背景颜色；仪表板/数据大屏方面，图片组支持设置刷新频率；数据源方面，API 数据源接口参数可以调用已创建的接口参数。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;X-Pack 增强包的功能变动包括：同步管理方面，增量同步设置支持指定正负偏移量，新增支持 CTE（Common Table Expression，通用表表达式）查询；数据填报方面，批量上传的内容增加单条记录的提交信息；外观设置方面，增加是否显示 Slogan 的配置项。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ MaxKB 开源企业级智能体平台&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;2025 年 8 月 7 日，MaxKB 开源企业级智能体平台正式发布 v2.0.2 版本。在 MaxKB v2.0.2 版本中，社区版方面，高级编排应用新增会话变量功能，适用于用户在多次对话中进行数据暂存、逻辑判断的场景，能够有效增强系统的逻辑处理能力。X-Pack 增强包方面，在对话用户登录时，MaxKB 新增企业微信、钉钉、飞书等第三方平台扫码登录支持；在系统资源管理中，新增支持系统管理员对系统内所有工作空间的应用、知识库、工具、模型等资源进行统一管理。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;2025 年 8 月 21 日，MaxKB 开源企业级智能体平台正式发布 v1.10.10 LTS 版本。这一版本在知识库方面，针对数据量较大的复杂场景，提升了知识库检索性能；问答页面方面，支持用户直接发送文件或者图片进行提问。此外，MaxKB 开源项目组还进行了一些问题修复的工作。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ JumpServer 开源堡垒机&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;2025 年 8 月 21 日，广受欢迎的开源堡垒机 JumpServer 发布了 v4.10.5 LTS 版本。在这一版本中，JumpServer 的新增功能包括添加报表以支持可视化数据分析和导出、改进命令记录和过滤功能以及支持 Proxmox 云主机同步等，另外，JumpServer 项目组还进行了 3 项功能优化和问题修复工作。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;2025 年 8 月 28 日，JumpServer 开源堡垒机正式发布 v3.10.19 LTS 版本。在这一版本中，Lion 组件在连接 Windows 资产时新增会话分享功能，JumpServer 新增用户与授权规则的默认过期时间设置，同时优化了授权规则、端点规则等功能，提升了运维管理的便捷性。此外，这一版本还增强了 Ansible 任务超时设置和 SSO 用户登录的 MFA 校验机制，进一步强化了系统的安全性与稳定性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ 1Panel 开源面板&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;2025 年 8 月，现代化、开源的 Linux 服务器运维管理面板 1Panel 持续迭代，发布了多个新版本。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;在网站管理方面，1Panel 新增 HTTPS 防窜站功能；计划任务方面，支持任务一键导入/导出，计划任务报告页新增日志追踪和下载功能，同时还新增了任务分组功能；SSH 管理方面，1Panel 增强了 SSH 密钥管理功能，进一步提升远程运维的安全性和易用性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#010101"&gt;此外，1Panel 开源项目组还完成了超过 60 项功能优化与问题修复，持续提升产品的稳定性和使用体验。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:center"&gt;&lt;strong&gt;&lt;span style="color:#3370ff"&gt;其他重要事件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ MaxKB 在企业环境中实现 AI 落地的具体场景盘点&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;目前，「DeepSeek+MaxKB」的组合正在被包括高等教育院校和中小学教育机构在内的用户群体所深度使用。在教育行业，MaxKB 拥有广泛的用户基础，并且持续获得认可。近期，MaxKB 新增的教育行业用户包括：浙江师范大学、上海应用技术大学、广西外国语学院、广东医科大学、张家口职业技术学院机电工程学院、天津商业大学、河南医药健康技师学院、湖南大学非洲研究院和常州信息职业技术学院。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;高等院校主要将 MaxKB 用于在本地部署的大模型之上构建 AI 助手或智能体，使用场景包括行政办公、校园服务、教学科研、技能培训、就业指导等，与已有的统一身份认证体系进行对接，面向校内师生提供服务。在此基础上，MaxKB 开始被一些院校应用在国际化办学与合作领域。同时，MaxKB 正在被越来越多的高校及中小学教师用于教学科研，有多篇教研文章公开发表。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ 1Panel 漏洞通知&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;2025 年 8 月 1 日，1Panel 开源项目组发布 CVE 编号为 CVE-2025-54424 的漏洞通知及修复方案。请用户尽快将 1Panel 升级至 v2.0.6 及以后的版本。1Panel V1 版本不受影响。&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#00355d"&gt;■ 1Panel 应用商店下载趋势及下载排名情况&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;为了方便广大用户快捷安装部署相关软件应用，1Panel 特别开通应用商店，精选各类高质量的开源工具和应用软件，为用户的应用安装与升级操作提供便利。目前，1Panel 应用商店已经上架了超过 190 款精品软件并且定期更新维护，基本涵盖了大部分用户的装机需求。&lt;strong&gt;&lt;span style="color:#ff8124"&gt;2025 年 8 月，1Panel 应用商店软件下载量达到 229,212 次。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;img alt="" height="938" src="https://oscimg.oschina.net/oscnet/up-334a20f906cd0fceeedc245cf7870c724a5.png" width="1380" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;▲图 1 1Panel 应用商店月下载总量统计&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;img alt="" height="1008" src="https://oscimg.oschina.net/oscnet/up-2281427408194ff8bc02b05441ac04ac373.png" width="1454" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span&gt;▲图 2 1Panel 应用商店软件下载排名 Top 20（2025 年 8 月）&lt;/span&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4736111/blog/18690227</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4736111/blog/18690227</guid>
      <pubDate>Sun, 31 Aug 2025 11:34:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>「世界最轻量网站」阿部宽官网将采用 HTTPS</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;以 「网页加载速度极快」 闻名的日本演员阿部宽官方网站，近日因一则技术变更预告，意外在社交平台引发广泛讨论。&lt;/p&gt; 
&lt;p&gt;这个被网友亲切称作 「阿部宽的首页」 的网站，设计极度简洁复古，图片稀少，风格宛如回溯至 1990 年代网络初期，也正因如此，它在任何网络环境下都能瞬间载入，还被誉为 「世界最轻量的网站」。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1856" src="https://static.oschina.net/uploads/space/2025/0901/191845_J1jw_2720166.png" width="3360" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;http://abehiroshi.la.coocan.jp/&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;不过，支撑该网站的托管商 Nifty LaCoocan 日前宣布，为强化安全防护，将从今年 10 月 1 日起支持 https 加密连接，且预计在 2026 年 7 月后全面强制转换。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;这意味着，未来所有访问旧版 「http://」 网址的请求，都将自动跳转至新的 「https://」 页面。 &amp;nbsp;尽管 https 化能显著提升网页浏览的安全性，却也让网友们既热议又惋惜。过去，不少人会利用这个仍采用 http 协议的网站，测试老旧电脑、PDA，或是 PlayStation 2、3DS 等不支持 https 的游戏机能否正常连网。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;如今网站即将切换至 https，这个独特的 「网络联机测试页」 也将正式退出历史舞台。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;消息传开后，网络上迅速涌现大量讨论。有网友感慨：「没想到阿部宽的首页也要跟上时代浪潮了，旧设备用户要哭了」。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;与此同时，这次事件也让许多人首次认识到这个特别的网站，有人忍不住赞叹：「居然还有纯 HTML 打造的网站，速度是真的快」「这种简约风格放在现在看，反而有种新潮感」。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369726</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369726</guid>
      <pubDate>Sun, 31 Aug 2025 11:21:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>开源直播与录制工具 OBS Studio 32.0.0 Beta 1 发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;开源直播与录制工具 OBS Studio 32.0.0 发布了首个 Beta 版本。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-10826241a616eb32ba0bb33e2d41eab5851.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;主要更新内容如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;基础插件管理器：&lt;/strong&gt;引入了一个内建的插件管理器，简化了插件的安装、更新与管理流程，避免以往需手动复制文件的繁琐操作。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;可选自动崩溃日志上传（仅 Windows/macOS）：&lt;/strong&gt;用户可选择自动将崩溃日志上传，帮助开发团队更快识别并修复问题。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;NVIDIA RTX 新音频和视觉功能&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;语音活动检测（VAD）优化 RTX 噪声抑制&lt;/strong&gt;，仅在检测到语音时才启用，从而提升通话和直播的音质。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;RTX 效果优化&lt;/strong&gt;：提升整体性能与效果表现。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;背景移除中的移除椅子功能&lt;/strong&gt;：在使用 RTX 背景移除时自动去除椅子，实现更干净的背景效果。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Hybrid MOV 容器支持&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;在 macOS 上支持 &lt;strong&gt;ProRes&lt;/strong&gt; 视频编码。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;所有平台统一支持 &lt;strong&gt;HEVC / H.264 视频编码&lt;/strong&gt;，以及 &lt;strong&gt;PCM 音频&lt;/strong&gt;，增强跨平台视频处理的兼容性&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;其他改进与修复（摘选）&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;休止加载为未来版本构建的插件，以避免兼容性问题。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;引入自定义 OBS widgets，为未来更大的 UI 更新做铺垫。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;针对 Linux 的 PipeWire 视频捕获格式选择进行了改进。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;AWS Metal 渲染器支持的准备。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;优化了音频去重复逻辑，避免嵌套场景或多个画布中音频重复播放；还防止「监视与输出」模式中因捕获监视设备而导致的重复音频输出。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;更新 AMD 编码器默认设置，提升编码质量；改进 Hybrid MP4/MOV 中章节标记的准确性；修复 macOS 上编辑字段光标问题；增强 PipeWire 视频捕获格式处理。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;包含多项 Bug 修复，包括 macOS 窗口操作崩溃、SRT 错误 URL 导致崩溃、多视图显示空白、焦点设置问题、滚动条可见性、HEVC 帧优先级设置错误、编码延迟、Qt 旧版兼容问题等。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下载地址：&lt;em&gt;https://github.com/obsproject/obs-studio/releases/tag/32.0.0-beta1&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369722</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369722</guid>
      <pubDate>Sun, 31 Aug 2025 11:02:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>GTK 4.20 发布，跨平台开源图形工具包</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;GTK 4.20 已发布，新版本在 Wayland、渲染器兼容性、跨平台支持、无障碍以及视频与图形处理方面进行了多项重大更新，确保 GTK 在 Linux、macOS、Android 与 Windows 上拥有更稳定、一致的用户与开发体验，同时为即将上线的 GNOME 49 桌面环境提供技术基础。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;GTK (GIMP Toolkit) 是一套跨多种平台的图形工具包，最初为 GIMP 而写，GIMP 是指 GNU 图像处理程序 (GNU Image Manipulation Program)，GIMP 拥有几乎所有图象处理所需的功能，号称 Linux 下的 Photoshop。GTK 后来发展成为 Linux 下开发图形界面应用的主流开发工具。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Wayland 支持提升&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;增加对 &lt;strong&gt;wl_seat v10 协议&lt;/strong&gt;的支持。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持 &lt;strong&gt;tablet protocol v2&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;引入 &lt;strong&gt;server-side 键重复&lt;/strong&gt;机制。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;改善自然滚动处理等功能。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;跨平台增强&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vulkan 渲染器&lt;/strong&gt;在 macOS 上得到修复与优化，并增强整体 Vulkan 渲染代码的稳定性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;macOS 平台新增 &lt;strong&gt;窗口贴靠（window snapping）&lt;/strong&gt; 和改进的 &lt;strong&gt;窗口菜单支持&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;功能与渲染改进&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;视频播放组件新增 &lt;strong&gt;YUV 格式支持&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;增加 &lt;strong&gt;会话管理 portal&lt;/strong&gt; 支持，强化跨桌面环境一致性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;改善符号图标（symbolic icons）的渲染质量。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持 &lt;strong&gt;CSS 媒体查询&lt;/strong&gt;，让主题在色彩方案与对比度上具备更细致的响应式表现。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在 OpenGL 渲染路径中增加对，多平面纹理（multi-plane textures）的支持。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;继续推进无障碍访问（accessibility）方面的改进，如对输入框、文件选择器等组件的辅助功能增强。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;与 GNOME 生态系统同步&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GTK 4.20 正式作为稳定版本发布，且及时在 GNOME 49 发布周期前推出，可预见将被 GNOME 49 默认采用。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情查看&amp;nbsp;&lt;em&gt;https://gitlab.gnome.org/GNOME/gtk/-/blob/main/NEWS&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369720</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369720</guid>
      <pubDate>Sun, 31 Aug 2025 10:47:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>用 deepin 的人，也是吃上好的了</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;p&gt;deepin 搞了个 AI 助手，叫 UOS AI。&lt;/p&gt; 
&lt;p&gt;应该没有人不知道 deepin （&lt;span&gt;&lt;span&gt;深度操作系统&lt;/span&gt;&lt;/span&gt;）吧？&lt;span&gt;&lt;span&gt;它是中国第一个具备国际影响力的&lt;span&gt;&amp;nbsp;Linux&amp;nbsp;&lt;/span&gt;发行版本，支持全球&lt;span&gt;33&lt;/span&gt;种语言，在国际&lt;span&gt;&amp;nbsp;Linux&lt;/span&gt;&amp;nbsp;发行版排行榜中稳居前十。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;你是不是也跟我一样好奇，搞操作系统的，为什么也要来搞 AI 助手？&lt;/p&gt; 
&lt;p&gt;跟其他大部分只会聊天、写文章，最多生成 PPT 文件相比的 AI 小助手相比，UOS AI&amp;nbsp;有什么不一样，是不是会有更多系统级别的能力？&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;答案就是当然有 ！这就是搞操作系统的人搞 AI 的优势了。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;目前大部分的 AI 助手，能回答问题，写文章、生成图片，但它动不了我们的电脑——想整理文件、调个设置、装个软件，还是得自己动手，它始终活聊天框里。&lt;/p&gt; 
&lt;p&gt;而 UOS AI，像是这个电脑系统的大管家。它长在了系统里，拥有其他 AI 助手所没有的权限，你动动嘴，它就能直接动手帮你操作。&lt;/p&gt; 
&lt;p&gt;比如，你想批量整理系统文件，只需打开 UOS AI 助手，跟它说「把项目资料文件夹的所有文件，命名为 UOS 项目资料，按数字顺序排好」，UOS MCP 立刻识别文件，几秒钟就能完成批量重命名。&lt;/p&gt; 
&lt;p&gt;或者你说「把屏幕调亮点儿，再帮我连一下蓝牙音箱」，它不用教、不用你动手，几秒钟就能直接帮你搞定。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;简单说，最大的不一样就是：别的 AI 是说说而已，UOS AI 可以说到做到。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;就算是复杂操作，也能完成。这都是因为 deepin 开发了系统级的 MCP 服务器，高达 120+ 项系统控制，一键就能完成系统设置、应用管理、文件管理、联网搜索等。&lt;/p&gt; 
&lt;p&gt;此外，UOS AI 还支持快速接入第三方 MCP 工具或智能体，不管是想用它办公、学习，还是娱乐都可以。&lt;/p&gt; 
&lt;p&gt;总之就是别人有的，它也有了。&lt;/p&gt; 
&lt;p&gt;比如，你想要续写文档，根本不需要打开文档，对 UOS AI 说「续写桌面上的 AI 技术报告第三章，要 3 个分论点」，它就能顺着前文风格生成逻辑连贯的内容，直接保存到文档。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;也是没想到，用 deepin 系统的人吃得这么好！&lt;/strong&gt;感兴趣的朋友可以，前往官网下载最新版 deepin 体验：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh" target="_blank"&gt;https://www.deepin.org/index/zh&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;另外，我们也想探究一下， UOS AI 的 AI 能力是怎么实现的？以后还会有哪些令人期待的地方？&lt;/p&gt; 
&lt;p&gt;9 月 5 日晚，开源中国将邀请 UOS AI 产品负责人姜琬莹，做客《技术领航》栏目直播间，跟大家分享&amp;nbsp;UOS AI 的能力及实现。&lt;br&gt; &lt;br&gt; &lt;img height="740" src="https://oscimg.oschina.net/oscnet/up-210deaf87c39f1459061b78f9bfd676f627.jpg" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;p&gt;&lt;strong&gt;直播福利：&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;福袋抽奖：直播中将有 5 轮抽奖，参与就有机会获得 OSC T 恤、马建仓蛇年公仔（限量版）、代码圣杯、马克杯、冰箱贴、前沿技术书籍等。&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img alt="up-d0ddd08ceeff2b5526d3def6537a6ac649b.png" height="253" src="https://oscimg.oschina.net/oscnet/up-d0ddd08ceeff2b5526d3def6537a6ac649b.png" width="400" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;hr&gt; 
 &lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;《技术领航》是开源中国 OSCHINA 推出的一档直播栏目，旨在为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;开源软件、商业产品、前沿技术、知名品牌活动等各类项目&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;提供一个展示平台，基本上每周五晚上开播&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;栏目邀请项目的创始人、核心团队成员或资深用户作为嘉宾，通过路演式直播分享项目的亮点和经验，有助于提高项目的知名度，吸引更多的用户和开发者关注。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果你手上也有好的项目，想要跟同行交流分享，欢迎联系我，栏目随时开放～&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"&gt;&lt;img height="537" src="https://oscimg.oschina.net/oscnet/up-4dd54c1b0b817689ceefa15aa66d79cfae8.png" width="400" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;/div&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/3859945/blog/18690242</link>
      <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/18690242</guid>
      <pubDate>Sun, 31 Aug 2025 10:40:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>Firecrawl 将于 9 月 8 日开源 AI 适应性检测工具</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;网页抓取与数据处理解决方案提供商 Firecrawl &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2FCalebPeffer%2Fstatus%2F1962183698306179345" target="_blank"&gt;宣布&lt;/a&gt;将于 2025 年 9 月 8 日开源其 AI 适应性检测工具。&lt;/p&gt; 
&lt;p&gt;主要功能&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;符合 LLMs.txt 规范&lt;/li&gt; 
 &lt;li&gt;AI 可读的内容质量&lt;/li&gt; 
 &lt;li&gt;合理的站点地图结构&lt;/li&gt; 
 &lt;li&gt;以及 10 多项其他检查&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0901/183141_3H9U_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;据介绍，该工具通过 12 项技术指标诊断网站的 AI 搜索生态适配度，涵盖 LLMs.txt 规范、站点地图完整性和移动端响应效率等维度。&lt;/p&gt; 
&lt;p&gt;Firecrawl 专注于 AI 时代网站基础设施优化，其工具可识别索引失效问题并生成 SEO 优化建议，支持 React 和 Django 等开发框架。行业认为其开源策略将降低企业应对 AI 搜索变革的技术门槛，解决传统 CMS 语义化支持不足等痛点。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369714</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369714</guid>
      <pubDate>Sun, 31 Aug 2025 10:32:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>宇树科技推出数字孪生机器人运动控制技术</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;杭州宇树科技股份有限公司申请的专利 「一种基于数字孪生的机器人运动控制方法和电子设备」 于近日正式公布。这项新技术旨在通过数字孪生技术提升机器人在舞台表演中的灵活性和适应性，进而实现复杂而精彩的舞蹈表演。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="331" src="https://oscimg.oschina.net/oscnet/up-185be11f97770d6539d0801b40b9ac9b5b0.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;这项发明的核心在于构建了多个功能模块，包括环境采集模块、地图处理模块、数字舞台孪生模块、舞蹈动作设计模块、轨迹规划模块以及舞蹈合成模块。这些模块通过数据交互和功能协同，有效提升了机器人的舞蹈设计和执行能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;首先，环境采集模块能够实时收集舞台环境的信息，确保机器人及时了解周围的变化。接着，地图处理模块则将这些信息进行处理和分析，为机器人的运动提供精确的背景数据。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;数字舞台孪生模块是这项技术的关键，它能够创建舞台的数字化模型，帮助机器人更好地理解和适应环境。舞蹈动作设计模块则让艺术家能够设计出更为复杂和富有表现力的舞蹈动作，而轨迹规划模块则负责将这些动作与实时环境相结合，确保机器人的舞蹈表演与舞台环境的完美匹配。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;通过舞蹈合成模块，所有的舞蹈动作得以整合，形成一套完整且流畅的表演。这种高效、可扩展的舞蹈设计方案，不仅确保机器人在表演时能够精准感知和适应环境的变化，还避免了机器人动作与环境脱节的问题。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369713</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369713</guid>
      <pubDate>Sun, 31 Aug 2025 10:32:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>UJCMS 9.9.0 发布，Java CMS 网站内容管理系统</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;h2&gt;更新日志&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;新增表单对象标签&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;优化数据库备份功能&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;前台全文检索可以搜索图片集名称和描述&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;Dockerfile 优化&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;cnb 流水线优化&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;修复文章审核时，文章数据权限的问题&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;修复区块项无法排序的问题&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;简介&lt;/h2&gt; 
&lt;p style="color:#1f2328; margin-left:0; margin-right:0; text-align:start"&gt;UJCMS 是一款基于 Java 的企业级网站内容管理系统（Java CMS），采用 SpringBoot、MyBatis、Spring Security、Vue3、Vite、ElementPlus 等前沿技术开发，支持&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;无头 CMS&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;架构。&lt;/p&gt; 
&lt;p style="color:#1f2328; margin-left:0; margin-right:0; text-align:start"&gt;系统提供&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;模板 + 标签&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;和&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;Vue (React) + API&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;两种开发模式，适用于传统模板渲染和现代化前后端分离场景，为网站的建设、管理与维护提供高效、灵活、可靠的解决方案。&lt;/p&gt; 
&lt;p style="color:#1f2328; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span style="background-color:#ffffff; color:#40485b"&gt;使用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;Apache-2.0&lt;/code&gt;&lt;span style="background-color:#ffffff; color:#40485b"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;开源协议，可免费用于商业用途。&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;演示站前台：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdemo.ujcms.com%2F" target="_blank"&gt;https://demo.ujcms.com&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;演示站后台：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdemo.ujcms.com%2Fcp%2F" target="_blank"&gt;https://demo.ujcms.com/cp/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;官方网站：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ujcms.com%2F" target="_blank"&gt;https://www.ujcms.com&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;安装包下载：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ujcms.com%2Fchannels%2Fdownloads%2F" target="_blank"&gt;https://www.ujcms.com/channels/downloads/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;后端技术&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;Spring Boot：提供了对 Spring 开箱即用的功能。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;Spring MVC：MVC 框架。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;Spring Security：安全组件。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;MyBatis：持久化框架。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;Lucene：全文检索组件。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;Flowable: 工作流引擎。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;Liquibase: 数据库表结构版本管理组件。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;Freemarker: 模板引擎。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;前端技术&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;Vue3：JavaScript 框架。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;ElementPlus：Vue 3 UI 框架。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;Vite: 下一代前端开发与构建工具。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;TypeScript: JavaScript 的一个超集。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;Tailwind CSS: 功能类优先的 CSS 框架。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;Pinia: Vue 状态管理库。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;VueRouter: Vue 路由组件。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;VueI18n: Vue 国际化组件。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;ECharts: 可视化图表库。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;Tinymce: 富文本编辑器。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;技术及功能亮点&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;自定义字段&lt;/strong&gt;：提供拖拽式可视化设计工具，支持所见即所得的操作体验。所有自定义字段均支持查询功能，显著增强系统灵活性。&lt;/p&gt; 
&lt;p style="color:#1f2328; margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;参数化查询&lt;/strong&gt;：只需在前台传递参数（如：Q_title=abc，Q_user-username=test），即可实现任意字段及关联表查询，无需编写后台代码，大幅提升开发效率。前后台均支持参数化查询，几乎满足所有查询需求。&lt;/p&gt; 
&lt;p style="color:#1f2328; margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;地址 SEO 优化&lt;/strong&gt;：默认动态 URL 前缀为 /channel 和 /article，支持自定义修改（如 /categories 和 /archives）。多站点支持目录形式（www.example.com/abc）或次级域名形式（abc.example.com），优化搜索引擎友好。&lt;/p&gt; 
&lt;p style="color:#1f2328; margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;清理垃圾附件&lt;/strong&gt;：自动识别未使用的图片和附件，支持一键清理，避免资源浪费。&lt;/p&gt; 
&lt;p style="color:#1f2328; margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;主副表拆分&lt;/strong&gt;：针对高查询量的复杂表，采用主副表拆分策略，显著提升大数据场景下的性能表现。&lt;/p&gt; 
&lt;h2&gt;前台模板&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img alt="" height="1934" src="https://oscimg.oschina.net/oscnet/up-80a0ebd93df8b45fee97e5ee120780e5c78.jpg" width="1351" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;后台界面&lt;/h2&gt; 
&lt;p style="color:#24292e; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img alt="" height="713" src="https://oscimg.oschina.net/oscnet/up-cfe14e42ecbeb17974c201494ee2c931758.jpg" width="1367" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369708</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369708</guid>
      <pubDate>Sun, 31 Aug 2025 10:15:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>SQLE 4.2508.0 正式版发布！智能 SQL 调优上线！</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;img alt="" height="383" src="https://oscimg.oschina.net/oscnet/up-788158a10768c12ea269efce421a1b84dd3.png" width="893" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:center"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;企业版&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="color:#000000; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span&gt;智能 SQL 调优&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span&gt;🔗&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;企业版获取&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#000000"&gt;&lt;span&gt;&lt;span&gt;可通过文末海报中的小程序进行商务咨询或预约演示&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;&lt;span&gt;&lt;strong&gt;🔥&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;《SQLE 小课堂》&lt;/strong&gt;&lt;span&gt;系列视频，火热更新中……&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style="color:#2584b5"&gt;&lt;span&gt;&lt;span&gt;🎈 新功能&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#ffa900"&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;span style="color:#ffa900"&gt;&lt;strong&gt;&lt;span&gt;企业版&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0"&gt;&lt;span style="color:#ffa900"&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;u&gt;🚀&lt;/u&gt;&lt;/span&gt;&lt;span&gt;&lt;u&gt;&amp;nbsp;&lt;/u&gt;&lt;/span&gt;&lt;span&gt;&lt;u&gt;SQL 性能问题终结者！&lt;/u&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0"&gt;&lt;span style="color:#ffa900"&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;u&gt;一键调优，让你的查询飞起来！&lt;/u&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;你是否也曾被下面这些场景困扰？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" height="1096" src="https://oscimg.oschina.net/oscnet/up-ea7625b0b86e30efcf4c51afe47b844cfbd.png" width="844" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;如果你对上面的场景感同身受，那么本次发布的新功能 ——&amp;nbsp;&lt;/span&gt;&lt;strong&gt;智能 SQL 调优&lt;/strong&gt;&lt;span&gt;，就是为你量身打造的！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;strong&gt;核心价值：不止是建议，我们直接给你结果！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt; &lt;span&gt;&lt;span&gt;我们这次来点最实际的。新功能最核心、最强大的地方在于：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;strong&gt;它会直接生成一条优化后的、可以立即使用的新 SQL！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;是的，你没看错！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" height="333" src="https://oscimg.oschina.net/oscnet/up-f7705ef8759cfa41c9f70a57ebe0f83d644.png" width="851" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一键获得最优 SQL&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;你只需要把有问题的 SQL 交给我们，系统就会自动分析、诊断，并为你 「手写」 出一条性能更优的新 SQL。你只需复制、粘贴、执行，就能立即看到效果！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" height="922" src="https://oscimg.oschina.net/oscnet/up-67f308a7ec137ddc963307e8ea4d8978093.png" width="1984" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;功能效果图 A&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt; &lt;span&gt;&lt;strong&gt;告别不确定性&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：我们不仅提供优化后的 SQL，还会用详尽的执行计划对比数据告诉你，它为什么更快，性能提升了多少。让你的每一次优化都有据可依，充满信心。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" height="1122" src="https://oscimg.oschina.net/oscnet/up-0449cf030768182d6ae1d861ce499153c0b.png" width="1654" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;功能效果图 B&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt; &lt;span&gt;&lt;strong&gt;人人都是 SQL 大师&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;即使你不是数据库专家，也能轻松完成复杂的 SQL 性能优化。这个功能让你瞬间拥有资深 DBA 的调优能力，把时间和精力聚焦在业务逻辑上。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" height="1251" src="https://oscimg.oschina.net/oscnet/up-2d6d01f3ba81a4a26215c47f20174f7529e.png" width="1638" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;功能效果图 C&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三步搞定，轻松上手！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;使用这个强大的功能非常简单，只需要几步：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;发起调优&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;方法一：&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;在 「SQL 分析」 页面，如果发现有性能问题的 SQL，直接点击旁边的【SQL 调优】按钮。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img alt="" height="435" src="https://oscimg.oschina.net/oscnet/up-3a4859587bb575bafafa83e52c0303c7521.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;功能发起方式一&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;方法二：&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;也可以从主菜单的【快捷操作】入口，主动创建一个调优任务，把你想优化的 SQL 粘贴进去就行。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img alt="" height="423" src="https://oscimg.oschina.net/oscnet/up-34d4df99c89249fbf0cf0e2aa70951d9547.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;功能发起方式二&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;稍等片刻&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;让我们的智能引擎飞一会儿，它正在幕后为你进行成千上万次的计算和分析。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;查看结果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;调优完成后，你会看到一份清晰的报告，包含了：性能提升对比、优化建议、调优前后的执行计划差异等。所有信息都一目了然，让你轻松做出决策！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;br&gt; &lt;span&gt;&lt;span&gt;我们相信，这个功能将极大地解放你的生产力，让你从繁琐的 SQL 调优工作中解脱出来，把更多精力投入到更有创造性的业务开发中。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;现在就去试试吧！你有没有哪条一直让你头疼的 「慢 SQL」？快用我们的新功能给它 「诊断」 一下，然后来社区和我们分享你的 「调优战果」 吧！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;span style="color:#2584b5"&gt;&lt;span&gt;📜 版本日志&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style="color:#ffa900"&gt;&lt;strong&gt;&lt;span&gt;社区版&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;优化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[actiontech/dms/issues/509] 项目列表、用户列表新增模糊搜索组件&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[actiontech/dms/issues/503] 用户名不应允许存在空格&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Bug 修复&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[/issues/3097] 修复，工单上线后没有邮件通知问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[actiontech/dms/issues/515] 修复特定用户名称访问工作台失败问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#ffa900"&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;企业版&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;新特性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[actiontech/sqle-ee/issues/2498] SQLE 对接 SQLFlash&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[actiontech/dms-ee/issues/642] 支持 OB（MySQL 模式）数据导出功能&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[actiontech/dms-ee/issues/597] 数据导出工单支持邮件消息推送&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;优化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[actiontech/sqle-ee/issues/2496] 审批流程模版指定审批人上限调整&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[actiontech/sqle-ee/issues/2490] JAVA 应用 SQL 抓取版本兼容&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[actiontech/dms-ee/issues/648] 项目业务增加/筛选优化&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Bug 修复&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[actiontech/sqle-ee/issues/2519] 修复 SQL 分析禁止下发真实的 SQL&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[actiontech/sqle-ee/issues/2516] 修复审计管理员看不到 SQL 导出记录的问题&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[actiontech/sqle-ee/issues/2514] 修复 OB（Oracle 模式），SQL 管控 TOP SQL 采集，存在的审核异常提示&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[actiontech/sqle-ee/issues/2495] 修复角色管理列表页在切换可用区后再重新进入会报错问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[actiontech/sqle-ee/issues/2494] 修复在配置 IDEA 插件的时候，获取数据源信息的时候报权限不足问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;[actiontech/sqle-ee/issues/2477] 修复 SQL 管控：TD MySQL 监控库采集采集周期内采集的 SQL 过多导致采集超时问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span style="color:#2584b5"&gt;&lt;span&gt;🧩 版本选择&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span style="color:#3da742"&gt;&lt;span&gt;社区版：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;轻量级 MySQL 开发治理工具，满足个人和小团队的基础 SQL 开发需求。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;专业版：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;多数据源开发治理平台，为中小团队提供更丰富的数据库变更管控能力。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;企业版：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;企业级数据资产合规平台，满足大型企业的数据安全与管控要求。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="684" src="https://oscimg.oschina.net/oscnet/up-4d74eb074098be0586db43d12d6a54823e7.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;🤗 我们为&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#3da742"&gt;&lt;strong&gt;&lt;span&gt;社区版&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;和&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#ffa900"&gt;&lt;strong&gt;&lt;span&gt;企业版&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;准备了在线体验环境，欢迎体验。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0; text-align:center"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span style="color:#010101"&gt;&lt;span&gt;👉&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style="color:#3da742"&gt;&lt;span&gt;社区版：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#010101"&gt;&lt;span&gt;http://demo.sqle.actionsky.com/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;👉&amp;nbsp;&lt;/span&gt;&lt;span style="color:#ffa900"&gt;&lt;strong&gt;&lt;span&gt;企业版：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;http://demo.sqle.actionsky.com:8889/&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#010101; margin-left:0; margin-right:0"&gt;&lt;span&gt;🙋‍♂️&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&amp;nbsp;用户名：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;admin&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#010101; margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span&gt;🔑&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;密 &amp;nbsp; 码：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0"&gt;&lt;span style="color:#010101"&gt;&lt;span&gt;👉&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#3daad6"&gt;&lt;strong&gt;&lt;span&gt;专业版：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;调填写调研问卷（扫码或点击&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;原文链接&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;）获取安装包。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="300" src="https://oscimg.oschina.net/oscnet/up-7b0100862020c9608a047c7a815f6d1e7fb.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; margin-left:0; margin-right:0; text-align:center"&gt;&lt;strong&gt;&lt;span&gt;SQLE 4.2508.0&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;专业版（20250902 18:00 更新）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;&lt;span&gt;🔗&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;企业版获取：&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#000000"&gt;&lt;span&gt;可通过海报下方的小程序进行商务咨询或预约演示。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1800" src="https://oscimg.oschina.net/oscnet/up-21046b7d6705f50a144cff70ed4094d512b.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369704/sqle-4-2508-0-ga</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369704/sqle-4-2508-0-ga</guid>
      <pubDate>Sun, 31 Aug 2025 10:10:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>微软 Copilot Labs 上线「音频表达式」功能</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微软在 Copilot Labs 上线了名为「音频表达式（Audio Expression）」的实验性功能，用户可输入提示并让 AI 以不同语音风格朗读文本，该功能仅限文本转语音。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1856" src="https://static.oschina.net/uploads/space/2025/0901/180307_ik24_2720166.png" width="3360" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;https://copilot.microsoft.com/labs/audio-expression&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;据介绍，Copilot Audio Expressions 的功能是让输出的音频更接近真人，并可根据需求加入创意润色。用户无需注册即可直接体验，并可下载 MP3 格式音频，方便在任何设备播放。&lt;/p&gt; 
&lt;p&gt;该工具目前提供 Emotive（情感表达）和 Story（故事创作）两种模式。&lt;/p&gt; 
&lt;p&gt;在 Emotive 模式下，生成的音频不仅朗读了文字，还自动增添细节、调整措辞，让表达更生动。单段音频最长 59 秒，支持十余种声音与风格组合。在 Story 模式下，系统自动选择音色和风格，用户仅需提供主题提示。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369702</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369702</guid>
      <pubDate>Sun, 31 Aug 2025 10:07:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>WhisperLiveKit - 实时、完全本地语音转文</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                        
                                                                                    &lt;p&gt;实时、完全本地语音转文本，支持说话人识别。实时语音转录直接发送到你的浏览器，带有可立即使用的后端+服务器和简单的前端。&lt;/p&gt;

&lt;p&gt;&lt;img height="272" src="https://static.oschina.net/uploads/space/2025/0828/135735_EKWx_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;架构&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img height="175" src="https://static.oschina.net/uploads/space/2025/0828/135747_DGD3_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

&lt;p style="text-align:start"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;后端支持多个并发用户。语音活动检测功能可在未检测到语音时减少开销。&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div style="text-align:start"&gt;
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;安装和快速启动&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;/div&gt;

&lt;div style="text-align:start"&gt;
&lt;pre&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#f6f8fa"&gt;&lt;span style="color:#1f2328"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;&lt;span style="background-color:#f6f8fa"&gt;&lt;span&gt;&lt;span&gt;pip install whisperlivekit&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;需要 FFmpeg&lt;/strong&gt;，必须在使用 WhisperLiveKit 之前安装&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#59636e; display:block; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Segoe UI&amp;quot;,&amp;quot;Noto Sans&amp;quot;,Helvetica,Arial,sans-serif,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;; font-size:16px; font-style:normal; font-variant:tabular-nums; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; max-width:100%; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:max-content; word-spacing:0px"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="border-color:#d1d9e0"&gt;OS&lt;/th&gt;
&lt;th style="border-color:#d1d9e0"&gt;How to install&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="border-color:#d1d9e0; border-image:none 100% / 1 / 0 stretch; border-style:solid; border-width:0.666667px"&gt;Ubuntu/Debian&lt;/td&gt;
&lt;td style="border-color:#d1d9e0; border-image:none 100% / 1 / 0 stretch; border-style:solid; border-width:0.666667px"&gt;&lt;code&gt;sudo apt install ffmpeg&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="border-color:#d1d9e0; border-image:none 100% / 1 / 0 stretch; border-style:solid; border-width:0.666667px"&gt;MacOS&lt;/td&gt;
&lt;td style="border-color:#d1d9e0; border-image:none 100% / 1 / 0 stretch; border-style:solid; border-width:0.666667px"&gt;&lt;code&gt;brew install ffmpeg&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="border-color:#d1d9e0; border-image:none 100% / 1 / 0 stretch; border-style:solid; border-width:0.666667px"&gt;Windows&lt;/td&gt;
&lt;td style="border-color:#d1d9e0; border-image:none 100% / 1 / 0 stretch; border-style:solid; border-width:0.666667px"&gt;Download .exe from&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://ffmpeg.org/download.html"&gt;https://ffmpeg.org/download.html&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;and add to PATH&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/whisperlivekit</link>
      <guid isPermaLink="false">https://www.oschina.net/p/whisperlivekit</guid>
      <pubDate>Sun, 31 Aug 2025 09:55:00 GMT</pubDate>
    </item>
    <item>
      <title>具身智能高质量合成数据集开源发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;国家数据局发文&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FSi6YQUzRwOgNjN29YaOQqg" target="_blank"&gt;宣布&lt;/a&gt;，具身智能灵巧手多样抓取仿真数据集（DexonomySim）已开源发布。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;具身智能灵巧手多样抓取仿真数据集（DexonomySim）是在国家数据局数字科技和基础设施建设司指导下，由银河通用介绍发布。DexonomySim 专为具身智能机器人灵巧抓取任务设计，包含超过 950 万条高质量抓取姿态，覆盖超 1 万个物体与 31 种常用抓握类型，涵盖人类抓握分类法中约 94% 的类型，是当前具身智能领域开源的最大规模灵巧手操作高质量合成数据集。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;该数据集适用于多指灵巧手在高自由度操作场景下的模型训练与算法验证，其生成方式基于高效优化的物理仿真，具有数据格式规范统一、真实可溯、内容优质、模型适配性高等优势，且多样性与规模均远超已有数据集，有效满足模型泛化需求，助力人形机器人实现对外形不规则或需精细操作物体的稳定、多样化抓取，提升复杂环境下的操作适应性与任务成功率。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="191" src="https://oscimg.oschina.net/oscnet/up-087f340a737ec99d0fd59df16c8f689f257.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;具身智能高质量合成数据集的开源，将为全球研究者和产业开发者提供关键的基础设施和生产要素支撑，加速推动人形机器人在商超零售、工业分拣、家庭服务、医疗康养等多元场景落地应用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此次成果的开源，体现出行业企业在高质量数据集建设上的积极探索，也为推动数据要素价值释放提供了鲜活实践。下一步，国家数据局将持续推进高质量数据集建设，推动人工智能与具身智能等前沿领域加速发展，助力新质生产力培育与应用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;具身智能灵巧手多样抓取仿真数据集开源链接可查看&lt;/span&gt;&lt;span style="color:rgba(0, 0, 0, 0.9)"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdisk.pku.edu.cn%2Fanyshare%2Fzh-cn%2Flink%2FAA126F20CCF8EC44DC819FFB494FFD96AD%3F_tb%3Dnone%26expires_at%3D2045-08-30T23%253A56%253A30%252B08%253A00%26item_type%3Dfolder%26password_required%3Dfalse%26title%3D%25E5%2585%25B7%25E8%25BA%25AB%25E6%2599%25BA%25E8%2583%25BD%25E7%2581%25B5%25E5%25B7%25A7%25E6%2589%258B%25E5%25A4%259A%25E6%25A0%25B7%25E6%258A%2593%25E5%258F%2596%25E4%25BB%25BF%25E7%259C%259F%25E6%2595%25B0%25E6%258D%25AE%25E9%259B%2586%25EF%25BC%2588DexonomySim%25EF%25BC%2589%26type%3Danonymous%26verify_mobile%3Dfalse" target="_blank"&gt;此处&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#000000"&gt;。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369688</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369688</guid>
      <pubDate>Sun, 31 Aug 2025 09:28:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
  </channel>
</rss>
