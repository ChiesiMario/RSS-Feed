<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 简体中文</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 28 Aug 2025 02:44:11 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>AI 向量化黑科技！deepin 25 实现「秒搜」自由</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;div&gt; 
 &lt;div&gt; 
  &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;「这个报告到底存在哪里？」「只记得文档里有‘预算调整’，文件名却死活想不起来......」与海量文件打交道，类似的抓狂瞬间几乎天天上演。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;别担心，deepin 25 带着&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;「全文检索」&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;黑科技来了，哪怕只记得只言片语，也能瞬间定位目标，彻底终结文件查找难题。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;h2&gt;&lt;strong&gt;&lt;strong&gt;内容级深度搜索，告别「记文件名」焦虑&lt;/strong&gt;&lt;/strong&gt;&lt;/h2&gt; 
  &lt;p style="text-align:center"&gt;&lt;img align="center" src="https://oscimg.oschina.net/oscnet//289fa26e8dd9ed5ae4004c14b40981f9.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;全文检索功能能够直接穿透文件名，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;深入文档内部文本内容&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;进行搜索。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;不记得文件名没关系，只需输入你所记得的部分关键词，系统就自动匹配出所有包含该内容的文档，瞬间锁定目标。无论是合同条款、会议纪要还是数据报表，哪怕搜索内容藏在图片中，都能被精准捕捉。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;h2&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;关键词高亮显示：一眼锁定核心信息&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/h2&gt; 
  &lt;p style="text-align:left"&gt;&lt;img align="left" src="https://oscimg.oschina.net/oscnet//d645cf5873a3da1b1d00b57fa9e5eddb.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;找到文件只是第一步，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;快速定位关键内容才是提升效率的核心。&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;在 deepin 25 的全文检索结果列表中，所有包含关键词的文件名和文件内容都会用醒目的颜色标记，无需逐字阅读就能一眼锁定重点，让信息获取效率提升数倍。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;h2&gt;&lt;strong&gt;&lt;strong&gt;多关键词组合搜索：精准过滤无关信息&lt;/strong&gt;&lt;/strong&gt;&lt;/h2&gt; 
  &lt;p style="text-align:center"&gt;&lt;img align="center" src="https://oscimg.oschina.net/oscnet//bae063fd40bb767e11ab6d71909fd570.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;在查找文件时，常常会遇到这样的情况：需要的文档涉及多个关键信息，只靠单个关键词搜索，结果往往混入大量无关文件。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;deepin 25 的多关键词组合搜索功能，可完美解决这个问题。就像常用的搜索引擎，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;支持输入多个关键词，用空格分隔，&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;系统便会精准识别并匹配同时包含所有关键词的文件，大大提高搜索的命中率。这种类似搜索引擎的操作逻辑，上手零难度，却能让搜索命中率大幅提升。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;deepin 25 的全文检索功能，用内容级搜索打破文件名限制，用高亮显示简化信息定位，用多关键词组合提升精准度，三者协同发力，让文件查找从「耗时任务」变成 「秒级操作」！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;欢迎尝试体验并在评论区分享您的使用心得。同时也诚邀您前往社区论坛参与更深入的交流与探讨，共同助力 deepin 的成长。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368882</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368882</guid>
      <pubDate>Thu, 28 Aug 2025 02:22:40 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>Kubernetes v1.34：风与意志（O' WaW）</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Kubernetes v1.34 现已&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fxi2AJxforro3wmiFil4NAw" target="_blank"&gt;发布&lt;/a&gt;，包含 58 项改进，其中 23 项升级为稳定版，22 项进入测试版，13 项进入 Alpha；也包含一些废弃和移除内容。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;发布主题与 Logo&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" height="255" src="https://oscimg.oschina.net/oscnet/up-959240dd97b34082a7b6ca233df107b3d9c.webp" width="200" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;重点更新&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Kubernetes v1.34 带来了丰富的新特性和改进。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;稳定版：DRA 核心功能正式发布&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;动态资源分配（DRA）支持更灵活地选择、分配、共享和配置 GPU、TPU、NIC 等设备。&lt;/p&gt; 
&lt;p&gt;自 v1.30 起，DRA 基于结构化参数声明设备，借鉴了存储卷动态配置的思路。DRA 依赖 resource.k8s.io 下的 ResourceClaim、DeviceClass、ResourceClaimTemplate 和 ResourceSlice API，并在 Pod 的.spec 中新增 resourceClaims 字段。resource.k8s.io/v1 接口已升级为稳定版，默认可用。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;测试版：kubelet 支持投影 ServiceAccount 令牌用于镜像凭证&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;kubelet 镜像凭证提供者传统上依赖节点或集群中存储的长期 Secret，存在安全风险和管理开销。现在，kubelet 可请求短期、绑定受众的 ServiceAccount 令牌，用于容器镜像拉取认证。这样镜像拉取基于 Pod 自身身份授权，而非节点凭证。&lt;/p&gt; 
&lt;p&gt;主要优势是大幅提升安全性，消除长期 Secret 需求，降低攻击面，简化凭证管理。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;Alpha 版：支持 KYAML——Kubernetes 专用 YAML 方言&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;KYAML 是一个更安全、更明确的 YAML 子集，专为 Kubernetes 设计。自 v1.34 起，kubectl 支持将 KYAML 作为输出格式。&lt;/p&gt; 
&lt;p&gt;KYAML 解决了 YAML 空白符敏感和字符串引用可选带来的类型转换问题，同时克服 JSON 无注释和严格逗号需求的缺点。&lt;/p&gt; 
&lt;p&gt;所有 KYAML 文件也是有效的 YAML，可以作为 kubectl 输入。kubectl v1.34 可通过设置环境变量 KUBECTL_KYAML=true 来请求 KYAML 格式输出。仍可选择 JSON 或 YAML 输出。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;升级为稳定版的功能精选&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;strong&gt;Job 替换 Pod 延迟创建&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;默认情况下，Job 控制器在 Pod 终止时立即创建替换 Pod，导致旧 Pod 和新 Pod 同时运行，可能引发资源竞争和不必要的自动扩缩。某些机器学习框架（如 TensorFlow、JAX）要求同一索引只有一个 Pod 同时运行。&lt;/p&gt; 
&lt;p&gt;新增加.spec.podReplacementPolicy，支持只在 Pod 完全终止（.status.phase 为 Failed）后再创建替换 Pod。设置.spec.podReplacementPolicy: Failed 即可启用。&lt;/p&gt; 
&lt;p&gt;该特性自 v1.28 alpha，已于 v1.34 稳定发布。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;卷扩容失败后可恢复&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;允许用户取消存储提供商不支持的卷扩容，改用较小值重试，提升卷扩容成功率。该特性自 v1.23 alpha，已于 v1.34 稳定发布。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;VolumeAttributesClass 支持卷参数修改&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;VolumeAttributesClass 现已稳定，提供 Kubernetes 原生 API 修改卷参数（如 IO 性能），支持在线垂直扩展卷，前提供应商支持。该 API 通过 CSI 接口实现，需对应 CSI 驱动支持 ModifyVolume 接口。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;结构化认证配置&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;v1.29 引入了 AuthenticationConfiguration 配置文件格式，替代过去大量命令行选项，支持多 JWT 认证器、CEL 表达式校验和动态重载。&lt;/p&gt; 
&lt;p&gt;此配置显著提升认证管理和审计能力，v1.34 升级为稳定版。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;基于选择器的细粒度授权&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;授权器（包括 Webhook 和内置节点授权器）现支持基于请求中的字段选择器和标签选择器做决策。例如，可以限制某策略只允许列出绑定到特定.spec.nodeName 的 Pod，客户端必须传入对应的字段选择器，否则拒绝访问。&lt;/p&gt; 
&lt;p&gt;该功能提升了多租户和节点隔离场景下的权限细化管理。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;精细控制匿名请求&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;不再简单启用或禁用匿名访问，而是允许配置允许匿名访问的特定端点列表，如/healthz、/readyz、/livez 等。此举防止因 RBAC 配置错误导致匿名用户权限过大，同时无需修改外部探针或启动工具。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;插件回调实现更高效重排队&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;kube-scheduler 支持插件注册回调函数，判断集群事件是否可能使之前无法调度的 Pod 变得可调度。减少无效重试，提高调度吞吐，特别适合动态资源分配场景。某些插件还可跳过回退延迟，加快调度。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;有序命名空间删除&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;随机删除资源顺序可能导致安全风险或异常行为，比如 Pod 在网络策略删除后仍存在。引入结构化删除流程，确保按逻辑和安全依赖顺序删除资源，Pod 优先被移除。&lt;/p&gt; 
&lt;p&gt;此特性 v1.33 引入，v1.34 稳定，解决了 CVE-2024-7598 等安全问题。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;流式列表响应&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;处理大规模列表响应时，API Server 此前需将全部对象序列化到大内存缓冲区，导致内存压力和性能下降。&lt;/p&gt; 
&lt;p&gt;新增流式编码机制，自动启用 JSON 和 Protobuf 格式，避免大内存占用，提升集群稳定性和性能，适合高并发大规模资源查询。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;更稳定的 watch 缓存初始化&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;watch 缓存负责维护 etcd 中集群状态的最终一致缓存，之前启动或重初始化时可能失败。改进初始化流程，提高容错性，增强控制平面稳定性，保证控制器和客户端可靠建立 watch。&lt;/p&gt; 
&lt;p&gt;v1.31 测试版，v1.34 稳定发布。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;放宽 DNS 搜索路径校验&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;以前 Pod 的 DNS 搜索路径严格验证，给复杂或遗留网络环境带来集成难题，需绕过配置。放宽 DNS 验证，v1.32 alpha，v1.34 稳定。&lt;/p&gt; 
&lt;p&gt;使用.spec.dnsConfig 的 searches 列表以单点「.」开头，可避免系统解析器为外部域名添加集群内搜索域，减少无效 DNS 请求，提高效率。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;Windows kube-proxy 支持 Direct Service Return (DSR)&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;DSR 通过绕过负载均衡器直接响应客户端，减少负载，降低延迟。v1.14 引入，v1.34 稳定发布。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;容器生命周期钩子支持 Sleep 动作&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;为 PreStop 和 PostStart 钩子新增 Sleep 动作，方便管理优雅关闭和生命周期流程。&lt;/p&gt; 
&lt;p&gt;Sleep 动作可让容器暂停指定时间，负数或 0 秒则立即返回。v1.29 引入，v1.32 支持 0 秒，v1.34 稳定。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;Linux 节点支持交换空间（swap）&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;过去 Kubernetes 不支持 swap，导致内存紧张时强制终止进程，影响大内存但访问不频繁的应用。v1.22 开始支持节点可配置 swap，经过 alpha 和 beta，v1.34 稳定发布。&lt;/p&gt; 
&lt;p&gt;主要模式 LimitedSwap 允许 Pod 在内存限制内使用 swap，默认 kubelet 为 NoSwap 模式，不使用 swap。提升工作负载稳定性和资源利用效率，适合资源受限环境，需注意性能影响。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;允许环境变量名中使用特殊字符&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;放宽环境变量名称校验，允许除「=」以外的几乎所有可打印 ASCII 字符。支持直接定义和通过 envFrom 注入的 ConfigMap、Secret。&lt;/p&gt; 
&lt;p&gt;满足如.NET Core 等框架使用「:」分隔嵌套配置键的需求。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;污点管理与节点生命周期解耦&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;过去 TaintManager 与节点生命周期控制器紧耦合，难以维护和测试，限制了基于污点的驱逐机制灵活性。该 KEP 将 TaintManager 拆分为独立控制器，提升代码模块化和可维护性。&lt;/p&gt; 
&lt;p&gt;此改动为内部架构优化，对用户使用污点无直接影响。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Beta 新功能&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;以下是 v1.34 版本后进入 Beta 的部分改进。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;Pod 级别的资源请求和限制&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;以前多容器 Pod 只能对每个容器单独设置资源请求和限制，导致开发者要么资源配置过度，要么复杂分配，难以高效利用资源。现在支持在 Pod 级别指定资源请求和限制，开发者可为整个 Pod 设定资源预算，容器共享这些资源。此功能在 v1.32 为 Alpha，v1.34 升级到 Beta，HPA 现在支持 Pod 级资源规格。&lt;/p&gt; 
&lt;p&gt;主要优势是更直观管理多容器 Pod 资源，确保所有容器资源总和不超过 Pod 限额，有助于更合理调度和集群资源利用。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;kubectl 用户偏好配置文件 .kuberc&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;.kuberc 文件允许定义 kubectl 的默认选项和命令别名，不包含集群信息和凭据。v1.33 作为 Alpha 引入，需设置环境变量 KUBECTL_KUBERC 启用，v1.34 升级为 Beta 并默认启用。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;外部 ServiceAccount Token 签名&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;传统 Kubernetes 使用静态磁盘密钥签发 ServiceAccount Token。新功能引入 ExternalJWTSigner gRPC 服务，实现进程外签名，支持集成外部密钥管理（如 HSM、云 KMS）替代静态密钥。&lt;/p&gt; 
&lt;p&gt;v1.32 Alpha，v1.34 Beta 默认启用。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;DRA 功能 Beta&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;安全资源监控的管理员访问&lt;/strong&gt;&lt;br&gt; 通过 ResourceClaims 的 adminAccess 字段，集群管理员可访问已被其他用户使用的设备作监控诊断。仅限在标记为&amp;nbsp;&lt;code&gt;resource.k8s.io/admin-access: "true"&lt;/code&gt;&amp;nbsp;的命名空间内有权限创建相关对象的用户。v1.34 升级到 Beta。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ResourceClaims 中的优先替代方案&lt;/strong&gt;&lt;br&gt; 通过 DRAPrioritizedList 功能，ResourceClaims 支持 firstAvailable 字段，定义按顺序满足请求的备选方案，调度器按顺序尝试，确保分配最佳可用设备。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;kubelet 报告 DRA 分配资源&lt;/strong&gt;&lt;br&gt; kubelet API 更新，可报告 Pod 通过 DRA 分配的资源，方便节点监控和新功能开发。v1.34 默认启用。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;kube-scheduler 非阻塞 API 调用&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;调度器调用 API 造成阻塞，新功能通过优先队列和请求去重实现异步 API 处理，减少调度时延，避免线程饥饿，支持快速重试。兼容旧接口并新增监控指标。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;变更准入策略（Mutating Admission Policies）&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;基于 CEL 和 Server Side Apply 合并算法，提供声明式、内嵌的变更准入替代方案，简化准入控制规则定义。v1.32 Alpha，v1.34 升级为 Beta。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;快照式 API Server 缓存&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;解决历史版本 List 请求直接访问 etcd 性能和稳定问题，启用 ListFromCacheSnapshot 功能后，API Server 优先从快照缓存返回数据，提升性能并降低内存压力。默认开启。&lt;/p&gt; 
&lt;p&gt;由 SIG API Machinery 负责，KEP #4988。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;Kubernetes 原生类型的声明式校验工具&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;提供基于 CEL 的声明式校验，简化 API 校验规则开发和维护，提升错误信息准确性。v1.33 Beta，v1.34 继续。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;List 请求的流式 informer&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;List 请求通过 watch 缓存流式返回数据，降低内存峰值和延迟。v1.34 版本 kube-apiserver 和 kube-controller-manager 默认使用该机制，提升稳定性和性能。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;Windows 节点的优雅关机支持&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;Windows 节点的 kubelet 能识别系统关机事件，执行优雅终止 Pod，支持生命周期钩子和宽限期，提升维护和重启期间的可靠性。Beta 默认启用。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;Pod 就地调整资源改进&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;v1.33 升级至 Beta 并默认启用，v1.34 增加支持内存缩减和 Pod 级资源集成。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Alpha 新功能&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;以下是 v1.34 版本后进入 Alpha 的部分新特性。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;Pod 证书用于 mTLS 认证&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;新增通过 PodCertificateRequests 机制，kubelet 可为 Pod 申请管理 X.509 证书，支持 mTLS 认证，提升 Pod 身份验证强度，方便与证书认证的外部系统集成。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;「Restricted」 Pod 安全标准禁止远程探针&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;禁止在探针和生命周期处理器中使用除 podIP 之外的 host 字段，防止绕过安全限制的攻击。只有符合此要求的 Pod 才符合 Restricted 标准。可通过 Pod 安全准入或第三方方案强制执行。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;用 .status.nominatedNodeName 表示 Pod 调度意图&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;解决调度延迟导致自动扩缩不准确的问题。开启 NominatedNodeNameForExpectation 功能后，调度器用该字段表示 Pod 预定绑定的节点，帮助外部组件做出更合理决策。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;DRA Alpha 功能&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;资源健康状态&lt;/strong&gt;&lt;br&gt; 通过 Pod 状态暴露设备健康信息，方便诊断 Pod 崩溃问题。需开启 ResourceHealthStatus 功能且驱动实现相应 gRPC 服务。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;扩展资源映射&lt;/strong&gt;&lt;br&gt; 以更简单方式将 DRA 管理的资源作为扩展资源暴露，兼容现有 .spec.resources 语法，方便应用无改动使用 DRA。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;DRA 可用容量&lt;/strong&gt;&lt;br&gt; 支持驱动按需共享设备部分资源给多个 ResourceClaims，扩展调度器分配能力，支持更细粒度资源共享，提升多租户和带宽感知场景。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;设备绑定条件&lt;/strong&gt;&lt;br&gt; 调度延迟绑定 Pod，直到所需外部设备准备就绪，提高调度可靠性。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;容器重启规则&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;支持为 Pod 内不同容器指定不同的重启策略，且可基于退出码覆写，满足复杂场景需求，提升资源利用效率。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;从运行时生成的文件加载环境变量&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;支持容器运行时动态生成环境变量文件，后续容器可加载，消除对入口脚本包装需求，增强容器编排灵活性。对 AI/ML 训练等场景尤为有用。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;v1.34 版本的毕业、废弃与移除&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;strong&gt;功能毕业至稳定版&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;以下列出所有从测试阶段毕业到稳定（GA）版本的功能。欲了解包括新功能和从 alpha 到 beta 毕业的完整更新列表，可参考发布说明。&lt;/p&gt; 
&lt;p&gt;本次发布共计 23 项增强功能升至稳定版：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;环境变量支持几乎所有可打印 ASCII 字符&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;允许作业控制器在 Pod 完全终止后重新创建 Pod&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;PreStop Hook 的 Sleep Action 允许零值&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;API Server 追踪功能&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持 AppArmor&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持基于 Field 和 Label 选择器的授权&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;缓存中的一致性读取&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使 TaintManager 独立于 NodeLifecycleController&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;从 CRI 发现 cgroup 驱动&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;DRA：结构化参数&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;新增 PreStop Hook 的 Sleep Action&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Kubelet OpenTelemetry 追踪&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Kubernetes VolumeAttributesClass 修改卷功能&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;节点内存交换支持&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;仅允许匿名认证访问配置的端点&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;有序的命名空间删除&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;kube-scheduler 为每个插件提供回调函数以准确重排队列&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;放宽 DNS 搜索字符串校验&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Watchcache 初始化增强鲁棒性&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;LIST 响应支持流式编码&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;结构化认证配置&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Windows kube-proxy 支持直接服务返回（DSR）及覆盖网络&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持卷扩容失败的恢复&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;strong&gt;废弃与移除&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;随着 Kubernetes 持续发展成熟，一些功能会被废弃、移除或替换，以提升整体项目健康度。详情请参见 Kubernetes&amp;nbsp;&lt;strong&gt;废弃与移除政策&lt;/strong&gt;。v1.34 版本包含若干废弃项。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;手动配置 cgroup 驱动已废弃&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;过去，正确配置 cgroup 驱动是 Kubernetes 集群用户的痛点。v1.28 版本支持 kubelet 查询 CRI 实现自动检测 cgroup 驱动，v1.34 该自动检测已晋升为稳定推荐方案。若你的 CRI 容器运行时不支持报告所需的 cgroup 驱动，建议升级或更换容器运行时。kubelet 配置文件中的 cgroupDriver 配置项已废弃。对应的命令行参数 --cgroup-driver 之前也已废弃，推荐使用配置文件。两者将在未来版本（不早于 v1.36）中移除。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;Kubernetes 将在 v1.36 终止对 containerd 1.x 的支持&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;v1.34 仍支持 containerd 1.7 及其他 LTS 版本，但由于自动检测 cgroup 驱动，SIG Node 社区已确定 containerd 1.x 的最终支持时间线。最后支持版本为 v1.35（对应 containerd 1.7 的 EOL）。如果你仍使用 containerd 1.x，建议尽快升级至 2.0 及以上。可通过监控 kubelet_cri_losing_support 指标，了解集群中节点使用的 containerd 版本是否即将过时。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;PreferClose 流量分配已废弃&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;Kubernetes Service 中的 spec.trafficDistribution 字段允许用户指定流量路由偏好。&lt;/p&gt; 
&lt;p&gt;KEP-3015 废弃了 PreferClose，新增两个值：PreferSameZone 和 PreferSameNode。PreferSameZone 是 PreferClose 的别名，用于语义更明确。PreferSameNode 优先分配本地端点，无法时回退远程端点。&lt;/p&gt; 
&lt;p&gt;该功能在 v1.33 以 PreferSameTrafficDistribution 功能门引入，v1.34 升级为 Beta 并默认启用。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;更多详情可&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkubernetes.io%2Fblog%2F2025%2F08%2F27%2Fkubernetes-v1-34-release%2F" target="_blank"&gt;查看官方公告&lt;/a&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368879/kubernetes-v1-34-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368879/kubernetes-v1-34-released</guid>
      <pubDate>Thu, 28 Aug 2025 02:16:53 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>DeepSeek 向用户发送了错误的模型 API 费用信息邮件</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;DeepSeek 此前向部分开发者发送的电子邮件中，将模型的 API 调用费用调低。官方随后澄清，当前 API 价格仍维持官网文档所列标准，未作任何调整。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-d3a059e16cac9602569bffa2c9c177244ed.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/news/367617" target="_blank"&gt;据官方介绍&lt;/a&gt;，&lt;strong&gt;&lt;strong&gt;北京时间 2025 年 9 月 6 日凌晨&lt;/strong&gt;&lt;/strong&gt;&lt;strong&gt;起&lt;/strong&gt;，DeepSeek 开放平台&amp;nbsp;API&amp;nbsp;接口调用价格进行如下调整：&lt;/p&gt; 
&lt;ul style="list-style-type:disc; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;执行新版价格表（如下图所示，详见定价页面）；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;取消夜间时段优惠。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0821/144816_eC55_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;在&amp;nbsp;9&amp;nbsp;月&amp;nbsp;6&amp;nbsp;日前，所有&amp;nbsp;API&amp;nbsp;服务仍按&lt;strong&gt;原价格政策计费&lt;/strong&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368878</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368878</guid>
      <pubDate>Thu, 28 Aug 2025 02:08:40 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>字节跳动提出 Jeddak AgentArmor 智能体安全框架</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;为了从根源上解决 AI Agent 的安全困境，字节跳动安全研究团队&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FFSK6zuRygxj5TrHFkIJ2tg" target="_blank"&gt;提出&lt;/a&gt;了全新的智能体安全框架 Jeddak AgentArmor。它意味着，我们可以将对模糊、善变的「自然语言」的分析，转变为对精确、严谨的「程序语言」的分析。&lt;/p&gt; 
&lt;p&gt;「AgentArmor 的设计哲学 —— 将 AI Agent 运行时的行为轨迹，视为一段可分析、可验证的结构化程序。」&lt;/p&gt; 
&lt;p&gt;&lt;img height="130" src="https://oscimg.oschina.net/oscnet/up-0e1e1ff387120a6a890c7befa39e2246e82.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;AgentArmor 设计了三大核心组件：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;图构建器 (Graph Constructor) 负责将 AI Agent 运行时线性的行为轨迹实时转换为一个结构化的程序依赖图（Program Dependency Graph），捕获控制流和数据流，让 AI Agent 的「思维链」与「行为链」一目了然。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;属性注册表 (Property Registry) 一个丰富的安全元数据库，负责为图中的每一个节点（工具、数据）附加安全属性。对于未知的未知工具、MCP、三方服务等，自动挖掘其数据操作流程，生成对应安全等级。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;类型系统 (Type System) 类型即「安全等级」，类型系统将在程序依赖图上自动推导新节点的安全等级，并执行基于安全等级的策略校验，在风险行为发生前精准识别，并给出风险响应建议，如升密、降密、告警、拦截等&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;img alt="" height="386" src="https://oscimg.oschina.net/oscnet/up-9ffc8a59cc29a7227f91f929e290b9cd0b3.webp" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;在 AI Agent 工作时，AgentArmor 首先借助图构建器，将 AI Agent 运行过程中的执行轨迹迅速且精准地转化为程序依赖图，从而清晰呈现其控制流与数据流。接着，依靠属性注册表进一步完善程序依赖图，不仅详细添加 AI Agent 调用工具的内部数据流细节，还为程序依赖图中的数据节点与行为节点设置初始类型，以此赋予各节点安全属性。最后，通过类型系统全面完善整个图中的类型标签，并严格对程序依赖图开展类型检查，以切实防止任何不安全的操作出现，确保 AI Agent 的运行安全。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;AgentArmor 类型系统中囊括了三大类型，满足用户与社会对于 AI Agent 在不同侧面上的安全期待：&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:disc; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;strong&gt;信任类型——跨域互操作的信任建立&lt;/strong&gt;&lt;/p&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;确保 AI Agent 在与本地服务、云服务、其它多智能体交互时建立恰当的信任关系，能准确判别交互对象的可信度，避免因信任误判引发数据泄露或恶意代码执行等风险。例如，在与基于可信执行环境 (TEE) 的代码执行器交互时可以施加高信任，可共享必要数据；而与身份未知的外部智能体交互时则保持低信任和谨慎态度，如谨慎提供自身敏感信息，不随意执行对方指令。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul style="list-style-type:disc; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;strong&gt;安全类型——对外部攻击的健壮抵御&lt;/strong&gt;&lt;/p&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;使 AI Agent 拥有强大的防御机制，能够有效识别并抵御来自外部的各类攻击，像恶意指令注入、网络渗透等，保障自身系统的安全性与稳定性，维持正常的任务执行流程。例如，如果接收到由外部陌生人邮件触发的 App 转账指令，及时拦截上报，防止资金被盗取。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul style="list-style-type:disc; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;strong&gt;规则类型——对用户指令的忠实执行&lt;/strong&gt;&lt;/p&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;保证 AI Agent 绝对遵循用户下达的指令，不被外部干扰或恶意篡改任务目标，精确且完整地落实用户需求。例如，在电商场景中，如果用户要求购买 200 元以内的鞋子，则不能购买 200 元以上的鞋子；或者用户要求整理文档，AI Agent 就不能将其扭曲为删除指定文件。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;测试结果表明，&lt;span style="background-color:#ffffff; color:#3e3e3e"&gt;在 AI Agent 因遭受攻击而执行风险行为的案例中，AgentArmor 成功拦截比例达&lt;/span&gt;&lt;strong style="color:#3e3e3e"&gt;&lt;span&gt;93%&lt;/span&gt;&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#3e3e3e"&gt;。与未受保护相比，AgentArmor 将针对 AI Agent 的攻击成功率从&lt;/span&gt;&lt;strong style="color:#3e3e3e"&gt;&lt;span&gt;28%&lt;/span&gt;&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#3e3e3e"&gt;显著降至&lt;/span&gt;&lt;strong style="color:#3e3e3e"&gt;&lt;span&gt;4%&lt;/span&gt;&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#3e3e3e"&gt;；特别是在指令覆盖等攻击模式下，攻击成功率降至&lt;/span&gt;&lt;strong style="color:#3e3e3e"&gt;&lt;span&gt;0%&lt;/span&gt;&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#3e3e3e"&gt;。gentArmor 使 AI Agent 正常完成用户任务的能力从&lt;/span&gt;&lt;strong style="color:#3e3e3e"&gt;&lt;span&gt;73%&lt;/span&gt;&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#3e3e3e"&gt;轻微降至&lt;/span&gt;&lt;strong style="color:#3e3e3e"&gt;&lt;span&gt;72%&lt;/span&gt;&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#3e3e3e"&gt;，降幅仅&lt;/span&gt;&lt;strong style="color:#3e3e3e"&gt;&lt;span&gt;1%&lt;/span&gt;&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#3e3e3e"&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="221" src="https://oscimg.oschina.net/oscnet/up-70ccce23fd01a077c8096a063ed15ffa11d.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;AgentArmor 受「零信任」架构与理念启发，确保所有对外行为都经过输出验证。通过「运行态执行交互」与「控制态策略决策」双向联动，与 AI Agent 深度集成，在不改变其原有功能架构的前提下构建全流程安全防护体系，核心模块是：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;策略执行点 &lt;/strong&gt;&lt;span&gt;是执行枢纽，将 AI Agent 的不可信行为化为可信。一方面，镜像 AI Agent 的 LLM 调用流量，采集上下文，为策略决策提供输入；另一方面，根据策略决策点结果，允许可信调用通行，阻断或缓解不可信行为。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;策略决策点&lt;/strong&gt; &lt;span&gt;是智能决策核心，输出安全决策。先通过行为轨迹采集获取 AI Agent 行为信息，经行为表示转化后，结合动态策略生成与行为安全分析，识别风险并响应，进而对行为进行判断，输出策略决策结果给策略执行点。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;在 AI Agent 运行时，AgentArmor 的安全工作流是：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;行为采集&amp;nbsp;&lt;/strong&gt;&lt;span&gt;收到用户请求后，策略执行点以上下文为载体，采集 AI Agent 的不可信行为并传送至策略决策点。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;安全研判 &lt;/strong&gt;&lt;span&gt;策略决策点进行分析，将安全判断结果返回策略执行点。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;行为干预&amp;nbsp;&lt;/strong&gt;&lt;span&gt;策略执行点对不可信行为采取拦截、降密、审计等干预措施。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;此集成模式覆盖用户交互、LLM 调用、环境调用全链路，通过「行为数据-策略结果」实时联动，支持快速响应业务变化或新型攻击，使 AI Agent 「能干活」且「不闯祸」，形成「可感知、可干预、可进化」的安全共生体。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e3e3e; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;AgentArmor 的概念发布只是一个开始。未来，字节跳动安全研究团队将着力于 AgentArmor 核心技术的迭代升级，把目光聚焦在技术能力的产品化封装层面；同时，逐步把核心能力拓展至 AI Coding、ChatBI Agent、OS Agent 等垂直领域，为这些领域的智能应用提供支持。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#3e3e3e; margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;更重要的是，团队计划将 Jeddak AgentArmor 的核心框架开源。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368877</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368877</guid>
      <pubDate>Thu, 28 Aug 2025 02:04:40 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>​文心快码推出多项新功能，新增 Zulu-CLI 终端编码能力</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;文心快码近日发布了一系列新功能，旨在提升个人开发体验和企业级协作效率。这些新能力包括 Zulu-CLI 的引入、企业版自定义模型的支持、一键设置自动执行、复用相同终端以及本地代码库知识增强索引的支持等，让开发者的工作流程更加顺畅。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="299" src="https://oscimg.oschina.net/oscnet/up-f6685f643ab58132dff5a1efc8ccb851307.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;首先，Zulu-CLI 的推出使得开发者可以在终端中使用其强大的智能编码能力。通过自然语言命令，开发者无需离开熟悉的命令行界面，即可实现各种编码需求。为了顺利使用 Zulu-CLI，开发者需要确保环境符合要求，并根据各自的操作系统进行相应的安装。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;其次，文心快码企业版现在支持自定义模型。这一功能使企业能够根据自身的需求选择不同的大模型，从而灵活配置资源以满足不同场景的生成要求。企业管理者可以通过简单的设置，将公有大模型的相关信息进行配置，以便在 IDE 中进行模型选择。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;此外，文心快码的智能体现在执行指令时支持一键设置自动执行，极大地提升了 AI 生成与实际执行之间的流转效率。用户可以在同一个终端会话中连续执行指令，减少了打开新终端的次数，提升了操作的连贯性和资源利用效率。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在知识增强方面，文心快码现在支持对 SVN 仓库的本地代码库进行知识索引。系统会自动识别工作空间所用的版本控制工具，提供精准的代码建议和生成，帮助开发者更好地管理和维护代码。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;最后，文心快码也新增了对话中导出生成图片的功能，用户可以方便地将生成的架构图、流程图等导出为 SVG 或 PNG 格式，便于后续插入文档或共享给同事。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368829</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368829</guid>
      <pubDate>Mon, 18 Aug 2025 11:07:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>开源低代码引擎 TinyEngine 发布 v2.8.0</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;TinyEngine v2.8 已正式发布。&lt;/p&gt; 
&lt;p style="color:#1f2328"&gt;TinyEngine 是开源低代码引擎，使能开发者定制低代码平台，支持在线实时构建低码平台，支持二次开发或集成低码平台能力。主要特性如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;跨端跨框架前端组件&lt;/li&gt; 
 &lt;li&gt;支持在线实时构建、支持二次开发或被集成&lt;/li&gt; 
 &lt;li&gt;直接生成可部署的源码，运行时无需引擎支撑&lt;/li&gt; 
 &lt;li&gt;允许接入第三方组件、允许定制扩展插件&lt;/li&gt; 
 &lt;li&gt;支持高代码与低代码，混合开发部署应用&lt;/li&gt; 
 &lt;li&gt;平台接入 AI 大模型能力，辅助开发者构建应用&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;v2.8.0 变更特性概览&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;【增强】【AI 新特性】更新 robot 插件 UI 并新增 MCP 工具。&lt;/li&gt; 
 &lt;li&gt;【增强】【区块管理】添加区块双向绑定属性选择功能到事件表单。&lt;/li&gt; 
 &lt;li&gt;【增强】【物料】支持在物料列表中隐藏内置物料。&lt;/li&gt; 
 &lt;li&gt;【增强】【状态管理】应用状态仅允许 JSON 对象。&lt;/li&gt; 
 &lt;li&gt;【其他】升级 vue-repl、同步页面状态和全局状态的保存行为。&lt;/li&gt; 
 &lt;li&gt;【其他】支持前后端 Docker 部署。&lt;/li&gt; 
 &lt;li&gt;【其他】文档更新、功能细节优化与 bug 修复、mockserver 支持自定义数据库路径等等与一系列 bug 修复。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下载地址：&lt;em&gt;https://github.com/opentiny/tiny-engine/releases/tag/v2.8.0&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368828</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368828</guid>
      <pubDate>Mon, 18 Aug 2025 11:00:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>腾讯工程师向 Linux 内核提交补丁，引入 Swap Table 架构</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;腾讯工程师 Kairui Song&amp;nbsp;近日向 Linux 内核邮件列表&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flkml%2F20250822192023.13477-1-ryncsn%40gmail.com%2F" target="_blank"&gt;提交&lt;/a&gt;了新补丁，提议引入新架构 Swap Table——将 swap cache、swap 映射和 swap 分配器整合在一起，成为新的后端基础设施。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1036" src="https://static.oschina.net/uploads/space/2025/0827/183312_QdxM_2720166.png" width="1190" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;据介绍，最新的 Phase I 补丁共包含 9 个改动，已经展现出明显成效。在多项测试中，无论是小型 ARM 设备还是大型 x86_64 服务器，性能均有提升：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;整体加速约 5%–20%；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在虚拟机可扩展性场景下，部分测试提升超过 &lt;strong&gt;20%&lt;/strong&gt;；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;内核构建时间缩短数个百分点；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Redis、Valkey 等内存数据库吞吐量提升 6%–7&lt;strong&gt;%&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;这项优化不仅带来了更高吞吐与更低延迟，还减少了内存占用，为后续扩展和功能优化奠定了基础。事实上，今年 5 月的第一轮 Swap Table 补丁已经显示过 20–30% 的性能增益，此次进一步强化了该方向的潜力。&lt;/p&gt; 
&lt;p&gt;尽管部分开发者认为现代系统往往减少或关闭 swap 使用，但社区普遍认可该改进对，高负载场景与虚拟化环境的价值。随着补丁的逐步推进，这一优化有望在未来的 Linux 内核中成为默认机制，为系统带来更稳定、更高效的内存管理能力。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368823</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368823</guid>
      <pubDate>Mon, 18 Aug 2025 10:38:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Gonzo - 基于 Go 的 TUI 日志分析工具</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                        
                                                                                    &lt;p&gt;&lt;span style="background-color:#ffffff; color:#1f2328"&gt;受 K9s 启发的强大实时日志分析终端 UI。使用精美的图表、AI 洞察和高级筛选功能分析日志流 - 一切尽在你的终端。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img height="362" src="https://static.oschina.net/uploads/space/2025/0826/152706_jR8k_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

&lt;div style="text-align:start"&gt;
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;特点&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;/div&gt;

&lt;div style="text-align:start"&gt;
&lt;h3 style="text-align:start"&gt;Real-Time Analysis&lt;/h3&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实时流&amp;nbsp;&lt;/strong&gt;- 处理来自标准输入、文件或网络的日志&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OTLP 原生&amp;nbsp;&lt;/strong&gt;- 对 OpenTelemetry 日志格式的一流支持&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OTLP 接收器&amp;nbsp;&lt;/strong&gt;- 内置 gRPC 服务器，通过 OpenTelemetry 协议接收日志&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;格式检测&amp;nbsp;&lt;/strong&gt;- 自动检测 JSON、logfmt 和纯文本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;严重程度跟踪 -&amp;nbsp;&lt;/strong&gt;使用分布图以颜色编码的严重程度级别&lt;/li&gt;
&lt;/ul&gt;

&lt;div style="text-align:start"&gt;
&lt;h3 style="text-align:start"&gt;Interactive Dashboard&lt;/h3&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;受 k9s 启发的布局&amp;nbsp;&lt;/strong&gt;- 熟悉的 2x2 网格界面&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实时图表&lt;/strong&gt; -&amp;nbsp;词频、属性、严重性分布、时间序列&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;键盘 + 鼠标导航&amp;nbsp;&lt;/strong&gt;- Vim 风格的快捷键以及点击导航和滚轮支持&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;智能日志查看器&amp;nbsp;&lt;/strong&gt;- 自动滚动，具有智能暂停/恢复行为&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全局暂停控制&amp;nbsp;&lt;/strong&gt;- 空格键在缓冲日志时暂停整个仪表板&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模态细节&lt;/strong&gt; -&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;通过可扩展视图深入查看单个日志条目&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日志计数分析&amp;nbsp;&lt;/strong&gt;- 具有热图可视化、按严重程度进行模式分析和服务分布的详细模型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;人工智能分析 &lt;/strong&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;通过可配置模型获得有关日志模式和异常的智能洞察&lt;/li&gt;
&lt;/ul&gt;

&lt;div style="text-align:start"&gt;
&lt;h3 style="text-align:start"&gt;Advanced Filtering&lt;/h3&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;正则表达式支持 -&amp;nbsp;&lt;/strong&gt;使用正则表达式过滤日志&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;属性搜索&amp;nbsp;&lt;/strong&gt;- 通过特定属性值查找日志&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;严重性过滤&amp;nbsp;&lt;/strong&gt;- 关注错误、警告或特定日志级别&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交互式选择&amp;nbsp;&lt;/strong&gt;- 单击或使用键盘导航来浏览日志&lt;/li&gt;
&lt;/ul&gt;

&lt;div style="text-align:start"&gt;
&lt;h3 style="text-align:start"&gt;AI-Powered Insights&lt;/h3&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模式检测&amp;nbsp;&lt;/strong&gt;- 自动识别重复出现的问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异常分析&amp;nbsp;&lt;/strong&gt;- 发现日志中的异常模式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;根本原因建议&amp;nbsp;&lt;/strong&gt;- 获取 AI 驱动的调试帮助&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可配置模型&lt;/strong&gt;-从 GPT-4、GPT-3.5 或任何自定义模型中选择&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多个提供商&amp;nbsp;&lt;/strong&gt;- 可与 OpenAI、LM Studio、Ollama 或任何与 OpenAI 兼容的 API 配合使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;本地 AI 支持&amp;nbsp;&lt;/strong&gt;- 使用本地模型完全离线运行&lt;/li&gt;
&lt;/ul&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/gonzo</link>
      <guid isPermaLink="false">https://www.oschina.net/p/gonzo</guid>
      <pubDate>Mon, 18 Aug 2025 10:17:00 GMT</pubDate>
    </item>
    <item>
      <title>Linux 内核古老的软盘驱动在 2025 年迎来代码维护</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Linux 内核中最古老的组件之一——软盘驱动（Floppy Disk Driver），迎来了久违的维护更新。尽管软盘早已退出主流舞台，但在某些工业控制设备和复古计算场景中依然有人使用，因此该驱动仍被保留在内核中。&lt;/p&gt; 
&lt;p&gt;此次补丁由 Intel 工程师 &lt;strong&gt;Andy Shevchenko&lt;/strong&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flkml%2F20250825163545.39303-1-andriy.shevchenko%40linux.intel.com%2F" target="_blank"&gt;提交&lt;/a&gt;，主要是代码清理工作，包括：&lt;strong&gt;移除未使用的宏、替换常量、整理头文件顺序、合并并修正旧补丁&lt;/strong&gt;中的问题等。虽然没有引入新功能，但有助于提升代码质量和后续可维护性。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1010" src="https://static.oschina.net/uploads/space/2025/0827/180737_e7qi_2720166.png" width="1212" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;这也是软盘驱动近三年来的首次显著更新。目前补丁系列正处于社区评审阶段，供仍需在现代 Linux 系统上使用软盘的用户参考与测试。&lt;/p&gt; 
&lt;p&gt;尽管软盘看似过时，但在高价值的老旧机械与特殊工业环境中，软盘依然有现实作用，因此 Linux 保留并维护其驱动具有一定必要性。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368810</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368810</guid>
      <pubDate>Mon, 18 Aug 2025 10:08:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Linux 34 岁生日快乐！</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;你知道吗？34 年前的今天，历史上最重要的软件项目之一，在 Usenet 新闻组上的一篇不起眼的帖子中诞生了。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2019/0826/211817_vyJK_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;这个项目就是 Linux 内核。当时，21 岁的 Linus Torvalds 说，这只是个业余爱好，不会做大做强，也不会成为专业的项目，很显然他错了。&lt;/p&gt; 
&lt;p&gt;Linus Torvalds 最初将 Linux 内核作为个人爱好，但从未想过将其发展成专业版本。初始项目于 1991 年 4 月启动，到 1991 年 7 月，他已开始着手用户级方面的工作，例如设备驱动程序和可运行的硬盘。其他早期里程碑包括移植 bash 和 gcc，并于 1991 年 9 月向一小部分用户开放了 0.01 版本的首批源代码。&lt;/p&gt; 
&lt;p&gt;有趣的是，Linux 的最早版本 0.01 仅仅是源代码，实际上无法运行。Linus Torvalds 曾表示，发布这个版本只是为了向当时感兴趣的人表示一个象征性的姿态。另一个有趣的细节是，早期版本的 Linux 不可移植，并且依赖于 i386 特性和 GCC 编译器——值得注意的是，2012 年发布的 3.8 版内核中已经取消了对 i386 的支持。&lt;/p&gt; 
&lt;p&gt;Linux 内核终于在 1991 年 10 月发布了 0.02 版本，正式投入使用。作为第一个可用的版本，这是一个重要的进步。尽管如此，它仍然是一个「黑客内核」，存在大量 bug，并且缺少软盘驱动程序等功能。然而，它能够成功运行重要的二进制文件，例如 bash、gcc 和 GNU 实用程序。&lt;/p&gt; 
&lt;p&gt;1991 年 12 月发布的 0.11 版本，系统得到了进一步改进，包括按需加载、代码/数据共享、更优的驱动程序以及对各种键盘和显卡的支持。0.11 版本也是一个重要的里程碑，因为它首次包含了 mkfs、fsck 和 fdisk 等程序，从此用户不再需要使用 Minix 进行设置。&lt;/p&gt; 
&lt;p&gt;大约在这个时候，Linux 内核从最初的独立开发演变为协作开发，并加入了一些其他人编写的新功能，例如 tytso 开发的 POSIX 作业控制。随着越来越多的人开始了解 Linux，第一个邮件列表「Linux-activists」应运而生，同时还创建了用于 FTP 访问的镜像站点。&lt;/p&gt; 
&lt;p&gt;社区帮助解决了一个关键问题，即需要以更少的内存运行系统，这促使 Linus Torvalds 实现了磁盘分页。内核最初使用的版权制度也颇具趣味。它既宽松，又有限制，因为它不允许金钱交易，后来这一制度被修改了。&lt;/p&gt; 
&lt;p&gt;随着 1992 年 1 月 0.12 版本的发布，内核变得非常稳定，并开始更快地传播。该版本包含一些重大修正、VM（磁盘分页）和作业控制，以满足关键用户需求。此时，Linux 在许多方面都比 Minix 做得更好，引起了人们的极大兴趣。此后，版本号从 0.12 跃升至 0.95。&lt;/p&gt; 
&lt;p&gt;自这些早期版本发布以来，Linux 经历了漫长的历程，Linux 6.17 的第三个候选版本昨天刚刚发布。虽然 Linux 在个人计算设备上的吸引力不大，市场份额徘徊在 5% 左右，但它在其他领域取得了巨大的成功。它在服务器上广泛使用，为大多数云基础设施提供支持，在全球大多数超级计算机上运行，它存在于许多嵌入式设备中，并且是 Android 的核心。&lt;/p&gt; 
&lt;p&gt;Linux 34 岁生日快乐！&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0827/175630_INlj_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368806</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368806</guid>
      <pubDate>Mon, 18 Aug 2025 09:58:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Rust 前端打包工具 Rspack 1.5 发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Rspack 1.5 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FuLYu-6uHUL8t_QHkwBBoHw" target="_blank"&gt;已发布&lt;/a&gt;！&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-b804d4863b0bed82ab46912a96736e3d428.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Rspack （读音为&lt;code&gt;/'ɑrspæk/&lt;/code&gt;）是基于 Rust 语言开发的 Web 构建工具，拥有高性能、兼容 Webpack 生态、定制性强等多种优点。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;特性&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;启动速度极快&lt;/strong&gt;: 基于 Rust 实现，构建速度极快，带给你极致的开发体验。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;闪电般的 HMR&lt;/strong&gt;: 内置增量编译机制，HMR 速度极快，完全胜任大型项目的开发。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;兼容 webpack 生态&lt;/strong&gt;: 针对 webpack 的架构和生态进行兼容，无需从头搭建生态。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;内置常见构建能力&lt;/strong&gt;: 对 TypeScript、JSX、CSS、CSS Modules、Sass 等提供开箱即用的支持。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;默认生产优化&lt;/strong&gt;: 默认内置多种优化策略，如 Tree Shaking、代码压缩等等。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;框架无关&lt;/strong&gt;: 不和任何前端框架绑定，保证足够的灵活性。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Rspack 1.5 值得关注的变更如下：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;新功能&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Barrel 文件优化&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;更快的文件系统监听器&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;改进浏览器支持&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用 Rust 扩展 Rspack&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;常量内联优化&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;类型重导出分析&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;内置虚拟模块插件&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;模块联邦运行时提升&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;安装体积优化&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Seal 阶段性能优化&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;不再支持 Node.js 16&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Resolver JavaScript API&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Rstack 进展&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Rslint 发布&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Rsbuild 1.5&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Rslib 0.12&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Rspress 2.0 beta&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Rsdoctor 1.2&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Rstest 0.2&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下载地址：&lt;em&gt;https://github.com/web-infra-dev/rspack/releases/tag/v1.5.0&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368804/rspack-1-5</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368804/rspack-1-5</guid>
      <pubDate>Mon, 18 Aug 2025 09:53:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Linux 6.17-rc3 发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Linus Torvalds 于 8 月 24 日在欧洲旅行途中发布了 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flkml%2FCAHk-%3DwgKmy%2BgOftf32wT86F%2BmSvdq2%3DXZe8Tcb5m0NaQTZt-dg%40mail.gmail.com%2FT%2F%23u" target="_blank"&gt;&lt;strong&gt;Linux 6.17-rc3&lt;/strong&gt;&lt;/a&gt;。本次候选版相比 rc2 略大一些，但 Linus 表示整体仍处于正常范围，开发进展顺利。&lt;/p&gt; 
&lt;p&gt;&lt;img height="936" src="https://static.oschina.net/uploads/space/2025/0827/174700_R9Ll_2720166.png" width="1124" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;更新重点集中在&lt;strong&gt;驱动程序&lt;/strong&gt;（约占一半改动，其中 Mellanox mfx5 尤为突出）、&lt;strong&gt;Rust 支持&lt;/strong&gt;增强、更多&lt;strong&gt;自测代码&lt;/strong&gt;，以及内核多个子系统的修复，包括体系结构、文件系统、虚拟内存和网络核心。&lt;/p&gt; 
&lt;p&gt;安全方面，修复了 pidfs 与 iommufd 的内存泄露问题，更新了 SCSI 子系统（新增 Intel Wildcat Lake 支持），并修补了 lib/crypto 与 IPv6 的漏洞，同时改进了 USB 和 DRM 驱动。&lt;/p&gt; 
&lt;p&gt;Linus 强调一切进展如常，预计在第七个 RC 版本后将正式发布 Linux 6.17。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368802/linux-6-17-rc3-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368802/linux-6-17-rc3-released</guid>
      <pubDate>Mon, 18 Aug 2025 09:47:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>GPT-5 通关宝可梦，创下 9517 步新纪录</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;在一场精彩绝伦的宝可梦对决中，AI 新星 GPT-5 以 9517 步的佳绩成功通关经典游戏《宝可梦水晶》，击败了游戏中的终极对手赤爷（Red）。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;根据推特博主 Clad3815 的统计，GPT-5 的通关步数远远低于其前任 o3 的 27040 步，后者几乎是 GPT-5 的三倍。这意味着 GPT-5 只需短短 202 小时就能完成这一挑战，而 o3 则需要近一个月的时间。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="282" src="https://oscimg.oschina.net/oscnet/up-faf237726bfb0ad5409fdc8bf6508fb0f9a.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;游戏中，玩家需要从小镇出发，收集徽章，挑战道馆馆主，最终与赤爷对决。GPT-5 如同小智一般，沿着主线一路推进，收集全部 16 枚徽章时，仅用了 9205 步，而 o3 则耗费了 22334 步。更为惊人的是，从收集完徽章到击败赤爷的阶段，GPT-5 仅需 312 步，而 o3 却花费了将近 5000 步，效率提高了十几倍。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;在四天王和冠军的挑战中，GPT-5 同样展现了超高效率，仅用 7329 步，o3 则用了超过 18000 步。在通关《宝可梦水晶》之前，GPT-5 还成功挑战了《宝可梦红》，同样取得了压倒性胜利。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;OpenAI 的联合创始人 Greg Brockman 对此次表现也表示赞赏。那么，究竟是什么让 GPT-5 如此高效呢？Clad3815 总结了几个关键因素：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:left"&gt;&lt;span style="color:#000000"&gt;幻觉少，速度快：GPT-5 在游戏过程中出现的 「幻觉」 现象明显减少，极大提高了它的速度。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:left"&gt;&lt;span style="color:#000000"&gt;空间推理强：GPT-5 在复杂区域中几乎不迷路，能够有效规划行动序列，节省了大量时间。&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:left"&gt;&lt;span style="color:#000000"&gt;目标规划优越：在执行目标和任务规划方面，GPT-5 展现出了卓越的能力。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;有趣的是，宝可梦这款经典游戏被认为是 AI 能力的一个 「新基准」，为大型语言模型的决策能力、上下文理解和界面控制能力提供了测试平台。然而，挑战这款游戏的成本不菲，一位网友估计 GPT-5 在通关《宝可梦红》时，花费了大约 3500 美元（约 2 万 5 人民币）的 API 额度。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368791</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368791</guid>
      <pubDate>Mon, 18 Aug 2025 09:22:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>联合国大会通过决议设立全球人工智能治理新机制</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;联合国大会 26 日就全球人工智能治理通过一项决议，决定设立「人工智能独立国际科学小组」和「人工智能治理全球对话」机制，以促进可持续发展和弥合数字鸿沟。&lt;/p&gt; 
&lt;p&gt;根据联大当天通过的《人工智能独立国际科学小组和人工智能治理全球对话的职权范围和设立及运作方式》决议，联合国将设立一个由 40 名专家组成的小组，以评估人工智能的风险、机遇和影响。此外，联合国将开展全球对话，开展政策讨论并达成共识，以加强全球人工智能治理，支持可持续发展目标并弥合数字鸿沟。&lt;/p&gt; 
&lt;p&gt;代表「77 国集团和中国」发言的伊拉克代表表示，如果以负责任和包容的方式部署人工智能，并服务于实现可持续发展目标，人工智能将有望变革公共服务、教育、衞生和数字经济，同时加速 2030 年议程的实现。这些益处的实现取决于一个公平和包容的国际治理框架，以确保公平获取人工智能，防止差距扩大，并考虑人工智能的社会、经济、伦理、文化和技术影响。让发展中国家充分参与塑造人工智能治理的未来至关重要，在这一过程中必须遵循主权、公平和透明的原则。&lt;/p&gt; 
&lt;p&gt;代表欧盟发言的丹麦代表说，新的机制将通过促进共享知识、共同理解和汇集经验，促进联合国会员国在人工智能领域的能力建设，尤其惠及发展中国家，并将很快成为继续推进联合国人工智能讨论的宝贵工具。&lt;/p&gt; 
&lt;p&gt;联合国秘书长古特雷斯的发言人当天发表声明说，古特雷斯对联大通过决议决定在联合国内设立两个新机制表示欢迎。秘书长不久将公开征集科学小组成员的提名，该小组将在 2026 年和 2027 年分别于日内瓦和纽约举行的人工智能治理全球对话上提交其年度报告。（新华社）&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368781</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368781</guid>
      <pubDate>Mon, 18 Aug 2025 08:56:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>阿里达摩院发布玄铁 E901，最小面积 RISC-V 处理器</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;阿里巴巴达摩院发布了 RISC-V 精简处理器玄铁 E901，面积相较玄铁之前的嵌入式系列处理器大幅缩小 39% ，同时单位能效性能提升 48%，动态功耗优化 48%，广泛适配从智能家居、可穿戴设备到车载控制单元的多样化应用场景。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1586" src="https://static.oschina.net/uploads/space/2025/0827/164024_WZeY_2720166.png" width="954" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;据悉，玄铁 E901 将最小配置面积在 40nm 下压缩到 10.7 千门，相较其他玄铁 E 系列处理器实现了 39% 的面积优化，尤其适合对封装尺寸和成本敏感的嵌入式场景。在能效方面，玄铁 E901 深度优化功耗设计，单位能效性能提升 48%，动态功耗优化 48%，契合物联网设备对长续航和低功耗休眠的要求。多轮验证测试显示，玄铁 E901 在典型工作负载下达到 1.34 DMIPS/MHz 的指令执行效率和 2.78 CoreMark/MHz 的综合性能指标，兼顾超小面积与超高能效。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;此外，玄铁 E901 引入了协处理器接口，用户可以自主定制指令扩展模块，并与玄铁工具链和生态软硬件无缝集成，大幅缩短产品从设计到量产的周期。&lt;/p&gt; 
&lt;p&gt;达摩院玄铁 RISC-V 产品总监陈江杉表示，E901 以更小的体积、更高的代码密度和更灵活的架构架构设计，为嵌入式领域带来全新技术范式，有望加速嵌入式系统在 AI 时代的创新发展。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368772</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368772</guid>
      <pubDate>Mon, 18 Aug 2025 08:41:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>斯坦福大学最新研究：生成式 AI 重创「高度可自动化」岗位</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftime.com%2F7312205%2Fai-jobs-stanford%2F" target="_blank"&gt;斯坦福大学一项最新研究指出&lt;/a&gt;，自 ChatGPT 发布以来，美国年轻人中从事「高度可自动化」岗位（如软件开发、客服、翻译）的就业率明显下降：22–25 岁软件开发人员数量较 2022 年底锐减近 20%，而年长开发者因具备难以被 AI 复制的软技能基本未受影响。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;软件开发人员&lt;/strong&gt;：以 22 至 25 岁的软件开发人员为例，截至 2025 年 7 月，该群体雇员人数较 2022 年底的峰值下降近 20%&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;年龄层分化&lt;/strong&gt;：26 至 30 岁员工的岗位数量基本持平，而更年长的劳动者人数则继续增长&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;其他岗位&lt;/strong&gt;：客服代表、翻译等岗位也呈现类似下降趋势，进一步证实 AI 对就业的冲击&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;研究借助 ADP 详实数据控制宏观因素后确认，AI 替代是主要推手，且初级岗位减少可能阻断下一代专家的成长路径。与此同时，AI 起「增强」而非「替代」作用的领域（如 AI 辅助医疗诊断）里，年轻雇员就业增长高于平均，显示「增强人类能力」的路线有望带来净就业增长。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-7b5d8b5e7f4e6e5f2b903ce742d7513e7aa.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-66c683debca8fac4a0b68bc80d51e3b2c23.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;研究指出，资深开发者因具备难以被 AI 复制的软技能（如与非技术团队协作、交付商业级产品），受冲击较小。然而，这也带来一个潜在悖论：如果年轻开发者赖以积累经验的初级任务已被 AI 取代，下一代专家将如何培养？因此作者建议，必须更系统地培训新人，而不能仅依赖日常工作中自然习得（用系统培训取代传统的「边干边学」）。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368769</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368769</guid>
      <pubDate>Mon, 18 Aug 2025 08:34:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>​Meta 新超级智能实验室遭遇离职潮</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;Meta 公司&lt;span&gt;最新&lt;/span&gt;成立的&lt;span&gt;超级&lt;/span&gt;智能实验室（Meta Superintelligence Labs）刚成立两个月，就传出多名人工智能研究人员辞职的消息。该实验室是由 CEO 马克・扎克伯格亲自推动成立的，旨在吸引&lt;span&gt;顶尖&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;AI 人才，迅速在人工智能领域追赶竞争对手。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="249" src="https://oscimg.oschina.net/oscnet/up-4bf9ed3e2c4d738f70444a66e35b116229b.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;据了解，至少有三名研究人员已经从 Meta 辞职，其中两名曾在 OpenAI 工作，分别是 Avi Verma 和 Ethan Knight。他们在 Meta 工作不到一个月就选择返回 OpenAI。Avi Verma 之前在 OpenAI 担任研究员，而 Ethan Knight 则是从埃隆・马斯克创立的 xAI 公司加入 Meta 的。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;第三名研究员 Rishabh Agarwal 也在社交媒体上宣布了离职消息。他在四月加入 Meta，最初专注于生成式 AI 项目，但随后转至&lt;span&gt;超级&lt;/span&gt;智能实验室。虽然 Agarwal 离职的原因尚不清楚，但他目前居住在加拿大，而 Meta 的 AI 团队主要位于加州门洛帕克。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在社交媒体上，Agarwal 表示，虽然在新实验室工作与周围的优秀人才和技术资源相伴，他仍然做出了艰难的决定，选择迎接不同的挑战。Meta 公司发言人 Dave Arnold 对此表示，许多人在经历强烈的招聘过程后，选择留在现有职位而非转职是很正常的现象。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;此外，Meta 还失去了另一位&lt;span&gt;领导者&lt;/span&gt;，Chaya Nayak，她担任生成式 AI 产品管理总监，现已加入 OpenAI 从事特别项目。Verma 和 Knight 没有对辞职事宜作出回应，而 Nayak 在截止发稿时也未作评论。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;这些离职事件是对 Meta&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;超级&lt;/span&gt;智能实验室开局状况的强烈警示。扎克伯格曾通过高达九位数的薪资吸引人才，试图在人工智能通用性研究的竞争中迅速缩小差距。然而，Meta 高层似乎在解决与 AI 项目相关的官僚问题和招聘挑战上面临困难。公司近期还多次对 AI 团队进行了重组，&lt;span&gt;最新&lt;/span&gt;一次则是将员工划分为四个小组。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;虽然 Meta 在人才招聘上进行了一系列努力，但最近传出该公司已开始放缓招聘步伐，显示出人力资源战略的调整。与此同时，Meta 还与其他 AI 初创公司达成了一些合作协议，进一步推动其研究与开发。Meta 新任首席 AI 官 Alexandr Wang 在最近的声明中提到，该公司已与专注于 AI 生成图像和视频的 Midjourney 达成技术合作协议。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368765</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368765</guid>
      <pubDate>Mon, 18 Aug 2025 08:20:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>ChatGPT 被指控导致美国 16 岁少年自杀</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;16 岁的亚当·雷恩（Adam Raine）自杀前，曾花了数月时间咨询 ChatGPT，商讨结束生命的计划。据《纽约时报》&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.nytimes.com%2F2025%2F08%2F26%2Ftechnology%2Fchatgpt-openai-suicide.html" target="_blank"&gt;报道&lt;/a&gt;，如今，他的父母正在向 OpenAI 提起首例已知的非正常死亡诉讼。&lt;/p&gt; 
&lt;p&gt;许多面向消费者的人工智能聊天机器人都被设定为，当用户表现出伤害自己或他人的意图时，就会启动安全功能。但&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fpdf%2F2507.02990" target="_blank"&gt;研究&lt;/a&gt;表明，这些保障措施远非万无一失。&lt;/p&gt; 
&lt;p&gt;以雷恩为例，在使用付费版 ChatGPT-4o 时，AI 经常会建议他寻求专业帮助或联系求助热线。然而，他却能绕过这些限制，只需告诉 ChatGPT，他正在为正在创作的虚构故事询问自杀方法即可。&lt;/p&gt; 
&lt;p&gt;OpenAI 在其博客上讨论了这些缺陷。「随着世界逐渐适应这项新技术，我们深感有责任帮助那些最需要帮助的人」，博文&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenai.com%2Findex%2Fhelping-people-when-they-need-it-most%2F" target="_blank"&gt;写道&lt;/a&gt;。「我们正在不断改进我们的模型在敏感交互中的响应能力。」&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0827/160639_X2LA_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;尽管如此，该公司承认现有大型模型安全训练存在局限性。「我们的保障措施在常见的短时间交流中更可靠」，帖子继续说道。「随着时间的推移，我们了解到，这些保障措施在长时间互动中有时会变得不那么可靠：随着来回次数的增加，模型的部分安全训练可能会下降。」&lt;/p&gt; 
&lt;p&gt;这些问题并非 OpenAI 独有。另一家人工智能聊天机器人制造商 Character.AI 也因其在青少年自杀事件中所扮演的角色而面临诉讼有关。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368762</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368762</guid>
      <pubDate>Mon, 18 Aug 2025 08:06:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>库存平台稳定性建设实践</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;库存平台面临的稳定性挑战&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;库存平台为货品流通链路提供全面的库存管理服务，贯穿其整个订单生命周期，是电商领域不可或缺的核心模块。在平台建设过程中，我们面临了诸多稳定性方面的挑战。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;具体而言，存在以下问题：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、业务流程繁多，不同流程共同访问同一应用，容易相互影响。例如，销售单库存预占功能出现问题时，退供预占功能亦随之失效。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//0dd631d88614d5d8ab73959c8b94ba1a.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、业务流程复杂，修改易出错。销售单预占等流程，流程分支多、步骤多，新入职的员工需要至少一周的时间才能理解这些流程。对如此复杂的流程进行修改极易导致错误。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3、库存数据的准确性要求极高。一旦某一货品的库存信息出现错误，可能导致该货品后续的订单都无法正常下单或无法履约。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;4、数据库热点操作带来的稳定性威胁。秒杀活动、直播促销等业务场景，往往会出现短时间内多个订单都去预占某一个或几个商品库存的情况。多个线程并发对同一个数据库商品数据做库存扣减时，数据库中会加锁来保障数据被正确操作。当商品数据足够【热】时，大量的锁等待会引发性能问题，进而导致系统不可用，见下图：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//5439076b1852e7d995740a149371e549.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;5、店铺库存高频、大规模计算带来的稳定性威胁。一个商家的库存发生变动后，需要把商家库存重新分配给商家名下的各个店铺，这个分配过程计算量极大，容易把 CPU 打满，进而影响所有服务&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_2"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;库存平台稳定性建设&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;为了应对库存平台所面临的稳定性挑战，除了通用的可用率可视化、限流等治理措施外，我们还结合库存业务的特点，采取了以下稳定性建设。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_3"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;流量拆分&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我们识别到，库存流量有以下几个特点：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、存在必须要重点保障的核心流量。销售单库存预占能力属于物流核心流程，其目的是为京东物流仓配业务提供出库单库存校验服务，从而避免订单量超出库存容量而错误地传递到仓库管理系统（WMS）中，在接单链路中若库存操作失败则订单接单失败，造成公司大量的财产损失&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、存在一些计算量大又不需要实时处理的流量。如 WMS 出库以后，需要回传库存出库情况，这部分流量很高，但对处理实时性要求不高&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3、存在一些明细行特别多的库存批量操作。以销售单库存预占为例，绝大部分库存操作批量大小在 10 个以内，但是也存在部分批量大小超过 6000 的情况。不同的批量大小，调用方需要有不同的超时配置，如批量大小在 10 个以内，超时时间配置为 500 毫秒；批量大小大于 6000 时，超时时间需要配置为 50 秒&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;基于流量的这些特点，我们对库存流量拆分如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//b5433f5707bbb0c52fa5e71b4e85fb26.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;注：流量拆分使用不同的服务分组实现&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_4"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;灰度链路&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;针对库存操作流程复杂且改动容易出错的情况，我们在过往的上线过程中，通常会使用 ducc 编写一个流程开关，逐步进行灰度放量。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;然而，这种做法存在两个主要问题：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、维护成本较高。需求经过验证后，仍需再次上线以移除不再使用的开关，但往往因疏忽而未能及时下线，导致代码中充斥着冗余的开关，逻辑变得混乱。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、容易引发线上问题。大型需求的改动点通常较多，需要在多个地方添加开关，稍有不慎便可能遗漏，从而导致线上问题频发。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我们识别到，库存业务通常在一个商家范围内进行。因此，库存操作的核心接口均包含以商家为单位的参数。在进行灰度验证时，可以按商家单位进行灰度切量。基于这一特性，库存系统构建了以商家为基础的灰度链路。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//4667423b81eff14e463130bb335a2708.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;相较于以往的灰度方法，灰度链路无需在每次需求变更时增加流程控制代码，从而降低了线上出现问题的概率。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_5"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;操作数量校验&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对于某一货品的库存操作，将变更一条或多条库存记录。例如，在依据渠道优先级进行出库操作时，将优先扣减京东渠道的库存，再扣减共享渠道的库存。当某一货品的操作涉及多条库存记录时，需为每条库存记录分配相应的操作数量。操作完成后，应为每条记录生成变更记录流水。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;针对这个业务现状，我们进行了库存流水加和校验：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//6c75259e3fbcbd209848e47d2a05a6c0.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_6"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;数据库热点操作应对&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;当商家出售爆款商品时，会频繁扣减特定库存记录。在操作数据库的过程中，数据库会对库存记录进行加锁，并按顺序执行这些扣减操作。这导致容器中积累了大量等待的线程和数据库连接，一方面可能导致服务请求超时，另一方面，大量占用容器资源可能引发容器宕机，进而影响其他商品的库存操作。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;倘若采取粗暴的限流措施，将导致大量库存扣减失败，并且连非热门商品也会受到波及，造成不良影响。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_7"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;使用 redis 缓存解决热点&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我们的初版的解决方案是在缓存中添加库存数据，利用缓存的高效性能来应对热点问题。我们按商家的粒度逐步在灰度链路中进行流量切换，具体如下图所示。：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//36a53f49512433e17a67e7bbc1943745.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通过此项优化，成功将热点商品预占 TPS 从 50 提升到 1200，提升了 24 倍。TP99 降低到 130ms，降低至原时长的 4.3%（从 3000ms 到 130ms）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;橙色部分为优化后的结果：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//43fe9c9c9d90b0c0f3534b11c18f7097.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h2_8"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在切量过程中，我们发现了两个问题：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、数据库与 Redis 数据存在不一致的情况。由于某些业务场景考虑不周全，导致数据库与 Redis 数据出现不一致，而这些问题往往需要通过商家或下游的反馈才能被发现并修复。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、部分关键客户商家难以进行灰度切量。一些大型关键客户商家在处理库存时，存在定制化的特殊处理逻辑，使用缓存来支撑这些逻辑的成本较高且容易出错。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_9"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;解决数据库与 Redis 数据不一致问题方案&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;span id="OSC_h4_10"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;从操作流程上保障数据库与 redis 一致&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;操作流程上面临的主要技术问题如下图：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//14f7c88a0a17f229a43b9ca10a9d466f.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;初始化流程方案。使用，锁定 db 库存+redis 事务来保障数据一致性。见下图：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//0ff947ad0089fb30c510520a3982c119.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;数据同步流程。使用 mq 重试+任务系统兜底来保障同步能完成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//8735e6ded85819ead7c83b098c26bbf4.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h4_11"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;数据库、redis 数据一致性校验&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;库存平台每日执行数百万次库存操作，如何在不影响系统性能的同时及时发现数据不一致的情况，是一个需要仔细权衡的问题。我们采取了以下解决方案：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//88cbd979f1614f5a9fe80b15a84c34ab.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h4_12"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;增加缓存流水&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;当发现有数据库-redis 数据不一致时，我们需要有数据来协助我们定位不一致问题发生的原因，所以在 es 中增加了 redis 缓存操作的流水记录，如下图：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//39ff034eedd2ba1f46f8dbfe777421bc.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h4_13"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;数据库、redis 数据查询、操作管理能力&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我们开发了管理页面，支持以商家、货品、单据等维度来查询并操作数据库、redis 数据，界面如下图：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//1c209fe0500cfc9eb5a0c734b80026a2.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h3_14"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;解决关键客户商家难以使用 redis 缓存问题&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一些大型关键客户商家在处理库存时，存在大量定制化的逻辑，在缓存中实现一次不仅成本高，还容易出现错漏。针对这部分商家，我们采用了以下治理思路。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h4_15"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;异步限流&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;设计思路：让热点不那么热&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#7437dd"&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通过减缓预占操作速度，从而降低热点热度，缓解库存系统的性能压力。见下图：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//c9dee62bccfa80a86ad8434e67b870f2.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h4_16"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;热点检测、限流&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;设计思路：及时识别热点库存，对热点库存实施流量控制，从而确保系统的稳定性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;流量控制采用滑动窗口算法。实现原理：每当经过一个时间点，时间窗口即向前推进一个单位，计算该窗口内的请求数量。若请求数量超出预设限制，则拒绝处理请求；反之，则予以处理。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//adc0fdf38c1c2397195f25dd94c270f4.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;具体实现使用 AOP 切面编程，流程如下图：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//71f9e9b6526c1cbed664461ebb61d256.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;注：限流流程在 try-catch 中执行，中间除了【被限流异常】，别的异常都捕获吞掉，防止影响正常逻辑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;热点限流告警示例：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//a0410309eb99f35f48c8ac98dc29752d.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h2_17"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;店铺库存稳定性建设 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;商家通过入驻京仓来管理其线上与线下销售渠道的库存。京仓是一个综合性的仓储管理系统，它帮助商家有效地整合和管理其库存资源。商家可以在京东 POP 店、京东自营店、外部电商平台等线上平台以及线下门店进行销售。这种多渠道销售模式不仅扩大了商家的市场覆盖面，还提高了销售效率。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;为了防止超卖现象，商家需要确保线上与线下库存的共享。这意味着商家必须实时更新库存数据，确保所有销售渠道都能看到最新的库存信息。通过这种方式，商家可以避免因库存信息不同步而导致的超卖问题，从而提升客户满意度和信任度。例如，如果一个商品在线上被售出，系统会立即更新库存信息，确保线下门店不会再次销售同一商品。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;目前，已有 75,821 家商家入驻京仓，店铺数量达到 162,306 家，实物 1,785 万件，明细行数为 9,309 万条。这些数据表明，京仓已经成为众多商家管理库存的重要平台。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;随着商家接入量、计算场景的增加，系统计算量也随之增大，常常使得&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#f5222d"&gt;容器 CPU 和数据库 CPU 的负载过高&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;，进而影响整个系统的稳定性且都是后知后觉，无法提前控量。当容器 CPU 的负载过高时，会导致对外提供的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#f5222d"&gt;JSF 服务的可用率降低&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。这不仅影响了用户体验，还可能导致商家的业务受到影响，为了保持系统的稳定性和性能，需要对系统进行优化和升级，同时加强监控和维护，确保系统能够高效地运行。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//2f7af9529dcd1a6dd63dec71ec468dbf.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_18"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;前置动作&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、梳理出所有触发计算的场景共 25 个触发点库存变化、低于安全水位、调整商品比例、调整店铺维度比例、虚拟组套修改、固定值设置等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、从以上场景中又梳理出「杀伤力」最大的两个计算场景分别是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;店铺比例调整：整个事业部下的所有 SKU 全量计算。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;虚拟组套计算：由于虚拟组套规则的特殊性，单次计算会生成 1.5W+条计算流水。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_19"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;优化方案&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;span id="OSC_h4_20"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;CPU 使用率治理&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我们对店铺维度比例调整场景，进行了提前发现并对该事业部进行提前限流，有效的解决了流量一下全打到应用服务器，导致 CPU 飙升的场景&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//8620d179e1737b06d0a36eb1d9581459.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;效果：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//84b647aa05fb6d5b11c8b6e0c108c103.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h4_21"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;JSF 服务治理&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通过日常&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1b1b1b"&gt;OPS Review 发现，当计算任务量激增时，整个系统的资源会被大量占用，导致对外服务响应时间变长，甚至出现服务中断的情况。为了改善这一状况，我们决定将计算功能和 JSF 功能进行分组隔离。这样，计算任务和用户界面操作可以分别在独立的资源池中运行，互不影响。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//ea3d4e46309ca58f883fc5464790dac9.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;效果&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;优化前：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//bcf1cbc1943c5dae1caece6347ce865b.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;优化后&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//8f1d6f1ec3af4dcdd598e7646fa6e7c3.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h4_22"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;虚拟组套治理&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;虚拟组套专为京仓来源的订单设计，通过在 ECLP 中配置虚拟组套关系，实现 JD 商城下单时为一个套装 SKU，而 ECLP 接单及 WMS 出库时则按原料 SKU 出库的功能,给商家带来了更灵活的销售策略。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;例如，组套 SKU=1*原料 1(20%)+2*原料 2(20%)+1*原料 3(20%)。通过组套关系可以看出，组套 SKU 的库存量来源于原料。在进行组套计算时，需先根据店铺维度比例或 EMG 分配比例计算出原料库存，再依据组套规则分配给组套 SKU，需进行二次计算。实际应用中，每个原料可以共享给多个组套，整个绑定关系呈现网状结构，单次计算量会成倍增加 (1W+)，占用更多计算资源，从而影响其他非组套商家的计算。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;计算示例：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//640b1a0cf25b538cd65de6191c2df999.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//598dbbed8d3abbd49c79249acbee93ba.jpg" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通过以上计算 MQ 拆分，并通过 JMQ4 进行限流，可以做到平滑计算，不会再出现重算量激增导致 CPU 一下打满情况。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;优化前：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//f6abd7f3123be35d7442fb2e4485d852.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;优化后：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//e4b237a8753ffed04fdab27e13a861b9.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_23"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;未来规划&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;span id="OSC_h2_24"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;补充业务监控告警&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;当前库存平台的监控告警主要集中在接口层面，然而，接口的成功返回并不完全意味着业务处理已正常完成并落库。因此，我们计划引入更为全面的数据维度监控告警机制，以确保业务处理的完整性和准确性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;监控策略：以小时数据为单位进行对比，例如将 2 月 28 日 9:00 至 10:00 期间的预占成功与回传成功数量，与 2 月 21 日同一时间段的数据进行对比。当差异比例超过预设阈值时，触发告警。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;告警触发条件：定时触发，每小时的第五分钟执行一次，例如在 10:05 触发，对比 9:00 至 10:00 的数据。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;数据来源：通过查询 ES 或大数据平台进行对比，以避免对线上核心业务造成影响。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_25"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;数据库-redis 不一致比对工具&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;当前接收到数据库与 Redis 不一致的告警后，我们采取人工查询数据库流水及 Redis 流水并进行比对的方式，以查找不一致的原因。由于一个货品在特定时间段内的流水记录可能极为繁多，这一比对过程耗时且费力。为此，我们计划开发一款不一致比对工具，实现自动化分析不一致的原因，并输出导致不一致的具体单据。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4090830/blog/18688902</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18688902</guid>
      <pubDate>Mon, 18 Aug 2025 07:53:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>Snow 编程语言 v0.8.0 发布: 支持字符串转义、常量与 Docker 自动构建</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;h3&gt;更新内容&lt;/h3&gt; 
&lt;h4&gt;新增功能&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;字符串增强：支持转义符与 Unicode 字符，新增字符串转义/反转义工具类（Demo26）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;访问控制：下划线开头函数仅限模块内部调用，提升封装性（Demo25）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;常量与语义分析：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;新增 &lt;code&gt;const&lt;/code&gt; 关键字与全局常量表，支持跨模块常量查找与折叠。&lt;/li&gt; 
   &lt;li&gt;新增成员访问表达式与语义分析器，改进 &lt;code&gt;FunctionChecker&lt;/code&gt; 扫描策略。&lt;/li&gt; 
   &lt;li&gt;改进 IR 指令生成逻辑，支持浮点数（Demo23、Demo24）。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;构建与发布：优化 Windows/Linux 并行构建，新增统一发布脚本与 Docker 自动构建支持。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;性能与稳定性&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;修复字符串常量在 &lt;code&gt;.water&lt;/code&gt; 文件写入时的断行问题，VM 执行期可正确还原。&lt;/li&gt; 
 &lt;li&gt;优化全局变量处理、常量折叠与声明语句的语义分析逻辑。&lt;/li&gt; 
 &lt;li&gt;发布脚本简化，减少冗余错误提示与配置。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Bug 修复&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;修复字符串常量在 VM 与 &lt;code&gt;.water&lt;/code&gt; 文件写入时的表示错误。&lt;/li&gt; 
 &lt;li&gt;修复全局变量声明与作用域相关报错，提升语义分析健壮性。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;开发者体验提升&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;新增 Demo22–Demo26 测试与运行配置，覆盖字符串、私有函数、常量等场景。&lt;/li&gt; 
 &lt;li&gt;更新测试配置文件，移除无用注释与调试参数。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;如遇到使用问题，欢迎及时 &lt;a href="https://gitee.com/jcnc-org/snow/issues"&gt;提交 Issue&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/368756</link>
      <guid isPermaLink="false">https://www.oschina.net/news/368756</guid>
      <pubDate>Mon, 18 Aug 2025 07:51:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
  </channel>
</rss>
