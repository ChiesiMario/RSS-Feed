<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-最新资讯</title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://rsshub.app/oschina/news" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-最新资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Mon, 19 Aug 2024 15:33:33 GMT</lastBuildDate>
        <ttl>180</ttl>
        <item>
            <title>开源日报 | 网易云音乐崩了；MoonBit 发布 beta；稚晖君要做开源机器人；LLM 数学性能暴涨 168%；CockroachDB 变更开源协议</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.8.19&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;「网易云音乐崩了」冲上热搜，官方回应「基础设施故障」&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt;
  19 日下午，大量网友反映网易云音乐「崩了」，相关话题登上热搜第一。此时「网易云音乐」App 弹窗提示：获取数据失败，请重试。期间网友称「一直显示加载失败、播放失败、网络错误」、「重启也不行，一度以为手机坏了」。
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;br&gt; 下午 3 点左右，@网易云音乐对此回应：「大家好，因基础设施故障，导致网易云音乐各端无法正常使用，我们正在加紧修复，非常抱歉。感谢大家的等待。」
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0819/220655_RHJN_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/307723/moonbit-beta&quot;&gt;IDEA 研究院编程语言 MoonBit 发布 beta 预览版&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt;
   &lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;MoonBit beta 预览版比大部分主流语言更早推出现代化泛型、精准错误处理和高效迭代器等重要特性，在云计算、边缘计算、人工智能和教育等领域快速实现落地应用。Beta 预览版标志着 MoonBit 生态进入全新阶段，为用户提供更稳定、流畅的创新操作体验。&lt;/span&gt;
  &lt;/div&gt; 
  &lt;div&gt;
   &amp;nbsp;
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;MoonBit 自去年发布 alpha 版后，反响热烈。经过一年的高速迭代，MoonBit 到达了 beta 预览版的里程碑：在核心语言特性上，MoonBit 媲美、甚至超越了大部分主流语言的 1.0 版本；语言特性的开发稳定，开发者可以更广泛地参与到生态建设中来。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#245bdb&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/307530&quot;&gt;开源下载工具 Aria 被诈骗份子使用，开发者无奈清空代码仓库&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;开源下载工具 Aria 开发者昨日删除了该项目在 GitHub 仓库中的全部源代码。Aria 开发者写道：「&lt;strong&gt;&lt;em&gt;因 Aria 被诈骗分子使用，导致我被跨省，因此本项目源码永久删除。&lt;/em&gt;&lt;/strong&gt;」&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0817/123724_l2gM_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1678157684%2FOsNI2Bhrf&quot; target=&quot;_blank&quot;&gt;脑机接口新案例&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;马斯克在捣鼓脑机接口，就是用电极植入人类大脑，提取脑电信号，然后用计算机处理这些信号，实现某种功能。&lt;/p&gt; 
     &lt;p&gt;在官网介绍他这个研究的时候，马斯克惯例是不提此前的类似研究，所以许多人得到的印象是，他正单枪匹马开创一种崭新的技术，肩负解放人类的重担。&lt;/p&gt; 
     &lt;p&gt;实际上，医学界做这种研究已经超过十年，而且已经有不错的成果。&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div&gt;
   &lt;span&gt;- 微博&amp;nbsp;&lt;strong&gt;苦丁山&lt;/strong&gt;&lt;/span&gt;
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1721030997%2FOsZDanTC7%3Fpagetype%3Dprofilefeed&quot; target=&quot;_blank&quot;&gt;网易云音乐称基础设施故障&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
      &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-2baef55c36dca285010afac7649e66cc847.webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;div&gt;
    &amp;nbsp;
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;&lt;span&gt;网易云音乐&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F6QPqQpfiS0wlrVwUaBu4OQ&quot; target=&quot;_blank&quot;&gt;我们收到了知网 28 页的侵权告知函&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt;
   &lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e8b2c3c71ad49be4cdad701dcaadf6bb6a7.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p style=&quot;text-align:right&quot;&gt;- 微信&amp;nbsp;&lt;strong&gt;秘塔官方&lt;/strong&gt;&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6444741184%2FOsPyE2KrX&quot; target=&quot;_blank&quot;&gt;稚晖君要做开源机器人 &lt;/a&gt;&lt;/h4&gt; 
  &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-2d8a07d26b5fc6e7209d20cd2e94b13351f.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    - 微博&amp;nbsp; 
    &lt;strong&gt;林亦 LYi&lt;/strong&gt;
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnew.qq.com%2Frain%2Fa%2F20240819A03YN800&quot; target=&quot;_blank&quot;&gt;LLM 数学性能暴涨 168%&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     合成数据 2.0 秘诀曝光了！来自微软的研究人员们提出了智能体框架 AgentInstruct，能够自动创建大量、多样化的合成数据。经过合成数据微调后的模型 Orca-3，在多项基准上刷新了 SOTA。
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;-&amp;nbsp;&lt;strong&gt;新智元&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnbeta.com.tw%2Farticles%2Ftech%2F1442704.htm&quot; target=&quot;_blank&quot;&gt;百度李彦宏：不一定非要学 AI 专业，任何行业都能与 AI 结合&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;在第 28 届百度 hackathon 黑客马拉松比赛上，百度创始人李彦宏在接受采访时表示，在 AI 时代年轻人也不一定非选 AI 专业。李彦宏表示：「其实很多专业都跟 AI 是有关系的，AI 之所以有这么大的潜力，它就是对任何一个行业可能都会有很大的影响。」他进一步解释道，不过还是要学一些 AI 相关的东西，特别是 AI 相关的新的思维方式，比如说大模型提示词工程师等等。&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;快科技&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8cAfAxkLsEI&quot; target=&quot;_blank&quot;&gt;CockroachDB 宣布开源协议重大变更&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;CockroachDB 是全球开源分布式数据库领导者，简称为 CRDB，国内又称为小强数据库或蟑螂数据库，走兼容 PostgreSQL 协议路线。&lt;/p&gt; 
  &lt;p&gt;CockroachDB 最开始的开源协议是 Apache2.0，后来基于商业发展目标考虑，在 2019 年核心代码改为 BSL(Business Source License)，目的和 MongoDB 的 SSPL 类似，防止第三方提供 CockroachDB 的托管服务。CockroachDB 的 BSL 协议声明，产品发布后 3 年后会自动从 BSL 协议转换为 Apache2.0 的协议，这对于那些新特性不感兴趣的企业是非常友好的。&lt;/p&gt; 
  &lt;p&gt;开源软件最大的挑战是商业转换，2024.08.15 号，CockroachDB 官方再次宣布计划将从 2024.11.18 号开始关闭 BSL 协议，所有客户都转换为 CockroachDB 的企业版产品协议。企业版分为 2 种类型，年收入 1000 万美金以下企业可以免费使用，年收入超过 1000 万美金的企业可以试用 30 天，后面需要付费。&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;IT168&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.thepaper.cn%2FnewsDetail_forward_28448690&quot; target=&quot;_blank&quot;&gt;稚晖君的人形机器人上新了，还有开源、免费彩蛋&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;在这场发布会中，稚晖君一口气推出了三款远征系列机器人产品：交互服务机器人「远征 A2」、柔性智造机器人「远征 A2-W」、重载特种机器人「远征 A2-Max」。最后的 One more thing 环节，智元 X-Lab 孵化的模块化机器人系列产品「灵犀 X1」和「灵犀 X1-W」也作为「彩蛋」正式亮相。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;机器之心&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.36kr.com%2Fp%2F2909785454287747&quot; target=&quot;_blank&quot;&gt;强攻 GPU，TPU 芯片一夜蹿红&lt;/a&gt;&lt;/h4&gt; 
  &lt;p&gt;当下，英伟达大约掌控着 80% 的人工智能数据中心芯片市场，而其余 20% 的大部分则由不同版本的谷歌 TPU 把控。未来，TPU 所占的市场份额会不会持续上扬？会增长几何？是否会有其他架构的 AI 芯片将现有的市场格局一分为三？这些悬念预计在接下来的数年间将逐步揭晓。&lt;/p&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;半导体产业纵横&lt;/strong&gt;&lt;/span&gt;
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnew.qq.com%2Frain%2Fa%2F20240819A0356O00&quot; target=&quot;_blank&quot;&gt;9 岁小学生用大模型写书赚 2 万元&lt;/a&gt;&lt;/h4&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:justify&quot;&gt;许萌萌（笔名），就读于北京市西城区一所实验小学，是一个上三年级的小男生。今年 4 月，由他创作的《AI 少年：火星生存大挑战》一书，终于正式出版，全文 7、8 万字，定价 49.90 元，首印 5000 册。&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:justify&quot;&gt;该书讲述了一个名为「萌萌」（与自己同名）的小朋友，和他另外两个朋友球球、番茄一起去科技馆参加「火星生存挑战营」活动，在现场人工智能助手「聪聪」的提示下，萌萌戴上 VR 设备进入「火星」这一虚拟世界后，如何独自成功脱险，返回地球的故事。&lt;/p&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:justify&quot;&gt;出版后，该书 1 个月内加印，截至当月底共售出 6000 余册。负责该书的策划编辑晓晓表示：「正在向卖 1 万册努力。」&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#212121&quot;&gt;腾讯网&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdidi%2FUnify&quot; target=&quot;_blank&quot;&gt;didi/Unify&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Unify 是一个 Flutter 混合开发框架，由滴滴出行国际化外卖团队自研，目前已经广泛应用于滴滴国际化外卖及国际化出行业务。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Unify 的亮点特性包括:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;平台无关的模块抽象&lt;/strong&gt;: 允许开发者使用 Dart 语言声明与平台无关的模块接口与实体。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;灵活的实现注入&lt;/strong&gt;: 开发者可以灵活地选择注入原生实现（Android/iOS）或 Flutter 实现。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;自动代码生成&lt;/strong&gt;: 借助强大的代码生成引擎，Unify 可以自动生成 Flutter、Android、iOS 多平台下统一调用的 SDK。&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Unify 的整体原理如下：&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-105ff4761152e62ed960a0d0c772a2309af.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;a href=&quot;https://www.oschina.net/p/unify-didi&quot;&gt;https://www.oschina.net/p/unify-didi&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307832</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307832</guid>
            <pubDate>Mon, 19 Aug 2024 12:15:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Jmix 2.3 发布 - 企业级 Java Web RAD 平台</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;img alt=&quot;Jmix2.3 发布&quot; src=&quot;https://oscimg.oschina.net/oscnet/jmix_2.3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;我们最近发布了 Jmix 的 2.3 版本。这篇博客中，我们将介绍这个新版本中增加的新功能和改进。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;有关完整的详细信息和升级说明，请参阅文档中的&lt;span style=&quot;color:#595959&quot;&gt;最近更新&lt;/span&gt;[1]页面。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;div&gt; 
  &lt;div&gt;
   &lt;span style=&quot;color:#3b3b3b&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fjmix.cn&quot; target=&quot;_blank&quot;&gt;Jmix&lt;/a&gt; 是一个企业级 Java Web 快速开发平台，包括：核心开源框架、特定的 IDE，称为 Studio 以及一组开箱即用的扩展组件。&lt;/span&gt;
  &lt;/div&gt; 
  &lt;div&gt;
   &lt;span style=&quot;color:#0451a5&quot;&gt;1.&lt;/span&gt;
   &lt;span style=&quot;color:#3b3b3b&quot;&gt; 开源框架基于 Spring 和其他主流 Java 技术栈构建，使用 Jmix，只需 Java 或 Kotlin 单一开发语言即可完成业务逻辑和 Web UI 的开发。&lt;/span&gt;
  &lt;/div&gt; 
  &lt;div&gt;
   &lt;span style=&quot;color:#0451a5&quot;&gt;2.&lt;/span&gt;
   &lt;span style=&quot;color:#3b3b3b&quot;&gt; Jmix Studio 是 IntelliJ IDEA 插件，可以辅助项目开发，极大地提升开发效率。&lt;/span&gt;
  &lt;/div&gt; 
  &lt;div&gt;
   &lt;span style=&quot;color:#0451a5&quot;&gt;3.&lt;/span&gt;
   &lt;span style=&quot;color:#3b3b3b&quot;&gt; Jmix 扩展组件为典型的业务需求提供解决方案，例如，数据审计、REST API、电子邮件，报表生成、BPM 等。&lt;/span&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#fe8a34&quot;&gt;Superset 扩展组件&lt;/span&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#595959&quot;&gt;Apache Superset&lt;/span&gt;[2] 是领先的数据探索和可视化开源解决方案。支持创建高度可定制的仪表板，其中可以包含多种图表。图表通过数据集填充数据，而数据是使用 SQL 从数据库中获取。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;通过 Jmix Superset 扩展组件，在应用程序中可以很容易集成 Superset 服务，并将仪表板嵌入到 Jmix 视图中。例如，Bookstore 应用程序的主视图中包含了一个仪表板，展示客户订单的相关信息：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;Superset 示例&quot; src=&quot;https://oscimg.oschina.net/oscnet/superset_1.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;连接到 Superset 服务时只需指定 URL 和用户凭证，在显示嵌入的仪表板时，由扩展组件负责请求、刷新和使用安全 token。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;在 Superset 中创建好仪表板后，需要一些配置以便能在 Jmix 中嵌入。Superset 会生成一个 ID，外部应用可以通过这个 ID 引用该仪表板。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;扩展组件提供的 &lt;code&gt;dashboard&lt;/code&gt; UI 组件可以用于在应用程序视图中嵌入仪表板。只需在 &lt;code&gt;embeddedId&lt;/code&gt; 属性中指定仪表板 ID：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;&lt;span style=&quot;color:#aa0d91&quot;&gt;superset:dashboard&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;id&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;ordersDashboard&quot;&lt;/span&gt;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;embeddedId&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;4bc14bf5-a3ec-4151-979e-a920420e1f66&quot;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;height&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;100%&quot;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;width&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;100%&quot;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;maxWidth&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;50em&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;Superset 服务直接与应用程序数据库相连。为了根据用户权限或其他条件筛选仪表板上显示的数据，可以在视图中将约束列表传递给仪表板。以下示例中，仪表板仅显示当前租户的数据：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#643820&quot;&gt;@Install&lt;/span&gt;(to&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;ordersDashboard&quot;&lt;/span&gt;,&amp;nbsp;subject&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;datasetConstraintsProvider&quot;&lt;/span&gt;)&amp;nbsp;&amp;nbsp;
&lt;span&gt;&lt;span style=&quot;color:#aa0d91&quot;&gt;private&lt;/span&gt;&amp;nbsp;List&amp;lt;DatasetConstraint&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#1c00cf&quot;&gt;ordersDashboardDatasetConstraintsProvider&lt;/span&gt;&lt;span style=&quot;color:#5c2699&quot;&gt;()&lt;/span&gt;&amp;nbsp;&lt;/span&gt;{&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DatasetConstraint&amp;nbsp;constraint&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;new&lt;/span&gt;&amp;nbsp;DatasetConstraint(&lt;span style=&quot;color:#1c00cf&quot;&gt;25&lt;/span&gt;,&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;tenant&amp;nbsp;=&amp;nbsp;&#39;&quot;&lt;/span&gt;&amp;nbsp;+&amp;nbsp;tenantProvider.getCurrentUserTenantId()&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;&#39;&quot;&lt;/span&gt;);&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;return&lt;/span&gt;&amp;nbsp;List.of(constraint);&amp;nbsp;&amp;nbsp;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;有关如何在 Jmix 应用程序中使用 Superset 扩展组件的详细信息，请参考 &lt;span style=&quot;color:#595959&quot;&gt;Superset 文档&lt;/span&gt;[3]。&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#fe8a34&quot;&gt;支持 OpenSearch&lt;/span&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;Jmix Search 扩展组件现在可以使用 &lt;span style=&quot;color:#595959&quot;&gt;OpenSearch&lt;/span&gt;[4] 服务了。无论使用的是 OpenSearch 还是 Elasticsearch 引擎，扩展组件中的所有功能（声明式索引定义、索引队列、UI 搜索控件等）均行为一致。通过在 &lt;code&gt;build.gradle&lt;/code&gt; 中指定依赖的 starter 来区分使用的搜索引擎。从市场安装扩展组件时，默认情况下会使用 OpenSearch。&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#fe8a34&quot;&gt;Fragments&lt;/span&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;Fragment 是一种新的 UI 构建块，可以分解复杂的 UI 结构，从而减少重复代码。就其特性而言，Fragment 介于视图和组合组件之间。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;一方面，与视图一样，Fragment 的 XML 中可以包含数据组件和操作。并支持在 fragment 类中进行组件注入和事件处理。Studio 提供了一个用于创建空 fragment 的模板，以及与视图相同的 UI 设计器。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;而另一方面，fragment 又可用作视图或其他 fragment 中的组件。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;使用 Fragment 可以在构建和重用绑定了数据模型的 UI 代码时提供更大的灵活性。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;通过下面的示例可以了解如何创建和使用 fragment。这个简单的 fragment 展示一个名为 &lt;code&gt;Money&lt;/code&gt; 的可嵌入实体的数据。在 UI 设计器中可以显示 XML 和预览，如下所示：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;Fragment 示例&quot; src=&quot;https://oscimg.oschina.net/oscnet/fragment_1.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;Fragment 的类（也称为控制器）可以定义 setter 接收来自外部的参数。在我们的例子中，接收一个 &lt;code&gt;Money&lt;/code&gt; 实例并将其保存到数据容器中：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#643820&quot;&gt;@FragmentDescriptor&lt;/span&gt;(&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;money-fragment.xml&quot;&lt;/span&gt;)&amp;nbsp;&amp;nbsp;
&lt;span style=&quot;color:#aa0d91&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span&gt;&lt;span style=&quot;color:#aa0d91&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#5c2699&quot;&gt;MoneyFragment&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;extends&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#5c2699&quot;&gt;Fragment&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#5c2699&quot;&gt;JmixFormLayout&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;/span&gt;{&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#643820&quot;&gt;@ViewComponent&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;private&lt;/span&gt;&amp;nbsp;InstanceContainer&amp;lt;Money&amp;gt;&amp;nbsp;moneyDc;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span&gt;&lt;span style=&quot;color:#aa0d91&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#1c00cf&quot;&gt;setMoney&lt;/span&gt;&lt;span style=&quot;color:#5c2699&quot;&gt;(Money&amp;nbsp;money)&lt;/span&gt;&amp;nbsp;&lt;/span&gt;{&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;moneyDc.setItem(money);&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;在视图中包含 fragment 时，我们使用 &lt;code&gt;fragment&lt;/code&gt; 元素并指定 fragment 的类。例如，父视图可以包含同一 fragment 的两个实例：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;&lt;span style=&quot;color:#aa0d91&quot;&gt;vbox&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;&lt;span style=&quot;color:#aa0d91&quot;&gt;h4&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;text&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;msg://price&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;&lt;span style=&quot;color:#aa0d91&quot;&gt;fragment&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;id&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;unitPriceFragment&quot;&lt;/span&gt;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;io.jmix.bookstore.view.moneyfragment.MoneyFragment&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;/&lt;span style=&quot;color:#aa0d91&quot;&gt;vbox&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;&lt;span style=&quot;color:#aa0d91&quot;&gt;vbox&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;&lt;span style=&quot;color:#aa0d91&quot;&gt;h4&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;text&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;msg://discount&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;&lt;span style=&quot;color:#aa0d91&quot;&gt;fragment&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;id&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;discountFragment&quot;&lt;/span&gt;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;io.jmix.bookstore.view.moneyfragment.MoneyFragment&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;/&lt;span style=&quot;color:#aa0d91&quot;&gt;vbox&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;在父视图的控制器内可以调用 fragment 的 API 来传递 &lt;code&gt;Money&lt;/code&gt; 实例：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#643820&quot;&gt;@ViewComponent&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&lt;span style=&quot;color:#aa0d91&quot;&gt;private&lt;/span&gt;&amp;nbsp;MoneyFragment&amp;nbsp;unitPriceFragment;&amp;nbsp;&amp;nbsp;
&lt;span style=&quot;color:#643820&quot;&gt;@ViewComponent&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&lt;span style=&quot;color:#aa0d91&quot;&gt;private&lt;/span&gt;&amp;nbsp;MoneyFragment&amp;nbsp;discountFragment;

&lt;span style=&quot;color:#643820&quot;&gt;@Subscribe&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&lt;span&gt;&lt;span style=&quot;color:#aa0d91&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#1c00cf&quot;&gt;onReady&lt;/span&gt;&lt;span style=&quot;color:#5c2699&quot;&gt;(&lt;span style=&quot;color:#aa0d91&quot;&gt;final&lt;/span&gt;&amp;nbsp;ReadyEvent&amp;nbsp;event)&lt;/span&gt;&amp;nbsp;&lt;/span&gt;{&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unitPriceFragment.setMoney(orderLineDc.getItem().getUnitPrice());&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;discountFragment.setMoney(orderLineDc.getItem().getDiscount());&amp;nbsp;&amp;nbsp;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#fe8a34&quot;&gt;Data Repositories&lt;/span&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;该版本完成了对 Spring Data Repository 作为 Jmix 生态系统中一等公民的支持。现在，视图中可以很方便地使用它们来加载和保存数据，同时兼容所有标准 Jmix UI 功能，如过滤、分页和排序等。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;当使用向导创建视图时，在 &lt;em&gt;Advanced&lt;/em&gt; 部分有 &lt;em&gt;Use Data Repository&lt;/em&gt; 复选框。如果勾选，则可以选择已有的 Data Repository。向导生成的视图中，数据的读写都代理给了 Data Repository 的方法。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;列表数据的加载代理中，从 Jmix &lt;code&gt;LoadContext&lt;/code&gt; 对象中提取了 Spring Data &lt;code&gt;PageRequest&lt;/code&gt;，然后通过 &lt;code&gt;JmixDataRepositoryContext&lt;/code&gt; 对象为 Data Repository 提供过滤条件和其他选项。这里可以按需修改，例如，可以设置初始的排序：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#643820&quot;&gt;@Install&lt;/span&gt;(to&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;customersDl&quot;&lt;/span&gt;,&amp;nbsp;target&amp;nbsp;=&amp;nbsp;Target.DATA_LOADER)&amp;nbsp;&amp;nbsp;
&lt;span&gt;&lt;span style=&quot;color:#aa0d91&quot;&gt;private&lt;/span&gt;&amp;nbsp;List&amp;lt;Customer&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#1c00cf&quot;&gt;loadDelegate&lt;/span&gt;&lt;span style=&quot;color:#5c2699&quot;&gt;(LoadContext&amp;lt;Customer&amp;gt;&amp;nbsp;context)&lt;/span&gt;&amp;nbsp;&lt;/span&gt;{&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#007400&quot;&gt;//&amp;nbsp;将&amp;nbsp;Jmix&amp;nbsp;分页和排参数转换为&amp;nbsp;Spring&amp;nbsp;Data&amp;nbsp;PageRequest&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PageRequest&amp;nbsp;pageable&amp;nbsp;=&amp;nbsp;JmixDataRepositoryUtils.buildPageRequest(context);&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;if&lt;/span&gt;&amp;nbsp;(pageable.getSort().isEmpty())&amp;nbsp;{&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#007400&quot;&gt;//&amp;nbsp;设置初始排序&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pageable&amp;nbsp;=&amp;nbsp;pageable.withSort(Direction.ASC,&amp;nbsp;&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;firstName&quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;lastName&quot;&lt;/span&gt;);&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#007400&quot;&gt;//&amp;nbsp;提供&amp;nbsp;Jmix&amp;nbsp;条件，fetch&amp;nbsp;plan&amp;nbsp;以及&amp;nbsp;hints&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JmixDataRepositoryContext&amp;nbsp;jmixContext&amp;nbsp;=&amp;nbsp;JmixDataRepositoryUtils.buildRepositoryContext(context);&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#007400&quot;&gt;//&amp;nbsp;调用&amp;nbsp;repository&amp;nbsp;方法并返回分页内容&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;return&lt;/span&gt;&amp;nbsp;repository.findAll(pageable,&amp;nbsp;jmixContext).getContent();&amp;nbsp;&amp;nbsp;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;上面的代码与下面加载器中的 JPQL 功能相同：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;&lt;span style=&quot;color:#aa0d91&quot;&gt;loader&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;id&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;customersDl&quot;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;readOnly&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;&lt;span style=&quot;color:#aa0d91&quot;&gt;query&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;![CDATA[select&amp;nbsp;e&amp;nbsp;from&amp;nbsp;bookstore_Customer&amp;nbsp;e&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;order&amp;nbsp;by&amp;nbsp;e.firstName&amp;nbsp;asc,&amp;nbsp;e.lastName&amp;nbsp;asc]]&amp;gt;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;/&lt;span style=&quot;color:#aa0d91&quot;&gt;query&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;/&lt;span style=&quot;color:#aa0d91&quot;&gt;loader&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;所有继承 &lt;code&gt;JmixDataRepository&lt;/code&gt; 了的 Repository 方法现在都支持 &lt;code&gt;JmixDataRepositoryContext&lt;/code&gt; 作为附加参数。因此 Data Repository 能兼容 &lt;code&gt;genericFilter&lt;/code&gt;、&lt;code&gt;propertyFilter&lt;/code&gt; 组件以及声明式数据加载器。&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#fe8a34&quot;&gt;TabSheet 标签页的延迟加载&lt;/span&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;当视图中有许多 UI 控件并且需要通过标签页进行分组时，我们通常使用 TabSheet 组件。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;在该版本中，我们增加了将标签页标记为 &lt;code&gt;lazy&lt;/code&gt; 的功能。打开视图时，不会自动加载这种标签页的内容。如果标签页包含大量组件并需要加载其他数据，那么使用该功能可以显著提高性能。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;延迟标签页的数据加载和其他初始化内容需要在 TabSheet 的 &lt;code&gt;SelectedChangeEvent&lt;/code&gt; 监听器中完成，例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#643820&quot;&gt;@ViewComponent&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&lt;span style=&quot;color:#aa0d91&quot;&gt;private&lt;/span&gt;&amp;nbsp;CollectionLoader&amp;lt;Position&amp;gt;&amp;nbsp;positionsDl;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;
&lt;span style=&quot;color:#aa0d91&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;positionsInitialized;

&lt;span style=&quot;color:#643820&quot;&gt;@Subscribe&lt;/span&gt;(&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;tabSheet&quot;&lt;/span&gt;)&amp;nbsp;&amp;nbsp;
&lt;span&gt;&lt;span style=&quot;color:#aa0d91&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#1c00cf&quot;&gt;onTabSheetSelectedChange&lt;/span&gt;&lt;span style=&quot;color:#5c2699&quot;&gt;(&lt;span style=&quot;color:#aa0d91&quot;&gt;final&lt;/span&gt;&amp;nbsp;JmixTabSheet.SelectedChangeEvent&amp;nbsp;event)&lt;/span&gt;&amp;nbsp;&lt;/span&gt;{&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;positionTab&quot;&lt;/span&gt;.equals(event.getSelectedTab().getId().orElse(&lt;span style=&quot;color:#aa0d91&quot;&gt;null&lt;/span&gt;))&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;!positionsInitialized)&amp;nbsp;{&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;positionsDl.load();&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;positionsInitialized&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;true&lt;/span&gt;;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;还有一点，延迟标签页内的组件不能注入到视图类中，因为在视图初始化时还不存在。因此，只能在标签页完成初始化之后通过 &lt;code&gt;UiComponentUtils.getComponent()&lt;/code&gt; 方法获取。&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#fe8a34&quot;&gt;TwinColumn 组件&lt;/span&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;新的 &lt;code&gt;twinColumn&lt;/code&gt; 组件为用户提供了一种熟悉且方便的方式来从列表中选择内容：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;双列组件示例&quot; src=&quot;https://oscimg.oschina.net/oscnet/twincolumn_1.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#fe8a34&quot;&gt;授权服务扩展组件&lt;/span&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;我们已将授权服务（Authorization Server）模块提炼成了一个单独的扩展组件，有单独的&lt;span style=&quot;color:#595959&quot;&gt;文档&lt;/span&gt;[5]和安装流程。这个组件之前是与通用 REST 扩展组件一起安装。因此，现在如果需要安装通用 REST 组件时，需要考虑如何保护 REST 端点：使用授权服务或 OIDC 组件还是通过其他方式。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;授权服务扩展组件提供了一个新的功能，可以实现资源所有者密码凭证授权（即原来的用户名密码授权）。OAuth 规范现在不推荐使用这种授权类型，但我们收到了很多开发人员的请求，于是决定在组件中实现并提供。可以在受信任的、老系统的或高度受控的环境中使用，使用已注册的 Jmix 应用程序用户对 REST 客户端进行简单的身份验证。&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#fe8a34&quot;&gt;Liquibase changelog 合并&lt;/span&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;新版本中，Studio 最突出的新功能是能够合并已有的 Liquibase changelog。支持开发人员将几个最新的 changelog 合并为一个，并删除 changeset 中的重复操作。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;比如这个场景：由于数据模型的迭代开发，有三个 changelog。第一个在表格中添加了 &lt;code&gt;ALPHA&lt;/code&gt; 列，第二个添加 &lt;code&gt;BETA&lt;/code&gt; 列，第三个添加 &lt;code&gt;GAMMA&lt;/code&gt; 并删除 &lt;code&gt;ALPHA&lt;/code&gt;。因此，在第一个 changelog 中引入的更改将被第三个 changelog 覆盖。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;Aggregate Liquibase Changelogs&lt;/strong&gt; 的操作在数据存储的右键菜单中。可以选择任意数量的新添加的 changelog 进行合并。比如我们选择上述三个 changelog：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;Liquibase changelog 合并&quot; src=&quot;https://oscimg.oschina.net/oscnet/aggregate_changelogs_1.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;新生成的 changelog 将仅包含真正使数据库结构与数据模型同步的更改，即添加 &lt;code&gt;BETA&lt;/code&gt; 和 &lt;code&gt;GAMMA&lt;/code&gt; 列：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;Liquibase changelog 合并&quot; src=&quot;https://oscimg.oschina.net/oscnet/aggregate_changelogs_2.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;Studio 会删除选定的 changelog 文件，并添加新的合并文件。为了使新的 changelog 集合与已执行了旧 changelog 的数据库兼容，Studio 会为新的 changeset 添加一个前提条件。这个条件指示 Liquibase 不要执行新的 changeset，例如，如果替换列表中的第一个 changelog 已经执行：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;&lt;span style=&quot;color:#aa0d91&quot;&gt;preConditions&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;onFail&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;MARK_RAN&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;&lt;span style=&quot;color:#aa0d91&quot;&gt;not&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;&lt;span style=&quot;color:#aa0d91&quot;&gt;changeSetExecuted&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;id&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;1&quot;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;author&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;bookstore&quot;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#836c28&quot;&gt;changeLogFile&lt;/span&gt;=&lt;span style=&quot;color:#c41a16&quot;&gt;&quot;io/jmix/bookstore/liquibase/changelog/2024/06/27-1-add-alpha.xml&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;/&lt;span style=&quot;color:#aa0d91&quot;&gt;not&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;
&lt;span style=&quot;color:#aa0d91&quot;&gt;&amp;lt;/&lt;span style=&quot;color:#aa0d91&quot;&gt;preConditions&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;执行 changelog 合并时需小心，因为合并 changelog 并不是对已有 changelog 进行分析和重新生成。而是依据第一个选定的 changelog 之前的数据库结构与当前模型之间的差异生成一个新的 changelog。因此，如果合并的 changelog 包含一些未反映在模型中的数据更新或结构更改（例如，存储过程），则可能丢失。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;总的来看，使用此功能最自然、最安全的方法是在将最新更改提交到共享代码仓库或将功能合并到公共分支之前对 changelog 进行合并。&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#fe8a34&quot;&gt;Studio 的其他改进&lt;/span&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;该版本还引入了多项能提升开发者体验的 Studio 功能：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Jmix 工具窗口提供了一个用于生成 UI 异常处理方法的操作。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Jmix UI 结构右键菜单中的 &lt;strong&gt;Convert to&lt;/strong&gt; 操作可以将一个组件一键转换为另一个组件。&lt;strong&gt;Wrap into&lt;/strong&gt; 操作可以将多个选定的组件包含至 TabSheet 的标签页中。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;改进了 JPQL Designer 布局。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;改进了 Dockerfile 生成。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;所有 Studio 的改进内容，请参考 &lt;span style=&quot;color:#595959&quot;&gt;Issue tracker&lt;/span&gt;[6]。&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#fe8a34&quot;&gt;下一步？&lt;/span&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;我们计划在 2024 年 10 月发布下一个功能版本，其中包括 Jmix UI 中几个非常重要的功能：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;集成一些第三方 JavaScript 组件：日历、数据透视表（PivotTable）和看板（Kanban）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;可以使用 fragment 定义 &lt;code&gt;VirtualList&lt;/code&gt; 条目的内部布局。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;标签式主窗口模式，视图在主窗口内的标签页中打开，而不是在浏览器标签页中打开。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;最后一个功能是从迁移经典 UI 的开发人员最需要的功能。因此，我们将提供一个解决方案，可以在单个浏览器标签页中打开多个视图，而同时会牺牲一些浏览器功能，例如历史记录和深度链接。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;我们计划的另一个可以帮助从旧版本的平台迁移的功能是声明试 UI 权限。这个功能在 CUBA 平台就已经有了，支持开发者和管理员通过配置限制用户对 UI 中内容（控件、按钮、动作）的访问，而无需编写任何代码。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;在 Studio 方面，我们将改进 Jmix UI 组件属性面板的可用性，并为 UI 组件属性提供更多编辑器（例如，对于 &lt;code&gt;formLayout.responsiveSteps&lt;/code&gt;）。此外，我们还会提供与外部数据源集成方面工作的初步成果。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;像往常一样，我们仍将为错误修复、添加小功能和性能增强分配一定的时间。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;未来版本的详细路线图以&lt;span style=&quot;color:#595959&quot;&gt;GitHub 项目&lt;/span&gt;[7]的形式提供。当前版本 2.3 的补丁将大约每月发布一次，大家可以定期更新。&lt;/p&gt; 
&lt;p style=&quot;color:black; margin-left:0; margin-right:0&quot;&gt;如果有任何问题，欢迎到我们&lt;span style=&quot;color:#595959&quot;&gt;论坛&lt;/span&gt;[8]进行反馈，感谢所有提供想法、建议和错误报告的亲们！&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;[1] &lt;/span&gt;最近更新: &lt;em&gt;https://docs.jmix.cn/jmix/whats-new/index.html&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;[2] &lt;/span&gt;Apache Superset: &lt;em&gt;https://superset.apache.org/&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;[3] &lt;/span&gt;Superset 文档: &lt;em&gt;https://docs.jmix.cn/jmix/superset/index.html&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;[4] &lt;/span&gt;OpenSearch: &lt;em&gt;https://opensearch.org/&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;[5] &lt;/span&gt;文档: &lt;em&gt;https://docs.jmix.cn/jmix/authorization-server/index.html&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;[6] &lt;/span&gt;Issue tracker: &lt;em&gt;https://youtrack.jmix.io/issues/JST?q=Fixed%20in%20builds:%202.3.0,-2.2.&lt;/em&gt;%20type:%20Feature,Improvement,Usability*&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;[7] &lt;/span&gt;GitHub 项目: &lt;em&gt;https://github.com/orgs/jmix-framework/projects/23/views/1&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;[8] &lt;/span&gt;论坛: &lt;em&gt;https://forum.jmix.cn/&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307786/jmix-2-3-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307786/jmix-2-3-released</guid>
            <pubDate>Mon, 19 Aug 2024 07:40:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>墨干 V1.2.9 LTS: 支持中文的 TMU 文档格式</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;div&gt; 
 &lt;h2&gt;重要信息&lt;/h2&gt; 
 &lt;ol&gt; 
  &lt;li&gt;墨干 v1.2.9 LTS 是一个长期支持版本，支持周期至少一年。在未来的一年内，我们会发布补丁版本（v1.2.9.2, v1.2.9.3, v1.2.9.5, v1.2.9.7) 等，补丁版本的版本编号我们采用质数 :)&lt;/li&gt; 
  &lt;li&gt;默认格式已经调整 TMU 格式，TMU 格式是 TM 格式的 Unicode 版。TM 格式长期依赖的通点是无法显示中文，TMU 格式解决了这个问题。&lt;/li&gt; 
  &lt;li&gt;在 macOS 和 Windows 内置 Noto CJK 字体是为了让同一个文档，在不同的平台所采用的字体（在未指定字体的情况下）尽可能一致。&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;h2&gt;重要变更&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmogan.app%2Fzh%2Fguide%2Fchangelog%2Fv1.2.9.html%23%25E9%2587%258D%25E8%25A6%2581%25E5%258F%2598%25E6%259B%25B4&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;TMU: 默认格式已经调整为 TMU&lt;/strong&gt;，使用&lt;code&gt;文件-&amp;gt;导出-&amp;gt;TM 文档&lt;/code&gt;可以导出 TM 文档&lt;/li&gt; 
  &lt;li&gt;字体：在 macOS 和 Windows 上内置 Noto CJK 字体&lt;/li&gt; 
  &lt;li&gt;字体：在文档语言是中文的情况下，改善数学公式中括号等符号的渲染（开源之夏 2024）&lt;/li&gt; 
  &lt;li&gt;多语言支持：修复法语等语言的翻译编码错乱问题&lt;/li&gt; 
  &lt;li&gt;默认配置：&lt;code&gt;编辑-&amp;gt;首选项-&amp;gt;键盘-&amp;gt;文本中的空格键&lt;/code&gt;调整为允许输入多个空格&lt;/li&gt; 
  &lt;li&gt;Emacs 风格快捷键：修复无法在数学公式中使用&lt;code&gt;Alt+[&lt;/code&gt;和&lt;code&gt;Alt+]&lt;/code&gt;撤销和重做的问题&lt;/li&gt; 
  &lt;li&gt;插件： 
   &lt;ul&gt; 
    &lt;li&gt;Gnuplot: 基于金鱼 Scheme 重新实现，不再依赖于 Python&lt;/li&gt; 
    &lt;li&gt;Goldfish: 新增 sicp 启动器，适合学习 SICP，内置 false,true,nil 等兼容 SICP 示例代码的函数和常量&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;社区： 
   &lt;ul&gt; 
    &lt;li&gt;墨客星球：按照界面语言，选择不同的墨客星球入：w 口&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h2&gt;开发者相关&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmogan.app%2Fzh%2Fguide%2Fchangelog%2Fv1.2.9.html%23%25E5%25BC%2580%25E5%258F%2591%25E8%2580%2585%25E7%259B%25B8%25E5%2585%25B3&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
 &lt;ul&gt; 
  &lt;li&gt;内置金鱼 Scheme v17.10.4，将 S7 Scheme 升级至 v10.12-20240813&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307771/mogan-1-2-9-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307771/mogan-1-2-9-released</guid>
            <pubDate>Mon, 19 Aug 2024 06:43:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>昆仑万维发布 AI 短剧平台 SkyReels</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;昆仑万维发布全球首个集成视频大模型与 3D 大模型的 AI 短剧平台 SkyReels。集剧本生成、角色定制、分镜、剧情、对白/BGM 及影片合成于一体，旨在让创作者「一键成剧」，轻松制作高质量 AI 视频。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;SkyReels 平台集成了昆仑万维自研剧本大模型 SkyScript、自研分镜大模型 StoryboardGen、自研 3D 生成大模型 Sky3DGen、以及业界首个将 AI 3D 引擎与视频大模型深度融合的创新平台 WorldEngine。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;能够通过 AI 一键生成完整剧本、分镜、人物对白与 BGM，支持角色形象、音色与分镜的自定义调整，并能够自动将内容转换为 1080P 60 帧的高清视频，单次可生成视频长度达 180 秒，相比 Sora 单次可生成 60 秒视频、可灵单次可生成 10 秒视频，有显著突破。一键整合所有创作成果，极大提高视频的创作效率，降低创作成本，推动「一人一剧」时代加速来临。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;同时，WorldEngine 结合了引擎的精确可控能力（如光照模拟、物理模拟、3D 空间、实时交互等） 以及 AI 视频大模型的幻想生成能力，提供了全新的线上混合视频创作模式，让视频创作从模糊生成迈向更加精确可控。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;322&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3b3b3b445168d40ab69df8c897c8338c7da.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;320&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-eac79e0ac7170420b90bf78129749788624.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;325&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3d47ee3ede6253924a5cdd051754b807835.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;SkyReels 亮点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;全自动化剧本生成：用户输入概念或创意，AI 将一键生成一份结构完整、情节丰富的剧本，并支持已有剧本的自动整理与润色，提高创作效率。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;高质量情节设计：系统通过分析大量剧本情节，生成高质量的故事情节、戏剧冲突、爽点及情感表达，保证剧本的丰富性与吸引力。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;智能分镜生成：根据剧本内容，一键生成分镜图片和对应的文字脚本，用户还可自由调整分镜、镜头角度、运镜方式等参数，确保创意的精确实现。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;情感化对白/BGM：通过情感化语音合成技术，赋予角色自然的句间停顿、情感表达、抑扬顿挫，并基于视频内容自动生成 AI BGM，让画面与音乐完美融合。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;个性化定制：支持角色形象、音色和分镜的智能生成与自定义调整，满足创作者的个性化需求，并提供动漫、卡通、真人 3D 等多种视觉风格选择，适应不同创作者的偏好和内容表达需求。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;内容一致性与精确性：确保角色与场景在不同分镜中的一致性，同时根据故事描述自动推演角色表演，实现人物表情、动作、台词的协调一致，提升故事表现力。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;高效视频生成：自动将分镜转换为连续高清视频，提供 1080P 60 帧输出，确保流畅的观看体验。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;便捷的后期合成：一键整合所有创作成果，并可快速导出和分享，支持多种格式下载，方便后期编辑。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307743</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307743</guid>
            <pubDate>Mon, 19 Aug 2024 03:49:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>统信软件推出综合型开源自动化测试框架 「YouQu」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;统信软件宣布推出 「YouQu」 （有趣）综合型自动化测试框架。该框架紧密贴合实际需求，专为 Linux 操作系统量身定制，集管理、分发调度、驱动执行等核心功能于一体，实现了测试流程的全方位覆盖。&lt;/p&gt; 
&lt;p&gt;YouQu 支持 UI、WEB、接口及命令行等多种自动化测试场景。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Linux 桌面应用 UI 自动化测试&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;基于 Qt 属性查找、图像识别、OCR 识别、相对位移方案获取元素位置，通过键鼠模拟操控元素进行 UI 操作。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Web UI 自动化测试&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;基于 PlayWright 控制浏览器（可自定义）进行 Web UI 自动化测试。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Linux DBus 接口自动化测试&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;通过框架内置的 DBus 操控功能，实现对 DBus 接口访问及获取数据。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;命令行自动化测试&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;基于 subprocess、pexpect 实现命令行交互。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;HTTP 接口自动化测试&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;基于 Python 标准库 urllib，实现网络接口自动化测试流程。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;YouQu 采用工程化架构设计，其核心封装层提供基础能力，业务层根据实际业务需求（测试用例）动态加载核心封装层，执行层加载相应的用例集并控制执行流程。&lt;/p&gt; 
&lt;p&gt;测试平台可以根据实际测试策略组装配置，通过执行层接口驱动框架完成自动化测试执行。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0819/113328_rwU3_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;开源仓库地址&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;linuxdeepin 开源仓库：&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Flinuxdeepin%2Fyouqu&quot; target=&quot;_blank&quot;&gt;https://github.com/linuxdeepin/youqu&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;openEuler 开源仓库：&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://gitee.com/src-openeuler/youqu&quot;&gt;https://gitee.com/src-openeuler/youqu&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;YouQu 官网地址：&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyouqu.uniontech.com&quot; target=&quot;_blank&quot;&gt;https://youqu.uniontech.com&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;统信开发者平台 YouQu 地址：&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fuosdn.uniontech.com%2F%23document2%3Fdirid%3D66a7735a36fced0b0bdb3139&quot; target=&quot;_blank&quot;&gt;https://uosdn.uniontech.com/#document2?dirid=66a7735a36fced0b0bdb3139&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307741/uniontech-youqu</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307741/uniontech-youqu</guid>
            <pubDate>Mon, 19 Aug 2024 03:34:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>IDEA 研究院编程语言 MoonBit 发布 beta 预览版，快速实现多领域应用</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;MoonBit beta 预览版比大部分主流语言更早推出现代化泛型、精准错误处理和高效迭代器等重要特性，在云计算、边缘计算、人工智能和教育等领域快速实现落地应用。Beta 预览版标志着 MoonBit 生态进入全新阶段，为用户提供更稳定、流畅的创新操作体验。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;MoonBit 自去年发布 alpha 版后，反响热烈。经过一年的高速迭代，MoonBit 到达了 beta 预览版的里程碑：在核心语言特性上，MoonBit 媲美、甚至超越了大部分主流语言的 1.0 版本；语言特性的开发稳定，开发者可以更广泛地参与到生态建设中来。这里列举几个 MoonBit 的核心特性：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;现代化的泛型系统&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;现代语言复杂性的很大一部分在于类型系统的设计，很多主流工业语言，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;比如 Java，Go 在 1.0 版本推出很多年以后才会渐渐完善泛型的支持&lt;/strong&gt;&lt;/span&gt;，但是这会对生态造成撕裂。MoonBit 在 beta 预览版本已经完成了泛型和 ad-hoc polymoprhism，而且 MoonBit 在保持极快的编译速度的同时，提供了零开销的泛型支持。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;准确的错误处理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;错误处理是现代语言设计中的重要组成部分，大部分编程语言在静态分析中，彻底放弃错误处理的支持，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;这意味着任何函数都可以抛出异常，很难写出高可靠性的代码。&lt;/strong&gt;&lt;/span&gt;MoonBit 通过准确的控制流分析，可以完全在编译时期跟踪函数的错误。这一过程几乎完全由编译器自行推导，且不像 Java checked exception 那样过于繁琐，降低用户的心智负担。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;高效的迭代器&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;传统的编程语言的迭代器会产生频繁的装箱操作，导致其性能比普通的循环要糟糕很多。MoonBit 创新地使用了零开销的迭代器设计，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;可以让用户写出优雅代码的同时保持程序的性能。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;span style=&quot;color:#3498db&quot;&gt;&lt;strong&gt;多应用场景&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;MoonBit 是一个全场景覆盖的开发者平台，紧跟科技前沿和行业趋势，侧重于云计算、边缘计算、人工智能以及教学领域的发展，并在每个领域做到极致，确保在性能上领先其他语言至少一个数量级。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;在云计算领域，MoonBit 近期已支持 Wasm 组件模型，并有海外用户实现了与 Spin 框架集成的 MoonBit SDK。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;通过将应用程序拆分成独立的、可重用的组件，MoonBit 可以在云计算开发中更好地利用模块化开发、灵活的部署和更新、资源优化、防止单点故障提高安全性、易于扩展和集成等特性，实现云计算应用场景中的突出优势，提高系统的灵活性和安全性，简化扩展和集成过程，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;从而显著提高云计算开发效率并降低运营成本。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;435&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-bf98ab690dba421fe8346209213d5a72b29.jpg&quot; width=&quot;934&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;在边缘计算领域，目前已有 MoonBit PDK 插件，&lt;span style=&quot;color:#000000&quot;&gt;并被 Extism 收入官方 PDK 库。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;通过 PDK 的支持，MoonBit 能够在边缘计算应用中更高效地利用硬件资源，实现分布式计算和本地处理，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;提&lt;/strong&gt;&lt;strong&gt;升性能和响应速度，同时确保设备兼容性和数据安全性&lt;/strong&gt;，&lt;/span&gt;从而大大提升开发和部署效率，满足低延迟和高效能的需求。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;564&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-02d8e0e917b3011382b6706c9827aa4d7a8.jpg&quot; width=&quot;937&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;在 MoonBit 的应用生态发展中，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;注重为学生群体以及编程语言初学者提供简单易学的入门环境&lt;/strong&gt;&lt;/span&gt;，并以游戏的形式打造轻松愉悦的学习体验。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;MoonBit 现已支持使用 WebAssembly 开发小型复古游戏的 WASM-4 框架。凭借 MoonBit 的高效工具链和简洁设计，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;入门级开发者可以在官方教程的指导下轻松创作属于自己的第一款游戏&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;同时，框架内置的多玩家支持功能能够让至多四名玩家共同体验游戏的乐趣。无论是创作过程还是开发体验，MoonBit 都能让初学者体验前所未有的简单与高效。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;不仅如此，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;由于 MoonBit 支持实时可视化开发，同时编译速度极快，&lt;/strong&gt;&lt;/span&gt;开发者还能够实时更改代码来灵活调整游戏参数。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;MoonBit 团队正在开发 MiniMoonBit 编译器教学项目。学生可以用 MoonBit 实现 MoonBit 语言的一个子集。由于 MoonBit 强大的表达力，相较传统的用 C/C++ 实现的编译器项目，学生可以更轻松地上手实现。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;同时，MiniMoonBit 项目采用了模块化的设计，多层 IR 都有对应的 JSON 文本表示，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;学生不再需要从头实现编译器的每个环节，而是可以选择感兴趣的模块来学习。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;span style=&quot;color:#3498db&quot;&gt;&lt;strong&gt;快、小、安全、&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;span style=&quot;color:#3498db&quot;&gt;&lt;strong&gt;最佳数据处理体验&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;MoonBit 于 2022 年启动开发计划，凭借团队在 ReScript、OCaml、Flow 等工业编程语言研发中的十多年经验，迅速在两年内完成了整套工具链的开发，致力于成为第一个走向国际的中国编程语言。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;2023 年 8 月 18 日，MoonBit 首次在海外发布后，迅速引起了国际技术社区的广泛关注，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;并登上了 HackerNews 的头条&lt;/strong&gt;&lt;/span&gt;&lt;span style=&quot;color:#2792c5&quot;&gt;。&lt;/span&gt;HackerNews 作为硅谷最具影响力的科技社区之一，对 MoonBit 的每一次重大特性更新都给予了高度关注。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;此外，MoonBit 还在全球 DevOps 领域权威媒体平台 The News Stack、日本顶尖科技社区 Zenn 等知科技媒体上频频出现，进一步巩固了其全球影响力。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;同时，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;MoonBit 在工业应用方面进展迅速&lt;/strong&gt;，&lt;/span&gt;包括多家海外创业公司的应用、在国内拥有数据库领域的商业合作伙伴等。这一过程中，MoonBit 一直致力于发挥其在语言速度、代码精简和数据处理等方面的卓越优势。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;MoonBit 致力于实现全栈性能的卓越表现，&lt;span style=&quot;color:#000000&quot;&gt;包括编译性能和运行时性能。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;通过专为多级中间表示（IR）定制的全局优化，不仅改善了内存布局，减少了缓存未命中率，还为数据和控制流分析提供了一个优越的环境，从而确保了编译和运行时的高性能。&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;从编译速度来看，MoonBit 编译 626 个包（package）只需 1.06 秒&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#2792c5&quot;&gt;比 Rust 快了近 9 倍，运行时间仅为 Go 的 35 分之一。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;534&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-7c6b63d405a7f4bdf984f0ba7fb0075a5f4.jpg&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:transparent&quot;&gt;&lt;strong&gt;小&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;MoonBit 在输出 Wasm 代码体积上相较于传统语言有显著优势&lt;/strong&gt;。&lt;/span&gt;MoonBit 通过 WebAssembly（Wasm）组件模型，在生成代码时实现了显著的体积优化。相比其他编程语言，MoonBit 编写的 Wasm 组件代码体积大幅减少。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;例如，在编译一个简单的「Hello World」 HTTP 服务器时，MoonBit 的输出文件大小仅为 27KB，而 WasmCloud 提供的 http-hello-world 模板中 Rust 的输出为 100KB，TypeScript 为 8.7MB，Python 更是高达 17MB。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;380&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-48c358622b0cbde6b0df723a7440c927520.jpg&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;借助前文提到的创新错误处理机制，MoonBit 有效解决了传统编译技术在错误处理机制转换中遇到的适用范围有限和内存开销大的问题。通过静态分析源程序中的错误处理代码，并根据目标编程语言的特性进行转换，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;MoonBit 扩大了适用语言范围，减少了内存开销，同时提升了代码的安全性和稳定性。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;健壮的类型系统是 MoonBit 保障其安全的重要设计之一。MoonBit 采用了强大的类型系统，并内置静态检测工具，在编译期检查类型错误，从而提高代码的正确性和可靠性。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;&lt;span&gt;MoonBit 的安全保障得益于其对 WebAssembly 的原生支持&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;，这一特性使得 MoonBit 能够深度挖掘 Wasm 在沙箱环境、内存隔离以及默认的无权限机制（deny-by-default）等方面的安全架构优势。通过这些先进的安全特性，&lt;span style=&quot;color:#000000&quot;&gt;释放其在云计算和边缘计算安全问题上的潜力。&lt;span style=&quot;color:#000000&quot;&gt;同时结合语言自身类型系统安全，删减无用代码（DCE）、编译为经过验证的 Wasm 指令等三层保障，确保代码可信与数据隐私安全。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;MoonBit 作为一门多范式编程语言，在保持语言简单性的同时，也侧重于提供数据处理的最佳体验。MoonBit 通过原生支持 JSON 处理、Iter 类型和模式匹配实现高效数据处理，在语法设计上兼具动态语言的灵活性和静态语言的安全高效，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;直观而简洁地进行对数据的解析和转换&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;603&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d1a73b776bd8b028cca5b0dde1ffee2c8ee.jpg&quot; width=&quot;863&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;em&gt;JSON 处理&lt;/em&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;MoonBit 在数据处理上的语法设计旨在优化常见的数据处理场景，解决传统方法中由于生成多个中间数组而导致的性能问题。&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;在 Iter 性能对比中，MoonBit 的数据处理速度达到了 JavaScript 的 25 倍之多。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;132&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6ed7286674f6bca7819fb515186692f9848.jpg&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#3498db&quot;&gt;一站式解决方案&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;相较于传统的编程语言设计路线，MoonBit 从一开始就提供全套开发、调试、部署的一站式解决方案。MoonBit 不仅提供多后端支持、通用程序语言设计，还涵盖了编译器、构建系统、集成开发环境（IDE）、调试器，部署工具等。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;这个全面的设计使得 MoonBit 能够实现高度垂直整合，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;而且&lt;/strong&gt;&lt;strong&gt;可以同时在云端和边缘端执行，更好地与各种资源进行交互&lt;/strong&gt;，&lt;/span&gt;从而为用户提供极致的开发体验和性能。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;与其他云 IDE 不同，&lt;/span&gt;MoonBit 对 IDE 的支持不仅包含了现代 IDE 的所有功能，&lt;span style=&quot;color:#000000&quot;&gt;且 MoonBit 无需依赖容器。快速语义分析技术可处理大量的代码库，&lt;/span&gt;&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;并且在更大规模的代码库中也能在百毫秒级别完成 IDE 响应&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;现今大多数编程语言的 IDE 是为桌面操作系统设计的，未能很好地适应云原生环境和边缘端的需求。MoonBit 则通过采用高度并行化的架构和对分离编译的原生支持，使得云 IDE 可以直接在边缘端运行。&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;这在现今大多数语言的云 IDE 中是首次。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;除了传统 IDE 的功能以外，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;MoonBit AI 助手现已内置于 MoonBit IDE&lt;/strong&gt;&lt;/span&gt;，并实现了自动化测试生成、文档生成，以及代码解释功能，为应用的开发、测试和文档编写提供了全方位的支持，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;使得开发者能够更加专注于业务逻辑的实现&lt;/strong&gt;&lt;/span&gt;，而不必担心底层的复杂性和维护工作。&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
      MoonBit 在初始阶段已经提供其他语言通常在成熟阶段才拥有的调试工具。MoonBit 目前已提供 sourcemap 支持，支持源码映射、基于源码设置断点、输出 sourcemap 等，可以在浏览器中进行源码调试。
      &lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;这项功能的推出不仅减轻了开发者在代码调试方面的负担，还显著提升了开发和调试的流畅性。&lt;/strong&gt;&lt;/span&gt;
     &lt;/div&gt; 
     &lt;div&gt;
      &amp;nbsp;
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;对于 JavaScript 后端，用户仅需在 JavaScript Debug Terminal 上执行 moon run --target js --debug，即可立刻进入调试。MoonBit 的 sourcemap 和调试支持显著优化开发者的调试体验，确保 JavaScript 代码的生成尽可能贴近源码，变量名和字段名保持一致，便于使用浏览器的 DevTools 进行源码检查和调试。&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;MoonBit 作为一门从 0 到 1 的编程语言，对于生态建设尤为重视，其中一个关键在于构建高效且功能丰富的包管理系统。我们搭建了一个中心化的 MoonBit 包管理平台 mooncakes.io，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;提升包的获取速度和编译效率，从而为开发者提供一个高效的工作环境。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;393&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e06f9551d39294ab7837bbbe075fe867ff4.png&quot; width=&quot;949&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;此外，我们注重文档的管理和维护。为了让第三方包更加易于开发者理解和使用，我们提供了文档生成工具 moondoc，并在 mooncakes.io 集成了每个包的文档，以帮助开发者编写和分发包的文档、帮助包的使用者创造高质量的应用。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1000&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d5687b779e646b8e3c4a4aa52eff121b143.png&quot; width=&quot;1280&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1000&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-aad8ed1afeb1f4ebb5c977b5a8f0f8b12ee.png&quot; width=&quot;1280&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;span style=&quot;color:#3498db&quot;&gt;&lt;strong&gt;AI 时代下的编程语言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;这个世界是否还需要一门新的编程语言？答案是，是。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;编程语言的发展经历了 60 年代时，结构化编程的兴起。到 70 年代，则是面向对象编程与 C 语言。90 年代，是脚本语言与互联网 。而 00 年代，是语言的统一与多样性。到了 10 年代，是现代语言与大数据。编程语言在不断进步，同时也有大量的编程语言渐渐销声匿迹。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;大模型时代浩浩荡荡的浪潮卷席了万事万物。编程语言作为计算机核心组件、&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;且是软件开发者创造技术世界最重要的工具&lt;/strong&gt;&lt;/span&gt;，自然被顶上风口浪尖。整个技术行业都对编程语言提出了更高的要求。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;在大模型时代，工具重塑了开发者的工作方式，&lt;/span&gt;&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;同时也降低了学习新语言的门槛。&lt;/strong&gt;&lt;/span&gt;开发者将更专注于创意和设计，代码的实现和优化则由编程工具完成。这一转变推动编程工具从简单的代码生成器进化为复杂问题解决平台。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;MoonBit AI 云原生开发者平台——MoonBit 编程语言及工具链，就在这个机遇与挑战并存的时代应运而生。&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;MoonBit 的目标，是重塑软件开发生态。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:center&quot;&gt;&lt;span style=&quot;color:#3498db&quot;&gt;&lt;strong&gt;MoonBit 的未来路线&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;MoonBit AI 云原生开发者平台是一个「道阻且长，行则将至」的系统工程。MoonBit 正在马不停蹄地扩大 MoonBit 的社区力量、培养社区人才。2 年的时间里 ，MoonBit 工具链已有几百名社区贡献者和近万人的全球的用户，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;增长速度遥遥领先。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;目前，MoonBit 已支持 Wasm 与 JS 后端。未来，MoonBit 计划支持 native 后端。这意味着无论是 UI、客户端、边缘计算还是系统编程，用户都能在 MoonBit 平台上找到适合自己的使用场景，&lt;span style=&quot;color:#2792c5&quot;&gt;&lt;strong&gt;从而使生态能够覆盖所有可能的应用场景。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;608&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-377ff22639054e8f2effaa82573ced91634.jpg&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307723/moonbit-beta</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307723/moonbit-beta</guid>
            <pubDate>Mon, 19 Aug 2024 02:37:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>GOGC 2024 | openKylin 首个园区站—浦东软件园站正式发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;8 月 15 日至 16 日，由&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;开源中国&lt;/span&gt;&lt;span&gt;&lt;span&gt;与上海浦东软件园联合举办的 2024 全球开源极客嘉年华 GOGCxGOTC 全球开源技术峰会于上海张江&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;科学会堂&lt;/span&gt;&lt;span&gt;举行。openKylin 作为中国领先的开源操作系统根社区，受邀参加此次大会高峰论坛，并携 openKylin 2.0 亮相活动展区，同来自世界各地的顶尖开发者、开源爱好者、企业家和技术领袖，共同探讨开源技术的最新进展及其对未来的影响。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;2117&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5a08821e5b92ddd67d3802ccd02a933973c.jpg&quot; width=&quot;3175&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#0060e8&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#0060e8&quot;&gt;高峰论坛：openKylin 全球首个园区站正式发布&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;大会高峰论坛环节，&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin 社区生态合作负责人马发俊&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;带来&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;《openKylin 园区运营战略发布》&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;主题分享，向大家展示 openKylin 园区站运营发展新蓝图。同时，在所有嘉宾的共同见证下，&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin 全球首个园区站-浦东软件园站正式发布&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;，由 openKylin 社区生态合作负责人马发俊、上海浦东软件园股份有限公司总经理助理/董事会秘书郑赟、广东赛昉科技有限公司，软件副总裁赵向伟、飞腾信息技术有限公司上海行业拓展总监王婷共同上台揭幕。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1998&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-853f9ee38a103e17c226230ff7b60cce4bd.jpg&quot; width=&quot;3000&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin 园区站运营策略，旨在推进开源生态体系建设，以开源之力赋能产业园区价值重塑。此次浦东软件园站的发布不仅是对 openKylin 社区生态发展战略的深入实践，更是对技术创新与产业合作深度融合的积极探索。未来，openKylin 将在更加广阔的舞台上，携手合作伙伴共绘生态发展新篇章。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#0060e8&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#0060e8&quot;&gt;展区互动：openKylin 2.0 版本惊艳亮相&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;大会展区同样热闹非凡，openKylin 携最新操作系统 2.0 版本亮相大会展区，吸引了众多对开源技术满怀热情的开发者、社区成员，以及来自各开源项目应用场景的产业精英与跨界才俊驻足交流。通过现场演示与互动，展示开源技术的独特魅力，激发了创新活力，共同见证开源技术的蓬勃生机。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1066&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-872cf4641473a89d96604ce948cb96c7280.jpg&quot; width=&quot;1600&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-dd96fd3cc9a2beeb3f196df5d3f945dfc77.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;为期两天的盛会，不仅是一场技术的盛宴，更是一次思想的深刻碰撞。openKylin 以开放、包容、创新的姿态，向世界展示了中国开源力量的崛起与担当。展望未来，openKylin 将继续携手全球合作伙伴，共同推动开源技术的普及与发展，为构建一个更加开放、协同、创新的数字世界贡献自己的力量，让开源精神的光芒照亮前行的道路。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307711</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307711</guid>
            <pubDate>Mon, 19 Aug 2024 01:40:32 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>RISC-V 初创公司 Akeana 获 1 亿美元融资</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Akeana USA Inc. 是一家开发基于 RISC-V 处理器架构的芯片的初创公司，于 2021 年创立。该公司发布&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.akeana.com%2Fakeana-exits-stealth-mode-with-comprehensive-risc-v-processor-portfolio-challenging-the-semiconductor-industry-status-quo%2F&quot; target=&quot;_blank&quot;&gt;公告称&lt;/a&gt;，在 Kleiner Perkins、Mayfield 和 Fidelity 等 A 级投资者的支持下，已筹集到超过 1 亿美元的资金，将正式推出可针对任何工作负载或应用进行独特定制的 IP 解决方案产品线。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Akeana 由设计 Marvell ThunderX2 服务器芯片的同一团队组建，提供各种 IP 解决方案，包括微控制器、Android clusters、AI vector cores 和子系统，以及用于网络和数据中心的计算集群。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;279&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-7015887b068390f02e1affae87d8561c3f7.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;该公司发布了三条处理器产品线和 SoC IP，包括：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;Akeana 100 系列： 一系列高度可配置的处理器，具有 32 位 RISC-V 内核，支持从嵌入式微控制器到边缘网关再到个人计算设备的应用程序。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;Akeana 1000 系列： 包含 64 位 RISC-V 内核和 MMU 的处理器系列，可支持多种操作系统，同时保持低功耗和低芯片面积要求。这些处理器支持有序或无序流水线、多线程、矢量扩展、虚拟机管理程序扩展和其他扩展（属于最近和即将推出的 RISC-V 配置文件的一部分），以及可选的 AI 计算扩展。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;Akeana 5000 系列： 一系列极致性能处理器，代表了行业性能领先地位，超越了老牌竞争对手和 RISC-V 生态系统。该系列采用 64 位 RISC-V 内核，针对下一代设备、笔记本电脑、数据中心和云基础设施中的苛刻应用进行了优化，从而实现了终极差异化。这些处理器与 Akeana 1000 系列兼容，但单线程性能要高得多。 &lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;Processor System IP： 创建&amp;nbsp;processor SoC 所需的 IP 块集合，包括一致性集群缓存、I/O MMU 和中断控制器 IP。此外，Akeana 还提供可扩展网格和一致性中心 IP（与 AMBA CHI 兼容），用于为数据中心和其他用例构建大型一致性计算子系统。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;AI 矩阵计算引擎： 旨在卸载矩阵乘法运算以实现 AI 加速。它的大小可配置，支持各种数据类型，可以像核心一样连接到连贯集群缓存块，以实现最佳数据共享。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Akeana 首席执行官 Rabin Sugumar 表示：「我们的团队在设计世界一流的服务器芯片方面拥有丰富的经验，现在，随着我们正式进入市场，我们正在将这些专业知识应用于更广泛的半导体市场。」&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307613/risc-v-akeana-100m-funding</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307613/risc-v-akeana-100m-funding</guid>
            <pubDate>Sun, 18 Aug 2024 03:17:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>开源下载工具 Aria 被诈骗份子使用，开发者无奈清空代码仓库</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;开源下载工具 Aria 开发者昨日删除了该项目在 GitHub 仓库中的全部源代码。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0817/124242_UnZM_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Aria 开发者写道：「&lt;strong&gt;&lt;em&gt;因 Aria 被诈骗分子使用，导致我被跨省，因此本项目源码永久删除。&lt;/em&gt;&lt;/strong&gt;」&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0817/123724_l2gM_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;via&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAriaLyy%2FAria%2Fcommit%2F16e1fddca5996c1b2aba8b3284a0389f372ccf0b&quot; target=&quot;_blank&quot;&gt;https://github.com/AriaLyy/Aria&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Aria 是一个高性能、轻量级、易于使用的文件下载框架，主要应用于 Android 平台，目前在 GitHub 上有超过 5600 个 Star。&lt;/p&gt; 
&lt;p&gt;Aria 提供了丰富的 API，让用户可以方便地管理下载任务，包括添加、暂停、取消以及查询等操作，支持断点续传、限速下载、多线程下载等功能，旨在提升用户的下载体验。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307530</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307530</guid>
            <pubDate>Sat, 17 Aug 2024 04:45:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Rust 团队公布 2024 年发展目标</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;Rust 团队公布了 2024 年下半年的 26 个项目目标。其中 3 个被指定为 flagship 目标，代表预计将产生最广泛整体影响的目标。包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2FRust-2024-Edition.html&quot; target=&quot;_blank&quot;&gt;发布 Rust 2024 版本&lt;/a&gt;。2024 版计划进行的修改包括：通过调整捕获行为，支持&lt;code&gt;-&amp;gt; impl Trait&lt;/code&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;和&amp;nbsp;&lt;/span&gt;&lt;code&gt;async fn&lt;/code&gt;；通过保留&lt;code&gt;gen&lt;/code&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;keyword&lt;/span&gt;，允许在未来添加（async）生成器，以及更改&lt;code&gt;!&lt;/code&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;类&lt;/span&gt;型的回退。计划在今年晚些时候完成 Rust 2024 版本功能的开发。并于 2025 年 1 月 3 日发布测试版 Rust v1.85，2 月 20 日发布稳定版 Rust v1.85。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height=&quot;164&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-f0540caebdcee20a9556eabbdb6fbb6db00.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fasync.html&quot; target=&quot;_blank&quot;&gt;使 Async Rust 体验更接近 sync Rust&lt;/a&gt;。&lt;span style=&quot;color:#0c0c0c&quot;&gt;计划提供几个异步构建块功能，其中最值得注意的是对 async closures 和&lt;/span&gt;&lt;code&gt;Send&lt;/code&gt;&amp;nbsp;bounds&amp;nbsp;&lt;span style=&quot;color:#0c0c0c&quot;&gt;的支持。这是将&amp;nbsp;async Rust 的体验提升到与&amp;nbsp;sync Rust 相同质量水平的计划的一部分。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Frfl_stable.html&quot; target=&quot;_blank&quot;&gt;解决在稳定的 Rust 上构建 Linux 的一些障碍&lt;/a&gt;。Linux 内核对 Rust 开发的实验性支持被认为是&amp;nbsp;Rust&amp;nbsp;的一个分水岭，表明 Rust 确实有能力开发各种低级系统应用。但目前相关支持工作还停留在实验性阶段，项目团队计划在 2024H2 中努力扫清障碍。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;其余 23 个目标分别是：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fmin_generic_const_arguments.html&quot; target=&quot;_blank&quot;&gt;扩展 const 泛型的「可稳定」原型&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fyank-crates-with-a-reason.html&quot; target=&quot;_blank&quot;&gt;管理员提供的 yanked crates 的原因&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2FProject-goal-slate.html&quot; target=&quot;_blank&quot;&gt;制定项目目标清单&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2FATPIT.html&quot; target=&quot;_blank&quot;&gt;关联类型位置 impl trait&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fcargo-semver-checks.html&quot; target=&quot;_blank&quot;&gt;开始解决 merging into cargo 中的&lt;code&gt;cargo-semver-checks&lt;/code&gt;blockers 问题&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fconst-traits.html&quot; target=&quot;_blank&quot;&gt;Const traits&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fergonomic-rc.html&quot; target=&quot;_blank&quot;&gt;Ergonomic ref-counting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fsandboxed-build-script.html&quot; target=&quot;_blank&quot;&gt;探索沙盒构建脚本&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2FRust-for-SciComp.html&quot; target=&quot;_blank&quot;&gt;公开实验性的 LLVM 功能以实现 automatic differentiation 和 GPU offloading&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fpubgrub-in-cargo.html&quot; target=&quot;_blank&quot;&gt;扩展 pubgrub 以匹配 Cargo 的依赖解析&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fmerged-doctests.html&quot; target=&quot;_blank&quot;&gt;实施「merged doctests」以节省文档测试时间&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Frustdoc-search.html&quot; target=&quot;_blank&quot;&gt;让 Rustdoc Search 更易于学习&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fnext-solver.html&quot; target=&quot;_blank&quot;&gt;下一代 trait solver&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Foptimize-clippy.html&quot; target=&quot;_blank&quot;&gt;优化 Clippy 和 linting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2FPatterns-of-empty-types.html&quot; target=&quot;_blank&quot;&gt;空类型的模式&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2FPolonius.html&quot; target=&quot;_blank&quot;&gt;nightly 可扩展的 Polonius 支持&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fcargo-script.html&quot; target=&quot;_blank&quot;&gt;稳定&lt;code&gt;cargo-script&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fdoc_cfg.html&quot; target=&quot;_blank&quot;&gt;稳定&lt;code&gt;doc_cfg&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fparallel-front-end.html&quot; target=&quot;_blank&quot;&gt;稳定 parallel front end&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fstd-verification.html&quot; target=&quot;_blank&quot;&gt;调查工具对标准安全性验证的适用性&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fa-mir-formality.html&quot; target=&quot;_blank&quot;&gt;Testing infra + contributors for a-mir-formality&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fannotate-snippets.html&quot; target=&quot;_blank&quot;&gt;为 rustc diagnostic output&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fannotate-snippets.html&quot; target=&quot;_blank&quot;&gt;使用 annotate-snippet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Fuser-wide-cache.html&quot; target=&quot;_blank&quot;&gt;User-wide 的构建缓存&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;公告称，这些目标旨在&lt;span style=&quot;color:#000000&quot;&gt;进一步实现 Rust 的使命，&lt;/span&gt;即&lt;strong style=&quot;color:#000000&quot;&gt;让每个人都能构建可靠、高效的软件&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;更多详情可查看：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frust-lang.github.io%2Frust-project-goals%2F2024h2%2Findex.html&quot; target=&quot;_blank&quot;&gt;https://rust-lang.github.io/rust-project-goals/2024h2/index.html&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307523/rust-project-goals-2024h2</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307523/rust-project-goals-2024h2</guid>
            <pubDate>Sat, 17 Aug 2024 03:30:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>1Panel 应用推荐：Bytebase 开源数据库 DevOps 解决方案</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;1Panel（&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;github.com/1Panel-dev/1Panel&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;）是一款现代化、开源的 Linux 服务器运维管理面板，它致力于通过开源的方式，帮助用户简化建站与运维管理流程。为了方便广大用户快捷安装部署相关软件应用，1Panel 特别开通应用商店，精选各类高质量的开源工具和应用软件，为用户的应用安装与升级操作提供便利。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前，1Panel 应用商店已经上架了超过 100 款精品软件并且定期更新维护，基本涵盖了大部分用户的基本装机需求。自 2024 年 1 月起，1Panel 开源项目组特别开设「应用推荐」专栏，为大家推荐 1Panel 应用商店中的宝藏开源软件。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h1&gt;本期推荐应用&lt;/h1&gt; 
&lt;p style=&quot;color:#000000; text-align:center&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;Bytebase 开源数据库 DevOps 解决方案&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;540&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5228bc9fc16f179efbb013ec15c8b0f2cd9.jpg&quot; width=&quot;960&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span style=&quot;color:#005eeb&quot;&gt;-官方网站-&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:center&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;www.bytebase.com&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:center&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span style=&quot;color:#005eeb&quot;&gt;-开源许可协议-&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:center&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;Unknown&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:center&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span style=&quot;color:#005eeb&quot;&gt;-应用描述-&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:center&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;Bytebase 是一款为开发者、DBA 和平台工程师设计的数据库 CI/CD 工具。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:center&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span style=&quot;color:#005eeb&quot;&gt;-开发语言-&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:center&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;Go、TypeScript、Vue&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:center&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span style=&quot;color:#005eeb&quot;&gt;-上架版本-&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:center&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;v2.22.1&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:center&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span style=&quot;color:#005eeb&quot;&gt;-GitHub Star-&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:center&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;10,800+&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:center&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span style=&quot;color:#005eeb&quot;&gt;-GitHub Fork-&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:center&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;690+&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h1&gt;推荐原因&lt;/h1&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span style=&quot;color:#ff8124&quot;&gt;Bytebase 是一款为开发者、DBA 和平台工程师设计的数据库 CI/CD 工具，也可以把 Bytebase 理解为在用户和数据库之间工作的中间件。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#3e3e3e&quot;&gt;用户可以通过两种途径使用 Bytebase。首先是通过 GUI（图形用户界面），Bytebase 为用户提供了一个可以管理数据库开发任务的、基于 Web 的协作空间；其次就是通过 API 的方式，团队可以将 Bytebase 通过 API 的方式集成到自己的开发工作流中。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#3e3e3e&quot;&gt;Bytebase 使用 Go 语言开发，能够实现对数据库的生命周期管理。Bytebase 的核心功能包括：SQL 审查、数据库 CI/CD 和变更管理自动化、GitOps（Database-as-Code）、批量变更和查询、SQL 编辑器、动态数据脱敏、数据访问控制以及数据回滚等。这些功能有助于保障数据库的安全性，能够有效防范未经授权的数据库访问，避免数据泄露。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#3e3e3e&quot;&gt;Bytebase 的审计日志功能能够记录用户对数据库进行的操作，以便在发生故障时进行追踪和排查。Bytebase 可以替代多种本地 SQL 客户端，例如 Navicat、DBeaver、DataGrip、pgAdmin、phpMyAdmin 等，为用户提供更加便捷、高效的数据库管理体验。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#3e3e3e&quot;&gt;Bytebase 开源数据库 DevOps 解决方案由以下工具组成：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#005eeb&quot;&gt;■&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;Bytebase 控制枱：&lt;/strong&gt;一个基于 Web 的图形用户界面，供开发者和 DBA 管理数据库开发生命周期；&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#005eeb&quot;&gt;■&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;Bytebase API：&lt;/strong&gt;提供 gRPC 和 RESTful API，用于操作 Bytebase 的各个方面；&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#005eeb&quot;&gt;■&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#005eeb&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;Bytebase CLI：&lt;/strong&gt;命令行工具，帮助开发者将数据库变更集成到现有的 CI/CD 工作流中；&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#005eeb&quot;&gt;■&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;Bytebase GitHub App 和 SQL Review GitHub Action：&lt;/strong&gt;GitHub 应用和 GitHub Action，用于检测 SQL 反模式并在 Pull Request 中强制执行一致的 SQL 风格指南；&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; text-align:start&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#005eeb&quot;&gt;■&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;Terraform Bytebase Provider：&lt;/strong&gt;Terraform 提供程序，允许团队通过 Terraform 管理 Bytebase 资源。典型的设置涉及团队使用 Terraform 从云服务提供商处创建数据库实例，然后使用 Bytebase 提供程序将这些实例准备好以供应用程序使用。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307492</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307492</guid>
            <pubDate>Fri, 16 Aug 2024 15:20:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>全球开源技术峰会 GOTC 2024 圆满落幕</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;8 月 16 日，由上海浦东软件园与开源中国联合主办的全球开源技术峰会 GOTC 2024 圆满落幕。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;853&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-dd70ea86628d2a1b7463796ee99366f5353.png&quot; width=&quot;1280&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;h2&gt;5 亿+ 曝光量&lt;/h2&gt; 
 &lt;p&gt;本次大会为期两天，总共吸引了超过 3000 人到现场参会，线上直播观看量超过 680 万人次。媒体方面，共计有 30 多家媒体对本次大会进行报道，包括新华社、人民日报、经济日报、文汇报、新民晚报、证券日报、界面新闻、浦东时报、浦东电视台、东方财经电视台、中企视讯等主流新闻媒体，人民网、央视网、央广网、凤凰网、澎湃新闻、光明网、中国新闻网、中国网、东方网、经济网、中国企业网等主流新闻网站。&lt;/p&gt; 
 &lt;p style=&quot;text-align:left&quot;&gt;曝光总量超过 5 亿次，相关报道文章阅读量超过 800 万次。&lt;/p&gt; 
 &lt;p style=&quot;text-align:left&quot;&gt;&lt;img height=&quot;853&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6648167275f49580f7f011c4ed9d2000c0a.png&quot; width=&quot;1280&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h2&gt;特设高峰论坛，探讨&lt;strong&gt;开源生态与商业化、&lt;/strong&gt;&lt;strong&gt;AIGC&lt;/strong&gt;&lt;strong&gt; 产业前沿&lt;/strong&gt;&lt;/h2&gt; 
  &lt;p&gt;开源技术的快速发展和广泛应用，使得开源生态的构建及其商业化进程受到了业界的广泛关注。与此同时，AIGC 技术的崛起正日益成为推动产业创新与转型升级的关键动力。伴随着技术的持续成熟和市场空间的不断拓展，AIGC 技术的产业化应用正逐步成为行业焦点。&lt;/p&gt; 
  &lt;p&gt;在此背景下，本次大会特设高峰论坛，探讨开源生态与商业化、AIGC 产业前沿两大主题。会上，众多业内专家围绕开源技术在机器人、区块链、操作系统、芯片等领域的生态建设和商业化路径展开分享，以及就 AIGC 技术的创新趋势、商业潜力以及对社会的深远影响展开探讨。&lt;/p&gt; 
  &lt;p&gt;&lt;img height=&quot;474&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e6f7d22536d1559c0a196a0192d98295e05.png&quot; width=&quot;839&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;div&gt; 
   &lt;h2&gt;&lt;strong&gt;深度聚焦并全面探讨 &lt;/strong&gt;&lt;strong&gt;AI&lt;/strong&gt;&lt;strong&gt; 技术&lt;/strong&gt;&lt;/h2&gt; 
   &lt;p style=&quot;text-align:left&quot;&gt;大会除了设置「云原生与微服务架构」「开源生态与商业化」等论坛，还结合当下技术与行业发展趋势，深度聚焦并全面探讨 AI 技术。&lt;/p&gt; 
   &lt;p&gt;主论坛演讲广泛涵盖了人工智能领域的多个重要维度，从开源硬件到具身智能，从深度学习平台的技术革新到开源 AI 生态的构建，以及大模型应用的落地和企业在开源环境下的 AI 战略。这些讨论为 AI 未来发展方向提供了宝贵的指引。&lt;/p&gt; 
   &lt;p&gt;&lt;img height=&quot;1118&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0817/003046_QPVw_3820517.png&quot; width=&quot;1664&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
   &lt;p&gt;此外，还有多个论坛主题与 AI 密切相关，比如 AIGC 产业前沿、 LLMOps 最佳实践、硬核 AI 技术创新与实践、开源数据库与 AI 协同创新、数据基础与 GenAI 开发范式 —— 开源生态的机遇与探索、全球开源人才及教育等论坛，覆盖 AI 技术的各个前沿领域，加强了学术界、产业界和开源社区之间的紧密合作与知识共享，为参会者提供深度洞察和实践指导，推动 AI 技术与各领域的深度融合与发展。&lt;/p&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;&lt;img height=&quot;571&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-b70da139828a80e673e573e77a20401e009.png&quot; width=&quot;841&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;h2&gt;多个重磅&lt;strong&gt;项目启动&lt;/strong&gt;&lt;/h2&gt; 
       &lt;p&gt;本次大会，有多个重磅项目宣布启动，从开源生态构建、开源技术应用、开源社区扩展、开源项目推广以及开源人才培养等方面促进开源生态持续繁荣发展。&lt;/p&gt; 
       &lt;ul&gt; 
        &lt;li&gt; &lt;p&gt;开源生态网络共建暨张江节点揭牌&lt;/p&gt; &lt;/li&gt; 
        &lt;li&gt; &lt;p&gt;世纪互联与开源中国宣布正式开启战略合作&lt;/p&gt; &lt;/li&gt; 
        &lt;li&gt; &lt;p&gt;openKylin 园区运营战略发布暨全球首个园区站——浦软站成立&lt;/p&gt; &lt;/li&gt; 
        &lt;li&gt; &lt;p&gt;国际开源技术人才培养基地挂牌仪式暨国内首个 OSPO 课程联合发布&lt;/p&gt; &lt;/li&gt; 
        &lt;li&gt; &lt;p&gt;LFOSSA 国际人才培养认证中心暨 RISC-V 国际人才师资培养基地启动&lt;/p&gt; &lt;/li&gt; 
       &lt;/ul&gt; 
       &lt;div&gt;
        &lt;img height=&quot;478&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5cecfc832ba1c084b275cd746f3dac1ef0e.png&quot; width=&quot;851&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;div&gt; 
         &lt;h2&gt;100+ 家企业、开源社区汇聚&lt;/h2&gt; 
         &lt;div&gt;
          大会现场设置了展区，汇聚了 F5 NGINX、飞腾信息、Elasticsearch、百度
          &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;、openKylin 社区等涵盖 Web 服务、自主核心芯片、开源数据库等多个领域的 100+ 企业和开源社区，不仅带来了行业领先的解决方案，也为参与者搭建了一个探索开源技术未来趋势的窗口。
         &lt;/div&gt; 
         &lt;div&gt;
          &lt;img height=&quot;385&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-432083689f9c84f77764a8cd01d0d1df27a.png&quot; width=&quot;839&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
         &lt;/div&gt; 
         &lt;div&gt; 
          &lt;div&gt; 
           &lt;h2&gt;致谢&lt;/h2&gt; 
           &lt;div&gt;
            GOTC 2024 圆满落幕，感谢政府领导支持，感谢大会出品人与论坛出品人的积极参与，感谢各位嘉宾的精彩分享，感谢众多开源专家出谋划策，感谢所有媒体，感谢所有社区合作伙伴，感谢所有观众朋友，感谢所有工作人员。
           &lt;/div&gt; 
           &lt;div&gt;
            感谢赞助商、合作伙伴对本次峰会的大力支持：
           &lt;/div&gt; 
           &lt;div&gt;
            &lt;img height=&quot;2540&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-05d2fba5fd65df8b52cd7bcb5c5163d4efb.png&quot; width=&quot;1445&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
           &lt;/div&gt; 
          &lt;/div&gt; 
         &lt;/div&gt; 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307485/gotc-gogc-2024</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307485/gotc-gogc-2024</guid>
            <pubDate>Fri, 16 Aug 2024 14:31:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>开源日报 | 网传海思可能脱离华为；滴滴开源 Unify；deepin V23 发布；Transformer 的可视化解释；谷歌前 CEO 演讲大爆料</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.8.16&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/307354/didi-unify-flutter&quot;&gt;滴滴开源 Flutter 混合开发框架 Unify&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;滴滴近日开源了自研 Unify 框架，旨在解决大规模跨端落地场景下，Flutter 与原生模块之间的通信问题。Unify 通过平台无关的模块抽象、灵活的实现注入、自动代码生成等特性，为开发者提供高效、灵活、易用的 Flutter 混合通信能力。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;开源地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdidi%2FUnify&quot; target=&quot;_blank&quot;&gt;https://github.com/didi/Unify&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Unify 是一个 Flutter 混合开发框架，由滴滴出行国际化外卖团队自研，亮点特性包括:&lt;/p&gt; 
&lt;ul style=&quot;list-style-type:disc; margin-left:0; margin-right:0&quot;&gt; 
 &lt;li&gt;&lt;strong&gt;平台无关的模块抽象&lt;/strong&gt;: 允许开发者使用 Dart 语言声明与平台无关的模块接口与实体。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;灵活的实现注入&lt;/strong&gt;: 开发者可以灵活地选择注入原生实现（Android/iOS）或 Flutter 实现。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;自动代码生成&lt;/strong&gt;: 借助强大的代码生成引擎，Unify 可以自动生成 Flutter、Android、iOS 多平台下统一调用的 SDK。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/307293/deepin-v23-released&quot;&gt;deepin V23 正式发布&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;8 月 15 日，国际知名开源社区 deepin（深度）社区在线上举办了主题为 「聚 AI 而生，大有不同」 新品发布会，正式对外发布开源操作系统 deepin V23，带来了全新 DDE 视界、 AI For OS、「如意玲珑」 应用生态、「deepin IDE」 集成开发环境等诸多重磅更新。&lt;/p&gt; 
 &lt;p&gt;deepin V23 研发耗时三年，上线了 200 余个产品优化和新增需求，迭代了 9 个版本、51 次内测，自研了 8 款开发工具。&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/307420&quot; target=&quot;news&quot;&gt;学生篡改同学高考志愿被刑拘，构成「破坏计算机系统罪」&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0816/120920_ymfD_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2703634217%2FOso7kapwK&quot; target=&quot;_blank&quot;&gt;Processing 是一种开源编程语言，专门为电子艺术和视觉交互设计而创建&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;它由 MIT 媒体实验室的 Casey Reas 和 Benjamin Fry 于 2001 年发起。Processing 的目的是通过可视化的方式辅助编程教学，并在此基础上表达数字创意。&lt;/p&gt; 
    &lt;p&gt;Processing 语言的语法简易，基于 Java 语言，但更适合艺术家、设计师等非程序员群体。它广泛应用于艺术、交互、动画、数据可视化、视觉设计和原型开发等领域。&lt;/p&gt; 
    &lt;p&gt;下面为它的一段代码示例&lt;/p&gt; 
    &lt;p&gt;f=0,draw=a=&amp;gt;{for(f||createCanvas(W=400,W,WEBGL),background(P=PI/150),R=rotate,R(f+=.001),N=sin,u=0;u&amp;lt;TAU;u+=P)for(v=0;v&amp;lt;TAU;v+=P)push(r=200*N(v)),S=(Z=tan(U=u+f)*N(v)*r)*cos(U+v)*9,rotateX(U),R(U),translate(N(v)*W,N(Z/W)*tan(v)*Z,2*-Z),pop(sphere(S/600,W))};&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div style=&quot;text-align:right&quot;&gt;
   &lt;span&gt;- 微博&amp;nbsp;&lt;strong&gt;物理芝士数学酱&lt;/strong&gt;&lt;/span&gt;
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1554710050%2FOsoZHtJT3&quot; target=&quot;_blank&quot;&gt;马斯克的梗图满天飞&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     马斯克的最新大模型刚上线，就把自家老板玩坏了，现在已经梗图满天飞了。
    &lt;/div&gt; 
    &lt;div&gt;
     &amp;nbsp;
    &lt;/div&gt; 
    &lt;div&gt;
     &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-6f88fdfc75aff8f45fc0007dc9a4daf721e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;&lt;span&gt;傅盛&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1144393351%2FOsv7Ro3Wf%3Frefer_flag%3D1001030103_&quot; target=&quot;_blank&quot;&gt;网传海思可能会脱离华为，成为独立的芯片公司&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     网传海思可能会脱离华为，成为独立的芯片公司，这样海思就可以向全球各厂商供货，而不是华为独占。对于海思的发展壮大可是个很好的推动，各手机厂商都可以推出基于麒麟处理器以及开源鸿蒙系统（就像安卓一样，可以自主打造 UI）的手机，除了高通、联发科技，要有了新的选择，而这个选择是完全自主可控的，不会受到外部威胁，而且可以对高通狠狠地压价，这对于国产芯片产业和信息产业将是巨大利好。如果真能如此，那么华为等于是把培养好的优秀的孩子为国贡献了，更加值得敬佩！（以上仅为预测）
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;通信老柳&lt;/strong&gt;&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1233486457%2FOslP9BqBx%3Fpagetype%3Dprofilefeed&quot; target=&quot;_blank&quot;&gt;Transformer 的可视化解释&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    关于 Transformer 的可视化解释，已经有不少了，但是科普永远不嫌多。这个可视化网站，模拟了实际 Token 的运行，很写实了。链接：https://poloclub.github.io/transformer-explainer/
   &lt;/div&gt; 
   &lt;div style=&quot;text-align:right&quot;&gt;
    - 微博&amp;nbsp;
    &lt;strong&gt;高飞&lt;/strong&gt;
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1560906700%2FOsvmtkAq5&quot; target=&quot;_blank&quot;&gt;前 Google CEO 声称远程工作导致了 Google 在 AI 竞争中落后&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;曾经担任谷歌 CEO 长达 10 年之久的 Eric Schmidt 前几天去斯坦福大学受邀计算机学院的会议，他的演讲全程各种放飞自我，中途语重心长的告诉台下学生，这场会议是保密的，自己说的那些话千万不要外传。&lt;/p&gt; 
    &lt;p&gt;然而，主办方对 Eric Schmidt 说，这场会议有摄像头正在全程直播……他的表情就凝固了。虽然斯坦福大学后来把视频从 YouTube 撤了下去，但已经有很多人都做了存档，Github 上也有全文备份：transcripts&lt;br&gt; /Stanford_ECON295⧸CS323_I_2024_I_The_Age_of_AI,_Eric_Schmidt.txt&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;阑夕&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnew.qq.com%2Frain%2Fa%2F20240815A08XLJ00&quot; target=&quot;_blank&quot;&gt;ETH 总供应量突破 1.2 亿枚&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt;
  &lt;span style=&quot;background-color:#ffffff; color:#1f1f1f&quot;&gt;去中心化的开源区块链平台以太坊最近达到重要里程碑，ETH 总供应量突破 1.2 亿枚，Ultrasound.money 的最新数据，过去 30 天内发行了 77,091 个 ETH，当前以太坊代币供应量已增加至约 1.2028 亿枚 ETH。除了过去 30 天内发行的 77,091 ETH 之外，还有 19,438 ETH 通过销毁机制被销毁，导致净供应量增加约 57,653 ETH。&lt;/span&gt;
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;币界网&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F3g.k.sohu.com%2Ft%2Fn814024429%3FserialId%3Df180c7ac8bc4269e03b11d09af63d811&quot; target=&quot;_blank&quot;&gt;美国 AI 法案大削弱！AI 圈炸锅，李飞飞公开谴责，国内 AI 企业关心的全在这了&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;饱受争议的加州《前沿 AI 模型安全创新法案》（后称加州 AI 安全法案）在大幅度削弱后，顺利通过加州众议院拨款委员会的审核。在国家层面监管法律难产的困局中，这成为了美国在 AI 监管上迈出的重要一步，然而科技界部分人士认为这最终将会损害加州乃至美国在 AI 领域的领先地位。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;智东西&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F36kr.com%2Fp%2F2908069089549185&quot; target=&quot;_blank&quot;&gt;半年亏 30 亿，「硅片王」没扛住，退二线了&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;小刘有些紧张了，他是 TCL 中环天津基地的一名工程师。两周前，这个硅片巨头的 CEO 沈浩平的突然辞任，开始在内部产生影响。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;据他说，目前公司已经开始有基地部分停工，该消息并未得到 TCL 中环的确认。公开数据显示，这家公司的硅片业务开工率在今年上半年维持在 95% 左右，而老对手隆基绿能只有 50%。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;中国企业家杂志&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.com.cn%2Fstock%2Fusstock%2Fc%2F2024-08-16%2Fdoc-inciuums2788305.shtml&quot; target=&quot;_blank&quot;&gt;谷歌前 CEO 建议买入英伟达：AI 芯片领先地位很难被超越&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;施密特在斯坦福大学本周发布、但后来被删除的一段视频中表示，大型科技公司正计划对基于英伟达的人工智能数据中心进行越来越大的投资，建设成本可能高达 3000 亿美元。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#212121&quot;&gt;环球市场播报&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.cn%2Farticle_2853016445_aa0d937d02000zqde.html&quot; target=&quot;_blank&quot;&gt;破解 AI 大模型落地成本难题，开源开放是「必修课」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;虽然开源大模型相关产品比闭源大模型的产品问世的时间较晚，但是其增长速度迅猛，而开源大模型的能力当下也足以媲美最先进的闭源大模型。例如，Meta 最新发布的 Llama3.1 模型的参数规模达到 403B，是目前参数规模最大的开源模型。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span&gt;钛媒体 APP&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8c5hSlbWELg&quot; target=&quot;_blank&quot;&gt;国泰君安：算力需求高增 AI ASIC 突围在即&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;国泰君安证券发布研报认为，ASIC 针对特定场景设计，有配套的通信互联和软件生态，虽然目前单颗 ASIC 算力相比最先进的 GPU 仍有差距，但整个 ASIC 集群的算力利用效率可能会优于可比的 GPU，同时还具备明显的价格、功耗优势，有望更广泛地应用于 AI 推理与训练。其软硬件生态体系日趋成熟，未来有望实现高速增长。国泰君安证券看好 ASIC 的大规模应用带来云厂商 ROI 提升，同时也建议关注定制芯片产业链相关标的。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;智通财经 APP&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.cn%2Farticle_1650111241_625ab309020019r6g.html&quot; target=&quot;_blank&quot;&gt;阿里调整仍「在路上」 淘天加速商业化是重中之重&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;另据国信证券统计的电商企业 2023 年的货币化率数据，2023 年抖音电商的货币化率飙高至 9%，拼多多货币化率超过了 4.5%，淘宝天猫的货币化率约为 3.77%。具体将淘宝与拼多多做对比，2023 年淘宝的货币化率约为 1.1%，拼多多的货币化率则是淘宝的 4 倍，约为 4.4%。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;由此可见，此前淘宝对商家加收基础软件服务费，目的在于提升淘宝货币化率，在接下来一段时间也会成为阿里巴巴增加营收的重要手段之一。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;- &lt;/span&gt;&lt;strong&gt;中国经营报&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnwtgck%2Fpiping-server&quot; target=&quot;_blank&quot;&gt;nwtgck/piping-server&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;272&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a8fc6c0e93a2411f0115ee7fc6c0c9ea725.gif&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnwtgck%2Fpiping-server&quot; target=&quot;_blank&quot;&gt;https://github.com/nwtgck/piping-server&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Piping 是轻量级的开源文件传输工具，支持自托管，支持使用 curl、wget 下载，支持更广泛地在无浏览器的设备上使用，也可以用于不同设备间传输文本或者文件，或者在不同用户间传递资料等场景。&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/u/4939618/blog/15330069&quot; target=&quot;_blank&quot;&gt;基于飞桨框架的稀疏计算使用指南&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;本文将详细介绍如何基于飞桨框架进行稀疏计算，包括稀疏数据格式的基础知识、如何创建和操作稀疏张量，以及如何开发和训练稀疏神经网络模型，特别是如何实现和应用稀疏 ResNet。通过这些知识，我们可以更有效地利用计算资源，加速模型训练过程，同时提高模型处理大规模稀疏数据的能力。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;图片&quot; height=&quot;251&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c6086b15bb71ba6ac953c90ab8894148b7f.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FLx1y1-XGEnHVjr8QZFuI6A&quot; target=&quot;_blank&quot;&gt;deepin V23 正式发布：全新 DDE 桌面环境、「原子更新」能力、全栈自研矩阵、「如意玲珑」软件包格式&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：deepin 的界面我真感觉不错&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：挺好的。争取后面慢慢把桌面软件闭环，形成一个统一的系统。提供统一的体验。而不再是积木一样拼装。尤其是 api，abi，慢慢沉淀稳固下来，不轻易变动。linux 桌面世界，太碎片化了，导致应用开发分发是个老大难问题。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：新版桌面是基于 Wayland 的吗？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：有类似 xrdp 这样的软件吗？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：可惜是旧世界&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：emm Allure 的报告，加把劲吧，别在文章上下功夫&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：浏览器是自研的吗，那前端不是要多适配一种（还是基于 chromium 封装的&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：对哪些笔记本做了兼容性测试，有没有推荐清单？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：一会 Deepin v23，一会 Deepin V23，一会又 Deepin 23。你这个系统一点不讲究。版本号乱的一塌糊涂。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：openkylin 追的很紧，又搞一套标准，都在抢信创这块蛋糕，但技术上说还是看好 deepin 的方案&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F8ov7oRIn4qw2Xt4DAdraWA&quot; target=&quot;_blank&quot;&gt;前谷歌 CEO 大实话：远程工作导致谷歌在 AI 竞争中输得一塌糊涂、开源负担不起 AI 行业的成本&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：受教了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：google 觉得让员工尽早下班取得工作生活平衡比赢得竞争更重要，什么神仙公司&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：台积电的流水线可不是一般的流水线&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：分布式电源改造了车间才使生产力大幅提高？AI Agent？&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：现在的 ai 是电灯取代蜡烛，聊胜于无，真正的第二次工业革命是电动机和电动化设备大规模投入使用。&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：其说是谷歌的选择不如说是美国替他做了选择，因为美国需要这样的价值观来吸引人才&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FfvoLhtfh5a-DFEWphEjmgw&quot; target=&quot;_blank&quot;&gt;32 岁女生学编程，为 k8s 开源社区贡献代码——结果被群嘲&lt;/a&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：我认为没问题，格式错误也是错误，是错误就可以被修复，这很难理解吗，程序员的严谨哪里去了？不要告诉我文档贡献者不是贡献者哈&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：小红书上已经开始有跟风的模仿者了，这就真无语了。想参加开源就认真一些，即使带着功利心也请维护开源社区的环境。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：前两天我还就此喷了一个感觉像是为她洗的博主，说什么她这种新人提交 pr 就不该喷，那我寻思着转码 20 天就开始看 k8s，提交了一个没什么用的 pr，这种新人不该被喷？20 天一个语言就刚学完，都没熟练就搞这种，活该被骂，属于是纯粹作秀&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：看似学编程， 实则是搞自媒体&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：大家喷的是她的技术吗？喷的是这种人投机取巧，冶容诲淫的行为。因为那些混子项目经理早就这么干了，这个新来脸还没混熟，门路倒是摸透了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：bro 看起来更适合稻壳儿开源社区&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：不是语雀文档？&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：这自我营销意识，行业热门关键词的抓取能力，不愧是国内 985 的头脑&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：这博主确实心态很有问题。「第一次为开源社区做贡献」，这么说吧，是不是真的做了贡献，这个事情自己说了不算，别人说了才算。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：openkylin 追的很紧，又搞一套标准，都在抢信创这块蛋糕，但技术上说还是看好 deepin 的方案&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 11：加个换行没问题，但吹就有点过分了…&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 12：什么时候说实话都成网曝了？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 13：你看看搞底层的，搞单片机的，搞硬件的就不会有这么多骂战，出这些事儿的都是浮于应用层上的，为啥?&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 14：因为不用这东西，怎么会去关注他呢&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 15：健身房拍照打卡一个意思&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 16：英语专业转 IT 很适合，很多技术文档都需要英语外翻，而且公司壮大跨国业务，也都需要会英语的技术支持！&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 17：现在 AI 翻译效果很好了，是了微信读书会员看英文书双语翻译技术书的效果让我吃惊。&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 18：这么提交的话以后看提交的得忙死&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 19：我觉得网友喷她是因为她虚荣心太胜又没匹配的贡献&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307463</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307463</guid>
            <pubDate>Fri, 16 Aug 2024 11:01:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>基于飞桨框架的稀疏计算使用指南</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;blockquote&gt; 
 &lt;p&gt;本文作者-是 Yu 欸，华科在读博士生，定期记录并分享所学知识，博客关注者 5w+。本文将详细介绍如何在 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;PaddlePaddle&lt;/a&gt; 中利用稀疏计算应用稀疏 ResNet，涵盖稀疏数据格式的础知识、如何创建和操作稀疏张量，以及如何开发和训练稀疏神经网络模型。&lt;/p&gt; 
 &lt;p&gt;项目完整代码已上传至&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;星河社区：&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faistudio.baidu.com%2Fprojectdetail%2F8055035&quot; target=&quot;_blank&quot;&gt;https://aistudio.baidu.com/projectdetail/8055035&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;在现代计算框架中，为了高效地处理和存储大规模的数据集，尤其是在这些数据集中存在大量零值的情况下，采用稀疏数据结构变得尤为重要。&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;是一个领先的深度学习平台，提供了强大的稀疏计算能力，支持从基本的稀疏张量操作到构建复杂的稀疏神经网络。这些工具主要通过 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse 命名空间来实现，使得开发者能够高效处理大量包含零值的数据集，从而优化内存使用和计算速度&lt;/p&gt; 
&lt;p&gt;本文将详细介绍如何基于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架进行稀疏计算，包括稀疏数据格式的基础知识、如何创建和操作稀疏张量，以及如何开发和训练稀疏神经网络模型，特别是如何实现和应用稀疏 ResNet。通过这些知识，我们可以更有效地利用计算资源，加速模型训练过程，同时提高模型处理大规模稀疏数据的能力。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_1&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;01 稀疏格式简介&lt;/h1&gt; 
&lt;p&gt;稀疏格式是一种特殊的数据存储方式，旨在有效存储和处理其中大部分元素为零的矩阵或张量。这种方法可以显著减少存储空间的需求，并提高数据处理的效率。常见的稀疏格式包括 COO（座标列表格式）、CSR（压缩稀疏行格式）等。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎COO（Coordinate Format）&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 COO 格式中，只记录非零元素的位置和值。这种格式由三个主要组件组成：indices、values 和 shape。indices 是一个二维数组，其中的每一列代表一个非零元素的座标；values 存储对应的非零元素值；shape 则描述了张量的维度。如下图所示。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-c6086b15bb71ba6ac953c90ab8894148b7f.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎CSR（Compressed Sparse Row Format）&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;CSR 格式是一种更为紧凑的稀疏表示，专为快速的行访问和矩阵乘法运算优化。在 CSR 中，通过三个数组 crows、cols 和 values 来表示稀疏矩阵。crows 存储每一行第一个非零元素的索引，cols 存储非零元素的列索引，而 values 则直接存储这些非零元素的值。如下图所示。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-a641c55c94be8c7aa02b9589bb0052d4b99.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_2&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;02 基于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的稀疏张量支持&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架提供了完整的支持来创建和操作 COO 和 CSR 格式的稀疏张量。以下是基于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架创建和操作这些张量的具体方法。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎创建 COO&amp;nbsp;格式的&amp;nbsp;SparseTensor&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;COO 格式（Coordinate List）：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;这是一种常用的稀疏表示格式，其中非零元素通过其座标列表进行存储。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.sparse_coo_tensor(indices,values, shape)&amp;nbsp;可以创建 COO 格式的稀疏张量，其中 indices 是一个二维整数张量，表示非零元素的座标；values 是一个张量，包含与 indices 对应的值；shape 是一个定义张量形状的整数列表或张量。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;结构特点：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;COO 格式通过一个座标列表存储非零元素的位置和相应的值。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;它使用三个数组：一个数组存储行索引，一个存储列索引，第三个存储元素值。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;适用场景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;数据添加频繁：当稀疏矩阵需要频繁添加新的非零元素时，COO 格式是较好的选择，因为它允许直接添加数据而不需重新构造整个数据结构。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;简单结构：适合于那些结构简单的矩阵，特别是在非零元素分布较为随机时。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;示例代码：&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架中， sparse_coo_tensor 函数可用来创建 COO 格式的稀疏张量。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import paddle

indices = [[0, 1, 2], [1, 2, 0]]
values = [1.0, 2.0, 3.0]
dense_shape = [3, 3]
coo = paddle.sparse.sparse_coo_tensor(indices, values, dense_shape)
print(coo)


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;输出：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Tensor(shape=[3, 3], dtype=paddle.float32, place=Place(cpu), stop_gradient=True,
       indices=[[0, 1, 2],
                [1, 2, 0]],
       values=[1., 2., 3.])


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在这个例子中，indices 定义了非零元素的位置，其中每个子数组的两个数字分别代表行和列的座标。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-39925ba44c4990271396b9d312242fbf22c.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎创建&amp;nbsp;CSR 格式的&amp;nbsp;SparseTenso&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;CSR 格式（Compressed Sparse Row）&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;这是另一种常用的稀疏表示格式，主要用于优化行访问的性能，其中非零元素通过行的压缩方式进行存储。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.sparse_csr_tensor(crows, cols, values, dense_shape) 可以创建 CSR 格式的稀疏张量，其中 crows 定义了每一行非零元素开始的位置在 values 数组中的索引，这有助于快速定位行的起始点和终点。cols 则指示了非零元素在各自行中的列位置，values 提供了相应的值。dense_shape 指定了张量的整体形状，即行数和列数。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;结构特点：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;CSR 格式通过行来压缩存储，使用三个数组：行指针数组、列索引数组、以及非零元素值数组。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;行指针数组的大小比实际行数多一个，用于表示每行的起始位置和结束位置。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;适用场景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;行操作优化：当需要高效地进行行相关的操作（如行切片、行求和）时，CSR 格式提供更优的性能。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;矩阵乘法：对于稀疏矩阵与稀疏或密集矩阵的乘法运算，CSR 格式通常会提供更好的性能。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;大规模数据处理：在处理大规模稀疏数据时，CSR 格式因其压缩特性而节省内存。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;示例代码：为了创建 CSR 格式的稀疏张量，&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架提供了 sparse_csr_tensor 函数。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import paddle

crows = [0, 2, 3, 5]
cols = [1, 3, 2, 0, 1]
values = [1, 2, 3, 4, 5]
dense_shape = [3, 4]
csr = paddle.sparse.sparse_csr_tensor(crows, cols, values, dense_shape)
print(csr)


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;输出：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Tensor(shape=[3, 4], dtype=paddle.int64, place=Place(cpu), stop_gradient=True, 
       crows=[0, 2, 3, 5], 
       cols=[1, 3, 2, 0, 1], 
       values=[1, 2, 3, 4, 5])


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在这个例子中，crows 定义了每一行非零元素开始的位置在 values 数组中的索引，这有助于快速定位行的起始点和终点。&lt;/p&gt; 
&lt;p&gt;这种 CSR 格式的表示方式适用于数据稀疏且行访问频繁的场景。它通过压缩行索引来减少内存使用，优化了对稀疏矩阵行的操作，使得行级操作更加高效。在处理行密集型操作（如行切片或行求和）时特别高效，也适合于稀疏矩阵的乘法等计算密集任务。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎创建稀疏张量的相关参数详解&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在基于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架创建稀疏张量 API 中，参数的设计允许用户灵活定义和操作稀疏数据结构。对于两种类型的稀疏张量创建函数，参数主要涉及初始化数据的类型和结构，其中：&lt;/p&gt; 
&lt;p&gt;■&amp;nbsp;&lt;strong&gt;共通参数&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;对于 sparse_coo_tensor 和 sparse_csr_tensor 函数，存在一些共通的参数，这些参数允许用户指定如何构建和处理稀疏张量：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;values (list|tuple|ndarray|Tensor)：&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;表示非零元素的实际数值。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;类似于索引参数，可以是 list、tuple、NumPy ndarray 或 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;Paddle&lt;/a&gt; Tensor。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;shape (list|tuple, 可选)：&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;定义稀疏张量的形状，如果未提供，则会根据 indices 或 crows 和 cols 的最大值自动推断。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;必须是一个整数列表或元组，指定张量在每个维度的大小。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;dtype (str|np.dtype, 可选)：&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;指定张量元素的数据类型，如&amp;nbsp;&#39;float32&#39;, &#39;int64&#39; 等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如果未指定，则从 values 的数据类型自动推断。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;4&quot;&gt; 
 &lt;li&gt;place (CPUPlace|CUDAPinnedPlace|CUDAPlace|str, 可选)：&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;决定张量的存储设备，例如 CPU 或 GPU。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如果未指定，则使用当前环境的默认设备。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start=&quot;5&quot;&gt; 
 &lt;li&gt;stop_gradient (bool, 可选)：&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;指示是否对该张量进行梯度计算。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在大多数深度学习应用中，非模型权重的张量通常设置为 True 以提高计算效率。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;■&amp;nbsp;&lt;strong&gt;特定格式的参数细节&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;除了上述共通参数外，COO 和 CSR 格式因其数据结构的不同而在参数应用上有所区别。&lt;/p&gt; 
&lt;p&gt;indices, crows, cols (list|tuple|ndarray|Tensor)：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;对于 COO 格式，indices 参数是一个二维数组，用于直接指定每个非零元素的多维座标。主要用于数据的随机访问和转换操作，适用于那些非零元素分布相对均匀的场景。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;对于 CSR 格式，crows 表示每一行的起始非零元素索引，而 cols 存储这些非零元素的列索引。CSR 格式优化了行的连续访问，非常适合矩阵乘法和其他行优先操作。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;这些参数可以是 Python 的 list 或 tuple，也可以是 NumPy ndarray 或 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;Paddle&lt;/a&gt; Tensor。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;通过这些参数的灵活使用，&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架允许开发者以高效且灵活的方式处理大规模稀疏数据集，从而在保持性能的同时减少内存消耗。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎COO 格式和 CSR 格式的选择建议&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;如果应用主要涉及构建稀疏矩阵和逐项添加数据，COO 格式会更简单且直接。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如果应用需要高效的行操作或频繁进行矩阵乘法，特别是在稀疏矩阵较大的情况下，CSR 格式是更好的选择。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;选择哪种格式应基于具体应用需求，如操作类型、数据规模和性能要求。在&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架中，你可以根据需要轻松地在两种格式之间转换，以适应不同的计算需求。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎稀疏与稠密 Tensor&amp;nbsp;互转&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架提供了一套简单易用的接口，使得稀疏张量的使用与传统的稠密张量操作体验高度一致，从而降低了学习成本并便于开发者快速上手。这种设计允许在同一个模型中灵活地使用稠密和稀疏数据结构，而且方便转换，这对于处理大规模数据集尤其重要，在深度学习、图像处理和自然语言处理等领域有着广泛的应用。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架支持通过几个简单的 API，实现稀疏与稠密之间的转换，这些操作保证了数据处理的灵活性和效率。如 Tensor.to_dense() 可以将稀疏张量转换为标准的密集张量, Tensor.to_sparse_coo(), 和 Tensor.to_sparse_csr() 可以将密集张量转换为 COO 格式、CSR 格式的稀疏张量。&lt;/p&gt; 
&lt;p&gt;以下为稠密到稀疏的转换代码示例：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import paddle

# 创建一个稠密的 Tensor
dense = paddle.to_tensor([[0, 1, 0, 2], 
                          [0, 0, 3, 4]], dtype=&#39;float32&#39;)

# 将稠密 Tensor 转换为 COO 格式的稀疏 Tensor
coo = dense.to_sparse_coo(sparse_dim=2)
print(coo)
# 输出：
# Tensor(shape=[2, 4], dtype=paddle.float32, place=Place(gpu:0), stop_gradient=True, 
#       indices=[[0, 0, 1, 1],
#                [1, 3, 2, 3]], 
#       values=[1., 2., 3., 4.])

# 将稠密 Tensor 转换为 CSR 格式的稀疏 Tensor
csr = dense.to_sparse_csr()
print(csr)
# 输出：
# Tensor(shape=[2, 4], dtype=paddle.float32, place=Place(gpu:0), stop_gradient=True, 
#       crows=[0, 2, 4], 
#       cols=[1, 3, 2, 3], 
#       values=[1., 2., 3., 4.])


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这些转换非常直观，仅需要简单的一步操作就可以完成，使得稀疏和稠密格式之间的交互变得简洁高效。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-37f3327578ae5384e619c7421156f42be56.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_3&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;03 基于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架进行稀疏计算的设计优势&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的设计目标之一是提供一致的用户体验，无论是处理稀疏数据还是稠密数据。这意味着即便是在处理包含大量零值的数据集时，开发者也可以利用熟悉的接口和模式来构建和训练模型。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎API 设计的一致性&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的稀疏模块提供了与常规稠密操作相似的 API 接口，开发者无需学习新的 API 就能处理稀疏数据。例如：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;稀疏卷积层：稀疏模块中的 SubmConv3D 直接对应常规卷积操作中的 Conv3D。二者参数非常相似，如 in_channels, out_channels, stride, padding 等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;批归一化和激活函数：稀疏模块同样提供了批归一化和激活函数，如 BatchNorm3D 和 ReLU，其用法与常规模块中的相同。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;▎集成度：训练和推理的处理流程&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;无论是稀疏还是稠密模型，&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架中的训练和推理流程保持一致。稀疏操作可以与&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的其他特性（如自动微分和优化器）无缝集成，使得构建和训练稀疏模型与常规模型几乎无异。&lt;/p&gt; 
&lt;p&gt;1)&amp;nbsp;定义模型：无论选择稀疏还是稠密模型，模型定义的方式都是相似的，使用 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.nn.Layer 类来构建网络层。&lt;/p&gt; 
&lt;p&gt;2)&amp;nbsp;编译模型：使用 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.Model 对象来包装定义好的网络，然后编译，包括设置优化器、损失函数和评估指标。&lt;/p&gt; 
&lt;p&gt;3)&amp;nbsp;训练和评估：通过调用 .fit 和 .evaluate 方法来进行训练和评估，这与处理稠密数据的流程完全一致。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_4&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;04 基于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的稀疏神经网络层支持&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;▎稀疏 ResNet 的应用场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在处理点云数据、图像识别或自然语言处理任务时，输入数据通常具有很高的维度和稀疏性。例如，3D 点云数据往往是非结构化的，大部分体积内没有有效信息（即大部分体积是空的）。使用传统的密集（dense）卷积网络处理这类数据会带来两个主要问题：效率低下：对于大量的空白区域依然进行计算，消耗计算资源；存储浪费：需要为大量的零值分配存储资源。&lt;/p&gt; 
&lt;p&gt;稀疏 ResNet 解决了这些问题，通过仅在非零数据点上进行操作，从而大幅提高了计算和存储效率。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎构建稀疏 ResNet 模型&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架中，稀疏 ResNet 可以通过 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse 模块中的稀疏卷积层（如 SubmConv3D）来实现。这些层专门用来处理稀疏数据。稀疏卷积层接受包含非零元素座标和值的稀疏张量，并只在这些非零元素上执行卷积运算。通过构建包含这些稀疏卷积层的网络（如 ResNet 结构中的基础块），可以高效处理稀疏数据。&lt;/p&gt; 
&lt;p&gt;创建稀疏 ResNet 主要涉及以下几个步骤：&lt;/p&gt; 
&lt;p&gt;1)&amp;nbsp;创建稀疏张量：首先需要从稀疏数据（即大部分值为零的数据）中创建稀疏张量。这通常涉及指定非零数据点的座标和相应的值。&lt;/p&gt; 
&lt;p&gt;2)&amp;nbsp;定义稀疏网络结构：设计一个网络结构，它包含适用于处理稀疏数据的特殊卷积层（如 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;Paddle&lt;/a&gt; 的 SubmConv3D）。这些层特别优化了内存和计算资源，只在数据非零的地方进行计算。&lt;/p&gt; 
&lt;p&gt;3)&amp;nbsp;前向传播：将稀疏张量输入到网络中，执行前向传播，网络会在内部处理稀疏数据，并输出结果。&lt;/p&gt; 
&lt;p&gt;4)&amp;nbsp;训练和评估：就像使用常规神经网络一样，定义损失函数和优化器，然后在训练数据上训练网络，最后在验证数据上评估网络的性能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎稀疏 ResNet 的关键组件&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse 模块提供了对稀疏数据操作的支持，包括稀疏张量的创建、转换和计算功能。这些神经网络层针对稀疏数据的特点进行了优化，以减少对零值的计算和存储需求，提高处理效率。&lt;/p&gt; 
&lt;p&gt;1)&amp;nbsp;稀疏张量（Sparse Tensor）:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;稀疏张量是一种特殊的数据结构，主要用于有效存储和处理大部分元素为零的数据。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架中，可以使用 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.sparse_coo_tensor 来创建稀疏张量，需要提供非零元素的座标和值。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;2)&amp;nbsp;稀疏卷积层（Sparse Convolution）:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.Conv3D：标准的三维卷积层，支持在稀疏数据上的操作，适用于处理体积大的三维数据。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.SubmConv3D：子流形三维卷积层，用于处理 3D 数据的稀疏子矩阵卷积层。该层允许在 3D 体积数据中有效地进行卷积操作，无需将整个数据转换为密集格式，特别适用于医学影像和三维扫描等领域。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;3)&amp;nbsp;批归一化层（Batch Normalization）&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.BatchNorm3D：批归一化层，专为三维数据设计，可以与稀疏卷积层结合使用，以优化稀疏数据的特征归一化过程。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;4)&amp;nbsp;池化层（Pooling Layers）&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.MaxPool3D：三维最大池化层，用于在稀疏三维数据上执行池化操作，有助于降低数据的维度和提高模型的抽象能力。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;5)&amp;nbsp;激活层（Activation Layers）&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.ReLU、&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.ReLU6：标准 ReLU 和 ReLU6 激活函数，支持在稀疏数据路径中使用，与常规的激活函数使用方法相同，但针对稀疏数据进行了优化。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.LeakyReLU：LeakyReLU 激活层，包含小负斜率的 ReLU 变体，适用于在稀疏数据中增强模型的非线性处理能力。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse.nn.Softmax：Softmax 激活层，适用于稀疏数据路径，使用方法与常规密集数据的 Softmax 相同，但特别针对稀疏数据进行了优化，常用于处理多分类问题。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;▎构建稀疏 ResNet 模型的示例代码&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架中，稀疏 ResNet 的实现和使用与传统的稠密网络相似，这得益于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架稀疏模块的设计，使得调用体验与稠密高度一致，非常容易上手。通过利用稀疏技术，可以有效处理大规模稀疏数据集，提高计算效率，降低存储需求，这在处理现代大数据应用时显得尤为重要。&lt;/p&gt; 
&lt;p&gt;下面以稀疏 ResNet 为例，说明&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架对稀疏神经网络层的支持：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import paddle
from paddle import sparse
from paddle.sparse import nn as sparse_nn

# 定义 3D 稀疏卷积块
def sparse_conv_block(in_channels, out_channels, stride=1, padding=1, key=None):
    block = paddle.nn.Sequential(
        sparse_nn.SubmConv3D(in_channels, out_channels, kernel_size=3, stride=stride, padding=padding, bias_attr=False, key=key),
        sparse_nn.ReLU()
    )
    return block

# 定义一个简单的稀疏 3D ResNet 模型
class SparseResNet(paddle.nn.Layer):
    def __init__(self, in_channels):
        super(SparseResNet, self).__init__()
        self.layer1 = sparse_conv_block(in_channels, 16, key=&#39;layer1&#39;)
        self.layer2 = sparse_conv_block(16, 32, stride=2, key=&#39;layer2&#39;)
        self.layer3 = sparse_conv_block(32, 64, stride=2, key=&#39;layer3&#39;)

    def forward(self, x):
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        return x

# 假设输入数据
batch_size = 1
channels = 1
depth = 100
height = 100
width = 100

# 创建稀疏张量的座标和值
coords = paddle.to_tensor([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 1, 2, 1, 1], [0, 2, 2, 1, 2], [0, 1, 2, 2, 0]], dtype=&#39;int64&#39;)  # 5D 座标 (batch, channel, depth, height, width)
values = paddle.to_tensor([1.0, 1.5, 2.0, 3.0, 3.5], dtype=&#39;float32&#39;)  # 每个值对应一个座标
shape = paddle.to_tensor([batch_size, channels, depth, height, width], dtype=&#39;int64&#39;)  # 5D 形状

# 创建稀疏张量
x = sparse.sparse_coo_tensor(coords, values, shape)

# 实例化模型
model = SparseResNet(channels)

# 使用模型进行预测
output = model(x)
print(output)


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-742ad74be6ed19437fb7b514f6e4cfe8239.png&quot; alt=&quot;图片&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;模型打印结果：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;SparseResNet(
  (layer1): Sequential(
    (0): SubmConv3D(3, 16, kernel_size=[3, 3, 3], padding=1, data_format=NDHWC)
    (1): BatchNorm(num_features=16, momentum=0.9, epsilon=1e-05, data_format=NDHWC)
    (2): ReLU()
    (3): SubmConv3D(16, 16, kernel_size=[3, 3, 3], padding=1, data_format=NDHWC)
    (4): BatchNorm(num_features=16, momentum=0.9, epsilon=1e-05, data_format=NDHWC)
    (5): ReLU()
  )
  (layer2): Sequential(
    (0): SubmConv3D(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=1, data_format=NDHWC)
    (1): BatchNorm(num_features=32, momentum=0.9, epsilon=1e-05, data_format=NDHWC)
    (2): ReLU()
    (3): SubmConv3D(32, 32, kernel_size=[3, 3, 3], padding=1, data_format=NDHWC)
    (4): BatchNorm(num_features=32, momentum=0.9, epsilon=1e-05, data_format=NDHWC)
    (5): ReLU()
  )
  (layer3): Sequential(
    (0): SubmConv3D(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=1, data_format=NDHWC)
    (1): BatchNorm(num_features=64, momentum=0.9, epsilon=1e-05, data_format=NDHWC)
    (2): ReLU()
    (3): SubmConv3D(64, 64, kernel_size=[3, 3, 3], padding=1, data_format=NDHWC)
    (4): BatchNorm(num_features=64, momentum=0.9, epsilon=1e-05, data_format=NDHWC)
    (5): ReLU()
  )
)


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;输出：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Tensor(shape=[1, 1, 100, 100, 64], dtype=paddle.float32, place=Place(cpu), stop_gradient=False, 
       indices=[[0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 1, 1, 2],
                [0, 1, 2, 2]], 
       values=[[0.        , 0.        , 0.08977110, 0.        , 0.        ,
                0.        , 0.        , 0.16325581, 0.        , 0.        ,
                0.08592274, 0.        , 0.        , 0.        , 0.07656589,
                ……
                0.12824626, 0.38880903, 0.        , 0.        , 0.23209766,
                0.        , 0.        , 0.        , 0.24539268, 0.17324814,
                0.        , 0.        , 0.        , 0.        ]])


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的稀疏模块可以创建类似于常规 ResNet 的模型架构，但使用的是稀疏卷积层替换传统的密集卷积层。每个稀疏卷积层后通常跟随一个批归一化层和 ReLU 激活函数，形成一个基础的稀疏残差块。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_5&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;05 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;Paddle&lt;/a&gt;3D 应用实例解读：稀疏 ResNet&lt;/h1&gt; 
&lt;p&gt;代码来源：&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;Paddle&lt;/a&gt;3D 的 sparse_resnet.py&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;▎代码注释&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;这段代码定义了一个基于&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的稀疏 3D 残差网络（SparseResNet3D），主要用于处理 3D 点云数据，如自动驾驶系统中的激光雷达扫描数据。它通过稀疏卷积层对体素化（voxelized）的点云数据进行特征提取和处理。&lt;/p&gt; 
&lt;p&gt;&quot;&quot;&quot;该符号内代码注释为新增&quot;&quot;&quot;&lt;/p&gt; 
&lt;p&gt;导入所需库和模块：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import numpy as np
import paddle
from paddle import sparse
from paddle.sparse import nn
from paddle3d.apis import manager
from paddle3d.models.layers import param_init


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这些库包括 numpy 用于数学运算，&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架及其稀疏模块用于深度学习操作，以及 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;3d 的 API 和模型层初始化。&lt;/p&gt; 
&lt;p&gt;定义卷积函数：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;def conv3x3(in_out_channels, out_out_channels, stride=1, indice_key=None, bias_attr=True):
    &quot;&quot;&quot;3x3 convolution with padding, specifically for SubM sparse 3D convolution.&quot;&quot;&quot;
    return nn.SubmConv3D(
        in_out_channels, out_out_channels, kernel_size=3, stride=stride, padding=1, bias_attr=bias_attr, key=indice_key)

def conv1x1(in_out_channels, out_out_channels, stride=1, indice_key=None, bias_attr=True):
    &quot;&quot;&quot;1x1 convolution, also for SubM sparse 3D convolution.&quot;&quot;&quot;
    return nn.SubmConv3D(
        in_out_channels, out_out_channels, kernel_size=1, stride=stride, padding=1, bias_attr=bias_attr, key=indice_key)


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;conv3x3 和 conv1x1 是用于创建 3D 稀疏卷积层的帮助函数，它们使用了&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架的 SubmConv3D，这是一种专门处理稀疏数据的 3D 卷积。&lt;/p&gt; 
&lt;p&gt;定义稀疏基础块类：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;class SparseBasicBlock(paddle.nn.Layer):
&quot;&quot;&quot; A basic building block for constructing sparse 3D ResNet with two convolutional layers.&quot;&quot;&quot;

    expansion =1

def__init__(self, in_channels, out_channels, stride=1, downsample=None, indice_key=None):
super(SparseBasicBlock, self).__init__()

self.conv1 = conv3x3(in_channels, out_channels, stride, indice_key, True)
self.bn1 = nn.BatchNorm(out_channels, epsilon=1e-3, momentum=0.01)
self.relu = nn.ReLU()
self.conv2 = conv3x3(out_channels, out_channels, indice_key=indice_key, bias_attr=True)
self.bn2 = nn.BatchNorm(out_channels, epsilon=1e-3, momentum=0.01)
self.downsample = downsample
self.stride = stride

def forward(self, x):
        identity = x

        out =self.conv1(x)
        out =self.bn1(out)
        out =self.relu(out)
        out =self.conv2(out)
        out =self.bn2(out)

ifself.downsample isnotNone:
            identity =self.downsample(x)

        out = sparse.add(out, identity)
        out =self.relu(out)
return out


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;SparseBasicBlock 是 SparseResNet3D 的核心模块，包括两个稀疏卷积层、批归一化和 ReLU 激活函数，以及可选的下采样，用于残差连接。&lt;/p&gt; 
&lt;p&gt;定义 SparseResNet3D 网络：&lt;/p&gt; 
&lt;p&gt;@manager.MIDDLE_ENCODERS.add_component&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;class SparseResNet3D(paddle.nn.Layer):
    &quot;&quot;&quot; The main Sparse 3D ResNet class, designed for processing voxelized point cloud data.&quot;&quot;&quot;
    
    def __init__(self, in_channels, voxel_size, point_cloud_range):
        super(SparseResNet3D, self).__init__()

        # Initial conv layer
        self.conv_input = paddle.nn.Sequential(
            nn.SubmConv3D(in_channels, 16, 3, bias_attr=False, key=&#39;res0&#39;),
            nn.BatchNorm(16), nn.ReLU())

        # Subsequent layers with increasing channel depth and decreasing spatial dimensions
        self.conv1 = paddle.nn.Sequential(
            SparseBasicBlock(16, 16, indice_key=&#39;res0&#39;),
            SparseBasicBlock(16, 16, indice_key=&#39;res0&#39;),)

        self.conv2 = paddle.nn.Sequential(
            nn.Conv3D(16, 32, 3, 2, padding=1, bias_attr=False),  # downsample
            nn.BatchNorm(32), nn.ReLU(),
            SparseBasicBlock(32, 32, indice_key=&#39;res1&#39;),
            SparseBasicBlock(32, 32, indice_key=&#39;res1&#39;),)

        self.conv3 = paddle.nn.Sequential(
            nn.Conv3D(32, 64, 3, 2, padding=1, bias_attr=False),  # downsample
            nn.BatchNorm(64), nn.ReLU(),
            SparseBasicBlock(64, 64, indice_key=&#39;res2&#39;),
            SparseBasicBlock(64, 64, indice_key=&#39;res2&#39;),)

        self.conv4 = paddle.nn.Sequential(
            nn.Conv3D(64, 128, 3, 2, padding=[0, 1, 1], bias_attr=False),  # downsample
            nn.BatchNorm(128), nn.ReLU(),
            SparseBasicBlock(128, 128, indice_key=&#39;res3&#39;),
            SparseBasicBlock(128, 128, indice_key=&#39;res3&#39;),)

        # Extra conv layer to further process features
        self.extra_conv = paddle.nn.Sequential(
            nn.Conv3D(128, 128, (3, 1, 1), (2, 1, 1), bias_attr=False),  # Adjust the spatial dimensions
            nn.BatchNorm(128), nn.ReLU(),)

        # Calculate the grid size for the 3D data based on the provided voxel size and point cloud range
        point_cloud_range = np.array(point_cloud_range, dtype=np.float32)
        voxel_size = np.array(voxel_size, dtype=np.float32)
        grid_size = (point_cloud_range[3:] - point_cloud_range[:3]) / voxel_size
        grid_size = np.round(grid_size).astype(np.int64)
        self.sparse_shape = np.array(grid_size[::-1]) + [1, 0, 0]
        self.in_channels = in_channels
        self.init_weight()

    def init_weight(self):
        &quot;&quot;&quot; Initialize weights for convolutional layers and batch normalization layers.&quot;&quot;&quot;
        for layer in self.sublayers():
            if isinstance(layer, (nn.Conv3D, nn.SubmConv3D)):
                param_init.reset_parameters(layer)
            if isinstance(layer, nn.BatchNorm):
                param_init.constant_init(layer.weight, value=1)
                param_init.constant_init(layer.bias, value=0)

    def forward(self, voxel_features, coors, batch_size):
        &quot;&quot;&quot; The forward pass for processing input voxel features and coordinates.&quot;&quot;&quot;
        # Setup the sparse tensor with the specified shape and input features
        shape = [batch_size] + list(self.sparse_shape) + [self.in_channels]
        sp_x = sparse.sparse_coo_tensor(
            coors.transpose((1, 0)),
            voxel_features,
            shape=shape,
            stop_gradient=False)

        # Pass the sparse tensor through the sequential layers
        x = self.conv_input(sp_x)
        x_conv1 = self.conv1(x)
        x_conv2 = self.conv2(x_conv1)
        x_conv3 = self.conv3(x_conv2)
        x_conv4 = self.conv4(x_conv3)

        # Final extra convolutional processing
        out = self.extra_conv(x_conv4)

        # Convert the output back to a dense tensor and adjust dimensions for further processing
        out = out.to_dense()
        out = paddle.transpose(out, perm=[0, 4, 1, 2, 3])
        N, C, D, H, W = out.shape
        out = paddle.reshape(out, shape=[N, C * D, H, W])
        return out


&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;此类中定义了一系列卷积层和残差块，用于逐步处理和提取输入点云数据的特征。网络通过逐层降采样来增加特征深度并减小空间维度，最终输出密集的特征张量，适合后续的处理或学习任务。&lt;/p&gt; 
&lt;span id=&quot;OSC_h1_6&quot;&gt;&lt;/span&gt; 
&lt;h1&gt;06 小结&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架不仅支持自定义稀疏神经网络结构，也可以通过提供的 API 轻松地实现已有的经典结构，如 ResNet、VGG 等。对于这些经典网络，通过替换标准的卷积层为相应的稀疏卷积层，可以使其适应稀疏数据的处理，从而拓展其应用到新的领域，如 3D 点云处理。&lt;/p&gt; 
&lt;p&gt;总的来说，&lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;飞桨&lt;/a&gt;框架在提供稀疏计算支持的同时，确保了开发体验的一致性和直观性，方便开发者在稀疏和稠密数据操作之间切换，同时保证数据处理高效。&lt;/p&gt; 
&lt;p&gt;——————END——————&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;[1]官网 &lt;a href=&quot;https://www.oschina.net/action/visit/ad?id=1185&quot;&gt;paddle&lt;/a&gt;.sparse 目录&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.paddlepaddle.org.cn%2Fdocumentation%2Fdocs%2Fzh%2Fapi%2Fpaddle%2Fsparse%2FOverview_cn.html&quot; target=&quot;_blank&quot;&gt;https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/sparse/Overview_cn.html&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;[2]&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FSD_P2K1HP3FVM5ADqbpmVQ&quot; target=&quot;_blank&quot;&gt;https://mp.weixin.qq.com/s/SD_P2K1HP3FVM5ADqbpmVQ&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;推荐阅读：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592895%26idx%3D1%26sn%3Da1963501c0f63ff70d5fa457680a0ba7%26chksm%3Dc03f5bc3f748d2d51f25900ca7f31b0a565431f95af0d5c1e34fa7c889ebd160ac46917acee4%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;云高性能计算平台 CHPC 让企业的传统 HPC 玩出新花样&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592870%26idx%3D1%26sn%3D4356bf3d908eaf1a5457e2c05f06992c%26chksm%3Dc03f5bdaf748d2cc5bf279bf3a406c26cdd9a3c8e4f807c618768a9ebc1207c0809e2c7e539b%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;Embedding 空间中的时序异常检测&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592850%26idx%3D1%26sn%3D76f6451f3f149d210106dab1e036298c%26chksm%3Dc03f5beef748d2f8e47da9b2dec927af37b69d534958950e9bda1547645e2b9583acebd4335f%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;读友好的缓存淘汰算法&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592618%26idx%3D1%26sn%3D61740f39ea744e00280c70b638622b91%26chksm%3Dc03f5ad6f748d3c02b964f5f2d5c1b716c38c98c630d4741f4b687821c33d52f16b2cc8de612%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;如何定量分析 Llama 3，大模型系统工程师视角的 Transformer 架构&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247592237%26idx%3D1%26sn%3D99dff8b8971f210c69ee50fa7383b9ee%26chksm%3Dc03f5951f748d0470163cdd13a5ce7d591a2054840fe8278ef7d5f4ba8ce7c374813ba823daf%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot;&gt;微服务架构革新：百度 Jarvis2.0 与云原生技术的力量&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/4939618/blog/15330069</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/15330069</guid>
            <pubDate>Fri, 16 Aug 2024 09:13:14 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>学生篡改同学高考志愿被刑拘，构成「破坏计算机系统罪」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;据内蒙古自治区呼和浩特市公安局「青城公安」（青城是呼和浩特市的别名）8 月 15 日晚消息：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;近日，新城区公安分局警支大队接到报警，称高考志愿被他人恶意篡改。因为是自治区首起，警支大队即刻针对该案组织开展案情分析会，结合全国此类案件的判例进行分析，摸清案件脉络，讨论研究对此类新型网络犯罪案件的战术战法。&lt;/p&gt; 
 &lt;p&gt;警支大队依托自身技术优势，进行分析研判，发现呼和浩特市某职业学校学生王某某疑似利用隐蔽手段获取同学的填报高考志愿的账号、密码，并借机篡改其高考志愿。&lt;/p&gt; 
 &lt;p&gt;8 月 14 日，警支大队将此案立案侦查，并对犯罪嫌疑人进行讯问，犯罪嫌疑人王某某对其犯罪事实供认不讳，已构成「破坏计算机系统罪」。&lt;/p&gt; 
 &lt;p&gt;目前，公安机关已依法对犯罪嫌疑人王某某采取刑事拘留措施。&lt;/p&gt; 
 &lt;p&gt;&lt;img height=&quot;1492&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0816/120920_ymfD_2720166.png&quot; width=&quot;1920&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.weibo.com%2F2516388727%2FOspOpd9zO%23repost&quot; target=&quot;_blank&quot;&gt;https://www.weibo.com/2516388727/OspOpd9zO#repost&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;根据《中华人民共和国刑法》第二百八十六条，【破坏计算机信息系统罪】是指：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;违反国家规定，对计算机信息系统功能进行删除、修改、增加、干扰，造成计算机信息系统不能正常运行，后果严重的，处五年以下有期徒刑或者拘役；后果特别严重的，处五年以上有期徒刑。&lt;/p&gt; 
 &lt;p&gt;违反国家规定，对计算机信息系统中存储、处理或者传输的数据和应用程序进行删除、修改、增加的操作，后果严重的，依照前款的规定处罚。&lt;/p&gt; 
 &lt;p&gt;故意制作、传播计算机病毒等破坏性程序，影响计算机系统正常运行，后果严重的，依照第一款的规定处罚。&lt;/p&gt; 
 &lt;p&gt;单位犯前三款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照第一款的规定处罚。&lt;/p&gt; 
&lt;/blockquote&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307420</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307420</guid>
            <pubDate>Fri, 16 Aug 2024 08:14:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>阿里云最新财报：AI 收入实现三位数增长</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;8 月 15 日晚间，阿里巴巴集团&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F8MgxvFIxPOMUPszvSnmY7A&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;最新季度业绩，AI 推动阿里云重回增长，季度营收增长 6% 至 265.49 亿元，其中 AI 相关产品收入实现三位数增长，公共云业务实现两位数增长。同时，阿里云利润大涨，经调整 EBITA 利润同比增长 155%，单季度 EBITA 利润达到 23.37 亿元。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;该季度，阿里云聚焦「AI 驱动，公共云优先」战略，持续扩大技术及规模优势。财报显示，阿里云的外部收入（不包含阿里巴巴关联公司用云收入）同比增长也达到 6%，主要得益于 AI 推动相关产品采用率增加，公共云业务实现两位数增长。其中，AI 相关产品收入在上个季度实现三位数增长之后，在该季度也持续保持三位数增长。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;245&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e029d138f146dcfd18910754d9be0fb8d99.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;同时，阿里云利润大涨。该季度内，阿里云经调整后 EBITA 收入同比增长 155%，达到人民币 23.37 亿元，而 2023 年同期为人民币 9.16 亿元。财报表示，这一增长主要是由于专注于公共云战略，并提升运营效率，但利润增长部分被对客户和技术的持续投资所抵消。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;财报强调，阿里云将继续投资于客户和技术，特别是投入建设 AI 技术和基础设施，以推动 AI 应用的云计算采用率，并保持阿里云的市场领先优势。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;技术进展方面，该季度内阿里云发布了全球性能最强的开源模型 Qwen2-72B，该模型提升了代码、数学、推理、指令遵循、多语言理解等能力。Qwen2-72B 发布后即登顶 HuggingFace 的 Open LLM Leaderboard 开源模型榜单。中文大模型测评基准 SuperCLUE 在 2024 上半年报告中指出，Qwen2-72B 成为排名第一的中国大模型，也是全球最强的开源模型，「超过众多国内外闭源模型」，「引领全球的开源生态」。目前，通义千问开源模型下载量已突破 2000 万。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;同时，阿里云对通义千问 9 款主力大模型大幅降价。其中，通义千问 GPT-4 级主力模型 Qwen-Long 的 API 输入价格低至 1 块钱可以买 200 万 tokens。这款模型最高支持 1 千万 tokens 长文本输入，降价后约为 GPT-4 价格的 1/400。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;降价激发了阿里云 AI 产品的使用量。财报披露，阿里云 AI 平台百炼的付费用户数，比上一个季度增长超过 200%。百炼平台集成了上百款大模型 API，支持企业上架通用或行业模型，给开发者提供足够多样化的模型选择。据国际研究机构 Gartner 发布的 2024 年《数据科学和机器学习平台魔力象限》，阿里云跃升至挑战者象限，并成为报告中唯一入围的亚太厂商。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此外，阿里云作为奥运会独家云服务商，为刚刚结束的巴黎奥运会提供了全面支撑。今年巴黎奥运会上，云计算首次超越衞星成为奥运转播的主要方式，超过三分之二的奥运电视及网络直播信号基于阿里云向全球分发，从巴黎传输到全球 200 多个国家和地区，全球观看人数超 40 亿。阿里云的 AI 技术也首次在巴黎奥运中广泛应用。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307403</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307403</guid>
            <pubDate>Fri, 16 Aug 2024 07:20:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>滴滴开源 Flutter 混合开发框架 Unify</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;滴滴近日开源了自研 Unify 框架，旨在解决大规模跨端落地场景下，Flutter 与原生模块之间的通信问题。Unify 通过平台无关的模块抽象、灵活的实现注入、自动代码生成等特性，为开发者提供高效、灵活、易用的 Flutter 混合通信能力。&lt;/p&gt; 
&lt;p&gt;开源地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdidi%2FUnify&quot; target=&quot;_blank&quot;&gt;https://github.com/didi/Unify&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Unify 是一个 Flutter 混合开发框架，由滴滴出行国际化外卖团队自研，目前已经广泛应用于滴滴国际化外卖及国际化出行业务。&lt;/p&gt; 
&lt;p&gt;Unify 的亮点特性包括:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;平台无关的模块抽象&lt;/strong&gt;: 允许开发者使用 Dart 语言声明与平台无关的模块接口与实体。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;灵活的实现注入&lt;/strong&gt;: 开发者可以灵活地选择注入原生实现（Android/iOS）或 Flutter 实现。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;自动代码生成&lt;/strong&gt;: 借助强大的代码生成引擎,Unify 可以自动生成 Flutter、Android、iOS 多平台下统一调用的 SDK。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下面是一个使用 Unify 声明原生模块的示例:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;@UniNativeModule()
abstract class DeviceInfoService {
  Future&amp;lt;DeviceInfoModel&amp;gt; getDeviceInfo();
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;通过 Unify，上面的 Dart 接口可以自动映射到 Android 和 iOS 平台，开发者只需专注于各平台下的具体实现即可。在 Flutter 中使用时，调用方式就像普通的 Flutter 模块一样简单、直观:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;DeviceInfoService.getDeviceInfo().then((deviceInfoModel) {
  print(&quot;${deviceInfoModel.encode()}&quot;);
});&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unify 的整体原理如下：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-105ff4761152e62ed960a0d0c772a2309af.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Unify 能够很好地解决 Flutter 混合开发下的一些常见问题，例如:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;大量原生模块高效导入 Flutter&lt;/li&gt; 
 &lt;li&gt;大量 Flutter 模块高效导入原生&lt;/li&gt; 
 &lt;li&gt;解决大量 Channel 难以维护的问题&lt;/li&gt; 
 &lt;li&gt;原生与 Flutter 并存下的混合架构分层&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情查看&amp;nbsp;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdidi%2FUnify%2Fblob%2Fmaster%2FREADME.zh-CN.md&quot; target=&quot;_blank&quot;&gt;https://github.com/didi/Unify/blob/master/README.zh-CN.md&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307354/didi-unify-flutter</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307354/didi-unify-flutter</guid>
            <pubDate>Fri, 16 Aug 2024 04:24:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Claude 推出</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Anthropic &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.anthropic.com%2Fnews%2Fprompt-caching&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;在其 Claude 系列生成式 AI 模型的 API 中引入提示缓存（Prompt caching）功能，这将允许开发人员在 API 调用之间保存常用的提示，减少提示成本和延迟。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;提示缓存允许用户缓存常用上下文，以便在将来的 API 调用中使用。该公司称，通过为模型配备背景知识和过去的示例输出，长提示的成本可降低高达 90%，延迟可降低高达 85%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;287&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4fafd2675bd5a7d6450588361f8941a3c0d.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;提示缓存在多种用例中很有用，包括能够保留代码库的汇总版本以供编码助手使用、在提示中提供长格式文档以及提供带有所需输出的几个示例的详细指令集。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;用户还可以使用它与书籍、论文、文档和播客记录等长篇内容进行对话。 根据 Anthropic 的测试，与一本缓存了 100,000 个 token 的书籍聊天需要 2.4 秒，而没有缓存信息的情况下则需要 11.5 秒。这相当于延迟减少了 79%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;与基本输入令牌价格相比，缓存输入令牌的成本高出 25%，但实际使用缓存内容的成本低 10%。实际价格因具体型号而异。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;该功能现已在 Claude 3.5 Sonnet 和 Claude 3 Haiku 上作为公开测试版提供，并且很快将支持 Claude 3 Opus。详情可查看&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.anthropic.com%2Fen%2Fdocs%2Fbuild-with-claude%2Fprompt-caching&quot; target=&quot;_blank&quot;&gt;文档&lt;/a&gt;和&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.anthropic.com%2Fpricing%23anthropic-api&quot; target=&quot;_blank&quot;&gt;定价页面&lt;/a&gt;。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307342/anthropic-introduces-prompt-caching</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307342/anthropic-introduces-prompt-caching</guid>
            <pubDate>Fri, 16 Aug 2024 02:45:29 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>全球首发！openKylin RISC-V 64G 镜像上线，支持中科通量 AI PC</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;523&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e9e18b1ad1fa403a3cb062f884693c72b70.png&quot; width=&quot;1200&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;近日，在 openKylin 社区 RV64G SIG 的共同努力下，&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin 操作系统已基于 64 位高性能 RISC-V CPU 成功运行，并顺利完成了对中科通量 RISC-V AI PC 的兼容适配&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;，这一成就为 RISC-V 架构在通用高性能领域的进一步优化和快速增长奠定了坚实基础，&lt;span style=&quot;color:#000000&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;同时也&lt;/span&gt;填补了社区在 RV64G 领域的空白，为开源桌面操作系统市场注入了全新的活力与机遇&lt;/span&gt;。目前，相关镜像已正式上线 openKylin 官网下载页面，欢迎大家下载体验！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;583&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1e20875fe97f7af63249a9f3ffa6ccb5c55.png&quot; width=&quot;1280&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;strong&gt;镜像下载地址（点击「阅读原文」直达）：&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#0052ff&quot;&gt;https://www.openkylin.top/downloads&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;RV64G 是 RISC-V 重要的基础指令架构，采用简化指令译码逻辑，能够更容易预测&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;指令预取&lt;/span&gt;&lt;span&gt;模式，进而减少内存访问次数、提高指令执行速度，为广泛的通用计算领域提供了简单且完备的指令集，使开发者可以更好的对高性能计算进行优化。RV64G SIG 是由 openKylin 社区共建单位睿芯发起成立，致力于构建 RV64G 软件生态体系，以支持更加广泛的 RISC-V 硬件。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;自 2023 年投身于 openKylin RV64G SIG 组以来，中科通量持续加大投入力度，积极主动移植 Linux 下各种应用软件，不断拓展硬件适配的范围和深度，推出多款&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;系统镜像&lt;/span&gt;&lt;span&gt;，并强化 openKylin 社区软件源生态建设。截至目前，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;中科通量已与 openKylin 社区合作完成了近 1500 个源码包在 RV64G 架构上的编译，为用户提供了涵盖从基础编译、系统管理、桌面环境到图像处理、视频处理等多样化&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;的&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;服务，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;&lt;span&gt;其中包括 gcc、g++、rustc、systemd、ukui-desktop-environment、&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;ffmpeg&lt;/span&gt;&lt;span&gt;、opencv 等工具，极大地丰富了&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin 社区&lt;/span&gt;&lt;/span&gt;RV64G 软件生态体系。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;中科通量 RISC-V AI PC 首次面世&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;自 2024 年起，AI 时代全面开启，PC 也步入了更新迭代的关键时刻。中科通量面向商用市场推出了其第一代 RISC-V AI PC—SmarHTC。该产品搭载了国产 RISC-V CPU 与 RISC-V 数据流 GPU 加速芯片，依托 RISC-V 异构平台的澎湃算力，为用户提供了极致性能与安全可靠的 AI 体验。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;574&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3a156699c335414eba1e1685d81e3bb8ab3.png&quot; width=&quot;1280&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;该产品支持 AI 原生开发环境，并已适配运行 40+ AI 模型。在智能算力方面，SmarHTC 支持混合精度推理，确保智能分析业务在保持高性能运算与高精度运算的同时，能够灵活地适应各种复杂场景和任务需求，让 AI 真正成为触手可及的生产力工具。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此外，SmarHTC 还充分考虑了国产化操作系统的适配问题。它深度优化了 openKylin 操作系统，完美支持 GPU/VPU 加速功能，使得 UKUI 桌面环境更加流畅。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;关于 RV64G&amp;nbsp;SIG&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin RV64G SIG 组主要负责开发及维护 openKylin RV64G 版本，包括软件包构建、系统构建、维护及升级等工作，并探索 RISC-V 各子架构应用兼容问题的解决方案。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;SIG 地址：&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#0060e8&quot;&gt;https://gitee.com/openkylin/community/tree/master/sig/RV64G&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;邮件列表：&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#0060e8&quot;&gt;rv64g@lists.openkylin.top&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307326</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307326</guid>
            <pubDate>Fri, 16 Aug 2024 01:28:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>国际知名 Linux 发行版 deepin V23 正式发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;【引言】&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;「我们不认为增删几个上游的应用软件，修改一下语言、壁纸，或者调整下应用布局等等，就是一个操作系统的版本更新。我们希望每一次的大版本更新，都有大量真正用户需要和创新性的内容，去突破 Linux 桌面发行版的能力边界，能让 Linux 桌面与 Windows、MacOS 这两个商业操作系统一样强大。」&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;em&gt;——deepin（深度）社区创始人，刘闻欢（deepin）&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-3de016d6902b6f86fbf835272c0e6739278.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;8 月 15 日，国际知名开源社区 deepin（深度）社区在线上举办了主题为「聚 AI 而生，大有不同」新品发布会，正式对外发布开源操作系统 deepin V23，带来了全新 DDE 视界、 AI For OS、「如意玲珑」应用生态、「deepin IDE」集成开发环境等诸多重磅更新。&lt;/p&gt; 
&lt;p&gt;「在这 20 年的历程中，deepin 在开源操作系统领域取得了显著的创新与突破。我们不仅在国内开源操作系统发行版的建设中发挥了引领作用，更在桌面环境自主研发的转型中展现了前瞻视野。」deepin（深度）社区主席张磊在致辞中表示。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-a4d4de28637804a6906c9e7a2e33f3daaa5.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;作为社区 20 岁生日的献礼，deepin V23 研发耗时三年，上线了 200 余个产品优化和新增需求，迭代了 9 个版本、51 次内测，自研了 8 款开发工具。每一次创新，都为了让 deepin V23 变得更好。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;根社区生长，操作系统全栈自研矩阵&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;为了真正掌握操作系统发展权、上游社区主导权、供应链安全主动权，2022 年，由开放原子开源基金会旗下的欧拉社区所代表的中国服务器操作系统根社区，以及由统信软件主导运营的 deepin 深度社区所代表的中国桌面操作系统根社区先后投入建设。&lt;/p&gt; 
&lt;p&gt;所谓 Linux 操作系统根社区，是从 Linux kernel 和其他开源组件构建，不依赖上游发行版，有大量的外部个人贡献者与企业参与共建的开源社区。deepin（深度）社区走出的第一步，便是独立构建全新的仓库、自主研发基于 deepin 根社区的开发工具，让开发者可以更便捷、更有效地参与贡献。在社区内，这些举措有一个形象的代号——「独立上游」。&lt;/p&gt; 
&lt;p&gt;作为首个基于根社区推出的发行版本，deepin V23 真正实现了操作系统的每个层级均有自研模块，为全球开源操作系统爱好者提供了优异的源自中国的开发工具。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-f8f1618f5cc43a0eb1ee6c0c1977c1fe13d.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;deepin V23 搭载 Linux 6.6 LTS 内核，从仓库到应用层，针对操作系统核心组件，采用了大量自研方案：&lt;/p&gt; 
&lt;p&gt;独立构建的仓库 beige-V23 采取独立选型、独立更新策略和精细化的仓库维护模式，对 8000+核心包进行升级，有效提升了系统的稳定性和安全性，并且能够更好地支持 ARM64、RISC-V、LoongArch64 等新硬件和新架构。&lt;/p&gt; 
&lt;p&gt;服务层，deepin 研发了 AM 应用程序统一管理框架，不仅极大地便利了从应用层对相关进程进行更为细致的资源与权限管控，还实现了统一的调度策略,解决了以往资源管控纷乱无章、后台进程杂乱无序的难题，更为未来的发展预留了扩展空间。&lt;/p&gt; 
&lt;p&gt;SDK 层，基于 Qt 开发的通用开发框架 DTK，可满足研发人员「一次研发，多平台、多架构复用」的需求，提升开发效率。目前已完成 6 个版本迭代，110+次更新，累计提交代码近 20 万行，已被迁移至超过 10 个 Linux 发行版。在 V23 中，浏览器、音乐、邮件等 40 余款原生应用全部使用 DTK 开发。&lt;/p&gt; 
&lt;p&gt;桌面环境层，首个由中国社区主导、备受全球 Linux 爱好者喜爱的 DDE 迎来全面升级。全新的任务栏、启动器以及更丰富的个性化主题，在保留 V20 用户习惯的同时，显著提升了系统的管理能力与交互体验。展示形式进行了精心设计，保持统一的风格和节奏，用户得以在进行不同操作之间，视觉始终流畅而连贯。&lt;/p&gt; 
&lt;p&gt;应用层，deepin 为开发者提供了完善的原生应用开发矩阵：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;集成开发环境 deepin IDE，集成 AI 能力，支持多种软硬件架构、多种编程语言；具备全量基础功能，可以实现一站式多场景开发，从底层服务到上层开发工具实现垂直安全，真正做到掌握自主发展权；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;综合型自动化测试框架「YouQu」，由统信软件主导研发，以其简便的环境部署、强大的功能特性脱颖而出，不仅支持 UI、WEB、接口及命令行等多种自动化测试场景，还极大地提升了测试效率与质量，为 Linux 操作系统上的开发测试工作带来了前所未有的便捷与高效；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;始于 2017 年、现已捐赠给开放原子开源基金会的新型独立包管理工具「如意玲珑」，凭借对跨发行版的强大支持，可有效解决传统包管理系统强依赖导致的兼容性问题，以及权限松散导致的安全问题。目前，「如意玲珑」千帆竞发，已有 400 多位开发者贡献了超 2000 款如意玲珑应用，其中 1000 余款已上架 deepin V23 应用商店。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;「值得一提的是，在 deepin V23 的发布中，deepin 根社区也发挥了重要作用，许多新功能和建议都来自于社区伙伴。我们坚信，开放协作是推动 deepin 发展的核心动力。」张磊表示。deepin V23 的研发历程伴随中国科技自立自强的步伐，在开源操作系统的每一次演进与发展中，deepin 始终走在行业前列。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;多架构支持，适配多款国产芯片&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;良好的社区文化和有力的开发者支撑，让 deepin 生态建设迈入飞速发展阶段。Intel、龙芯、飞腾、玄铁等 CPU 厂家日前纷纷宣布与 deepin V23 完成适配，这代表着 deepin V23 成为首个支持 X86、ARM64、LoongArch64、RISC-V 等全部主流通用计算架构的开源桌面操作系统，意味着 deepin 社区全球用户都可以在第一时间体验到 deepin V23，同时也意味着 deepin 社区正在成为中国「强芯铸魂」的核心力量。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-a8a2d6cbf07fba06af26d99300fea3ef4b5.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;拥有 20 年历史的 deepin（深度）社区，是全球规模最大且最活跃的开源操作系统社区之一，在国际上拥有大量拥趸。社区用户超 540 万，其中近 300 万为海外用户。成立以来共获得国内外奖项 60 余个，其中包括国际级、国家级、行业级 41 个，省部级奖项 20 余个。其在中国最知名的下游商业发行版统信 UOS，目前国产装机量已超 600 万台。&lt;/p&gt; 
&lt;p&gt;社区始终秉承以用为本、拥抱创新的理念，曾经创造过诸多 Linux 历史上突破性的里程碑，例如首个中文 Linux 社区操作系统、首个由中国社区主导的 Linux 桌面环境、国内首家发布 Linux 应⽤商店等等。随着众多中国科技厂商加入贡献，未来 deepin 社区将诞生更多颠覆性创新，有效促进开源技术国内外双循环发展。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;人工智能赋能，下一代操作系统亮相&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;自 2023 年统信软件推出 UOS AI 以来，在上游社区版 deepin 中持续验证和迭代。可以说，deepin V23 从底层开始，便由人工智能赋能建造。&lt;/p&gt; 
&lt;p&gt;对于 deepin 这一中国首个接入大模型的开源操作系统，海外知名杂志 Linux Magazine 给予了高度肯定：「deepin 已经将人工智能集成到桌面操作系统上，开始向微软 Copilot 发起挑战」，并称「这可能只是 deepin V23 融合人工智能的开始」。&lt;/p&gt; 
&lt;p&gt;自 UOS AI 赋能 deepin 以来，在应用层，UOS AI 已支持自然语言命令调用 20 余个操作系统设置能力、40 余个使用场景，已适配 60 余款应用；芯片层支持国内主流 CPU 芯片和英伟达等国内外主流 GPU 芯片；大模型层开放接口，支持接入所有 OpenAI 接口格式的大模型，用户可根据自身需求，自行适配专属模型。&lt;/p&gt; 
&lt;p&gt;发布会现场，Intel 开源技术高级研发经理田俊带来了 Intel 在 deepin 上的平台支持及 AI PC 最新进展。deepin 的 Intel SIG 小组集中支持了最新的 Meteor Lake 与 deepin 的深入适配。作为 Intel Ultra 平台的重要组成部分，为 deepin 带来了前所未有的性能提升和丰富的功能支持。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-234d14675b979faf9cecf3db61a15c74df0.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;「通过 CPU、NPU、GPU 的协同运算，deepin V23 能够胜任各种实用性的 AI 应用，特别是本地推理能力。GPU 的高吞吐和图形处理能力、NPU 的低功耗专用 AI 算法能力以及 CPU 的低延迟逻辑运算能力，共同构成了 deepin V23 强大的 AI 计算能力。」田俊表示。&lt;/p&gt; 
&lt;p&gt;国民级办公应用 WPS 日前也公布了双方联合开发 AI 办公解决方案的进展，基于 deepin V23 的 WPS Office For Linux 个人版将于 8 月下旬上线 deepin 应用商店。用户不仅可在该版本中体验到融入 AIGC 的三款 WPS 拳头产品，更能感受到 UOS AI 与 WPS AI 在本地个人知识库建设方面的功能联动。&lt;/p&gt; 
&lt;p&gt;「回溯到现代计算的诞生，我们一直在追求制造出能够理解人类的计算机，而如今我们正在进入一个新时代，就像摩尔定律推动了信息革命一样，深度神经网络的扩展定律也将推动智能革命。」张磊表示，展望未来，deepin 将加速构建 AI 与操作系统的融合，从 AI FOR OS 到 OS FOR AI，引领开源操作系统创新发展。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/307293/deepin-v23-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/307293/deepin-v23-released</guid>
            <pubDate>Thu, 15 Aug 2024 13:42:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
    </channel>
</rss>