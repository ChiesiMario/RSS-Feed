<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-最新资讯</title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://8.134.148.166:30044/oschina/news" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-最新资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Fri, 28 Feb 2025 07:38:12 GMT</lastBuildDate>
        <ttl>5</ttl>
        <item>
            <title>Meta 计划发布独立的 Meta AI 应用程序</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnbc.com%2F2025%2F02%2F27%2Fmeta-plans-to-release-a-standalone-meta-ai-app.html&quot; target=&quot;_blank&quot;&gt;CNBC&lt;/a&gt; 援引知情人士消息称，Meta 计划在第二季度推出一款独立的 Meta AI 应用程序，以更好地与 OpenAI 的 ChatGPT 和谷歌的 Gemini 等 AI 聊天机器人竞争。「这标志着 Meta 首席执行官马克·扎克伯格 (Mark Zuckerberg) 的计划迈出了重要一步」&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;扎克伯格在今年 1 月份的公司第四季度财报电话会议上向分析师表示：「今年，高度智能和个性化的人工智能助手将服务超过 10 亿人，我预计 Meta AI 将成为领先的人工智能助手。」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;与 ChatGPT 和 Perplexity 等竞争对手的生成式 AI 工具不同，Meta AI 目前仅通过网站和 Facebook 和 WhatsApp 等公司的应用程序供用户使用。知情人士表示，尽管 Meta 旗下应用程序系列的庞大用户群可以访问 Meta AI，但如果它作为独立应用程序提供，用户可能会与数字助理进行更深入的互动。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;今年 1 月，扎克伯格曾公开同意一位 Threads 用户的观点，即 Meta 应该为其数字助理创建一个独立的移动应用程序。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;214&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-7105eada1bedbd2babe612557700be0d148.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;同时，Meta 还计划测试 Meta AI 的付费订阅服务，以提供更强大的功能版本。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Meta AI 聊天机器人于 2023 年 9 月推出，定位为一款生成式人工智能数字助理，可以在其现有应用程序中根据用户提示提供响应并创建图像。目前，Meta AI 每月拥有超过 7 亿活跃用户。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/336203/meta-plans-standalone-meta-ai-app</link>
            <guid isPermaLink="false">https://www.oschina.net/news/336203/meta-plans-standalone-meta-ai-app</guid>
            <pubDate>Fri, 28 Feb 2025 07:21:05 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>EA 开源《命令与征服》系列经典游戏</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;EA 宣布正式开源了四款《命令与征服》系列经典游戏，均采用 GPL 许可协议。包括《命令与征服：泰伯利亚的黎明》、《命令与征服：红色警戒》、《命令与征服：叛逆者》和《命令与征服：将军》。&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsteamcommunity.com%2Flinkfilter%2F%3Fu%3Dhttps%253A%252F%252Fgithub.com%252Felectronicarts%252FCnC_Tiberian_Dawn&quot; target=&quot;_blank&quot;&gt;https://github.com/electronicarts/CnC_Tiberian_Dawn&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsteamcommunity.com%2Flinkfilter%2F%3Fu%3Dhttps%253A%252F%252Fgithub.com%252Felectronicarts%252FCnC_Red_Alert&quot; target=&quot;_blank&quot;&gt;https://github.com/electronicarts/CnC_Red_Alert&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsteamcommunity.com%2Flinkfilter%2F%3Fu%3Dhttps%253A%252F%252Fgithub.com%252Felectronicarts%252FCnC_Renegade&quot; target=&quot;_blank&quot;&gt;https://github.com/electronicarts/CnC_Renegade&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsteamcommunity.com%2Flinkfilter%2F%3Fu%3Dhttps%253A%252F%252Fgithub.com%252Felectronicarts%252FCnC_Generals_Zero_Hour&quot; target=&quot;_blank&quot;&gt;https://github.com/electronicarts/CnC_Generals_Zero_Hour&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;与此同时，EA 还宣布为《命令与征服》系列游戏引入 Steam Workshop 支持，以允许用户上传他们的自定义地图。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style=&quot;margin-left:0; margin-right:0&quot;&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;C&amp;amp;C Renegade&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;C&amp;amp;C Generals &amp;amp; Zero Hour&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;C&amp;amp;C 3 Tiberium Wars and Kane’s Wrath&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;C&amp;amp;C Red Alert 3 &amp;amp; Uprising&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;C&amp;amp;C 4 Tiberian Twilight&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;以及更新了所有任务编辑器和世界构建器工具，以便用户可以直接将地图发布到 Steam 创意工坊。当用户在 Steam 创意工坊上订阅某个项目时（通过客户端或网页），游戏现在会在下次启动游戏时将该内容拉下，并且地图将显示在单人/多人地图选择菜单中。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;为了支持 Steam 创意工坊，EA 发布了一个「&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectronicarts%2FCnC_Modding_Support&quot; target=&quot;_blank&quot;&gt;C&amp;amp;C Modding Support&lt;/a&gt;」包，该资源包包含了所有使用 SAGE 引，擎开发的《命令与征服》系列游戏的源 XML、Schema、Script、Shader 和 Map 文件，为玩家和开发者提供了丰富的创作素材。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;此外，他们还发布了一段新视频，展示了早期开发过程中的一些罕见游戏片段。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;282&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-beb9bb44f7f46ad12623b6dba6258e49d12.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;详情可&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstore.steampowered.com%2Fnews%2Fapp%2F2229890%2Fview%2F502818210084553731&quot; target=&quot;_blank&quot;&gt;查看官方公告&lt;/a&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/336200/ea-open-sourced-command-conquer</link>
            <guid isPermaLink="false">https://www.oschina.net/news/336200/ea-open-sourced-command-conquer</guid>
            <pubDate>Fri, 28 Feb 2025 07:08:05 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>百万级群聊的设计实践</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;div class=&quot;rich_media_content js_underline_content
                       autoTypeSetting24psection
            &quot; id=&quot;js_content&quot;&gt; 
 &lt;section style=&quot;font-size: 14px;color: rgb(62, 62, 62);&quot;&gt; 
  &lt;section style=&quot;margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;&quot;&gt; 
    &lt;section style=&quot;color: rgba(0, 0, 0, 0.5);font-size: 13px;text-align: justify;&quot;&gt; 
     &lt;p&gt;作者：来自 vivo 互联网服务器团队- Cai Linfeng&lt;/p&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;text-align: center;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;&quot;&gt; 
    &lt;section style=&quot;text-align: left;&quot;&gt; 
     &lt;section style=&quot;text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;color: rgb(160, 160, 160);&quot;&gt; 
      &lt;p&gt;本文介绍了服务端在搭建 Web 版的百万人级别的群聊系统时，遇到的技术挑战和解决思路，内容包括：通信方案选型、消息存储、消息有序性、消息可靠性、未读数统计。&lt;/p&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;text-align: center;&quot;&gt; 
   &lt;section style=&quot;padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);&quot;&gt; 
    &lt;p&gt;&lt;strong&gt;一、引言&lt;/strong&gt;&lt;/p&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;现在 IM 群聊产品多种多样，有国民级的微信、QQ，企业级的钉钉、飞书，还有许多公司内部的 IM 工具，这些都是以客户端为主要载体，而且群聊人数通常都是有限制，微信正常群人数上限是 500，QQ2000 人，收费能达到 3000 人，这里固然有产品考量，但技术成本、资源成本也是很大的因素。而笔者业务场景上需要一个迭代更新快、轻量级（不依赖客户端）、单群百万群成员的纯 H5 的 IM 产品，本文将回顾实现一个百万人量级的群聊，服务器侧需要考虑的设计要点，希望可以给到读者一些启发。&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;text-align: center;&quot;&gt; 
   &lt;section style=&quot;padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);&quot;&gt; 
    &lt;p&gt;&lt;strong&gt;二、背景介绍&lt;/strong&gt;&lt;/p&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;不同的群聊产品，采用的技术方案是不同的，为了理解接下来的技术选型，需要先了解下这群聊产品的特性。&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;&quot;&gt; 
    &lt;section style=&quot;font-size: 13px;&quot;&gt; 
     &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
      &lt;li&gt;&lt;p&gt;单群成员需要支撑百万人，同时在线百万级。&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;功能、体验要接近纯客户端实现方案。&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;用户端完全用 H5 承载。&lt;/p&gt;&lt;/li&gt; 
     &lt;/ol&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;text-align: center;&quot;&gt; 
   &lt;section style=&quot;padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);&quot;&gt; 
    &lt;p&gt;&lt;strong&gt;三、通信技术&lt;/strong&gt;&lt;/p&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;即时通信常见的通信技术有短轮询、长轮询、Server-Sent Events(SSE)、Websocket。短轮询和长轮询适用于实时性要求不高的场景，比如论坛的消息提醒。SSE 适用于服务器向客户端单向推送的场景，如实时新闻、股票行情。Websocket 适用于实时双向通信的场景，实时性好，且服务端、前端都有比较成熟的三方包，如 socket.io，所以这块在方案选择中是比较 easy 的，前后端使用 Websocket 来实现实时通信。&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;&quot;&gt; 
   &lt;section style=&quot;padding-left: 1em;padding-right: 1em;display: inline-block;text-align: center;&quot;&gt; 
    &lt;span style=&quot;display: inline-block;padding: 0.3em 0.5em;border-radius: 0.5em;font-size: 12px;text-shadow: rgb(204, 204, 204) 4px 3px;color: rgb(65, 95, 255);&quot; title=&quot;&quot;&gt;&lt;p&gt;彩蛋提醒&lt;/p&gt;&lt;/span&gt; 
   &lt;/section&gt; 
   &lt;section style=&quot;border-width: 1px;border-style: solid;border-color: rgb(192, 200, 209);margin-top: -1em;padding: 20px 10px 10px;background-color: rgb(239, 239, 239);text-align: center;&quot;&gt; 
    &lt;p&gt;我们为大家准备了抽奖福利，请继续阅读下去。&lt;/p&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;text-align: center;&quot;&gt; 
   &lt;section style=&quot;padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);&quot;&gt; 
    &lt;p&gt;&lt;strong&gt;四、消息存储&lt;/strong&gt;&lt;/p&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;群聊消息的保存方式，主流有 2 种方式：读扩散、写扩散。图 1 展示了它们的区别，区别就在于消息是写一次还是写 N 次，以及如何读取。&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;&quot;&gt; 
   &lt;section style=&quot;vertical-align: middle;display: inline-block;line-height: 0;&quot;&gt; 
    &lt;img class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;100016471&quot; data-ratio=&quot;0.30092592592592593&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/281b8336-5821-4d8c-a063-ea27756fa35b.png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; style=&quot;vertical-align: middle;width: 100%;&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;section style=&quot;text-align: center;font-size: 12px;color: rgb(204, 204, 204);&quot;&gt; 
   &lt;p&gt;图 1&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;section&gt; 
   &lt;p&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/p&gt; 
   &lt;p&gt;&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;读扩散&lt;/span&gt;就是所有群成员共用一个群信箱，当一个群产生一条消息时，只需要写入这个群的信箱即可，所有群成员从这一个信箱里读取群消息。&lt;/p&gt; 
   &lt;p&gt;&lt;br&gt;优点是写入逻辑简单，存储成本低，写入效率高。缺点是读取逻辑相对复杂，要通过消息表与其他业务表数据聚合；消息定制化处理复杂，需要额外的业务表；可能还有 IO 热点问题。&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);&quot;&gt; 
    &lt;section style=&quot;font-size: 13px;&quot;&gt; 
     &lt;p&gt;举个例子：&lt;/p&gt; 
     &lt;p&gt;很常见的场景，展示用户对消息的已读未读状态，这个时候公共群信箱就无法满足要求，必须增加消息已读未读表来记录相关状态。还有用户对某条消息的删除状态，用户可以选择删除一条消息，但是其他人仍然可以看到它，此时也不适合在公共群信箱里拓展，也需要用到另一张关系表，总而言之针对消息做用户特定功能时就会比写扩散复杂。&lt;/p&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;写扩散&lt;/span&gt;就是每个群成员拥有独立的信箱，每产生一条消息，需要写入所有群成员信箱，群成员各自从自己的信箱内读取群消息。&lt;br&gt;优点是读取逻辑简单，适合消息定制化处理，不存在 IO 热点问题。缺点是写入效率低，且随着群成员数增加，效率降低；存储成本大。&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;所以当单群成员在万级以上时，用写扩散就明显不太合适了，写入效率太低，而且可能存在很多无效写入，不活跃的群成员也必须得有信箱，存储成本是非常大的，因此采用读扩散是比较合适的。&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-left: 3px solid rgb(65, 94, 255);border-bottom-left-radius: 0px;padding-left: 8px;vertical-align: top;align-self: flex-start;flex: 0 0 auto;&quot;&gt; 
    &lt;section style=&quot;color: rgba(0, 0, 0, 0.5);font-size: 13px;text-align: justify;&quot;&gt; 
     &lt;p&gt;据了解，微信是采用写扩散模式，微信群设定是 500 人上限，写扩散的缺点影响就比较小。&lt;/p&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;text-align: center;&quot;&gt; 
   &lt;section style=&quot;padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);&quot;&gt; 
    &lt;p&gt;&lt;strong&gt;五、架构设计&lt;/strong&gt;&lt;/p&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;5.1 整体架构&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;先来看看群聊的架构设计图，如图 2 所示：&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;&quot;&gt; 
   &lt;section style=&quot;vertical-align: middle;display: inline-block;line-height: 0;&quot;&gt; 
    &lt;img class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;100016472&quot; data-ratio=&quot;0.7398148148148148&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/8b97eb4a-1d53-4bd6-948b-a9ad9ab167ef.png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; style=&quot;vertical-align: middle;width: 100%;&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;section style=&quot;text-align: center;color: rgb(204, 204, 204);&quot;&gt; 
   &lt;p&gt;图 2&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;从用户登录到发送消息，再到群用户收到这条消息的系统流程如图 3 所示：&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;&quot;&gt; 
   &lt;section style=&quot;vertical-align: middle;display: inline-block;line-height: 0;&quot;&gt; 
    &lt;img class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;100016469&quot; data-ratio=&quot;0.4009259259259259&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/fa273377-a1c0-4297-9fd3-ab4c2f5b28e2.png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; style=&quot;vertical-align: middle;width: 100%;&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;section style=&quot;text-align: center;color: rgb(204, 204, 204);&quot;&gt; 
   &lt;p&gt;图 3&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
   &lt;li&gt;&lt;p&gt;用户登录，通过负载均衡，与&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;连接服务&lt;/span&gt;建立 Websocket 长连接。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;连接服务&lt;/span&gt;管理会话，管理群与用户的映射关系，在本地内存里使用哈希表存储，key 为 groupId，value 为 List&amp;lt;SocketIOClient&amp;gt;，同一个群的用户可能会在不同的集群服务器上。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;连接服务&lt;/span&gt;向&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;群组服务&lt;/span&gt;上报群组路由，上报它的内网 IP 和它所管理的 groupIdList 的关系，这里需要 2 种同步策略并行保证群组路由信息的准确性：a.在用户建立、断开长连接时即刻上报；b.定时上报。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;群组服务&lt;/span&gt;管理群组路由，使用远程中心缓存 Redis 管理 groupId 和连接服务器 IP 的关系，key 为 groupId，value 为 List，该 IP 为连接服务的内网 IP 地址，这里会做上报的心跳判断，超过 3 个心跳周期不上报，则认为已断线。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;用户在群里发布一条消息，消息通过 Websokcet 送达&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;连接服务&lt;/span&gt;，然后经过&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;连接服务&lt;/span&gt;——&amp;gt;&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;消息队列&lt;/span&gt;——&amp;gt;&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;群组服务&lt;/span&gt;，消息在群组服务里经过频控、安全检查、格式转换等一系列流程后入库，持久化。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;群组服务&lt;/span&gt;通过群组路由管理获取这条消息所属群的路由信息，即一组连接服务的 IP 地址，然后通过 HTTP 回调对应的&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;连接服务&lt;/span&gt;，通知它们有新消息产生，这里只简单传递消息 ID。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;连接服务&lt;/span&gt;收到 HTTP 请求后，根据会话管理查询该群所有用户，给用户发送新消息提醒。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;用户收到新消息提醒，通过 Websocket 来&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;连接服务&lt;/span&gt;拉取该新消息具体详情，然后根据消息协议展示在信息流里。&lt;/p&gt;&lt;/li&gt; 
  &lt;/ol&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;5.2 路由策略&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;用户应该连接到哪一台连接服务呢？这个过程重点考虑如下 2 个问题：&lt;/p&gt; 
  &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
   &lt;li&gt;&lt;p&gt;尽量保证各个节点的连接均衡；&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;增删节点是否要做 Rebalance。&lt;/p&gt;&lt;/li&gt; 
  &lt;/ol&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;保证均衡有如下几个算法：&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);&quot;&gt; 
    &lt;section style=&quot;font-size: 13px;&quot;&gt; 
     &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
      &lt;li&gt;&lt;p&gt;&lt;strong&gt;轮询&lt;/strong&gt;：挨个将各个节点分配给客户端，但会出现新增节点分配不均匀的情况；&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;&lt;strong&gt;取模&lt;/strong&gt;：类似于 HashMap，但也会出现轮询的问题。当然也可以像 HashMap 那样做一次 Rebalance，让所有的客户端重新连接。不过这样会导致所有的连接出现中断重连，代价有点大。由于 Hash 取模方式的问题带来了一致性 Hash 算法，但依然会有一部分的客户端需要 Rebalance；&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;&lt;strong&gt;权重&lt;/strong&gt;：可以手动调整各个节点的负载情况，甚至可以做成自动的，基于监控当某些节点负载较高就自动调低权重，负载较低的可以提高权重；&lt;br&gt;笔者是采用轮询 + 权重模式，尽量保证负载均衡。&lt;/p&gt;&lt;/li&gt; 
     &lt;/ol&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;5.3 重连机制&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;当应用在扩缩容或重启升级时，在该节点上的客户端怎么处理？&lt;br&gt;由于设计有心跳机制，当心跳不通或监听连接断开时，就认为该节点有问题了，就尝试重新连接；如果客户端正在发送消息，那么就需要将消息临时保存住，等待重新连接上后再次发送。&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;5.4 线程策略&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;将连接服务里的 IO 线程与业务线程隔离，提升整体性能，原因如下：&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);&quot;&gt; 
    &lt;section style=&quot;font-size: 13px;&quot;&gt; 
     &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
      &lt;li&gt;&lt;p&gt;充分利用多核的并行处理能力：IO 线程和业务线程隔离，双方都可以并行处理网络 IO 和业务逻辑，充分利用计算机多核并行计算能力，提升性能；&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;故障隔离：业务线程处理多种业务消息，有 IO 密集型，也有 CPU 密集型，有些是纯内存计算，不同的业务处理时延和故障率是不同的。如果把业务线程和 IO 线程合并，就会有如下问题：某类业务处理较慢，阻塞 IO 线程，导致其他处理较快的业务消息响应不及时；&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;可维护性：IO 线程和业务线程隔离之后，职责单一，有利于维护和定位问题。&lt;/p&gt;&lt;/li&gt; 
     &lt;/ol&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;5.5 有状态链接&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;在这样的场景中不像 HTTP 那样是无状态的，需要明确知道各个客户端和连接的关系。比如需要向客户端广播群消息时，首先得知道客户端的连接会话保存在哪个连接服务节点上，自然这里需要引入第三方中间件来存储这个关系。通过由连接服务主动上报给群组服务来实现，上报时机是客户端接入和断开连接服务以及周期性的定时任务。&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;5.6 群组路由&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;设想这样一个场景：需要给群所有成员推送一条消息怎么做？&lt;br&gt;通过群编号去前面的路由 Redis 获取对应群的连接服务组，再通过 HTTP 方式调用连接服务，通过连接服务上的长连接会话进行真正的消息下发。&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;5.7 消息流转&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;连接服务直接接收用户的上行消息，考虑到消息量可能非常大，在连接服务里做业务显然不合适，这里完全可以选择 Kafka 来解耦，将所有的上行消息直接丢到 Kafka 就不管了，消息由群组服务来处理。&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;text-align: center;&quot;&gt; 
   &lt;section style=&quot;padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);&quot;&gt; 
    &lt;p&gt;&lt;strong&gt;六、消息顺序&lt;/strong&gt;&lt;/p&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;6.1 乱序现象&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;为什么要讲消息顺序，来看一个场景。假设群里有用户 A、用户 B、用户 C、用户 D，下面以 ABCD 代替，假设 A 发送了 3 条消息，顺序分别是 msg1、msg2、msg3，但 B、C、D 看到的消息顺序不一致，如图 4 所示：&lt;/p&gt; 
  &lt;section style=&quot;text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;&quot;&gt; 
   &lt;section style=&quot;vertical-align: middle;display: inline-block;line-height: 0;&quot;&gt; 
    &lt;img class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;100016470&quot; data-ratio=&quot;0.475&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/ebbcc90d-7a30-4c02-94b6-ea2c7021780c.png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; style=&quot;vertical-align: middle;width: 100%;&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;section style=&quot;text-align: center;color: rgb(204, 204, 204);&quot;&gt; 
   &lt;p&gt;图 4&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;这时 B、C、D 肯定会觉得 A 在胡言乱语了，这样的产品用户必定是不喜欢的，因此必须要保证所有接收方看到的消息展示顺序是一致的。&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;6.2 原因分析&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;所以先了解下消息发送的宏观过程：&lt;/p&gt; 
  &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
   &lt;li&gt;&lt;p&gt;发送方发送消息。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;服务端接收消息。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;服务端返回 ACK 消息。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;服务端推送新消息或客户端拉取新消息。&lt;/p&gt;&lt;/li&gt; 
  &lt;/ol&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;在上面的过程中，都可能产生顺序问题，简要分析几点原因：&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);&quot;&gt; 
    &lt;section style=&quot;font-size: 13px;&quot;&gt; 
     &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
      &lt;li&gt;&lt;p&gt;&lt;strong&gt;时钟不一致&lt;/strong&gt;：多个客户端、服务端集群、DB 集群，时钟不能保证完全一致，因此不能用本地时间来决定消息顺序。&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;&lt;strong&gt;网络传输&lt;/strong&gt;：发送消息环节，先发后至，到达服务器的顺序可能是 msg2、msg1、msg3。&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;&lt;strong&gt;多线程&lt;/strong&gt;：服务器考虑性能、吞吐量，往往会在多处环节采用线程池、异步去提升整体速度，因此也会产生顺序问题。&lt;/p&gt;&lt;/li&gt; 
     &lt;/ol&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;6.3 解决方案&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;6.3.1&amp;nbsp;单用户保持有序&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;通过上面的分析可以知道，其实无法保证或是无法衡量不同用户之间的消息顺序，那么只需保证同一个用户的消息是有序的，保证上下文语义，所以可以得出一个比较朴素的实现方式：以服务端数据库的唯一自增 ID 为标尺来衡量消息的时序，然后让同一个用户的消息处理串行化。那么就可以通过以下几个技术手段配合来解决：&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);&quot;&gt; 
    &lt;section style=&quot;font-size: 13px;&quot;&gt; 
     &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
      &lt;li&gt;&lt;p&gt;发送消息使用 Websocket 发送，并且多次发送保持同一个会话，那么 tcp 协议就保证了应用层收到的消息必定是有序的。&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;在应用程序内部处理时，涉及相关多线程的模块，根据 uid 进行 hash，匹配一个单线程的线程池，即同一个 uid 的消息永远用同一个线程去处理，不同用户之间仍是并行处理。&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;在跨应用程序时，一般有 2 种处理方式：一是用 rpc 同步调用；二是利用消息中间件的全局有序。&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;用户端上做消息发送频率限制，2 次发送必须间隔 1 秒，能大大降低乱序的可能性了。&lt;/p&gt;&lt;/li&gt; 
     &lt;/ol&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;6.3.2&amp;nbsp;推拉结合&lt;/span&gt;&lt;/p&gt; 
   &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;section&gt; 
   &lt;p&gt;到这里基本解决了同一个用户的消息可以按照他自己发出的顺序入库的问题，即解决了消息发送流程里第一、二步。&lt;/p&gt; 
   &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
   &lt;p&gt;第三、四步存在的问题是这样的：&lt;/p&gt; 
   &lt;p&gt;A 发送了 msg1、msg2、msg3，B 发送了 msg4、msg5、msg6，最终服务端的入库顺序是 msg1、msg2、msg4、msg3、msg5、msg6，那除了 A 和 B 其他人的消息顺序需要按照入库顺序来展示，而这里的问题是服务端考量推送吞吐量，在推送环节是并发的，即可能 msg4 比 msg1 先推送到用户端上，如果按照推送顺序追加来展示，那么就与预期不符了，每个人看到的消息顺序都可能不一致，如果用户端按照消息的 id 大小进行比较插入的话，用户体验将会比较奇怪，突然会在 2 个消息中间出现一条消息。所以这里采用推拉结合方式来解决这个问题，具体步骤如下：&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);&quot;&gt; 
    &lt;section style=&quot;font-size: 13px;&quot;&gt; 
     &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
      &lt;li&gt;&lt;p&gt;用户端发出消息，服务端将消息以群维度按照消息的入库顺序缓存在 Redis 有序 SET。&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;服务端推送给用户端新消息提醒，内容是该新消息的 id。&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;用户端拉取消息，携带 2 个消息 id，startId 和 endId，startId：本地最新的完整消息 id；endId：服务端推送得到的新消息 id。&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;服务端返回 2 个消息 id 区间内的消息列表。&lt;/p&gt;&lt;/li&gt; 
     &lt;/ol&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;&quot;&gt; 
   &lt;section style=&quot;vertical-align: middle;display: inline-block;line-height: 0;&quot;&gt; 
    &lt;img data-imgfileid=&quot;100016468&quot; data-ratio=&quot;0.13148148148148148&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/b4ba71dd-797b-4f61-8a2a-bd325e05fc07.png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; style=&quot;vertical-align: middle;width: 100%;&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;section style=&quot;text-align: center;color: rgb(204, 204, 204);&quot;&gt; 
   &lt;p&gt;图 5&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;&quot;&gt; 
   &lt;section style=&quot;vertical-align: middle;display: inline-block;line-height: 0;&quot;&gt; 
    &lt;img class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;100016476&quot; data-ratio=&quot;0.36944444444444446&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/90da72d5-745c-46db-bf87-aa9f4dbe24df.png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; style=&quot;vertical-align: middle;width: 100%;&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;section style=&quot;text-align: center;color: rgb(204, 204, 204);&quot;&gt; 
   &lt;p&gt;图 6&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;举例，图 5 表示服务端的消息顺序，图 6 表示用户端拉取消息时本地消息队列和提醒队列的变化逻辑。&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
   &lt;li&gt;&lt;p&gt;t1 时刻用户本地最新的完整消息是 msg1，即这条消息已经完整展示给用户。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;t2 时刻收到服务端推送的 msg3 新消息提醒，放到提醒队列，此时用户看不到这条消息。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;t3 时刻向服务端拉取消息详情，请求参数为 startId：msg1，endId：msg3，服务端会按顺序一起返回 2 个消息区间内的所有消息的详情即 msg2、msg4、msg3，将消息详情同步写入到消息队列，此时用户可以看到刷新出 3 条消息。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;t4 时刻用户还会收到 msg2、msg4 的新消息提醒，用户端校验消息队列已经存在 msg2、msg4 的详情，忽略该新消息提醒。&lt;/p&gt;&lt;/li&gt; 
  &lt;/ol&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-left: 3px solid rgb(65, 94, 255);border-bottom-left-radius: 0px;padding-left: 8px;vertical-align: top;align-self: flex-start;flex: 0 0 auto;&quot;&gt; 
    &lt;section style=&quot;color: rgba(0, 0, 0, 0.5);text-align: justify;&quot;&gt; 
     &lt;p&gt;通过推拉结合的方式可以保证所有用户收到的消息展示顺序一致。细心的读者可能会有疑问，如果聊天信息流里有自己发送的消息，那么可能与其他的人看到的不一致，这是因为自己的消息展示不依赖拉取，需要即时展示，给用户立刻发送成功的体验，同时其他人也可能也在发送，最终可能比他先入库，为了不出现信息流中间插入消息的用户体验，只能将他人的新消息追加在自己的消息后面。所以如果作为发送者，消息顺序可能不一致，但是作为纯接收者，大家的消息顺序都是一样的。&lt;/p&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;text-align: center;&quot;&gt; 
   &lt;section style=&quot;padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);&quot;&gt; 
    &lt;p&gt;&lt;strong&gt;七、消息可靠性&lt;/strong&gt;&lt;/p&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;在 IM 系统中，消息的可靠性同样非常重要，它主要体现在：&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);&quot;&gt; 
    &lt;section style=&quot;font-size: 13px;&quot;&gt; 
     &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
      &lt;li&gt;&lt;p&gt;&lt;strong&gt;消息不丢失&lt;/strong&gt;：对发送人来说，必须保证消息能入库；对接收者来说，不管是在线还是离线，都能保证收到。但是这里的不丢失，只是说以最大努力去保证，并不是说完全不丢失。&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;&lt;strong&gt;消息不重复&lt;/strong&gt;：这很容易理解，同一条消息不能重复出现。&lt;/p&gt;&lt;/li&gt; 
     &lt;/ol&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;7.1 消息不丢失设计&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
   &lt;li&gt;&lt;p&gt;&lt;strong&gt;传输协议保障&lt;/strong&gt;：首先 TCP 是可靠的协议，能较大程度上保证消息不丢失。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;strong&gt;增加 ACK 机制&lt;/strong&gt;：服务端在执行完消息处理的所有流程后，给发送者发送 ACK；假如发送者在超时时间内没有收到 ACK 消息，则进行一定次数的重试，重新发送；当重发次数超过预设次数，就不再重发，消息发送失败。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;strong&gt;最终一致性&lt;/strong&gt;：这是对接收者而言，如果某条新消息提醒因网络等其他原因丢失，用户没有收到这条消息提醒，那么用户就不会去拉消息详情，在用户视角就是没有看到这条消息。但是当后续的新消息提醒送达时，可以依赖前面提到的拉取机制拿到一个区间内的消息列表，这里就包含了丢失的消息，因此能达到最终一致性。&lt;/p&gt;&lt;/li&gt; 
  &lt;/ol&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;7.2 消息不重复设计&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);&quot;&gt; 
    &lt;section style=&quot;font-size: 13px;&quot;&gt; 
     &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
      &lt;li&gt;&lt;p&gt;&lt;strong&gt;增加 UUID&lt;/strong&gt;：每条消息增加 UUID，由客户端创建消息时生成，同一个用户的消息 UUID 唯一。&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;&lt;strong&gt;服务端&lt;/strong&gt;：用户 ID+UUID 在数据库做联合唯一索引，保证数据层面消息不重复。&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;&lt;strong&gt;用户端&lt;/strong&gt;：进行兜底，构造一个 map 来维护已接收消息的 id，当收到 id 重复的消息时直接丢弃。&lt;/p&gt;&lt;/li&gt; 
     &lt;/ol&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;text-align: center;&quot;&gt; 
   &lt;section style=&quot;padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);&quot;&gt; 
    &lt;p&gt;&lt;strong&gt;八、未读数统计&lt;/strong&gt;&lt;/p&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;为了提醒用户有新消息，需要给用户展示新消息提醒标识，产品设计上一般有小红点、具体的数值 2 种方式。具体数值比小红点要复杂，这里分析下具体数值的处理方式，还需要分为初始打开群和已打开群 2 个场景。&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);&quot;&gt; 
    &lt;section style=&quot;font-size: 13px;&quot;&gt; 
     &lt;p&gt;&lt;strong&gt;已打开群&lt;/strong&gt;：可以完全依赖用户端本地统计，用户端获取到新消息后，就将未读数累计加 1，等点进去查看后，清空未读数统计，这个比较简单。&lt;/p&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section&gt; 
   &lt;p&gt;&lt;strong&gt;初始打开群&lt;/strong&gt;：由于用户端采用 H5 开发，用户端没有缓存，没有能力缓存最近的已读消息游标，因此这里完全需要服务端来统计，在打开群时下发最新的聊天信息流和未读数，下面具体讲下这个场景下该怎么设计。&lt;/p&gt; 
   &lt;p&gt;&lt;br&gt;既然由服务端统计未读数，那么少不了要保存用户在某个群里已经读到哪个消息，类似一个游标，用户已读消息，游标往前走。用户已读消息存储表设计如图 7 所示：&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;&quot;&gt; 
   &lt;section style=&quot;vertical-align: middle;display: inline-block;line-height: 0;&quot;&gt; 
    &lt;img data-imgfileid=&quot;100016474&quot; data-ratio=&quot;0.38055555555555554&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/db8336c9-2e83-48c6-913a-b3c6a95811c3.png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; style=&quot;vertical-align: middle;width: 100%;&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;section style=&quot;text-align: center;color: rgb(204, 204, 204);&quot;&gt; 
   &lt;p&gt;图 7&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section&gt; 
   &lt;p&gt;游标 offset 采用定时更新策略，连接服务会记录用户最近一次拉取到的消息 ID，定时异步上报批量用户到群组服务更新 offset。&lt;/p&gt; 
   &lt;p&gt;&lt;br&gt;该表第一行表示用户 1 在 id=89 的群里，最新的已读消息是 id=1022 消息，那么可以通过下面的 SQL 来统计他在这个群里的未读数：&lt;br&gt;&lt;span style=&quot;background-color: rgb(204, 204, 204);&quot;&gt;select count(1) from msg_info where groupId = 89 and id &amp;gt; 1022&lt;/span&gt;。但是事情并没这么简单，一个用户有很多群，每个群都要展示未读数，因此要求未读数统计的程序效率要高，不然用户体验就很差，很明显这个 SQL 的耗时波动很大，取决于 offset 的位置，如果很靠后，SQL 执行时间会非常长。笔者通过 2 个策略来优化这个场景:&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);&quot;&gt; 
    &lt;section style=&quot;font-size: 13px;&quot;&gt; 
     &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
      &lt;li&gt;&lt;p&gt;调整产品设计：未读数最大显示调整为 99+。算是产品上的一个让步，有很多产品也采用这个方案，所以用户也是有这个心智的，99+表示「有很多新消息」，至于具体多少，是几百、几千很多时候不是特别重要。所以问题就变得简单多了，只要计算游标是否在最新的 100 条消息以内还是以外。&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;合理利用数据结构：因为有群内有很多人，每个人登录的时候都需要统计，所以每次都去查 MySQL 是比较低效的，因此笔者的方案是在 Redis 里设计一个有界的 ZSET 结构。&lt;/p&gt;&lt;/li&gt; 
     &lt;/ol&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;&quot;&gt; 
   &lt;section style=&quot;vertical-align: middle;display: inline-block;line-height: 0;&quot;&gt; 
    &lt;img data-imgfileid=&quot;100016473&quot; data-ratio=&quot;0.09537037037037037&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/86be57ec-7d58-4c9d-a48f-dae4e2ea583c.png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; style=&quot;vertical-align: middle;width: 100%;&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;section style=&quot;text-align: center;color: rgb(204, 204, 204);&quot;&gt; 
   &lt;p&gt;图 8&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;如上图 8 所示，每个群都会构建一个长度为 100，score 和 member 都是消息 ID，可以通过 &lt;span style=&quot;background-color: rgb(204, 204, 204);&quot;&gt;zrevrank&lt;/span&gt; 命令得到某个 offset 的排名值，该值可以换算成未读数。比如：用户 1 在群 89 的未读消息数，&lt;span style=&quot;background-color: rgb(204, 204, 204);&quot;&gt;&#39;zrevrank 89 1022&#39; = 2&lt;/span&gt;，也就是有 2 条未读数。用户 2 在群 89 的未读数，&lt;span style=&quot;background-color: rgb(204, 204, 204);&quot;&gt;&#39;zrevrank 89 890&#39; = nil&lt;/span&gt;，那么未读数就是 99+。同时消息新增、删除都需要同步维护该数据结构，失效或不存在时从 MySQL 初始化。&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;text-align: center;&quot;&gt; 
   &lt;section style=&quot;padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);&quot;&gt; 
    &lt;p&gt;&lt;strong&gt;九、超大群策略&lt;/strong&gt;&lt;/p&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section&gt; 
   &lt;p&gt;前面提到，设计目标是在同一个群里能支撑百万人，从架构上可以看到，连接服务处于流量最前端，所以它的承载力直接决定了同时在线用户的上限。&lt;/p&gt; 
   &lt;p&gt;&lt;br&gt;影响它的因素有：&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);&quot;&gt; 
    &lt;section style=&quot;font-size: 13px;&quot;&gt; 
     &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
      &lt;li&gt;&lt;p&gt;服务器自身配置：内存、CPU、网卡、Linux 支持的最大文件打开数；&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;应用自身配置：应用本身启动需要的内存，如 Netty 依赖的堆外内存，大量的本地缓存；&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;性能要求：当连接数不断变大时，消息分发的整体耗时肯定在不断增加，因此要关注最慢的分发耗时要满足即时性要求；&lt;br&gt;结合以上情况，可以测试出固定配置服务器单点能支持的最大用户连接数，假如单机能支持 20000 个用户连接，那么百万在线连接，在连接服务层用 50 个服务的集群就能解决。&lt;/p&gt;&lt;/li&gt; 
     &lt;/ol&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;9.1 消息风暴&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;当同时在线用户数非常多，例如百万时，会面临如下几个问题：&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
   &lt;li&gt;&lt;p&gt;&lt;strong&gt;消息发送风暴&lt;/strong&gt;：极端情况下，用户同时发送消息，假设服务端承载住了这些流量，那么瓶颈其实在用户端，第一用户端会经历网络风暴，网卡带宽能否支撑是一个大问题；第二假设网卡能通过这些流量，用户端上百万条消息该如何展示，要是瞬间刷出这些消息，用户端 CPU 能否撑住又是个问题，即使能抗住用户体验也很糟糕，根本就看不清消息，一直在飞速刷屏。因此服务端可以在发送消息风暴时做好限流、丢弃策略，给到用户友好的提示。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;strong&gt;消息提醒风暴&lt;/strong&gt;：一条新消息的产生，就要推送提醒消息百万次，对服务器来说，要考量整体推送完成的时效性，如果时效性差，对有些用户来说，就是消息需要较长时间才刷出来，出现明显的延迟。新消息持久化后，群组服务 HTTP 回调一组连接服务，单群百万在线用户，需要 50 台连接服务集群，那么回调 50 次，为了保证时效性，因此这里要并发回调，并设置合理的线程池，然后连接服务收到回调后也需要并发完成对群用户的新消息提醒推送。&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;strong&gt;消息拉取风暴&lt;/strong&gt;：连接服务收到拉取消息事件，需要去群组服务获取消息详情，QPS 就非常高了，理论上集群达到 100wQPS，20 台群组服务，那么每台群组服务就是 5wQPS。这里的策略是在链路前端连接服务上进行流量过滤，因为用户都是请求同一个群的同一条消息或附近的消息，那么就可以在连接服务里设计群消息的本地缓存，所有用户都只从本地缓存里读，如果本地缓存里没有，就放一个线程去群组服务请求加载缓存，其他线程同步等待，这样就大大降低了打到群组服务的 QPS。&lt;/p&gt;&lt;/li&gt; 
  &lt;/ol&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;9.2 消息压缩&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section&gt; 
   &lt;p&gt;如果某一个时刻，推送消息的数量比较大，且群同时在线人数比较多的时候，连接服务层的机房出口带宽就会成为消息推送的瓶颈。&lt;/p&gt; 
   &lt;p&gt;&lt;br&gt;做个计算，百万人在线，需要 5 台连接服务，一条消息 1KB，一般情况下，5 台连接服务集群都是部署在同一个机房，那么这个机房的带宽就是 1000000*1KB=1GB，如果多几个超大群，那么对机房的带宽要求就更高，所以如何有效的控制每一个消息的大小、压缩每一个消息的大小，是需要思考的问题。&lt;/p&gt; 
   &lt;p&gt;&lt;br&gt;经过测试，使用 protobuf 数据交换格式，平均每一个消息可以节省 43% 的字节大小，可以大大节省机房出口带宽。&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;font-size: 15px;&quot;&gt; 
   &lt;p&gt;&lt;span style=&quot;font-size: 16px;color: rgb(65, 95, 255);&quot;&gt;9.3 块消息&lt;/span&gt;&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section&gt; 
   &lt;p&gt;超大群里，消息推送的频率很高，每一条消息推送都需要进行一次 IO 系统调用，显然会影响服务器性能，可以采用将多个消息进行合并推送。&lt;/p&gt; 
   &lt;p&gt;&lt;br&gt;&lt;strong&gt;主要思路&lt;/strong&gt;：以群为维度，累计一段时间内的消息，如果达到阈值，就立刻合并推送，否则就以匀速的时间间隔将在这个时间段内新增的消息进行推送。&lt;/p&gt; 
   &lt;p&gt;&lt;br&gt;时间间隔是 1 秒，阈值是 10，如果 500 毫秒内新增了 10 条消息，就合并推送这 10 条消息，时间周期重置；如果 1 秒内只新增了 8 条消息，那么 1 秒后合并推送这 8 条消息。&lt;br&gt;这样做的好处如下：&lt;/p&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);&quot;&gt; 
    &lt;section style=&quot;font-size: 13px;&quot;&gt; 
     &lt;ol class=&quot;list-paddingleft-1&quot; style=&quot;padding-left: 40px;list-style-position: outside;&quot;&gt; 
      &lt;li&gt;&lt;p&gt;提升服务器性能：减少 IO 系统调用，减少用户态与内核态之前的切换；&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;减少传输量：合并消息后，可以减少传输多余的消息头，进一步压缩消息大小；&lt;/p&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;p&gt;提升用户体验：一定程度上能减小消息风暴，消息渲染的节奏比较均匀，带给用户更好的体验；&lt;/p&gt;&lt;/li&gt; 
     &lt;/ol&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;text-align: center;&quot;&gt; 
   &lt;section style=&quot;padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);&quot;&gt; 
    &lt;p&gt;&lt;strong&gt;十、总结&lt;/strong&gt;&lt;/p&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;在本文中，笔者介绍了从零开始搭建一个生产级百万级群聊的一些关键要点和实践经验，包括通信方案选型、消息存储、消息顺序、消息可靠性、高并发等方面，但仍有许多技术设计未涉及，比如冷热群、高低消息通道会放在未来的规划里。IM 开发业界没有统一的标准，不同的产品有适合自己的技术方案，希望本文能够带给读者更好地理解和应用这些技术实践，为构建高性能、高可靠性的群聊系统提供一定的参考。&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-right: 0%;margin-bottom: 20px;margin-left: 0%;justify-content: flex-start;display: flex;flex-flow: row;&quot;&gt; 
   &lt;section style=&quot;display: inline-block;vertical-align: middle;width: 40%;align-self: center;flex: 0 0 auto;&quot;&gt; 
    &lt;section style=&quot;margin-top: 0.5em;margin-bottom: 0.5em;&quot;&gt; 
     &lt;section style=&quot;border-top: 1px dotted rgb(90, 98, 114);&quot;&gt; 
      &lt;svg viewBox=&quot;0 0 1 1&quot; style=&quot;float:left;line-height:0;width:0;vertical-align:top;&quot;&gt;&lt;/svg&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
   &lt;section style=&quot;display: inline-block;vertical-align: middle;width: 20%;align-self: center;flex: 0 0 auto;&quot;&gt; 
    &lt;section style=&quot;text-align: center;color: rgb(45, 66, 87);font-size: 11px;&quot;&gt; 
     &lt;p&gt;END&lt;/p&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
   &lt;section style=&quot;display: inline-block;vertical-align: middle;width: 40%;align-self: center;flex: 0 0 auto;&quot;&gt; 
    &lt;section style=&quot;margin-top: 0.5em;margin-bottom: 0.5em;&quot;&gt; 
     &lt;section style=&quot;border-top: 1px dotted rgb(90, 98, 114);&quot;&gt; 
      &lt;svg viewBox=&quot;0 0 1 1&quot; style=&quot;float:left;line-height:0;width:0;vertical-align:top;&quot;&gt;&lt;/svg&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;text-align: center;&quot;&gt; 
   &lt;section style=&quot;padding-left: 1em;padding-right: 1em;display: inline-block;&quot;&gt; 
    &lt;span style=&quot;display: inline-block;padding: 0.3em 0.5em;border-radius: 0.5em;background-color: rgb(65, 94, 255);font-size: 12px;color: rgb(255, 255, 255);&quot; title=&quot;&quot;&gt;&lt;p&gt;粉丝福利&lt;/p&gt;&lt;/span&gt; 
   &lt;/section&gt; 
   &lt;section style=&quot;border-width: 1px;border-style: solid;border-color: rgb(192, 200, 209);margin-top: -1em;padding: 20px 10px 10px;background-color: rgb(239, 239, 239);&quot;&gt; 
    &lt;section&gt; 
     &lt;p style=&quot;text-align: left;&quot;&gt;vivo 互联网技术为开发者朋友们提供了 iQOO &amp;amp; NBA 联名款周边（各 1 个），快来领取吧！&lt;/p&gt; 
     &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
    &lt;/section&gt; 
    &lt;section style=&quot;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 10px;&quot;&gt; 
     &lt;section style=&quot;display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 100 100 0%;height: auto;&quot;&gt; 
      &lt;section style=&quot;text-align: center;line-height: 0;&quot;&gt; 
       &lt;section style=&quot;vertical-align: middle;display: inline-block;line-height: 0;border-style: solid;border-width: 5px;border-color: rgb(238, 243, 255);width: 100%;height: auto;&quot;&gt; 
        &lt;img class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;100016477&quot; data-ratio=&quot;0.6944444444444444&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/e0b00897-c5bc-4b1f-80e1-1ccaab36377a.png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; style=&quot;vertical-align: middle;width: 100%;&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
       &lt;/section&gt; 
      &lt;/section&gt; 
     &lt;/section&gt; 
     &lt;section style=&quot;display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;padding-right: 15px;padding-left: 15px;&quot;&gt; 
      &lt;section style=&quot;&quot;&gt; 
       &lt;section style=&quot;text-align: center;font-size: 12px;color: rgb(192, 174, 255);letter-spacing: 2px;&quot;&gt; 
        &lt;p&gt;✦&lt;/p&gt; 
       &lt;/section&gt; 
      &lt;/section&gt; 
      &lt;section style=&quot;&quot;&gt; 
       &lt;section style=&quot;text-align: center;font-size: 21px;color: rgb(192, 174, 255);letter-spacing: 2px;&quot;&gt; 
        &lt;p&gt;✦&lt;/p&gt; 
       &lt;/section&gt; 
      &lt;/section&gt; 
      &lt;section style=&quot;&quot;&gt; 
       &lt;section style=&quot;text-align: center;font-size: 12px;color: rgb(192, 174, 255);letter-spacing: 2px;&quot;&gt; 
        &lt;p&gt;✦&lt;/p&gt; 
       &lt;/section&gt; 
      &lt;/section&gt; 
     &lt;/section&gt; 
     &lt;section style=&quot;display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 100 100 0%;height: auto;&quot;&gt; 
      &lt;section style=&quot;text-align: center;line-height: 0;&quot;&gt; 
       &lt;section style=&quot;vertical-align: middle;display: inline-block;line-height: 0;border-style: solid;border-width: 5px;border-color: rgb(238, 243, 255);width: 60%;height: auto;&quot;&gt; 
        &lt;img data-imgfileid=&quot;100016475&quot; data-ratio=&quot;1.0333333333333334&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/23f5a0fe-5e80-4cd6-b509-a3492ef43e68.png&quot; data-type=&quot;png&quot; data-w=&quot;960&quot; style=&quot;vertical-align: middle;width: 100%;&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
       &lt;/section&gt; 
      &lt;/section&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
    &lt;section&gt; 
     &lt;p&gt;&lt;span style=&quot;color: rgb(160, 160, 160);font-size: 13px;&quot;&gt;iQOO x NBA 联名洗漱包 x1&lt;/span&gt;&lt;/p&gt; 
     &lt;p&gt;&lt;span style=&quot;color: rgb(160, 160, 160);font-size: 13px;&quot;&gt;iQOO x NBA 联名运动水杯 x1&lt;/span&gt;&lt;/p&gt; 
     &lt;p style=&quot;text-align: left;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
     &lt;p style=&quot;text-align: left;&quot;&gt;参与方法：&lt;/p&gt; 
     &lt;p style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;color: rgb(65, 95, 255);&quot;&gt;&lt;strong&gt;转发&lt;/strong&gt;&lt;/span&gt;本篇内容&lt;strong&gt;&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;到朋友圈&lt;/span&gt;&lt;/strong&gt;，&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;&lt;strong&gt;截图&lt;/strong&gt;&lt;/span&gt;保存界面，再到 vivo 互联网技术微信&lt;strong&gt;&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;后台发送「v 爱技术」&lt;/span&gt;&lt;/strong&gt;参与抽奖，上传截图即可。（&lt;strong&gt;请保留朋友圈分享链接至开奖当天&lt;/strong&gt;）&lt;/p&gt; 
     &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
     &lt;p style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;color: rgb(65, 94, 255);&quot;&gt;&lt;strong&gt;开奖时间：2024 年 2 月 28 日 20:00&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
     &lt;p style=&quot;text-align: left;&quot;&gt;奖品将通过邮寄发放，中奖者需在&lt;strong&gt;5 天内&lt;/strong&gt;提供收货信息。(联系本号后台）&lt;/p&gt; 
     &lt;p style=&quot;text-align: left;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
     &lt;p style=&quot;text-align: left;&quot;&gt;注意：&lt;/p&gt; 
     &lt;p style=&quot;text-align: left;&quot;&gt;1.我们将会通过人工审核截图进行校对。未及时提供收货信息或未完成所有步骤的参与者将视为自动放弃。&lt;/p&gt; 
     &lt;p style=&quot;text-align: left;&quot;&gt;2. 活动解释权归 vivo 互联网技术所有。&lt;/p&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
  &lt;section style=&quot;margin-top: 10px;margin-bottom: 10px;text-align: left;&quot;&gt; 
   &lt;section style=&quot;padding-left: 1em;padding-right: 1em;display: inline-block;text-align: center;&quot;&gt; 
    &lt;span style=&quot;display: inline-block;padding: 0.3em 0.5em;border-radius: 0.5em;background-color: rgb(65, 94, 255);color: rgb(255, 255, 255);&quot; title=&quot;&quot;&gt;&lt;p&gt;猜你喜欢&lt;/p&gt;&lt;/span&gt; 
   &lt;/section&gt; 
   &lt;section style=&quot;border-width: 1px;border-style: solid;border-color: transparent;margin-top: -1em;padding: 20px 10px 10px;background-color: rgb(239, 239, 239);text-align: center;&quot;&gt; 
    &lt;section style=&quot;font-size: 13px;text-align: left;&quot;&gt; 
     &lt;p&gt;1.&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247499846%26idx%3D1%26sn%3D60135e9871209d2c57e1eec2b062db7a%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;RocksDB 内存超限问题剖析&lt;/a&gt;&lt;/p&gt; 
     &lt;p&gt;2.&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247500064%26idx%3D1%26sn%3Dcfd8f7bfd1281432d0276097838b42db%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;NLLB 与 ChatGPT 双向优化：探索翻译模型与语言模型在小语种应用的融合策略&lt;/a&gt;&lt;/p&gt; 
     &lt;p&gt;3.&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247500102%26idx%3D1%26sn%3D59ea19fe37d083fff3300fa97a2ba19e%26scene%3D21%23wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;vivo HTTPDNS 端到端体验优化实践&lt;/a&gt;&lt;/p&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
  &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;/section&gt; 
 &lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt; 
  &lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI4NjY4MTU5Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt45QXJZicZ9gaNU2mRSlvqhQd94MJ7oQh4QFj1ibPV66xnUiaKoicSatwaGXepL5sBDSDLEckicX1ttibHg/0?wx_fmt=png&quot; data-nickname=&quot;vivo 互联网技术&quot; data-alias=&quot;vivoVMIC&quot; data-signature=&quot;分享 vivo 互联网技术干货与沙龙活动，推荐最新行业动态与热门会议。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot; data-service_type=&quot;2&quot;&gt;&lt;/mp-common-profile&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;display: none;&quot;&gt; 
  &lt;mp-style-type data-value=&quot;3&quot;&gt;&lt;/mp-style-type&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color: #858585; font-size: 13px;&quot;&gt;本文分享自微信公众号 - vivo 互联网技术（vivoVMIC）。&lt;br&gt;如有侵权，请联系 support@oschina.cn 删除。&lt;br&gt;本文参与「&lt;a href=&quot;https://www.oschina.net/sharing-plan&quot; target=&quot;_blank&quot;&gt;OSC 源创计划&lt;/a&gt;」，欢迎正在阅读的你也加入，一起分享。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/vivotech/blog/17779597</link>
            <guid isPermaLink="false">https://my.oschina.net/vivotech/blog/17779597</guid>
            <pubDate>Fri, 28 Feb 2025 06:27:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>百度将于 3 月 16 日发布文心大模型 4.5</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;百度&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FfErfpPI5opivfBQpj-151Q&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;，将于 3 月 16 日发布文心大模型 4.5。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img height=&quot;994&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0228/140204_bngG_2720166.png&quot; width=&quot;1400&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;据官方介绍，文心大模型 4.5 在基础模型能力上有大幅提升，且具备原生多模态、深度思考等能力。百度文心大模型是全球最早对标 GPT 的 LLM 大模型，并将在今年内发布 5.0 版本。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;2&lt;/span&gt;月&lt;span&gt;14&lt;/span&gt;日，百度就已宣布将在未来几个月中陆续推出文心大模型&lt;span&gt;4.5&lt;/span&gt;系列，并于&lt;span&gt;6&lt;/span&gt;月&lt;span&gt;30&lt;/span&gt;日起正式开源。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;390&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0214/103039_F4FT_3820517.png&quot; width=&quot;678&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;据介绍，随着文心大模型的迭代升级，其训练和推理成本正在迅速下降。不久前，百度创始人李彦宏在迪拜&lt;span&gt;AI&lt;/span&gt;峰会上表示，当前的创新速度比以往快得多，大模型的推理成本每年能降低&lt;span&gt;90%&lt;/span&gt;以上，并表示将持续投入&lt;span&gt;AI&lt;/span&gt;基础设施，以打造下一代大模型。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/336166</link>
            <guid isPermaLink="false">https://www.oschina.net/news/336166</guid>
            <pubDate>Fri, 28 Feb 2025 06:02:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>「嘎子哥」谢孟伟开卖 AI 课，宣称 DeepSeek 引爆流量</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;网友发现，曾主演《小兵张嘎》的演员「嘎子哥」谢孟伟有了新的直播方向，从卖白酒转卖 AI 课程。直播截图显示，嘎子哥直播宣称「&lt;em&gt;&lt;strong&gt;deepseek 引爆流量，只需要对着镜头说 123123，就能生成几十种语言视频&lt;/strong&gt;&lt;/em&gt;」。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-bdd647c4bb59b164245cf65e82b9bf12899.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;从直播截图来看，嘎子哥的 DeepSeek 课程收费 10.9 元。网友在直播间调侃称：「你能玩明白吗？嘎子。」&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/336150</link>
            <guid isPermaLink="false">https://www.oschina.net/news/336150</guid>
            <pubDate>Fri, 28 Feb 2025 03:52:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>「老牌命令行 Shell」 Fish Shell 正式发布 4.0，完全用 Rust 重写核心 C++ 代码</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffish-shell%2Ffish-shell%2Freleases%2Ftag%2F4.0.0&quot; target=&quot;_blank&quot;&gt;Fish Shell 4.0 已正式发布&lt;/a&gt;，最大变化就是&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;用 Rust 重写了核心 C++ 代码&lt;/strong&gt;&lt;/span&gt;，这意味着依赖关系和构建方式的巨变，但这对终端用户没有直接影响。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;fish 是适用于 Linux、macOS 的命令行 Shell，已有 20 年历史，其名字取于 &quot;the friendly interactive shell&quot; 的首字母简称，最大特点就是方便易用、功能强大、智能并且用户友好。很多其他 Shell 需要配置才有的功能，fish 默认提供，不需要任何配置。&lt;/p&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-fbaec1727fade017d5a8401ecdff3d369fb.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;其它变化包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;新的 bind 键符号&lt;/li&gt; 
 &lt;li&gt;相同种子将生成与之前版本不同的随机值&lt;/li&gt; 
 &lt;li&gt;Ctrl-C 将默认清除命令行&lt;/li&gt; 
 &lt;li&gt;Windows Subsystem for Linux 调整&lt;/li&gt; 
 &lt;li&gt;Fish 能作为自安装二进制文件构建，等等。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffishshell.com%2Fdocs%2Fcurrent%2Frelnotes.html&quot; target=&quot;_blank&quot;&gt;详情查看 Release Notes&lt;/a&gt;&lt;/u&gt;。&lt;/p&gt; 
&lt;p&gt;有关 Fish Shell 用 Rust 重写 C++ 的更多细节，可查看此前的报道：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/327176/fishshell-rustport&quot; target=&quot;news&quot;&gt;Fish Shell 分享从 C++ 切换到 Rust 的经验&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/268315&quot; target=&quot;news&quot;&gt;Fish Shell 采用 Rust 重写会导致性能下降&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/226616/fish-shell-be-rewritten-rust&quot; target=&quot;news&quot;&gt;Fish Shell 计划采用 Rust 重写&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/336135/fish-shell-4-0-0-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/336135/fish-shell-4-0-0-released</guid>
            <pubDate>Fri, 28 Feb 2025 03:05:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>DeepSeek 开源周第五日：高性能并行文件系统 3FS</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;DeepSeek 开源周第五日，&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fdeepseek_ai%2Fstatus%2F1895279409185390655&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;&lt;/u&gt;面向 DeepSeek 全数据访问的推进器 3FS。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1208&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0228/105107_eEOh_2720166.png&quot; width=&quot;1278&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Fire-Flyer 文件系统（Fire-Flyer File System, 3FS）&lt;/strong&gt;是一款并行文件系统，支持 V3/R1 版本中训练数据预处理、数据集加载、检查点保存 / 重载、推理阶段的向量嵌入搜索及 KVCache 查找。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;开源地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdeepseek-ai%2F3FS&quot; target=&quot;_blank&quot;&gt;https://github.com/deepseek-ai/3FS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;基于 3FS 的数据处理框架 Smallpond：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdeepseek-ai%2Fsmallpond&quot; target=&quot;_blank&quot;&gt;https://github.com/deepseek-ai/smallpond&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3FS 性能亮点&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;集群高吞吐：在 180 节点集群中，3FS 实现了高达 6.6 TiB/s 的聚合读取吞吐量。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;基准测试优异：在 25 节点集群的 GraySort 基准测试中，3FS 达到了 3.66 TiB / min 的吞吐量。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;单节点高性能：每个客户端节点的 KVCache 查找峰值吞吐量超过 40 GiB/s。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;架构先进&lt;strong&gt;：&lt;/strong&gt;&amp;nbsp;3FS 采用去中心化架构，并具备强一致性语义。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3FS 应用场景&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;3FS (Fire-Flyer File System) 是一款高性能的分布式文件系统，旨在解决 AI 训练和推理工作负载带来的挑战，利用现代 SSD 和 RDMA 网络提供共享存储层，简化分布式应用程序的开发。其核心优势在于高性能、强一致性和易用性，能够有效支持各种 AI 工作负载，包括数据准备、数据加载、检查点设置和推理缓存。&lt;/p&gt; 
&lt;p&gt;3FS 在 DeepSeek 的 V3 / R1 版本中得到广泛应用，涵盖了训练数据预处理、数据集加载、检查点保存 / 重新加载、嵌入向量搜索以及推理过程中的 KVCache 查找等关键环节。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Smallpond&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;此外，DeepSeek 还开源了基于 3FS 的数据处理框架 Smallpond，是一款构建于 DuckDB 和 3FS 之上的轻量级数据处理框架。它拥有高性能数据处理能力，可扩展至 PB 级数据集，并且操作简便，无需长期运行的服务。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;【DeepSeek 开源周完整回顾】&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/336131&quot; target=&quot;news&quot;&gt;DeepSeek 开源周第五日：高性能并行文件系统 3FS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/335953&quot; target=&quot;news&quot;&gt;DeepSeek 开源周第四日：DualPipe、EPLB 优化并行策略&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/335779/deepseek-deepgemm&quot; target=&quot;news&quot;&gt;DeepSeek 开源周第三日：开源 DeepGEMM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/335624/deepseek-deepep&quot; target=&quot;news&quot;&gt;DeepSeek 开源周第二日：开源 DeepEP 通信库&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/335425/deepseek-flashmla&quot; target=&quot;news&quot;&gt;「DeepSeek 开源周」首发项目：FlashMLA&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/336131/deepseek-opensource-week-3fs</link>
            <guid isPermaLink="false">https://www.oschina.net/news/336131/deepseek-opensource-week-3fs</guid>
            <pubDate>Fri, 28 Feb 2025 02:47:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>OpenAI 正式发布 GPT-4.5 模型</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;今日凌晨，OpenAI &lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenai.com%2Findex%2Fintroducing-gpt-4-5%2F&quot; target=&quot;_blank&quot;&gt;正式发布 GPT-4.5 模型&lt;/a&gt;&lt;/u&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0228/101700_vzaG_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;GPT-4.5 支持联网搜索，并能够处理文件和图片上传，还可以使用 Canvas 来进行写作和编程。&lt;/p&gt; 
&lt;p&gt;不过，目前 GPT-4.5 还不支持多模态功能，如语音模式、视频和屏幕共享。GPT-4.5 主要通过「无监督学习」（就是自己从大量数据中学习）变得更聪明，而不是像 OpenAI o1 或者 DeepSeek R1 那样专注于推理能力。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;简单说，GPT-4.5 知道的更多，而 o1 系列更会思考&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;API 价格方面，因 GPT-4.5 计算量极大，成本高昂，相较于 GPT-4o 价格有了较高上涨——价格涨到了 75 美元 / 百万 tokens，是 GPT-4o 的 30 倍，更是 DeepSeek 的 280 倍。&lt;/p&gt; 
&lt;p&gt;Sam Altman 提到，&lt;strong&gt;GPT-4.5 不是推理型模型&lt;/strong&gt;，不会在基准测试中碾压其他模型。在目前曝出的实测中，性能的提升远没有价格大。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0228/102206_sah1_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;GPT-4.5 更新要点如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;知识更广泛：它学习了更多的信息，所以懂的东西比以前多&lt;/li&gt; 
 &lt;li&gt;更少胡说八道：减少了「幻觉」（就是 AI 编造事实的情况）&lt;/li&gt; 
 &lt;li&gt;更懂人心：「情商」更高，更能理解你的真实意图&lt;/li&gt; 
 &lt;li&gt;对话更自然：聊天感觉更像和真人交流，不那么机械&lt;/li&gt; 
 &lt;li&gt;创意更丰富：在写作和设计方面表现更好&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;从今天开始，ChatGPT Pro 用户已经可以用上 GPT-4.5（研究预览版）了。下周，将会逐步开放给 Plus 和 Team 用户；再下一周则是 Enterprise 和 Edu 用户。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/336125/openai-gpt-4-5</link>
            <guid isPermaLink="false">https://www.oschina.net/news/336125/openai-gpt-4-5</guid>
            <pubDate>Fri, 28 Feb 2025 02:17:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>字节跳动开源 AIBrix：专为 vLLM 打造的可扩展、高性价比控制面</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;vLLM 日前宣布了由字节跳动开发的 AIBrix 大模型推理系统正式开源，为 vLLM 推理引擎提供可扩展且高性价比的控制面。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;AIBrix 作为一个开源项目，旨在为构建可扩展的推理基础设施提供核心组件。它提供了一套云原生解决方案，专注于优化大语言模型（LLM）推理的部署、管理和扩展能力，并针对企业级需求进行了深度适配。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;408&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0226/164138_QBGT_4252687.jpeg&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;首版 AIBrix 聚焦以下核心功能：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;高密度 LoRA 管理：简化对轻量级的、低秩模型适配的支持；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;LLM 网关和路由：高效管理和分配多个模型和副本的流量；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;针对 LLM 应用的自动扩展器：根据实时需求动态调整推理资源；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;统一 AI 运行时：多功能 sidecar 容器，支持指标标准化、模型下载和管理；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;分布式推理：可扩展架构，支持多节点大规模推理负载；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;分布式 KV 缓存：支持高容量、跨引擎的 KV 重用；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;高性价比异构资源调度：支持混合 GPU 推理，在保障 SLO 的前提下降低成本；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;GPU 硬件故障检测：主动检测 GPU 硬件异常。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;AIBrix 的愿景与行业合作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;AIBrix 基于「系统与推理引擎协同设计」的理念，核心目标是以云原生方式在 Kubernetes 上构建可扩展的推理系统。展望未来，项目团队计划通过以下举措继续探索协同设计方法：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;扩展分布式 KV 缓存：支持更广泛的场景，如预填充（Prefill）与解码（Decode）聚合、请求迁移、跨实例 KV 复用等，提升内存效率与推理灵活性；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;引入传统资源管理原则：将 QoS（服务质量）、优先级调度、公平性等机制应用于 LLM 推理，实现请求级多租户，确保资源高效分配；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;基于性能天花板的性能分析：通过性能剖析提升计算效率，为多样化负载提供强 SLO 保障的推理性能。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/336124/aibrix-open-source</link>
            <guid isPermaLink="false">https://www.oschina.net/news/336124/aibrix-open-source</guid>
            <pubDate>Fri, 28 Feb 2025 02:17:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>腾讯混元新一代快思考模型 Turbo S 发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;腾讯混元新一代快思考模型 Turbo S 正式发布。&lt;/p&gt; 
&lt;p&gt;公告称，区别于 Deepseek R1、混元 T1 等需要「想一下再回答」的慢思考模型，混元 Turbo S 能够实现「秒回」，更快速输出答案，吐字速度提升一倍，首字时延降低 44%。在知识、数理、创作等方面，混元 Turbo S 也有不错表现。&lt;/p&gt; 
&lt;p&gt;通过长短思维链融合，混元 Turbo S 在保持文科类问题快思考体验的同时，基于自研混元 T1 慢思考模型合成的长思维链数据，显著改进了理科推理能力，实现模型整体性能明显提升。&lt;/p&gt; 
&lt;p&gt;在业界通用的多个公开 Benchmark 上，混元 Turbo S 在知识、数学、推理等多个领域，展现出对标 DeepSeek V3、GPT 4o、Claude 等一系列业界领先模型的效果表现。&lt;/p&gt; 
&lt;p&gt;架构方面，创新采用 Hybrid-Mamba-Transformer 融合模式，混元 Turbo S 有效降低了传统 Transformer 结构的计算复杂度，减少了 KV-Cache 缓存占用，实现训练和推理成本的下降。&lt;/p&gt; 
&lt;p&gt;新的融合模式突破了传统纯 Transformer 结构大模型面临的长文训练和推理成本高的难题。一方面，发挥了 Mamba 高效处理长序列的能力；另一方面，也保留 Transformer 擅于捕捉复杂上下文的优势，最终构建了显存与计算效率双优的混合架构。&lt;/p&gt; 
&lt;p&gt;这也是工业界首次成功将 Mamba 架构无损地应用在超大型 MoE 模型上。通过模型架构上的技术创新，混元 Turbo S 部署成本大幅下降，持续推动大模型应用门槛降低。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;344&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4abaacd31a444217c6439574c9d1649dba7.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;279&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d371fbd287c01368c3fd7fd4559a1d2fd9c.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;作为旗舰模型，混元 Turbo S 未来将成为腾讯混元系列衍生模型的核心基座，为推理、长文、代码等衍生模型提供基础能力。&lt;/p&gt; 
&lt;p&gt;基于 Turbo S，通过引入长思维链、检索增强和强化学习等技术，混元也推出了具备深度思考的推理模型 T1。&lt;/p&gt; 
&lt;p&gt;该模型此前已在腾讯元宝全量上线（腾讯混元 T1 模型面向所有用户开放），用户可以选择 Deepseek R1 或腾讯混元 T1 模型进行回答。腾讯混元 T1 模型正式版也将很快上线，对外提供 API 接入等服务。&lt;/p&gt; 
&lt;p&gt;当前，开发者和企业用户已经可以在腾讯云上通过 API 调用腾讯混元 Turbo S ，即日起一周内免费试用。（腾讯混元 turbos 模型 API 免费试用申请： &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.tencent.com%2Fapply%2Fp%2Fi2zophus2x8%25EF%25BC%2589&quot; target=&quot;_blank&quot;&gt;https://cloud.tencent.com/apply/p/i2zophus2x8）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;定价上，Turbo S 输入价格为 0.8 元/百万 tokens，输出价格为 2 元/百万 tokens，相比前代混元 Turbo 模型价格下降数倍。腾讯元宝即将逐步灰度上线混元 Turbo S，用户在元宝内选择「Hunyuan」 模型并关闭深度思考即可体验使用。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/336120</link>
            <guid isPermaLink="false">https://www.oschina.net/news/336120</guid>
            <pubDate>Fri, 28 Feb 2025 01:58:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>微软 Phi-4 家族新成员：Phi-4 多模态和 Phi-4 迷你</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;微软于 2024 年 12 月发布了&lt;a href=&quot;https://www.oschina.net/news/324769/microsoft-phi-4-newest-small-language-model&quot;&gt; Phi-4&lt;/a&gt;，这是一款在同类产品中表现卓越的小型语言模型（SLM）。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-f367ea7f93b5fdbf9d981567729ae9c09b9.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;今日，微软宣布为 Phi-4 家族推出两款全新模型：&lt;strong&gt;Phi-4 多模态（Phi-4-multimodal）和 Phi-4 迷你（Phi-4-mini）&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-7cafa9bb4bd60b2af030be75ea2a3fd600e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Phi-4 多模态模型是微软首款集成语音、视觉和文本处理的统一架构多模态语言模型&lt;/strong&gt;，参数量达 56 亿。在多项基准测试中，Phi-4 多模态的表现优于其他现有的先进全模态模型，例如谷歌的 Gemini 2.0 Flash 和 Gemini 2.0 Flash Lite。&lt;/p&gt; 
&lt;p&gt;在语音相关任务中，Phi-4 多模态在自动语音识别（ASR）和语音翻译（ST）方面超越了 WhisperV3 和 SeamlessM4T-v2-Large 等专业语音模型。微软表示，该模型在 Hugging Face OpenASR 排行榜上以 6.14% 的词错误率位居榜首。&lt;/p&gt; 
&lt;p&gt;在视觉相关任务中，Phi-4 多模态在数学和科学推理方面表现出色。在文档理解、图表理解、光学字符识别（OCR）和视觉科学推理等常见多模态能力方面，该模型与 Gemini-2-Flash-lite-preview 和 Claude-3.5-Sonnet 等流行模型相媲美甚至超越。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Phi-4 迷你模型则专注于文本任务&lt;/strong&gt;，参数量为 38 亿。其在文本推理、数学计算、编程、指令遵循和函数调用等任务中表现优异，超越了多款流行的大型语言模型。&lt;/p&gt; 
&lt;p&gt;为确保新模型的安全性和可靠性，微软邀请了内部和外部安全专家进行测试，并采用了微软人工智能红队（AIRT）制定的策略。经过进一步优化后，Phi-4 迷你和 Phi-4 多模态模型均可通过 ONNX Runtime 部署到设备端，实现跨平台使用，适用于低成本和低延迟场景。&lt;/p&gt; 
&lt;p&gt;目前，Phi-4 多模态和 Phi-4 迷你模型已在 Azure AI Foundry、Hugging Face 和 NVIDIA API 目录中上线，供开发者使用。&lt;/p&gt; 
&lt;p&gt;相关链接&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fmicrosoft%2Fphi-4&quot; target=&quot;_blank&quot;&gt;https://huggingface.co/microsoft/phi-4&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fazure.microsoft.com%2Fen-us%2Fblog%2Fempowering-innovation-the-next-generation-of-the-phi-family%2F&quot; target=&quot;_blank&quot;&gt;https://azure.microsoft.com/en-us/blog/empowering-innovation-the-next-generation-of-the-phi-family&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fmicrosoft%2FPhi-4-multimodal-instruct&quot; target=&quot;_blank&quot;&gt;https://huggingface.co/microsoft/Phi-4-multimodal-instruct&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/336055/ms-phi-family</link>
            <guid isPermaLink="false">https://www.oschina.net/news/336055/ms-phi-family</guid>
            <pubDate>Thu, 27 Feb 2025 11:01:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>Scorecards：开源项目安全性评分应用</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fscorecard.dev%2F&quot; target=&quot;_blank&quot;&gt;Scorecards&lt;/a&gt;&lt;/u&gt;&amp;nbsp;是谷歌开发，由开源安全基金会 (OpenSSF) 开源的首批项目之一，其目标是为开源项目自动生成一个 &quot;安全分数&quot;，以帮助用户确定用例的信任度、风险和安全态势。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;718&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0227/184109_SvIp_2720166.png&quot; width=&quot;2386&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Scorecards 定义了初始评估标准，它被用于以一种完全自动化的方式为开源项目生成一个评分卡。评分卡的每项检查都可以被控制是否启用，部分评估指标包括定义良好的安全策略、代码审查流程以及使用模糊测试和静态代码分析工具的持续测试覆盖率。每项安全检查都会返回一个布尔值以及信任度分数。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2025/0227/183922_O5Hc_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;随着 Scorecards 被广泛使用，谷歌会通过 OpenSSF 的社区贡献来改进这些指标。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/336054</link>
            <guid isPermaLink="false">https://www.oschina.net/news/336054</guid>
            <pubDate>Thu, 27 Feb 2025 10:41:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>KubeSphere 企业版 v4.1.3 发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;p&gt;KubeSphere 企业版始终致力于为企业提供安全、稳定、高效的云原生全栈管理能力。在 4.1.3 版本中，KubeSphere 聚焦可观测性深度优化、策略管理灵活升级与安全隔离能力增强，推出多项新特性与优化，进一步释放企业云原生基础设施的潜力，助力业务高效运行与智能管理！&lt;/p&gt; 
&lt;h2&gt;核心升级一览&lt;/h2&gt; 
&lt;h3&gt;全新智能可观测性，提升运维效率&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;新增 Grafana Alloy for WizTelemetry 扩展组件&lt;/strong&gt; Grafana Alloy 作为新一代高性能、厂商中立的 OpenTelemetry Collector 分发版，支持采集 Kubernetes 日志、Prometheus 指标、OpenTelemetry 链路追踪等多元数据，并内置 MySQL、Kafka、Redis 等 20+ 中间件 Exporter，实现一站式指标抓取与远程写入。结合 KubeSphere 企业版的可观测能力，企业可快速构建覆盖全栈的监控体系，精准定位性能瓶颈。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-7d076c7c23c00142406d2b7f4e45055da8d.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;OpenSearch ISM 索引管理全面替代 Curator&lt;/strong&gt; 审计、事件、日志、通知等扩展组件全面支持 OpenSearch ISM（索引生命周期管理），提供更灵活、自动化的索引策略配置（如滚动更新、冷热分层、自动清理），优化存储资源利用率，保障日志与监控数据长期稳定存储。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;GPU 监控面板增强，加速 AI 基础设施管理&lt;/strong&gt; 同步上游 kube-prometheus 最新面板，新增多维度 GPU 资源监控视图（显存利用率、算力负载、任务调度等），为 AI 训练、推理等场景提供精细化洞察，助力企业高效管理 AI 算力资源。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;策略管理更灵活，安全合规再升级&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Gatekeeper 内置模板管理功能上线&lt;/strong&gt; 支持通过 &lt;strong&gt;values.yaml 一键配置模板安装策略：&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;templates.fullInstall&lt;/code&gt;：快速部署所有内置 OPA 策略模板，满足开箱即用需求。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;templates.customInstall&lt;/code&gt;：按需选择模板（如资源配额限制、镜像校验、网络策略），适配多业务场景。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-9aaff9f8bb8c248812fbabdc4fb9f9e9b80.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;这一功能的推出，极大简化了策略部署流程，提升了安全合规管理的灵活性与可维护性。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;网络隔离白名单配置优化&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;支持跨企业空间（Workspace）查询并选择，所有命名空间（Namespace），打破原有白名单仅限当前空间的限制。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;新增 system 级别白名单，允许关键系统组件（如监控、日志服务）跨隔离环境通信，保障核心服务稳定性。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-cc1c3a34cb41b902a5ed8846344f1ce5a15.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;这一优化特别适用于金融、政务等高合规行业，安全隔离生产环境与测试环境，同时能够保障核心系统无缝通信。&lt;/p&gt; 
&lt;h3&gt;更稳定、更兼容，助力企业高效升级&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;修复 20+ 已知问题，涵盖监控数据采集异常、权限校验逻辑优化、UI 交互体验提升等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;全面兼容 Kubernetes 1.28 及主流云厂商基础设施，确保企业平滑升级。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;KubeSphere 企业版 4.1.3 是您的不二之选&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;智能可观测：从基础设施到应用层，实现数据采集、分析、告警的全链路闭环，快速定位故障。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;策略即代码：通过声明式配置与 GitOps 集成，确保安全策略的版本化、自动化管理。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;安全无死角：网络隔离、资源审计、合规检查多维度护航，满足金融、政务等严监管场景需求。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;开箱即用：40+ 扩展组件、100+ 内置策略模板，快速构建企业级云原生平台。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;KubeSphere 企业版 4.1.3 版本以卓越的性能、强大的功能和灵活的配置，为企业云原生管理带来了全新的体验和价值。选择 KubeSphere 企业版 4.1.3，就是选择更智能、更安全、更高效的云原生未来。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;了解更多&lt;/strong&gt; ：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkubesphere.cloud%2Fdocs%2Fkse%2Frelease-notes%2Fv4.1.3&quot; target=&quot;_blank&quot;&gt;KubeSphere 4.1.3 版本说明&lt;/a&gt; &lt;strong&gt;立即升级&lt;/strong&gt; ：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fm.qingcloud.com%2Fpage%2F23555798970015596%2F4c97b2026cb84249be20d94e71b647cf%3Fcl_track%3Daec50%2F&quot; target=&quot;_blank&quot;&gt;开启云原生新篇章&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;本文由博客一文多发平台 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom&quot; target=&quot;_blank&quot;&gt;OpenWrite&lt;/a&gt; 发布！&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
            <link>https://my.oschina.net/u/4197945/blog/17780777</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/17780777</guid>
            <pubDate>Thu, 27 Feb 2025 10:28:00 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>Kimi 最新模型 k1.6 曝光，编程能力超越 GPT o3</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;全球知名动态基准测试平台&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flivecodebench.github.io%2Fleaderboard.html&quot; target=&quot;_blank&quot;&gt;LiveCodeBench&lt;/a&gt;信息显示，Kimi k1.6 超过 GPT o3mini、o1 等模型，登顶第一。&lt;/p&gt; 
&lt;p&gt;月之暗面研究员 Flood 在社交平台表示，k1.6 是基于 k1.5 做的训练，性能还在提升中。月之暗面联合创始人张予彤在朋友圈表示，「k1.6 还没有发布，但看到 LiveCodeBench 的成绩感到开心，期待智能模型的持续进化。」&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;629&quot; src=&quot;https://static.oschina.net/uploads/space/2025/0227/164947_bfIa_4252687.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/336022</link>
            <guid isPermaLink="false">https://www.oschina.net/news/336022</guid>
            <pubDate>Thu, 27 Feb 2025 08:45:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>雷军辟谣成为中国「新首富」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;来自公众号 &lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;三言 Pro&lt;/span&gt; 的消息称，针对小米创始人雷军身家超过农夫山泉创始人钟睒睒、升任「中国新首富」的消息，雷军在武大校友群回应称：假新闻。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;479&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-40aaebcdd4663e04133c986ae9570e87067.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;目前彭博富豪榜单和福布斯的实时榜单都显示，钟睒睒仍然是中国首富。彭博富豪榜单中国企业家排名，目前钟睒睒以 574 亿美元财富排名第一，马化腾以 565 亿财富排名第二，雷军则以 469 亿元财富排名第三。&lt;/p&gt; 
&lt;p&gt;以 574 亿美元计算，按照当前汇率折算，钟睒睒大约个人财富 4167 亿元。而雷军个人财富为 3404 亿元。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;214&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-f9fcd9f23b5b5d8d316bd5c7cbbe0d5bd32.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;而据福布斯的实时榜单显示，钟睒睒以 564 亿美元财富排名第一，马化腾以 530 亿财富排名第二，张一鸣以 456 亿美元财富排名第三，雷军以 430 亿美元财富排名第四。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;201&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-2b1879f88498691abc1b706e1a6b6faeb2d.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/336018</link>
            <guid isPermaLink="false">https://www.oschina.net/news/336018</guid>
            <pubDate>Thu, 27 Feb 2025 08:25:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>开源是梦想消亡的地方</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;原文：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.trevorlasn.com%2Fblog%2Fopen-source-is-where-dreams-go-to-die&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;Open-source is where dreams go to die&lt;/span&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;&lt;span style=&quot;color:#000000&quot;&gt;作者：Trevor I. Lasn&lt;/span&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;最近，我读了《&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmarcan.st%2F2025%2F02%2Fresigning-as-asahi-linux-project-lead%2F&quot; target=&quot;_blank&quot;&gt;辞去 Asahi Linux 项目负责人&lt;/a&gt;》这篇文章，感触颇深。又一位才华横溢的开发者因维护开源软件的繁重需求而精疲力尽。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FHector_Martin_%28hacker%29&quot; target=&quot;_blank&quot;&gt;Hector Martin (marcan)&lt;/a&gt; 花了数年时间将 Linux 移植到 Apple Silicon 上——这是一项令人难以置信的技术成就——最终却因疲惫和幻灭而选择离开。&lt;/p&gt; 
&lt;p&gt;这样的故事在开源领域以令人沮丧的频率重复上演。充满热情的开发者创造了有价值的东西，免费与世界分享，然后看着他们的礼物变成吞噬他们生活的负担。&lt;/p&gt; 
&lt;p&gt;最初的热爱逐渐转变为无偿的技术支持。用户提交错误报告时，仿佛他们是付费客户，要求立即修复和新功能，而自己却毫无贡献。Asahi Linux 团队在没有文档的情况下逆向工程了 Apple 的复杂硬件——在企业环境中，这一壮举可能需要花费数百万美元——然而，当用户的特定外设无法完美工作时，他们却抱怨不已。&lt;/p&gt; 
&lt;p&gt;开源的经济模式从根本上就是破碎的。大多数维护者从未因他们的努力获得一分钱，尽管他们创造的软件支撑着价值数十亿美元的公司和关键基础设施。少数通过赞助实现财务可持续性的开发者只是极少数，他们是「精英中的精英」，其项目要么达到了极高的知名度，要么满足了关键的行业需求。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;381&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-50ee8f665f3558285784ae210a50aeb9b85.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;span style=&quot;color:#000000&quot;&gt;(Image from XKCD)&lt;/span&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;对于其他人来说，开源变成了一种单向关系：只有付出，几乎没有回报。你牺牲晚上和周末的时间来维护软件，而用户却将你的志愿工作视为理所当然。源源不断的需求逐渐侵蚀了启动项目的热情。最终，维护项目感觉像是一份无薪的第二职业，而不是一种充实的爱好。&lt;/p&gt; 
&lt;p&gt;Marcan 的辞职并不是性格或承诺的失败——而是一个系统可预见的结局，这个系统从维护者身上榨取价值，直到他们崩溃。他的故事应该成为对「免费」软件真实成本的警示。每个开源项目背后都是一个时间和精力有限的人，他们通常在没有报酬或认可的情况下工作。&lt;/p&gt; 
&lt;p&gt;除非我们从根本上改变对开源工作的价值认知和支持方式，这些项目将继续成为梦想破灭的地方——在用户理所当然的要求、不可持续的经济模式以及随之而来的不可避免的倦怠中崩溃。&lt;/p&gt; 
&lt;p&gt;幸运的是，并非一切都是坏的；GitHub 正在通过其赞助计划推动更多的赞助。Sentry 也有一个类似的项目，名为「&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.trevorlasn.com%2Fblog%2Fcan-open-source-pledge-fix-open-source-sustainability&quot; target=&quot;_blank&quot;&gt;Open Source Pledge&lt;/a&gt;」。我希望更多的公司能够效仿并支持开源社区。现在是时候回馈那些让开源成为可能的人了。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/336005</link>
            <guid isPermaLink="false">https://www.oschina.net/news/336005</guid>
            <pubDate>Thu, 27 Feb 2025 07:50:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>如意玲珑应用构建指南（一）：规范体系与配置文件全解析</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;在 Linux 生态中，软件包的分发与管理一直是开发者与用户关注的焦点。如意玲珑（Linyaps）作为一种新兴的容器化应用格式，凭借其轻量化、强隔离、跨发行版兼容等特性，正在为 Linux 应用生态注入新的活力。无论是开发者还是技术爱好者，掌握玲珑应用的构建方法都至关重要。&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;本篇作为&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F0FoyZ9FfJ6wxbzborTNjmQ&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;「如意玲珑应用构建从入门到实战」&lt;/strong&gt;系列的第一章&lt;/a&gt;，将带您系统&lt;strong&gt;梳理&lt;/strong&gt;&lt;strong&gt;玲珑应用构建的核心基础知识&lt;/strong&gt;，涵盖构建流程、规范要求与关键配置文件。通过理解这些基础概念，您将能够为后续的实操教程打下坚实根基，从容应对从代码到安装包的每一步挑战。&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;strong&gt;01 玲珑应用构建基本步骤&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在正式开始构建一个玲珑应用工程前, 我们需要了解一个玲珑应用从资源 (源代码、二进制文件等) 输入到应用安装包导出所经过的基本步骤，来确定我们需要准备哪些必要文件。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;获&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;取构建目标源文件 (开源项目源代码、应用二进制文件等)；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;根据源文件判断玲珑应用构建类型, 选择合适的构建方案；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;准备符合要求的玲珑构建环境；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;按照构建类型及源代码内容定制构建配置文件 linglong.yaml ；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;准备&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;应用所使用的通用类资源，图标以及其他非二进制资源。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;strong&gt;02 玲珑应用构建工程所需材料&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;结合上述的知识，我们可以了解到一个玲珑应用在构建的全过程中，主要涉及到以下的文件:&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;玲珑应用构建工程配置文件 linglong.yaml；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;应用源代码/需要封装的二进制文件等资源；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;非二进制文件等通用资源。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;strong&gt;03&amp;nbsp;玲珑应用遵循的主流规范&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;每一个 Linux 桌面软件包管理方案为了能够保障完整的功能和良好的体验，均需要遵守软件包管理方案提出的各类规范要求以最大限度发挥软件包管理方案的功能并保障应用生态体验。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;如意玲珑也并不总是特立独行, 需要满足一定的规范来保障如意玲珑生态得以持续稳步发展。目前如意玲珑生方案遵守以下主流的规范：&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;Freedesktop XDG 规范；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;玲珑应用目录结构规范；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;玲珑应用构建工程配置文件 linglong.yaml 规范。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1 Freedesktop XDG 规范&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;玲珑应用解决方案遵循 Freedesktop XDG 规范，一款正常的图形化应用应具备图标文件、desktop 文件并符合 Freedesktop XDG 规范；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;玲珑应用图标文件应该根据不同尺寸归类到 $PREFIX/share/icons/hicolor/ 目录下；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;玲珑&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;应用容器中使用 XDG_DATA_DIRS 等变量, 支持读写宿主机中的用户目录；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2 玲珑应用目录结构规范&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;玲珑应用遵循 $PREFIX 路径规则,该变量自动生成, 应用所有相关文件需存放于此目录下, 该目录层级下存在 bin、share 等目录；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;玲珑应用容器中的应用将不被允许读取宿主机中系统目录中的二进制文件、运行库；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;在构建工程中, 构建工程目录将会被映射到玲珑容器中, 挂载为 /project；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;玲珑应用容器中运行库、头文件所在目录将根据运行环境类型而异：&lt;/span&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;foundation 类：在玲珑容器中映射为普通系统路径 /usr/bin、/usr/include 等, 作为基础运行系统环境存在；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;runtime 类：在玲珑容器中映射为 runtime 容器路径 /runtime/usr/bin /、runtime/usr/include 等，作为基础运行系统环境存在。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;默认情况下, 玲珑容器内部的环境变量已自动处理好路径识别问题, 如：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;PATH=szbt@szbt-linyaps23:/project$ echo $PATH
/bin:/usr/bin:/runtime/bin:/opt/apps/com.tencent.wechat/files/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;通用表达为:&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;PATH=szbt@szbt-linyaps23:/project$ echo $PATH
/bin:/usr/bin:/runtime/bin:$PREFIX/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;strong&gt;04&amp;nbsp;玲珑应用构建工程通用资源的规范&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;在玲珑应用构建工程中，不同的资源文件均需要遵循相关规范以确保构建、体验能够满足要求。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;&lt;strong&gt;4.1 icon 图标目录规范&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;依据玲珑遵循的 Freedesktop XDG 规范及玲珑应用目录结构规范，图标根据不同尺寸放置在对应的目录中。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;主流的非矢量图标尺寸有: 16x16、24x24、32x32、48x48、128x128、256x256、512x512。为保障图标在系统中能够获得较佳的体验效果, 因此需要至少一个尺寸不小于 128x128 的非矢量图标文件, 矢量图标则不存在该限制。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;因此, 一款玲珑应用安装目录中, icons 图标目录应为以下示例，其中&amp;nbsp;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;scalable 目录用于放置矢量图标文件, 一般为 .svg 格式。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$PREFIX/share/icons/hicolor/16x16/apps
$PREFIX/share/icons/hicolor/24x24/apps
$PREFIX/share/icons/hicolor/32x32/apps
$PREFIX/share/icons/hicolor/48x48/apps
$PREFIX/share/icons/hicolor/128x128/apps
$PREFIX/share/icons/hicolor/256x256/apps
$PREFIX/share/icons/hicolor/512x512/apps
$PREFIX/share/icons/hicolor/scalable/apps&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;假设你的玲珑应用同时提供尺寸为 128x128 的非矢量图标文件 linyaps-app-demo.png 和 128x128 的矢量图标文件 linyaps-app-demo.svg，在玲珑容器中应当表现为以下状态：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$PREFIX/share/icons/hicolor/128x128/apps/linyaps-app-demo.png
$PREFIX/share/icons/hicolor/scalable/apps/linyaps-app-demo.svg&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;注意，为了避免图标冲突被覆盖，图标文件名请使用应用唯一英文名称或玲珑应用 id。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;&lt;strong&gt;4.2 desktop 文件规范&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;玲珑应用兼容大部分符合 Freedesktop XDG 规范的 desktop 启动文件, 其中有以下字段需要额外注意：&lt;/span&gt;&lt;/p&gt; 
&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; style=&quot;-webkit-tap-highlight-color:transparent; -webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; box-sizing:border-box !important; color:rgba(0, 0, 0, 0.9); display:table; font-family:&amp;quot;PingFang SC&amp;quot;,system-ui,-apple-system,BlinkMacSystemFont,&amp;quot;Helvetica Neue&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei UI&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,Arial,sans-serif; font-size:17px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; height:123px; letter-spacing:0.544px; margin:0px 0px 10px; max-width:100%; orphans:2; outline:0px; overflow-wrap:break-word !important; padding:0px; text-align:justify; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:677px; word-spacing:0px&quot;&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;background-color:#4472c4; border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:20.35pt; text-align:center; vertical-align:middle&quot;&gt;&lt;span&gt;字段&lt;/span&gt;&lt;/td&gt; 
   &lt;td style=&quot;background-color:#4472c4; border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:20.35pt; text-align:center; vertical-align:middle&quot;&gt;&lt;span&gt;值要求&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:36pt; text-align:center; vertical-align:middle&quot;&gt;Exec&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:36pt; vertical-align:middle&quot;&gt;该值用于设置点击此 desktop 文件时执行的指令, 需要与 linglong.yaml 中的 command 值保持一致。&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:36pt; text-align:center; vertical-align:middle&quot;&gt;Icon&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:36pt; vertical-align:middle&quot;&gt;该值用于设置该 desktop 文件显示的应用图标, 需要与 icons 图标目录规范中的图标文件名一致, 此值不需要文件名后缀。&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;因此, 一个符合玲珑应用规范的 desktop 文件可以参考：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;org.qbittorrent.qBittorrent.desktop
[Desktop Entry]
Categories=Network;FileTransfer;P2P;Qt;
Exec=/opt/apps/org.qbittorrent.qBittorrent/files/bin/qbittorrent %U
Comment=Download and share files over BitTorrent
Icon=qbittorrent
MimeType=application/x-bittorrent;x-scheme-handler/magnet;
Name=qBittorrent
Type=Application
StartupWMClass=qbittorrent
Keywords=bittorrent;torrent;magnet;download;p2p;

StartupNotify=true
Terminal=false&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;strong&gt;05&amp;nbsp;玲珑应用构建工程 linglong.yaml 规范&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;正如其他传统包管理套件一样, 手动创建一个玲珑应用构建工程需要设置构建规则文件&amp;nbsp; linglong.yaml，在构建规则中, 则根据用途划分为&lt;strong&gt;全局字段&lt;/strong&gt;及&lt;strong&gt;定制化字段&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;请注意，案例中 linglong.yaml 正文内所有空格符号、占位符均为有效字符, 请勿删除或变更格式。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;&lt;strong&gt;5.1 全局字段规范&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;在 linglong.yaml 中, 对于不受构建类型影响的字段我们称为全局字段, 主要有以下参考的规范。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;1. 一个可以正常开始构建工程的 linglong.yaml&amp;nbsp;应包含以下的关键部分:&lt;/span&gt;&lt;/p&gt; 
&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; style=&quot;-webkit-tap-highlight-color:transparent; -webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; box-sizing:border-box !important; color:#3e3e3e; display:table; font-family:&amp;quot;PingFang SC&amp;quot;,system-ui,-apple-system,BlinkMacSystemFont,&amp;quot;Helvetica Neue&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei UI&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,Arial,sans-serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; height:230px; letter-spacing:0.544px; margin:0px 0px 10px; max-width:100%; orphans:2; outline:0px; overflow-wrap:break-word !important; padding:0px; text-align:justify; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:677px; word-spacing:0px&quot;&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;background-color:#4472c4; border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;模块&lt;/td&gt; 
   &lt;td style=&quot;background-color:#4472c4; border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;解释&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;version&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; vertical-align:middle&quot;&gt;构建工程版本号&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;package&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; vertical-align:middle&quot;&gt;玲珑应用基本信息&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;base&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; vertical-align:middle&quot;&gt;玲珑应用容器基础环境及版本设置, 基础环境中包含了部分基础运行库&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:36pt; text-align:center; vertical-align:middle&quot;&gt;runtime&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:36pt; vertical-align:middle&quot;&gt;玲珑应用运行库 runtime 及版本设置, 当 base 中的基础运行库满足程序运行要求时, 此模块可删除&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;command&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; vertical-align:middle&quot;&gt;玲珑应用容器启动时执行的命令, 与 desktop 文件的 Exec 字段内容一致&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;sources&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; vertical-align:middle&quot;&gt;玲珑应用构建工程源文件类型&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;build&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; vertical-align:middle&quot;&gt;玲珑应用构建工程将要执行的构建规则&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;package&amp;nbsp;模块中存在数个子模块:&lt;/span&gt;&lt;/p&gt; 
&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; style=&quot;-webkit-tap-highlight-color:transparent; border-collapse:collapse; box-sizing:border-box !important; display:table; height:156px; margin:0px 0px 10px; max-width:100%; outline:0px; overflow-wrap:break-word !important; padding:0px; width:677px&quot;&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;background-color:#4472c4; border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;子模块&lt;/td&gt; 
   &lt;td style=&quot;background-color:#4472c4; border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;解释&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;id&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; vertical-align:middle&quot;&gt;玲珑应用 id/包名&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;name&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; vertical-align:middle&quot;&gt;玲珑应用名称, 使用英文名称&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;version&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; vertical-align:middle&quot;&gt;玲珑应用版本号&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;kind&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; vertical-align:middle&quot;&gt;玲珑应用类型, 默认为&amp;nbsp;&lt;span&gt;app&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;description&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; vertical-align:middle&quot;&gt;玲珑应用描述&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;2. 玲珑应用遵循 $PREFIX 路径规则，该变量自动生成，应用所有相关文件需存放于此目录下. 构建规则中若有需要涉及安装文件的操作均需要安装到 $PREFIX 路径下。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;其中&amp;nbsp;$PREFIX 变量名即为填写的实际内容，&lt;strong&gt;请勿使用绝对路径或任何具有绝对值作用的内容代替&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;3. 玲珑应用目前遵循&lt;strong&gt;四位数字&lt;/strong&gt;的版本号命名规则，不符合规则无法启动构建工程&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;4. base、runtime 版本支持自动匹配最新版本尾号，版本号可以仅填写版本号的前三位数字，如：&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;当 base org.deepin.foundation 同时提供 23.0.0.28、23.0.0.29, 若 linglong.yaml 中仅填写：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;base: org.deepin.foundation/23.0.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;那么在启动玲珑应用构建工程时, 将会默认采用最高版本号的 23.0.0.29。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;5. 玲珑应用构建工程配置文件目前不直接兼容其他包构建工具的配置文件，需要根据构建工程配置文件案例来进行适配修改。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;详细可参考：&lt;/span&gt;&lt;span style=&quot;color:#4f81bd&quot;&gt;&lt;span style=&quot;color:#4f81bd&quot;&gt;https://linyaps.org.cn/guide/start/whatis.html&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;&lt;strong&gt;5.2 定制化字段&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;根据玲珑应用构建工程源文件类型, 又可将玲珑应用构建工程划分为&lt;strong&gt;本地文件文件构建&lt;/strong&gt;&amp;nbsp;和&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;git 源码仓库拉取构建&lt;/strong&gt;，不同类型则需要填写不同的 linglong.yaml。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;玲珑应用构建工程源文件类型 sources 主要支持这几种类型: git、local、file、archive。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;完整说明可参考：&lt;/span&gt;&lt;span style=&quot;color:#4f81bd&quot;&gt;https://linyaps.org.cn/guide/start/whatis.html&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;strong&gt;5.2.1&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;git 拉取源码编译模式&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;当玲珑应用构建工程需要通过 git 拉取开源项目仓库资源到本地进行构建时, 此事 sources 应当设置为 git 类型, 并根据要求填写 linglong.yaml。并需要根据规范编写 sources 与 build 模块。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;1. sources&amp;nbsp;示例&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;sources:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  - kind: git&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;    url: https://githubfast.com/qbittorrent/qBittorrent.git&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;    version: release-4.6.7&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;    commit: 839bc696d066aca34ebd994ee1673c4b2d5afd7b&lt;/span&gt;&lt;/code&gt;
&lt;code&gt;&lt;span&gt;  - kind: git&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;    url: https://githubfast.com/arvidn/libtorrent.git&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;    version: v2.0.9&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;    commit: 4b4003d0fdc09a257a0841ad965b22533ed87a0d&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; style=&quot;-webkit-tap-highlight-color:transparent; -webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; box-sizing:border-box !important; color:rgba(0, 0, 0, 0.9); display:table; font-family:&amp;quot;PingFang SC&amp;quot;,system-ui,-apple-system,BlinkMacSystemFont,&amp;quot;Helvetica Neue&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei UI&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,Arial,sans-serif; font-size:17px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; height:196px; letter-spacing:0.544px; margin:0px 0px 10px; max-width:100%; orphans:2; outline:0px; overflow-wrap:break-word !important; padding:0px; text-align:justify; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:677px; word-spacing:0px&quot;&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;background-color:#4472c4; border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;名称&lt;/td&gt; 
   &lt;td style=&quot;background-color:#4472c4; border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;描述&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;kind&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; vertical-align:middle&quot;&gt;源文件类型&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:36pt; text-align:center; vertical-align:middle&quot;&gt;url&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:36pt; vertical-align:middle&quot;&gt;需要通过 git 拉取的源代码仓库地址, 该仓库需要支持 git 功能. 当网络状态不佳时, 可采用镜像地址代替&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;version&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; vertical-align:middle&quot;&gt;指定源代码仓库的版本号, 即 tag 标签, 或拉取主线 master&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:52.5pt; text-align:center; vertical-align:middle&quot;&gt;commit&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:52.5pt; vertical-align:middle&quot;&gt;根据该仓库 commit 变动历史拉取源码, 此处填入 commit 对应的值, 将会应用该仓库截止本 commit 的所有变更. *此字段优先级高于 version, 请勿填入 version 合并时间之后的任何 commit&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;该模式支持同时添加多个 git 仓库作为 sources 拉取。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;2. build&amp;nbsp;示例&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;build&lt;/span&gt;: &lt;span style=&quot;color:#dd1144&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  &lt;span&gt;mkdir&lt;/span&gt; &lt;span style=&quot;color:#dd1144&quot;&gt;-p ${PREFIX}/bin/ ${PREFIX}/share/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;em&gt;  ##Apply patch for qBittorrent&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  &lt;span&gt;cd&lt;/span&gt; &lt;span style=&quot;color:#dd1144&quot;&gt;/project/linglong/sources/qBittorrent.git&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  &lt;span&gt;git&lt;/span&gt; &lt;span style=&quot;color:#dd1144&quot;&gt;apply -v /project/patches/linyaps-qBittorrent-4.6.7-szbt2.patch&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;此模块为构建规则正文，路径遵守玲珑应用目录结构规范。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;在 sources 拉取到本地后, 仓库文件将会存放在 /project/linglong/sources 目录中，此时不同仓库目录以 xxx.git 命名；支持运用 git patch 功能对源代码进行便捷维护。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;&lt;strong&gt;5.2.2&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;strong&gt;本地资源操作模式&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;当玲珑应用构建工程需要对构建目录中的文件操作时，此时 kind 应当设置为 local 类型, 并根据要求填写 linglong.yaml，此时需要根据规范编写 sources 与 build 模块。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;1. sources&amp;nbsp;示例&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;sources:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;source:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  - kind: local&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;    name: &quot;qBittorrent&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; style=&quot;-webkit-tap-highlight-color:transparent; -webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; box-sizing:border-box !important; color:rgba(0, 0, 0, 0.9); display:table; font-family:&amp;quot;PingFang SC&amp;quot;,system-ui,-apple-system,BlinkMacSystemFont,&amp;quot;Helvetica Neue&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei UI&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,Arial,sans-serif; font-size:17px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; height:78px; letter-spacing:0.544px; margin:0px 0px 10px; max-width:100%; orphans:2; outline:0px; overflow-wrap:break-word !important; padding:0px; text-align:justify; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:677px; word-spacing:0px&quot;&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;background-color:#4472c4; border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;名称&lt;/td&gt; 
   &lt;td style=&quot;background-color:#4472c4; border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;描述&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;kind&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; vertical-align:middle&quot;&gt;源文件类型&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; text-align:center; vertical-align:middle&quot;&gt;name&lt;/td&gt; 
   &lt;td style=&quot;border-color:#9bc2e6; border-style:solid; border-width:0.5pt; height:19.5pt; vertical-align:middle&quot;&gt;源文件名称标识, 不具备实际用途&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;注意，当 kind 应当设置为 local 类型时, 构建工程将不会对任何源文件进行操作。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;2. build&amp;nbsp;示例&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;build: |&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  ##Build main&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  mkdir /project/src/qBittorrent-release-4.6.7-szbt2/build&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  cd /project/src/qBittorrent-release-4.6.7-szbt2/build&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  cmake -DCMAKE_BUILD_TYPE=Release \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;        -DCMAKE_INSTALL_PREFIX=$PREFIX ..&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  make -j$(nproc)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  make install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;此模块为构建规则正文，路径遵守玲珑应用目录结构规范，此时 build 规则支持多种写法以模拟人为操作。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;注意需要确保此构建规则所有步骤均可以正常被执行, 否则将会中断当次构建任务。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;5.2.3&amp;nbsp;容器内部手动操作模式&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;若计划直接进入玲珑容器手动操作而不是通过构建规则文件 linglong.yaml,那么应该参考，本地资源操作模式&amp;nbsp;填写 linglong.yaml&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;sources 部分写法与本地资源操作模式一致；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;color:#000000; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;由于使用手动操作, 因此不需要完整且可以正常被执行的 build 规则, 此时 linglong.yaml 用于生成符合描述的玲珑容器而不是执行所有任务，具体操作将在后续关于容器内部构建文件的案例中详细展示。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;以上便是玲珑应用构建的一些基础知识，相信您已对玲珑应用构建的规范、目录结构、资源配置及关键文件（如 linglong.yaml）有了较全面的认知。这些知识不仅是构建流程的「地图」，更是规避常见陷阱的「指南针」。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#000000; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F0FoyZ9FfJ6wxbzborTNjmQ&quot; target=&quot;_blank&quot;&gt;在接下来的系列推文中，我们将&lt;strong&gt;深入实战环节&lt;/strong&gt;&lt;/a&gt;。准备好您的开发环境，下一站，我们将带大家&lt;strong&gt;在玲珑容器中编译基于 Qt5 的开源应用！&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/336001</link>
            <guid isPermaLink="false">https://www.oschina.net/news/336001</guid>
            <pubDate>Thu, 27 Feb 2025 07:34:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>IBM Granite 3.2 系列模型开源发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;IBM &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ibm.com%2Fnew%2Fannouncements%2Fibm-granite-3-2-open-source-reasoning-and-vision&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;推出最新的 Granite 3.2 系列模型，依旧在 Apache 2.0 许可下开源。「以实验推理功能和首个官方视觉语言模型（VLM）为首，Granite 3.2 为 Granite 系列引入了多项重要的新功能。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;主要信息概览：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;新款 &lt;strong&gt;Granite 3.2 8B Instruct 和 Granite 3.2 2B Instruct&lt;/strong&gt; 提供实验性的思路链推理功能，可显著提高其遵循复杂指令的能力，同时不会牺牲整体性能。推理过程可以打开或关闭，从而高效利用计算资源。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;与 IBM 的推理扩展技术相结合，Granite 3.2 8B Instruct 的扩展思维过程使其能够达到或超越更大模型的推理性能，包括 GPT-4o 和 Claude 3.5 Sonnet。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;新开发的多模式模型&lt;strong&gt;Granite Vision 3.2 2B&lt;/strong&gt;特别注重文档理解，其性能突出，可与尺寸为其 5 倍的开放模型相媲美。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;Granite Timeseries 模型系列的最新成员&lt;strong&gt;Granite-Timeseries-TTM-R2.1&lt;/strong&gt;扩展了 TTM 的预测能力，除了之前的 TTM 模型已经支持的分钟和小时预测任务之外，还包含每日和每周预测。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;为 &lt;strong&gt;Granite Guardian 3.2&lt;/strong&gt; 引入了新的模型大小，其中包括从 3B-A800M MoE 语言模型衍生的变体。新模型在性能损失最小的情况下提高了效率。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;Granite Embedding 模型系列现在包括学习稀疏嵌入的能力。Granite -Embedding-30M-Sparse 可在不同的资源和延迟预算之间平衡效率和可扩展性。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height=&quot;247&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-734609651e706f86443082405306c2a0613.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;219&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5861924d6216e8e1bd964342a61ddfaec61.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;243&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-01d6625e86edda352221a94d16367faf0c4.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;更多详情可&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ibm.com%2Fnew%2Fannouncements%2Fibm-granite-3-2-open-source-reasoning-and-vision&quot; target=&quot;_blank&quot;&gt;查看官方公告&lt;/a&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/335996/ibm-granite-3-2</link>
            <guid isPermaLink="false">https://www.oschina.net/news/335996/ibm-granite-3-2</guid>
            <pubDate>Thu, 27 Feb 2025 07:16:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>特斯拉国内 FSD 和美国版 FSD 有什么区别？</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;特斯拉中国日前宣布，2024.45.32.12 已开始分批次推送，城市道路 Autopilot 自动辅助驾驶功能上线，这也意味着特斯拉 FSD 正式落地中国。&lt;/p&gt; 
&lt;p&gt;不过，已经升级过的车主经过实测，国内版的 FSD 只能算是具备领航功能的高阶智驾，而这又与美版 FSD 有多大区别呢？汽车之家为此制作了一图说明。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-473e140ae45657efcec09d140953dcbee28.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;从定位上来看，特斯拉中国的辅助驾驶系统，允许在部分结构化的公共道路上开启智驾，在城中村、夜市街此类场景可用度不高；而&lt;strong&gt;美国版 FSD 在车位设定目的地后支持一键开启智驾&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;同时，美版 FSD 具备自动找车位能力，中国版的则不具备。&lt;/p&gt; 
&lt;p&gt;FSD 的可用度方面，中国版接管率较高，偏向辅助驾驶系统；美国版的较低，更接近完全自动驾驶。&lt;/p&gt; 
&lt;p&gt;在车辆的硬件支持上，中国版 FSD 仅支持 HW4.0 车机芯片，而美版则支持 HW2.5 及以上版本，适用车型范围更广。&lt;/p&gt; 
&lt;p&gt;最后，价格方面，中国版 FSD 售价 6.4 万元，美版为 8000 美元（约合人民币 5.8 万元）。&lt;/p&gt; 
&lt;p&gt;对比来看，美国版的 FSD 系统，不仅售价比中国版便宜，而且支持车型范围更广，功能也更完善、好用。&lt;/p&gt; 
&lt;p&gt;不过，有报道指出，当前特斯拉给车主推送的辅助驾驶功能属于「残血版」FSD，而「满血版」系统当前正在国内进行测试优化，预计 3、4 月份开启推送。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;相关阅读&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/335957&quot; target=&quot;news&quot;&gt;特斯拉 FSD 国内训练数据合规，但仍处于 L2 级自动驾驶级别&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/335792&quot; target=&quot;news&quot;&gt;特斯拉 FSD 闯红灯，马斯克回应：我们用了中国互联网上的公开视频数据来训练&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/335712&quot; target=&quot;news&quot;&gt;特斯拉 FSD 部分能力在中国已推送，命名为「FSD 智能辅助驾驶功能」&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/335994</link>
            <guid isPermaLink="false">https://www.oschina.net/news/335994</guid>
            <pubDate>Thu, 27 Feb 2025 07:11:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>韩国数据中心建设一再迟滞</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;科技日报首尔 2 月 26 日电（记者薛严）韩国数据中心协会近日表示，2021 年至 2024 年间，共有 16 个已公开宣布的数据中心项目被暂停或取消。在首尔和京畿道，受民间投诉影响，从获得建筑许可到开始施工的时间被一再延长，部分建设项目被迫下马。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;全球云计算代表企业之一亚马逊云计算服务曾于 2023 年 10 月宣布，将投资 7.85 万亿韩元，在韩建设首个数据中心。作为该投资计划的第一步，亚马逊在仁川西区工业园区开建一个大型数据中心，业务规模超过 5000 亿韩元，需要约 100 兆瓦电力。目前距离宣布投资已过去一年零四个月，该数据中心建设仍处于起步阶段。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;而亚马逊云计算服务在马来西亚的数据中心于 2023 年 3 月宣布，2024 年 8 月即竣工开放；在印度和澳大利亚的数据中心从宣布到正式开放用了约两年时间；在泰国的数据中心于 2022 年 10 月宣布，2025 年 1 月投入运营。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;韩国业界研判，由于韩国独特的民事诉讼风险，全球大型科技公司今后可能不会考虑将该国作为人工智能数据中心建设地。三星证券在近期的报告中指出，曾有某全球云服务提供商计划将韩国打造为人工智能数据中心，但最近放弃了该计划，正转向日本、印度、马来西亚等国。由于包括亚马逊和微软在内的大型科技公司十分重视当地情绪和舆论风险，韩国业界担心，他们会在人工智能时代的尖端技术基础设施建设方面明显落后。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
            <link>https://www.oschina.net/news/335990</link>
            <guid isPermaLink="false">https://www.oschina.net/news/335990</guid>
            <pubDate>Thu, 27 Feb 2025 06:54:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
    </channel>
</rss>