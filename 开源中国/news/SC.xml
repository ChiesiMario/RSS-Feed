<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-最新资讯</title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://rsshub.app/oschina/news" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-最新资讯 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Fri, 06 Sep 2024 15:20:42 GMT</lastBuildDate>
        <ttl>180</ttl>
        <item>
            <title>开源日报 | Ilya 融资 10 亿幕后大佬；VS Code 1.93；开源大模型新王干翻 GPT-4o；与「苹果税」的博弈；用 Mac 训练机器人叠衣服</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.9.6&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/310676&quot;&gt;苹果批准了 iOS 版微信本周提交的更新&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;9 月 6 日，据彭博社报道，苹果已经批准了腾讯本周提交的 iOS 系统微信更新，为双方就&lt;strong&gt;应用内购费用&lt;/strong&gt;问题的持续谈判赢得了更多时间。在此之前，App Store 上的微信已经有两个多月没有发布更新。&lt;/p&gt; 
   &lt;blockquote&gt; 
    &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-cbe924a36238e3f21abac1446e659d7022c.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
    &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2024-09-06%2Fapple-clears-wechat-for-iphone-16-as-talks-persist-over-app-fees&quot; target=&quot;_blank&quot;&gt;https://www.bloomberg.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
   &lt;/blockquote&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;据知情人士透露，苹果本周批准了 iOS 版微信更新，新版本在朋友圈和直播功能方面进行了优化。这一决定有望平息中国市场对苹果与腾讯就应用商店费用争议可能升级的猜测。&lt;/p&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;双方分歧的焦点在于微信小游戏平台。报道称苹果要求腾讯屏蔽小游戏中的外部支付链接，并停止开发者利用平台内置消息功能引导用户使用其他支付渠道，从而保证能够抽成 30%。&lt;/p&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;苹果还要求腾讯完全禁用游戏内消息传递，但腾讯以过于激烈为由拒绝了这一要求。&lt;/p&gt; 
   &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;知情人士称，腾讯仍在与苹果讨论后续更新的潜在方案。苹果代表拒绝置评，而腾讯则没有回复通过电子邮件发送的询问。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/310721/vs-code-1-93-released&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/310721/vs-code-1-93-released&quot;&gt; 1.93&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-c70f6188249bdf69402000e2242734552aa.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#245bdb&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/310699/kde-report-2023&quot;&gt;KDE 发布 2023 年度报告：再次亏损&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;KDE 是一个国际技术团队，产品包括适用于 Linux 和 UNIX 平台的现代桌面系统、全面的办公生产力和群件套件以及数百种软件，涵盖互联网和网络应用程序、多媒体、娱乐、教育、图形和软件开发等多个类别。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;报告指出，KDE 在 2023 年的工作重点主要集中在构建 Plasma 6 方面，完成了很多出色的软件开发工作。在 5 月份的一场会议中，Plasma 团队讨论了向 KF6 的过渡及其对 KDE 框架内依赖管理的影响。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;其中一个重大变化是重组了 colour scheme classes，以减少对&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;Qt::Widgets&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;的不必要依赖，特别是对于基于 QML 的移动应用程序。这种重组提高了效率并减少了软件包的大小 -- 尤其是对于 Android APK 而言，它们可以占到软件包总大小的 20-25%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;但值得一提的是，KDE 在&amp;nbsp;2023 年的年收入仍略低于预期；总成本高于前几年，主要原因是人员费用和活动相关费用。细分来看，企业支持和个人捐款仍然是其重要的收入来源，其中个人捐款增长尤为显著。但一些传统来源（如 Google Summer of Code）的收入略有下降。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5cf262499217ee79a5e626a9630aa1af7ba.webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1684197391%2FOvAy0vAZq&quot; target=&quot;_blank&quot;&gt;这个开源项目过于抽象&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;p&gt;Open and Shut 是一款通过打开、关闭笔记本电脑来发送莫斯电码的开源工具。真的就是打开笔记本、合上笔记本来发送一次信号，组合起来成了莫斯电码，太过于抽象了。&lt;/p&gt; 
        &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fveggiedefender%2Fopen-and-shut&quot; target=&quot;_blank&quot;&gt;https://github.com/veggiedefender/open-and-shut&lt;/a&gt;&lt;/p&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;&lt;span&gt;- 微博&amp;nbsp;&lt;strong&gt;小众软件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FGnrEPlKt-8CPhrMcwGRfaA&quot; target=&quot;_blank&quot;&gt;用 Mac 训练个机器人叠衣服&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;p&gt;该教程主要基于一种开源、价格友好的机器人套件 Koch v1.1 编写，不过也可以通过改变配置轻松适应各种类型的机器人。&lt;/p&gt; 
   &lt;p&gt;Koch v1.1 由一个主导臂和一个从动臂组成，每个臂有 6 个电机。它可以和一个或多个摄像头一起工作来记录场景，这些摄像头被用作机器人的视觉传感器。在数据采集阶段，你将通过移动主导臂来控制从动臂。这个过程被称为「遥操作」。这种技术用于收集机器人轨迹。之后，你将训练一个神经网络来模仿这些轨迹，并部署网络以使你的机器人能够自主操作。&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微信&amp;nbsp;&lt;strong&gt;&lt;span&gt;机器之心&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FDY2R77q6uzsMMsdGc6MLcw&quot; target=&quot;_blank&quot;&gt;批准 iPhone16 上架微信，与「苹果税」的博弈并非不可能&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;腾讯和字节跳动之所以「逃」税，还有一部分原因是因为苹果在世界各地的抽成并不相同。举个例子：&lt;/p&gt; 
    &lt;p&gt;在美国本土，苹果对企业的苹果税为 27%，对小工作室或独立开发者则是 12%；而对刚刚正面硬刚苹果并取得胜利的欧盟地区，苹果对企业的税率标准是 17%，对小工作室或独立开发者的则是 10%；结果到了中国大陆地区，这个标准变成了大企业 30%，小工作室或独立开发者为 15%。&lt;/p&gt; 
    &lt;p&gt;同时，在欧盟、美国和韩国等地区，苹果也是允许应用内通过链接的形式引导用户在应用之外完成交易的，但在中国大陆却不允许。&lt;/p&gt; 
    &lt;p&gt;按理说应用上架 App Store 后苹果进行抽成其实无可厚非，但与安卓不同的是，这个「苹果税」损害的并不是开发商的利益，而是用户。&lt;/p&gt; 
    &lt;p style=&quot;text-align:right&quot;&gt;- 微信&amp;nbsp;&lt;strong&gt;&lt;span&gt;不客观实验室&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8cczWIhhr62&quot; target=&quot;_blank&quot;&gt;Ilya 融资 10 亿幕后大佬：复刻 OpenAI 创始人，21 岁当苹果 AI 总监，手握千卡算力集群&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;OpenAI 前首席科学家伊尔亚·苏茨科夫（Ilya Sutskever）的创企安全超级智能（SSI）在成立 2 个多月、仅有 10 名员工的情况下，一举拿下 10 亿美元融资，估值冲破 50 亿美元（折合约 356 亿元人民币）。&lt;/p&gt; 
  &lt;p&gt;为何 SSI 能以如此之快的速度，拿下大额融资？除了苏茨科夫在 AI 圈的影响力之外，SSI 另一位拥有丰富创投经验的神秘联合创始人丹尼尔·格罗斯（Daniel Gross）也做出了重要贡献。&lt;/p&gt; 
  &lt;p&gt;今年 6 月，格罗斯与苏茨科夫和另一位从 OpenAI 出走的研究科学家丹尼尔·列维（Daniel Levy）共同创立 SSI，苏茨科夫为首席科学家，列维为主要科学家，格罗斯则负责算力、筹款和人才引进。&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;智东西&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8cdKl09a9oK&quot; target=&quot;_blank&quot;&gt;阿斯麦 CEO：美国以国家安全之名对华设限，但如今更像「出于经济动机」&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;据英国路透社 9 月 4 日报道，荷兰半导体设备制造商阿斯麦公司首席执行官克里斯托夫·富凯当天在纽约花旗银行的会议上表示，随着时间推移，美国以「国家安全」之名实施的对华出口管制变得更像是「出于经济动机」。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「要证明这事关国家安全，越来越难了。」富凯预测，未来反对美国管制的声音将越来越多。「很可能会有更大的限制压力，但同时也会出现更多反对声」，在他看来，企业希望能达到一个平衡，因为做生意需要「一点确定性，一点稳定性」。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;今年 4 月，富凯从彼得·温宁克手中接棒，成为阿斯麦的掌舵人。多年来，他一直保持低调，很少公开谈论地缘政治问题。从几次公开表态中可以看出，富凯倡导全球技术合作，多次对半导体产业脱钩断链发出警告。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;观察者网&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaijiahao.baidu.com%2Fs%3Fid%3D1808781410725306968%26wfr%3Dspider%26for%3Dpc&quot; target=&quot;_blank&quot;&gt;谷歌大手笔挖走创始人后 Character.AI 上演裁员风波&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;color:#222222; margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;在科技行业的瞬息万变中，初创公司的命运往往充满了不确定性。据 The Information 报道，与谷歌达成重大交易不久后，美国人工智能创业公司 Character.AI 在当地时间 8 月 29 日进行了至少 5% 的裁员，主要涉及营销和招聘岗位。在裁员前，Character.AI 拥有约 120 名员工。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;科创板日报&lt;/strong&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.21jingji.com%2Farticle%2F20240906%2Fherald%2F8a3efa4b532c02da268377a8fe276ce7.html&quot; target=&quot;_blank&quot;&gt;Runway 突然删库跑路之后仍「岁月静好」，信任正在被侵蚀&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;Runway 将 HuggingFace 和 GitHub 平台上的资源全部移除，尤其是将 Stable Diffusion v1.5 删除，不仅对依靠这个模型进行项目研究的人员和社区造成了影响，还引发了关于开源人工智能资源的可靠性和稳定性的问题，可能会侵蚀对人工智能开发协作性质的信任。&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;此外，发布者的突然跑路，也令 HuggingFace 和 GitHub 这类人工智能模型共享和协作主要平台面临直接挑战。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;21 世纪经济报道&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8ceasbSi0Mq&quot; target=&quot;_blank&quot;&gt;对话帆软：大模型不是 BI 的「万能药」，BI 也不是大模型的「低垂果实」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;「BI 领域肯定不止于大模型，还涉及到数据连接、图表渲染、计算引擎、权限管理等各种基础能力，没有大模型之前，BI 也在用机器学习去解决一些问题，只是大模型是一个增强版的 AI 技术。另外，如果底层数据脏乱差，AI 也很难用起来，数据治理很重要，表面是大模型，冰山之下是数据治理。」翁林君说。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#222222&quot;&gt;钛媒体&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapp.myzaker.com%2Fnews%2Farticle.php%3Fpk%3D66da9388b15ec0654c707fa9&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#2980b9&quot;&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;开源大模型新王干翻 GPT-4o，新技术可纠正自己幻觉，数学 99.2 分刷爆测试集&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;开源大模型王座突然易主，居然来自一家小创业团队，瞬间引爆业界。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;新模型名为 Reflection 70B，使用一种全新训练技术，让 AI 学会在推理过程中纠正自己的错误和幻觉。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;量子位&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;开源项目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fweggli-rs%2Fweggli&quot; target=&quot;_blank&quot;&gt;weggli-rs/weggli&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;343&quot; src=&quot;https://static.oschina.net/uploads/space/2021/1012/170634_nJ1c_4252687.gif&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fweggli-rs%2Fweggli&quot; target=&quot;_blank&quot;&gt;https://github.com/weggli-rs/weggli&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#24292f&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;weggli 是一个快速且强大的 C 和 C++ 代码库语义搜索工具。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#24292f&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffffff&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;weggli 根据用户提供的查询对抽象语法树执行模式匹配。它的查询语言类似于 C 和 C++ 代码，可以轻松将有趣的代码模式转换为查询。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/u/4662964/blog/15526100&quot; target=&quot;_blank&quot;&gt;HarmonyOS ArkUI 工程框架解析&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;通过 HarmonyOS Developer 官网我们可以了解 ArkUI 是一套声明式开放框架，开发者可以基于 ArkTS 语法设计一套极简的 DSL 以及丰富的 UI 组件完成跨设备的界面开发。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;那么 ArkUI 是如何实现这一套声明式开放框架的呢？本文将通过分析开源的 HarmonyOS 渲染引擎 AceEngine 代码以及配套工程能力来进行详细解读。&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img height=&quot;208&quot; src=&quot;https://oscimg.oschina.net/oscnet/e1c4a87a-eec8-4a93-aa63-a7e3a2d72b2e.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FjjJiGjA_jCBp3HLSiCqsng&quot; target=&quot;_blank&quot;&gt;苹果批准了 iOS 版微信本周提交的更新&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：微信需要更新吗，每次都是解决了一些已知问题&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：一人一个赞，坐等后续两家撕逼&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：多大点事，苹果用户多看点广告，这个苹果税不就抵了嘛&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：贼 t 目，iOS 微信消息总是延迟&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：建议微信要硬气！&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：再更新，微信就能玩黑神话了。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：苹果你这次不硬起来，我以后都不买苹果的产品了！我肯定天天骂苹果没骨气！&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：建议微信学习 epic，硬扛到底，大不了下架呗，反正我可以不用&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2F%E5%BE%AE%E8%BD%AF%E5%9C%A8Windows+11%E9%9B%86%E6%88%90%E4%B8%AD%E5%9B%BD%E5%BC%80%E6%BA%90%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%9E%B6%E6%9E%84RWKV%E3%80%81%E8%A3%85%E6%9C%BA%E9%87%8F%E8%BF%915%E4%BA%BF&quot; target=&quot;_blank&quot;&gt;微软在 Windows 11 集成中国开源大模型架构 RWKV、装机量近 5 亿&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：中国的大模型研究现在介于第一梯队和第二梯队之间，第一梯队只有一个就是美国。windows 集成它也是因为中文语料环境占优势&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：rwkv 主要是英文语料，事实上远没有国内大模型中文语料来的多。早期 rwkv 甚至只支持英文&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：微软给别人付费了吗，给授权费了没有。&lt;/span&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：如果这个开源项目没有商业授权协议，只有开源协议，那微软不需要给他们付任何的钱。&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：这个太牛了，我从版本 3 就开始用，真是见证了牛逼的过程，这可是一个个人的项目啊&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：微软为什么不用它投资的 OpenAI 呢&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：可我还是解决不了 rwkv 复读机问题，中文比英文严重&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：可能微软解决了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：竟，如此🐂🍺&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fq0LXvMeaVi0yMVz4_WVA8w&quot; target=&quot;_blank&quot;&gt;Java 程序员进国企，入职 3 个月还没碰过代码&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：赶紧跑路，跑路的时候咱俩置换下&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：想保持技术建议业余时间参与开源项目&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：才三个月就坐不住了，你不适合大国企&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 4：国企的 IT 一般都是外包，本职工作是甲方去对接，不是写代码&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 5：这不叫凡尔赛啥叫凡尔赛&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 6：你不适合国企，换我来吧，我把互联网公司的岗位给你，能让你天天开心的写很多代码！很灵的，跟你匹配度非常高，来吧置换吧！&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 7：欠卷&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 8：技术人员没有闲的时候，开源技术，前沿技术，这些技术储备能干的活太多了，要有自己的思路，没思路永远是给别人干。年少不珍惜好环境，后悔了再找真就没有了，不过有些人确实不适合，只适合被安排的工作。还是找个适合自己的更重要。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 9：这不比写 Java 强？&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 10：找时间提升自己以后去外企可以提升能力也能 WLB&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310791</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310791</guid>
            <pubDate>Fri, 06 Sep 2024 13:12:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>HarmonyOS ArkUI 工程框架解析</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;div class=&quot;rich_media_content js_underline_content
                       autoTypeSetting24psection
            &quot; id=&quot;js_content&quot;&gt; 
 &lt;section data-mpa-powered-by=&quot;yiban.io&quot; style=&quot;-webkit-tap-highlight-color: transparent;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);text-align: center;visibility: visible;&quot;&gt; 
  &lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-backh=&quot;96&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;96&quot; data-imgfileid=&quot;503052169&quot; data-ratio=&quot;0.16666666666666666&quot; src=&quot;https://oscimg.oschina.net/oscnet/a9a34e77-55a3-4c9a-86ac-3e4ea58f99d7.gif&quot; data-type=&quot;gif&quot; data-w=&quot;636&quot; style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;font-size: var(--articleFontsize);border-radius: 8px;text-align: justify;width: 677px !important;visibility: visible !important;background-size: 16px !important;&quot; referrerpolicy=&quot;no-referrer&quot;&gt; 
  &lt;br style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt; 
 &lt;/section&gt; 
 &lt;section data-mpa-template=&quot;t&quot; data-mpa-template-id=&quot;502&quot; data-mpa-category=&quot;模板&quot; style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);visibility: visible;&quot;&gt; 
  &lt;section data-mpa-category=&quot;模板&quot; data-mid=&quot;&quot; style=&quot;-webkit-tap-highlight-color: transparent;padding-right: 1px;padding-left: 1px;outline: 0px;width: 677px;display: flex;justify-content: flex-start;align-items: center;flex-direction: column;visibility: visible;&quot;&gt; 
   &lt;section data-mid=&quot;&quot; style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;width: 675px;display: grid;grid-template-columns: 26px auto;visibility: visible;&quot;&gt; 
    &lt;section data-mid=&quot;&quot; style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;width: 26px;height: 14px;display: flex;justify-content: center;align-items: center;align-self: center;visibility: visible;&quot;&gt; 
     &lt;br style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt; 
    &lt;/section&gt; 
    &lt;section data-mid=&quot;&quot; style=&quot;-webkit-tap-highlight-color: transparent;padding-left: 7px;outline: 0px;display: flex;justify-content: flex-start;align-items: center;visibility: visible;&quot;&gt; 
     &lt;section data-mid=&quot;&quot; style=&quot;-webkit-tap-highlight-color: transparent;margin-right: 7px;outline: 0px;text-align: left;visibility: visible;&quot;&gt; 
      &lt;p data-mid=&quot;&quot; style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;width: 0px;font-size: 14px;font-family: PingFangSC-Semibold, &amp;quot;PingFang SC&amp;quot;;font-weight: bold;color: rgb(58, 92, 244);line-height: 20px;visibility: visible;&quot;&gt;&lt;br style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;/p&gt; 
     &lt;/section&gt; 
     &lt;section data-mid=&quot;&quot; style=&quot;-webkit-tap-highlight-color: transparent;margin-bottom: 4px;outline: 0px;width: 635px;height: 1px;border-top: 1px solid rgb(58, 92, 244);align-self: flex-end;visibility: visible;&quot;&gt; 
      &lt;br style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
   &lt;section data-mid=&quot;&quot; style=&quot;-webkit-tap-highlight-color: transparent;padding: 7px 14px 9px 19px;outline: 0px;width: 675px;text-align: left;border-bottom: 1px solid rgb(58, 92, 244);visibility: visible;&quot;&gt; 
    &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;letter-spacing: 0.544px;visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;通过 HarmonyOS Developer 官网我们可以了解 ArkUI 是一套声明式开放框架，开发者可以基于 ArkTS 语法设计一套极简的 DSL 以及丰富的 UI 组件完成跨设备的界面开发。&lt;/span&gt;&lt;/p&gt; 
    &lt;p style=&quot;margin-top: 8px;margin-bottom: 8px;min-height: 24px;text-wrap: wrap;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
    &lt;p style=&quot;margin-top: 8px;margin-bottom: 8px;min-height: 24px;text-wrap: wrap;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;那么 ArkUI 是如何实现这一套声明式开放框架的呢？本文将通过分析开源的 HarmonyOS 渲染引擎 AceEngine 代码以及配套工程能力来进行详细解读。&lt;/span&gt;&lt;/p&gt; 
    &lt;p style=&quot;margin-top: 8px;margin-bottom: 8px;min-height: 24px;text-wrap: wrap;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;p style=&quot;margin-top: 8px;margin-bottom: 8px;min-height: 24px;text-wrap: wrap;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;本篇文章仅先针对响应式和工程化进行浅谈。&lt;/span&gt;&lt;/p&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);line-height: 1.75em;visibility: visible;&quot;&gt; 
  &lt;br style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;-webkit-tap-highlight-color: transparent;margin-bottom: 0px;outline: 0px;box-sizing: inherit;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgba(25, 26, 31, 0.9);font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;font-size: 16px;text-align: center;visibility: visible;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;font-size: 15px;letter-spacing: 1px;&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;503052168&quot; data-ratio=&quot;0.3161764705882353&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/a0fdf3aa-4f25-4560-b8b9-722feaf0a594.png&quot; data-type=&quot;png&quot; data-w=&quot;408&quot; style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;letter-spacing: 0.544px;visibility: visible !important;width: 113px !important;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;-webkit-tap-highlight-color: transparent;margin-bottom: 0px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);text-align: center;visibility: visible;line-height: normal;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;color: rgb(3, 69, 255);font-family: -apple-system, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;font-size: 18px;letter-spacing: 1px;visibility: visible;&quot;&gt;响应式&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;-webkit-tap-highlight-color: transparent;margin-bottom: 0px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);text-align: center;visibility: visible;line-height: normal;&quot;&gt; 
  &lt;br style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt; 
 &lt;/section&gt; 
 &lt;span id=&quot;OSC_h4_1&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot; style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);&quot;&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;从一个示例来看响应式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;下面是笔者通过 DevEcoStudio 开发者工具模板实例化出来的一个 HelloWorld 实例，从这个简单的片段中我们可以看出来结构体中的&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;message&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;就是驱动数据，在&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;onClick&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;事件中更改值时，会触发界面发生更新。&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Entry&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;struct Index {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__meta&quot;&gt;@State&lt;/span&gt; message: &lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;&#39;Hello World&#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  build() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Row() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      Column() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Text(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.message)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          .fontSize(&lt;span class=&quot;code-snippet__number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          .fontWeight(FontWeight.Bold)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      .width(&lt;span class=&quot;code-snippet__string&quot;&gt;&#39;100%&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      .onClick(&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;=&amp;gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.message = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Test Reactive&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .height(&lt;span class=&quot;code-snippet__string&quot;&gt;&#39;100%&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;ArkUI 这套 DSL 封装了很多注解,让开发者可以专注在这套声明式的框架内，不用去关心数据驱动视图变更的细节。&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;为了更加深入了解背后的细节，笔者寻找到了这些注解语法糖编译后的产物，来进行更进一步的分析。&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;build/default/cache/default/default@CompileArkTS/esmodule/debug/entry/src/main/ets/pages/Index.js&lt;/span&gt;&lt;/code&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt; 
   &lt;ne-clipboard source=&quot;https%3A%2F%2Faliyuque.antfin.com%2Fdisheng.zzy%2Fvu6t3m%2Feohz6eyfi6wimzf7%3FsingleDoc%23&quot; style=&quot;caret-color: rgb(0, 0, 0);color: rgb(0, 0, 0);letter-spacing: normal;text-align: start;text-wrap: wrap;&quot;&gt;&lt;/ne-clipboard&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h4_2&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;text-wrap: wrap;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);&quot;&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;产物分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;通过产物可以看到更多语法糖背后的实质操作：&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;首先可以清晰看到，在编译后的产物中有针对数据源值的操作，利用重写&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;Componet&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;属性描述器&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;get set&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;劫持&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;message&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;的读写操作，&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;message&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;操作最终落入到了&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;ObserverdPropertySimplePU&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;中。因此可以看出 ArkUI 的响应式和 Vue 还是非常相似的，都是通过来 Magic Function 追踪属性的读取。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ViewPU&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;constructor&lt;/span&gt;(parent, params, __localStorage, elmtId = -&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;(parent, __localStorage, elmtId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.__message = new ObservedPropertySimplePU(&lt;span class=&quot;code-snippet__string&quot;&gt;&#39;Hello World&#39;&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;message&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.setInitiallyProvidedValue(params);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt; message() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.__message.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt; message(newValue) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.__message.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(newValue);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  initialRender() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.observeComponentCreation((elmtId, isInitialRender) =&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      ViewStackProcessor.StartGetAccessRecordingFor(elmtId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      Row.create();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      Row.height(&lt;span class=&quot;code-snippet__string&quot;&gt;&#39;100%&#39;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!isInitialRender) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Row.pop();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      ViewStackProcessor.StopGetAccessRecording();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.observeComponentCreation((elmtId, isInitialRender) =&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      ViewStackProcessor.StartGetAccessRecordingFor(elmtId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      Column.create();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      Column.width(&lt;span class=&quot;code-snippet__string&quot;&gt;&#39;100%&#39;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      Column.onClick(() =&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.message = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Test Reactive&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!isInitialRender) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Column.pop();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      ViewStackProcessor.StopGetAccessRecording();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.observeComponentCreation((elmtId, isInitialRender) =&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      ViewStackProcessor.StartGetAccessRecordingFor(elmtId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      Text.create(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.message);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      Text.fontSize(&lt;span class=&quot;code-snippet__number&quot;&gt;50&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      Text.fontWeight(FontWeight.Bold);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!isInitialRender) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Text.pop();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      ViewStackProcessor.StopGetAccessRecording();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Text.pop();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Column.pop();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Row.pop();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h4_3&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;text-wrap: wrap;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);&quot;&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;追踪依赖的过程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;在数据被读取的过程中，将当前正在渲染的元素加入到&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;dependentElmtIdsByProperty_&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;中去。&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;   * during &#39;get&#39; access recording take note of the created component and its elmtId&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;   * and add this component to the list of components who are dependent on this property&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;recordPropertyDependentUpdate&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;/span&gt;) : &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; elmtId = &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.getRenderingElmtId();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.dependentElmtIdsByProperty_.addPropertyDependency(elmtId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;回看产物代码中的初始函数，每个节点的构建都形成了一个闭包函数并传入到&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;observeComponentCreation&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;中。&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.observeComponentCreation(&lt;span class=&quot;code-snippet__function&quot;&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;elmtId, isInitialRender&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ViewStackProcessor.StartGetAccessRecordingFor(elmtId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Row.create();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Row.height(&lt;span class=&quot;code-snippet__string&quot;&gt;&#39;100%&#39;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!isInitialRender) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                Row.pop();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ViewStackProcessor.StopGetAccessRecording();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        });&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;同时在&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;observeComponentCreation&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;中又维护了&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;renderEletIdStack&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;，并且将&amp;nbsp;&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;updateFunc&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;关联元素存储上。整个过程基本和&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;Vue&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;创建&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;Effect&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;和维护 Dep 的过程类似。&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; observeComponentCreation(compilerAssignedUpdateFunc: UpdateFunc): void {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; updateFunc = (elmtId: number, isFirstRender: boolean) =&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.currentlyRenderedElmtIdStack_.push(elmtId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      compilerAssignedUpdateFunc(elmtId, isFirstRender);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.currentlyRenderedElmtIdStack_.pop();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; elmtId = ViewStackProcessor.AllocateNewElmetIdForNextComponent();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.updateFuncByElmtId.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(elmtId, { updateFunc: updateFunc });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    UINodeRegisterProxy.ElementIdToOwningViewPU_.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(elmtId, new WeakRef(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      updateFunc(elmtId, &lt;span class=&quot;code-snippet__comment&quot;&gt;/* is first render */&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (error) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__comment&quot;&gt;// avoid the incompatible change that move set function before updateFunc.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.updateFuncByElmtId.delete(elmtId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      UINodeRegisterProxy.ElementIdToOwningViewPU_.delete(elmtId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; error;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;虽然 ArkUI 与 Vue 在某些方面存在相似性，但它们之间有一个显著的差异点。自 Vue 2.x 版本以后，Vue 对响应式绑定的处理变得更加粗犷，限制了更新的精细程度到组件层级，并且融入了 VDOM 的概念以及组件级 DIFF。相比之下，ArkUI 作为声明式 UI 框架，却采取了一种更为「传统」的路径，直接聚焦于细粒度的属性更新绑定，从而在机制上与 Vue 的这一演变形成对比。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h4_4&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;text-wrap: wrap;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);&quot;&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;color: rgb(0, 17, 255);-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;为什么 ArkUI 要抛弃 DIFF？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;回顾 ArkUI 官网的描述，它进一步证实了笔者从源码分析中的发现：ArkUI 采取了一种策略，从 VDOM DIFF 「回撤」到细粒度的更新，以此来优化性能。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;ArkUI 选择绕过传统的 DIFF 算法，部分原因可能在于 VDOM 可能带来的内存消耗及更新延迟问题。它追求更细粒度的更新管理，以提升性能和响应速度。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;172&quot; data-backw=&quot;578&quot; data-imgfileid=&quot;503052171&quot; data-ratio=&quot;0.2972222222222222&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/e1c4a87a-eec8-4a93-aa63-a7e3a2d72b2e.png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; style=&quot;width: 100%;height: auto;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;让我们从 js-framework-benchmark 中挑选若干典型框架的测试结果，以此来深入了解 VDOM DIFF 技术与其他技术路径在内存占用和响应时间上的性能差异。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;ul class=&quot;list-paddingleft-1&quot; style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;padding-left: 1.5em;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;width: 577.422px;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);min-height: 24px;visibility: visible;line-height: 1.75em;&quot;&gt; 
  &lt;li style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;color: rgb(0, 17, 255);letter-spacing: 1px;&quot;&gt; 
   &lt;section style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;line-height: 1.75em;&quot;&gt; 
    &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;&quot;&gt;内存占用&lt;/span&gt; 
   &lt;/section&gt;&lt;p&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;从下图中可以看到 Vue 和 React 在内存占用上明显落后 SolidJS 和 Svelte：&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-imgfileid=&quot;503052172&quot; data-ratio=&quot;0.8385093167701864&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/e1a3bfd1-dcc9-4b13-a8e6-0cbaa1a936a5.png&quot; data-type=&quot;png&quot; data-w=&quot;483&quot; style=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;ul class=&quot;list-paddingleft-1&quot; style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;padding-left: 1.5em;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;width: 577.422px;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);min-height: 24px;visibility: visible;line-height: 1.75em;&quot;&gt; 
  &lt;li style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;color: rgb(0, 17, 255);letter-spacing: 1px;&quot;&gt; 
   &lt;section style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;line-height: 1.75em;&quot;&gt; 
    &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;&quot;&gt;响应时间&lt;/span&gt; 
   &lt;/section&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(0, 17, 255);font-size: 15px;letter-spacing: 1px;text-wrap: wrap;background-color: rgb(255, 255, 255);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;尽管 Vue 的 DIFF 过程历经众多策略与细节优化，但在响应时间上，与一些未采用 DIFF 机制的框架相比较，仍存在差异。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-imgfileid=&quot;503052173&quot; data-ratio=&quot;1.2161339421613395&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/934b60d7-7bee-4c15-953b-3343880ca704.png&quot; data-type=&quot;png&quot; data-w=&quot;657&quot; style=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;ul class=&quot;list-paddingleft-1&quot; style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;padding-left: 1.5em;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;width: 577.422px;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);min-height: 24px;visibility: visible;line-height: 1.75em;&quot;&gt; 
  &lt;li style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;color: rgb(0, 17, 255);letter-spacing: 1px;&quot;&gt; 
   &lt;section style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;line-height: 1.75em;&quot;&gt; 
    &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;&quot;&gt;Vue2.x 选用 VDOM 是否明智？&lt;/span&gt; 
   &lt;/section&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;从性能和跨平台的角度审视，Vue2.x 采用虚拟 DOM（VDOM）的决策似乎缺乏充分理由。特别是考虑到 Vue3.x 的实验性版本 Vue Vapor Mode（无虚拟 DOM 模式），它在性能上已展现出不亚于 VDOM 的表现，这进一步引发了 VDOM 必要性的讨论。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-imgfileid=&quot;503052174&quot; data-ratio=&quot;5.781512605042017&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/ba529f98-8590-48f0-8346-dc9140c544a2.png&quot; data-type=&quot;png&quot; data-w=&quot;119&quot; style=&quot;width: 91px;height: 526px;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h4_5&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;text-wrap: wrap;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);&quot;&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;为什么&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;color: rgb(0, 17, 255);-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;要将声明式的语法平铺？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;text-wrap: wrap;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;&quot;&gt;&lt;/h4&gt; 
 &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;我们先来看看 SolidJS 的产物。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;{increment}&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;123&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;{count() + 1}&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;{count()}&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;var _el$ = _tmpl$(),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      _el$2 = _el$.firstChild,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      _el$3 = _el$2.firstChild,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      _el$4 = _el$3.nextSibling,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      _el$5 = _el$2.nextSibling;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    _el$.$$click = increment;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__number&quot;&gt;_&lt;/span&gt;$insert(_el$4, () =&amp;gt; count() + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__number&quot;&gt;_&lt;/span&gt;$insert(_el$5, count);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; _el$;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;SolidJS 选择了在栈上即时创建较多的临时变量，而非增加堆栈深度，以此来优化运行时性能。它的语法设计允许直观地表达 UI 结构的嵌套，但实质上并不导致因语法嵌套而引起的堆栈过深问题，从而避免了因堆栈层次过多而导致的不必要的上下文创建与性能开销。&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;这种做法与 ArkUI 有相似之处，提示我们在编程实践中应谨慎设计，以减少不必要的抽象层级，防止堆栈深度无谓增加。然而，ArkUI 采取了一种不同的策略，它通过堆栈的入栈和出栈来跟踪节点的层次和嵌套结构。值得注意的是，ArkUI 为每个组件创建节点时都应用了&lt;/span&gt; 
  &lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;font-size: 15px;letter-spacing: 1px;&quot;&gt;observeComponentCreation&lt;/span&gt;&lt;/code&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;进行包裹，甚至包括那些未使用变量符号标记的节点。从优化角度看，这一做法可能存在过度包装的问题，笔者认为有进一步精简和优化的空间。&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;span id=&quot;OSC_h4_6&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot; style=&quot;text-wrap: wrap;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;visibility: visible;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);&quot;&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;响应式更新&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;对于响应式的更新，ArkUI 就做的比较简单。下面两段是比较核心的代码：&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(newValue: T): void {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; oldValue = &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.wrappedValue_;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.setValueInternal(newValue)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      TrackedObject.notifyObjectValueAssignment(&lt;span class=&quot;code-snippet__comment&quot;&gt;/* old value */&lt;/span&gt; oldValue, &lt;span class=&quot;code-snippet__comment&quot;&gt;/* new value */&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.wrappedValue_,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.notifyPropertyHasChangedPU,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.notifyTrackedObjectPropertyHasChanged, &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; notifyPropertyHasChangedPU() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.owningView_.viewPropertyHasChanged(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.info_, &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.dependentElmtIdsByProperty_.getAllPropertyDependencies());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viewPropertyHasChanged(varName: PropertyInfo, dependentElmtIds: Set&amp;lt;number&amp;gt;): void {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.markNeedUpdate();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; elmtId of dependentElmtIds) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.dirtDescendantElementIds_.add(elmtId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;在关联的属性变化后 ArkUI 会将当前组件标记为脏组件，并且将属性依赖收集到的&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;dependentElmtids&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;维护到组件的&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;dirtDescendantElementIds_&lt;/span&gt;&lt;/code&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;在笔者从这里来 AkrUI 的升级并未完全到位，它仍然将响应式流程与组件紧密绑定在一起，未能在框架侧落地无组件（NoComponent）的设计理念。&lt;strong&gt;一般而言，节点与组件的绑定是为了给 DIFF 过程设定界限，从而缩小比较范围，提高效率。然而，在当前场景下，这种绑定显得多余。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;在&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;updateDirtyElements&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;消费脏节点，&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;UpdateElement&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;中获取到&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;updateFuncs&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;中存储的更新函数。&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; updateDirtyElements() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;do&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      dirtElmtIdsFromRootNode.forEach(elmtId =&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.hasRecycleManager()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.UpdateElement(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.recycleManager_.proxyNodeId(elmtId));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.UpdateElement(elmtId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.dirtDescendantElementIds_.delete(elmtId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.dirtDescendantElementIds_.size);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;而&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;updateDirtyElements&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;被 Native 的&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;JSView&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;关联的 Node 持有。&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;markdown&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;auto updateFunction = [&lt;span class=&quot;code-snippet__string&quot;&gt;weak = AceType::WeakClaim(this)&lt;/span&gt;](&lt;span class=&quot;code-snippet__link&quot;&gt;&lt;/span&gt;) -&amp;gt; void {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__code&quot;&gt;        auto jsView = weak.Upgrade();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__code&quot;&gt;        if (!jsView-&amp;gt;needsUpdate_) {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__code&quot;&gt;            return;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__code&quot;&gt;        }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__code&quot;&gt;        jsView-&amp;gt;needsUpdate_ = false;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__code&quot;&gt;        jsView-&amp;gt;jsViewFunction_-&amp;gt;ExecuteRerender();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__code&quot;&gt;    };&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;customNode-&amp;gt;SetUpdateFunction(std::move(info.updateFunc));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;上文中说到的组件&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 16px;&quot;&gt;markNeedUpdate&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;最终也会调用到&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 16px;&quot;&gt;JSView&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;背后的 Node 的方案。&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt; ViewPartialUpdateModelNG::MarkNeedUpdate(&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; WeakPtr&amp;lt;AceType&amp;gt;&amp;amp; node)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    customNode-&amp;gt;MarkNeedUpdate();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;最终会将 Node 注册进入渲染管线&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;background-color: rgb(247, 247, 247);font-size: 15px;&quot;&gt;PipelineContext&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;中的脏节点集合中。&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; CustomNodeBase::MarkNeedUpdate()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;auto&lt;/span&gt; context = PipelineContext::GetCurrentContext();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    context-&amp;gt;AddDirtyCustomNode(AceType::DynamicCast&amp;lt;UINode&amp;gt;(Claim(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;)));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;最终渲染管线在接受到系统的 vSync 信号回调后清理脏节点。&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; PipelineContext::FlushVsync(&lt;span class=&quot;code-snippet__keyword&quot;&gt;uint64_t&lt;/span&gt; nanoTimestamp, &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint32_t&lt;/span&gt; frameCount){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  FlushBuild();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;void PipelineContext::FlushDirtyNodeUpdate()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (!dirtyNodes_.&lt;span class=&quot;code-snippet__keyword&quot;&gt;empty&lt;/span&gt;()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; auto&amp;amp; node : dirtyNodes) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (AceType::InstanceOf&amp;lt;NG::CustomNodeBase&amp;gt;(node)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                auto customNode = AceType::DynamicCast&amp;lt;NG::CustomNodeBase&amp;gt;(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                node-&amp;gt;needRebuild_ = &lt;span class=&quot;code-snippet__keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (node-&amp;gt;updateFunc_) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    node-&amp;gt;updateFunc_();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;至此，一个基本的响应式流程得以完成。不难发现，ArkUI 的响应式架构及其更新机制，都展现了与市面上成熟响应式框架相似的特质。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;pre style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;box-sizing: inherit;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgba(25, 26, 31, 0.9);font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;font-size: 16px;text-align: center;visibility: visible;line-height: 1.75em;&quot;&gt;&lt;code&gt;&lt;p style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;box-sizing: inherit;letter-spacing: 0.544px;visibility: visible;line-height: normal;&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;503052175&quot; data-ratio=&quot;0.3056872037914692&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/4a924c03-206a-40ca-94b8-fba0150afd41.png&quot; data-type=&quot;png&quot; data-w=&quot;422&quot; style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;letter-spacing: 0.544px;visibility: visible !important;width: 117px !important;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;letter-spacing: 0.544px;color: rgb(34, 34, 34);visibility: visible;line-height: normal;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;color: rgb(3, 69, 255);font-family: -apple-system, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;font-size: 18px;letter-spacing: 1px;&quot;&gt;工程化&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h4_7&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;text-wrap: wrap;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);&quot;&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;color: rgb(0, 17, 255);-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;TypeScript 超集&quot;ohos-typescript&quot;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;text-wrap: wrap;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;&quot;&gt;&lt;/h4&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;通过逆向分析 DevEcoStudio 中的多种插件 Jar 包，我们发现 ArkUI 巧妙地对现有各类语言的插件进行了定制改造，从而在研发环节实现了这一功能的集成。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;声明式语法（&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;struct&lt;/span&gt;&lt;/code&gt;&amp;nbsp;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;关键词，&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;@Builder&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;,&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;Component Inside&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&amp;nbsp;) 研发侧实现即将符合条件的词法节点转成扩展的语法树,其中扩展了&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;StructDeclartion&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;letter-spacing: 1px;font-size: 15px;&quot;&gt;，&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;EtsComponentExpression&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;letter-spacing: 1px;font-size: 15px;&quot;&gt;，&lt;/span&gt;&lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;ComponentState&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;等一系列类型 (Intellij 中的 PSI ElementType)。IDE 便能得到一个经过精心调整的抽象语法树（AST），为代码导航、语法高亮等高级功能奠定了坚实基础，也解决了开发者对于这门超集语言研发侧的问题。&lt;/span&gt;&lt;span style=&quot;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;如&lt;/span&gt;&lt;code style=&quot;font-size: var(--articleFontsize);letter-spacing: 0.034em;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;strcut 结构&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;, ArkUI 即重写了 JavaScriptParser 来实现自身的语法分析。&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;structDeclaration&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(PsiBuilder b, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; l)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (JavaScriptParserUtil.recursion_guard_(b, l, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;structDeclaration&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; r2 = r &amp;amp;&amp;amp; structDeclaration_1(b, l + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; r3 = r2 &amp;amp;&amp;amp; JavaScriptParserUtil.consumeTokens(b, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IElementType[]{JavaScriptTypes.STRUCT, JavaScriptTypes.IDENTIFIER});&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; r4 = r3 &amp;amp;&amp;amp; etsStructClassBlock(b, l + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; r4 || r3;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;DevEcoStudio 的 LSP 服务其实是继承 TypeScriptLanguageServer 进行的，在其中又拓宽了一些自定义的 ESLint 规则。整体架构基本和 Idea 原生 JavaScript 插件保持一致,通过新起一个 Node 进程构建 LSP 协议的通信。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;总结来看，在研发侧不管是语言插件还是 LSP 服务，ArkUI 利用许多原有的 TypeScript 生态能力来包装完成。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h4_8&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;text-wrap: wrap;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);&quot;&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;语法糖处理过程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;通过上文对于产物的分析，在了解 ArkTS 的编译链路时笔者看到下面的处理方式也就不足为奇，ArkTS 的打包整体由 Rollup 完成，其中核心 ets 文件的 loader 也是直接复用了 ts compiler 逻辑，注意这里的 ts 指&amp;nbsp;ohos-typescript,利用 loader before 的 hook 提前处理好语法糖以及响应式相关的包装。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;result: ts.TranspileOutput = ts.transpileModule(newContent, {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;compilerOptions&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;compilerOptions,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;fileName&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;id,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;transformers&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;{ before: [ processUISyntax(null) ] }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;});&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;letter-spacing: 1px;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;&quot;&gt;同时 ohos-typescript 中还提供扩展了&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;letter-spacing: 1px;&quot;&gt;&amp;nbsp;&lt;/span&gt; 
  &lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;font-size: 15px;letter-spacing: 1px;&quot;&gt;ts.isStructDeclaration,ts.isEtsComponentExpression&lt;/span&gt;&lt;/code&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;节点判断函数的辅助解析这棵超集树。&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;下面举两个转换的例子：&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;1.&amp;nbsp;&lt;/span&gt; 
  &lt;code style=&quot;font-size: var(--articleFontsize);letter-spacing: 0.034em;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;font-size: 15px;letter-spacing: 1px;&quot;&gt;struct Index&lt;/span&gt;&lt;/code&gt; 
  &lt;span style=&quot;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;转变为&lt;/span&gt; 
  &lt;code style=&quot;font-size: var(--articleFontsize);letter-spacing: 0.034em;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;font-size: 15px;letter-spacing: 1px;&quot;&gt;class Index extends ViewPU&lt;/span&gt;&lt;/code&gt; 
 &lt;/section&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (ts.isStructDeclaration(node)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__built_in&quot;&gt;return&lt;/span&gt; ts.factory.createClassDeclaration(ts.getModifiers(node), node.name,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                           node.typeParameters, updateHeritageClauses(node, &lt;span class=&quot;code-snippet__built_in&quot;&gt;log&lt;/span&gt;), memberNode);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ts.factory.createHeritageClause(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ts.SyntaxKind.ExtendsKeyword,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  [ts.factory.createExpressionWithTypeArguments(ts.factory.createIdentifier(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ViewPU&quot;&lt;/span&gt;), [])]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;2. 嵌套语法的平铺过程&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;本质是一个语法树的递归的遍历过程，通过维护顶层的 Statements 按需塞入，来实现平铺。&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;processNormalComponent&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;node: ts.ExpressionStatement,.....&lt;/span&gt;): &lt;span class=&quot;code-snippet__title&quot;&gt;void&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; newStatements: ts.Statement[] = [];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; res: CreateResult = createComponent(node, COMPONENT_CREATE_FUNCTION);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  newStatements.push(res.newNode);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; etsComponentResult: EtsComponentResult = parseEtsComponentExpression(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; componentName: string = res.identifierNode.getText();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (etsComponentResult.etsComponentNode.body &amp;amp;&amp;amp; ts.isBlock(etsComponentResult.etsComponentNode.body)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    processComponentChild(etsComponentResult.etsComponentNode.body, innerCompStatements, log,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                          {&lt;span class=&quot;code-snippet__attr&quot;&gt;isAcceleratePreview&lt;/span&gt;: &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;code-snippet__attr&quot;&gt;line&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__attr&quot;&gt;column&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__attr&quot;&gt;fileName&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#39;&#39;&lt;/span&gt;}, isBuilder, parent, &lt;span class=&quot;code-snippet__literal&quot;&gt;    &lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                          isGlobalBuilder, &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;, builderParamsResult);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;span id=&quot;OSC_h4_9&quot;&gt;&lt;/span&gt; 
 &lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot; style=&quot;margin-top: 8px;margin-bottom: 8px;text-wrap: wrap;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);&quot;&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;visibility: visible;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;&quot;&gt;调适能力&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;letter-spacing: 1px;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;&quot;&gt;ArkTS 语言的调试功能依托于&lt;/span&gt;&amp;nbsp;&lt;/span&gt; 
  &lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;font-size: 15px;letter-spacing: 1px;&quot;&gt;arkcompiler_ets_runtime&lt;/span&gt;&lt;/code&gt; 
  &lt;span style=&quot;letter-spacing: 1px;&quot;&gt;&amp;nbsp;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;&quot;&gt;虚拟机来实现，与传统依赖「插桩」等技术的调试方式不同，解释器虚拟机往往采取了一种更为轻量级的处理策略。具体到实现细节，让我们深入了解其如何巧妙地干预字节码操作符执行以实现断点功能。&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;在虚拟机运行的核心流程&lt;/span&gt; 
  &lt;code style=&quot;font-family: SFMono-Regular, Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace;background-color: rgba(0, 0, 0, 0.06);border-width: 1px;border-style: solid;border-color: rgba(0, 0, 0, 0.08);border-radius: 2px;padding-right: 2px;padding-left: 2px;&quot;&gt;&lt;span style=&quot;font-size: 15px;letter-spacing: 1px;&quot;&gt;RunInternal&lt;/span&gt;&lt;/code&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;方法内部，当系统处于调试模式下，会转向一个特殊的调度表。这一转换旨在让原本的操作符执行路径受一个新的、专为调试设计的路由控制。在此机制下，系统不仅能灵活地管理操作符的执行流向，还会检查当前操作符是否触发了预设的断点条件，从而精确控制程序的暂停与继续执行，整个过程流畅而高效。&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; EcmaInterpreter::RunInternal(JSThread *thread, &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint8_t&lt;/span&gt; *pc, JSTaggedType *sp)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint8_t&lt;/span&gt; opcode = READ_INST_OP();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;auto&lt;/span&gt; *dispatchTable = instDispatchTable.data();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 在调试模式下切换到一张新的 OP Debug 路由表&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    CHECK_SWITCH_TO_DEBUGGER_TABLE();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;goto&lt;/span&gt; *dispatchTable[opcode];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;DEBUG_HANDLE_OPCODE(LDNAN)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    NOTIFY_DEBUGGER_EVENT();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    REAL_GOTO_DISPATCH_OPCODE(EcmaOpcode::LDNAN);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;DEBUG_HANDLE_OPCODE(LDINFINITY)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    NOTIFY_DEBUGGER_EVENT();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    REAL_GOTO_DISPATCH_OPCODE(EcmaOpcode::LDINFINITY);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;不同于其他虚拟机通常将调试模块内置, ArkTS 选择把调试模块利用 napi(ets_runtime 的扩展注册机制) 注入进入虚拟机中，将调试交互协议的具体实现放在&amp;nbsp;arkcompiler_toolchain&amp;nbsp;项目，让 ets_runtime 也可以轻装上阵。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;ul class=&quot;list-paddingleft-1&quot; style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;padding-left: 1.5em;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;width: 577.422px;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);min-height: 24px;visibility: visible;line-height: 1.75em;&quot;&gt; 
  &lt;li style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;color: rgb(0, 17, 255);letter-spacing: 1px;&quot;&gt; 
   &lt;section style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;line-height: 1.75em;&quot;&gt; 
    &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;&quot;&gt;发起 BreakCommand&lt;/span&gt; 
   &lt;/section&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;strong&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;即开发者在面板侧选择某一行进行断点，这一信息会被记录在虚拟机容器中。&lt;/span&gt;&lt;/strong&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;br&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;在这里笔者还发现 ets_runtime 调试模块，原生支持&amp;nbsp;Chrome Debug Protocol&amp;nbsp;协议，为了适配 Intellij 生态做了一层 DAP 和 CDP 的协议交换，可能最初的设计是面向其他研发的场景。&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; DebuggerClient::BreakCommand()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__built_in&quot;&gt;unique_ptr&lt;/span&gt;&amp;lt;PtJson&amp;gt; request = PtJson::CreateObject();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    request-&amp;gt;Add(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;id&quot;&lt;/span&gt;, id);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    request-&amp;gt;Add(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;method&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Debugger.setBreakpointByUrl&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__built_in&quot;&gt;unique_ptr&lt;/span&gt;&amp;lt;PtJson&amp;gt; params = PtJson::CreateObject();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    params-&amp;gt;Add(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;columnNumber&quot;&lt;/span&gt;, breakPointInfoList_.back().columnNumber);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    params-&amp;gt;Add(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;lineNumber&quot;&lt;/span&gt;, breakPointInfoList_.back().lineNumber);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    params-&amp;gt;Add(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;url&quot;&lt;/span&gt;, breakPointInfoList_.back().url.c_str());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    request-&amp;gt;Add(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;params&quot;&lt;/span&gt;, params);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt; message = request-&amp;gt;Stringify();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    session-&amp;gt;ClientSendReq(message)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt; JSDebugger::SetBreakpoint(&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; JSPtLocation &amp;amp;location, Local&amp;lt;FunctionRef&amp;gt; condFuncRef)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__built_in&quot;&gt;unique_ptr&lt;/span&gt;&amp;lt;PtMethod&amp;gt; ptMethod = FindMethod(location);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;auto&lt;/span&gt; [_, success] = breakpoints_.emplace(location.GetSourceFile(), ptMethod.release(),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        location.GetBytecodeOffset(), Global&amp;lt;FunctionRef&amp;gt;(ecmaVm_, condFuncRef));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;ul class=&quot;list-paddingleft-1&quot; style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;padding-left: 1.5em;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;width: 577.422px;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);min-height: 24px;visibility: visible;line-height: 1.75em;&quot;&gt; 
  &lt;li style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;color: rgb(0, 17, 255);letter-spacing: 1px;&quot;&gt; 
   &lt;section style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;line-height: 1.75em;&quot;&gt; 
    &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;&quot;&gt;落入 Break&lt;/span&gt; 
   &lt;/section&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;strong&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;运行字节码映射到设置的节点。&lt;/span&gt;&lt;/strong&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;br&gt; 
 &lt;/section&gt; 
 &lt;section style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt; 
  &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;ets_runtime 遇到断点映射到操作符会让虚拟机进入一种「空转」状态，期间不断接收并执行新的调试指令，这一机制与其他虚拟机的实现方法相似。&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt; 
  &lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; JSDebugger::BytecodePcChanged(JSThread *thread, JSHandle&amp;lt;Method&amp;gt; method, &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint32_t&lt;/span&gt; bcOffset)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!HandleStep(method, bcOffset)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            HandleBreakpoint(method, bcOffset);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt; JSDebugger::HandleBreakpoint(JSHandle&amp;lt;Method&amp;gt; method, &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint32_t&lt;/span&gt; bcOffset)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;auto&lt;/span&gt; breakpoint = FindBreakpoint(method, bcOffset);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (hooks_ == &lt;span class=&quot;code-snippet__literal&quot;&gt;nullptr&lt;/span&gt; || !breakpoint.has_value()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    JSPtLocation location {method-&amp;gt;GetJSPandaFile(), method-&amp;gt;GetMethodId(), bcOffset,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        breakpoint.value().GetSourceFile()};&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    hooks_-&amp;gt;Breakpoint(location);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; ProtocolHandler::ProcessCommand()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;do&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::unique_lock&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::mutex&amp;gt; queueLock(requestLock_);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (requestQueue_.empty()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!waitingForDebugger_) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                requestQueueCond_.wait(queueLock);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            requestQueue_.swap(dispatchingQueue);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        isDispatchingMessage_ = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (!dispatchingQueue.empty()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt; msg = &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::move(dispatchingQueue.front());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            dispatchingQueue.pop();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            [[maybe_unused]] &lt;span class=&quot;code-snippet__function&quot;&gt;LocalScope &lt;span class=&quot;code-snippet__title&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(vm_)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;auto&lt;/span&gt; exception = DebuggerApi::GetAndClearException(vm_);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            dispatcher_.Dispatch(DispatchRequest(msg));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            DebuggerApi::SetException(vm_, exception);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        isDispatchingMessage_ = &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;pre style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);visibility: visible;&quot;&gt;&lt;code&gt;&lt;p style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;text-wrap: wrap;text-align: center;visibility: visible;color: rgb(34, 34, 34);line-height: normal;&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;503052176&quot; data-ratio=&quot;0.3056872037914692&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;422&quot; src=&quot;https://oscimg.oschina.net/oscnet/401fb380-f9b4-4028-970d-59cfcf545668.png&quot; style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;font-size: 14px;visibility: visible !important;width: 117px !important;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;&lt;p style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;text-wrap: wrap;text-align: center;line-height: normal;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;color: rgb(0, 17, 255);font-family: -apple-system, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;font-size: 18px;letter-spacing: 1px;&quot;&gt;结语&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;本文通过对 HarmonyOS ArkUI 的介绍与分析，探讨了其作为声明式开放框架的核心特性和实现机制。而 ArkUI 作为 HarmonyOS 的声明式 UI 框架，通过独特的设计思路与实现方式，旨在为开发者提供高效、灵活的跨平台界面开发解决方案。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-bottom: 0px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;color: rgb(34, 34, 34);font-size: 15px;background-color: rgb(255, 255, 255);text-align: center;line-height: normal;&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-imgfileid=&quot;503052177&quot; data-ratio=&quot;0.328125&quot; data-s=&quot;300,640&quot; src=&quot;https://oscimg.oschina.net/oscnet/592a6e75-6320-400a-aba1-ed9557c5d4bb.png&quot; data-type=&quot;png&quot; data-w=&quot;256&quot; style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;font-size: 16px;visibility: visible !important;width: 122px !important;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-bottom: 0px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;font-family: system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);text-align: center;line-height: normal;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;color: rgb(0, 17, 255);font-family: -apple-system, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;font-size: 18px;letter-spacing: 1px;&quot;&gt;团队介绍&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;我们是淘天集团-商家&amp;amp;开放平台技术前端团队，本团队负责商家平台建设并围绕淘宝电商 B2C 业务，提供商家应用开放能力，为阿里小程序开发者生态提供高生产力工程化技术产品，打造面向 B 端的桌面/IoT 小程序基础设施，助力商家规模化增长。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; style=&quot;-webkit-tap-highlight-color: transparent;margin-bottom: 0px;outline: 0px;letter-spacing: 0.544px;visibility: visible;&quot;&gt; 
  &lt;section style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 5px;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;font-size: 16px;word-break: break-all;color: rgb(0, 0, 0);font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif;text-align: center;line-height: 1.75em;&quot;&gt; 
   &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;color: rgb(0, 17, 255);&quot;&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;&quot;&gt;¤&lt;/strong&gt;&lt;/span&gt; 
   &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;&quot;&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;&quot;&gt;&amp;nbsp;拓展阅读&amp;nbsp;&lt;/strong&gt;&lt;/span&gt; 
   &lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;color: rgb(0, 17, 255);&quot;&gt;&lt;strong style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;&quot;&gt;¤&lt;/strong&gt;&lt;/span&gt; 
  &lt;/section&gt; 
  &lt;section style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 5px;margin-bottom: 5px;outline: 0px;letter-spacing: 0.544px;font-size: 16px;word-break: break-all;color: rgb(0, 0, 0);font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif;text-align: center;line-height: 1.75em;&quot;&gt; 
   &lt;br style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;&quot;&gt; 
  &lt;/section&gt; 
  &lt;section style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-indent: 0em;text-align: center;line-height: 1.75em;min-height: 24px;clear: both;visibility: visible;&quot;&gt; 
   &lt;a target=&quot;_blank&quot; href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D2565944923443904512%23wechat_redirect&quot; textvalue=&quot;3DXR 技术&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; style=&quot;outline: 0px;color: var(--weui-LINK);cursor: pointer;&quot;&gt;3DXR 技术&lt;/a&gt;&amp;nbsp;|&amp;nbsp; 
   &lt;a target=&quot;_blank&quot; href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1533906991218294785%23wechat_redirect&quot; textvalue=&quot;终端技术&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; style=&quot;outline: 0px;color: var(--weui-LINK);cursor: pointer;&quot;&gt;终端技术&lt;/a&gt;&amp;nbsp;|&amp;nbsp; 
   &lt;a target=&quot;_blank&quot; href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1592015847500414978%23wechat_redirect&quot; textvalue=&quot;音视频技术&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; style=&quot;outline: 0px;color: var(--weui-LINK);cursor: pointer;&quot;&gt;音视频技术&lt;/a&gt; 
  &lt;/section&gt; 
  &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;font-family: -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-indent: 0em;text-align: center;line-height: 1.75em;visibility: visible;&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1539610690070642689%23wechat_redirect&quot; textvalue=&quot;服务端技术&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; style=&quot;outline: 0px;color: var(--weui-LINK);cursor: pointer;&quot;&gt;服务端技术&lt;/a&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;letter-spacing: 0.544px;&quot;&gt;&amp;nbsp;|&amp;nbsp;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D2565883875634397185%23wechat_redirect&quot; textvalue=&quot;技术质量&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; style=&quot;outline: 0px;color: var(--weui-LINK);cursor: pointer;&quot;&gt;技术质量&lt;/a&gt;&amp;nbsp;|&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1522425612282494977%23wechat_redirect&quot; textvalue=&quot;数据算法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; style=&quot;outline: 0px;color: var(--weui-LINK);cursor: pointer;&quot;&gt;数据算法&lt;/a&gt;&lt;/p&gt; 
  &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;font-family: -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-indent: 0em;text-align: center;line-height: 1.75em;visibility: visible;&quot;&gt;&lt;br style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;&quot;&gt;&lt;/p&gt; 
  &lt;section class=&quot;mp_profile_iframe_wrp&quot; style=&quot;-webkit-tap-highlight-color: transparent;margin-bottom: 24px;outline: 0px;&quot;&gt; 
   &lt;mp-common-profile class=&quot;custom_select_card mp_profile_iframe js_wx_tap_highlight&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAxNDEwNjk5OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8t5nZGhAatCrc4e2iaDfAaoInribRKxc7MOqdTGygfcLqSDxhj0trCHVEh94Sjl7zuWYzwouYtJ0VQ/300?wx_fmt=png&amp;amp;wxfrom=19&quot; data-nickname=&quot;大淘宝技术&quot; data-alias=&quot;AlibabaMTT&quot; data-signature=&quot;大淘宝技术官方账号&quot; data-from=&quot;2&quot; data-index=&quot;0&quot; data-origin_num=&quot;748&quot; data-isban=&quot;0&quot; data-biz_account_status=&quot;0&quot; data-weui-theme=&quot;light&quot; data-is_biz_ban=&quot;0&quot;&gt;&lt;/mp-common-profile&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;p style=&quot;-webkit-tap-highlight-color: transparent;margin-bottom: 0px;outline: 0px;&quot;&gt;&lt;br style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-family: &amp;quot;PingFang SC&amp;quot;, system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;min-height: 24px;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;-webkit-tap-highlight-color: transparent;outline: 0px;font-size: 15px;visibility: visible;letter-spacing: 1px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;p style=&quot;display: none;&quot;&gt; 
  &lt;mp-style-type data-value=&quot;3&quot;&gt;&lt;/mp-style-type&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color: #858585; font-size: 13px;&quot;&gt;本文分享自微信公众号 - 大淘宝技术（AlibabaMTT）。&lt;br&gt;如有侵权，请联系 support@oschina.cn 删除。&lt;br&gt;本文参与「&lt;a href=&quot;https://www.oschina.net/sharing-plan&quot; target=&quot;_blank&quot;&gt;OSC 源创计划&lt;/a&gt;」，欢迎正在阅读的你也加入，一起分享。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/4662964/blog/15526100</link>
            <guid isPermaLink="false">https://my.oschina.net/u/4662964/blog/15526100</guid>
            <pubDate>Fri, 06 Sep 2024 09:02:03 GMT</pubDate>
            <author>原创</author>
        </item>
        <item>
            <title>Visual Studio Code 1.93 发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#333333&quot;&gt;Visual Studio Code 1.93 已&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_93&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;&lt;span style=&quot;color:#333333&quot;&gt;，具体更新内容如下：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_93%23_new-profiles-editor&quot; target=&quot;_blank&quot;&gt;Profiles editor&lt;/a&gt;&amp;nbsp;- 从一个地方切换和管理你的配置文件。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;新的 Profiles 编辑器现在可在 Visual Studio Code 中全面使用。此体验包括创建新配置文件、编辑和删除现有配置文件以及导入和导出配置文件以与他人共享。有关更多信息，可参阅 Profiles&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fdocs%2Feditor%2Fprofiles&quot; target=&quot;_blank&quot;&gt;文档&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;316&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-2a086557321282bf470f71d9a22b9b40263.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_93%23_django-unit-test-support&quot; target=&quot;_blank&quot;&gt;Django 单元测试支持&lt;/a&gt;&amp;nbsp;- 从 Test Explorer 发现并运行 Django 单元测试。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height=&quot;228&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ca96116b93a29f7cc55df3db6423499c18a.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_93%23_full-project-intellisense-and-package-typings-on-vscodedev&quot; target=&quot;_blank&quot;&gt;vscode.dev 上的 IntelliSense&lt;/a&gt;&amp;nbsp;- 使用 IntelliSense 提升 vscode.dev 中的 JS 和 TS 编码效率。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Chrome、Microsoft Edge 和 Firefox 支持 Package typings 和完整的&amp;nbsp;project IntelliSense。Safari 尚不受支持，因为它未实现&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FReadableByteStreamController&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;ReadableByteStreamController&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;238&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-641f233044b5da52c79fe59fd6cdd82d74d.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;248&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6ec2f4fb24aab147d91611ed3c5c4e86d7e.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_93%23_show-or-hide-unchanged-cells-in-the-diff-view&quot; target=&quot;_blank&quot;&gt;Notebook diff viewer&lt;/a&gt;&amp;nbsp;- 通过折叠未更改的单元格有效地查看 Notebook 中的更改。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height=&quot;372&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-76ebecab6acf719c4cc1e7db48d60991721.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_93%23_resize-table-columns-via-the-keyboard&quot; target=&quot;_blank&quot;&gt;通过键盘调整列大小&lt;/a&gt;&amp;nbsp;- 通过键盘可以更轻松地调整 VS Code 中的表列大小。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;新命令&lt;code&gt;list.resizeColumn&lt;/code&gt;可让你使用键盘调整列大小。触发此命令时，选择要调整大小的列并提供要设置的宽度百分比。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;201&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-766a2d825318281862b47bd49dac2db700d.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_93%23_source-control-graph-view&quot; target=&quot;_blank&quot;&gt;Source Control Graph&lt;/a&gt;&amp;nbsp;- 轻松隐藏、折叠或移动 Source Control Graph。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;span style=&quot;color:#333333&quot;&gt;将上一个里程碑启用的 history graph 从 Source Control 视图移至名为&amp;nbsp;&lt;strong&gt;Source Control Graph &lt;/strong&gt;的新视图。这减少了主视图的信息过载，并使用户能够根据需要隐藏/折叠/移动新视图。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;314&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6743ba13f410b4294788d41d98628adac13.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_93%23_github-copilot-override&quot; target=&quot;_blank&quot;&gt;GitHub Copilot&lt;/a&gt;&amp;nbsp;- 在快速聊天中添加上下文，改进测试生成和聊天历史记录。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height=&quot;209&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-981bbe092c211c0d13779571d456dbd1d94.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_93%23_code-generation-instructions&quot; target=&quot;_blank&quot;&gt;实验性：自定义 Copilot 指令&lt;/a&gt;&amp;nbsp;- 为 Copilot 定义特定的代码生成指令。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height=&quot;281&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a5c932a26ee41e6e21562543b47177e1bac.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;更多详情可&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_93&quot; target=&quot;_blank&quot;&gt;查看发布公告&lt;/a&gt;。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310721/vs-code-1-93-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310721/vs-code-1-93-released</guid>
            <pubDate>Fri, 06 Sep 2024 07:50:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>OpenBMC 成服务器固件发展的「事实标准」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;近年来随着云计算、大数据特别是大模型的快速发展，数据中心规模不断扩张，产生了更多的服务器管理需求。&lt;/p&gt; 
&lt;p&gt;传统 BMC 虽然可以实现部分管理，但是在快速迭代的当今尤其是在 AI 技术的驱动下，存在开发周期长、交付困难、应用单一等难题，并且由于其代码闭源也会导致隐藏的安全漏洞无法及时识别，限制了用户定制开发。&lt;/p&gt; 
&lt;p&gt;OpenBMC 凭借领先的开源理念、可扩展的软件架构，被大型互联网厂商广泛应用，并带动了产业连上下游共同探索，逐步成为服务器固件发展的「事实标准」。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://static.oschina.net/uploads/img/202409/06151327_gW9s.jpeg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在日前召开的 2024 开放计算中国峰会上，来自阿里云、字节跳动、浪潮信息和英特尔等公司的专家分享了各自在 OpenBMC 方面的最新进展及未来规划。&lt;/p&gt; 
&lt;p&gt;阿里云自 2020 年逐步采用 OpenBMC 产品，通过四年的探索与实践，已经在 x86 和 ARM 平台中实现 OpenBMC 替代，并计划未来支持 RISC-V 等多元芯片平台。&lt;/p&gt; 
&lt;p&gt;字节跳动通过加强对固件运行时软硬件状态的深入观察和理解，大幅提升问题定位分析效率。&lt;/p&gt; 
&lt;p&gt;浪潮信息发布基于 OpenBMC 的 InBry 管理固件平台，为用户提供开放、稳定、可靠的 BMC 管理固件。浪潮信息更提出「分层解耦」的理念，实现多元化技术赋能。&lt;/p&gt; 
&lt;p&gt;英特尔持续推动 OpenBMC 技术创新，为客户提供接口实现功能上的定制化需求，同时优化安全性和能耗管理。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310712</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310712</guid>
            <pubDate>Fri, 06 Sep 2024 07:13:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>KDE 发布 2023 年度报告：再次亏损</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;KDE 2023 年年度报告现已&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkde.org%2Fannouncements%2Freport_2023%2F&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;，对过去一年所取得的成就、以及资金的筹集与花费等内容进行了总结。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;KDE 是一个国际技术团队，产品包括适用于 Linux 和 UNIX 平台的现代桌面系统、全面的办公生产力和群件套件以及数百种软件，涵盖互联网和网络应用程序、多媒体、娱乐、教育、图形和软件开发等多个类别。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;报告指出，KDE 在 2023 年的工作重点主要集中在构建 Plasma 6 方面，完成了很多出色的软件开发工作。在 5 月份的一场会议中，Plasma 团队讨论了向 KF6 的过渡及其对 KDE 框架内依赖管理的影响。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;其中一个重大变化是重组了 colour scheme classes，以减少对&lt;code&gt;Qt::Widgets&lt;/code&gt;的不必要依赖，特别是对于基于 QML 的移动应用程序。这种重组提高了效率并减少了软件包的大小--尤其是对于 Android APK 而言，它们可以占到软件包总大小的 20-25%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;但值得一提的是，KDE 在&amp;nbsp;2023 年的年收入仍略低于预期；总成本高于前几年，主要原因是人员费用和活动相关费用。细分来看，企业支持和个人捐款仍然是其重要的收入来源，其中个人捐款增长尤为显著。但一些传统来源（如 Google Summer of Code）的收入略有下降。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;387&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5cf262499217ee79a5e626a9630aa1af7ba.webp&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;具体来说，2023 年期间 KDE 的收入为 349,332.65 欧元，支出总额为 457,071.31 欧元。仅人事费用就花费了 31.7 万欧元，另外 4.3 万欧元用于 Akademy 会议，1.2 万欧元用于 springs，2 万欧元用于其他活动，2.2 万欧元用于税收/保险，以及 1.7 万欧元用于基础设施。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;2022 年，KDE 的收入为 285 495.97 欧元，支出为 384 604.78 欧元。而在 2021 年，KDE 的收入为 238,929.67 欧元，支出仅为 218,396.75 欧元。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;在 2024 年，KDE&amp;nbsp;的预算计划重点是在不大幅扩张的情况下保持现有的活动水平。目标是进一步增加收入，同时控制支出增长，将储备金消耗率降低 18% 或更高。长期目标是在几年内实现预算平衡（收支平衡），及时保留充足的储备金，确保组织的可持续发展。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;「总而言之，2023 年是 KDE eV 稳步增长和精心规划的一年。展望未来，我们的重点仍然是确保我们的财务策略支持我们的使命和 KDE 社区的持续工作。」&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310699/kde-report-2023</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310699/kde-report-2023</guid>
            <pubDate>Fri, 06 Sep 2024 06:30:27 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>vim 里自动缩进 tabstop 的问题</title>
            <description>&lt;h1 class=&quot;header article-title&quot;&gt;
                    &lt;a href=&quot;https://www.oschina.net/question/7101932_2333612&quot;&gt;vim 里自动缩进 tabstop 的问题,一次用 vim?&lt;/a&gt;
                                            &lt;div class=&quot;ui red label horizontal&quot; data-tooltip=&quot;置顶&quot;&gt;顶&lt;/div&gt;
                                                                            &lt;/h1&gt;

                &lt;div class=&quot;extra ui horizontal list meta-wrap&quot;&gt;
                    &lt;div class=&quot;item&quot;&gt;
                        &lt;a href=&quot;https://my.oschina.net/u/7101932&quot; class=&quot;__user&quot;&gt;&lt;span&gt;Codigger 官方&lt;/span&gt;&lt;/a&gt; 发布于，今天 11:54
                    &lt;/div&gt;
                    &lt;div class=&quot;item&quot;&gt;阅读 168&lt;/div&gt;
                    &lt;div class=&quot;item collect-btn &quot; data-id=&quot;2333612&quot; data-user-id=&quot;7101932&quot; data-obj-type=&quot;2&quot; data-max=&quot;99&quot; data-tag-required=&quot;&quot; data-current-user-id=&quot;&quot; data-recommend-tags=&quot;&quot;&gt;&lt;i class=&quot;star outline icon&quot;&gt;&lt;/i&gt; 收藏 &lt;span data-collect-count=&quot;&quot; data-id=&quot;2333612&quot; data-obj-type=&quot;2&quot;&gt;0&lt;/span&gt;&lt;/div&gt;
                    &lt;div class=&quot;item comment-count&quot;&gt;&lt;a href=&quot;https://www.oschina.net/question/7101932_2333612#comments&quot; class=&quot;normal&quot;&gt;&lt;i class=&quot;comment outline icon&quot;&gt;&lt;/i&gt; 答案 &lt;span data-article-reply-count=&quot;&quot;&gt;0&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
                                                                                
                                                        &lt;/div&gt;

                                
                                
                                &lt;div class=&quot;content&quot; id=&quot;articleContent&quot;&gt;
                                                                &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#252933&quot;&gt;vim 里自动缩进 tabstop 的问题,&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#252933&quot;&gt;一次用 vim，开启了 c 语言的自动缩进 cindent，默认的 tabstop 是 8 空格，太长了，我把 tabstop 也设置成了 2，在 vim 下面显示正常，可是程序保存之后用 txt 打开自动缩进还是 8，直接复制粘贴了还是这样，下面该肿么办？&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                                &lt;div class=&quot;poll-wrap&quot;&gt;
                                    &lt;/div&gt;

                                &lt;div class=&quot;additional-remarks&quot;&gt;
                    

                &lt;/div&gt;

                                &lt;div class=&quot;ui basic center aligned segment action&quot;&gt;
                    &lt;div class=&quot;ui big buttons&quot;&gt;
                        &lt;a class=&quot;ui basic button collect-btn hover&quot; data-id=&quot;2333612&quot; data-user-id=&quot;7101932&quot; data-obj-type=&quot;2&quot; data-max=&quot;99&quot; data-tag-required=&quot;&quot; data-current-user-id=&quot;&quot; data-recommend-tags=&quot;&quot;&gt;&lt;i class=&quot;star outline icon&quot;&gt;&lt;/i&gt;收藏 (&lt;span data-collect-count=&quot;&quot; data-id=&quot;2333612&quot; data-obj-type=&quot;2&quot;&gt;0&lt;/span&gt;)&lt;/a&gt;
                        &lt;div class=&quot;ui basic dropdown share button osc-share dropdown-share&quot; data-tag=&quot;share-question&quot;&gt;
                            &lt;i class=&quot;share icon&quot;&gt;&lt;/i&gt; &lt;span&gt;分享&lt;/span&gt;
                            &lt;div class=&quot;menu&quot;&gt;
                                &lt;a class=&quot;item&quot; data-platform=&quot;weibo&quot; data-value=&quot;weibo&quot;&gt;&lt;i class=&quot;weibo icon&quot;&gt;&lt;/i&gt;微博&lt;/a&gt;
                                &lt;a class=&quot;item&quot; data-platform=&quot;qq&quot; data-value=&quot;qq&quot;&gt;&lt;i class=&quot;qq icon&quot;&gt;&lt;/i&gt;QQ&lt;/a&gt;
                                &lt;a class=&quot;item&quot; data-platform=&quot;wechat&quot; data-value=&quot;wechat&quot;&gt;&lt;i class=&quot;weixin icon&quot;&gt;&lt;/i&gt;微信&lt;/a&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;ui basic segment&quot;&gt;
                        &lt;a class=&quot;ban&quot; ban-report=&quot;&quot; data-id=&quot;2333612&quot; data-obj-type=&quot;2&quot; data-url=&quot;https://www.oschina.net/question/7101932_2333612&quot;&gt;
                            &lt;i class=&quot;flag red icon&quot;&gt;&lt;/i&gt;举报&lt;/a&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            </description>
            <link>https://www.oschina.net/question/7101932_2333612</link>
            <guid isPermaLink="false">https://www.oschina.net/question/7101932_2333612</guid>
            <pubDate>Fri, 06 Sep 2024 04:23:00 GMT</pubDate>
        </item>
        <item>
            <title>苹果批准了 iOS 版微信本周提交的更新</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;9 月 6 日，据彭博社报道，苹果已经批准了腾讯本周提交的 iOS 系统微信更新，为双方就&lt;strong&gt;应用内购费用&lt;/strong&gt;问题的持续谈判赢得了更多时间。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-cbe924a36238e3f21abac1446e659d7022c.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2024-09-06%2Fapple-clears-wechat-for-iphone-16-as-talks-persist-over-app-fees&quot; target=&quot;_blank&quot;&gt;https://www.bloomberg.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;在此之前，App Store 上的微信已经有两个多月没有发布更新。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0906/121242_3F4c_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;据知情人士透露，&lt;strong&gt;苹果本周批准了 iOS 版微信更新&lt;/strong&gt;，新版本在朋友圈和直播功能方面进行了优化。这一决定有望平息中国市场对苹果与腾讯就应用商店费用争议可能升级的猜测。&lt;/p&gt; 
&lt;p&gt;双方分歧的焦点在于微信小游戏平台。&lt;strong&gt;报道称苹果要求腾讯屏蔽小游戏中的外部支付链接，并停止开发者利用平台内置消息功能引导用户使用其他支付渠道，从而保证能够抽成 30%&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;苹果还要求腾讯完全禁用游戏内消息传递，但腾讯以过于激烈为由拒绝了这一要求。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;知情人士称，腾讯仍在与苹果讨论后续更新的潜在方案。苹果代表拒绝置评，而腾讯则没有回复通过电子邮件发送的询问。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/307168&quot; target=&quot;_blank&quot;&gt;据此前报道&lt;/a&gt;，对于「苹果税」，腾讯管理层在 8 月举行的 2024 年第二季度财报会上曾进行回应：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「目前我们并未通过应用内交易在 iOS 上实现小程序的货币化。&lt;/p&gt; 
 &lt;p&gt;我认为，如果这种货币化能够实现，这不仅符合我们的利益，也符合苹果的利益，更符合游戏开发者和用户的利益。&lt;strong&gt;但我们希望能在经济上可持续且公平的条件下实现这一目标&lt;/strong&gt;。&lt;/p&gt; 
 &lt;p&gt;因此，这个讨论正在进行中，我们希望能达成一个积极的结果，因为这将是一个三赢的局面。」&lt;/p&gt; 
&lt;/blockquote&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310676</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310676</guid>
            <pubDate>Fri, 06 Sep 2024 04:05:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>deepin 实现多架构适配的背后，我们做了什么？</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-multi-architecture-compatibility%2F&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;查看原文&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;* 全文引述 longlong 在 WHLUG 上的演讲，故存在口语化表达。本文仅代表个人观点和立场。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;deepin 23 作为 deepin 20 的后继版本，最大的改变之一就是添加了多架构支持：从原本只支持 AMD64 架构，到目前支持 AMD64、RISC-V、LoongArch（新世界）、ARM64 多个 CPU 架构平台。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;目前 deepin 23 已经发布了 AMD64 架构的 Stable 镜像，其他 CPU 架构的镜像还处于生态建设的 Preview 版本阶段，直到我们认为其质量满足正式版发版标准，才会发布 Stable 版本。&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;ARM64&lt;/strong&gt;&lt;/h1&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;ARM64 架构是 deepin 23 最早导入支持的架构，当 23 开始正式构建仓库的时候，其就作为主要架构支持目标，现在看来也是除了 x86 架构之外生态最好的架构。我们对于 ARM64 架构的支持也获得了合作伙伴：飞腾和此芯科技的支持。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;主力构建集&lt;/strong&gt;&lt;strong&gt;群&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;我们在做 deepin 23 适配的时候，只有一台 FT2000/64 服务器，当我们系统软件包增加到 3000+ 的时候，这样的构建规模远远不足以支撑构建。而且市面上也不是很好购买 ARM64 服务器。所以我们发挥了主观能动性，在公司库房寻宝，最后被我找来了一台鲲鹏 920 服务器，和五台盘古 w510 台式机，作为构建集群。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;几乎不存在的生态屏障&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;ARM64 的 Linux 生态，几乎是比肩 x86 ,无需担心软件是否适配的问题，几乎在 x86 上能构建的软件包在 ARM64 上都能正常编译。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;通用启动的拦路虎&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;ARM64 初期的应用场景主要是嵌入式设备，所以用 U-Boot 的较多。但是 U-Boot 在启动 deepin 23 的时候就会有一系列问题，比如需要针对不同的设备使用不同的设备树二进制文件（dtb），这对我们 deepin 23 的主线化带来了挑战。所以目前我们的设备也仅适配了能支持 UEFI 的飞腾 D2000/D3000、鲲鹏 920 和此芯科技的新品。对于其他的 ARM64 设备可能只能提供有限度的支持，因为针对不同开发板的板形做不同的适配，对于我们的人力物力都是一个巨大的挑战。但是也欢迎更多的 ARM64 开发板和设备厂商与我们合作，我们尽力适配好。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;LoongArch&lt;/strong&gt;&lt;/h1&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;LoongArch（新世界）最初并不在 deepin 23 的目标支持架构范围内，但在 2022 年前后，随着龙芯大力推进新世界发行版生态的进程，我们决定尝试适配 LoongArch 系统。这一决定的契机源于 Revy 老师寄来的两台 LA50007A2000 机器。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;在我们决定开发新世界发行版之初，便面临着一个问题：硬件从哪里来？当时龙芯发布的新世界支持硬件仅有龙芯 3A5000 和 7A2000。由于新世界刚刚推出，7A2000 的桥片状态并不稳定，时常发生假死情况（即内核仍在运行，但不响应输入输出）。我们最初并不知情，直到 Revy 老师赠送给我们一台龙芯 3A5000 7A2000 新世界主机，并附带了一份长达三页的 PDF 文档，详细说明了龙芯硬件的各种问题，这让我们感到担忧。我也在 Revy 的影响下购买了一台 3A5000 主板，幸运的是，这块主板并未出现类似的问题。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;从 Loong Arch Linux 到 deepin Linux&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;我们决定站在巨人肩膀上，选择成熟度较高的 LoongArch Linux 作为基础，而不是使用尚不完善的 qemu 手动制作 rootfs。在此基础上，我们构建了 rootfs 并启动了 OBS worker ，进而获得了 LoongArch （新世界）的构建能力。同时，龙芯的固件也在不断改进，假死情况有所改善。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Loongson 3C5000 Power！&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;本着「靠着大树好乘凉」的原则，我们去找我们的兄弟部门友好交流之后，借来了两台四路 Loongson 3C5000L 服务器，这也是我们最强的构建主力服务器。不过，在一开始的时候，它们没有新世界固件的支持。后来，我们找龙芯的人要了一份固件，才得以使用（当然，阵列卡依然没法在新世界下正常运行）。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;而我们社区自己购买的 3C5000LL 双路服务器则出了一点意外：它出厂就自带新世界固件和 BMC，但在通电之后会以最高转速发出「龙鸣」，其声音之大一度盖过我们机房所有的服务器，并且其运行也不是很稳定，几乎每天都会死机。这让我们感到无奈，只得求助于武汉龙芯的工程师的协助。在他们的帮助下，我们弄清了龙芯服务器发出「龙鸣」的原因：「其主板提供了 8 个风扇 4pin 的插座，新的 BMC 会检测 1，2，3，4 位的插座是否连接正常。如果连接不正常，BMC 会让风扇以最大功率运行，导致机器过热。但是，我们购买的主机厂商并不知道这回事，风扇并没有按照顺序插在 1，2，3，4 位上，导致了此现象的产生。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;更多的 3C5000：后来，我们通过 UOS 获取了更多的龙芯 3C5000，极大地增强了我们的构建资源。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;deepin loong64 启动!&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;在一切准备完善后。我们手搓了 rootfs ，将 DDE 打包完成，并且做出了第一版的镜像。在龙芯 3a5000 上成功运行，不过由于第一版本我们并不熟悉龙芯内核的特调，所以是从隔壁的 Loong Arch Linux 借用的内核。而系统软件包层面，基本是我们自己打包的系统源，也有部分是从&amp;nbsp;Revy 老师那「偷」的软件包。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;3A6000 性能飞升&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;2024 年初，龙芯发布了 3A6000，Revy 老师又第一时间赞助了一块 3A6000 主板给我们。正如他之前给我们的那些早期样品一样，这块主板遇到了各种问题：开机即死机、系统假死、PCIe 不稳定等。不过，随着后期我们购入的 3A6000 主板和华硕的 3A6000 主板问题逐步得到缓解，系统的稳定性有了很大提升。当然，还是得吐槽一下龙芯的 7A2000 桥片自带的 GPU，因为缺乏稳定和功能完整的驱动，其早期表现非常不稳定，尤其是在外接 4K 显示器时，几乎无法显示，后续我们会和龙芯合作，使用官方驱动解决这一问题，尽情期待。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;生态建设&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;在生态建设方面，龙芯的新世界生态可以说是从零开始。UOS 等基于龙芯旧世界的成果无法直接迁移到新世界上，虽然 AOSC 的 libLoL 出现缓解了部分问题。为了推进龙芯的生态，我们也要求第一方应用必须能在 loong64 上编译通过。所以，现在大家可以看到，deepin 的 unioncode（IDE） 已经能够在 Loong 上正常运行，这无疑为龙芯的开发者生态带来了极大的好处。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;然而，我们仍面临一些问题，比如上游对 Loong 补丁的傲慢态度，导致如 neovim 等软件无法在 loong64 上运行。为了解决这个问题，deepin 自主维护了相关补丁，使得 luajit 能够在 Loong 上顺利运行。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;目前，我们与各个新世界发行版社区保持着良好的关系，方便获取最新的技术成果并解决疑难问题。比如 23 预装了 libLoL 和在旧世界机器上启动新世界系统的的支持。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;何时 Stable？&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;阻挡我们将 loong64 架构的镜像 stable 的问题在于：&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;1、目前应用商店还只是一个空壳，作为一个目标就是开箱即用的发行版来说，这个肯定达不到发版本的标准。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;2、目前构建资源还是匮乏，没办法做到和 ARM64 同等的构建资源支持，我们目前还在大量使用龙芯台式机作为构建的基础设施。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;3、稳定性不满足发版本要求，因为龙架构无论是硬件软件固件都在一个相对快的迭代过程中，很难在某一个时间点去 stable 一个版本，而要求这个版本能稳定的向用户提供服务，所以我们不发 stable 版本，咱一起滚动更新（let‘s roll！）&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;RISC-V&lt;/strong&gt;&lt;/h1&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;对于 RV 架构，其实作为个人我参与的不多，deepin 对于 RV 架构的支持，主要在我们的杨同学完成，此时她还在杭州的 RV 峰会上和各位大佬交换意见。那我就代为介绍我们的 RV 适配情况。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;板子？食之无味，弃之可惜&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;我们对 RV 架构的支持实际是早于 loong64 的，中科院 PLCT 团队在我们做主线化支持之前就已经做好了一套非常早期的版本，并且可以启动到桌面，然而那时我们获得的硬件是全志 D1，当时我拿了一个回去玩，跑起了 Linux 之后就再也不想动它，让它吃灰去了，因为性能实在是太弱了，和同样价格的 rk3566 相比，无论是性能，生态，都远远不及。为啥我们要做 RV，可能是因为创吧。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;其实我们一开始拿到的开发板也不止全志 D1 还有 TH1520：只能说是能用，但是用不了一点。性能依然堪忧。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;所以在我们只有板子的状态下，也没法去做适配，只能用 qemu 手搓 rootfs ，跑起来了内核和 tty，但是全功能的 dde 由于性能问题，是跑不起来的（吐槽：就算适配了看全志 D1 这个样子，似乎也跑不动 dde)&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Sg2042 中式暴力美学的 RV 处理器&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;后来 Revy 给我们弄来了两台 Sg2042 的机器，每一个 Sg2042 使用的是 64 个平头哥 C910 核心，而这个核心同样用在 TH1520 的板子上。虽然单核很弱，但是耐不住它核心多啊。咱就靠堆核，也做到和 PC 级别的性能，至少我们可以在 sg2042 上插一个 AMD 信创神卡了：DDE 启动！&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;因为 sg2042 的出现，我们已经大概够上了批量构建的门槛了，两台 2042 在机房日夜不休的构建下，我们的 rv 生态几乎追平 ARM64。因为 RISC-V 在上游接受度普遍较高，即使没有比较强的硬件出现，rv 依旧被 Debian 的主线支持，这也极大的方便了我们进行适配。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;从笔记本到遥控车：探索 RV 的更多形态&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;而后我们接触到更多的 RV 设备，（再次感谢各位 RV 厂商的投喂）包括且不限于笔记本，平板，甚至是遥控车这类稀奇古怪的玩意。这样我们接触的设备就不仅限于 EVB 了。这些设备虽然五花八门然而使用的无非那么几种核心，各有各的毛病，现在也还没有一个设备能符合我们测试组的要求的。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;GPU：RV 生态的拦路虎&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;我们对于 RV 生态的构建，其实是非常具有信心的，但是在桌面的支持上我们始终无法忽略 GPU 这个因素。因为 RV 大部分厂商一直以来，未来也将持续把重心放在嵌入式领域，有 PCIE 插槽的设备寥寥可数，寄希望于插一块 AMD 亮机卡就能带动桌面的打算基本上泡汤了。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;于是摆在我们面前的问题就是 RV 的板载 GPU，它不仅不支持桌面的 GL，只支持 GLES，还没有开源驱动，只有魔改版 mesa，要我们适配它，意味着我们要往系统里面塞一坨不受包管理的脏东西。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;于是后来我们便修复了 RV llvmpipe 试图先扔掉这个残废 GPU 直接使用软件渲染，奈何效果不佳，毕竟 DDE 主打的一个特效好看，关闭特效之后完全没法用。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;最后在高人指点下，我们采用了 GLVND 方案实现了开源驱动和闭源驱动的依赖共存，勉强地把它们都纳入到了包管理，这才有了我们现在稍微正常一些的桌面体验。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;嵌入式的局限性&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;在当前的 RV 设备适配领域，我们所接触的大多数产品依然是以开发板的形式存在。这可能是因为对于 RV 技术来说，桌面应用的普及尚处于早期阶段。因此，这种嵌入式设备的设计理念一直影响着我们的适配工作，使得适配过程充满了挑战。这段经历让我们深刻认识到，为了推动 RV 技术在桌面环境中的应用，我们需要与厂商更紧密地合作，共同探索和解决适配过程中遇问题。同时，也需要行业内的共同努力，以促进 RV 技术的成熟和广泛应用。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;以上便是本文所有内容了，&lt;strong&gt;感谢所有在 deepin 适配道路提供支持和帮助的老师和伙伴们。&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;相关阅读：&lt;/h1&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;（1）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdistrowatch.com%2Findex.php%3Fdistribution%3Ddeepin&quot; target=&quot;_blank&quot;&gt;deepin 全版本镜像下载（含 deepin V15）&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;（2）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdownload%2F&quot; target=&quot;_blank&quot;&gt;deepin RISC-V 架构镜像（LicheePi 44A、VisionFive2 等）&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;（3）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwiki.deepin.org%2Fzh%2F02_%25E7%25A1%25AC%25E4%25BB%25B6wiki%2F01_%25E8%25AE%25BE%25E5%25A4%2587%25E9%2580%2582%25E9%2585%258D%25E5%2588%2597%25E8%25A1%25A8%2Fdeepin%25E5%25A4%259A%25E6%259E%25B6%25E6%259E%2584%25E9%2580%2582%25E9%2585%258D%25E6%259C%25BA%25E5%259E%258B%25E6%25B8%2585%25E5%258D%2595&quot; target=&quot;_blank&quot;&gt;deepin 多架构适配机型清单&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310660</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310660</guid>
            <pubDate>Fri, 06 Sep 2024 02:39:06 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>OpenSSL 3.4 Alpha 1</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;OpenSSL 3.4 首个 Alpha 版本已发布。&lt;/p&gt; 
&lt;p&gt;主要变化：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;作为 FIPS 140-3 要求的一部分，在 FIPS 提供者中添加了 FIPS 指标。&lt;/li&gt; 
 &lt;li&gt;使用静态链接的 jitterentropy 库的新随机种子源 RNG JITTER。&lt;/li&gt; 
 &lt;li&gt;openssl list&quot;命令现在可以检索已配置的 TLS 签名算法。&lt;/li&gt; 
 &lt;li&gt;改进了 Base64 BIO 的正确性和错误报告。&lt;/li&gt; 
 &lt;li&gt;在 IBM s390x 架构上支持 HMAC 硬件加速。&lt;/li&gt; 
 &lt;li&gt;在 PKCS#12 中实现 RFC 9579 (PBMAC1)&lt;/li&gt; 
 &lt;li&gt;支持直接获取的复合签名算法，如 RSA-SHA2-256。&lt;/li&gt; 
 &lt;li&gt;支持 RFC 9150 和 TLS 1.3 中的 TLS_SHA256_SHA256 和 TLS_SHA384_SHA384 纯密码套件&lt;/li&gt; 
 &lt;li&gt;支持属性证书 (RFC 5755)。&lt;/li&gt; 
 &lt;li&gt;OpenSSL 现在支持使用新的&quot;enable-pie&quot;配置选项构建位置独立可执行文件（PIE），以支持 OpenSSL 可执行文件的地址空间布局随机化（ASL）R。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopenssl%2Fopenssl%2Freleases%2Ftag%2Fopenssl-3.4.0-alpha1&quot; target=&quot;_blank&quot;&gt;下载地址&lt;/a&gt;&amp;nbsp;|&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopenssl%2Fopenssl%2Fblob%2Fmaster%2FCHANGES.md&quot; target=&quot;_blank&quot;&gt;更新日志&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310659/openssl-3-4-alpha-1-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310659/openssl-3-4-alpha-1-released</guid>
            <pubDate>Fri, 06 Sep 2024 02:32:06 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>1-7 月我国软件业务收入 73429 亿元，同比增长 11.2%</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;工信部&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.miit.gov.cn%2Fgxsj%2Ftjfx%2Frjy%2Fart%2F2024%2Fart_858cc76215b74c98b8d2a52f8a5dc366.html&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;公告指出，1-7 月我国软件和信息技术服务业（以下简称「软件业」）运行态势良好，软件业务收入和利润保持两位数增长，工业软件、基础软件等重点软件产品增长较快，软件业务出口增速持续向好，西部、东北地区软件业收入增速小幅提升。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;一、总体运行情况&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;软件业务收入保持平稳增长。1－7 月，我国软件业务收入 73429 亿元，同比增长 11.2%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;243&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-51c3097c097ed6e7f402503ee70e7e3a69b.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;利润总额保持两位数增长。1－7 月，软件业利润总额 8754 亿元，同比增长 12%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;243&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ca63e6fc000e638545cee7079a01c0a396a.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;软件业务出口增速持续向好。1－7 月，软件业务出口 307.7 亿美元，同比增长 2%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;252&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a407dd3adc6595b614cad80b4904071415c.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;二、分领域运行情况&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;软件产品收入稳定增长。1－7 月，软件产品收入 16524 亿元，同比增长 8.9%，占全行业收入比重为 22.5%。其中工业软件产品收入 1564 亿元，同比增长 10.5%；基础软件产品收入 1029 亿元，同比增长 11.1%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;信息技术服务收入持续两位数增长。1－7 月，信息技术服务收入 49501 亿元，同比增长 12.2%，在全行业收入中占比为 67.4%。其中，云计算、大数据服务共实现收入 7606 亿元，同比增长 11.1%，占信息技术服务收入的比重为 15.4%；集成电路设计收入 2054 亿元，同比增长 14.8%；电子商务平台技术服务收入 6287 亿元，同比增长 6.5%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;信息安全收入增长放缓。1－7 月，信息安全产品和服务收入 1088 亿元，同比增长 7.5%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;嵌入式系统软件收入稳步增长。1－7 月，嵌入式系统软件收入 6317 亿元，同比增长 10%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-fd163adc5ee011c0405ad005cd05d746910.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;strong&gt;三、分地区运行情况&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;西部、东北地区软件业收入增速小幅提升。1－7 月，东部地区完成软件业务收入 61261 亿元，同比增长 11.4%，增速较上半年回落 0.5 个百分点；中部地区完成软件业务收入 3484 亿元，同比增长 12.9%，增速较上半年回落 0.3 个百分点；西部地区完成软件业务收入 7032 亿元，同比增长 9.3%，增速较上半年提升 1.1 个百分点；东北地区完成软件业务收入 1651 亿元，同比增长 10%，增速较上半年提升 0.3 个百分点。4 个地区软件业务收入在全国软件业务总收入中的占比分别为 83.4%、4.7%、9.6% 和 2.2%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;245&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3040dac188c517f9c9f544c1042671aa325.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;京津冀、长三角地区软件业务收入稳中有升。1－7 月，京津冀地区完成软件业务收入 18814 亿元，同比增长 14.3%，增速高出全国水平 3.1 个百分点；长三角地区完成软件业务收入 20415 亿元，同比增长 8.2%，增速较上月提升 0.6 个百分点。两个地区软件业务收入在全国总收入中的占比分别为 25.6%、27.8%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;主要软件大省业务收入持续向好。1－7 月，软件业务收入居前 5 名的省份中,北京、广东、山东、江苏、上海软件收入分别为 16671 亿元、12880 亿元、8169 亿元、8022 亿元和 6685 亿元，同比分别增长 14%、12.3%、12.2%、8% 和 11%，5 省 (市) 合计软件业务收入 52428 亿元，占全国比重为 71.4%，占比较去年同期提高 0.5 个百分点。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;240&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-016436d02e887507d7438b59c69c48172e9.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;中心城市软件业务收入稳步增长。1－7 月，全国 15 个副省级中心城市实现软件业务收入 35464 亿元，同比增长 10.1%，占全国软件业务收入比重为 48.3%，占比较去年同期回落 0.5 个百分点。其中，大连、宁波、厦门、深圳、沈阳、武汉和成都等 7 个城市软件业务收入增速超过全国平均增速。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#070707; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;img height=&quot;243&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-7cafa2274add03a942a02ec163306067e8c.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310655</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310655</guid>
            <pubDate>Fri, 06 Sep 2024 02:25:06 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>面壁智能发布 MiniCPM3-4B 基座模型，「端侧 ChatGPT 时刻到来」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;面壁智能官方&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FaxYQOKjYUZKbQnO7UTkjSQ&quot; target=&quot;_blank&quot;&gt;宣布&lt;/a&gt;，面壁「小刚炮」系列进化为全新 MiniCPM 3.0 基座模型，以 4B 参数，带来超越 GPT-3.5 的性能，并表示「端侧 ChatGPT 时刻到来」。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-28fadcaab3332f759f570d8acc12dd8149c.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;面壁智能表示，MiniCPM 3.0 仅以 4B 参数，在包括自然语言理解、知识、代码、数学等多项能力上对 GPT-3.5 实现赶超，在 Qwen2-7B、 Phi-3.5、GLM4-9B、LLaMa3-8B 等一众中外知名模型脱颖而出。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-56bd4ba90ed6c013df4204f10797159d5c0.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;此外，MiniCPM 3.0 还拥有端侧最强 Function calling 性能 ，在权威评测榜单 Berkeley Function-Calling Leaderboard 上，其性能接近 GPT-4o，并超越 Llama 3.1-8B、Qwen-2-7B、GLM-4-9B 等众多模型。&lt;/p&gt; 
&lt;p&gt;开源地址：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenBMB%2FMiniCPM%3Ftab%3Dreadme-ov-file&quot; target=&quot;_blank&quot;&gt;https://github.com/OpenBMB/MiniCPM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fopenbmb%2FMiniCPM3-4B&quot; target=&quot;_blank&quot;&gt;https://huggingface.co/openbmb/MiniCPM3-4B&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310654/minicpm-3-0-4b</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310654/minicpm-3-0-4b</guid>
            <pubDate>Fri, 06 Sep 2024 02:19:06 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>SIG 成果！openKylin RISC-V 版本成功编译运行 Godot 4.3</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;近期，在社区 RISC-V SIG、Godot SIG 和 FAQ SIG 的共同努力下，&lt;strong&gt;成功实现 Godot 开源游戏引擎在 openKylin 2.0 RISC-V 版本上的原生编译与流畅运行&lt;/strong&gt;，进一步扩展 openKylin RISC-V 游戏生态。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-487df50cee10b267b5f0a7e2cf952fe693a.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt; &lt;span style=&quot;color:#888888&quot;&gt;openKylin 2.0 RISC-V SpacemiT K1&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;以下为编译指南，在这里，特别感谢 Github 开发 MBCX 的 RISC-V 交叉编译方法，为 SIG 工作开展提供帮助和参考！&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9)&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong&gt;1 基础准备&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;编译 Godot 至少需要 4G 内存，如果不足请开始 swap，文中演示设备是 8G 内存。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;前往 openKylin 官网下载安装 openKylin 2.0 RISC-V 镜像，此处演示使用的是 SpacemiT K1（进迭时空 Muse Book），&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;请大家下载安装对应板卡的镜像&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9)&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong&gt;2 克隆源代码&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;克隆 Godot 4.3 源代码：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;sudo apt &lt;span style=&quot;color:#ca7d37&quot;&gt;install&lt;/span&gt; git&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;git &lt;span style=&quot;color:#ca7d37&quot;&gt;clone&lt;/span&gt; https://github.com/godotengine/godot.git -b &lt;span style=&quot;color:#0e9ce5&quot;&gt;4.3&lt;/span&gt;-stable &lt;em&gt;--depth=1&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9)&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong&gt;3 安装编译依赖&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;安装 Godot 编译依赖：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;sudo&lt;/span&gt; &lt;span style=&quot;color:#dd1144&quot;&gt;apt update&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;sudo&lt;/span&gt; &lt;span style=&quot;color:#dd1144&quot;&gt;apt install -y \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  build-essential \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  pkg-config \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  libx11-dev \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  libxcursor-dev \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  libxinerama-dev \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  libgl1-mesa-dev \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  libglu1-mesa-dev \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  libasound2-dev \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  libpulse-dev \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  libudev-dev \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  libxi-dev \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  libxrandr-dev \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;  libwayland-dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;其中，openKylin 2.0 的 build-essential 中 gcc 和 g++版本默认是 12，需要使用 update-alternatives 修改默认版本，切换到 gcc-13 和 g++-13。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;em&gt;# 安装 gcc-13 g++-13&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;sudo apt &lt;span style=&quot;color:#ca7d37&quot;&gt;install&lt;/span&gt; gcc&lt;span style=&quot;color:#0e9ce5&quot;&gt;-13&lt;/span&gt; g++&lt;span style=&quot;color:#0e9ce5&quot;&gt;-13&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;sudo &lt;span style=&quot;color:#ca7d37&quot;&gt;update&lt;/span&gt;-alternatives &lt;em&gt;--install /usr/bin/gcc gcc /usr/bin/gcc-12 100&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;sudo &lt;span style=&quot;color:#ca7d37&quot;&gt;update&lt;/span&gt;-alternatives &lt;em&gt;--install /usr/bin/gcc gcc /usr/bin/gcc-13 100&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;

&lt;code&gt;&lt;span&gt;&lt;em&gt;# 输入 gcc-13 对应的数字序号&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;sudo &lt;span style=&quot;color:#ca7d37&quot;&gt;update&lt;/span&gt;-alternatives &lt;em&gt;--config gcc&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;

&lt;code&gt;&lt;span&gt;&lt;em&gt;# g++也是相同的步骤。&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;sudo &lt;span style=&quot;color:#ca7d37&quot;&gt;update&lt;/span&gt;-alternatives &lt;em&gt;--install /usr/bin/g++ g++ /usr/bin/g++-12 100&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;sudo &lt;span style=&quot;color:#ca7d37&quot;&gt;update&lt;/span&gt;-alternatives &lt;em&gt;--install /usr/bin/g++ g++ /usr/bin/g++-13 100&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;

&lt;code&gt;&lt;span&gt;&lt;em&gt;# 输入 g++-13 对应的数字序号&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;sudo &lt;span style=&quot;color:#ca7d37&quot;&gt;update&lt;/span&gt;-alternatives &lt;em&gt;--config g++&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1080&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c30b9a9a2d999e40dbdbab3f8f7758c17bf.png&quot; width=&quot;1920&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:center&quot;&gt;&lt;span style=&quot;color:#888888&quot;&gt;切换到 GCC-13&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;Godot 项目使用 SCons 构建，SCons 是一个开放源代码、以 Python 语言编写的自动化构建工具，在 openKylin 使用 pip 包安装程序安装 SCons。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span style=&quot;color:#0e9ce5&quot;&gt;sudo&lt;/span&gt; apt install python3-pip&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;sudo pip install scons -i https://pypi.tuna.tsinghua.edu.cn/simple --&lt;span style=&quot;color:#0e9ce5&quot;&gt;break&lt;/span&gt;-system-packages&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;检查 SCons 版本：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;openkylin@openkylin&lt;span style=&quot;color:#dd1144&quot;&gt;:~/godot&lt;/span&gt;$ scons -v&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;SCons by Steven Knight et al.:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt; &lt;span style=&quot;color:#dd1144&quot;&gt;SCons:&lt;/span&gt; v4.&lt;span style=&quot;color:#0e9ce5&quot;&gt;8.0&lt;/span&gt;.&lt;span style=&quot;color:#0e9ce5&quot;&gt;7&lt;/span&gt;c688f694c644b61342670ce92977bf4a396c0d4, Sun, &lt;span style=&quot;color:#0e9ce5&quot;&gt;07&lt;/span&gt; Jul &lt;span style=&quot;color:#0e9ce5&quot;&gt;2024&lt;/span&gt; &lt;span style=&quot;color:#0e9ce5&quot;&gt;16&lt;/span&gt;&lt;span style=&quot;color:#dd1144&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#0e9ce5&quot;&gt;52&lt;/span&gt;&lt;span style=&quot;color:#dd1144&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#0e9ce5&quot;&gt;07&lt;/span&gt; -&lt;span style=&quot;color:#0e9ce5&quot;&gt;0700&lt;/span&gt;, by bdbaddog on M1Dog2021&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt; SCons &lt;span style=&quot;color:#dd1144&quot;&gt;path:&lt;/span&gt; [&lt;span style=&quot;color:#dd1144&quot;&gt;&#39;/usr/local/lib/python3.12/dist-packages/SCons&#39;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;Copyright (c) &lt;span style=&quot;color:#0e9ce5&quot;&gt;2001&lt;/span&gt; - &lt;span style=&quot;color:#0e9ce5&quot;&gt;2024&lt;/span&gt; The SCons Foundation&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;安装 mold 和 Clang-17：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span style=&quot;color:#0e9ce5&quot;&gt;sudo&lt;/span&gt; apt install mold clang-&lt;span style=&quot;color:#0e9ce5&quot;&gt;17&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;检查 Clang 版本，并确保编译器后端为 GCC13，应该有如下输出：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;Selected&lt;/span&gt; &lt;span style=&quot;color:#dd1144&quot;&gt;GCC installation: /usr/bin/../lib/gcc/riscv64-linux-gnu/13&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span style=&quot;color:#afafaf&quot;&gt;openkylin@openkylin&lt;/span&gt;:&lt;span style=&quot;color:#dd1144&quot;&gt;~/godot$ clang -v&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;Openkylin&lt;/span&gt; &lt;span style=&quot;color:#dd1144&quot;&gt;clang version 17.0.6 (9ok4)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;Target&lt;/span&gt;: &lt;span style=&quot;color:#dd1144&quot;&gt;riscv64-unknown-linux-gnu&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt; &lt;span style=&quot;color:#dd1144&quot;&gt;model: posix&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;InstalledDir&lt;/span&gt;: &lt;span style=&quot;color:#dd1144&quot;&gt;/usr/bin&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;Found&lt;/span&gt; &lt;span style=&quot;color:#dd1144&quot;&gt;candidate GCC installation: /usr/bin/../lib/gcc/riscv64-linux-gnu/12&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;Found&lt;/span&gt; &lt;span style=&quot;color:#dd1144&quot;&gt;candidate GCC installation: /usr/bin/../lib/gcc/riscv64-linux-gnu/13&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;Found&lt;/span&gt; &lt;span style=&quot;color:#dd1144&quot;&gt;candidate GCC installation: /usr/bin/../lib/gcc/riscv64-linux-gnu/8&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;Selected&lt;/span&gt; &lt;span style=&quot;color:#dd1144&quot;&gt;GCC installation: /usr/bin/../lib/gcc/riscv64-linux-gnu/13&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9)&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong&gt;4 开始构建&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;cd 进入源码目录构建：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span style=&quot;color:#ca7d37&quot;&gt;cd&lt;/span&gt; godot&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;指定目标架构为`rv64`，启用 Clang 作为 LLVM 编译器前端，指定链接器为`mold`（GNU ld 无法正确链接）并同时禁用链接时优化。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;arch&lt;/span&gt;=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;rv64&quot;&lt;/span&gt; use_llvm=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;yes&quot;&lt;/span&gt; linker=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;mold&quot;&lt;/span&gt; lto=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;none&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;启用 fb 文本服务器后端（Godot 有两种文本后端，fb 和 adv）：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;module_text_server_fb_enabled&lt;/span&gt;=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;同时可以禁用一些在 RISC-V 设备可能没法正常工作的 Godot 模块。构建脚本会自动禁用，所以此步骤非必要。&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;em&gt;# 禁用 Theora 视频编码支持&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;module_theora_enabled&lt;/span&gt;=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;em&gt;# 禁用去噪模块&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;module_denoise_enabled&lt;/span&gt;=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;em&gt;# 禁用光线投射模块&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;module_raycast_enabled&lt;/span&gt;=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;em&gt;# 禁用 Xatlas 纹理展开模块&lt;/em&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;module_xatlas_unwrap_enabled&lt;/span&gt;=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;使用以下命令构建 Godot 编辑器：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span style=&quot;color:#0e9ce5&quot;&gt;scons&lt;/span&gt; -j8 arch=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;rv64&quot;&lt;/span&gt; use_llvm=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;yes&quot;&lt;/span&gt; linker=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;mold&quot;&lt;/span&gt; lto=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;none&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     target=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;editor&quot;&lt;/span&gt; platform=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;linux&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     precision=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;single&quot;&lt;/span&gt; module_text_server_fb_enabled=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;yes&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     module_theora_enabled=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     module_denoise_enabled=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     module_raycast_enabled=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     module_xatlas_unwrap_enabled=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;使用以下命令构建 Debug 导出模板：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span style=&quot;color:#0e9ce5&quot;&gt;scons&lt;/span&gt; -j8 arch=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;rv64&quot;&lt;/span&gt; use_llvm=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;yes&quot;&lt;/span&gt; linker=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;mold&quot;&lt;/span&gt; lto=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;none&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     target=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;template_debug&quot;&lt;/span&gt; platform=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;linux&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     precision=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;single&quot;&lt;/span&gt; module_text_server_fb_enabled=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;yes&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     module_theora_enabled=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     module_denoise_enabled=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     module_raycast_enabled=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     module_xatlas_unwrap_enabled=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;使用以下命令构建 Release 导出模板:&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span style=&quot;color:#0e9ce5&quot;&gt;scons&lt;/span&gt; -j8 arch=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;rv64&quot;&lt;/span&gt; use_llvm=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;yes&quot;&lt;/span&gt; linker=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;mold&quot;&lt;/span&gt; lto=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;none&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     target=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;template_release&quot;&lt;/span&gt; platform=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;linux&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     precision=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;single&quot;&lt;/span&gt; module_text_server_fb_enabled=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;yes&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     module_theora_enabled=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     module_denoise_enabled=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     module_raycast_enabled=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt; \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;     module_xatlas_unwrap_enabled=&lt;span style=&quot;color:#dd1144&quot;&gt;&quot;no&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1080&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5b869b6ba671c87a25bf01f57326718321c.png&quot; width=&quot;1920&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;span style=&quot;color:#888888&quot;&gt;编译 Godot&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong&gt;5 运行 Godot&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;cd 进入 bin 目录:&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span style=&quot;color:#ca7d37&quot;&gt;cd&lt;/span&gt; bin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;运行 Godot 编辑器，openKylin 2.0 镜像默认使用 wlcom（基于 Wayland 协议），IMG 的 GPU 可以使用 GLES，因此需要加上启动参数：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffdddd&quot;&gt;--display-driver wayland opengl_es3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;如果设备可以外接 AMD GPU 可以尝试用 GL（比如 SG2042）：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span style=&quot;color:#0e9ce5&quot;&gt;chmod&lt;/span&gt; +x godot.linuxbsd.editor.rv64.llvm&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;./godot.linuxbsd.editor.rv64.llvm --display-driver wayland opengl_es3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1080&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-fdee6479fcec0a7fef1d03203a92173dd56.png&quot; width=&quot;1920&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:center&quot;&gt;&lt;span style=&quot;color:#888888&quot;&gt;运行 Godot&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1080&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-275c64664e17a720f8b41463bda7d357019.png&quot; width=&quot;1920&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:center&quot;&gt;&lt;span style=&quot;color:#888888&quot;&gt;项目管理器&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;06 设置项目启动参数&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;在调试项目时，Godot 仍会使用默认的软渲染管线，因此需要将参数添加到项目设置：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span style=&quot;background-color:#ffdddd&quot;&gt;--display-driver wayland opengl_es3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:center&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:center&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong&gt;7 演示&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1080&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3cbe23da481204ee65863e485b0c066f4d4.png&quot; width=&quot;1920&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;span style=&quot;color:#888888&quot;&gt;3D 项目&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1080&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6d7da57c1c0dcda9102bc50297244b03d27.png&quot; width=&quot;1920&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;span style=&quot;color:#888888&quot;&gt;2D 项目&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1080&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-820b6b0a4996e1255e7cd716998189fd355.png&quot; width=&quot;1920&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:center&quot;&gt;&lt;span style=&quot;color:#888888&quot;&gt;代码编辑器&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;strong&gt;结语&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;通过本文的介绍，相信大家已经对如何在 openKylin 2.0 RISC-V 设备上编译和运行 Godot 有了初步的了解。随着 RISC-V 技术的不断成熟和普及，越来越多的开发者加入 RISC-V 生态建设，相信未来会有更多的创新和突破，为游戏开发者带来更多的机遇和挑战。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;目前，由&lt;strong&gt;Godot Hub 社区与 openKylin 社区&lt;/strong&gt;联合举办&lt;strong&gt;Godot x openKylin 开发大赛&lt;/strong&gt;正在火热进行中。大赛以 Godot 游戏引擎为核心编程工具，旨在激发创新活力，推动游戏开发技术的蓬勃发展，欢迎感兴趣的小伙伴积极参赛。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310648</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310648</guid>
            <pubDate>Fri, 06 Sep 2024 01:58:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>开源日报 | Qwen 在 GitHub 上显示 404；KK 预测人工智能三大趋势；IBM 败走中国；智谱 AI 又融资了；OpenBMC 成服务器固件发展的「事实标准」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.9.5&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要闻&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/310448/qwenlm-github-repo-404&quot;&gt;阿里通义千问全系列大模型被 GitHub 下架，所有仓库页面「404」&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p&gt;9 月 5 日早上，有开发者在社交平台上称在 GitHub 上打开阿里云 Qwen 页面后显示 404。&lt;/p&gt; 
 &lt;p&gt;阿里高级算法专家林俊旸在社交媒体上表示：「GitHub 因未知原因标记了我们的组织，我们正在尝试与他们联系以寻求解决方案。」&lt;/p&gt; 
 &lt;p&gt;直到当天下午，阿里通义千问全系列大模型的开源代码仓库恢复正常访问。&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FQwenLM&quot; target=&quot;_blank&quot;&gt;https://github.com/QwenLM&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0905/175943_6ZHA_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/310410/01-ai-yi-coder&quot;&gt;零一万物开源 Yi-Coder 系列编程助手模型&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;零一万物正式开源了 Yi-Coder 系列编程模型。Yi-Coder 系列模型专为编码任务而生，提供 1.5B 和 9B 两种参数。其中，Yi-Coder-9B 的表现号称 「优于其他 10B 参数以下的模型」，如 CodeQwen1.5 7B 和 CodeGeex4 9B，甚至能够 「与 DeepSeek-Coder 33B 相媲美」。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Yi-Coder 能够处理最长 128K tokens 的上下文内容，适用于复杂项目级代码的理解和生成。Yi-Coder 还支持 52 种主要编程语言。&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FtcuQJ56sxH8dL_2NJ3sUiw&quot; target=&quot;_blank&quot;&gt;微软在 Windows 11 集成中国开源大模型架构 RWKV、装机量近 5 亿&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;2024 年 9 月 ，RWKV 社区成员发现：Office 系统在自动更新后（版本 2407 及以后）已自带 RWKV 运行库。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;在 Windows 系统的&amp;nbsp;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;C:\Program Files\Microsoft Office\root\vfs\ProgramFilesCommonX64\Microsoft Shared\OFFICE16&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;目录，可以找到一系列&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;rwkv&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;dll（动态链接库） 文件。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;RWKV dll in Windows&quot; src=&quot;https://oscimg.oschina.net/oscnet/RWKV-dll-in-windows-os.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;由于正版 Windows 大多预装了 Office 365，因此，全球大多数 Windows 10 和 11 机器现已搭载 RWKV，包括线下商店中售卖的 Windows 机器。这意味着 RWKV 的装机量可达几亿台。&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;RWKV 是真正的开源架构（目前在&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flfaidata.foundation%2Fprojects%2Frwkv%2F&quot; target=&quot;_blank&quot;&gt;Linux Foundation 旗下&lt;/a&gt;），遵循 Apache 2.0 协议，可用于商业，欢迎大家在各个项目使用。&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;RWKV 的最新架构为 RWKV-6，且 RWKV-7 即将公布。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/310590&quot; target=&quot;news&quot;&gt;著名未来学家凯文·凯利（KK）预测人工智能三大趋势&lt;/a&gt;&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;2024 Inclusion・外滩大会今天在上海黄浦世博园区开幕。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;著名未来学家、《连线》杂志创始主编、《5000 天后的世界》作者凯文・凯利（Kevin Kelly，「KK」）在开幕主论坛上的演讲中指出，当人工智能深刻影响经济和文化，必将涌现三大趋势：&lt;strong&gt;全球主义、创新加速和 AI 驱动生成&lt;/strong&gt;。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-971603e73b5d38d489dc052d6f0f031beb7.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日观察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fxueqiu.com%2F3261990793%2F303707299&quot; target=&quot;_blank&quot;&gt;大鱼吃小鱼!AI 芯片初创公司，前景不妙 &lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;p&gt;从谷歌的 TPU、苹果的 M1 和 M2、微软 Maia 100 和 Cobalt 100、Meta 的 MTIA、亚马逊的 Trainium 和 Inferentia、特斯拉的 Dojo，到英特尔的 FPGA 系列、AMD 的 MI300 系列……巨头们一次次冲击着英伟达的帝国围墙。&lt;/p&gt; 
        &lt;p&gt;而在 AI 竞速的大时代里，涌现了一大批初创 GPU、AI 芯片公司，这些从业者和科技厂商们无不在找寻突破口。全球初创企业如今正试图证明它们可以在某些应用领域提供比行业巨头英伟达更好的芯片解决方案。虽然英伟达的 GPU 继续主导人工智能（AI）领域，但 AI 初创企业认为，GPU 的高能耗和庞大的设计留下了市场空隙，供新兴企业填补，希望分享 AI 技术繁荣带来的利益。&lt;/p&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;p style=&quot;text-align:right&quot;&gt;&lt;span&gt;- &lt;strong&gt;半导体产业纵横&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1658606840%2FOvw3582XP%3Frefer_flag%3D1001030103_&quot; target=&quot;_blank&quot;&gt;RWKV.cpp 是底层 C++实现通过传统 C 接口暴露带 Python 调用入口的 loader&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;p&gt;所以 RWKV 是基于 RNN 但达到 Transformer 性能的模型架构，而这个 RWKV.cpp 是底层 C++实现通过传统 C 接口暴露带 Python 调用入口的 loader。特点就是可以在 CPU 上通过 SSE 啊 NEON 啊这些指令集跑得飞快，当然也兼容 GPU，所以低耗高效。好的好的，C++项目我喜欢，不管三七二十一先 fork 一个先&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;&lt;span&gt;wingc&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2Fttarticle%2Fp%2Fshow%3Fid%3D2309405075207596671014&quot; target=&quot;_blank&quot;&gt;第一个 100% 开源的 MoE 大模型，7B 的参数，1B 的推理成本&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;训练代码、中间 checkpoint、训练日志和训练数据都已经开源。&lt;/p&gt; 
    &lt;p&gt;尽管大语言模型 (LM) 在各种任务上取得了重大进展，但在训练和推理方面，性能和成本之间仍然需要权衡。&lt;/p&gt; 
    &lt;p&gt;对于许多学者和开发人员来说，高性能的 LM 是无法访问的，因为它们的构建和部署成本过高。改善成本 - 性能的一种方法是使用稀疏激活混合专家 (MoE)。MoE 在每一层都有几个专家，每次只激活其中的一个子集（参见图 2）。这使得 MoE 比具有相似参数量的密集模型更有效，因为密集模型为每个输入激活所有参数。&lt;/p&gt; 
    &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;&lt;span&gt;机器之心&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F7825731473%2FOvtOXuNy0&quot; target=&quot;_blank&quot;&gt;LakeSoul 提供了原生的 Python 接口&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     LakeSoul 提供了原生的 Python 接口，可以很方便地将数据湖的数据跟模型训练进行挂钩；LakeSoul 也支持向量检索，对外会提供一个融合检索服务层，支持向量检索、sql 检索、文件检索于一体的多模态融合检索，能极致赋能大模型在行业应用的落地。
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;朱亚东-数元灵&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒体观察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.com.cn%2Farticle_6192937794_17120bb4202002b75s.html&quot; target=&quot;_blank&quot;&gt;IBM 败走中国&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;p&gt;在过去二十年间，IBM 犯了一系列战略错误，包括在云计算领域的布局起步较晚，错过利用开源生态系统构建其产品和服务的机遇；传统业务市场被云计算和现代化服务替代者抢占；备受期待的人工智能平台 Watson 商业化应用不达预期。&lt;/p&gt; 
       &lt;p&gt;2012 年开始，IBM 全年营收开始逐年下降，2013 年营收跌破千亿。到 2023 年，IBM 营收仅有 618 亿美元。&lt;/p&gt; 
       &lt;p&gt;业绩下滑原因系传统硬件业务销售下滑，云计算和软件业务逐渐成为 IBM 的核心收入来源，新兴业务虽然增长迅速，但未能完全弥补传统业务下滑的影响。&lt;/p&gt; 
       &lt;p&gt;而在中国，IBM 要面临更为复杂的境况。&lt;/p&gt; 
       &lt;p&gt;美国对中国的技术出口限制、对中国企业的制裁，导致外企在中美之间的研发合作、技术转移和跨境数据流动变得比以往更加困难。在移动互联网兴起的十年前，人们认为世界会越来越「平」，随着信息高速流通，国家之间的鸿沟将被逐渐弥合。但十年后的今天，全球化开始退潮，「地球村」的畅想已成明日黄花。&lt;/p&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;-&amp;nbsp;&lt;strong&gt;界面新闻&lt;/strong&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fishare.ifeng.com%2Fc%2Fs%2F8cd4fMakARr&quot; target=&quot;_blank&quot;&gt;智谱 AI，又融资了&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;今日，伴随中关村科学城公司通过公众号宣布以投前 200 亿元估值，领投智谱新一轮融资，方才尘埃落定。&lt;/p&gt; 
  &lt;p&gt;对于投后估值以及更多融资信息，智谱官方未给予置评。而这也是智谱，连续两年，年内被曝完成 3 轮融资。去年至今，该公司已完成 6 轮融资。&lt;/p&gt; 
  &lt;p&gt;值得一提的是，智谱先后获得阿里、腾讯、美团、小米等诸多互联网大厂押注，以及红杉、高瓴、君联、顺为等知名机构的投资，在 AI 大模型公司中，可谓一枝独秀。&lt;/p&gt; 
  &lt;p&gt;成立至今，智谱一直是市场上炙手可热的存在。早在 2019 年 8 月，成立仅 2 个月，华控基金、中科创星等就已火速入股。2021-2021 年，该公司则先后在 9 月份获得 A、B 轮融资。&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;猎云网&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.prnasia.com%2Fstory%2F459676-1.shtml&quot; target=&quot;_blank&quot;&gt;阿里云、字节、浪潮信息、英特尔、电标院：OpenBMC 成服务器固件发展的「事实标准」&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;传统 BMC 虽然可以实现部分管理，但是在快速迭代的当今尤其是在 AI 技术的驱动下，存在开发周期长、交付困难、应用单一等难题，并且由于其代码闭源也会导致隐藏的安全漏洞无法及时识别，限制了用户定制开发。OpenBMC 凭借领先的开源理念、可扩展的软件架构，被大型互联网厂商广泛应用，并带动了产业连上下游共同探索，逐步成为服务器固件发展的&quot;事实标准&quot;。&lt;/p&gt; 
 &lt;p&gt;在日前召开的 2024 开放计算中国峰会上，来自阿里云、字节跳动、浪潮信息、英特尔以及电子标准院的专家，从自身探索和实践的角度，现身说法各家在 OpenBMC 方面的最新进展及未来规划。&lt;/p&gt; 
 &lt;div&gt; 
  &lt;div style=&quot;text-align:right&quot;&gt;
   &lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt; 
   &lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;美通社&lt;/span&gt;&lt;/strong&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcj.sina.com.cn%2Farticles%2Fview%2F2853016445%2Faa0d937d02000ztnm&quot; target=&quot;_blank&quot;&gt;通信效率超 98%！壁仞科技实现中国首个三种异构芯片混训技术&lt;/a&gt;&lt;/h4&gt; 
 &lt;p&gt;为了解决用户需求和技术挑战，壁仞科技团队攻坚异构 GPU 训练难点，自主研发出原创异构 GPU 协同训练方案 HGCT，通过异构调度、异构通信、异构拆分三层架构，实现了一套统一方案支持多种不同型号、不同厂商的 GPU，业界首次支持 3 种及以上异构 GPU 混合训练同一个大模型。&lt;/p&gt; 
 &lt;p&gt;壁仞科技表示，这一异构 GPU 协同训练方案对于行业端有两个意义：1、该方案最终价值实现了国产 GPU 和英伟达 GPU 的异构共存，突破异构算力孤岛难题，加快国产 GPU 的落地迁移，助力国产大模型落地；2、该方案赋能整个算力产业发展，壁仞 HGCT 方案具备普适性、易用性、兼容性，助力最终客户实现多种异构算力聚合，最大化异构 GPU 集群利用效率。&lt;/p&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt; &lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;钛媒体&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F19LhsTqTbrK4mlnnBB6JHA&quot; target=&quot;_blank&quot;&gt;「稚晖君」 停更这一年：想赢下人形机器人，要像运营大公司那样去创业&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p&gt;「在学校里学习更多是自底向上，先打好基础然后做上层应用，出了校园之后更多是自顶向下，以项目导向，缺啥学啥。」 彭志辉说。聊到时间管理方法，他说是 「操作系统中的抢占式调度」，动态调整任务优先级，允许打断，但是任何时间都专注于当前的任务。&lt;/p&gt; 
   &lt;p&gt;他不喜欢 「天才少年」 的称呼，他觉得教科书中那些能改变人类发展进程的科学家才是天才。&lt;/p&gt; 
   &lt;p&gt;相比过去用几个月就能独自完成的小型项目，参与创办一家公司开发成功的产品要难得多。他要从单兵作战走向带团队协作，做出来的东西不能只是酷，还要能赚钱。这是一场新的、更复杂的学习。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;晚点 LatePost&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推荐&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://my.oschina.net/u/5783135/blog/15671421&quot; target=&quot;news&quot;&gt;深入理解 Babel - 微内核架构与 ECMAScript 标准化&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p&gt;随着浏览器版本的持续更新，浏览器对 JavaScript 的支持越来越强大，Babel 的重要性显得较低了。但 Babel 的设计思路、背后依赖的 ECMAScript 标准化思想仍然值得借鉴。&lt;/p&gt; 
   &lt;p&gt;本文涉及的 Babel 版本主要是 V7.16 及以下，截至发文时，Babel 最新发布的版本是 V7.25.6，未出现大版本更新，近 2 年也进入了稳定迭代期，本文的分析思路基本适用目前的 Babel 设计。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;开源之声&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户观点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F98boIfNzaXHKZpvBC8Wt_g&quot; target=&quot;_blank&quot;&gt;Vue 3.5「天元突破红莲螺岩」正式发布&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：还在用 vue2.x， 也挺好&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：上月入职一公司。我之前学了 vue3，但公司项目是 vue2，写的我真难受，很不习惯&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FtL1KN4cMEUcGcMzwDy1KcA&quot; target=&quot;_blank&quot;&gt;阿里通义千问 (QwenLM) 全系列大模型被 GitHub 下架，访问 repo 显示「404」&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 1：已经快 5 年不用 github 了，中心化的东西一蹦全瘫痪了&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 2：应该是美国当局怀疑大模型背后有暗门，当心他们本国用户下载使用后被标记定位或外传数据，他们自己的大模型可是严格管控的。&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;观点 3：吓得我立刻备份 github 所有私有库&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最后，欢迎扫码下载「开源中国 APP」，阅读海量技术报告、程序员极客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310600</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310600</guid>
            <pubDate>Thu, 05 Sep 2024 11:53:54 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>著名未来学家凯文·凯利（KK）预测人工智能三大趋势</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;2024 Inclusion·外滩大会今天在上海黄浦世博园区开幕。&lt;/p&gt; 
&lt;p&gt;著名未来学家、《连线》杂志创始主编、《5000 天后的世界》作者凯文·凯利（Kevin Kelly，「KK」）在开幕主论坛上的演讲中指出，当人工智能深刻影响经济和文化，必将涌现三大趋势：&lt;strong&gt;全球主义、创新加速和 AI 驱动生成&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-971603e73b5d38d489dc052d6f0f031beb7.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;全球主义&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;全球正在共同构建一个基于技术的「超级有机体」，将全球的设备连接成巨大的计算系统，所有数字技术包括人工智能都运行在这个新平台上。&lt;/li&gt; 
 &lt;li&gt;全球主义推进推动了新兴的全球文化，人们的生活方式和穿着逐渐趋同，底层需求达成一致。&lt;/li&gt; 
 &lt;li&gt;人工智能将实现真正的「实时翻译」，打破全球语言障碍，加上增强现实（VR）技术，全球化「劳动力」将第一次出现。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;创新加速&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;AI 技术加速了创新的步伐，体现在新发明和新思想传播速度加快，通过增强现实（AR）和虚拟现实（VR）技术提高学习效率，AI 通过机器及其他传感器感知世界，以及 ChatGPT 等人工智能工具加快人们学习速度。&lt;/li&gt; 
 &lt;li&gt;当答案易得时，提出正确问题和掌握正确思维方式变得更有价值，「学会如何学习」将成为未来毕业生的核心技能。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;AI 驱动生成&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;人工智能能帮助人们摆脱机械、枯燥的工作，完成无法独立完成的任务，甚至生成超乎人类想象的全新事物。&lt;/li&gt; 
 &lt;li&gt;人工智能系统正在生成新事物且不断完善，人工智能是多样的，将填补许多智能领域。&lt;/li&gt; 
 &lt;li&gt;从人工智能工具中获益最多的是表现一般或较差的员工，人工智能工具能帮助他们更好地完成工作。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;回答中国网友提问：人类正在通过人工智能重塑文明&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 2024 外滩大会开幕之前，凯文·凯利通过外滩大会官方微信，&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FpIyyX-CR3HQs51Ot90H1TQ&quot; target=&quot;_blank&quot;&gt;向中国读者征集了关于 AI 的问题&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;5 日，外滩大会官方公布了凯文·凯利的回答。&lt;/p&gt; 
&lt;p&gt;对于&lt;strong&gt;人工智能是不是人类的下一个进化阶段&lt;/strong&gt;，凯文·凯利给出了肯定的答案，他认为，人工智能的重要性不亚于火、印刷术和工业革命，这将是广泛而巨大的变革。但至少需要一个世纪的时间来实现，甚至可能更长，不可能一蹴而就。&lt;/p&gt; 
&lt;p&gt;「人类正在通过人工智能重塑文明。」凯文·凯利说，也许一百万年来，我们一直是这个星球上唯一的智慧物种。但如今，我们正在创造人造「外星人」，就像他们来自遥远的星球，前来拜访我们一样。这些「外星人」的思想将被引入我们的世界，从而创造出一种新的文化。&lt;/p&gt; 
&lt;p&gt;对于&lt;strong&gt;如何确保人工智能带来的未来是有益的，而不是加剧不平等&lt;/strong&gt;，凯文·凯利表示，我们有理由对任何新技术保持谨慎，人工智能也不例外。「我认为，未来最大的问题之一可能会源自人工智能。但我们今天所担心的许多问题，或许并不是最难解决的，那些问题是可以应对的。真正的挑战可能是我们还未曾想象到的未知问题。」&lt;/p&gt; 
&lt;p&gt;他认为，首先要利用技术去引导它的发展，要实现我们期望的由人工智能驱动的未来，最好的途径之一就是积极参与其中，而不是试图禁止它或将其排斥在外。其次，应尽可能推动人工智能技术的开源化。开源模式赋予更多人参与的机会，形成一种更具包容性的技术生态系统。&lt;/p&gt; 
&lt;p&gt;在回答&lt;strong&gt;「未来哪些工作不会被人工智能取代」&lt;/strong&gt;时，凯文·凯利表示，正如当今就像几乎没有工作是不需要使用某种能源一样，未来几乎所有的工作都会使用某种程度的人工智能，但这并不意味着它们会被人工智能完全取代。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310590</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310590</guid>
            <pubDate>Thu, 05 Sep 2024 10:43:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>深入理解 Babel - 微内核架构与 ECMAScript 标准化｜得物技术</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;p&gt;&lt;em&gt;随着浏览器版本的持续更新，浏览器对 JavaScript 的支持越来越强大，Babel 的重要性显得较低了。但 Babel 的设计思路、背后依赖的 ECMAScript 标准化思想仍然值得借鉴。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;本文涉及的 Babel 版本主要是 V7.16 及以下，截至发文时，Babel 最新发布的版本是 V7.25.6，未出现大版本更新，近 2 年也进入了稳定迭代期，本文的分析思路基本适用目前的 Babel 设计。&lt;/em&gt;&lt;/p&gt; 
&lt;h1&gt;一、Babel 简介&lt;/h1&gt; 
&lt;h2&gt;Babel 是什么&lt;/h2&gt; 
&lt;p&gt;Babel 是 JavaScript 转译器，通过 Babel，开发者可以自由使用下一代 ECMAScript 语法。高版本 ECMAScript 语法将被转译为低版本语法，以便顺利运行在各类环境，如低版本浏览器、低版本 Node.js 等。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Babel 是转译器，不是编译器。下面是转译和编译的区别:&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;编译，一般指将一种语言转换为另一种语法和抽象程度等都不同的语言，常见的比如 gcc 编译器。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;转译，一般指将一种语言转换为不同版本或者抽象程度相同的语言，比如 Babel 可以把 ECMAScript 6 语法转译为 ECMAScript 5 语法。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;利用 Babel，开发者可以使用 ECMAScript 的各种新特性进行开发，同时花极少的精力关注浏览器或其他 JS 运行环境对新特性的支持。甚至，开发者可以根据自身需要，创造属于自己的 JavaScript 语法。&lt;/p&gt; 
&lt;p&gt;Babel 在转译的时候，会对源码进行以下处理: 语法转译 (Syntax) 和添加 API Polyfill。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/01_1725449415228.jpg&quot; alt=&quot;01.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;语法 (Syntax) 部分 Babel 支持识别高版本语法，并通过插件将源码从高版本语法转译为低版本语法，如:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;箭头函数 () =&amp;gt; {} 转为普通函数 function() {}。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;const / let 转译为 var&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;API Polyfill&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;有些运行时相关的 API，语法转译无法解决它们对低版本浏览器等环境的兼容性问题，因此 Babel 通过与 core-js 等工具的配合，实现 API 部分对目标环境 (通常是低版本浏览器等) 的兼容。&lt;/p&gt; 
&lt;p&gt;例如[1, 2, 3].include、Promise 等 API，Babel 在处理时，如果目标环节可能不支持原生的 include / Promise 的话，Babel 会在转译结果中嵌入 include / Promise 的自定义实现。&lt;/p&gt; 
&lt;p&gt;有多种方式可以使用 Babel，如: 命令行 (babel-cli、babel-node)、浏览器 (babel-standalone)、API 调用 (babel-core)、webpack loader(babel-loader) 等。&lt;/p&gt; 
&lt;h2&gt;转译过程&lt;/h2&gt; 
&lt;p&gt;和多数转译器相同，Babel 运行的生命周期主要是 3 个阶段: 解析、转换、代码生成。&lt;/p&gt; 
&lt;p&gt;这个过程涉及抽象语法树:&lt;/p&gt; 
&lt;p&gt;抽象语法树 (Abstract Syntax Tree，AST)，或简称语法树 (Syntax tree)，是源代码语法结构的一种抽象表示。&lt;/p&gt; 
&lt;p&gt;AST 是树形对象，以结构化的形式表示编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/02_1725514960565.jpg&quot; alt=&quot;02.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;源码字符串需要经转译器生成 AST，转译器有很多种，不同转译器，生成的 AST 对象格式细节可能有差异，但共同点为: 都是树形对象、该树形对象描述了节点特征、各节点之间的关系（兄弟、父子等）。&lt;/p&gt; 
&lt;p&gt;以下是 Babel 生命周期的三个过程:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;解析 (Parsing): Code1 ==&amp;gt; 抽象语法树 1 解析过程包括 2 个环节: 词法解析、语法解析，最终生成抽象语法树。 词法解析阶段，代码字符串被解析为 token 令牌数组，数组项是一个对象，包括: 代码字符碎片的值、位置、类型等信息。 token 数组是平铺式的数组，没有嵌套的结构信息，它是为语法解析阶段做准备的。 语法解析阶段，token 令牌数组被解析为结构化的抽放语法树对象 (AST)。 babel-parser 完成该阶段的主要功能。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/03_1725515016480.jpg&quot; alt=&quot;03.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;转换 (Transformation): AST1 ==&amp;gt; AST2 Babel 生成 AST 后，会对 AST 进行遍历，遍历过程中，各类插件对原 AST 对象进行增删改查等操作，AST 结构被修改。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/04_1725515063201.jpg&quot; alt=&quot;04.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;代码生成 (Generation): AST2 ==&amp;gt; Code2 Babel 将修改后的 AST 对象转目标代码字符串。 babel-generator 完成该阶段的主要功能。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/05_1725515093407.jpg&quot; alt=&quot;05.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;二、Babel 微内核架构&lt;/h1&gt; 
&lt;h2&gt;微内核架构&lt;/h2&gt; 
&lt;p&gt;Babel 采用微内核架构，其内核保留核心功能，其余功能利用外部工具和插件机制实现，也体现了&quot;开放-封闭&quot;的设计原则。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/06_1725515126255.jpg&quot; alt=&quot;06.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;除了微内核设计架构，Babel 的模块设计也可以做如下分类:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/07_1725515157896.jpg&quot; alt=&quot;07.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;转译模块&lt;/h2&gt; 
&lt;p&gt;转译模块位于 Babel 微内核架构的&quot;微内核&quot;部分，该部分主要负责代码转译，也就是上面提到的&quot;解析-转换-代码生成&quot;过程。&lt;/p&gt; 
&lt;p&gt;该模块主要包括: babel-parser、babel-traverse、babel-generator。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;babel-parser 负责将代码字符串转为 AST 对象。 有 2 点值得一提:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;babel-parser 本身并不会对 AST 做转换操作，只是负责解析出 AST。AST 转换部分交由各类 plugins 和 presets 处理。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;babel-parser 内置了对 ESNext/TypeScript/JSX/Flow 最新版本语法的支持，但很多默认是不开启的，目前没有开放插件机制扩展新语法。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-traverse 在转译过程中，babel-traverse 负责遍历 AST 节点，并根据配置的 plugins/presets，在遍历过程中，对各个 AST 节点进行增删改查的操作。 AST 是一个树形对象，遍历 AST 对象的过程也是一个深度优先遍历的过程。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-generator 负责将 AST 节点，转为代码字符串，同时也可以生成 source-map。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;插件模块&lt;/h2&gt; 
&lt;p&gt;插件模块包括 plugins、presets。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;plugins 丰富的插件，帮助 Babel 成为一个非常成功的转译工具。 对 AST 的遍历、转换是 Babel 转译的核心功能，但 Babel 本身并不参与该过程，将这些功能作为插件引入到运行时。 具体来说，babel-core 作为核心工具，不提供对 AST 的修改逻辑，通过调用各类插件，实现对 AST 的修改。 Babel 的插件分为语法插件和转换插件。&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;语法插件，值得注意的是，babel-parser 负责将 JavaScript 代码解析出抽象语法树 (AST)，它支持全面识别 ESNext/TypeScript/JSX/Flow 等语法，目前由 Babel 团队开发维护，不支持插件化。 Babel 插件生态中的语法插件，其功能就是作为&quot;开关&quot;，配置是否开启 babel-parser 的某些语法转译功能。 语法插件在 Babel 源码中，以 babel-plugin-syntax 开头。 举个例子:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;babel-plugin-syntax-decorators 负责开启 babel-parser 对装饰器的语法支持。&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;babel-plugin-syntax-dynamic-import 负责开启 babel-parser 对 import 语句的语法支持。&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;babel-plugin-syntax-jsx 负责开启 babel-parser 对 jsx 语法的支持。&lt;/p&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;转换插件，转换插件就是社区里常说的 Babel 插件，负责转换 AST 节点。 在介绍 babel-traverse 时提到，它负责遍历 AST 对象，每个 AST 节点会被访问到，等待转换，转换的部分，由&quot;转换插件&quot;负责。 转换插件会提供一个叫做&quot;Visitor&quot;的对象，该对象的 Key 为节点名称，Value 部分提供进入该节点时、离开该节点时的回调函数，在回调函数里，可以对该节点进行一系列操作。 &quot;Visitor&quot; 又称为 &quot;访问者&quot;。&lt;/p&gt; &lt;p&gt;// plugin 提供 visitor，在 visitor 中对 AST 节点操作 const visitor = { Program: { enter() {}, exit() {}, },&lt;/p&gt; &lt;pre&gt;&lt;code&gt;CallExpression: {
    enter() {},
    exit() {},
},

NumberLiteral: {
    enter() {},
    exit() {},
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;}; traverse(ast, visitor);&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;转换插件在 Babel 源码中，以 babel-plugin-transform 开头。&lt;/p&gt; 
&lt;p&gt;举个例子:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-plugin-transform-strict-mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;该插件拦截 Program 节点，也就是整个程序的根节点，添加 &quot;use strict&quot;指令。&lt;/p&gt; 
&lt;p&gt;visitor 节点值为函数时，是 enter 回调的快捷方式。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
    name: &quot;transform-strict-mode&quot;,

    visitor: {
      Program(path) {
        const { node } = path;

        for (const directive of node.directives) {
          if (directive.value.value === &quot;use strict&quot;) return;
        }

        path.unshiftContainer(
          &quot;directives&quot;,
          t.directive(t.directiveLiteral(&quot;use strict&quot;)),
        );
      },
    },
  };
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-plugin-transform-object-assign&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;该插件负责拦截函数调用表达式节点 CallExpression，将 Object.assign 转为 extends 写法。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
    name: &quot;transform-object-assign&quot;,

    visitor: {
      CallExpression(path, file) {
        if (path.get(&quot;callee&quot;).matchesPattern(&quot;Object.assign&quot;)) {
          path.node.callee = file.addHelper(&quot;extends&quot;);
        }
      },
    },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Presets&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Babel 插件的功能是细粒度的，大部分插件承担了单一功能。&lt;/p&gt; 
&lt;p&gt;而在实际开发过程中，往往需要支持对各类语法的支持。此时，有两种做法:&lt;/p&gt; 
&lt;p&gt;A. 需要支持哪些特性，就分别引入支持该特性的插件&lt;/p&gt; 
&lt;p&gt;B. 直接引入一个插件集合，涵盖所需的各类插件功能&lt;/p&gt; 
&lt;p&gt;很显然，第一种做法是相对麻烦的。针对第二种做法，Babel 提供了插件集 preset。&lt;/p&gt; 
&lt;p&gt;preset 在 Babel 源码中，以 babel-preset 开头。&lt;/p&gt; 
&lt;p&gt;例如，Babel 已经提供了几种常用的 preset 供开发者使用:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;babel-preset-env&lt;/li&gt; 
 &lt;li&gt;babel-preset-react&lt;/li&gt; 
 &lt;li&gt;babel-preset-flow&lt;/li&gt; 
 &lt;li&gt;babel-preset-typescript&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;插件运行顺序&lt;/strong&gt; Babel 配置项中，plugins 和 presets 均以数组的形式配置，执行时有先后顺序。&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;plugins 在 presets 之前运行&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;plugins 按照数组正序执行&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;presets 按照数组倒序执行&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/08_1725519262475.jpg&quot; alt=&quot;08.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;工具模块&lt;/h2&gt; 
&lt;p&gt;工具模块提供 Babel 相关模块所需的各类工具，以下一一简要介绍:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;babel-core babel-core 对外提供了 Babel 多项功能的 API，如转译文件、转译代码、创建/获取配置等，在 Babel 官方文档介绍的比较详细，不再赘述。 值得注意的是，转译类的 API 均提供了同步和异步版本，如 transformSync/transfomAsync、parseSync/parseAsync。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-cli Babel 的命令行工具，可以直接转译文件夹/文件，它也提供了很多配置项做其他工作，官方文档介绍的比较详细，感兴趣的同学可以去 Babel 官网查看详细配置。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-standalone Babel 对外服务的很多包是基于 node 环境下使用的，babel-standalone 提供了浏览器下转译的方案。 babel-standalone 内置了所有 Babel 插件，所以体积还是比较大的，而且在浏览器端转译需要时间，比较适合开发、学习使用，不适合在生产环境使用。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;举个例子:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;
    &amp;lt;title&amp;gt;test babel-standalone&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/babel&quot;&amp;gt;
      const arr = [1, 2, 3];
      console.log(...arr);
&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在浏览器运行该 html，可以看到，页面结构变成了:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;
    &amp;lt;title&amp;gt;test babel-standalone&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/babel&quot;&amp;gt;
      const arr = [1, 2, 3];
      console.log(...arr);
&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
      &quot;use strict&quot;;
      var _console;
      var arr = [1, 2, 3];
      (_console = console).log.apply(_console, arr); //# sourceMappingURL=data:application/json;charset=utf-8;base64...
&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-node 提供在命令行执行高级语法的环境。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;例如:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// index.js 里可以使用高级语法     
babel-node -e index.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;index.js 文件以及被其引入的其他文件均可以使用高级语法了。和 babel-cli 不同的是，babel-cli 只负责转换，不在 node 运行时执行；babel-node 会在 node 运行时执行转换，不适合生产环境使用。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-register&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在源文件中，引入 babel-register，如 index.js:&lt;/p&gt; 
&lt;p&gt;index.js&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;require(&#39;babel-register&#39;);     
require(&#39;./run&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;run.js&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import fs from &#39;fs&#39;;     
console.log(fs);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;执行 node index 时，run.js 就不需要被转码了。&lt;/p&gt; 
&lt;p&gt;babel-register 通过拦截 node require 方法，为 node 运行时引入了 Babel 的转译能力。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-loader&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;babel-loader 是利用 babel-core 的 API 封装的 webpack loader，用于 webpack 构建过程。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-types&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;babel-types 是一个非常强大的工具集合，它集成了节点校验、增删改查等功能，是 Babel 核心模块开发、插件开发等场景下不可或缺的工具。&lt;/p&gt; 
&lt;p&gt;例如:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const t = require(&#39;@babel/types&#39;);
const binaryExpression = t.binaryExpression(&#39;+&#39;, t.numericLiteral(1), t.numericLiteral(2));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-template&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;模板引擎，负责将代码字符串转为 AST 节点对象。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    import { smart as template } from &#39;@babel/template&#39;;
    import generate from &#39;@babel/generator&#39;;
    import * as t from &#39;@babel/types&#39;;

    const buildRequire = template(      var %%importName%% = require(%%source%%);    );

    const ast = buildRequire({
        importName: t.identifier(&#39;myModule&#39;),
        source: t.stringLiteral(&quot;my-module&quot;),
    });

    const code = generate(ast).code

    console.log(code)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;运行结果:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;var myModule = require(&quot;my-module&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-code-frame&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;负责打印出错的代码位置，例如:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const { codeFrameColumns } = require(&#39;@babel/code-frame&#39;);

const testCode = `
class Run {
    constructor() {}
}
`;

const location = {
    start: {
        line: 2,
        column: 2,
    }
};

const result = codeFrameColumns(testCode, location);

console.log(result);

  1 | class Run {
&amp;gt; 2 |     constructor() {}
    |  ^
  3 | }
  4 |
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;babel-highlight&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;向控制枱输出有颜色的代码片段。该工具可以识别 JavaScript 中的操作符号、标识符、保留字等类型的词法单元，并在终端环境下显示不同的颜色。&lt;/p&gt; 
&lt;h2&gt;运行时相关模块&lt;/h2&gt; 
&lt;p&gt;Babel 配合其插件可以对静态代码进行转译，但有一些遗漏点:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;对于运行时涉及的一些高版本 API，并没有提供兼容目标环境的 Polyfill。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;转译产物代码可能有些臃肿。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;为此，运行时模块 (runtime) 关注的是转译产物的运行时环境，对运行时提供 API polyfill、代码优化等，该模块涉及几个子包:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;babel-preset-env&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-plugin-transform-runtime&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-runtime&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-runtime-corejs2/3&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;core-js&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;接下来以案例解释 runtime 模块的作用。&lt;/p&gt; 
&lt;p&gt;源码文件 index.js 的内容:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const a = 1; // const 为语法部分
class Base {} // class 为语法部分
new Promise() // Promise 为 API 部分
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这段源码包含了语法和 API 部分:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;const、class 为语法部分&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Promise 为 API 部分&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;如果希望这段源码转为 ES5 版本，使构建产物可以运行在不支持 ES6 和 Promise 的环境里，该怎么做呢？&lt;/p&gt; 
&lt;p&gt;用 babel 命令行执行转译，其中源文件为 index.js，转译产物文件为 index-compiled.js。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npx babel index.js --out-file index-compiled.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;需要配置.babelrc 帮助 Babel 完成语法和 API 部分的转译:&lt;/p&gt; 
&lt;p&gt;.babelrc:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
    &quot;presets&quot;: [
        [ 
            &quot;@babel/preset-env&quot;
        ]
    ],
    &quot;plugins&quot;: [
        [
            &quot;@babel/plugin-transform-runtime&quot;,
            {
                &quot;corejs&quot;: 3
            }
        ]
    ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;简要解释下该配置的原理:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;babel-preset-env 可以完成语法部分转译，即 const 转译为 var 但构建产物中，有些辅助代码如 _classCallCheck 是以硬编码的形式直接写入转译产物的:&lt;/p&gt; &lt;p&gt;&quot;use strict&quot;;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(&quot;Cannot call a class as a function&quot;); } }

  var a = 1;

  var Base = function Base() {
      _classCallCheck(this, Base);
  };

  new Promise();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;这样的后果就是构建产物比较臃肿。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;babel-plugin-transform-runtime 可以将上述 _classCallCheck 置于通用包中，以引用的形式写入转译产物:&lt;/p&gt; &lt;p&gt;&quot;use strict&quot;;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  var _interopRequireDefault = require(&quot;@babel/runtime/helpers/interopRequireDefault&quot;);

  var _classCallCheck2 = _interopRequireDefault(require(&quot;@babel/runtime/helpers/classCallCheck&quot;));

  var a = 1;

  var Base = function Base() {
      (0, _classCallCheck2[&quot;default&quot;])(this, Base);
  };

  new Promise();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;babel-plugin-transform-runtime 的配置参数 corejs 用于转译 API 部分，如 Promsie&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  &quot;use strict&quot;;

  var _interopRequireDefault = require(&quot;@babel/runtime-corejs3/helpers/interopRequireDefault&quot;);

  var _promise = _interopRequireDefault(require(&quot;@babel/runtime-corejs3/core-js-stable/promise&quot;));

  var _classCallCheck2 = _interopRequireDefault(require(&quot;@babel/runtime-corejs3/helpers/classCallCheck&quot;));

  var a = 1;

  var Base = function Base() {
      (0, _classCallCheck2[&quot;default&quot;])(this, Base);
  };

  new _promise&quot;default&quot;;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Babel 转译过程的运行时优化是一个繁琐的过程，为此将单独用一章讲解运行时优化，感兴趣的同学可以直接阅读 &quot;Babel Runtime&quot; 章节详细了解。&lt;/p&gt; 
&lt;h1&gt;三、标准化&lt;/h1&gt; 
&lt;p&gt;Babel 生态涉及的一些标准化组织。无论是 JavaScript、HTML、DOM、URL 等领域，均需要统一的标准，才能在不同的运行环境下有统一的表现。Babel 转译也需要遵循这些标准，包括 ECMAScript、web 标准等。&lt;/p&gt; 
&lt;h2&gt;ECMAScript&lt;/h2&gt; 
&lt;h3&gt;JavaScript 诞生&lt;/h3&gt; 
&lt;p&gt;1995 年，JavaScript 的第一个版本发布。用时间线的方式描述 JavaScript 的诞生过程会更清晰:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/09_1725519904874.jpg&quot; alt=&quot;09.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;ECMAScript 发布&lt;/h3&gt; 
&lt;p&gt;1996 年，微软模仿 JavaScript 实现了 JScript 并内置在 IE3.0，随后，Netscape 公司着手推动 JavaScript 标准化。&lt;/p&gt; 
&lt;p&gt;这里涉及几个组织:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Ecma International Ecma International 是一家国际性会员制度的信息和电信标准组织。1994 年之前，名为欧洲计算机制造商协会（European Computer Manufacturers Association）。因为计算机的国际化，组织的标准牵涉到很多其他国家，因此组织决定改名表明其国际性。 Ecma International 的任务包括与有关组织合作开发通信技术和消费电子标准、鼓励准确的标准落实、和标准文件与相关技术报告的出版。 Ecma International 负责多个国际标准的制定:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;CD-ROM 格式（之后被国际标准化组织批准为 ISO 9660）&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;C# 语言规范&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;C++/CLI 语言规范&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;通用语言架构（CLI）&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Eiffel 语言&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;电子产品环境化设计要素&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Universal 3D 标准&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;OOXML&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Dart 语言规范&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;ECMAScript 语言规范（以 JavaScript 为基础）ECMA-262 其中就包括 JavaScript 标准语言规范 ECMAScript。 cma International 拥有 ECMAScript 的商标。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ECMA TC39 「TC39」全称「Technical Committee 39」译为「第 39 号技术委员会」，是 Ecma International 组织架构中的一部分。 TC39 负责迭代和发展 ECMAScript，它的成员由各个主流浏览器厂商的代表组成，通常每年召开约 6 次会议来讨论未决提案的进展情况，会议的每一项决议必须得到大部分人的赞同，并且没有人强烈反对才可以通过。 TC39 负责:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;维护和更新 ECMAScript 语言标准&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;识别、开发、维护 ECMAScript 的扩展功能库&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;开发测试套件&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;为 ISO/IEC JTC 1 提供标准&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;评估和考虑新添加的标准&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ISO&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;国际标准化组织（英语: International Organization for Standardization，简称: ISO）成立于 1947 年 2 月 23 日，制定全世界工商业国际标准的国际标准建立机构。&lt;/p&gt; 
&lt;p&gt;ISO 的国际标准以数字表示，例如: &quot;ISO 11180:1993&quot; 的 &quot;11180&quot; 是标准号码，而 &quot;1993&quot; 是出版年份。&lt;/p&gt; 
&lt;p&gt;ISO/IEC JTC 1 是国际标准化组织和国际电工委员会联合技术委员会。其目的是开发、维护和促进信息技术以及信息和通信技术领域的标准。JTC 1 负责了许多关键的 IT 标准，从 MPEG 视频格式到 C++ 编程语言。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/10_1725520572128.jpg&quot; alt=&quot;10.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMAScript 发展过程中的关键节点&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/11_1725520594519.jpg&quot; alt=&quot;11.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;ECMAScript 各版本&lt;/h3&gt; 
&lt;p&gt;ECMAScript 经历了多个版本，每个版本有自己的特点，简单列举如下:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/12_1725520728091.jpg&quot; alt=&quot;12.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/13_1725520738100.jpg&quot; alt=&quot;13.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;ECMAScript 迭代过程&lt;/h3&gt; 
&lt;p&gt;一个 ECMAScript 标准的制作过程，包含了 Stage 0 到 Stage 4 共 5 个阶段，每个阶段提交至下一阶段都需要 TC39 审批通过。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/14_1725520848631.jpg&quot; alt=&quot;14.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/15_1725520864402.jpg&quot; alt=&quot;15.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;特性进入 Stage-4 后，才有可能被加入标准中，还需要 ECMA General Assembly 表决通过才能进入下一次的 ECMAScript 标准中。&lt;/p&gt; 
&lt;h2&gt;如何阅读 ECMAScript&lt;/h2&gt; 
&lt;h3&gt;ECMAScript 文档结构&lt;/h3&gt; 
&lt;p&gt;ECMAScript 的规格，可以在 ECMA 国际标准组织的官方网站免费下载和在线阅读。&lt;/p&gt; 
&lt;p&gt;查看 ECMAScript 不同版本的地址：&lt;em&gt;++&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fecma-international.org%2Fpublications-and-standards%2Fstandards%2Fecma-262%2F%2B%2B&quot; target=&quot;_blank&quot;&gt;https://ecma-international.org/publications-and-standards/standards/ecma-262/++&lt;/a&gt;&lt;/em&gt;。&lt;/p&gt; 
&lt;p&gt;截至 2023 年底，已发布的版本如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262 5.1 edition, June 2011&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F5.1%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/5.1/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 6th edition, June 2015&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F6.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/6.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 7th edition, June 2016&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F7.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/7.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 8th edition, June 2017&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F8.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/8.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 9th edition, June 2018&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F9.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/9.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 10th edition, June 2019&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F10.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/10.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 11th edition, June 2020&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F11.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/11.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 12th edition, June 2021&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F12.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/12.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 13th edition, June 2022&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F13.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/13.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ECMA-262, 14th edition, June 2023&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;（&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F14.0%2Findex.html%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/14.0/index.html）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;每个版本有独立的网址，格式为: &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F%7Bversion%7D%2F%EF%BC%8C%E6%AF%94%E5%A6%82&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/{version}/，比如&lt;/a&gt; ECMAScript 14.0 版本的网址为 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F262.ecma-international.org%2F14.0%2F%E3%80%82&quot; target=&quot;_blank&quot;&gt;https://262.ecma-international.org/14.0/。&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;从章节数量上，ECMAScript 6.0、ECMAScript 7.0 有 26 章，之后的版本有 27-29 章，虽然章节数量不同，规格章节的分布是保持一定规律的，以 ECMAScript 11.0 版本为例:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Introduction: 介绍部分&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;该章节简要描述了: JavaScript 和 ECMAScript 的发展历史、不同 ECMAScript 规格的主要更新内容。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;第 1 章到第 3 章: 描述了规格文件本身，而非语言&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;第 1 章用一句话描述了该规格的描述范围。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;第 2 章描述了基于规格的&quot;实现&quot;的一致性要求:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;&quot;实现&quot;必须支持规格中描述的所有类型、值、对象、属性、函数以及程序的语法和语义&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;&quot;实现&quot;必须按照 Unicode 标准和 ISO/IEC 10646 的最新版本处理文本输入&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;&quot;实现&quot;如果提供了应用程序编程接口（API），那么该 API 需要适应不同的人文语言和国家差异，且必须实现最新版本的 ECMA-402 所定义的与本规范相兼容的接口&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;&quot;实现&quot;可以支持该规格中没有提及的类型、值、对象、属性、函数、正则表达式语法以及其他编程写法&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;&quot;实现&quot;不能实现该规格中禁止的写法&lt;/p&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;第 3 章描述了该规格的一些参考资料:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;ISO/IEC 10646&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;ECMA-402&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;EMCA-404 JSON 数据交换格式规范&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;第 4 章: 对这门语言总体设计的描述。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;第 5 章到第 8 章: 语言宏观层面的描述。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;第 6 章介绍数据类型。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;第 7 章介绍语言内部用到的抽象操作。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;第 8 章介绍代码如何运行。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;第 9 章到第 27 章: 介绍具体的语法。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;一般而言，除非写编译器，开发者无需阅读 ECMAScript 的规格，规格的内容非常多，如无必要也无需通读。只是在遇到一些奇怪的问题时，阅读官方规格，是最稳妥的办法。&lt;/p&gt; 
&lt;h3&gt;通过阅读规格解决一些问题（以 ECMAScript 11.0 为例）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;识别关键词和保留字，并高亮 Babel 工具集中的 babel-highlight，可以实现在终端对代码块中的目标字符单元显示不同的颜色。这里需要识别不同字符单元的类型，如关键字、保留字、标识符、数字、字符串等。 标识符、数字、字符串都很好理解和识别，但哪些字符应该被识别为关键字、保留字，而不是标识符呢？ 此时可以阅读 ECMAScript 规格了，ECMAScript 11.0 规格的 11.6.2 节介绍了关键词和保留字列表。&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;关键词（keywords） 关键词首先是标识符，同时有语义，包括 if、while、async、await...，个别关键词是可以用作变量名的。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;保留字（reserved word） 保留字首先是标识符，但不能用作变量名。 部分关键词是保留字，但部分不是: if、while 是保留字；await 只有在 async 方法和模块中才是保留字；async 不是保留字，它可以作为普通的变量名使用。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;保留字列表&lt;/p&gt; &lt;p&gt;await break case catch class const continue debugger default delete do else enum export extends false finally for function if import in instanceof new null returns uper switch this throw true try typeof var void while with yield&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;读完上述规格，也就知道哪些字符单元是需要识别为保留字与关键词，并高亮的了。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;识别全局对象，并高亮，继续使用 babel-highlight 实现代码块中的全局对象高亮，那么，我们需要知道哪些是规格中描述的全局变量。 规格的 18 章介绍了全局对象，通过该章的描述，可以知道:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;全局属性，全局属性有: globalThis、Infinity、NaN、    。&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;全局方法，全局方法有: eval(x)、isFinite、isNaN、parseFloat、parseInt、decodeURIComponent、encodeURIComponent 等。&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;全局构造函数，全局的构造函数有:&lt;/p&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;p&gt;Array ArrayBuffer BigInt BigInt64Array BigUnit64Array Boolean DataView Date Error EvalError Float32Array Float64Array Function Int8Array Int16Array Int32Array Map Number Object Promise Proxy RangeError ReferenceError RegExp Set SharedArrayBuffer String Symbol SyntaxError TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array URIError WeakMap WeakSet&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;其他的全局属性 Atomics、JSON、Math、Reflect。 很显然，当字符单元的名称是上述名称中的一员时，我们可以对其进行高亮处理了（若上下文中无重新定义的同名变量）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;自定义 Error babel-loader 自身维护了私有的 LoaderError 对象，该对象继承自原生 Error 类，并且订制了部分实例属性。代码如下:&lt;/p&gt; &lt;p&gt;class LoaderError extends Error { constructor(err) { super();&lt;/p&gt; &lt;pre&gt;&lt;code&gt;      const { name, message, codeFrame, hideStack } = format(err);

      this.name = &quot;BabelLoaderError&quot;;

      this.message = ${name ? ${name}: ` : &quot;&quot;}${message}\n\n${codeFrame}\n`;

      this.hideStack = hideStack;

      Error.captureStackTrace(this, this.constructor);
  }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;}&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;可以看到，babel-loader 自定义了错误实例的 name、message、hideStack 属性，那么，问题是，原生的 Error 类有哪些属性和方法，哪些是开发者可以自定义的呢？&lt;/p&gt; 
&lt;p&gt;规格的 19.5 章节，详细介绍了 Error 的各类规范:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Error 作为函数被调用时（Error(...)），表现和 new Error(...) 一致，均会创建并返回 Error 的新实例&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Error 可以被继承，比如通过 extends 的方式，子类必须提供 constructor 方法，且该方法内必须提供 super() 调用&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Error 构造函数必须有 prototype 属性&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Error.prototype 属性需有以下属性：&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;Error.prototype.constructor: 指向构造函数&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Error.prototype.message: 描述错误信息，默认是空字符串&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Error.prototype.name: 描述错误名称，默认值是 Error&lt;/p&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;从 LoaderError 的源码可以看到，LoaderError 做了以下几件事情:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;LoaderError 继承自 Error&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;实例自定义了 name、message 属性，明确 babel-loader 的信息&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;实例自定义的 hideStack 属性是非标准属性，用于 babel-loader 内部&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;web 标准&lt;/h2&gt; 
&lt;p&gt;是在解决 API Polyfil 的时候，Babel 配合使用的 core-js 除了提供 ECMAScript 标准下的 JavaScript API 实现，也提供了 DOM/URL 等实现。而 DOM/URL 所属的 web 标准，由 W3C/WHATWG 制定。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/16_1725521927064.jpg&quot; alt=&quot;16.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;经过多年发展，WHATWG 和 W3C 目前是合作关系，其中，WHATWG 维护 HTML 和 DOM 标准，W3C 使用 WHATWG 存储库中的 HTML 和 DOM 标准描述，W3C 在 HTML 部分的工作集中在 XHTML/XML 上。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/17_1725521957624.jpg&quot; alt=&quot;17.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;总结&lt;/h1&gt; 
&lt;p&gt;本文介绍了 Babel 的概述/微内核架构/ECMAScript 标准化方面的设计思想和部分实现原理。&lt;/p&gt; 
&lt;p&gt;上述内容其实在很早之前就已经成型了，笔者也查看了 Babel 最近的迭代内容，发现并没有太大的变化。至于代码转译领域，目前是 Babel 还是其他工具哪个更有优势，不在本文的讨论范围内。除了比较社区哪些工具更好而言，&quot;Babel 的设计思路、其与标准规范是怎么配合的&quot;等也是很值得学习的地方，也是这篇文章的产生背景。&lt;/p&gt; 
&lt;p&gt;希望本文对你有所帮助！&lt;/p&gt; 
&lt;p&gt;*&lt;strong&gt;文 / hoperyy&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;本文属得物技术原创，更多精彩文章请看：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com%2F&quot; target=&quot;_blank&quot;&gt;得物技术&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;未经得物技术许可严禁转载，否则依法追究法律责任！&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/5783135/blog/15671421</link>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/15671421</guid>
            <pubDate>Thu, 05 Sep 2024 07:49:12 GMT</pubDate>
            <author>得物技术</author>
        </item>
        <item>
            <title>《中国 MaaS（模型即服务）平台市场概览报告》发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;OSCHINA 发布了《中国 MaaS（模型即服务）平台市场概览报告》。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1540&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0905/150111_ySdv_2720166.png&quot; width=&quot;2728&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;主要内容包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;国内 MaaS 平台在互联网平台的声量对比&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;开发者对 MaaS 平台的关注度与需求分析&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;中国主流 MaaS 平台营销活动形式&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;color:#16a085&quot;&gt;&lt;strong&gt;报告亮点速览&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;我们发现，当前 MaaS 平台的主要用户群体是开发者和技术负责人，他们的关注点集中在平台的技术创新性、使用门槛、算力资源支持以及实际的开发应用能力上。&lt;/p&gt; 
&lt;p&gt;搜索关键词分析则进一步强化了这一点，用户普遍关心的是 MaaS 平台的先进技术、资源配备以及实际的应用价值。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0905/150702_R0dY_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://report.oschina.net/api/files/jhim80u9qm1ofsw/jljf6vr8m1tlk9m/maa_s_dAgI0VpoJH.pdf&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;在线阅读地址&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;div&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;该报告已上传至开源中国 APP，欢迎前往&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#27ae60&quot;&gt;「开源中国 APP - 报告模块」&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;查看更多深度内容。&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img height=&quot;1426&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0905/151256_svsk_2720166.png&quot; width=&quot;2540&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;p style=&quot;text-align:center&quot;&gt;「开源中国 APP」下载地址：&lt;br&gt; &lt;a href=&quot;https://www.oschina.net/app&quot; target=&quot;_blank&quot;&gt;https://www.oschina.net/app&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img height=&quot;300&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8ab7bb9f45ecaae87f7a862ea446ae1dacf.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310487</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310487</guid>
            <pubDate>Thu, 05 Sep 2024 07:28:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>bboss v7.2.7 发布，新增 nacos 支持</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;ETL &amp;amp; 流批一体化框架 bboss v7.2.7 发布 --- 简版 Flink,&lt;/span&gt;新增 nacos 支持，喜欢 nacos 的用户有福了。&lt;/p&gt; 
&lt;h1&gt;&lt;span style=&quot;color:#34495e&quot;&gt;v7.2.7 功能改进&lt;/span&gt;&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;http 服务框架改进：http-proxy 增加&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fesdoc.bbossgroups.com%2F%23%2Fhttpproxy%3Fid%3D_4%25ef%25bc%2589%25e5%258a%25a0%25e8%25bd%25bdnacos%25e9%2585%258d%25e7%25bd%25ae%25e5%2590%25af%25e5%258a%25a8httpproxy&quot; target=&quot;_blank&quot;&gt;nacos 配置中心支持以及基于 nacos 服务发现功能&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;es 客户端改进：增加&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fesdoc.bbossgroups.com%2F%23%2Fnacos-config%3Fid%3D_1elasticsearch%25e5%25ae%25a2%25e6%2588%25b7%25e7%25ab%25af%25e4%25b8%258enacos%25e5%25af%25b9%25e6%258e%25a5&quot; target=&quot;_blank&quot;&gt;nacos 配置中心支持以及基于 nacos 的 es 节点发现功能&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;es 客户端改进：es 数据源停止后，相应的 ClientInterface api 抛出 es 数据源停止异常；数据源重启后，相应的 ClientInterface api 即可恢复正常调用，提供相应的测试用例&lt;a href=&quot;https://gitee.com/bboss/eshelloword-booter/blob/master/src/test/java/org/bboss/elasticsearchtest/custominit/CustormInitAndBoot1.java&quot; target=&quot;_blank&quot;&gt;CustormInitAndBoot1&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;基础框架改进：属性配置管理增加 nacos 插件支持，参考 Apollo 配置中心插件，支持基于 nacos 管理配置，从 nacos 加载 ioc 配置、属性配置,参考文档：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fesdoc.bbossgroups.com%2F%23%2Fnacos-config&quot; target=&quot;_blank&quot;&gt;https://esdoc.bbossgroups.com/#/nacos-config&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;问题修复：修复 apollo 和 nacos 配置管理属性不能热加载问题&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#34495e&quot;&gt;基于 nacos 配置中心案例工程&lt;/span&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#34495e; text-align:start&quot;&gt;maven 工程-elasticsearch java client 案例&lt;/p&gt; 
&lt;p style=&quot;color:#34495e; text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbbossgroups%2Felasticsearch-example-nacos&quot; target=&quot;_blank&quot;&gt;https://github.com/bbossgroups/elasticsearch-example-nacos&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#34495e; text-align:start&quot;&gt;&lt;a href=&quot;https://gitee.com/bboss/elasticsearch-example-nacos&quot;&gt;https://gitee.com/bboss/elasticsearch-example-nacos&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#34495e; text-align:start&quot;&gt;maven 工程-http proxy 案例&lt;/p&gt; 
&lt;p style=&quot;color:#34495e; text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbbossgroups%2Fhttpproxy-nacos&quot; target=&quot;_blank&quot;&gt;https://github.com/bbossgroups/httpproxy-nacos&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#34495e; text-align:start&quot;&gt;&lt;a href=&quot;https://gitee.com/bboss/httpproxy-nacos&quot;&gt;https://gitee.com/bboss/httpproxy-nacos&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#34495e; text-align:start&quot;&gt;db 数据源管理案例&lt;/p&gt; 
&lt;p style=&quot;color:#34495e; text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbbossgroups%2Fdb-db-job3-nacos&quot; target=&quot;_blank&quot;&gt;https://github.com/bbossgroups/db-db-job3-nacos&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#34495e; text-align:start&quot;&gt;&lt;a href=&quot;https://gitee.com/bboss/db-db-job3-nacos&quot;&gt;https://gitee.com/bboss/db-db-job3-nacos&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;strong&gt;数据采集 ETL 工具使用集成指南&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fesdoc.bbossgroups.com%2F%23%2Fdb-es-tool&quot; target=&quot;_blank&quot;&gt;https://esdoc.bbossgroups.com/#/db-es-tool&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;strong&gt;数据采集 &amp;amp; 流批一体化处理使用指南&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fesdoc.bbossgroups.com%2F%23%2Fetl-metrics&quot; target=&quot;_blank&quot;&gt;https://esdoc.bbossgroups.com/#/etl-metrics&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;strong&gt;bboss-datatran 插件清单&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fesdoc.bbossgroups.com%2F%23%2Fdatatran-plugins&quot; target=&quot;_blank&quot;&gt;https://esdoc.bbossgroups.com/#/datatran-plugins&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;strong&gt;基于源码构建 bboss&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fesdoc.bbossgroups.com%2F%23%2Fbboss-build&quot; target=&quot;_blank&quot;&gt;https://esdoc.bbossgroups.com/#/bboss-build&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310467/bboss-7-2-7-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310467/bboss-7-2-7-released</guid>
            <pubDate>Thu, 05 Sep 2024 06:30:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>阿里通义千问全系列大模型被 GitHub 下架，所有仓库页面「404」</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;阿里通义千问 (QwenLM) 全系列大模型的代码仓库被 GitHub 下架，访问其 repo 页面和 GitHub 主页均显示「404」。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FQwenLM%2FQwen2&quot; target=&quot;_blank&quot;&gt;https://github.com/QwenLM/Qwen2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FQwenLM%2F&quot; target=&quot;_blank&quot;&gt;https://github.com/QwenLM/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height=&quot;1162&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0905/120524_ghDH_2720166.png&quot; width=&quot;2482&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1250&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0905/121025_Yi1H_2720166.png&quot; width=&quot;2438&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;阿里云通义千问负责人回应称没有跑路，显示「404」原因是突然被 GitHub 官方标记。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0905/120307_MIcX_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1230&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0905/133245_4Ie4_2720166.png&quot; width=&quot;1274&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;span&gt;来源：&lt;/span&gt;&lt;/em&gt;&lt;span style=&quot;color:#888888&quot;&gt;&lt;em&gt;&lt;span&gt;https://x.com/JustinLin610/status/1831489956512198862&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310448/qwenlm-github-repo-404</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310448/qwenlm-github-repo-404</guid>
            <pubDate>Thu, 05 Sep 2024 04:15:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>RWKV 模型已部署到 5 亿台 Windows 电脑？真正开源的新一代 AI 架构</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;2024 年 9 月 ，RWKV 社区成员发现：Office 系统在自动更新后（版本 2407 及以后）已自带 RWKV 运行库。&lt;/p&gt; 
&lt;p&gt;在 Windows 系统的&amp;nbsp; &lt;code&gt;C:\Program Files\Microsoft Office\root\vfs\ProgramFilesCommonX64\Microsoft Shared\OFFICE16&lt;/code&gt; 目录，可以找到一系列 &lt;code&gt;rwkv&lt;/code&gt; dll（动态链接库） 文件。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;RWKV dll in Windows&quot; src=&quot;https://oscimg.oschina.net/oscnet/RWKV-dll-in-windows-os.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;由于正版 Windows 大多预装了 Office 365，因此，全球大多数 Windows 10 和 11 机器现已搭载 RWKV，包括线下商店中售卖的 Windows 机器。这意味着 RWKV 的装机量可达几亿台。&lt;/p&gt; 
 &lt;p&gt;RWKV 是真正的开源架构（目前在 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flfaidata.foundation%2Fprojects%2Frwkv%2F&quot; target=&quot;_blank&quot;&gt;Linux Foundation 旗下&lt;/a&gt;），遵循 Apache 2.0 协议，可用于商业，欢迎大家在各个项目使用。&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;RWKV 的最新架构为 RWKV-6，且 RWKV-7 即将公布。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;从 dll 的文件属性，可以明确这是 RWKV 模型的加载器：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;dll 文件属性&quot; src=&quot;https://oscimg.oschina.net/oscnet/RWKV-dll-property.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;此外，微软提供的协议中也明确出现了 rwkv.cpp 的仓库地址 ：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;带 rwkv.cpp 的许可证&quot; src=&quot;https://oscimg.oschina.net/oscnet/RWKV-cpp-license.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;随后，社区开发者对 dll 文件进行解析，发现 dll 中的函数确实是来自 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FRWKV%2Frwkv.cpp&quot; target=&quot;_blank&quot;&gt;rwkv.cpp 库&lt;/a&gt;中的 RWKV 模型相关函数：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;dll 文件中的函数&quot; src=&quot;https://oscimg.oschina.net/oscnet/RWKV-dll-export.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;该发现在多方社交媒体上引起了激烈的讨论：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;RWKV 官方推文&quot; src=&quot;https://oscimg.oschina.net/oscnet/RWKV-dll-x-rwkv-ai.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/RWKV-dll-x-wangtiezhen.webp&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;知乎上的讨论：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F666097016&quot; target=&quot;_blank&quot;&gt;https://www.zhihu.com/question/666097016&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;RWKV 在 Windows 系统中的角色&lt;/h3&gt; 
&lt;p&gt;目前，微软方面未公布 RWKV 模型会用于 Windows 系统中的哪些功能。&lt;/p&gt; 
&lt;p&gt;尽管 RWKV 系列 dll 文件存放在 Microsoft Office 目录中，但它们其实是操作系统的一部分，而不仅限于 Microsoft Office 。&lt;/p&gt; 
&lt;p&gt;出于 RWKV 恒定的显存/内存占用、支持全球 100 多种语言、「能耗最低的模型」等特性，我们推测 RWKV 可能会用于以下 Windows 系统功能：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;本地 copilot&lt;/li&gt; 
 &lt;li&gt;作为 Windows 系统的本地记忆回调器&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;code&gt;Local memory recall&lt;/code&gt; 是让操作系统记住你过去的操作或输入信息，在需要时再次使用这些记忆。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;RWKV 的 llama.cpp 用法&lt;/h2&gt; 
&lt;p&gt;随着 RWKV 社区成员 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMollySophia&quot; target=&quot;_blank&quot;&gt;@MollySophia&lt;/a&gt; 的工作，llama.cpp 现已适配 &lt;code&gt;RWKV-6&lt;/code&gt; 模型。&lt;/p&gt; 
&lt;p&gt;接下来，我们一起看看如何在 llama.cpp 中使用 RWKV-6 模型进行推理：&lt;/p&gt; 
&lt;h3&gt;第一步：获取 gguf 格式模型&lt;/h3&gt; 
&lt;p&gt;llama.cpp 支持 &lt;code&gt;.gguf&lt;/code&gt; 格式的模型，但 RWKV 官方仅发布了 &lt;code&gt;.pth&lt;/code&gt; 格式模型。因此，我们需要使用以下两种方法获取 gguf 格式的 RWKV 模型。&lt;/p&gt; 
&lt;h4&gt;方法 1：从 HF 下载现成 gguf 模型（推荐）&lt;/h4&gt; 
&lt;p&gt;可以从 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Flatestissue&quot; target=&quot;_blank&quot;&gt;https://huggingface.co/latestissue&lt;/a&gt; 下载已量化并转化成 gguf 格式的 RWKV 模型&lt;/p&gt; 
&lt;h4&gt;方法 2：从 HF 格式转换成 &lt;code&gt;.gguf&lt;/code&gt; 格式&lt;/h4&gt; 
&lt;p&gt;首先，从 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2FRWKV&quot; target=&quot;_blank&quot;&gt;RWKV 官方 HF 仓库&lt;/a&gt;下载一个 Hugging Face 格式的 RWKV 模型，如 &lt;code&gt;RWKV/v6-Finch-1B6-HF&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;然后在 llama.cpp 目录运行此命令，将 Hugging Face 模型转成 gguf 格式：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python llama.cpp/convert_hf_to_gguf.py ./v6-Finch-1B6-HF

&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;量化方法：（可选）&lt;/h4&gt; 
&lt;p&gt;运行以下命令，对 .gguf 模型进行量化：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./build-cuda-rel/bin/llama-quantize v6-Finch-1B6-HF/v6-Finch-1.6B-HF-F16.gguf（量化前的 gguf 模型路径） ./v6-Finch-1B6-HF/v6-Finch-1.6B-HF-Q5_1.gguf（量化后的 gguf 模型路径） Q5_1（量化精度）

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;所有可选的量化精度：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;可选的量化精度&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-quantization-type.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;建议使用以下两种量化精度： &lt;code&gt;Q5_1&lt;/code&gt;、 &lt;code&gt;Q8_0&lt;/code&gt;。&lt;/p&gt; 
&lt;h3&gt;第二步：本地构建 llama.cpp&lt;/h3&gt; 
&lt;p&gt;可以选择从 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fggerganov%2Fllama.cpp%2Freleases&quot; target=&quot;_blank&quot;&gt;llama.cpp 的 release 页面&lt;/a&gt;下载已编译的 llama.cpp 程序。&lt;/p&gt; 
&lt;p&gt;也可以参照 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fggerganov%2Fllama.cpp%2Fblob%2Fmaster%2Fdocs%2Fbuild.md&quot; target=&quot;_blank&quot;&gt;llama.cpp 官方构建文档&lt;/a&gt;，选择适合的方法本地编译构建。&lt;/p&gt; 
&lt;h3&gt;第三步：运行 RWKV 模型推理&lt;/h3&gt; 
&lt;p&gt;在 llama.cpp 目录运行以下命令，可驱动 RWKV 模型基于 prompt 生成文本：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./build/bin/llama-cli -m ./v6-Finch-1B6-HF/v6-Finch-1.6B-HF-F16.gguf --no-warmup -p &quot;User: Write me a poem\n\nAssistant:&quot; -t 8 -ngl 25 -n 500

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这条命令通过 llama-cli 运行 RWKV 模型，使用 8 个线程、跳过预热、并根据给定的 prompt 生成最多 500 个 token。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;RWKV 模型推理&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-RWKV-inference-single-prompt.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;参数解释：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;./build/bin/llama-cli&lt;/code&gt;：编译好的 llama-cli 程序，打开命令化界面&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-m ./v6-Finch-1B6-HF/v6-Finch-1.6B-HF-F16.gguf&lt;/code&gt;：模型的路径参数&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--no-warmup&lt;/code&gt;：跳过「预热」阶段，直接开始生成文本（以少量性能换取速度）&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-p &quot;User: Write me a poem\n\nAssistant:&quot;&lt;/code&gt;： prompt 参数，模型根据该提示词生成文本。&quot;User: Write me a poem\n\nAssistant:&quot; 是符合 RWKV 模型格式的 prompt，更多 RWKV prompt 格式请在&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frwkv.cn%2FRWKV-Prompts%2FChat-Prompts&quot; target=&quot;_blank&quot;&gt;RWKV 文档-提示词指南&lt;/a&gt;中查看。&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-t 8&lt;/code&gt;：-t 指定线程数，建议根据可用的物理 CPU 核心数调整&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;- ngl&lt;/code&gt;：指定模型使用的 n-gpu-layers ，25 是在 GPU 上运行 25 层（1.6B 的 24 层 + head 算一层）。可以无脑设定 &lt;code&gt;-ngl 99&lt;/code&gt;，使 llama.cpp 加载 RWKV 模型所有层&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-n 500&lt;/code&gt;：-n 参数表示生成的最大 token 数&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;完整的参数列表可以在 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fggerganov%2Fllama.cpp%2Fblob%2Fmaster%2Fexamples%2Fmain%2FREADME.md&quot; target=&quot;_blank&quot;&gt;llama.cpp 参数文档&lt;/a&gt;中查看。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;批量推理生成&lt;/h4&gt; 
&lt;p&gt;使用以下命令，以进行批量推理：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;使用 &lt;code&gt;\n&lt;/code&gt; 隔开不同的 prompt&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;./build/bin/llama-parallel -ns 4 -np 4 -m v6-Finch-1B6-HF/v6-Finch-1.6B-HF-F16.gguf --no-warmup -ngl 25 -n 500 -p &quot;Who are you?\nWhat do we have for dinner?\nWhat&#39;s the meaning of life\nHello\nWhat is the end of the universe?&quot;

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img alt=&quot;批量推理生成&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-RWKV-inference-parallel.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;参数解释：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-ns 4&lt;/code&gt;: n_sequence，推理序列的数量&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-np 4&lt;/code&gt;: n_parallel，并行推理的数量&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;启动 Web 服务&lt;/h3&gt; 
&lt;p&gt;使用以下命令，以启动 llama.cpp 的 Web 服务：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./build/bin/llama-server -m v6-Finch-1B6-HF/v6-Finch-1.6B-HF-F16.gguf --no-warmup -ngl 25

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img alt=&quot;llama.cpp 的 Web 服务&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-start-webui.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;启动后，可以访问 &lt;code&gt;http://127.0.0.1:8080&lt;/code&gt; 以检查 Web 页面：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;WebUI&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-webui-old-version.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;chatUI&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-chatui-old-version.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;点击右上方的 &lt;code&gt;New Ul&lt;/code&gt;按钮，或者直接访问 &lt;code&gt;http://127.0.0.1:8080/index-new.html&lt;/code&gt;，可以打开新版本的 WebUI&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;新版本的 WebUI&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-webui-new-version.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;新版本的 chatUI&quot; src=&quot;https://oscimg.oschina.net/oscnet/llama.cpp-chatui-new-version.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;RWKV 模型介绍&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;RWKV 是一种创新的深度学习网络架构，它将 Transformer 与 RNN 各自的优点相结合，同时实现高度并行化训练与高效推理，时间复杂度为线性复杂度，在长序列推理场景下具有优于 Transformer 的性能潜力。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;RWKV 模型架构论文：&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;RWKV 4：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2305.13048&quot; target=&quot;_blank&quot;&gt;https://arxiv.org/abs/2305.13048&lt;/a&gt;&lt;br&gt; RWKV-5/6（Eagle &amp;amp; Finch）：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2404.05892%C2%A0&quot; target=&quot;_blank&quot;&gt;https://arxiv.org/abs/2404.05892&amp;nbsp;&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;RWKV 模型的最新版本是 RWKV-6 ，架构图如下：&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img height=&quot;1496&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-b5e602a3b0574972f4d3e381acae509c1f0.png&quot; width=&quot;700&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#444444&quot;&gt;相对&amp;nbsp;&lt;span&gt;Transformer 架构，&lt;/span&gt;RWKV 架构的推理成本降低 2~10 倍，训练成本降低 2~3 倍。&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;加入 RWKV 社区&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&amp;nbsp;RWKV 中文文档：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.rwkv.cn&quot; target=&quot;_blank&quot;&gt;https://www.rwkv.cn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;QQ 频道：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpd.qq.com%2Fs%2F9n21eravc&quot; target=&quot;_blank&quot;&gt;https://pd.qq.com/s/9n21eravc&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310440</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310440</guid>
            <pubDate>Thu, 05 Sep 2024 03:47:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>WPS Office for Linux 12 个人版上线 deepin 23 商店！</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fwps-office-for-linux-12-deepin-23%2F&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;查看原文&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;全新 WPS Office For Linux 个人版（12.1.0.17881）与 deepin 23 的 AI 功能深度融合，正式上架在社区商店啦！&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;383&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/WHLUG%E6%B4%BB%E5%8A%A8900x383.png&quot; width=&quot;900&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;这是 Linux 版本的一次里程碑式的重大更新。在产品能力层面上，在 deepin 23 上 WPS Office 几乎实现了与 Windows 版本的无缝对接，无论是界面布局、功能实现还是操作流畅度，都为用户带来了高度一致且卓越的体验。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;718&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905094056.jpg&quot; width=&quot;1280&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;亮点功能&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;UI 视觉重构升级：新版本使用全新的视觉设计，在延续了 WPS 设计风格的同时，通过调整布局、模块化设计等方式，在视觉效果、使用逻辑方面进行了深度优化，帮助用户以更低的学习成本快速掌握使用技巧。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;892&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905094100-1.jpg&quot; width=&quot;1527&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;WPS 演示&lt;/h2&gt; 
&lt;p&gt;1、支持「主题生成」「大纲生成」「文档生成」多种模式一键生成并美化 PPT。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;675&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905103211.png&quot; width=&quot;1205&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;2、输出为图片：支持文件批量输出为图片，支持逐页输出或输出为长图。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;667&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905103322.png&quot; width=&quot;1201&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;3、输出为视频：演示组件支持将 PPT 输出为视频。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;672&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905103326.png&quot; width=&quot;1202&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;WPS 文字&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;文字支持「帮我写」「帮我改」，AI 快速生成和润色文本。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;672&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905103326-1.png&quot; width=&quot;1202&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;WPS 表格&lt;/h2&gt; 
&lt;p&gt;表格 AI 写公式：一键生成复杂公式，快速解决数据处理难题。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;491&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/5-%E8%A1%A8%E6%A0%BCAI%E5%86%99%E5%85%AC%E5%BC%8F.gif&quot; width=&quot;873&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;文档云同步&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;支持本地文档同步至云端，实现实时保存，多端共享、跨端编辑。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1078&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/6-%E6%96%87%E6%A1%A3%E4%BA%91%E5%90%8C%E6%AD%A5.gif&quot; width=&quot;1918&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;协作编辑&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;支持本地编辑与在线编辑模式切换，实时与团队共同编辑文档。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;1078&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/7-%E5%8D%8F%E4%BD%9C%E7%BC%96%E8%BE%91.gif&quot; width=&quot;1918&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;稻壳资源&lt;/strong&gt;&lt;/h2&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;提供文字、表格、演示等多组件模板；覆盖图片、图标、字体等素材。&lt;img alt=&quot;&quot; height=&quot;676&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905103550.png&quot; width=&quot;1201&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;PDF 转换&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;新增增值服务选项卡，支持 PDF 转换、输出为图片等增值功能，解决了 23 下无法查看 PDF 的问题。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;738&quot; src=&quot;https://www.deepin.org/wp-content/uploads/2024/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240905103318.png&quot; width=&quot;1315&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;更多功能等你发现啦&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;注：本次提供的增值功能 / 增值服务均需登录会员账号后使用，无会员权益时不会展示对应功能入口；Linux 个人版暂不支持会员购买，可在 WPS 官网购买后，在 deepin 23 端上使用。&lt;/p&gt; 
&lt;p&gt;针对此版本的 WPS AI，UOS AI 也进行了深度调优并与 WPS 表格、WPS 文字、WPS 演示、WPS PDF 等应用进行了紧密适配。通过利用 UOS AI 的 AI 端侧模型搭载本地向量数据库用户可以将保存本地的 WPS 办公格式文档做成个人知识库实现智能化的知识管理、检索和应用。这一创新功能不仅提高了用户的知识管理效率还为用户提供了更加便捷、智能的办公体验。&lt;/p&gt; 
&lt;p&gt;我们相信，在未来的日子里，deepin 与 WPS Office 将携手并进，共同坚守创新、开放、共享的理念，致力于为更广泛的用户群体打造更加卓越、智能的办公体验。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;相关阅读：&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;（1）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdistrowatch.com%2Ftable.php%3Fdistribution%3Ddeepin&quot; target=&quot;_blank&quot;&gt;deepin 全版本镜像（含 deepin V15）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;（2）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-community-monthly-report-2024-08%2F&quot; target=&quot;_blank&quot;&gt;deepin（社区）8 月月度汇报&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;（3）&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-use-minicom-and-cutecom%2F&quot; target=&quot;_blank&quot;&gt;网络工程师使用 deepin 必需掌握的两个工具 minicom 和 cutecom&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/310425/wps-office-for-linux-12-deepin-23</link>
            <guid isPermaLink="false">https://www.oschina.net/news/310425/wps-office-for-linux-12-deepin-23</guid>
            <pubDate>Thu, 05 Sep 2024 03:07:32 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
    </channel>
</rss>