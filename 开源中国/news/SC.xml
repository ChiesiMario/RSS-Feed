<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 简体中文</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 16 Sep 2025 07:42:37 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>开源游戏引擎 Godot 4.5 发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Godot 引擎今年最重磅的版本：4.5 稳定版现已&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgodotengine.org%2Farticle%2Fgodot-4-5-making-dreams-accessible%2F" target="_blank"&gt;发布&lt;/a&gt;。在 4.5 版本中，Godot 着重提升了易用性与稳定性，同时在渲染、脚本、平台支持等多个方面带来重大改进。&lt;/p&gt; 
&lt;p&gt;&lt;img height="282" src="https://oscimg.oschina.net/oscnet/up-5d41e16285bb304809a126393cf91f511ba.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;以下是主要亮点与详细更新内容。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;一、亮点&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;strong&gt;Stencil Buffer 支持&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;新增 Stencil Buffer，可以用来做壁洞、遮罩等效果，让壁面、遮挡的渲染控制更灵活。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;strong&gt;屏幕阅读器支持（Screen Reader Support）&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;借助 AccessKit，Control 节点等 GUI 元素支持屏幕阅读器，为视力障碍或学习障碍用户改进体验。编辑器中部分（Project Manager、标准 UI 节点、Inspector）已有初步支持。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;strong&gt;脚本回溯与自定义日志（Script Backtracing &amp;amp; Custom Loggers）&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;即使在 Release 构建中，也能获得错误发生的确切调用堆栈（call stack）信息。用户可以拦截日志／错误，以便做错误报告工具等。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;strong&gt;Shader Baker（着色器预编译器）&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在导出 (export) 设置中启用后，编辑器会扫描场景与着色器，提前编译目标平台所需格式，从而显著缩短启动或首次运行中的等待时间。比如在 Windows + D3D12 与 macOS + Metal 的组合中，部分测试项能看到&amp;nbsp;&lt;strong&gt;&lt;strong&gt;20 倍&lt;/strong&gt;&lt;/strong&gt;&amp;nbsp;启动时间缩短。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;strong&gt;实时预览国际化（Internationalization Live Preview）&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;开发者可以在编辑器里直接预览不同语言环境下 GUI 的界面效果。这有助于在多语言支持下调整界面布局。注意，目前界面方向 (layout direction) 只跟主 locale 同步。&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;strong&gt;二、通用改进&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;strong&gt;2D TileMap 物理系统重构&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;以前每个 Tile 会对应一个物理 body，数量多会造成性能问题。4.5 中 TileMapLayer 的物理形状会尽可能合并，提高效率。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;strong&gt;深度复制（Deep Duplicate）增强&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;新增&amp;nbsp;&lt;code&gt;duplicate_deep()&lt;/code&gt;&amp;nbsp;方法，用于 Resource、Array、Dictionary 等，可以更可靠、可控地复制子资源或内容。之前的 deep 参数在某些情况下不能覆盖所有子元素的问题得到修复。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;strong&gt;定制构建配置 Profile 提升&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;编辑引擎构建配置时，不仅检测项目中用到的类，还能设置对应的构建选项，更好地为项目量身定做。支持 GDExtensions 使用情况的检测。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;编辑器体验改进&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;游戏视图中新增 「静音（Mute Game）」 切换按钮，方便在调试过程中关闭声音。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;支持脚本中把资源（Resource）拖放到脚本中并以 UID（唯一标识）方式预加载（preload），代替路径方式，从而减少资源路径分离或重命名导致的问题。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;运行时允许在 Remote 节点列表中选择多个节点，并编辑公共属性。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;编辑器语言可以即时切换，不再需要重启编辑器。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Inspector 面板中区块 (section) 可以折叠 (collapse) 或展开，并且在区块名旁边能看到启用状态。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;导出变量为 Variant 类型时，Editor 中会对类型选择与值输入做更灵活处理。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;脚本编辑器中为 Color 类型值增添颜色预览，并支持点预览图标直接弹出颜色选择器。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;可以在 Editor 的命令面板（command palette）里执行项目中特定的 EditorScripts，以便快速操作。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;在资源复制粘贴过程中，「Paste as Unique」 选项使粘贴资源时能直接创建唯一副本，而不仅仅是引用。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;在项目管理器（Project Manager）里新增「复制项目」（Duplicate Project）按钮，方便备份或分支项目。如果更新引擎版本可能导致不可逆变更，还会提示备份。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;GUI 相关改进&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;code&gt;FoldableContainer&lt;/code&gt;&lt;/p&gt; &lt;p&gt;节点：可折叠区块，支持「手风琴」式展开，仅一个区块打开。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;标签（Label）支持叠加效果层（stacked effects），例如复杂阴影、描边等更灵活控制样式。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;控制节点（Control）支持 focus 与 mouse 行为递归（recursive）禁用或启用，使复杂 UI 的行为控制更容易。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;图标与界面清晰度&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;编辑器 UI 在 HiDPI 屏幕上看起来更清晰；图标等 UI 元素在高分辨率屏幕上模糊问题大幅改善。&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;strong&gt;三、平台支持&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;Android&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;引入 TouchActionsPanel，为平板／手机上的编辑器用户提供常用操作按钮（比如保存、撤销）以便快速调用。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;支持 Android 15 的 16KB 内存页面（page size）特性。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;支持 edge-to-edge 显示模式，使游戏画面尽可能占满屏幕空间，同时允许系统状态栏/导航栏重叠显示。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;支持访问设备原始相机输入流（camera feed），方便做 AR 或实时滤镜处理。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;支持原生 Wayland 子窗口（sub-window）功能；在支持 Wayland 的桌面环境中，Godot 可以生成独立子窗口（比如弹出窗口、设定窗口等）。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;Apple / macOS / visionOS&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;在 macOS 上引入游戏嵌入窗口 (embedded game window) 支持。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;新增对 Apple visionOS 的原生导出支持，使 Godot 项目可以在 Vision Pro 上运行，目前为「窗口化」应用（非全沉浸式体验）。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Windows 导出时，对于 exe 文件的元数据（图标、产品名称、公司信息等），之前依赖外部工具&amp;nbsp;&lt;code&gt;rcedit&lt;/code&gt;，现在可以在任何平台上本地完成这些操作，不再依赖外部工具。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;strong&gt;Web&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;WebAssembly 的 SIMD 支持上线，提升 Web 游戏的性能表现，尤其在 CPU 负荷较重的情况下会更明显。&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;strong&gt;四、脚本语言与扩展&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;strong&gt;C# / .NET&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Android 导出的 APK 中的 .NET 程序集（assemblies）现在直接从 APK 加载，而不是先提取到缓存，这样能避免版本混乱和权限问题。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;GDScript&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;支持可变长度参数（variadic arguments）：函数可以接受不定数量的参数。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;引入抽象类和抽象方法（abstract classes / methods）：允许声明一个类为抽象类（不能直接实例化），并定义抽象方法，子类必须实现这些方法。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;GDExtension&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;支持注册主循环（main loop）回调，例如引擎启动与关闭等生命周期回调。这对于插件扩展或与引擎底层交互非常有帮助。&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;strong&gt;五、系统级别与渲染&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;strong&gt;动画 (Animation)&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;新增&amp;nbsp;&lt;code&gt;BoneConstraint3D&lt;/code&gt;，含 AimModifier3D、CopyTransformModifier3D、ConvertTransformModifier3D 等，用于将一个骨骼绑定到另一个骨骼，使得动画动作更自然、更灵活。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;strong&gt;导入 (Import)&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;恢复批量修改资源 (import) 属性的功能：可以在资源浏览面板中选中多个文件，在 Import Dock 修改某些属性后，一键重新导入。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;strong&gt;输入 (Input)&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;使用 SDL3 来处理游戏控制器（gamepad）的输入支持。这意味着未来控制器特性（例如自适应触发，震动，麦克风，动作控制等）更新会更快、更稳定。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;导航 (Navigation)&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;引入专门的 2D 导航服务器（NavigationServer2D），使纯 2D 游戏不再依赖带有 3D 支持的导出模板，从而减小体积，优化性能。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;导航区域计算支持异步（async）处理，可以在后台线程中进行，从而减少主线程负担。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;物理 (Physics)&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在 SceneTree 中实现 3D 物理插值（interpolation），修复之前在 RenderingServer 中实现导致的一系列问题。对节点 transform 的插值查询问题得到解决。虽然底层有很多变化，但保留了原有 API，以避免破坏现有项目。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;渲染 (Rendering)&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;支持基于环境光的镜面遮蔽 (specular occlusion from ambient light)，使一些物体缝隙、裂隙间不会意外反射天空等光源。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;支持 Bent Normal Maps（弯曲法线贴图）以改善光照与间接光反射的准确性。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;加入 SMAA 1x 抗锯齿支持（Subpixel Morphological Anti-Aliasing）以替代或增强 FXAA 类型的抗锯齿效果。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;在支持的移动硬件上显式使用半精度浮点格式 (half-precision / F16) 渲染，以节省资源、提高性能与帧率稳定性。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;XR / AR /虚拟现实&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;对 OpenXR 的 D3D12 后端支持。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;在 Vulkan 移动渲染器中支持「foveated rendering」（眼动渲染 / 边缘简化渲染）通过 「Fragment Density Map」 扩展，以减少边缘区域的渲染负担。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;支持 XR 渲染模型（render models）：控制器等交互组件模型会按设备正式显示。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;支持 Meta / Pico 等头显的 Application SpaceWarp / 帧合成（frame synthesis）功能，以改善低功耗 / 高刷新率头显上的体验。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372546/godot-4-5-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372546/godot-4-5-released</guid>
      <pubDate>Tue, 16 Sep 2025 07:35:33 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>​Meta AI 发布 MobileLLM-R1：轻量级边缘推理模型</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Meta AI 近日推出了 MobileLLM-R1，这是一系列轻量级边缘推理模型，目前已在 Hugging Face 上发布。该系列模型参数范围从 140M 到 950M，专注于高效的数学、编码和科学推理，且在不足 10 亿的参数规模下实现了优秀的性能表现。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="365" src="https://oscimg.oschina.net/oscnet/up-30b7f801e9b13bb0046a53750505a0aa2ec.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;MobileLLM-R1 的&lt;span&gt;最大&lt;/span&gt;模型为 MobileLLM-R1-950M，采用了一系列架构优化设计:包括 22 层 Transformer 结构、24 个注意力头和 6 个分组 KV 头。模型的嵌入维度为 1536，隐藏层维度为 6144。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;此外，模型还采用了分组查询注意力（GQA）来减少计算和内存需求，块级权重共享技术降低了参数数量而不显著增加延迟，SwiGLU 激活函数提升了小模型的表示能力。模型支持 4K 的上下文长度和 32K 的后训练模型。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在训练效率方面，MobileLLM-R1 的表现同样引人注目。该模型总共在约 4.2 万亿个 token 上进行训练，相较于 Qwen3 的 0.6B 模型训练的 36 万亿 token，MobileLLM-R1 仅使用了约 11.7% 的数据便达到了或超越了 Qwen3 的准确率。同时，模型在数学、编码和推理数据集上进行了监督微调，从而降低了训练成本和资源需求。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在各项基准测试中，MobileLLM-R1-950M 的表现优异:在 MATH500 数据集上，其准确率比 OLMo-1.24B 高出约 5 倍，且比 SmolLM2-1.7B 高出约 2 倍。在 GSM8K、AIME 和 LiveCodeBench 等推理和编码任务上，MobileLLM-R1 甚至与 Qwen3-0.6B 相匹配或超越，尽管所使用的 token 数量远少于后者。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;不过，MobileLLM-R1 的聚焦也带来了局限性。虽然在数学、编码和结构化推理方面表现强劲，但在一般对话、常识推理和创造性任务上，MobileLLM-R1 的表现较大型模型有所不足。此外，模型在生产环境中的使用受到 FAIR NC（非商业）许可证的限制，较长的上下文 (32K) 也提高了推理时的 KV 缓存和内存需求。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372545</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372545</guid>
      <pubDate>Tue, 16 Sep 2025 07:30:27 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>开发者必看：隐语框架的分层拆解和使用</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;blockquote&gt; 
 &lt;p&gt;打开链接点亮社区 Star，照亮技术的前进之路。 &lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-edf8393baa8c76890c2e321dca39a57a078.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;每一个点赞，都是社区技术大佬前进的动力&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Github 地址： &lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsecretflow%2Fsecretflow" target="_blank"&gt;https://github.com/secretflow/secretflow&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-f1f5ac60c4e44a644832b0e9d03aac9f579.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_1"&gt;&lt;/span&gt; 
&lt;h2&gt;一、"隐语"架构设计全貌&lt;/h2&gt; 
&lt;span id="OSC_h3_2"&gt;&lt;/span&gt; 
&lt;h3&gt;1.隐语框架设计思想&lt;/h3&gt; 
&lt;p&gt;隐私计算是一个新兴的跨学科领域，涉及&lt;strong&gt;密码学、机器学习、数据库、硬件&lt;/strong&gt;等多个领域。根据过去几年的实践经验，我们发现&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;隐私计算技术方向多样，&lt;/strong&gt;不同场景下有其各自更为合适的技术解决方案&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;隐私计算学习曲线很高&lt;/strong&gt;，非隐私计算背景的用户使用困难&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;隐私计算涉及领域众多，&lt;/strong&gt;需要领域专家共同协作&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-66d2fb38d008b759553f3f5a5253b809349.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;隐语的设计目标&lt;/strong&gt;是使得数据科学家和机器学习开发者可以非常容易地使用隐私计算技术进行数据分析和机器学习建模，而无需了解底层技术细节。&lt;/p&gt; 
&lt;p&gt;为达到这个目标，**隐语提供了一层设备抽象，**将多方安全计算 (MPC)、同态加密 (HE) 和可信执行环境 (TEE) 等隐私计算技术抽象为密文设备， 将单方计算抽象为明文设备。&lt;/p&gt; 
&lt;p&gt;基于这层抽象，数据分析和机器学习工作流可以表示为一张计算图，&lt;strong&gt;其中节点表示某个设备上的计算，边表示设备之间的数据流动，不同类型设备之间的数据流动会自动进行协议转换&lt;/strong&gt;。在这一点上，隐语借鉴了主流的深度学习框架，后者将神经网络表示为一张由设备上的算子和设备间的张量流动构成的计算图。&lt;/p&gt; 
&lt;p&gt;隐语框架围绕开放这一核心思想，提供了不同层次的设计抽象，希望为不同类型的开发者都提供良好的开发体验。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;在设备层，隐语提供了良好的设备接口和协议接口，支持更多的设备和协议插拔式的接入&lt;/strong&gt;，我们希望与密码学、可信硬件、硬件加速等领域专家通力合作，不断扩展密态计算的类型和功能，不断提升协议的安全性和计算性能。&lt;/p&gt; 
&lt;p&gt;同时，隐语提供了良好的设备接口，第三方隐私计算协议可作为设备插拔式接入。&lt;strong&gt;在算法层，为机器学习提供了灵活的编程接口，算法开发者可以很容易定义自己的算法。&lt;/strong&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_3"&gt;&lt;/span&gt; 
&lt;h3&gt;2.架构分层总览&lt;/h3&gt; 
&lt;p&gt;隐语总体架构自底向上一共分为五层：&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-41a68e7f0ca01ba4db1273f9f2d109f05cd.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;资源管理层：&lt;/strong&gt; 主要承担了两方面的职责。第一是面向业务交付团队，可以屏蔽不同机构底层基础设施的差异，降低业务交付团队的部署运维成本。另一方面，通过对不同机构的资源进行集中式管理，构建出一个高效协作的数据协同网络。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;明密文计算设备与原语层：&lt;/strong&gt; 提供了统一的可编程设备抽象，将多方安全计算 (MPC)、同态加密 (HE)、可信硬件 (TEE) 等隐私计算技术抽象为密态设备，将单方本地计算抽象为明文设备。同时，提供了一些不适合作为设备抽象的基础算法，如差分隐私 (DP)、安全聚合 (Secure Aggregation) 等。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;明密文混合调度层：&lt;/strong&gt; 提供了统一的设备调度抽象，将上层算法描述为一张有向无环图，其中节点表示某个设备上的计算，边表示设备之间的数据流动，即逻辑计算图。逻辑计算图由分布式框架进一步拆分并调度至物理节点。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;AI &amp;amp; BI 隐私算法层：&lt;/strong&gt; 这一层的目的是屏蔽掉隐私计算技术细节，但保留隐私计算的概念，其目的是降低隐私计算算法的开发门槛，提升开发效率。&lt;/p&gt; 
&lt;p&gt;有隐私计算算法开发诉求的同学，可以根据自身场景和业务的特点，设计出一些特化的隐私计算算法，来满足自身业务和场景对安全性、计算性能和计算精度的平衡。&lt;/p&gt; 
&lt;p&gt;在这一层上，隐语本身也会提供一些通用的算法能力，比如 MPC 的 LR/XGB/NN，联邦学习算法，SQL 能力等。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;用户界面层：&lt;/strong&gt; 隐语的目标并不是做一个端到端的产品，而是为了让不同的业务都能够通过快速集成隐语而具备全面的隐私计算能力。因此我们会在最上层去提供一层比较薄的产品 API，以及一些 SDK，去降低业务方集成隐语的成本。&lt;/p&gt; 
&lt;span id="OSC_h3_4"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;strong&gt;3.架构细节拆解&lt;/strong&gt;&lt;/h3&gt; 
&lt;span id="OSC_h4_5"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;设备与原语层&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;隐语的设备分为物理设备和逻辑设备，其中，物理设备是隐私计算各个参与方的物理机器，逻辑设备则由一个或多个物理设备构成。&lt;/p&gt; 
&lt;p&gt;逻辑设备支持一组，特定的计算算子 (Device Ops)，有自己特定的数据表示 (Device Object)。&lt;strong&gt;逻辑设备分为明文和密文两种类型，前者执行单方本地计算，后者执行多方参与的隐私计算。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;逻辑设备的运行时负责内存管理、数据传输、算子调度等职责，运行在一个或多个物理设备上。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;逻辑设备和物理设备不是一对一的关系，一个物理设备可能同时属于多个逻辑设备&lt;/strong&gt;。在同一组物理设备上，可以根据不同的隐私协议和参与组合虚拟出不同的逻辑设备。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-814224da9f6ff77d2740d3b16167d0fbe4c.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;下表是隐语目前暂定支持的设备列表：&lt;/p&gt; 
&lt;table border="1" cellpadding="1" cellspacing="1" style="width:500px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;设备&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;运行时&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;算子&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;协议&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;前端&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;状态&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;PYU&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;明文&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;Python Interpreter&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;—&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;—&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;Python&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;Release&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;SPU&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;密文&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;SPU VM&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;PSI, XLA HLO&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;SPDZ-2k, ABY3&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;JAX, TensorFlow, PyTorch&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;Alpha&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;HEU&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;密文&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;HEU Runtime&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;Add, XLA HLO&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;Paillier, OU, TFHE&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;Numpy, JAX&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Alpha&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;TEE&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;密文&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;TEE Runtime&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;XLA HLO&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;Intel SGX&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;JAX, TensorFlow, PyTorch&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;WIP&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;span id="OSC_h4_6"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;可编程性&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;逻辑设备具备可编程性，即用户可以在设备上自定义计算逻辑，每个设备对用户提供了协议无关的编程接口。**在一个设备上，用户可以定义从简单的矩阵运算， 到完整的深度模型训练。**当然，这一切取决于设备提供的计算能力。&lt;/p&gt; 
&lt;p&gt;对于明文设备 PYU，它的前端为 python，用户可以通过&lt;code&gt;@device&lt;/code&gt;将一段预定义 python 函数调度至其上执行。&lt;/p&gt; 
&lt;p&gt;对于密文设备 SPU、HEU、TEE，它们的前端可以是任何支持 XLA 的框架， 如 JAX, TensorFlow,PyTorch 等。同样的，用户也可以通过&lt;code&gt;@device&lt;/code&gt;将基于这些前端自定义的函数调度至指定的设备执行。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import jax.numpy as jnp

dev = Device()  # maybe PYU, SPU, HEU, TEE


@device(dev)
def selu(x, alpha=1.67, lmbda=1.05):
    return lmbda * jnp.where(x &amp;gt; 0, x, alpha * jnp.exp(x) - alpha)


res = selu(x)  # res is a DeviceObject
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;用户自定义函数首先转换成&lt;strong&gt;XLA HLO Computation&lt;/strong&gt;，由 XLA 进行设备无关的代码优化和分析，并发往后端设备。后端设备进一步执行代码优化和分析，并生成最终，的可执行代码。&lt;/p&gt; 
&lt;p&gt;可执行代码或由设备的虚拟机解释执行 (SPU, HEU)，或由硬件直接执行 (TEE)。使用 XLA HLO 作为 IR，使得我们可以复用 XLA 前端和设备无关，代码优化，同时使得后端实现更加简洁干净。&lt;/p&gt; 
&lt;p&gt;对于密文设备（半同态）HEU，它仅支持一组有限的计算，因此提供了一组预定义算子如&lt;code&gt;__add__&lt;/code&gt;,&lt;code&gt;__mul__&lt;/code&gt;等，用户不能通过&lt;code&gt;@device&lt;/code&gt;进行自定义编程。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;x, y = HEUObject(), PYUObject()
z = x + y  # add
z = x * y  # mul
z = x @ y  # matmul
&lt;/code&gt;&lt;/pre&gt; 
&lt;span id="OSC_h4_7"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;协议转换&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;用户在逻辑设备上进行编程，构建逻辑计算图，**其节点表示设备上的一段函数或算子，边表示设备对象的流动。**逻辑计算图被设备进一步分割为子图，两个子图间的，边表示跨设备的对象流动，此时需要进行协议转换。设备对象的&lt;code&gt;DeviceObject.to&lt;/code&gt;接口用于转换至目标设备对象，任何新增的设备都应该提供相应的转换函数并，插入对象转换表中。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;下表是各个逻辑设备对象的转换表：&lt;/strong&gt;&lt;/p&gt; 
&lt;table border="1" cellpadding="1" cellspacing="1" style="width:500px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&amp;nbsp;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;PYU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;SPU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;HEU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;TEE&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;PYU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&amp;nbsp;&lt;/td&gt; 
   &lt;td&gt;share&lt;/td&gt; 
   &lt;td&gt;encrypt&lt;/td&gt; 
   &lt;td&gt;encrypt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;SPU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;reconstruct&lt;/td&gt; 
   &lt;td&gt;&amp;nbsp;&lt;/td&gt; 
   &lt;td&gt;encrypt+add&lt;/td&gt; 
   &lt;td&gt;reconstruct+encrypt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;HEU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;decrypt&lt;/td&gt; 
   &lt;td&gt;minus+decrypt&lt;/td&gt; 
   &lt;td&gt;&amp;nbsp;&lt;/td&gt; 
   &lt;td&gt;decrypt+encrypt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;TEE&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;decrypt&lt;/td&gt; 
   &lt;td&gt;decrypt+share&lt;/td&gt; 
   &lt;td&gt;decrypt+encrypt&lt;/td&gt; 
   &lt;td&gt;&amp;nbsp;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;span id="OSC_h4_8"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;分布式引擎&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;用户基于设备构建了一张逻辑计算图，那么我们如何执行这张计算图？由于逻辑设备映射到一个或多个物理设备，&lt;strong&gt;因此我们需要将逻辑设备上的算子正确调度到其对应的物理设备，同时处理好这些物理设备间的数据传输关系&lt;/strong&gt;。毫无疑问，我们需要一个分布式图执行引擎来解决这些问题。&lt;/p&gt; 
&lt;p&gt;那么我们需要一个怎样的分布式图执行引擎？以下是隐语对它的要求&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;细粒度的异构计算：在一张逻辑计算图中，具有不同粒度的计算任务，既有简单的数据处理（秒级），也有复杂的多方训练（几个小时至几十小时）。同时，物理节点具有不同的硬件环境，CPU, GPU, TEE, FPGA 等。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;灵活的计算模型：在水平、垂直场景下，针对数据处理和模型训练等不同工作流，支持多种并行模型，如数据并行、模型并行、混合并行。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;动态执行：在联邦学习场景下，不同机构的数据规模、带宽延迟、机器性能可能有较大差异，这导致同步模式的效率受限于最慢的工作节点。因此，我们希望支持，异步训练模式，这要求图执行引擎具有动态执行能力。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-2c0fb0a2006a01dc6e88397c7510e42537d.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;隐语针对隐私计算场景，已经对框架进行了一些安全加固工作：&lt;strong&gt;通过身份认证、代码预装、代码存证等手段对框架做了整体加固&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;未来，还将探索沙箱隔离、访问控制、静态图等机制以进一步提升安全水位。在环境适配方面，为了适配跨机构网络通信的特点，推进了 GCS gRPC 通信、域名支持、弱网断线处理等相关功能的开发。&lt;/p&gt; 
&lt;span id="OSC_h4_9"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;AI &amp;amp; BI 隐私算法&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;这一层的目的是其目的是降低隐私计算算法的开发门槛，提升开发效率。有隐私计算算法开发诉求的同学，可以根据自身场景和业务的特点，设计出一些特化的隐私计算算法，来&lt;strong&gt;满足自身业务和场景对安全性、计算性能和计算精度的平衡&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;在这一层上，隐语本身也会提供一些通用的算法能力，比如 MPC 的 LR/XGB/NN，联邦学习算法，SQL 能力等。&lt;/p&gt; 
&lt;span id="OSC_h2_10"&gt;&lt;/span&gt; 
&lt;h2&gt;二、"隐语"框架的使用&lt;/h2&gt; 
&lt;p&gt;使用隐语构建隐私计算算法 &lt;strong&gt;逻辑设备抽象为算法开发者提供了极大的灵活性，&lt;/strong&gt; 他们可以像积木一样自由组合这些设备，在设备上自定义计算，从而构建自己的隐私计算算法。&lt;/p&gt; 
&lt;p&gt;接下来，我们通过一个具体的算法来展示隐语框架的通用编程能力。联邦学习算法联邦机器学习又名联邦学习、联合学习、联盟学习，是一种机器学习框架，能有效帮助多个机构在满足用户隐私保护、数据安全和政府法规的要求下，进行数据使用和机器学习建模。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-ac805372dc1d72a4712d5e495a399b0eba4.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;联邦学习的算法流程如上图所示，大致分为以下四个步骤：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;机构节点在本地进行多轮训练，得到模型参数&lt;/li&gt; 
 &lt;li&gt;机构节点使用加密协议，将模型参数上传至聚合节点&lt;/li&gt; 
 &lt;li&gt;聚合节点使用加密协议，对模型参数进行聚合，得到全局模型&lt;/li&gt; 
 &lt;li&gt;机构节点从聚合节点获取最新的全局模型，进入下一轮训练&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;节点本地训练&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;机构节点运行在机构本地，隐语提供了一个逻辑设备&lt;code&gt;PYU&lt;/code&gt;，执行本地的明文计算。&lt;/p&gt; 
&lt;p&gt;下面的&lt;code&gt;BaseTFModel&lt;/code&gt;定义了本地模型训练逻辑，用户可以选择自己喜好的机器学习框架，如&lt;code&gt;TensorFlow, PyTorch&lt;/code&gt;等。&lt;/p&gt; 
&lt;p&gt;隐语提供了&lt;code&gt;@proxy&lt;/code&gt;装饰器，对一个普通的类进行了初始设置，以便后续在逻辑设备上对其实例化。&lt;code&gt;@proxy(PYUObject)&lt;/code&gt;表明该类需要在 PYU 设备上实例化。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@proxy(PYUObject)
class BaseTFModel:
    def train_step(self, weights, cur_steps, train_steps) -&amp;gt; Tuple[np.ndarray, int]:
    self.model.set_weights(weights)
        num_sample = 0
        for _ in range(train_steps):
            x, y = next(self.train_set)
            num_sample += x.shape[0]
            self.model.fit(x, y)

        return self.model.get_weights(), num_sample
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;模型安全聚合&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;模型聚合对各个机构节点的模型参数进行加权平均，如下面&lt;code&gt;_average&lt;/code&gt;所示。隐语逻辑设备的最大特点在于可编程性，用户可以将一段函数调度到多种设备执行，以达到使用不同隐私计算技术的目的。&lt;/p&gt; 
&lt;p&gt;目前，&lt;code&gt;DeviceAggregator&lt;/code&gt;可以支持 PYU 明文聚合，也可以支持 SPU MPC 协议聚合，后续我们还将支持 TEE, HEU 等多种密文设备。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@dataclass
class DeviceAggregator(Aggregator):
    device: Union[PYU, SPU]

    def average(self, data: List[DeviceObject], axis=0, weights=None):
        # 2. 机构节点使用加密协议，将模型参数上传至聚合节点
        data = [d.to(self.device) for d in data]
        if isinstance(weights, (list, tuple)):
            weights = [w.to(self.device) if isinstance(w, DeviceObject) else w for w in weights]

        def _average(data, axis, weights):
            return [jnp.average(element, axis=axis, weights=weights) for element in zip(*data)]

        # 3. 聚合节点使用加密协议，对模型参数进行聚合，得到全局模型
        return self.device(_average, static_argnames='axis')(data, axis=axis, weights=weights)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;训练流程整合&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;有了节点本地训练、模型安全聚合，我们就可以将其整合起来形成完整的训练流程。首先，我们在每个 PYU 设备（代表机构节点）创建 BaseTFModel 实例。&lt;/p&gt; 
&lt;p&gt;同时，初始化聚合器，可以是 PYU, SPU, TEE, Secure Aggregation。然后，按照上述描述的联邦学习算法流程进行迭代训练。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;class FedTFModel:
    def __init__(self, device_list: List[PYU] = [], model: Callable[[], tf.keras.Model] = None, aggregator=None):
        # 在每个机构节点 (PYU) 创建一个 BaseTFModel 实例
        self._workers = {device: BaseTFModel(
            model, device=device) for device in device_list}
        # 聚合器，可以是 PYU, SPUPPU, TEE, Secure Aggregation
    self._aggregator = aggregator

    def fit(self, x: Union[HDataFrame, FedNdarray], y: Union[HDataFrame, FedNdarray], batch_size=32, epochs=1, verbose='auto',
            callbacks=None, validation_data=None, shuffle=True,
            class_weight=None, sample_weight=None, validation_freq=1, aggregate_freq=1):
    self.handle_data(train_x, train_y, batch_size=batch_size,
                     shuffle=shuffle, epochs=epochs)

    # 初始化模型参数
    current_weights = {
        device: worker.get_weights() for device, worker in self._workers.items()}

    for epoch in range(epochs):
        for step in range(0, self.steps_per_epoch, aggregate_freq):
            weights, sample_nums = [], []
            for device, worker in self._workers.items():
                # 1. 机构节点在本地进行多轮训练，得到模型参数
                weight, sample_num = worker.train_step(current_weights[device], epoch*self.steps_per_epoch+step, aggregate_freq)
                weights.append(weight)
                sample_nums.append(sample_num)
            # 模型参数聚合，可以是：PYU, SPU, TEE, Secure Aggregation
            current_weight = self._aggregator.average(
                weights, weights=sample_nums)
            # 4. 机构节点从聚合节点获取最新的全局模型，进入下一轮训练
            current_weights = {device: current_weight.to(device) for device, worker in self._workers.items()}
&lt;/code&gt;&lt;/pre&gt; 
&lt;span id="OSC_h4_11"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;更多算法：&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;通过以上联邦学习算法的例子，我们展示了隐语作为隐私计算框架的可编程性、可扩展性。&lt;/p&gt; 
&lt;p&gt;期待您基于隐语探索更多&lt;strong&gt;有趣的用法&lt;/strong&gt;！更多详情请参考我们的教程和实现。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsecretflow.readthedocs.io%2Fzh%2Flatest%2Ftutorial%2Findex.html%23" target="_blank"&gt;https://secretflow.readthedocs.io/zh/latest/tutorial/index.html#&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;在 SPU 进行 PSI 对齐，逻辑回归、神经网络训练&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用 SPU HEU 的组合构建 HESS-LR, HESS-XGB 算法&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;横向联邦学习，在 PYU 进行本地训练，使用 SPU、TEE、Secure Aggregation 进行梯度、权重聚合&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;纵向拆分学习，将一个模型拆分至多个 PYU，使用 PYU 聚合隐层，使用差分隐私保护前向隐层和反向梯度&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-edf8393baa8c76890c2e321dca39a57a078.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;打开链接即可点亮社区 Star，照亮技术的前进之路。&lt;/p&gt; 
&lt;p&gt;Github 地址：&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsecretflow%2Fsecretflow" target="_blank"&gt;https://github.com/secretflow/secretflow&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;本文由隐语社区统一发布，欢迎大家点 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsecretflow%2Fsecretflow" target="_blank"&gt;Star&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/5915128/blog/18691893</link>
      <guid isPermaLink="false">https://my.oschina.net/u/5915128/blog/18691893</guid>
      <pubDate>Tue, 16 Sep 2025 07:10:27 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>OpenAI 发布最大规模 ChatGPT 普通用户使用报告</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;OpenAI 经济研究团队与哈佛大学经济学家 David Deming 合作完成了名为&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenai.com%2Findex%2Fhow-people-are-using-chatgpt%2F" target="_blank"&gt;&lt;em&gt;《How people are using ChatGPT》&lt;/em&gt;&lt;/a&gt;的研究报告，据称这是有史以来最大规模的一次关于普通用户（consumer users）如何使用 ChatGPT 的调查。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0916/151027_d0un_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;样本包括 150 万条对话，结合了 ChatGPT 在 2025 年中期的用户活动数据（当时每周有约 7 亿活跃用户）。&lt;/p&gt; 
&lt;p&gt;下面是该研究的一些发现：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;谁在使用 ChatGPT？&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;性别差距正在缩小。早期用户中，名字可分辨为「女性倾向」的占比曾比现在少；到了 2025 年 7 月，这一比例上升到超过一半。&lt;/li&gt; 
 &lt;li&gt;在低收入和中等收入国家的采用率增长尤其快。到 2025 年 5 月，最低收入国家的增长率是最高收入国家的 4 倍以上。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;人们用 ChatGPT 做什么？&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;大部分对话是关于处理日常任务（practical guidance）、获取信息（seeking information）和写作（writing）。写作是工作中最常见的任务类型。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;互动类型可以分为三类：「Asking」（提问）、「Doing」（执行任务／创造输出）、「Expressing」（表达）。在这些中：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;「Asking」（约 49%）— 用户寻求建议、信息等；&lt;/li&gt; 
   &lt;li&gt;「Doing」（约 40%）— 包括起草文本、策划、编程等实作型任务，其中约三分之一是用于工作用途。&lt;/li&gt; 
   &lt;li&gt;「Expressing」（约 11%）— 包括情感表达、反思、娱乐或个人探索等。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;使用形式与演变？&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;大约 30% 的使用与工作有关，约 70% 与非工作（个人生活）有关。两者都在增长，说明 ChatGPT 不仅是生产力工具，也在个人日常生活中创造价值。&lt;/li&gt; 
 &lt;li&gt;一个关键的价值是决策支持（decision support）：ChatGPT 在知识密集型职业中能够帮助改善判断和效率。&lt;/li&gt; 
 &lt;li&gt;使用随着时间加深：随着模型能力的提升和用户探索出新的用途，人们使用频次与深入程度都在上升。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;研究发现，ChatGPT 的用户基础越来越广泛，使用者的社会／经济背景差距在缩小。 它不仅在工作场景中提高效率，也在日常生活中提供帮助；因此其经济价值不仅体现在对 GDP 的直接贡献，也体现在人们日常生活中未被传统经济统计完全捕捉的价值。 OpenAI 从中得出的理念是，人工智能的访问应当被视为基本权利，让更多人能利用它释放潜力，塑造自己的未来。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372540/how-people-are-using-chatgpt</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372540/how-people-are-using-chatgpt</guid>
      <pubDate>Tue, 16 Sep 2025 07:09:27 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>腾讯跨端开源框架 Kuikly 适配「液态玻璃」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Kuikly 是基于 Kotlin Multiplatform 的 UI 与逻辑全面跨端综合解决方案，由腾讯大前端领域 Oteam（公司级）推出，旨在提供一套一码多端、极致易用、动态灵活的全平台高性能开发框架。&lt;/p&gt; 
&lt;p&gt;目前支持如下平台：Android、iOS、鸿蒙、Web（beta）和小程序（beta）。&lt;/p&gt; 
&lt;p&gt;Kuikly 团队介绍称，项目已完成对「液态玻璃」的首阶段适配，并对外开源发布。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0916/143023_KFsf_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="640" src="https://static.oschina.net/uploads/space/2025/0916/143104_iaPI_2720166.jpg" width="295" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;为了适配「液态玻璃」，Kuikly 没有引入新的独立组件，而是为现有组件提供了简洁的视图属性扩展。例如，开发者只需通过一行&amp;nbsp;&lt;code&gt;glassEffectIOS()&lt;/code&gt;代码，即可为任意容器视图启用液态玻璃效果。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;View {
    attr {
        glassEffectIOS() // iOS 平台将自动添加液态玻璃效果
    }
    // ... 其他子视图
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;团队表示，Kuikly 的适配工作并非简单的 UI 改造，而是充分利用原生提供的基础能力，在框架渲染层和 DSL 驱动层两方面进行扩展，旨在为开发者提供一套便捷、低成本的适配方案。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372524</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372524</guid>
      <pubDate>Sun, 14 Sep 2025 06:32:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>逻辑智能开源语音大模型框架 LLaSO</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;北京深度逻辑智能科技有限公司宣布于近日&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FC_6mpkuhZKux-2_R4ry-WA" target="_blank"&gt;推出&lt;/a&gt;了 LLaSO—— 首个完全开放、端到端的语音语言模型研究框架。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;「&lt;span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"&gt;旨在为整个社区提供一个统一、透明且可复现的基础设施，其贡献是 「全家桶」 式的，包含了一整套开源的数据、基准和模型，希望以此加速 LSLM 领域的社区驱动式创新。&lt;/span&gt;」&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="293" src="https://oscimg.oschina.net/oscnet/up-ed6dc13e714b133ebab01f09bf906071073.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;LLaSO 框架包括三个核心开源组件：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;strong&gt;LLaSO-Align：大规模语音 - 文本对齐数据集&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;strong style="color:#3daad6"&gt;数据规模&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：1200 万语音 - 文本对齐样本&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;strong style="color:#3daad6"&gt;数据来源&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：聚合对话、有声书、多口音语音等多样化来源&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;strong style="color:#3daad6"&gt;技术目标&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：通过自动语音识别（ASR）任务建立语音表示与文本语义空间的精确对齐&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;strong style="color:#3daad6"&gt;质量控制&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：采用多重过滤机制确保数据质量和说话人多样性&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;strong&gt;LLaSO-Instruct：多任务指令微调数据集&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;strong style="color:#3daad6"&gt;数据规模&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：1350 万多任务指令样本&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;strong style="color:#3daad6"&gt;任务覆盖&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：涵盖语言学、语义学、副语言学三大类共 20 项任务&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
  &lt;ul&gt; 
   &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;语言学任务：ASR、翻译、总结等基础语言理解&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;语义学任务：问答、推理、内容分析等高级认知&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;副语言学任务：情感识别、口音检测、说话人分析等&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;strong style="color:#3daad6"&gt;模&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong style="color:#3daad6"&gt;态支&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong style="color:#3daad6"&gt;持&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：系统性支持三种交互配置&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;文本指令 + 音频输入（Text-Audio）&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;音频指令 + 文本输入（Audio-Text）&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;纯音频指令与输入（Audio-Audio）&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:8px; margin-right:8px; text-align:justify"&gt;&lt;span&gt;&lt;strong&gt;LLaSO-Eval：标准化评估基准&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;strong style="color:#3daad6"&gt;样本规模&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：15,044 个测试样本&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;strong style="color:#3daad6"&gt;数据隔离&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：与训练集严格分离，确保评估公平性&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;strong style="color:#3daad6"&gt;评&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong style="color:#3daad6"&gt;估维&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong style="color:#3daad6"&gt;度&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：覆盖所有 20 项任务的 comprehensive evaluation&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li style="text-align:justify"&gt;&lt;span&gt;&lt;strong style="color:#3daad6"&gt;可复现性&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：提供统一评估协议和自动化评估工具&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"&gt;为验证框架有效性，逻辑智能团队基于 LLaSO 数据训练了 38 亿参数的参考模型 LLaSO-Base。&lt;/span&gt;实验&lt;span&gt;&lt;span&gt;结果表明，LLaSO-Base 以 0.72 的得分在所有参评模型中排名首位，相较于排名第二的 Kimi-Audio (0.65) 和第三位的 Qwen2-Audio (0.57) 展现出明显的性能优势。该结果充分验证了 LLaSO-Base 模型的整体效能。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span&gt;&lt;span&gt;进一步分析发现，采用多任务训练范式的模型（如 LLaSO-Base）在综合评测中的表现明显优于专门针对特定任务（如 AQA）进行定向优化的模型（例如 Llama-Omni 和 Mini-Omni）。这一现象印证了多样化任务训练策略在提升模型泛化能力方面的重要价值。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&lt;img height="388" src="https://oscimg.oschina.net/oscnet/up-7f6af77eab1e1f711528bdf0107dbc9009b.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372521</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372521</guid>
      <pubDate>Sun, 14 Sep 2025 06:26:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>豆包超越 DeepSeek，夺 8 月中国原生 AI App 月活第一</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;QuestMobile 最新发布的 2025 年 8 月数据显示，豆包月活跃用户规模超越 DeepSeek，登顶中国原生 AI App 月活榜首。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;2025 年 8 月，豆包月活跃用户规模达 15742 万，环比增长 6.6%，从第二名升至第一名。曾居首位的 DeepSeek，8 月用户规模虽仍处亿级，但因-4.0% 的环比增速，排名下滑 1 位。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;其他选手表现各异，腾讯元宝以 22.4% 的高环比增速，稳坐第三，月活规模处于 1000 万-1 亿量级。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="312" src="https://oscimg.oschina.net/oscnet/up-8238d5a3fc82af06988bd71a14aa8c12677.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372512</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372512</guid>
      <pubDate>Sun, 14 Sep 2025 06:14:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Kimi K2 官方高速版 API 开启限时 5 折特惠</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;Kimi K2 官方高速版 API &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FwAZcYpDNbn4S8P8HbPNHIw" target="_blank"&gt;宣布&lt;/a&gt;开启为期一个月的 5 折特惠。活动有效期为：2025 年 09 月 16 日（含）到 10 月 15 日（含），10 月 16 日 0 时起恢复原价。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="402" src="https://oscimg.oschina.net/oscnet/up-e4a7c820caf6ccd83e90de55faa3eae6d2f.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;kimi-k2-turbo-preview 是 Kimi K2 模型的高速版，模型参数与 kimi-k2-0905 一致，已提升至 256K 上下文。Kimi K2 高速版的输出速度达 60~100 Token/s，是普通版的 6 倍左右。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;公告称，「我们已开启为期一个月的 5 折特惠，希望每个开发者都有机会体验到更畅快、快、快、快、快、快的 Coding 体验。此外，Kimi K2 官方 API 支持自动上下文缓存，可为你节省更多输入 Tokens。」&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372503</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372503</guid>
      <pubDate>Sun, 14 Sep 2025 05:42:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>华擎发布 AI QuickSet WSL，在 Windows 下执行 Linux AI Apps</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;华擎（ASRock）宣布推出 AI QuickSet 安装小帮手的第二代版本——&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.asrock.com%2Fmicrosite%2Faiquicksetwsl%2F" target="_blank"&gt;AI QuickSet WSL&lt;/a&gt;，旨在助力用户在 Windows 系统中便捷搭建功能完备的 WSL（适用于 Linux 的 Windows 子系统）环境，并部署一系列基于 Linux 系统的 AI 应用程序。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0916/120635_w1cS_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;华擎表示，在 Windows 上构建合适的 AI 开发环境，步骤繁琐且耗时久，而众多前沿 AI 应用多在 Linux 环境开发运行，这给想在 Windows 使用 Linux AI 应用的初学者带来挑战。&lt;/p&gt; 
&lt;p&gt;AI QuickSet WSL 基于 AMD ROCm 平台打造，可自动化整个工作流程，确保 WSL 环境针对华擎 AMD Radeon RX 9000 系列显卡完成加速预先配置。&lt;/p&gt; 
&lt;p&gt;&lt;img height="563" src="https://static.oschina.net/uploads/space/2025/0916/120650_BBax_2720166.png" width="433" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;该工具内置为 ROCm 优化的 PyTorch 等基础框架，还提供多款「开箱即用」的 AI 应用工具，包含：可根据文字描述生成全新音乐的 Audiocraft、用于图片与漫画翻译的 Image/Manga Translator、可将人像转换为卡通风格的 PixtoonLab，以及能轻松去除或替换影片背景的 Video Background Remover &amp;amp; Changer。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372488</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372488</guid>
      <pubDate>Sun, 14 Sep 2025 04:07:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>go-carbon v2.6.12 发布，日期时间处理库</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;go-carbon v2.6.12 已经发布，日期时间处理库。&lt;/p&gt; 
&lt;h2&gt;更新内容&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;将 &lt;code&gt;golang&lt;/code&gt; 环境依赖从 &lt;code&gt;1.21&lt;/code&gt; 降低到 &lt;code&gt;1.18&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;将 &lt;code&gt;testify&lt;/code&gt; 测试框架从 &lt;code&gt;v1.10.0&lt;/code&gt; 升级到 &lt;code&gt;v1.11.1&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;在 &lt;code&gt;type_carbon.go&lt;/code&gt; 文件 &lt;code&gt;UnmarshalJSON&lt;/code&gt; 方法中设置 &lt;code&gt;isEmpty&lt;/code&gt; 标志以表示空值&lt;/li&gt; 
 &lt;li&gt;使用 &lt;code&gt;sync.Map&lt;/code&gt; 实现高性能并发缓存&lt;/li&gt; 
 &lt;li&gt;修复潜在的竞态条件和空指针解引用问题，提高并发安全性&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;完整的更新日志&lt;/strong&gt;: &lt;a href="https://gitee.com/dromara/carbon/commits/v2.6.12" target="_blank"&gt;https://gitee.com/dromara/carbon/commits/v2.6.12&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;详情查看：&lt;a href="https://gitee.com/dromara/carbon/releases/v2.6.12"&gt;https://gitee.com/dromara/carbon/releases/v2.6.12&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372485</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372485</guid>
      <pubDate>Sun, 14 Sep 2025 03:54:00 GMT</pubDate>
      <author>来源: 资讯</author>
    </item>
    <item>
      <title>如何秒级实现接口间 「幂等」 补偿：一款轻量级仿幂等数据校正处理辅助工具</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;导语&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;本文分析了在网络超时场景下，RPC 服务调用数据一致性的问题，对于接口无幂等、接口幂等失效情况下，对异常数据快速处理做了分析思考和尝试，开发了一款轻量级仿幂等数据校正处理辅助工具。该工具可以 MOCK 或 SPY 服务调用，不限于 RPC 接口，进程内的方法调用也支持，与 JSF、WebService、HTTP 方式无关，只要方法能被代理，就可以使用，写服务、读服务均可以支持。目前已在生产环境中使用，在关键时刻可以发挥相应的作用。本文工具并不重要，重要的是与大家一起探讨一些解决方案，给大家提供一种思路。如果小伙伴有类似诉求，也欢迎大家合适的场景下接入使用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_2"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;由来&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;最近在参与系统的故障与处理恢复专题，我脑海中衍生了一个关于数据校正处理（或称之为修数，或数据处理）相关的一个 idea，可以在一些场景下发挥重要作用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本文的重点不是探讨故障与处理恢复措施，比如三板斧、三把刀，而是将我脑海中的这个 idea 场景剖开，打算设计和开发一款对应的数据处理提效工具，落地到相应场景中去使用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_3"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;场景分析&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在分布式架构中，应用之间的网络通信，简单说存在三种状态：成功、失败、超时，简称为网络三态。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;成功：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;请求成功发送并且得到正确的响应。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;失败：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;请求发送失败或收到的响应表示操作失败。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;超时：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;请求在指定时间内没有收到响应。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//8303165aa49fcad6d9551b93c03d8c49.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//82115900f151a4b78557e00a2dc1c5a5.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对于成功而言，可以正常响应处理。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对于失败而言，可以进行数据回退、重试补偿等手段。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对于成功、失败这两种状态而言，结果都是明确的，在分布式数据一致性处理上也相对比较简单。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对于超时而言，调用方感知的是超时，服务提供方处理的时间超出预期时间，但服务提供方最终是否执行成功，不得而知。有可能执行失败，也有可能最终处理成功并落库，只是未能响应给调用方。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在超时情况下，即使调用方再感知超时后，回退自身数据后，同时尝试回退服务提供方的数据时，大概率也是回退失败，因为此时服务提供方尚未执行完成，数据尚未落库完成。如果说 delay 一段时间后，再去回退服务提供方的数据，倒是可行，但 delay 多长时间，回退多少次才能成功，都不确定，对调用方来说，也增加了复杂性和运维难度。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;假如服务调用是同一个线程中的本地调用，访问同一个数据库实例，则可以直接使用数据库事务来保障一致性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果是分布式调用，可以采取分布式事务措施，例如 2PC、3PC、TCC、Saga 事务等方式来保障一致性，市面上也有成熟的分布式事务中间件可以使用，例如 Seata 解决方案。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;上面说到分布式事务只是顺着话题延伸了一下，本文重点不是探讨分布式事务的解决方案，况且很多京东系统，并没有接入分布式事务解决方案，本文重点思考在超时场景下，有没有一些手段或工具可以帮助快速数据一致性处理、故障恢复。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_4"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;思考&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;超时也许是由于网络抖动，或者服务器负载过高造成的服务超时，也有可能是程序性能不佳造成的持续超时。最终的数据处理和恢复方向，都是要让数据在应用之间得以流动落地，才能使整个链路的流程走下去，即要保障应用间数据的最终一致性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果服务可以降级，则降级是比较快速的一个恢复手段。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果服务不可降级，则通过重试补偿等手段来恢复数据的一致性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;RPC 服务重试，调用方、服务提供方需要保障接口的幂等性才能保证重试无副作用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;何为幂等性？幂等是一次和多次请求某一个资源对于资源本身应该具有同样的结果，换言之，其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;接口的幂等性，需要调用方和服务提供方相互配合才行，倘若服务提供方提供的接口支持幂等性，双方按照约定接口入参中的 uuid 作为唯一序列号进行防重，但服务提供方每次的重试调用（无论上次调用成功与否）uuid 都会改变，这就会使得幂等失效。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果接口没有实现幂等性，或者由于调用方每次必变 uuid 导致幂等失效，在这种情况下，该如何快速恢复数据呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//96fab606c22c807f8804977e164de844.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如上图所示，由于服务超时后，应用 B 内部仍在持续执行，此时恢复手段是：人工介入，梳理数据后，人工将应用 B 的数据进行回退，或者人工将应用 A 的数据进行补齐推动流程向后走，人工保证 A 和 B 之间的数据一致性。倘若应用 A、B 背后的流程比较长，涉及的表关系比较复杂，数据量比较大，这时候人工就难以处理了，也容易出错，造成二次伤害。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;之前还遇到过一种情况，服务提供方和调用方都支持幂等，但由于一些原因，调用方很久之前的一个异步任务失败了，而调用方用于幂等防重的数据归档了。当时为了支持幂等重试，从归档库里拉回了相应的流水数据到生产库，才重试调用成功，费力费力，效率低。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_5"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;思路&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这里持续探索无幂等或幂等失效场景下的重试能力建设。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//eea2e1c2d739018b2a4692c00ffca6c7.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在应急处理情况下，向来都是争分夺秒，这里可以通过 MOCK 结果返回给调用方 A，相当于「预支成功」。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;并非所有的「预支成功」都是合理的，为了让「预支成功」尽可能合理，需要在服务提供方内部实现里，做好充分的判断和校验，这种判断和校验尽量是轻量级的。如果高并发情况下的「预支成功」判断不合理，事后可以人工介入核对和补偿数据。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_6"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;建设工具&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;span id="OSC_h2_7"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对工具的期望&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;由于接口无幂等或幂等失效，需要对能够预支成功的请求圈定一个范围，这个范围要支持配置，最好支持动态配置秒级生效。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;对这个范围内的请求，进行伪幂等，MOCK 特定结果，返回给调用方，使得调用方可以拿到成功结果快速推动流程。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;圈定的范围尽可能具体，尽量避免不该 MOCK 的进行了 MOCK，造成服务调用方的数据没得到刷新，导致数据的不一致。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在实现中，我称这个工具为「魔法工具」，是一种「障眼法」，是一种「预先支付成功」，是一种 MOCK 或 SPY，对于调用方 A 来说，是一种体感上的成功，认为调用方真的处理成功了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_8"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;配置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//f2e03fc503b2f2d838b80057d6c11b8c.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在配置中，支持多个配置内容的存在，比如有多个单据需要同时进行伪幂等 MOCK。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//69f902731c7a9a83287f1a210edb6570.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//3fc672168a015ec1f50bef206ee0ba00.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;更直观地，用一个 JSON 数据示例来看一下数据结构：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;{
    "detailList": [
        {
            "enabled": true,
            "className": "com.jdwl.wms.stock.app.service.main.StockTransferAppServiceImpl",
            "methodName": "increaseStock",
            "basicNo1": null,
            "basicNo2": null,
            "basicNo3": "6_6_601",
            "uuidList": null,
            "businessNoList": [
                "GZQ202503160250001"
            ],
            "startTime": "2025-03-16 01:50:00",
            "endTime": "2025-03-18 03:50:00",
            "strategy": "DO_AND_RETURN_SUCCESS_REGARDLESS_OF_FAILURE",
            "defaultResult": {
                "resultValue": true,
                "resultCode": 100000,
                "prompType": 0,
                "success": true
            }
        }
    ]
}

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;startTime、endTime 时间区间是用来卡控配置生效的时间段，正常情况下配置是短暂生效，起到数据处理的作用后，应去掉该配置。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;目前策略有两种：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//dc3db9330133021b9fb639b2b1edf3ae.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这两个策略的区别是要不要真正执行一次接口实现，类似於单测中的 MOCK 和 SPY 效果。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;defaultResult 是该接口方法的期望返回值，配置对应的返回值 JSON，会按照配置的内容直接返回给调用方。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_9"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;核心实现&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;span id="OSC_h3_10"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;圈定范围的匹配&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//d949d28bdf0bd3de007806517ee3902e.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;按不同策略 MOCK 或 SPY&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//89cf796c6fecdf955888991513be6f24.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_11"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;使用案例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;span id="OSC_h2_12"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;案例一 MOCK 服务调用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;span id="OSC_h3_13"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通过 DUCC 配置圈定要 MOCK 的范围&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//b8ede20be0545441b5fadb54f12268c9.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;{
    "detailList": [
        {
            "enabled": true,
            "className": "com.jdwl.wms.stock.app.service.main.StockTransferAppServiceImpl",
            "methodName": "increaseStock",
            "basicNo1": null,
            "basicNo2": null,
            "basicNo3": "6_6_601",
            "uuidList": null,
            "businessNoList": [
                "GZQ202503160250001"
            ],
            "startTime": "2025-03-16 01:50:00",
            "endTime": "2025-03-18 03:50:00",
            "strategy": "DO_NOTHING_AND_RETURN_SPECIFIED_VALUE",
            "defaultResult": {
                "resultValue": true,
                "resultCode": 100000,
                "prompType": 0,
                "success": true
            }
        }
    ]
}

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_14"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在 JSF 平台模拟客户端调用方发起调用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//15d6244f00c5a863ebecaa587a9b3112.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这里采用的策略是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;DO_NOTHING_AND_RETURN_SPECIFIED_VALUE，即：不执行，直接返回指定的返回值&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;JSF 的返回值就是在上面所配置的返回值内容。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_15"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;验证执行情况&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这里检查数据库落库情况，看方法是否真地得到执行。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//e5cc32a3b3b2c048d4be47cbef70608b.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;与预期一致，方法被成功 MOCK，未真正执行该方法，返回了预先配置的返回值。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_16"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;案例二，阻隔异常数据生成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;近期生产环境遇到一个场景，逆向盘点时，有个终止盘点的操作，这个操作表示结束盘点，并且未盘点的明细则以少货缺量的方式提报差异，并预占库存。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;虽然按钮有提示，但少概率下会有操作人员不看提示而误点击，形成大量的差异库存预占。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这些预占是由于误点击形成的差异预占，并非真实的差异，属于异常数据，这种数据需要释放关闭处理，如果数据量较大，现场会找研发团队协助处理。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_17"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;异常监控&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;收到监控告警，查看流量情况，发现有突发差异提报流量，短时间内调用量比日常高出很多。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//5b2684833dc51fb34778098887a3e724.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_18"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;阻隔配置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;找到异常仓号和单号，与现场电话对齐后，决定对该异常单进行阻隔拦截，避免产生更多的异常数据。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//dad593a365c62156e7492ab854eccb33.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;{
    "detailList": [
        {
            "enabled": true,
            "className": "com.jdwl.wms.stock.app.service.main.StockExceptionHandleAppServiceImpl",
            "methodName": "recordDifferenceDetail",
            "basicNo1": null,
            "basicNo2": null,
            "basicNo3": "11309_200",
            "uuidList": null,
            "businessNoList": [
                "DPPT1904111957150015488"
            ],
            "startTime": "2025-03-24 19:37:00",
            "endTime": "2025-03-25 00:00:00",
            "strategy": "DO_NOTHING_AND_RETURN_SPECIFIED_VALUE",
            "defaultResult": {
                "resultValue": true,
                "resultCode": 100000,
                "prompType": 0,
                "success": true
            }
        }
    ]
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_19"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;结果核实&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//8f78246f5db28cba16d7d3e78d7084d2.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通过核实日志和数据，该工具有效阻隔了部分异常数据的生成，节省了异常数据核对和处理的时间。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_20"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本文所提出的一款轻量级仿幂等数据校正处理辅助工具，可以达到 MOCK 或 SPY 的效果。不仅可以用在无幂等或幂等失效场景下，数据库快速处理恢复的场合，还可以用于一些查询类、校验类的读服务的 MOCK 场景。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;现阶段工具还比较简单，功能还很有限，使用场景也有针对性和局限性，希望在一些场景上可以帮助大家。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本文工具并不重要，重要的是与大家一起探讨一些解决方案，给大家提供一种思路。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本文的解决方案是我短时间内的一个思考和落地尝试，未必是最优的，希望与大家一起交流更好的方案。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_21"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如何接入使用？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果小伙伴也有类似使用诉求，大家可以先在测试、UAT 环境接入试用，然后再逐步推广线上生产环境。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;接入方法也非常简单，如下。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_22"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、引入 Maven 依赖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;!-- http://sd.jd.com/article/44544?shareId=105168&amp;amp;isHideShareButton=1 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;com.jd.sword&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;sword-aspect&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1.0.2-SNAPSHOT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;org.projectlombok&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;lombok&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;org.apache.commons&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;commons-lang3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;org.slf4j&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;slf4j-api&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;org.springframework&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;spring-context&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;org.aspectj&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;aspectjweaver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;com.alibaba&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;fastjson&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;com.jd.laf.config&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;laf-config-client-jd-spring&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;com.jd.sword&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;sword-constant&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1.0.0-SNAPSHOT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;com.jd.sword&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;sword-annotation&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1.0.1-SNAPSHOT&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#393c5a"&gt;对于其中的间接依赖，例如 lombok 等，大家可以使用自己工程中的已有依赖，在这里可以通过 exclusion 排掉，如果自己工程中没有这些依赖，可以不 exclusion。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_23"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、在被拦截方法上打上注解&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;示例：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;@Magic&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;enabled &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; basicNo3 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"#args[0].requestHeader.warehouseNo"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; uuid &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"#args[0].requestHeader.uuid"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; businessNo &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"#args[0].requestHeader.businessNo"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;支持&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;SpEL 表达式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;建议在服务提供方的内部方法实现内，或者调用方在调用目标 API 的防腐层上进行注解。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;服务提供方的内部方法实现内，不一定是放在 API 的 impl 层，也可以是其内部的 Service 层，比如放在幂等防重和轻量级校验判断之后，重量级核心逻辑实现之前。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_24"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3、使用时进行按需配置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;DUCC 配置或 Spring yml 配置都可以，更推荐使用 DUCC 动态配置生效。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;使用完应尽快去掉配置，可以保留空壳，将 detailList 置为空 list。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;示例配置：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;{
    "detailList": [
        {
            "enabled": true,
            "className": "com.jdwl.wms.stock.app.service.main.StockTransferAppServiceImpl",
            "methodName": "increaseStock",
            "basicNo1": null,
            "basicNo2": null,
            "basicNo3": "6_6_601",
            "uuidList": null,
            "businessNoList": [
                "GZQ202503160250001"
            ],
            "startTime": "2025-03-16 01:50:00",
            "endTime": "2025-03-18 03:50:00",
            "strategy": "DO_NOTHING_AND_RETURN_SPECIFIED_VALUE",
            "defaultResult": {
                "resultValue": true,
                "resultCode": 100000,
                "prompType": 0,
                "success": true
            }
        }
    ]
}

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;或&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;magic:
  content: '{"detailList":[{"enabled":true,"className":"com.jdwl.wms.stock.app.service.main.StockTransferAppServiceImpl","methodName":"increaseStock","basicNo1":null,"basicNo2":null,"basicNo3":"6_6_601","uuidList":null,"businessNoList":["GZQ202503160250"],"startTime":"2025-03-16 01:50:00","endTime":"2025-03-18 03:50:00","strategy":"DO_AND_RETURN_SUCCESS_REGARDLESS_OF_FAILURE","defaultResult":{"resultValue":true,"resultCode":100000,"prompType":0,"success":true}}]}'

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4090830/blog/18691875</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18691875</guid>
      <pubDate>Sun, 14 Sep 2025 03:31:00 GMT</pubDate>
      <author>原创</author>
    </item>
    <item>
      <title>谷歌 DeepMind 发布差分隐私语言模型 VaultGemma</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;谷歌 DeepMind 近日&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fresearch.google%2Fblog%2Fvaultgemma-the-worlds-most-capable-differentially-private-llm%2F" target="_blank"&gt;推出&lt;/a&gt;了一款名为 VaultGemma 的新型语言模型，专注于保护用户隐私。这是目前规模最大的具备差分隐私能力的开源模型，拥有 10 亿参数。&lt;/p&gt; 
&lt;p&gt;大语言模型通常存在一个隐患：它们可能在训练过程中记住了部分数据，包括姓名、地址甚至完整文档等敏感信息。而差分隐私技术通过在训练过程中引入可控的随机噪声，有效防止模型将输出与特定训练样本关联起来。&lt;/p&gt; 
&lt;p&gt;这意味着，即使 VaultGemma 曾接触过机密文件，从统计上也无法将其内容还原。谷歌表示，初步测试已验证该模型不会泄露或复现训练数据。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-52b97f4136efa9449fe9e6580c465ed3228.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在架构上，VaultGemma 是基于 Google Gemma 2 架构的仅解码器 Transformer 模型，具有 26 层并使用多查询注意力机制。研究人员表示，关键设计选择之一是将序列长度限制为 1024 个 Token，这有助于管理私有训练的密集计算需求。开发过程由一套新颖的"差分隐私缩放定律"指导，为平衡计算能力、隐私预算和模型效用之间的权衡提供框架。&lt;/p&gt; 
&lt;p&gt;VaultGemma 的性能大致相当于五年前的普通语言模型，在生成能力上略显保守，但为隐私安全提供了更强保障。&lt;/p&gt; 
&lt;p&gt;谷歌研究人员表示，他们正在 Hugging Face 和 Kaggle 上以开源许可证提供 VaultGemma 及其权重和代码库，以普及私有 AI 的访问。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372471</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372471</guid>
      <pubDate>Sun, 14 Sep 2025 03:11:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>谷歌 AI 承包商裁员风波：200 多名员工因工作条件争议被解雇</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;谷歌近期对外包公司 GlobalLogic 的承包商进行了裁员，超过 200 名员工因工薪和工作条件问题被解雇。这一行动引发了员工的不满和抗议，他们指出长期以来的低薪与恶劣的工作环境，导致这一冲突不断升级。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;这些被裁的承包商主要负责谷歌的 AI 产品的评估和改进工作，包括新推出的 Gemini 聊天机器人及其 AI 概述功能。这些员工通常通过对 AI 生成的内容进行评估和编辑，来提升产品的表现。然而，裁员的发生让他们感到措手不及，许多人在被告知裁员时并未得到充分的解释和预警。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="277" src="https://oscimg.oschina.net/oscnet/up-51606cb1d0c07af735b3f9d472e5156aa64.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;其中一位名叫安德鲁・劳宗（Andrew Lauzon）的前员工表示，他于 2024 年 3 月加入 GlobalLogic，工作内容包括对 AI 输出进行评估及模型输入提示的制定。他对突如其来的裁员感到震惊，并对未来的工作感到不安。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在继续工作的员工中，许多人也表达了对未来的不确定性。他们担心公司正在计划用 AI 自动化评估，从而取代人类的工作岗位。同时，尽管公司在招聘新员工，但却在减少现有员工的数量。这种情况尤其在德克萨斯州的奥斯汀办事处尤为明显，许多员工被要求重返办公室工作，给那些无法承担通勤费用或身体状况不佳的员工带来了额外压力。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;许多承包商表示，自己的薪水偏低，工作条件也不理想，导致士气下降。尽管许多员工拥有硕士或博士学位，但他们的薪酬与工作强度和复杂性不成正比。在努力组织工会以争取更好待遇的过程中，部分员工甚至遭遇了报复，部分员工向国家劳动关系委员会（NLRB）提出了投诉。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;谷歌的发言人回应称，GlobalLogic 及其子承包商负责员工的雇佣和工作条件，谷歌将对供应商进行审核。尽管如此，员工们仍感受到工作环境的压迫，社交空间受到限制，使得工作压力加大。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372467</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372467</guid>
      <pubDate>Sun, 14 Sep 2025 03:05:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>🔥🔥解压神器——打脸机</title>
      <description/>
      <link>https://www.oschina.net/ai-creation/details/2218</link>
      <guid isPermaLink="false">https://www.oschina.net/ai-creation/details/2218</guid>
      <pubDate>Sun, 14 Sep 2025 02:54:00 GMT</pubDate>
    </item>
    <item>
      <title>瑞士三强联合发布开源大模型 Apertus</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;瑞士联邦理工学院洛桑分校（EPFL）、苏黎世联邦理工学院（ETH Zurich）以及瑞士国家&lt;span&gt;超级&lt;/span&gt;计算中心（CSCS）近日联合发布了一个名为 「Apertus」 的大规模开源语言模型，该模型的名字在拉丁语中意为 「开放」。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="283" src="https://oscimg.oschina.net/oscnet/up-1bf6c0c62764859dbeda7ab7e4f4c0cb194.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;与当前市场上如 OpenAI 的 GPT 系列、Meta 的 Llama 和 Anthropic 的 Claude 等美国大型模型相比，Apertus 不仅注重技术本身，更以其透明度赢得了广泛的关注。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;这款模型的所有内容，包括模型权重、架构设计、训练代码以及数据来源等，全部实现了公开，甚至连训练过程的完整文档也毫无保留。这种 「开放」 策略让 Apertus 成为了一个值得期待的新选择。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在这个 AI 快速发展的时代，「数据黑箱」 的现象依然普遍存在。许多大型科技公司在发布他们的模型时，往往对外界隐瞒了大量关键细节，导致了行业的不信任感。而 Apertus 则打破了这一常规，力求通过开源的方式来促进技术的共享与合作。研究人员和开发者们可以在此基础上进行创新与改进，推动整个行业的进步。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;这项研究的团队表示，Apertus 的推出不仅旨在为研究提供便利，更希望激励全球的 AI 研究者和开发者共同参与到开源生态中来。通过这种方式，Apertus 希望能够降低 AI 技术的门槛，让更多的人能够参与到 AI 的开发和应用中，从而加速科技进步。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372461</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372461</guid>
      <pubDate>Sun, 14 Sep 2025 02:52:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>阿里 AI 编程工具 Qoder 正式推出付费订阅计划</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;阿里巴巴旗下 AI 编程工具 Qoder 宣布正式面向全球用户推出付费订阅计划，Pro 版每月 20 美元（现汇率约合 142.4 元人民币），Pro + 版本 60 美元（现汇率约合 427.3 元人民币）。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1080" src="https://static.oschina.net/uploads/space/2025/0916/104047_7oG4_2720166.jpg" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="587" src="https://static.oschina.net/uploads/space/2025/0916/104059_8jyB_2720166.png" width="1809" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Pro 版权益&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;无限代码补全和 Next Edits&lt;/strong&gt;：智能补全代码，预测下一步操作，让编程更加轻松高效。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;2,000 Credits&lt;/strong&gt;：灵活调用全球最先进的高级模型，满足日常开发需求。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Quest Mode&lt;/strong&gt;：Spec 驱动的委派编程模式，多任务异步执行。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Repo Wiki&lt;/strong&gt;：代码仓库的知识显性化，支持共享和导出。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Pro+ 版权益&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;无限代码补全和 Next Edits&lt;/strong&gt;：智能补全代码，预测下一步操作，让编程更加轻松高效。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;6,000 Credits&lt;/strong&gt;：灵活调用全球最先进的高级模型，满足日常开发需求。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Quest Mode&lt;/strong&gt;：Spec 驱动的委派编程模式，多任务异步执行。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Repo Wiki&lt;/strong&gt;：代码仓库的知识显性化，支持共享和导出。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;此外，Qoder 新用户限时 2 周免费试用，畅享超值权益：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;1,000 Credits 用于高级模型&lt;/li&gt; 
 &lt;li&gt;无限代码补全和 Next Edits&lt;/li&gt; 
 &lt;li&gt;Quest Mode&lt;/li&gt; 
 &lt;li&gt;Repo Wiki&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;订阅页面：https://qoder.com/pricing&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372459</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372459</guid>
      <pubDate>Sun, 14 Sep 2025 02:45:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>2025 年 Python 现状：83% 仍在运行旧版，Python Web 开发复兴</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;第八届年度 Python 开发者调查现已发布，基于全球 30,000 多名 Python 开发者的调查回复。 本次调查由 Python Software Foundation 和 JetBrains 的 PyCharm 团队合作开展。&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;2025 年 Python 现状（速通版）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span style="color:#000000"&gt;50% 的 Python 开发者拥有不到 2 年的专业经验&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style="color:#000000"&gt;51% 使用 Python 进行数据探索和处理&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style="color:#000000"&gt;46% 使用 Python 进行 Web 开发&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style="color:#000000"&gt;FastAPI 的使用率在一年内从 29% 增长到 38%&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style="color:#000000"&gt;83% 仍在运行旧版 Python&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style="color:#000000"&gt;三分之一为开源软件做出贡献：&lt;/span&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span style="color:#000000"&gt;78% 编写代码&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span style="color:#000000"&gt;40% 编写文档&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;span style="color:#000000"&gt;Web 服务器正在转向异步和基于 Rust 的工具&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style="color:#000000"&gt;Python 的发展方向&lt;/span&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span style="color:#000000"&gt;69% 计划尝试 AI 编码智能体。 智能体化 AI 的采用将快速增长&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span style="color:#000000"&gt;并行线程处理即将在 Python 3.14 中推出。 异步、等待和线程处理至关重要&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span style="color:#000000"&gt;GUI 和移动开发正在蓬勃发展&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;span style="color:#000000"&gt;2025 年的可行想法&lt;/span&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span style="color:#000000"&gt;尝试智能体化 AI 提高工作效率&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span style="color:#000000"&gt;学习 uv 实现更快的软件包管理&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span style="color:#000000"&gt;使内容和工具适合初学者&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;调查显示，&lt;strong style="color:rgba(0, 0, 0, 0.9)"&gt;86% 的受访者使用 Python 作为编写计算机程序、构建应用程序、创建 API 等任务的主要语言&lt;/strong&gt;。有 50% 的受访者拥有不到两年的专业编码经验， 39% 使用 Python 的经验不足两年（即使算上业余爱好或教育环境）。&amp;nbsp;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;「这一结果再次证明，&lt;strong style="color:rgba(0, 0, 0, 0.9)"&gt;Python 是职业生涯初期人士的理想语言。&lt;/strong&gt;&amp;nbsp;简洁（但不过分简单）的语法和易于上手的特性既能吸引新人程序员，同时也受到资深程序员的青睐。&amp;nbsp;」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;51% 的受访 Python 开发者参与数据探索和处理，&lt;strong style="color:rgba(0, 0, 0, 0.9)"&gt;主要使用 pandas 和 NumPy。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;就 Python 运行时最新版和旧版的分布情况而言。 仅 15% 使用了最新发布的 Python 版本，&lt;strong style="color:rgba(0, 0, 0, 0.9)"&gt;83% 使用的是一年前或更早的版本&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="281" src="https://oscimg.oschina.net/oscnet/up-43a5221be3c2e39a0076f78b41c3f631617.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;至于为什么还有人没更新到最新版本的 Python？ 调查结果给出了两个主要原因。&lt;/span&gt;&lt;/p&gt; 
&lt;ol style="list-style-type:decimal; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;我正在使用的版本能满足我的所有需求 (53%)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;我没有时间更新 (25%)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;Python Web 开发的复兴&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在受访者中，2024 年有 46% 使用 Python 进行 Web 开发。 Web「次要」语言也相应增加，HTML/CSS 的使用率提升了 15%，JavaScript 的使用率提升了 14%，SQL 的使用率提升了 16%。&amp;nbsp;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="414" src="https://oscimg.oschina.net/oscnet/up-08a0a5b4d4855ae14af103eccb281c3da40.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Python Web 框架中最大的赢家是 FastAPI，其使用率从 29% 跃升至 38%（增加了 30%）。 虽然所有主要框架都实现了同比增长，但 FastAPI 近 30% 的增长率格外引人注目。 &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;「Python 在 Web 领域的飞跃可能部分归因于大量新人涌入 Python 领域。 其中许多人从事 ML/AI/数据科学方面的工作，这些人通常没有多年使用 Flask 或 Django 的经验。 他们很可能会选择最热门的 Python Web 框架，而目前看来，这个框架就是 FastAPI。 人们在 FastAPI API 后面托管 ML 模型的例子有很多。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="429" src="https://oscimg.oschina.net/oscnet/up-360dbbd45783ffdaabab6bfa03671abefa6.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;Rust 是现在加快 Python 的方式&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;过去几年，Rust 已经成为 Python 的性能伴侣。 2025 年 Python Language Summit&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpyfound.blogspot.com%2F2025%2F06%2Fpython-language-summit-2025-what-do-core-developers-want-from-rust.html" target="_blank"&gt;&lt;span style="color:#000000"&gt;显示&lt;/span&gt;&lt;/a&gt;&lt;span style="color:#000000"&gt;，「在新项目上传到 PyPI 的所有原生代码中，大约有四分之一到三分之一使用了 Rust」，这表明「人们正在选择使用 Rust 启动新项目」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;从调查结果来看，发现在 Python 软件包的二进制扩展程序中，Rust 的使用率从 27% 增长到 33%。 &amp;nbsp;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="404" src="https://oscimg.oschina.net/oscnet/up-a25cd836d105d604d538f847ab5c6429bac.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;Postgres 是 Python 开发者的数据库之王&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在被问及选择哪种（哪些）数据库（如果有）时，绝大多数受访者都回答了 PostgreSQL。&amp;nbsp;&lt;strong style="color:rgba(0, 0, 0, 0.9)"&gt;PostgreSQL 是 Python 数据库之王，而且占比还在增长，&lt;/strong&gt;从 43% 提升至 49%。 与去年同期相比增长了 14%，对于一个已有 28 年历史的开源项目来说，这是个了不起的成绩。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="368" src="https://oscimg.oschina.net/oscnet/up-64c78c70a781da0baa3aedb16cb8225c5eb.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;值得注意的是，除了 Postgres 被大量使用之外，排名前六的数据库的使用率都实现了同比增长。 如前文所述，这很可能是 Web 开发本身再次增长的另一个迹象。&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;智能体化 AI 将带来颠覆性变革&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;PSF 调查之外的调查显示，2023 年约 70% 的开发者使用或计划使用 AI 编码工具，到 2024 年，约 44% 的专业开发者每天都会使用这些工具。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;JetBrains 的《2023 开发者生态系统现状》报告指出，在几年内，「基于 AI 的代码生成工具从有趣的研究发展成为许多开发者工具箱的重要组成部分」。到 2025 年，根据《2025 开发者生态系统现状》调查，&lt;strong&gt;近一半的受访者 (49%) 计划在未来一年内尝试 AI 编码智能体&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"&gt;&lt;span style="color:#000000"&gt;各大科技公司的程序经理表示，&lt;strong style="color:rgba(0, 0, 0, 0.9)"&gt;他们几乎无法雇用不接受智能体化 AI 的开发者。&lt;/strong&gt;&amp;nbsp;使用 AI 和不使用 AI 之间的效率差距实在太大了（估计使用 AI 后效率会提高约 30%）。&lt;/span&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;更多详情可&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fzh-hans%2Fpycharm%2F2025%2F09%2Fthe-state-of-python-2025%2F" target="_blank"&gt;查看完整报告&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372458/the-state-of-python-2025</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372458/the-state-of-python-2025</guid>
      <pubDate>Sun, 14 Sep 2025 02:43:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>🔥🔥简单手搓一个智能门禁摄像头</title>
      <description/>
      <link>https://www.oschina.net/ai-creation/details/2212</link>
      <guid isPermaLink="false">https://www.oschina.net/ai-creation/details/2212</guid>
      <pubDate>Sun, 14 Sep 2025 02:34:00 GMT</pubDate>
    </item>
    <item>
      <title>OpenAI 发布新编程模型 GPT‑5‑Codex，优化 Agentic Coding 能力</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;OpenAI 今日凌晨推出全新升级的新模型&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenai.com%2Findex%2Fintroducing-upgrades-to-codex%2F" target="_blank"&gt; GPT‑5‑Codex&lt;/a&gt;，这是其在 GPT-5 基础上专门为软件工程优化的模型版本，进一步提升了 Codex 中的智能体编程（Agentic Coding）能力。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0916/103044_nL9C_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;官方表示，该版本在代码审查、功能开发、大规模重构等场景中表现显著提升，并且「在测试中可连续独立工作超过 7 小时」。以下是本次升级的主要亮点：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;工具全面升级：Codex CLI 全面重新设计，IDE 插件支持 VS Code 等主流环境，与 GitHub 深度集成云端与本地环境可无缝切换；&lt;/li&gt; 
 &lt;li&gt;代码审查能力强化：自动在 PR 中发现关键漏洞，减少无效评论，并可直接提出并实现修改建议。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0916/103155_65FN_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;据介绍，GPT‑5‑Codex 已成为 Codex 云端任务与代码审查的默认模型，开发者也可通过 Codex CLI 或 IDE 插件在本地使用。与通用版 GPT‑5 相比，新版本在代码重构任务的准确率从 33.9% 提升至 51.3%，高影响力审查评论比例也从 39.4% 提升至 52.4%。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0916/103208_f98s_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0916/103232_QvKk_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;此外，Codex CLI 与 IDE 插件同步升级，支持在终端直接附加截图、线框图等设计资料，并可在云端自动搭建运行环境、执行依赖安装。官方称，通过缓存容器等优化，云端任务完成时间中位数缩短了 90%。&lt;/p&gt; 
&lt;p&gt;目前，Codex 已整合至 ChatGPT Plus、Pro、Business、Edu 与 Enterprise 计划中，企业用户可按需购买额外额度，API 接入版本也将很快上线。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372453</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372453</guid>
      <pubDate>Sun, 14 Sep 2025 02:32:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>宇树科技发布开源世界模型-动作架构：UnifoLM-WMA-0</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;宇树科技正式&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FkrQOGN9hqM0Nye9KfHpThw" target="_blank"&gt;推出&lt;/a&gt;跨多类机器人本体的开源世界模型-动作（WMA）架构 —— UnifoLM-WMA-0。该架构旨在为通用机器人学习提供统一的技术基础，核心在于一个能够理解机器人与环境交互物理规律的世界模型。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0916/102333_wzUL_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;该世界模型具备两大核心功能：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;仿真引擎：作为交互式仿真器运行，为机器人学习生成合成数据。&lt;/li&gt; 
 &lt;li&gt;策略增强：可与动作头对接，通过预测未来与物理世界的交互过程，优化决策性能。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;模型接收图像及文本指令，生成与文本指令对应的未来动作视频。&lt;/p&gt; 
&lt;p&gt;官方介绍，UnifoLM-WMA-0 支持两种运行模式：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;决策模式：提供机器人与环境物理交互的预测信息，辅助策略生成动作。&lt;/li&gt; 
 &lt;li&gt;仿真模式：基于机器人动作生成高保真环境反馈。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在训练方面，团队基于 5 个宇树科技开源数据集完成模型训练，测试结果显示，该模型可根据「当前图像」及一定数量的「机器人未来动作」实现交互可控生成，并具备长程任务的持续交互生成能力。&lt;/p&gt; 
&lt;p&gt;项目主页：https://unigen-x.github.io/unifolm-world-model-action.github.io/&lt;br&gt; 开源代码网址：https://github.com/unitreerobotics/unifolm-world-model-action&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372450/unitreerobotics-unifolm-world-model-action</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372450/unitreerobotics-unifolm-world-model-action</guid>
      <pubDate>Sun, 14 Sep 2025 02:23:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
  </channel>
</rss>
