<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>開源中國-最新資訊</title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://rsshub.app/oschina/news" rel="self" type="application/rss+xml"></atom:link>
        <description>開源中國-最新資訊 - Powered by RSSHub</description>
        <generator>RSSHub</generator>
        <webMaster>contact@rsshub.app (RSSHub)</webMaster>
        <language>en</language>
        <lastBuildDate>Wed, 11 Sep 2024 14:02:58 GMT</lastBuildDate>
        <ttl>180</ttl>
        <item>
            <title>開源日報 | 李彥宏內部講話曝光；阿里 25 週年馬雲內部發聲；今天的 App 必須要把自己 AI 化；軟件有半衰期；開源大模型編程框架 ell</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;歡迎閲讀 OSCHINA 編輯部出品的開源日報，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.9.11&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要聞&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/311456/canonical-graalvm-for-ubuntu&quot;&gt;Canonical 正在將 GraalVM 打包成 deb 格式引入 Ubuntu&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Linux 發行版 Ubuntu 基礎設施團隊工程師最近在論壇中&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.ubuntu.com%2Ft%2Ffoundations-team-updates-thursday-2024-09-05%2F47785%2F5&quot; target=&quot;_blank&quot;&gt;透露&lt;/a&gt;，他們正在為 GraalVM&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flaunchpad.net%2F%7Epushkarnk%2F%2Barchive%2Fubuntu%2Fgraalvm-packages%2F%2Bpackages&quot; target=&quot;_blank&quot;&gt;製作&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;deb 軟件包&lt;/strong&gt;&lt;/a&gt;（不是 Ubuntu 優先支持的 snap）。&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0911/112805_VScj_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;GraalVM 是一個高性能的 JDK 發行版。它旨在加速用 Java 和其他 JVM 語言編寫的應用程序的執行，同時還為 JavaScript、Python、基於 LLVM 的語言（如 C 和 C++）以及許多其他流行編程語言提供運行時。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;此外，GraalVM 為編程語言之間提供了高效互操作性，並將 Java 應用程序提前編譯為本機可執行文件，從而加快啓動時間並降低內存開銷。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Oracle 提供了 GraalVM 的通用 Linux x86_64 和 ARM64 二進制包。但到目前為止，GraalVM 並未出現在 Debian/Ubuntu 的軟件包倉庫中，而 Debian 上的 GraalVM 軟件包只有 GitHub 中的幾個非官方包。&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.pingwest.com%2Fw%2F298272&quot; target=&quot;_blank&quot;&gt;Reflection 70B AI 模型被曝第三方基準測試效果不佳&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;據 venturebeat 報道，上週推出的號稱可與頂級商業大模型一較高下的開源大模型 Reflection 70B 今日被曝在第三方測試中表現不佳。&lt;/p&gt; 
&lt;p&gt;上週末獨立的第三方評估人員和開源人工智能社區成員在 Reddit 和 Hacker News 上發帖，開始質疑該模型的性能，並表示無法自行復制。有些人甚至發現了一些回覆和數據，表明該模型與 Anthropic 的 Claude 3.5 Sonnet 模型有關，也許只是一個薄薄的 「包裝」。&lt;/p&gt; 
&lt;p&gt;在獨立的人工智能評估機構 Artificial Analysis 在 X 上發佈其對 Reflection 70B 的測試結果比 HyperWrite 最初聲稱的得分低得多之後，批評的聲音越來越多。&lt;/p&gt; 
&lt;p&gt;Reflection 公司聯合創始人兼首席執行官 Matt Shumer 對此表示道歉，並表示這些差異歸咎於模型上傳到 Hugging Face 的過程中出現的問題，並承諾在上週修正模型權重，但至今仍未做到。&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1642088277%2FOwnBvlBEk%3Frefer_flag%3D1001030103_&quot; target=&quot;_blank&quot;&gt;阿里 25 週年馬雲內部發聲&lt;/a&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    這段話還是有水平的：「沒有支付，我們創建支付；沒有物流，我們參與物流；沒有互聯網支撐技術，我們投入雲；信用不值錢，我們讓信用變得無價。。。我們相信技術可以也必須幫助每一個普通人，讓每一個普通的老百姓因為技術也獲得尊嚴。」
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/311486&quot; target=&quot;news&quot;&gt;李彥宏內部講話曝光：談大模型三大認知誤區，未來模型之間的差距會變大&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;「外界對大模型有相當多的誤解」， 近日據媒體報道，李彥宏的一則內部講話曝光。 在最近一次和員工交流中，李彥宏談及三個大模型認知誤區，涵蓋了大模型競爭、開源模型效率、智能體趨勢等熱點話題。 李彥宏談到，未來大模型之間的差距可能會越來越大。他表示，大模型的天花板很高，現在距離理想情況還相差非常遠，所以模型要不斷快速迭代、更新和升級；需要能幾年、十幾年如一日地投入，不斷滿足用户需求，降本增效。&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日觀察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交觀察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1645215240%2FOwuVG7KcR&quot; target=&quot;_blank&quot;&gt;今天的 App 把自己 AI 化，是他們必須要做的事情&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;現有 app 生態，的確開放程度非常低。但是用户用自然語言控制硬件的需求是明確的，天然的，合理合法的。&lt;/p&gt; 
     &lt;p&gt;任何阻撓這種進程的公司，再強大，也必將崩塌。甲骨文強大嗎？今天 PostgreSQL 已經完全乾掉了 oracle。&lt;/p&gt; 
     &lt;p&gt;今天的 app 把自己 ai 化，然後提供和其他人或者 app 交互的自然語言問答接口，是他們必須要做的事情。如果不做，那麼基於 01 app 這種框架新開發的 app ，會幹掉他們。&lt;/p&gt; 
     &lt;p&gt;軟件的迭代是很快的，消費者不是不喜歡新鮮玩意，商業戰場也不是不會新陳迭代，這都是天道。&lt;/p&gt; 
     &lt;p&gt;唯一的問題是，需要一個足夠強大的驅動力。比如，我可以用自然語言控制我的手機和電腦了。&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&amp;nbsp;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;李楠或 kkk&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2194035935%2FOwtFjooUO&quot; target=&quot;_blank&quot;&gt;前 OpenAI 科學家 william 開源了 ell 項目&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;ell 是一個輕量級、功能性的 LM 編程庫。ell 是因為使用 LangChainAI 這樣的框架時的挫敗感而構建的，遵循三個原則：&lt;/p&gt; 
    &lt;p&gt;提示是程序，而不是字符串&lt;br&gt; 提示是機器學習模型的參數&lt;br&gt; 每個調用語言模型都值得其重量的信用&lt;br&gt; 提示應該可讀且科學&lt;/p&gt; 
    &lt;p&gt;有了合適的工具，提示工程從一門黑暗的藝術變成了科學。&lt;/p&gt; 
    &lt;p&gt;項目地址：github.com/MadcowD/ell&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;蟻工廠&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1873355712%2FOw31K47Ks&quot; target=&quot;_blank&quot;&gt;最近又流行討論 AI 程序員&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     其實開發大部分時候，理解業務上下文，流程上下文，小微構架，找人，對需求，等等各種交互，寫代碼是葉子節點這部分，但是不是全部。
    &lt;/div&gt; 
    &lt;div&gt;
     而且代碼這種東西，其實是有時效性的，就是你要是不持續更新維護，它很快就腐化不滿足新的需求或者 bug 沒人修復，就是軟件是有半衰期的。
    &lt;/div&gt; 
    &lt;div&gt;
     &amp;nbsp;
    &lt;/div&gt; 
    &lt;div&gt;
     不要説 AI 寫代碼了，就算你有兩個不錯的真人小組員給你寫代碼，你也還是有一堆事情要做，而且還常常做了好久沒解決問題。
    &lt;/div&gt; 
    &lt;div&gt;
     當然，潮流有時候就是範式的轉移，潮流説代碼會更多的由 AI 來寫，那就真是這樣，只是你要顛覆傳統程序員的價值，那就請用新的組織結構，新的組織結構才能用上新範式的生產力，目前還沒有。
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&amp;nbsp;&lt;/span&gt;&lt;strong&gt;幻灰龍&lt;/strong&gt;&lt;/p&gt; 
  &lt;div&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F5675889356%2FOw1qRjC5m&quot; target=&quot;_blank&quot;&gt;「SkyOS · 天樞」研發背後，還有哪些你不知道的故事？&lt;/a&gt;&lt;/h4&gt; 
   &lt;div&gt; 
    &lt;div&gt;
     蔚來為什麼要研發整車全域操作系統？這個過程中克服了哪些困難？整車全域操作系統的研發成功，給蔚來、給行業帶來了怎樣的改變？今天我們用七個小故事，來告訴你「SkyOS · 天樞」背後的點點滴滴。
    &lt;/div&gt; 
    &lt;div style=&quot;text-align:right&quot;&gt;
     &lt;span style=&quot;color:#000000&quot;&gt;- 微博&amp;nbsp;&lt;/span&gt;
     &lt;strong&gt;蔚來&lt;/strong&gt;
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F5722964389%2FOwaojcwHV%3Fpagetype%3Dprofilefeed&quot; target=&quot;_blank&quot;&gt;開源微信機器人底層框架：wcf.js&lt;/a&gt;&lt;/h4&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;GitHub 上一款強大、快速、開源的微信機器人底層框架：wcf.js。&lt;/p&gt; 
     &lt;p&gt;github.com/wechatferry/wechatferry&lt;/p&gt; 
     &lt;p&gt;具有如下特點：&lt;/p&gt; 
     &lt;p&gt;- 為消息監聽、發送以及羣聊操作提供一站式解決方案；&lt;br&gt; - 內置強大且易用的 Agent 庫，涵蓋大部分常用操作；&lt;br&gt; - 內置開發者工具包，包括數據庫管理、機器人技能列表以及日誌記錄；&lt;br&gt; - 具備強大的處理能力，高效管理數據與任務，確保系統穩定可靠；&lt;br&gt; - 可自由控制發消息的頻率，降低風險；&lt;br&gt; - 項目完全開源免費且可自由定製。&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&amp;nbsp;&lt;strong&gt;GitHubDaily&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒體觀察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.com.cn%2Fjjxw%2F2024-09-11%2Fdoc-incntriy7602835.shtml&quot; target=&quot;_blank&quot;&gt;深圳機器人企業數量全國居首&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;隨着人工智能浪潮的爆發，人形機器人有望深入各細分消費端，成為 AI 下一個重要落地應用場景。公開數據顯示，目前國內現存機器人相關企業 74.17 萬家，廣東省機器人企業數量高達 14.15 萬家。從城市分佈來看，深圳市共有 5.11 萬家相關企業，數量穩居全國首位，產業鏈總產值超過 1700 億元，實現了從關鍵核心技術攻關到應用場景拓展的全過程創新發展。&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;深圳特區報記者&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.ifeng.com%2Fc%2F8ckzhnkg1NN&quot; target=&quot;_blank&quot;&gt;阿里巴巴走過 1/4 世紀，馬雲最驕傲的是什麼？&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;p&gt;阿里 25 歲再出發，承載着各界對它的期待。媒體人秦朔在一篇寫阿里的文章裏有一段表述：「這一過程（阿里三年整改）帶來的樸素啓示是，即使在某個時點看起來再強大的公司，其命運也是螺旋式的，既有篳路藍縷、無畏探索，也有高歌猛進、洶湧澎湃，還有調整變革、熵增熵減。一次次地出發、試錯與重構，一次次地改變世界與被世界改變，這才是完整的故事。」&lt;/p&gt; 
  &lt;p&gt;如今的阿里蜕去了少年的稚氣，它對「取捨」的理解也更加自如和自信。當電商平台「卷低價」「僅退款」傷及中小商家權益時，阿里電商平台果斷反對內卷，率先優化政策。&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;財經故事薈&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fee.m.ofweek.com%2F2024-09%2FART-8610-2800-30645552.html&quot; target=&quot;_blank&quot;&gt;碎片的 RISC-V 生態江湖，RDI 指明方向&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;p&gt;生態問題依然是盤旋在 RISC-V 頭頂最大的烏雲。從發展歷程來看，RISC-V 是從物聯網起家。IoT 嵌入式場景適合「單兵」突破，對於生態的需求低，軟硬件切換的代價小。但是，由於 IoT 是低曝光度領域，儘管 RISC-V 架構芯片的出貨量已經突破百億顆，但普通消費者對其感知度不高，生態也難以複用。向前推進，手機、電腦、服務器等強生態場景對於生態的要求很高，軟硬件切換的代價大，需要廣泛協同生態鏈。這方面國內雖有企業在發力，持續朝着高性能方向走，出現了一些芯片，讓基於 RISC-V 的高性能芯片成為可能，但是還不夠，高勢能尚未形成。&lt;/p&gt; 
     &lt;p&gt;因此，RISC-V 發展如何更進一步？解決碎片化問題，搭建屬於自己的生態，仍然是一個老大難題。弱生態場景感知度低、強生態場景尚待突破，能否找到合適目前 RISC-V 發展的生態場景？基於此，奕斯偉提出了：RDI（RISC-V Digital Infrastructure，RISC-V 數字基礎設施）的產業概念。&lt;/p&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;半導體產業縱橫&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnew.qq.com%2Frain%2Fa%2F20240911A05VE700&quot; target=&quot;_blank&quot;&gt;為什麼這家公司的芯片推理速度比英偉達快 20 倍？&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt;
   OpenAI 在 2024 年初發布的文生視頻大模型 Sora 以其驚豔的演示效果震撼了科技界。然而，由於模型複雜度帶來的巨大計算量，其推理成本難以壓縮至可控範圍，以致這一突破性技術遲遲無法公開上線。據悉，OpenAI 正在探索更先進的芯片設計方案，以降低推理成本、提升推理速度，已初步展示出潛力的存算一體技術，很可能成為其重點研究的方向。存算一體不僅有望大幅提升推理速度，還可能徹底改變 AI 系統的設計理念，使得更復雜、更強大的 AI 應用成為現實，成為撬動下一代 AI 革命的支點，為人工智能的未來發展開闢一條全新的道路。通過持續的技術創新和市場驗證，存算一體有望成為推動 AI 應用更廣泛落地的關鍵推手，為人類社會帶來更智能、更高效的技術體驗。
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;騰訊研究院&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.com.cn%2Farticle_1733360754_6750fc7202001acz4.html&quot; target=&quot;_blank&quot;&gt;李彥宏戳破大模型「跑分」假象：榜單不代表所有實力，未來模型的差距會變大&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;div&gt;
    &amp;nbsp;
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;p&gt;李彥宏是閉源大模型的堅定支持者，&quot;在大模型時代之前，大家習慣了開源意味着免費、意味着成本低。&quot; 他解釋説，比如開源的 Linux，因為已經有了電腦，所以使用 Linux 是免費的。但這些在大模型時代不成立，大模型推理是很貴的，開源模型也不會送算力，還得自己買設備，無法實現算力的高效利用。&lt;/p&gt; 
    &lt;p&gt;&quot;效率上開源模型是不行的。&quot; 他表示，&quot; 閉源模型準確講應該叫商業模型，是無數用户分攤研發成本、分攤推理用的機器資源和 GPU，GPU 的使用效率是最高的，百度文心大模型 3.5、4.0 的 GPU 使用率都達到了 90% 多。&quot;&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;一財網&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推薦&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;開源項目&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/p/ikun-ui&quot; target=&quot;_blank&quot;&gt;ikun-svelte / ikun-ui&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-ec5ad3ef93045cde41576aa9bb008b0f264.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fikun-svelte%2Fikun-ui&quot; target=&quot;_blank&quot;&gt;https://github.com/ikun-svelte/ikun-ui&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;ikun-ui 是基於 Svelte.js 的 UnoCSS UI 庫，可用於製作網站。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;特性&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul style=&quot;list-style-type:disc; margin-left:0; margin-right:0&quot;&gt; 
  &lt;li&gt;組件化設計 - 提供整潔美觀的 UI 組件&lt;/li&gt; 
  &lt;li&gt;預設 CSS - 有 UnoCSS 預設包可供使用，輕鬆渲染 UI&lt;/li&gt; 
  &lt;li&gt;主題配置 - 使用 unocss 等屬性模式進行設計。支持主題配置，自定義主題。&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;開源之聲&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户觀點&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/news/311382/nginx-moved-to-github&quot;&gt;NGINX 項目遷移到 GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：&lt;/span&gt;從一個 404 倉庫搬到另一個 404 倉庫&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 2：最偉大的開源軟件之一&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 3：與時俱進&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最後，歡迎掃碼下載「開源中國 APP」，閲讀海量技術報告、程序員極客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311520</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311520</guid>
            <pubDate>Wed, 11 Sep 2024 11:02:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>化 「腐朽」 為 「神奇」：5 種 RAG 優化技術應對千奇百怪的 Query</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;編者按&lt;/strong&gt;：您是否曾經遇到這樣的情況：明明構建了一個功能強大的 RAG 系統，但用户卻頻繁抱怨&quot;找不到想要的信息&quot;或&quot;返回的結果不夠準確&quot;？這是許多 RAG 應用開發者面臨的共同挑戰。&lt;/p&gt; 
 &lt;p&gt;這個問題不僅會導致用户體驗下降，更可能直接影響 RAG 系統的使用率和實際價值。如果未能得到妥善解決，之前的辛苦工作恐將付之東流，甚至影響整個項目的成功。&lt;/p&gt; 
 &lt;p&gt;這篇文章並非紙上談兵，而是源自作者在實際項目中的第一手經驗。文章詳細介紹了 5 種 Query Translation 技術:&lt;/p&gt; 
 &lt;p&gt;a) Step-back prompting：將具體問題轉化為更寬泛的問題，以便獲取更多上下文信息。&lt;/p&gt; 
 &lt;p&gt;b) HyDE (Hypothetical Document Embedding)：利用 LLMs 生成文檔，然後基於這個文檔檢索相關信息。&lt;/p&gt; 
 &lt;p&gt;c) Multi-query：使用 LLMs 根據原始 query 生成多個版本的 query ，以改進基於距離的相似度搜索。&lt;/p&gt; 
 &lt;p&gt;d) RAG-Fusion：與 Multi-query 類似，使用 Reciprocal Rank Fusion 算法對檢索結果進行重新排序。&lt;/p&gt; 
 &lt;p&gt;e) Decomposition：將複雜問題分解為多個子問題，分別檢索答案後再整合。&lt;/p&gt; 
 &lt;p&gt;這些技術各有優勢，在實際應用中可能需要根據實際情況結合使用才能達到最佳效果。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;作者 🎨 |&lt;/strong&gt; &lt;strong&gt;Thuwarakesh Murallie&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;編譯 🌺 | 嶽揚&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-302b3d064a0f76b21e2ea17142c69259bce.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Photo by travelnow.or.crylater[1] on Unsplash[2]&lt;/p&gt; 
&lt;p&gt;若認為用户會每次都向 LLMs 提出完美的問題，那您就大錯特錯了。&lt;strong&gt;與其直接執行用户的 query ，為何不選擇優化用户的 query 呢？這就是所謂的 query translation 技術。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;我們開發了一款應用，用户可以通過它查詢我們公司歷史上製作過的所有文檔，其中包括 PPT、項目提案、進度報告、交付文檔和其他各類文檔等。這一成果非常了不起，因為過去的許多此類嘗試都失敗了。多虧了 RAGs，這一次的效果非常好。&lt;/p&gt; 
&lt;p&gt;在項目演示階段，我們都對這款應用表現出了極大的熱情。最初，我們只針對一小部分員工進行了推廣。然而，我們觀察到的現象並未讓我們感到非常興奮。&lt;/p&gt; 
&lt;p&gt;原本以為這款應用會徹底改變大家的工作方式，但大多數用户只是嘗試使用了幾次便不再使用了，彷彿這款應用只是孩子們的玩具項目一樣。&lt;/p&gt; 
&lt;p&gt;日誌數據顯示這款應用表現良好，但我們還是與實際使用過該應用的用户進行了交流，以便能夠確定問題所在。通過他們的反饋，&lt;strong&gt;我們開始思考如何通過 query translation 技術來消除 user inputs 中的歧義。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;讓我們來看一個具體的例子。&lt;/p&gt; 
&lt;p&gt;有位用户對我們提供給客户&quot;XYZ&quot;的關於收購與時尚業務相關的企業的建議感興趣。他輸入的問題是：&quot;合作伙伴 XYZ 進行了哪些與時尚業務相關的收購？（What are the fashion-related acquisitions made by XYZ partners?）&quot;該應用程序檢索了相關用於交付的 PPT 文件，給出了一份包含十幾家公司的清單。但這份清單與用户的期望大相徑庭，合作伙伴 XYZ 實際上已經收購了（比如）7 家時裝品牌，而清單中只列出了 4 家。這位用户同時也是一名測試人員（tester），他對實際收購的數量了如指掌。&lt;/p&gt; 
&lt;p&gt;難怪大家會放棄使用這款工具。幸運的是，因為採取了向全體用户逐步推出的策略，我們還有機會挽回失去的信任。&lt;/p&gt; 
&lt;p&gt;為瞭解決這一問題，我們對這款應用程序採取了一系列的改進措施。其中一項重要更新就是 query translations 技術。&lt;/p&gt; 
&lt;p&gt;本文旨在概述我們使用的不同 query translation 技術，而不進行深入的技術解析。例如，這些技術可以與 few-shot prompting（譯者注：提供幾個示例輸入和輸出。） 和 chain of thoughts（譯者注：鼓勵模型在生成最終答案之前，先產生一系列的中間推理步驟。） 等提示詞技術相結合，以優化結果。但這些技術細節將留待後續文章[3]中詳細討論。&lt;/p&gt; 
&lt;p&gt;接下來，我們將逐一研究這些技術。在此之前，先來看一個簡單的 RAG 示例。&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;01 Basic RAG Example&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;RAG（Retrieval-Augmented Generation）應用都至少會有一個數據庫，通常是一個向量數據庫（vector store）和一個語言模型（language model）。RAG 的核心概念其實很簡單：&lt;strong&gt;在大語言模型（LLM）利用其已有知識回答用户問題之前，它會先在數據庫中搜索相關的上下文信息，以此來生成更加精確的答案。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;下圖展示了一個最基礎的 RAG 應用示例。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-fa3cbbedc3261b32d6d749bd7861c360dce.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Basic RAG application Workflow --- Image by the author.&lt;/p&gt; 
&lt;p&gt;在基礎的 RAG（檢索增強生成）應用中，與大語言模型（LLMs）的交互僅發生一次，可以是 OpenAI 的 GPT 模型[4]、Cohere 模型[5]，也可以是您自行部署在本地的模型。&lt;/p&gt; 
&lt;p&gt;下面給出的代碼展示瞭如何實現上圖的 RAG 基礎工作流。我們將以此代碼為基礎，進一步探討本文中提到的其他技術。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-dd787d8af73b633aee0ea1380f17e88eaea.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;在上述代碼中，我們通過一個網頁加載器（web-based loader）來獲取 Django 的官方文檔頁面，並將其內容存入 Chroma 向量數據庫中。我們可以將這一過程應用於網頁文檔、本地文本文檔、PDF 文檔等不同類型的數據資源。&lt;/p&gt; 
&lt;p&gt;在此例中，我們沒有采用高級的檢索技術，而是直接將檢索器整合到了最終的 RAG（檢索增強生成）流程中。&lt;strong&gt;後續我們將使用檢索器鏈（retriever chain）來代替單一的檢索器。&lt;/strong&gt; 文章後續內容將着重講解如何構建檢索器鏈。&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;02 Step-back prompting&lt;/strong&gt;&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;該技術用於確保生成的答案與上下文背景信息保持一致，不發生衝突。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Step-back prompting 與基本的 RAG 流程非常相似，但在處理用户提出的問題時，不是直接針對用户提出的初始問題進行查詢，而是用一個更寬泛的問題從數據庫中檢索相關文檔。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;與具體問題相比，更寬泛的問題能捕捉到更多的上下文信息。&lt;/strong&gt; 因此，大語言模型（LLMs）能夠基於這些信息為用户提供更多有用的信息，且不會與整體上下文信息相牴觸。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;當最初的 query 過於具體和詳細，但又缺乏全局視角時，這種方法往往非常有用。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-55858d72e6deff779108940bb164ec0ae03.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Step-back prompting workflow --- image by the author.&lt;/p&gt; 
&lt;p&gt;Step-back prompting 的流程是：語言模型先擴展用户輸入的 query ，然後從向量數據庫中檢索相關文檔，以此提供必要的上下文，並回答用户最初提出的問題。&lt;/p&gt; 
&lt;p&gt;下面是 step-back prompting 的代碼實現。請注意，我們在這裏採用了不同的處理方式，與前文的基本 RAG 流程中直接傳遞檢索器的方法不同。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-e4996ed93a56c07411ba66810fac0423456.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Step-back prompting 對於那些需要依賴更廣泛的上下文背景信息的應用場景極為有用。&lt;/strong&gt; 通過這種方式，LLMs 能夠為相關問題提供前後一致的答案。&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;03 HyDE (Hypothetical Document Embedding)&lt;/strong&gt;&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;給出的答案不僅僅是直接回答問題，而是包含了與問題相關的背景信息或其他相關內容，使得答案更加全面和有深度。還會提供與答案內容相關的可靠信息來源，比如學術文獻、研究報告、官方網站等，以便於驗證信息的準確性和可靠性。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;HyDE（Hybrid Document Embedding）是一種近來流行且廣受歡迎的文檔檢索技術。&lt;strong&gt;其核心思想是利用大語言模型（LLMs）的已學習的先驗知識（prior knowledge）編寫文檔，然後使用這個文檔從向量數據庫中檢索或提取相關的上下文信息。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;HyDE 特別適用於用户使用通俗的語言描述問題，而向量數據庫中的信息卻極為專業的情況。&lt;/strong&gt; 此外，由於 LLMs 生成的文本信息中包含了較多的關鍵詞或關鍵短語，使得檢索到的相關信息更加精準。&lt;/p&gt; 
&lt;p&gt;例如，對於&quot;提高 Django 性能的 10 種方法（10 ways to improve Django&#39;s performance）&quot;這樣的 query ，HyDE 能夠提供一個涵蓋成本考慮（cost implications）、緩存策略（caching）、數據壓縮（compression）等全方位的答案。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-a9d47939d32fc247ccfdd93370ead3cb660.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;HyDE document retrieval process --- image by the author.&lt;/p&gt; 
&lt;p&gt;下列代碼片段是上圖的代碼實現。這次，我僅提供了使用 HyDE 構建檢索器鏈（retrieval chain）的代碼片段。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-e3df6836ab57bbe7136e4ad15dd4a1c8cd3.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;04 Multi-query&lt;/strong&gt;&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;該技術通過改進基於距離的相似度搜索（the distance base similarly search），從而能夠檢索到更多與用户提出的問題相關的文檔，從而提高檢索結果的相關性和準確性。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Multi-query 技術有助於解決在基於距離的相似度搜索中可能遇到的問題。大多數向量數據庫在檢索向量化文檔（vectorized documents）時使用餘弦相似度（cosine similarity）作為度量標準。&lt;strong&gt;只要文檔之間的相似度足夠高，這種方法一般都能表現良好。&lt;/strong&gt; 然而，當相似度太低，以至於無法通過基於距離的相似度度量來有效地識別它們之間的關聯時，檢索過程就可能無法達到預期效果。&lt;/p&gt; 
&lt;p&gt;在 multi-query 方法中，我們要求大語言模型（LLMs）為同一 query 轉換多個版本的 query 。例如， &quot;How to speed up Django apps&quot; 這樣的 query 會被轉換為另一個版本的 query ------ &quot;How to improve Django-based web apps&#39; performance?&quot;。這些 query 合在一起共同作用，從向量數據庫中檢索出更多相關的文檔。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;在將這些文檔傳遞給 RAG-LLM 生成最終回答之前，我們需要對檢索到的文檔進行去重處理。&lt;/strong&gt; 因為多個 query 可能會檢索到相同的文檔。如果傳遞所有文檔，可能會包含重複項，超出 LLM 的 tokens 閾值，從而影響最終的回答質量。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-9d13668fa899bc64107e935bcd6e6daa612.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Multi-query retrieval workflow --- image by the author.&lt;/p&gt; 
&lt;p&gt;下面這個代碼片段實現了一個額外的功能，可用於去除文檔中的重複項。其餘部分與其他方法保持一致。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-6aa43b863688f0f5232e252b3aa20b8228b.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;05 RAG-Fusion&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;在信息檢索和生成答案的過程中，優先考慮和利用與用户提出的問題更相關的文檔是非常重要的，因為這些文檔提供的信息更有助於生成準確和有用的答案。&lt;/p&gt; 
&lt;p&gt;RAG fusion 和 multi-query 在文檔檢索方面有諸多相似之處。&lt;strong&gt;我們在這裏再次要求大語言模型（LLM）生成初始 query 的多個不同版本。然後，我們用這些不同版本 query 分別檢索相應的文檔，並將它們合併。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;然而，在合併和去重文檔的同時，我們也會根據文檔的相關度對它們進行排序。下面是 RAG-fusion 工作流程的示意圖。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-021fb5b48689b7e4ad57e05295ece31a47a.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;RAG-fusion workflow --- image by the author.&lt;/p&gt; 
&lt;p&gt;我們不再只進行去重操作，而是使用排序系統（ranking system）對文檔進行排序。Reciprocal fusion ranking（RRF）是一種非常巧妙的文檔排序算法。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;如果多個版本的 query 檢索到的同一文檔是最相關的，那麼 RRF 算法就會把該文檔排在前面。&lt;/strong&gt; &lt;strong&gt;如果某個文檔只在其中一個版本的 query 中出現，且相關度較低，那麼 RRF 將把該文檔排在較低的位置。&lt;/strong&gt; 這樣，我們就能獲得更相關的信息並對其進行優先排序。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-8ed93eddf1a26e63aa31b1373fffdb9af51.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;06 Decomposition&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;在處理複雜問題時，大語言模型（LLM）能夠將問題拆分成多個部分，然後逐步構建出答案。&lt;/p&gt; 
&lt;p&gt;有些情況下，直接給出答案並不是最佳策略。解決複雜任務的高效方法是將問題分解成多個部分，然後逐個部分地回答。&lt;/p&gt; 
&lt;p&gt;這也不僅僅是 LLMs 獨有的技巧，對嗎？&lt;/p&gt; 
&lt;p&gt;是的，我們在分解 query 的過程中試圖將初始問題拆分成多個子問題。回答這些子問題的過程中將獲得解決初始問題的線索。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-174f07a5acb1bc058da414df5bd03205579.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Query decomposition in RAG --- image by the author.&lt;/p&gt; 
&lt;p&gt;如圖所示，我們為每個子問題檢索相關文檔並分別回答。然後，我們將這些問答對（question-and-answer pairs）傳遞給 RAG-LLM 。然後，LLM 擁有了更多、更詳細的信息來解決複雜問題。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-3c4f00d00ff71ea97755e817b1f4a22f76f.png&quot; alt=&quot;&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;07 Final thoughts&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;這款應用程序從演示版本到部署於生產環境，中間經過了許多優化流程。其中不可避免的一步就是使用 query translation 技術。&lt;/p&gt; 
&lt;p&gt;我們所解決的問題在複雜程度上也各不相同。&lt;strong&gt;必須得考慮用户發送不完美的 query 才是常態。檢索過程的缺陷也需要得到解決。&lt;/strong&gt; 這些都是需要考慮的問題。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;要選出哪一種 query translation 技術最佳，並沒有唯一正確的方法。在實際應用中，我們可能需要結合多種技術才能獲得理想的輸出結果。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Hope you have enjoyed and learned new things from this blog!&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Thuwarakesh Murallie&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Data Science Journalist &amp;amp; Independent Consultant&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linkedin.com%2Fin%2Fthuwarakesh%2F&quot; target=&quot;_blank&quot;&gt;https://www.linkedin.com/in/thuwarakesh/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;strong&gt;🔗文中鏈接🔗&lt;/strong&gt;&lt;/h1&gt; 
&lt;p&gt;[1]&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Funsplash.com%2F%40travelnow_or_crylater%3Futm_source%3Dmedium%26utm_medium%3Dreferral&quot; target=&quot;_blank&quot;&gt;https://unsplash.com/@travelnow_or_crylater?utm_source=medium&amp;amp;utm_medium=referral&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;[2]&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Funsplash.com%2F%3Futm_source%3Dmedium%26utm_medium%3Dreferral&quot; target=&quot;_blank&quot;&gt;https://unsplash.com/?utm_source=medium&amp;amp;utm_medium=referral&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;[3]&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-retrieval-techniques-for-better-rags-c53e1b03c183&quot; target=&quot;_blank&quot;&gt;https://towardsdatascience.com/advanced-retrieval-techniques-for-better-rags-c53e1b03c183&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;[4]&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fplatform.openai.com%2Fdocs%2Fmodels&quot; target=&quot;_blank&quot;&gt;https://platform.openai.com/docs/models&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;[5]&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcohere.com%2F&quot; target=&quot;_blank&quot;&gt;https://cohere.com/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;本文經原作者授權，由 Baihai IDP 編譯。如需轉載譯文，請聯繫獲取授權。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;原文鏈接：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftowardsdatascience.com%2F5-proven-query-translation-techniques-to-boost-your-rag-performance-47db12efe971&quot; target=&quot;_blank&quot;&gt;https://towardsdatascience.com/5-proven-query-translation-techniques-to-boost-your-rag-performance-47db12efe971&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/IDP/blog/15754414</link>
            <guid isPermaLink="false">https://my.oschina.net/IDP/blog/15754414</guid>
            <pubDate>Wed, 11 Sep 2024 10:42:00 GMT</pubDate>
            <author>原創</author>
        </item>
        <item>
            <title>Apache Doris Flink Connector 24.0.0 版本正式發佈</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;親愛的社區夥伴們，Apache Doris Flink Connector 24.0.0 版本已於 2024 年 9 月 5 日正式發佈。該版本新增了對 Flink 1.20 的支持，並支持通過 &lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg3Njc2NDAwOA%3D%3D%26mid%3D2247529279%26idx%3D1%26sn%3D57970726df5d967a12963be20923f5a4%26chksm%3Dcf2f7d38f858f42ea428cfc2630347f0f9d597e4fb03edd3d3e41c87aa82b8dc971021df00d0%26token%3D1251465025%26lang%3Dzh_CN%23rd&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Arrow Flight SQL &lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;高速讀取 Doris 中數據。此外，整庫同步所依賴的 FlinkCDC，也需升級至 3.1.x 版本，以便更好的應用。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;下載地址：&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdoris-flink-connector%2Freleases%2Ftag%2F24.0.0&quot; target=&quot;_blank&quot;&gt;https://github.com/apache/doris-flink-connector/releases/tag/24.0.0&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;行為變更&lt;/span&gt;&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;將整庫同步所依賴的 FlinkCDC 版本升級至 FlinkCDC 3.1.x。由於 FlinkCDC 3.1 及後續版本已捐贈給 Apache 基金會，並與 FlinkCDC 2.4 版本不兼容，因此在升級 Doris Flink Connector 時，已運行的整庫同步作業無法從之前的狀態重啓，需要在將 Flink CDC 升級到 3.1 版本後進行一次無狀態重啓。具體可參考 &lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FqYW5Bw0IqUHUc8bnfWOIog&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Apache Flink CDC 3.1.0 發佈公告&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt; 兼容性章節。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;考慮到上述不兼容性以及與其他 Connector（如 Spark 和 Kafka）版本的一致性，我們將 Connector 版本號更改為 24.x 系列。具體可參考： [&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flists.apache.org%2Fthread%2F8tp215yk0tkgtdfkjdl4svvbljnmxzst&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;DISCUSS&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; About the next version change of Connector &lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;&lt;span&gt;新增功能&lt;/span&gt;&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;支持 Flink 1.20 &lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;支持 DB2 的數據庫同步&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;CDC SchemaChange 支持使用 JSQLParser 框架解析 DDL&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;支持 Stream Load GZ 壓縮導入&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;支持通過 Arrow Flight SQL 讀取 Doris 中數據&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;&lt;span&gt;改進提升&lt;/span&gt;&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;升級 FlinkCDC 版本到 3.1.1 &lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;支持 DB2/Postgres/SQLServer 進行數據同步的 JDBC 參數設置&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;優化攢批寫入模式&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;優化部分 CDC 同步的邏輯&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;MySQL 整庫同步支持 Integer 類型&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Bug 修復&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;修復 Map 子類型為 Date/Datetime 類型時的讀取序列化問題&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;修復 FlinkSQL 投影下推的 Bug&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;修復 MongoDB 同步 Decimal 類型的問題&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;兼容 Doris 修復 arrow 讀取 timestamp 類型的問題&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;CDC 整庫同步修復 delete 事件不生效的問題&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;修復 Schema Change 默認值空時轉換邏輯錯誤的問題 &lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;&lt;span&gt;致謝&lt;/span&gt;&lt;/h1&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;在此向參與版本設計、開發、測試、討論的社區貢獻者們表示感謝，他們分別是：&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;@bingquanzhao&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;@DongLiang-0&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;@JasonLeeCoding&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;@JNSimba@MaoMiMao&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;@qg-lin@tmc9031&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;@vinlee19&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311505/doris-flink-connector-24-0-0</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311505/doris-flink-connector-24-0-0</guid>
            <pubDate>Wed, 11 Sep 2024 09:28:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>鴻蒙生態繁榮背後：WPS 全面適配 HarmonyOS NEXT 的故事</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;在今年 HDC 大會上，華為正式發佈 HarmonyOS NEXT，並且宣佈鴻蒙原生應用進入全面衝刺階段，5000 多個常用應用已全部啓動開發，其中超過 1500 個應用已完成上架。&lt;/p&gt; 
&lt;p&gt;在這串令人振奮的數字背後，承載着千千萬萬個開發者的熱忱和期待。&lt;/p&gt; 
&lt;p&gt;作為國內最大的辦公軟件之一，WPS 用了八個月時間完成了鴻蒙化，成為鴻蒙生態中的一員。&lt;/p&gt; 
&lt;p&gt;我們採訪了金山辦公架構師覃歡，聽他講述 WPS 完成 HarmonyOS NEXT 開發適配背後的故事。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0911/163715_eFlA_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;em&gt;覃歡在 HDC 2024 現場&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#d35400&quot;&gt;「HarmonyOS 版本沒有一行代碼和安卓版本是重複的」&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;第一次正式接觸 HarmonyOS，是 2022 年底，覃歡被突然拉到一個會議中，討論 WPS 要不要鴻蒙原生化？他感覺有些莫名其妙。&lt;/p&gt; 
&lt;p&gt;不過也情有可原。覃歡經歷過 WPS 體系下的各種架構變更，其個人成長路線與 WPS 的快速發展期高度重合。&lt;/p&gt; 
&lt;p&gt;2012 年，覃歡才剛進入金山辦公這家公司，便參與基於 Qt 遷移 WPS 到多平台，包括 Windows、Linux，隨後又擴展到 macOS 和信創平台。&lt;/p&gt; 
&lt;p&gt;「我們那一批人，趕上了 WPS 重構的末班車，經歷了體系架構變革、多平台適配以及處理各種指令集，幾乎全程參與了這些變革。」覃歡表示。&lt;/p&gt; 
&lt;p&gt;答案是肯定的，就跟當年擁抱信創一樣。&lt;/p&gt; 
&lt;p&gt;過了個年回來，WPS 就開始與華為圍繞鴻蒙原生化這件事進行了長期的技術溝通。「從二月份開始，一直到去年的七月份左右，我們經歷了七八輪深入的交流，一直在探討 WPS 在純血鴻蒙系統中的技術難點。」覃歡回憶。&lt;/p&gt; 
&lt;p&gt;到了年中，WPS 團隊突然得知 HarmonyOS 不再兼容安卓，也就是同年 9 月發佈的 HarmonyOS NEXT 計劃，即鴻蒙原生應用全面啓動。&lt;/p&gt; 
&lt;p&gt;一旦 HarmonyOS NEXT 推出，將開啓一扇通往無限機遇的大門。這樣的發展路徑，或許預示着操作系統的三分天下。&lt;/p&gt; 
&lt;p&gt;華為與金山辦公雙方的目標，放在國家層面、行業發展層面、企業對市場的預期層面來講，都高度一致。&lt;/p&gt; 
&lt;p&gt;「我們其實也希望能夠搭載 HarmonyOS NEXT 這趟快車，迅速加入這一進程並共同開拓市場，掌握一定的市場話語權。」覃歡表示。&lt;/p&gt; 
&lt;p&gt;為了快速將 WPS 鴻蒙化，覃歡等人迅速組建起一支鴻蒙化團隊。「我們抽調了大約 40 多名‘高精尖’技術人員。只要是在 Office 領域的高 P 基本上都被薅完了。」&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0911/163822_HLfs_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;em&gt;WPS 鴻蒙版界面&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;團隊成員不僅要對 WPS 底層結構尤其內核有深入理解，還要具備跨平台開發的意識。此外，要擁有多系統同時開發的能力，因為要考慮將內核多端統一。&lt;/p&gt; 
&lt;p&gt;純血鴻蒙 HarmonyOS NEXT 完全摒棄了 Linux 內核，原先運行安卓應用的機制不存在了，WPS 如果不跟着改變，也就無法在 HarmonyOS NEXT 運行。&lt;/p&gt; 
&lt;p&gt;只能重寫。&lt;/p&gt; 
&lt;p&gt;為此，覃歡等人將現有的 WPS PC 內核引擎移植到鴻蒙上來，在此基礎上重新編寫了上層應用程序。為了實現這一點，還構建了一個從內核到上層應用的框架。&lt;/p&gt; 
&lt;p&gt;與之前的安卓版本相比較，鴻蒙版的 WPS 完全不一樣。「沒有一行代碼是重複的，是完全重寫的一套。」覃歡強調。&lt;/p&gt; 
&lt;p&gt;2023 年 11 月，WPS 成功在鴻蒙創新產品上運行。&lt;/p&gt; 
&lt;p&gt;緊接着，通過在內核上添加一個簡單的 Ark 層，也在一個月後實現了 WPS 在移動設備上的基本操作，如打開文檔。這就是上層 ArkUI，底層 C++的鴻蒙版 WPS。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#d35400&quot;&gt;40 多條需求，倒逼 HarmonyOS IDE 成長&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;將鴻蒙創新產品的內核跑在移動設備上之後，又面臨了新的問題——如何搭建能夠滿足跨棧調用的功能、性能與穩定性的要求？&lt;/p&gt; 
&lt;p&gt;此前在安卓平台上，WPS 曾考慮過 C++與 Java 的互調方案（JNI），但由於性能和穩定性不達標，最終該方案被否決。&lt;/p&gt; 
&lt;p&gt;而在 iOS 平台上，由於 OC 和 C++共佔同一調用棧，這個問題得到了較好的解決。&lt;/p&gt; 
&lt;p&gt;如今在鴻蒙移動端，上層是 Ark 運行時，底層是 C++，這就必然涉及到類似於 JNI 的調用問題，比如在大量數據的序列化和反序列化以及跨進程調度通信方面。&lt;/p&gt; 
&lt;p&gt;「我們是一羣被 Visual Studio 養得非常挑剔的一羣人。」覃歡説，WPS 的開發人員絕大多數都是使用市場上成熟的工具鏈體系，當轉向 HarmonyOS 開發時，遇到了前所未有的挑戰。&lt;/p&gt; 
&lt;p&gt;「HarmonyOS 的調試工具和開發環境——DevEco Studio 對於我們來説是一個巨大的考驗。面對跨語言調試、自定義變量觀察、多線程問題分析、內存泄漏等複雜難題時，DevEco 是否能夠滿足我們的能力要求？」&lt;/p&gt; 
&lt;p&gt;特別是當需要從 JS 穿透到 C++時，由於缺乏有效的跨語言調試能力，類似 CMD 這樣的工具，限制了他們在問題分析和處理上的手段，就只能依賴於日誌和時間戳來進行問題分析，調試工作變得異常複雜。&lt;/p&gt; 
&lt;p&gt;尤其是在遠程調試和交叉編譯方面，WPS 對熟練度和性能要求都很高，但現有的工具無法滿足這些需求。WPS 的代碼量龐大，如何高效地將編譯緩存推送到設備上成為了一個難題。&lt;/p&gt; 
&lt;p&gt;「每次修改代碼後，都需要等待幾分鐘才能進行調試，這對我們的工作效率造成了嚴重影響。我們嘗試了各種方法來提高編譯、調試速度以及問題驗證效率。」&lt;/p&gt; 
&lt;p&gt;在此過程中，華為提供了一系列技術支持，比如對可能出現的邏輯錯誤和異常情況的分析，以及如何在這些情況下保持框架的穩定性，使得框架在安全性方面得到良好的保障，從而避免了異常崩潰 (crash) 的風險，增強了整個系統的健壯性和可靠性。&lt;/p&gt; 
&lt;p&gt;最終通過內部與華為技術團隊的溝通，WPS 搭建了一套支持同步&amp;amp;異步跨語言的調度框架，基本滿足了 WPS 的業務訴求。&lt;/p&gt; 
&lt;p&gt;事實上，鴻蒙化編譯還沒正式開始前，WPS 在與華為的正式交流中，第一個討論的議題就是開發調試工具是否準備好，是否能夠支撐如此大量代碼的編譯與調試工作？&lt;/p&gt; 
&lt;p&gt;在開發初期，WPS 針對 HarmonyOS 的專用開發調測工具 DevEco 提的需求就多達 25 條。&lt;/p&gt; 
&lt;p&gt;在與華為技術團隊早期交流中，覃歡曾表示，如果 WPS 的開發環境能夠與 DevEco 很好地兼容或適配，那麼之後，幾乎所有應用在鴻蒙化過程的開發需求，DevEco 都能滿足。&lt;/p&gt; 
&lt;p&gt;隨着需求一一得到落實，不僅極大地提升了開發效率，也極大地增強了開發者對鴻蒙生態的信心。&lt;/p&gt; 
&lt;p&gt;覃歡及其團隊見證了 DevEco 從一個潛力無限的 IDE 成長為一個能夠穩定支撐大型項目開發的強大工具。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0911/163904_OyWs_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;DevEco 多場景深度調優&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;除了在技術層面提供支持，華為還在戰略層面，快速推進第三方庫的鴻蒙化進程。&lt;/p&gt; 
&lt;p&gt;WPS Office 是一個辦公軟件套裝，它在開發過程中依賴了多個三方庫來提供額外的功能和增強的性能。&lt;/p&gt; 
&lt;p&gt;但是，WPS 也只是第三方庫的使用者，對於三方庫的駕馭能力並不足。「推動第三方庫鴻蒙化，於我們而言是一件精力消耗非常大的事情。WPS 依賴的三方庫有 100 多個，但是精通的卻只有十多個。」覃歡表示。&lt;/p&gt; 
&lt;p&gt;在鴻蒙生態這艘船上，華為無疑是掌舵者。在推動第三方庫適配鴻蒙系統的過程中，華為扮演了關鍵角色，提供了系統層面的適配與支持，大幅節省了開發團隊的研發時間，並確保了性能和研發速度的提升。&lt;/p&gt; 
&lt;p&gt;「在短短一兩週內，便實現了第三方庫在 HarmonyOS 上的順利運行，加快了 WPS 向 HarmonyOS 的遷移進程。」覃歡總結道。&lt;/p&gt; 
&lt;p&gt;在整個 WPS 鴻蒙化的過程中，覃歡主導完成了 4000 萬行代碼應用開發，對 HarmonyOS NEXT 提出的需求超過 150 項，對集成開發環境（IDE）提出的需求超過 40 項，極大地補齊了系統能力——比如窗口、應用框架、文件、字體、打印、Dfx 等子系統能力和對大型應用的工程化支持能力等。&lt;/p&gt; 
&lt;p&gt;為表彰覃歡突出的技術貢獻，華為開發者大會（HDC 2024）為其頒發了鴻蒙先鋒「卓越技術貢獻獎」獎章。&lt;/p&gt; 
&lt;h4&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#d35400&quot;&gt;「沒有什麼技術點在鴻蒙上無法實現」&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;WPS 的系統複雜性和龐大代碼量，使得 WPS 在系統資源需求上存在特殊性。即使不算三方庫，WPS 也有 4000 萬行代碼，其安裝包體積遠遠超過大多數鴻蒙 APP。&lt;/p&gt; 
&lt;p&gt;連 WPS 都能在鴻蒙操作系統上流暢運行，也就意味着，應用鴻蒙化的技術障礙已經基本消除。&lt;/p&gt; 
&lt;p&gt;接下來，開發者只需要更多關注如何優化功能的細節和確保穩定性，以及如何進行適配工作。&lt;/p&gt; 
&lt;p&gt;「HarmonyOS 的學習曲線相對平緩，對於有其他編程語言經驗的人來説，上手並不困難。」覃歡表示。&lt;/p&gt; 
&lt;p&gt;WPS 在融入鴻蒙生態的過程中，並未特意招募鴻蒙專業開發者，其團隊都是由傳統 C++、Java、OC 開發人員，以及熟悉前端 H5 開發的技術人員組成。&lt;/p&gt; 
&lt;p&gt;覃歡表示，對於在 C++領域深耕多年的開發者來説，HarmonyOS 的設計理念顯得清晰且易於理解，其複雜度並不高。加之鴻蒙已解決了跨語言調試的難題，大多數問題都可以通過製作 demo 或小型化實例來單獨細緻地調試。&lt;/p&gt; 
&lt;p&gt;「將指令集遷移到華為平台的過程實際上比預期要簡單，沒有原本想象的那樣困難。畢竟經歷過信創，遇到過的問題也多如牛毛；在鴻蒙這裏，事情並沒有比之前更難，相較而言，在各自過往技術積累下，WPS 鴻蒙化相比較還算順利。」&lt;/p&gt; 
&lt;p&gt;這 8 個月來，WPS 已經全面測試並驗證了 HarmonyOS 所提供的各項技術能力。「WPS 基本上已經把大家所需要的所有技術能力，在鴻蒙系統上趟了一個遍，幾乎沒有什麼技術點在鴻蒙上無法實現。」覃歡表示。&lt;/p&gt; 
&lt;p&gt;當前，WPS 現已完成鴻蒙原生版應用開發，在諸如手機端、摺疊屏、平板等不同大小尺寸的屏幕上分別做了產品適配，並基於多平台賬號統一，實現了跨端、跨設備的文檔和數據共享，支持多用户協同、瀏覽編輯、修訂能力。&lt;/p&gt; 
&lt;p&gt;目前，WPS 鴻蒙原生應用已在全端流暢運行，WPS AI 也在多端同步上線，數十項 AI 功能都遷移到了 HarmonyOS NEXT。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0911/163935_GKmx_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;WPS 鴻蒙版亮相 HDC 2024&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#d35400&quot;&gt;WPS 攜手鴻蒙，或將顛覆移動辦公生態版圖&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;HarmonyOS NEXT，作為華為技術實力的體現，在新的發展道路上為用户帶來更安全、更自主可控的操作系統體驗，能夠與微軟的 Windows 系統以及國際科技巨頭進行有力競爭，助力我國爭取科技領域的主動權。&lt;/p&gt; 
&lt;p&gt;眾所周知，微軟 Office 在 Windows 上擁有系統特權，這是第三方軟件所不具備的。在功能上，WPS 完全可以與微軟 Office 相媲美，但在 Windows 上依然缺乏系統特權。&lt;/p&gt; 
&lt;p&gt;隨着全棧自研的 HarmonyOS NEXT 的發佈，意味着屬於中國自己的主場已經準備好了。覃歡表示，希望 WPS 能夠通過與 HarmonyOS NEXT 的深度結合，打破微軟 Office 在 Windows 上的深度綁定策略。&lt;/p&gt; 
&lt;p&gt;覃歡認為，一旦這一想法付諸實現，WPS 將提供超出用户預期的功能和體驗。他們最近在做的啓動優化就是一個例子，由於能夠深入瞭解系統加載的細節，從而針對性地調整，大幅提升了 WPS 啓動速度。&lt;/p&gt; 
&lt;p&gt;截至 2024 年 5 月，鴻蒙生態設備已經超過了 9 億台。HarmonyOS 在市場上的影響力正在不斷增強，為政企辦公等應用提供了廣闊的市場空間和新的機遇。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0911/164000_Jc7B_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;覃歡表示：「我們期待華為在這一過程中扮演關鍵角色，為辦公領域帶來新的動力，在政企辦公生態領域建立一套更成熟，能夠與 Windows 系統相媲美甚至超越它的辦公生態體系，幫助我們在科技領域佔據優勢地位。」&lt;/p&gt; 
&lt;p&gt;當前，鴻蒙生態已經超過 5000 個應用，這不僅僅是一個簡單的數字，而是一個生態系統的逐漸構建和完善。&lt;/p&gt; 
&lt;p&gt;應用生態的繁榮，絕非一日之功，它需要時間的沉澱、技術的積累，以及各方力量的持續投入。&lt;/p&gt; 
&lt;p&gt;在這個過程中，華為作為生態的發起者和推動者，不斷優化鴻蒙的開發工具和平台，降低開發門檻，提升開發效率。&lt;/p&gt; 
&lt;p&gt;同時，華為提供技術支持和資源投入，鼓勵開發者創新，扶持優質應用快速成長。&lt;/p&gt; 
&lt;p&gt;相信隨着 HarmonyOS NEXT 商用版的發佈，將有更多企業投身於鴻蒙帶來的藍海市場，也為徹底顛覆移動辦公生態的版圖帶來新的可能性。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311492</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311492</guid>
            <pubDate>Wed, 11 Sep 2024 08:40:51 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>李彥宏內部講話曝光：談大模型三大認知誤區，未來模型之間的差距會變大</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;「外界對大模型有相當多的誤解」，近日據媒體報道，李彥宏的一則內部講話曝光。&lt;/p&gt; 
&lt;p&gt;在最近一次和員工交流中，李彥宏談及三個大模型認知誤區，涵蓋了&lt;strong&gt;大模型競爭、開源模型效率、智能體趨勢&lt;/strong&gt;等熱點話題。&lt;/p&gt; 
&lt;p&gt;李彥宏談到，未來大模型之間的差距可能會越來越大。他表示，大模型的天花板很高，現在距離理想情況還相差非常遠，所以模型要不斷快速迭代、更新和升級；需要能幾年、十幾年如一日地投入，不斷滿足用户需求，降本增效。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;以下為內部講話內容&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;問：有觀點認為，大模型之間的能力已經沒有壁壘了？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;李彥宏：這個説法我不同意。我認為外界對大模型有相當多的誤解，每一個新模型發佈時，肯定都想説自己有多好，每次都去跟 GPT-4o 做比較，拿測試集或者弄一些榜單，説我的得分已經跟它差不多了，甚至某些單項上得分已經超過它了，但這並不能證明這些新發的模型跟 OpenAl 最先進的模型相比已經沒有那麼大的差距了。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;模型之間的差距是多維度的，一個維度是能力方面，不管是理解能力、生成能力、邏輯推理能力還是記憶能力等這些基本能力上的差距；另一個維度是成本方面&lt;/strong&gt;，你想具備這個能力或者想回答這些問題，你付出的成本是多少？有些模型可能推理速度很慢，雖然也達到同樣的效果了，但實際上它的體驗還是不如最先進的模型。還有就是對於測試集的 over-fitting,每一個想證明自己能力的模型都會去打榜，打榜時他就要猜別人到底在測什麼、哪些題我用什麼樣的技巧就能做對，所以從榜單或者測試集上看，你覺得能力已經很接近了，但到實際應用中還是有明顯差距的。&lt;/p&gt; 
&lt;p&gt;部分自媒體的炒作，再加上每個新模型發佈的時候都有宣傳的動力，使得大家有一種印象，認為模型之間的能力差別已經比較小了，其實真不是這樣。在實際使用過程當中，我不允許我們的技術人員去打榜，真正衡量文心大模型能力的是，你在具體應用場景當中到底有沒有能夠滿足用户的需求，有沒有能夠產生價值的增益，這是我們真正在乎的。&lt;/p&gt; 
&lt;p&gt;我們需要看到，一方面模型能力之間還有比較明顯的差距，另外一方面天花板很高，你今天做到的跟你實際想要做到的、跟理想狀態還差得非常遠，所以模型還需要不斷快速地去迭代、去更新、去升級。**即使今天你看到差距也許沒有那麼大了，再過一年你看看差距有沒有拉大？ 有誰能夠持續不斷地幾年甚至十幾年如一日往這個方向上去投入，讓它越來越能夠滿足用户的需求、滿足場景、滿足提升效率或者説降低成本等需求？**不同的模型之間差距不是越來越小，是會越來越大的，只是他們不知道真實需求的時候，只去做測試集的題可能覺得差不多了。&lt;/p&gt; 
&lt;p&gt;所謂的領先 12 個月或者落後 18 個月，我認為沒有那麼重要。我們每個公司都處在完全競爭的市場環境中，你不管做什麼方向都有很多競爭對手，如果你能永遠保證領先對手 12~18 個月，那是天下無敵的，不要覺得 12—18 個月是很短的時間，&lt;strong&gt;哪怕你能保證永遠領先競爭對手 6 個月，那就贏了&lt;/strong&gt;，你的市場份額可能是 70%，而對手可能僅為 20% 甚至 10% 的份額。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;問：有人説開源模型正在縮小與閉源模型的差距，這會摧毀閉源大模型公司的商業模式嗎？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;李彥宏：這個問題跟上一個問題是高度關聯的，我剛才講一個模型除了能力或效果之外還要看效率，效率上開源模型是不行的。閉源模型準確地講應該叫商業模型，商業化的模型是無數個用户或者説客户在共享同樣的資源，在分攤研發成本、分攤推理用的機器資源和 GPU，而開源模型需要你自己去部署一套東西，部署之後 GPU 的使用率是多少呢？我們的文心大模型 3.5、4.0 也好，使用率都是 90% 多，你部署一個開源模型有多少人在用？我們對外講文心大模型每天調用量超過 6 億，每天生成的 token 數超過萬億，哪個開源模型可以説自己一天調用量是多少、生成了多少 token?沒有人用的話成本怎麼分擔？推理成本怎麼能夠跟商業化模型相比呢？&lt;/p&gt; 
&lt;p&gt;在大模型時代之前，大家習慣了開源意味着免費、意味着成本低。那時市面上那種商業化的產品，每一個版本都要為之付錢，比如買一個電腦裝 Windows，可能微軟要從中收多少錢，而你如果跑一個 Linux 就不用花這個錢了。由於 Linux 是開源的，所有程序員都可以看到代碼，哪兒做的不好我可以去更新，更新了再 check in，大家眾人拾柴火焰高，你在巨人的肩膀上可以不斷地進步。但是這些東西在大模型時代都不成立，大模型時代大家經常講的是 GPU 有多貴，算力是決定大模型成敗的一個關鍵因素，&lt;strong&gt;開源的模型給你送算力嗎？它不給你送算力，怎麼能夠讓算力高效地被利用？開源模型解決不了這個問題。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;以前你買電腦的時候就已經為算力付費了，但大模型的推理不是這樣，這個推理其實很貴。所以説開源大模型的價值在教學科研這些領域，要想搞清楚大模型的工作原理是啥，如果不知道源代碼什麼的肯定是有劣勢的，但是真正在商業領域，當你追求的是效率、效果，追求的是最低的成本時，開源模型是沒有優勢的。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;問：AI 應用的演進方式是什麼？為什麼強調智能體？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;李彥宏&lt;/strong&gt;：大模型發展的過程必然要經歷這幾個階段，一開始是對人進行輔助，最後出來什麼東西需要人把最後一道關，我們確定它的效果是 OK 的，各方面都不錯才會讓它出去，這是 Copilot 階段；再往下走就是 Agent 智能體，外界對於 Agent 有各種各樣不同的定義，最主要還是説它有了一定的自主性，具備自主使用工具、反思、自我進化等能力；這種自動化程度再往下走就變成一個所謂的 Al Worker，能夠像人一樣做各種各樣的腦力和體力勞動，各方面的工作都可以獨立完成。肯定要有這麼一個過程。&lt;/p&gt; 
&lt;p&gt;「智能體是大模型最重要的發展方向」這個判斷，其實是一個非共識。百度 Create 大會上我們發了三個產品，AgentBuilder、AppBuilder、ModelBuilder，其中 AgentBuilder 和 AppBuilder 都是講智能體的，一個門檻更低一些，另一個功能更強大一些。當我們解釋完了之後，有些人終於開始明白這東西確實有意思，能夠產生價值，而且已經可以相對比較低門檻地做出來大家感覺可用的東西。從那時候開始智能體的熱度才慢慢上來，也開始有很多人看好智能體這個發展方向，&lt;strong&gt;但是到今天為止智能體還不是共識，像百度這樣把智能體作為大模型最重要的戰略、最重要的發展方向的公司並不多。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;為什麼我們這麼強調智能體？因為智能體的門檻確實很低，我們去年説要卷應用、大家都去做應用，其實很多人還是説不知道該怎麼做，不知道這個方向能不能做出來，我到底要用到什麼能力才能夠在這個場景下產生價值，這裏面有無數不確定性，大家不知道怎麼從模型變成應用。&lt;strong&gt;但是智能體提供了一個非常直接、非常高效、非常簡單的方式，在模型之上構建智能體是相當方便的&lt;/strong&gt;，這也是為什麼今天每週都有上萬個新的智能體在文心平台上被創造出來。&lt;/p&gt; 
&lt;p&gt;智能體方面我們已經看到了趨勢，也有比較好的先決條件，除了模型本身的能力比較強大之外，我們也有很好的分發通路。百度的 APP，尤其是百度搜索一天有數以億計的人在用，用户的需求主動向我們表達了，哪一個智能體能更好地去回答他這些問題，去滿足他這些需求，這是一個自然匹配的過程，所以我們是最能夠幫助這些開發者分發他們智能體的。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311486</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311486</guid>
            <pubDate>Wed, 11 Sep 2024 08:30:51 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>Canonical 正在將 GraalVM 打包成 deb 格式引入 Ubuntu</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;Linux 發行版 Ubuntu 基礎設施團隊工程師最近在論壇中&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.ubuntu.com%2Ft%2Ffoundations-team-updates-thursday-2024-09-05%2F47785%2F5&quot; target=&quot;_blank&quot;&gt;透露&lt;/a&gt;，他們正在為 GraalVM &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flaunchpad.net%2F%7Epushkarnk%2F%2Barchive%2Fubuntu%2Fgraalvm-packages%2F%2Bpackages&quot; target=&quot;_blank&quot;&gt;製作&lt;strong&gt; deb 軟件包&lt;/strong&gt;&lt;/a&gt;（不是 Ubuntu 優先支持的 snap）。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0911/112805_VScj_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0911/113502_W3k2_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;GraalVM 是一個高性能的 JDK 發行版。它旨在加速用 Java 和其他 JVM 語言編寫的應用程序的執行，同時還為 JavaScript、Python、基於 LLVM 的語言（如 C 和 C++）以及許多其他流行編程語言提供運行時。&lt;/p&gt; 
&lt;p&gt;此外，GraalVM 為編程語言之間提供了高效互操作性，並將 Java 應用程序提前編譯為本機可執行文件，從而加快啓動時間並降低內存開銷。&lt;/p&gt; 
&lt;p&gt;Oracle 提供了 GraalVM 的通用 Linux x86_64 和 ARM64 二進制包。但到目前為止，GraalVM 並未出現在 Debian/Ubuntu 的軟件包倉庫中，而 Debian 上的 GraalVM 軟件包只有 GitHub 中的幾個非官方包。&lt;/p&gt; 
&lt;p&gt;Ubuntu 的官方軟件包目前提供了&amp;nbsp;OpenJDK，同時也是首選 JVM。&lt;/p&gt; 
&lt;p&gt;Ubuntu&amp;nbsp;&lt;span&gt;開發商 Canonical 為增強 Java 開發體驗提供了另一個選擇，並且不是採用 snap 包格式，而是 deb 軟件包，雖然它沒有解釋這樣做的原因，但相信大多數開發者都會支持這個決定。&lt;/span&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;延伸閲讀&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/248387/ubuntu-new-unified-install-plans-sound-meh&quot; target=&quot;news&quot;&gt;Ubuntu 強推 Snap，計劃移除「最小化安裝」選項&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/247869/ubuntu-23-10-new-app-store-deb-support&quot; target=&quot;_blank&quot;&gt;Ubuntu 23.10 引入新的 「應用商店」，優先支持 Snap 格式&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/news/243309/immutable-all-snap-ubuntu-desktop&quot; target=&quot;news&quot;&gt;Ubuntu 明年將推出完全基於 Snap 的桌面版本&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311456/canonical-graalvm-for-ubuntu</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311456/canonical-graalvm-for-ubuntu</guid>
            <pubDate>Wed, 11 Sep 2024 03:45:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>AMD 宣佈統一 GPU 架構為 UDNA</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;AMD 計算和圖形業務組總經理兼高級副總裁 Jack Huynh 宣佈&lt;strong&gt;將消費級的 RDNA 和數據中心級的 CDNA 統一為 UDNA 架構&lt;/strong&gt;，以更有效地挑戰英偉達的 CUDA 生態系統。&lt;/p&gt; 
&lt;p&gt;2019 年，AMD 決定摒棄其 GCN 微架構，轉而採取新的戰略方向，將圖形微架構一分為二：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;RDNA 架構專注於服務消費市場的遊戲圖形產品&lt;/li&gt; 
 &lt;li&gt;CDNA 架構則專為數據中心打造，旨在滿足人工智能（AI）和高性能計算（HPC）的工作負載需求&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;大家比較熟悉的 Instinct 數據中心 GPU 就是基於 CDNA 架構。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d620c08fb0cf79f04abb446f95e66897a48.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;現在 AMD 計劃將這些架構統一為 UDNA 架構，未來的 UDNA 架構既應用於 Instinct，也應用於消費級顯卡，此舉將有助於開發者在 AMD 的 GPU 上更便捷地進行開發，不再需要在兩種架構中進行選擇。&lt;/p&gt; 
&lt;p&gt;Jack Huynh 稱統一架構的一個好處是減少頻繁更換內存層次結構，避免性能損失。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311443</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311443</guid>
            <pubDate>Wed, 11 Sep 2024 02:43:25 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>openKylin 社區生態委員會第八次會議圓滿召開</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;2024 年 9 月 10 日，&lt;strong&gt;openKylin 社區生態委員會第八次會議&lt;/strong&gt;召開。openKylin 社區生態委員會作為社區治理架構之一，主要職責為攜手社區核心夥伴，推動社區生態共建，打造創新解決方案，提升 openKylin 品牌影響力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;本次會議由社區理事成員單位、生態委員會成員單位&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;先進操作系統創新中心 (天津) 有限公司&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;（以下簡稱「先進操作系統創新中心」）承辦，&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin 社區生態委員會主任李震寧&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;擔任主持，20 家生態委員會單位代表於線上線下參會。會上總結和回顧了 openKylin 社區 2024 年 7 月-9 月的運營進展，並針對後續運營規劃等話題進行了探討。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;2050&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e6b0900edc3c99f9144213d5511d8d12cdb.jpg&quot; width=&quot;4032&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;先進操作系統創新中心總經理助理張勇軍&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;作為會議承辦方代表致歡迎詞。他表示，有幸承辦 openKylin 第八次社區生態委員會議。請允許我代表先進操作系統創新中心及我個人，向在座的每一位嘉賓致以最熱烈的歡迎和衷心的感謝。期待與 openKylin 社區及在座的各位夥伴在多個維度深化合作：聚焦&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;關鍵共性技術&lt;/span&gt;&lt;span&gt;突破，攜手構建更加開放、協同、共贏的生態系統。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;致辭結束，&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;張勇軍&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;針對 openKylin 社區近兩月的運營亮點和要點做了回顧，從社區會員、平台、生態、SIG 和活動等方面進展向各委員進行了彙報，&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;openKylin 社區 Release SIG Maintainer 張天雄&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;就 openKylin 版本進展向各委員進行彙報。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;621&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5ad996edd0b2537b00b040deb63ae4fe0bd.bmp&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;2024 年 7 月-9 月，openKylin 社區新增會員&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;36&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;家、新增 SIG&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;6&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;個，截至目前社區會員總數達&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;550&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;家、SIG 總數達&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;118&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;個，涵蓋內核/硬件/架構/驅動、基礎組件、桌面環境/設計、開發框架、系統安全、人工智能等多個技術方向；&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;平台側&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;，上線社區文檔收集活動模塊、城市用户組申請模塊以及 meetup 活動報名模塊；&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;版本側&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;，發佈 openKylin 2.0 正式版本，並更新調整社區版本發行策略；&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;活動運營側&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;，2024 中國操作系統產業大會—openKylin 開源創新論壇計 openKylin 社區第四次理事會會議成功舉辦、完成中國研究生操作系統開源創新大賽初賽評審、舉辦上海城市用户組活動及 openKylin 2.0《&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;黑神話悟空&lt;/span&gt;&lt;span&gt;》體驗直播、發佈社區首個園區站—浦東軟件園站，並參與了多場國內外頂級開源活動與行業大會。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;隨後，&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;飛騰軟件技術支持部研發工程師帥家坤&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;以&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;《飛騰在 openKylin 的貢獻彙報》&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;為題進行分享。他表示，加入 openKylin 社區後，飛騰發起成立 Phytium SIG。截至目前，飛騰已累計向 openKylin 社區 linux-6.6-next 內核分支推送的 PR 共計 29 項，其內容涉及飛騰硬件平台內核特性及後續功能修復，代碼總量約 3 萬行。後續，依照 openKylin 社區發展規劃，飛騰將針對 openKylin 6.6&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;內核版本&lt;/span&gt;&lt;span&gt;持續製作、維護並在開源社區推送支持飛騰全系處理器的操作系統內核適配代碼。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;會議&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;討論環節&lt;/span&gt;&lt;span&gt;，各參會委員&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;積極發言，&lt;/span&gt;&lt;span&gt;圍繞社區運營進展及後續活動規劃展開了深入探討。&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;&lt;span&gt;元心科技，&lt;/span&gt;&lt;span style=&quot;color:var(--weui-LINK)&quot;&gt;達摩院&lt;/span&gt;&lt;span&gt;，麟卓，兆芯，海光，京東，普華，飛騰，中科申泰，龍芯，麒麟信安等&lt;/span&gt;&lt;/span&gt;分別對社區的運營表示認可，並積極為社區&lt;span style=&quot;color:#000000&quot;&gt;共建&lt;/span&gt;獻言獻策。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;社區的發展離不開各企業夥伴的大力支持。openKylin 社區生態委員會例會每兩月召開一次，會議期間，各委員代表匯聚一堂，就社區運營進展與規劃進行細緻的探討，對 openKylin 社區運營工作具有重要指導意義。openKylin 社區也將秉持開源、開放的原則，與各夥伴共同參與、共同治理，一起打造中國領先的開源操作系統根社區。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311438</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311438</guid>
            <pubDate>Wed, 11 Sep 2024 01:36:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>開源日報 | 通用端到端 OCR 模型開源；Cassandra 5.0 正式 GA；NGINX 遷移到 GitHub；iPhone 16 全系列配備 8GB RAM；國產數據庫 100% 替代走到哪了?</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;歡迎閲讀 OSCHINA 編輯部出品的開源日報，每天更新一期。&lt;/p&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#ff9900&quot;&gt;&lt;strong&gt;# 2024.9.10&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日要聞&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#245bdb&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/311382/nginx-moved-to-github&quot;&gt;NGINX 項目遷移到 GitHub&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;NGINX 項目&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmailman.nginx.org%2Fpipermail%2Fnginx-announce%2F2024%2FITL3AOQSAJANFJXMM3VOVOIGOUADWFFK.html&quot; target=&quot;_blank&quot;&gt;宣佈&lt;/a&gt;&lt;/u&gt;將開源的代碼倉庫從 Mercurial 遷移到 Github (&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnginx%2Fnginx&quot; target=&quot;_blank&quot;&gt;https://github.com/nginx/nginx&lt;/a&gt;)。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0910/180136_swQp_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;從現在開始，NGINX 項目將以 Pull Requests 形式接受貢獻，通過 Github 問題頁接受 bug 報告、功能請求和功能增強建議，將 GitHub 的討論頁面成為社區論壇。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;NGINX 項目表示將給予開發者們過渡時間，在 2024 年 12 月 31 日前繼續通過郵件列表接受補丁和社區支持。&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/311300/apple-intelligence-comes-to-iphone-ipad-and-mac-next-month&quot;&gt;Apple Intelligence 將於下月起登陸 iPhone、iPad 與 Mac&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Apple 今日宣佈&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.apple.com%2Fapple-intelligence%2F&quot; target=&quot;_blank&quot;&gt;Apple 智能 (Apple Intelligence)&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/a&gt;將於下月起隨 iOS 18.1、iPadOS 18.1 和 macOS Sequoia 15.1 發佈，更多相關功能將於未來幾個月內陸續推出。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-342f2e7529e1945748166e345e86136dd48.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;「Apple 智能」發佈時支持美國英語，將於 12 月拓展至澳大利亞、加拿大、新西蘭、南非和英國的本土化英語。&lt;strong&gt;明年，「Apple 智能」將支持中文&lt;/strong&gt;、法語、日語、西班牙語等更多語言。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;Apple 還表示，中國大陸的用户需在稍後經過監管部門批准後才能使用該功能。&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;span style=&quot;color:#d83931&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/311298/cassandra-5-0-ga-released&quot;&gt;Apache Cassandra 5.0 正式 GA&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;p&gt;Cassandra 5.0 標誌着 Cassandra 3.x 的終結。幾個亮點：&lt;/p&gt; 
  &lt;p&gt;1. 存儲附加索引（SAI）&lt;br&gt; 2. Trie memtables 和 trie SSTables&lt;br&gt; 3. JDK 17 支持&lt;br&gt; 4. 統一壓縮策略（UCS）&lt;br&gt; 5. 向量搜索&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h3&gt;&lt;a href=&quot;https://www.oschina.net/news/311375/byconity-1-0&quot;&gt;字節雲原生開源數倉 ByConity 1.0 發佈&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;從 ByConity 開源之初，我們一直將產品定位為開源雲原生數據倉庫。區別於傳統 OLAP 產品，ByConity 採用存算分離的雲原生架構，通過這種架構獲得了彈性和降低資源浪費的優勢，但與此同時也在一定程度上提高了產品的複雜度。定位為雲原生數據倉庫，是希望能夠承擔更多類型、更復雜的分析任務負載，無論是在線的實時分析還是離線數據的清洗 / 加工任務都能夠勝任。更全面的能力能夠幫助用户降低數據分析平台的整體複雜度。&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;今日觀察&lt;/span&gt;&lt;/h2&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;社交觀察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnew.qq.com%2Frain%2Fa%2F20240910A00RFJ00%3Fsuid%3D%26media_id%3D&quot; target=&quot;_blank&quot;&gt;開源嵌入式編譯器，沒想象中那麼好？&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;p&gt;對嵌入式工程師來説，嵌入式編譯器是不可或缺的神兵利器，它被人冠以「C 語言翻譯官」的名號。 由於 C 語言歷史悠久，早期沒有規範，整個計算機產業也都處於拓荒的年代，所以就湧現了很多款 C 語言編譯器。&lt;br&gt; &lt;br&gt; 根據 EEWorld 的調研，嵌入式工程師比較青睞的嵌入式編譯器主要包括 Keil（ArmCC）、IAR、GCC、AVR GCC、CLion、Clang、green hills、TI 的 CSS、ADI 的 Visual DSP++。不過，隨着嵌入式開發格局逐漸穩固，Keil、IAR、GCC 成為嵌入式編譯器三巨頭，基本大部分嵌入式產品都有其身影。&lt;br&gt; &lt;br&gt; 尤其是 GCC，作為一個完全開源的編譯器，很多 MCU 廠商的 IDE 都由它改寫而來。但最近一段時間，業界出現不同的聲音，表示「開源才是最貴的」，這些編譯器在開源背後潛藏許多隱形成本。&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#000000&quot;&gt;電子工程世界&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ft.cj.sina.com.cn%2Farticles%2Fview%2F6105753431%2F16bee6757019017vrw&quot; target=&quot;_blank&quot;&gt;通用端到端 OCR 模型開源，拒絕多模態大模型降維打擊&lt;/a&gt;&lt;/h4&gt; 
  &lt;p&gt;在 AI-2.0 時代，OCR 模型的研究難道到頭了嗎！？（OCR：一種將圖像中的文字轉換為可編輯和可搜索文本的技術）&lt;/p&gt; 
  &lt;p&gt;Vary 作者團隊開源了第一個邁向 OCR-2.0 的通用端到端模型 GOT。用實驗結果向人們證明：No~No~No~&lt;/p&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-5aee5ed59de4c25aa40ada47c095640c7a4.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;量子位&lt;/strong&gt;&lt;/p&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2692486652%2FOw9vIAaRF%3Fpagetype%3Dprofilefeed&quot; target=&quot;_blank&quot;&gt;某 E 的工程師和研發使用期到 50 歲，某 H 到 35 歲&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;p&gt;我和朋友聊過，某 E 的工程師和研發使用期到 50 歲，某 H 到 35 歲。某 H 剛開始是真不行，但現場鋪人，20 多歲一週可以上五到六個夜班，出問題現場解決。後端研發住公司可以每月出一個版本。某 E 除了被活活打死，沒有任何選擇。&lt;/p&gt; 
   &lt;p&gt;是不是民族驕傲？我覺得是。因為作為後來者，靠慢慢研發三五十年也趕不上。但如果全社會用工企業都認可甘蔗只有中間甜，拋棄兩端合理合法，而且在道德上還要覺得是因為兩端沒有廣泛進化出新的開花結果能力。那個體唯一合理的辦法，就是在自己還「甜」的時候，996 榨取儲存糖分，之後全生命週期壓制消費。&lt;/p&gt; 
   &lt;p&gt;沒有人永遠年輕，但永遠有年輕人。所以積極的一面是，只要有源源不斷的年輕人，不需要做出改變，也可以繼續贏下去。&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微博&amp;nbsp;&lt;/span&gt;&lt;strong&gt;落魄的三叔&lt;/strong&gt;&lt;/p&gt; 
  &lt;div&gt; 
   &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FNc9zg7g6C0RvcgYa3J4lIQ&quot; target=&quot;_blank&quot;&gt;現在的大模型榜單，真就沒一個可信的。&lt;/a&gt;&lt;/h4&gt; 
   &lt;p&gt;上週，AI 圈有個很炸裂的大模型發佈，在全網引起了山呼海嘯，一眾從業者和媒體尊稱它為開源新王。&lt;/p&gt; 
   &lt;p&gt;就是 Reflection 70B。在每項基準測試上都超過了 GPT-4o，還只用 70B 的參數，就擊敗了 405B 的 Llama 3.1，模型中還有一個叫「Reflection-Tuning」的技術，能讓模型能夠在最終回覆之前，先識別自己有沒有錯誤，如果有，糾正以後再回答。&lt;/p&gt; 
   &lt;p&gt;其實這個東西當時我就很存疑，因為在我的理解裏，這玩意，就是個 CoT，就是個純 Prompt，一個 Prompt 把 70B 模型直接帶的螺旋昇天？&lt;br&gt; 你這玩意，真要是能做到，奧特曼就真的直接原地給你磕頭了。。。&lt;/p&gt; 
   &lt;p&gt;最關鍵的是，還有一個很離譜的點，這個模型就兩個人做，而且，從一拍即合、到找數據集、到模型微調完成並正式發佈，一共就花了 3 周。&lt;br&gt; 這效率，這速度，直接卷的螺旋昇天，國內大廠速度沒捲到這個地步...&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- 微信&amp;nbsp;&lt;strong&gt;數字生命卡茲克&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;媒體觀察&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F3g.k.sohu.com%2Ft%2Fn820397800%3FserialId%3D2c5447277ef79eabeab0f9cfa6c00935&quot; target=&quot;_blank&quot;&gt;倒計時三年:國產數據庫 100% 替代走到哪了?&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;上世紀 80 年代，中國數據庫開始萌芽；90 年代，IBM、Oracle 壟斷國內數據庫市場；本世紀初，「四朵金花」陸續成立；10 年代，互聯網公司開啓「去 O」浪潮；到了 20 年代，國產數據庫已然呈現出「百花齊放」的態勢。當前，國產數據庫仍在不斷追趕與超越。&lt;/p&gt; 
    &lt;p&gt;據國資委 2022 年發佈的文件，截止到 2027 年，「2+8+N」黨政與八大行業要實現數據庫的 100% 國產替代。&lt;/p&gt; 
    &lt;p&gt;如今 2024 年接近尾聲，但面對國產數據庫去「IOE」的口號和替換時間表，行業的態度卻各有不同，有的企業已經在分享核心系統替換經驗，也有企業依然認為替代難度太大，不敢輕易嘗試……&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;div&gt;
    &amp;nbsp;
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;&amp;nbsp;藍鯨新聞&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.xinhuanet.com%2Fdigital%2F20240910%2F48d2292eed8c4744a6b5bcb3609a8778%2Fc.html&quot; target=&quot;_blank&quot;&gt;小企業大模型——法國人工智能初創公司的「開源」之道&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p&gt;如果説 2023 年的人工智能（AI）敍事始於 ChatGPT 引爆網絡，那麼 2024 年法國科技初創企業米斯特拉爾人工智能公司（Mistral AI）則以不俗表現引人注目。&lt;/p&gt; 
   &lt;p&gt;米斯特拉爾人工智能公司 2023 年 4 月誕生於巴黎，創始人是三名曾在硅谷工作的「90 後」。首席執行官兼創始人阿瑟·門施曾是谷歌旗下「深層思維」公司的研究員，主要研究語言模型。另兩名創始人——紀堯姆·朗普勒和蒂莫泰·拉克魯瓦此前任職於臉書母公司「元」的 AI 團隊。三人曾是大學同窗。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:rgba(0, 0, 0, 0.9)&quot;&gt;新華網&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnew.qq.com%2Frain%2Fa%2F20240910A06DWB00&quot; target=&quot;_blank&quot;&gt;英偉達 CUDA 將受到衝擊？AMD 將推出統一 UDNA GPU 架構&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt;
   在德國柏林舉行的 IFA 2024 上，AMD 計算和圖形業務集團高級副總裁兼總經理 Jack Huynh 宣佈，公司將把以消費者為中心的 RDNA 和以數據中心為中心 CDNA 架構統一為 UDNA 架構，這將為公司更有效地應對英偉達根深蒂固 CUDA 生態系統奠定基礎。
  &lt;/div&gt; 
  &lt;div&gt;
   &lt;br&gt; 在 2019 年，AMD 決定摒棄其 GCN 微架構，轉而採取新的戰略方向，將圖形微架構一分為二：RDNA 架構專注於服務消費市場的遊戲圖形產品，而 CDNA 架構則專為數據中心打造，旨在滿足人工智能（AI）和高性能計算（HPC）的工作負載需求。AMD 展望未來，計劃將這些架構統一為 UDNA 架構，這一變革旨在為開發人員帶來更加便捷的使用體驗。
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;芯榜&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.c114.com.cn%2Fai%2F5339%2Fa1272932.html&quot; target=&quot;_blank&quot;&gt;網安標委發佈《人工智能安全治理框架 (1.0 版)》&lt;/a&gt;&lt;/h4&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;p&gt;9 月 9 日，全國網絡安全標準化技術委員會制定的《人工智能安全治理框架（1.0 版）》對外公開發布。&lt;/p&gt; 
    &lt;p&gt;人工智能安全治理原則指出，秉持共同、綜合、合作、可持續的安全觀，堅持發展和安全並重，以促進人工智能創新發展為第一要務，以有效防範化解人工智能安全風險為出發點和落腳點，構建各方共同參與、技管結合、分工協作的治理機制，壓實相關主體安全責任，打造全過程全要素治理鏈條，培育安全、可靠、公平、透明的人工智能技術研發和應用生態，推動人工智能健康發展和規範應用，切實維護國家主權、安全和發展利益，保障公民、法人和其他組織的合法權益，確保人工智能技術造福於人類。&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;C114 通信網&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ft.cj.sina.com.cn%2Farticles%2Fview%2F1914880192%2F7222c0c002001f6o0&quot; target=&quot;_blank&quot;&gt;面向下一代互聯網的開源底層軟硬件技術平台發佈&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p&gt;昨天（9 月 9 日）舉行的 2024 浦江創新論壇 Web3.0 創新論壇上，上海浦芯未來互聯網技術研究院正式發佈下一代互聯網 Web3.0 底層開源技術平台「ChainWeaver」，它將作為底層核心技術，支撐上海城市級區塊鏈基礎設施的建設。&lt;/p&gt; 
   &lt;p&gt;該平台融合區塊鏈、隱私計算等前沿技術，同時具備提供分層多鏈擴展和零信任隱私安全保障的能力，在超異構融合芯片等專用硬件的加持下，未來可滿足在全球佈局千萬級節點，支撐每秒千萬筆數據可信、安全流通，並且具備硬件級隱私安全保護能力，性能國際領先。據悉，該平台將面向政務、金融、能源、航運貿易等一批國家級重大應用場景，支撐我國超大規模數字基礎設施的建設。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;- &lt;strong&gt;文匯報&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapp.myzaker.com%2Fnews%2Farticle.php%3Fm%3D1725860603%26pk%3D66de71ab7f780b311e000001&quot; target=&quot;_blank&quot;&gt;對話復旦大學教授肖仰華：這輪生成式 AI 泡沫早晚會破，天花板一定會到來&lt;/a&gt;&lt;/h4&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;p&gt;肖仰華教授認為，AI 大模型落地的本質仍然是數據工程。但當前，大模型發展過程中，其對數據的消耗和使用極為 &quot; 粗放 &quot;，對數據的使用效率極為 &quot; 低下 &quot;，和人類相比遠遠不足，同時，千億大模型的數據可能存在極大 &quot; 水分 &quot;，現在已經處於 &quot; 大模型數據耗光 &quot; 這一狀態。因此，發展合成數據、私域數據、個人數據訓練，可以進一步提升大模型的技術能力。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px; text-align:right&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;-&lt;strong&gt;&amp;nbsp;鈦媒體&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;今日推薦&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;每日一博&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://my.oschina.net/u/5783135/blog/15742076&quot; target=&quot;_blank&quot;&gt;説説唯一 ID 與 CAS&lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;數據和算法組成了我們現有的應用軟件，當然互聯網應用也不例外。為了區分應用系統收集和運行所必要的這些數據，我們通過各種方法，來組織其存儲形式，方便其為我們所用。從數據結構、文件、到專業數據庫等工具，無一不是方便數據存儲和訪問的利器。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;但無論如何，我們對數據存儲，都要通過唯一的標識來對其進行區分，以確保我們根據這個標識來定位到它。&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;在不同的系統中，這個標識的表現也各不相同：&lt;/p&gt; 
 &lt;ul style=&quot;list-style-type:disc; margin-left:0; margin-right:0&quot;&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;在編程語言中，它表現為變量名稱、常量名稱等；&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;在文件系統中，它表現為目錄以及目錄下的文件名等；&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;在數據庫表中，它表現為庫名、表名、主鍵或唯一索引；&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;在網絡通信中，它表現為 IP 地址、MAC 地址等；&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;在計算機內存中，它表現為物理內存地址等。&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span style=&quot;color:#27ae60&quot;&gt;&lt;strong&gt;開源之聲&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ff9900&quot;&gt;用户觀點&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
 &lt;h4&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FxsZtg0z420Noh8cIGNfgiA&quot; target=&quot;_blank&quot;&gt;iPhone 16 全系列配備 8GB RAM &lt;/a&gt;&lt;/strong&gt;&lt;/h4&gt; 
 &lt;blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 1：&lt;/span&gt;標準版性價比最高的一次&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 2：&lt;/span&gt;這下沒理由買 pro 了&lt;/li&gt; 
   &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;觀點 3：&lt;/span&gt;修手機的看了都要笑醒，邊賺錢邊罵蘋果不是人，笑着把錢賺了&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;---END---&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;最後，歡迎掃碼下載「開源中國 APP」，閲讀海量技術報告、程序員極客分享！&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-d27cc3636c021c266537f4729dc0f84fdc3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311392</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311392</guid>
            <pubDate>Tue, 10 Sep 2024 11:00:37 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>NGINX 項目遷移到 GitHub</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;NGINX 項目&lt;u&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmailman.nginx.org%2Fpipermail%2Fnginx-announce%2F2024%2FITL3AOQSAJANFJXMM3VOVOIGOUADWFFK.html&quot; target=&quot;_blank&quot;&gt;宣佈&lt;/a&gt;&lt;/u&gt;將開源的代碼倉庫從 Mercurial 遷移到 Github (&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnginx%2Fnginx&quot; target=&quot;_blank&quot;&gt;https://github.com/nginx/nginx&lt;/a&gt;)。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0910/180136_swQp_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;從現在開始，NGINX 項目將以 Pull Requests 形式接受貢獻，通過 Github 問題頁接受 bug 報告、功能請求和功能增強建議，將 GitHub 的討論頁面成為社區論壇。&lt;/p&gt; 
&lt;p&gt;NGINX 項目表示將給予開發者們過渡時間，在 2024 年 12 月 31 日前繼續通過郵件列表接受補丁和社區支持。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311382/nginx-moved-to-github</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311382/nginx-moved-to-github</guid>
            <pubDate>Tue, 10 Sep 2024 10:06:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>完整的數倉能力，字節雲原生開源數倉 ByConity 1.0 版本發佈！</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;div&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;img height=&quot;170&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-1be2d4d35aa34e63f6d05041d6db26915fb.png&quot; width=&quot;900&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;span style=&quot;color:#7f8c8d&quot;&gt;文章來源｜ByConity 開源社區&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;color:#919191; text-align:left&quot;&gt;項目地址｜&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FByConity%2FByConity&quot; target=&quot;_blank&quot;&gt;https://github.com/ByConity/ByConity&lt;/a&gt;&lt;/p&gt; 
  &lt;/blockquote&gt; 
  &lt;p&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p&gt;2024 年 8 月，ByConity 1.0 正式發佈，翻開了 ByConity 新的一頁。1.0 版本有哪些不同，以及 1.x 版本會重點迭代哪些能力，下面為大家一一解讀。&lt;/p&gt; 
  &lt;h1&gt;&lt;strong&gt;完整的數據倉庫能力&amp;nbsp;&lt;/strong&gt;&lt;/h1&gt; 
  &lt;p&gt;從 ByConity 開源之初，我們一直將產品定位為&lt;strong&gt;開源&lt;/strong&gt;&lt;strong&gt;雲原生數據倉庫&lt;/strong&gt;。區別於傳統 OLAP 產品，ByConity 採用存算分離的雲原生架構，通過這種架構獲得了彈性和降低資源浪費的優勢，但與此同時也在一定程度上提高了產品的複雜度。定位為雲原生數據倉庫，是希望能夠承擔更多類型、更復雜的分析任務負載，無論是在線的實時分析還是離線數據的清洗/加工任務都能夠勝任。更全面的能力能夠幫助用户降低數據分析平台的整體複雜度。&lt;/p&gt; 
  &lt;p&gt;傳統的 OLAP 產品通過數據索引、列式存儲、向量化執行等技術，注重對實時分析或者 Ad-hoc 分析的快速反應，滿足低時延的要求。在數據加載進 OLAP 產品之前，往往需要經過複雜的數據清洗和轉換過程，也就是大家熟知的 ETL 任務。在傳統的數據分析架構中，這部分工作是由 Hive、Spark、Flink 等產品來完成的。&lt;/p&gt; 
  &lt;p&gt;&lt;img height=&quot;513&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-a41745ee9fdbf15521f89ff58e487fbc574.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;在 ByConity 1.x 版本中，增加了對 BSP 模式的支持，減少數據加工和數據分析之間多系統耦合帶來的運維負擔，使 ByConity 能夠一站式完成數據接入、加工和分析。&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;img height=&quot;503&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-afdbe928816b39716665d62219b18bee6c1.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;1.0 版本中，在 BSP 模式下（settings bsp_mode = 1 打開 bsp 模式）增加了對 TableScan 算子並行度擴展的支持：&lt;/span&gt;&lt;span&gt;一、通過設置 distributed_max_parallel_size，可以將 TableScan 的並行度進行擴展，實現資源平鋪的功能，在資源有限的情況下實現對大表的處理；&lt;/span&gt;&lt;span&gt;二、增加了對 task 重試的支持：&lt;/span&gt;&lt;span&gt;通過設置 bsp_max_retry_num（task 的最大重試次數，默認值為 5），可以在作業的中間 task 發生失敗時，從失敗的 task 開始重試，而不是從頭開始重試，進而大大減少 failover 對執行時長的影響。&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;後續的 1.x 版本中，我們還將推出基於資源感知的 BSP 模式，可以根據集羣資源使用情況有序調度併發 ELT 任務，從而減少資源的擠佔，避免頻繁失敗。&lt;/p&gt; 
  &lt;h1&gt;&lt;strong&gt;湖倉一體&amp;nbsp;&amp;nbsp;&lt;/strong&gt;&lt;/h1&gt; 
  &lt;p&gt;在 ByConity 1.0 版本中的一個重要能力升級就是提升了湖倉一體的能力。ByConity 可以直接分析數據湖中的數據，而無需做數據搬遷，從而讓用户可以更靈活的規劃其數據分析架構。&lt;/p&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;Hive 外表查詢性能在 1.0 版本中得到了非常大的提升。這主要得益於以下幾點：&lt;/p&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;1、實現了外表的 Native Reader（Parquet/Orc），&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;Native Reader 具有以下特點：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;img height=&quot;494&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-3ef004bff86bc049b649f2ed19cd45df0ff.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;strong&gt;2、增加中間結果緩存。&lt;/strong&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;strong&gt;3、結合 ByConity 查詢優化器的統計信息自動收集，將 Filter 的有效下推，降低 IO 開銷（1.x 版本）。&lt;/strong&gt;&lt;/p&gt; 
  &lt;p&gt;通過以上能力大大提升了 Hive 外表的查詢性能，在 TPC-DS 測試中性能達到 Trino 的 4 倍。&lt;/p&gt; 
  &lt;p&gt;除 Hive 外表外，在 1.0 版本中我們還支持了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;Hudi 和 GLUE 的外表查詢能力&lt;/strong&gt;。在後續的 1.x 版本中，我們還將支持 Iceberg 和 Paimon 的外表能力。&lt;/p&gt; 
  &lt;h1&gt;&lt;strong&gt;MySQL 語義兼容&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/strong&gt;&lt;/h1&gt; 
  &lt;p&gt;在 ByConity 0.x 版本中，主要支持 SQL 標準是 ClickHouse SQL 和 Ansi SQL。除 ClickHouse 生態外，MySQL 同樣是當前主流的 OLAP 產品生態。過去一年中很多用户反饋從 MySQL 生態產品遷移到 ByConity 過程中有比較複雜的業務改寫，以及部分工具不兼容。&lt;/p&gt; 
  &lt;p&gt;在 1.0 版本中，ByConity 已經完成了 90% 以上的語法、函數、數據類型、DQL、DML、DDL 的兼容。此外，如 MySQL Workbench、DBeaver、Navicat 等 IDE 工具，Tableau、QuickBI、FineBI 等主流 BI 工具的兼容性也在當前版本中完成。&lt;/p&gt; 
  &lt;p&gt;在 1.x 版本中，我們希望和社區的貢獻者們一起，在&lt;strong&gt;存儲介質、數據導入、IDE、BI、數據治理工具&lt;/strong&gt;等方面全面提升 ByConity 廣泛的生態工具兼容性。&lt;/p&gt; 
  &lt;h1&gt;&lt;strong&gt;其他特性&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt;&lt;/h1&gt; 
  &lt;p&gt;1、默認開啓優化器，支持開優化器簡單查詢走 local 模式，優化了開啓優化器後簡單查詢性能下降的問題。&lt;/p&gt; 
  &lt;p&gt;2、優化 Unique 表的 TableWrite 重試能力，提升 Unique 表可用性。&lt;/p&gt; 
  &lt;p&gt;3、新增 bucket join 相關的能力。&lt;/p&gt; 
  &lt;p&gt;4、提升 map 函數性能。&lt;/p&gt; 
  &lt;p&gt;5、優化 disk cache 加載策略，支持按比例配置。&lt;/p&gt; 
  &lt;p&gt;6、string 數據類型轉化為 map，支持 nullable string。&lt;/p&gt; 
  &lt;p&gt;7、支持導出數據導文件目錄，支持 Worker 導出數據。&lt;/p&gt; 
  &lt;p&gt;8、支持表級別的快照能力。&lt;/p&gt; 
  &lt;p&gt;9、（Preview）增強高併發點查性能。&lt;/p&gt; 
  &lt;h1&gt;&lt;strong&gt;展望&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt;&lt;/h1&gt; 
  &lt;p&gt;未來，我們還將持續為&lt;strong&gt;提升分析性能&lt;/strong&gt;和&lt;strong&gt;打造全面的數倉能力&lt;/strong&gt;而努力。除此之外，我們還將向一體化分析引擎的方向進行探索，繼續打磨倒排索引的能力，以及向向量檢索和時空分析等場景進行探索。&lt;/p&gt; 
  &lt;p&gt;&lt;strong&gt;ByConity 1.0 完整 Changelog：&lt;/strong&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FByConity%2FByConity%2Freleases%2Ftag%2F1.0.0&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;https://github.com/ByConity/ByConity/releases/tag/1.0.0&lt;/u&gt;&lt;/a&gt;&lt;/p&gt; 
  &lt;p style=&quot;color:#4a4a4a; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#0080ff&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#0080ff&quot;&gt;關於 ByConity&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p style=&quot;color:#4a4a4a; margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;ByConity 是字節跳動開源的雲原生數據倉庫，在滿足數倉用户對資源彈性擴縮容，讀寫分離，資源隔離，數據強一致性等多種需求的同時，提供優異的查詢，寫入性能。&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;span style=&quot;color:#888888&quot;&gt;GitHub ｜&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FByConity%2FByConity&quot; target=&quot;_blank&quot;&gt;https://github.com/ByConity/ByConity&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;img height=&quot;240&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-68a89d09358aa3dc3b75c82d41c2d8f7412.png&quot; width=&quot;234&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p style=&quot;color:#4a4a4a; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;&lt;span&gt;添加小助手加入 ByConity 社區交流羣&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311375/byconity-1-0</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311375/byconity-1-0</guid>
            <pubDate>Tue, 10 Sep 2024 09:33:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>Redox OS 0.9.0 版本發佈：開源操作系統迎來重大更新</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;Redox OS 團隊於 2024 年 9 月 9 日發佈了 0.9.0 版本，這是自上次更新以來的一次重大升級。該版本引入了大量新特性、改進、漏洞修復和系統清理，顯著提升了操作系統的性能和穩定性。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;1080&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-948cdfb959d4d2e59f149c8fb1f47313f1d.png&quot; width=&quot;1920&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;本次更新的亮點包括進程和線程生命週期及信號處理機制的改進，性能和穩定性的顯著提升，引入了來自 COSMIC 桌面的文件管理器、編輯器和終端程序，以及對 Linux/BSD 程序移植性的大幅改進。內核、驅動程序和 PCIe 支持也經過了廣泛的優化和調試。&lt;/p&gt; 
&lt;p&gt;在系統底層，Redox OS 實現了更快的系統調用和上下文切換，改進了虛擬內存和物理內存的管理，並引入了更快速的 p2buddy 內存分配器。文件系統性能也得到提升，同時在自託管方面取得了進展。用户空間 ABI 的改進，使系統更接近長期穩定 ABI 的目標。為提升虛擬機中的性能，新版本添加了 VirtIO 驅動程序和虛擬化 TSC 支持。&lt;/p&gt; 
&lt;p&gt;在兼容性方面，Redox OS 採用了 Unix 風格的路徑格式，取代了之前的 URI 格式，大大提高了與 POSIX/Linux 庫和程序的兼容性。C 語言庫 Relibc 幾乎全部由 Rust 編寫，功能也更加完善。系統還改進了引導加載程序，增強了硬件兼容性，並在 ARM64（Aarch64）支持上取得了顯著進展，包括對樹莓派 3B+的部分支持。&lt;/p&gt; 
&lt;p&gt;新版本還帶來了一些令人期待的新功能，如首次移植了 HTTP Web 服務器（Simple HTTP Server），支持 Slint、Iced 和 winit 等 GUI 庫，移植了 GNU Nano 和 Helix 編輯器，以及 RustPython 解釋器。構建系統也增加了新的選項並進行了改進。&lt;/p&gt; 
&lt;p&gt;文檔方面，Redox OS 團隊為開發者提供了大量新內容，包括 FAQ、開發者 FAQ、庫和 API 的介紹，這些都已加入 Redox Book 中。團隊還公佈了開發優先事項和移植策略。&lt;/p&gt; 
&lt;p&gt;Redox OS 團隊向所有維護者和貢獻者表達了感謝，正是他們的辛勤工作才促成了這個版本的發佈。團隊還呼籲社區捐贈，以支持全職開發人員的工作。有興趣的人可以通過 Patreon、Donorbox 等平台捐款，或購買 Redox 相關商品來支持項目。&lt;/p&gt; 
&lt;p&gt;總體而言，Redox OS 0.9.0 版本標誌着項目的重要里程碑，展示了在性能、兼容性和功能性上的巨大進展。這一開源操作系統正在逐步成熟，成為用户和開發者的一個有吸引力的替代選擇。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311366/redox-os-0-9-0-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311366/redox-os-0-9-0-released</guid>
            <pubDate>Tue, 10 Sep 2024 08:15:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>當《黑神話：悟空》遇上 openKylin，國產力量的極致碰撞！</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p style=&quot;color:#4d4d4d; margin-left:0; margin-right:0; text-align:start&quot;&gt;瞭解&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fso.csdn.net%2Fso%2Fsearch%3Fq%3D%25E9%2593%25B6%25E6%25B2%25B3%25E9%25BA%2592%25E9%25BA%259F%26spm%3D1001.2101.3001.7020&quot; target=&quot;_blank&quot;&gt;更多銀河麒麟&lt;/a&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fso.csdn.net%2Fso%2Fsearch%3Fq%3D%25E6%2593%258D%25E4%25BD%259C%25E7%25B3%25BB%25E7%25BB%259F%26spm%3D1001.2101.3001.7020&quot; target=&quot;_blank&quot;&gt;操作系統&lt;/a&gt;全新產品，請點擊訪問&lt;/p&gt; 
&lt;p style=&quot;color:#4d4d4d; margin-left:0; margin-right:0; text-align:start&quot;&gt;麒麟軟件產品專區：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fproduct.kylinos.cn%2FsingleDocument%2F142%2F39&quot; target=&quot;_blank&quot;&gt;https://product.kylinos.cn&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#4d4d4d; margin-left:0; margin-right:0; text-align:start&quot;&gt;開發者專區：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fproduct.kylinos.cn%2FsingleDocument%2F142%2F39&quot; target=&quot;_blank&quot;&gt;https://developer.kylinos.cn&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#4d4d4d; margin-left:0; margin-right:0; text-align:start&quot;&gt;文檔中心：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fproduct.kylinos.cn%2FsingleDocument%2F142%2F39&quot; target=&quot;_blank&quot;&gt;https://documentkylinos.cn&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;471&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-286dd1454d297e69d2e6c85cb9b5d4cd933.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#4d4d4d; margin-left:0; margin-right:0; text-align:start&quot;&gt;萬眾矚目的國產 3A 遊戲鉅作&lt;strong&gt;《黑神話：悟空》&lt;/strong&gt;終於上線啦！！！&lt;/p&gt; 
&lt;p style=&quot;color:#4d4d4d; margin-left:0; margin-right:0; text-align:start&quot;&gt;在正式發售後不到 24 小時，Steam 在線玩家峯值突破 222 萬，在 Steam 所有遊戲在線玩家歷史峯值中排名第二。第一撥玩家紛紛曬出好評，稱這款現象級產品正式開啓國產 3A 遊戲元年。&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;488&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-32961899f2cf9e8fb9fa71133689e471891.jpg&quot; width=&quot;520&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#4d4d4d; margin-left:0; margin-right:0; text-align:start&quot;&gt;那麼，&lt;strong&gt;當《黑神話：悟空》遇上 openKylin，會碰撞出怎樣的火花呢？&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#4d4d4d; margin-left:0; margin-right:0; text-align:start&quot;&gt;想必無數玩家已經與小 K 一樣躍躍欲試了，&lt;strong&gt;話不多説，安排！&lt;/strong&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#4d4d4d; margin-left:0; margin-right:0; text-align:start&quot;&gt;下面就跟着小 K 一起投身於這一探索之旅吧！&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;608&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6f2b6357e318302adc1cb176c9cd628d200.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;320&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-bbd69f331f4833319d5f37a4abf56691442.gif&quot; width=&quot;568&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#4d4d4d&quot;&gt;經測試運行，我們可以看到，《黑神話：悟空》可在 openKylin &amp;nbsp; 2.0 上實現完美兼容與流暢運行，讓每一位熱愛西遊文化的社區玩家，都能無礙地享受這場視覺與操作的雙重盛宴。&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;性能測試&lt;/strong&gt;&lt;/h3&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;608&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-6e8de1cac8f10dbc4ccf7fa228deae10d1f.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;遊戲配置&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;操作系統：openKylin 2.0&lt;/li&gt; 
 &lt;li&gt;內核：Linux 6.6.0-1-generic&lt;/li&gt; 
 &lt;li&gt;處理器：11th Gen Intel(R) Core(TM) i7-11700 @ 2.50GHz&lt;/li&gt; 
 &lt;li&gt;顯卡：GeForce RTX 4080&lt;/li&gt; 
 &lt;li&gt;內存：32GB&lt;/li&gt; 
 &lt;li&gt;磁盤：256GB&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;608&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-14cab16a9c9b23b2844885dc89345d76012.png&quot; width=&quot;1080&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;127&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-fe5c94d973b7353f7430d537c01e09a0597.gif&quot; width=&quot;464&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#4d4d4d; margin-left:0; margin-right:0; text-align:start&quot;&gt;openKylin 積極響應用户需求，致力於提升用户體驗，歡迎大家使用 openKylin 2.0 暢玩悟空，踏上這場充滿挑戰與奇遇的西遊之旅！&lt;/p&gt; 
&lt;p style=&quot;text-align:center&quot;&gt;&lt;img height=&quot;52&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-68a5537a75f847758734efc517df543815a.png&quot; width=&quot;108&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;openKylin（開放麒麟）社區旨在以「共創」為核心，在開源、自願、平等、協作的基礎上，通過開源、開放的方式與企業構建合作伙伴生態體系，共同打造開源操作系統頂級社區，推動 Linux 開源技術及其軟硬件生態繁榮發展。&lt;/p&gt; 
&lt;p&gt;社區理事成員單位包括麒麟軟件、普華基礎軟件、中科方德、麒麟信安、凝思軟件、一銘軟件、中興新支點、元心科技、中國電科 32 所、技德系統、北京麟卓、先進操作系統創新中心、飛騰、兆芯、龍芯中科、景美、京東科技、達摩院、申泰信息、海光信息等 21 家產業同仁和行業機構。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311365</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311365</guid>
            <pubDate>Tue, 10 Sep 2024 08:14:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>説説唯一 ID 與 CAS｜得物技術</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                                                                                                                                                                        &lt;h1&gt;一、從數據的唯一標識開講&lt;/h1&gt; 
&lt;h2&gt;數據區分與標識表現&lt;/h2&gt; 
&lt;p&gt;數據和算法組成了我們現有的應用軟件，當然互聯網應用也不例外。為了區分應用系統收集和運行所必要的這些數據，我們通過各種方法，來組織其存儲形式，方便其為我們所用。從數據結構、文件、到專業數據庫等工具，無一不是方便數據存儲和訪問的利器。&lt;/p&gt; 
&lt;p&gt;但無論如何，我們對數據存儲，都要通過唯一的標識來對其進行區分，以確保我們根據這個標識來定位到它。&lt;/p&gt; 
&lt;p&gt;在不同的系統中，這個標識的表現也各不相同：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;在編程語言中，它表現為變量名稱、常量名稱等；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在文件系統中，它表現為目錄以及目錄下的文件名等；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在數據庫表中，它表現為庫名、表名、主鍵或唯一索引；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在網絡通信中，它表現為 IP 地址、MAC 地址等；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在計算機內存中，它表現為物理內存地址等。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;標識的生成與組織&lt;/h2&gt; 
&lt;p&gt;客觀現實要求我們必須要做每一份數據的唯一性區分，在數據量少的時候，我們尚可以簡單的命名方式來實現，但是當存在海量數據的時候，我們若想要將其區分標記出來，除了命名，還要相應地進行組織結構的變更，來降低命名的複雜度，否則海量雜亂的數據名稱會加大我們管理和獲取的難度。&lt;/p&gt; 
&lt;p&gt;最常見的幾種區分方式通常有如下幾類：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;全隨機（可讀性差，文字組合其實也可以當成一種全隨機的特殊情況）&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;例如 UUID（結構示例如下：6B29FC40-CA47-1067-B31D-00DD010662DA）&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;該方式經常用於小範圍數據區分&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;該方式通常不會單獨使用，一般會結合樹形結構來實現一些目錄區分&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;順序遞增的數值結構&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;該方式形式簡單，索引方便&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;例如：數據庫的自增主鍵、計算機內存的物理地址、Excel 表的序號&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;樹形結構區分&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;組織方式方便直觀，便於索引&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;例如：文件目錄結構、關係型數據庫數據組織方式、編程語言的多層結構體&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;分佈式 ID 生成方式&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;例如雪花算法，該算法的分段標記其實有點樹形結構的結合，但其增長方式又有數值的使用便利&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;其他：以上方式的結合&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;很多其他的唯一性區分通常都表現成以上方式的結合&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;例如：URL&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;URL 的域名以及 Path，本身就存在樹形結構的引子（雖然其本身指向的資源存儲不一定是該方式）；&lt;/p&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Path 中的每一小段，都是區分性命名，世界範圍內看，都是隨機和不確定的。&lt;/p&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;幾種形式標識的結構表現圖例&lt;/strong&gt;：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//3d31a458ab673d6eb5d3a4a45414d402.jpg&quot; alt=&quot;01.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;全部隨機形式以及遞增數值&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//37e370806731b300b1e8abe2a0d57a4e.jpg&quot; alt=&quot;02.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;樹形結構區分的目錄&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//98b7d807b3d6d0ef61cbb67a5bd257f1.jpg&quot; alt=&quot;03.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;分佈式 ID 之雪花算法的二進制結構（實際轉換為 10 進制就是個長串的數值）&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;標識唯一性保證與核驗&lt;/h2&gt; 
&lt;p&gt;雖然我們已經有了唯一性生成的方式，人工確認數據的唯一性是一方面，但是在我們的軟件系統中，存儲唯一性數據的時候，如何保證其唯一性呢？&lt;/p&gt; 
&lt;p&gt;想必大家在使用計算機文件系統存儲文件的時候會發現，在文件改名時，如果當前文件的新名字和同一目錄下存在的文件名稱衝突，那麼系統可能會給出衝突提示，這是一種前置檢測。&lt;/p&gt; 
&lt;p&gt;而且在數據庫表設置了唯一索引的時候，如果唯一索引字段存在衝突，那麼系統也會給出相應的提示。&lt;/p&gt; 
&lt;p&gt;另外一些情況下，不同的軟件系統，通過自身的規則設計，保證了其生成的數據唯一性，例如數據庫自增主鍵。&lt;/p&gt; 
&lt;p&gt;全局分佈式 ID 生成算法中的雪花算法，一般也保證其生成數據的唯一性，但是在極端情況下，卻也可能存在衝突。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;一些軟件唯一值衝突提示信息展示&lt;/strong&gt;：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//5401c9427bf63f0b0e6d835ab5084c8f.jpg&quot; alt=&quot;04.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;文件系統命名衝突&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//2e7ae01c701d59dcb75c612fa5a179e3.jpg&quot; alt=&quot;05.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;數據庫唯一索引衝突&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//c729fdcd9129245259d3575db2f6adc0.jpg&quot; alt=&quot;06.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;編程語言變量重複命名&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;以上的例子其實提示了我們，在使用唯一標識生成的時候，一定要確認該標識是否在你的系統中能保證唯一，如果不能，那麼有可能存在無法預期的風險。這些風險，需要我們提前識別並預設方案來解決，例如：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;同一個文件夾下如果來了重名文件，是要選擇丟棄操作還是進行文件覆蓋？&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;唯一 ID 重複導致數據寫入失敗，是要丟棄數據還是通過其他方法來補償？&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;筆者曾經遇到過這樣的場景：歷史項目中使用到了一個封裝的隨機字符串生成庫，該庫在低併發下生成的字符串無異常，但是在高併發狀態下，其生成結果有重複項。而生成的目標字符在使用時未做唯一性校驗，這就導致了一些異常的發生。&lt;/p&gt; 
&lt;p&gt;根據如上分析，我們需要通過如下兩個方式來處理這個問題：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;切換離散性更高的的唯一字符串生成方式&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;這個可以通過 UUID 算法來實現&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;增加唯一性校驗&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;理論上在 UUID 算法下，幾乎不會出現重複，但在防禦性編程的考量下，我們依然引入校驗做雙重保障。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;二、唯一索引到分佈式鎖&lt;/h1&gt; 
&lt;h2&gt;唯一索引的業務契合度&lt;/h2&gt; 
&lt;p&gt;在未説明更詳細信息的情況下，一定有人會問：既然你的數據要入庫，為什麼不使用唯一索引來保證數據不會衝突呢？&lt;/p&gt; 
&lt;p&gt;通常情況下，如果數據滿足了全局唯一這個條件，我們確實可以使用唯一索引在保證數據入庫數據關鍵字段唯一，但還存在一些例外的業務場景。&lt;/p&gt; 
&lt;p&gt;例如：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;數據字符較長，同時又不作為索引字段。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;應用數據軟刪除的要求，系統中可能存在某個唯一字段的多條數據。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;這種情況下，就不得不放棄數據庫的校驗，將數據唯一性檢驗的過程納入到自己的系統中。&lt;/p&gt; 
&lt;h2&gt;前置校驗的方式選擇&lt;/h2&gt; 
&lt;p&gt;我們考慮到要在系統中加入唯一性校驗，那麼在數據 INSERT 場景下，首先就要查詢數據庫以判斷其是否存在，不存在再寫入。&lt;/p&gt; 
&lt;p&gt;到了這一步，有以下幾個問題需要考慮：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;這一步一定要查詢數據庫才能確認是否存在重複嗎？&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;你確定自己要查詢的這個字段是索引字段嗎？如果不是，查詢性能太差，要怎麼辦？&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;你查詢數據庫就一定能保證不重複嗎？高併發下檢測存在併發與時差怎麼處理？&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;這裏我們拆開來一個一個地講：&lt;/p&gt; 
&lt;h3&gt;是否必須查詢數據庫驗證&lt;/h3&gt; 
&lt;p&gt;數據庫作為我們最終數據的存儲載體，它所承載的數據總體來説體量是比較大的，即便我們有索引，但在索引查詢以及查詢數據庫時候的網絡交互開銷一直不低。所以我們是否必須要從數據庫來查詢這些內容，存在一定的可選擇性。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;我們可以適當地通過唯一標識生成的規則，來做一些基本的數據隔離&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;例如以時間段作為前綴，再追加上隨機字符來區分數據：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;這樣的標識自帶時間區分度，我們只要在這個前綴的時間粒度上保證唯一，那麼就可以確認整個數據在整個系統的唯一性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;隨機數據的生成，通常習慣於用系統時間作為種子值，所以高併發下的衝突不能依賴前綴來解決。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;時間的顆粒度按照數據的量來確認，通常需要自行平衡其同級以及下級的數據量。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;例如如下的一串字符串 &quot;foo_bar_20240616_randStr&quot;，我們以 foo、bar 作為一二級前綴，時間日期作為第三級前綴，在這種情況下，我們可以不用關注歷史數據的情況，直接校驗單日維度的數據是否有重複即可，如果怕併發時間差影響，可以適當擴充延長校驗的範圍。&lt;/p&gt; 
&lt;p&gt;多級前綴或者類樹形數據隔離後需要校驗的數據量漏斗：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//6f2b2a550d4beb142646f66436bc57d1.jpg&quot; alt=&quot;07.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;再比如 UUID 算法，根據理論分析，UUID 版本 4（隨機生成的 UUID）的衝突概率可以被認為是忽略不計的。這種情況下，我們可以根據業務的需求來確認是否需要前置校驗。&lt;/p&gt; 
&lt;p&gt;由此我們知道，只要我們確認數據重複性的可能是不存在的，或者有其他更簡潔的替代方法，那麼我們確實不需要去數據庫查詢核驗。&lt;/p&gt; 
&lt;h3&gt;非索引字段怎麼驗證處理&lt;/h3&gt; 
&lt;p&gt;在不確認數據唯一性的情況下，或者查詢數據庫不是最合適的解決方案的情況下，我們該用什麼方法來解決這個問題呢？&lt;strong&gt;通常選擇的一種方法是增加分佈式鎖來進行校驗&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;依然針對我們提到的字符串&quot;&lt;strong&gt;foo_bar_20240616_randStr&lt;/strong&gt;&quot;，經過前綴隔離之後，我們判斷下來，只要校驗按日維度的數據不存在重複即可。&lt;/p&gt; 
&lt;p&gt;這樣我們選擇分佈式鎖的時候，需要保證鎖的時間維度在一天或者稍多就能滿足需求。&lt;/p&gt; 
&lt;h3&gt;高併發下如何保證正確性&lt;/h3&gt; 
&lt;p&gt;如果我們確實要走數據庫查詢核驗，那麼在高併發場景下，查詢到存儲的間隙，有其他進程或線程觸發同樣的邏輯造成衝突了怎麼辦？其他機器上部署的業務也同樣觸發相同的邏輯又該如何？&lt;/p&gt; 
&lt;p&gt;這種情況下，我們自然而然地也想到了分佈式鎖。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;內存級分佈式鎖工具的高性能可以彌補直接查詢數據庫判斷比對的處理時間差&lt;/strong&gt;。&lt;/p&gt; 
&lt;h2&gt;分佈式鎖的必要性&lt;/h2&gt; 
&lt;p&gt;我們知道，編程語言中也到處有鎖的身影，例如 Go 語言的互斥鎖、讀寫鎖，但是其作用是在單應用進程內提供的協程併發訪問互斥機制，無法作用到多進程或者多節點部署的情況。&lt;/p&gt; 
&lt;p&gt;而分佈式鎖，正好可以&lt;strong&gt;幫助多節點部署的業務服務&lt;/strong&gt;來解決併發訪問共享資源時的一致性問題。&lt;/p&gt; 
&lt;h1&gt;三、鎖的共性問題&lt;/h1&gt; 
&lt;h2&gt;分佈式鎖的正確性保障&lt;/h2&gt; 
&lt;p&gt;相信對分佈式鎖感興趣的小夥伴，或多或少都知道常用的兩種分佈式鎖應用方式：Redis、Zookeeper。&lt;/p&gt; 
&lt;p&gt;通常使用分佈式鎖時候要考量如下的問題：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;加鎖成功之後，後續對該鎖的所有操作，能否確認該鎖是當前線程持有&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;當前線程釋放鎖是否有可能釋放了不是本線程持有的鎖？&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;我加了鎖，鎖的時間不夠我業務執行，後面我再操作鎖，這個鎖還是本線程的鎖嗎？&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;加鎖的時間問題&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;當前線程持有的鎖時間內，任務還沒完成鎖就過期了該怎麼辦？&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;當前線程持有的鎖還有很長時間才自動釋放，但是任務已經結束，併發上不來阻塞了怎麼辦？&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;鎖的釋放問題&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;你確定當前線程加的鎖在程序正確執行或者異常之後都釋放了嗎？&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;你如何知道 Redis 或者 Zookeeper 給你保證的鎖是唯一的呢？&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Redis 的單線程模型保證鎖操作的正確性，如果你的 Redis 是主從版或者集羣版又正好節點異常切換了呢？&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Zookeeper 的強 CP 原則，犧牲了 A（可用性），但是也可能存在宕機等問題，如何處理？&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;針對業務上的前面幾個問題，我們通常可以通過下面的幾個方法來解決，但依然存在侷限性。&lt;/p&gt; 
&lt;p&gt;對於最常見的基於 Redis 實現的分佈式鎖：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;獲取鎖的時候給鎖 value 設置隨機唯一標識，該標識可以用來判斷接下來的鎖持有方；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;給鎖一個合適的初始有效時長，並在鎖即將到期的時候續期；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在程序執行的正常區間和異常區間都要釋放鎖；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如果有自旋場景，那麼一定要給自旋場景一個最大過期時間防止死鎖；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;對於每一個操作，最好使用 lua 腳本實現操作的原子性；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;針對集羣版或者主從版本的 Redis，需要根據業務權衡是否需要採用 redlock 或者單節點的 Redis 來作為鎖載體。&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;redlock 算法較重而且極端情況下也可能存在問題；&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;單節點顯然存在單點問題，但是肯定可以保證強一致性。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;而基於 Zookeeper 實現的分佈式鎖：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Zookeeper 基於其臨時有序節點的&quot;申請-未獲取-監聽-申請-獲取-操作-釋放&quot;的循環來實現分佈式鎖；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;因為臨時節點的釋放是基於會話級別的，所以在會話關閉或者異常中斷的情況下，也都會自動釋放，所以避免了死鎖的問題，心跳的存在我們也不用手動續期。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Redis 使用自身單線程操作內存的機制、Zookeeper 使用 ZAB 協議，其實都存在一些共同點，它們的共同點就在於要保證我設置的 key 或者節點的次序是首次。&lt;/p&gt; 
&lt;p&gt;它們要保證的是，無論你的業務系統分佈式程度多高，基於它們所獲取到鎖數據，都是唯一的和最先的。&lt;/p&gt; 
&lt;p&gt;以上我們講了那麼多，其實都繞不開一個概念，那就是多個線程的訪問，經過層層傳遞收縮，最終都指向到同一份數據上或者同一個數據標識上（&lt;strong&gt;因為對於分佈式緩存而言，數據可能存有多份，並通過半數以上同意的協議形式來確定其一致性&lt;/strong&gt;）。&lt;/p&gt; 
&lt;p&gt;業務線程鎖邏輯訪問收縮示例：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet//df73a8ccb06c0c926550af96d90b78ca.jpg&quot; alt=&quot;08.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;能支持分佈式鎖的，不只有 Redis 和 Zookeeper。理論上，其他滿足 CAP 理論中 CP（一致性和分區容忍性）的分佈式系統，在一定程度上都能滿足支持分佈式鎖的條件。&lt;/p&gt; 
&lt;h2&gt;數據庫主鍵唯一性保障&lt;/h2&gt; 
&lt;p&gt;在 MySQL 數據庫中，我們知道，主鍵一定是唯一的，唯一索引卻不一定是主鍵。雖然上面提到的場景，我們引入了分佈式鎖來保障數據的唯一性，但是 MySQL 自身的自增主鍵機制，也是我們所離不開的。&lt;/p&gt; 
&lt;p&gt;在 MySQL 中，自增主鍵通過&quot;AUTO_INCREMENT 控制&quot;的機制來確保主鍵值的唯一性和自增，AUTO_INCREMENT 控制主要通過數據庫的內部機制來實現。&lt;/p&gt; 
&lt;p&gt;具體來説，當表中的某個列被指定為 AUTO_INCREMENT 主鍵時，MySQL 會自動維護一個用於該列的自增計數器，並確保每次對錶的插入操作都會使這個計數器遞增。&lt;/p&gt; 
&lt;p&gt;具體實現的方式包括以下幾個方面：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;內部計數器：MySQL 內部會維護一個計數器，用來記錄下一個可用的自增值。這個計數器通常保存在系統表中，跟蹤每個表，以及每個表的 AUTO_INCREMENT 列的當前值。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;鎖機制：在插入新記錄時，MySQL 會使用鎖機制來確保自增值的唯一性。在插入操作之前，會對計數器或相關數據進行鎖定，以避免多個客户端同時嘗試獲取相同的自增值。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;事務支持：對於使用事務的情況，MySQL 也會確保在事務失敗時（例如回滾），已分配的自增值不會被使用，以維護自增值的連續性和唯一性。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;總的來説，MySQL 的 AUTO_INCREMENT 控制主要依靠內部的自增計數器和相應的鎖機制來實現。這種機制有效地確保了主鍵的自增屬性，並保證了主鍵的唯一性。&lt;/p&gt; 
&lt;h2&gt;進程內協同之一：互斥&lt;/h2&gt; 
&lt;p&gt;以上説到的是分佈式鎖，但是在單機系統中，也存在不同線程或協程數據交互與執行互斥的問題。例如操作系統多應用互訪、單進程應用配置數據的多線程訪問和變更、下游訪問的併發抑制操作等。&lt;/p&gt; 
&lt;p&gt;編程語言給我們提供了一系列進程內協同的方式：同步、互斥與通信。這裏的進程內互斥體，其實也就是稱為鎖。&lt;/p&gt; 
&lt;p&gt;Go 語言提供的互斥鎖功能，其底層依賴有如下一些機制：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;原子操作&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;原子操作是 CPU 提供的功能，由 CPU 保證執行的原子性&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Go 語言互斥鎖所依賴的主要原子操作是 CAS（ Compare and Swap ）&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;自旋模式與阻塞模式&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;自旋+CAS 、阻塞/喚醒雙模式&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;協程與鎖的多對一狀態，鎖的自旋等待顯得尤為必要&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;但對於長 CPU 時間片的操作，自旋等待過程所消耗的資源其實也不低&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Go 語言通過自旋模式到阻塞模式的切換，來緩解鎖競爭激烈場景下的 CPU 消耗&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;均衡調度&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;普通模式：普通模式下，老協程相比新的協程，在正常鎖競爭下缺乏優勢，可能導致長時間無法獲得執行權限&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;飢餓模式：飢餓模式會使未得到執行的協程獲得更高的執行優先級，以擺脱長時間獲取不到鎖無法執行的困境&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;其他的編程語言一般也提供相應的鎖機制，來保證系統中多線程執行互斥的問題。&lt;/p&gt; 
&lt;h2&gt;分佈式鎖與進程內鎖的共性&lt;/h2&gt; 
&lt;p&gt;從上面的信息，我們看的出來，無論是分佈式鎖，還是進程內的互斥鎖，都存在下面的一些共性：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;使用唯一標識來識別鎖的當前歸屬；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;通常使用 CAS 方式來實現變更操作的原子性；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;要考慮獲得鎖的失敗自旋以及時間問題；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;根據需要來確定是自旋等待還是失敗結束。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;唯一標識與 CAS 的聯繫&lt;/h2&gt; 
&lt;p&gt;編程語言提供的互斥鎖功能，在底層上依賴 CPU 提供的原子操作功能 CAS 。&lt;/p&gt; 
&lt;p&gt;我們在使用 Redis 分佈式鎖的時候，如果使用 lua 腳本，其比對該鎖的 value 是否是本線程持有的時候，也有個比對後再更改的過程。&lt;/p&gt; 
&lt;p&gt;Zookeeper 實現分佈式鎖的時候，我們也是獲取到臨時順序節點的最小序號（有個比對過程），才能確定獲取到鎖。&lt;/p&gt; 
&lt;p&gt;另外在數據庫數據更新的時候，我們也經常用該方式保證數據變更條件的準確性。&lt;/p&gt; 
&lt;p&gt;當然，CAS 這個操作概念，其 C（compare），所依賴的依然是某個數值在當前場景下的唯一性。這也是我為什麼從數據唯一性引申到這裏的原因，而且 CAS 也是我在這裏要重點説的思想。&lt;/p&gt; 
&lt;p&gt;看到這裏，不知道大家有沒有發現，這裏存在一個很有意思的情況：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;數據唯一性檢驗可以使用鎖來解決&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;而鎖的獲取，又依賴一個小範圍的唯一數據&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;所以這也是一個將大範圍唯一性校驗，通過一定方式轉換為小範圍唯一性校驗的方法。而小範圍唯一性的標記，甚至可以深入簡化到底層二進制的 0 和 1 兩個狀態來完成。&lt;/p&gt; 
&lt;h1&gt;四、同類場景延伸&lt;/h1&gt; 
&lt;h2&gt;分佈式 ID 生成原理&lt;/h2&gt; 
&lt;p&gt;我們在前面提到了唯一標識的生成組織方式，其中分佈式 ID 生成算法之一的雪花算法，就使用了時間前綴區分、分片標識、節點數據自增的方式，將大範圍唯一標識生成縮小成小範圍的數據自增，還兼顧了按時間增長與高併發等性能優勢。&lt;/p&gt; 
&lt;p&gt;常用的分佈式 ID 生成算法，各有其特點：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;雪花算法：雪花算法是 Twitter 開源的分佈式 ID 生成算法，它可以在分佈式系統中生成全局唯一的、遞增有序的 ID。Snowflake 算法的 ID 由時間戳、機器 ID 和序列號組成。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;數據庫自增 ID：在分佈式系統中，可以使用單獨的數據庫服務器生成自增 ID。不同的服務器會有不同的起始值和步長，從而避免衝突。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用 Redis 的 INCR 命令：Redis 的 INCR 命令可以用來原子遞增一個 key 的值，因此可以利用這個特性來生成全局唯一 ID。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;但是無論使用哪種方案，都需要考慮 ID 的唯一性、性能、可用性以及分佈式環境下的併發安全性，選擇合適的方案應根據具體需求以及系統架構來進行權衡和決策。&lt;/p&gt; 
&lt;h2&gt;接口冪等與 MQ 消費冪等&lt;/h2&gt; 
&lt;p&gt;業務數據接口冪等操作與消費隊列消費的冪等操作，冪等性保證其實是一樣的原理。&lt;/p&gt; 
&lt;p&gt;冪等性是指針對同一個操作，多次執行的結果和一次執行的結果是一致的。在計算機科學和網絡編程中，冪等性是一個重要的概念，特別是在分佈式系統和網絡通信中。&lt;/p&gt; 
&lt;p&gt;針對冪等性處理，我們要記住的唯一思想其實也是 CAS。對於存在數據變動的場景，CAS 的原則可以保證數據只在指定條件下才發生變化。&lt;/p&gt; 
&lt;p&gt;以下幾種保證 MQ 消費冪等的方式中，CAS 的思想其實是一致的：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;基於數據庫中唯一 ID 以及某個狀態的值做前置判斷，符合條件才執行；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用消息 ID 作為 Redis 分佈式鎖的 key 來判斷當前消息是否消費成功；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用消息 ID 入庫以及成功後狀態變更來判斷消息消費是否已經執行過。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;操作系統進程間通信與互斥&lt;/h2&gt; 
&lt;p&gt;對於進程間協同來説，主流操作系統支持了鎖（Mutex）和信號量（Semaphore）。Windows 還額外支持了事件（Event）同步原語。&lt;/p&gt; 
&lt;p&gt;進程間的鎖（Mutex），語義上和進程內沒有什麼區別，只不過標識互斥資源的方法不同。Windows 最簡單，用名稱（Name）標識資源，iOS 用路徑（Path），Linux 則用共享內存。&lt;/p&gt; 
&lt;p&gt;從使用接口看，Windows 和 iOS 更為合理，雖然大家背後實現上可能都是基於共享內存（對用户進程來説，操作系統內核對象都是共享的），但是沒必要把實現機理暴露給用户。&lt;/p&gt; 
&lt;h2&gt;CAS 原理的其他應用場景&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;無鎖數據結構：CAS 原理通常與無鎖數據結構結合使用，以實現高效的併發數據訪問。由於 CAS 原子操作的特性，可以在不使用鎖的情況下對共享數據進行操作，從而提高併發性能。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;分佈式系統：CAS 原理的思想可以應用於分佈式系統中的數據同步和一致性問題。在分佈式環境中，類似 CAS 的原子操作除了可以用於實現分佈式鎖，還可以用來實現分佈式事務以及一致性算法，確保全局狀態的一致性和可靠性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;數據庫事務：在數據庫系統中，CAS 原理的思想可以用於樂觀鎖和併發控制。通過比較數據版本或標記位，並進行更新的原子操作，實現數據庫事務的併發控制和一致性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;業務流程控制：CAS 原理的思想也可以應用於業務系統中的流程控制，例如利用樂觀鎖的機制來處理併發訪問下的業務邏輯一致性問題。（上面提到的冪等實現其實也是該大類下的）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;五、總結&lt;/h1&gt; 
&lt;h2&gt;唯一標識與 CAS 與多對一模型&lt;/h2&gt; 
&lt;p&gt;到這裏，我們發現，上面提到的基於唯一標識與 CAS 原理來解決問題的方式，其本質都是多對一模型下，實現多線程同步互斥，以及併發收縮問題的基礎依賴。&lt;/p&gt; 
&lt;p&gt;所以我們遇到的多對少或者多對一模型下的，數據訪問或修改的收縮問題，其實都可以通過類似的思想來嘗試尋找解決方案。&lt;/p&gt; 
&lt;h2&gt;學會抽象歸納&lt;/h2&gt; 
&lt;p&gt;唯一 ID 與 CAS 這兩個點，乍一看好像並無聯繫，但是經過關聯梳理，我們依然能發現它們在多對一模型下的關聯。&lt;/p&gt; 
&lt;p&gt;當我們在工作學習中，遇到的比較相似的問題多了，只要願意深入思考，就能發現其中的共性，並且總結提煉出來，在下一次遇到類似的情況時，自然而然就能想到它。&lt;/p&gt; 
&lt;p&gt;熟能生巧之外，我們也可以主動使用一些通用的思路和方法，配合工具來提升自己的抽象歸納能力。具體來説，抽象歸納有以下思路和方法：觀察和辨識共性、提煉概念、泛化思維、歸納推理、應用驗證等，可以使用的工具則有：思維導圖、數據分析工具、邏輯推理工具或遊戲等。&lt;/p&gt; 
&lt;p&gt;希望這些方法思路和工具，可以帶大家直擊問題本質，提升大家面對問題的分析能力和解決能力。&lt;/p&gt; 
&lt;p&gt;*&lt;strong&gt;文 / 預子&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;本文屬得物技術原創，更多精彩文章請看：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com%2F&quot; target=&quot;_blank&quot;&gt;得物技術&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;未經得物技術許可嚴禁轉載，否則依法追究法律責任！&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://my.oschina.net/u/5783135/blog/15742076</link>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/15742076</guid>
            <pubDate>Tue, 10 Sep 2024 07:49:00 GMT</pubDate>
            <author>得物技術</author>
        </item>
        <item>
            <title>PublicCMS 202406.e 更新，新增字體加密敏感詞替換等</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#40485b&quot;&gt;266 萬多行代碼修改，持續迭代 9 年，現代化 java cms 完整開源，輕鬆支撐千萬數據、千萬 PV；支持靜態化，服務器端包含，多級緩存，全文搜索複雜搜索，後台支持手機操作; 目前已經擁有全球 0.0005%(w3techs 提供的數據) 的用户，語言支持中、繁、日、英；是一個已走向海外的成熟 CMS 產品&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color:#ffffff; color:#40485b&quot;&gt;PublicCMS 可以讓您創建維護起來方便快捷的網站，所有網站可見元素都可以在後台維護&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;p&gt;&lt;img height=&quot;815&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-721a4722710f42289b4c8e3a77f53bf6533.png&quot; width=&quot;1500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p&gt;本次更新無數據庫修改；202406 的其他小版本可以直接升級&lt;/p&gt; 
  &lt;p&gt;新增字體加密功能&lt;/p&gt; 
  &lt;p&gt;&lt;img height=&quot;610&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-71665063bbd45223bf89afc7e7600e5b314.png&quot; width=&quot;1332&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p&gt;新增，敏感詞替換功能&lt;/p&gt; 
  &lt;p&gt;&lt;img height=&quot;352&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-f5a2257f7e8a611837be68188e5a5ef4e28.png&quot; width=&quot;1106&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;img height=&quot;605&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-471e49e549f380d276a22f5ecf2a10aac9b.png&quot; width=&quot;1461&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311354</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311354</guid>
            <pubDate>Tue, 10 Sep 2024 07:42:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>Xinference v0.15.0 版本飛躍：自定義模型能力再升級，重塑 AI 交互體驗</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;Xorbits Inference（Xinference）是一個，性能強大且功能全面的，分佈式，推理框架。可用於大語言模型（LLM），語音識別模型，多模態模型等各種模型的推理。通過 Xorbits Inference，你可以輕鬆地，一鍵部署你自己的模型或內置的前沿開源模型 - https://github.com/xorbitsai/inference。無論你是研究者，開發者，或是數據科學家，都可以通過 Xorbits Inference 與最前沿的 AI 模型，發掘更多可能。&lt;br&gt; &amp;nbsp;&lt;br&gt; Xinference 的功能和亮點有：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;* 🌟 模型推理，輕而易舉：大語言模型，語音識別模型，多模態模型的部署流程被大大簡化。一個命令即可完成模型的部署工作。&lt;/li&gt; 
 &lt;li&gt;* ⚡️ 前沿模型，應有盡有：框架內置眾多中英文的前沿大語言模型，包括 baichuan，chatglm2 等，一鍵即可體驗！內置模型列表還在快速更新中！&lt;/li&gt; 
 &lt;li&gt;* 🖥 異構硬件，快如閃電：通過 ggml，同時使用你的 GPU 與 CPU 進行推理，降低延遲，提高吞吐！&lt;/li&gt; 
 &lt;li&gt;* ⚙️ 接口調用，靈活多樣：提供多種使用模型的接口，包括 OpenAI 兼容的 RESTful API（包括 Function Calling），RPC，命令行，web UI 等等。方便模型的管理與交互。&lt;/li&gt; 
 &lt;li&gt;* 🌐 集羣計算，分佈協同：支持分佈式部署，通過內置的資源調度器，讓不同大小的模型按需調度到不同機器，充分使用集羣資源。&lt;/li&gt; 
 &lt;li&gt;* 🔌 開放生態，無縫對接：與流行的三方庫無縫對接，包括 LangChain， LlamaIndex， Dify，以及 Chatbox。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;div&gt; 
 &lt;div&gt;
  &lt;span&gt;&lt;span&gt;Xinference v0.15.0 🚀 重磅來襲，內部新的重構能讓用户能真正自定義 Xinference 非內置模型。qwen2-vl-Instruct 🤖 第一時間支持，使用需要從&lt;/span&gt;&lt;span&gt;源碼&lt;/span&gt;&lt;span&gt;安裝 transformers：&lt;/span&gt;&lt;span&gt;pip&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;install&lt;/span&gt;&lt;span&gt; git+&lt;/span&gt;&lt;/span&gt; 
  &lt;div&gt;
   &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fhuggingface%2Ftransformers&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;GitHub - huggingface/transformers: 🤗 Transformers: State-of-the-art Machine Learning for Pytorch, Te&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;strong&gt;&lt;span&gt;更新指南 📚&lt;/span&gt;&lt;/strong&gt;
 &lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; 
   &lt;div&gt;
    &lt;span&gt;pip：pip install &#39;xinference==0.15.0&#39; 💻&lt;/span&gt;
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
    &lt;span&gt;Docker：拉取最新版本即可，也可以直接在鏡像內用 pip 更新 🚢&lt;/span&gt;
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt;
  &lt;strong&gt;&lt;span&gt;更新日誌 📝&lt;/span&gt;&lt;/strong&gt;
 &lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; 
   &lt;div&gt;
    &lt;span&gt;新增內置支持模型 🤝&lt;/span&gt;
   &lt;/div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span&gt;多模態 qwen2-vl-instruct 📸&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;span&gt;新功能 🎉&lt;/span&gt;&lt;/strong&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span&gt;&lt;span&gt;重構的 register 邏輯：現在可以完全自助地註冊一個不在內置列表中的 LLM&lt;/span&gt;&lt;span&gt;模型，register 接口僅為此場景工作。註冊內置的模型系列使用 launch 接口的 model_path 參數。 📝&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;v0.15.0 xinference 內置客户端 chat 接口已廢棄 prompt, system_prompt 和 chat_history 參數，這三個參數將被 messages 參數替代，與 openai 形式保持一致。 💬&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;&lt;span&gt;v0.15.0 Qwen 系列的&lt;/span&gt;&lt;span&gt;react&lt;/span&gt;&lt;span&gt;形式的 tool call 功能已經移除，由 OpenAI &lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&lt;span&gt;形式的 tool call 代替。移除 qwen-chat 1 代的 tool call 能力（不影響 qwen1.5-chat 和 qwen2）。 🚫&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;&lt;span&gt;v0.15.0 已移除 chatglm3。因其官方已基本不更新同時各規格接口不一致，&lt;/span&gt;&lt;span&gt;glm&lt;/span&gt;&lt;span&gt;系列模型推薦直接使用 glm4-chat 🚫&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;MiniCPM-V-2.6 支持 transformers 引擎的 continuous batching 📈&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;image2image/inpainting 支持 unpad 🎨&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;&lt;span&gt;兼容&lt;/span&gt;&lt;span&gt;openai&lt;/span&gt;&lt;span&gt; 庫版本 &amp;gt;=1.40 📚&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;span&gt;BUG 修復 🐜&lt;/span&gt;&lt;/strong&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span&gt;修復自定義模型文件導致的無法啓動問題 💻&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;修復鏡像由於 entrypoint 無法啓動的問題 🚢&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;修復 rerank 模型 max_length 設置的問題 📊&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;修復 rerank 模型的輸出中 rerank token 的統計問題 📊&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;&lt;span&gt;修復 embedding 模型中 embedding token 的統計問題，同時優化&lt;/span&gt;&lt;span&gt;顯存&lt;/span&gt;&lt;span&gt;佔用 💻&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;修復日誌異常的一些問題 📝&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;修復 vllm 性能回退的問題 📊&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;UI&lt;/span&gt;&lt;span&gt; 🎨&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span&gt;新的註冊模型界面和邏輯 📝&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;span&gt;即將廢棄： 🕰️&lt;/span&gt;&lt;/strong&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span&gt;v0.16.0 transformers 引擎的 continuous batching 將代替現有的推理邏輯成為默認推理行為。 🔜&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;p&gt;我們感謝每一位參與的社區夥伴對 Xinference 的幫助和支持，也歡迎更多使用者和開發者參與體驗和使用 Xinference。&lt;br&gt; &amp;nbsp;&lt;br&gt; 歡迎您在 &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxorbitsai%2Finference&quot; target=&quot;_blank&quot;&gt;https://github.com/xorbitsai/inference&lt;/a&gt; 給我們一個，星標，這樣你就可以在 GitHub 上及時收到每個新版本的通知。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311314/xinference-0-15-0</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311314/xinference-0-15-0</guid>
            <pubDate>Tue, 10 Sep 2024 03:54:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>Apple Intelligence 將於下月起登陸 iPhone、iPad 與 Mac</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;Apple 今日宣佈&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.apple.com%2Fapple-intelligence%2F&quot; target=&quot;_blank&quot;&gt;Apple 智能 (Apple Intelligence) &lt;/a&gt;將於下月起隨 iOS 18.1、iPadOS 18.1 和 macOS Sequoia 15.1 發佈，更多相關功能將於未來幾個月內陸續推出。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-342f2e7529e1945748166e345e86136dd48.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;「Apple 智能」發佈時支持美國英語，將於 12 月拓展至澳大利亞、加拿大、新西蘭、南非和英國的本土化英語。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;明年，「Apple 智能」將支持中文&lt;/strong&gt;、法語、日語、西班牙語等更多語言。&lt;/p&gt; 
&lt;p&gt;Apple 還表示，中國大陸的用户需在稍後經過監管部門批准後才能使用該功能。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311300/apple-intelligence-comes-to-iphone-ipad-and-mac-next-month</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311300/apple-intelligence-comes-to-iphone-ipad-and-mac-next-month</guid>
            <pubDate>Tue, 10 Sep 2024 03:11:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>Apache Cassandra 5.0 正式 GA，帶來向量搜索、JDK 17 支持、存儲附加索引等功能</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;Apache&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.datastax.com%2Fblog%2Fapache-cassandra-5-is-generally-available&quot; target=&quot;_blank&quot;&gt;Cassandra 5.0 正式 GA 了&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1596&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0910/111839_hWS6_3820517.png&quot; width=&quot;1408&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Cassandra 5.0 標誌着 Cassandra 3.x 的終結。幾個亮點：&lt;/p&gt; 
&lt;h3&gt;1. 存儲附加索引（SAI）&lt;/h3&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;SAI 是此版本中最受期待的功能，它徹底改變了查詢靈活性和性能，尤其是對於大型數據集。Cassandra 中，在數據建模中使用主鍵之外的列可能會受到限制。SAI 更類似於在關係數據庫中創建的內容，不過這可是在 Cassandra 的規模上。WHERE 子句將變得更加有用。&lt;/p&gt; 
&lt;h3&gt;2. Trie memtables 和 trie SSTables&lt;/h3&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;這些是存儲和檢索數據的低層優化，在內存使用和存儲效率方面產生了極高的性能提升，並且在用户側，無需更改數據模型或使用新運算符。官方表述是：在大規模上情況下，Java 代碼比任何 C++ 代碼都更高效。&amp;nbsp;&lt;em&gt;&amp;nbsp;&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;3. JDK 17 支持&lt;/h3&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;Cassandra 一直停留在 JDK8 的舊版 Java 支持中。隨着 5.0 的到來，Cassandra 升級到 JDK 17，帶來的性能提升在某些情況下最高可達 20%。這些提升的根本原因在於 JDK17 如何管理內存。Cassandra 是一個高容量應用程序，數據以極快的速度進出。這可能會導致功能較弱的系統備份並在 Java 中創建可怕的垃圾收集事件。Java 項目正在消除這個問題，而 JDK 17 是朝着正確方向邁出的一步。&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;4.統一壓縮策略（UCS）&lt;/h3&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;通常情況下，從 10 個節點集羣開始，不知不覺就變成了 100 個節點。compaction（壓縮）是一個 Cassandra 過程，它不斷組織存儲的數據以使其儘可能高效。壓縮有很多種類型，每種類型都有不同的要求，稱之為「策略」。UCS 就像一個可以正常工作的自動駕駛儀；結果是一個隨着需求變化而發展和響應的系統。當你發現自己從 10 個節點變成 100 個節點再變成 1,000 個節點時，它會進行調整，同時節省時間。&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;5. 向量搜索&lt;/h3&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;向量搜索是 GenAI 技術（如檢索增強生成）的關鍵部分，Cassandra 現在支持向量數據類型和近似最近鄰搜索的索引。雖然 Cassandra 5.0 中的向量搜索功能是一個很好的開始，但只是一個開始。&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;值得關注的是，隨着 Apache Cassandra 5.0 的發佈，3.x 系列（包括 3.0 和 3.11 版本）的生命週期結束 (EOL)。強烈建議所有用户儘快規劃升級策略，以確保繼續獲得支持並獲取最新的錯誤和安全修復。&lt;/p&gt; 
&lt;div&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;EOL 公告要點&lt;/strong&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;Cassandra 社區將逐案評估對未維護分支貢獻的安全補丁。&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;CVE 修復可能適用於未維護的版本，但這並不能保證。&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;鼓勵用户過渡到 4.0 或更高版本，以獲得持續的支持和維護。&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;p style=&quot;margin-left:0px; margin-right:0px&quot;&gt;&lt;strong&gt;升級到 Apache Cassandra 5.0&lt;/strong&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;從 4.x 到 5.0 的升級已經設計和測試為在線升級，從而最大限度地減少了應用程序的停機時間。Apache Cassandra 5.0 可作為下載包、deb 或 RPM 文件使用。有關詳細信息，請參閲&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcassandra.apache.org%2F_%2Fdownload.html&quot; target=&quot;_blank&quot;&gt;下載&lt;/a&gt;頁面。&lt;/p&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;更多信息查看：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcassandra.apache.org%2F_%2Fblog%2FApache-Cassandra-5.0-Announcement.html&quot; target=&quot;_blank&quot;&gt;https://cassandra.apache.org/_/blog/Apache-Cassandra-5.0-Announcement.html&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.datastax.com%2Fblog%2Fapache-cassandra-5-is-generally-available&quot; target=&quot;_blank&quot;&gt;www.datastax.com/blog/apache-cassandra-5-is-generally-available&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311298/cassandra-5-0-ga-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311298/cassandra-5-0-ga-released</guid>
            <pubDate>Tue, 10 Sep 2024 03:03:00 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
        <item>
            <title>Apple 推出 iPhone 16 系列新產品</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;北京時間 9 月 10 日凌晨，Apple 正式舉行發佈會，發佈 iPhone 16 系列、Apple Watch Series 10、AirPods 4 等多款新品。&lt;/p&gt; 
&lt;p&gt;iPhone 新品包括 iPhone 16、iPhone 16 Plus、iPhone 16 Pro 與 iPhone 16 Pro Max 四款機型，採用的 A18 與 A18 Pro 芯片均基於第二代 3nm 技術。&lt;/p&gt; 
&lt;p&gt;A18 使用 3 納米工藝製造，包含了 6 核 CPU、5 核 GPU 以及 16 核 NPU。蘋果稱其 NPU 對大型生成式模型進行優化，運行機器學習模型的速度，相比 A16 提升最高可達 2 倍。&lt;/p&gt; 
&lt;p&gt;iPhone 16 系列引入上代 Pro 機型新增的操作按鈕，有黑、白、粉、羣青、深青五色可選。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-27e66b6a6e896bf6321746c545fa91623fb.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;iPhone 16 Pro 系列提供沙漠色、原色、白色、黑色四色。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-b4c644606b192d082431d82e6dd8ecda579.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;所有機型均新增相機控制功能，相機模組、面板材質與散熱設計均有更新。&lt;/p&gt; 
&lt;p&gt;iPhone 16 5999 元起售，iPhone 16 Pro 7999 元起售；9 月 13 日（週五）起接受預購，9 月 20 日（週五）起正式發售。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2024/0910/105449_jqyZ_2720166.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311297/apple-introduces-iphone-16-iphone-16-plus</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311297/apple-introduces-iphone-16-iphone-16-plus</guid>
            <pubDate>Tue, 10 Sep 2024 03:01:00 GMT</pubDate>
            <author>來源: OSCHINA</author>
        </item>
        <item>
            <title>域名證書檢測平台 Domain Admin 加入 Dromara 開源社區</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                                            &lt;p&gt;&lt;span&gt;&lt;/span&gt;Domain Admin 一個 SSL 證書申請，自動續期，到期監控工具&lt;/p&gt; 
&lt;p&gt;Domain Admin 基於 Python + Vue3.js 技術棧實現的域名和 SSL 證書監測平台&lt;/p&gt; 
&lt;p&gt;用於解決，不同業務域名 SSL 證書，申請自不同的平台，到期後不能及時收到通知，導致線上訪問異常，被老闆責罵的問題&lt;/p&gt; 
&lt;p&gt;Domain Admin 是一個輕量級監控方案，佔用系統資源較少。同時，Domain Admin 也可以作為一個 Flask 和 Vue.js 前後端分離的項目模板&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;功能描述 
  &lt;ul&gt; 
   &lt;li&gt;核心功能：&lt;code&gt;域名&lt;/code&gt;、&lt;code&gt;SSL 證書&lt;/code&gt; 和 &lt;code&gt;託管證書文件&lt;/code&gt; 的過期監控，到期提醒&lt;/li&gt; 
   &lt;li&gt;支持證書：單域名證書、多域名證書、泛域名（通配符）證書、IP 證書、自簽名證書&lt;/li&gt; 
   &lt;li&gt;證書部署：單一主機部署、多主機部署、動態主機部署&lt;/li&gt; 
   &lt;li&gt;通知渠道：支持郵件、Webhook、企業微信、釘釘、飛書等通知方式&lt;/li&gt; 
   &lt;li&gt;支持平台：macOS、Linux、Windows&lt;/li&gt; 
   &lt;li&gt;輔助功能：&lt;code&gt;Let’s Encrypt&lt;/code&gt; SSL 證書免費申請和 SSL 證書自動續期&lt;/li&gt; 
   &lt;li&gt;多語言：支持中文、英文&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;安裝&lt;/h2&gt; 
&lt;p&gt;Domain Admin 支持多種安裝方式，例如使用 docker 可以很方便的安裝&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 本地文件夾和容器文件夾映射
$ docker run \
-v $(pwd)/database:/app/database \
-v $(pwd)/logs:/app/logs \
-p 8000:8000 \
--name domain-admin \
mouday/domain-admin:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;預覽&lt;/h2&gt; 
&lt;p&gt;在線預覽地址（賬號密碼隨意）：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmouday.github.io%2Fdomain-admin-web%2F&quot; target=&quot;_blank&quot;&gt;https://mouday.github.io/domain-admin-web/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;登錄&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://mouday.github.io/img/2024/09/08/1vn8bcv.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;首頁&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://mouday.github.io/img/2024/09/08/z0wolfu.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;證書監控&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//5214335558c454eaed9283f692d77e48.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;證書申請&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://oscimg.oschina.net/oscnet//792701de0fcfeb56e530d5aeecc89717.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;該項目已加入 &lt;code&gt;Dromara 開源社區&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;項目地址：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdromara%2Fdomain-admin&quot; target=&quot;_blank&quot;&gt;https://github.com/dromara/domain-admin&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/311292</link>
            <guid isPermaLink="false">https://www.oschina.net/news/311292</guid>
            <pubDate>Tue, 10 Sep 2024 02:26:06 GMT</pubDate>
            <author>來源: 投稿</author>
        </item>
    </channel>
</rss>