<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 繁體中文（台灣）</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已對該 RSS 進行格式化操作：中英字符之間插入空格、使用直角引號、標點符號修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-tw</language>
    <lastBuildDate>Wed, 03 Sep 2025 02:46:00 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>OpenAI 收購產品測試初創公司 Statsig</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;OpenAI &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2FOpenAI%2Fstatus%2F1962943308935864793" target="_blank"&gt;宣佈&lt;/a&gt;將以全股票交易方式收購產品測試初創公司&amp;nbsp;Statsig。此次交易基於 OpenAI 當前 3000 億美元（現匯率約合 2.14 萬億元人民幣）的估值，交易金額約為 11 億美元（現匯率約合 78.48 億元人民幣）。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1430" src="https://static.oschina.net/uploads/space/2025/0903/103919_Da3c_2720166.png" width="1278" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據 OpenAI 安排，Statsig 首席執行官 Vijaye Raji 加盟後將出任 OpenAI 應用技術負責人，負責推動公司在人工智能產品上的發展。Vijaye Raji 將領導 ChatGPT 和代碼生成工具 Codex 的產品工程工作，涵蓋核心系統及包括基礎設施在內的產品線。&lt;/p&gt; 
&lt;p&gt;OpenAI 表示，Statsig 將繼續獨立運營，並在西雅圖辦公室為其客戶羣提供服務。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369990</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369990</guid>
      <pubDate>Wed, 03 Sep 2025 02:41:59 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>系統梳理 RAG 系統的 21 種分塊策略</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;編者按：&lt;/strong&gt; 我們今天為大家帶來的文章，作者的觀點是：分塊（chunking）才是決定 RAG 系統成敗的真正關鍵因素，不同場景需要匹配相應的分塊策略。&lt;/p&gt; 
 &lt;p&gt;本文系統梳理了從基礎到進階的 21 種分塊策略，涵蓋了基礎分塊法、定長分塊法、滑動窗口分塊等傳統方法，以及語義分塊、上下文增強分塊、多模態分塊等前沿技術。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;作者 | Anjolaoluwa Ajayi&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;編譯 | 嶽揚&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;檢索增強生成（RAG）是許多 AI 工程師又愛又恨的技術（包括我）。&lt;/p&gt; 
&lt;p&gt;沒錯，因為從理論上看，它簡單極了："從你的定製數據中檢索正確的上下文，然後讓大語言模型基於此生成回答"。&lt;/p&gt; 
&lt;p&gt;但在實踐中，你不得不面對海量雜亂無章的數據 ------ 這些數據以你見過的最混亂隨機的格式存儲，接着就是數日絞盡腦汁的試錯：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;調整文本塊（tweaking chunks）&lt;/li&gt; 
 &lt;li&gt;切換嵌入模型（switching embedding models）&lt;/li&gt; 
 &lt;li&gt;替換檢索器（swapping out retrievers）&lt;/li&gt; 
 &lt;li&gt;微調排序器（fine-tuning rankers）&lt;/li&gt; 
 &lt;li&gt;重寫提示詞（rewriting prompts）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;而模型依然回覆："我找不到足夠的信息來回答你的問題"。&lt;/p&gt; 
&lt;p&gt;更糟糕的是，它還會一本正經地輸出完全錯誤的答案（產生幻覺）。&lt;/p&gt; 
&lt;p&gt;毋庸置疑，RAG 系統中存在許多複雜的組件，但真正默默決定整個系統是否能正常運行的關鍵因素其實是分塊（chunking）。&lt;/p&gt; 
&lt;p&gt;不同的數據類型、文件格式、內容結構、文檔長度和使用場景，都需要匹配不同的分塊策略。&lt;/p&gt; 
&lt;p&gt;一旦出錯，你的模型要麼抓不住重點，要麼... 好吧，還是抓不住重點。&lt;/p&gt; 
&lt;p&gt;本文將解析 21 種分塊策略（從基礎到進階），並説明何時該用何種策略，讓你的 RAG 系統不再...掉鏈子。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1）基礎分塊法（按換行符分割）Naive chunking (split by newline)&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;遇到換行符就分割文本。僅此而已。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-aac59a23bc7029033fcf8a11d14813466fe.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;基礎分塊法示例 | 此圖片由原文作者製作&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;處理由換行符統一分隔的文本：筆記、項目列表、FAQ、聊天記錄或每一行都包含完整語義的文字轉錄稿。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;注意：如果內容行過長，可能超出 LLM 的詞元限制。如果內容行過短，模型可能遺漏上下文或產生幻覺。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2）定長分塊法 Fixed-size/ fixed window chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;按固定字符數/單詞數切割文本（即便這樣會切斷完整句子或語義單元）。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-a45e305daade3d1a01c0e9203e2945c6887.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;定長分塊法示例 | 此圖片由原文作者製作&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;適用於原始的、雜亂的文本數據，如掃描文檔、質量較差的轉錄文本，或無標點、無標題、無其他結構的大型文本文件。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3）滑動窗口分塊法 Sliding window chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;類似定長分塊，但每個文本塊會與前塊內容重疊，以保持跨塊上下文之間的關聯。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-7444ed4446a7b18972e69873268f49ce6b5.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;滑動窗口分塊法示例 | 此圖片由原文作者製作&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;處理需要保持長句間邏輯連貫性的文本類型：議論文、敍述性報告、自由形式的寫作等。&lt;/li&gt; 
 &lt;li&gt;與定長分塊法類似，適用於無結構的文本（無標題、無標點、無框架等），但需注意詞元消耗與上下文連貫性間的平衡。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;4）按句分塊法 Sentence-based chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在句子結尾處分割文本（通常以句號、問號或感嘆號為標記）。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-b367665f0d9c3ed62a9947f840b2a432e02.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;按句分塊法示例 | 此圖片由原文作者製作&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;適用於語義清晰的規整文本，每句話都承載着完整的語義，如技術博客、內容摘要或文檔。&lt;/li&gt; 
 &lt;li&gt;可作為初級的分塊手段產出小而聚焦的文本塊，便於後續通過更復雜的分塊技術重新組合或重排序這些文本塊。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;5）按段分塊法 Paragraph-based chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;依據段落分割文本（通常以雙換行符為界），使每塊均包含完整的語義單元。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-2c7a17ffc9900413bee4e4876e63a3d2313.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;按段分塊法示例 | 此圖片由原文作者製作&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;當按句分塊所得內容過於零碎時&lt;/li&gt; 
 &lt;li&gt;處理已具備段落結構的文檔，如議論文、博客文章或研究報告&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;6）按頁分塊法 Page-based chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;將每個物理頁面視為一個獨立文本塊。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-d3d5ed6036f56381e294776b0278b592f91.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;按頁分塊法示例 | 此圖片由原文作者製作&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;處理含固定頁面的文檔，如掃描版 PDF、演示文稿或書籍。&lt;/li&gt; 
 &lt;li&gt;需保留頁面佈局的檢索場景（如在檢索時需要引用頁碼）。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;7）按預定結構分塊法 Structured chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;依據預定結構（如具有固定格式的系統日誌記錄、結構化數據中的預定義字段、HTML 標籤或 Markdown 元素）分割文本。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-026219009a535dc1fab3f2c997e8008d992.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;按預定結構分塊法示例 | 此圖片由原文作者製作&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;處理結構化/半結構化數據，如系統日誌、JSON 記錄、CSV 文件或 HTML 文檔。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;8）基於文檔層級的分塊法 Document-Based Chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;基於文檔固有結構分塊（按標題/小標題/章節劃分）。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-b84c5944054dae03b472a53b5755357c6ec.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;基於文檔層級的分塊法示例 | 此圖片由原文作者製作&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;當源文件具備清晰的章節結構時，如在技術文章、操作手冊、教材或學術論文中。&lt;/li&gt; 
 &lt;li&gt;可作為進階分塊技術（如按層級分塊（hierarchical chunking））的預處理步驟。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;9）基於關鍵詞的分塊法 Keyword-based chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在預設關鍵詞出現處分割文本，將其視為邏輯斷點。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-52342e4376cd9af58f38aebe5ce5b67fe76.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;基於關鍵詞的分塊法示例（關鍵詞為"Note"）| 此圖片由原文作者製作&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;文檔無標題結構但含標誌性的關鍵詞（且這些關鍵詞可穩定標記新主題的起始）時使用&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;10）基於實體的分塊法 Entity-based chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;使用命名實體識別（NER）模型檢測人物、地點、產品等實體，將相關文本圍繞每個實體分組形成區塊。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-97102370a8e5e20777eb3c82de6f1cdd4c3.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;基於實體的分塊法示例 | 此圖片由原文作者製作&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;處理特定類型的實體（人物/地點/組織等）對文檔理解起決定性作用的文件，如新聞報道、法律合同、案例研究或電影劇本。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;11）基於詞元數的分塊法 Token-based chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;通過 tokenizer（分詞器）按詞元數量分割文本。&lt;/p&gt; 
&lt;p&gt;建議結合按句分塊法（sentence chunking）等技術使用，避免破壞句子完整性導致上下文被破壞。&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;無標題/無段落結構的非結構化文檔。&lt;/li&gt; 
 &lt;li&gt;使用低詞元限制的 LLM 時（避免響應被強制截斷或長文本輸入被丟棄）。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;12）基於主題的分塊法 Topic-based chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;當文本主題發生變化時，可以通過以下方式對文本進行分塊：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;首先，將文本拆分為小單元（句子/段落）&lt;/li&gt; 
 &lt;li&gt;然後，使用主題建模或聚類算法將相關單元合併為區塊&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-4952968eff24cefc81394f3cc90f7f6ed29.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;基於主題的分塊法示例（使用聚類算法） | 此圖片由原文作者製作&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;當文檔涵蓋多個主題，且需保持語義焦點時。&lt;/li&gt; 
 &lt;li&gt;適用於主題轉變較為平緩但未通過明確的標題或關鍵詞標註的文本。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;13）表格感知分塊法 Table-aware chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;獨立識別表格內容，並按 JSON 或 Markdown 格式分塊（可逐行/逐列/整表處理）。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-eb4793bfb1b79b9c3a4b4315e76de7c52be.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;表格感知分塊法示例 | 此圖片由原文作者製作&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;含表格元素的文檔。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;14）內容感知分塊法 Content-aware chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;根據內容類型動態調整分塊策略（為段落/表格/列表等內容適配不同規則）。&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;混合格式的文檔（含多種文本結構）。&lt;/li&gt; 
 &lt;li&gt;需保持原生格式完整性的場景（表格不分割/段落不截斷等）。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;15）上下文增強分塊法 Contextual chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;通過 LLM 實現：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;分析知識庫的部分或全部內容。&lt;/li&gt; 
 &lt;li&gt;在嵌入前為每個文本塊注入簡短且相關的上下文&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-1d6d9025312ebbe29eaf51b4b6b34cd9500.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上下文增強分塊法示例 | 此圖片由原文作者製作&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;知識庫的全部內容或部分內容在 LLM 的詞元限額內。&lt;/li&gt; 
 &lt;li&gt;處理複雜文檔（如財報/合同等）。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;16）語義分塊法 Semantic chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;基於嵌入相似度聚合主題相關的句子/段落，保持語義聚焦性。&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;當按段分塊法或定長分塊法失效時&lt;/li&gt; 
 &lt;li&gt;處理含混雜主題的長文檔。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;17）遞歸分塊法 Recursive chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;首先使用大粒度的分隔符（如段落）分割文本。&lt;/p&gt; 
&lt;p&gt;如果任何生成的分塊超過預設的分塊大小限制，對這些區塊遞歸使用小粒度分隔符（如句子或單詞）進行分割，直至所有分塊都符合所需大小。&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;處理句子長度不規則或不可預測的文本，如訪談記錄、演講內容、自由形式的寫作內容。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;18）嵌入優先分塊法 Embedding chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;常規流程是先分塊後嵌入，但此方法先將所有句子全部嵌入，再按順序逐一處理，若相鄰句的相似度高於設定閾值則合併為一組，低於閾值則進行拆分。&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;無結構（無句子分隔/標題/章節符/標記等）的文檔&lt;/li&gt; 
 &lt;li&gt;當基礎技術（如滑動窗口分塊法）效果不佳時&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;19）基於大模型/智能體的分塊法 Agentic / LLM-based chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;將分塊的決策權完全交由 LLM，由其自主決定文本的分割方式。&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;當內容複雜或結構不明確，需要類似人類的判斷力來確定分塊邊界時&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;注意：該方法計算成本較高。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;20）分層分塊法 Hierarchical chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;將文本按照多個層次（如章節、子章節、段落）進行分塊，以便用戶能夠以不同詳細程度檢索信息。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-df9847bbe55d72931ed01a97cd9733e3296.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;具備清晰層次結構的文檔，如技術文章、手冊、教材、研究論文等&lt;/li&gt; 
 &lt;li&gt;希望用戶在不丟失上下文的情況下，同時探索整體概述和詳細信息。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;21）多模態分塊法 Modality-Aware Chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;針對不同內容類型（文本、圖像、表格）實施差異化的分塊策略。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-5307d62e093d2da55f11a7312ab574d1830.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;多模態分塊法示例 | 此圖片由原文作者製作&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;BONUS：混合分塊法 Hybrid chunking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;融合多種分塊技術、啓發式規則、嵌入模型以及 LLM 來提升分塊過程的可靠性。&lt;/p&gt; 
&lt;p&gt;適用場景：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;單一分塊方法效果不足時，需組合方案應對複雜的數據結構。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;本期互動內容 🍻&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;❓在處理特定類型文檔（如法律合同或學術論文）時，您有哪些獨特的分塊技巧可以分享？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;原文鏈接：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fai.gopubby.com%2F21-chunking-strategies-for-rag-f28e4382d399" target="_blank"&gt;https://ai.gopubby.com/21-chunking-strategies-for-rag-f28e4382d399&lt;/a&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/IDP/blog/18690430</link>
      <guid isPermaLink="false">https://my.oschina.net/IDP/blog/18690430</guid>
      <pubDate>Wed, 03 Sep 2025 02:33:03 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>開源 AI 客戶端 Cherry Studio 1.5.9 發佈：免費 GLM 4.5 flash、集成 Nano banana</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Cherry Studio 是一款跨平台的 AI 桌面應用，支持 Windows、macOS 和 Linux 系統。Cherry Studio 1.5.9 版本&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FqDfrjOkXZPAy-wJos-lsAg" target="_blank"&gt;現已正式發佈&lt;/a&gt;，本次更新帶來了三大重要更新，更在細節和效率工具上進行了全面進化。&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;✨ 亮點一：零門檻開箱，免費暢享國產頂尖模型！&lt;/h3&gt; 
&lt;p&gt;為了讓每一位用戶都能零成本、無障礙地體驗頂尖大模型的魅力，我們與兩家國內領先的 AI 公司達成官方合作，為您帶來真正「開箱即用」的免費模型體驗！&lt;/p&gt; 
&lt;p&gt;&lt;img height="1908" src="https://static.oschina.net/uploads/space/2025/0903/102732_TmfF_2720166.png" width="3140" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;攜手智譜 AI，首發免費 GLM-4.5-flash！&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Cherry Studio 與智譜 AI 達成官方合作，現在您&lt;strong&gt;無需登錄、無需配置 API Key&lt;/strong&gt;，即可免費使用最新的&amp;nbsp;&lt;strong&gt;GLM-4.5-flash&lt;/strong&gt;&amp;nbsp;模型。&lt;/li&gt; 
   &lt;li&gt;該模型以 106B 的總參數和 12B 的激活參數，實現了國產模型的重大突破。在權威的 Artificial Analysis 推理基準測試中，其性能&lt;strong&gt;超越了 Gemini 1.5 Flash、Claude 3 Opus&lt;/strong&gt; 等國際知名模型，穩居國產模型性能前三甲！&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0903/102809_YNAj_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;聯合硅基流動，免費使用 Qwen3 8B！&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;我們同樣與硅基流動深度合作，為您帶來了廣受歡迎的&amp;nbsp;&lt;strong&gt;Qwen3 8B&lt;/strong&gt;&amp;nbsp;模型的免費使用權。&lt;/li&gt; 
   &lt;li&gt;這兩款內置免費模型的加入，將&lt;strong&gt;徹底消除您首次使用 Cherry Studio 的所有障礙&lt;/strong&gt;，為您提供無與倫比的開箱體驗。下載、安裝、即刻對話！&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0903/102826_gOvP_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;✨ 亮點二：絕佳圖像編輯，指令遵循與一致性的新標杆！&lt;/h3&gt; 
&lt;p&gt;圖像創作與編輯從未如此簡單！新版本正式支持備受期待的&amp;nbsp;&lt;strong&gt;nano banana 圖像生成模型（即 Gemini 1.5 Flash Image）&lt;/strong&gt;&amp;nbsp;，它將徹底改變您與圖像交互的方式。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;超強指令遵循&lt;/strong&gt;：您可以像與設計師對話一樣，通過自然語言下達複雜的修改指令，例如「把這隻貓的顏色換成藍色，並讓它戴上一頂牛仔帽」，模型都能精準理解並執行。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;驚人的一致性保持&lt;/strong&gt;：在多次修改和迭代過程中，模型能出色地保持圖像主體、風格和構圖的一致性，讓連續創作和精細調整變得輕而易舉。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;輕鬆改圖體驗&lt;/strong&gt;：無論是調整細節、變換風格，還是增刪元素，nano banana 都將為您帶來行雲流水般的創作自由度。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height="1344" src="https://static.oschina.net/uploads/space/2025/0903/102849_5C1d_2720166.jpg" width="768" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;✨ 亮點三：靈感隨時記錄，全新筆記功能上線！&lt;/h3&gt; 
&lt;p&gt;好的想法和關鍵信息，值得被永久珍藏。Cherry Studio 1.5.9 帶來了全新的&lt;strong&gt;筆記功能&lt;/strong&gt;&amp;nbsp;，讓您的知識管理更上一層樓。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1908" src="https://static.oschina.net/uploads/space/2025/0903/102918_OdZ9_2720166.png" width="3140" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;一鍵保存對話&lt;/strong&gt;：在任何對話中，您可以輕鬆選中重要內容，或將整段對話一鍵保存到筆記中。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;告別信息丟失&lt;/strong&gt;：無論是模型的精彩回答、一段關鍵代碼，還是一個突如其來的靈感，都能被安全地收納和整理。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;便捷回溯查閲&lt;/strong&gt;：通過獨立的筆記側邊欄，您可以隨時回顧、搜索和管理您的知識庫，讓回溯關鍵內容變得前所未有地便捷。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img height="1908" src="https://static.oschina.net/uploads/space/2025/0903/102930_MM0T_2720166.png" width="3140" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;更多內容查看&amp;nbsp;&lt;em&gt;https://github.com/CherryHQ/cherry-studio/releases/tag/v1.5.9&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369987</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369987</guid>
      <pubDate>Wed, 03 Sep 2025 02:31:17 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>蘋果 AI 團隊持續「失血」：首席機器人研究員被 Meta 挖走</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;蘋果的首席 AI 機器人研究員 Jian Zhang 已跳槽至 Meta 的機器人工作室 Meta Robotics Studio。Meta 週二已確認 Zhang 加入。這是近期蘋果 AI 團隊又一重要人員流失的消息。&lt;/p&gt; 
&lt;p&gt;同時媒體獲悉，蘋果還有三名大語言模型（LLM）的研究員——John Peebles、Nan Du 和 Zhao Meng 離職。&lt;/p&gt; 
&lt;p&gt;媒體指出，最新一輪離職潮發生在過去一週內，上述三人均來自蘋果基礎模型團隊，該團隊是 Apple Intelligence 平台的核心開發團隊，但近幾周已流失約 10 名成員，包括團隊負責人。將近兩個月前傳出過，Meta 以 2 億美元高薪挖走蘋果 AI 模型團隊的負責人 Ruoming Pang。&lt;/p&gt; 
&lt;p&gt;上述媒體還再次提到了此前的媒體消息，即蘋果內部正在討論是否更多依賴外部技術，而非僅使用自研模型。&lt;/p&gt; 
&lt;p&gt;傳出 AI 人員變動的消息後，蘋果股價本週二盤中跌幅擴大，一度跌逾 2.2%，最終收跌約 1%。&lt;/p&gt; 
&lt;p&gt;蘋果在 AI 領域的追趕努力面臨挫折，Apple Intelligence 產品反響不佳，加上公司可能轉向第三方模型的策略調整，進一步影響了團隊士氣。知情人士透露，預計還會有更多員工離職，多名員工正在其他公司面試。&lt;/p&gt; 
&lt;h2&gt;核心人才接連出走&lt;/h2&gt; 
&lt;p&gt;Jian Zhang 離職是蘋果機器人研發的重大損失。他此前領導一個專注於自動化技術和 AI 應用的小規模學術團隊，該團隊隸屬於蘋果人工智能和機器學習部門。Meta 週二確認，Zhang 已加入 Meta 的機器人工作室，隸屬於 Reality Labs 部門。&lt;/p&gt; 
&lt;p&gt;這並非蘋果機器人團隊的首次人員流失。Zhang 的下屬 Mario Srouji 今年 4 月已離職，前往 Archer Aviation 擔任 AI 產品負責人。蘋果的機器人研究團隊與產品開發團隊相互獨立，後者今年早些時候已轉入硬件工程部門。&lt;/p&gt; 
&lt;p&gt;在與 Zhang 同一批離職的三名基礎模型團隊研究員中，Peebles 和 Du 將前往 OpenAI，Zhao Meng 則加入 OpenAI 的勁敵 Anthropic。這些離職進一步削弱了蘋果自研 AI 能力的核心團隊。蘋果和 OpenAI 的發言人拒絕就人事變動置評，Anthropic 暫未回應置評請求。&lt;/p&gt; 
&lt;h2&gt;Meta 高薪挖角策略奏效&lt;/h2&gt; 
&lt;p&gt;Meta 通過提供鉅額薪酬成功吸引蘋果 AI 人才。此前離職的蘋果模型團隊負責人 Ruoming Pang 獲得了一份價值 2 億美元的多年期薪酬方案。Meta 的這一策略已吸引多名蘋果員工跳槽，許多基礎模型團隊成員此前已投靠 Meta。&lt;/p&gt; 
&lt;p&gt;華爾街見聞曾提到，8 月 22 日的媒體報道稱，Meta 挖走了負責蘋果 AI 團隊雲基礎設施、訓練和搜索業務的 Frank Chu，他是至少第六位跳槽 Meta 的蘋果 AI 員工，也是自大模型團隊負責人 Ruoming Pang 離職後，蘋果最重要的一次人才流失。&lt;/p&gt; 
&lt;p&gt;不過上月一些的報道披露，Meta 的招聘策略並非一帆風順，一些新近聘用的 AI 研究員已經離職。儘管如此，Meta 仍在大力投資機器人技術，除了智能眼鏡和 AI 功能外，據此前報道，Meta 正大力投資人形機器人的操作系統和硬件組件。&lt;/p&gt; 
&lt;p&gt;蘋果在機器人領域的佈局同樣雄心勃勃。將近三週前媒體稱，蘋果計劃推出一系列機器人設備，包括配備移動屏幕的桌面設備，以及用於零售店和製造業的機械臂。機器人技術已成為蘋果未來產品線的關鍵組成部分。&lt;/p&gt; 
&lt;h2&gt;AI 策略調整掀起的離職潮將持續&lt;/h2&gt; 
&lt;p&gt;蘋果 AI 團隊的人才流失與公司戰略調整密切相關。面對在生成式 AI 領域的落後局面，蘋果正考慮是否更多依賴外部技術供應商，而非完全依靠自研能力。這一潛在轉向引發了內部團隊的不安。&lt;/p&gt; 
&lt;p&gt;上月媒體稱，蘋果近期已與谷歌接洽，探討為預計明年上線的新版 Siri 打造一款定製 AI 模型的可能性。谷歌已開始訓練一款可在蘋果服務器上運行的模型。這標誌着蘋果在外包 AI 技術方面邁出關鍵一步。&lt;/p&gt; 
&lt;p&gt;媒體本週二援引知情人士預計，蘋果 AI 領域員工的離職潮預計將持續，還有多名員工在積極面試其他公司的工作。Apple Intelligence 產品的市場反響不佳，以及蘋果可能採用第三方模型的策略轉變，都對團隊士氣造成負面影響。&lt;/p&gt; 
&lt;p&gt;蘋果在 AI 領域仍落後競爭對手數年，這迫使管理層考慮多種應對方案。公司必須在保持創新能力和快速追趕市場之間找到平衡，而核心人才的持續流失無疑增加了這一挑戰的難度。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369983</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369983</guid>
      <pubDate>Wed, 03 Sep 2025 02:21:03 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>美國法院裁定谷歌無需出售 Chrome 瀏覽器</title>
      <description/>
      <link>https://www.oschina.net/news/369982</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369982</guid>
      <pubDate>Wed, 03 Sep 2025 02:09:03 GMT</pubDate>
    </item>
    <item>
      <title>AI 公司 Anthropic 完成 130 億美元融資</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Anthropic&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.anthropic.com%2Fnews%2Fanthropic-raises-series-f-at-usd183b-post-money-valuation"&gt;宣佈&lt;/a&gt;完成 130 億美元 F 輪融資，投後估值達 1830 億美元，創下科技行業私募融資規模第二高紀錄，僅次於 OpenAI 同年 3 月的 400 億美元融資。&lt;/p&gt; 
&lt;p&gt;本輪融資由 Iconiq Capital、富達管理研究公司和光速創投領投，貝萊德、黑石、高盛等數十家知名機構參與。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0903/095936_gVgg_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Anthropic 介紹稱，其 2025 年初年化收入為 10 億美元，8 個月後飆升至 50 億美元，成為歷史上增長最快的科技公司之一。&lt;/p&gt; 
&lt;p&gt;此外，Anthropic 目前為超過 30 萬家企業客戶提供服務，對應營收超 10 萬美元的大型客戶數量在過去一年間增長了近 7 倍；Claude Code 編程助手在正式推出僅三個月後就創造了 5 億美元收入，使用量增長了 10 倍以上。&lt;/p&gt; 
&lt;p&gt;Anthropic 表示該公司的此輪融資將擴大其滿足日益增長的企業需求的能力，深化安全研究，並在繼續構建可靠、可解釋、可控的 AI 系統的同時支持國際擴張。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369981/anthropic-raises-series-f-at-usd183b-post-money-valuation</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369981/anthropic-raises-series-f-at-usd183b-post-money-valuation</guid>
      <pubDate>Wed, 03 Sep 2025 02:02:03 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>RuleGo v0.33.0 發佈：國產輕量級、全場景、新一代組件編排規則引擎</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;code&gt;RuleGo&lt;/code&gt; 是一個基於 &lt;code&gt;Go&lt;/code&gt; 語言的輕量級、高性能、嵌入式、組件編排新一代規則引擎。它可以幫助你快速構建低耦合、靈活的系統，實現複雜的業務邏輯。RuleGo 還提供大量可複用的組件，支持對數據進行聚合、過濾、分發、轉換、豐富和執行各種動作，也能和各種協議、系統進行聯動和集成。讓你快人一步實現自動化營銷、物聯網、應用集成等解決方案。&lt;/p&gt; 
&lt;p&gt;該項目在低代碼、業務代碼編排、數據集成、工作流、大模型智能體、邊緣計算、自動化、IoT 等多種場景具有廣泛的應用潛力。&lt;/p&gt; 
&lt;h4&gt;典型使用場景&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;邊緣計算：&lt;/strong&gt; 可以在邊緣服務器部署 &lt;code&gt;RuleGo&lt;/code&gt;，對數據進行預處理，篩選、聚合或者計算後再上報到雲端。數據的處理規則和分發規則可以通過規則鏈動態配置和修改，而不需要重啓系統。&lt;span style="background-color:#ffffff; color:#080808"&gt;國產替代&lt;/span&gt;&lt;code&gt;node-red&lt;/code&gt;&lt;span style="background-color:#ffffff; color:#080808"&gt;系統。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;物聯網：&lt;/strong&gt; 收集設備數據上報，經過規則鏈的規則判斷，觸發一個或者多個動作，例如：發郵件、發告警、和其他設備或者系統聯動。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;數據分發：&lt;/strong&gt; 可以根據不同的消息類型，調用 HTTP、MQTT 或者 gRPC 把數據分發到不同系統。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;應用集成：&lt;/strong&gt; 把 &lt;code&gt;RuleGo&lt;/code&gt; 當做膠水連接各種系統或者協議，例如：gRPC、ssh、webhook、kafka、消息隊列、數據庫、chatGPT、第三方應用系統。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;異構系統數據集中處理：&lt;/strong&gt; 從不同的數據源（如 MQTT、HTTP、WS、MQ、gRPC、TCP/UDP 等）接收數據，然後對數據進行過濾、格式轉換、然後分發到數據庫、業務系統或者儀錶板。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;高度定製化業務：&lt;/strong&gt; 把高度定製化或者經常變化的業務解耦出來，交給 &lt;code&gt;RuleGo&lt;/code&gt; 規則鏈進行管理。業務需求變化而不需要重啓主程序。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;複雜業務編排：&lt;/strong&gt; 把業務封裝成自定義組件，通過 &lt;code&gt;RuleGo&lt;/code&gt; 編排和驅動這些自定義的組件，業務邏輯並支持動態調整和替換。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;微服務編排：&lt;/strong&gt; 通過 &lt;code&gt;RuleGo&lt;/code&gt; 編排和驅動微服務，或者動態調用第三方服務處理業務，並返回結果。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;業務代碼和業務邏輯解耦：&lt;/strong&gt; 例如：用戶積分計算系統、風控系統。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;自動化：&lt;/strong&gt; 例如：CI/CD 系統、流程自動化系統、營銷自動化系統、量化系統。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;低代碼：&lt;/strong&gt; 例如：低代碼平台、iPaaS 系統、ETL、類 &lt;code&gt;Langflow&lt;/code&gt; 、dify 系統（對接&lt;code&gt;大模型&lt;/code&gt;提取用戶意圖，然後觸發規則鏈與其他系統進行聯動或者進行業務處理）。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MCP 服務：&lt;/strong&gt;自動把規則鏈（工作流）、組件、API 自動註冊成 MCP 工具，提供給 AI 智能體調用。企業應用可以很容易通過 RuleGo 的橋接，實現和 AI 智能體的聯動，打通 AI 與企業應用的 「最後一公里」。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;架構圖&lt;/h3&gt; 
&lt;p&gt;&lt;img alt="" height="1536" src="https://oscimg.oschina.net/oscnet/up-64da4b87a62dbe96e2cda29fe1e7ba01878.png" width="2149" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;可視化&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;風格 1：&lt;/p&gt; 
&lt;p&gt;&lt;img height="999" src="https://oscimg.oschina.net/oscnet/up-9997e9e4807b438912b9685ab3409eee505.png" width="1557" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;風格 2：&lt;/p&gt; 
&lt;p&gt;&lt;img height="836" src="https://oscimg.oschina.net/oscnet/up-4f6b078c8d34ae752d5cae28e8b8c366850.png" width="1898" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;本次更新&lt;/strong&gt;&lt;/h3&gt; 
&lt;h3&gt;rulego-core&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;feat: 完善組件配置表達式取值系統，支持跨節點取值，例如:${node1.msg.xx}&lt;/li&gt; 
 &lt;li&gt;feat: 增加 end 節點組件&lt;/li&gt; 
 &lt;li&gt;feat: 增加跨節點取值節點組件&lt;/li&gt; 
 &lt;li&gt;feat: 節點組件配置表單生成，跳過不可導出和&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;json:-&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;字段&lt;/li&gt; 
 &lt;li&gt;perf: 完善 mqtt 客戶端重連機制&lt;/li&gt; 
 &lt;li&gt;perf: 優化 js 引擎超時處理&lt;/li&gt; 
 &lt;li&gt;perf: 優化表達式引擎混合字符串場景性能&lt;/li&gt; 
 &lt;li&gt;perf: 使用 el.NewTemplate 代替 str.NewTemplate&lt;/li&gt; 
 &lt;li&gt;perf: 完善 net endpoint 組件數據競爭問題&lt;/li&gt; 
 &lt;li&gt;fix: js 節點組件，dataType 字段類型轉換錯誤&lt;/li&gt; 
 &lt;li&gt;fix: Reload engine chainCtx lost&lt;/li&gt; 
 &lt;li&gt;fix: 修復 js 腳本部分場景會讀寫錯誤&lt;/li&gt; 
 &lt;li&gt;refactor: 重構 ctx.TellFlow 入參&lt;/li&gt; 
 &lt;li&gt;refactor: 增加公共組件分類，重新調整部分組件分類&lt;/li&gt; 
 &lt;li&gt;chore: expr 升級到 1.17.6&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;rulego-components&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;feat: 增加 pulsar 發佈和訂閲節點組件&lt;/li&gt; 
 &lt;li&gt;feat: 增加 nsq 發佈和訂閲節點組件&lt;/li&gt; 
 &lt;li&gt;feat: 增加流式計算轉換節點組件&lt;/li&gt; 
 &lt;li&gt;feat: 增加流式聚合運算節點組件&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;rulego-server&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;fix: 完善 mqtt 客戶端重連機制&lt;/li&gt; 
 &lt;li&gt;fix: add defer resp.Body.Close() for GetComponentsFromMarketplace&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;rulego-editor&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;feat: 默認【輸入】節點可以刪除&lt;/li&gt; 
 &lt;li&gt;feat: 增加最新節點組件支持&lt;/li&gt; 
 &lt;li&gt;feat: 如果節點沒配置，首次添加到畫布，不彈出屬性配置表單&lt;/li&gt; 
 &lt;li&gt;feat: 增加新型畫布節點，應用於 for、節點組等分組組件展示效果&lt;/li&gt; 
 &lt;li&gt;feat: 增加 sql 編輯器表單組件&lt;/li&gt; 
 &lt;li&gt;fix:左邊欄高度適配&lt;/li&gt; 
 &lt;li&gt;chore: 升級最新的依賴&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;本次重點&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;完善表達式取值系統，支持跨節點取值，如：${node1.msg.xx}&lt;/li&gt; 
 &lt;li&gt;增加【結束節點組件】可以更加精準地控制流程的結束&lt;/li&gt; 
 &lt;li&gt;優化表達式引擎和 js 引擎性能&lt;/li&gt; 
 &lt;li&gt;增加 pulsar 和 nsq 這兩個發佈/訂閲組件&lt;/li&gt; 
 &lt;li&gt;增加流式聚合計算組件，&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frulego.cc%2Fpages%2Fstreamsql-overview%2F" target="_blank"&gt;StreamSQL&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;其他信息&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;歡迎在&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://gitee.com/rulego/rulego" target="_blank"&gt;Gitee&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;或者&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frulego%2Frulego" target="_blank"&gt;Github&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;上提交反饋或建議&lt;/li&gt; 
 &lt;li&gt;如果喜歡這個項目，請給我們點個 Star&lt;/li&gt; 
 &lt;li&gt;文檔官網：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frulego.cc%2F" target="_blank"&gt;rulego.cc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;RuleGo-Editor：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Feditor.rulego.cc" target="_blank"&gt;editor.rulego.cc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2F8.134.32.225%3A9090%2Feditor%2F" target="_blank"&gt;體驗地址 1&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2F8.134.32.225%3A9090%2Fui%2F" target="_blank"&gt;體驗地址 2&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369968/rulego-0-33-0-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369968/rulego-0-33-0-released</guid>
      <pubDate>Mon, 01 Sep 2025 15:08:00 GMT</pubDate>
      <author>來源: 資訊</author>
    </item>
    <item>
      <title>AI 提升的是下限，而非上限</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近期，AI 提醒助手項目「Elroy」在其官網發佈了一篇名為&lt;em&gt;《AI 提升的是下限，而非上限》（&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Felroy.bot%2Fblog%2F2025%2F07%2F29%2Fai-is-a-floor-raiser-not-a-ceiling-raiser.html" target="_blank"&gt;AI is a Floor Raiser, not a Ceiling Raiser&lt;/a&gt;）&lt;/em&gt;的博客，探討了 AI 對於提升自我的一些利與弊。&lt;/p&gt; 
&lt;p&gt;文中提到，AI 能夠根據每個人的理解水平進行響應，解決了傳統教學內容「不能精準匹配學習者」這一痛點。它能隨時回答問題，甚至替用戶完成重複性任務，為初學者提供更友好的學習起點。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-783b1d370ee54c428e48a0d6a2a0124bb4e.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-b120252a3f52bb1aa8937f2f2bd1ee69923.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;但同時，像「OpenAI 學習模式（Study Mode）」這樣的工具可能助長依賴性，因為學習者直接通過 AI 獲取答案，而不是真正理解知識結構，這樣的人最終可能止步於 AI 能覆蓋的水平。&lt;/p&gt; 
&lt;p&gt;對此，Elroy 的文章也指出，AI 帶來的影響，取決於「做出有影響力產品需要的精通程度」，其舉出了一點例子來更好分析這一情況：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;對工程管理者而言，AI 能快速幫助他們上手不熟悉的框架或平台，讓想法迅速變為可運行產品。&lt;/li&gt; 
 &lt;li&gt;然而對於在複雜系統中工作的開發者，AI 缺乏對現有架構的深度理解和上下文感知，實際輔助有限。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;同時，文中也提到了 AI 與藝術創意的關聯。雖然 AI 可以大量生成文本、圖像、音頻等，但因表現往往缺乏新意，在競爭激烈、創意要求高的領域（如小説、電影）難以取得成功。&lt;/p&gt; 
&lt;p&gt;文章強調，大眾容易識別雷同，例如因 4o 圖像生成器而流行一時的「吉卜力風」頭像，也未能影響《哈爾的移動城堡》的地位。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369939</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369939</guid>
      <pubDate>Mon, 01 Sep 2025 11:18:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>校方懷疑學生使用 AI 作弊，要求全員重考並接受現場答辯</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;新西蘭林肯大學一門研究生課程近日&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.stuff.co.nz%2Fnz-news%2F360802436%2Fone-slip-and-youre-guilty-universitys-unusual-ai-crackdown-rattles-students" target="_blank"&gt;引發了熱議&lt;/a&gt;&lt;strong&gt;：因懷疑部分學生在作業中使用了生成式 AI 工具，授課教師要求全班 115 名學生必須參加線下答辯重新考覈&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0902/191258_4zKr_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據瞭解，該課程聚焦「大數據與人工智能」，教師發現作業中出現大量「高水準代碼」，懷疑學生不當使用生成式 AI 工具。&lt;/p&gt; 
&lt;p&gt;儘管承認個別學生可能具備編程能力，但大規模出現此類情況概率極低，因此決定讓全班重考：學生需現場編寫代碼、解釋作業思路，並接受即興問答，全程錄像。教師稱此舉為「保證公平性」，並強調「若代碼是自己寫的，就能解釋清楚；解釋不了則可能作弊」。&lt;/p&gt; 
&lt;p&gt;對於校方的處理方案，學生認為重考營造了「人人有嫌疑」的緊張氛圍，擔心因答錯一句被認定作弊。部分學生表示從未使用 AI，卻被迫參與重考，認為處理方式「反應過度」。&lt;/p&gt; 
&lt;p&gt;校方稱處理符合學術規範，課程大綱已明確 AI 使用規則，且政策允許在懷疑作弊時要求學生重新驗證。教務長強調重視學術誠信，目標是確保學生成果代表自身努力。&lt;/p&gt; 
&lt;p&gt;維多利亞大學 AI 專家認為，AI 普及是不可逆趨勢，高校需調整教學和考覈方式，如增加面對面講解作業、設置階段性檢查點，而非單純依賴線下考試。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369937</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369937</guid>
      <pubDate>Mon, 01 Sep 2025 11:13:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Solon 權限認證之 Sa-Token 的使用與詳解</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#24292e; text-align:start"&gt;本文詳細介紹了 Sa-Token 在 Java 項目中的使用方法，包括 Sa-Token 的基本概念、與其他權限框架的比較、基本語法和高級用法，並通過實例講解了如何在項目中集成和使用 Sa-Token 。&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;作為一款輕量級 Java 權限認證框架，Sa-Token 在簡化權限管理、提高開發效率方面發揮了重要作用。本文還將深入探討 Sa-Token 的核心原理，通過內部代碼展示其工作機制。最後，總結了 Sa-Token 的優缺點及其在實際開發中的應用場景，為開發者提供全面的指導。&lt;/p&gt; 
&lt;h2&gt;一、Sa-Token 介紹&lt;/h2&gt; 
&lt;h3&gt;1. Sa-Token 簡介&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;Sa-Token 是一款輕量級 Java 權限認證框架，旨在解決 Java Web 系統中常見的登錄認證、權限驗證、Session 會話、單點登錄等問題。其核心目標是以最簡潔的方式，實現強大的權限控制功能，幫助開發者快速完成權限系統的搭建。&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;Sa-Token 具有如下優勢：&lt;/p&gt; 
&lt;table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#24292e; display:block; font-family:-apple-system,&amp;quot;system-ui&amp;quot;,&amp;quot;Segoe UI&amp;quot;,Helvetica,Arial,sans-serif,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:960px; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th&gt;優勢&lt;/th&gt; 
   &lt;th&gt;描述&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;簡單易用&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;API 設計簡潔明瞭，易於集成和使用，上手快，學習成本低。&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;功能豐富&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;支持多種權限控制需求，滿足複雜業務場景。支持登錄認證、權限驗證、角色驗證、Session 會話、多賬號體系等功能。&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;高性能&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;輕量級設計，對系統性能影響小。&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;高度可擴展&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;提供豐富的擴展接口，與 Spring、SpringBoot、Solon 等常用框架高度兼容，支持自定義持久化、註解方式驗證、單點登錄等高級特性。&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;社區活躍&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;有良好的社區支持和文檔資源。&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;2. Sa-Token 原理解析&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;Sa-Token 的核心原理是通過 Token 機制實現用戶的身份認證和權限校驗。&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;其主要工作流程如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;登錄認證：用戶登錄成功後，服務器生成一個全局唯一的 Token，並將其返回給客戶端。&lt;/li&gt; 
 &lt;li&gt;Token 存儲：Token 與用戶身份信息的映射關係保存在服務器的會話中（如 Redis、內存等）。&lt;/li&gt; 
 &lt;li&gt;權限驗證：客戶端請求時攜帶 Token，服務器根據 Token 獲取用戶信息，驗證其權限是否滿足要求。&lt;/li&gt; 
 &lt;li&gt;會話管理：支持 Session 會話管理，可以獲取和操作當前會話的屬性。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;流程圖例如下：&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet//164ae7fe8293ac6902b135fd89299bdf.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;3. Sa-Token 與其他權限框架比較&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;Sa-Token 與其他常見權限框架在學習成本、集成難度上有顯著優勢：&lt;/p&gt; 
&lt;table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#24292e; display:block; font-family:-apple-system,&amp;quot;system-ui&amp;quot;,&amp;quot;Segoe UI&amp;quot;,Helvetica,Arial,sans-serif,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:960px; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th&gt;特性&lt;/th&gt; 
   &lt;th&gt;Sa-Token&lt;/th&gt; 
   &lt;th&gt;Solon Auth&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;學習成本&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;低&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;低&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;功能豐富度&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;高&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;低&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;集成難度&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;低&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;低&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;性能表現&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;高&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;高&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;社區支持&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;活躍&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;一般&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;擴展性&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;高&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;中&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;二、Sa-Token 的基本語法&lt;/h2&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;在實際項目中，Sa-Token 通過簡單的配置和 API 調用，即可實現完整的權限管理功能。以下將通過一個完整的 Solon 示例，演示如何集成和使用 Sa-Token。&lt;/p&gt; 
&lt;h3&gt;1. 創建 Solon Web 項目&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;首先，創建一個新的 Solon 項目，可以使用 IDEA 的項目嚮導或&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsolon.noear.org%2Fstart%2F" target="_blank"&gt;Solon Initializr&lt;/a&gt;。&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;引入必要的依賴：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;em&gt;&amp;lt;!-- Solon  Web --&amp;gt;&lt;/em&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.noear&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;solon-web&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;

    &lt;em&gt;&amp;lt;!-- Sa-Token 核心依賴 --&amp;gt;&lt;/em&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;cn.dev33&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;sa-token-solon-plugin&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.44.0&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. 配置 Sa-Token：app.yml&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;&lt;em&gt;# Sa-Token 配置，可根據需要進行調整&lt;/em&gt;
&lt;span style="color:#986801"&gt;sa-token:&lt;/span&gt;
  &lt;em&gt;# token 有效期，單位秒，默認 30 天&lt;/em&gt;
  &lt;span style="color:#986801"&gt;timeout:&lt;/span&gt; &lt;span style="color:#986801"&gt;2592000&lt;/span&gt;

  &lt;em&gt;# 是否打開二級登錄校驗&lt;/em&gt;
  &lt;span style="color:#986801"&gt;open-safe:&lt;/span&gt; &lt;span style="color:#0184bb"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3. 配置攔截器&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;創建配置類，添加 Sa-Token 的攔截器，以攔截請求並進行權限驗證。SaTokenConfig.java&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; cn.dev33.satoken.solon.integration.SaTokenInterceptor;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Configuration;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Managed;

&lt;span style="color:#4078f2"&gt;@Configuration&lt;/span&gt;
&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;class&lt;/span&gt; &lt;span style="color:#c18401"&gt;SaTokenConfig&lt;/span&gt; {
    &lt;span style="color:#4078f2"&gt;@Managed(index = -100)&lt;/span&gt; &lt;em&gt;//-100，是順序位（低值優先）&lt;/em&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; SaTokenInterceptor &lt;span style="color:#4078f2"&gt;saTokenInterceptor&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; {
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; &lt;span style="color:#a626a4"&gt;new&lt;/span&gt; &lt;span style="color:#c18401"&gt;SaTokenInterceptor&lt;/span&gt;(); &lt;em&gt;//用於支持規劃處理及註解處理&lt;/em&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;4. 登錄認證&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;創建登錄接口，實現用戶登錄功能。LoginController.java&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; cn.dev33.satoken.stp.StpUtil;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Controller;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Mapping;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Param;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Post;

&lt;span style="color:#4078f2"&gt;@Controller&lt;/span&gt;
&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;class&lt;/span&gt; &lt;span style="color:#c18401"&gt;LoginController&lt;/span&gt; {

    &lt;span style="color:#4078f2"&gt;@Post&lt;/span&gt;
    &lt;span style="color:#4078f2"&gt;@Mapping("/login")&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; String &lt;span style="color:#4078f2"&gt;login&lt;/span&gt;&lt;span&gt;(&lt;span style="color:#4078f2"&gt;@Param&lt;/span&gt; String username, &lt;span style="color:#4078f2"&gt;@Param&lt;/span&gt; String password)&lt;/span&gt; {
        &lt;em&gt;// 1. 校驗用戶名和密碼（這裏模擬一個簡單的校驗）&lt;/em&gt;
        &lt;span style="color:#a626a4"&gt;if&lt;/span&gt; (&lt;span style="color:#50a14f"&gt;"admin"&lt;/span&gt;.equals(username) &amp;amp;&amp;amp; &lt;span style="color:#50a14f"&gt;"123456"&lt;/span&gt;.equals(password)) {
            &lt;em&gt;// 2. 登錄，保存用戶 ID 為 10001&lt;/em&gt;
            StpUtil.login(&lt;span style="color:#986801"&gt;10001&lt;/span&gt;);
            &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"登錄成功，Token："&lt;/span&gt; + StpUtil.getTokenValue();
        }
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"用戶名或密碼錯誤"&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;説明：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;調用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;StpUtil.login(10001)&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;方法，實現登錄操作，參數為用戶的唯一標識 ID。&lt;/li&gt; 
 &lt;li&gt;登錄成功後，可以通過&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;StpUtil.getTokenValue()&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;獲取當前會話的 Token。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;5. 權限驗證&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;創建需要權限驗證的接口，例如獲取用戶信息的接口。UserController.java&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; cn.dev33.satoken.annotation.SaCheckPermission;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; cn.dev33.satoken.stp.StpUtil;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Controller;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Get;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Mapping;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Post;

&lt;span style="color:#4078f2"&gt;@Controller&lt;/span&gt;
&lt;span style="color:#4078f2"&gt;@Mapping("/user")&lt;/span&gt;
&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;class&lt;/span&gt; &lt;span style="color:#c18401"&gt;UserController&lt;/span&gt; {

    &lt;em&gt;// 查詢用戶信息，需登錄&lt;/em&gt;
    &lt;span style="color:#4078f2"&gt;@Get&lt;/span&gt;
    &lt;span style="color:#4078f2"&gt;@Mapping("/info")&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; String &lt;span style="color:#4078f2"&gt;getUserInfo&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; {
        &lt;em&gt;// 校驗是否登錄&lt;/em&gt;
        StpUtil.checkLogin();
        &lt;em&gt;// 獲取用戶 ID&lt;/em&gt;
        &lt;span style="color:#986801"&gt;int&lt;/span&gt; &lt;span style="color:#986801"&gt;userId&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; StpUtil.getLoginIdAsInt();
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"當前用戶信息，ID："&lt;/span&gt; + userId;
    }

    &lt;em&gt;// 修改用戶信息，需有權限"user:update"&lt;/em&gt;
    &lt;span style="color:#4078f2"&gt;@SaCheckPermission("user:update")&lt;/span&gt;
    &lt;span style="color:#4078f2"&gt;@Post&lt;/span&gt;
    &lt;span style="color:#4078f2"&gt;@Mapping("/update")&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; String &lt;span style="color:#4078f2"&gt;updateUser&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; {
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"用戶信息更新成功"&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;説明：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;使用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;StpUtil.checkLogin()&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;方法手動校驗登錄狀態。&lt;/li&gt; 
 &lt;li&gt;使用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;@SaCheckPermission("user:update")&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;註解，聲明該接口需要權限 user:update。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;6. 角色驗證&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;如果需要基於角色進行權限控制，可以使用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;@SaCheckRole&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;註解。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; cn.dev33.satoken.annotation.SaCheckRole;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Controller;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Get;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Mapping;

&lt;span style="color:#4078f2"&gt;@Controller&lt;/span&gt;
&lt;span style="color:#4078f2"&gt;@Mapping("/admin")&lt;/span&gt;
&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;class&lt;/span&gt; &lt;span style="color:#c18401"&gt;AdminController&lt;/span&gt; {

    &lt;em&gt;// 僅管理員角色可訪問&lt;/em&gt;
    &lt;span style="color:#4078f2"&gt;@SaCheckRole("admin")&lt;/span&gt;
    &lt;span style="color:#4078f2"&gt;@Get&lt;/span&gt;
    &lt;span style="color:#4078f2"&gt;@Mapping("/dashboard")&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; String &lt;span style="color:#4078f2"&gt;adminDashboard&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; {
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"歡迎進入管理員控制枱"&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;7. 自定義權限驗證邏輯&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;需要自定義獲取用戶權限和角色的邏輯，可以實現&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;StpInterface&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;接口。StpInterfaceImpl.java&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; cn.dev33.satoken.stp.StpInterface;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Managed;

&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; java.util.ArrayList;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; java.util.List;

&lt;span style="color:#4078f2"&gt;@Managed&lt;/span&gt;
&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;class&lt;/span&gt; &lt;span style="color:#c18401"&gt;StpInterfaceImpl&lt;/span&gt; &lt;span style="color:#a626a4"&gt;implements&lt;/span&gt; &lt;span style="color:#c18401"&gt;StpInterface&lt;/span&gt; {

    &lt;em&gt;// 返回一個用戶所擁有的權限碼集合&lt;/em&gt;
    &lt;span style="color:#4078f2"&gt;@Override&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span style="color:#4078f2"&gt;getPermissionList&lt;/span&gt;&lt;span&gt;(Object loginId, String loginKey)&lt;/span&gt; {
        &lt;em&gt;// 模擬從數據庫獲取權限&lt;/em&gt;
        List&amp;lt;String&amp;gt; permissionList = &lt;span style="color:#a626a4"&gt;new&lt;/span&gt; &lt;span style="color:#c18401"&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();
        &lt;span style="color:#a626a4"&gt;if&lt;/span&gt;(&lt;span style="color:#50a14f"&gt;"10001"&lt;/span&gt;.equals(loginId.toString())) {
            permissionList.add(&lt;span style="color:#50a14f"&gt;"user:update"&lt;/span&gt;);
            permissionList.add(&lt;span style="color:#50a14f"&gt;"user:delete"&lt;/span&gt;);
        }
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; permissionList;
    }

    &lt;em&gt;// 返回一個用戶所擁有的角色標識集合 (權限與角色可分開校驗)&lt;/em&gt;
    &lt;span style="color:#4078f2"&gt;@Override&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span style="color:#4078f2"&gt;getRoleList&lt;/span&gt;&lt;span&gt;(Object loginId, String loginKey)&lt;/span&gt; {
        &lt;em&gt;// 模擬從數據庫獲取角色&lt;/em&gt;
        List&amp;lt;String&amp;gt; roleList = &lt;span style="color:#a626a4"&gt;new&lt;/span&gt; &lt;span style="color:#c18401"&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();
        &lt;span style="color:#a626a4"&gt;if&lt;/span&gt;(&lt;span style="color:#50a14f"&gt;"10001"&lt;/span&gt;.equals(loginId.toString())) {
            roleList.add(&lt;span style="color:#50a14f"&gt;"admin"&lt;/span&gt;);
        }
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; roleList;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;説明：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;實現&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;getPermissionList&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;方法，返回指定用戶的權限列表。&lt;/li&gt; 
 &lt;li&gt;實現&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;getRoleList&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;方法，返回指定用戶的角色列表。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;8. 會話管理&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;Sa-Token 提供了會話管理功能，可以在 Session 中存儲和獲取數據。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; cn.dev33.satoken.session.SaSession;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; cn.dev33.satoken.stp.StpUtil;

&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;void&lt;/span&gt; &lt;span style="color:#4078f2"&gt;sessionDemo&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; {
    &lt;em&gt;// 獲取當前會話的 Session&lt;/em&gt;
    &lt;span style="color:#986801"&gt;SaSession&lt;/span&gt; &lt;span style="color:#986801"&gt;session&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; StpUtil.getSession();

    &lt;em&gt;// 存儲數據&lt;/em&gt;
    session.set(&lt;span style="color:#50a14f"&gt;"name"&lt;/span&gt;, &lt;span style="color:#50a14f"&gt;"張三"&lt;/span&gt;);
    session.set(&lt;span style="color:#50a14f"&gt;"email"&lt;/span&gt;, &lt;span style="color:#50a14f"&gt;"zhangsan@example.com"&lt;/span&gt;);

    &lt;em&gt;// 獲取數據&lt;/em&gt;
    &lt;span style="color:#986801"&gt;String&lt;/span&gt; &lt;span style="color:#986801"&gt;name&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; session.getString(&lt;span style="color:#50a14f"&gt;"name"&lt;/span&gt;);
    &lt;span style="color:#986801"&gt;String&lt;/span&gt; &lt;span style="color:#986801"&gt;email&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; session.getString(&lt;span style="color:#50a14f"&gt;"email"&lt;/span&gt;);

    &lt;em&gt;// 輸出&lt;/em&gt;
    System.out.println(&lt;span style="color:#50a14f"&gt;"姓名："&lt;/span&gt; + name);
    System.out.println(&lt;span style="color:#50a14f"&gt;"郵箱："&lt;/span&gt; + email);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;9. 踢人下線&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;可以通過用戶 ID 強制用戶下線。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;em&gt;// 將用戶 ID 為 10001 的用戶踢下線&lt;/em&gt;
StpUtil.logoutByLoginId(&lt;span style="color:#986801"&gt;10001&lt;/span&gt;);

&lt;em&gt;// 檢查用戶是否已被踢下線&lt;/em&gt;
&lt;span style="color:#986801"&gt;boolean&lt;/span&gt; &lt;span style="color:#986801"&gt;isLogout&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; StpUtil.isLogin();
System.out.println(&lt;span style="color:#50a14f"&gt;"用戶是否登錄："&lt;/span&gt; + isLogout);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;10. 註銷登錄&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;用戶主動註銷登錄，可以調用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;StpUtil.logout()&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;方法。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;em&gt;// 註銷登錄&lt;/em&gt;
StpUtil.logout();

&lt;em&gt;// 檢查登錄狀態&lt;/em&gt;
&lt;span style="color:#986801"&gt;boolean&lt;/span&gt; &lt;span style="color:#986801"&gt;isLogin&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; StpUtil.isLogin();
System.out.println(&lt;span style="color:#50a14f"&gt;"用戶是否登錄："&lt;/span&gt; + isLogin);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;三、Sa-Token 的高級用法&lt;/h2&gt; 
&lt;h3&gt;1. 自定義持久化&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;Sa-Token 默認使用內存來存儲 Token 信息，在分佈式環境中，可以使用 Redis 作為持久化介質。&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;引入 Redis 依賴：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;cn.dev33&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;sa-token-redisx&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.44.0&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;cn.dev33&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;sa-token-snack3&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.44.0&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;配置 Redis Dao 連接信息：app.yml&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;&lt;span style="color:#986801"&gt;sa-token:&lt;/span&gt;  &lt;em&gt;# 不同的擴展插件，配置可能會不同&lt;/em&gt;
  &lt;span style="color:#986801"&gt;dao:&lt;/span&gt;
    &lt;span style="color:#986801"&gt;server:&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"localhost:6379"&lt;/span&gt;
    &lt;span style="color:#986801"&gt;password:&lt;/span&gt; &lt;span style="color:#986801"&gt;123456&lt;/span&gt;
    &lt;span style="color:#986801"&gt;db:&lt;/span&gt; &lt;span style="color:#986801"&gt;1&lt;/span&gt;
    &lt;span style="color:#986801"&gt;maxTotal:&lt;/span&gt; &lt;span style="color:#986801"&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;配置 Redis 持久化：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; cn.dev33.satoken.dao.SaTokenDao;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; cn.dev33.satoken.dao.SaTokenDaoForRedisx;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Configuration;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Inject;
&lt;span style="color:#a626a4"&gt;import&lt;/span&gt; org.noear.solon.annotation.Managed;

&lt;span style="color:#4078f2"&gt;@Configuration&lt;/span&gt;
&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;class&lt;/span&gt; &lt;span style="color:#c18401"&gt;SaTokenDaoConfig&lt;/span&gt; {
    &lt;span style="color:#4078f2"&gt;@Managed&lt;/span&gt;
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; SaTokenDao &lt;span style="color:#4078f2"&gt;saTokenDaoInit&lt;/span&gt;&lt;span&gt;(&lt;span style="color:#4078f2"&gt;@Inject("${sa-token.dao}")&lt;/span&gt; SaTokenDaoForRedisx saTokenDao)&lt;/span&gt; {
        &lt;span style="color:#a626a4"&gt;return&lt;/span&gt; saTokenDao;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. 單點登錄（SSO）&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;Sa-Token 提供了 SSO 模塊，可以快速實現單點登錄功能。&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;引入 SSO 依賴：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;cn.dev33&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;sa-token-sso&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.44.0&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;配置 SSO 相關參數：app.yml&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;&lt;span style="color:#986801"&gt;sa-token:&lt;/span&gt;
  &lt;span style="color:#986801"&gt;sso-client:&lt;/span&gt;
    &lt;span style="color:#986801"&gt;client:&lt;/span&gt; &lt;span style="color:#50a14f"&gt;demo-app&lt;/span&gt;
    &lt;span style="color:#986801"&gt;server-url:&lt;/span&gt; &lt;span style="color:#50a14f"&gt;http://sso-server.com&lt;/span&gt;
    &lt;span style="color:#986801"&gt;is-http:&lt;/span&gt; &lt;span style="color:#0184bb"&gt;true&lt;/span&gt;
    &lt;span style="color:#986801"&gt;secret-key:&lt;/span&gt; &lt;span style="color:#50a14f"&gt;SSO-C3-kQwIOrYvnXmSDkwEiFngrKidMcdrgKor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3. OAuth2.0 支持&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;&lt;code&gt;Sa-Token&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;也支持&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;OAuth2.0&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;協議，可以實現與第三方平台的對接。&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;引入&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;OAuth2.0&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;依賴：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;cn.dev33&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;sa-token-oauth2&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.44.0&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;配置&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;OAuth2.0&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;參數和實現授權流程（此處略，具體可參考官方文檔）。&lt;/p&gt; 
&lt;h3&gt;4. 多賬號體系&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;如果系統中存在多種身份的用戶，例如普通用戶、管理員、商家等，可以使用多賬號體系進行區分。&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;登錄指定賬號體系：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;em&gt;// 管理員登錄，loginKey 為"admin"&lt;/em&gt;
StpUtil.login(&lt;span style="color:#986801"&gt;10001&lt;/span&gt;, &lt;span style="color:#50a14f"&gt;"admin"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;檢查登錄狀態：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;em&gt;// 檢查當前賬號體系下是否登錄&lt;/em&gt;
&lt;span style="color:#986801"&gt;boolean&lt;/span&gt; &lt;span style="color:#986801"&gt;isLogin&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; StpUtil.isLogin(&lt;span style="color:#50a14f"&gt;"admin"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;權限驗證：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;em&gt;// 在指定賬號體系下進行權限驗證&lt;/em&gt;
StpUtil.checkPermission(&lt;span style="color:#50a14f"&gt;"user:update"&lt;/span&gt;, &lt;span style="color:#50a14f"&gt;"admin"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;四、Sa-Token 使用總結&lt;/h2&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;Sa-Token 是一款輕量級的 Java 權限認證框架，因其簡單易用和功能豐富而備受開發者青睞。它以簡潔明瞭的 API 設計，使得集成和使用變得非常方便，開發者可以快速上手，降低了學習成本。Sa-Token 支持多種權限控制需求，滿足複雜業務場景，包括登錄認證、權限驗證、角色驗證、Session 會話、多賬號體系等功能，全面覆蓋了權限管理的各個方面。其輕量級的設計對系統性能影響小，適用於高併發的應用環境。此外，Sa-Token 提供了豐富的擴展接口，與 Spring、SpringBoot、Solon 等常用框架高度兼容，支持自定義持久化、註解方式驗證、單點登錄等高級特性，方便開發者根據項目需求進行定製開發。活躍的社區支持和豐富的文檔資源也使得開發者能夠輕鬆獲取幫助和指導。&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;由於這些優勢，Sa-Token 非常適 Web 項目的快速開發和微服務架構下的權限管理。當項目需要快速搭建權限系統時，選擇 Sa-Token 是一個理想的方案。然而，在使用過程中需要注意 Token 的安全性，防止泄露帶來風險；對於高併發場景，建議使用 Redis 等持久化介質來提高系統性能和擴展性；同時，關注 Sa-Token 的版本更新，及時獲取新功能和安全補丁，以確保系統的安全性和穩定性。&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;此文參考自：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnblogs.com%2Fliuguangzhi%2Farticles%2F18415627" target="_blank"&gt;https://www.cnblogs.com/liuguangzhi/articles/18415627&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369936</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369936</guid>
      <pubDate>Mon, 01 Sep 2025 11:12:00 GMT</pubDate>
      <author>來源: 資訊</author>
    </item>
    <item>
      <title>快手發佈工業級規模強化學習 (RL) 訓練框架 SeamlessFlow</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;快手 Kwaipilot 團隊近日&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F_pewU-ZtVhhEpJVebwKysQ" target="_blank"&gt;發佈&lt;/a&gt;了 SeamlessFlow 技術報告，SeamlessFlow 是該團隊所使用的工業級規模強化學習（RL）訓練框架。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1436" src="https://static.oschina.net/uploads/space/2025/0902/184001_9a1i_2720166.png" width="2762" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據介紹，該框架通過創新的數據平面架構，對 RL 的訓練邏輯和 Agent 做了徹底解耦，用以支持多智能體、在線強化學習訓練等複雜場景。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0902/184245_Kuc6_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;更進一步，針對 RL 計算資源分配問題，團隊提出了「標籤分配機制」，統一了該領域最廣泛的兩種設計模式（訓推共卡、訓推分離）。以標籤分配的思路為出發點，在業界首個提出「時空複用 pipeline」，實現了在訓推分離的異構集羣上徹底消除 Pipeline Bubble 的效果。&lt;/p&gt; 
&lt;p&gt;在實際測試中，SeamlessFlow 的端到端 token 吞吐量相比基線提升 100%，整體訓練時間減少 62%。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0902/184306_P1R7_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0902/184325_U9bF_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;詳細內容查看技術報告：&lt;em&gt;https://arxiv.org/abs/2508.11553&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369933</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369933</guid>
      <pubDate>Mon, 01 Sep 2025 10:45:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Salesforce 裁員 4000 人，引入 AI 代理</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;作為一家知名的客戶關係管理（CRM）平台，Salesforce 近日宣佈其客戶支持團隊從 9000 人減少至約 5000 人。這一變化是由於公司推出了新的代理服務和支持產品。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="325" src="https://oscimg.oschina.net/oscnet/up-7cb3d84925fce813c55404c48eaee49bc24.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Salesforce 的首席執行官馬克・貝尼奧夫（Marc Benioff）在最近的一次播客中透露，公司自稱為該工具的 「客戶零」(customer zero)，並表示這一系統已經成功處理了約 150 萬次客戶對話，而在相同的時間段內，人工支持代理的對話數量大致相同。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;貝尼奧夫強調，人工智能的引入不僅僅是為了降低成本，更是為了提高公司的收入。他指出，Salesforce 在過去 26 年中積累了超過 1 億個未處理的潛在客戶，主要是由於人員不足。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;現在，藉助新的代理銷售系統，Salesforce 能夠聯繫到每一個潛在客戶，每週進行超過 1 萬次的對話。這一措施使得 Salesforce 的市場響應能力顯著提高，同時為公司創造了新的商機。未來，Salesforce 希望能通過不斷優化和改進其 AI 系統，進一步增強公司的競爭力，實現更大的商業成功。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369931</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369931</guid>
      <pubDate>Mon, 01 Sep 2025 10:41:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>把 DolphinScheduler 搬進 K8s：奇虎 360 商業化 900 天踩坑全記錄</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;&lt;img src="https://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/2025/08/28/qi-hu.png" alt="奇虎" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;👋 大家好，我是遠朋。過去 3 年，我們團隊把部分調度任務從 Azkaban 逐步遷移到 DolphinScheduler，並開展了 K8s 容器化。今天把踩過的坑、攢下的經驗一次性覆盤，建議收藏！&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;作者介紹&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/2025/08/28/wang-yuan-peng.jpg" alt="王遠朋" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;王遠朋&lt;/strong&gt; 上海奇虎科技有限公司，數據專家，商業化 SRE &amp;amp; 大數據團隊核心成員，長期負責 DolphinScheduler 在生產環境的部署與優化，具備豐富的容器化與大數據調度經驗。&lt;/p&gt; 
&lt;p&gt;在大數據任務調度的日常工作中，Apache DolphinScheduler 已經成為我們團隊最核心的工具之一。過去我們一直依賴物理機進行部署，例如 3.1.9 版本仍運行在&lt;strong&gt;物理機&lt;/strong&gt;環境中，但這種方式在彈性擴展、資源隔離和運維效率上逐漸暴露出問題。隨着公司整體的雲原生戰略推進，我們最終在 2025 年將 DolphinScheduler 升級到 3.2.2，並部分遷移到 &lt;strong&gt;Kubernetes 平台&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;遷移的動機非常明確：首先是&lt;strong&gt;彈性擴容&lt;/strong&gt;，K8S 可以根據任務高峯快速擴展 Worker 節點；其次是&lt;strong&gt;資源隔離&lt;/strong&gt;，避免不同任務相互影響；再者是&lt;strong&gt;自動化部署與回滾&lt;/strong&gt;，大幅降低維護成本；最後，也是最重要的一點，這一切符合公司在技術層面的&lt;strong&gt;雲原生方向&lt;/strong&gt;。&lt;/p&gt; 
&lt;h3&gt;鏡像構建：從源碼到模塊&lt;/h3&gt; 
&lt;p&gt;在遷移過程中，鏡像構建是第一步。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/2025/08/28/17563633473102.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;我們先準備了一個包含 Hadoop、Hive、Spark、Flink、Python 等環境的基礎鏡像，然後在此基礎上構建 DolphinScheduler 的基礎鏡像，將重新編譯的各個模塊和 MySQL 驅動打包其中。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/2025/08/28/17563634307756.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;這裏需要注意的是，MySQL 被用作 DolphinScheduler 的元數據存儲，因此驅動包必須軟鏈到每一個模塊，包括 &lt;code&gt;dolphinscheduler-tools&lt;/code&gt;、&lt;code&gt;dolphinscheduler-master&lt;/code&gt;、&lt;code&gt;dolphinscheduler-worker&lt;/code&gt;、&lt;code&gt;dolphinscheduler-api&lt;/code&gt; 和 &lt;code&gt;dolphinscheduler-alert-server&lt;/code&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/2025/08/28/17563635065036.jpg" alt="" referrerpolicy="no-referrer"&gt; Worker 鏡像&lt;/p&gt; 
&lt;p&gt;模塊鏡像則是在 DS 基礎鏡像之上進行定製，主要修改端口和配置。為了減少後續配置文件的改動，我們儘量保持模塊鏡像的名稱與官方一致。構建時既可以單獨構建某個模塊，例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./build.sh worker-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src="https://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/2025/08/28/17563634594536.jpg" alt="" referrerpolicy="no-referrer"&gt; 單獨構建鏡像&lt;/p&gt; 
&lt;p&gt;也可以批量構建所有模塊：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./build-all.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src="https://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/2025/08/28/17563634803090.jpg" alt="" referrerpolicy="no-referrer"&gt; 批量構建鏡像&lt;/p&gt; 
&lt;p&gt;這一步裏我們遇到的典型問題包括：&lt;strong&gt;基礎鏡像過大導致構建時間過長，源碼改造後的 jar 包沒有覆蓋舊文件，甚至不同模塊的端口配置和啓動腳本不一致。&lt;/strong&gt; 這些細節如果處理不當，就會在後續部署階段帶來一系列棘手的問題。&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;問題&lt;/th&gt; 
   &lt;th&gt;解決方案&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;基礎鏡像過大、構建慢&lt;/td&gt; 
   &lt;td&gt;把公共軟件層拆成多階段構建緩存&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;MySQL 驅動找不到&lt;/td&gt; 
   &lt;td&gt;建軟鏈到所有模塊 &lt;code&gt;lib/&lt;/code&gt; 目錄&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;自編譯 Jar 沒覆蓋舊包&lt;/td&gt; 
   &lt;td&gt;build.sh 里加 &lt;code&gt;find -name "*.jar" -delete&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;部署方案：從自制 YAML 到官方 Helm Chart&lt;/h3&gt; 
&lt;p&gt;在部署初期，我們是手寫 YAML 文件來完成部署的，但這種方式在配置分散和升級維護上成本極高。後來我們改用了官方提供的 Helm Chart，這樣配置集中管理，升級也更方便。&lt;/p&gt; 
&lt;p&gt;我們使用的 K8S 集羣版本是 v1.25，部署時需要先創建命名空間 &lt;code&gt;dolphinscheduler&lt;/code&gt;，然後拉取 helm 包，例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;helm pull oci://registry-1.docker.io/apache/dolphinscheduler-helm --version 3.2.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在真正落地過程中，&lt;code&gt;values.yaml&lt;/code&gt; 是最核心的文件，我們在這裏踩過很多坑。下面貼出幾個關鍵配置片段，供大家參考：&lt;/p&gt; 
&lt;h4&gt;1. 鏡像配置&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;image:
  registry: my.private.repo
  repository: dolphinscheduler
  tag: 3.2.2
  pullPolicy: IfNotPresent
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;👉 提示：一些前置的工具鏡像最好提前 push 到私有倉庫，避免因網絡或鏡像源問題導致部署失敗。&lt;/p&gt; 
&lt;h4&gt;2. 外置數據庫配置（MySQL）&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;mysql:
  enabled: false   # 關閉內置 MySQL
externalMysql:
  host: mysql.prod.local
  port: 3306
  username: ds_user
  password: ds_password
  database: dolphinscheduler
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;👉 內置數據庫務必關閉，生產環境統一接入外部 MySQL（未來我們將切換到 PostgreSQL）。&lt;/p&gt; 
&lt;h4&gt;3. LDAP 登錄認證&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;ldap:
  enabled: true
  url: ldap://ldap.prod.local:389
  userDn: cn=admin,dc=company,dc=com
  password: ldap_password
  baseDn: dc=company,dc=com
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;👉 我們接入了公司 LDAP，統一用戶認證，方便權限管理。&lt;/p&gt; 
&lt;h4&gt;4. 共享存儲配置&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;sharedStoragePersistence:
  enabled: true
  storageClassName: nfs-rwx
  size: 100Gi
  mountPath: /dolphinscheduler/shared
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;👉 注意：storageClassName 必須支持 &lt;code&gt;ReadWriteMany&lt;/code&gt;，否則多個 Worker 節點無法同時訪問共享目錄。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/2025/08/28/17563644421212.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h4&gt;5. HDFS 配置&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;hdfs:
  defaultFS: hdfs://hdfs-nn:8020
  path: /dolphinscheduler
  rootUser: hdfs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;👉 所有大數據相關組件路徑需要提前準備好，例如 &lt;code&gt;/opt/soft&lt;/code&gt;。&lt;/p&gt; 
&lt;h4&gt;6. Zookeeper 配置&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;zookeeper:
  enabled: false   # 關閉內置 ZK
externalZookeeper:
  quorum: zk1.prod.local:2181,zk2.prod.local:2181,zk3.prod.local:2181
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;👉 使用外置 Zookeeper 時，記得關閉內置配置，同時確認 ZK 版本符合官方最低要求。&lt;/p&gt; 
&lt;h3&gt;踩坑經驗與維護挑戰&lt;/h3&gt; 
&lt;p&gt;在整個遷移過程中，我們踩過的坑不少。比如，鏡像製作問題、Helm values.yaml 修改的坑，以及定製化升級和維護成本過高等。&lt;/p&gt; 
&lt;h4&gt;鏡像製作相關問題&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;鏡像製作時因為基礎鏡像太大，導致構建過程漫長；&lt;/li&gt; 
 &lt;li&gt;模塊依賴差異導致重複安裝；&lt;/li&gt; 
 &lt;li&gt;有時候 MySQL 驅動包路徑不正確，模塊啓動時報錯；&lt;/li&gt; 
 &lt;li&gt;源碼改造後的 jar 包忘記覆蓋舊文件，也曾造成過運行時異常，不同模塊端口與啓動腳本不一致，導致啓動不順利。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Helm values.yaml 注意點&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;sharedStoragePersistence.storageClassName 必須支持 ReadWriteMany 存儲類&lt;/li&gt; 
 &lt;li&gt;storage 大小&lt;/li&gt; 
 &lt;li&gt;mountPath 與配置文件不一致&lt;/li&gt; 
 &lt;li&gt;配置項路徑縮進&lt;/li&gt; 
 &lt;li&gt;關閉默認配置以及一些不需要的配置，例如 Zookeeper 外置時需關閉內置選項，同時注意 zk 需要的版本&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;維護升級成本&lt;/h4&gt; 
&lt;p&gt;更大的挑戰來自後續維護。因為我們對源碼和鏡像做過定製化修改，所以每當 DolphinScheduler 發佈新版本，我們都需要重新對比修改點，重新構建並測試全部模塊鏡像。&lt;/p&gt; 
&lt;p&gt;同時，由於不同版本之間配置項差異較大，升級和回滾的過程都容易出錯。這些問題導致我們的升級週期變長，維護難度加大，團隊人力成本也顯著上升。&lt;/p&gt; 
&lt;h3&gt;未來規劃與思考&lt;/h3&gt; 
&lt;p&gt;為了降低長期的運維成本，我們已經在逐步推進標準化。未來計劃包括： 將 DolphinScheduler 的元數據庫從 MySQL 切換到 PostgreSQL，全面採用社區官方鏡像而非自研鏡像，生產任務也會逐步遷移到 K8S 環境中。&lt;/p&gt; 
&lt;p&gt;同時，我們會引入 CI/CD 流程，並結合 Prometheus 與 Grafana 做可觀測性建設，提升部署效率與監控能力。&lt;/p&gt; 
&lt;p&gt;總的來説，K8S 部署讓 DolphinScheduler 在擴展性、彈性和遷移性上具備了遠超物理機的優勢。雖然鏡像定製化和配置修改帶來了不小的挑戰，但隨着我們逐漸迴歸社區版本和標準化運維，維護成本會越來越低，部署效率會越來越高。&lt;/p&gt; 
&lt;p&gt;我們的長期目標，是構建一個高可用、易擴展、統一化的調度平台，真正釋放雲原生的價值。如果你也在考慮把調度系統搬上 K8s，歡迎評論區交流，或加入 DolphinScheduler 社區一起搬磚！&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/2025/08/28/17563644922397.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/dailidong/blog/18690374</link>
      <guid isPermaLink="false">https://my.oschina.net/dailidong/blog/18690374</guid>
      <pubDate>Mon, 01 Sep 2025 10:27:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>Kuscia - 基於 K3s 的輕量級隱私計算任務編排框架</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                        
                                                                                    &lt;p style="color:rgba(0, 0, 0, 0.88); margin-left:0; margin-right:0; text-align:start"&gt;Kuscia（Kubernetes-based Secure Collaborative InfrA）是一款基於 K3s 的輕量級隱私計算任務編排框架，旨在屏蔽異構基礎設施和協議，並提供統一的隱私計算底座。&lt;/p&gt;

&lt;p style="color:rgba(0, 0, 0, 0.88); margin-left:0; margin-right:0; text-align:start"&gt;通過 Kuscia：&lt;/p&gt;

&lt;ul style="margin-left:0; margin-right:0"&gt;
&lt;li&gt;輕量化部署：你可以用最低 1C2G 的資源完成 100W 級數據隱私求交 (PSI)。&lt;/li&gt;
&lt;li&gt;跨域網絡安全通信：可以實現多隱私計算任務併發執行時的端口複用（僅需一個公網端口）與安全通信。&lt;/li&gt;
&lt;li&gt;統一的 API 接口：可以使用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;a href="https://www.secretflow.org.cn/zh-CN/docs/kuscia/main/reference/apis/summary_cn"&gt;HTTP/GRPC API 接口&lt;/a&gt;&lt;/span&gt;集成隱私計算能力。&lt;/li&gt;
&lt;li&gt;互聯互通：可以與行業內多種隱私計算系統進行互聯互通。&lt;/li&gt;
&lt;/ul&gt;

&lt;p style="color:rgba(0, 0, 0, 0.88); margin-left:0; margin-right:0; text-align:start"&gt;更多 Kuscia 的能力介紹，可參考&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;a href="https://www.secretflow.org.cn/zh-CN/docs/kuscia/main/reference/overview"&gt;Kuscia 概述&lt;/a&gt;&lt;/span&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img alt="" height="377" src="https://static.oschina.net/uploads/space/2025/0829/154436_QAD6_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/kuscia</link>
      <guid isPermaLink="false">https://www.oschina.net/p/kuscia</guid>
      <pubDate>Mon, 01 Sep 2025 10:18:00 GMT</pubDate>
    </item>
    <item>
      <title>清華與東北大學聯合推出 UltraRAG 2.0</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;清華大學 THUNLP 實驗室、東北大學 NEUIR 實驗室與 OpenBMB 及 AI9Stars 聯合發佈了 UltraRAG2.0，這是首個基於 Model Context Protocol（MCP）架構設計的檢索增強生成 (RAG) 框架。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;該框架致力於簡化 RAG 系統的構建過程，使科研人員可以在短時間內實現複雜的多階段推理系統。UltraRAG2.0 的亮點在於用戶只需通過編寫 YAML 文件，即可輕鬆聲明覆雜的邏輯，如串行、循環和條件分支，從而顯著減少代碼量，降低實現的門檻。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在當前的 RAG 發展趨勢中，許多系統逐漸融入了自適應知識組織、多輪推理及動態檢索等複雜特性，代表項目包括 DeepResearch 和 Search-o1。然而，這些複雜特性也給開發者帶來了高昂的工程成本，制約了新想法的快速迭代與復現。UltraRAG2.0 應運而生，它通過將 RAG 的核心組件封裝為獨立的 MCP 服務器，實現了功能的靈活調用和擴展。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;具體而言，與以往的實現方式相比，UltraRAG2.0 在代碼量上大幅減少。例如，經典方法 IRCoT 的官方實現需要近 900 行代碼，而使用 UltraRAG2.0 只需約 50 行代碼就能完成同等功能。其中一半的代碼是用於流程編排的 YAML 偽代碼，極大降低了開發門檻。框架支持通過簡潔的聲明式方式來構建多階段推理流程，使得複雜的推理邏輯不再需要冗長的手動編碼。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="316" src="https://oscimg.oschina.net/oscnet/up-8ffdf7ae1633d0f30510d1cb66672338fbe.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;UltraRAG2.0 還支持動態檢索、條件判斷及多輪交互等&lt;span&gt;高級&lt;/span&gt;功能，科研人員可以在短時間內搭建出高性能的實驗平台，滿足複雜多跳問題的需求。其性能較傳統的 Vanilla RAG 提升約 12%。該系統的設計旨在讓研究者在工程實現方面節省時間和精力，將更多的注意力放在算法創新和實驗設計上。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;此外，UltraRAG2.0 的 MCP 架構允許不同模塊間的無縫複用，並支持模塊的靈活擴展和接入，方便科研人員快速適配新的模型和算法。這一設計極大提升了系統開發的效率和可復現性。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369915</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369915</guid>
      <pubDate>Mon, 01 Sep 2025 09:36:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>這款全新的 Linux 桌面發行版幾乎與 OS X 如出一轍</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Gershwin 是一款正在開發中的全新開源 Linux 桌面環境，目標是在 BSD 與 Arch Linux 上帶來類似 macOS 的使用體驗。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-86d4824b0345ee3351031cb07530c092dda.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-5f1b49d23ae230a85b749ebeb383dd209f8.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;開源地址：&lt;em&gt;https://github.com/gershwin-desktop/gershwin-desktop&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Gershwin 基於 GnuStep，而 GnuStep 本身源自 NeXTStep（macOS 的前身），因此界面風格自然與 OS X 十分接近。不過，由於 GnuStep 的老派設計，&lt;strong&gt;Gershwin 更像是「復古版 macOS」，看起來更接近早期的 OS X&lt;/strong&gt;，而非現代的 macOS。&lt;/p&gt; 
&lt;p&gt;目前 Gershwin 仍處於早期 alpha 階段，功能有限：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;應用程序通過 Dock 管理，而非桌面圖標；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;應用啓動器尚不穩定，運行程序常需手動調用；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;最穩定的體驗方式是通過 GhostBSD 運行，也能在 Arch Linux 上安裝，但不推薦。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;雖然現階段實用性不足，但 Gershwin 展現了獨特潛力：一個兼具懷舊感與現代性，的桌面環境。如果開發順利推進，它有望成為 BSD/Linux 用戶的另類選擇。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369912</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369912</guid>
      <pubDate>Mon, 01 Sep 2025 09:31:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>宇樹科技宣佈將在四季度提交 IPO 申請</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;宇樹科技在社交媒體上發帖稱，預計將在 2025 年 10 月至 12 月期間向證券交易所提交上市申請文件，屆時公司的相關運營數據將正式披露。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="652" src="https://oscimg.oschina.net/oscnet/up-adeb6b500a9f884cfa342d939c1ffff851d.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;宇樹科技表示，以 2024 年為例，四足機器人、人形機器人和組件產品的銷售額分別佔約 65%、30% 和 5%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;其中，約 80% 的四足機器人被應用於研究、教育和消費領域，而剩餘的 20% 則被用於工業領域，如檢查與消防。人形機器人完全用於研究、教育和消費領域。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369909</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369909</guid>
      <pubDate>Mon, 01 Sep 2025 09:18:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Linux 文件系統 Btrfs 長期貢獻者退出內核項目，加入 Anthropic</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Josef Bacik 是長期參與 Btrfs 文件系統開發的資深工程師，他在 2025 年 8 月 29 日宣佈離開 Meta（原 Facebook），選擇加入 AI 公司 Anthropic，投身 AI 基礎設施事業，並不再將 Linux 內核開發作為主要職業方向。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-b2d57c0b86cc532363c44a3c1f2bebc2583.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Josef Bacik 説道，下週我將開啓新篇章，加入 Anthropic，協助其擴展基礎設施；&lt;strong&gt;這也是我職業生涯中第一次不再以內核開發為主的工作&lt;/strong&gt;。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;「Next week I start a new chapter, I will be joining Anthropic to help them scale out their infrastructure … I will be stepping back from kernel development as my primary job for the first time in my career.」&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Josef Bacik 對曾經所在團隊表達了高度認可，也坦言時間到了該進入新階段，他希望運用自己在內核與系統方面的多年經驗，協助 Anthropic 擴展基礎設施。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369907</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369907</guid>
      <pubDate>Mon, 01 Sep 2025 09:03:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Meta 與 Scale AI 合作現裂痕</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;自今年 6 月以來，儘管 Meta 向數據標註公司 Scale AI 投資了高達 143 億美元，並聘請其首席執行官 Alexandr Wang 等高管加盟 Meta Superintelligence Labs （MSL），但雙方的關係似乎正面臨挑戰。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;核心問題源於數據質量的爭議。儘管進行了鉅額投資，但消息人士透露，Meta 核心 AI 部門 TBD Labs 的研究人員普遍認為 Scale AI 的數據質量不佳，更傾向於與 Scale AI 的主要競爭對手 Mercor 和 Surge 合作。Meta 的 TBD Labs 在成立前就已與這兩家公司有合作，但向一家數據供應商投入如此巨資後，仍然依賴其競爭對手的情況十分罕見。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="282" src="https://oscimg.oschina.net/oscnet/up-949f1f529dd7a49117f6b1fcb77a8d33a02.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;這種現象背後反映出數據標註行業的變化。早期，Scale AI 的眾包模式依賴低成本勞動力處理簡單任務，但隨着 AI 模型複雜化，需要醫生、律師等高技能領域專家來提供高質量數據。儘管 Scale AI 推出了 Outlier 平台，但像 Mercor 和 Surge 這樣從一開始就建立在高薪人才模式上的競爭對手正迅速崛起。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;除了商業合作上的緊張，雙方的人事整合也遭遇挫折。Scale AI 前高管 Ruben Mayer 在加入 Meta 僅兩個月後便離職，進一步引發外界關注。儘管 Mayer 表示是因「個人原因」離開，且對在 Meta 的工作經歷感到滿意，但他對自己在 Meta 的職責定位與內部消息人士的説法存在分歧。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;此外，Meta 的 AI 部門也面臨人才流失問題。有前員工和現任員工透露，自從引入 Alexandr Wang 和一批來自 OpenAI 等公司的人才後，Meta 的 AI 部門變得混亂。新加入的人員對大公司的官僚作風感到沮喪，而 Meta 原有的 GenAI 團隊則感到能力受限。MSL AI 研究員 Rishabh Agarwal 等多名核心員工近期相繼離職，這給 Meta 的 AI 發展前景蒙上陰影。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;這次投資被普遍認為是 Meta CEO 扎克伯格在 Llama4 發佈平淡後，為追趕 OpenAI 和谷歌而採取的緊急舉措。他不僅吸納了 Alexandr Wang，還積極從 OpenAI、谷歌 DeepMind 等公司招募頂尖人才。然而，鑑於部分新員工的迅速離職以及內部團隊的混亂，Meta 能否穩定其 AI 運營並留住人才，仍是一個懸而未決的問題。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369898</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369898</guid>
      <pubDate>Mon, 01 Sep 2025 08:54:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>開源操作系統框架 Genode OS 發佈 25.08 版本</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;開源操作系統框架 Genode OS 發佈了 25.08 版本，引入了新的內核調度器以實現公平性和低延遲，探索了 XML 的替代方案，優化了塊存儲堆棧，並將所有基於 Linux 的 PC 驅動程序更新至內核版本 6.12。&lt;/p&gt; 
&lt;p&gt;此外，該版本還為最新版本 13.0 的 seL4 微內核解鎖了更多動態場景。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-843a3a17acca0079fa8555dc66189112455.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;核心調度器（Kernel Scheduler）重構：優化公平性與延遲&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;新版本對 Genode OS 中的內核調度器進行了全面重構，尤其為其通用操作系統 Sculpt OS 考量了動態工作負載的需求，優化了任務調度的公平性與響應延遲。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;塊存儲層（Block Layer）改進&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;對塊存儲子系統進行了多項優化，包括精簡數據路徑、提升 I/O 性能。這些改進通過整體優化塊存儲棧，減少中間組件（如分區管理模塊）的參與，增強了多隊列硬件支持能力。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Linux 驅動更新至 Kernel 6.12 LTS&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Genode 的 Linux 驅動組件——在其 Linux 驅動環境中使用的驅動程序均已升級，基於 Linux 6.12 LTS 源代碼，對硬件兼容性和穩定性進行了增強。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;兼容 seL4 微內核：支持 seL4 版本 13.0&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Genode 持續擴展其對 seL4 微內核的支持。此版本中，已將 seL4 內核更新到最新 13.0 版本，並解決了先前存在的可擴展性瓶頸，尤其改善了動態場景（如插拔式驅動加載）下的表現。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;探索 XML 的替代語法&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;為了改進配置與報告流程，新版本引入了對 XML 的替代語法支持，允許配置文件逐步從 XML 切換到更輕量的形式，並支持與 XML 之間的互操作性，這一思路已規劃超過兩年，本次進入實用評估階段。&lt;/p&gt; 
&lt;p&gt;詳情查看&amp;nbsp;&lt;em&gt;https://genode.org/documentation/release-notes/25.08&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/369887</link>
      <guid isPermaLink="false">https://www.oschina.net/news/369887</guid>
      <pubDate>Mon, 01 Sep 2025 08:28:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
  </channel>
</rss>
