<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 繁體中文（台灣）</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已對該 RSS 進行格式化操作：中英字符之間插入空格、使用直角引號、標點符號修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-tw</language>
    <lastBuildDate>Sat, 07 Jun 2025 02:43:35 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>預測：2030 年 ChatGPT 廣告收入將達千億美元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;富國銀行的證券分析師 Ken Gawrelski 在最新的報告中提出了一個引人矚目的預測：到 2030 年，ChatGPT 將佔據全球搜索廣告市場的 30% 份額，年收入將接近 1000 億美元。這一預測意味着，OpenAI 與谷歌之間的競爭將在搜索市場上愈演愈烈。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;報告中指出，整個搜索廣告市場預計將在未來幾年內以 8% 的年複合增長率增長，到 2030 年將達到 3400 億美元。而 ChatGPT 的快速增長主要將影響谷歌的市場份額。目前，OpenAI 的收入主要依賴於用戶的訂閲費用。早在今年 3 月，就有消息人士透露，OpenAI 預計今年的營收將同比增長三倍，達到 127 億美元。同時，儘管預計到 2029 年營收可達 1250 億美元，但 OpenAI 在 2029 年前仍無法實現正向現金流。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="271" src="https://oscimg.oschina.net/oscnet/up-0c88b1d1ddc7ad456d5da21854b2ca9aaae.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;目前，ChatGPT 已佔全球近 8% 的搜索查詢量，但尚未對搜索廣告市場產生直接影響。Gawrelski 認為這一情況即將改變。他們預計 OpenAI 將在未來 12 個月內將贊助廣告融入 ChatGPT 中。值得注意的是，這款熱門 AI 工具的每週活躍用戶已超過 5 億，但付費用戶僅佔 5%。在 OpenAI 內部的營收預測中，2026 年的 「免費用戶變現收入」 預計將達到 10 億美元，而這一數字無疑主要來自廣告收入。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;報告同時指出，隨着 ChatGPT 在整體搜索量中的佔比逐步上升，預計到 2025 年底將達到約 17%，到 2030 年則接近三分之一。然而，短期內廣告份額的增長將滯後於使用量的增長，預計在預測週期末尾二者將趨於平衡。Gawrelski 將 ChatGPT 的商業化進程與 TikTok 相提並論，後者也經歷了類似的廣告收入增長過程。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;目前，谷歌在搜索廣告領域佔據了超過 90% 的市場份額，但預計到 2030 年，這一數字將下降至約 60%。報告還警告稱，ChatGPT 的入局可能會對當前熱門的按點擊付費廣告（CPC 廣告）價格產生下行壓力。分析師指出，谷歌的廣告價格每下降一個百分點，可能會導致 2026 財年每股收益下降 1 個百分點。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;為了加速進軍廣告市場，ChatGPT 或將通過與手機製造商達成新分銷協議以及美國法院對谷歌反壟斷案的裁決等關鍵催化劑來推動這一進程。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353999</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353999</guid>
      <pubDate>Sat, 10 May 2025 09:59:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>重磅！支持鴻蒙！騰訊視頻 ovCompose 跨平台框架發佈</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="text-align:center"&gt;&lt;img height="386" src="https://oscimg.oschina.net/oscnet/up-f8d70184eb16acfb3610dee103ef9e44ff3.png" width="832" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;背景&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;隨着鴻蒙的推出，客戶端跨平台需求被推到了前所未有的高度，單純的 UI 跨端已無法滿足業務訴求，構建 Android/iOS/鴻蒙平台的全跨端 APP 能夠最大幅度的降低業務開發成本，提升人效。並且行業內研發模式的逐步改進，單週發版已經成為常態，對於常規 APP，動態化的訴求並不是很強。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#262626"&gt;開發者普遍希望在保持原生優良性能的同時，使用行業通用的 UI 開發語言，從而最大程度降低學習成本。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;與 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Compose &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;是 Google 官方推薦的 Android 開發語言與 UI 框架，也是深受開發者喜愛&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;應用開發方案。與其他跨端方案相比，Kotlin Multiplatform 還具備高性能，與原生交互更靈活等優點。因此騰訊視頻選擇了 Compose Multiplatform 作為全跨端 APP 的基礎。當然，這套方案也存在不支持鴻蒙、iOS 平台混排能力受限、GC 性能表現一般等一系列問題，使得落地的過程充滿了挑戰。經過不懈努力，上述問題均已得到妥善解決，現在我們希望將這些解決方案開源，期待與全行業一同推動 Compose 跨端生態走向成熟。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="201" src="https://oscimg.oschina.net/oscnet/up-04f661d1e45cf7c86ff9630a1e8906b222e.png" width="832" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;特性優勢&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;ovCompose 已經在騰訊視頻鴻蒙平台全面落地，成為鴻蒙平台首個全跨端 APP。同時 KuiklyBase 基礎能力已在騰訊視頻、QQ 瀏覽器、騰訊體育等 10+款 APP 廣泛落地。Android、iOS、鴻蒙三端一碼的開發方式，使得業務的開發效率得到大幅度&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;地&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;提升。隨着鴻蒙系統的發展，ovCompose 和 KuiklyBase 也會在未來進一步擴展到 TV 和 PC 端。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;鴻蒙高性能&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin 鴻蒙適配有 JS 與 Native 兩種技術方案可供選擇，KuiklyBase 最終選擇了 Native 方案。因為 KN 相比 JS 有更快的執行速度，更好的三端一致性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="303" src="https://oscimg.oschina.net/oscnet/up-6a496678ea2121c823332adad5611d81c20.png" width="841" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;關於 JS 和 KN 的性能測試的數據如上圖所示。我們對 KN 和 Compose 兩者都進行了性能優化，在 Compose "小球碰撞" Demo 中。以 30 FPS 為最低極限，經優化小球數量由 600 提升到 1500（Android 1600 球），繪製性能提升 150%。後續將開放更多優化策略。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;相關資料如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;JS 和 KN 性能測試詳細數據&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;https://docs.qq.com/sheet/DQXB4YmxQaENSdkpD?u=255d89f8184e4be69e865ce6001f298b&amp;amp;no_promotion=1&amp;amp;tab=BB08J2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;ovCompose 小球碰撞 Demo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;https://github.com/Tencent-TDS/ovCompose-sample&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin 官方的 Benchmark &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;https://github.com/JetBrains/kotlin/tree/master/kotlin-native/performance/ring&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;鴻蒙三明治架構支持混排&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;鴻蒙平台採用了 Skia 的渲染方案，能夠 100% 支持 Compose 語法和渲染能力。Skia 渲染使用 XComponent 組件作為畫布，通過三明治鏤空結構，很好&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;地&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;解決了與原生組件的混排問題，原生 UI 可以展示在 Compose 上層或下層，滿足了絕大部分的業務需求。同時支持了 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;粘貼按鈕 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;等安全組件的混排，使得 Compose 無需申請權限也能使用系統能力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="638" src="https://oscimg.oschina.net/oscnet/up-a1cb206040d8039fe5bd852425034fd81c4.png" width="596" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;三端高一致性&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;對於邏輯運行&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;：由於在鴻蒙平台採取 Kotlin-Native 方案，解決了 Kotlin-JS 使用 TaskPool 時，Kotlin 語法無法約束跨線程訪問的問題，保持了高度的三端一致性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;對於 UI 繪製：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;iOS、鴻蒙平台均採用 Skia 渲染，Android 底層使用 Skia 渲染，應用層暴露了 Paragraph/Canvas 的繪製接口。所以基於 Skia 封裝後的 Skiko 可以完美還原 Android 繪製效果，達到三端一致的效果。三平台均可以 100% 使用 Compose 的控件與繪製能力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;三端高一致性&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;對於邏輯運行&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;：由於在鴻蒙平台採取 Kotlin-Native 方案，解決了 Kotlin-JS 使用 TaskPool 時，Kotlin 語法無法約束跨線程訪問的問題，保持了高度的三端一致性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;對於 UI 繪製：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;iOS、鴻蒙平台均採用 Skia 渲染，Android 底層使用 Skia 渲染，應用層暴露了 Paragraph/Canvas 的繪製接口。所以基於 Skia 封裝後的 Skiko 可以完美還原 Android 繪製效果，達到三端一致的效果。三平台均可以 100% 使用 Compose 的控件與繪製能力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="687" src="https://oscimg.oschina.net/oscnet/up-4d9de997bd770b372a4ebe86eaafae316f1.png" width="876" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;iOS 多模態渲染解放混排能力&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span style="background-color:#fcfcfc"&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;iOS 端大量存量業務模塊高度依賴 Compose 與原生 UI 的混合編排能力，其靈活混排的技術實現及與原生 UI 性能標準的精準對齊，是業務 Compose 化改造成功推進的核心前提。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Compose Multiplatform 官方在 iOS 端上使用 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Skia + CAMetaLayer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&amp;nbsp;實現 UI 的渲染能力，這種方案的好處是與其他端表現完全一致，缺點就是與原生 UI 的混排能力較弱，且內存佔用較高，不適合多個 Compose 實例並存。因此我們必須考慮以下兩種方案：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;指令映射&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;，即使用 UIKit 實現 Compose Canvas 。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;組件映射&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;：即將 Compose 組件映射為 Native 組件。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;組件映射方案在組件層進行映射實現，是業內最常見的跨端 UI 框架設計方案，實現難度相對較低，但存在後期維護成本高，多端不一致等問題。指令映射在畫布層進行映射實現，實現的邏輯層級更低也更加抽象，雖然開發難度相對較高，但卻可以充分利用 UIKit 豐富的渲染能力對 Compose 的繪製效果實現較高的還原度。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;因此我們最終採用了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;指令映射&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;的自研實現方案解決了 Compose 在 iOS 上面臨的諸多難題。這套方案也成功地在騰訊視頻 iOS 端核心業務場景落地。事實上，業務團隊甚至可以根據實際應用場景在基於 UIKit 實現的自研指令映射方案或官方的 Skia 渲染方案之間進行自由切換，並且可以在 Runtime 期共存。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;關於 UI 的多端一致性，文本渲染較為複雜，我們採取 Skia 將文本渲染成圖片，利用 CALayer 進行展示的方案，保持了高度的一致性。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="511" src="https://oscimg.oschina.net/oscnet/up-f656d4ee74ea74191f595bfcbf27f975d72.png" width="842" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin Native 內存優化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;GC 優化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;GC 抑制&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;當 APP 處於滑動等對幀率要求較高的場景，我們會短暫抑制 GC，來換取更好的流暢度。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;GC 分段&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;不影響幀率情況下，進行更高頻次的 GC，降低 PSS 水位。通過分析 CMS（Concurrent Mark-Sweep）垃圾回收算法，發現其存在兩次 Stop-The-World（STW）暫停，並且第一次 STW 時間較短，第二次 Sweep 期間的 STW 較長。利用 GC 掛起的能力，我們在 Vsync 時進行 GC 掛起，在 idle 時進行 GC 恢復。具體效果如下圖：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="483" src="https://oscimg.oschina.net/oscnet/up-448a548403539f2bde31ccd796f10e9aceb.png" width="809" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Sweep 優化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin Native GC 在 Sweep 階段，會有大量的 munmap 系統調用，導致 STW 時間過長，從而影響主線程。為此，我們將 munmap 移出 STW 階段，在 STW 階段僅做 Page 收集。在 Resume 後再進行集中 munmap。將第二次 STW 時間降低到 1ms 以內。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="173" src="https://oscimg.oschina.net/oscnet/up-6e52e581fda35deadc8d833e01caf92f670.png" width="834" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;KN 堆 Dump 優化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin Native（KN）支持生成堆內存轉儲文件，用於內存泄漏排查（類似 Android Profiler），但 Dump 過程需暫停所有 KN 線程，導致秒級界面凍結。針對不同平台特性我們採用了不同優化方案，從而達成線上可用的目標。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;鴻蒙系統&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基於 Linux 內核的 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;fork()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&amp;nbsp;系統調用特性，採用「父進程無感知-子進程異步轉儲」方案實現零延遲內存快照。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;iOS 系統&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;針對 iOS 系統無法支持 fork 的限制，我們重新設計了堆內存分析流程，在保持性能的同時顯著降低主線程阻塞時間。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;堆凍結階段：將堆內存數據保存到緩存文件，這裏的堆內存是指 KN 堆用來分配對象內存的幾種 Page 類，粒度很大，一種 Page 可能會有上千個對象，寫文件時無需解析 Page 內容，所以耗時很少且不會因為對象數量的增加而顯著增加耗時。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;線程恢復後：異步地從緩存文件中讀取對象內容並寫到 Dump 文件，由於每次從文件讀取的只是對象大小數據，所以內存消耗很低。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;優化後 450MB 堆內存轉儲耗時從 2.8 秒降低到 410 毫秒達到線上可用水平。該功能預計 6 月份上線。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;方案對比&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="270" src="https://oscimg.oschina.net/oscnet/up-1000b2e58fbc61f95d080d57d8fc537ed49.png" width="832" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;KuiklyBase 組件生態&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin Native 堆棧還原組件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;提供 Kotlin 異常堆棧還原，方便定義 Kotlin 異常對應的 Kotlin 代碼行號、方法名等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Kotlin Native/ ArkTS 互調用組件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;提供 ArkTS 與 Kotlin Native 跨語言訪問場景的解決方案，支持基礎類型、閉包、ArrayBuffer 等類型互轉，統一的生命週期管理，支持跨線程同步調用，支持跨 Runtime 的服務發現，為開發者提供簡便的跨語言互調用能力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;資源管理組件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;本項目基於 Kotlin Multiplatform 技術，構建了一套跨平台原生資源管理解決方案，支持 Android、iOS 及 HarmonyOS 三大移動端平台。通過構建時同步生成類型安全的資源訪問類（Resource Class），結合 Kotlin/Native（klib）/ Kotlin/Jvm（aar）的標準化資源封裝機制，實現了多平台資源統一管理與&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;編譯器&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;強校驗，為開發者提供與 Android R 類相仿的資源調用體驗。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;原子操作組件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基於 Kotlin 官方提供的多平台原子操作庫，旨在以高效且符合 Kotlin 慣用語法的方式實現線程安全的併發編程，提供輕量級的原子類型（如 AtomicInt、AtomicReference），支持原子讀寫、CAS（Compare-And-Swap）等操作，無需顯式鎖即可實現線程安全。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;協程組件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基於 Kotlin 官方提供的協程庫，旨在簡化異步和併發編程，通過輕量級協程替代傳統線程和回調機制。支持協程構建器、調度器、掛起函數、結構化併發、流處理、通信與同步、異常處理、超時控制等能力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;序列化組件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基於 Kotlin 官方提供的多平台序列化庫。專為 Kotlin 語言設計，支持高效、類型安全的對象序列化與反序列化。多格式支持、編譯器插件集成、兼容 Kotlin 類型安全與空安全。支持嵌套對象、泛型類、密封類（sealed class）等複雜類型。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;日期時間處理庫&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基於 Kotlin 官方提供的多平台日期時間處理庫，簡化跨平台的日期和時間操作。支持時區處理、時間運算。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;IO 庫&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基於 Square 提供的高效 I/O 庫，旨在簡化輸入輸出操作。提供高效緩衝區管理、同一流抽象、智能數據移動。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;不可變集合庫&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基於 Kotlin 官方提供的不可變集合庫，專注於為開發提供線程安全、高效且符合函數式編程範式的數據結構。提供不可變的集合接口，確保集合創建後不可修改，避免意外數據變更。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;併發集合庫&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基於 StatelyConcurrency 提供的併發集合庫，簡化跨平台開發中的狀態管理和併發控制設計。支持線程安全集合、併發控制、同步機制。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;針對&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&amp;nbsp;Kotlin/Native 的嚴格內存模型優化，減少線程切換開銷。簡化狀態管理。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;Lottie 動畫庫&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基於 Airbnb 開源的跨平台動畫渲染庫，能夠將 Adobe After Effects 設計的動畫轉換為輕量級 JSON 文件，並在多平台上高效渲染。提供豐富的動畫控制、動態屬性修改、輕量高效。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;PAG 動畫流解決方案&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;騰訊開源的一套跨平台動畫工作流解決方案，專注於將 Adobe After Effects (AE) 動畫高效轉換為輕量級文件，並在多終端渲染。支持 AE 動畫無縫導出、運行時編輯、高性能渲染、配套工具鏈完善。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;數據庫&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;基於 SQLite 封裝的輕量級、嵌入式的關係型數據庫，嵌入式設計、標準 SQL 支持、事務與 ACID 合規。輕量高效、弱類型系統&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;，並且&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;支持高級功能擴展（索引、觸發器、視圖等）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;工具庫&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;屏蔽 Android/iOS/Harmony 系統平台差異，對外部統一提供常用的工具 api 集合作為業務開發的強力支撐。包括不限於 App 信息管理 (名稱、版本號、安裝時間、更新時間、包名等)、設備信息管理 (設備類型、品牌、製造商、系統版本、電池狀態、亮度、內存信息等)、屏幕信息管理（寬度、高度、分辨率、是否亮屏、鎖屏、屏幕旋轉、狀態欄、安全區域獲取、全屏模式等）、傳感器管理（重力、震動、陀螺儀、加速度）、前後台狀態管理、音頻及音頻焦點管理、加解密管理 (3DES、RSA、AES)、字符編碼（UTF-8、UTF-16、BASE64）、存儲空間管理、網絡狀態監聽、沙盒目錄獲取、監聽分屏/浮窗等狀態、圖片保存相冊能力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;網絡庫&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;提供基於 HTTP 協議的 POST、GET 請求能力以及關鍵信息採集。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;實現原理&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;KN 鴻蒙平台適配&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;kotlin 1.9 使用的 LLVM 11，kotlin 2.1 升級到 LLVM 16，但是鴻蒙平台能夠支持的版本在 LLVM 12 ~ 15，蘋果和鴻蒙都是基於公共版本的 LLVM 進行修改，增加了自己的特性優化，蘋果相對好的點在於公共版本的 LLVM 中包含有蘋果的 target，所以鴻蒙版本的 LLVM 既可以支持 iOS，又可以支持鴻蒙平台。（KukilyBase-Kotlin 當前基於 2.0.21 進行鴻蒙適配）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;常規方案：常規的 Kotlin 適配思路是分別使用鴻蒙和蘋果的 LLVM 進行編譯，這種方案的好處是修改簡單，且不存在兼容性問題。缺點是由於 Kotlin 本身不支持多 llvm 架構，導致鴻蒙平台的 kotlin 和 iOS 平台要進行分別編譯，需要依賴不同的 Kotlin 版本。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;KuiklyBase 方案：在第一步 Kotlin IR 轉 LLVM IR 時採用蘋果的 LLVM 11，在 LLVM IR 生成可執行文件時使用鴻蒙的 LLVM 12，這樣既可以滿足訴求，Kotlin 本身也無需進行架構調整。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="382" src="https://oscimg.oschina.net/oscnet/up-bd747f6707bdda01232f5cfe58e100aad88.png" width="848" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;KN 性能優化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;完成適配後，我們發現卡頓情況非常嚴重，從而進一步對 Kotlin-Native 性能進行評估，我們採用了官方 Benchmark 進行對比，測試發現鴻蒙耗時是 iOS 相同性能機器的 2.48 倍。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="253" src="https://oscimg.oschina.net/oscnet/up-3666432185a744a6d7a106b801c346a7312.png" width="698" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;我們需要針對鴻蒙平台進行一系列的優化，經過初步分析，我們也規劃了性能優化的初步優化思路。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="805" src="https://oscimg.oschina.net/oscnet/up-54854c300951cfe8df58f5b20a3e01b7569.png" width="695" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;內聯優化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;我們分別對比了相同 benchmark 生成的 Kotlin IR、LLVM IR 文件。發現 LLVM IR 在內斂上更加充分，特別是對於關鍵函數，例如 EnterFrame 等，反觀鴻蒙平台此類優化更&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;少&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="287" src="https://oscimg.oschina.net/oscnet/up-7c2c890d0645c2a2b2fe6db5b65cfac790c.png" width="832" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;嘗試添加 always inline 後，發現程序性能得到了較為顯著的影響。但相對 iOS 仍然有一定差距。通過分析 LLVM 的內聯 pass 發現，在處理 EnterFame 等函數時，會對比 cpu feature 的兼容性，Kotlin 和框架內部 C++代碼在生成 LLVM 的函數時，他們各自攜帶的 cpu feature 不一致，導致無法進行內聯。配置正確的屬性後，此問題得到修復。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="419" src="https://oscimg.oschina.net/oscnet/up-eab30cb89a126d1445aabbab2a42ba6856a.png" width="846" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;ThreadLocal 引發的性能低&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;通過對 Benchmark 中耗時超 iOS 的 case 進行深度分析，最終發現如下高頻堆棧。線程私有數據的性能測試結果表明 Ohos 耗時波動較大。Ohos 耗時是 iOS 的 2-3 倍。（展示 0ns 是由於初期鴻蒙 trace 工具不完善導致，現已修復）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="337" src="https://oscimg.oschina.net/oscnet/up-f0911eefa365ad7cf3f63373aa9fca2baed.png" width="756" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;由於 Kotlin-Native 在內存分配時都依賴 ThreadLocal 來訪問線程獨立的 Page，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;故&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;訪問頻率極高，導致性能低下。分析發現鴻蒙平台默認採用了軟件模擬的 thread_local。所以我們在編譯時通過參數強制使用硬件 thread_local，整體性能提升了 30%。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;協程性能優化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;將 Jetbrains 的 Compose 成功適配到 Ohos 後，長列表的滑動過程中頻繁出現卡頓現象。trace 分析發現異常的處理花費了大量的時間。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="402" src="https://oscimg.oschina.net/oscnet/up-f2d9cfc592a3f29b871ab4d5028e01fd551.png" width="849" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;經技術架構分析，Compose Multiplatform 框架的協程調度機制深度依賴異常處理模型實現任務恢復與取消控制。其底層實現中，KN 運行時將異常處理橋接至 C++異常體系，該設計在運行時會產生顯著性能損耗：當異常觸發時，系統需沿調用棧進行逐級回溯以定位匹配的異常捕獲點，其時間複雜度與調用棧深度呈正相關。更值得注意的是，該過程伴隨大量 C++異常對象的動態構建與析構操作，頻繁的內存分配與釋放行為進一步加劇了執行時延，導致關鍵路徑上的協程調度效率受限於異常處理機制的性能瓶頸。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;同時鴻蒙系統 libhilog.so 捕獲了拋出的異常進行處理，造成了大量延遲，與鴻蒙專家溝通後得到妥善優化。最終長列表在滑動場景能夠穩定在 120Hz，處理方式如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;緩存或放棄部分關鍵位置的異常，降低異常處理的耗時與頻率。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;解決 libhilog.so 系統庫對於異常的非法捕獲。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;調試性能優化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;使用 Jetbrains 的 Kotlin Native debuging 腳本後，調試斷點及打印變量耗時遠超 Native 。通過 trace 分析發現其 KDS 與 LLDB 交互極為原始和簡單。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="255" src="https://oscimg.oschina.net/oscnet/up-d6e41a97c0596ea36e2b6d54fc7ab558cc0.png" width="638" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;經技術架構分析與處理，在 KDS 與 LLDB 上運用流程合併、複用、緩存、預加載潛在下一跳、局部調試的可容錯優化等手段提高其通信和處理效率。整體性能視實際情況提升數倍至幾十倍（提升幅度隨調試棧的變量加密加深等因素影響），近似 Native。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;鴻蒙繪製不同步問題解決&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;由於兩種組件屬於獨立的繪製層，在鴻蒙系統中存在不同步的問題。整體效果如圖，Compose 的列表混排 ArkUI 的元素進行滾動，兩個同步向上進行運動，由於不同步，UI 銜接處會展現出空白區域，出現割裂的現象。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="452" src="https://oscimg.oschina.net/oscnet/up-82edc7b40785e81987cd2304d2558f3ebbf.png" width="248" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;核心問題時鴻蒙採用的是集中渲染架構，XComponent 的獨立繪製模式與 ArkUI 的繪製發生在不同的進程，無法保證完全不同。所以我們採用 XComponent 的 Texture 模式，將內容繪製到 FBO 中，由 FBO 參與原有的 ArkUI 的繪製節奏，來保證完全的同步。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="491" src="https://oscimg.oschina.net/oscnet/up-97f8aa5c28232e780f413fc51aee9fe01eb.png" width="904" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;iOS 多模態渲染&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;在基於 UIKit 進行渲染的基礎思路上，我們也發現瞭如 CALayer 重疊、未正確放置、無法複用等問題。對於 Android 來説，其是獨立繪製架構，每個進程自己完成內容的繪製，所以畫布是一整塊，內容都繪製在其中，通過 Skia 的 PictureRecorder 命令錄製功能進行命令的快速回放。但這種模式在 iOS 集中渲染架構上就不太適用了，需要有一個工具來進行差量處理繪製命令。所以我們設計了基於 iOS 的 PictureRecorder 局部更新架構。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="322" src="https://oscimg.oschina.net/oscnet/up-1424f44ca855ce5030e5d32696b72a2e20c.png" width="836" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;在 PictureRecorder 中，我們對繪製命令進行差量，只更新變化的部分，從而提升繪製效率。PictureRecorder 核心就是我們通過 hash 來判斷繪製指令是否發生變化，常規的這種方式能夠提升繪製效率，但當頁面無比複雜時，hash 計算偶爾也會變成一種負擔。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;PictureRecorder 進行了進一步升級&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;我們優化的核心思路是，通過增量 hash 來減少 hash 的計算量。每一個 draw 函數執行的時候，都會&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;對&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;當前的 hash 和，指令 id 進行一次合併。並計算出最終的 hash。這個 hash 記錄了一次完整&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;地&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;使用。增量 hash 的目的是減少 diff 操作，這種方式可以有效&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;地&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;減少，兩次指令相同的比較。在壓力測試中還發現 OC 對象的創建和釋放耗時也會被放大。這種情況在騰訊視頻複雜頁面回遷的過程中尤其明顯，因此，這裏還將原先由 OC 對象代表的指令，改為了非常簡單的 C 結構體。之前的 OC 閉包也去掉了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="328" src="https://oscimg.oschina.net/oscnet/up-a9df7dea5c471908dbbfdc754231c24cee7.png" width="836" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="414" src="https://oscimg.oschina.net/oscnet/up-5aba3bd8fa3844ca4cd20e6d01c68d0774f.png" width="344" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;優化效果：以騰訊視頻的視頻播放頁面為例，首次渲染耗時&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#de3c36"&gt;降低 13%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;，再次渲染耗時&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#de3c36"&gt;降低 56%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;與 KuiklyUI 的差異&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span style="background-color:#fcfcfc"&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;跨端框架自渲染與原生渲染在性能表現與多端適配層面各具優勢。為滿足業務場景的差異化需求，騰訊大前端 Oteam 同時進行兩個方案探索。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;原生渲染方案 KuiklyUI：側重於靜態化+動態化雙運行模式，採用輕量原生渲染保持原生 UI 體驗並具備高度一致性，並基於原生組件映射的方式支持 Compose API（&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;本次已同步推出&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;），支持 H5 和小程序（6 月底推出）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;自渲染方案 ovCompose：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#262626"&gt;專注於全面對齊 Compose Multiplatform 標準 API，採用自渲染方式實現鴻蒙平台的適配，確保三端高度一致性。針對 iOS 上較多的存量業務，提出了多模態渲染方案解決低端 iPhone 內存緊張、混排原生視圖、手勢等問題。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;開源説明&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;此次開源共包含 5 個倉庫，包含了 ovCompose 和 KuiklyBase。倉庫 Group 地址為：https://github.com/Tencent-TDS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="469" src="https://oscimg.oschina.net/oscnet/up-2ed51165e56a4efa9b7c6987ec47ac84ff3.png" width="832" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;計劃&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;隨着這幾年的快速發展，KMM 生態得到了長足的發展，Kotlin-Nativ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;e 的執行性能在很多方面已經超越了 Kotlin-JVM，但目前 Compose Multiplatform 跨平台技術還沒有達到成熟的狀態（特別是 GC），ovCompose&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;&amp;nbsp;&amp;amp; KuiklyBase 將持續優化，為開發者帶來體驗更好、性能更強的跨端開發體驗。以下是我們重點優化的方向：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;GC 在業務場景的表現&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;Kotlin-Native 組件化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;Kotlin-Native 的開發體驗優化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#333333"&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;—&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span style="color:#3e4753"&gt;UIKit 渲染模式進一步對齊 Skia 的渲染&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353990</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353990</guid>
      <pubDate>Sat, 10 May 2025 09:39:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>Snow 編程語言心路歷程</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;h1&gt;&lt;span&gt;&lt;/span&gt;1. Snow 心路歷程&lt;/h1&gt; 
&lt;h2&gt;1.1 Snow 簡介&lt;/h2&gt; 
&lt;p&gt;由 Java 語言編寫的虛擬機與編譯器，專為大型語言模型（LLM）量身定製的編程語言。&lt;a href="https://gitee.com/jcnc-org/snow"&gt;項目鏈接&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;1.2 背景與目標讀者&lt;/h2&gt; 
&lt;p&gt;自 ChatGPT 3.5 誕生以來，越來越多的個人和企業將 LLM 生成的代碼融入日常開發與自動化。然而，實踐證明：LLM 生成的代碼雖然「看起來沒問題」，卻常因對底層語言細節把握不準導致微妙 Bug——比如運算符優先級混淆、作用域處理錯誤、甚至基礎庫調用都無法編譯通過。&lt;/p&gt; 
&lt;p&gt;於是，我萌生了這樣一個想法：&lt;strong&gt;能否設計一門編程語言，讓 LLM 在「語法層面」能夠更精準、高效地理解和生成代碼？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;傳統編程語言的設計多偏重「計算機」的執行效率，程序員往往在抽象表達和底層性能之間不斷權衡。Ruby 之父松本行弘提出「為人而不是為機器編程」的理念。而在 LLM 日益普及的今天，我們應當承認：大型模型正成為「超級程序員」，它們不僅是助手，更是「代碼生產的中介」。如果一門語言的語法和設計能最大化發揮 LLM 的推理與生成能力，人機協作的效率將被極大提升。&lt;/p&gt; 
&lt;p&gt;因此，&lt;strong&gt;Snow&lt;/strong&gt; 的使命是：讓腳本語言不再「讓人頭疼」，而是「讓 LLM 更加從容地書寫」。目標受眾涵蓋 LLM 愛好者、開發者、對編譯原理感興趣的學生，以及對性能有追求的工程師甚至是初學者——每個人都能在 Snow 中找到樂趣與成長。&lt;/p&gt; 
&lt;h2&gt;1.3 文章目的&lt;/h2&gt; 
&lt;p&gt;本文將帶你完整體驗 Snow 從零到 v0.1 的誕生歷程，圍繞四個核心目標：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;興趣驅動的堅持&lt;/strong&gt;：用真實經歷激勵更多人相信「興趣是最好的動力」，哪怕工作再忙，也能靠熱愛堅持探索。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;從規劃到實踐的拆解&lt;/strong&gt;：詳解在有限資源下，如何一步步拆解出詞法分析、語法解析、AST 構建、解釋執行等關鍵模塊，以「先可用後完備」為原則，穩步推進。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;經驗與反思&lt;/strong&gt;：不僅有「成功輸出 1+1=2」的成就感，也有調試死循環、運算符衝突等踩坑經歷，全方位展示編程語言設計的挑戰與思考。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;激勵與號召&lt;/strong&gt;：希望 Snow 成為開源社區的新起點，邀請更多夥伴參與，見證從 v0.2、v1.0 甚至到未來併發、標準庫、包管理等更大夢想的實現。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h1&gt;2. 項目緣起與動機&lt;/h1&gt; 
&lt;h2&gt;2.1 現有工具的痛點&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;腳本語言過於靈活，缺乏規範&lt;/strong&gt; 常見的腳本語言如 Python、PHP、Ruby，雖然語法簡潔、上手快，但「靈活性」本身也帶來了不少隱患：變量類型可以隨意變化，作用域和命名規則寬鬆，團隊協作時代碼風格極易失控，隱蔽 Bug 難以及時發現。自動化運維和日常數據處理腳本往往隨手一寫，維護與交接時卻漏洞百出、溝通成本高。許多開發者都在思考：如果有一門語法嚴謹、行為可預測，並天然適合團隊協作與 LLM 生成的腳本語言，是不是能讓代碼質量和工程效率都上一個台階？&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;缺乏專為 LLM 設計的腳本語言&lt;/strong&gt; 當下主流編程語言，基本都是「為人類程序員」而設計，很少考慮 LLM 的生成和推理習慣。比如：部分語法容易混淆，作用域和可見性規則不直觀，LLM 在生成時不僅需要大量提示，結果還常常不理想。缺少一門語法清晰、特徵單一、對 LLM 友好的腳本語言，導致自動化和智能生成代碼場景下，仍然存在很多不可控和效率瓶頸。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;2.2 觸發想法的場景&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;對高效與規範的需求日益突出&lt;/strong&gt; 在實際開發和運維工作中，我們經常要寫各種自動化腳本。由於編程語言過於靈活，代碼風格極易失控，維護起來痛苦不堪。團隊中常常討論：能否有一門語法嚴謹、易於規範化、適合團隊協作的腳本語言？大家都希望提升代碼質量，減少後期返工。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;自研編程語言的大膽設想&lt;/strong&gt; 隨着 LLM 在自動化、輔助編程中的應用普及，越來越多場景下希望直接「讓 LLM 寫代碼」。但事實是，不管是讓 LLM 生成 Python 還是 PHP，總要寫很多提示，還要人工修正各種細節。由此引發思考：如果有一門對 LLM 友好的腳本語言，語法特徵清晰、行為可預測，能不能大幅提升代碼自動生成與落地的效率？&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;2.3 項目願景&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;語法嚴謹、協作友好，降低維護成本&lt;/strong&gt; Snow 的首要目標是打造一門結構清晰、語法規範的編程語言，讓團隊成員在協作開發、交接維護腳本時，不再被各式各樣的「靈活寫法」困擾。通過約定明確、易讀易寫的語法，讓代碼風格自然統一，極大降低維護與溝通成本。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;為 LLM 生成量身設計，提升自動化與智能化編程體驗&lt;/strong&gt; Snow 從設計之初就充分考慮大型語言模型（LLM）的生成與理解特性，語法特徵清晰、指令表達直觀，方便 LLM 高效、準確地生成編程語言。無論是日常自動化、數據處理，還是和 LLM 配合進行代碼批量生產、校驗，都能極大提升人機協作效率。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;輕量高效，逐步擴展性能與生態&lt;/strong&gt; 在保證「開箱即用」的體驗前提下，Snow 注重執行效率，力爭做到比傳統解釋型腳本更快、資源佔用更低。隨着版本迭代，將逐步引入併發機制、標準庫擴展以及跨平台支持，讓 Snow 既可嵌入大型系統、也適合高效開發微服務或日常自動化腳本，最終發展為既利於團隊協作，也能支撐 LLM 驅動智能開發的現代編程語言。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h1&gt;3. 開源決策與第一次公開&lt;/h1&gt; 
&lt;h2&gt;3.1 為什麼開源&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;獲得社區反饋，檢驗設計思路&lt;/strong&gt;：閉門造車易「自嗨」，開源能快速獲得用戶和專家的多視角建議。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;邊開源邊完善，更吸引貢獻者&lt;/strong&gt;：功能精簡但可用時就發佈，容易吸引早期用戶參與共建。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;3.2 開源準備工作&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;許可證選擇&lt;/strong&gt;： 採用 &lt;a href="https://gitee.com/jcnc-org/snow/blob/main/LICENSE"&gt;Apache-2.0&lt;/a&gt;，最大程度降低貢獻門檻。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;3.3 項目運行輸出&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-Snow"&gt;## 源代碼 (main.snow)
module: Main
    import:Math
    function: main
        parameter:
        return_type: int
        body:
            Math.factorial(6L,1L)

            return 0
        end body
    end function

end module

## 源代碼 (test.snow)
module: Math
    function: factorial
        parameter:
            declare n1: long
            declare n2: long
        return_type: long
        body:
           return n1+n2
        end body
    end function
end module

## 編譯器輸出
### AST
[
  {
    "type": "Module",
    "name": "Main",
    "imports": [
      {
        "module": "Math",
        "type": "Import"
      }
    ],
    "functions": [
      {
        "type": "Function",
        "name": "main",
        "parameters": [
          
        ],
        "returnType": "int",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "Math"
                },
                "member": "factorial"
              },
              "arguments": [
                {
                  "type": "NumberLiteral",
                  "value": "6L"
                },
                {
                  "type": "NumberLiteral",
                  "value": "1L"
                }
              ]
            }
          },
          {
            "type": "Return",
            "value": {
              "type": "NumberLiteral",
              "value": "0"
            }
          }
        ]
      }
    ]
  },
  {
    "type": "Module",
    "name": "Math",
    "imports": [
      
    ],
    "functions": [
      {
        "type": "Function",
        "name": "factorial",
        "parameters": [
          {
            "type": "long",
            "name": "n1"
          },
          {
            "type": "long",
            "name": "n2"
          }
        ],
        "returnType": "long",
        "body": [
          {
            "type": "Return",
            "value": {
              "type": "BinaryExpression",
              "left": {
                "type": "Identifier",
                "name": "n1"
              },
              "operator": "+",
              "right": {
                "type": "Identifier",
                "name": "n2"
              }
            }
          }
        ]
      }
    ]
  }
]
### IR
func main() {
  %0 = CONST 6
  %1 = CONST 1
  %2 = CALL Math.factorial, %0, %1
  %3 = CONST 0
  RET %3
}
func factorial(%0, %1) {
  %2 = ADD_L64 %0, %1
  RET %2
}

### VM code
112 6
152 0
112 1
152 1
162 0
162 1
201 12 2
152 2
111 0
151 3
161 3
255
162 0
162 1
11
152 2
162 2
202
Calling function at address: 12
Return 7
Process has ended


### VM Local Variable Table:
0: 6
1: 1
2: 7
3: 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h1&gt;4. 從 v0.1 到 v0.2 / v1.0 的計劃與展望&lt;/h1&gt; 
&lt;h2&gt;4.1 v0.2 初步目標&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;完善變量作用域與高級函數調用&lt;/strong&gt;： 支持函數參數、返回值、本地與全局變量隔離，以及閉包基礎，為併發/異步打基礎。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;完善錯誤提示與調試信息&lt;/strong&gt;： 報錯更精準，方便新手調試。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;預計發佈日期：2025 年 7 月 30 日&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;4.2 v0.3 目標&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;IDE 的支持&lt;/strong&gt; 重構和優化&lt;a href="https://gitee.com/jcnc-org"&gt;JCNC 開源社區&lt;/a&gt;的&lt;a href="https://gitee.com/jcnc-org/JNotepad"&gt;JNotepad&lt;/a&gt;,實現 Snow 官方 IDE 的發佈。 &lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-d22e932084b5001fb490fd1b969b9954f74.png" referrerpolicy="no-referrer"&gt; &lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-20483b06cc294637cbe3b20009f0d42ed37.png" referrerpolicy="no-referrer"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-0148d345fbcc1d3c35e8353e1eaf7ae5e01.png" referrerpolicy="no-referrer"&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;4.3 v1.0 長期規劃&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;初步標準庫&lt;/strong&gt;： I/O、字符串、JSON、文件系統，滿足日常腳本需求。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;包管理與模塊加載&lt;/strong&gt;： 設計 &lt;code&gt;snowpkg&lt;/code&gt;，支持一鍵安裝依賴、自動模塊導入。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;社區協作與貢獻&lt;/strong&gt;： 開設設計討論區、每月線上分享，鼓勵貢獻代碼與案例，讓更多人蔘與 Snow 的成長。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;h1&gt;5. 個人感言與號召&lt;/h1&gt; 
&lt;h2&gt;5.1 學習收穫與成就感&lt;/h2&gt; 
&lt;p&gt;回望從零到 v0.1 的歷程,我最開始設計了虛擬機,然後設計的編譯器，最震撼的是：讓一個想法變成可運行的代碼，哪怕只輸出一句「Hello, Snow!」也足以令人熱血沸騰。每一次 Snow 在屏幕上輸出，都讓我更深刻理解了編譯原理的樂趣。&lt;/p&gt; 
&lt;h2&gt;5.2 技術敬畏與情感共鳴&lt;/h2&gt; 
&lt;p&gt;也許有人會説「輸出一句話算什麼」，但其實，每一個簡單的表達式背後，都凝結了無數技術細節：多字符運算符的處理、優先級解析、AST 與符號表、作用域管理、底層 GC 可行性……每一環都讓人敬畏計算機科學之美。&lt;/p&gt; 
&lt;h2&gt;5.3 歡迎你的加入&lt;/h2&gt; 
&lt;p&gt;真誠邀請所有對編程語言、編譯原理、LLM 應用感興趣的小夥伴：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;在 Gitee 提交 Issue，反饋使用體驗和建議；&lt;/li&gt; 
 &lt;li&gt;Fork 倉庫、貢獻 PR，參與語法和功能共建；&lt;/li&gt; 
 &lt;li&gt;加入討論羣，與社區探討 Snow 如何更適配 LLM 未來需求；&lt;/li&gt; 
 &lt;li&gt;撰寫教程、錄製視頻，讓更多人瞭解 Snow 的故事。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt;
 聯繫方式 (直接和作者對話和加入羣聊): 微信: xuxiaolankaka QQ: 1399528359
&lt;/blockquote&gt; 
&lt;p&gt;對於從未寫過語言的初學者，我想説：&lt;strong&gt;不要害怕，從 Hello World 開始，你會發現編譯原理其實很有趣。&lt;/strong&gt; 讓我們一起，把 Snow 打造為兼顧 LLM 友好和人類易用的創新編程語言。也許，下一個改變編程世界的創舉，就在我們手中誕生。&lt;/p&gt; 
&lt;hr&gt; 
&lt;blockquote&gt;
 &lt;strong&gt;致謝&lt;/strong&gt; 感謝每一位為 Snow 提出建議、陪我深夜調試的朋友。是你們的批評與鼓勵，讓 Snow 一路成長。讓我們共同期待 Snow 走得更遠、更高、更強！
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353986</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353986</guid>
      <pubDate>Sat, 10 May 2025 09:31:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>小米 Mi-BRAG 獲中國信通院可信 AI RAG 評估最高等級</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;小米技術官博&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2Fttarticle%2Fp%2Fshow%3Fid%3D2309405174583971152010" target="_blank"&gt;發文稱&lt;/a&gt;，2025 年 5 月，小米自研智能知識庫問答框架—Mi-BRAG 順利通過中國信息通信研究院（以下簡稱「中國信通院」）組織的「可信 AI 檢索增強生成（RAG）」評估，並獲當前最高評級 4+級。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img alt="" height="423" src="https://oscimg.oschina.net/oscnet/up-191f17da83d85c142df6d2a600df8a7defc.jpg" width="300" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Mi-BRAG 是小米大模型團隊自主研發的智能知識庫問答框架，該框架通過四大核心技術體系重構知識處理範式，支持多場景定製化的智能知識問答技術方案。目前 Mi-BRAG 已在公司多個場景中落地，包括小愛同學的個人信息問答、汽車問答助手、商品問答等。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此次評估依據中國信通院發佈的《檢索增強生成技術要求與評估方法》標準進行，該標準體系覆蓋 RAG 技術的兩大核心能力（技術能力與應用能力）、六個關鍵能力子域及二十餘項能力項。在 25 項能力評估中，Mi-BRAG 表現亮眼，23 項能力獲得 5 分，尤其在知識接入、檢索、生成、優化等核心技術能力，以及調用方式、安全性等應用能力上均獲滿分。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此外，2025 年 4 月 Mi-BRAG 在第三方評測機構 SuperCLUE-RAG 的評估中取得第一名的成績。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="282" src="https://oscimg.oschina.net/oscnet/up-5354364f22a2508bca43054664501042fda.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353981</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353981</guid>
      <pubDate>Sat, 10 May 2025 09:13:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Gitee Test：驅動軟件工廠 DevSecOps 落地，保障關鍵領域安全穩定</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;作者：Gitee DevSecOps 團隊，李穎萍，羅婷&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;在國家關鍵領域，軟件系統已成為核心戰鬥力的重要組成部分。然而，與通用商業軟件不同，關鍵領域軟件在安全性、複雜性、實時性、保密性等方面都提出了極高要求。如何在保障安全合規的前提下，提升測試效率、確保系統穩定，成為當前軟件質量保障體系中的核心挑戰。&lt;/p&gt; 
&lt;p&gt;本文將圍繞關鍵領域軟件測試的主要痛點展開分析，並介紹 Gitee Test 在應對這些挑戰中的實踐探索與技術能力。&lt;/p&gt; 
&lt;h2&gt;關鍵領域軟件測試的痛點與挑戰&lt;/h2&gt; 
&lt;h3&gt;安全合規要求極高&lt;/h3&gt; 
&lt;p&gt;關鍵領域軟件涉及國家軍事機密和安全，需要嚴格遵循信息安全等級保護、關鍵領域行業安全規範等多項安全標準和法規。測試過程中需對每個功能模塊、每行代碼進行深度安全審查，確保無安全漏洞或隱患。由於安全標準複雜多變，測試人員需不斷學習更新知識，以滿足合規要求。&lt;/p&gt; 
&lt;h3&gt;系統複雜性大&lt;/h3&gt; 
&lt;p&gt;關鍵領域軟件通常集成多種複雜系統，包括硬件、操作系統、通信協議等。系統間交互複雜，可能引發兼容性和潛在故障問題。例如，不同硬件型號可能影響軟件性能，不同操作系統版本可能導致功能異常。此外，關鍵領域軟件還可能與指揮控制、情報分析等軍事系統集成，進一步增加測試複雜性。&lt;/p&gt; 
&lt;h3&gt;數據保密性強&lt;/h3&gt; 
&lt;p&gt;關鍵領域軟件處理大量敏感軍事數據，數據保密性至關重要。測試環境搭建及測試數據使用管理需採取嚴格保密措施，防止數據泄露。實際操作中，完全保障數據安全非常困難，數據泄露將帶來嚴重後果。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;Gitee Test 如何應對關鍵領域軟件測試挑戰&lt;/h2&gt; 
&lt;h3&gt;用例一站式管理&lt;/h3&gt; 
&lt;p&gt;Gitee Test 專註解決用例沉澱難題，提供強大的用例庫管理功能。測試團隊能快速前置數據、步驟和結果，實現用例高效維護。支持腦圖視圖，使用例結構直觀，便於團隊理解和維護。&lt;/p&gt; 
&lt;p&gt;用戶可直接在腦圖中添加、刪除、修改用例，大幅提升用例創建和更新速度，確保測試用例與最新產品需求保持同步，避免頻繁切換界面或工具。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0606/171100_hd0h_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;詳盡規劃與執行&lt;/h3&gt; 
&lt;p&gt;系統提供清晰完善的測試計劃制定和跟蹤流程。測試團隊可制定詳盡測試計劃，明確任務分配，並記錄測試任務與需求或開發任務的對應關係，確保測試緊扣需求開展。藉助實時進度更新，團隊能精準掌控測試階段進展，及時瞭解完成情況、問題及隱患。&lt;/p&gt; 
&lt;p&gt;一旦發現延誤風險，可迅速調整資源或協調相關部門，保障測試與開發同步，減少重複勞動和時間浪費，提高軟件交付效率和質量。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0606/171112_VWk6_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;多維度質量分析&lt;/h3&gt; 
&lt;p&gt;系統內置豐富組件模板，功能齊全，滿足多場景需求，且支持用戶自定義測試報告模板。完成設置後，系統自動生成詳盡準確的測試報告。通過多維度統計指標，如用例覆蓋率、缺陷密度、缺陷趨勢等，幫助團隊全面瞭解軟件質量狀況。測試報告支持識別質量瓶頸，分析缺陷根因，制定優化措施，助力提升軟件穩定性和用戶體驗。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0606/171122_RNFe_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;總結與展望&lt;/h2&gt; 
&lt;p&gt;關鍵領域軟件測試面臨安全合規要求高、系統複雜、實時性強、數據保密性嚴和測試成本高等多重挑戰。實際應用表明，Gitee Test 在提升測試效率、降低成本、發現並解決軟件問題方面取得顯著成效。&lt;/p&gt; 
&lt;p&gt;隨着國內關鍵領域發展，對軟件質量和安全要求日益提升。Gitee Test 將持續技術創新和功能升級，滿足關鍵領域測試需求。未來將加強人工智能、大數據等新興技術應用，提升測試智能化水平；完善安全掃描規則和算法，應對複雜安全威脅；拓展雲測試服務，為關鍵領域企業提供更加便捷、高效的國產化測試解決方案。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:left"&gt;Gitee DevSecOps 的現代化研發生態&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;Gitee DevSecOps 是一站式國產化研發與交付平台，集成了代碼託管（Code）、項目協作（Team）、持續集成（CI）、持續部署（CD）、代碼安全（Scan）、數據洞察（Insight）等多項能力，致力於打造具備全生命週期管控能力的現代軟件工廠。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0523/174619_MpFL_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgitee.cn%2Ffactory" target="_blank"&gt;https://gitee.cn/factory&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;平台設計充分考慮關鍵領域行業對安全性、可控性、合規性的極高要求，具備以下核心特徵：&lt;/p&gt; 
&lt;ul style="list-style-type:disc; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;國產化適配與私有化部署能力：全面兼容國產操作系統與基礎設施，支持靈活部署於內網環境，保障數據主權；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;全流程 DevSecOps 管控體系：代碼從提交、審核、構建、掃描、部署到發佈全流程可視、可追溯、安全可控；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;模塊化產品結構：各能力模塊（如 Code、Team、Repo、Pipe、Scan、Insight 等）可靈活組合、漸進集成，適配多樣化團隊與流程要求；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;深度可觀測與度量體系：內置研發效能度量與數據洞察引擎，支撐管理者宏觀掌控項目態勢與交付健康度。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0516/162046_MD15_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;在多個國家級重大項目與關鍵領域單位落地實踐中，Gitee DevSecOps 已成為構建「自主、可控、高效、安全」的軟件工程體系的重要基石。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-825957ffbed1798ea7b6a37079fd6c99d18.gif" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353978</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353978</guid>
      <pubDate>Sat, 10 May 2025 09:11:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>可靈 AI 月度付費金額連續兩月破 1 億元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;6 月 6 日，快手旗下可靈 AI 上線一週年。快手官網信息顯示，可靈 AI 在推出 10 個月之後（即今年 3 月）的年化收入運行率（Annualized Revenue Run Rate）突破 1 億美金，其今年 4 月和 5 月的月度付費金額均超過 1 億元。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="310" src="https://oscimg.oschina.net/oscnet/up-b9463ede2c362ab326f9367f3ccb8310a8c.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;從收入構成來看，目前 P（Prosumer）端付費訂閲會員貢獻可靈 AI 將近 70% 的營業收入。P 端付費訂閲會員指自媒體視頻創作者和廣告營銷從業者等專業用戶，他們兼具 C 端用戶的傳播屬性和 B 端用戶的付費能力，是目前視頻生成大模型的核心受眾羣體。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;作為全球首個用戶可用的 DiT 視頻生成模型，可靈 AI 在一年時間內，已累計完成超 20 次迭代，全球用戶規模突破 2200 萬，為超過 1 萬家的企業客戶提供 API 服務。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;近日，可靈 AI 還宣佈與熱門手遊《逆水寒》達成深度合作，將 AI 視頻生成能力內置於遊戲中，上線「圖生動圖」互動玩法。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353974</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353974</guid>
      <pubDate>Sat, 10 May 2025 09:01:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>破解搜索質量的關鍵：判斷列表的作用</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;作者：來自 Elastic&amp;nbsp;Daniel Wrigley&lt;/p&gt; 
&lt;p&gt;&lt;img height="559" src="https://oscimg.oschina.net/oscnet/up-7653b2bca5b8fe2a261e9f020834cb43f84.png" width="1047" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;探索為什麼判斷列表（udgment list）是必不可少的、判斷的不同類型，以及定義搜索質量的關鍵因素。&lt;/p&gt; 
&lt;p&gt;Elasticsearch 擁有大量新功能，幫助你為你的使用場景構建最佳的搜索解決方案。現在就深入我們的&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felastic%2Felasticsearch-labs%3Ftab%3Dreadme-ov-file%23python-notebooks%3Fcta%3Dread-notebook%26tech%3Dgithub%26plcmt%3Dcross%2520module%26pg%3Dsearch-labs" target="_blank"&gt;示例筆記本&lt;/a&gt;瞭解更多內容，開始&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.elastic.co%2Fregistration%3Fonboarding_token%3Dsearch%26cta%3Dcloudregistration%26tech%3Dtrial%26plcmt%3Dcross%2520module%26pg%3Dsearch-labs" target="_blank"&gt;免費雲試用&lt;/a&gt;，或者在你的&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Felasticstack.blog.csdn.net%2Farticle%2Fdetails%2F143747798" target="_blank"&gt;本地機器&lt;/a&gt;上試用 Elastic。&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;在當今數字時代，搜索引擎是我們獲取信息的支柱。無論是網頁搜索引擎、電商網站、企業內部搜索工具，還是 RAG （ Retrieval Augmented Generation ）系統，搜索結果的質量直接影響用戶的滿意度和參與度。但是什麼能確保搜索結果符合用戶的期望？這就需要判斷列表（&lt;strong&gt;judgment list&lt;/strong&gt;） —— 一個用於評估和優化搜索結果質量的工具。在 OpenSource Connections，我們的專家經常幫助客戶創建和使用判斷列表，以提升用戶的搜索體驗。本文將探討判斷列表為何必不可少、判斷的不同類型，以及定義搜索質量的關鍵因素。&lt;/p&gt; 
&lt;span id="OSC_h2_1"&gt;&lt;/span&gt; 
&lt;h2&gt;為什麼需要判斷列表？&lt;/h2&gt; 
&lt;p&gt;判斷列表在持續改進搜索結果質量的循環中扮演着關鍵角色。它們通過提供一組精心整理的評估，來判斷搜索結果是否真正滿足用戶需求，從而為評估搜索相關性提供可靠的基準。如果沒有高質量的判斷列表，搜索團隊將難以解讀來自用戶和自動化信號的反饋，也就難以驗證提升搜索效果的假設。例如，如果某個團隊假設混合搜索會提高相關性，並預計點擊率（ CTR ）會提升 2%，他們就需要判斷列表來對比調整前後的表現，才能得出有意義的結論。&lt;/p&gt; 
&lt;p&gt;這些列表有助於將實驗結果建立在客觀標準之上，確保在大規模上線之前，改動確實對業務結果有積極影響。通過維護強大的判斷列表，搜索團隊可以更有信心地進行迭代，從而以結構化、數據驅動的方式優化搜索體驗。&lt;/p&gt; 
&lt;p&gt;判斷列表是一組搜索查詢與其對應結果的相關性評分組合，也被稱為測試集合。利用該列表計算的指標可作為衡量搜索引擎性能的基準。以下是判斷列表不可或缺的原因：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;評估搜索算法&lt;/strong&gt;：幫助確定搜索算法是否為給定查詢返回了最相關的結果。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;衡量改進或退步&lt;/strong&gt;：當你對搜索引擎進行更改時，判斷列表可以量化這些更改對結果質量的影響。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;提供用戶滿意度洞察&lt;/strong&gt;：通過模擬期望結果，判斷列表能讓系統性能更貼近用戶需求。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;幫助產品開發&lt;/strong&gt;：通過明確產品需求，判斷列表支持搜索工程師實現這些目標。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;例如，當用戶搜索 「500 美元以下的最佳智能手機」 時，判斷列表可以判斷結果是否不僅列出了相關產品，還能滿足查詢中 「價格實惠」 和 「質量優秀」 的意圖。&lt;/p&gt; 
&lt;p&gt;判斷列表用於離線測試。離線測試可以在不耗費時間進行 A/B 測試等線上實驗之前，實現快速、低成本的迭代。理想情況下，結合線上和離線測試可以最大限度地提升實驗效率，並確保搜索質量穩步提升。&lt;/p&gt; 
&lt;span id="OSC_h2_2"&gt;&lt;/span&gt; 
&lt;h2&gt;什麼是判斷？&lt;/h2&gt; 
&lt;p&gt;從本質上講，判斷是一種對某個搜索結果在特定查詢下的相關性進行評分的方式。判斷主要分為兩種類型：&lt;strong&gt;二元判斷&lt;/strong&gt;和&lt;strong&gt;等級判斷&lt;/strong&gt;。&lt;/p&gt; 
&lt;span id="OSC_h3_3"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;strong&gt;二元判斷&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;結果被標記為相關（1）或不相關（0）。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：針對查詢 「無線耳機」 返回的產品頁面，要麼符合查詢意圖，要麼不符合。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;使用場景&lt;/strong&gt;：二元判斷簡單，適用於答案明確的查詢。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_4"&gt;&lt;/span&gt; 
&lt;h3&gt;&lt;strong&gt;等級判斷&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;結果被賦予一個範圍內的相關性分數（例如 0 到 3），每個數值表示不同的相關程度： 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;：完全不相關&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;：可能不相關&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;：可能相關&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;：完全相關&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：對於查詢 「最適合玩遊戲的筆記本電腦」，搜索結果可能評分如下： 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;：專為遊戲設計的筆記本電腦頁面&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;：可能適合玩遊戲的筆記本電腦頁面&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;：與遊戲相關的配件&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;：與遊戲筆記本無關的內容&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;評分也可以是分類而不是數字，例如： 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;完全匹配&lt;/strong&gt;（Exact）&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;可替代&lt;/strong&gt;（Substitute）&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;補充&lt;/strong&gt;（Complement）&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;不相關&lt;/strong&gt;（Irrelevant）&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;使用場景：等級判斷適用於需要細緻評估相關性的查詢，超出 「相關/不相關」 的簡單判斷。這種方式適合受多個因素影響的相關性場景。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;有些評估指標明確要求使用非二元判斷。當我們希望在評估指標中模擬用戶特定的信息檢索行為和期望時，會使用等級判斷。例如：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;增益類指標，如，折扣累計增益（ &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensourceconnections.com%2Fblog%2F2019%2F12%2F09%2Fdemystifying-ndcg-and-err%2F" target="_blank"&gt;DCG&lt;/a&gt; ）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;歸一化折扣累計增益（ &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensourceconnections.com%2Fblog%2F2019%2F12%2F09%2Fdemystifying-ndcg-and-err%2F" target="_blank"&gt;nDCG&lt;/a&gt; ）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;預期倒數排名（ &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensourceconnections.com%2Fblog%2F2019%2F12%2F09%2Fdemystifying-ndcg-and-err%2F" target="_blank"&gt;ERR&lt;/a&gt; ）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;這些指標可以建模出用戶對結果滿意程度存在差異但仍然相關的情況，這對於那些在做決策前進行研究和信息收集的用戶特別有用。&lt;/p&gt; 
&lt;span id="OSC_h2_5"&gt;&lt;/span&gt; 
&lt;h2&gt;判斷列表示例&lt;/h2&gt; 
&lt;p&gt;我們來看一個用於電商搜索引擎的判斷列表示例：&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Query&lt;/th&gt; 
   &lt;th&gt;Result URL&lt;/th&gt; 
   &lt;th&gt;Relevance&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;wireless headphones&lt;/td&gt; 
   &lt;td&gt;/products/wireless-headphones-123&lt;/td&gt; 
   &lt;td&gt;3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;wireless headphones&lt;/td&gt; 
   &lt;td&gt;/products/noise-cancelling-456&lt;/td&gt; 
   &lt;td&gt;3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;best laptops for gaming&lt;/td&gt; 
   &lt;td&gt;/products/gaming-laptops-789&lt;/td&gt; 
   &lt;td&gt;3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;best laptops for gaming&lt;/td&gt; 
   &lt;td&gt;/products/ultrabook-321&lt;/td&gt; 
   &lt;td&gt;2&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;在這個列表中：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;查詢 「 wireless headphones 」 用來評估兩個產品頁面的相關性，分數表示結果滿足用戶意圖的程度。&lt;/li&gt; 
 &lt;li&gt;得分為 3 表示高度相關，非常匹配，而較低的得分表示結果不夠理想。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;這種結構化的方法讓搜索團隊能夠客觀地評估和優化他們的搜索算法。&lt;/p&gt; 
&lt;span id="OSC_h2_6"&gt;&lt;/span&gt; 
&lt;h2&gt;不同類型的判斷&lt;/h2&gt; 
&lt;p&gt;要創建一個 judgment list，你需要評估搜索結果的相關性，而這個評估可以來自不同的來源。每種類型都有其優點和侷限性：&lt;/p&gt; 
&lt;span id="OSC_h3_7"&gt;&lt;/span&gt; 
&lt;h3&gt;1. 明確判斷&lt;/h3&gt; 
&lt;p&gt;由人工評估者根據預定義的指南來評估搜索結果。通常會優先選擇領域專家（Subject Matter Experts - SMEs）作為評估者，因為他們具備專業知識。明確判斷具有很高的準確性和細緻的洞察力，但也存在一些挑戰。它在評估文檔對查詢的實際相關性方面非常有效。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;優點：&lt;/strong&gt; 準確性高、能細緻理解意圖、能解釋複雜查詢。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;侷限性：&lt;/strong&gt; 對於大規模數據集來説耗時高、成本高，並存在一些挑戰。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;挑戰：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;差異性&lt;/strong&gt;：不同評估者可能對同一結果的判斷不同，造成不一致。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;位置偏差&lt;/strong&gt;：排名靠前的結果往往被認為更相關，無論其實際質量如何。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;專業程度&lt;/strong&gt;：並非所有評估者都具有相同的領域或技術知識，可能導致不準確。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;理解偏差&lt;/strong&gt;：用戶意圖或查詢背後的信息需求可能不清晰或難以理解。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;多任務處理&lt;/strong&gt;：評估者可能同時處理多個任務，導致注意力不集中。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;疲勞&lt;/strong&gt;：判斷過程可能較耗神，隨着時間推移判斷質量下降。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;實際相關性 vs 感知相關性&lt;/strong&gt;：一些結果乍看似乎相關（例如誤導性的產品圖片），但仔細審查後並不相關。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;可擴展性&lt;/strong&gt;：隨着數據集增長，如何高效收集足夠的判斷成為一個後勤難題。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;最佳實踐：&lt;/strong&gt;&lt;br&gt; 為應對這些挑戰，請遵循以下指南：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;明確定義信息需求和任務，減少評估者評分的差異。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;對評估者進行充分培訓，並提供詳細指導。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;避免在列表視圖中進行判斷，以減少位置偏差。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;比較不同羣體（例如領域專家 vs 一般評估者）的判斷結果，找出差異。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用眾包或專業評估機構來高效擴展評估流程。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_8"&gt;&lt;/span&gt; 
&lt;h3&gt;2. 隱式判斷&lt;/h3&gt; 
&lt;p&gt;隱式判斷是通過用戶行為數據推斷得出的，例如點擊率（click-through rates - CTR）、停留時間和跳出率。雖然它們具有顯著優勢，但也面臨一些獨特挑戰。除了相關性，隱式判斷還能反映與用戶偏好相關的搜索結果質量因素（例如價格、配送時間），以及能滿足用戶某些需求或吸引用戶注意的因素（例如產品的可持續性特徵）。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;優點：&lt;/strong&gt; 可擴展且基於真實使用場景，可在無需人工幹預的情況下收集大量數據。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;侷限性：&lt;/strong&gt; 容易受到偏差等問題影響，降低判斷的可靠性。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;挑戰：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;點擊數據較嘈雜&lt;/strong&gt;：用戶可能因搜索結果頁面信息缺失或不清晰而點擊某結果，而非因為該結果真正相關。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;偏差&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;位置偏差&lt;/strong&gt;：用戶更傾向於點擊排名靠前的結果，而不考慮實際相關性。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;展示偏差&lt;/strong&gt;：用戶無法點擊未展示的內容，導致一些潛在相關結果缺乏交互數據。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;概念偏差&lt;/strong&gt;：例如，在網格視圖中，用戶往往更頻繁地與邊緣位置的結果交互。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;稀疏性問題&lt;/strong&gt;：像 CTR 這樣的指標在數據較少時容易失真（例如僅 1 次展示和 1 次點擊時 CTR = 1.0）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;無自然擴展點&lt;/strong&gt;：基本模型如 CTR 缺乏處理複雜用戶行為或反饋的機制。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;最佳實踐：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;為緩解上述挑戰並最大化隱式判斷的價值，請遵循以下方法：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;避免過度依賴容易受位置偏差影響的指標&lt;/strong&gt;：將隱式信號與其他數據點結合使用，形成更全面的評估方式。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;將隱式判斷與明確反饋進行比對&lt;/strong&gt;：將用戶行為數據與人工評分的相關性數據對比，識別一致性與偏差。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;謹慎訓練模型&lt;/strong&gt;：使用能&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dwa88XShl7hs" target="_blank"&gt;考慮用戶行為數據偏差並整合不同信號（如點擊與購買）的模型來訓練&lt;/a&gt;，以減少偏差影響並提升評估質量。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_9"&gt;&lt;/span&gt; 
&lt;h3&gt;3. AI 生成的判斷&lt;/h3&gt; 
&lt;p&gt;AI 生成的判斷利用大型語言模型（LLMs），如 OpenAI 的 GPT-4o，對查詢-文檔對進行評判。這種判斷因其可擴展性和成本效益正在逐漸流行。LLMs 作為評判者能較好地捕捉文檔對給定查詢的實際相關性。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;優點：&lt;/strong&gt; 成本效益高、可擴展、在大規模數據集上保持一致，能快速評估大量結果。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;侷限性：&lt;/strong&gt; AI 生成的判斷可能缺乏特定上下文理解，帶有訓練數據中的偏見，且對極端案例處理不佳。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;挑戰：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;訓練數據偏差&lt;/strong&gt;：AI 模型的輸出質量取決於訓練數據，可能繼承或放大偏見。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;上下文細微差別&lt;/strong&gt;：AI 可能難以處理需要人類理解的主觀或模糊查詢。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;可解釋性&lt;/strong&gt;：理解模型為何做出特定判斷較困難，降低系統信任度。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;可擴展性權衡&lt;/strong&gt;：雖然 AI 容易擴展，但確保所有評估質量需要大量計算資源和可能的微調。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;成本&lt;/strong&gt;：雖然 LLM 判斷可擴展，但並非免費，應密切監控費用。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;最佳實踐：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;為應對這些挑戰並充分利用 AI 生成的判斷，請採取以下措施：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;融入人工監督&lt;/strong&gt;：定期將 AI 判斷與人工明確評估進行比對，發現錯誤和極端案例，並用此信息優化提示詞。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;提升可解釋性&lt;/strong&gt;：使用可解釋 AI 技術提升對 LLM 決策的理解和信任，讓 LLMs 在提示中解釋其判斷理由。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;優化計算資源&lt;/strong&gt;：投資平衡可擴展性與成本效益的基礎設施。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;結合其他判斷類型&lt;/strong&gt;：將 AI 生成判斷與顯式和/或隱式判斷結合，形成全面的評估體系。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;提示詞設計&lt;/strong&gt;：花時間優化提示詞，即使是小改動也能顯著提升判斷質量。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_10"&gt;&lt;/span&gt; 
&lt;h2&gt;搜索質量的不同因素&lt;/h2&gt; 
&lt;p&gt;不同類型的判斷涵蓋搜索質量的不同方面或因素。我們可以將搜索結果質量因素分為三類：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;搜索相關性：&lt;/strong&gt; 衡量文檔與查詢中表達的信息需求的匹配程度。例如： 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;二元判斷：文檔是否滿足查詢（相關或不相關）？&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;分級判斷：文檔在細微尺度上滿足查詢的程度如何？&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;顯式判斷和 AI 生成的判斷在捕捉搜索相關性方面表現良好。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;相關性因素：&lt;/strong&gt; 關註文檔是否符合特定用戶偏好。例子包括： 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;價格：結果是否負擔得起或在指定範圍內？&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;品牌：是否屬於用戶偏好的品牌？&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;可用性：物品是否有庫存或可立即使用？&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;隱式判斷能夠很好地捕捉相關性因素。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&amp;nbsp;滿足度方面：&lt;/strong&gt; 超越相關性和偏好，考慮文檔如何契合更廣泛的用戶價值或目標。例子包括： 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;可持續性：產品或服務是否促進環境責任？&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;道德規範：公司或提供商是否以公平貿易或道德標準著稱？&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;滿足度方面是最難以衡量和量化的。瞭解你的用戶是關鍵，而隱式反饋是朝這個方向邁進的最佳方式。注意隱式反饋中的偏見，並採用技術儘可能地對抗這些偏見，例如&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutu.be%2Fwa88XShl7hs%3Fsi%3D7aao9oQzBSdmwazk" target="_blank"&gt;在基於隱式反饋建模判斷時&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;通過系統地解決這些因素，搜索系統能夠確保對結果質量進行全面的評估和提升。&lt;/p&gt; 
&lt;span id="OSC_h2_11"&gt;&lt;/span&gt; 
&lt;h2&gt;判斷列表在搜索質量改進週期中的位置&lt;/h2&gt; 
&lt;p&gt;搜索質量改進是一個迭代過程，涉及評估和優化搜索算法以更好地滿足用戶需求。判斷列表在&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensourceconnections.com%2Fblog%2F2023%2F10%2F18%2Fcontinuous-experimentation-for-search-improvement%2F" target="_blank"&gt;離線實驗中（下圖中較小的左側循環）起着核心作用&lt;/a&gt;，在這裏，搜索結果根據預定義的相關性評分進行測試，不涉及實時用戶。這使團隊能夠對性能進行基準測試，識別弱點，並在部署更改之前進行調整。離線實驗是一種快速且低風險的方式，用於探索潛在改進，然後再在在線實驗中驗證。&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="601" src="https://oscimg.oschina.net/oscnet/up-5d05cc72ded9f9712795bd343568c5a2d69.png" width="1269" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在線實驗（較大、右側循環）利用實時用戶交互，如 A/B 測試，收集對系統更新的真實反饋。離線實驗通過判斷列表確保基礎質量，在線實驗捕捉動態的現實細節和用戶偏好。兩者相輔相成，構成了一個全面的搜索質量改進框架。&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img src="https://www.elastic.co/search-labs/_next/image?url=https%3A%2F%2Fcdn.sanity.io%2Fimages%2Fme0ej585%2Fsearch-labs-import-testing%2F0d0f5a038c7d1e6f4077e669f6f6dd829b4df632-1600x1211.png&amp;amp;w=3840&amp;amp;q=75" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;div style="text-align:center"&gt;
  來源：Peter Fries。《 
 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhaystackconf.com%2F2018%2Fsearch-quality%2F" target="_blank"&gt;搜索質量 —— 以業務為導向的視角&lt;/a&gt;》。 
&lt;/div&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h2_12"&gt;&lt;/span&gt; 
&lt;h2&gt;創建判斷列表的工具&lt;/h2&gt; 
&lt;p&gt;創建判斷列表的核心是一個標註任務，最終目的是為查詢-文檔對添加相關性標籤。現有的一些服務包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapp.quepid.com%2F" target="_blank"&gt;Quepid&lt;/a&gt;：一個開源解決方案，支持從創建查詢集到用判斷列表衡量搜索結果質量的整個離線實驗生命週期，判斷列表可在 Quepid 中創建。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flabelstud.io%2F" target="_blank"&gt;Label Studio&lt;/a&gt;：一個數據標註平台，主要用於生成訓練數據或驗證 AI 模型。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faws.amazon.com%2Fde%2Fsagemaker-ai%2Fgroundtruth%2F" target="_blank"&gt;Amazon SageMaker Ground Truth&lt;/a&gt;：一個雲服務，提供數據標註以在機器學習生命週期中應用人工反饋。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fprodi.gy%2F" target="_blank"&gt;Prodigy&lt;/a&gt;：一個完整的數據開發體驗，帶有數據標註功能。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_13"&gt;&lt;/span&gt; 
&lt;h2&gt;展望未來：使用 Quepid 創建判斷列表&lt;/h2&gt; 
&lt;p&gt;這篇文章是搜索質量評估系列的第一篇。下一篇我們將深入講解如何使用一個叫 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapp.quepid.com%2F" target="_blank"&gt;Quepid&lt;/a&gt; 的特定工具一步步創建顯式判斷。Quepid 簡化了構建、管理和完善判斷列表的流程，使團隊能夠協作提升搜索質量。敬請期待關於如何利用這個工具提升搜索結果質量的實用技巧和見解。&lt;/p&gt; 
&lt;span id="OSC_h2_14"&gt;&lt;/span&gt; 
&lt;h2&gt;總結&lt;/h2&gt; 
&lt;p&gt;判斷列表是搜索質量評估的基石，提供了衡量性能和指導改進的可靠基準。通過結合顯式、隱式和 AI 生成的判斷，組織能夠全面覆蓋搜索質量的多方面 —— 從相關性和準確性到個性化和多樣性。結合這些方法可以確保一個全面且穩健的評估策略。&lt;/p&gt; 
&lt;p&gt;投入完善的搜索質量策略不僅提升用戶滿意度，還能讓你的搜索系統成為可信賴的工具。無論你是在管理搜索引擎還是優化內部搜索功能，認真對待判斷和搜索質量因素對成功至關重要。&lt;/p&gt; 
&lt;p&gt;與 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensourceconnections.com%2F" target="_blank"&gt;Open Source Connections&lt;/a&gt; 合作，提升你的搜索能力，賦能團隊持續進化。我們有全球客戶成功案例，持續帶來搜索質量、團隊能力和業務績效的顯著提升。歡迎&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensourceconnections.com%2Fcontact%2F" target="_blank"&gt;聯繫我們&lt;/a&gt;瞭解更多。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;原文：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fsearch-labs%2Fblog%2Fjudgment-lists" target="_blank"&gt;Cracking the code on search quality: The role of judgment lists - Elasticsearch Labs&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/3343882/blog/18513695</link>
      <guid isPermaLink="false">https://my.oschina.net/u/3343882/blog/18513695</guid>
      <pubDate>Sat, 10 May 2025 08:47:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>智源研究院推出 Emu3 等「悟界」系列大模型</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;繼「悟道」系列大模型之後，智源研究院推出「悟界」系列大模型。其中包括原生多模態世界模型 Emu3、腦科學多模態通用基礎模型見微 Brainμ、跨本體具身大小腦協作框架 RoboOS 2.0 與具身大腦 RoboBrain 2.0 以及全原子微觀生命模型 OpenComplex2。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;其中，Emu3 旨在讓機器更好地理解和感知世界，通過整合不同類型的數據，如視覺、聽覺和觸覺等，為未來的智能應用提供更為豐富的基礎。Brainμ 基於 Emu3 架構，引入腦信號這一新的模態數據，實現了單一模型完成多種神經科學任務的大一統。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;RoboOS 2.0 與 RoboBrain 2.0 在初代版本基礎上，原有性能大幅提升，並新增多機協作規劃與物理常識驅動的空間推理能力。OpenComplex2 可在原子分辨率層面捕捉分子相互作用及平衡構象，探索微觀構象波動與宏觀生物功能的跨尺度關聯。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;根據介紹，Emu3 基於下一個 token 預測範式統一多模態學習，無需擴散模型或組合式架構的複雜性，通過研發新型視覺 tokenizer 將圖像/視頻編碼為與文本同構的離散符號序列，構建模態無關的統一表徵空間，實現文本、圖像、視頻的任意組合理解與生成。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Emu3 支持多模態輸入、多模態輸出的端到端映射，驗證了自迴歸框架在多模態領域的普適性與先進性，為跨模態交互提供了強大的技術基座。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="281" src="https://oscimg.oschina.net/oscnet/up-84c03e83183cb3e6fbfe38f5c40eb7dc805.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;基於 Emu3 的底層架構，將 fMRI、EEG、雙光子等神經科學與腦醫學相關的腦信號統一 token 化，利用預訓練模型多模態對齊的優勢，可以實現多模態腦信號與文本、圖像等模態的多向映射，並實現跨任務、跨模態、跨個體的統一通用建模，以單一模型完成多種神經科學的下游任務。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Brainμ整合了神經科學領域多個大型公開數據集和多個合作實驗室的高質量神經科學數據，完成了超過 100 萬單位的神經信號預訓練，模型可以支持神經科學領域從基礎研究到臨牀研究和腦機接口應用的不同方向，有望成為腦科學的 「AlphaFold」模型。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;更多詳情可&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FclAKUO1EcL9fDw1OqF1Kkw" target="_blank"&gt;查看官方公告&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353960</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353960</guid>
      <pubDate>Sat, 10 May 2025 08:31:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>UFO² —— 桌面 AgentOS</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                            &lt;p&gt;UFO 現已升級為&lt;strong style="color:#404040"&gt;UFO²&lt;/strong&gt;（Desktop AgentOS），這是可在 Windows 桌面操作系統上運行的新一代代理框架。它旨在跨多個應用程序&lt;strong style="color:#404040"&gt;自動化&lt;/strong&gt;和&lt;strong style="color:#404040"&gt;協調&lt;/strong&gt;任務，使用戶能夠使用自然語言命令與其操作系統無縫交互，而不僅僅是&lt;strong style="color:#404040"&gt;UI 自動化&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img height="310" src="https://static.oschina.net/uploads/space/2025/0427/143355_ifCv_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

&lt;h2 style="text-align:start"&gt;&lt;strong&gt;&lt;span style="color:#404040"&gt;關鍵功能&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;div style="text-align:start"&gt;
&lt;table border="1" cellspacing="0" class="docutils" style="border-collapse:collapse; border-spacing:0px; border:1px solid #e1e4e5 !important; box-sizing:border-box; display:block; empty-cells:show; margin-bottom:24px; overflow:auto; width:696.458px"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;特性&lt;/span&gt;&lt;/th&gt;
&lt;th style="white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;描述&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="background-color:#f3f6f6; border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:0px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;strong style="color:#404040"&gt;Deep OS&amp;nbsp;&lt;/strong&gt;&lt;span style="color:#404040"&gt;&lt;strong&gt;集成&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td style="background-color:#f3f6f6; border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:1px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;結合 Windows UIA、Win32 和 WinCOM，實現一流的控制檢測和本機命令。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:0px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;&lt;strong&gt;畫中畫桌面&lt;/strong&gt;&amp;nbsp;（即將推出）&lt;/span&gt;&lt;/td&gt;
&lt;td style="border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:1px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;自動化在沙盒虛擬桌面中運行，因此您可以繼續使用主屏幕。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="background-color:#f3f6f6; border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:0px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;a href="https://microsoft.github.io/UFO/automator/overview/"&gt;&lt;strong&gt;Hybrid GUI + API Actions&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style="background-color:#f3f6f6; border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:1px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;在可用時選擇本機 API，在不可用時則回退到點擊/擊鍵——快速且強大。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:0px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;a href="https://microsoft.github.io/UFO/advanced_usage/multi_action/"&gt;&lt;strong&gt;Speculative Multi‑Action&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style="border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:1px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;將幾個預測步驟捆綁到一次 LLM 調用中，並進行實時驗證——查詢量&lt;strong&gt;減少高達 51%&lt;/strong&gt;。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="background-color:#f3f6f6; border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:0px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;a href="https://microsoft.github.io/UFO/advanced_usage/reinforce_appagent/overview/"&gt;&lt;strong&gt;Continuous Knowledge Substrate&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style="background-color:#f3f6f6; border-bottom:1px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:1px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;通過 RAG 混合文檔、Bing 搜索、用戶演示和執行跟蹤，供代理隨着時間推移進行學習。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="border-bottom:0px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:0px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;&lt;a href="https://microsoft.github.io/UFO/advanced_usage/control_detection/hybrid_detection/"&gt;&lt;strong&gt;UIA+視覺控制檢測&lt;/strong&gt;&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td style="border-bottom:0px solid #e1e4e5; border-collapse:collapse; border-image:initial !important; border-left:1px solid #e1e4e5; border-right:1px solid #e1e4e5 !important; border-top:1px solid #e1e4e5 !important; vertical-align:middle; white-space:nowrap"&gt;&lt;span style="color:#404040"&gt;使用混合 UIA + 視覺管道檢測標準和自定義控件。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h2 style="text-align:start"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span style="color:#404040"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#fcfcfc"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;架構概述&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img height="329" src="https://static.oschina.net/uploads/space/2025/0427/143509_ctMS_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

&lt;p style="margin-left:0; margin-right:0; text-align:start"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#404040"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#fcfcfc"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;UFO² 作為&lt;strong&gt;桌面代理操作系統&lt;/strong&gt;運行，包含一個多代理框架，其中包括：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ol style="margin-left:0; margin-right:0"&gt;
&lt;li&gt;&lt;strong&gt;HostAgent &lt;/strong&gt;—&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;解析自然語言目標，啓動必要的應用程序，啓動/協調 AppAgents，並引導全局有限狀態機 (FSM)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AppAgents&lt;/strong&gt;&amp;nbsp;— 每個應用程序一個；每個運行一個 ReAct 循環，具有多模式感知、混合控制檢測、檢索增強知識以及在 GUI 操作和本機 API 之間進行選擇的&lt;strong&gt;Puppeteer&lt;/strong&gt;執行器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;知識基礎&amp;nbsp;&lt;/strong&gt;— 將離線文檔、在線搜索、演示和執行跟蹤融合到可在推理時動態檢索的矢量存儲中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推測執行器&amp;nbsp;&lt;/strong&gt;— 通過預測批量可能的操作並一次性根據實時 UIA 狀態進行驗證，大幅減少 LLM 延遲。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;畫中畫桌面&lt;/strong&gt;&amp;nbsp;&lt;em&gt;（即將推出）&lt;/em&gt;— 在獨立的虛擬桌面中運行代理，這樣您的主工作區和輸入設備就不會受到影響。&lt;/li&gt;
&lt;/ol&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/microsoft-ufo</link>
      <guid isPermaLink="false">https://www.oschina.net/p/microsoft-ufo</guid>
      <pubDate>Sat, 10 May 2025 08:00:00 GMT</pubDate>
    </item>
    <item>
      <title>谷歌搜索「AI 模式」可提供數據可視化和自定義圖表支持</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;谷歌搜索「AI 模式」現在可以提供數據可視化和自定義圖表支持&lt;span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"&gt;，讓用戶能用自然語言提示分析複雜數據集和創建自定義圖表。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.google%2Fproducts%2Fsearch%2Fai-mode-data-visualization%2F" target="_blank"&gt;據介紹&lt;/a&gt;，更新後的&lt;/span&gt;「AI 模式」&lt;span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"&gt;能比較分析特定時期的信息，生成交互式圖表並提供全面解釋，藉助 Gemini 多模式功能和多步驟推理方法理解問題意圖，訪問相關歷史和實時信息，還能在圖表生成後選擇時間段提後續問題。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;例如，您無需手動研究單個公司及其股價，而是可以使用 AI 模式比較特定年份不同公司的股票表現。圖表生成後，您可以使用鼠標光標選擇所需的時間段，並根據呈現的數據提出後續問題。這些用於財務查詢的新數據可視化可供&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flabs.google.com%2Fsearch%2Fexperiment%2F22" target="_blank"&gt;在實驗室中啓用 AI 模式實驗&lt;/a&gt;的用戶使用。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1454" src="https://static.oschina.net/uploads/space/2025/0606/150602_Vutt_2720166.png" width="2176" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;5 月 20 日，谷歌在 I/O 大會上正式&lt;a href="https://www.oschina.net/news/350975/google-search-ai-mode-update" target="_blank"&gt;宣佈&lt;/a&gt;谷歌搜索&lt;strong&gt;「AI Mode」（AI 模式）&lt;/strong&gt;面向美國市場全面上線。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-c9869b0fb5d8a6f2ee4277970e616b67169.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;AI Mode 是 Google 搜索中的一個新選項卡，允許用戶使用 Gemini AI 聊天機器人進行網絡搜索，支持自然語言多輪對話式搜索。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;AI Mode 基於 Gemini 2.5 打造，利用 "query fan-out" 技術將用戶問題分解為更小的部分，同時在多樣化來源中啓動搜索，組裝詳細答案並提供相關來源。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353943/google-search-ai-mode-data-visualization</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353943/google-search-ai-mode-data-visualization</guid>
      <pubDate>Sat, 10 May 2025 07:16:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>智源發佈 RoboOS 2.0，支持 MCP 機制</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;北京智源人工智能研究院正式&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FclAKUO1EcL9fDw1OqF1Kkw" target="_blank"&gt;發佈&lt;/a&gt;跨本體具身大小腦協作框架 RoboOS 2.0 與具身大腦 RoboBrain 2.0，並全面開源，包括框架代碼、模型權重、數據集與評測基準。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;跨本體具身大小腦協作框架 RoboOS 2.0 是全球首個基於具身智能 SaaS 平台、支持無服務器一站式輕量化機器人本體部署的開源框架。同時，RoboOS 2.0 也是全球首個支持 MCP 的跨本體具身大小腦協作框架，旨在構建具身智能領域的「應用商店」生態。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在該框架下，可一鍵下載並部署來自全球開發者創建的相同型號機器人本體的小腦技能，完成大小腦的無縫整合。RoboOS 2.0 實現了小腦技能的免適配註冊機制，顯著降低開發門檻，典型場景下，相關代碼量僅為傳統手動註冊方式的 1/10。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;相較於 1.0，RoboOS 2.0 對端到端推理鏈路進行了系統級優化，整體性能提升達 30%，全鏈路平均響應時延低至 3ms 以下，端雲通信效率提升 27 倍。在功能層面，新增了多本體時空記憶場景圖（Scene Graph）共享機制，支持動態環境下的實時感知與建模；同時引入多粒度任務監控模塊，實現任務閉環反饋，有效提升機器人任務執行的穩定性與成功率。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img alt="" height="304" src="https://oscimg.oschina.net/oscnet/up-081600d63647d2cafbe1b04f885046a8ecd.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;RoboBrain 2.0 是開源具身大腦大模型。在任務規劃方面，RoboBrain 2.0 相比於 RoboBrain 1.0 的基於 Prompt 的多機任務規劃機制和初級空間理解能力，進一步擴展了基於多本體-環境動態建模的多機協同規劃能力，可實時構建包含本體定位的場景圖（Scene Graph），並自動完成跨本體的任務規劃。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;實驗數據顯示，RoboBrain 2.0 的任務規劃準確率相較 RoboBrain 1.0 實現了 74% 的效果提升。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在空間智能方面，RoboBrain 2.0 在原有可操作區域（Affordance）感知與操作軌跡（Trajectory）生成能力的基礎上，實現了 17% 的性能提升。同時，RoboBrain 2.0 增加了空間推理能力（Spatial Referring），既包含機器人對相對空間位置（如前後、左右、遠近）及絕對距離的基礎感知與理解能力，也實現了對複雜空間的多步推理能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此外，RoboBrain 2.0 還新增了閉環反饋以及具身智能的深度思考能力。智源方面表示，已與全球 20 多傢俱身智能企業達成合作，共同打造開放、繁榮、協同的智能機器人生態體系。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353938</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353938</guid>
      <pubDate>Sat, 10 May 2025 06:56:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>ElevenLabs 發佈文本轉語音模型 Eleven v3（Alpha 版）</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;ElevenLabs&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Felevenlabs.io%2Fv3" target="_blank"&gt;發佈&lt;/a&gt;了其最新、最先進的文本轉語音模型 Eleven v3 的 Alpha 版本。該模型在生成具有高情感範圍和跨多種語言的上下文理解能力的自然、逼真語音方面達到了業界領先水平。&lt;/p&gt; 
&lt;p&gt;Eleven v3 亮點如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;地表最強文本轉語音模型之一，能「演戲」的 AI 聲音&lt;/li&gt; 
 &lt;li&gt;支持 70+語言（包括中文）、多角色自然對話、情緒和非語言標籤控制（如 [sad]、[whispers]）&lt;/li&gt; 
 &lt;li&gt;文本理解力大幅增強，能模擬真實對話中的情感變化與語氣中斷&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-ec19766cbfba0e31aa01cb50cba3c10daa6.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Eleven v3 特別適用於需要多個角色互動的角色討論、具有複雜情感傳遞的長篇旁白（如有聲書製作）以及需要自然逼真、情感豐富的對話場景。&lt;/p&gt; 
&lt;p&gt;目前，Eleven v3 模型處於 Alpha 階段，可能會發生變化，且不適用於對話式 AI 等實時應用。開發者在集成時，建議生成多個樣本供用戶選擇最佳效果。API 訪問權限目前尚未公開，需要通過聯繫銷售團隊申請。模型 ID 為 eleven_v3，同時提供格式為 eleven_v3_preview_YYYY_MM_DD 的預覽版本，以便用戶體驗最新功能。&lt;/p&gt; 
&lt;p&gt;https://elevenlabs.io/docs/models#eleven-v3-alpha&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353936/eleven-v3-alpha</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353936/eleven-v3-alpha</guid>
      <pubDate>Sat, 10 May 2025 06:50:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>AI 視頻生成平台 PixVerse 發佈國內版：拍我 AI</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;全球用戶量最大的 AI 視頻生成平台 PixVerse&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FW2FuLYkhpK1KuoUSA9pE-Q" target="_blank"&gt;正式推出&lt;/a&gt;國內版產品——「拍我 AI」，同步上線網頁端及移動端應用，並開放最新 V4.5 模型供用戶使用。&lt;/p&gt; 
&lt;p&gt;「拍我 AI」採用「App+網頁端」雙端策略，滿足不同用戶羣體的需求：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;App 端主打趣味化、低門檻體驗，內置百餘種創意模板，如「寵物跳舞」「噴火特效」等，用戶上傳一張照片即可一鍵生成高質量短視頻，極大降低 AI 視頻創作的技術門檻。&lt;/li&gt; 
 &lt;li&gt;網頁端則面向專業創作者，提供更精細的參數調節功能，支持多主體運動控制、動態運鏡及智能音效匹配，適用於短劇製作、廣告創意、遊戲開發等高階需求。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;獲取地址：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;網頁端：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpai.video" target="_blank"&gt;https://pai.video&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;App 端：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpai.video%2Fapp-download" target="_blank"&gt;https://pai.video/app-download&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;（也可各大應用商店搜索「拍我 AI」下載哦~）&lt;/li&gt; 
 &lt;li&gt;API 開放平台：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fplatform.pai.video" target="_blank"&gt;https://platform.pai.video&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0606/143932_gJZQ_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據瞭解，PixVerse 自海外上線以來，已累計吸引全球超 6000 萬用戶，月活躍用戶（MAU）突破 1600 萬，穩居 AI 視頻生成領域第一梯隊。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353935</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353935</guid>
      <pubDate>Sat, 10 May 2025 06:40:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>字節跳動發佈圖像編輯模型 SeedEdit 3.0</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;字節跳動 Seed 團隊宣佈正式發佈了圖像編輯模型 SeedEdit3.0，技術報告對外公開，模型同步在即夢網頁端開啓測試，豆包 App 也即將上線。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;SeedEdit3.0 基於文生圖模型 Seedream3.0 開發，通過引入多樣化的數據融合方法和特定獎勵模型，解決了以往圖像編輯模型在主體與背景保持、指令遵循等方面的不足。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;根據介紹，該模型可處理並生成 4K 圖像，在精細且自然地處理編輯區域的同時，還能高保真地維持其他信息。尤其針對圖像編輯「哪裏改與哪裏不改」的取捨，該模型表現出更佳的理解力和權衡力，可用率相應提高。當用戶需要去掉圖片內一眾行人，模型不僅可以準確識別並移除場景內的無關人物，連影子也能一併去掉。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;評測結果顯示，SeedEdit 3.0 在編輯保持效果、指令響應能力上領先於此前版本 SeedEdit 1.0，以及引入新數據源的 SeedEdit 1.5、進一步加入數據合併策略的 SeedEdit 1.6。對比 Gemini 2.0 和 Step1X，SeedEdit 3.0 也有一定優勢。我們同時觀察到，GPT-4o 位於右下角，表明其圖像保持能力較 SeedEdit 3.0 有差距，但指令遵循更為出色。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="324" src="https://oscimg.oschina.net/oscnet/up-d3986b88e304819cd3a4f853f409a1ac201.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="327" src="https://oscimg.oschina.net/oscnet/up-21b49d3b4f6dc629f8a851e58a6305928f3.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"&gt;在綜合測評中，SeedEdit 3.0 的圖像保持能力最為突出，保持能力得分達到 4.07 分（滿分 5 分），較此前版本 SeedEdit 1.6 得分提升 1.19 分；SeedEdit 3.0 可用率達 56.1%，較 SeedEdit 1.6 絕對值增加 17.46 個百分點。同時，SeedEdit 3.0 的指令遵循、生成質量表現也處於行業前列。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="280" src="https://oscimg.oschina.net/oscnet/up-78252977e4e8b4dfbd8a8829ddcc621107d.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;儘管 SeedEdit 3.0 在圖像保持、可用率等方面表現不錯，但項目團也承認，其在指令遵循方面仍有一定提升空間。未來除進一步優化編輯性能外，團隊還將探索更豐富的編輯操作，讓模型擁有連續多圖生成、多張圖像合成、故事性內容生成等能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;更多詳情可&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FkFeUSeC6U0L2wkWXjYzREA" target="_blank"&gt;查看官方公告&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353934</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353934</guid>
      <pubDate>Sat, 10 May 2025 06:36:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>花旗上海、大連 IT 部門裁員 3500 人，補償金最高達「N+6」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;2025 年 6 月 5 日，花旗集團宣佈精簡其位於上海和大連的全球技術解決中心，裁員約 3500 名技術人員，同時影響約 500 名第三方人員，預計 2025 年四季度完成調整。&lt;/p&gt; 
&lt;p&gt;據媒體報道，被裁員工在 2025 年 6 月 25 日前簽署協商解除協議，公司將支付「N+6」作為離職補償金，N 為過去 12 個月月平均收入乘以在花旗的服務年限，月平均收入和服務年限均無封頂，加 6 部分基數為 2025 年 5 月基本工資。&lt;/p&gt; 
&lt;p&gt;6 月 26 日—7 月 16 日簽約，公司將支付「N+3」作為離職補償金；7 月 17 日—9 月 19 日簽約，公司將支付「N+1」作為離職補償金。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0606/142909_XjVH_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;花旗稱，此番調整旨在幫助技術和業務支持部門推動精簡運營的整體戰略，包括簡化組織架構，降低依賴第三方機構提供的人員和縮減軟件數量規模等。該調整已被涵蓋在花旗 2025 年度的財務計劃當中。&lt;/p&gt; 
&lt;p&gt;在此次調整之外，花旗位於廣州的全球技術解決中心—花旗金融信息服務（中國）有限公司廣州分公司不受影響。&lt;/p&gt; 
&lt;p&gt;花旗稱，花旗金融信息服務（中國）有限公司為花旗在全球的業務提供相關 IT 服務（軟件技術開發、測試與維護）和運營服務。一些崗位將不再保留，另一些崗位將整合遷移到花旗全球網絡的其他技術解決中心，以貼近所支持的業務與產品。留任員工將負責支持花旗在中國內地及香港市場的業務及發展。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;相關來源&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FnHBdX1frLw1wvojA3AgAkw" target="_blank"&gt;https://mp.weixin.qq.com/s/nHBdX1frLw1wvojA3AgAkw&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F6RLx-HybibgkhkkQSWeXyg" target="_blank"&gt;https://mp.weixin.qq.com/s/6RLx-HybibgkhkkQSWeXyg&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353933</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353933</guid>
      <pubDate>Sat, 10 May 2025 06:29:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>開源的 OA 辦公系統 — 勾股 OA 5.7.6 發佈</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;勾股 OA 辦公系統是一款簡單實用的開源的企業辦公系統。系統集成了系統設置、附件管理、人事管理、行政管理、消息管理、企業公告、知識網盤、審批流程設置、辦公審批、日常辦公、財務管理、客戶管理、合同管理、項目管理、任務管理等功能模塊。系統簡約，易於功能擴展，方便二次開發，可以用來做日常 OA，CRM，ERP，業務管理等系統。&lt;/p&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;勾股 OA5.7.6 版，主要更是日常的功能優化、小 bug 修復，屬於小版本的更新升級，升級前記得先備份，本次更新需要更新數據文件（具體查看文件目錄的文件：\update_sql\v5.7.5 升級到 v5.7.6.sql）。&lt;/p&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;1、重構：知識網盤模塊，不再支持員工個人文件分享，新版的知識網盤模塊管理文件更靈活，更方便，支持個人知識文件管理、共享空間文件管理，可以創建不同的共享空間，各個共享空間動態設置共享空間的成員、管理員。&lt;br&gt; 2、修復：系統管理的附件管理模塊，無法查看視頻和音頻文件的問題；&lt;br&gt; 3、優化：附件管理功能，新增按文件類型展示對應的圖標；&lt;br&gt; 4、優化：審批模塊，新增審批後也可以重新撤回接口，新增是否導出接口；&lt;br&gt; 5、修復：報銷模塊入賬月份顯示錯誤問題；&lt;br&gt; 6、優化項目詳情展示，使用 ayui 最新的 tabs 組件；&lt;br&gt; 7、修改 topthink/think-orm 依賴包為 4.0.8 版本，防止高版本依賴包引起不兼容問題；&lt;br&gt; 8、升級：layui 升級到最新的 2.12 版本；&lt;br&gt; 9、優化：完善部分已知的問題或者細節小調整。&lt;/p&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;勾股 OA5.7.6，具體看如下功能導圖：&lt;/p&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-d392f9dab84420e6bcfbbd83491fc34c7c0.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;內置模塊&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;配置管理：對系統的常規配置信息進行維護，網站配置管理功能統一維護。&lt;/li&gt; 
 &lt;li&gt;用戶管理：維護管理系統的用戶，常規信息的維護與賬號設置。&lt;/li&gt; 
 &lt;li&gt;菜單管理：配置系統菜單，操作權限，按鈕權限標識等。&lt;/li&gt; 
 &lt;li&gt;權限角色：角色菜單管理與權限分配、設置角色所擁有的菜單權限。&lt;/li&gt; 
 &lt;li&gt;部門管理：管理系統組織架構，對組織架構進行統一管理維護。&lt;/li&gt; 
 &lt;li&gt;崗位管理：管理用戶擔任的崗位。&lt;/li&gt; 
 &lt;li&gt;操作日誌：系統正常操作日誌記錄和查詢；系統異常信息日誌記錄和查詢。&lt;/li&gt; 
 &lt;li&gt;基礎數據：對系統中常用的較為固定的數據進行統一維護管理。&lt;/li&gt; 
 &lt;li&gt;消息通知：系統通知私信、消息等管理。&lt;/li&gt; 
 &lt;li&gt;企業公告：企業公告信息發佈維護。&lt;/li&gt; 
 &lt;li&gt;&lt;span style="background-color:#ffffff; color:#40485b"&gt;辦公審批：&lt;/span&gt;支持人事、財務、行政、業務等多審批流程。&lt;/li&gt; 
 &lt;li&gt;&lt;span style="background-color:#ffffff; color:#40485b"&gt;日常辦公：&lt;/span&gt;日程、計劃、週報、日報、月報等信息化辦公工具。&lt;/li&gt; 
 &lt;li&gt;&lt;span style="background-color:#ffffff; color:#40485b"&gt;財務管理：&lt;/span&gt;財務報銷、開票、收票、到賬，付款財務數據規範化管理。&lt;/li&gt; 
 &lt;li&gt;&lt;span style="background-color:#ffffff; color:#40485b"&gt;客戶管理：&lt;/span&gt;統一管理客戶，沉澱客戶資產，避免客戶流失。&lt;/li&gt; 
 &lt;li&gt;&lt;span style="background-color:#ffffff; color:#40485b"&gt;合同管理：&lt;/span&gt;合同維護、審批、執行、變更、關閉全流程管理。&lt;/li&gt; 
 &lt;li&gt;&lt;span style="background-color:#ffffff; color:#40485b"&gt;項目管理：&lt;/span&gt;項目操作記錄全覆蓋跟蹤，項目進度一目瞭然，任務分派，工時記錄。&lt;/li&gt; 
 &lt;li&gt;&lt;span style="background-color:#ffffff; color:#40485b"&gt;知識網盤：工作經驗、行業知識、文件歸類管理。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;軟件信息&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;軟件名稱：勾股 OA&lt;/li&gt; 
 &lt;li&gt;開源地址：&lt;a href="https://gitee.com/gouguopen/office"&gt;https://gitee.com/gouguopen/office&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;官網網址：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gougucms.com%2Fhome%2Fpages%2Fdetail%2Fs%2Fgouguoa.html" target="_blank"&gt;https://www.gougucms.com/home/pages/detail/s/gouguoa.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;文檔網址：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.gougucms.com%2Fhome%2Fbook%2Fdetail%2Fbid%2F3.html" target="_blank"&gt;https://blog.gougucms.com/home/book/detail/bid/3.html&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;系統預覽&lt;/h3&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img alt="" height="688" src="https://oscimg.oschina.net/oscnet/up-114ac577175174bd2d0e57babceb6711d72.jpg" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353930</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353930</guid>
      <pubDate>Sat, 10 May 2025 06:22:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>清華大學與螞蟻集團發佈異步強化學習訓練平台 AReaL-boba²</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;清華大學與螞蟻集團 InclusionAI 團隊聯合發佈了一款名為 AReaL-boba²的異步強化學習（RL）訓練平台。該平台專為大型語言模型設計，與傳統的同步強化學習訓練方法相比，它能在保持相似訓練結果的同時，大幅縮短訓練時間。&lt;/p&gt; 
&lt;p&gt;這得益於 AReaL 中實現的「版本感知」算法，該算法使得異步訓練成為可能，並簡化了多輪次智能體任務的強化學習過程。&lt;/p&gt; 
&lt;p&gt;AReaL-boba²最大的亮點是完全解耦了模型生成與訓練，實現了不間斷的流式數據生成和並行訓練。在效果不變的前提下，其訓練速度達到了上一版本的 2.77 倍。研究團隊還在 Qwen3 系列模型的基礎上，使用 AReaL-boba²進行強化學習訓練，並將相關模型開源。&lt;/p&gt; 
&lt;p&gt;&lt;img height="735" src="https://static.oschina.net/uploads/space/2025/0606/142041_FKjW_2720166.png" width="1000" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在多項編程領域權威基準測試上，強化學習後的 8B 和 14B 參數模型，實現了同尺寸模型中的 SOTA 水準。&lt;/p&gt; 
&lt;p&gt;團隊已將該項目的端到端代碼、數據集以及一個業界領先的編碼模型完全開源。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;開源地址：&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FinclusionAI%2FAReaL%2F" target="_blank"&gt;https://github.com/inclusionAI/AReaL/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;論文鏈接：&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fpdf%2F2505.24298" target="_blank"&gt;https://arxiv.org/pdf/2505.24298&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;SOTA 模型下載鏈接：&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fcollections%2FinclusionAI%2Fareal-boba-2-683f0e819ccb7bb2e1b2f2d5" target="_blank"&gt;https://huggingface.co/collections/inclusionAI/areal-boba-2-683f0e819ccb7bb2e1b2f2d5&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353929</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353929</guid>
      <pubDate>Sat, 10 May 2025 06:21:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>OpenAI「宮鬥戲」將被改編成電影</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.hollywoodreporter.com%2Fmovies%2Fmovie-news%2Fluca-guadagnino-to-direct-openai-movie-1236236357%2F" target="_blank"&gt;據媒體報道&lt;/a&gt;，亞馬遜米高梅影業正在籌備一部聚焦 OpenAI 高層震盪事件的電影，暫命名為《Artificial》。電影將重現 2023 年 11 月那場震驚科技界的"五日政變"——創始人兼 CEO 山姆·奧特曼突遭董事會解僱，又在員工集體抗議下戲劇性復職的全過程。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;影片計劃今年夏日在美國舊金山和意大利開拍。主演團隊方面，安德魯·加菲爾德、莫妮卡·巴巴羅、尤拉·鮑裏索夫正在為主演角色進行商談。&lt;/p&gt; 
&lt;p&gt;值得玩味的是，曾擔任《週六夜現場》編劇的西蒙·裏奇加盟劇本創作，暗示這部作品或將用黑色幽默的筆觸，解構這場融合了權力博弈、理想主義碰撞的科技界"宮鬥"。&lt;/p&gt; 
&lt;p&gt;當時董事會以"溝通不坦誠"為由罷免奧特曼，卻引發 700 名員工聯名威脅辭職，最終在微軟等資本方介入下，這場鬧劇以奧特曼迴歸收場。現實中的戲劇張力，已然為電影提供了最精彩的劇本藍本。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353925/the-openai-board-drama-is-reportedly-turning-into-a-movie</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353925/the-openai-board-drama-is-reportedly-turning-into-a-movie</guid>
      <pubDate>Sat, 10 May 2025 06:12:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>解碼開源 2 | 開源有哪些社會價值？</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;div&gt; 
 &lt;div&gt;
  在當今數字化的時代浪潮中，開源正深刻改變着技術發展軌跡與社會協作模式。當源代碼突破封閉予以公開，其承載的社會價值就已經超越了技術本身，成為推動產業革新與社會進步的底層動力。
 &lt;/div&gt; 
 &lt;div&gt;
  本期解碼開源，讓我們一同深入探尋開源在
  &lt;strong&gt;打破資源壟斷、提升軟件質量、支撐國家戰略&lt;/strong&gt;三個維度的核心社會價值，感受其如何從代碼世界延伸至廣闊的社會圖景。
 &lt;/div&gt; 
 &lt;h2&gt;一、 對個人和團隊的價值&lt;/h2&gt; 
 &lt;div&gt;
  開源允許任何人自由查看、使用、修改與分發源代碼，這徹底改變了閉源軟件的使用模式，直接
  &lt;strong&gt;打破了大企業對關鍵技術資源的壟斷&lt;/strong&gt;。無論是大企業、小公司還是個人開發者，都無需支付高昂的軟件許可費，就能獲得世界一流的基礎設施軟件，
  &lt;strong&gt;大幅降低了獲取技術的門檻和創新創業的成本&lt;/strong&gt;。這種開放共享的模式，不僅讓技術工具更普及，也讓
  &lt;strong&gt;知識和經驗流動起來，培養出更多的人才&lt;/strong&gt;：
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;strong&gt;推進資源公平&lt;/strong&gt;：初創公司不用花大價錢購買商業軟件，他們可以利用開源的 WordPress 搭建專業網站，用 Odoo 高效管理資源，免費獲得過去只有中大型企業才負擔得起的基礎工具。顯著縮小了不同規模、不同背景的團隊和個人在獲取先進數字工具上的差距，有效促進了社會層面的「數字公平」。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;提升創新效率&lt;/strong&gt;：開發者不必從頭開始造輪子，他們可以利用像 Meta Llama 2、Mistral Mixtral、Bloom、Falcon 這些公開的、強大的開源大模型，只需要使用少量數據進行微調，就能快速定製出滿足特定需求的 AI 應用，把主要精力放在真正創造價值的事情上。極大降低了創新的門檻和週期，使得解決社會問題、滿足個性化需求、探索前沿領域的創新不再是大公司和科研機構的專利。推動了技術的「民主化」進程，讓更多元化的聲音和創意能夠快速轉化為現實應用，催生解決實際社會痛點的解決方案。&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;賦能計算機教育&lt;/strong&gt;：高校將開源項目融入課程體系，學生通過參與真實的開源項目積累實戰經驗，學到最前沿的技術和理念。開源社區還通過舉辦技術講座、黑客馬拉松等活動，進一步激發全社會的創新熱情，培育了大量具備開源思維的技術人才，為社會技術創新提供了源源不斷的動力。&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;div&gt;
  開源通過打破技術獲取的壁壘、促進知識的自由流通、並賦能下一代人才的成長，構建了一個更加公平、高效、可持續的創新生態，
  &lt;strong&gt;成為驅動社會技術進步與普惠發展的核心引擎&lt;/strong&gt;。這種開放共享帶來的資源普惠，也為更大範圍的協作奠定了基礎。
 &lt;/div&gt; 
 &lt;h2&gt;二、 對產品和產業的價值&lt;/h2&gt; 
 &lt;div&gt;
  開源的核心是開放協作，這吸引了全球不同背景的開發者，超越商業競爭與地域界限，基於共同的目標和技術的熱愛，
  &lt;strong&gt;形成獨特的社區網絡&lt;/strong&gt;。這種開放協作模式的核心價值在於，通過大量開發者一起檢查代碼、公開討論和嚴格審核，
  &lt;strong&gt;顯著提高了軟件的質量、穩定性和安全性，最終推動了整個行業的進步&lt;/strong&gt;。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;ol&gt; 
  &lt;li&gt; 
   &lt;div&gt;
    &lt;strong&gt;提高代碼質量&lt;/strong&gt;：開源代碼面向所有開發者開放，由大家持續地檢查、改進和優化。因此，成熟的開源項目，其代碼質量經常比閉源軟件更好。比如 Linux 內核項目，來自微軟、谷歌等競爭公司的開發者共同維護代碼，通過嚴格的審查體系推動技術迭代，確保 Linux 成為全球數字世界最穩定、最可靠的基礎，支撐着從超級計算機到智能手機的龐大系統。
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
    &lt;strong&gt;保障軟件安全&lt;/strong&gt;：龐大的開發者社區持續檢查代碼，使得漏洞能夠被更快地發現、報告和修復，保障了軟件安全。比如 Heartbleed 漏洞被公開後，全球開發者迅速行動，操作系統公司、雲服務商緊密合作，在極短時間內推出修復補丁並完成了大規模更新，把可能造成的損失降到了最低。
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
    &lt;strong&gt;推動產業升級&lt;/strong&gt;：開源打破了企業閉門造車的侷限，促進了開放式創新。不同組織可以共享基礎技術，避免了重複開發。這樣，大家就能把資源集中到更有價值的差異化創新和用戶體驗的提升上。國內的「武漢開源創新聯盟」也是借鑑開源模式，聯合了武漢大學、華中科技大學等高校，以及統信軟件、新致開源等企業，期望通過開源協作，打造本土的創新中心和人才培養基地，推動區域產業技術升級。
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;div&gt;
  開源社區依靠透明協作和貢獻優先的原則，建立起超越傳統公司邊界的強大信任網絡和質量保障體系。它不僅
  &lt;strong&gt;打造出高質量、經得起考驗的代碼，構築了共同維護的安全防線&lt;/strong&gt;，更以開放的創新方式，
  &lt;strong&gt;引領了整個產業技術的深刻變革&lt;/strong&gt;。當協作的力量匯聚，其影響便超越了企業和產業，上升到了國家戰略層面。
 &lt;/div&gt; 
 &lt;h2&gt;三、對國家競爭力的價值&lt;/h2&gt; 
 &lt;div&gt;
  在數字技術競爭激烈、信息產業快速發展的今天，開源已不再侷限於技術領域，更成為保障國家技術安全、建立自主創新能力的重要基礎。其開放、透明、協作的特點，
  &lt;strong&gt;為國家在數字時代掌握主導權和提升國際競爭力提供了關鍵支持&lt;/strong&gt;。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;ol&gt; 
  &lt;li&gt; 
   &lt;div&gt;
    &lt;strong&gt;突破技術封鎖&lt;/strong&gt;：開源的開放性，為國家突破外部技術封鎖、構建獨立的技術體系開闢了路徑。通過主導或深度參與核心開源項目，能夠匯聚國內外開發者力量，加速本土技術生態的發展。華為主導的開源鴻蒙生態是這一戰略的成功實踐。截至 2025 年 5 月，其代碼規模已突破 1.3 億行，吸引了全球 8600 多位開發者的貢獻智慧，超過 1100 款軟硬件產品通過兼容性測評，覆蓋金融、交通、航天等高價值行業。
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
    &lt;strong&gt;主導制定標準&lt;/strong&gt;：開源是國家自主構建技術標準、掌握數字時代規則制定權的關鍵手段。通過開源協作，可以凝聚產業共識，形成具有國際影響力的技術規範。中國開放原子開源基金會作為國家級平台，通過孵化開源鴻蒙、歐拉等核心項目，成為國家層面保障數字主權、搶佔未來科技制高點的重大戰略選擇。
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
    &lt;strong&gt;提升國際話語權與競爭力&lt;/strong&gt;：開源已成為衡量一個國家科技實力和創新能力的關鍵指標。中國深度參與全球頂級開源社區（如 Linux 基金會、Apache 基金會），並主導有世界影響力的開源項目（如開源鴻蒙、超級賬本 Fabric），不僅有力展示了中國的技術實力，也成為推動中國技術標準走向世界的橋樑。這有助於在新一輪科技和產業變革中搶佔先機，提升中國在全球科技規則制定中的話語權，為實現科技自立自強和高質量發展打下堅實基礎。
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;div&gt;
  開源協作匯聚的全球智慧與國家戰略目標相結合，正在為中國乃至世界
  &lt;strong&gt;打造一個更安全、更自主、更繁榮的數字未來&lt;/strong&gt;，奠定堅實的基礎。
 &lt;/div&gt; 
 &lt;h2&gt;新致開源：致力於應用管理軟件開源&lt;/h2&gt; 
 &lt;div&gt;
  新致開源公司秉持
  &lt;strong&gt;「開源、共享、&lt;/strong&gt;
  &lt;strong&gt;眾包&lt;/strong&gt;
  &lt;strong&gt;」&lt;/strong&gt;的理念，致力於踐行開源精神，打造應用管理軟件開源生態。2022 年 6 月，發佈新致開源醫療 OpenHIS，包括 OpenHIS 醫院系統（信創版）、OpenHIS 醫院系統（通用版）、OpenHIS 診所繫統；2023 年 6 月，發佈新致開源企業 OpenCOM，包括人事管理系統、項目管理系統、客戶管理系統、財務管理系統。目前已在醫療和企業兩大行業成功推出了
  &lt;strong&gt;7 款&lt;/strong&gt;
  &lt;strong&gt;開源軟件&lt;/strong&gt;，助力
  &lt;strong&gt;基層醫療信息化和小微企業數字化&lt;/strong&gt;。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  新致開源公司
  &lt;strong&gt;開放軟件&lt;/strong&gt;
  &lt;strong&gt;源代碼&lt;/strong&gt;，吸引開發者根據社區資料自主完成產品部署，同時
  &lt;strong&gt;尋求渠道銷售、技術支持、產品合作方面&lt;/strong&gt;的生態夥伴：
 &lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; 
   &lt;div&gt;
    以開源軟件賦能行業發展，攜手生態夥伴聯合打造開源軟件應用生態，打通產業鏈上下游，助力各方降本增效，形成創新產業模式，服務產業數字化市場。
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
    面對複雜的市場需求，與生態夥伴在技術、產品、銷售等方面能力優勢互補，形成一體化的專業服務能力，與夥伴一同挖掘多樣化的客戶項目，打造行業標杆。
   &lt;/div&gt; &lt;/li&gt; 
  &lt;li&gt; 
   &lt;div&gt;
    通過共創聯合解決方案，最大程度滿足客戶個性化需求，提供增值服務，提升服務價值，增加客戶粘性，持續增值收益，協助夥伴開拓增量市場。
   &lt;/div&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h2&gt;展望&lt;/h2&gt; 
 &lt;div&gt;
  當代碼開放，連接的不僅是技術，更是人心與機遇。擁抱開源，就是擁抱一個更加開放、協作、創新的未來。新致開源願與大家一起共同參與、建設和維護這片充滿生機的開源沃土，共享技術發展的紅利，共赴數字時代的星辰大海。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  下期預告：《解碼開源 | 企業如何借開源降本增效？》，帶你深入探討企業擁抱開源的具體路徑與效益。
 &lt;/div&gt; 
&lt;/div&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353906</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353906</guid>
      <pubDate>Sat, 10 May 2025 03:35:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>Canonical 將逐步淘汰 Bazaar 代碼託管服務</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Ubuntu Linux 開發商 Canonical 宣佈他們將停止使用 Launchpad 託管其 Bazaar 分佈式版本控制系統代碼，這意味着 Git 最終勝出。&lt;/p&gt; 
&lt;p&gt;Canonical 開發了 Bazaar 分佈式版本控制系統，但 Git 更具主導地位，更受程序員的接受。儘管 Canonical 的 Launchpad 繼續提供 Bazaar 代碼託管，但這項服務將逐步停止。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;GNU Bazaar（以前稱為 Bazaar-NG，命令行中稱為 bzr）是由 Canonical 贊助開發的分佈式和主從式版本控制系統。Bazaar 可以由一個開發本地內容的多個分支的開發人員使用，也可以由跨網絡協作的團隊使用。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-5399d854e5c04e82a56346e7c911ec46a38.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;由於 Git 的成功，Bazaar 近十年來沒有發佈新版本，而且一直在走下坡路。不過，對於懷舊的程序員來説，Bazaar 的 Breezy fork 仍在繼續。&lt;/p&gt; 
&lt;p&gt;Launchpad 上 Bazaar 的 Web 前端 Loggerhead 將立即關閉，並計劃在 9 月 1 日完全刪除對 Bazaar 的支持，Launchpad 用戶必須在該截止日期之前將任何剩餘的存儲庫從 Bazaar 轉換為 Git。 對 Bazaar 停止使用計劃感興趣的人可以通過&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.ubuntu.com%2Ft%2Fphasing-out-bazaar-code-hosting%2F62189" target="_blank"&gt;Ubuntu Discourse&lt;/a&gt;&amp;nbsp;找到。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/353904/canonical-phasing-out-bazaar-code-hosting</link>
      <guid isPermaLink="false">https://www.oschina.net/news/353904/canonical-phasing-out-bazaar-code-hosting</guid>
      <pubDate>Sat, 10 May 2025 03:29:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
  </channel>
</rss>
