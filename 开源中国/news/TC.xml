<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 繁體中文（台灣）</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已對該 RSS 進行格式化操作：中英字符之間插入空格、使用直角引號、標點符號修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-tw</language>
    <lastBuildDate>Mon, 18 Aug 2025 03:30:16 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>我國首個法律垂直大模型「小包公」發佈</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;span style="color:#000000"&gt;我國首個法律領域垂直大模型「小包公法律內容大模型」於日前發佈。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;該模型由華南師範大學法學院王燕玲教授團隊研發，已通過國家互聯網信息辦公室深度合成服務算法備案，採用「先進通用大模型+專業垂直大模型」雙引擎架構，深度整合 2 億餘份裁判文書、420 萬餘部法律法規，結合法律知識圖譜和檢索增強生成技術，可在全法律場景提供可溯源、可驗證的精準服務。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="335" src="https://oscimg.oschina.net/oscnet/up-324a218385c3269f90403dec94cebed6441.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;王燕玲介紹，該模型具備動態學習機制，能根據實踐反饋持續迭代，以法律為準繩動態幹預回答準確性，目前已在廣東、安徽等地司法實踐中廣泛應用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在非法採礦等公益訴訟案件辦理中，系統可通過人物關係圖譜排查涉案人員；在刑事審查環節，12 類典型案件的辦案人員輸入完整卷宗後，系統能自動生成分析報告與相關文書，有效提升閲卷與量刑分析效率。現場嘉賓指出，法律 AI 的普及將緩解我國法律服務資源分佈不均問題——當前全國 70 萬名執業律師主要集中於東部發達地區，西部部分縣域無律師事務所，智能系統可成為普惠法律服務的重要補充。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在基層司法實踐中，大模型的賦能效果已逐步顯現。據介紹，湛江市司法局引入「小包公」智能行政複議一體化系統後，在當事人材料齊全的情況下，案件焦點識別準確率達 100%，證據識別採信準確率約 95%，文書撰寫時間縮減 75%，成為全國首個在兩級司法局運用司法大模型賦能行政複議工作的城市。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;安徽懷寧檢察院自 2018 年開展認罪認罰精準量刑試點以來，運用該系統生成的量刑建議採納率超過 99%；清遠市人民檢察院藉助系統人物關係圖譜，成功識別傳統辦案中易遺漏的涉案人員，檢察官 AI 工具使用率達 100%。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366880</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366880</guid>
      <pubDate>Mon, 18 Aug 2025 03:25:15 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>虛引用 GC 耗時分析優化（由 1.2 降低至 0.1 秒）</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;線上應用頻繁出現超時告警（超時時間 1 s）： getUiToken 接口異常狀態碼「-1」出現 4037 次 (失敗描述:業務請求異常)，超過閾值 50，協議：http，為服務端接口。當前失敗率為 0%，當前平均響應時間為 150ms，TP50 為 2ms,TP90 為 896ms，TP99 為 1024ms,TP999 為 1152ms,MAX 為 1280ms。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_2"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;環境信息&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;div&gt; 
 &lt;span style="color:#000000"&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;服務器配置為，Linux 4c8g 標配機器&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="color:#000000"&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;JVM 參數配置：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;-server -Djava.library.path=/usr/local/lib -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/export/log -Djava.awt.headless=true -Dsun.net.client.defaultConnectTimeout=60000 -Dsun.net.client.defaultReadTimeout=60000 -Djmagick.systemclassloader=no -Dnetworkaddress.cache.ttl=300 -Dsun.net.inetaddr.ttl=300 -Xms5G -Xmx5G -XX:+UseG1GC -XX:G1HeapRegionSize=4m -Xloggc:/export/log/$APP_NAME/gc_detail.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=10m -XX:MaxTenuringThreshold=15 -XX:+PrintTenuringDistribution -XX:+PrintHeapAtGC&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;div&gt; 
 &lt;span style="color:#000000"&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;接口流量情況：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//c8ebd5b4ebdc22b41187bcf663870fbd.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;span id="OSC_h1_3"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;問題排查&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;分析代碼實現，getUiToken 只是簡單的內存數據獲取並返回，沒有其他複雜操作，不存在有耗時操作&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//7d264c94f843fd53fefc04a5ec2b61cf.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;接着藉助 SGM 監控平台分析下接口耗時情況，發現方法執行的耗時都處在等待中，為什麼會有這多長的等待時間呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//1c5605b1f1d9d9253dc8ed6c54437413.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;業務代碼很簡單，只是內存級別的獲取，序列化和反序列化也不可能耗時這麼久， 難道是 GC 的原因 ？ 因為 JVM 之前就配置了 -Xloggc 日誌輸出，所以先分析下 GC 日誌情況，看看 GC 是否存在異常情況（工具 gcViewer）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//a9062cc1660d6f240fa4e602a7cadd85.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;果然，光看吞吐量 99.3% 和 full gc 次數 0，感覺性能好像還不錯的，但 4227 次 young gc （平均 20 多秒一次） 和 max 1.25 秒的耗時，就有點離譜，分析 GC 日誌詳情&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//c7163e4712619389f5446972e0f165f0.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;隨機搜查了一個 GC 耗時在 1s 以上的日誌，發現 1.02 s 的 gc 有 977.3 ms 是在處理 Ref Proc，為什麼這個耗時會這麼長 ？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;ref-proc 是對各種軟弱虛引用等的處理，處理 soft、weak、phantom、final、JNI 等等引用的時間&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;具體是那種引用類型的耗時長，可以通過增加 JVM 參數 -XX:+PrintReferenceGC 打印引用 GC 類型 ，重新上線一段時間後觀察 GC 日誌&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//557127b6d3daf4dcb964809775d3d0d6.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;發現耗時基本都在 PhantomReference 類型的對象上，為什麼會有這麼多這個對象？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;PhantomReference 是什麼？ 1、虛引用也稱為「幽靈引用」，它是最弱的一種引用關係。 2、如果一個對象僅持有虛引用，那麼它就和沒有任何引用一樣，在任何時候都可能被垃圾回收器回收。 3、為一個對象設置虛引用關聯的唯一目的只是為了能在這個對象被收集器回收時收到一個系統通知。 4、當垃圾回收器準備回收一個對象時，如果發現它還有虛引用，就會在垃圾回收後，將這個虛引用加入引用隊列，在其關聯的虛引用出隊前，不會徹底銷燬該對象。所以可以通過檢查引用隊列中是否有相應的虛引用來判斷對象是否已經被回收了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;為了搞清楚 PhantomReference 具體都是哪些對象，我們需要 dump 堆文件查看對象的分佈（內存分析工具 MAT），dump 時最好將流量摘除後操作，以免影響線上。查看直方圖中的對象發現有 4340 個虛引用對象，和 GC 日誌中的數量基本對的上。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//5bdbcf18eaa7f63199e2311d76f088ab.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;那為什麼會有這麼多 ConnectionPhantomReference 對象呢 ？ 這個東西有什麼用呢 ？ 源碼如下 （mysql-connector-java 版本 5.1.44）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 相關的核心邏輯&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NonRegisteringDriver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;implements&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;java.sql.Driver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;final&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;ConnectionPhantomReference, ConnectionPhantomReference&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; connectionPhantomRefs &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;ConnectionPhantomReference, ConnectionPhantomReference&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;final&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ReferenceQueue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;ConnectionImpl&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; refQueue &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ReferenceQueue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;ConnectionImpl&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;trackConnection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; newConn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionPhantomReference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; phantomRef &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionPhantomReference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionImpl&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; newConn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; refQueue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        connectionPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;put&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;phantomRef&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; phantomRef&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionImpl&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;extends&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionPropertiesImpl&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;implements&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;MySQLConnection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionImpl&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;String&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; hostToConnectTo&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; portToConnectTo&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Properties&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; info&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;String&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; databaseToConnectTo&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;String&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; url&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;SQLException&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NonRegisteringDriver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;trackConnection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;通過代碼發現，每次新建數據庫連接 Connection 時都會向 connectionPhantomRefs 存放一個對象，那麼已經使用 druid （版本：1.0.15）線程池為什麼還會生成這麼多新鏈接 ？ 接着查看項目中的數據庫配置，發現數據源使用的是默認配置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;# 線程池使用的默認配置
spring:
  datasource:
    url: jdbc:mysql://xxxxxxxxx?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;allowMultiQueries=true&amp;amp;serverTimezone=GMT%2B8
    username: xxxx
    password: xxxx
    driver-class-name: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//e1d56e1b7808007139709112a2545684.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;默認配置中，線程池中的連接存活時間為 30 分鐘，最小閒置線程數為 0，因此雖使用了線程池也還是會不斷的創建新的鏈接，並增加到 connectionPhantomRefs 集合中，累計一定量之後就會影響 ref-proc 耗時。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_4"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如何解決 ？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;既然因為它累計的量大導致 gc 時長變高，那麼我們分析下 connectionPhantomRefs 的作用到底是什麼 ？ &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;跟進 connectionPhantomRefs 引用處理對象，發現 connectionPhantomRefs 中的元素都是被 AbandonedConnectionCleanupThread 處理的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;/**
 * This class implements a thread that is responsible for closing abandoned MySQL connections,
 * i.e., connections that are not explicitly closed. 
 * There is only one instance of this class and there is a single thread to do this task. 
 * This thread's executor is statically referenced in this same class.
 *
 * 該類實現了一個負責關閉被遺棄的 MySQL 連接的線程，即未顯式關閉的連接。該類的實例只有一個，並且由單個線程執行此任務。該線程的執行器在此類中以靜態方式引用。
 */&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;AbandonedConnectionCleanupThread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;implements&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Runnable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;final&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ExecutorService&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; cleanupThreadExcecutorService&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; threadRef &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        cleanupThreadExcecutorService &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Executors&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;newSingleThreadExecutor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ThreadFactory&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;newThread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Runnable&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; r&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; t &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;r&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"Abandoned connection cleanup thread"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;setDaemon&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;setContextClassLoader&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;AbandonedConnectionCleanupThread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;getClassLoader&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; threadRef &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        cleanupThreadExcecutorService&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;execute&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;AbandonedConnectionCleanupThread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;run&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;try&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;checkContextClassLoaders&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;? extends ConnectionImpl&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ref &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NonRegisteringDriver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;refQueue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;remove&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;5000&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ref &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;try&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionPhantomReference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;cleanup&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NonRegisteringDriver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;connectionPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;remove&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;InterruptedException&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; e&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                threadRef &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Exception&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ex&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;// Nowhere to really log this.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;根據 com.mysql.jdbc.AbandonedConnectionCleanupThread 類註釋信息，發現該類是 mysql 連接的兜底處理邏輯，負責關閉被遺棄的 MySQL 連接，主要有兩種情況&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1. 未顯式關閉的連接（代碼遺漏）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2. 異常未處理的連接（程序崩潰/未捕獲異常/網絡或事務超時導致的連接失效）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_5"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;解決方案&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1. 優化 druid 連接池連接數配置 （按實際流量情況評估），增加連接存活時長到 59 分鐘（&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;MySql wait_timeout 默認為 3600 秒&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;），最大限度減少新連接生成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;spring:
  datasource:
    url: jdbc:mysql://xxxxxxxxx?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;allowMultiQueries=true&amp;amp;serverTimezone=GMT%2B8
    username: xxxx
    password: xxxx
    driver-class-name: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 增加線程數
      minIdle: 4
      maxActive: 10
      initialSize: 4
      # 啓動檢測線程回收
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      validationQuery: select 1
      timeBetweenEvictionRunsMillis: 60000
      minEvictableIdleTimeMillis: 3540000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2. 開啓 ref-proc 並行處理：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#f3f5f9; color:#0abf5b"&gt;-XX:+ParallelRefProcEnabled&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; ，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt; G1 官網建議&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;Reference Object Processing Takes Too Long Information about the time taken for processing of Reference Objects is shown in the Ref Proc and Ref Enq phases. During the Ref Proc phase, G1 updates the referents of Reference Objects according to the requirements of their particular type. In Ref Enq, G1 enqueues Reference Objects into their respective reference queue if their referents were found dead. If these phases take too long, then consider enabling parallelization of these phases by using the option &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff; color:#ff4d4f"&gt;-XX:+ParallelRefProcEnabled.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3. 由於 connectionPhantomRefs 只是作為異常情況出現的兜底處理，我們項目中使用的線程池都會自動處理資源釋放的情況，不存在手動操作的情況，是不是可以定時清理這部分的內容或者不使用，目前使用最多的兩種方式是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;定時任務：清理虛引用列表數據&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;CleanPhantomRefsSchedule&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;final&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ScheduledExecutorService&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; CLEANER_EXECUTOR &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Executors&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;newSingleThreadScheduledExecutor&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;r &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; t &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;r&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"mysql-phantom-ref-cleaner"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;setDaemon&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;@PostConstruct&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;doTask&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;info&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"CleanPhantomRefsSchedule#doTask start"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;try&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Field&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; field &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NonRegisteringDriver&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;getDeclaredField&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"connectionPhantomRefs"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            field&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;setAccessible&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;// 定時輪訓&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            CLEANER_EXECUTOR&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;scheduleAtFixedRate&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;try&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Map&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?, ?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; connectionPhantomRefs &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Map&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?, ?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; field&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;get&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;// 這裏我設置的稍微大一些，對 gc 沒太大影響時不進行幹預&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                   &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;connectionPhantomRefs &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; connectionPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;size&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;500&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                        connectionPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;clear&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                        log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;info&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"Cleared MySQL phantom references (count={})"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; connectionPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;size&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Exception&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; e&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                    log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;error&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"connectionPhantomRefs clear error!"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; e&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;TimeUnit&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;HOURS&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NoSuchFieldException&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; e&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;IllegalStateException&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"Failed to initialize MySQL phantom refs field"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; e&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;@PreDestroy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;shutdown&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        CLEANER_EXECUTOR&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;shutdownNow&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;div&gt; 
 &lt;span&gt;•&lt;/span&gt; 
 &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;升級 mysql-connector-java 版本（8.0 以上），可以通過參數 -Dcom.mysql.cj.disableAbandonedConnectionCleanup=true 禁用虛引用生成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;abandonedConnectionCleanupDisabled&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;getBoolean&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;"com.mysql.cj.disableAbandonedConnectionCleanup"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;

 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;trackConnection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;MysqlConnection&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; conn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;NetworkResources&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; io&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;!&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;abandonedConnectionCleanupDisabled&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;···
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionFinalizerPhantomReference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;reference&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;ConnectionFinalizerPhantomReference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;conn&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;io&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;referenceQueue&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;connectionFinalizerPhantomRefs&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;add&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;reference&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;···&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我採用的是定時任務這種方式，因為項目升級 mysql-connector-java 版本會存在兼容性問題，其次是在虛引用量比較小的情況我希望這種兜底策略依舊可以生效，所以定時任務中只有在 connectionPhantomRefs.size() &amp;gt; 500 時才會幹預清理，而不是直接杜絕使用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_6"&gt;&lt;/span&gt; 
&lt;h1&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;驗證優化結果&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;代碼及配置調整完成後再次上線，等待一天後，繼續分析 GC 日誌和堆轉儲文件 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//6440df82f8599d87cc53b61026e84e84.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//c58d0dbaaa585a67a28e5d7e697da2e7.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;img alt="" src="https://oscimg.oschina.net/oscnet//5f41e588501b799ae57e534b121b6004.png" referrerpolicy="no-referrer"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:transparent"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;結論：上線後近 12 小時數據，GC 時間最大停頓時間由原先 1.25 降低至 0.1 秒，young gc 頻率由原先的 20 秒一次優化到 6 分鐘一次，PhantomReference 引用耗時縮減到 0.0001966 s， 持續觀察幾天，線上服務無超時告警且系統響應正常，優化符合預期結果。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4090830/blog/18688164</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18688164</guid>
      <pubDate>Mon, 18 Aug 2025 03:08:48 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>360 官宣「All in Agent」戰略</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;在日前舉辦的 360 集團 20 週年榮耀慶典上，創始人周鴻禕發佈 360 集團下一階段的公司戰略：All In Agent。&lt;/p&gt; 
&lt;p&gt;周鴻禕表示，AI 的巨大機遇就在眼前，智能體將帶來個人角色和組織形態的重塑，當前正是重新出發、轉向新賽道的時刻，All in Agent 就是 360 的明確路線圖。周鴻禕勉勵全體員工要上下同心，堅定聚焦，力爭實現 「三個超級」：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;一是鼓勵 360 全員建立 AI 信仰、培養 AI 素養，思考「如何用智能體放大自身價值」，全員都要學會使用、搭建、管理、監督、領導智能體，與智能體深度協同，每個人都可以把自己打造成超級個體、超級員工；&lt;/li&gt; 
 &lt;li&gt;二是要求全公司各業務線、各部門以智能體化率衡量所有業務流程、崗位職能的進化水平，打造超級團隊、超級組織；&lt;/li&gt; 
 &lt;li&gt;三是用智能體重塑公司所有產品。在軟件開發 3.0 時代，新產品必須以智能體為範式進行功能開發，已在運營、服務的產品，必須以智能體進行重塑。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;為適配「All in Agent」戰略，360 全面升級使命、願景與價值觀：使命升級為「讓 AI 世界更安全更美好」，願景升級為「成為最安全的 AI 創新者」，核心價值觀聚焦「用戶為先、始終創業、持續創新、追求卓越、協作律己」五大維度。&lt;/p&gt; 
&lt;p&gt;&lt;img height="275" src="https://oscimg.oschina.net/oscnet/up-3c375902fe76b5eb714c9f20f3d280a7e19.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;同時，周鴻禕公佈了公司在智能體領域的技術突破：目前納米 AI 已實現 L3 級推理型智能體連續執行 100 步任務 0 出錯、單次消耗 Token100 萬、調用 100+工具，任務成功率達 98.2%。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366872</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366872</guid>
      <pubDate>Mon, 18 Aug 2025 02:58:48 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>2025 Gtest 全球軟件測試技術峯會售票進行中，前沿技術等你解鎖！</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Gtest 大會，測試人的年度盛宴！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;為促進測試技術與行業應用的深度交流，2025 年 9 月 5 日-9 月 6 日，「全球軟件測試技術峯會」（簡稱：Gtest）將在北京市麗亭華苑酒店舉辦。本屆峯會將聚集超 500 位來自&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;測試、質量、大模型、開源測試工具等&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;領域的行業專家、技術負責人及一線工程師，構建多元化交流與合作平台。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="312" src="https://oscimg.oschina.net/oscnet/up-c7ebd1f7f5fb6544dff1a03652ee9ed5dc7.png" width="554" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;這是一場面向全球測試領域的頂尖技術峯會，如果您關注：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;·&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;大模型與智能測試的結合模式與落地實踐&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 銀行、保險等典型行業測試技術的趨勢與創新路徑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 證券、遊戲等行業領域從業者的實戰經驗與方法論&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 行業標杆企業的測試技術與管理案例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 測試團隊的組織與效率優化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;本次峯會將為您提供深入交流與學習的契機。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;參會您將收穫&lt;/strong&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 瞭解軟件測試領域的前沿技術應用與創新趨勢&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 參考行業企業的真實業務實踐案例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 建立與測試行業從業者及專家的專業聯繫&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;· 掌握軟件測試行業的發展動態與方向&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:justify"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;精彩議題搶先看：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="4618" src="https://oscimg.oschina.net/oscnet/up-2545d00b1641a0a012ed7449712f41ab33c.png" width="1712" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;時間：2025 年 9 月 5 日-9&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;月&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;日&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;地點：北京麗亭華苑酒店 (北京市海淀區知春路 25 號)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;席位有限，速來鎖定你的年度技術盛會！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;立即購票&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gtest.net.cn%2Fbuy%2F" rel="nofollow" target="_blank"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;https://www.gtest.net.cn/buy/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4806939/blog/18688477</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4806939/blog/18688477</guid>
      <pubDate>Mon, 18 Aug 2025 02:53:48 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>Valkey 9.0.0-rc1 發佈，Linux 基金會維護的 Redis 分支</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;Valkey 9.0-rc1 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fvalkey-io%2Fvalkey%2Freleases%2Ftag%2F9.0.0-rc1" target="_blank"&gt;已發佈&lt;/a&gt;，新版本帶來了顯著的性能提升，尤其是在使用 SIMD 指令（AVX2、AVX-512、ARM NEON、SSE2）優化關鍵路徑（如 &lt;code&gt;BITCOUNT&lt;/code&gt;、字符串-整數轉換、&lt;code&gt;findBucket&lt;/code&gt;）方面。其新增的集羣功能（如多數據庫支持與 MPTCP、多功能遷移等）也為未來版本奠定了功能基礎。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-7f654be54bf7014a9538ed8834ed0250832.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-e8293973af2307d31e62eb3559de25b78ea.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Valkey 9.0-rc1 亮點&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;AVX2 優化 &lt;code&gt;BITCOUNT&lt;/code&gt; 命令&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;在 1 MB 值上使用 SIMD AVX2 優化，性能提升達 &lt;strong&gt;+514%&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;在 4 KB 值上有約 &lt;strong&gt;+10%&lt;/strong&gt; 的提升，在 64 KB 值上提升達 &lt;strong&gt;+116%&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;利用 AVX-512 提升字符串到整數轉換性能&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;通過 AVX-512 指令，字符串-整數轉換性能提升約 &lt;strong&gt;17–19%&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;其它性能優化&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;增強複製（replication）的穩定性&lt;/li&gt; 
   &lt;li&gt;ARM NEON SIMD 優化 &lt;code&gt;BITCOUNT&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;SSE2 SIMD 加快 &lt;code&gt;findBucket&lt;/code&gt;，提升最高達 &lt;strong&gt;6%&lt;/strong&gt;&amp;nbsp;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Valkey 9.0 中引入的新增功能（計劃）&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;集羣模式下的多數據庫支持&lt;/li&gt; 
   &lt;li&gt;Multi-Patch TCP (MPTCP) 支持&lt;/li&gt; 
   &lt;li&gt;原子槽遷移（atomic slot migration）&lt;/li&gt; 
   &lt;li&gt;以及其他功能改進&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下載地址：&lt;em&gt;https://valkey.io/download/releases/v9-0-0-rc1/&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366870/valkey-9-0-0-rc1-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366870/valkey-9-0-0-rc1-released</guid>
      <pubDate>Mon, 18 Aug 2025 02:47:04 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Cline v3.25 正式發佈，引入 Deep Planning、Focus Chain 和 Auto Compact 三大協同機制</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;Cline v3.25 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcline.bot%2Fblog%2Fcline-v3-25" target="_blank"&gt;已正式發佈&lt;/a&gt;，新版本通過引入 Deep Planning、Focus Chain 和 Auto Compact 三大核心繫統，以解決大語言模型（LLMs）在多輪長對話中因上下文累積導致的「中間遺忘」&amp;nbsp;("lost in the middle") 和性能衰退問題。&lt;/p&gt; 
&lt;p&gt;這三大系統如同一個分工明確的團隊：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Deep Planning 負責「戰略規劃」與上下文壓縮；&lt;/li&gt; 
 &lt;li&gt;Focus Chain 保持「戰術執行」的一致性；&lt;/li&gt; 
 &lt;li&gt;Auto Compact 則負責「戰場清理」，確保資源高效流動。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;p&gt;文章指出，當任務變得越來越複雜且涉及多輪交互時，LLM 的性能會顯著下降。這並非僅僅因為上下文長度不足，而是「中間內容」的噪音逐漸掩蓋了原始任務意圖，從而引發語義偏離或幻覺。&lt;/p&gt; 
&lt;p&gt;為瞭解決「長上下文多輪任務偏離」的問題，Cline v3.25 引入了三大協同機制：&lt;/p&gt; 
&lt;h3&gt;1. &lt;strong&gt;Deep Planning&lt;/strong&gt; — 打好基礎，避免污染&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;使用 &lt;code&gt;/deep-planning&lt;/code&gt; 命令後，Cline 會先非冗餘地全面探索項目（grep、分析依賴、閲讀文件等），構建項目「心智模型」。&lt;/li&gt; 
 &lt;li&gt;接着向用戶提問澄清歧義，並生成統一的 &lt;code&gt;implementation_plan.md&lt;/code&gt;，保存到項目根目錄。&lt;/li&gt; 
 &lt;li&gt;最後，啓動一個全新任務，僅載入核心上下文（關鍵文件 + 計劃文件），避免早期探索中的多餘噪音污染實現階段。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;這樣，實施階段從一個純淨、高價值的上下文切入，從而維持最優性能。&lt;/p&gt; 
&lt;h3&gt;2. &lt;strong&gt;Focus Chain&lt;/strong&gt; — 穩定任務方向&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;默認啓用，Cline 自動從任務中生成待辦清單（todo list），並每 &lt;strong&gt;六條消息&lt;/strong&gt;定期注入上下文中，以提醒自己當前進度與目標。&lt;/li&gt; 
 &lt;li&gt;待辦清單內容會隨着任務進展自動更新：完成項被標記、新任務加入、優先級調整，確保模型不會偏離主線 。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. &lt;strong&gt;Auto Compact&lt;/strong&gt; — 自動壓縮上下文，延續任務&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;當上下文接近極限時，Cline 會自動總結當前會話的關鍵內容（技術決策、代碼變化、進度等），並將其壓縮為摘要，替換掉膨脹的歷史記錄，然後繼續任務。&lt;/li&gt; 
 &lt;li&gt;例如，一個需要 500 萬 token 的任務，在 20 萬 token 的上下文窗口下也能順利完成。配合 Claude 4 Sonnet 的 100 萬 token 窗口，顯得尤為高效。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;其他 v3.25 更新亮點&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;增加了對 Claude Sonnet 4（200k context window）的支持（OpenRouter 和 Cline Providers）；&lt;/li&gt; 
 &lt;li&gt;支持自定義 Requesty Provider 的 base URL；&lt;/li&gt; 
 &lt;li&gt;修復了 checklist 更新過程中重複執行 &lt;code&gt;attempt_completion&lt;/code&gt; 的 bug；&lt;/li&gt; 
 &lt;li&gt;修復 Banner 無法關閉的問題；&lt;/li&gt; 
 &lt;li&gt;在 AWS Bedrock 中加入了 GPT-OSS 模型支持。&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366869/cline-v3-25</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366869/cline-v3-25</guid>
      <pubDate>Mon, 18 Aug 2025 02:39:04 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>先進算力新選擇 | 2025 華為算力場景發佈會暨北京 xPN 夥伴大會成功舉辦</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;2025 年 8 月 15 日，以「先進算力新選擇」為主題的「2025 華為算力場景發佈會暨北京 xPN 夥伴大會」成功舉辦。眾多計算產業和相關行業精英齊聚一堂，聚焦先進算力與行業場景的深度融合，共同探討如何推動算力價值釋放；同時分享了華為在通用計算、大模型技術及 AI 應用創新等領域的最新成果，以及基於昇騰、鯤鵬體系，與夥伴在教育、政務、醫療、製造等場景的創新實踐。會上還重磅發佈了「xPN 先鋒行動」，華為將從研營銷供服全方位支撐夥伴，深耕根技術，協同夥伴打造有競爭力的產品和方案，服務千行萬業數智化升級，共贏智能化未來。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;img alt="圖片 1.png" src="https://static.oschina.net/uploads/img/202508/15232531_Y2ZT.png" referrerpolicy="no-referrer"&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;2025 華為算力場景發佈會暨北京 xPN 夥伴大會現場&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;華為商業銷售部總裁張海平帶來開場致辭，為活動拉開序幕。他談到，2024 年華為經營穩健，中國區政企業務同比增長 25%，中國區政企計算產業增長 80%，鯤鵬、昇騰平台作用關鍵，分別應用於多領域及加速 AI 技術落地。面向中小企業，華為堅持夥伴主導，2024 年鑽金銀夥伴、商業交易夥伴數量分別增長 25%、22%，並推出 APN 和 KPN 計劃深化合作。2025 年華為計算產品全面升級，開放鯤鵬模組、昇騰板卡等，鯤鵬升級工具鏈和引擎，昇騰支持夥伴開發邊端 AI 產品，已發佈眾多相關產品。兩大計劃加持下，部件夥伴業務增長翻番，已認證 APN 夥伴近 30 家、KPN 夥伴 20+家，夥伴數量和質量顯著提升。未來，華為將持續投入計算產業，堅持根技術創新，強化夥伴體系。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;img alt="圖片 3.png" src="https://static.oschina.net/uploads/img/202508/15232557_U5jD.png" referrerpolicy="no-referrer"&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;華為商業銷售部總裁，張海平&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;IDC 中國研究副總裁周震剛在演講中指出，當前數字化和智能化成為經濟增長新引擎，數字經濟蓬勃發展，中國數智化轉型支出增長顯著，智能化推動產業升級，生成式 AI 在多行業滲透。全球及中國 ICT 支出穩步增長，IT 市場進入 AI 大轉型時代，生成式 AI 帶來新的技術棧和架構變化。算力是智能化發展的支撐，全球服務器保有量和 CPU 核數提升，ARM 架構服務器增長迅速，中國市場增速更高。大模型推動下 AI 基礎架構市場高速增長，算力需求結構從訓練向推理傾斜，自主創新算力崛起，智能算力需求爆發式增長且供給部署方式多元。數智時代算力基礎設施需具備高性能多核處理器等特性，並具備面向 AI 應用的加速技術。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片 4.png" src="https://static.oschina.net/uploads/img/202508/15232610_KmVB.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;IDC 中國研究副總裁，周震剛&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;在昇騰技術與實踐分享環節，嘉賓圍繞「昇騰無處不在，智能化升級新選擇」主題展開，聚焦教育、管理、醫療監護場景，展現了昇騰算力賦能智能化升級的實踐分享。&lt;/p&gt; 
&lt;p&gt;華為昇騰計算領域副總裁劉偉在演講中談到，昇騰部件及解決方案致力於做好夥伴背後的支持力量，其部件產品覆蓋 AI 全場景，部件產品從模組到標卡共 9 款，滿足夥伴開發需求，助力自主創新。2025 年下半年，昇騰將實施從低算力到高算力全面覆蓋邊端場景的策略，同時，部件產品重點投入 Atlas 300I A2 和 310 模組，以此提升產品解決方案的競爭力並完善生態豐富度。CANN 全面開源開放，架構靈活，工具鏈完備，2025 年底將完成 A2 版本開源，助力場景化創新。昇騰硬件與 CANN 形成軟硬雙引擎，賦能千行萬業，同時通過多方協同支撐夥伴發展，共同構建萬物互聯的智能世界。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片 5.png" src="https://static.oschina.net/uploads/img/202508/15232625_AMg7.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;華為昇騰計算領域副總裁，劉偉&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;圖靈智感（深圳）科技有限公司北京分公司總經理王元凱分享了公司基於昇騰算力平台的自主創新 AI 應用實踐，包括癲癇病患者智能監護系統、Shine Nexus 法律系統、Cloudasis 代碼開發平台等解決方案，同時還介紹了昇騰 AIPC 產品線的智能終端產品及適老機器人等產品的規劃，展現了 AI 應用的廣闊前景。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片 6.png" src="https://static.oschina.net/uploads/img/202508/15232633_1BHv.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;圖靈智感（深圳）科技有限公司北京分公司總經理，王元凱&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;軟通華方企業級產品管理部總經理鄧忠良圍繞軟通華方計算 APN 業務展開的介紹中，提及了多款核心產品及合作項目。其中，超炫 3700 液冷工作站以鯤鵬 920 和昇騰 310 處理器為基礎，不僅性能強勁、應用領域廣泛，還擁有自主知識產權。此外，軟通華方還聯合多方力量，打造了政務、應急、醫療等領域的 AI 一體機，在教育行業推行「一省一策」的發展策略，這些舉措展現了其在計算領域的技術實力與生態整合能力。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片 7.png" src="https://static.oschina.net/uploads/img/202508/15232655_uFiJ.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;軟通華方企業級產品管理部總經理，鄧忠良&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;北京傑創永恆科技有限公司 CTO 趙鵬翀着重介紹了昇騰教育行業 AI 教學場景應用，以啓智 01 開發者套件為核心，構建 AI 教育全鏈條，搭載立體化課程與實訓項目，推動教學與實踐結合，培養符合產業需求的昇騰 AI 人才。其擁有一站式 AI+教育社區，課程體系豐富，涵蓋多類課程與崗位任務，平台運行數據可觀。還推出多種實驗設備，包括訓推一體機、移動機器人、智能電子實驗台等，形成多學期課程體系，構建知識、工具、技能鏈。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片 8.png" src="https://static.oschina.net/uploads/img/202508/15232718_yP9N.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;北京傑創永恆科技有限公司 CTO 趙鵬翀&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;鯤鵬算力場景發佈環節，圍繞「鯤鵬無處不在，通算場景新選擇」主題，嘉賓針對網安、DPI 場景，闡釋了鯤鵬算力支撐通算場景創新的路徑。&lt;/p&gt; 
&lt;p&gt;華為鯤鵬計算領域副總裁劉雲強在演講中指出，以鯤鵬為代表的 ARM 創新力量發展迅猛，算力增長率 10 倍於 x86 算力，鯤鵬已成為自主創新首選算力。鯤鵬堅持計算生態戰略，突破根技術，聚焦芯、硬、軟協同，持續開放助力夥伴創新，推出多系列模組且算力全覆蓋。同時，通過全流程工具鏈等激發行業應用創新，在多場景具備解決方案，2025 年已與 50+夥伴打造 70+款產品，KPN 體系蓬勃發展，佈局「1+N+X」全國生態支持創新中心，為算力產業自主創新發展注入澎湃動能，驅動數字經濟邁向新高度。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片 9.png" src="https://static.oschina.net/uploads/img/202508/15232723_6ZNm.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;華為鯤鵬計算領域副總裁，劉雲強&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;北京樂研科技股份有限公司研發中心副總經理兼產品總監張帥介紹到，樂研深耕行業近 20 年，是網絡安全硬件平台領軍者，擁有多項專利，研發佔比超 30%，具備高效硬件定製、嚴格質量管控、快速製造及優質供應鏈整合能力。其鯤鵬產品具有明確技術路線，2024 - 2025 年推出中高階網絡安全硬件，後續將逐步拓展。隨後詳細展示了多款基於鯤鵬模組的網絡安全硬件產品參數，凸顯出樂研在網絡安全硬件領域的技術實力與發展潛力，為行業注入強勁「芯」動能。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片 10.png" src="https://static.oschina.net/uploads/img/202508/15232730_cGIW.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;北京樂研科技股份有限公司研發中心副總經理兼產品總監，張帥&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;航天聯志技術有限公司產品線副總經理馬成龍重點介紹了兩款核心產品。一是 Z2551-M0，作為自研高性能一體化設備，專為大規模 DPI 場景設計，搭載鯤鵬 KP920 模組，模塊化設計且全棧優化，具備自主創新等亮點，可應用於信息安全服務、政企合規審計等領域；二是 Z2651-M0，為針對網絡安全市場的多節點模塊化計算平台，基於鯤鵬 KPN 組開發，有多種節點規格，單節點配置靈活，能為多領域提供計算解決方案，彰顯了品牌技術高度與市場競爭力。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片 11.png" src="https://static.oschina.net/uploads/img/202508/15232801_kAtG.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;航天聯志技術有限公司產品線副總經理，馬成龍&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;會上，華為中國政企計算解決方案銷售總經理程龍飛、華為北京政企夥伴與商業銷售部部長公磊、華為北京政企計算解決方案銷售部部長李峯、華為北京整合營銷部部長林鵬以及 5 位夥伴代表共同發佈「xPN 先鋒行動」，華為將從研營銷供服全方位支撐夥伴，深耕根技術，旨在協同更多夥伴，打造更有競爭力的產品和方案，更好地服務千行萬業客戶數智化轉型升級。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;img alt="圖片 2.png" src="https://static.oschina.net/uploads/img/202508/15232812_ru5G.png" referrerpolicy="no-referrer"&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;「xPN 先鋒行動發佈」儀式啓動&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;從政策解讀到技術實踐，從場景分享到生態共建，大會為計算產業搭建交流合作平台，推動先進算力從技術參數轉化為行業數智化轉型動力，以算力支點撬動產業升級，繪就數智時代生態藍圖，助力千行萬業邁向數智發展新高度。未來，華為將持續深化與夥伴協同，以先進算力為引擎，驅動更多行業場景創新實踐，加速數智化轉型進程，共創數智時代新價值。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366517</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366517</guid>
      <pubDate>Fri, 15 Aug 2025 15:28:00 GMT</pubDate>
      <author>來源: 資訊</author>
    </item>
    <item>
      <title>Gitee 企業版測試管理全面升級：流程更順暢，交付更可靠</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;Gitee 企業版近日對測試管理功能進行了集中優化，圍繞測試用例管理、測試計劃執行與測試報告生成三大核心模塊，顯著提升了規範性、可追溯性與協作效率。&lt;/p&gt; 
&lt;h2&gt;用例管理：版本清晰，評審規範&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;支持查看用例被引用情況&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;用例詳情頁新增「測試計劃」Tab，展示該用例被哪些測試計劃引用及其版本；用例列表支持顯示「被引用測試計劃數」字段。&lt;/p&gt; 
&lt;p&gt;&lt;img height="318" src="https://static.oschina.net/uploads/space/2025/0815/192049_CjRf_2720166.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192106_Yr0n_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;用例版本與評審一一對應&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;每個用例版本僅對應一個評審記錄，評審結果固定為「待評審」「已通過」「未通過」，評審通過後不可修改。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192134_yLGs_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;版本維護機制優化&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;用戶修改已通過評審的用例後，系統將自動生成新版本，無需手動新建。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;支持自動提示發起新評審&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;當評審中的用例已有新版本，系統將在評審列表中提示是否重新評審。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192228_4bhZ_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;用例評審檢查更新&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;測試計劃：執行可追，缺陷直連&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;新增用例評審限制&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;測試計劃僅支持添加評審通過的用例，確保計劃執行的用例質量。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;支持多次執行記錄&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;每條用例可記錄多次執行結果，包括步驟實際表現、結果備註等，已提交結果不可修改，僅允許調整最近一次執行備註。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192251_8nAZ_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;用例列表新增查看結果分佈、最新執行結果、新增執行結果&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192304_ZMNE_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;用例詳情記錄多次執行過程&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;快速創建缺陷&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;用例詳情和列表頁面支持快速創建缺陷，系統自動關聯該用例並回填前置條件、步驟及實際結果。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192329_24FO_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;用例詳情頁面快速創建缺陷&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192344_8Wa4_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;用例列表頁面快速創建缺陷&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192358_4EEW_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;缺陷描述自動回填步驟信息&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;執行記錄支持富文本&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;用例的「實際結果」和「結果備註」字段支持富文本編輯。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192414_jDYP_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192423_wsJS_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;自動檢測用例新版本&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;測試計劃將提示用例是否存在新的評審通過版本，支持一鍵更新。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192445_thwU_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;測試報告：結構自定義，導出靈活&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;報告內容可配置&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;新增組件化報告配置功能，用戶可按需選擇報告組件，自定義順序及篩選條件。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192459_lHUl_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;自定義測試報告&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192515_0RUZ_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;測試報告示例&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;支持富文本總結與模板複用&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;報告總結支持富文本編輯，並可基於模板快速填寫。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192532_6ceE_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;生成靜態報告&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;支持導出 PDF、Excel、用例執行明細等多種格式和場景，並可複製報告鏈接或配置，方便共享與複用。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;如果線上報告的列表類（缺陷列表、工作項列表、PR 列表）組件內數據超過 100 條時，PDF 無法導出超過 100 條的部分，可能需要導出 Excel 格式報告查看完整列表數據&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192544_tV6X_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;導出測試報告&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192607_tYjy_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;複製報告鏈接&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192620_PF3S_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;複製報告配置&lt;/em&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;歡迎訪問&amp;nbsp;&lt;a href="https://gitee.com/enterprises" target="_blank"&gt;https://gitee.com/enterprises&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;本次更新進一步夯實了 Gitee 企業版在研發測試管理場景下的流程完整性與協作效率，特別適用於對質量管理要求較高的項目團隊，歡迎企業版用戶前往體驗嶄新的測試管理模塊。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/192635_G9l9_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366490</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366490</guid>
      <pubDate>Fri, 15 Aug 2025 11:26:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>軟件工廠之可信依賴庫，守護裝備研製軟件供應鏈安全</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;h2 style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;引言：軍工軟件供應鏈安全的戰略意義與治理目標&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;軍工軟件供應鏈安全是國防科技工業高質量發展的核心保障，其戰略必要性根植於第三方組件安全風險的普遍性與軍工場景特殊性的疊加效應。根據 Gartner 報告顯示，75% 的企業安全事件源於第三方組件漏洞，這一行業共性問題在軍工領域被進一步激化。與民用場景相比，軍工軟件供應鏈具有網絡物理隔離、裝備長週期服役、涉密信息保護及國產化替代等特殊要求，傳統組件管理模式的固有缺陷在此場景下呈現顯著放大效應，&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;其不可持續性已成為制約裝備研製安全的關鍵瓶頸&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;軍工可信組件依賴源治理的核心目標在於構建從組件引入到裝備退役全鏈路的安全管控體系，實現&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「來源可溯、版本可控、安全可信、供應穩定」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;的治理要求。作為這一體系的關鍵支撐，&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「軟件工廠之可信依賴庫」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;定位為供應鏈安全的「守門人」，通過整合全生命週期管理能力，為解決傳統模式痛點、保障裝備研製供應鏈安全提供系統性解決方案。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/190934_y36j_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;軍工行業開源依賴組件管理的核心挑戰&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;網絡物理隔離與開源組件獲取受限的矛盾&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191009_bKJV_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在軍工裝備研製領域，網絡物理隔離是保障涉密信息安全的核心架構，其設計初衷源於「涉密信息不上網」的合規要求，通過將內網與外部網絡徹底物理隔離，構建起涉密數據與外部風險的安全屏障。然而，這種隔離機制在強化安全的同時，也形成了研發資源獲取的天然壁壘，導致外部優質組件及更新資源難以接入內網環境，制約了裝備研製過程中對外部先進技術的吸收與整合，由此引發&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「安全隔離」與「資源獲取」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;的根本矛盾。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;該矛盾的直接影響體現在安全與效率的雙重層面。一方面，外部依賴風險顯著加劇。傳統模式下，內網組件獲取渠道高度單一，且依賴人工操作（如 U 盤擺渡、光盤刻錄等）實現外部資源向內網的遷移，這種模式不僅導致組件更新滯後，更使研發系統面臨「斷供即癱瘓」的風險——一旦外部資源供應中斷或人工操作鏈條受阻，裝備研製進程將直接陷入停滯。另一方面，人工操作過程本身成為新的安全隱患。人工擺渡不僅效率低下，延長了組件獲取週期，還因操作環節的複雜性提升了失誤概率。例如，某軍工項目曾因 U 盤擺渡過程中的操作不當，導致惡意代碼被引入內網系統，對涉密研發環境造成嚴重威脅，凸顯了人工幹預在安全管控中的不可靠性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;從資源管理視角看，物理隔離進一步放大了組件存儲的低效問題。由於軍工內網的獨立存儲特性，分散化的組件管理模式導致重複存儲現象普遍，相關數據顯示，內網中組件重複存儲佔比超過 30%，造成存儲資源的嚴重浪費。這種「安全優先、資源冗餘」的傳統模式，既無法滿足裝備研製對高效資源利用的需求，也未能從根本上消除人工操作帶來的安全漏洞，最終陷入安全與效率的雙重困境，為後續構建內網可信依賴庫的解決方案提出了現實需求。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;涉密項目追溯與分散管理的衝突&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191027_bcsX_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在裝備研製的涉密場景中，涉密項目追溯與分散管理的衝突集中體現在「合規-效率」的雙重矛盾上。從合規角度而言，明確規定了「配置項變更控制」要求，強調裝備研製需滿足全生命週期可追溯性，確保&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「一物一碼、全程留痕」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;然而，傳統分散式管理模式下，製品數據往往碎片化存儲於不同研發環節，缺乏統一的版本控制與追溯機制，直接導致了版本管理的混亂。典型表現為「研發環境使用 A 版本、測試環境使用 B 版本」的現象，使得審計鏈條斷裂，無法滿足全生命週期可追溯的合規要求，這不僅違反了相關條款，還可能導致裝備承製單位面臨資格審查不通過的風險。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;從運營效率角度分析，分散管理模式顯著增加了管理成本與問題解決週期。在該模式下，由於版本信息分散且缺乏統一追溯能力，問題定位時間被延長至周級；而採用統一版本池管理時，同類問題定位時間可控制在分鐘級，兩者效率差異顯著。這種效率損失不僅增加了研發過程中的管理負擔，還可能因問題解決週期過長影響項目整體進度。因此，解決涉密項目追溯與分散管理的衝突，建立統一版本池管理機制，成為平衡合規要求與運營效率、保障裝備研製軟件供應鏈安全的緊迫需求。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;合規審計效率低下與監管風險&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191050_bYmH_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;軍工領域的合規審計工作面臨着監管要求與傳統人工模式之間的&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;結構性矛盾&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。其核心監管要求具有高度特殊性，包括國產化組件佔比需達到 90% 以上，以及明確禁止使用特定來源的組件，這些指標直接關係到裝備研製項目的合規性基礎。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;然而，傳統人工審計模式在應對此類要求時存在顯著短板。一般項目涉及超過 5000 餘個組件，採用人工梳理方式需較長的才能完成審計，不僅效率低下，更難以全面覆蓋複雜的全量依賴關係，易因人為疏漏導致關鍵信息遺漏，如國產化比例不達標、禁用組件未被識別等問題，直接影響合規結論的準確性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;人工審計模式的不可靠性進一步加劇了監管風險，一旦因疏漏導致合規結論失真，裝備研製項目將面臨合規性不通過的重大隱患，可能引發項目停滯、相關資質取消等嚴重後果。這種風險並非孤例，民用領域因合規審計疏漏導致項目受阻的案例已充分證明，合規問題對項目推進的致命影響。因此，傳統人工審計模式已無法滿足軍工領域對合規審計效率與準確性的雙重需求，構建自動化合規引擎以實現實時、全面的合規校驗，成為化解合規審計效率低下與監管風險的必然選擇。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;殭屍組件與斷供風險的長期安全隱患&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191105_hMkQ_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;軍工裝備具有&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「長生命週期」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;特性，其服役週期往往長達數十年，而組件的開發與維護週期通常較短，這種特性使得組件管理面臨嚴峻挑戰。其中，「殭屍組件」作為永久性風險點，對裝備的長期安全運行構成顯著威脅。此類組件通常因開發團隊解散、技術支持終止等原因，在裝備服役期間逐漸失去維護能力，一旦暴露安全漏洞，將因缺乏持續更新機制而無法修復。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;除殭屍組件外，開源組件的斷供風險同樣對裝備研發與維護的連續性構成重大挑戰。在傳統模式下，由於缺乏替代儲備機制，一旦遭遇開源組件斷供，研發團隊往往需要重構模塊，耗時通常超過 3 個月，嚴重影響研發進度。&lt;/span&gt;&lt;/p&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;軟件工廠可信依賴庫的解決方案架構&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191120_o1Dc_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;總體設計理念：全鏈路可信與軍工適配&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;軟件工廠可信依賴庫的總體設計理念以&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「全鏈路可信」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;與&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「軍工專屬適配」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;為核心，通過架構層面的針對性設計，系統性解決裝備研製軟件供應鏈面臨的物理隔離、分散管理及審計追溯等關鍵挑戰，並實現與軍工場景的深度融合。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;該理念指導下的架構以 Gitee 可信依賴庫構建的&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;軍工專屬「三位一體」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;解決方案為基礎，採用分層設計方法，將技術特性與軍工場景需求緊密結合，覆蓋&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「環境-製品-管控」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;全鏈條，形成主動防禦能力以保障製品管理的安全可控與自主可靠。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191150_0IVW_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在解決核心挑戰方面，架構通過多維度設計實現精準應對：&lt;/span&gt;&lt;/p&gt; 
&lt;ol style="list-style-type:decimal; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;軍工內網物理隔離要求：方案在「環境」層採用內網獨立部署模式，確保依賴庫運行環境與外部網絡嚴格隔離，從物理層面阻斷非授權訪問與數據泄露風險；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;依賴製品分散管理問題：通過構建全品類製品池實現統一管控，整合各類軟件構件、工具及 metadata 信息，消除多源分散帶來的版本混亂與管理盲區；&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;審計追溯痛點：在「管控」層集成安全合規引擎，實現對製品全生命週期操作的實時記錄、自動化審計與追溯分析，滿足軍工領域對過程可追溯性的嚴苛要求。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;「軍工專屬」設計是該架構區別於民用方案的核心特徵，主要體現在國產化環境適配與安全機制強化兩方面。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在國產化適配層面，架構深度兼容國產操作系統、數據庫及中間件，確保在軍工特定 IT 環境中穩定運行；在安全機制上，全面應用國密算法（如 SM2、SM3、SM4）對製品進行加密存儲與傳輸校驗，同時結合斷供保護機制，通過本地緩存與鏡像同步策略，保障在外部資源不可用時的持續供應能力，實現「自主可靠」的底線要求。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191212_e9oR_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;此外，架構通過「三位一體」的分層協同（環境層保障基礎安全、製品層實現全品類統一管理、管控層強化合規審計），實現&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「安全-效率-合規」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;的三重平衡。在安全維度，通過全鏈路可信驗證與主動防禦機制構建縱深防護體系；在效率維度，全品類池與自動化管控流程減少人工幹預，提升依賴獲取與管理效率；在合規維度，內置軍工行業特定的合規檢查規則，確保所有操作符合國家及行業標準。這種平衡設計使架構既能滿足軍工領域對安全性與合規性的極高要求，又能保障裝備研製過程中的研發效率與供應鏈連續性。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;核心技術組件：構建可信依賴源陣地&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;構建可信依賴源陣地的核心在於通過關鍵技術組件與供應鏈安全核心挑戰的精準對應，形成全鏈路防護能力。針對物理隔離環境下組件獲取難題，採用內網獨立部署層與自動化擺渡機制相結合的方案：通過構建與外部網絡物理隔離的獨立運行環境，支持麒麟 OS、統信 UOS 等國產化操作系統，確保依賴組件的獲取、存儲及分發全過程限定在內部網絡，嚴格遵循&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「涉密信息不上網，上網信息不涉密」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的安全原則。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;同時，自動化擺渡機制實現外部可信資源的高效引入，較傳統人工擺渡方式效率&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;提升 24 倍&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，有效解決了物理隔離場景下組件獲取的時效性與安全性矛盾。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191233_6e25_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;針對傳統模式下組件來源分散、版本混亂導致的資源浪費問題，全品類可信池與存儲去重技術形成協同解決方案。全品類可信池覆蓋 Java、.NET、C、C++ 等主流開發語言組件，並納入達夢、人大金倉等國產化數據庫驅動，同時兼容 Docker 鏡像、Helm Charts 等雲原生製品，實現多類型組件的統一管理；結合存儲去重技術，有效降低組件存儲重複率達 30%，顯著減少存儲空間佔用，解決了分散管理模式下的資源冗餘問題，實現組件全生命週期的可追溯與版本規範化控制。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在合規審計層面，安全合規引擎承擔核心防護職責。該引擎集成 CNNVD、CNVD 等國產化漏洞庫，可實時監測組件已知漏洞並觸發預警；通過內置協議分析模塊，對 GP L 等限制性開源協議組件實現自動阻斷，同時支持配置國產化組件佔比閾值（如≥90%），通過硬性指標推動供應鏈國產化轉型，從源頭規避合規風險。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;針對開源組件斷供及殭屍組件風險，斷供保護機制構建雙重防護體系。一方面，預置國產化替代組件庫，形成關鍵組件的自主可控備份；另一方面，通過實時監測開源社區動態，可在 30 分鐘內完成斷供風險評估並推送替代方案，有效降低技術依賴風險，保障裝備研製軟件供應鏈的連續性與穩定性。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;內網可信源構建：物理隔離下的組件統一收斂&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191250_FYBY_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在裝備研製領域的物理隔離環境中，由於網絡與外部完全隔絕且內部系統獨立運行，組件獲取、管理及共享存在顯著的「組件孤島」問題。各部門或系統間的組件資源難以統一管控，不僅導致重複開發和資源浪費，還因缺乏標準化准入機制而增加了安全風險，嚴重製約了軟件供應鏈的協同效率與安全可控性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;針對上述問題，解決方案需在安全與效率之間建立平衡機制，通過&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「白名單准入+自動化擺渡」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;的雙重策略實現組件統一收斂。首先，在安全管控層面，構建支持國產化操作系統的獨立內網環境，嚴格遵循「涉密信息不上網」原則，確保環境與外部網絡物理隔離。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;同時，建立「白名單+人工審核」雙重准入機制，僅允許通過認證的合規組件入庫，從源頭保障組件的安全性與可靠性。其次，在效率提升層面，集成自動化擺渡工具，將外部組件引入流程優化為&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「掃描-審批-入庫」的一鍵式操作&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，替代傳統人工擺渡的繁瑣流程。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;該方案的實施效果顯著。通過自動化擺渡工具的應用，外部組件引入週期從傳統&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;48 小時的人工處理縮短至 2 小時內&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，大幅提升了組件獲取效率；某院所的實踐案例表明，在實現組件統一管理與安全管控的基礎上，有效破解了&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「物理隔離導致組件孤島」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的痛點，驗證了&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「安全可控前提下效率提升」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的核心價值。這一機制不僅確保了物理隔離環境下組件的安全准入，還通過流程優化實現了資源的高效利用，為裝備研製軟件供應鏈的可信化管理提供了關鍵支撐。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;斷供保護與國產化替代閉環&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;針對裝備研製軟件供應鏈中&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「斷供-替代」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的核心痛點，需構建&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「預防-響應-保障」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;三位一體的斷供保護與國產化替代閉環體系，以滿足軍工領域自主可控要求，支撐「科技強軍」戰略實施。&lt;/span&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;預防體系&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;建立動態化的風險識別與管控機制。通過構建國外組件與國產化組件的映射關係庫，實現對關鍵依賴的精準替代路徑規劃，例如將 Spring Boot 映射至國產化組件「金蝶天燕 JBoot」，並按季度更新映射關係及安全等級標註，確保替代方案的時效性與適配性。同時，實時監測開源社區動態，對「6 個月無更新」等異常狀態的組件標記為高風險，並在 30 分鐘內完成風險評估及替代方案推送，從源頭降低斷供風險。&lt;/span&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;響應體系&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;建立「預警-評估-替代」三級快速響應機制。通過「1 小時預警-4 小時評估-24 小時替代」的標準化流程，實現對斷供事件的快速處置。&lt;/span&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;保障體系&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;構建多副本災備體系以應對極端場景。核心國產化組件需在 3 個物理隔離節點存儲副本，形成分佈式冗餘架構，尤其支持「中心庫故障時邊緣節點本地只讀」模式。該設計確保在中心庫完全不可用的極端情況下，邊緣節點仍能通過本地存儲的只讀副本維持基本研發活動，最大化保障裝備研製的連續性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;綜上，「預防-響應-保障」三層體系通過動態清單實現風險前置防控，通過三級機制提升應急響應效率，通過多副本災備強化極端場景韌性，有效縮短替代週期並保障研發連續性，同時也為構建「國產化替代閉環」方案奠定了實踐基礎，為裝備研製軟件供應鏈的自主可控提供了堅實支撐，切實響應了軍工領域「科技強軍」的戰略需求。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;涉密裝備項目全鏈路追溯&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;涉密裝備項目對軟件供應鏈安全的核心需求在於實現「全程可追溯」，以滿足嚴苛的合規性要求與風險管控目標。針對這一需求，軟件工廠可信依賴庫通過構建&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「四級管控」機制&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，可全面覆蓋組件從准入到部署的全生命週期，實現從需求到製品的端到端追溯能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;組件准入管控&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;組件准入管控作為全鏈路追溯的起點，通過建立國產化及非涉密組件白名單，嚴格限定可使用的組件範圍，並對外部引入組件執行三重審批流程，從源頭阻斷不合規組件進入供應鏈的風險。這一環節確保了組件來源的合規性與安全性，為後續追溯奠定基礎。&lt;/span&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;版本鏈追溯&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;版本鏈追溯環節通過元數據關聯技術，將組件的涉密等級、項目代號等關鍵信息與構建、測試、環境等全流程數據整合，形成「製品 ID→構建流水線→代碼提交→需求文檔」的逆向追溯路徑。該路徑實現了從最終製品到原始需求的雙向溯源，確保每個版本的組件都能清晰定位至具體的研發活動與業務背景。&lt;/span&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;操作審計&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;操作審計機制通過記錄所有制品操作（如上傳、下載、修改）的操作人、IP 地址、時間戳等信息，形成完整的操作軌跡。審計日誌採用不可篡改技術存儲，保存期限不低於 5 年，為合規審查與事件追責提供了客觀依據。&lt;/span&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;環境隔離&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;環境隔離則按涉密等級劃分獨立倉庫，研發、測試、生產環境的製品通過單向光閘進行物理隔離傳輸，並依託中央倉庫的「成品版本池」統一管理跨環境版本，有效避免不同涉密等級環境間的信息泄露風險。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;「四級管控」機制的協同作用顯著提升了追溯效率，使審計準備時間從傳統模式的 2 周縮短至 1 天，追責效率提升 90%，大幅降低了合規審查的時間成本。同時，該機制嚴格遵循相關標準對軟件過程管理的要求，通過全生命週期的追溯能力與不可篡改的審計記錄，滿足了涉密場景下對過程可追溯性、數據完整性及合規性的核心訴求，為同類涉密裝備項目提供了可複用的全鏈路追溯實施模板。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;多環境安全分發與一致性管控&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在裝備研製軟件供應鏈中，多環境一致性是保障軟件可靠交付的關鍵挑戰之一。不同環境（如研發、測試、生產）的配置差異、依賴版本混亂常導致「研發環境能正常運行，生產環境卻報錯」的問題，嚴重影響軟件部署效率與運行穩定性。為此，需構建兼顧安全隔離、傳輸加密與高效同步的多環境依賴分發體系，實現「研發-生產」全鏈路的依賴一致性管控。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191308_U5QN_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;針對環境隔離與版本精準管控需求，方案設計&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「中心庫→區域節點→環境節點」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;三級分級分發網絡，並結合環境標籤強制管控機制。其中，中心庫作為核心樞紐存儲全量依賴資源，區域節點承擔跨區域分發與緩存職能，環境節點則直接服務於具體研發或生產環境。通過標籤化管控，研發環境僅允許存儲和使用開發版依賴，生產環境則嚴格限定接收「測試通過+審批完成」的正式版本，從源頭避免因版本混用導致的環境不一致問題。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;為保障依賴包在多級網絡傳輸中的安全性，方案採用國密算法構建傳輸防護體系：使用 SM4 對稱加密算法對傳輸數據進行加密處理，防止傳輸過程中信息泄露；同時通過 SM3 哈希算法對依賴包進行校驗，確保數據完整性，避免惡意篡改或傳輸錯誤。此外，建立元數據關聯機制，將依賴包與代碼 commit ID、測試報告等關鍵信息綁定，實現依賴版本的全鏈路可追溯，進一步強化分發過程的可控性。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;在效率與可靠性優化方面，方案引入&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;智能分發網絡技術&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，通過動態路由與邊緣緩存策略，將跨區域傳輸延遲從秒級降至毫秒級；結合多副本存儲與邊緣節點本地只讀模式，構建災備與容災機制，提升系統抗風險能力。針對野外裝備研製場景，區域節點支持車載部署，通過衞星鏈路實現增量同步，有效減少跨區域傳輸流量達 60%，適配野外網絡不穩定的特殊環境需求。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;該方案通過分級&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;網絡隔離、標籤化管控、國密加密與智能優化&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的協同作用，在保障多環境依賴一致性的同時，顯著提升了分發效率與安全性。實際應用中，跨區域依賴同步效率與穩定性得到有效驗證，為裝備研製軟件供應鏈的&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「安全-效率-一致性」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;平衡提供了有力支撐。&lt;/span&gt;&lt;/p&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;實施價值與軍工專屬保障體系&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;多維度價值轉化&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;可信依賴庫的實施價值可通過「安全-效率-合規-戰略」四維量化分析得以全面呈現，其綜合效益體現在風險管控、研發提效、合規保障及戰略自主等多個層面。&lt;/span&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;安全價值&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;顯著降低開源組件引入的安全風險，高危漏洞引入率下降 92%，開源組件整體安全風險降低 80% 以上，符合相關標準要求。通過阻斷高危漏洞傳播路徑，有效減少單次故障造成的損失超千萬元，形成了對裝備軟件供應鏈安全的系統性風險管控能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191421_qe4k_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;效率價值&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;實現了研發全流程的效能提升。存儲成本下降 50% 以上，組件跨項目複用率提升 65%，使用效率提升 80%；構建部署週期從 2 小時縮短至 30 分鐘以內，新功能從「代碼合併到全球可用」的時間從 48 小時壓縮至 6 小時（效率提升 87.5%），裝備軟件測試週期縮短 40%，顯著減少了研發過程中的無效工時消耗，提升了裝備軟件的迭代速度。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191435_G7S1_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;合規價值&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;確保 100% 滿足國防科工局等監管審計要求，為裝備研製活動提供了堅實的合規底線保障，有效規避了因不合規導致的處罰風險，確保軟件供應鏈管理過程的透明可追溯。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191449_dy9X_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3 style="margin-left:auto; margin-right:auto; text-align:center"&gt;&lt;span&gt;&lt;span&gt;戰略價值&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;通過構建自主可控的軍工軟件供應鏈，支撐了「科技強軍」目標的實現。某軍工集團已實現核心裝備軟件 100% 國產化組件構建，徹底擺脫對國外開源生態的依賴，增強了國防科技工業的核心競爭力，為軍工領域軟件供應鏈的自主可控發展奠定了基礎。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191507_qdyU_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;綜上，可信依賴庫從多維度實現了價值轉化，既解決了當前裝備研製中的安全與效率痛點，又滿足了合規要求，更助力了軍工軟件供應鏈的戰略自主，展現了顯著的綜合收益。&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="list-style-type:none !important; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span&gt;軍工專屬保障機制&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;針對軍工領域「高保密、高可靠」的核心要求，可信依賴庫方案設計了&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;「人員-流程-合規」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;三重專屬保障機制，以確保在複雜軍工環境中的穩定落地與安全運行。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191519_GqsY_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;通過「人員-流程-合規」三重機制的協同作用，該保障體系全面覆蓋了軍工環境中的保密要求、可靠性需求與合規壓力，為可信依賴庫方案在軍工複雜場景下的穩定運行提供了系統性支撐。&lt;/span&gt;&lt;/p&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:center"&gt;&lt;span&gt;&lt;span&gt;結語：以可信依賴庫築牢裝備研製安全基石&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;裝備研製作為國防科技工業的核心環節，其軟件供應鏈安全直接關係國家戰略能力建設。可信依賴庫作為軟件工廠體系的關鍵支撐，通過系統性破解裝備研製全鏈路的安全挑戰，為實現全生命週期安全可控提供了底層保障。針對網絡物理隔離環境下的依賴管理難題、全生命週期追溯需求、合規審計要求、殭屍組件治理及斷供風險防控等核心挑戰，&lt;/span&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;可信依賴庫構建了一體化解決方案，實現了從「被動防禦」到「主動防控」的範式轉變&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;span&gt;通過安全保障能力、研發效率提升、合規管理強化與戰略自主實現的多維度價值轉化，可信依賴庫不僅為裝備研製提供了安全可控、自主可靠的依賴組件支撐，更推動了軍工企業研發模式的優化與管理體系的升級。面對複雜的技術競爭與供應鏈安全形勢，加快構建自主可控的依賴源體系已成為軍工企業提升核心競爭力的必然要求。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;strong style="color:#0057ff"&gt;&lt;span&gt;以可信依賴庫為核心築牢裝備研製安全基石，既是落實「科技強軍」戰略的具體實踐，也是提升國防科技工業自主創新能力的關鍵舉措，將為國防現代化建設與國家長治久安提供堅實保障。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;em&gt;&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgitee.cn%2Ffactory" target="_blank"&gt;https://gitee.cn/factory&lt;/a&gt;&lt;/u&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style="color:black; margin-left:8px; margin-right:8px; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/191532_CvbZ_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366488</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366488</guid>
      <pubDate>Fri, 15 Aug 2025 11:16:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>英偉達、AMD 等參投，Cohere 估值達 68 億美元</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;Cohere 公司&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcohere.com%2Fblog%2Faugust-2025-funding-round" target="_blank"&gt;宣佈&lt;/a&gt;成功完成一輪 5 億美元的融資。這輪融資由 Radical Ventures 和 Inovia Capital 共同牽頭，參與者還包括 Nvidia、AMD Ventures、Salesforce Ventures 等多個機構投資者。此次融資使得 Cohere 的估值從此前的 50 億美元增至 68 億美元。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="375" src="https://oscimg.oschina.net/oscnet/up-d24220d0df394904462da42ac9f9ff2a73c.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;Cohere 總部位於多倫多，是一家專注於開發企業級大型語言模型（LLM）的公司。該公司推出了一系列名為 「Command」 的模型，其中最強大的 「Command A」 於今年三月首次亮相。Cohere 聲稱，其模型在多項任務上能夠匹配 GPT-4 的性能，並且響應速度提高了 75%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;除了語言模型，Cohere 還提供嵌入模型，這是一種將文件轉化為神經網絡可以理解的緊湊數值形式的技術。Cohere 表示，其最新的嵌入模型能夠處理長度達到 200 頁的多模態記錄和文檔。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;企業用戶可以通過雲端 API 訪問 Cohere 的模型，或選擇在本地部署，後者還可選擇使用 「隔離配置」。這種配置的 LLM 只能在內部基礎設施上運行，無法通過互聯網訪問。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;Cohere 近期也顯示出強勁的需求增長。據《信息週刊》報道，該公司預計到年底年化收入將超過 2 億美元，這比 2 月份的數字幾乎翻了一番。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;在宣佈融資的同時，Cohere 還任命了兩位高管。知名機器學習研究者 Joelle Pineau 成為新的首席人工智能官，而前 Uber 高管 Francois Chadwick 則擔任首席技術官。Pineau 曾領導 Meta 的 FAIR 機器學習實驗室，她表示將把更多研究力量集中在上週推出的 AI 生產力平台 North 上。該平台利用 AI 代理自動化數據同步等任務。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;Pineau 還透露，Cohere 計劃擴大其 AI 開發團隊，或將從 Meta 招募機器學習研究員。Francois Chadwick 的任命暗示 Cohere 可能為未來的上市做準備。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;在短期內，Cohere 可能會利用新募集的資金進行收購。此次融資發生在 Cohere 收購位於溫哥華的 AI 公司 Ottogrid 之後，後者開發了一個利用 AI 代理加速市場研究項目的平台。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366486</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366486</guid>
      <pubDate>Fri, 15 Aug 2025 10:59:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>華為、小米等大廠商搶佔 AI 眼鏡千億元級市場</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;智能眼鏡成為今年消費電子賽道的「黑馬」。根據調研機構 Counterpoint 發佈的《全球智能眼鏡型號出貨量追蹤》報告，2025 年上半年國際智能眼鏡市場的出貨量同比增長 110%。&lt;/p&gt; 
&lt;p&gt;據 IDC 預測，2025 年中國智能眼鏡出貨量預計達到 290.7 萬台，同比增長 121.1%。業內人士普遍認為，這緣於技術突破、市場需求釋放以及產業鏈成熟等多重因素。&lt;/p&gt; 
&lt;p&gt;「2025 年智能眼鏡行業發展的最大亮點在於 AI 大模型與 AR 技術的深度結合。」中國電子工業標準化技術協會部長王連升在接受《證券日報》記者採訪時表示，「未來兩年是智能眼鏡商業化應用關鍵期，生態構建能力是決定企業規模能否增長的重要因素。」&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;AI 眼鏡出貨量大增&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;作為智能眼鏡的細分品類，AI 眼鏡年內表現較為亮眼。Counterpoint 報告顯示，2025 年上半年，AI 智能眼鏡出貨量佔智能眼鏡總出貨量的 78%，相較於 2024 年上半年的 46% 和 2024 年下半年的 66% 有了顯著提升。&lt;/p&gt; 
&lt;p&gt;國內市場方面，IDC 數據顯示，2025 年第一季度中國智能眼鏡市場出貨量為 49.4 萬台，同比增長 116.1%。其中，中國音頻和音頻拍攝眼鏡市場出貨量 35.9 萬台，同比增長 197.4%。第二季度，AI 眼鏡出貨量上漲態勢得以延續。&lt;/p&gt; 
&lt;p&gt;在各大線上平台，AI 眼鏡的銷量也出現激增。《證券日報》記者注意到，李未可、小米、華為等品牌 AI 眼鏡在電商平台上銷量排名靠前，相關產品具有拍照、變光、翻譯等功能。&lt;/p&gt; 
&lt;p&gt;「今年以來，公司 AI 眼鏡的訂單量出現大幅增長，產品逐步得到市場認可。」湖北星紀魅族科技有限公司相關負責人對《證券日報》記者説。&lt;/p&gt; 
&lt;p&gt;深圳市雷鳥網絡科技有限公司創新硬件產品負責人楊克曉稱，公司上半年產品出貨量提升，首購用戶佔比達到 81%，用戶月活同比增長 314%。目前，AI 眼鏡正加速成為大眾消費產品。&lt;/p&gt; 
&lt;p&gt;杭州靈伴科技有限公司（以下簡稱「靈伴科技」）CEO 祝銘明表示，公司不斷迭代 AI 眼鏡，開拓多重功能和增值服務，吸引了一批企業訂單。近期，公司聯合支付寶上線了全球首個智能眼鏡支付方案。&lt;/p&gt; 
&lt;p&gt;談及 2025 年上半年 AI 眼鏡市場的迅速發展，邁睿資產管理有限公司首席執行官王浩宇對《證券日報》記者表示，這主要由三大核心因素共同推動：AI 大模型與增強現實技術實現深度融合，帶來 AI 眼鏡更沉浸式的使用體驗；智能眼鏡被納入補貼範圍後政策紅利持續釋放，產品性價比顯著提升，有效刺激消費需求；頭部廠商加速產品迭代，通過輕量化設計和多元化功能拓展，使產品覆蓋辦公、醫療、娛樂等多場景應用需求。&lt;/p&gt; 
&lt;p&gt;隨着技術革新、政策扶持與產品升級形成合力，AI 眼鏡市場進入高速增長通道，產品價格也更容易被消費者接受。綜合來看，年初以來，國內 AI 眼鏡均價已從數千元降至千元左右。在王浩宇看來，隨着下半年銷售旺季來臨，國內 AI 眼鏡的整體出貨量有望保持增長。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;構建差異化競爭力&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在行業加速發展的同時，市場競爭加劇。國內品牌紛紛錨定細分賽道，構建差異化競爭力。&lt;/p&gt; 
&lt;p&gt;小米、雷鳥等跨界品牌通過技術創新和價格策略快速崛起，出貨量位居前列；靈伴科技、大朋 VR 等品牌在 AI 眼鏡細分市場上不斷推陳出新，並持續拓展功能和適用場景；華為、阿里、字節跳動等品牌也紛紛入局。&lt;/p&gt; 
&lt;p&gt;國泰海通科技資深分析師李軒對《證券日報》記者表示，目前，AI 眼鏡行業呈現「百花齊放」態勢。從技術路線來看，有嘗試先做空間計算 AR 眼鏡的 Rokid，也有研發眼鏡光學攝像 AI 功能的小米等。不過，目前 AI 眼鏡市場還未出現真正的爆款。預計今年是 AI 眼鏡廠商突圍的一年，各大品牌迭代產品將帶動整體滲透率持續提升。&lt;/p&gt; 
&lt;p&gt;「2025 年下半年將有多款 AI 眼鏡新品問世。目前廠商在加快佈局輕量級的眼鏡產品，並根據自身特色深耕細分市場。AI 眼鏡有望成為 AI 應用的重要載體，得益於軟硬件不斷升級以及生態瓶頸的突破，未來 3 年至 5 年有望迎來產量突破的拐點。」王浩宇認為。&lt;/p&gt; 
&lt;p&gt;在王浩宇看來，下一步，產業鏈企業將重點突破光學顯示與芯片技術，解決「輕薄」與「性能」的矛盾；加強端側 AI 芯片研發，實現大模型本地化高效運行；優化能源管理，開發柔性電池與無線充電技術等。&lt;/p&gt; 
&lt;p&gt;王連升認為，AI 眼鏡有望打開千億元級市場空間，帶動新一輪數字消費升級。未來幾年是智能眼鏡從概念驗證向規模化應用過渡的關鍵節點，企業只有持續打磨產品、構建開放生態，才能贏得長期競爭優勢。國內企業應把握當前市場爆發機遇，在覈心技術自主可控的基礎上，加快生態佈局和場景創新。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366481</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366481</guid>
      <pubDate>Fri, 15 Aug 2025 10:22:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>翟佳：在中國，做世界的 Pulsar</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                                        &lt;p&gt;在用微信發消息的時候，你是否想像過，點發送按鈕的瞬間，信息就從手機出發，經由服務中心，流向朋友的手機。來來回回之間，無數這樣的信息持續傳遞，便匯聚成一條條消息流。&lt;/p&gt; 
&lt;p&gt;可是，每天有十多億用戶打開微信，如此龐大的信息流，怎麼保證不出錯呢？&lt;/p&gt; 
&lt;p&gt;其實，在服務中心內部，有一個關鍵的東西在發揮作用，那就是消息流中間件，這些中間件集羣協同運作，負責解決海量消息的存儲、排序、調度問題，所以這些消息能夠快速、安全、準確、穩定地送達。即便在億萬人同時發消息的高峯期，系統也依然井井有條，不會擁堵混亂。&lt;/p&gt; 
&lt;p&gt;不只是微信——從滴滴的實時派單、12306 的搶票隊列，到銀行秒級支付通知，甚至工廠裏千台設備的運行數據同步，背後都是消息流中間件在支撐。&lt;/p&gt; 
&lt;p&gt;市面上的消息流中間件眾多， Apache Pulsar 憑藉存算分離架構和雲原生設計，越來越受關注。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;翟佳做的就是 Pulsar 的生意，這是他的第三次創業旅程。成立諳流科技的第一天，就定下方向：要堅持做中國的社區，做中國的公司。在中國打好根基後，才能更好地走向全球市場。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;如此篤定，如此清晰。&lt;/p&gt; 
&lt;p&gt;不久前，在一場創業者活動上，大家讓翟佳用一句話介紹自己，他給出了一個簡單卻少有人能做到的回答：「我專注一個開源項目十年了。」&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="508" src="https://oscimg.oschina.net/oscnet/up-01c27879733db2a82e3d13a05cd2e953858.png" width="600" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;翟佳&lt;/p&gt; 
&lt;span id="OSC_h4_1"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;遷往美國？不，留在中國！&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;2023 年，在中美科技博弈加劇的背景下，StreamNative 和許多跨國科技公司一樣面臨着抉擇：中國團隊是解散，還是整體遷往美國？&lt;/p&gt; 
&lt;p&gt;StreamNative 是一家基於開源項目 Pulsar 做商業化的公司，此時發展如日中天。不過，StreamNative 希望塑造更「美國化」的形象，以迎合北美客戶和投資人的期待。但對翟佳和中國團隊的幾位技術骨幹而言，這意味着放棄他們最熟悉、也最看重的本土戰場。&lt;/p&gt; 
&lt;p&gt;「這關乎職業生涯，也關乎家庭。」翟佳回憶當時的糾結。作為聯合創始人，翟佳已經為這家公司奮鬥了近五年。&lt;/p&gt; 
&lt;p&gt;而與 Pulsar 結緣，還要更早。&lt;/p&gt; 
&lt;p&gt;那是在 2015 年，翟佳還只是存儲巨頭 EMC 北京研發中心的一個工程師。彼時，雲原生浪潮初起， 公司正在構建融合流計算與存儲的雲原生方案。在對比了 Kafka 等多種 MQ 之後，Pulsar 表現出的企業級能力讓他們眼前一亮。此前，業內曾認為消息流領域的技術已經固化了，尤其在海外市場，Kafka 和 Tibco 已經一統天下。直到 Pulsar 的出現，像一條鯰魚打破了這種認知。&lt;/p&gt; 
&lt;p&gt;存儲與計算分離的架構設計，讓 Pulsar 特別適合在雲原生環境中運行。而存算綁定的 Kafka 並不能滿足企業級服務的場景。尤其在面臨嚴重硬件錯誤或者節點故障的情況下，Kafka 讀寫的延遲並不可控，而 Pulsar 能保證讀寫延遲在幾毫秒內，服務質量可預期。&lt;/p&gt; 
&lt;p&gt;不過兩年時間，翟佳就從 Pulsar 使用者成為深度貢獻者， 之後在 2019 年，與 Pulsar 創始團隊成員郭斯傑共同創立 StreamNative，並且進展順利，不久，就在零銷售人員的情況下積累了幾十家全球客戶，而且基本都是海外客戶。&lt;/p&gt; 
&lt;p&gt;當時沒有人能想到會有二選一的這一天。&lt;/p&gt; 
&lt;p&gt;翟佳最終決定留在中國。既不解散，也不遷往美國，而是從中國出發、走向世界。&lt;/p&gt; 
&lt;p&gt;2024 年元旦那天，翟佳作為聯合創始人兼 CEO，帶領一支 20 人左右的中國核心團隊，創立了諳流科技。這是他圍繞 Pulsar 的第三次創業旅程，卻也是最不同的一次——立足中國市場、走人民幣路線。&lt;/p&gt; 
&lt;p style="text-align:left"&gt;翟佳相信中國的社區基礎和市場潛力：「中國有全球最活躍的 Pulsar 社區，有騰訊、華為、快手和小紅書這樣的大公司在貢獻代碼，更有對開源包容的客戶羣體。」&lt;/p&gt; 
&lt;p&gt;中國還有大量數據規模極大、服務質量要求極致的場景，比如騰訊的交易數據、小紅書的社交爆發、快手的短視頻流量……這些場景對消息流中間件的需求遠超海外，且更加嚴苛。&lt;/p&gt; 
&lt;span id="OSC_h4_2"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;市場空間足夠大， 但一定要聚焦&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;相比操作系統、數據庫等基礎設施，消息流中間件的市場份額要小得多，但它仍是各軟件系統中必不可少的組件。所以翟佳認為，消息流的全球市場足夠大。至少對當前沒有太多競爭對手的諳流科技來説，足夠大。&lt;/p&gt; 
&lt;p&gt;但市場空間從來不是成功的保證。&lt;/p&gt; 
&lt;p&gt;2017 年，翟佳在他的第一次創業旅程中就遭遇了多線作戰的困境。Streamlio 公司同時推進多個開源項目，精力分散，商業化舉步維艱。「計算、數據傳輸、存儲，公司都有涉及。儘管在工程師看來這很不錯，天天接觸新技術，加班加點寫代碼，一步步完善功能、解決問題，過得很充實。」但結果很殘酷：無論在社區發展、用戶認可度，亦或者是商業化上，都不如意。&lt;/p&gt; 
&lt;p&gt;失敗的教訓很深刻，這讓翟佳意識到，必須要聚焦。&lt;/p&gt; 
&lt;p&gt;因此，在 2019 年，他與 Pulsar 社區夥伴郭斯傑二次創業，聚焦 Pulsar，在服務騰訊計費平台、華為終端等高要求場景實現了突破。&lt;/p&gt; 
&lt;p&gt;一次失敗，一次成功，就這樣驗證了翟佳的想法：業務聚焦以後，在獲取用戶以及價值宣導上，更有成效。「這是一個逐漸聚焦的過程：從多個開源產品到聚焦一個開源產品（Pulsar），再到聚焦到一個市場，最後到聚焦到一個產品的使用模式。」翟佳總結道。&lt;/p&gt; 
&lt;p&gt;這種策略延續到諳流科技，基於 Pulsar 為企業提供更穩定的私有化部署產品。&lt;/p&gt; 
&lt;p&gt;諳流科技之所以選擇私有化部署這條路，是因為中國市場有其特殊性。&lt;/p&gt; 
&lt;p&gt;海外企業偏向公有云託管，中國企業更青睞私有化部署。翟佳介紹，國內客戶，尤其是金融、電信和製造業企業，對數據不丟失、快速故障恢復和合規性有極高要求。比如半導體製造企業的 MES 系統一旦宕機，可能導致生產線上的晶圓報廢，損失巨大。而社區版 Pulsar 無法滿足這些需求。&lt;/p&gt; 
&lt;p&gt;因此，諳流科技基於 Pulsar 打造了 ASP 平台，進行了深度優化和國產化適配，強化私有化部署下的易用性與可管理性。&lt;/p&gt; 
&lt;p&gt;與此同時，大型金融企業和央企對合規、監管和運維也有更高標準，諳流科技對 Pulsar 進行了強化，例如打通各種健全認證的體系、開發與審計複核系統對接的功能，確保交易日誌滿足監管要求。此外，還引入了監控系統，提前預警潛在風險。&lt;/p&gt; 
&lt;p&gt;「某頭部證券公司是我們的一個早期客戶，其部署的 Pulsar 系統已穩定運行三年，系統零故障，業務零中斷，直接驗證了服務的高可用性。」翟佳表示 。&lt;/p&gt; 
&lt;p&gt;當前，Kafka 仍然在消息流處理領域佔據主導地位。為方便國內大量用戶從 Kafka 遷移至 Pulsar，翟佳等人在協議兼容這塊做了大量工作，客戶無需修改客戶端代碼即可平滑切換。&lt;/p&gt; 
&lt;p&gt;在諳流科技的 ASP 平台，這些能力都變成了開箱即用的解決方案。&lt;/p&gt; 
&lt;p&gt;這條路是通的。在當前投資環境趨緊的情況下，諳流科技成功實現自我造血。&lt;/p&gt; 
&lt;p&gt;成立一年多來，團隊規模保持在 20 人左右，服務中國銀聯、浦發銀行、華泰證券、中信證券等十餘家頭部客戶，收入已能覆蓋運營成本。今年 2 月，諳流科技還宣佈完成數千萬元人民幣天使輪融資，將主要用於開源社區建設、產品研發以及商業化落地。&lt;/p&gt; 
&lt;span id="OSC_h4_3"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;未來：&lt;/strong&gt;&lt;strong&gt;AI&lt;/strong&gt;&lt;strong&gt; 浪潮與 Pulsar 演進&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;翟佳透露，自 2022 年開始，Pulsar 就已進入平台穩定期，社區工作重心從功能擴張轉向系統優化。在這一兩年間，新功能的開發速度明顯放緩，諳流科技及社區核心成員（包括眾多 Committer 和 PMC 成員）都將主要精力投入到系統穩定運行保障，以及用戶體驗優化——包括改進用戶引導機制和交互設計，同時強化既有功能。&lt;/p&gt; 
&lt;p&gt;隨着 AI 熱潮席捲全球，Pulsar 也在探索新的應用場景。社區正在討論如何將消息流中間件的功能適配到 AI 場景下。&lt;/p&gt; 
&lt;p&gt;翟佳解釋，在分佈式系統架構中，消息流中間件（如 Pulsar）的核心價值在於通過削峯填谷機制解決系統間處理速度不匹配的問題。以騰訊計費平台為例，當突發性高併發用戶請求直接衝擊後端服務時，長鏈路處理極易導致失敗，而引入消息流中間件後，通過異步處理和請求持久化，既能保障服務健壯性，又將系統間複雜的 M×N 耦合關係簡化為 M+N 的連接模式。&lt;/p&gt; 
&lt;p&gt;在 AI 場景裏，類似的訴求也很多。比如和大模型對話時，用戶通過網頁發請求，但模型可能要「想」很久，這時候就需要一個緩衝層，先把請求接住，等後端處理完再把結果返回，解耦前端和後端。實際上，從數據輸入、RAG 檢索到多業務模型協同，各環節不同的處理速度都需要消息流中間件來緩存中間狀態和數據。此外，Pulsar 社區還在探索作為 AI Agent 的上下文存儲或記憶（memory）載體。&lt;/p&gt; 
&lt;p&gt;在翟佳眼裏，這都是「消息流中間件（比如 Pulsar）在傳統場景裏的老本行，現在只是針對 AI 的特點做了適配」。&lt;/p&gt; 
&lt;p&gt;「Pulsar 在 AI 時代的技術迭代與其在雲原生時代的崛起類似。好的技術都是在實際使用中慢慢打磨出來的。大家先嚐試各種方案，然後通過實踐摸索出最佳實現方式，最後形成行業標準。這是一個很自然的技術演進過程。」翟佳對 Pulsar 的未來充滿信心：憑藉技術優勢和社區基礎，它遲早會在消息流中間件領域佔據主導地位。&lt;/p&gt; 
&lt;p&gt;當 AI 浪潮席捲而來，能接住這場技術革命的，或許就是像翟佳這樣十年專注一個方向的人。技術會變，但專業精神永不過時。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/3859945/blog/18688371</link>
      <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/18688371</guid>
      <pubDate>Fri, 15 Aug 2025 10:11:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>可靈 AI 啓動全新首尾幀功能內測</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;快手旗下的可靈 2.1 視頻生成模型於近日開啓了全新的首尾幀功能內測。根據官方的介紹，此次升級不僅顯著提升了視頻生成的效果，還使得運鏡控制變得更加流暢，展現出 「電影級」 的畫面表現。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;img height="333" src="https://oscimg.oschina.net/oscnet/up-50cea486a7d67cc055485378ddd4c680b0e.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;新的首尾幀功能讓視頻的開頭和結尾部分擁有了更精細的控制，這樣一來，整體的視覺流暢度得到了有效提升。尤其是在處理複雜場景和語義時，可靈 2.1 顯示出了更高的精準度，非常適合用於表達複雜故事或概念的視頻創作。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;用戶可以通過自定義首尾幀圖像，生成連貫且高質量的視頻內容。這一功能的引入，解決了以往 AI 視頻生成中常見的轉場生硬和文本響應不足等問題。此外，全新的首尾幀功能進一步提升了視頻的一致性和穩定性，特別適合於產品宣傳片、AI 電影、AI 短劇等專業創作場景。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;據瞭解，可靈 2.1 系列模型自今年 5 月 29 日正式推出以來，已經迭代升級超過 30 次。其高品質模式下，生成 5 秒的視頻僅需不到 1 分鐘，標準模式則在 20 靈感值內即可完成生成，成本下降幅度達到 65%。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;可靈 2.1 在動態表現方面也做了顯著提升。模型的動態細節更加精緻，動態響應更加靈敏，物理模擬的真實度也有了提升，人物動作的幅度更加貼近現實。同時，模型的提示詞響應也進一步優化，能夠更好地理解用戶的意圖，生成符合預期的視頻內容。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;該模型分為標準（720p）和高品質 (1080p) 兩種模式，定位高端的可靈 2.1 大師版則提供更卓越的運動表現和更強的語義響應。根據快手發佈的數據，可靈 AI 在全球已有超過 4500 萬的創作者，累計生成超過 2 億個視頻和 4 億張圖片，顯示出其廣泛的應用潛力和強大的用戶基礎。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366479</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366479</guid>
      <pubDate>Fri, 15 Aug 2025 10:05:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>三大運營商上半年加碼佈局 AI 應用</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;span style="color:#000000"&gt;隨着中國電信披露 2025 年半年度報告，三大運營商上半年業績成績單均已披露完畢。整體來看，今年上半年三家企業均實現淨利潤同比增長，營業收入增速則出現分化。業務方面，AI+仍是三家企業佈局的重點方向。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;具體來看，中國移動今年上半年實現營業收入 5437.69 億元，同比下降 0.5%；實現歸屬於母公司股東的淨利潤 842.35 億元，同比增長 5.0%。中國電信今年上半年實現營業收入為 2694 億元，同比增長 1.3%；實現歸屬於上市公司股東的淨利潤為 230 億元，同比增長 5.5%。中國聯通今年上半年實現營業收入 2002.02 億元，同比增長 1.5%；實現歸屬於上市公司股東的淨利潤 63.49 億元，同比增長 5.1%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此外，三大運營商均披露了半年度利潤分配方案。其中，中國移動合計將派發中期股息 594.32 億港元，擬宣派的中期股息以 2025 年 6 月 30 日匯率折算合計 541.99 億元；中國電信擬向全體股東每股派發現金紅利 0.1812 元，合計擬派發現金紅利 165.81 億元；中國聯通共計擬向公司股東派發約 34.77 億元的股利。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;紛紛大力發展 AI&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;今年上半年，三大運營商 AI 相關業務均交出亮眼成績單。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;據中國移動半年報，上半年中國移動 AI 創新發展和規模應用步伐加快，上半年 AI 直接收入實現高速增長。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;中國移動董事長楊傑在 2025 年度中期業績説明會上表示，目前中國移動從 AI 獲得的直接收入及相關收入已達數十億元規模，且這一業務自去年起進入實質性收益階段，成為公司數智化轉型的重要增長極。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;中國電信上半年實現智能收入 63 億元，同比增長 89.4%。半年報顯示，中國電信智能收入包括面向客戶提供的人工智能、智算服務等收入。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;中國聯通董事長陳忠嶽則在業績説明會上表示，中國聯通加快 AI 賦能網絡運營，提升用戶體驗感知，推動公司降本增效。由此，網絡資產的科技含量更高、市場空間更大，蘊藏着前所未有的新價值。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;今年是人工智能規模應用的元年，三大運營商均就 AI 應用加碼佈局。今年上半年，中國移動聯合能源、水利、農業等行業央企共建行業大模型；推動全量產品和服務嵌入 AI；發佈 AI 智能助理靈犀智能體 2.0；發佈 AI 智能終端、智能機器人、智能網聯汽車等首批信息消費「新三樣」產品。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;中國電信在工業、應急、交通等領域建成 80 多個行業大模型；推進雲電腦、雲盤等產品 AI 化升級；在天翼 AI 手機內置星辰大模型；圍繞雲網運營、客戶服務、渠道營銷、科技研發和企業管理等 21 個重點領域，打造形成 160 餘個 AI 應用。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;中國聯通亦加快人工智能應用產品佈局，以「用」為統領，深耕政務、經濟、工業、醫療、教育、文旅等高價值場景，打造一批有實效、可複製的行業模型和智能體，加速賦能產業數智化升級。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;strong&gt;資本開支穩中有降&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;整體來看，今年上半年三大運營商資本開支穩中有降。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;今年上半年，中國移動完成資本開支 584 億元。中國移動總經理何飈在業績説明會上表示，今年下半年中國移動資本開支將主要投向算力。去年中國移動 AI 投資規模超過百億元，今年 AI 相關的投資仍然會在原有基礎上進一步提升，從而強化 AI 作為公司核心戰略的目標，並形成新的增長動能，打造新的增長曲線。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;今年上半年，中國電信累計完成資本開支 342 億元，其中移動網投資 121 億元，產業數字化投資 116 億元。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;上半年，中國聯通資本開支 202 億元，同比下降 15%。中國聯通高級副總裁苗守野表示，中國聯通 2025 年固定資產投資在 550 億元左右。預計未來 2 年至 3 年，投資保持相對平穩，下降幅度會收窄。未來，中國聯通將緊跟市場變化和技術演進，面對人工智能、6G 發展，持續跟蹤國際、國內發展趨勢，適時調整投資規模和節奏，以結構優化、精準建設為抓手開展布局，滿足公司發展需求，做好投資保障。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;今年年初，中國移動預計 2025 年全年資本開支合計約為 1512 億元，比 2024 年下降 128 億元；中國電信 2025 年資本開支計劃為 836 億元，預計下滑 10.6%，算力方面資本開支預計同比增長 22%；中國聯通預計全年資本開支規模下調至 550 億元左右，其中算力投資同比增長 28%。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366477</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366477</guid>
      <pubDate>Fri, 15 Aug 2025 09:50:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Surya - 文檔 OCR 工具包</title>
      <description>&lt;div class="content"&gt;
                                                                                                                                                                                                                            &lt;p style="text-align:start"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Surya 是一個文檔 OCR 工具包，它可以執行以下操作：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持 90 多種語言的 OCR，其基準性能優於雲服務&lt;/li&gt;
&lt;li&gt;任何語言的行級文本檢測&lt;/li&gt;
&lt;li&gt;佈局分析（表格、圖像、標題等檢測）&lt;/li&gt;
&lt;li&gt;閲讀順序檢測&lt;/li&gt;
&lt;li&gt;表格識別（檢測行/列）&lt;/li&gt;
&lt;li&gt;LaTeX OCR&lt;/li&gt;
&lt;/ul&gt;

&lt;p style="text-align:start"&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="background-color:#ffffff"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;它適用於一系列文檔（有關更多詳細信息，可參閲&lt;a href="https://github.com/datalab-to/surya#usage"&gt;使用&lt;/a&gt;和&lt;a href="https://github.com/datalab-to/surya#benchmarks"&gt;基準）。&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="" height="226" src="https://static.oschina.net/uploads/space/2025/0814/140052_N92U_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="" height="226" src="https://static.oschina.net/uploads/space/2025/0814/140105_IORL_4252687.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt;

                                                                    &lt;/div&gt;
                                                                </description>
      <link>https://www.oschina.net/p/surya</link>
      <guid isPermaLink="false">https://www.oschina.net/p/surya</guid>
      <pubDate>Fri, 15 Aug 2025 09:40:00 GMT</pubDate>
    </item>
    <item>
      <title>Claude Code 新增「Output Styles」 功能，支持學習模式</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;Anthropic&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fclaudeai%2Fstatus%2F1956038897793716228" target="_blank"&gt; 宣佈&lt;/a&gt;&amp;nbsp;Claude Code 新增 Output styles 功能來定製溝通風格：允許用戶將 Claude Code 調整為任意類型 Agent 進行工作流配合，並且能保留其核心能力；此外，Claude 新增兩種輸出風格：解釋性（Explanatory）和學習性（Learning）。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/165415_Qik8_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-6bb5c158ce06f99193220ce20646146ad4c.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;具體來看：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;解釋性&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;能夠讓 Claude 深入探討其操作過程和原因，並將架構決策背後的推理展現給用戶，解釋權衡取捨，並在編程中給到用戶最佳實踐。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;學習性&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;類似老師一樣的定位，能偶爾暫停任務並請求用戶自己完成部分內容，引導用戶「邊做邊學」，並給出指導與反饋。它甚至會在代碼中添加 TODO(human) 標記，等着你來填坑。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-59c5999b431daf19dc67a73403fb54c6ef1.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;詳情查看文檔&lt;em&gt;&amp;nbsp;https://docs.anthropic.com/en/docs/claude-code/output-styles&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366456</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366456</guid>
      <pubDate>Fri, 15 Aug 2025 09:09:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>馬斯克測試由 Grok 4 Mini 驅動的全新 𝕏 算法</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;&lt;span&gt;馬斯克近日&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Felonmusk%2Fstatus%2F1956580440136966203" target="_blank"&gt;透露&lt;/a&gt;，他正在測試由 Grok 4 Mini 驅動的全新 𝕏 算法，並明確表示：「它確實更好。」 &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="732" src="https://static.oschina.net/uploads/space/2025/0818/102119_fy42_2720166.png" width="1270" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;根據他的説法，這一新算法在性能上有明顯提升，但要將其全面推廣給所有用戶，需要動用約 2 萬塊 GPU，並且會帶來更高的延遲。儘管如此，馬斯克仍認為「為了獲得更好的性能，這些代價是值得的」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;目前尚未公開該算法的具體技術細節，如是否用於推薦系統、內容排序或 AI 生成內容優化等，但從馬斯克的表態來看，Grok 4 Mini 在 𝕏 平台的應用已進入實測階段，未來可能成為 𝕏 體驗升級的核心技術之一。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;馬斯克透露他正在測試由首次公開的 Grok 4 Mini 模型驅動的𝕏平台新算法，並表示全面推廣需要約 20,000 塊 GPU。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366866</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366866</guid>
      <pubDate>Wed, 13 Aug 2025 02:25:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>我國空間站首次應用專業領域 AI 大模型</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;據中國載人航天工程辦公室消息，北京時間 2025 年 8 月 15 日 22 時 47 分，經過約 6.5 小時的出艙活動，神舟二十號乘組航天員陳冬、陳中瑞、王傑密切協同，在空間站機械臂和地面科研人員的配合支持下，圓滿完成既定任務，出艙航天員陳冬、王傑已安全返回問天實驗艙，出艙活動取得圓滿成功。&lt;/p&gt; 
&lt;p&gt;與以往不同的是，此次神二十乘組在開展工作時有了一個新的助手，就是由天舟九號貨運飛船搭載上行的「悟空 AI」大模型。在神二十乘組第三次出艙活動的準備工作中，「悟空 AI」大模型就發揮了輔助支撐作用，同時它還為航天員在軌工作提供了智能化、專業化的支持。&lt;/p&gt; 
&lt;p&gt;「悟空 AI」基於國內開源模型開發，結合載人航天飛行任務需求，採用預訓練和指令微調技術，構建了專業領域大語言模型和以航天飛行知識規範為核心的知識庫。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;中國航天員科研訓練中心，鄒鵬飛：&lt;/strong&gt;航天員根據他的需要去詢問「悟空 AI」，比如説今天有哪些工作，在工作過程中可能有哪些操作的指南性質的、説明性質的知識。&lt;/p&gt; 
&lt;p&gt;&lt;img height="264" src="https://oscimg.oschina.net/oscnet/up-3f0d42fe3a0577cb2b09461d25dd5333bde.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;大模型技術在我國空間站首次應用驗證，構建了天地協同的智能問答支持系統，通過地面和在軌兩個模型，分別提供專業知識深度解析能力和解決重難點問題。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;中國航天員科研訓練中心，鄒鵬飛：&lt;/strong&gt;「悟空 AI」大模型為航天員在軌的複雜操作和故障處置提供快速有效的信息支持。助力航天員更有效地開展工作，豐富在軌的心理保障，也有助於天地協同效率的提高。&lt;/p&gt; 
&lt;p&gt;此外，針對載人航天飛行任務專業多元、類型複雜、數據海量等特點，「悟空 AI」大模型通過開發場景化數據處理等多種功能，確保響應快速，回答內容嚴謹正確，後續可拓展增加&lt;strong&gt;任務規劃、數據分析、智能預測&lt;/strong&gt;等功能。「悟空 AI」大模型在軌一個月運行狀態穩定，乘組航天員反饋良好，這一成果標誌着我國空間站在軌智能化應用取得重要進展。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366864</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366864</guid>
      <pubDate>Wed, 13 Aug 2025 02:18:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>阿里推出多模態深度研究智能體 WebWatcher</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;阿里巴巴自然語言處理團隊&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fwsm1OBCpYao63TPCnsnFdg" target="_blank"&gt;宣佈&lt;/a&gt;推出 WebWatcher，這是一個開源的多模態深度研究智能體，旨在突破現有閉源系統和開源 Agent 在多模態深度研究領域的侷限性。WebWatcher 通過整合網頁瀏覽、圖像搜索、代碼解釋器和內部 OCR 等多種工具，能夠像人類研究員一樣處理複雜的多模態任務，展現出強大的視覺理解、邏輯推理、知識調用、工具調度和自我驗證能力。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;WebWatcher 的開發團隊指出，儘管現有的閉源系統如 OpenAI 的 DeepResearch 在文本深度研究方面表現出色，但它們大多侷限於純文本環境，難以處理現實世界中複雜的圖像、圖表和混合內容。而現有的開源 Agent 也面臨兩大瓶頸:一類是專注於文本檢索的 Agent，雖然能夠整合信息，但無法處理圖像;另一類是視覺 Agent，雖然能夠識別圖像，但缺乏跨模態推理和多工具協同能力。WebWatcher 正是為瞭解決這些瓶頸而設計的。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;WebWatcher 的技術方案覆蓋了從數據構建到訓練優化的完整鏈路，其核心目標是讓多模態 Agent 在高難度多模態深度研究任務中具備靈活推理和多工具協作能力。為此，研究團隊設計了一個全自動多模態數據生成流程，通過隨機遊走收集跨模態知識鏈，並引入信息模糊化技術，提升任務的不確定性和複雜性。所有複雜問題樣本通過 QA-to-VQA 轉換模塊擴展為多模態版本，進一步增強了模型的跨模態理解能力。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="222" src="https://oscimg.oschina.net/oscnet/up-49fb7e96ad99da53f5c2a535d842f908428.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在高質量推理軌跡構建與後訓練方面，WebWatcher 採用了 Action-Observation 驅動的軌跡生成方法，通過收集真實的多工具交互軌跡並進行監督微調（SFT），讓模型在訓練初期快速掌握多模態 ReAct 式推理和工具調用的基本模式。隨後，模型進入強化學習階段，通過 GRPO 進一步提升多模態 Agent 在複雜環境下的決策能力。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;為了全面驗證 WebWatcher 的能力，研究團隊提出了 BrowseComp-VL，這是 BrowseComp 在視覺-語言任務上的擴展版本，旨在逼近人類專家的跨模態研究任務難度。在多輪嚴格評測中，WebWatcher 在複雜推理、信息檢索、知識整合以及聚合類信息尋優等任務上全面領先於當前主流的開源與閉源多模態大模型。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;具體來説，在人類&lt;span&gt;終極&lt;/span&gt;考試（Humanity’s Last Exam，HLE-VL）這一多步複雜推理基準上，WebWatcher 以 13.6% 的 Pass@1 分數一舉奪魁，大幅領先於 GPT-4o(9.8%)、Gemini2.5-flash(9.2%) 和 Qwen2.5-VL-72B(8.6%) 等代表性模型。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在更貼近真實多模態搜索的 MMSearch 評測中，WebWatcher 的 Pass@1 得分高達 55.3%，相比 Gemini2.5-flash(43.9%) 和 GPT-4o(24.1%) 大幅領先。在 LiveVQA 評測中，WebWatcher 的 Pass@1 成績達到 58.7%，領先於其他主流模型。在最具綜合挑戰的 BrowseComp-VL 基準上，WebWatcher 以 27.0% 的平均得分 (Pass@1)&lt;span&gt;遙遙領先&lt;/span&gt;，成績提升超過一倍。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366863</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366863</guid>
      <pubDate>Wed, 13 Aug 2025 02:10:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Zed 編輯器團隊發聲：LLM 為何無法真正構建軟件？</title>
      <description>&lt;div class="content"&gt;
                                                                                            &lt;p&gt;近日，開源代碼編輯器 Zed 的開發團隊發佈了一篇引人深思的博文，標題直擊要害：《為什麼 LLM 無法真正構建軟件》。這篇由 Conrad Irwin 撰寫的文章不僅在技術圈引發熱議，更是在 Hacker News 上掀起了一場關於 AI 輔助編程本質的深度討論。&lt;/p&gt; 
&lt;h2&gt;軟件工程的核心循環被 AI 誤解了？&lt;/h2&gt; 
&lt;p&gt;Irwin 在文章中提出了一個關鍵觀察：當你觀察一個熟練的軟件工程師工作時，會發現他們在不斷循環四個步驟——構建需求的心智模型、編寫代碼、理解代碼實際行為、識別差異並更新。而「區分優秀工程師的關鍵因素，是他們構建和維護清晰心智模型的能力」。&lt;/p&gt; 
&lt;p&gt;這個觀點立即引起了社區的共鳴。用戶 usrbinbash 形象地補充道：「我們不會只盯着調試器輸出想着『怎麼讓這個錯誤消失』。當遇到認證錯誤時，軟件工程師會退一步，思考整個系統，找出問題的根源。」他舉例説，可能問題根本不在認證本身，而是測試用低權限用戶調用了高權限函數——這種全局思考能力，正是 LLM 所欠缺的。&lt;/p&gt; 
&lt;h2&gt;LLM 的致命缺陷：無法維持心智模型&lt;/h2&gt; 
&lt;p&gt;文章指出，LLM 在編寫代碼時表現不錯，在更新代碼時也還可以，但它們「根本無法維持清晰的心智模型」。當測試失敗時，LLM 會陷入無休止的困惑——它們假設自己寫的代碼能工作，不知道該修復代碼還是測試，最後乾脆刪掉重來。&lt;/p&gt; 
&lt;p&gt;用戶 9cb14c1ec0 深有感觸：「我使用 Claude Code 越多，就越對這個問題感到沮喪。我不確定一個基於文本的通用 LLM 能否真正解決這個問題。」他的經歷代表了許多開發者的心聲——AI 工具在處理複雜項目時，往往會失去對整體架構的把握。&lt;/p&gt; 
&lt;p&gt;然而，並非所有人都認同這種悲觀看法。andrewmutz 反駁道：「作者不理解今天的 LLM 和編碼工具的能力。」他分享了自己使用 Cline 配合 Anthropic Sonnet 3.7 進行 TDD 開發的經驗，認為 LLM 的表現「不亞於甚至優於初級工程師」。&lt;/p&gt; 
&lt;h2&gt;記憶與理解：技術瓶頸還是架構問題？&lt;/h2&gt; 
&lt;p&gt;Irwin 深入分析了 LLM 的三個根本性問題：「上下文遺漏」（難以發現被遺漏的上下文）、「近期偏見」（過度關注最近的信息）、以及「幻覺」（憑空捏造不存在的細節）。這些問題直接影響了它們維護心智模型的能力。&lt;/p&gt; 
&lt;p&gt;「即使不斷增加上下文窗口」，文章寫道，「我們人類處理問題的方式完全不同——我們能夠臨時存儲完整上下文，專註解決問題，然後回到主線任務。我們不會簡單地不斷往上下文窗口裏塞更多詞彙。」&lt;/p&gt; 
&lt;p&gt;dlivingston 提出了一個有趣的類比：「這讓我想起 Google 的 Genie 3 只能運行約一分鐘就會失去內部狀態。我的直覺是，除非發明某種新架構——規模堪比 Transformer 的突破——允許短期上下文、長期上下文和自我調節模型權重，否則這個問題無法解決。」&lt;/p&gt; 
&lt;h2&gt;實踐者的兩極分化&lt;/h2&gt; 
&lt;p&gt;社區對 AI 編程工具的看法呈現明顯的兩極分化。chollida1 從投資者角度提供了獨特視角：「多年的投資經驗讓我形成了一個心智模型——尋找那些雖然糟糕但仍在增長的技術。90 年代的互聯網很慢、經常斷線，但人們還是在用；Twitter 經常出現失敗鯨，但人們依然用它看新聞。『永遠尋找那些雖然糟糕但人們仍在使用的技術，因為它提供了價值。』」&lt;/p&gt; 
&lt;p&gt;另一邊，懷疑者們則提出尖鋭批評。bagacrap 直言：「AI 編程愛好者總是説『你只是用錯了模型』。當沒有模型能用時，他們又説『6 個月後就會好了』。敏捷編程在複雜項目中的效用似乎永遠無法被證偽。」&lt;/p&gt; 
&lt;p&gt;最有意思的是來自 diwank 的實踐案例。他分享了一個完全由 AI 編寫的項目 steadytext：「7000 行代碼，包括 Python 庫、CLI 和 Postgres 擴展，完全由 Claude Opus 編寫和維護。我從未看過 90% 的代碼，但它有完整的測試覆蓋，通過 CI，我們在生產環境使用它！」這個案例引發了激烈討論，有人質疑其真實性，有人則認為這代表了 AI 編程的未來可能。&lt;/p&gt; 
&lt;h2&gt;工具還是革命？業界的理性聲音&lt;/h2&gt; 
&lt;p&gt;JimDabell 提供了一個更加平衡的視角：「LLM 無法構建軟件，是因為我們期望它們聽幾句話就立即開始編碼直到完成原型。如果我們讓人類工程團隊這樣做，也會得到糟糕的結果。」他建議通過可執行規範、嚴格測試、架構決策記錄等工具，讓 AI 在有界問題上完成同樣的循環。&lt;/p&gt; 
&lt;p&gt;robomartin 分享了他使用 Cursor 完成兩個項目的詳細經驗：「基於這次經驗，有一點非常清楚：『如果你不知道自己在做什麼，你就完了。』」他發現，雖然 AI 能處理 Django 中大量的樣板代碼，但代碼質量參差不齊，需要不斷手動幹預和修正。&lt;/p&gt; 
&lt;p&gt;skydhash 從更哲學的角度評論：「程序員主要是將業務規則翻譯成計算機世界中非常正式的流程執行。你需要知道規則的含義，也要知道計算機如何工作。翻譯一開始總是混亂的，這就是為什麼需要一遍遍修訂。」&lt;/p&gt; 
&lt;h2&gt;展望：不是終點，而是起點&lt;/h2&gt; 
&lt;p&gt;文章最後，Zed 團隊表達了他們的立場：「在 Zed，我們相信人類和 AI 代理可以協作構建軟件。但我們堅信，『至少現在，你還是駕駛員，LLM 只是另一個可以使用的工具。』」&lt;/p&gt; 
&lt;p&gt;這個觀點得到了許多開發者的認同。cmrdporcupine 總結道：「它迫使你退一步做規劃。你可以讓它做苦力編碼和低層分析測試，但你必須負責設計。這給了我更多時間思考大局，我喜歡這一點。」&lt;/p&gt; 
&lt;p&gt;正如 ethan_smith 所説：「真正的生產力提升不僅是打字速度，而是認知負載的轉移——儘管我們必須小心，不要因為委託實現細節而失去維護準確心智模型的能力。」&lt;/p&gt; 
&lt;p&gt;這場關於 LLM 能否真正構建軟件的討論，不僅揭示了當前 AI 工具的侷限性，更重要的是促使整個行業思考：在 AI 輔助編程的時代，什麼是軟件工程的本質？人類工程師的價值究竟在哪裏？也許答案不在於 AI 能否取代人類，而在於如何讓兩者更好地協作，各自發揮所長。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366685</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366685</guid>
      <pubDate>Tue, 12 Aug 2025 02:22:00 GMT</pubDate>
      <author>來源: 資訊</author>
    </item>
  </channel>
</rss>
