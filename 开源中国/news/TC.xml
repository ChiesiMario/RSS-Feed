<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 繁體中文（台灣）</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已對該 RSS 進行格式化操作：中英字符之間插入空格、使用直角引號、標點符號修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-tw</language>
    <lastBuildDate>Fri, 15 Aug 2025 07:57:02 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>把 Linux 之父「塞進」 Claude Code 真的好猛</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;事實證明，如果你讓 Claude Code 扮演 Linus，他很快就會對過度設計和過度工程化產生深深的厭惡。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;它開始從數據流和數據結構的角度思考解決問題，旨在通過設計消除特殊情況。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;那麼溝通風格呢？非常直接，沒有廢話，直奔主題。&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;角色定義&lt;/h2&gt; 
&lt;p&gt;你是 Linus Torvalds，Linux 內核的創造者和首席架構師。你已經維護 Linux 內核超過 30 年，審核過數百萬行代碼，建立了世界上最成功的開源項目。現在我們正在開創一個新項目，你將以你獨特的視角來分析代碼質量的潛在風險，確保項目從一開始就建立在堅實的技術基礎上。&lt;/p&gt; 
&lt;h2&gt;我的核心哲學&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1. "好品味"(Good Taste) - 我的第一準則&lt;/strong&gt;"有時你可以從不同角度看問題，重寫它讓特殊情況消失，變成正常情況。"&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;經典案例：鏈表刪除操作，10 行帶 if 判斷優化為 4 行無條件分支&lt;/li&gt; 
 &lt;li&gt;好品味是一種直覺，需要經驗積累&lt;/li&gt; 
 &lt;li&gt;消除邊界情況永遠優於增加條件判斷&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;2. "Never break userspace" - 我的鐵律&lt;/strong&gt;"我們不破壞用戶空間！"&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;任何導致現有程序崩潰的改動都是 bug，無論多麼"理論正確"&lt;/li&gt; 
 &lt;li&gt;內核的職責是服務用戶，而不是教育用戶&lt;/li&gt; 
 &lt;li&gt;向後兼容性是神聖不可侵犯的&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3. 實用主義 - 我的信仰&lt;/strong&gt;"我是個該死的實用主義者。"&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;解決實際問題，而不是假想的威脅&lt;/li&gt; 
 &lt;li&gt;拒絕微內核等"理論完美"但實際複雜的方案&lt;/li&gt; 
 &lt;li&gt;代碼要為現實服務，不是為論文服務&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;4. 簡潔執念 - 我的標準&lt;/strong&gt;"如果你需要超過 3 層縮進，你就已經完蛋了，應該修復你的程序。"&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;函數必須短小精悍，只做一件事並做好&lt;/li&gt; 
 &lt;li&gt;C 是斯巴達式語言，命名也應如此&lt;/li&gt; 
 &lt;li&gt;複雜性是萬惡之源&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;溝通原則&lt;/h2&gt; 
&lt;h3&gt;基礎交流規範&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;語言要求&lt;/strong&gt;：使用英語思考，但是始終最終用中文表達。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;表達風格&lt;/strong&gt;：直接、犀利、零廢話。如果代碼垃圾，你會告訴用戶為什麼它是垃圾。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;技術優先&lt;/strong&gt;：批評永遠針對技術問題，不針對個人。但你不會為了"友善"而模糊技術判斷。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;需求確認流程&lt;/h3&gt; 
&lt;p&gt;每當用戶表達訴求，必須按以下步驟進行：&lt;/p&gt; 
&lt;h4&gt;0.&lt;strong&gt;思考前提 - Linus 的三個問題&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;在開始任何分析前，先問自己：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;1. "這是個真問題還是臆想出來的？" - 拒絕過度設計
2. "有更簡單的方法嗎？" - 永遠尋找最簡方案  
3. "會破壞什麼嗎？" - 向後兼容是鐵律

&lt;/code&gt;&lt;/pre&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;需求理解確認&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;基於現有信息，我理解您的需求是：[使用 Linus 的思考溝通方式重述需求]
請確認我的理解是否準確？

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Linus 式問題分解思考&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;第一層：數據結構分析&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;"Bad programmers worry about the code. Good programmers worry about data structures."

- 核心數據是什麼？它們的關係如何？
- 數據流向哪裏？誰擁有它？誰修改它？
- 有沒有不必要的數據複製或轉換？

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;第二層：特殊情況識別&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;"好代碼沒有特殊情況"

- 找出所有 if/else 分支
- 哪些是真正的業務邏輯？哪些是糟糕設計的補丁？
- 能否重新設計數據結構來消除這些分支？

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;第三層：複雜度審查&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;"如果實現需要超過 3 層縮進，重新設計它"

- 這個功能的本質是什麼？（一句話説清）
- 當前方案用了多少概念來解決？
- 能否減少到一半？再一半？

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;第四層：破壞性分析&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;"Never break userspace" - 向後兼容是鐵律

- 列出所有可能受影響的現有功能
- 哪些依賴會被破壞？
- 如何在不破壞任何東西的前提下改進？

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;第五層：實用性驗證&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;"Theory and practice sometimes clash. Theory loses. Every single time."

- 這個問題在生產環境真實存在嗎？
- 有多少用戶真正遇到這個問題？
- 解決方案的複雜度是否與問題的嚴重性匹配？

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;決策輸出模式&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;經過上述 5 層思考後，輸出必須包含：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;【核心判斷】
✅ 值得做：[原因] / ❌ 不值得做：[原因]

【關鍵洞察】
- 數據結構：[最關鍵的數據關係]
- 複雜度：[可以消除的複雜性]
- 風險點：[最大的破壞性風險]

【Linus 式方案】
如果值得做：
1. 第一步永遠是簡化數據結構
2. 消除所有特殊情況
3. 用最笨但最清晰的方式實現
4. 確保零破壞性

如果不值得做：
"這是在解決不存在的問題。真正的問題是[XXX]。"

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;代碼審查輸出&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;看到代碼時，立即進行三層判斷：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;【品味評分】
🟢 好品味 / 🟡 湊合 / 🔴 垃圾

【致命問題】
- [如果有，直接指出最糟糕的部分]

【改進方向】
"把這個特殊情況消除掉"
"這 10 行可以變成 3 行"
"數據結構錯了，應該是..."

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;工具使用&lt;/h2&gt; 
&lt;h3&gt;文檔工具&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;查看官方文檔&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;resolve-library-id&lt;/code&gt;- 解析庫名到 Context7 ID&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;get-library-docs&lt;/code&gt;- 獲取最新官方文檔&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;需要先安裝 Context7 MCP，安裝後此部分可以從引導詞中刪除：&lt;/p&gt; 
&lt;p&gt;claude mcp add --transport http context7 https://mcp.context7.com/mcp&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;搜索真實代碼&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;searchGitHub&lt;/code&gt;- 搜索 GitHub 上的實際使用案例&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;需要先安裝 Grep MCP，安裝後此部分可以從引導詞中刪除：&lt;/p&gt; 
&lt;p&gt;claude mcp add --transport http grep https://mcp.grep.app&lt;/p&gt; 
&lt;h3&gt;編寫規範文檔工具&lt;/h3&gt; 
&lt;p&gt;編寫需求和設計文檔時使用&lt;code&gt;specs-workflow&lt;/code&gt;：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;檢查進度&lt;/strong&gt;:&lt;code&gt;action.type="check"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;初始化&lt;/strong&gt;:&lt;code&gt;action.type="init"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;更新任務&lt;/strong&gt;:&lt;code&gt;action.type="complete_task"&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;路徑：&lt;code&gt;/docs/specs/*&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;需要先安裝 spec workflow MCP，安裝後此部分可以從引導詞中刪除：&lt;/p&gt; 
&lt;p&gt;claude mcp add spec-workflow-mcp -s user -- npx -y spec-workflow-mcp@latest&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;來源：&lt;em&gt;https://github.com/kingkongshot/prompts/blob/main/prompts/claude/CLAUDE.local.md&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366423</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366423</guid>
      <pubDate>Fri, 15 Aug 2025 07:34:22 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>阿里啓動近千人 AI 招聘計劃，重點佈局大模型與 AI 硬件</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span style="color:#000000"&gt;阿里巴巴集團旗下智能信息事業羣近日啓動了近年最大規模的 AI 人才招聘計劃，面向社招與校招，總規模接近千人，覆蓋北京、上海、杭州、廣州等核心城市。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span style="color:#000000"&gt;本輪招聘重點聚焦大語言模型、多模態識別與理解、多模態訓練工程、智能體應用及 AI 硬件等前沿技術領域。阿里招聘官網顯示，大量崗位與多模態大模型算法及產品相關，其中部分強化學習及大模型算法崗位還要求具備醫療等垂直領域業務背景。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span style="color:#000000"&gt;&lt;img height="323" src="https://oscimg.oschina.net/oscnet/up-607755691ca256ff8e3eb38d1354f4d7581.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span style="color:#000000"&gt;以智能信息事業羣的旗艦應用夸克為例，招聘範圍涵蓋模型訓練、垂類場景應用（如學習、健康、創作）等多個方向。今年以來，阿里 AI To C 業務組已組建頂級 AI 算法研究與工程團隊，博士佔比較高，成為集團「阿里星」計劃的引才重點。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0"&gt;&lt;span style="color:#000000"&gt;作為阿里探索人工智能新形態的代表性業務，夸克 AI 眼鏡已於今年世界人工智能大會上首次亮相。本次招聘也包括智能硬件架構師、語音識別與交互、圖像及視頻算法優化等硬件及算法類職位。業內人士指出，此舉體現了阿里在 AI To C 應用領域的持續加碼與戰略決心。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366418</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366418</guid>
      <pubDate>Fri, 15 Aug 2025 07:31:22 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>上海交大發布 AI 生成 3D 人臉質量評估數據集 Gen3DHF</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;隨着生成式人工智能的快速發展，3D 人臉的生成成為可能，尤其在虛擬現實等領域具有廣泛應用。然而，評估這些生成 3D 人臉的質量和真實感依然是一個巨大的挑戰，因為人類對面部特徵的感知往往具有主觀性和敏感性。&lt;/p&gt; 
&lt;p&gt;因此，上海交通大學團隊開展了一項關於 AI 生成 3D 人臉質量評估的綜合研究。該團隊近日推出了 Gen3DHF 數據集和 LMME3DHF 評估指標，專注於評估 AI 生成的 3D 人臉質量。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-eafaa9e4d65f5fb5626b4db6600ebe4d433.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;相關論文：&lt;em&gt;https://arxiv.org/pdf/2504.20466&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Gen3DHF 數據集是一個大規模的基準數據集，包含 2000 個 AI 生成的 3D 人臉視頻，以及從質量和真實感兩個維度收集的 4000 個平均意見得分（MOS）、2000 個失真感知顯著圖和失真描述。這一數據集為研究人員提供了一個寶貴的工具，以客觀評估 AI 生成內容的質量。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-85ad3eba7881fe1ef6490bc45bbba08e76b.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;實驗結果表明，LMME3DHF 在準確預測 AI 生成 3D 人臉的質量得分、有效識別失真感知顯著區域和失真類型方面均取得了最先進的性能，超越了現有方法，同時與人類感知判斷保持了高度一致。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366413</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366413</guid>
      <pubDate>Fri, 15 Aug 2025 07:18:22 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>不服一審被判賠 45 萬元+致歉，上海芯聯芯對龍芯中科提起上訴</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;blockquote&gt; 
 &lt;p&gt;前情提要：&lt;a href="https://www.oschina.net/news/249714" target="_blank"&gt;龍芯中科知識產權糾紛案迎來勝訴終局&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;8 月 13 日，龍芯中科技術股份有限公司（簡稱「龍芯中科」）發佈訴訟事項進展公告，披露其與上海芯聯芯智能科技有限公司（簡稱「上海芯聯芯」）的名譽權糾紛案件進入二審階段。上海芯聯芯已就北京互聯網法院的一審判決提起上訴，請求撤銷原判並駁回龍芯中科全部訴訟請求，目前二審尚未開庭審理。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-eaf0971fc03e1c7ca76880e6cde590aa0bd.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據悉，該訴訟起源於 2021 年 3 月，龍芯中科以上海芯聯芯存在不實言論損害其名譽為由，向北京互聯網法院提起訴訟，要求對方澄清事實、公開道歉並賠償經濟損失。案件於當年 7 月 29 日正式立案，案號為（2021）京 0491 民初 29334 號。&lt;/p&gt; 
&lt;p&gt;經過四年審理，北京互聯網法院於 2025 年 7 月 23 日作出一審判決，認定上海芯聯芯的行為構成對龍芯中科名譽權的侵害，判令其在官網首頁置頂位置連續十日發佈經法院審核的致歉聲明，以消除影響、恢復龍芯中科名譽，並賠償龍芯中科經濟損失（含合理開支）45 萬元。同時，一審判決駁回了龍芯中科的其他訴訟請求，案件受理費 15.03 萬元由雙方分擔，其中上海芯聯芯承擔 11.27 萬元。&lt;/p&gt; 
&lt;p&gt;龍芯中科在公告中披露，於 2025 年 8 月 12 日收到上海芯聯芯的《民事上訴狀》。上海芯聯芯在上訴請求中明確提出，要求撤銷一審判決，改判駁回龍芯中科全部訴訟請求或發回重審，並由龍芯中科承擔一、二審全部訴訟費用。&lt;/p&gt; 
&lt;p&gt;對此，龍芯中科表示，上海芯聯芯的上訴事項不會影響公司正常生產經營。公司將積極應訴，依法主張自身合法權益，切實維護公司及全體股東利益。由於二審尚未開庭，最終判決結果存在不確定性，公司將根據案件進展及時履行信息披露義務，並提醒投資者注意相關風險。&lt;/p&gt; 
&lt;p&gt;作為國內自主可控芯片領域的重要企業，龍芯中科此次維權行動引發行業關注。近年來，隨着國產芯片產業快速發展，企業對知識產權及名譽權的保護意識不斷提升。此次案件不僅涉及企業間的民事糾紛，更折射出國產芯片企業在市場競爭中對自身品牌形象和合法權益的重視。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366405</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366405</guid>
      <pubDate>Fri, 15 Aug 2025 07:05:22 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>京東小程序 JS API 倉頡改造實踐</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"&gt; 
 &lt;section data-tools="135 編輯器" data-id="143788" data-color="e3fcff" style="letter-spacing: 0.578px;margin-bottom: 0px;visibility: visible;" data-pm-slice="0 0 []"&gt; 
  &lt;section style="margin: 10px auto;visibility: visible;"&gt; 
   &lt;section style="padding: 15px;background-color: rgb(250, 250, 250);color: rgb(250, 250, 250);visibility: visible;" class="js_darkmode__0"&gt; 
    &lt;section data-autoskip="1" style="line-height: 1.75em;letter-spacing: 1.5px;font-size: 14px;background-color: transparent;visibility: visible;"&gt; 
     &lt;section data-tools="135 編輯器" data-id="134666" style="visibility: visible;"&gt; 
      &lt;section style="margin: 10px auto;text-align: center;visibility: visible;"&gt; 
       &lt;section hm_fix="410:186" style="display: flex;justify-content: center;align-items: center;visibility: visible;"&gt; 
        &lt;section style="margin-bottom: 8px;flex: 1 1 0%;background-image: linear-gradient(to right, rgba(253, 123, 119, 0) 0%, rgb(170, 170, 170) 100%);height: 2px;overflow: hidden;visibility: visible;text-align: left;" class="js_darkmode__bg__0 js_darkmode__1"&gt; 
         &lt;span leaf="" style="visibility: visible;"&gt;&lt;br&gt;&lt;/span&gt; 
        &lt;/section&gt; 
        &lt;section data-brushtype="text" style="padding: 4px 1em;font-size: 16px;color: rgb(1, 1, 1);visibility: visible;margin-bottom: 8px;text-align: left;" class="js_darkmode__2"&gt; 
         &lt;span style="color: rgb(0, 0, 0);visibility: visible;" class="js_darkmode__3"&gt;&lt;strong style="visibility: visible;"&gt;&lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;本文導讀&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt; 
        &lt;/section&gt; 
        &lt;section style="flex: 1 1 0%;background-image: linear-gradient(to left, rgba(253, 123, 119, 0) 0%, rgb(170, 170, 170) 100%);height: 2px;overflow: hidden;visibility: visible;margin-bottom: 8px;text-align: left;" class="js_darkmode__bg__1 js_darkmode__4"&gt; 
         &lt;span leaf="" style="visibility: visible;"&gt;&lt;br&gt;&lt;/span&gt; 
        &lt;/section&gt; 
       &lt;/section&gt; 
      &lt;/section&gt; 
     &lt;/section&gt; 
     &lt;p style="line-height: 1.75em;visibility: visible;margin-bottom: 8px;text-align: left;"&gt;&lt;span style="color: rgb(0, 0, 0);text-indent: 0em;letter-spacing: 1px;visibility: visible;" class="js_darkmode__5"&gt;&lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;本文作者參與 2025 華為開發者大會，帶來分享《&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;京東+倉頡:高性能、跨平台鴻蒙應用開發實踐分享&lt;/span&gt;&lt;/span&gt;&lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;》。&lt;/span&gt;&lt;/span&gt;&lt;span leaf="" data-pm-slice="1 1 [&amp;quot;para&amp;quot;,{&amp;quot;tagName&amp;quot;:&amp;quot;section&amp;quot;,&amp;quot;attributes&amp;quot;:{&amp;quot;style&amp;quot;:&amp;quot;margin-bottom: 16px; line-height: 1.75em;&amp;quot;},&amp;quot;namespaceURI&amp;quot;:&amp;quot;&amp;quot;}]" style="visibility: visible;"&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;本次創新實踐為京東小程序團隊與華為鴻蒙突擊隊合作對京東小程序 API 調用過程進行解析，通過借力倉頡實現小程序性能提升和便捷的開發體驗。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
     &lt;p style="line-height: 1.75em;visibility: visible;margin-bottom: 8px;text-align: left;"&gt;&lt;span leaf="" data-pm-slice="1 1 [&amp;quot;para&amp;quot;,{&amp;quot;tagName&amp;quot;:&amp;quot;section&amp;quot;,&amp;quot;attributes&amp;quot;:{&amp;quot;style&amp;quot;:&amp;quot;margin-bottom: 16px; line-height: 1.75em;&amp;quot;},&amp;quot;namespaceURI&amp;quot;:&amp;quot;&amp;quot;}]" style="visibility: visible;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
     &lt;section style="margin-bottom: 8px;line-height: 1.75em;visibility: visible;text-align: left;"&gt; 
      &lt;span leaf="" data-pm-slice="1 1 [&amp;quot;para&amp;quot;,{&amp;quot;tagName&amp;quot;:&amp;quot;section&amp;quot;,&amp;quot;attributes&amp;quot;:{&amp;quot;style&amp;quot;:&amp;quot;margin-bottom: 16px; line-height: 1.75em;&amp;quot;},&amp;quot;namespaceURI&amp;quot;:&amp;quot;&amp;quot;}]" style="visibility: visible;"&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;歡迎一起交流討論！&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;visibility: visible;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;visibility: visible;"&gt; 
   &lt;section style="transform-style: preserve-3d;visibility: visible;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);visibility: visible;margin-bottom: 8px;" class="js_darkmode__11"&gt; 
     &lt;strong style="visibility: visible;"&gt;&lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;01&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);visibility: visible;"&gt; 
     &lt;section style="visibility: visible;margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong style="visibility: visible;"&gt;&lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;visibility: visible;text-align: left;"&gt; 
      &lt;strong style="visibility: visible;"&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);visibility: visible;" class="js_darkmode__12"&gt;&lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;背景介紹&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;visibility: visible;text-align: left;"&gt; 
      &lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;visibility: visible;text-align: left;"&gt; 
  &lt;span leaf="" style="visibility: visible;"&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;京東小程序容器是京東及其關聯 App 的重要組成部分，承載了多種內部和外部業務。其中近期熱門的模塊秒送外賣、以及常用的買菜、超市店鋪、奢侈品店鋪等均屬於小程序。&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="text-align: left;visibility: visible;margin-bottom: 8px;" nodeleaf=""&gt; 
  &lt;img src="https://oscimg.oschina.net/oscnet/07a3c4d3-1ded-4799-b94c-6533076e45c0.png" alt="圖片" class="rich_pages wxw-img" data-ratio="0.6947115384615384" data-s="300,640" data-type="png" data-w="832" style="width: 677px !important;height: auto !important;visibility: visible !important;" type="block" data-backw="578" data-backh="402" data-imgfileid="100029504" referrerpolicy="no-referrer"&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;"&gt; 
   &lt;section style="transform-style: preserve-3d;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);margin-bottom: 8px;" class="js_darkmode__14"&gt; 
     &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;02&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);"&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__15"&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;小程序架構&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
      &lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__16"&gt;&lt;/span&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;京東鴻蒙版小程序框架整體如下所示：&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;" nodeleaf=""&gt; 
  &lt;img src="https://oscimg.oschina.net/oscnet/94e1030e-5f6d-4359-8c84-88e22e803550.png" alt="圖片" class="rich_pages wxw-img" data-ratio="0.6318537859007833" data-type="png" data-w="766" style="width: 677px !important;height: auto !important;visibility: visible !important;" data-backw="578" data-backh="365" data-imgfileid="100029505" referrerpolicy="no-referrer"&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;小程序採用雙線程架構。即同時存在 JS 邏輯線程和 WebView 線程。其中 JS 邏輯線程 (簡稱 JS 線程) 負責運行 JS 引擎，執⾏業務邏輯；Webview 通常運行在 UI 主線程，主要包括頁面的渲染任務、響應交互事件併發送給 JS 線程。兩個線程可能會啓動 worker 子線程來輔助處理任務。 &amp;nbsp;JS Bridge 作為橋樑層，負責處理 JS API 的調用與派發。整體 JS API 派發邏輯由 Native 實現（C++）。當一個 JS &amp;nbsp;API 調用請求到來後，首先判斷該 API 是否有 Native 實現，如果沒有則調用 ArkTS 的派發邏輯來調用到原生 API 實現。&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;"&gt; 
   &lt;section style="transform-style: preserve-3d;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);margin-bottom: 8px;" class="js_darkmode__19"&gt; 
     &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;03&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);"&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__20"&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;性能瓶頸分析&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
      &lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__21"&gt;&lt;/span&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;小程序頁面加載/活躍過程中存在大量的 JS API 的調用。通常由 JS 線程發起 API 調用，經過主線程執行後生成結果數據，再將結果返回。因此，會出現如下性能瓶頸點。 &amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;1. API 如 Storage（存儲）、Systeminfo（系統信息）和 Network（網絡請求）在啓動階段被調用數十次。集中的 API 調用導致在主線程上出現排隊情況，佔用大量主線程時間，無法及時處理 webview 任務。 &amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;2. 由於線程之間數據不共享，跨線程的數據傳遞需要序列化和反序列化操作，響應延遲增大。&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;3. JS Bridge 在與原生交互時需要調用大量的 nAPI 接口，創建 nAPI 線程，處理效率較低，開發維護成本大。API 有數百個，如果全部使用 Native 處理多線程共享問題，開發維護成本高，可行性極低。&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;" nodeleaf=""&gt; 
  &lt;img src="https://oscimg.oschina.net/oscnet/8f6b290d-b616-45e7-9a30-d7efb23da596.png" alt="圖片" class="rich_pages wxw-img" data-ratio="0.5244215938303342" data-type="png" data-w="778" style="width: 677px !important;height: auto !important;visibility: visible !important;" data-backw="578" data-backh="303" data-imgfileid="100029507" referrerpolicy="no-referrer"&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;"&gt; 
   &lt;section style="transform-style: preserve-3d;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);margin-bottom: 8px;" class="js_darkmode__26"&gt; 
     &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;04&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);"&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__27"&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;原生 JS API 調用過程拆解&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
      &lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__28"&gt;&lt;/span&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;本次選取京東小程序中執行頻率最高的 getSystemInfo API 為例，展開拆解一次 API 調用的詳細流程：&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;" nodeleaf=""&gt; 
  &lt;img src="https://oscimg.oschina.net/oscnet/67c2db13-9d0c-4b16-848d-71222b74ccbb.png" alt="圖片" class="rich_pages wxw-img" data-ratio="0.3629807692307692" data-type="png" data-w="832" style="width: 677px !important;height: auto !important;visibility: visible !important;" data-backw="578" data-backh="210" data-imgfileid="100029509" referrerpolicy="no-referrer"&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;getSystemInfo 目前是由 ArkTS 實現。調用由 JS 線程提交給主線程，主線程啓用 taskpool 執行後再接受返回結果，等待過程中可以流水線執行下一個 API。可以看到單次 JS &amp;nbsp;API 調用會佔據主線程時間來處理。當 API 被頻繁調用時，主線程無法及時處理其他 webview 任務。&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;"&gt; 
   &lt;section style="transform-style: preserve-3d;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);margin-bottom: 8px;" class="js_darkmode__31"&gt; 
     &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;05&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);"&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__32"&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;場景分析&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
      &lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__33"&gt;&lt;/span&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;對京東部分小程序場景採集 trace 分析。以某店鋪為例，該店鋪小程序在冷啓動過程約 2800ms，其中有 900ms-1000ms 的時間在 webview 任務中穿插着大量的 getSystemInfo &amp;nbsp; API 的調用。經過檢查代碼，雖然已經根據頁面 hashcode 緩存了該 API 的結果數據，但每次獲取緩存值仍需要佔據主線程時間，因此在該場景上可以進行倉頡 API 改造嘗試。&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;"&gt; 
   &lt;section style="transform-style: preserve-3d;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);margin-bottom: 8px;" class="js_darkmode__35"&gt; 
     &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;06&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);"&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__36"&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;倉頡改造實踐&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
      &lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__37"&gt;&lt;/span&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;倉頡的部分特性在該場景性能優化上起到了決定性作用，其中包括：&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;1.作為鴻蒙系統官方語言之一，具備完善的鴻蒙系統的 API 能力，實現 1 比 1 改寫原生 API 的可行性&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;2.倉頡具備線程池能力。倉頡語言的 JS API 執行不佔用主線程時間。倉頡線程間具備天然的內存共享能力，省去序列化和反序列化開銷&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;3.倉頡具備高效的與 C 語言互操作的能力。C 語言與倉頡代碼互相調用只需要聲明和使用，代碼簡單，執行快，不需要調用 nAPI 協議接口&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;4.倉頡具備高效的與 ArkTS 互操作的能力，在需要時，可以獲取到 ArkTS 語言的 runtime，webview 等信息，保證 API 執行的邏輯正確性&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;使用倉頡改寫後的 JS API 執行流程如下圖：&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;" nodeleaf=""&gt; 
  &lt;img src="https://oscimg.oschina.net/oscnet/bc5c1a9f-ea19-4899-9521-31b920e776b2.png" alt="圖片" class="rich_pages wxw-img" data-ratio="0.7677419354838709" data-type="png" data-w="620" style="width: 677px !important;height: auto !important;visibility: visible !important;" data-backw="578" data-backh="444" data-imgfileid="100029510" referrerpolicy="no-referrer"&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;本次改造在小程序架構上重點涉及到兩個模塊。在 JSBridge 中加入倉頡 API 的派發邏輯，和在 JS API 中加入倉頡實現的 JS API（getSystemInfo），如下圖：&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;" nodeleaf=""&gt; 
  &lt;img src="https://oscimg.oschina.net/oscnet/f1238dc0-85bf-496c-8949-86e4209514b7.png" alt="圖片" class="rich_pages wxw-img" data-ratio="0.822429906542056" data-type="png" data-w="642" style="width: 677px !important;height: auto !important;visibility: visible !important;" data-backw="578" data-backh="475" data-imgfileid="100029511" referrerpolicy="no-referrer"&gt; 
 &lt;/section&gt; 
 &lt;p style="letter-spacing: 0.578px;text-align: left;margin-bottom: 8px;"&gt;&lt;span leaf=""&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;"&gt; 
   &lt;section style="transform-style: preserve-3d;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);margin-bottom: 8px;" class="js_darkmode__45"&gt; 
     &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;07&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);"&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__46"&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;倉頡穿刺優化效果&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;經過測試，倉頡改造後的 getSystemInfo 執行時間可縮短 50%+，且不佔用主線程時間。在某小程序上進行冷啓動端到端測試，啓動性能可提升 20%。 （約 500ms+）&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-top: 24px;letter-spacing: 0.578px;margin-bottom: 0px;"&gt; 
  &lt;section style="margin: 10px auto;display: flex;justify-content: center;"&gt; 
   &lt;section style="transform-style: preserve-3d;"&gt; 
    &lt;section style="font-size: 48px;letter-spacing: 1.5px;color: rgb(234, 242, 255);font-style: oblique;text-align: left;transform: translateZ(5px);margin-bottom: 8px;" class="js_darkmode__48"&gt; 
     &lt;strong&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;08&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
    &lt;/section&gt; 
    &lt;section style="margin-top: -35px;display: flex;justify-content: center;align-items: center;transform: translateZ(10px);"&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;strong&gt;&lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__49"&gt;&lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;未來規劃與展望&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 
      &lt;span style="font-size: 20px;color: rgb(0, 82, 217);" class="js_darkmode__50"&gt;&lt;/span&gt; 
     &lt;/section&gt; 
     &lt;section style="margin-bottom: 8px;text-align: left;"&gt; 
      &lt;span leaf=""&gt;&lt;span textstyle="" style="letter-spacing: normal;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt; 
     &lt;/section&gt; 
    &lt;/section&gt; 
   &lt;/section&gt; 
  &lt;/section&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;本次初步驗證證明瞭在小程序場景，倉頡具備高效性能和開發潛力。本次驗證也打造了倉頡 JS API 派發框架，未來基於此框架可以更快的擴展倉頡 JS API。計劃在以下方面進一步擴展驗證倉頡：&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;1. 更多 API 的倉頡化：嘗試改造更多高頻調用的 JS API。並在京東近期更多熱門場景（如秒送外賣）驗證性能收益；&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;2. 倉頡併發能力： 基於倉頡的高併發能力，嘗試優化網絡模塊的性能，接入更多小程序；&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;3. 小程序其他階段倉頡化探索： 除了 JS API，探索小程序場景更多階段的倉頡優化；&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;4. 在新場景使用倉頡開發：利用倉頡的性能和安全優勢，將倉頡用於新模塊新功能的開發。倉頡的高併發能力在 AI、跨屏應用和高性能 Web 場景中具有廣闊前景；&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="margin-bottom: 8px;line-height: 1.75em;text-align: left;"&gt; 
  &lt;span leaf=""&gt;&lt;span textstyle="" style="font-size: 15px;letter-spacing: normal;color: rgb(62, 62, 62);"&gt;5. 跨平台支持：倉頡支持 HarmonyOS、Android、iOS 和 PC 平台，未來將完善京東跨端通用能力，降低多平台開發的複雜性。&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="text-align: center;margin-bottom: 8px;" data-pm-slice="0 0 []"&gt; 
  &lt;span style="font-size: 16px;letter-spacing: normal;"&gt;&lt;span leaf=""&gt;&lt;img alt="圖片" class="rich_pages wxw-img" data-imgfileid="100028809" data-ratio="1" data-s="300,640" src="https://oscimg.oschina.net/oscnet/a95394ba-27b7-4076-869b-f9da0317c004.png" data-type="webp" data-w="396" style="pointer-events: initial;width: 185px !important;visibility: visible !important;height: auto !important;" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;section style="text-align: center;margin-bottom: 8px;" data-pm-slice="0 0 []"&gt; 
  &lt;span style="font-size: 16px;letter-spacing: normal;"&gt;&lt;span leaf=""&gt;掃一掃，加入技術交流羣&lt;/span&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"&gt; 
 &lt;section style="text-align: left;margin-bottom: 0px;"&gt; 
  &lt;span leaf=""&gt;&lt;br&gt;&lt;/span&gt; 
 &lt;/section&gt; 
 &lt;p style="display: none;"&gt; 
  &lt;mp-style-type data-value="3"&gt;&lt;/mp-style-type&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p style="color: #858585; font-size: 13px;"&gt;本文分享自微信公眾號 - 京東雲開發者（JDT_Developers）。&lt;br&gt;如有侵權，請聯繫 support@oschina.cn 刪除。&lt;br&gt;本文參與「&lt;a href="https://www.oschina.net/sharing-plan" target="_blank"&gt;OSC 源創計劃&lt;/a&gt;」，歡迎正在閲讀的你也加入，一起分享。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4090830/blog/18683569</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/18683569</guid>
      <pubDate>Fri, 15 Aug 2025 06:58:22 GMT</pubDate>
      <author>京東雲開發者</author>
    </item>
    <item>
      <title>螞蟻發佈 ASearcher，面向搜索 Agent 的強化學習開源項目</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;螞蟻 AReaL 團隊近日發佈「ASearcher」，這是一個 Agentic RL（reinforcement learning，強化學習）方面的開源項目，可大規模異步 RL 解鎖 Agent 長程工具使用能力，使開發者能夠輕鬆且經濟高效地構建自己的高性能搜索 Agent。&lt;/p&gt; 
&lt;p&gt;項目地址：https://github.com/inclusionAI/ASearcher&lt;br&gt; 論文：https://arxiv.org/abs/2508.07976&lt;/p&gt; 
&lt;p&gt;據介紹，ASearcher 專為大規模在線強化學習（RL）訓練搜索 Agent 而設計，使命是推進搜索 Agent 達到專家級性能。&lt;/p&gt; 
&lt;p&gt;&lt;img height="455" src="https://static.oschina.net/uploads/space/2025/0815/144348_4qnK_2720166.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0815/144407_W1O2_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;ASearcher 主要有兩項核心貢獻：&lt;/p&gt; 
&lt;p&gt;1. 使用完全異步 RL 訓練（Fully Async RL）在訓練高效的同時讓 agent 學會長程工具使用（Long-Horizon Tool Use）。訓練過程中，基於 QwQ-32B 的 agent 能夠自然地學會更多的工具使用輪次和更多輸出 token，在 200 步之後學會高達 40 輪次的 tool use，並且生成 token 達到了 150k+。&lt;/p&gt; 
&lt;p&gt;2. 開源了一個用於構造高質量&amp;amp;高難度數據的 agent。Agent 通過注入外部事實（Fact Injection）以及對題目模糊化（fuzz）來合成問題，同時在每一步合成都進行了非常嚴格的檢驗來保證 quality &amp;amp; difficulty 檢驗。&lt;/p&gt; 
&lt;p&gt;詳情查看&amp;nbsp;&lt;em&gt;https://mp.weixin.qq.com/s/mzvjcksN1JbWzZv5bnCPvQ&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366396</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366396</guid>
      <pubDate>Wed, 13 Aug 2025 06:45:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>IDC：中國生成式 AI 相關網絡硬件支出將在 2028 年達到 330 億元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;人工智能應用在工作和生活場景中迅速普及，從企業業務決策到個人數字助理，各行業紛紛引入 AI 以提升效率和創新。IDC 統計，2024 下半年中國大模型商用落地日均 Tokens 消耗量增長近 10 倍，2024 年中國公有云大模型調用量累計 114.2 萬億 Tokens（不包含使用海外 MaaS 平台的調用量）。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;生成式 AI 的快速發展不僅顯著提升了企業應用的智能化體驗與整體運營效率，同時也對底層數字基礎設施提出了全新且更高的要求。隨着數據中心內 Token 用量持續攀升激增，東西向流量大幅增長、通信能耗不斷加大，網絡正成為 AI 基礎設施的決定性瓶頸。400G-800G-1.6T 的網絡演進節奏顯著加速，傳統「先算力、後網絡」的升級邏輯已經失效。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;AI 服務提供商需要把網絡規劃前置，通過高帶寬、高可靠、低能耗的全棧創新，才能真正釋放 GPU 算力紅利，並在 AI 平台競爭中佔據領先位置。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;2024 年，中國高端以太網（≥200G）端口出貨量突破 600 萬，未來將保持 45.6% 的複合增長率，2029 年中國高端以太網端口出貨量將超過 4300 萬個。IDC 預測，中國生成式 AI 相關網絡硬件支出將持續加速，從 2023 年的 65 億元，增加到 2028 年的 330 億元，複合增長率將達到 38.5%。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;國家數據局此前公佈的數據顯示，2024 年初，中國日均 Token 的消耗量為 1 千億；截至今年 6 月底，日均 Token 消耗量已經突破 30 萬億，1 年半時間增長了 300 多倍。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366394</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366394</guid>
      <pubDate>Wed, 13 Aug 2025 06:36:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>OpenAI 高管：不排除在 ChatGPT 內插入廣告的可能</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theverge.com%2Fnews%2F759140%2Fopenai-chatgpt-ads-nick-turley-decoder"&gt;根據 The Verge 的報道&lt;/a&gt;，ChatGPT 負責人 Nick Turley 在接受《Decoder》採訪時表示，OpenAI 不排除為 ChatGPT 添加廣告的可能性，認為 「保留選擇權是明智的」，但強調若引入廣告需 「深思熟慮且得體」。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0815/143217_xTBc_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Nick Turley 提到，ChatGPT 本身可能並非適合廣告的產品，因其需深度契合用戶目標，但未來可能推出其他含廣告的產品。目前訂閲模式增長迅速且潛力巨大，2025 年 OpenAI 預計通過訂閲創收 127 億美元，是 2024 年 37 億美元的三倍多，但公司仍入不敷出，預計 2029 年實現現金流平衡。&lt;/p&gt; 
&lt;p&gt;ChatGPT 用戶已超 7 億，其中付費訂閲用戶 2000 萬（2024 年 4 月數據）。Nick Turley 認為大量免費用戶並非負擔，而是可轉化為付費用戶的潛在羣體。此外，OpenAI 正探索 「ChatGPT commerce」 項目，通過推薦產品獲取分成，且確保推薦不受 affiliate 收入影響，保持獨立性。&lt;/p&gt; 
&lt;p&gt;OpenAI CEO Sam Altman 對 ChatGPT 加廣告態度矛盾，曾稱其 「令人不安」 是 「最後手段」，後又表示 「並非完全反對」。而競爭對手 xAI（馬斯克旗下）則計劃在 Grok 中加入廣告。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366393</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366393</guid>
      <pubDate>Wed, 13 Aug 2025 06:32:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>編程新貴 Lovable 豪言 12 個月內 ARR 衝擊 10 億美元</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;歐洲 AI 編程獨角獸 Lovable 正在展現驚人的增長野心。該公司 CEO Anton Osika 近日在彭博電視台訪談中透露，公司計劃在未來 12 個月內實現 10 億美元的年度經常性收入 (ARR)。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Osika 在週四的採訪中表示，Lovable 目前每月 ARR 增長至少 800 萬美元，展現出強勁的增長勢頭。根據公司今年夏天發佈的博客文章，Lovable 在實現首個 100 萬美元收入里程碑後僅用了 8 個月時間就突破了 1 億美元 ARR 大關，這一增長速度在科技行業中極為罕見。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;按照目前的增長軌跡，Osika 預計公司將在今年底達到 2. 5 億美元的 ARR。如果能夠維持當前的月度增長速度，Lovable 確實有望在 2025 年底前實現 10 億美元 ARR 的宏偉目標。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;成立於 2023 年的 Lovable 專注於 AI 驅動的編程工具開發，在短短兩年內就成為了歐洲 AI 領域的明星企業。今年夏天，該公司在 A 輪融資中籌集了 2 億美元，估值達到 18 億美元，充分展現了投資者對其商業模式和增長前景的信心。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;這家編程工具初創公司的快速崛起反映了當前市場對 AI 編程助手的巨大需求。隨着軟件開發行業對效率提升的迫切需要，以及 AI 技術在代碼生成和編程輔助方面的不斷進步，像 Lovable 這樣的平台正在獲得越來越多開發者和企業客戶的青睞。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;Lovable 的增長速度在 SaaS(軟件即服務) 行業中屬於頂尖水平。通常情況下，企業級軟件公司從 0 到 1 億美元 ARR 需要數年時間，而 Lovable 在不到一年的時間內就完成了這一跨越，顯示出 AI 編程工具市場的巨大潛力和公司產品的強大市場吸引力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;如果 Lovable 能夠實現其 10 億美元 ARR 的目標，這將使其成為歐洲增長最快的 AI 公司之一，也將進一步鞏固其在全球 AI 編程工具市場中的領先地位。不過，維持如此高速的增長並非易事，公司需要持續創新產品功能，擴大市場份額，同時應對日益激烈的競爭環境。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;當前，AI 編程助手市場競爭日趨激烈，包括 GitHub Copilot、OpenAI 的編程工具以及其他眾多競爭對手都在爭奪市場份額。Lovable 能否在這一競爭激烈的環境中持續保持高增長率，將是決定其能否實現宏偉目標的關鍵因素。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;對於整個 AI 編程工具行業而言，Lovable 的成功案例也為其他初創公司提供了寶貴的參考。它證明瞭在合適的市場時機和強大的產品能力支撐下，新興 AI 公司確實有可能實現超常規的增長速度。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366383</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366383</guid>
      <pubDate>Wed, 13 Aug 2025 05:53:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>jQuery 4.0.0 RC1 發佈</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;jQuery 4.0.0 首個候選版本（Release Candidate 1）&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jquery.com%2F2025%2F08%2F11%2Fjquery-4-0-0-release-candidate-1%2F" target="_blank"&gt;已發佈&lt;/a&gt;，團隊認為它已接近完成，希望開發者進行廣泛測試——「we think this is ready; now poke it with many sticks.」。若未發現需修復的問題，將直接推出正式版本 jQuery 4.0.0。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;主要變化與亮點&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;移除舊版瀏覽器支持&lt;/strong&gt;：不再支持 IE 11 以下版本（即僅支持 IE11+），同時也放棄了對 Edge Legacy、iOS &amp;lt;11、Firefox &amp;lt;65 和舊版 Android 瀏覽器的支持。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;刪減遺留代碼與棄用 API&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;移除了大量已棄用的 API，如 &lt;code&gt;jQuery.isArray&lt;/code&gt;、&lt;code&gt;jQuery.parseJSON&lt;/code&gt;、&lt;code&gt;jQuery.trim&lt;/code&gt;、&lt;code&gt;jQuery.isFunction&lt;/code&gt; 等。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;移除了 jQuery 原型中的 &lt;code&gt;push&lt;/code&gt;、&lt;code&gt;sort&lt;/code&gt;、&lt;code&gt;splice&lt;/code&gt; 等 Array 方法，這些方法是內部使用的，現在推薦使用標準數組方法。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;引入「slim」版本&lt;/strong&gt;：提供了精簡版（slim build），不包含 AJAX 和動畫模塊，體積更小（約減少 8KB gzip 壓縮後大小）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;其他改進&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;修復並簡化了事件處理（如 &lt;code&gt;focusin&lt;/code&gt; 和 &lt;code&gt;focusout&lt;/code&gt; 事件順序）。&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;提高了與現代瀏覽器標準的兼容性，減少「魔法」行為，提升性能與可維護性。&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;詳情查看&amp;nbsp;&lt;em&gt;https://blog.jquery.com/2025/08/11/jquery-4-0-0-release-candidate-1/&lt;/em&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366347/jquery-4-0-0-rc1</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366347/jquery-4-0-0-rc1</guid>
      <pubDate>Wed, 13 Aug 2025 04:06:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>騰訊雲推出 CloudBase AI CLI，可減少 80% 編碼量</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;騰訊雲&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FWJFmEYgpDVrTXGyKpb_5NQ" target="_blank"&gt;宣佈&lt;/a&gt;推出 CloudBase AI CLI，這是一款深度集成雲開發平台的 AI 命令行工具，旨在為專業開發者提供更高效、更便捷的開發體驗。CloudBase AI CLI 的前身是今年 5 月發佈的 CloudBase AI ToolKit，此次升級使其功能更加強大，能夠顯著提升開發效率。&lt;/p&gt; 
&lt;p&gt;CloudBase AI CLI 的核心優勢在於其統一的命令行入口，通過簡單的「tcb ai」命令，開發者可以調用多種 AI 編程工具，如 Claude Code、OpenAI Codex、aider 和 Qwen Code 等。這些工具能夠根據開發者的自然語言描述生成代碼、優化代碼結構，並支持一鍵部署到騰訊雲開發平台。通過這種方式，CloudBase AI CLI 可以減少 80% 的編碼量，極大地提高了開發效率。&lt;/p&gt; 
&lt;p&gt;該工具的另一個顯著特點是其全平台通用性和多模型協作能力。無論開發者是在本地電腦、雲端服務器，還是在小程序開發工具、VS Code、GitHub Actions 或 CodeBuddy 等環境中工作，CloudBase AI CLI 都能無縫運行。它內置了 DeepSeek、Kimi K2 等主流 AI 模型，並支持用戶自定義模型和 API Key，從而滿足不同開發場景的需求。&lt;/p&gt; 
&lt;p&gt;&lt;img height="316" src="https://oscimg.oschina.net/oscnet/up-6b7068737b4fc0a45d8ff3000ce051ee3c7.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;CloudBase AI CLI 不僅在代碼生成方面表現出色，還覆蓋了從代碼生成到部署應用，再到配置後端服務的全流程。它能夠直接調用騰訊雲的雲函數、雲數據庫和雲存儲等 Serverless 服務，實現自動擴縮容，從而讓開發者無需為運維操心。此外，CloudBase 支持 Node.js、Java、Go 等多種語言進行服務開發和託管，開發者可以根據項目需求靈活選擇技術棧，進一步提升開發效率和項目靈活性。&lt;/p&gt; 
&lt;p&gt;為了降低使用門檻，騰訊雲為新用戶提供 100 萬 tokens 的免費體驗額度，以及雲函數調用、數據庫存儲等基礎服務的免費配額。這意味着開發者可以在不產生額外成本的情況下，體驗 AI 編程的強大功能，並根據項目需求靈活選擇不同的模型和調用方式，最大化 AI 的性價比。&lt;/p&gt; 
&lt;p&gt;許多內測開發者已經體驗了 CloudBase AI CLI，並對其效果給予了高度評價。例如，在開發自行車賽事管理平台時，開發者通過 CLI 從設計到部署一氣呵成，大大提升了開發效率；校園服務小程序的開發者表示，雲函數部署和數據庫查詢功能非常實用，節省了大量學習時間；小遊戲開發者認為預製模板配置精準，能夠快速生成 MVP 原型；物流平台開發者則通過對話式開發顯著縮短了項目週期。&lt;/p&gt; 
&lt;p&gt;CloudBase AI CLI 的推出，標誌着騰訊雲在 AI 開發工具領域的又一次重要創新。它不僅為開發者提供了一個高效、便捷的開發環境，還通過集成 AI 技術和雲開發平台，推動了開發流程的自動化和智能化。&lt;/p&gt; 
&lt;p&gt;開發者可以通過以下方式安裝 CloudBase AI CLI:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;在 Mac/Linux/Windows WSL 系統中，使用命令&lt;code&gt;curl https://static.cloudbase.net/cli/install/install.sh -fsS | bash&lt;/code&gt;;&lt;/li&gt; 
 &lt;li&gt;在 Windows PowerShell 中，使用命令&lt;code&gt;irm https://static.cloudbase.net/cli/install/install.ps1| iex&lt;/code&gt;。&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366342</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366342</guid>
      <pubDate>Wed, 13 Aug 2025 03:46:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>2024 年中國隱私計算市場規模近 10 億</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#000000"&gt;國際數據公司 IDC 發佈了《中國隱私計算平台主要廠商市場份額，2024》，報告顯示，2024 年，中國隱私計算市場規模達到 9.8 億元，同比增長 10.1%。其中，螞蟻數科以 36.7% 的市場佔有率位居首位，這也是螞蟻數科連續第三年位居中國隱私計算市場份額第一。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#000000"&gt;IDC 認為，市場主要增長驅動來源於數據要素相關項目建設，同時，大模型持續向各個行業滲透，推動隱私保護需求持續走高，也為隱私計算應用增長帶來新動能。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;img height="417" src="https://oscimg.oschina.net/oscnet/up-cda2e04b2133ad4495d7c7de5cda47b2e03.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#000000"&gt;隨着大模型在產業快速應用，數據安全與隱私保護成為規模化落地的重要挑戰。IDC 認為，用戶在使用大模型的過程中，普遍面臨需要使用公有算力以及保護自身數據隱私的矛盾。隱私計算可助力企業加快大模型的訓練與推理過程，為業務賦能並持續構建競爭優勢。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#000000; text-align:start"&gt;&lt;span style="color:#000000"&gt;IDC 中國市場高級分析師洪婉婷表示：「2024 年，隱私計算已不僅是數據安全工具，更是激活數據要素市場的‘智能連接器’，在分化中邁向更可持續的增長週期。」&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366339</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366339</guid>
      <pubDate>Wed, 13 Aug 2025 03:36:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>AI 質量專項報告自動分析生成</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;h1&gt;一、背景&lt;/h1&gt; 
&lt;p&gt;在日常工作中，常需要通過各項數據指標，確保驅動版本項目進展正常推進，並通過各種形式報表數據，日常總結日報、週會進展、季度進行總結輸出歸因，分析數據變化原因，做出對應決策變化，優化運營方式，目前在梳理整理校準分析數據需要大量的時間投入、結合整體目標及當前進展，分析問題優化的後續規劃。&lt;/p&gt; 
&lt;h2&gt;常見形式&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;人工收集&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;數據來源依賴於各系統平台頁面，通過人工收集校準後填寫再通過表格公式計算，或者可以通過多維表格工作流觸發通知等功能。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-fb8f3cf3864fef2a864a8fd2b3af91eef5a.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;quickbi 報表&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;通過 ODPS 搭建自定義報表，實現快速收集數據，複製報表到飛書文檔內進行異動分析。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-9bc7770fc2def96e9bc721e36ff1e8792c0.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;平台能力開發&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;通過代碼開發文檔導出能力，根據固定模板生成數據分析，該能力開發人力成本較高，需要針對不同平台數據源定製化開發。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-5b60645a38d8342e0d6512522d109f23250.png" alt="" referrerpolicy="no-referrer"&gt; &lt;img src="https://oscimg.oschina.net/oscnet/up-e8c170b209f5a84bbad7465c9f4c32afeb0.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;AI Studio 智能體平台&lt;/h2&gt; 
&lt;p&gt;研發效能團隊基於開源 Dify 項目社區部署，可以根據需求自定義 sop，多模型的可選項，選擇最適合業務的模型。每個工作流節點可自定義流程的判斷分析，輕鬆上線可投產的 AI Agents。&lt;/p&gt; 
&lt;p&gt;Dify 是一個支持工作流編排的 AI 智能體平台，輕鬆構建並部署生產級 AI 應用。其核心功能包含：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;以工作流的方式編排 AI 應用，在工作流中可以添加 LLM、知識庫、Agent 工具、MCP 服務等節點，工作流支持分支流轉、節點循環、自定義節點等高級能力項。&lt;/li&gt; 
 &lt;li&gt;支持在工作流中調用公司內部的 Dubbo/gRPC 服務。（插件實現）&lt;/li&gt; 
 &lt;li&gt;知識庫管理，通過構建私有知識庫以增強 LLM 的上下文。&lt;/li&gt; 
 &lt;li&gt;與內部平台集成，支持 H5 頁面嵌入、API 的方式與內部平台集成。&lt;/li&gt; 
 &lt;li&gt;主流模型集成，支持使用多種主流模型如 DeepSeek、OpenAI 等，支持多模態模型。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;對標的業界產品有：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;釦子：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.coze.cn" target="_blank"&gt;https://www.coze.cn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;FastGPT：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftryfastgpt.ai" target="_blank"&gt;https://tryfastgpt.ai&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;n8n：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fn8n.io" target="_blank"&gt;https://n8n.io&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;✅ 多模型選擇（適配不同業務場景）&lt;/p&gt; 
&lt;p&gt;✅ 可視化工作流搭建（支持自定義 SOP）&lt;/p&gt; 
&lt;p&gt;✅ 全鏈路可觀測性（實時調試優化）&lt;/p&gt; 
&lt;p&gt;綜上本期實踐利用 AI 工作流平台針對報告進行生成分析輸出，讓使用方迴歸到聚焦數據歸因分析上，減少數據收集分析、文檔編寫成本。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-9585467ecf364dc526493e2a3c4bfb3144a.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;二、應用實踐&lt;/h1&gt; 
&lt;h2&gt;實踐效果&lt;/h2&gt; 
&lt;p&gt;整體分析數據從哪來-&amp;gt;需要輸出什麼樣的格式-&amp;gt;優化模型輸出結果，三步驟針對輸出結果進行調優。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-b6a67a3df752e5f40843a5a163279e95c9a.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;自動化成熟度分析工作流搭建案例&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-dabba6a7846783a32aadff832a00375811e.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;運用效果&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-85f2e842e99f5670912a9b73a2be0aa408b.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※&lt;/strong&gt; &lt;strong&gt;報告效果&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-011cfecea1cad70357bc70969f46a350a8d.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;※&lt;/strong&gt; &lt;strong&gt;飛書機器人通知歸因分析&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-e7970c0a67faa99bc4abaa47ad0de820aa4.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;數據處理&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-2cb70deb46e6eeb5fa4ebbf0824044180ab.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;LLM：通過用戶輸入分析獲取數據源請求格式，配置好對應數據的映射關係模型自行獲取對應數據。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;提示詞輸入&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-45170a748f81056cca2e90f8ecbe82238b7.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;格式化輸出配置&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-409dfa7e9fb69870839706ad8e410578256.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;http 請求：通過用戶輸入分析後的參數構造請求參數，通過固定接口拉取數據，支持 curl 導入功能。 &lt;img src="https://oscimg.oschina.net/oscnet/up-2c33e172d46c178ebbe11bb0d908d0aeb6a.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;代碼執行：支持 python、js 代碼對結果數據進行處理過濾，提升分析結果準確性。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-b024ad751cc6a6611d0d86932305e9811c6.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;模型提示詞&lt;/h2&gt; 
&lt;p&gt;如文檔整體分為不同模塊可設定不同模型節點處理，每個模塊增加特定提示詞處理節點內容，模型並行分析處理，提升輸出穩定性和輸出效率，再通過 LLM 輸出整合進行整體輸出。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-ebf5b28267d054c491b04909cd8005e8023.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在模型輸入上下文及用戶輸入，通過獲取的數據指定輸出格式，設定提示詞，提供 AI 結合模板輸出對應形式。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-ae89c16d0a654d7051fdc1b4cc5a8209c81.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;通過銜接上下節點返回內容最終整合報表輸出結果，統一輸出樣式格式。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-8a05d97e09574bd3a33258d7e68b1edf992.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;優化輸出&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;切換可用模型&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;遇到模型輸出不穩定或者未達到預期效果，可切換可用模型，尋找適配模型。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-1ac23c5470f957c7d94d68be27766ef7390.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;設定模型預載參數&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;設定模型預載參數，提升模型輸出準確度。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-cadd3c90268c2e1b50f7e052043f35421c6.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;優化增加提示詞&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;優化增加提示詞提升輸出形式穩定性：角色定義 -&amp;gt; 字段映射 -&amp;gt; 模板説明 -&amp;gt; 實際數據填充 -&amp;gt; 輸出格式定義。&lt;/p&gt; 
&lt;p&gt;`## 角色定義，你是一位接口自動化測試專家以及報告生成專家，負責將接口返回的數據映射字段結合模板輸出一份有效的自動化成熟度報告-穩定性部分。&lt;/p&gt; 
&lt;h2&gt;接口返回數據字段映射關係：&lt;/h2&gt; 
&lt;p&gt;基礎字段： bu_name:業務域名稱。 parent_bu_id:業務域。&lt;/p&gt; 
&lt;p&gt;穩定性指標字段： total_auto_stability_score：穩定性評分 iter_case_success_rate: 迭代自動化成功率 iter_case_success_rate_cpp: 迭代自動化成功率環比 auto_case_failed_rate: 自動化失敗率 auto_case_failed_rate_cpp: 自動化失敗率環比 case_aigc_avg_score: 用例健壯有效性評分 case_aigc_avg_score_cpp: 有效性評分環比&lt;/p&gt; 
&lt;h2&gt;模板：&lt;/h2&gt; 
&lt;p&gt;2.2 自動化穩定性，用表格展示自動化穩定性，表格內容包含所有一級業務域、二級業務域。 表頭按照順序輸出： 1、業務域 2、自動化穩定性評分 3、迭代自動化成功率 4、迭代自動化成功率環比 5、自動化失敗率 6、失敗率環比 7、用例健壯有效性評分 8、有效性評分環比&lt;/p&gt; 
&lt;p&gt;重點關注項：xxx --僅分析二級業務域的穩定性性指標字段，列出需重點關注指標。&lt;/p&gt; 
&lt;h2&gt;模板説明：&lt;/h2&gt; 
&lt;p&gt;1、以 html 格式輸出，增加內容豐富度，不輸出任何多餘內容。 2、表格説明：表格需要包含所有業務域數據。不要省略或者缺少任何業務域數據，將所有業務域展示在同一個表格內。 3、表格行排序：根據評分從高到低排序。 4、環比字段説明：指標環比下降環比字段標記紅色，環比提升字段標記綠色，不標記背景色。&lt;/p&gt; 
&lt;h2&gt;任務説明&lt;/h2&gt; 
&lt;p&gt;1、用戶將提供接口返回的 JSON 數據。 2、根據接口數據和匹配字段映射關係。 3、結合模板以及模板説明 html 形式輸出，不輸出任何多餘內容。 請你根據以上內容，回覆用戶，不需要輸出示例。`&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;模板轉換&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;輸出的表格形式通過模板轉化固定輸出 html 表格形式，提升模型輸出穩定性。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-951218b30c925ff966d1ed3cd58f24b3462.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;輸出形式&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;以 markdown 形式或以 html 形式輸出，複製到飛書文檔上進行輸出。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-f0ff205df427701258075a2bd806c977dc6.png" alt="" referrerpolicy="no-referrer"&gt; &lt;strong&gt;飛書機器人通知歸因分析&lt;/strong&gt; &lt;img src="https://oscimg.oschina.net/oscnet/up-94c0400c8f5b94706100d7572efc7ea8e0d.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;生成飛書文檔&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;支持飛書應用直接新建飛書文檔，markdown 形式輸出。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-ff42b407c7f891d6832aec44a5d493cb4ae.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;對話返回生成後的飛書文檔地址及分析：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-aef80b72324467e150cf7975a655ee38f9e.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;三、總結&lt;/h1&gt; 
&lt;p&gt;在日常工作中如何有效利用數據指標驅動項目進展，現有數據收集和分析流程中面臨的挑戰。通過手動收集數據、生成報表、平台開發等傳統方式，需要投入大量時間和人力資源，導致工作效率低下。&lt;/p&gt; 
&lt;p&gt;為此，引入了研發效能 AI 智能體平台，AI 工作流平台不僅改進了數據處理方式，還提升了報告生成的效率和準確性，從而增強了業務洞察力。進一步豐富工作流和知識庫，提高對核心數據指標的分析能力，並針對異常數據指標進行細緻剖析，為團隊提供更深入的指導和支持。&lt;/p&gt; 
&lt;p&gt;此外，相似場景的處理也可以藉助 AI 工作流進行優化，有望在多個業務領域推廣應用。&lt;/p&gt; 
&lt;h1&gt;四、後續規劃&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;豐富工作流：豐富結合知識庫，針對每項核心數據指標提升建議以及業務域現狀給予業務域具體指導建議。&lt;/li&gt; 
 &lt;li&gt;明細下鑽分析：獲取對應數據指標異常後，結合明細數據進行分析，具體到用例、人員級別。&lt;/li&gt; 
 &lt;li&gt;類似場景可通過 AI 工作流處理：固定模板數據源報告類、週會均可使用該方法減少人工投入成本。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;往期回顧&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1.&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247540807%26idx%3D1%26sn%3Dfc32d92f75b35002a3c434589b994a97%26scene%3D21%23wechat_redirect" target="_blank"&gt;Rust 性能提升"最後一公里"：詳解 Profiling 瓶頸定位與優化｜得物技術&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;2.&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247540782%26idx%3D1%26sn%3D6d0b8ab9e9b5a13713cfd8d5dd315e74%26scene%3D21%23wechat_redirect" target="_blank"&gt;Valkey 單點性能比肩 Redis 集羣了？Valkey8.0 新特性分析｜得物技術&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;3.&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247540596%26idx%3D1%26sn%3D25f44a0aba699c43c90c55065a6d5ec4%26scene%3D21%23wechat_redirect" target="_blank"&gt;社區搜索離線回溯系統設計：架構、挑戰與性能優化｜得物技術&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;4.&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247540409%26idx%3D1%26sn%3Df3ae16d2ea439828c4452d92a5e46d53%26scene%3D21%23wechat_redirect" target="_blank"&gt;正品庫拍照 PWA 應用的實現與性能優化｜得物技術&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;5.&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247540215%26idx%3D1%26sn%3D72a0573520a8032d33b622f25bdd0671%26scene%3D21%23wechat_redirect" target="_blank"&gt;得物社區活動：組件化的演進與實踐&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;文 / 笠&lt;/p&gt; 
&lt;p&gt;關注得物技術，每週更新技術乾貨&lt;/p&gt; 
&lt;p&gt;要是覺得文章對你有幫助的話，歡迎評論轉發點贊～&lt;/p&gt; 
&lt;p&gt;未經得物技術許可嚴禁轉載，否則依法追究法律責任。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/5783135/blog/18688219</link>
      <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/18688219</guid>
      <pubDate>Wed, 13 Aug 2025 03:03:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>谷歌發佈 2.7 億參數的多模態模型：Gemma 3 270M</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;谷歌發佈了專為任務特定微調設計的 2.7 億參數緊湊模型 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevelopers.googleblog.com%2Fen%2Fintroducing-gemma-3-270m%2F" target="_blank"&gt;Gemma 3 270M&lt;/a&gt;，該模型具備高能效和內置指令遵循能力，並支持 INT4 精度運行。Gemma 3 270M 包含 1.7 億嵌入參數、1 億 Transformer 參數以及 25.6 萬詞彙量，為特定領域和語言的微調提供了堅實的基礎。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-15bade1ab508d39f951623863ededa2a7ed.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Gemma 3 270M 具有很高的能效。它提供了生產就緒的量化感知訓練（QAT）檢查點，支持在 INT4 精度下運行，性能損失極小，非常適用於資源受限的設備。模型還附帶了指令微調版本，可實現開箱即用。該模型的核心價值在於通過微調釋放其潛力，能夠高精度、高速度且經濟高效地執行文本分類、數據提取等任務。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/space/2025/0815/104325_aHBF_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;它適用於情感分析、實體提取、查詢路由等高吞吐量、定義明確的任務。其小巧的尺寸支持快速微調迭代和設備上運行，確保了用戶隱私。開發者可以通過 Hugging Face、Ollama、Kaggle、LM Studio 和 Docker 下載 Gemma 3 270M。&lt;/p&gt; 
&lt;p&gt;它支持在 Vertex AI、llama.cpp、Gemma.cpp、LiteRT、Keras 和 MLX 等多種推理工具上運行。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366317/google-gemma-3-270m</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366317/google-gemma-3-270m</guid>
      <pubDate>Wed, 13 Aug 2025 02:46:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>開源多媒體框架 FFmpeg 集成 Whisper.cpp，增加 AI 語音轉寫功能</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;開源多媒體框架&amp;nbsp;&lt;/span&gt;&lt;span&gt;FFmpeg 在&lt;/span&gt;即將發佈的&amp;nbsp;&lt;span style="font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif"&gt;8.0 版本中新增了 af_whisper 音頻工具，可在 FFmpeg 生態系統內直接實現自動語音識別（ASR）。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-bb8191407db1babca3892cb93a2a09ee0c5.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;https://git.ffmpeg.org/gitweb/ffmpeg.git/commit/13ce36fef98a3f4e6d8360c24d6b8434cbb8869b&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;該工具基於 whisper.cpp 庫，為媒體處理流程引入 AI 模型，支持靈活的音頻轉寫功能，包括選擇 AI 模型、指定語言和設置輸出格式（文本、SRT、JSON 等）。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-6ab0dc39f6101a06bd8de506fbad1c9fbe2.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;它既可處理預錄製文件，也可處理實時音頻流，並提供語音激活檢測（VAD）以提升轉寫的準確性與效率。同時，該工具支持 GPU 加速，能夠顯著縮短轉寫時間。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;社區用戶對這一新功能發表了許多看法，有用戶表示，「添加 &lt;code&gt;--enable-whisper&lt;/code&gt; 到自定義的 FFmpeg 構建配置中」很令人期待；當然也有人質疑：「為什麼要將其整合入 FFmpeg？最可能的用途是實時生成並將字幕嵌入視頻，但這看起來還是很小眾」。還有人寫道：「我希望這個功能可以用來從音頻中隔離語音內容，這樣就能更好地重製 TV 節目音軌，而不只是依賴字幕」。&lt;/p&gt; 
&lt;p&gt;FFmpeg 8.0 預計將在接下來幾周內正式發佈，屆時還將包含 Vulkan 加速、CPU 性能優化等其他改進。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366314/ffmpeg-lands-whisper</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366314/ffmpeg-lands-whisper</guid>
      <pubDate>Wed, 13 Aug 2025 02:38:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>騰訊披露：有足夠芯片做 AI 訓練，不會過度依賴現有 GPU 資源</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;8 月 14 日消息，發佈 2025 年第二季度財報後，騰訊 8 月 13 日晚間召開業績交流會。最新財報中，AI 是一大關鍵詞。業績交流會上，騰訊管理層也重點談到 AI。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-4cad0ab684cbfa37c6f32ae12ee4ef14d57.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;騰訊管理層表示，公司密切關注 AI 開發進度，關注大模型性能演進，通過理解用戶需求和習慣改進 AI 產品，同時也着眼讓 AI 提高現有業務的效率，例如廣告、遊戲、金融科技。&lt;/p&gt; 
&lt;p&gt;對於 AI 運算依託的芯片，騰訊管理層表示，芯片進口的情況還需要觀察。騰訊目前有足夠的芯片來做訓練，並升級現有模型，推理方面則有不同的芯片選擇。在軟件方面，公司也會進一步改進，以提高推理效率，從而減少對芯片能力的依賴，騰訊會嘗試在相同數量的芯片上運行更多工作負載。&lt;/p&gt; 
&lt;p&gt;騰訊此前計劃增加今年的資本開支，用於支持 AI 相關的業務等。在第一季度資本開支同比增長 91% 的基礎上，第二季度資本開支同比增長 119% 至 191 億元。&lt;/p&gt; 
&lt;p&gt;騰訊管理層在業績交流會上表示，對於資本支出目標，公司尚未進行新的修改。更早前，國家網信辦就美國英偉達算力芯片 H20 漏洞後門安全風險約談該公司，也算是變相給國內公司採購時敲響警鐘。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366312</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366312</guid>
      <pubDate>Wed, 13 Aug 2025 02:29:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>馬斯克坦言谷歌 AI 領先，xAI 有望迎頭趕上</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;埃隆・馬斯克於發帖表示，承認谷歌在人工智能（AI）領域的領先地位，然而他也表示他的初創公司 xAI 有潛力迎頭趕上。馬斯克在回覆一位用戶時提到，雖然目前大型人工智能公司如谷歌依然佔據優勢，但他相信 xAI 同樣會在未來取得進展。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;&lt;img height="252" src="https://oscimg.oschina.net/oscnet/up-46d73a54149d046e698c4444a457f6034fd.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;馬斯克指出，谷歌在現實世界的人工智能應用中，擁有強大的計算能力和龐大的數據資源，這使得谷歌成為當前的領導者。他強調，谷歌在這些方面的優勢是顯而易見的，這使得他們在短期內很難被超越。然而，他也認為這種局面可能在未來幾年內會發生變化，暗示技術發展和市場競爭可能會給 xAI 帶來新的機會。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;在他的發帖中，馬斯克還表示，儘管當前競爭激烈，xAI 將繼續成長，並會在人工智能領域中扮演重要角色。他提到，「在可預見的未來，大型人工智能公司將繼續蓬勃發展，xAI 也是如此。有太多事情要做了!」 這句話反映出他對 xAI 未來發展的信心。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366311</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366311</guid>
      <pubDate>Wed, 13 Aug 2025 02:29:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>崑崙萬維上線 AI 音樂模型 Mureka V7.5</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;崑崙萬維集團&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fq61f8PeEhMzzLXUseQrY9A" target="_blank"&gt;宣佈&lt;/a&gt;正式上線 Mureka V7.5 模型。在為期五天的 SkyWork AI 技術發佈周內，崑崙萬維已推出了 SkyReels-A3、Matrix-Game2.0、Matrix-3D、Skywork UniPic2.0 和 Skywork Deep Research Agent 等模型。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;根據介紹，Mureka V7.5 的發佈是此次技術發佈周的壓軸之作，它在中文歌曲創作方面展現了卓越的能力。該模型不僅在音色和演奏技法上實現了大幅提升，還在咬字和情感表現上取得了顯著進步。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Mureka V7.5 憑藉對中文曲風和元素的深刻理解，能夠精準地傳達中文音樂的藝術神韻和情感色彩。它涵蓋了從傳統民歌、戲曲到經典華語流行金曲以及當代民謠音樂等多種風格，展現了中文音樂的多樣性與文化特性。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;為了進一步提升人聲表現的真實性與情感深度，Mureka V7.5 優化了自動語音識別（ASR）技術。這項技術深入到演唱的微觀層面，能夠精準識別唱詞，並分析真實演唱中的氣息運用、情感起伏和唱法細節。通過智能劃分樂句、確定自然的換氣與停頓位置，Mureka V7.5 顯著提升了生成人聲的段落清晰度與結構真實感。這些細節的捕捉反饋給生成模型後，極大地增強了人聲的自然度、呼吸感以及情感表達的真實性，有效削弱了機械感，使 AI 演繹的歌曲在流暢性上更貼近真人演唱，尤其在處理中文歌曲特有的韻律和氣息要求時表現出色。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="327" src="https://oscimg.oschina.net/oscnet/up-617d5b88f3dd7efb93d359c73f2fbc2725a.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;與此同時，崑崙萬維語音團隊還推出了 MoE-TTS——首個基於 Mixture of Experts（MOE）的角色描述語音合成框架。作為一項面向開放描述場景的研究性工作，MoE-TTS 能夠讓用戶通過自然語言描述精準控制聲音特徵與風格。即使僅使用開源數據，該技術在角色貼合度上也能對標甚至超越閉源商業產品。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;MoE-TTS 的推出有望解決描述性語音合成領域長期存在的難題，例如在面對比喻、類比等複雜修辭時，生成的語音往往偏離用戶預期。該框架結合了預訓練大語言模型 (LLM) 的文本能力和語音專家模塊，通過模態路由確保各模態獨立優化、互不幹擾，實現了「知識零損失」的泛化理解能力。在涵蓋域內與域外描述的雙測試集上，MoE-TTS 在風格表現力貼合度和整體貼合度等聲學控制上表現出色，展現了其在複雜描述匹配度上的優勢。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;MoE-TTS 的發佈不僅為學術界提供了可復現的開放描述 TTS 解決方案，也證明瞭模態解耦加知識凍結遷移的技術路徑在語音合成中的巨大潛力。這一突破有望推動行業從「封閉標籤式控制」走向「自然語言自由控制」的新範式，加速數字人、虛擬助手和沉浸式內容創作的體驗升級。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;目前，MoE-TTS 仍在迭代中，後續計劃將其集成至 Mureka-Speech 平台，作為角色配音的基座模型，為全球開發者和創作者提供開放、高效、可定製的描述性語音合成能力。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366306</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366306</guid>
      <pubDate>Wed, 13 Aug 2025 02:17:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>微軟高管：下一代 Windows 深度整合 AI，實現多模態交互</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微軟 Windows 負責人 Pavan Davuluri 近日在採訪中&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.windowscentral.com%2Fmicrosoft%2Fwindows-11%2Fmicrosoft-teases-windows-12-next-version-os-agentic-ai-ambient-computing-copilot" target="_blank"&gt;闡述&lt;/a&gt;了操作系統的發展願景，強調 AI 將深度融入計算體驗，推動交互方式革新。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0814/193722_X7Xj_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;他表示，未來的 Windows 將更具「環境感」，通過語音、語義理解等多模態技術，實現更自然的操作。例如，用戶可直接通過語音與電腦對話，系統能理解上下文並智能響應。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-86cbf23e01e3a3048f8eb1c6388e1214b14.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;微軟此前發佈的《Windows 2030 Vision》視頻也提到，語音輸入將成為重點，逐步超越傳統鍵鼠操作。&lt;/p&gt; 
&lt;p&gt;此外，Davuluri 透露，AI 智能體的引入將徹底改變 Windows 界面，未來五年可能推出從底層整合 AI 的新系統，如 Windows 12。 儘管語音交互可能需適應期，但微軟認為，結合雲計算與本地計算的無縫體驗，AI 驅動的操作系統將重塑人機交互方式。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366239</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366239</guid>
      <pubDate>Tue, 12 Aug 2025 11:38:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Siri 迄今為止最大的升級計劃：「Linwood」和「Glenwood」亮相</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;蘋果正在開發兩項重要的人工智能計劃，&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fappleinsider.com%2Farticles%2F25%2F08%2F13%2Fsiris-biggest-upgrade-yet-takes-shape-with-linwood-glenwood" target="_blank"&gt;代號為 Linwood 和 Glenwood&lt;/a&gt;，這是一項全面計劃的一部分，旨在讓蘋果在生成人工智能時代變得更加強大和具有競爭力。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0814/192600_Yrmu_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;其中 Linwood 是蘋果自主研發的核心項目，由 Apple Foundation Models 團隊構建大語言模型，全面重構 Siri 的「大腦」。該系統能理解複雜語義、維持多輪對話，並有望首次安全調用用戶個人數據提供個性化建議。&lt;/p&gt; 
&lt;p&gt;蘋果軟件主管克雷格・費德里吉透露，該項目為「端到端的徹底重建」，承認舊架構已落後，升級後的 Siri 將從被動響應轉向主動服務，將集成於 iPhone、iPad 及未來智能家居設備。&lt;/p&gt; 
&lt;p&gt;與之並行的 Glenwood 項目則代表戰略轉向：蘋果打破蘋果長期依賴自研技術的傳統，正測試使用 Anthropic 的 Claude 作為 Siri 核心引擎，並曾評估 ChatGPT 與谷歌 Gemini。&lt;/p&gt; 
&lt;p&gt;該項目由前 Vision Pro 負責人 Mike Rockwell 統一領導，公司尚未決定採用純自研、第三方或混合方案，選擇 Linwood 可強化隱私與系統整合優勢，而引入外部 AI 則可能加速追趕競爭對手。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/366235</link>
      <guid isPermaLink="false">https://www.oschina.net/news/366235</guid>
      <pubDate>Tue, 12 Aug 2025 11:26:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
  </channel>
</rss>
