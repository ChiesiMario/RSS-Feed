<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 繁體中文（台灣）</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已對該 RSS 進行格式化操作：中英字符之間插入空格、使用直角引號、標點符號修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 24 Jun 2025 12:47:18 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>xAI 正在為 Grok 開發高級文件編輯器</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;工程師 Nima Owji 在 X 平台&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.com%2Fnima_owji%2Fstatus%2F1937146584493375900" target="_blank"&gt;發文稱&lt;/a&gt;&lt;/u&gt;，馬斯克旗下 xAI 公司正為 Grok 開發一款支持表格的高級文件編輯器。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;img height="1826" src="https://static.oschina.net/uploads/space/2025/0624/194050_x6IF_2720166.png" width="1940" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;科技媒體 TechCrunch&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2025%2F06%2F23%2Fleak-reveals-grok-might-soon-edit-your-spreadsheets%2F" target="_blank"&gt; &lt;u&gt;認為&lt;/u&gt;&lt;/a&gt;&amp;nbsp;xAI 此舉表明他們正採取措施，通過在生產力工具中整合 AI 輔助功能，與 OpenAI、谷歌和微軟等巨頭展開競爭。OpenAI 和微軟已擁有類似工具，最為相似的是 Gemini Workspace for Sheets、Docs 和 Gmail，可以編輯文檔和表格，並支持用戶在查看或編輯文檔時與 Gemini 對話。&lt;/p&gt; 
&lt;p&gt;目前尚不清楚 xAI 的編輯器除了表格之外還可能支持哪些類型的文件，也不清楚 xAI 是否計劃構建一個完整的生產力套件，以與谷歌 Workspace 和微軟 Microsoft 365 競爭。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/357076/leak-reveals-grok-might-soon-edit-your-spreadsheets</link>
      <guid isPermaLink="false">https://www.oschina.net/news/357076/leak-reveals-grok-might-soon-edit-your-spreadsheets</guid>
      <pubDate>Tue, 24 Jun 2025 11:44:48 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>為什麼所有瀏覽器的的 User-Agent 字符串開頭都是</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;你有沒有注意過，幾乎所有瀏覽器的 User-Agent 字符串開頭都是「Mozilla/」？&lt;/p&gt; 
&lt;p&gt;無論是 Chrome、Safari、還是 IE、Edge，都有「Mozilla」的痕跡。其實，這一切都源自一場「瀏覽器偽裝」的歷史鬧劇。&lt;/p&gt; 
&lt;p&gt;這事得從 90 年代説起，那時互聯網剛起步，第一個流行瀏覽器叫 Mosaic。後來，有人造出一款更強的瀏覽器，號稱「Mosaic Killer」，代號 Mozilla。&lt;/p&gt; 
&lt;p&gt;它上線後，不光能看圖還能加載網頁框架（frames），可謂是當年超前的黑科技。&lt;/p&gt; 
&lt;p&gt;很多網站為了兼容，只願給「Mozilla」發完整版頁面，其他瀏覽器只能看閹割版。&lt;/p&gt; 
&lt;p&gt;這就引發了一個問題：網站開始「嗅探」瀏覽器身份，也就是所謂的 User-Agent 識別。&lt;/p&gt; 
&lt;p&gt;後來，微軟做了 Internet Explorer（IE），本來想正大光明競爭，但一看：網站只對 Mozilla 好，乾脆就讓自己也偽裝成 Mozilla。&lt;/p&gt; 
&lt;p&gt;於是 IE 的 User-Agent 字符串成了這樣：&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Mozilla/1.22 (compatible; MSIE 2.0; Windows 95)&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;就這樣，IE 成功騙過了網站，用戶數也提升了。&lt;/p&gt; 
&lt;p&gt;而這場「偽裝遊戲」一旦開始，就收不住了。&lt;/p&gt; 
&lt;p&gt;1、Firefox 自己引以為傲的 Gecko 渲染引擎，也以 Mozilla 自稱：&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Mozilla/5.0 (...) Gecko/... Firefox/...&lt;/code&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;2、Linux 社區做的瀏覽器，用的是 KHTML 引擎，他們開始模仿 Gecko 寫法：&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Mozilla/5.0 (...) (KHTML, like Gecko)&lt;/code&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;3、蘋果搞了 Safari，用的是 WebKit，而 WebKit 是 KHTML 的一個分支：&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Mozilla/5.0 (...) AppleWebKit/... (KHTML, like Gecko) Safari/...&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;4、到了谷歌 Chrome 時代，它用的也是 WebKit，為了吃到 Safari 的待遇，其 User-Agent 變成了這種奇葩組合：&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Mozilla/5.0 (...) AppleWebKit/... (KHTML, like Gecko) Chrome/... Safari/...&lt;/code&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;到這時，每個瀏覽器都在 User-Agent 裏堆滿了「族譜」：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Chrome 假裝是 Safari&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Safari 假裝是 KHTML&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;KHTML 假裝是 Gecko&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Gecko 假裝是 Mozilla&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;而真正的 Mozilla，其實早就不在了。&lt;/p&gt; 
&lt;p&gt;最後結果就是：User-Agent 成了一串「你是誰並不重要，重要的是你要説自己是 Mozilla」的魔性自報家門。&lt;/p&gt; 
&lt;p&gt;也難怪現在的前端開發者一邊調試一邊吐槽：「我到底在給誰寫頁面啊？」&lt;/p&gt; 
&lt;p&gt;感興趣的小夥伴可以點擊原文：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwebaim.org%2Fblog%2Fuser-agent-string-history%2F" target="_blank"&gt;https://webaim.org/blog/user-agent-string-history/&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/357071/user-agent-string-history</link>
      <guid isPermaLink="false">https://www.oschina.net/news/357071/user-agent-string-history</guid>
      <pubDate>Sun, 11 May 2025 11:07:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>【直播預告】三步上手鴻蒙開發：工具・能力・進階</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;依託「一次開發、多端部署」的核心理念，HarmonyOS 的分佈式能力正在革新萬物互聯時代的應用開發範式——從智能家居到移動辦公，開發者可高效實現跨終端無縫協同。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;然而，許多開發者仍面臨以下問題：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;對鴻蒙核心開放能力（如元服務、分佈式技術、AI 能力）缺乏系統認知；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;對鴻蒙專屬開發工具（ArkUI、DevEco Studio）的操作不熟悉；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;缺少從入門到進階的完整學習路徑，難以快速上手實戰開發。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;為此，7 月 8 日晚，開源中國 OSCHINA 《數智漫談》直播欄目聚焦「工具 · 能力 · 進階」三大模塊，邀請三位鴻蒙生態專家，通過場景化演示與案例拆解，幫助開發者高效掌握鴻蒙應用開發的核心技能，抓住萬物互聯時代的創新機遇。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;直播主題：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;三步上手鴻蒙開發：工具 · 能力 · 進階&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;平台：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;視頻號「OSC 開源社區」&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;時間：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;7 月 8 日（週二） 19:00-20:40&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;img height="495" src="https://oscimg.oschina.net/oscnet/up-0cec6a2cf81222917368850d2b811addc01.jpg" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h4_1"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;🔥 直播核心看點搶先揭祕：&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;&lt;span&gt;&lt;span&gt;分享主題 1：解鎖鴻蒙核心能力，打造跨端智能應用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;&lt;span&gt;&lt;span&gt;鴻蒙操作系統以「分佈式架構」為核心，打破設備邊界，實現跨終端無縫協同與算力共享，通過元服務、多端統一開發、AI 等能力，重塑萬物互聯場景體驗。本次演講將解讀其技術革新內核，並探討在各領域的應用實踐，揭示鴻蒙如何為生態融合與數字化轉型提供新範式。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;&lt;span&gt;&lt;span&gt;分享主題 2：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;DevEco Studio：從零到一搭建鴻蒙應用&lt;/strong&gt;&lt;br&gt; &amp;nbsp;本演講以開發者視角系統性解析鴻蒙應用開發全流程：從 DevEco Studio 環境配置與真機調試技巧，到 ArkUI 聲明式開發範式的核心實踐（狀態管理、組件化開發），並結合跨設備聯調、卡片服務等典型場景，直擊多端適配與調試中的高頻問題，提供華為 HDE 總結的實戰解決方案，助力開發者快速構建高質量鴻蒙應用。&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#000000"&gt;&lt;span&gt;&lt;span&gt;分享主題 3：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;從學習到實戰：鴻蒙開發者成長指南&lt;/strong&gt;&lt;br&gt; 聚焦鴻蒙開發者從入門到精進的成長路徑，解析如何通過高效學習框架與實戰經驗，掌握分佈式開發、多端協同等核心技術，跨越「單一設備」到「場景化創新」的鴻溝。內容涵蓋開發工具鏈使用、典型場景案例拆解及生態機遇洞察，助力開發者在萬物互聯時代搶佔技術先機，實現從技能提升到價值落地的閉環。&lt;/p&gt; 
&lt;span id="OSC_h4_2"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;👨‍💻 重磅嘉賓陣容：&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;姚聖偉，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;華為雲 HCDE、鴻蒙應用認證開發者、微軟 Insider Dev Tour China、.Net Conf China 講師、中科院開源之夏優秀導師、昇騰 CANN 訓練營優秀開發者、騰訊騰源會開源摘星 100 人，天津敏捷社區核心組織者，中國 DevOps 社區理事會成員。現從事信創、電子政務、人工智能、雲開發平台等領域的設計、研發工作。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;張一弛，&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;華為開發者專家（HDE）、湖南長沙虛擬盒子鴻蒙架構師、鴻蒙兔習慣 APP 作者、歡友社交應用，出境元服務架構師。多年移動端開發經驗，專注於 IM 領域，目前主要從事鴻蒙元服務相關工作。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;祝欣蓉，&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;上海杉達學院副教授，華為開發者專家（HDE），HarmonyOS 應用開發高級工程師、華為路由交換高級網絡工程師、華為大數據高級工程師、華為 HDG 上海核心組成員，曾擔任丹陽市委網信辦網絡安全顧問，主要研究方向：鴻蒙移動應用開發，OpenHarmony 軟硬協同開發，企業級項目開發，曾主持橫向課題 1 項，教育部產學合作協同育人項目 2 項，市級重點課程建設 1 門，校級重點課題 4 項，出版教材 3 本。曾任教課程：鴻蒙移動應用開發，HarmonyOS 軟硬協同創新實踐，Java Web 開發技術，數據挖掘技術與應用，組網技術，園區網絡安全技術等課程。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;🚀 立即行動，開啓你的鴻蒙開發進階之旅！&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;📅 直播時間：2025 年 7 月 8 日 (週二) 19:00 - 20:40&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;📍 直播平台：視頻號搜索【OSC 開源社區】&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;👉 現在預約直播，開播不錯過！&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;img height="660" src="https://oscimg.oschina.net/oscnet/up-a2420114f6a13a893712842053fb7fce6ef.jpg" width="400" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;《數智漫談》直播欄目介紹&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;《數智漫談》是開源中國推出的一檔直播欄目，每月 1 期，已推出 22 期。以「深度對話、多元視角、前沿洞察」為核心理念，聚焦 IT 技術、開源治理、行業趨勢與創新實踐，通過輕鬆互動形式搭建開源領域的思想交流平台。區別於傳統技術直播的單向輸出，突出「圍坐暢聊」的互動感和思想交鋒的張力，打造開源領域的「圓桌派」。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;有興趣的朋友，可以聯繫我~&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:center"&gt;&lt;img height="537" src="https://oscimg.oschina.net/oscnet/up-4dd54c1b0b817689ceefa15aa66d79cfae8.png" width="400" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:left"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="margin-left:0.0001pt; margin-right:0px; text-align:justify"&gt;&amp;nbsp;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/3859945/blog/18635616</link>
      <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/18635616</guid>
      <pubDate>Sun, 11 May 2025 10:32:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>雲原生週刊：Argo CD v3.1 正式發佈</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;h2&gt;開源項目推薦&lt;/h2&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkubewall%2Fkubewall" target="_blank"&gt;Kubewall&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Kubewall 是一個輕量級的開源 Kubernetes 儀表盤，支持多集羣管理，主打單二進制部署和瀏覽器訪問，提供實時資源監控、YAML 編輯、拓撲視圖、日誌查看等功能。它使用 Go 與 React 構建，支持通過 Docker、Helm、Homebrew 等多種方式安裝，適合追求簡潔、高效、多環境統一管理體驗的開發者與運維人員。項目活躍迭代，是 Lens、Headlamp 等重量級工具的輕量替代方案。&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkapicorp%2Fkapitan" target="_blank"&gt;Kapitan&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Kapitan 是 Kapicorp 開發的一個開源、以 Python 為基礎，的高級配置管理工具，通過，層級化 inventory（YAML）驅動、多種模板引擎（如 Jinja、Jsonnet、Helm、Kadet）和原生祕密管理，幫助用戶生成 Kubernetes、Terraform、腳本、文檔等多環境、一致且可追蹤的配置，適合平台工程／GitOps 流程，且項目活躍、使用 Apache 2.0 許可。&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgefyrahq%2Fgefyra" target="_blank"&gt;Gefyra&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Gefyra 是一個開源工具，旨在將本地開發環境無縫連接到 Kubernetes 集羣中，實現代碼熱更新和快速迭代。它通過創建加密網絡橋接（基於 WireGuard）、代理流量並複用集羣資源，讓開發者無需每次更改都執行構建、推送和部署流程。支持 Docker、macOS、Windows 和 Linux，可通過命令行或 GUI 操作，廣泛適用於微服務、本地調試、端到端測試等場景，極大提升了雲原生開發效率。&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkube-burner%2Fkube-burner" target="_blank"&gt;Kube-burner&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Kube‑burner 是一個用 Go 語言開發的開源 Kubernetes 性能與擴展測試編排框架，它可以按用戶定義大規模創建、刪除、更新 Kubernetes 資源，同時集成 Prometheus 度量、索引、告警功能，用於評估集羣的性能瓶頸和擴展極限。&lt;/p&gt; 
&lt;h2&gt;文章推薦&lt;/h2&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloudnativenow.com%2Fcontributed-content%2Fadvanced-devops-for-ai-continuous-delivery-of-models-using-jenkins-and-docker%2F" target="_blank"&gt;基於 Jenkins 與 Docker 的 AI 模型持續交付實戰：構建高效 MLOps 流程&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;本文介紹瞭如何通過結合 Jenkins 和 Docker 實現 AI 模型的高級 DevOps（開發運維）流程，重點在於模型的持續交付（CD）。作者詳細講解了從模型訓練、容器化、測試、部署到上線的自動化流程，展示瞭如何構建一個高效、可重複的 MLOps（機器學習運維）管道。通過這種方式，團隊可以更快速、穩定地將 AI 模型部署到生產環境中，加速從開發到業務落地的過程。&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cncf.io%2Fblog%2F2025%2F06%2F09%2Fgitops-in-2025-from-old-school-updates-to-the-modern-way%2F%3Fsessionid%3D-1595116295" target="_blank"&gt;GitOps 2025：從傳統部署到自動化運維新時代&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;在 2025 年，GitOps 已從一種新興理念發展為管理現代應用程序的基礎標準，特別是在 Kubernetes 環境中。它通過將 Git 作為系統配置的唯一真實來源，結合自動化代理持續應用這些配置，實現了自動化、一致性和可追溯性，從而簡化了雲原生軟件運維的複雜性。GitOps 的核心原則包括聲明式配置、Git 作為唯一配置來源、通過 Pull/Merge 請求進行更改以及由代理持續進行環境同步。主要工具如 Argo CD 和 Flux CD 已成為主流選擇，分別適用於需要強大 UI 和模塊化靈活性的場景。&lt;/p&gt; 
&lt;p&gt;儘管 GitOps 的採用帶來了諸多優勢，如更快的發佈、更安全的操作和更容易的回滾，但也面臨着學習曲線陡峭、工具碎片化和文化轉變等挑戰。總體而言，GitOps 正在成為 DevOps 實踐的關鍵組成部分，推動軟件交付的自動化和可靠性。&lt;/p&gt; 
&lt;h2&gt;雲原生動態&lt;/h2&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkubeedge%2Fkubeedge%2Fblob%2Fmaster%2FCHANGELOG%2FCHANGELOG-1.21.md" target="_blank"&gt;KubeEdge 1.21 版本發佈&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;KubeEdge 1.21 版本的更新日誌展示了多個關鍵改進，包括雲端和邊緣組件的功能增強、系統穩定性優化以及 bug 修復。此版本引入了更靈活的 CRI 支持、增強的 EdgeMesh 服務治理能力和更完善的安全機制，同時提升了 DevOps 體驗和兼容性。整體來看，1.21 版本進一步強化了邊緣計算場景下的可擴展性與可靠性。&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.argoproj.io%2Fannouncing-argo-cd-v3-1-f4389bc783c8" target="_blank"&gt;Argo CD v3.1 正式發佈&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;繼 v3.0「輕量但強大」的發佈奠定基礎後，Argo CD v3.1 帶來了 v3 系列的首批重大更新。新版本支持 OCI 鏡像作為應用源，引入 CLI 插件機制、Hydrator 架構更新，以及 UI 的多項可用性提升。除了新功能，v3.1 還修復了大量安全漏洞與已知問題，顯著提升了系統穩定性、擴展性和多集羣支持能力。通過更快的同步性能、更細粒度的權限控制和增強的 SSO 機制，Argo CD v3.1 為 DevOps 團隊打造了更高效、安全、可持續的 Kubernetes 應用交付體驗。&lt;/p&gt; 
&lt;h3&gt;關於 KubeSphere&lt;/h3&gt; 
&lt;p&gt;KubeSphere （&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkubesphere.io%EF%BC%89%E6%98%AF%E5%9C%A8" target="_blank"&gt;https://kubesphere.io）是在&lt;/a&gt; Kubernetes 之上構建的開源容器平台，提供全棧的 IT 自動化運維的能力，簡化企業的 DevOps 工作流。&lt;/p&gt; 
&lt;p&gt;KubeSphere 已被 Aqara 智能家居、本來生活、東方通信、微宏科技、東軟、華雲、新浪、三一重工、華夏銀行、四川航空、國藥集團、微眾銀行、紫金保險、去哪兒網、中通、中國人民銀行、中國銀行、中國人保壽險、中國太平保險、中國移動、中國聯通、中國電信、天翼雲、中移金科、Radore、ZaloPay 等海內外數萬家企業採用。KubeSphere 提供了開發者友好的嚮導式操作界面和豐富的企業級功能，包括 Kubernetes 多雲與多集羣管理、DevOps (CI/CD)、應用生命週期管理、邊緣計算、微服務治理 (Service Mesh)、多租戶管理、可觀測性、存儲與網絡管理、GPU support 等功能，幫助企業快速構建一個強大和功能豐富的容器雲平台。 &amp;gt; 本文由博客一文多發平台 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank"&gt;OpenWrite&lt;/a&gt; 發佈！&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4197945/blog/18635610</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/18635610</guid>
      <pubDate>Sun, 11 May 2025 10:19:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>「開源惠全球·集智創未來」——2025 全球數字經濟大會全球開源創新發展論壇即將召開</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;img height="720" src="https://static.oschina.net/uploads/space/2025/0624/175355_3VoR_2720166.png" width="1279" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;開源是數字時代以開放、共建、共享、共治為主要特徵的新型生產方式，已經成為全球信息技術產業發展的重要協作方式和生態構建形式。為搶抓開源繁榮發展機遇，促進全球數字協作，助力北京市數字友好城市建設，全球開源創新發展論壇（以下簡稱「論壇」）將於 7 月 5 日上午在北京國家會議中心舉行。論壇由全球數字經濟大會組委會主辦，國家工業信息安全發展研究中心、開源中國、CNCF 基金會、國際內源基金會聯合承辦。&lt;/p&gt; 
&lt;p&gt;本次論壇以「開源惠全球·集智創未來」為主題，旨在搭建國際開源交流合作平台，廣泛邀請國內外開源領域知名專家學者，頂尖開源組織、先鋒開源企業、開源社區代表等齊聚一堂，聚焦全球開源技術的最新發展趨勢，探討優質開源社區培育路徑，共商開源區域協作，推動形成開源發展合力，充分釋放數字經濟的放大、疊加、倍增效應，助力全球數字經濟高質量發展。本次論壇有以下亮點：&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#d35400"&gt;&lt;strong&gt;&lt;strong&gt;亮點一：全球協作，國際開源創新聚合力&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;論壇邀請開源中國、CNCF 基金會、國際內源基金會等國內外知名開源組織聯合承辦，廣泛匯聚 Apache 基金會、Linux 基金會、FOSSASIA（亞洲開源）、華為、平凱星辰、螞蟻等開源機構，重磅嘉賓雲集，共同推動國內外開源組織、社區加強互動合作、共享技術成果，共築全球開源發展未來。&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#d35400"&gt;&lt;strong&gt;&lt;strong&gt;亮點二：開源全景，多元視角匯聚發展之聲&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;論壇以「全球視野、本土創新」雙輪驅動，邀請國內外開源代表圍繞 AI 驅動下的開源生態建設、全球開源社區文化與發展前沿動態、全球開源明星項目中的「中國聲音」等領域進行主題演講，分享開源託管平台、開源基金會、國際開源協作、AI 智能體開源、OSPO 等方面的前沿視角與經驗，確保內容專業性高、權威性強。&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#d35400"&gt;&lt;strong&gt;&lt;strong&gt;亮點三：緊扣前沿，重磅發佈 AI 開源北京宣言&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;論壇緊跟行業前沿趨勢，搶抓新一代人工智能發展機遇，深入探索大模型時代開源發展路徑。期間，中心將聯合 Linux 基金會、CNCF 基金會、Apache 基金會、國際內源基金會等國際組織，以及華為、開源中國等國內企業，聯合發起「人工智能開源協作倡議—北京宣言」，展現 AI 力量，攜手推動開源 AI 普惠發展。&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#d35400"&gt;&lt;strong&gt;&lt;strong&gt;亮點四：前瞻佈局，首次發佈開源項目白名單&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;論壇將首次發佈「中國優秀開源項目白名單」，該名單由十餘家「產學研用金」單位聯合構建開源項目成長潛力分析預測模型，研究提出開源項目發展評價指標體系，形成優秀開源項目白名單，指導和促進開源項目健康發展，併為其他項目提供可借鑑範例，進一步推動開源生態繁榮發展。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;論壇議程大致如下：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="772" src="https://static.oschina.net/uploads/space/2025/0624/175503_n4LF_2720166.png" width="720" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;2025 全球數字經濟大會—全球開源創新發展論壇即將啓幕，論壇內容豐富、形式多樣，歡迎掃描以下二維碼報名參會。&lt;/p&gt; 
&lt;p&gt;&lt;img height="300" src="https://static.oschina.net/uploads/space/2025/0624/175514_O8qv_2720166.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;（報名方式：掃描上方二維碼，完成個人信息註冊後，下滑參會日程，選擇&lt;strong&gt;&lt;strong&gt;7 月 5 日上午「全球開源創新發展論壇」&lt;/strong&gt;&lt;/strong&gt;，點擊申請報名，您將收到【收到報名】短信通知，請等待審核。）&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/357056</link>
      <guid isPermaLink="false">https://www.oschina.net/news/357056</guid>
      <pubDate>Sun, 11 May 2025 09:56:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>開源圖像編輯器 GIMP 3.1.2 發佈，邁向 GIMP 3.2 的首個開發版本</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;GIMP 項目團隊發佈了 GIMP 3.1.2，這是開源、免費、跨平台的圖像編輯軟件 GIMP 3.2 的首個開發版本。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-c418681e24ceaa99f194182462ec584f18b.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;以下是該版本的一些主要更新內容：&lt;/p&gt; 
&lt;h3&gt;界面優化&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;個性化選項擴展&lt;/strong&gt; ：用戶可根據自身喜好設置畫筆、字體和調色板的主題顏色。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;文本工具增強&lt;/strong&gt; ：新增控制文本輪廓方向的功能，並自動匹配 Linux 和 Windows 系統主題，提升視覺一致性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;其他細節優化&lt;/strong&gt; ：如改進了前景選擇算法，增加了 「合併濾鏡」 複選框，以及對 Palette 可停靠窗口的優化，在刪除前一個色塊後自動選擇下一個色塊，還支持 「鎖定像素」 功能，以便在撤銷歷史中生成撤銷步驟。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;繪畫模式更新&lt;/h3&gt; 
&lt;p&gt;新增了 Overwrite 繪畫混合模式，允許用戶直接替換畫筆覆蓋區域的像素，提升了繪製時的操作靈活性。&lt;/p&gt; 
&lt;h3&gt;支持格式拓展&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;圖像格式&lt;/strong&gt; ：支持使用 ART 作為 Camera Raw 加載器，可導入 APNG 動畫、加載多層 OpenEXR 圖像，以及導入和導出 JPEG 2000 圖像，還支持加載和導出 Sony Playstation 1 TIM 紋理和圖像。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Photoshop 相關格式&lt;/strong&gt; ：新增導出至 Krita 的.kpl 調色板格式選項，支持導入 Photoshop 圖案，以及使用 Photoshop 曲線和色階預設，並初步支持導出 Photoshop 大型格式（PSB）文件。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;其他小眾格式&lt;/strong&gt; ：支持 Nokia 歷史性的黑白 Over-the-Air 位圖格式，支持導入被稱為 Jeff 的圖像格式（.jif）的 GIF 變體，以及導入高級視頻編碼（AVCI）靜態圖像。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;詳情查看：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gimp.org%2Fnews%2F2025%2F06%2F23%2Fgimp-3-1-2-released%2F" target="_blank"&gt;https://www.gimp.org/news/2025/06/23/gimp-3-1-2-released/&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/357015/gimp-3-1-2-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/357015/gimp-3-1-2-released</guid>
      <pubDate>Sun, 11 May 2025 07:47:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>百度日誌中台前端重構實踐</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;日誌中台是百度內部針對打點數據的全生命週期管理平台，作為公司日誌數據的唯一入口，承擔以下核心職能：1.功能覆蓋：提供從數據採集、傳輸、存儲到查詢分析的一站式服務，支持產品運營分析、研發性能監控、運維管理等多元場景。2.業務賦能：通過標準化流程實現用戶行為日誌的埋點申請、審批及退場管理，助力 APP 端、服務端等業務線挖掘數據價值。3.生態協同：與大數據平台、推薦中台、性能平台深度聯動，避免重複建設，提升資源利用率，強化業務中台能力。&lt;/p&gt; 
&lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
&lt;h1&gt;01 項目背景&lt;/h1&gt; 
&lt;p&gt;2020 年初啓動的日誌中台前端項目，隨着業務發展逐漸暴露出嚴重問題。整個前端項目技術負債多，有 500 多個文件，共 11 萬多行源碼。項目已經變得老舊而臃腫。面臨線上 bug 頻發、排查問題效率低下等各種問題，陳舊的技術棧與低效的流程也制約了團隊的生產力。因此需進行全面全面重構，通過基於業務導向的架構優化、開發測試流程規範化，從而提升前端開發效率，使項目具備長期穩健發展的技術基礎。本文將重點介紹我在重構項目過程中的一些實踐經驗。&lt;/p&gt; 
&lt;span id="OSC_h2_2"&gt;&lt;/span&gt; 
&lt;h2&gt;02 前端項目面臨的問題&lt;/h2&gt; 
&lt;p&gt;先介紹下日誌中台前端項目的基本情況&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;核心框架：Vue 2.6 + Vuex 3.1.1 + VueRouter 3.0.6&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;UI 組件庫：ElementUI 2.15.13&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;構建工具：@vue/cli-service 3.11.0（基於 Webpack 4）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;部署平台：測試環境（FIS3）、生產環境（Tower）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下面我將從 4 個維度來分析下前端項目所面臨的各種問題。&lt;/p&gt; 
&lt;span id="OSC_h2_3"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.1 代碼質量&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;由於項目沒有接入代碼格式化 prettier 和，代碼規範檢查 eslint，導致項目的代碼質量堪憂，各種各樣的代碼風格並存。在開發需求過程中，各自的編碼風格不一致，維護時需額外適應時間，甚至由此引發線上問題。&lt;/p&gt; 
&lt;span id="OSC_h2_4"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.2 基礎建設&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 代碼臃腫，維護困難&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;全項目 500+源文件中，30+文件超 1000 行，5+文件超 2000 行，最大文件達 5000 行。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;巨型文件導致：&lt;/p&gt; &lt;p&gt;IDE 卡頓（Mac 開發時頻繁卡住）。&lt;/p&gt; &lt;p&gt;熱更新失效（&amp;gt;2s 延遲，大文件需手動刷新瀏覽器）。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 技術棧陳舊&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;仍使用已停止維護的&lt;code&gt;vue-cli&lt;/code&gt;（Webpack 4 時代工具鏈），與現代構建工具（Vite、Webpack 5）存在代差。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_5"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.3 構建和部署&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;測試環境&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;測試環境的部署採用的是&lt;/strong&gt;&lt;/strong&gt; &lt;strong&gt;&lt;strong&gt;fis3&lt;/strong&gt;&lt;/strong&gt;，這是百度 FE 團隊早期自研的集構建、部署於一身前端構建工具，日誌中台項目使用其部署測試環境的功能。具體流程就是在開發者本地執行打包操作，然後將打包產物通過 fix3 推送到後端的服務器上去，替換掉之前的打包產物，從而實現部署新版本。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;這種方式存在諸多問題：&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;本地構建依賴不一致，易引發環境差異問題。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;無 CDN 緩存，靜態資源直推後端服務器。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;無版本管理，存在代碼覆蓋風險。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;FIS3 已停止維護，社區無支持。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;本質問題&lt;/strong&gt;&lt;/strong&gt;：前後端未完全分離，違背當前主流協作模式。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;生產環境&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;生產環境的部署則採用的是 Tower 平台，這是百度內部的線上部署平台，通過平台的形式將 master 分支的代碼在服務器上編譯構建，將打包後的產物推送到線上環境對應的服務器上，從而實現完整的上線流程。這種上線方式同樣存在諸多不足：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;上線耗時長達 30 分鐘，無增量構建能力。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;多服務器部署時存在「漂移現象」（請求路由不一致）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;操作流程複雜，平台限制多（如回滾困難）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;仍缺失 CDN 加速，影響頁面加載性能。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_6"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.4 優質組件&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;在 Vue 技術棧中，模塊和組件的模糊概念，導致很多開發者無法區分其區別。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 組件與模塊概念混淆&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;src/components&lt;/code&gt;目錄下堆積 40+文件夾，但 90% 為一次性業務模塊（如 5 個重複封裝的 Table 組件），缺乏真正的複用價值。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 基礎建設缺失&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;無通用業務組件庫，開發依賴 Element UI 原始組件。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;高頻邏輯（如表單校驗、數據請求）需重複實現，通過「複製粘貼」開發，導致代碼冗餘和一致性風險。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h1_7"&gt;&lt;/span&gt; 
&lt;h1&gt;03 全面重構拆分&lt;/h1&gt; 
&lt;p&gt;下面是針對以上項目中的各個痛點的重構具體手段。&lt;/p&gt; 
&lt;span id="OSC_h2_8"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.1 接入工程化&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;前端項目若缺乏統一的代碼規範和質量控制，隨着業務增長，代碼可維護性會急劇下降，最終導致開發效率低下、線上問題頻發。因此，引入業界成熟的工程化方案是提升代碼質量的關鍵。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-44faf28db07e05e98073becb5657960b557.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h4_9"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;strong&gt;工程化改造步驟&lt;/strong&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 清理冗餘配置&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;移除項目中無用的、過時的配置（如廢棄的&lt;code&gt;.babelrc&lt;/code&gt;、冗餘的&lt;code&gt;webpack&lt;/code&gt;配置等），減少幹擾項。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 統一基礎配置文件&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;在項目根目錄下添加必要的配置文件，確保團隊開發環境一致：&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;.vscode/settings.json&lt;/code&gt;（統一 VSCode 編輯器配置）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;.editorconfig&lt;/code&gt;（統一縮進、換行等基礎格式）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;.npmrc&lt;/code&gt;（設置為百度 npm 鏡像）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;.browserslistrc&lt;/code&gt;（明確目標瀏覽器兼容範圍）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3. 接入代碼規範工具&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;Prettier&lt;/strong&gt;&lt;/strong&gt;：自動格式化代碼，統一風格（如縮進、引號、分號等）。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;ESLint&lt;/strong&gt;&lt;/strong&gt;：檢查 JavaScript/Vue 代碼質量，避免常見錯誤。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;Stylelint&lt;/strong&gt;&lt;/strong&gt;（可選）：規範 CSS/Less 代碼風格。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;4. 優化開發體驗&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;推薦安裝必要的 VSCode 插件（如 ESLint、Prettier、Volar 等），提升開發效率。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;5. 提交時增量強制校驗（Git Hooks）&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;接入&lt;code&gt;husky&lt;/code&gt;+&lt;code&gt;lint-staged&lt;/code&gt;，在&lt;code&gt;git commit&lt;/code&gt;時自動執行代碼檢查，阻止不合規代碼提交。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;strong&gt;配置參考&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;VSCode 統一配置&lt;/p&gt; &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fshuoshubao%2Fbg00go%2Fwc87bknptk3lomed%23NStKP" target="_blank"&gt;https://www.yuque.com/shuoshubao/bg00go/wc87bknptk3lomed#NStKP&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;工程化配置方案 https://www.yuque.com/shuoshubao/bg00go/wc87bknptk3lomed#SJTr2&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;span id="OSC_h4_10"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;strong&gt;歷史代碼修復策略&lt;/strong&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;原則：「自動修復優先，手動修復補充」，避免無限制添加&lt;code&gt;eslint-disable&lt;/code&gt;或&lt;code&gt;ignore&lt;/code&gt;規則，導致規範形同虛設。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;具體執行步驟&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 自動格式化（Prettier）&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. ESLint 自動修復&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 分析剩餘問題&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;使用&lt;code&gt;eslint-formatter-html&lt;/code&gt;生成報告，評估剩餘問題。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;調整 ESLint 規則（如放寬部分歷史代碼限制），拆解為多個小任務手動修復。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;4. 迴歸測試&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;聯合熟悉業務的同學進行全量測試，確保修復過程不影響系統功能。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h4_11"&gt;&lt;/span&gt; 
&lt;h4&gt;&lt;strong&gt;&lt;strong&gt;效果驗證&lt;/strong&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;代碼風格統一&lt;/strong&gt;&lt;/strong&gt;：所有新提交的代碼均符合規範，減少風格爭議。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;錯誤率下降&lt;/strong&gt;&lt;/strong&gt;：低級語法錯誤、邊界條件導致的 JS 報錯大幅減少。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;開發體驗提升&lt;/strong&gt;&lt;/strong&gt;：IDE 卡頓減少（格式化後代碼更簡潔），熱更新效率提高。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_12"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.2 升級基建&lt;/strong&gt;&lt;/h2&gt; 
&lt;span id="OSC_h3_13"&gt;&lt;/span&gt; 
&lt;h3&gt;3.2.1 源碼優化與依賴治理&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;問題現狀&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;p&gt;項目存在大量技術債務，包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;冗餘資源（未壓縮圖片約 2M）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;無效依賴（22 個未使用的 npm 包）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;混合模塊規範（require/import 混用）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;廢棄技術棧（如已停止維護的 iView）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;優化措施&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 資源優化&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;使用基於 Tinypng 封裝的工具批量壓縮圖片，體積減少 65%&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;清理已下架頁面的遺留代碼（約 15 個路由）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 依賴治理&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;移除 22 個無用依賴&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;統一使用 ES Module 規範（手動替換 require 為 import）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 技術棧升級&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;替換老舊組件庫：vue-json-diff、vue-code-diff、vue-codemirror 替換為 monaco-editor&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_14"&gt;&lt;/span&gt; 
&lt;h3&gt;3.2.2 &lt;strong&gt;&lt;strong&gt;構建相關&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;相對於以往的 Webpack 或者 Vue CLI，存在開發服務器啓動慢（平均 45 秒）、熱更新延遲高（2.5 秒）、構建流程複雜（需 Babel 轉譯 ES5）。&lt;/p&gt; 
&lt;p&gt;Vite 配置詳見：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fshuoshubao%2Fbg00go%2Fwc87bknptk3lomed%23wyx0p" target="_blank"&gt;https://www.yuque.com/shuoshubao/bg00go/wc87bknptk3lomed#wyx0p&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;接入 Vite 後，低配置電腦同學開發時的平均熱更新時間由 2.5 秒縮短到 100 毫秒。在單個需求完成耗時方面，由之前的 4.2 人天縮減到 3.4 人天，綜合人效提高&lt;strong&gt;&lt;strong&gt;19%&lt;/strong&gt;&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;另一方面，由於 Vue CLI 是基於 babel 將 esnext 代碼轉成 es5，而 Vite 基於 esbuild 不需要進行降級編譯。在將 Vite 的配置 build.target 設置為 ['chrome100'] 後，甚至連非常新的 esnext 語法糖都不需要轉換，瀏覽器直接可以使用前端的源碼，極大的利用了 esnext 帶來的開發便利，而不需要關注 Babel 的版本以及各種依賴包和複雜的配置。&lt;/p&gt; 
&lt;span id="OSC_h3_15"&gt;&lt;/span&gt; 
&lt;h3&gt;3.2.3 &lt;strong&gt;&lt;strong&gt;部署相關&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;百度內部主流的部署平台是 &lt;strong&gt;&lt;strong&gt;Fcnap&lt;/strong&gt;&lt;/strong&gt;。這是一個類似 Vercel 的前端一站式部署平台，基於 git 分支，只要檢測到分支變動，就會觸發自動構建和部署。&lt;/p&gt; 
&lt;p&gt;只需配置好各個測試環境以及生產環境的基本信息，後續在需要開發中，只需要將分支和測試環境關聯起來，就可以達到隨時提交代碼隨時部署的效果；上線過程更是絲滑，只需要將代碼合到 master 分支，就會自動上線。&lt;/p&gt; 
&lt;p&gt;將 fis3 以及 Tower 遷移到 Fcnap 後有如下優勢：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;測試和生成環境使用一套部署邏輯&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;上線部署耗時由 30 分鐘縮減至 2 分鐘&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;提供 cdn 功能，每次上線後增量更新的靜態資源只有 500kb&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;上線期間訪問系統不會出現白屏現象&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;上線過程對用戶無任何影響&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_16"&gt;&lt;/span&gt; 
&lt;h3&gt;3.2.4 接口調試&lt;/h3&gt; 
&lt;span id="OSC_h4_17"&gt;&lt;/span&gt; 
&lt;h4&gt;傳統開發模式的痛點&lt;/h4&gt; 
&lt;p&gt;在傳統前後端協作中，存在典型的"接口依賴症"：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 開發阻塞&lt;/strong&gt;&lt;/strong&gt;：前端必須等待後端接口 Ready 才能開始調試&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 效率低下&lt;/strong&gt;&lt;/strong&gt;：聯調階段頻繁出現接口變更，導致重複返工&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 數據不可控&lt;/strong&gt;&lt;/strong&gt;：依賴真實測試環境數據，難以覆蓋邊界場景&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;數據表明：在接口未就緒階段，前端開發效率會下降 60% 以上&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;span id="OSC_h4_18"&gt;&lt;/span&gt; 
&lt;h4&gt;真正的"前後端分離"實踐&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;核心原則&lt;/strong&gt;&lt;/strong&gt;：開發階段解耦，聯調階段對接&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 規範先行&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;後端通過 YAPI 等平台提供完整的接口文檔&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;包含：請求方法、參數結構、響應體示例、狀態碼定義&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. Mock 數據要求&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;真實業務數據（非簡單根據接口文檔生成各種隨機數據）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;可自定義異常場景（404， 502 等真實場景還原）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持動態響應（根據參數返回不同數據）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;針對這個開發環節，我們也基於 Vite 實現了一個非常好用的插件：vite-plugin-mock，用於提升開發效率。整體的設計如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-3eb5ab12f6a4aae3eff18b059102be05cc9.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;相比於傳統的 mock 方案，vite-plugin-mock 在開發體驗、數據維護上有更好的開發體驗。&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;特性&lt;/th&gt; 
   &lt;th&gt;傳統 Mock 方案&lt;/th&gt; 
   &lt;th&gt;vite-plugin-mock&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;數據真實性&lt;/td&gt; 
   &lt;td&gt;隨機生成，不可用&lt;/td&gt; 
   &lt;td&gt;可在真實接口數據上任意修改&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;開發體驗&lt;/td&gt; 
   &lt;td&gt;需要啓動 Mock 服務&lt;/td&gt; 
   &lt;td&gt;配置簡單，可隨時修改數據&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;聯調切換&lt;/td&gt; 
   &lt;td&gt;手動修改請求地址&lt;/td&gt; 
   &lt;td&gt;自動代理無縫切換&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;數據維護&lt;/td&gt; 
   &lt;td&gt;獨立維護 Mock 數據&lt;/td&gt; 
   &lt;td&gt;數據存放在本地，每個人都可維護單獨的數據&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;span id="OSC_h2_19"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.3 &lt;strong&gt;構建體積優化&lt;/strong&gt;&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;這一部分主要從以下三個技術方案着手優化，再配合其他人工優化手段，打包體積由開始的 14M 優化到 1.8M，接入 cdn 功能後，則僅有 500kb。&lt;/p&gt; 
&lt;span id="OSC_h3_20"&gt;&lt;/span&gt; 
&lt;h3&gt;3.3.1 element-ui&lt;/h3&gt; 
&lt;p&gt;fork element-ui 源碼, 採用 rollup 進行打包，優化部分源碼，修復部分 bug，重新發包為 @baidu-log/element-ui&lt;/p&gt; 
&lt;p&gt;這一步驟，js 體積從 1.2M 優化到 500kb。並結合下面 externals 功能，進一步使用 cdn 功能緩存這部分文件體積。&lt;/p&gt; 
&lt;span id="OSC_h3_21"&gt;&lt;/span&gt; 
&lt;h3&gt;3.3.2 引入 externals 功能&lt;/h3&gt; 
&lt;p&gt;將基礎包通過 cdn 的形式在 index.html 模板中引入其 umd 格式的文件，從而避免打包這部分內容。這部分會用到 cdn 的緩存功能，會節約掉大約 2M 的體積。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;vite-plugin-externals&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;這個是開源的 vite 插件，配置也比較簡單，詳見配置：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fshuoshubao%2Fbg00go%2Fwc87bknptk3lomed%23LiR2X" target="_blank"&gt;https://www.yuque.com/shuoshubao/bg00go/wc87bknptk3lomed#LiR2X&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;vite-plugin-assets&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;這個是為了配合上面 vite-plugin-externals 插件，將對應的 externals 的 npm 包對應的 umd 文件插入到模板中，代碼詳見：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fshuoshubao%2Fbg00go%2Fwc87bknptk3lomed%23xts88" target="_blank"&gt;https://www.yuque.com/shuoshubao/bg00go/wc87bknptk3lomed#xts88&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;為什麼不直接寫在 index.html 裏呢？因為像 vue 和 react 這樣的框架，在開發時都提供了對應的開發調試工具：dev-tools。而使用 dev-tools 則需要提供對應的 &lt;strong&gt;&lt;strong&gt;dist/vue.js&lt;/strong&gt;&lt;/strong&gt;，而 react 對應的則是 &lt;strong&gt;&lt;strong&gt;react.development.js&lt;/strong&gt;&lt;/strong&gt;。&lt;/p&gt; 
&lt;span id="OSC_h3_22"&gt;&lt;/span&gt; 
&lt;h3&gt;3.3.3 大包的特殊處理&lt;/h3&gt; 
&lt;p&gt;1. monaco-editor&lt;/p&gt; 
&lt;p&gt;項目中用到了 monaco-editor 這個編輯器組件，直接打包將會非常大，有 10M 以上的體積。根據官方提供的方案即可進行如下封裝，其中 cdn 地址由百度的 npm 鏡像服務提供支持。&lt;/p&gt; 
&lt;p&gt;代碼詳見：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fshuoshubao%2Fbg00go%2Fwc87bknptk3lomed%23gozcq" target="_blank"&gt;https://www.yuque.com/shuoshubao/bg00go/wc87bknptk3lomed#gozcq&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;2. xlsx, fabric 等&lt;/p&gt; 
&lt;p&gt;在項目中用到了 xlsx, fabric, markdown-it, echarts, &lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdraw.io" target="_blank"&gt;draw.io&lt;/a&gt; 這幾個體積很大的包，但又不屬於很基礎的包，只有少部分頁面的某個功能點才會用到。針對這些包採用從 cdn 異步加載其 umd 包的形式來引入，而不是通過 import npm 包的形式。&lt;/p&gt; 
&lt;p&gt;代碼詳見：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fshuoshubao%2Fbg00go%2Fwc87bknptk3lomed%23rEBee" target="_blank"&gt;https://www.yuque.com/shuoshubao/bg00go/wc87bknptk3lomed#rEBee&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;以上兩種優化方案，與常見的動態引入方案（dynamic import）是有很大區別的，dynamic import 是通過編譯工具將對應的 npm 包打包成一個獨立的 chunk，然後在使用的時候再通過 loadScript 方式引入。這種問題在於文件的緩存，一是 chunk 可能會變，二是像 Vercel 這種平台，每次發佈都是一個全新的 s3 bucket，上線後緩存功能也就失效了。而上述這種方案，則利用 npm 鏡像服務，每次都訪問固定的 cdn 地址，也就達到了 cdn 的緩存目的了。&lt;/p&gt; 
&lt;span id="OSC_h2_23"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.4 建設組件庫&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;鑑於項目沒有優質組件的背景，從零到一搭建了組件庫，組件庫主要包含以下內容：&lt;/p&gt; 
&lt;p&gt;1. 基於 Vuepress 建設高質量組件庫文檔&lt;/p&gt; 
&lt;p&gt;2. 遷移 element-ui 文檔，並修復其中大量劣質示例代碼&lt;/p&gt; 
&lt;p&gt;3. 採用 Vitest 編寫工具方法的測試用例&lt;/p&gt; 
&lt;p&gt;4. 提供 9 個高頻優質通用組件，10 個業務組件&lt;/p&gt; 
&lt;p&gt;組件庫文檔：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogsfe.vercel.app%2F" target="_blank"&gt;https://logsfe.vercel.app/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;文檔分為以下幾大模塊&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;優質組件：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogsfe.vercel.app%2Fcomponents%2FTable%2F" target="_blank"&gt;https://logsfe.vercel.app/components/Table/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;組件庫裏的方法：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogsfe.vercel.app%2Futils.html" target="_blank"&gt;https://logsfe.vercel.app/utils.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;@nbfe/tools 工具庫方法： &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogsfe.vercel.app%2Ftools%2Fdate.html" target="_blank"&gt;https://logsfe.vercel.app/tools/date.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ElementUI 文檔：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogsfe.vercel.app%2Felement%2Ficon.html" target="_blank"&gt;https://logsfe.vercel.app/element/icon.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;前端定製的開發規範：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogsfe.vercel.app%2Fcontribute%2F" target="_blank"&gt;https://logsfe.vercel.app/contribute/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;實際效果：組件庫中的組件在項目中目前已被使用 240 次，用戶使用體驗良好。&lt;/p&gt; 
&lt;span id="OSC_h3_24"&gt;&lt;/span&gt; 
&lt;h3&gt;3.4.1 通用組件&lt;/h3&gt; 
&lt;p&gt;基於大量的 B 端系統開發經驗，提煉出配置化表格和配置化表單組件，滿足項目中 90% 的開發場景，通過重構部分頁面後比較分析，在寫對應模塊時，能減少 40% 的代碼。&lt;/p&gt; 
&lt;p&gt;通用組件均與業務解耦，設計優雅的 api，並提供大量示例。組件庫裏只提供少量的優質組件，嚴格把控每一行提交的代碼，併為組件中的工具函數提供符合 JSDoc-style 規範的註釋，且通過 Vitest 來編寫單元測試。&lt;/p&gt; 
&lt;span id="OSC_h3_25"&gt;&lt;/span&gt; 
&lt;h3&gt;3.4.2 element-ui 文檔集成&lt;/h3&gt; 
&lt;p&gt;在實際工作中，發現 element-ui 文檔存在很多問題且早已不維護。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;主題與日誌中台不符，不利於查看&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;組件默認 size 過大，一頁都看不了多少示例&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;右側沒有 toc 功能，不方便快速定位&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;示例很多寫法不優雅，以及很多冗餘代碼被人機的複製到了項目中&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在線調試示例採用的是 codepen 平台，這個平台很慢而且經常掛了&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;基於以上各種問題，將 element-ui 官方的示例 fork 到組件庫中，使用和日誌中台一樣的主題，並修復上述各種問題。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-448a51bef83543cbfa7e0b5a4588348e6b3.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;並使用純前端來實現了一個完全可用的 codepen 組件使用示例功能。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-10997cf6d1b599250b533a1a538cfa80d94.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_26"&gt;&lt;/span&gt; 
&lt;h3&gt;3.4.3 通用工具庫&lt;/h3&gt; 
&lt;p&gt;基於 B 端系統抽象的實用工具方法集合。在組件庫中提供優質的説明文檔和使用示例。這個已經發布到 npm 上，並在多個公司和團隊使用。&lt;/p&gt; 
&lt;p&gt;包括日期處理、數據處理、接口數據格式化、針對 element-ui 的一些實用封裝。目前已在項目中被 93 個文件使用 150 次。&lt;/p&gt; 
&lt;p&gt;項目地址：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40nbfe%2Ftools" target="_blank"&gt;https://www.npmjs.com/package/@nbfe/tools&lt;/a&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_27"&gt;&lt;/span&gt; 
&lt;h1&gt;04 總結與展望&lt;/h1&gt; 
&lt;p&gt;在頻繁的需求迭代過程中，項目遲早會變成臃腫老舊的樣子。當開發體驗、開發速度、代碼質量、項目可維護性、聯調測試體驗、線上質量等全方位令人舉步維艱的時候，就該發起大規模的全面重構了。對每一項重構技術需要深刻掌握，才能掌握重構的深度和保證重構後的項目質量。另外，還定製了很多開發規範和最佳實踐指導，但項目中仍存在大量不符合規範的地方，將在未來繼續進行全量修復，直到將一個老舊的項目重構到更接近現代化前端項目的程度。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4939618/blog/18635524</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/18635524</guid>
      <pubDate>Sun, 11 May 2025 07:41:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>curl 之父發文介紹 OpenSSL 分支家族</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;curl 之父近日發表文章&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdaniel.haxx.se%2Fblog%2F2025%2F06%2F23%2Fa-family-of-forks%2F" target="_blank"&gt;介紹&lt;/a&gt;&lt;/u&gt; OpenSSL 分支家族，展示了它們的差異、相似之處，以及支持它們所需的一些見解。&lt;/p&gt; 
&lt;p&gt;譯文如下：&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;curl 支持使用 11 種不同的 TLS 庫進行編譯。其中六個庫是 OpenSSL 或其分支。讓我向你展示它們的差異、相似之處，以及支持它們所需的一些見解。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;SSLeay&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;這一切都始於 SSLeay。這是我發現的第一個 SSL 庫，我們使用這個庫在 1998 年春天為 curl 添加了第一個 HTTPS 支持。顯然，SSLeay 項目早在 1995 年就已經啓動了。&lt;/p&gt; 
&lt;p&gt;那是一個我們還只支持 SSL 的年代；TLS 會在之後才出現。&lt;/p&gt; 
&lt;p&gt;OpenSSL 一直擁有一個古怪、不一致且極其龐大的 API 集（其中一大部分是從 SSLeay 繼承而來的），這進一步被稀疏的文檔所複雜化，這些文檔留給用戶去依靠自己的想象力和技能去查閲源代碼，以獲取最後的細節解答（即使在 2025 年今天也是如此）。在 curl 中，我們經常收到關於如何使用這個庫的偶爾問題報告，即使已經過了幾十年。 presumably，這同樣適用於所有 OpenSSL 用戶。&lt;/p&gt; 
&lt;p&gt;OpenSSL 項目經常受到批評，認為他們在幾年前升級到版本 3 之後，在性能方面有所疏忽。他們也一直進展緩慢或不願採用新的 TLS 技術，例如 QUIC 和 ECH。&lt;/p&gt; 
&lt;p&gt;儘管如此，OpenSSL 已經成為一種主導的 TLS 庫，尤其是在開源領域。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;LibreSSL&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;回到 Heartbleed 事件時期，LibreSSL 分叉出來併成為獨立的項目。他們刪除了他們認為不屬於庫中的功能，創建了自己的 TLS 庫 API。幾年後，蘋果在 macOS 上使用 LibreSSL 提供 curl。他們有一些本地修補，使它&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdaniel.haxx.se%2Fblog%2F2024%2F03%2F08%2Fthe-apple-curl-security-incident-12604%2F" target="_blank"&gt;行為與其他不同&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;LibreSSL 在 QUIC 的支持上落後，不支持 SSLKEYLOGFILE、ECH，而且如今在實現新功能方面似乎比 OpenSSL 更慢。&lt;/p&gt; 
&lt;p&gt;curl 自從創建以來就與 LibreSSL 完美配合。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;BoringSSL&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;在 Heartbleed 事件時期由 Google 分叉出來。&lt;em&gt;Google 為 Google 做的&lt;/em&gt;，他們沒有公開發布過，清理了很多原型和變量類型，並在 QUIC API 推動中處於領先地位。總體而言，大多數新的 TLS 發明都已在 BoringSSL 中實現和支持，比其他分叉更早。&lt;/p&gt; 
&lt;p&gt;Google 在 Android 的其他地方也使用這個。&lt;/p&gt; 
&lt;p&gt;curl 從創建以來就與 BoringSSL 完美配合。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;AmiSSL&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;一個為使 OpenSSL 能夠在 AmigaOS 上正確編譯和運行而製作的 OpenSSL 分支或變種。我對它瞭解不多，但在這裏包含它是為了完整性。它似乎基本上是為 Amiga 系統移植的 OpenSSL。&lt;/p&gt; 
&lt;p&gt;當為 AmigaOS 編譯時，curl 也能與 AmiSSL 兼容。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;QuicTLS&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;由於 OpenSSL 延遲響應並拒絕提供 QUIC API，其他分支在 2020 年初期（我尚未看到有人解釋原因）採取了行動。微軟和 Akamai 分支了 OpenSSL，產生了 &lt;em&gt;QuicTLS&lt;/em&gt;，此後它試圖成為一個 &lt;em&gt;輕量級&lt;/em&gt; 的分支，主要只是在與 BoringSSL 和 LibreSSL 支持相同風格的基礎上添加 QUIC API。&lt;em&gt;輕量級&lt;/em&gt; 的含義是它們密切跟蹤上游開發，並且除了 QUIC API 之外，沒有打算在其他方面偏離。&lt;/p&gt; 
&lt;p&gt;在 OpenSSL 3.5 中，他們終於提供了一個與 fork（包括 QuicTLS）提供的 QUIC API 不同的 QUIC API。我認為這促使 QuicTLS 重新考慮其未來的發展方向，但我們仍在等待確切的進展。&lt;/p&gt; 
&lt;p&gt;curl 自從創建以來就與 QuicTLS 完美配合。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;AWS-LC&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;這是由亞馬遜維護的一個 BoringSSL 分支。與 BoringSSL 不同的是，他們確實進行了實際的（頻繁的）發佈，因此看起來像一個項目，即使是非亞馬遜用戶也可以實際使用和依賴——儘管他們存在的目的是 _維護一個與 AWS 使用的軟件和應用程序兼容的安全 libcrypto _。令人驚訝的是，他們維護的不僅僅是「僅僅」 libcrypto。&lt;/p&gt; 
&lt;p&gt;這個分支最近顯示出大量的活動，甚至在覈心部分也是如此。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.haproxy.com%2Fblog%2Fstate-of-ssl-stacks" target="_blank"&gt;2025 年 5 月由 HAProxy 團隊進行的基準測試&lt;/a&gt; 表明，AWS-LC 顯著優於 OpenSSL。&lt;/p&gt; 
&lt;p&gt;AWS-LC 提供的 API 與 BoringSSL 的 API 並不完全相同。&lt;/p&gt; 
&lt;p&gt;curl 與 AWS-LC 從 2023 年初開始就配合得非常好。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;家族樹&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;img alt="" src="https://static.oschina.net/uploads/img/202506/24145235_ALUZ.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;OpenSSL 分支家族樹&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;OpenSSL 分支家族現狀&lt;/h2&gt; 
&lt;p&gt;這六個不同的分支各自有其特定的特性、API 和功能，這些在不同版本中也會發生變化。目前我們仍然支持這六個分支，因為人們似乎仍在使用它們，而且維護起來是可行的。&lt;/p&gt; 
&lt;p&gt;我們使用相同的 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl%2Fblob%2Fmaster%2Flib%2Fvtls%2Fopenssl.c" target="_blank"&gt;單個源代碼文件&lt;/a&gt; 支持所有這些分支，並通過不斷增長的 #ifdef 邏輯來實現。我們通過在 CI 中使用這些分支進行構建驗證，儘管只使用了一小部分最近的版本。&lt;/p&gt; 
&lt;p&gt;隨着時間的推移，這些分支似乎正在逐漸彼此分離。我認為這還不構成一個問題，但我們當然在監控這種情況，可能在某個時候需要進行一些內部重構以適應這種變化。&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;未來&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;我無法預見會發生什麼。如果歷史是一堂課，我們似乎更傾向於走向更多的分支，而不是更少的分支。但當然，每一位閲讀這篇博客文章的讀者現在都會思考，所有這些分支所耗費的重複努力以及由此帶來的隱含低效性到底有多少。這不僅適用於這些庫本身，也適用於像 curl 這樣的用戶。&lt;/p&gt; 
&lt;p&gt;我認為我們只能等待觀察。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/357005/a-family-of-openssl-forks</link>
      <guid isPermaLink="false">https://www.oschina.net/news/357005/a-family-of-openssl-forks</guid>
      <pubDate>Sun, 11 May 2025 06:52:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Kotlin 2.2.0 發佈</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="margin-left:0; margin-right:0; text-align:start"&gt;&lt;span style="color:#19191c"&gt;Kotlin 2.2.0 版本現已&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fkotlin%2F2025%2F06%2Fkotlin-2-2-0-released%2F" target="_blank"&gt;發佈&lt;/a&gt;。此版本包含全新和穩定的語言功能、工具更新、針對不同平台的性能改進以及重要修復。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:start"&gt;&lt;span style="color:#19191c"&gt;一些亮點更新內容如下：&lt;/span&gt;&lt;/p&gt; 
&lt;ul style="margin-left:0; margin-right:0"&gt; 
 &lt;li&gt;&lt;strong&gt;Language：&lt;/strong&gt;預覽版中的新語言功能，包括上下文參數。一些之前處於實驗階段的功能現已穩定，例如 guard conditions、non-local break and continue 以及 multi-dollar interpolation。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Kotlin compiler：&lt;/strong&gt;統一管理編譯器警告。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Kotlin/JVM：&lt;/strong&gt;接口函數的默認方法生成發生變化。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Kotlin/Native：&lt;/strong&gt;&amp;nbsp;LLVM 19 和用於跟蹤和調整內存消耗的新功能。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Kotlin/Wasm：&lt;/strong&gt;分離的 Wasm target，以及為每個項目配置 Binaryen 的功能。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Kotlin/JS：&lt;/strong&gt;修復為@JsPlainObject 接口生成的複製方法。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Gradle：&lt;/strong&gt;&amp;nbsp;Kotlin Gradle 插件中包含二進制兼容性驗證。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Standard library：&lt;/strong&gt;穩定的 Base64 和 HexFormat API。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="margin-left:0; margin-right:0; text-align:start"&gt;&lt;span style="color:#19191c"&gt;有關更改的完整列表可參閲&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fkotlinlang.org%2Fdocs%2Fwhatsnew22.html" target="_blank"&gt;Kotlin 2.2.0 中的新增功能&lt;/a&gt;或&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJetBrains%2Fkotlin%2Freleases%2Ftag%2Fv2.2.0" target="_blank"&gt;GitHub 上的發行説明&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/357003/kotlin-2-2-0-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/357003/kotlin-2-2-0-released</guid>
      <pubDate>Sun, 11 May 2025 06:34:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>MiniMax 上線 AI 音色設計功能</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;MiniMax 稀宇科技&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FSUqhAd54Q15Huq-AQ9EeCA" target="_blank"&gt;宣佈&lt;/a&gt;&lt;/u&gt;旗下 MiniMax Audio 上線了「Voice Design 音色設計」功能。&lt;/p&gt; 
&lt;p&gt;音色的維度一般分成音頻質量、發聲方式、情感基調以及人物畫像。該功能根據用戶對音色需求的描述，模型自動拆解成音色相關的描述信息，並根據上述的描述來得到一個新的音色編碼。同視頻模型類似，該功能支持對音色的抽卡，如果不滿意，多試幾次，很容易得到理想中的專屬獨一音色，並可存儲下來做後續的音頻內容創作。&lt;/p&gt; 
&lt;p&gt;據介紹，通過 Voice Design 音色設計，用戶可以通過自然語言來描述自己心中所想的音色，實現對多個維度的精準控制，甚至生成世界上不存在的音色。同時，Voice Design 與 Speech 02 語音模型在鏈路上相配合，用戶在文字轉語音中可真正實現了「所需即所得」，以「任意語言 × 任意口音 × 任意音色」，實現可全自定義的無限組合。&lt;/p&gt; 
&lt;p&gt;此外，Voice Design 解決了語音合成領域的兩個挑戰：難以精準匹配用戶各個細分場景下的多樣需求；復刻音色需要用戶花費大量時間準備輸入素材，並且存在潛在的版權風險。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0624/142945_xJzZ_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;目前，Voice Design 已上線 MiniMax Audio 國內、海外兩個版本。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;國內版：minimaxi.com/audio&lt;/li&gt; 
 &lt;li&gt;海外版：minimax.io/audio&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/357002/minimax-voice-design</link>
      <guid isPermaLink="false">https://www.oschina.net/news/357002/minimax-voice-design</guid>
      <pubDate>Sun, 11 May 2025 06:31:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>空間理解模型 SpatialLM 正式發佈首份技術報告</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近日，空間理解模型 SpatialLM 正式發佈首份技術報告。這一模型此前曾與 DeepSeek-V3、通義千問 Qwen2.5-Omni 一起登上全球最大的開源社區 HuggingFace 全球趨勢榜前三。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0624/140955_PZlV_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;作為一款將大語言模型擴展到 3D 空間理解任務中的模型，SpatialLM 能從 3D 點雲輸入生成結構化的空間場景描述，這一過程突破了大語言模型對物理世界幾何與空間關係的理解侷限，讓機器具備空間認知與推理能力，為具身智能等相關領域提供空間理解基礎訓練框架。&lt;/p&gt; 
&lt;p&gt;在開源後經過廣泛的實際驗證，本次技術報告聚焦 SpatialLM 1.1 升級版本，其不僅包含了詳細的消融實驗與訓練配方，還在點雲編碼方式、分辨率、用戶指定識別類目等維度上實現優化。&lt;/p&gt; 
&lt;p&gt;多項基準測試數據顯示：該模型在任務數據集微調後，在空間佈局識別、3D 物體檢測任務中，均達到了相比與最新專業模型持平或更優的效果。&lt;/p&gt; 
&lt;p&gt;&lt;img height="309" src="https://static.oschina.net/uploads/space/2025/0624/141014_3iIl_2720166.png" width="1280" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;本次報告重點圍繞&lt;strong&gt;算法框架&lt;/strong&gt;和&lt;strong&gt;訓練數據&lt;/strong&gt;兩方面展開。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;在算法架構方面&lt;/strong&gt;，SpatialLM 將大語言模型（LLMs）擴展到 3D 空間理解任務中，特別在結構化室內建模領域實現了重要突破。&lt;/p&gt; 
&lt;p&gt;這一技術路線打破了傳統任務專屬架構（task-specific architecture）的限制，創新性地採用可編輯的文本形式表達場景結構。這一創新設計具有雙重技術優勢：&lt;/p&gt; 
&lt;p&gt;一方面&lt;strong&gt;發揮了羣核科技強大數據集能力&lt;/strong&gt;，通過持續訓練不斷優化空間識別精度；另一方面&lt;strong&gt;通過接入大語言模型，系統可直接接收並理解自然語言指令&lt;/strong&gt;，使空間理解模型從簡單任務執行工具轉變為能夠真正理解用戶意圖的智能系統，從而推進了 LLMs 在空間理解和推理方向的能力邊界。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0624/141138_pYOw_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt;SpatialLM 模型的網絡結構&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;在訓練數據方面，SpatialLM 構建了一個全新的包含 3D 結構化信息的合成點雲數據集，打破了真實數據稀缺且難以標註的侷限。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1149" src="https://static.oschina.net/uploads/space/2025/0624/141210_bppP_2720166.png" width="974" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;該數據集包含超 1.2 萬場景、5.4 萬個房間的結構化室內點雲數據，其規模遠超 ScanNet（僅包含 1,513 個場景）等現有數據集。所有數據均源自真實項目的專業設計模型，經嚴格篩選與解析後形成符合真實世界統計分佈的虛擬環境，相較程序化生成的 ProcTHOR 等數據集具有更高真實性。&lt;/p&gt; 
&lt;p&gt;項目地址：https://manycore-research.github.io/SpatialLM/&lt;br&gt; 報告詳情：https://arxiv.org/abs/2506.07491&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356998</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356998</guid>
      <pubDate>Sun, 11 May 2025 06:12:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Roo Code 3.21.4 發佈，添加新的 Claude Code 提供商</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Roo Code 3.21.4 已發佈，此版本添加了&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.roocode.com%2Fproviders%2Fclaude-code" target="_blank"&gt;新的 Claude Code 提供商&lt;/a&gt;，允許用戶通過 Claude Code 直接在 Roo Code 中使用其現有的 Claude Max 訂閲。這意味着用戶可以利用其訂閲權益，無需額外支付按令牌計費的 API 費用，並可訪問 Claude Sonnet 4、Opus 4 等高級模型，同時享受零設置複雜性和對 Claude 思維模式及推理能力的完全訪問。&lt;/p&gt; 
&lt;p&gt;此次更新還修復了多文件差異應用時的起始行參數不正確問題，以及 Ollama 在某些模型上出現的驗證錯誤。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;新增 Claude Code provider 可用於本地 CLI 集成，允許用戶將 Claude Max 訂閲直接在 Roo Code 中使用，連接訂閲後，使用訂閲福利而非按 token 支付 API 費用，還可使用 Claude Sonnet 4、Opus 4 等高級模型，且在初始設置時選擇 Claude Code 作為提供商，無需 API 密鑰，還能完全訪問 Claude 的思考模式和推理能力。&lt;/li&gt; 
 &lt;li&gt;修復了多個文件差異應用時起始行參數未正確工作的錯誤，以及解決了導致 Ollama 無法與某些模型配合使用的驗證錯誤。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;詳情查看&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.roocode.com%2Fupdate-notes%2Fv3.21.4" target="_blank"&gt;https://docs.roocode.com/update-notes/v3.21.4&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356980/roocode-3-21-4</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356980/roocode-3-21-4</guid>
      <pubDate>Sun, 11 May 2025 03:54:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>vivo Pulsar 萬億級消息處理實踐 (2) - 從 0 到 1 建設 Pulsar 指標監控鏈路</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;blockquote&gt; 
 &lt;p&gt;作者：vivo 互聯網大數據團隊- You Shuo&lt;/p&gt; 
 &lt;p&gt;本文是《vivo Pulsar 萬億級消息處理實踐》系列文章第 2 篇，Pulsar 支持上報分區粒度指標，Kafka 則沒有分區粒度的指標，所以 Pulsar 的指標量級要遠大於 Kafka。在 Pulsar 平台建設初期，提供一個穩定、低時延的監控鏈路尤為重要。&lt;/p&gt; 
 &lt;p&gt;系列文章：&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;《&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247501335%26idx%3D1%26sn%3D3701be0b8b7b789e29c1ca53ba142e9d%26scene%3D21%23wechat_redirect" target="_blank"&gt;vivo Pulsar 萬億級消息處理實踐-數據發送原理解析和性能調優&lt;/a&gt;》&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;本文是基於 Pulsar 2.9.2/kop-2.9.2 展開的。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;一、背景&lt;/h1&gt; 
&lt;p&gt;作為一種新型消息中間件，Pulsar 在架構設計及功能特性等方面要優於 Kafka，所以我們引入 Pulsar 作為我們新一代的消息中間件。在對 Pulsar 進行調研的時候（比如：性能測試、故障測試等），針對 Pulsar 提供一套可觀測系統是必不可少的。Pulsar 的指標是面向雲原生的，並且官方提供了 Prometheus 作為 Pulsar 指標的採集、存儲和查詢的方案，但是使用 Prometheus 採集指標面臨以下幾個&lt;strong&gt;問題&lt;/strong&gt;：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Prometheus 自帶的時序數據庫不是分佈式的，它受單機資源的限制；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Prometheus 在存儲時序數據時消耗大量的內存，並且 Prometheus 在實現高效查詢和聚合計算的時候會消耗大量的 CPU。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;除了以上列出的可觀測系統問題，Pulsar 還有一些指標本身的問題，這些問題&lt;strong&gt;包括&lt;/strong&gt;：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Pulsar 的訂閲積壓指標單位是 entry 而不是條數，這會嚴重影響從 Kafka 遷移過來的用戶的使用體驗及日常運維工作；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Pulsar 沒有 bundle 指標，因為 Pulsar 自動均衡的最小單位是 bundle，所以 bundle 指標是調試 Pulsar 自動均衡參數時重要的觀測依據；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;kop 指標上報異常等問題。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;針對以上列出的幾個問題，我們在下面分別展開敍述。&lt;/p&gt; 
&lt;h1&gt;二、Pulsar 監控告警系統架構&lt;/h1&gt; 
&lt;p&gt;在上一章節我們列出了使用 Prometheus 作為觀測系統的侷限，由於 Pulsar 的指標是面向雲原生的，採用 Prometheus 採集 Pulsar 指標是最好的選擇，但對於指標的存儲和查詢我們使用第三方存儲來減輕 Prometheus 的壓力，整個監控告警系統架構如下圖所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//c032b72031868384106c1cc665fafc42.gif" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在整個可觀測系統中，各組件的職能如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Pulsar、bookkeeper 等組件提供暴露指標的接口&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Prometheus 訪問 Pulsar 指標接口採集指標&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;adaptor 提供了服務發現、Prometheus 格式指標的反序列化和序列化以及指標轉發遠端存儲的能力，這裏的遠端存儲可以是 Pulsar 或 Kafka&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Druid 消費指標 topic 並提供數據分析的能力&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;vivo 內部的檢測告警平台提供了動態配置檢測告警的能力&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;基於以上監控系統的設計邏輯，我們在具體實現的過程中遇到了幾個比較&lt;strong&gt;關鍵的問題：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;**一、**adaptor 需要接收 Pulsar 所有線上服務的指標併兼容 Prometheus 格式數據，所以在調研 Prometheus 採集 Pulsar 指標時，我們基於 Prometheus 的官方文檔開發了 adaptor，在 adaptor 裏實現了服務加入集羣的發現機制以及動態配置 prometheus 採集新新加入服務的指標：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Prometheus 動態加載配置：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fprometheus.io%2Fdocs%2Fprometheus%2Flatest%2Fconfiguration%2Fconfiguration%2F" target="_blank"&gt;Prometheus 配置-官方文檔&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Prometheus 自定義服務發現機制：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fprometheus.io%2Fblog%2F2015%2F06%2F01%2Fadvanced-service-discovery%2F" target="_blank"&gt;Prometheus 自定義服務發現-官方文檔&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在可以動態配置 Prometheus 採集所有線上正在運行的服務指標之後，由於 Prometheus 的指標是基於 protobuf 協議進行傳輸的，並且 Prometheus 是基於 go 編寫的，所以為了適配 Java 版本的 adaptor，我們基於 Prometheus 和 go 提供的指標格式定義文件（remote.proto、types.proto 和 gogo.proto）生成了 Java 版本的指標接收代碼，並將 protobuf 格式的指標反序列化後寫入消息中間件。&lt;/p&gt; 
&lt;p&gt;**二、**Grafana 社區提供的 Druid 插件不能很好的展示 Counter 類型的指標，但是 bookkeeper 上報的指標中又有很多是 Counter 類型的指標，vivo 的 Druid 團隊對該插件做了一些改造，新增了計算速率的聚合函數。&lt;/p&gt; 
&lt;p&gt;druid 插件的安裝可以參考官方文檔（&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgrafana.com%2Fgrafana%2Fplugins%2Fabhisant-druid-datasource%2F" target="_blank"&gt;詳情&lt;/a&gt;）&lt;/p&gt; 
&lt;p&gt;**三、**由於 Prometheus 比較依賴內存和 CPU，而我們的機器資源組又是有限的，在使用遠端存儲的基礎上，我們針對該問題優化了一些 Prometheus 參數，這些參數包括：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;--storage.tsdb.retention=30m&lt;/strong&gt;：該參數配置了數據的保留時間為 30 分鐘，在這個時間之後，舊的數據將會被刪除。&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;--storage.tsdb.min-block-duration=5m&lt;/strong&gt;：該參數配置了生成塊（block）的最小時間間隔為 5 分鐘。塊是一組時序數據的集合，它們通常被一起壓縮和存儲在磁盤上，該參數間接控制 Prometheus 對內存的佔用。&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;--storage.tsdb.max-block-duration=5m&lt;/strong&gt;：該參數配置了生成塊（block）的最大時間間隔為 5 分鐘。如果一個塊的時間跨度超過這個參數所設的時間跨度，則這個塊將被分成多個子塊。&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;--enable-feature=memory-snapshot-on-shutdown&lt;/strong&gt;：該參數配置了在 Prometheus 關閉時，自動將當前內存中的數據快照寫入到磁盤中，Prometheus 在下次啓動時讀取該快照從而可以更快的完成啓動。&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;三、Pulsar 指標優化&lt;/h1&gt; 
&lt;p&gt;Pulsar 的指標可以成功觀測之後，我們在日常的調優和運維過程中發現了一些 Pulsar 指標本身存在的問題，這些問題包括準確性、用戶體驗、以及性能調優等方面，我們針對這些問題做了一些優化和改造，使得 Pulsar 更加通用、易維護。&lt;/p&gt; 
&lt;h2&gt;3.1 Pulsar 消費積壓指標&lt;/h2&gt; 
&lt;p&gt;原生的 Pulsar 訂閲積壓指標單位是 entry，從 Kafka 遷移到 Pulsar 的用戶希望 Pulsar 能夠和 Kafka 一樣，提供以消息條數為單位的積壓指標，這樣可以方便用戶判斷具體的延遲大小並儘量不改變用戶使用消息中間件的習慣。&lt;/p&gt; 
&lt;p&gt;在確保配置 brokerEntryMetadataInterceptors=&lt;/p&gt; 
&lt;p&gt;org.apache.pulsar.common.intercept.AppendIndexMetadataInterceptor 情況下，Pulsar broker 端在往 bookkeeper 端寫入 entry 前，通過攔截器往 entry 的頭部添加索引元數據，該索引在同一分區內單調遞增，entry 頭部元數據示例如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;biz-log-partition-1 -l 24622961 -e 6
Batch Message ID: 24622961:6:0
Publish time: 1676917007607
Event time: 0
Broker entry metadata index: 157398560244
Properties:
"X-Pulsar-batch-size    2431"
"X-Pulsar-num-batch-message    50"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;以分區為指標統計的最小單位，基於 last add confirmed entry 和 last consumed entry 計算兩個 entry 中的索引差值，即是訂閲在每個分區的數據積壓。下面是 cursor 基於訂閲位置計算訂閲積壓的示意圖，其中 last add confirmed entry 在攔截器中有記錄最新索引，對於 last consumed entry，cursor 需要從 bookkeeper 中讀取，這個操作可能會涉及到 bookkeeper 讀盤，所以在收集延遲指標的時候可能會增加採集的耗時。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//f954824fee0a365add038a1a9aed4e3b.gif" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;效果&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;上圖是新訂閲積壓指標和原生積壓指標的對比，新增的訂閲積壓指標單位是條，原生訂閲積壓指標單位是 entry。在客戶端指定單條發送 100w 條消息時，訂閲積壓都有明顯的升高，當客戶端指定批次發送 100w 條消息的時候，新的訂閲積壓指標會有明顯的升高，而原生訂閲積壓指標相對升高幅度不大，所以新的訂閲積壓指標更具體的體現了訂閲積壓的情況。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//a62f11043d23bcbc8c667854834e2437.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;3.2 Pulsar bundle 指標&lt;/h2&gt; 
&lt;p&gt;Pulsar 相比於 Kafka 增加了自動負載均衡的能力，在 Pulsar 裏 topic 分區是綁定在 bundle 上的，而負載均衡的最小單位是 bundle，所以我們在調優負載均衡策略和參數的時候比較依賴 bunlde 的流量分佈指標，並且該指標也可以作為我們切分 bundle 的參考依據。我們在開發 bundle 指標的時候做了下面兩件事情：&lt;/p&gt; 
&lt;p&gt;統計當前 Pulsar 集羣非遊離狀態 bundle 的負載情況對於處於遊離狀態的 bundle（即沒有被分配到任何 broker 上的 bundle），我們指定 Pulsar leader 在上報自身 bundle 指標的同時，上報這些處於遊離狀態的 bundle 指標，並打上是否遊離的標籤。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;效果&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//d465e1009a88707edf424e50711bfd36.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上圖就是 bundle 的負載指標，除了出入流量分佈的情況，我們還提供了生產者/消費者到 bundle 的連接數量，以便運維同學從更多角度來調優負載均衡策略和參數。&lt;/p&gt; 
&lt;h2&gt;3.3 kop 消費延遲指標無法上報&lt;/h2&gt; 
&lt;p&gt;在我們實際運維過程中，重啓 kop 的 Coordinator 節點後會偶發消費延遲指標下降或者掉 0 的問題，從 druid 查看上報的數據，我們發現在重啓 broker 之後消費組就沒有繼續上報 kop 消費延遲指標。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;（1）原因分析&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;由於 kop 的消費延遲指標是由 Kafka lag exporter 採集的，所以我們重點分析了 Kafka lag exporter 採集消費延遲指標的邏輯，下圖是 Kafka-lag-exporter 採集消費延遲指標的示意圖：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//e1c60c3dfc3fbdfdcbacbe9501bd9c30.gif" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;其中，kafka-lag-exporter 計算消費延遲指標的邏輯會依賴 kop 的 describeConsumerGroups 接口，但是當 GroupCoordinator 節點重啓後，該接口返回的 member 信息中 assignment 數據缺失，kafka-lag-exporter 會將 assignment 為空的 member 給過濾掉，所以最終不會上報對應 member 下的分區指標，代碼調試如下圖所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//44161110538352a1751268f3d5e09c35.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//756d27b220d957877e1713dd1ac7e29a.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;為什麼 kop/Kafka describeConsumerGroups 接口返回 member 的 assignment 是空的？因為 consumer 在啓動消費時會通過 groupManager.storeGroup 寫入__consumer_&lt;/p&gt; 
&lt;p&gt;offset，在 coordinator 關閉時會轉移到另一個 broker，但另一個 broker 並沒有把 assignment 字段反序列化出來（序列化為 groupMetadataValue，反序列化為 readGroupMessageValue），如下圖：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//378c807ffd55bb262d54d26e52e6d73a.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;（2）解決方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 GroupMetadataConstants#readGroup-&lt;/p&gt; 
&lt;p&gt;MessageValue() 方法對 coordinator 反序列化消費組元數據信息時，將 assignment 字段讀出來並設置（序列化為 groupMetadataValue，反序列化為 readGroupMessageValue），如下圖：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//97fe15c2e044eb609406a2ab3d5e51e8.png" alt="圖片" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;四、總結&lt;/h1&gt; 
&lt;p&gt;在 Pulsar 監控系統構建的過程中，我們解決了與用戶體驗、運維效率、Pulsar 可用性等方面相關的問題，加快了 Pulsar 在 vivo 的落地進度。雖然我們在構建 Pulsar 可觀測系統過程中解決了一部分問題，但是監控鏈路仍然存在單點瓶頸等問題，所以 Pulsar 在 vivo 的發展未來還會有很多挑戰。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/vivotech/blog/18619289</link>
      <guid isPermaLink="false">https://my.oschina.net/vivotech/blog/18619289</guid>
      <pubDate>Sun, 11 May 2025 03:41:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>谷歌開源智能體通信協議 Agent2Agent (A2A) 已被 Linux 基金會接管</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;2025 年 6 月 23 日，Linux 基金會在北美開源峯會&lt;u&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linuxfoundation.org%2Fpress%2Flinux-foundation-launches-the-agent2agent-protocol-project-to-enable-secure-intelligent-communication-between-ai-agents" target="_blank"&gt;宣佈&lt;/a&gt;&lt;/u&gt;啓動&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fa2aproject%2FA2A" target="_blank"&gt;Agent2Agent（A2A）&lt;/a&gt;項目。該項目由谷歌於 2025 年 4 月發起並獲得 100 多家領先技術公司支持，旨在創建一個開放協議，實現 AI 智能體間的安全通信與協作。Linux 基金會將負責 A2A 項目的管理，確保其中立性、協作性和治理性。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-8fe3e4a0fa786414ab6de80f762399a6327.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;A2A 協議賦予開發者構建跨平台、廠商和框架自由互操作的智能體的能力。它允許智能體在動態多智能體環境中發現彼此、安全交換信息並跨系統協作。這有助於提高模塊化程度、降低供應商鎖定風險並加速創新。&lt;/p&gt; 
&lt;p&gt;加入 Linux 基金會後，A2A 規範化了其對開放、協作生態系統的承諾——提供更大的自主權並提高生產力。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Linux 基金會執行董事吉姆·澤姆林表示，「我們很高興成為 Agent2Agent 協議項目的新家園，通過加入 Linux 基金會，A2A 將確保長期的中立性、協作性和治理性，這將解鎖下一代由智能體間協作驅動的生產力時代。」&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 Linux 基金會的治理下，A2A 將保持供應商中立，強調包容性貢獻，並繼續關注協議的擴展性、安全性以及跨行業的實際可用性。&lt;/p&gt; 
&lt;p&gt;多家科技巨頭表達了對 A2A 項目的支持。AWS 副總裁 Swami Sivasubramanian 認為，智能體 AI 對客戶體驗至關重要，A2A 加入 Linux 基金會將創造更多機會。谷歌雲計算業務副總裁兼總經理 Rao Surapaneni 表示，A2A 協議為通信建立了重要開放標準，推動了跨平台和系統的真正互操作性 AI 智能體的發展。思科 Outshift 總經理兼高級副總裁 Vijoy Pandey 強調了社區驅動開發在智能體間廣泛採用中的重要性。Salesforce 產品架構師 Gary Lerhaupt 稱，企業 AI 的未來在於智能體間的無縫協作。SAP 全球人工智能高級副總裁兼全球負責人 Walter Sun 表示，A2A 開放標準確保了不同廠商的智能體能夠交互、共享上下文並協同工作。微軟產品副總裁 Yina Arenas 承諾，將結合開放互操作性與企業級功能，負責任地大規模部署智能體。ServiceNow 平台工程與人工智能技術集團執行副總裁 Joe Davis 表示，A2A 的開放標準構建了跨平台協作的基礎。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356965/linux-foundation-launches-the-agent2agent-protocol-project</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356965/linux-foundation-launches-the-agent2agent-protocol-project</guid>
      <pubDate>Sun, 11 May 2025 02:50:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>搶答題：「把文字變成數字」、「對結果精修」，都是什麼技術？</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;寫 AI 應用，你總不能就指望大模型直出的效果吧，很多必要的時候，需要「通過外部策略」的方式去影響大模型處理資料的邏輯，檢索增強生成技術&amp;nbsp;RAG 是這種路數，而 RAG 中，Embedding 和 Reranker 又是重中之重的環節，當前這兩個環節也都有專門模型化範式來接入，並且已成為高效構建智能問答、知識檢索、推薦系統等應用的核心組件。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;智能問答&lt;/strong&gt;：通過高精度的 Embedding 建立問答對檢索索引，結合 Reranker 精細排序，顯著提升答案的相關性與準確率。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;知識庫檢索&lt;/strong&gt;：在海量文檔中精準定位用戶意圖，支持多輪對話和上下文關聯檢索。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;推薦系統&lt;/strong&gt;：基於用戶歷史行為與商品描述生成向量表示，實現個性化推薦、相似內容召回。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;輿情監測&lt;/strong&gt;：快速將海量文本轉為向量，通過聚類與分類算法進行主題發現與情感分析。&lt;/p&gt; 
&lt;p&gt;這些都是典型的需要&amp;nbsp;Embedding 與 Reranker 給力的場景。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0624/103257_8UDj_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;這過程中，「把文字變成數字」與「對檢索結果精修」是兩大核心環節。下面以通俗的方式，分兩塊為你説明 Embedding 和 Reranker 的原理與價值。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Embedding：把語義「壓縮」成向量&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;想象你在把一本書裏的每句話都翻譯成一長串數字，這串數字既要能表達句子的中心意思，又要在空間裏與含義相近的句子靠得更近。Embedding 模型，就是完成這件「翻譯」工作的機器。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;多層語義提取&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Embedding 模型內部運用了多層 Transformer 編碼器。第一層關注詞與詞之間的基本搭配（如「蘋果」與「果汁」關係）；中間層捕捉句子結構（比如主謂賓），最後幾層則把整句話和上下文聯繫起來，形成一個高維向量。在 Qwen3‑Embedding‑8B 中，這個向量高達 4096 維，讓模型能夠在更廣的維度上區分細微差異。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;對比學習讓向量更「聰明」&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;訓練時，模型不僅看成對的問答或同義句怎麼對應，更會把數千萬甚至上億條不相關的句子拉遠。這樣，真正相似的句子在向量空間裏互相靠近，不相干的句子被推得更遠，檢索時才不會把「蘋果手機電池續航」誤當成「香蕉營養價值」。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;動靜結合的量化策略&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;向量越大，存儲和檢索壓力越大。動態量化技術能讓模型在運行時自動決定哪些維度可以用更低精度來存（節省空間），哪些維度要保持高精度（保證關鍵語義不丟失）。在實際部署中，這讓檢索速度實現了「百毫秒級」響應，同時節省了約 60–70% 的存儲。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Reranker：給檢索結果「打分」再排序&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Embedding 檢索出來的是一個粗略的「候選集」，真正要交給用戶之前，還需要一位「品質檢驗師」——Reranker，將這些候選答案再打一遍分、排個序，讓最優答案排在最前面。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;深度交互，跳出雙塔侷限&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;傳統雙塔結構（query 和 document 分別編碼）雖然高效，但只在編碼後進行一次簡單匹配，會錯失一些深度關聯。我們的 Reranker 在兩側編碼後，還會引入多輪交互注意力——就好像讓問題和答案反覆「對話」，捕捉細節差異，才能判斷「哪句話更貼近用戶真實意圖」。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;實時反饋持續進化&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;當用戶點擊某個答案或給出負面評價時，這些行為會被立即反饋到在線增量學習系統中。Reranker 會在後台快速微調自身參數，就像運動員不斷根據比賽錄像調整戰術，保證隨着業務熱點變化，排序效果始終領先。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;多目標優化兼顧公平與準確&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;除了相關性打分外，模型還聯合了分類（這是不是好答案？）、迴歸（該答案得分應該是多少？）和對比損失（同類答案之間應該怎麼排）三個目標共同訓練，確保排序既精準又穩定，不會因為單一指標過擬合而出現極端情況。&lt;/p&gt; 
&lt;p&gt;總的來説，&lt;strong&gt;Embedding 負責將文本「量化」到高維空間，為檢索打下基礎；Reranker 則在此基礎上「打磨」結果，確保輸給用戶的是最精煉、最相關的答案&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;為了讓更多開發者和企業能夠零門檻體驗最前沿的 AI 能力，模力方舟攜手國產 GPU 廠商，重磅宣佈——&lt;strong&gt;已部署的 17 個 Embedding 和 Reranker 模型，全量免費使用&lt;/strong&gt;！&lt;/p&gt; 
&lt;p&gt;&lt;img height="964" src="https://static.oschina.net/uploads/space/2025/0624/103342_VXq3_2720166.png" width="1080" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;還有更多的免費模型選擇，盡在模力方舟之模型廣場：&lt;em&gt;&lt;strong&gt;&lt;a href="https://ai.gitee.com/serverless-api" target="_blank"&gt;https://ai.gitee.com/serverless-api&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="1520" src="https://static.oschina.net/uploads/space/2025/0624/103354_4RFB_2720166.png" width="1074" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;好東西一起分享之，圖片拿去轉吧。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356959</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356959</guid>
      <pubDate>Sun, 11 May 2025 02:34:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>微軟發佈設備端模型 Mu，支持在 Windows 中設置智能體</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微軟&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.windows.com%2Fwindowsexperience%2F2025%2F06%2F23%2Fintroducing-mu-language-model-and-how-it-enabled-the-agent-in-windows-settings%2F" target="_blank"&gt;宣佈&lt;/a&gt;推出面向設備端的小參數模型 Mu。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1294" src="https://static.oschina.net/uploads/space/2025/0624/103032_Y3sh_2720166.png" width="3086" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Mu 僅有 3.3 億參數，但其性能可以比肩微軟之前發佈的小參數模型 Phi-3.5-mini，體量卻比它小 10 倍左右，並且在離線 NPU 的筆記本設備上，可以跑出每秒超過 100 tokens 的響應，這在小參數模型領域非常罕見。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-0fe4a5c2aa3f7e02f94f3883e0a0a49dd2c.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;此外，Mu 支持在 Windows 中設置智能體，可將自然語言指令實時轉化為系統操作，例如，只需對着電腦説一句 「把鼠標指針調大一些，調整屏幕亮度」，智能體就能精準定位到相關設置項一鍵完成調整。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356958/microsoft-mu-language-model</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356958/microsoft-mu-language-model</guid>
      <pubDate>Sun, 11 May 2025 02:31:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>前字節 Seed 大語言模型負責人喬木被辭退</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;此前，一份有關字節跳動豆包大模型核心技術人員喬某及同組 HRBP 程某存在不正當關係的舉報文件在網上廣泛傳播。6 月 23 日，紅星資本局獲悉，字前字節 Seed 大語言模型負責人喬木以及關聯 HRBP 已被辭退。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="273" src="https://oscimg.oschina.net/oscnet/up-d1fc69ad929f39468990c7341f686a6bd81.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;字節在最新發布的一期廉政通報中提到：&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;span style="color:#000000"&gt;公司 Seed 部門（字節跳動豆包大模型團隊）某前員工與支持其團隊的某前 HRBP（人力資源）存在未申報的親密關係，屬於公司利益衝突管理規定的禁止場景（如上下級關係、共同直屬上級或一方為另一方 HRBP 等）。二人不僅未按規定申報利益衝突，且在接受調查過程中多次作虛假陳述，嚴重違反公司制度。&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;根據通報，字節跳動已對涉事二人作出辭退處理，並全額扣發其年終獎。對此，字節官方尚無説法。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356956</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356956</guid>
      <pubDate>Sun, 11 May 2025 02:15:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>博士生用 Typst 取代 LaTeX 寫論文引熱議：編譯速度快 9 倍，但導師並不滿意</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;一位博士生最近在網上分享了自己使用 Typst（而非傳統的 LaTeX）撰寫博士論文的經歷，在技術社區引發了激烈討論。這個選擇看似小眾，卻觸及了學術界一個由來已久的痛點：LaTeX 雖然功能強大，但學習曲線陡峭、編譯速度緩慢、錯誤信息晦澀難懂。&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img height="400" src="https://oscimg.oschina.net/oscnet/up-da99f6b5d1fdd0954f78d4992bf7563f660.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;從 90 秒到 10 秒：速度是第一生產力&lt;/h2&gt; 
&lt;p&gt;作者選擇 Typst 的直接原因很簡單——一位朋友的 LaTeX 論文編譯時間竟然長達 90 秒。「我太容易分心了，根本無法忍受在做小改動時要等 90 秒的編譯時間。」相比之下，Typst 的編譯速度快得驚人：即使是 150 頁以上的論文，完整編譯只需 15 秒，內容修改幾乎是即時更新的。&lt;/p&gt; 
&lt;p&gt;HackerNews 用戶 WhyNotHugo 深有同感：「我最後一篇論文用的是 makefile，通常能工作。但不工作時，運行兩次就能修復。最罕見的情況下，我必須運行&lt;code&gt;git clean -xdf&lt;/code&gt;，然後下一次運行就能工作了。」另一位用戶 shusaku 則幽默地評論道：「瘋狂的定義就是做同樣的事情兩次卻期待不同的結果。巧合的是，這正是編譯 LaTeX 的基本方式。」&lt;/p&gt; 
&lt;h2&gt;Typst 的語言設計：現代化的力量&lt;/h2&gt; 
&lt;p&gt;Typst 最大的亮點在於其精心設計的語言。作者將其描述為「Markdown 和動態類型 Rust 的混合體」，這種組合聽起來很奇怪，但實際使用起來卻非常舒適。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typst"&gt;#let numbers = (1,2,5,8)
This is *bold text*. The sum of [#numbers.map(it =&amp;gt; str(it)).join(", ")] is *#numbers.sum()*
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;這段代碼會生成：「This is &lt;strong&gt;bold text&lt;/strong&gt;. The sum of [1, 2, 5, 8] is &lt;strong&gt;16&lt;/strong&gt;」&lt;/p&gt; 
&lt;p&gt;相比 LaTeX 中到處都是反斜槓的語法，Typst 的設計更加直觀。更重要的是，Typst 擁有一個設計良好的腳本語言。正如作者所説：「我對 LaTeX 最大的抱怨是沒有任何東西是一致的。每個包都定義自己的小工具，甚至連基本的 if 語句都不統一。感覺你不是在學 LaTeX，而是在分別學習每個包。」&lt;/p&gt; 
&lt;h2&gt;實際應用：不只是紙上談兵&lt;/h2&gt; 
&lt;p&gt;作者展示了一個實際案例：他收集了各種硬件描述語言的元數據，存儲在 TOML 文件中。由於 Typst 可以直接解析 TOML，他能夠輕鬆地用這些數據生成論文中的分類圖表。這種程度的編程集成在 LaTeX 中幾乎是不可想象的。&lt;/p&gt; 
&lt;p&gt;HackerNews 用戶 lizimo 分享了更有趣的應用場景：「我們已經在生產環境中使用 Typst 生成 PDF 文檔幾個月了，比如發票和標籤。每天生成數千份文檔，我很高興其中一些被打印出來，供倉庫裏做實際工作的人使用。」&lt;/p&gt; 
&lt;h2&gt;痛點仍在：生態系統的挑戰&lt;/h2&gt; 
&lt;p&gt;然而，Typst 並非完美無缺。最大的問題來自於參考文獻管理。Typst 每個文檔只能有一個參考文獻部分和文件，這對於需要為引言和每篇包含的論文分別設置參考文獻的博士論文來説是個致命缺陷。雖然 Alexandria 包提供瞭解決方案，但仍需要額外的工作。&lt;/p&gt; 
&lt;p&gt;更大的挑戰在於生態系統。正如 HackerNews 用戶 gumbojuice 指出：「我堅持使用 LaTeX，不是因為偏好，而是因為期刊/會議仍然不接受比如 typst。他們會接受嗎？我不知道，這取決於他們是否願意將其整合到工具鏈中。」&lt;/p&gt; 
&lt;h2&gt;導師的不同視角&lt;/h2&gt; 
&lt;p&gt;有趣的是，作者的導師對此有完全不同的看法。導師認為：「問題是你必須調整它才能讓事情看起來符合要求。這不一定是優勢。作為導師，我會建議在所有手稿都用 LaTeX 編寫的領域中使用 Typst 嗎？不會。」&lt;/p&gt; 
&lt;p&gt;導師特別指出，從監督者的角度來看，他幾乎沒有在源代碼中編輯任何文本，而是讓作者自己編輯文本和格式，這相當低效。&lt;/p&gt; 
&lt;h2&gt;社區的兩極化反應&lt;/h2&gt; 
&lt;p&gt;HackerNews 的討論呈現出明顯的兩極分化。支持者認為 Typst 代表了未來。用戶 commandersaki 列出了 Typst 的諸多優勢：「編譯時不會生成 5 個該死的文件」、「編譯是即時的」、「診斷信息更容易理解（有點像 Rust 編譯器的建議風格）」。&lt;/p&gt; 
&lt;p&gt;反對者則擔心 Typst 的持續性。用戶 dleslie 警告説：「三十年後 LaTeX 仍將是開源的，可能還會被維護。Typst 看起來是開源和閉源的混合體；這種模式往往會忽視開源部分，在閉源部分實現關鍵功能。」&lt;/p&gt; 
&lt;p&gt;用戶 the-wumpus 則反駁道：「網頁應用編輯器是閉源的，但它提供的大部分功能都是開源的，所以本地編輯體驗類似（在我看來更好）。typst 編譯器、LSP 和你需要使用的所有東西都是開源的。」&lt;/p&gt; 
&lt;h2&gt;寫在最後&lt;/h2&gt; 
&lt;p&gt;正如作者在結論中所説：「如果你像我一樣，喜歡玩編程語言，容易被工具困擾，更喜歡可以調整到完全符合自己要求的工具，而不是開箱即用但難以調整的工具，那麼 Typst 絕對值得一試。」&lt;/p&gt; 
&lt;p&gt;對於學術界來説，Typst 的出現提供了一個思考的契機：我們是否應該繼續忍受 LaTeX 的種種不便，僅僅因為「大家都在用」？還是應該擁抱新技術帶來的效率提升？&lt;/p&gt; 
&lt;p&gt;用戶 rcpt 的評論或許代表了一種新的可能：「自從我寫 LaTeX 以來已經有十年了，我同意它的所有痛點。但似乎 LaTeX 正是 LLM 會完美處理的東西。我覺得今天使用它不會太糟糕。」&lt;/p&gt; 
&lt;p&gt;無論選擇哪種工具，重要的是它能幫助研究者更好地表達思想。正如用戶 noelwelsh 所説：「在一天結束時，我不是在試圖遷移任何人。使用你認為最好的。對於我的使用場景，我確信 Typst 是比 LaTeX 更好的選擇。」&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356954</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356954</guid>
      <pubDate>Sun, 11 May 2025 01:57:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>Solon Expression Language (SnEL)：輕量高效的 Java 表達式引擎</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;h2&gt;一、SnEL 是什麼？&lt;/h2&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;Solon Expression Language（簡稱 SnEL）是 Solon 生態體系中的輕量級表達式引擎，專為 Java 開發者設計。它採用獨特的"求值表達式"模型，通過簡潔的語法實現複雜邏輯處理，同時保持極高的執行效率和安全性。&lt;/p&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;項目地址：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Gitee:&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://gitee.com/noear/solon-expression"&gt;https://gitee.com/noear/solon-expression&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GitHub:&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnoear%2Fsolon-expression" target="_blank"&gt;https://github.com/noear/solon-expression&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;二、核心特性解析&lt;/h2&gt; 
&lt;h3&gt;1. 安全可靠的表達式引擎&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;無副作用設計&lt;/strong&gt;：禁止&lt;code&gt;new&lt;/code&gt;實例化、控制語句等危險操作&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;上下文隔離&lt;/strong&gt;：通過&lt;code&gt;StandardContext&lt;/code&gt;嚴格管控變量訪問範圍&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. 豐富的表達式能力&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;em&gt;// 複雜邏輯表達式示例&lt;/em&gt;
&lt;span style="color:#986801"&gt;String&lt;/span&gt; &lt;span style="color:#986801"&gt;expr&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"""
    ((age &amp;gt; 18 AND salary &amp;lt; 5000) OR NOT isMarried) 
    AND tags IN ['vip','premium'] 
    OR level == 'gold'"""&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;支持功能主要包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;基礎運算：算術、比較、邏輯運算&lt;/li&gt; 
 &lt;li&gt;集合操作：IN/NOT IN 集合判斷&lt;/li&gt; 
 &lt;li&gt;嵌套訪問：多級對象屬性/方法調用&lt;/li&gt; 
 &lt;li&gt;靜態方法：直接調用類靜態方法&lt;/li&gt; 
 &lt;li&gt;三元運算：條件表達式支持&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;更多參考官網：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsolon.noear.org%2Farticle%2F1043" target="_blank"&gt;《SnEL 求值表達式語法和能力説明》&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;3. 獨創的模板引擎&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;雙模式模板處理：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;em&gt;// 求值表達式模板&lt;/em&gt;
SnEL.evalTmpl(&lt;span style="color:#50a14f"&gt;"訂單總額：#{order.amount * 0.95}"&lt;/span&gt;);

&lt;em&gt;// 屬性表達式模板（帶默認值）&lt;/em&gt;
SnEL.evalTmpl(&lt;span style="color:#50a14f"&gt;"配置參數：${server.timeout:3000}"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;三、企業級功能深度解析&lt;/h2&gt; 
&lt;h3&gt;1. 上下文增強方案&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;em&gt;// 標準 Map 上下文&lt;/em&gt;
Map&amp;lt;String,Object&amp;gt; ctx = &lt;span style="color:#a626a4"&gt;new&lt;/span&gt; &lt;span style="color:#c18401"&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();
ctx.put(&lt;span style="color:#50a14f"&gt;"user"&lt;/span&gt;, userService.getCurrent());

&lt;em&gt;// 增強型 Bean 上下文&lt;/em&gt;
&lt;span style="color:#986801"&gt;StandardContext&lt;/span&gt; &lt;span style="color:#986801"&gt;context&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span style="color:#a626a4"&gt;new&lt;/span&gt; &lt;span style="color:#c18401"&gt;StandardContext&lt;/span&gt;(userEntity);
context.properties(configProps); &lt;em&gt;// 綁定配置屬性&lt;/em&gt;

&lt;em&gt;// 虛擬 root 訪問&lt;/em&gt;
SnEL.eval(&lt;span style="color:#50a14f"&gt;"root.id &amp;gt; 1000"&lt;/span&gt;, context);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. 多場景表達式轉換&lt;/h3&gt; 
&lt;p style="color:#24292e; text-align:start"&gt;基於 AST 的通用轉換接口：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#986801"&gt;Expression&lt;/span&gt; &lt;span style="color:#986801"&gt;expr&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; SnEL.parse(&lt;span style="color:#50a14f"&gt;"age &amp;gt; 18 AND status=='active'"&lt;/span&gt;);

&lt;em&gt;// 轉換為 Redis 查詢語法&lt;/em&gt;
&lt;span style="color:#986801"&gt;String&lt;/span&gt; &lt;span style="color:#986801"&gt;redisFilter&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; RedisFilterTransformer.getInstance().transform(expr);

&lt;em&gt;// 轉換為 Elasticsearch DSL&lt;/em&gt;
Map&amp;lt;String,Object&amp;gt; esQuery = ElasticsearchFilterTransformer.getInstance().transform(expr);

&lt;em&gt;// 輸出語法樹結構&lt;/em&gt;
PrintUtil.printTree(expr);
&lt;/code&gt;&lt;/pre&gt; 
&lt;table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#24292e; display:block; font-family:-apple-system,&amp;quot;system-ui&amp;quot;,&amp;quot;Segoe UI&amp;quot;,Helvetica,Arial,sans-serif,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:960px; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th&gt;轉換器類型&lt;/th&gt; 
   &lt;th&gt;輸出示例&lt;/th&gt; 
   &lt;th&gt;應用場景&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;Redis&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;code&gt;(@age:[18 +inf] @status:{active})&lt;/code&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;緩存查詢&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;Milvus&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;code&gt;((metadata["age"] &amp;gt; 18) and (metadata["status"] == "active"))&lt;/code&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;向量數據庫&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;Elasticsearch&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;code&gt;{bool={must=[{range={age={gt=18}}}, {term={status={value=active}}}]}}&lt;/code&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;全文檢索&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;SQL&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;code&gt;WHERE age &amp;gt; 18 AND status='active'&lt;/code&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;數據庫查詢&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;四、典型應用場景&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;動態規則引擎：金融風控規則配置&lt;/li&gt; 
 &lt;li&gt;智能路由：微服務調用條件路由&lt;/li&gt; 
 &lt;li&gt;低代碼平台：表單校驗邏輯動態配置&lt;/li&gt; 
 &lt;li&gt;數據分析：實時數據過濾與計算&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;五、快速入門&lt;/h2&gt; 
&lt;h3&gt;1. 添加依賴&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.noear&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;solon-expression&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;最新版本&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;span style="color:#e45649"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. 基礎用法示例&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;class&lt;/span&gt; &lt;span style="color:#c18401"&gt;Demo&lt;/span&gt; {
    &lt;span style="color:#a626a4"&gt;public&lt;/span&gt; &lt;span style="color:#a626a4"&gt;static&lt;/span&gt; &lt;span style="color:#a626a4"&gt;void&lt;/span&gt; &lt;span style="color:#4078f2"&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; {
        Map&amp;lt;String,Object&amp;gt; context = &lt;span style="color:#a626a4"&gt;new&lt;/span&gt; &lt;span style="color:#c18401"&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();
        context.put(&lt;span style="color:#50a14f"&gt;"price"&lt;/span&gt;, &lt;span style="color:#986801"&gt;99.5&lt;/span&gt;);
        context.put(&lt;span style="color:#50a14f"&gt;"discount"&lt;/span&gt;, &lt;span style="color:#986801"&gt;0.8&lt;/span&gt;);
        
        &lt;span style="color:#986801"&gt;Object&lt;/span&gt; &lt;span style="color:#986801"&gt;result&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; SnEL.eval(&lt;span style="color:#50a14f"&gt;"price * discount &amp;gt; 50"&lt;/span&gt;, context);
        System.out.println(&lt;span style="color:#50a14f"&gt;"是否符合條件："&lt;/span&gt; + result);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3. 性能優化建議&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;複用解析結果：對固定表達式使用 SnEL.parse() 緩存 AST&lt;/li&gt; 
 &lt;li&gt;上下文優化：複雜對象優先使用 StandardContext&lt;/li&gt; 
 &lt;li&gt;避免頻繁解析：高併發場景預編譯表達式&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;六、企業實踐案例&lt;/h2&gt; 
&lt;h3&gt;案例 1：電商促銷系統&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&lt;em&gt;// 動態計算促銷條件&lt;/em&gt;
&lt;span style="color:#986801"&gt;String&lt;/span&gt; &lt;span style="color:#986801"&gt;rule&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span style="color:#50a14f"&gt;"""
    (user.level IN ['VIP','SVIP'] OR order.amount &amp;gt; 1000) 
    AND inventory.stock &amp;gt; 0 
    AND NOT blacklist.contains(user.id)"""&lt;/span&gt;;
    
&lt;span style="color:#986801"&gt;Boolean&lt;/span&gt; &lt;span style="color:#986801"&gt;rst&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; SnEL.eval(rule, context);&lt;/code&gt;&lt;/pre&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356941</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356941</guid>
      <pubDate>Sun, 11 May 2025 00:43:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>🎉夜鶯監控 V8 發版，內置支持 DeepSeek 對接</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#333333; text-align:left"&gt;夜鶯監控發佈了 v8.beta14 版本，這個版本是可以上生產的，強烈建議升級。正式版會在每年夜鶯大會上發佈，今年預計是 7.4 號。&lt;/p&gt; 
&lt;p style="color:#333333; text-align:left"&gt;下面快速介紹一下 v8.beta14 的主要更新。&lt;/p&gt; 
&lt;h2&gt;beta14 重點更新&lt;/h2&gt; 
&lt;h3&gt;支持 Postgres 告警&lt;/h3&gt; 
&lt;p style="color:#333333; text-align:left"&gt;又支持了一個新的告警數據源：Postgres，可以對 Postgres 中的數據做異常判定啦，有些業務數據（比如訂單數據、商品數據）可能是存在 Postgres 或 MySQL 等 OLTP 庫中，所以這算是多了一個業務數據告警的手段，業務監控的告警規則不用很多，但是通常都極為關鍵。&lt;/p&gt; 
&lt;p&gt;&lt;img height="630" src="https://oscimg.oschina.net/oscnet/up-e30994bca7c3d950bb85c39db5c1e5ccd77.png" width="1890" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; text-align:left"&gt;您可以在&lt;code&gt;集成中心-數據源&lt;/code&gt;添加 Postgres 數據源，目前的開源版本，該數據源僅支持告警，不支持看圖（即時查詢、儀表盤等）。&lt;/p&gt; 
&lt;h3&gt;對接 AI 做 Summary&lt;/h3&gt; 
&lt;p style="color:#333333; text-align:left"&gt;告警事件 Pipeline 新增一個新的內置處理器：AI Summary，可以使用 DeepSeek 等對告警事件做總結，將總結之後的信息附加到告警事件中，進而通過告警消息發出。讓您的監控與 AI 之間的聯動觸手可及。&lt;/p&gt; 
&lt;p&gt;&lt;img height="1190" src="https://oscimg.oschina.net/oscnet/up-8c07f9b00aebd755c3f0a894362cb7207f8.png" width="2002" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; text-align:left"&gt;填入 AI 服務器的地址和 API Key，以及要使用的模型，即可引入 AI Summary 的能力。夜鶯內置提供了一個提示詞，您可以根據自己的需求修改提示詞。&lt;/p&gt; 
&lt;p style="color:#333333; text-align:left"&gt;更多使用文檔，可以參考紅色箭頭指向的那個&lt;code&gt;使用説明&lt;/code&gt;。&lt;/p&gt; 
&lt;p style="color:#333333; text-align:left"&gt;事件處理器非常具有想象力，歡迎給我們投稿分享您的實踐案例。&lt;/p&gt; 
&lt;h3&gt;告警事件匿名訪問&lt;/h3&gt; 
&lt;p style="color:#333333; text-align:left"&gt;重新設計了告警事件匿名訪問的邏輯。您可以在告警事件詳情頁面找到&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;生成分享鏈接&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;的入口。最新邏輯是：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;默認不支持匿名訪問，必須登錄才能看到事件詳情&lt;/li&gt; 
 &lt;li&gt;通過&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;生成分享鏈接&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;可以生成一個帶 token（有過期時間）的 URL，訪問那個 URL 就可以匿名訪問了&lt;/li&gt; 
 &lt;li&gt;如果夜鶯配置文件 config.toml 中直接開啓了全局的匿名訪問，則匿名訪問的 token 就沒用了，只要訪問&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;/share/alert-his-events/${id}&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;就會直接放行，配置文件中的全局匿名訪問配置位置是：&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code class="language-toml"&gt;&lt;span&gt;&lt;span&gt;[&lt;span style="color:#a6e22e"&gt;Center&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;AnonymousAccess&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;PromQuerier&lt;/span&gt; = &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 就是下面這個&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;AlertDetail&lt;/span&gt; = &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p style="color:#333333; text-align:left"&gt;如果夜鶯開放在公網，請不要打開匿名訪問！&lt;/p&gt; 
&lt;p style="color:#333333; text-align:left"&gt;其他 Changelog 請參考&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fccfos%2Fnightingale%2Freleases%2Ftag%2Fv8.0.0-beta.14" target="_blank"&gt;github release&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;頁面。&lt;/p&gt; 
&lt;h2&gt;升級須知&lt;/h2&gt; 
&lt;p style="color:#333333; text-align:left"&gt;大家可以從夜鶯的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fccfos%2Fnightingale%2Freleases" target="_blank"&gt;github releases&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;頁面下載到最新的發佈包。&lt;/p&gt; 
&lt;p style="color:#333333; text-align:left"&gt;v6/v7 版本都可以平滑升級：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;建議先備份老版本的二進制、配置、integrations 目錄等，留好後路，然後就可以放心大膽升級了&lt;/li&gt; 
 &lt;li&gt;如果夜鶯所用的 DB 賬號有建表、改表權限，會自動更新表結構，否則就要參考代碼倉庫裏&amp;nbsp;docker/migratesql&amp;nbsp;手工改表結構了&lt;/li&gt; 
 &lt;li&gt;integrations 目錄可以直接替換成新版&lt;/li&gt; 
 &lt;li&gt;配置文件 etc/config.toml 建議認真 diff 一下&lt;/li&gt; 
 &lt;li&gt;容器啓動的話，直接拉取 latest 鏡像重啓即可&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;夜鶯產品特性介紹的 PPT&lt;/h2&gt; 
&lt;p style="color:#333333; text-align:left"&gt;有些人可能對夜鶯的產品還不太瞭解，特准備了一份 PPT，請參考：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fc9xudyniiq.feishu.cn%2Fslides%2FO6xJsUzZclzeUrdMb9DcynVtnSf" target="_blank"&gt;PPT&lt;/a&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356937/nightingale-release-v8beta-14</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356937/nightingale-release-v8beta-14</guid>
      <pubDate>Sun, 11 May 2025 00:17:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
  </channel>
</rss>
