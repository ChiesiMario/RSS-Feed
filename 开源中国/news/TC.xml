<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 繁體中文（台灣）</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已對該 RSS 進行格式化操作：中英字符之間插入空格、使用直角引號、標點符號修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-tw</language>
    <lastBuildDate>Mon, 23 Jun 2025 07:46:31 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>圖挖掘在反作弊場景的應用</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;本文全面探討了營銷活動反作弊與電商反作弊的圖算法應用。首先介紹了黑產薅取活動獎勵、刷單等作弊行為的背景，隨後深入講解了同人挖掘技術，包括同人建模、挖掘步驟及穩定性處理。接着，依次介紹了標籤傳播算法、Fraudar 算法、GCN 網絡的原理、優缺點及應用。最後，文章展望了未來圖算法在風控反作弊應用的發展方向，如多模態數據融合與動態圖實時計算，旨在應對黑產的快速演化，確保營銷活動的公平性與數據真實性。&lt;/p&gt; 
&lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
&lt;h1&gt;01 業務背景&lt;/h1&gt; 
&lt;p&gt;在營銷活動場景中，黑產團夥通過自動化手段大規模獲取活動獎勵，擠佔真實用戶權益造成營銷資金浪費，並污染數據指標導致活動效果失真，從而影響運營決策準確性。&lt;/p&gt; 
&lt;p&gt;以當前主流作弊模式為例，黑產實施路徑如下：&lt;/p&gt; 
&lt;p&gt;1. 資源準備階段：通過虛擬機登錄批量購買的百度賬號。&lt;/p&gt; 
&lt;p&gt;2. 任務執行階段：部署自動化腳本模擬用戶行為，如視頻播放、廣告點擊等。&lt;/p&gt; 
&lt;p&gt;3. 資金變現階段：使用分散的真實微信賬號進行提現操作。&lt;/p&gt; 
&lt;p&gt;在與反作弊的對抗中，黑產工具持續升級（如改機工具、IP 池輪換等），傳統特徵採集數據趨於分散。我們的反作弊體系從兩個方向不斷提升防禦能力：&lt;/p&gt; 
&lt;p&gt;1. 多維特徵挖掘，包括設備指紋、行為特徵以及環境特徵。&lt;/p&gt; 
&lt;p&gt;2. 關聯團夥分析，包括用戶操作模式量化、暱稱相似度分析以及基於賬號-設備-提現賬戶等信息建立關聯圖譜。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-b567c76d759b133c58127296b4127e848a9.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上圖為雲手機工具示例。&lt;/p&gt; 
&lt;p&gt;在電商場景中，存在着類似於營銷活動的批量團夥作弊，典型的即刷單。刷單作弊即非真實有購買需求的用戶（機器或眾包真人）為了提升店鋪的銷量、評分，替店鋪虛假的下單、評價，然後收取店鋪報酬的一種作弊方式。&lt;/p&gt; 
&lt;span id="OSC_h1_2"&gt;&lt;/span&gt; 
&lt;h1&gt;02 同人挖掘&lt;/h1&gt; 
&lt;span id="OSC_h2_3"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.1 同人建模&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;黑產為了節省成本往往存在賬號、設備共用的情況，因此我們定義「同人」概念：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;若參與活動的賬號、設備背後的主體相同，則為一個同人團夥。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在賬號之外，增加一個同人粒度進行數據監控和風險控制。例如，某人使用 5 個手機號分別註冊 5 個 uid，並使用 2 個身份證進行實名認證，每天在 3 個設備上參與活動，並將收益提取到 2 個微信賬號中，我們希望通過構圖將其歸類為一個同人團夥。&lt;/p&gt; 
&lt;span id="OSC_h3_4"&gt;&lt;/span&gt; 
&lt;h3&gt;2.1.1 同人挖掘&lt;/h3&gt; 
&lt;p&gt;挖掘步驟可分為以下 3 步：&lt;/p&gt; 
&lt;p&gt;1. 以用戶百度賬號為節點，共設備 ID/手機號/提現 ID/身份證號（加密）為邊構圖&lt;/p&gt; 
&lt;p&gt;2. 挖掘極大連通子圖，即有邊的強連通判為同人關係&lt;/p&gt; 
&lt;p&gt;3. 在多天參與活動的用戶上挖掘同人關係，並與歷史挖掘結果進行拼接，做同人 ID 穩定性處理&lt;/p&gt; 
&lt;span id="OSC_h3_5"&gt;&lt;/span&gt; 
&lt;h3&gt;2.1.2 穩定性處理&lt;/h3&gt; 
&lt;p&gt;在與歷史同人結果拼接時，可將情況分為以下幾類：&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-ab1a6ef3b27b0b9b955c9dc6b8740c0fc75.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;經過穩定性處理後，整體同人 ID 穩定性達 96.8%，排除已知合併等不穩定因素穩定性達 99.3%。&lt;/p&gt; 
&lt;span id="OSC_h2_6"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.2 挖掘結果&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;由於線上已有一對多業務規則，同人團夥會採用多對多打散以繞過規則。&lt;/p&gt; 
&lt;p&gt;以下展示部分典型團夥構圖：&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-7ce79c7f88211177a7133e1a96d8e3daec7.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h2_7"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;2.3 同人應用&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;作弊識別&lt;/strong&gt;&lt;/strong&gt;：按照團大小逐漸收斂，從同人作弊株連、團內作弊風險濃度高、同人且有作弊風險幾個思路進行策略迭代。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;發放打壓&lt;/strong&gt;&lt;/strong&gt;：對於作弊風險較低的羊毛黨用戶，業務側可根據情況進行獎勵發放打壓。&lt;/p&gt; 
&lt;span id="OSC_h1_8"&gt;&lt;/span&gt; 
&lt;h1&gt;03 標籤傳播算法及其應用&lt;/h1&gt; 
&lt;span id="OSC_h2_9"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.1 標籤傳播算法&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;標籤傳播算法（Label Propagation Algorithm，LPA）是一種基於圖的&lt;strong&gt;&lt;strong&gt;半監督&lt;/strong&gt;&lt;/strong&gt;學習算法，常用於社區檢測和節點分類任務。它通過迭代傳播標籤信息，利用數據結構的相似性來推斷未知節點的標籤。&lt;/p&gt; 
&lt;span id="OSC_h3_10"&gt;&lt;/span&gt; 
&lt;h3&gt;3.1.1 算法流程&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;輸入&lt;/strong&gt;：圖&lt;span class="math-tex"&gt;\(G=(V,E)\)&lt;/span&gt;，已知標籤節點集合&lt;span class="math-tex"&gt;\(V_L\)&lt;/span&gt;，未知標籤節點集合&lt;span class="math-tex"&gt;\(V_U\)&lt;/span&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;輸出&lt;/strong&gt;：所有節點預測標籤&lt;span class="math-tex"&gt;\({\{y_i\}}_{i\in V}\)&lt;/span&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;初始化階段&lt;/strong&gt;：為每個已標記節點&lt;span class="math-tex"&gt;\(v\in V_L\)&lt;/span&gt;分配固定標籤&lt;span class="math-tex"&gt;\(y_v\)&lt;/span&gt;，為每個未標記節點&lt;span class="math-tex"&gt;\(v\in V_U\)&lt;/span&gt;隨機分配標籤（或按先驗分佈分配）。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;迭代傳播階段&lt;/strong&gt;：對於每個未標記節點，將出現頻率最高的鄰居標籤作為自己的新標籤。&lt;/p&gt; 
&lt;p&gt;定義&lt;span class="math-tex"&gt;\(N(v)\)&lt;/span&gt;為節點&lt;span class="math-tex"&gt;\(v\)&lt;/span&gt;的鄰居集合，&lt;span class="math-tex"&gt;\(y_v^{(t)}\)&lt;/span&gt;為節點&lt;span class="math-tex"&gt;\(v\)&lt;/span&gt;在迭代&lt;span class="math-tex"&gt;\(t\)&lt;/span&gt;時的標籤，Ⅱ為指示函數（當&lt;span class="math-tex"&gt;\(y_u=l\)&lt;/span&gt;時為 1，否則為 0）。&lt;/p&gt; 
&lt;p&gt;無權圖標籤更新規則&lt;span class="math-tex"&gt;\(y_v^{(t+1)} = \argmax_l \displaystyle\sum_{u\in N(v)} \Pi(y_u^{t}=l)\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;加權圖標籤更新規則&amp;nbsp;&lt;span class="math-tex"&gt;\(y_v^{(t+1)} = \argmax_l \displaystyle\sum_{u\in N(v)} w_{uv} \cdot\Pi(y_u^{t}=l)\)&lt;/span&gt;，其中&lt;span class="math-tex"&gt;\(w_{uv}\)&lt;/span&gt;為邊權重。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;終止條件&lt;/strong&gt;：當迭代不再改變任何節點的標籤時；或達到最大迭代次數。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-9f71c1149e2ddfb7d9ae359bbdbcd6fc955.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上圖為標籤傳播示例。&lt;/p&gt; 
&lt;span id="OSC_h3_11"&gt;&lt;/span&gt; 
&lt;h3&gt;3.1.2 實踐細節&lt;/h3&gt; 
&lt;p&gt;最高頻率標籤不唯一時：隨機選擇（結果可能不穩定），或結合其他信息（如節點度數等）。&lt;/p&gt; 
&lt;p&gt;傳播順序：同步更新（所有節點同時更新，可能振盪），或異步更新（按隨機或度排序等順序逐個更新）。&lt;/p&gt; 
&lt;span id="OSC_h3_12"&gt;&lt;/span&gt; 
&lt;h3&gt;3.1.3 無監督改進&lt;/h3&gt; 
&lt;p&gt;在&lt;strong&gt;&lt;strong&gt;完全無監督&lt;/strong&gt;&lt;/strong&gt;的情況下，仍然可以通過改進方法實現社區檢測或聚類任務。面對局部最優問題，使用模塊度作為目標函數多次運行。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;算法流程：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1. 隨機初始化所有節點的標籤（如 1 到 K，K 為社區數）&lt;/p&gt; 
&lt;p&gt;2. 執行標準 LPA 迭代，直到收斂，計算模塊度 Q&lt;/p&gt; 
&lt;p&gt;3. 重複多次，選擇模塊度最高的劃分結果&lt;/p&gt; 
&lt;p&gt;模塊度指標的核心思想：社區內部的連接應顯著高於隨機情況&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(Q = \frac{1}{2m} \sum_{i,j}\Big[A_{ij}-\frac{k_ik_j}{2m}\Big]\delta(c_i,c_j)\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;其中&lt;span class="math-tex"&gt;\(A_{ij}\)&lt;/span&gt;為鄰接矩陣元素（節點&lt;span class="math-tex"&gt;\(i\)&lt;/span&gt;和&lt;span class="math-tex"&gt;\(j\)&lt;/span&gt;相連時為 1，否則為 0），&lt;span class="math-tex"&gt;\(k_i\)&lt;/span&gt;為節點&lt;span class="math-tex"&gt;\(i\)&lt;/span&gt;的度數，&lt;span class="math-tex"&gt;\(m\)&lt;/span&gt;為圖中總邊數&lt;span class="math-tex"&gt;\(m=\frac{1}{2}\sum_iki\)&lt;/span&gt;，&lt;span class="math-tex"&gt;\(c_i\)&lt;/span&gt;節點&lt;span class="math-tex"&gt;\(i\)&lt;/span&gt;所屬的社區，&lt;span class="math-tex"&gt;\(\delta(c_i,c_j)\)&lt;/span&gt;若&lt;span class="math-tex"&gt;\(c_i=c_j\)&lt;/span&gt;則為 1，否則為 0。&lt;/p&gt; 
&lt;span id="OSC_h3_13"&gt;&lt;/span&gt; 
&lt;h3&gt;3.1.4 算法優缺點&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;優點：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1. 計算高效：每輪迭代複雜度&lt;span class="math-tex"&gt;\(O(|E|)\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;2. 無需參數調優：完全基於圖結構&lt;/p&gt; 
&lt;p&gt;3. 自然並行化：節點更新可並行執行&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;侷限性：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1. 結果可能不穩定：受初始化順序影響&lt;/p&gt; 
&lt;p&gt;2. 僅利用拓撲結構：忽略節點特徵信息&lt;/p&gt; 
&lt;p&gt;3. 對稀疏圖效果差：鄰居信息不足時傳播受限&lt;/p&gt; 
&lt;span id="OSC_h2_14"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;3.2 在營銷活動場景的應用&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;在營銷活動場景中，黑產在資源準備和任務執行階段存在批量化的賬號生成和活動行為，在挖掘結果中也經常發現存在暱稱、行為序列等相似的聚集特徵。&lt;/p&gt; 
&lt;span id="OSC_h3_15"&gt;&lt;/span&gt; 
&lt;h3&gt;3.2.1 構圖&lt;/h3&gt; 
&lt;p&gt;以用戶賬號為節點，以暱稱與活動點位行為序列為例，分別採用針對字符串、序列相似度的建邊算法。&lt;/p&gt; 
&lt;p&gt;暱稱相似度：兩兩計算用戶暱稱的編輯距離，編輯距離越小説明兩個暱稱越相似。&lt;/p&gt; 
&lt;p&gt;序列相似度：拼接用戶活動點位（活動行為類型標記）-時間作為行為序列，將序列中的打點轉換為詞頻矩陣，使用 MinHash 估計 Jaccard 相似度。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;實踐細節&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1. 預處理，如做暱稱長度分桶、異常用戶篩選等，減少相似度計算量。&lt;/p&gt; 
&lt;p&gt;2. 使用局部敏感哈希（LSH）進行優化，減少搜索空間。&lt;/p&gt; 
&lt;p&gt;3. 可結合業務場景做相似度閾值過濾，縮減構圖輸入。&lt;/p&gt; 
&lt;span id="OSC_h3_16"&gt;&lt;/span&gt; 
&lt;h3&gt;3.2.2 團夥挖掘&lt;/h3&gt; 
&lt;p&gt;使用無監督的 LPA 算法進行團夥挖掘，設定團夥閾值、或結合業務場景添加其他特徵進行作弊識別。&lt;/p&gt; 
&lt;p&gt;下表為實際應用中，通過用戶行為序列相似挖掘出的一個團夥部分數據，其設備和地域並不聚集，但暱稱可看出為批量操作。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-cd8efca074b9009b15bde0cbb5f30c8cc46.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h1_17"&gt;&lt;/span&gt; 
&lt;h1&gt;04 Fraudar 算法及其應用&lt;/h1&gt; 
&lt;p&gt;在電商場景中，用戶-店鋪之間天然形成一種二部圖的結構，二部圖是指圖中的節點有兩類、邊有一類，兩類節點互相連接，每類節點本身之間沒有連接。Fraudar 算法是一種適用於二部圖結構的算法，下文詳細介紹我們在電商場景的應用。&lt;/p&gt; 
&lt;span id="OSC_h2_18"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;4.1 Fraudar 算法原理&lt;/strong&gt;&lt;/h2&gt; 
&lt;span id="OSC_h3_19"&gt;&lt;/span&gt; 
&lt;h3&gt;4.1.1 全局可疑度度量&lt;/h3&gt; 
&lt;p&gt;Fraudar 定義了一個全局度量&lt;span class="math-tex"&gt;\(g(S) = \frac{f(S)}{|S|}\)&lt;/span&gt;，其中：&lt;br&gt; ● &lt;span class="math-tex"&gt;\(f(S) = f_v(S) + f_{\epsilon}(S)\)&lt;/span&gt;：子網絡&lt;span class="math-tex"&gt;\(S\)&lt;/span&gt;中節點的可疑度之和（&lt;span class="math-tex"&gt;\(f_v\)&lt;/span&gt;）與邊的可疑度之和（&lt;span class="math-tex"&gt;\(f_{\epsilon}\)&lt;/span&gt;）；&lt;br&gt; ● 假設在一個用戶-商品二部圖中，那麼&lt;span class="math-tex"&gt;\(f_v(S)\)&lt;/span&gt;可以理解為用戶或商品的獨立可疑度，&lt;span class="math-tex"&gt;\(f_{\epsilon}(S)\)&lt;/span&gt;可以理解為用戶在商品下的訂單/評論的可疑度。&lt;br&gt; ● &lt;span class="math-tex"&gt;\(|S|\)&lt;/span&gt;：子網絡的規模（節點數）。&lt;br&gt; &lt;span class="math-tex"&gt;\(g(S)\)&lt;/span&gt;表示一個網絡的平均可疑度，滿足以下四個屬性：&lt;/p&gt; 
&lt;p&gt;1. （節點可疑度）當節點總數、邊可疑度保持一致時，由較高可疑度的節點組成的網絡比由較低可疑度節點組成的網絡更可疑。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(|S| = |S'| \land f_{\epsilon}(S) = f_{\epsilon}(S') \land f_v(S) &amp;gt; f_v(S') \Rightarrow g(S) &amp;gt; g(S')\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;2. （邊可疑度）其他條件不變，在網絡中添加邊會增加該網絡的可疑度。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(e \notin \epsilon \Rightarrow g(S(v, \epsilon \cup \{e\})) &amp;gt; g(S(v, \epsilon))\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;3. （大小）假設節點和邊的權重都相等，邊的密度也相等，那麼更大的網絡比小的網絡更可疑。其中邊的密度$\rho(S)$定義為網絡中的邊數除以它可能的最大邊數。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(|S| &amp;gt; |S'| \land S \supset S' \land \rho(S) = \rho(S') \Rightarrow g(S) &amp;gt; g(S')\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;4. (集中度) 較小的網絡比相同總可疑度但規模更大的網絡更可疑。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(|S| &amp;lt; |S'| \land f(S) = f(S') \Rightarrow g(S) &amp;gt; g(S')\)&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_20"&gt;&lt;/span&gt; 
&lt;h3&gt;4.1.2 抗偽裝設計&lt;/h3&gt; 
&lt;p&gt;即使虛假賬戶添加大量正常連接（偽裝），算法仍能通過識別局部密集子網絡發現異常，因為偽裝行為會導致整體網絡稀疏化，而欺詐子網絡仍保持高密度。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-12ea6c9656a0117fc3f04e647772db3cd0d.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上圖是虛假賬戶常用的偽裝方法，假設為用戶-商品網絡，那麼（a）刷單用戶通過向正常商品隨機下單偽裝；（b）刷單用戶通過向正常商品添加有偏的偽裝；（c）刷單用戶劫持一些正常賬戶。&lt;/p&gt; 
&lt;p&gt;算法使用了列權重作為邊權的方式來抗偽裝，即利用商品的邊數來定義邊權。在一個用戶商品圖中，算法先確定商品節點的數量，利用 1/log(商品節點邊數+5) 確定邊權 （邊可疑度），然後按照邊權彙總求取商品節點、用戶節點的權重（節點可疑度）。&lt;/p&gt; 
&lt;span id="OSC_h3_21"&gt;&lt;/span&gt; 
&lt;h3&gt;4.1.3 算法實現流程&lt;/h3&gt; 
&lt;p&gt;利用列權重定義邊權能夠抵抗虛假賬戶向正常商品增加邊的偽裝，因為是往正常商品增加邊，不會影響欺詐商品的邊數，也即三種偽裝方式的欺詐塊仍然是高權重的/密集的。而如果使用行權重，那麼一個用戶通過向正常商品增加邊，就可以稀釋自己的欺詐邊的可疑度，達到偽裝的目的。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-3f0893250a1894485d2ba5248e81434106c.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;上圖是 Fraudar 算法的步驟。迭代移除當前優先級最高的節點（可疑度貢獻最低的節點），逐步縮小網絡規模，直至所有節點被移除。每一步記錄剩餘子網絡的全局可疑度&lt;span class="math-tex"&gt;\(g(S)\)&lt;/span&gt;。在所有迭代步驟中，&lt;span class="math-tex"&gt;\(g(S)\)&lt;/span&gt;值會先增大後減小，算法保留每一步的迭代結果，選擇&lt;span class="math-tex"&gt;\(g(S)\)&lt;/span&gt;達到最大值的子網絡作為最可疑的欺詐團夥。&lt;/p&gt; 
&lt;p&gt;由於遍歷刪除圖中可疑度最低的節點是個&lt;span class="math-tex"&gt;\(O(|V|^2)\)&lt;/span&gt;的操作（迭代&lt;span class="math-tex"&gt;\(|V|\)&lt;/span&gt;次，每次找到可疑度最低的節點&lt;span class="math-tex"&gt;\(O(|V|)\)&lt;/span&gt;），因此算法引入了優先樹（小頂堆），葉子節點對應圖中的節點，父節點記錄子節點中的最高優先級，以此實現快速訪問和更新優先級。優化後算法需要迭代邊數次，每次查找和更新節點優先級的複雜度變為&lt;span class="math-tex"&gt;\(O(log|V|)\)&lt;/span&gt;，算法的總時間複雜度為&lt;span class="math-tex"&gt;\(O(|\epsilon| log|V|)\)&lt;/span&gt;。&lt;/p&gt; 
&lt;p&gt;另外，在實際應用中，只獲得可疑度最大的子圖可能並不夠用，可以在獲取一個可疑度最大子圖後將其中原始圖中刪除，然後再在剩餘的圖中獲取次可疑的子圖，循環往復得到多個可疑子圖。&lt;/p&gt; 
&lt;span id="OSC_h3_22"&gt;&lt;/span&gt; 
&lt;h3&gt;4.1.4 優缺點及改進方向&lt;/h3&gt; 
&lt;p&gt;優勢：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 抗偽裝能力&lt;/strong&gt;&lt;/strong&gt;通過全局度量而非局部密度，算法能抵抗虛假賬戶添加正常連接的行為，即使部分節點被「污染」，仍能準確識別核心欺詐簇。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 高效性與可擴展性&lt;/strong&gt;&lt;/strong&gt;利用優先樹結構優化節點移除操作，時間複雜度為&lt;span class="math-tex"&gt;\(O(|\epsilon| log |V|)\)&lt;/span&gt;，適用於大規模網絡。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 實際應用場景&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;電商刷單檢測&lt;/strong&gt;&lt;/strong&gt;：識別虛假評論形成的密集用戶-商品子網絡。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;社交網絡反欺詐&lt;/strong&gt;&lt;/strong&gt;：檢測偽卡交易或虛假關注關係。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;金融反洗錢&lt;/strong&gt;&lt;/strong&gt;：發現異常交易團夥。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_23"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;4.2 Fraudar 算法應用&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-928573e7eca9a5c3ce222a41201de5f7d3a.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_24"&gt;&lt;/span&gt; 
&lt;h3&gt;4.2.1 構圖與關係降噪&lt;/h3&gt; 
&lt;p&gt;實踐中，我們利用用戶-店鋪的訂單關係構建二部圖，並且為了提升二部圖中的風險濃度，對低風險店鋪等做了剪枝實現關係的降噪，然後輸入 Fraudar 算法挖掘異常子圖。&lt;/p&gt; 
&lt;p&gt;原始的 Fraudar 算法只能挖掘出風險最高的一個子圖，但實際業務中，一般不止一個作弊團夥，因此我們在每次運行 Fraudar 算法產生一個子圖後，就將這個子圖從原始圖中裁剪掉，再次運行 Fraudar 算法得到次可疑的子圖，即循環 Fraudar。通過這種方法，我們可以獲得期望數量的異常子圖。&lt;/p&gt; 
&lt;span id="OSC_h3_25"&gt;&lt;/span&gt; 
&lt;h3&gt;4.2.2 結合監督模型&lt;/h3&gt; 
&lt;p&gt;挖掘出的風險子圖由用戶和店鋪構成，而實際業務的識別目標是訂單，且風險子圖中會摻雜少量正常用戶的訂單。為了進一步提升算法識別結果的準確率，我們將挖掘出的風險子圖輸入到 LR 模型進行精細判別。LR 模型使用用戶、店鋪的特徵作為輸入，異常訂單為正樣本、正常訂單為負樣本訓練，最後在風險子圖的用戶、店鋪的訂單上區分出異常訂單並落地到業務。&lt;/p&gt; 
&lt;span id="OSC_h1_26"&gt;&lt;/span&gt; 
&lt;h1&gt;05 GCN 模型及其應用&lt;/h1&gt; 
&lt;p&gt;上文提到 Fraudar 模型為了提升圖的風險濃度做了剪枝降噪，這樣提升算法精準的同時會損失一部分召回。並且 Fraudar 本身是無監督模型，還需要結合監督模型做精細化判別。因此我們嘗試了端到端的 GCN 模型，提升召回的同時簡化了識別鏈路。&lt;/p&gt; 
&lt;span id="OSC_h2_27"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;5.1 GCN 模型原理&lt;/strong&gt;&lt;/h2&gt; 
&lt;span id="OSC_h3_28"&gt;&lt;/span&gt; 
&lt;h3&gt;5.1.1 GCN 的核心思想：消息傳遞與聚合&lt;/h3&gt; 
&lt;p&gt;GCN 的核心是通過鄰域聚合更新節點特徵，其本質是讓每個節點從鄰居節點中提取有效信息：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 基礎聚合公式：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(H^{(l+1)} = \sigma\left(\hat{D}^{-1/2} \hat{A} \hat{D}^{-1/2} H^{(l)} W^{(l)}\right)\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;其中：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span class="math-tex"&gt;\(\hat{A} = A + I\)&lt;/span&gt;：鄰接矩陣加入自連接，防止節點自身信息丟失。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span class="math-tex"&gt;\(\hat{D}\)&lt;/span&gt;：度矩陣的對稱歸一化，解決節點度數差異導致的權重偏差。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span class="math-tex"&gt;\(W^{(l)}\)&lt;/span&gt;：可學習的權重矩陣，用於特徵變換，即卷積核。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span class="math-tex"&gt;\(H^{(l)}\)&lt;/span&gt;：激活值，對於輸入層可以理解成特徵矩陣。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 關鍵設計：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;歸一化：通過&lt;span class="math-tex"&gt;\(\hat{D}^{-1/2} \hat{A} \hat{D}^{-1/2}\)&lt;/span&gt;避免度數高的節點主導信息傳播，使模型更穩定。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;非線性激活：如 ReLU 函數，增強模型的表達能力。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_29"&gt;&lt;/span&gt; 
&lt;h3&gt;5.1.2 數學視角：從拉普拉斯矩陣到頻譜域卷積&lt;/h3&gt; 
&lt;p&gt;GCN 的理論基礎源自圖譜理論，通過將圖信號轉換到頻域進行卷積操作，核心概念：&lt;/p&gt; 
&lt;p&gt;1. 拉普拉斯矩陣：定義為&lt;span class="math-tex"&gt;\(L = D - A\)&lt;/span&gt;，其特徵分解&lt;span class="math-tex"&gt;\((L = U \Lambda U^T)\)&lt;/span&gt;將圖結構映射到頻域空間。&lt;/p&gt; 
&lt;p&gt;2. 圖傅裏葉變換：利用特徵向量矩陣&lt;span class="math-tex"&gt;\(U\)&lt;/span&gt;對節點特徵進行頻域投影，卷積操作簡化為頻域的乘積。&lt;/p&gt; 
&lt;p&gt;a. 卷積定理：函數卷積的傅裏葉變換是函數傅裏葉變換的乘積，即對於函數&lt;span class="math-tex"&gt;\(f(t)\)&lt;/span&gt;與&lt;span class="math-tex"&gt;\(h(t)\)&lt;/span&gt;兩者的卷積是其函數傅裏葉變換乘積的逆變換。&lt;br&gt; b. 圖傅裏葉變換把圖上定義的任意向量，表示成了拉普拉斯矩陣特徵向量的線性組合。&lt;/p&gt; 
&lt;p&gt;3. 切比雪夫近似：為降低計算複雜度，GCN 採用一階近似（僅考慮直接鄰居），公式退化為經典聚合形式。&lt;br&gt; 第一代 GCN：將輸入特徵通過圖傅裏葉變換從空域映射到譜域，做卷積運算後再映射回空域。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(Y = U \cdot g_\theta(\Lambda) \cdot U^T X\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;第二代 GCN：利用切比雪夫多項式近似&lt;span class="math-tex"&gt;\(g_\theta(\Lambda)\)&lt;/span&gt;，避免&lt;span class="math-tex"&gt;\(O(N^3)\)&lt;/span&gt;複雜度的拉普拉斯矩陣分解。&lt;br&gt; 卷積核用 K 階段切比雪夫多項式展開：&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(g_\theta(\Lambda) = \sum_{k=0}^K \theta_k T_k(\tilde{\Lambda})\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;最終 GCN 公式：&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(Y = \sum_{k=0}^K \theta_k T_k(\tilde{L}) X\)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;第三代 GCN：只保留一階切比雪夫多項式，並加入自環和歸一化。&lt;/p&gt; 
&lt;p&gt;&lt;span class="math-tex"&gt;\(H^{(l+1)} = \sigma \left( \hat{A} H^{(l)} W^{(l)} \right)\)&lt;/span&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_30"&gt;&lt;/span&gt; 
&lt;h3&gt;5.1.3 模型結構：輕量化與高效性&lt;/h3&gt; 
&lt;p&gt;GCN 的典型結構通常僅需 2-4 層即可完成高效學習，原因在於：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 層數限制&lt;/strong&gt;&lt;/strong&gt;：過深的網絡會導致&lt;strong&gt;&lt;strong&gt;過平滑（圖中同一連通分量的節點特徵趨同）&lt;/strong&gt;&lt;/strong&gt;，因此實踐中常用淺層架構。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 參數共享&lt;/strong&gt;&lt;/strong&gt;：每層共享權重矩陣，大幅減少參數量，適合處理大規模圖數據。（相對於一個節點一個權重矩陣的全連接形式）&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 應用場景&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;節點分類&lt;/strong&gt;&lt;/strong&gt;（如電商刷單用戶檢測）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;圖分類&lt;/strong&gt;&lt;/strong&gt;（如分子屬性判斷）&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;鏈接預測&lt;/strong&gt;&lt;/strong&gt;（如推薦系統好友關係推斷）&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h3_31"&gt;&lt;/span&gt; 
&lt;h3&gt;5.1.4 GCN 的優缺點與改進方向&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 優勢&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;天然融合圖結構與節點特徵，適合複雜關係建模。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;計算高效，支持稀疏矩陣優化。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 侷限&lt;/strong&gt;&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;過平滑問題&lt;/strong&gt;&lt;/strong&gt;：深層網絡性能下降。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;strong&gt;靜態圖假設&lt;/strong&gt;&lt;/strong&gt;：難以處理動態變化的圖結構。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span id="OSC_h2_32"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;strong&gt;5.2 GCN 模型應用&lt;/strong&gt;&lt;/h2&gt; 
&lt;span id="OSC_h3_33"&gt;&lt;/span&gt; 
&lt;h3&gt;5.2.1 構圖&lt;/h3&gt; 
&lt;p&gt;利用訂單作為節點、訂單之間的屬性關聯關係構建同構圖。特徵上採用用戶、 店鋪等風險屬性刻畫訂單，異常訂單為正樣本、正常訂單為負樣本。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="圖片" src="https://oscimg.oschina.net/oscnet/up-e413211583231cf96809e8be84b96306075.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;span id="OSC_h3_34"&gt;&lt;/span&gt; 
&lt;h3&gt;5.2.2 風險訂單挖掘&lt;/h3&gt; 
&lt;p&gt;由於實際業務中有標籤的風險訂單、正常訂單僅是全量訂單的一小部分，因此我們採用了半監督的方式訓練 GCN 模型，利用有標籤的訂單對無標籤的訂單進行推理。GCN 模型設計上針對的是靜態圖，應用中我們採用了隨着時間窗口滾動構圖的方式來適應動態變化的數據，滾動過程中排除了 GCN 模型本身推理的標籤，防止對模型自身結果過擬合。&lt;/p&gt; 
&lt;p&gt;這裏解釋下，為什麼我們不採用一個訓練好的模型在線上不斷的推理，而是滾動的訓練推理。這是因為 GCN 模型從原理上屬於直推式模型，通常的訓練好一個模型後不斷的對新數據推理的模型是歸納式模型。GCN 的直推式，本質上是因為卷積計算用到了圖的拉普拉斯矩陣，圖發生了變化，那麼這個拉普拉斯矩陣也就發生變化，訓練的模型也就失效了。&lt;/p&gt; 
&lt;p&gt;既然 GCN 是直推式的，這裏又產生一個問題，為什麼我們不使用歸納式模型呢？事實上，我們對比了 GraphSage 等模型在同樣圖結構、特徵數據上的效果，在我們的場景中比 GCN 效果差，為了保證業務效果我們最終採用的是 GCN。&lt;/p&gt; 
&lt;span id="OSC_h1_35"&gt;&lt;/span&gt; 
&lt;h1&gt;06 總結和展望&lt;/h1&gt; 
&lt;p&gt;在風控反作弊的業務中，我們落地了 LPA、Fraudar、GCN 等算法並取得了良好的效果，未來我們希望做的更多。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 多模態數據融合：從單一圖譜到全域關聯&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;未來風控需整合圖數據、時序數據（如交易頻率）、文本數據（如聊天記錄）等多模態信息。例如，通過圖嵌入技術將設備、IP、地理位置等實體統一表徵，構建全域風險畫像。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 動態圖實時計算：應對黑產快速演化&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;當前黑產通過「少邊構造」（刻意斷開部分關聯）繞過靜態圖檢測，需引入動態圖算法（如時序 GNN）實時捕捉行為演變，並結合增量計算優化性能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 可解釋性與對抗防禦：提升算法可信度&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;探索可視化工具（如子圖歸因分析）解釋 GCN 決策邏輯，並研發對抗訓練技術抵禦黑產對模型的逆向攻擊。&lt;/p&gt; 
&lt;p&gt;圖算法正從「輔助工具」升級為風控系統的核心引擎，而未來的挑戰在於如何平衡技術效能、業務合規與用戶體驗。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4939618/blog/18627800</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/18627800</guid>
      <pubDate>Mon, 23 Jun 2025 07:22:28 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>中國軟件基因庫 Gitee，如何扛起民營科技企業時代使命</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;當今世界格局，全球化退火，大國博進入弈白熱化，內循環成為主戰場，在此百年未有之大變局下，民營企業必須「跟隨國家戰略」，成為國家「政府、國企、民企戰略共同體」中的重要一員，才能分享新一輪政策與市場紅利。&lt;/p&gt; 
&lt;p&gt;開源中國於 2013 年發佈代碼託管平台 Gitee，是國內領先的代碼託管服務平台，並於 2020 年牽頭建設工信部國家開源託管平台項目。Gitee 於 2017 年上線發佈針對企業級的研發效能平台 Gitee 企業版。同時，開源中國自 2020 年起開始深耕 DevOps 全生命週期產品國產替代方案，在滿足開發者需求的同時，打造出一個自主創新、安全可信的本土開源軟件工具與生態，減少開發者對海外開源軟件的過度依賴，構建安全可控的中國信息化體系。&lt;/p&gt; 
&lt;p&gt;Gitee 以「國家代碼庫備份」和「國產替代」雙核驅動，扛起民營科技企業的時代使命：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;span style="color:#e67e22"&gt;國家代碼庫備份：&lt;/span&gt;&lt;/strong&gt;構建國內最大、最安全、最全量的開源代碼備份網絡，承擔「國家級軟件基因庫」職責。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;span style="color:#e67e22"&gt;國產替代先鋒：&lt;/span&gt;&lt;/strong&gt;深度兼容國際前沿技術生態，堅持走信創自主可控道路，實現從源碼託管到 DevOps 工具鏈的全流程國產替代。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;&lt;span style="color:#27ae60"&gt;&lt;strong&gt;以備份能力築牢「數字長城」&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;「備份戰略下的產業複製和轉移」是未來民企獲取紅利的重要通道。Gitee 的「多中心異地容災、多維度鏡像同步」體系，正是這一戰略在代碼領域的具象化：&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#e67e22"&gt;&lt;strong&gt;千萬倉庫一鍵同步：&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;與 GitHub、GitLab 等全球主流平台實時鏡像，同步延遲低於數分鐘，解決境外訪問不穩、政策風險及突發故障帶來的斷鏈隱患。&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#e67e22"&gt;&lt;strong&gt;數據主權·安全可控：&lt;/strong&gt;&amp;nbsp;&lt;/span&gt;完全自主研發的加密存儲與訪問控制，從底層保障代碼資產的主權與機密性。&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#e67e22"&gt;&lt;strong&gt;智能完整性檢測：&lt;/strong&gt;&amp;nbsp;&lt;/span&gt;引入 AI 驅動的代碼健康掃描，定期校驗、自動修復，構築「代碼防火牆」，確保備份倉庫的可用性與可信度。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0620/163359_FY3B_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0620/163412_u877_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;&lt;span style="color:#27ae60"&gt;&lt;strong&gt;深耕 DevOps 全生命週期國產替代&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;新一輪「國產替代」浪潮正加速推進，民企要「成為國家戰略性新興產業的先鋒」 。Gitee 立足國產基礎設施，自 2020 年以來，深耕 DevOps 全生命週期國產替代方案，在滿足開發者需求的同時，打造出一個自主創新、安全可信的本土開源軟件工具與生態，減少開發者對海外開源軟件的過度依賴，構建安全可控的中國信息化體系。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0620/163442_nIuC_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0620/163451_0aZV_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style="color:#e67e22"&gt;&lt;strong&gt;全鏈路國產化：&lt;/strong&gt;&lt;/span&gt;從託管、CI/CD、製品倉庫到安全審計、項目管理，提供與國際同級、符合合規要求的一站式開發運營平台。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style="color:#e67e22"&gt;&lt;strong&gt;生態互聯互通：&lt;/strong&gt;&lt;/span&gt;與阿里雲、華為雲、騰訊雲等國產雲廠商深度集成，構建覆蓋操作系統、數據庫、網絡安全等全棧國產軟件圖譜。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style="color:#e67e22"&gt;&lt;strong&gt;本土化社區運營：&lt;/strong&gt;&lt;/span&gt;用中文場景深度激勵高校與企業工程師參與開源，培養中國軟件創新的「基因土壤」。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;&lt;span style="color:#27ae60"&gt;&lt;strong&gt;展望未來：讓 Gitee 成為中國軟件基因銀行&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;作為中國開源基礎設施奠基者，開源中國運營着 1800 萬開發者聚集的 &lt;a href="https://oschina.net/"&gt;oschina.net&lt;/a&gt; 社區及代碼託管平台 Gitee，服務 36 萬企業級用戶。開源中國自主研發的 DevOps 工具鏈已在金融、軍工等關鍵領域實現 80% 市場滲透率，成為信創替代工程的標杆案例，驗證了開源商業化的中國路徑。&lt;/p&gt; 
&lt;p&gt;2024 年，開源中國推出對標 HuggingFace 的 AI 大模型平台 "模力方舟 (&lt;a href="https://ai.gitee.com/" target="_blank"&gt;moark.com&lt;/a&gt;)"，首創 "模型數據 - 算力調度 - 應用開發" 全棧服務體系。&lt;/p&gt; 
&lt;p&gt;平台已實現三大突破：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style="color:#e67e22"&gt;&lt;strong&gt;生態開放化&lt;/strong&gt;：&lt;/span&gt;聚合數萬開源模型，打造 AI 應用創新基座；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style="color:#e67e22"&gt;&lt;strong&gt;服務一體化&lt;/strong&gt;：&lt;/span&gt;提供從模型體驗、推理訓練到應用部署的全生命週期服務；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style="color:#e67e22"&gt;&lt;strong&gt;算力國產化&lt;/strong&gt;：&lt;/span&gt;完成多家國產 GPU 深度適配，成功運行 DeepSeek-V3 等千億級模型。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;開源中國下一步將以模力方舟為核心，打造全方位的 AI 業務佈局，助力 AI 應用創新、科技人才培養和新質生產力提升。在「十四五」「十五五」規劃與「碳中和」「數字中國」等國家戰略的交匯期，Gitee 將繼續：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style="color:#e67e22"&gt;&lt;strong&gt;升級備份體系&lt;/strong&gt;：&lt;/span&gt;引入更智能的災備演練與災後恢復機制，讓「國家級代碼基因庫」永不缺席。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style="color:#e67e22"&gt;&lt;strong&gt;引領國產替代&lt;/strong&gt;：&lt;/span&gt;與更多國產廠商共建聯動機制，推動開發工具、語言運行時、操作系統等關鍵層面全面國產化。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;span style="color:#e67e22"&gt;&lt;strong&gt;深耕社會價值&lt;/strong&gt;：&lt;/span&gt;在穩就業、促消費方面持續發力，讓技術創新與社會發展形成良性循環。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;讓我們攜手，把握「備份與國產替代」的時代脈搏，讓 Gitee 不僅是「中國版 GitHub」，更是中國軟件基因庫的守護者與創新引擎，共築數字中國新未來！&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356519</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356519</guid>
      <pubDate>Fri, 20 Jun 2025 14:01:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Linux libblockdev 本地提權漏洞</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;h2&gt;漏洞描述&lt;/h2&gt; 
&lt;p&gt;libblockdev 是 Linux 上用於塊設備管理的底層庫，提供統一接口支持分區、文件系統、LVM 和加密等操作。udisks 是基於 D-Bus 的服務，封裝調用 libblockdev 等工具，為桌面環境和應用程序提供掛載、格式化等存儲管理功能。&lt;/p&gt; 
&lt;p&gt;受影響版本中，libblockdev 在掛載磁盤分區時遺漏 nosuid 安全標誌，導致可在掛載點執行具備特殊權限（如 root 權限）的文件。攻擊者擁有 allow_active 權限時，可利用該缺陷掛載惡意文件並執行，進而獲取 root 權限。&lt;/p&gt; 
&lt;p&gt;由於 libblockdev 默認在較多 Linux 發行版中提供，該漏洞影響 Ubuntu、Debian、Fedora、openSUSE 等主流發行版，但由於 allow_active 權限限制，通常難以單獨利用，在 SUSE 系統中可結合 CVE-2025-6018 漏洞可將 ssh 遠程低權限用戶提升為 allow_active 用戶實現遠程利用。&lt;/p&gt; 
&lt;p&gt;修復版本通過棄用系統默認掛載選項，顯式添加 nosuid 和 nodev，防止本地提權漏洞。&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th&gt;漏洞名稱&lt;/th&gt; 
   &lt;th&gt;Linux libblockdev 本地提權漏洞&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;漏洞類型&lt;/td&gt; 
   &lt;td&gt;權限管理不當&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;發現時間&lt;/td&gt; 
   &lt;td&gt;2025-06-19&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;漏洞影響廣度&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;MPS 編號&lt;/td&gt; 
   &lt;td&gt;MPS-mqf0-usbi&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CVE 編號&lt;/td&gt; 
   &lt;td&gt;CVE-2025-6019&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CNVD 編號&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;影響範圍&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;libblockdev-lvm-dbus@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-lvm-dbus@影響所有版本&lt;/li&gt; 
 &lt;li&gt;python3-blockdev@影響所有版本&lt;/li&gt; 
 &lt;li&gt;python3-blockdev@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-crypto@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-dm@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-btrfs-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-kbd@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-lvm@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-mpath@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-mpath-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-crypto-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-btrfs@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-kbd-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-loop@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-mdraid@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-mdraid-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-nvdimm-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-plugins-all@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-swap@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-dm-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-fs@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-fs-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-loop-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-nvdimm@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-lvm-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-part@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-s390@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-swap-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-part-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-utils@影響所有版本&lt;/li&gt; 
 &lt;li&gt;python2-blockdev@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-s390-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-vdo@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-utils-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-vdo-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-btrfs@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-btrfs-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-fs-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-loop-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-mdraid-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-part@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-s390@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-crypto@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-crypto-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-kbd-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-loop@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-mpath-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-nvdimm-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-kbd@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-lvm@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-mpath@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-dm@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-dm-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-fs@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-lvm-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-mdraid@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-nvdimm@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-plugins-all@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-part-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-s390-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-utils@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-vdo-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-utils-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;python2-blockdev@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-swap-devel@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-vdo@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev-swap@影響所有版本&lt;/li&gt; 
 &lt;li&gt;libblockdev@(-∞, 2.30)&lt;/li&gt; 
 &lt;li&gt;libblockdev@[3.0, 3.2.2)&lt;/li&gt; 
 &lt;li&gt;libblockdev@[3.3.0, 3.3.1)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;修復方案&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;將組件 libblockdev 升級至 2.30 及以上版本&lt;/li&gt; 
 &lt;li&gt;將組件 libblockdev 升級至 3.2.2 及以上版本&lt;/li&gt; 
 &lt;li&gt;將組件 libblockdev 升級至 3.3.1 及以上版本&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;參考鏈接&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.oscs1024.com%2Fhd%2FMPS-mqf0-usbi" target="_blank"&gt;https://www.oscs1024.com/hd/MPS-mqf0-usbi&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fstoraged-project%2Flibblockdev%2Fcommit%2F4e35eb93e4d2672686789b9705623cc4f9f85d02" target="_blank"&gt;Commit&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;    &lt;/p&gt; 
&lt;h2&gt;免費情報訂閲&amp;amp;代碼安全檢測&lt;/h2&gt; 
&lt;p&gt;OSCS 是國內首個開源軟件供應鏈安全社區，社區聯合開發者幫助全球頂級開源項目解決安全問題，並提供實時的安全漏洞情報，同時提供專業的代碼安全檢測工具為開發者免費使用。社區開發者可以通過配置飛書、釘釘、企業微信機器人獲取一手的情報。&lt;/p&gt; 
&lt;p&gt;免費代碼安全檢測工具： &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.murphysec.com%2F%3Fsrc%3Dosc" target="_blank"&gt;https://www.murphysec.com/?src=osc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;免費情報訂閲： &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.oscs1024.com%2Fcm%2F%3Fsrc%3Dosc" target="_blank"&gt;https://www.oscs1024.com/cm/?src=osc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;具體訂閲方式詳見： &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.oscs1024.com%2Fdocs%2Fvuln-warning%2Fintro%2F%3Fsrc%3Dosc" target="_blank"&gt;https://www.oscs1024.com/docs/vuln-warning/intro/?src=osc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-4aeef4048430ca1baea7afb51fe0f5dc3dd.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356507</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356507</guid>
      <pubDate>Fri, 20 Jun 2025 12:53:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>ONLYOFFICE 桌面編輯器 9.0 版本已發佈：更多文件支持、AI 增強、圖表查看器等更新</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;繼&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/news/356053/onlyoffice-9-0-released" target="_blank"&gt;&lt;u&gt;ONLYOFFICE&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/u&gt;&lt;u&gt;文檔&lt;/u&gt;&lt;u&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;9.0&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/u&gt;&lt;u&gt;版本&lt;/u&gt;&lt;/a&gt;重磅發佈之後，&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdesktop.aspx%3Futm_source%3Dblog%26utm_medium%3Dpost%26utm_campaign%3Ddesktop_9.0" target="_blank"&gt;&lt;u&gt;桌面&lt;/u&gt;&lt;u&gt;辦公&lt;/u&gt;&lt;u&gt;套件&lt;/u&gt;&lt;/a&gt;也迎來了適用於 Windows、Linux 和 macOS 的新版本。ONLYOFFICE 桌面編輯器 9.0 版本不僅繼承了自託管版本主要的新功能和改進，還進行了一些獨特的更新。閲讀本文，瞭解詳情。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"&gt;&lt;img alt="ONLYOFFICE 桌面編輯器 9.0 版本已發佈：全新界面與起始窗口、更廣泛的文件支持、圖表查看器、AI 增強及更多精彩功能" height="708" src="https://oscimg.oschina.net/oscnet//b4518b79ecb785e29458460a5e3a1636.png" width="1400" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;讓我們先快速回顧一下新版在線版本的主要功能，這些功能同樣適用於 ONLYOFFICE 桌面編輯器 9.0 版本。&lt;/p&gt; 
&lt;h2&gt;文檔、表格、幻燈片和 PDF 全新界面&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;在 9.0 版本中，您可以切換到編輯器新添加的淺色和深色主題，使用全新主題界面。這些新界面中，UI 元素與圖標均經過重新設計，界面更加清晰易用，提供現代直觀的用戶體驗。&lt;br&gt; 位置：視圖選項卡 -&amp;gt; 界面主題 -&amp;gt; 淺色/深色主題&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"&gt;&lt;img alt="ONLYOFFICE 桌面編輯器 9.0 版本已發佈：全新界面與起始窗口、更廣泛的文件支持、圖表查看器、AI 增強及更多精彩功能" height="892" src="https://oscimg.oschina.net/oscnet//f3801e5c980fb14e4c2217879f10e290.png" width="1467" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;除了編輯器界面全面升級外，桌面應用的起始窗口也重新進行了設計。簡潔的設計讓您可以更快找到所需功能，避免被無關內容幹擾。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"&gt;&lt;img alt="ONLYOFFICE 桌面編輯器 9.0 版本已發佈：全新界面與起始窗口、更廣泛的文件支持、圖表查看器、AI 增強及更多精彩功能" height="891" src="https://oscimg.oschina.net/oscnet//e1bded6037a7ffe9e79ecbd323644d09.png" width="1467" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;全新圖表查看器&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;9.0 版本引入了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdiagram-viewer.aspx%3Futm_source%3Dblog%26utm_medium%3Dpost%26utm_campaign%3Ddesktop_9.0" target="_blank"&gt;&lt;u&gt;ONLYOFFICE&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/u&gt;&lt;u&gt;圖表&lt;/u&gt;&lt;u&gt;查看器&lt;/u&gt;&lt;/a&gt;，使套件功能大幅拓展。您可以在各種平台和設備上打開和查看圖表，包括電腦和筆記本。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"&gt;&lt;img alt="ONLYOFFICE 桌面編輯器 9.0 版本已發佈：全新界面與起始窗口、更廣泛的文件支持、圖表查看器、AI 增強及更多精彩功能" height="891" src="https://oscimg.oschina.net/oscnet//6936d946ee8ae99acd5889a55c60a870.png" width="1467" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;新增文件格式支持&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;除了 ONLYOFFICE&amp;nbsp;圖表查看器最新版所支持的&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;.vsdx&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;文件，9.0 版本還支持以下文件格式：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Markdown 文件（&lt;strong&gt;.md&lt;/strong&gt;）&lt;/li&gt; 
 &lt;li&gt;OpenDocument 圖形文件（&lt;strong&gt;.odg&lt;/strong&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;.xlsb&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;文件（無需預先轉換即可編輯）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;重磅 AI 功能增強&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;除了界面與格式支持方面的提升，9.0 版本還集成了實用的 AI 工具，以幫助提高您的工作效率：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;使用 OCR 功能從掃描 PDF 文件中提取文本；&lt;/li&gt; 
 &lt;li&gt;使用表格新 AI 功能，在表格中智能應用公式或進行復雜數據分析；&lt;/li&gt; 
 &lt;li&gt;藉助 AI，使用指令創建新的 ONLYOFFICE 宏，並快速轉換 VBA 宏。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"&gt;&lt;img alt="ONLYOFFICE 桌面編輯器 9.0 版本已發佈：全新界面與起始窗口、更廣泛的文件支持、圖表查看器、AI 增強及更多精彩功能" height="893" src="https://oscimg.oschina.net/oscnet//10bdb08b0c821c1aabcdd0d4a86642b0.png" width="1468" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;PDF 編輯器的更多功能&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fpdf-editor.aspx%3Futm_source%3Dblog%26utm_medium%3Dpost%26utm_campaign%3Ddesktop_9.0" target="_blank"&gt;&lt;u&gt;ONLYOFFICE PDF 編輯器&lt;/u&gt;&lt;/a&gt;在 9.0 版本中功能增強，支持拖放 PDF 頁面實現快速重排，還可使用&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Ctrl + C&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;/&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Ctrl + V&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;快速複製頁面。&lt;/p&gt; 
&lt;h2&gt;&lt;img alt="ONLYOFFICE 桌面編輯器 9.0 版本已發佈：全新界面與起始窗口、更廣泛的文件支持、圖表查看器、AI 增強及更多精彩功能" height="894" src="https://oscimg.oschina.net/oscnet//6952918e9a65e77cc7ce28fc6de20393.png" width="1468" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;h2&gt;從右至左支持&amp;amp;烏爾都語本地化改進&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;ONLYOFFICE&amp;nbsp;辦公套件最新版本中 RTL（從右到左）語言支持進一步增強：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;表格中新增 RTL 支持；&lt;/li&gt; 
 &lt;li&gt;改進了文檔中 RTL 文本與段落的使用體驗；&lt;/li&gt; 
 &lt;li&gt;幻燈片與 PDF 支持從右到左/ 從左到右文本方向切換。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"&gt;&lt;img alt="Meet ONLYOFFICE Desktop Editors v9.0: redefined interface and start window, extended file support, Diagram Viewer, AI enhancements and more" height="1025" src="https://oscimg.oschina.net/oscnet//ad72c9d95d5e12a6b05b60a4e199efca.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;此外，9.0 版本還新增烏爾都語界面，同時也為其他語言帶來細節優化，例如：簡體中文界面下可設置默認字體大小，數字可使用印地語中的數字顯示。&lt;/p&gt; 
&lt;h2&gt;更多功能&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;以下是 9.0 版本中其他功能的簡要概覽：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;文檔中段落邊框可通過工具欄按鈕快速設置，內容控件功能增強；&lt;/li&gt; 
 &lt;li&gt;表格支持異步計算；&lt;/li&gt; 
 &lt;li&gt;幻燈片中可動態呈現文本動畫；&lt;/li&gt; 
 &lt;li&gt;各編輯器中的數據可視化與圖表自定義能力增強。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;想詳細瞭解新功能並掌握高效使用方法，請閲讀&lt;a href="https://www.oschina.net/news/356053/onlyoffice-9-0-released" target="_blank"&gt;&lt;u&gt;此篇&lt;/u&gt;&lt;u&gt;文章&lt;/u&gt;&lt;/a&gt;或預約觀看 6 月 25 日的&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fopus%2F1077437183828164616" target="_blank"&gt;網絡研討會&lt;/a&gt;。&lt;/p&gt; 
&lt;h2&gt;Linux 平台新增拼寫語言檢測功能&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;在 9.0 版本中，Linux 用戶可在&lt;strong&gt;「設置」&lt;/strong&gt;中啓用或禁用&lt;strong&gt;「拼寫語言檢測」&lt;/strong&gt;選項，能夠改善頻繁切換鍵盤語言時的輸入體驗。&lt;/p&gt; 
&lt;h2&gt;&lt;img alt="ONLYOFFICE 桌面編輯器 9.0 版本已發佈：全新界面與起始窗口、更廣泛的文件支持、圖表查看器、AI 增強及更多精彩功能" height="891" src="https://oscimg.oschina.net/oscnet//a4debd98e79e5d31b6e5c6643e8340c8.png" width="1467" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;h2&gt;無需調用系統對話框即可打印&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;ONLYOFFICE 桌面編輯器 9.0 版本支持通過&lt;strong&gt;文件&lt;/strong&gt;選項卡的&lt;strong&gt;打印&lt;/strong&gt;選項，或或頂部工具欄中的&lt;strong&gt;打印文件&lt;/strong&gt;選項直接打印文件，無需打開系統打印對話框。如仍需使用系統打印窗口，可在設置中啓用相關選項。&lt;/p&gt; 
&lt;h2&gt;&lt;img alt="ONLYOFFICE 桌面編輯器 9.0 版本已發佈：全新界面與起始窗口、更廣泛的文件支持、圖表查看器、AI 增強及更多精彩功能" height="893" src="https://oscimg.oschina.net/oscnet//4ddbc492524a526ddbc7531eb3dd0d4d.png" width="1467" referrerpolicy="no-referrer"&gt;&lt;/h2&gt; 
&lt;h2&gt;.exe 安裝中的文件關聯功能&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;在 Windows 10 或 Windows 更高版本中安裝桌面應用時，.exe 安裝程序允許你選擇要與 ONLYOFFICE 關聯的文件格式。你可以快速選擇所有可用選項，或手動勾選所需格式。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"&gt;&lt;img alt="ONLYOFFICE 桌面編輯器 9.0 版本已發佈：全新界面與起始窗口、更廣泛的文件支持、圖表查看器、AI 增強及更多精彩功能" height="469" src="https://oscimg.oschina.net/oscnet//269b49fc9a5fe9f42a5b9986597eb8f4.png" width="577" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;獲取 ONLYOFFICE 桌面編輯器&amp;nbsp;9.0&amp;nbsp;版本&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span style="color:rgba(0, 0, 0, 0.9)"&gt;&lt;span&gt;最新版的 ONLYOFFICE&lt;/span&gt;&lt;/span&gt;&lt;span style="color:rgba(0, 0, 0, 0.9)"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style="color:rgba(0, 0, 0, 0.9)"&gt;&lt;span&gt;桌面編輯器&lt;/span&gt;&lt;/span&gt;&lt;span style="color:rgba(0, 0, 0, 0.9)"&gt;&lt;span&gt;現已支持 Windows、Linux 和 macOS 及&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style="color:rgba(0, 0, 0, 0.9)"&gt;&lt;span&gt;Flatpak&lt;/span&gt;&lt;/span&gt;&lt;span style="color:rgba(0, 0, 0, 0.9)"&gt;&lt;span&gt;，可&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdownload-desktop.aspx%3Futm_source%3Dblog%26utm_medium%3Dpost%26utm_campaign%3Ddesktop_9.0%23desktop" target="_blank"&gt;在官網獲取&lt;/a&gt;。&lt;/span&gt;&lt;/span&gt;&lt;span style="color:rgba(0, 0, 0, 0.9)"&gt;&lt;span&gt;Snap 和 AppImage 將稍後上線，敬請關注！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;h3&gt;&lt;strong&gt;相關鏈接&lt;/strong&gt;&lt;/h3&gt; 
 &lt;p style="color:#333333; margin-left:0; margin-right:0"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdesktop.aspx%3Futm_source%3Dblog%26utm_medium%3Dpost%26utm_campaign%3Ddesktop_9.0" target="_blank"&gt;&lt;u&gt;獲取&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/u&gt;&lt;u&gt;ONLYOFFICE&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/u&gt;&lt;u&gt;免費桌面辦公套件&lt;/u&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p style="color:#333333; margin-left:0; margin-right:0"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FONLYOFFICE%2FDesktopEditors" target="_blank"&gt;&lt;u&gt;GitHub 上的 ONLYOFFICE 桌面編輯器&lt;/u&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p style="color:#333333; margin-left:0; margin-right:0"&gt;ONLYOFFICE 文檔 9.0 版本：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fblog%2Fzh-hans%2F2025%2F06%2Fonlyoffice-docs-9-0-released%3Futm_source%3Dblog%26utm_medium%3Dpost%26utm_campaign%3Ddesktop_9.0" target="_blank"&gt;&lt;u&gt;文章介紹&lt;/u&gt;&lt;/a&gt;&amp;nbsp;/&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fopus%2F1077437183828164616" target="_blank"&gt;&lt;u&gt;網絡&lt;/u&gt;&lt;u&gt;研討會&lt;/u&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356499/onlyoffice-desktop-editors-v9-0</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356499/onlyoffice-desktop-editors-v9-0</guid>
      <pubDate>Fri, 20 Jun 2025 11:10:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>鴻蒙正當時 | HarmonyOS 開發者實戰工坊上海站圓滿收官</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;2025 年 6 月 20 日，中國上海 —— HarmonyOS 開發者實戰工坊·開發者系列沙龍在熱烈的技術交流氛圍中圓滿收官。本次活動吸引了眾多開發者齊聚一堂，通過主題演講、實戰經驗分享與大咖深度互動，共同探討鴻蒙生態發展的前沿趨勢與核心技術，現場交流熱烈，創新思維湧動，參與者紛紛表示收穫頗豐。&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img alt="" height="533" src="https://oscimg.oschina.net/oscnet/up-92573b770811fcedec1e6c65b07d5b90c99.jpg" width="800" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;「鴻蒙為開發者構建了一個天然的平台，超越單一平台限制，助力開發者構想和創造服務於多設備互聯、高可靠環境的創新應用。希望通過共創協作，我們能夠相互成就，共同成長！」上海對外經貿大學開源創新與數字治理研究院院長、上海開源信息技術協會創始人張國鋒先生為活動致辭。&lt;/p&gt; 
&lt;p&gt;張國鋒也進一步闡述時代機遇：這是一個萬物互聯、場景融合的時代。傳統的設備界限正被打破，用戶期待的是無縫流轉、高度協同的智慧體驗。鴻蒙操作系統，以其與生俱來的分佈式基因和對全場景連接的深刻理解，正在為這場深刻的範式轉變奠定基礎。這樣的技術趨勢，為我們每一位開發者，尤其是金融、互聯網等各行各業的應用開發者們，開啓了前所未有的機遇之門。&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img alt="" height="533" src="https://oscimg.oschina.net/oscnet/up-f836c5b077897b1d15ebc8cb5d23924b1b3.png" width="800" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在深度洞察行業趨勢的開篇之後，活動話題隨即轉向技術實踐深度分享。 三位重量級技術專家輪番登場，分別從不同維度深入剖析鴻蒙應用開發的關鍵領域，涵蓋生態背景、發展趨勢、核心技術指引及典型應用案例，為開發者提供了落地的實戰參考。&lt;/p&gt; 
&lt;span id="OSC_h2_1"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span style="color:#27ae60"&gt;鴻蒙應用生態發展趨勢：未來已來，共築無限可能&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:center"&gt;&lt;span style="color:#27ae60"&gt;&lt;img alt="" height="533" src="https://oscimg.oschina.net/oscnet/up-ba33e0acae2e9aada90a922fd0ec9c2fbbd.png" width="800" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;中國科學院軟件研究所高級工程師、資深鴻蒙應用研發專家賈文洋發表《鴻蒙應用生態發展趨勢：未來已來，共築無限可能》主題演講。賈文洋在演講中指出，鴻蒙生態發展獲得了有力的政策支持。他提到，國際形勢變化凸顯了構建自主技術生態的重要性，國家層面明確要求堅持技術創新、培育鴻蒙生態、倡導開源合作。2025 年 4 月 18 日，工信部通信發展司司長講話中，明確強調推動更多 APP 上架鴻蒙應用商店的重要性，將通過推動應用上架、支持開源共建、加速場景融合三大舉措，構建中國數字經濟的底層基礎設施。&lt;/p&gt; 
&lt;p&gt;地方層面，作為中國的金融中心，上海擁有活躍的金融產業，而金融產業的發展與科技創新密不可分，鴻蒙生態在上海已開始實現規模化發展，已有約 500 款上海鴻蒙應用實現升級上架，助力上海加速邁向萬物智聯時代。作為中國數字化、智能化轉型的前沿陣地，上海與鴻蒙的雙向奔赴，無疑將給各地擁抱鴻蒙生態形成示範效應。&lt;/p&gt; 
&lt;p&gt;在此背景下，賈文洋指出，鴻蒙開發工具正持續迭代，通過技術的不斷演進給開發者帶來越來越便捷的開發體驗。&lt;/p&gt; 
&lt;p&gt;比如，DevEco Studio 是鴻蒙官方推薦的集成開發工具，伴隨 HarmonyOS 系統的發展不斷迭代更新；ArkTS 在保持 TypeScript 基本語法風格的基礎上，進一步通過規範強化靜態檢查和分析，在程序運行之前的開發期能檢測更多錯誤，推出狀態管理 V2，進一步提升運行時性能；跨平台開發方面，鴻蒙 Next 有 musl libc，有標準 POSIX API，有 Clang/LLVM，有 GN/ninja，Flutter 的最大優勢之一是其優異的性能表現，熱重載 RN 的性能取決，於 JavaScript 橋接機制的實現和優化程度；此外還有 AI 技術的加持，通過控件 AI 化，可以打造智能應用……&lt;/p&gt; 
&lt;p&gt;談及開發者生態建設，賈文洋介紹了華為構建的多層次交流與成長平台，如華為開發者組織 HDG、全球性的華為開發者大會 HDC、HarmonyOS Connect 夥伴峯會、華為校園開發者組織 HSD 等。在產業生態方面，賈文洋展示了鴻蒙終端的廣泛應用前景。鴻蒙操作系統已覆蓋手機、平板、手錶、智慧屏、車機等多種設備，其分佈式架構實現了無縫協同。&lt;/p&gt; 
&lt;p&gt;最後，賈文洋也表示，鴻蒙生態建設正迎來前所未有的發展機遇，相信鴻蒙能夠成為最大的操作系統，呼籲廣大開發者積極加入鴻蒙生態，共同開拓未來。&lt;/p&gt; 
&lt;span id="OSC_h2_2"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span style="color:#27ae60"&gt;Flutter 與鴻蒙的高效融合——應用適配實戰解析&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:center"&gt;&lt;span style="color:#27ae60"&gt;&lt;img alt="" height="533" src="https://oscimg.oschina.net/oscnet/up-cde48d7adad68a7632408bf18525650dd0c.png" width="800" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;鍋圈食品（上海）股份有限公司開發經理、華為 HDG 核心組織者王陽科發表《Flutter 與鴻蒙的高效融合——應用適配實戰解析》主題演講，系統介紹了跨平台框架 Flutter 在鴻蒙系統的適配方案與技術路徑。&lt;/p&gt; 
&lt;p&gt;王陽科指出，Flutter 與鴻蒙融合具備三大優勢。首先是性能提升，Flutter 的 Skia 自繪引擎在鴻蒙設備可實現高效圖形渲染，結合 JIT/AOT 編譯模式保障應用流暢性；鴻蒙分佈式架構更支持跨設備協同能力。第二是跨平台優勢，包括單套代碼可覆蓋 iOS、Android 及鴻蒙多平台，在保持 UI 一致性的同時通過平台通道調用原生功能。第三是開發效率的提升，包括熱重載功能縮短開發週期，現有 Flutter 代碼經適配可快速生成鴻蒙版本，鴻蒙 Next 的混合開發模式進一步降低維護成本。&lt;/p&gt; 
&lt;p&gt;具體到適配流程方面，王陽科也做了關鍵節點的拆解。首先是 Flutter 工程：提供一個跨平台的應用基礎，便於後續與鴻蒙系統的集成 。通過鴻蒙能力掃描，確定鴻蒙系統中有哪些能力可以被 Flutter 工程調用和利用，為後續的適配工作提供基礎信息。然後進行缺失能力分析，明確需要額外開發或適配的部分，以便後續步驟進行補充和完善。緊接着是三方庫適配層，彌補鴻蒙系統中缺失的能力，確保 Flutter 工程在鴻蒙系統上能夠完整地實現其功能。再通過原生通信通道，建立一個可靠的通信橋樑，使 Flutter 工程能順利地調用鴻蒙系統的能力，並接收返回的數據。最後進行鴻蒙組件注入，增強 Flutter 應用在鴻蒙系統上的原生體驗，提升應用的性能和功能豐富度。&lt;/p&gt; 
&lt;p&gt;為了幫助開發者更好地理解適配過程，王陽科以獲取設備定位為例，演示插件開發全流程：在 Flutter SDK 插件庫的鴻蒙端適配案例中，獲取設備定位功能的實現分為通信框架構建與定位功能開發兩階段。首先需通過 MethodChannel 建立雙向通信機制：在鴻蒙端創建專屬插件文件並實現定位功能邏輯，隨後在 Ability 中註冊該插件。當 Flutter 調用鴻蒙端功能時，通過預置通信渠道觸發定位操作並接收返回數據。&lt;/p&gt; 
&lt;p&gt;通過技術講解和多個案例演示，也證明瞭 Flutter 與鴻蒙融合可充分發揮跨平台開發效率與原生系統能力優勢；標準化適配流程降低多平台維護成本；原生組件注入方案為生態拓展提供新路徑。&lt;/p&gt; 
&lt;span id="OSC_h2_3"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span style="color:#27ae60"&gt;安全與高效並存——金融領域鴻蒙開發案例淺析&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="text-align:center"&gt;&lt;span style="color:#27ae60"&gt;&lt;img alt="" height="533" src="https://oscimg.oschina.net/oscnet/up-3587d930d01133307cf1206ff8112d87891.png" width="800" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;資深全棧開發專家、HarmonyOS 生態踐行者蔣天泓發表《安全與高效並存——金融領域鴻蒙開發案例淺析》主題演講，向開發者展示了鴻蒙系統在金融場景的深度實踐成果。&lt;/p&gt; 
&lt;p&gt;蔣天泓介紹，根據國際數據公司 (IDC)，2023 年銀聯報告顯示移動端交易佔比顯著，到 2025 年銀行客戶超過 80% 的流量將通過手機 APP 實現，移動端交易成為主流。根據人行數據，2024 年，銀行共處理電子支付 11 業務 3016.68 億筆，其中移動支付業務 2109.80 億筆，70% 的交易都在移動支付業務中產生。金融行業需覆蓋銀行、證券、保險等全場景，多終端協同需求激增，以滿足客戶多樣化的金融服務需求。&lt;/p&gt; 
&lt;p&gt;面對如此龐大的交易規模，鴻蒙系統為金融業務構建了安全底座。鴻蒙的 TEE 安全微內核獲得全球最高 CC EAL 5+認證，金融級 TEE 微內核認證為金融交易提供了強大的安全保障。HarmonyOS 系統提供「一次開發，多端部署」能力，其應用開發框架支持一次開發覆蓋手機、車機、穿戴設備等，滿足金融行業多終端協同需求。&lt;/p&gt; 
&lt;p&gt;此外，蔣天泓還拆解了多個金融機構的鴻蒙應用開發實踐案例。京東金融採用架構分層遷移策略，基於流量分析優先遷移核心功能，上線版本包含 21 個功能模塊、180 餘個功能和頁面，覆蓋線上版本 90% 的能力。交通銀行藉助鴻蒙意圖框架，用戶可通過語音助手「小藝」快速喚起 APP 完成轉賬操作，簡化流程。中原銀行深度適配摺疊屏設備，利用鴻蒙 Navigation 技術實現業務在不同屏幕狀態下的自動適配和流暢交互。在持倉頁實現了分屏展示。發證券打造 AI 大模型矩陣驅動智能服務。其投顧駕駛艙基於 DeepSeek-R1 大模型，聚焦解決股票分析、資訊分析等投資諮詢問題。&lt;/p&gt; 
&lt;p&gt;基於過往的開發經驗，蔣天泓分享了一些實際的開發挑戰可應對經驗。比如，遷移成本控制方面，可以借鑑京東金融「核心功能優先」策略，結合 PV/UV 漏斗模型分析確定遷移重點。H5 容器兼容性保障上，ArkWeb 基於 Chrome 內核，無需重寫，有效保證了 H5 容器的兼容性。全場景金融服務突破方面，可以通過發展「原子服務」，即輕量化服務，以及實現車機、穿戴設備等多終端聯動，拓展服務邊界。&lt;/p&gt; 
&lt;p&gt;通過詳實的案例解析和技術探討，蔣天泓的分享為金融行業開發者應用鴻蒙系統提供了有價值的參考，展示了鴻蒙在推動金融科技創新與服務升級方面的潛力。&lt;/p&gt; 
&lt;span id="OSC_h2_4"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span style="color:#27ae60"&gt;技術洞見落地生根，互動交流共話未來&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;三位專家的精彩演講，從鴻蒙生態的宏闊前景到 Flutter 融合的技術路徑，再到金融場景的深度實踐，為開發者鋪就了清晰可見的鴻蒙開發圖景。深入淺出的剖析與落地的實戰案例，點燃了現場開發者的熱情與思考。演講結束，會場氣氛即刻升溫，眾多意猶未盡的開發者爭先舉手，期待與台上大咖進行更深入地探討。熱烈的互動環節隨即展開，演講嘉賓們亦以飽滿的熱情和專業洞見，回應了大家最為關切的問題。以下擷取其中具有代表性的三個精彩問答，以饗讀者：&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img alt="" height="259" src="https://oscimg.oschina.net/oscnet/up-ba0a4174e107a5e029e696a9850ef395339.png" width="800" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;問題一：開發者現在投入鴻蒙應用開發，如何平衡短期收益與長期生態紅利？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;賈文洋：&lt;/strong&gt;目前來説，整個商用推廣節奏是很快的，政企合作、金融銀行、運行商等各大公司場景的落地。隨着鴻蒙設備的普及，HarmonyOS 應用市場的用戶基數快速擴大，開發者有機會接觸到更廣泛的用戶羣體，這為應用的下載量和收益提供了潛在的增長空間。例如，一些熱門的鴻蒙原生應用在發佈後短時間內就獲得了大量的下載和使用。所以，從長遠來看，鴻蒙應用市場份額是逐步提升的。&lt;/p&gt; 
&lt;p&gt;鴻蒙 Next 的分佈式架構、AI 智能等特性為開發者提供了更多的創新空間。開發者可以利用這些特性開發出具有獨特功能和體驗的應用，滿足用戶在多設備互聯、智能交互等方面的需求，從而提高應用的競爭力和吸引力，進而增加收益。例如，開發一款可以在手機、平板和智能電視上無縫切換和同步數據的視頻播放應用，利用鴻蒙的分佈式能力，用戶可以在不同設備上繼續觀看之前的視頻內容，這種創新的體驗可能會吸引更多用戶使用並付費。&lt;/p&gt; 
&lt;p&gt;華為推出了多項激勵計劃，如鴻蒙原生應用開發者激勵計劃、Next 變現激勵等，為開發者提供了現金及流量扶持，以及額外的變現收益機會。可以參與鴻蒙開發者的比賽，探索一些創新性的應用。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;問題二：鴻蒙的&lt;/strong&gt;&lt;strong&gt;分佈式&lt;/strong&gt;&lt;strong&gt;能力在金融行業有哪些創新應用場景？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;蔣天泓：&lt;/strong&gt;鴻蒙的分佈式能力可以實現穿戴設備與車機間自動發現、秒級連接，保障指令傳輸時延＜100ms。&lt;/p&gt; 
&lt;p&gt;端雲協同 AI：可以通過用戶行為描繪對用戶畫像進行匹配，保障用戶信息安全，防止多設備協同下的信息泄漏。&lt;/p&gt; 
&lt;p&gt;第二是交易協同，通過鴻蒙的分佈式軟總線技術，金融機構可構建覆蓋手機、平板、車機、穿戴設備等多終端的統一服務。例如，交通銀行用戶可在手機銀行發起轉賬後，直接在車機端確認交易，或在智能手錶上接收還款提醒並一鍵完成支付。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;問題三：新啓動的項目，是選擇 Flutter 還是 All in ArkUI ？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;王陽科：&lt;/strong&gt;在新項目啓動時，選擇 Flutter 或 All in ArkUI 不應視為非此即彼的對立。若項目關鍵目標是快速搶佔市場，頻繁更新迭代以適應初期需求變化，那麼 Flutter 是更優解。它憑藉出色的跨平台性能、豐富的生態，一套代碼能打包多個平台應用，極大地縮短開發週期、降低多平台開發成本，使產品能迅速推向市場，在競爭中搶佔先機。&lt;/p&gt; 
&lt;p&gt;而 ArkUI 則是深度挖掘鴻蒙系統潛力的不二之選，能充分發揮鴻蒙的分佈式等獨特特性。至於使用 Flutter，雖無法實現鴻蒙的一次開發多端部署能力，但並不影響其在鴻蒙端運用碰一碰等功能的特性，可以單獨在鴻蒙項目上增加，其在跨平台領域的優勢依舊能為項目提供有力支撐。&lt;/p&gt; 
&lt;span id="OSC_h2_5"&gt;&lt;/span&gt; 
&lt;h2&gt;&lt;span style="color:#27ae60"&gt;活動圓滿落幕，期待攜手前行&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;HarmonyOS 開發者實戰工坊·上海站活動在熱烈討論與務實分享的氛圍中成功結束。從宏觀生態分析到具體技術實踐，從金融安全應用到跨平台開發適配，整場活動為開發者帶來了豐富的實用信息和解決方案。參會者們帶着新的思路和具體的操作指南陸續離場，活動現場仍可見意猶未盡的開發者們聚在一起交流心得。&lt;/p&gt; 
&lt;p&gt;本次上海站活動，展現了鴻蒙生態在本地化發展上的活躍態勢，也為開發者們搭建了寶貴的線下交流平台。我們相信，這樣的連接與分享將為鴻蒙生態注入更多活力。&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img alt="" height="534" src="https://oscimg.oschina.net/oscnet/up-5676e23d55e3cdd724e4c5ad7a6eea0228d.png" width="800" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;span style="color:#8f959e"&gt;&lt;em&gt;現場，開發者們積極交流，還有美味茶歇和貼心福利，收穫滿滿！&lt;/em&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;歡迎所有對鴻蒙開發感興趣的開發者，持續關注 HarmonyOS 開發者社區動態」，獲取最新技術文檔、活動信息和開發資源。期待在下一次活動中與大家再會！&lt;/p&gt; 
&lt;p style="text-align:center"&gt;&lt;img alt="" height="340" src="https://oscimg.oschina.net/oscnet/up-2da8d695e5675e704afb788c01a9b5878a8.png" width="800" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/4489239/blog/18628121</link>
      <guid isPermaLink="false">https://my.oschina.net/u/4489239/blog/18628121</guid>
      <pubDate>Fri, 20 Jun 2025 10:54:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>Gitee SBOM 掃描上線，全面守護開源軟件供應鏈安全</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;在軟件開發逐漸開源化和協作化的今天，軟件供應鏈的透明性與安全性已成為開發者和企業最關注的話題之一。&lt;/p&gt; 
&lt;p&gt;尤其對於國內開發者和開源社區來説，&lt;strong&gt;隨着國際合作與市場需求的日益增加，明確掌握軟件供應鏈的信息，保障合規性和安全性至關重要&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;Gitee 全新推出的 SBOM（軟件物料清單）掃描功能，正是為瞭解決這些關鍵問題而生。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;SBOM 掃描是什麼？&lt;/h2&gt; 
&lt;p&gt;軟件物料清單（Software Bill of Materials，簡稱 SBOM）類似於軟件的「配料表」，清晰記錄了軟件中包含的所有具體組件、庫和依賴項。這種方式讓開發者可以快速準確地瞭解軟件的組成結構，從而及時發現可能存在的安全漏洞和隱患，防止問題擴大。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0620/183218_t7Cp_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;此外，SBOM 還能協助中國的開發者和企業滿足國內外的合規要求以及國際出口管制和知識產權保護相關的合規標準，確保軟件開發與國際接軌且安全可信。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;SBOM 掃描能做什麼？&lt;/h2&gt; 
&lt;h3&gt;識別開源依賴風險&lt;/h3&gt; 
&lt;p&gt;快速準確地識別項目中使用的開源組件，幫助開發者清晰瞭解依賴項，避免隱性風險，保護自主知識產權。&lt;/p&gt; 
&lt;h3&gt;追蹤許可證合規性&lt;/h3&gt; 
&lt;p&gt;主動管理項目中組件許可證，確保合規性，避免法律糾紛，提升對開源項目的信任度。&lt;/p&gt; 
&lt;h3&gt;快速響應漏洞威脅&lt;/h3&gt; 
&lt;p&gt;一旦發現漏洞或風險，可以迅速定位問題組件，減少修復時間，提升項目整體安全性。&lt;/p&gt; 
&lt;h3&gt;多元數據來源支持&lt;/h3&gt; 
&lt;p&gt;Gitee SBOM 掃描能夠靈活支持多種數據來源，包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;源碼文件&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;包管理器配置文件&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;容器鏡像&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;各類二進制格式文件&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;這種多樣性確保了從軟件開發初期到發佈後的各個階段都能被有效覆蓋，保障了全生命週期的安全性和合規性。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;在 Gitee 上使用 SBOM 掃描&lt;/h2&gt; 
&lt;p&gt;SBOM 掃描服務現已對 Gitee 中&lt;strong&gt;所有開源倉庫&lt;/strong&gt;開放使用，可在&lt;code&gt;服務&lt;/code&gt;中找到其入口。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0620/183234_Hi5b_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;進入 SBOM 掃描功能後，可選擇兩種方式進行掃描，此處介紹在 Gitee Go 中使用 SBOM，選擇&lt;code&gt;使用 Gitee Go 流水線進行掃描分析&lt;/code&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0620/183247_hscT_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;如選擇使用 SBOM 服務平台，請選擇 Gitee 賬號登錄。若顯示該網頁不安全，可直接忽略，綁定 Gitee 賬號操作即可。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;新建流水線，在&lt;code&gt;任務編排&lt;/code&gt;中選擇&lt;code&gt;新的任務&lt;/code&gt;，添加&lt;code&gt;SBOM 掃描&lt;/code&gt;任務，保存並確認即可。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0620/183259_qCRC_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;此時，掃描任務已在運行狀態，等待十分鐘後即可掃描完成（掃描時間由倉庫大小決定）。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0620/183310_PyTu_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;運行完成後，即可進入&lt;code&gt;構建歷史&lt;/code&gt;，點擊下圖高亮處進入&lt;code&gt;構建詳情&lt;/code&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0620/183321_En7Y_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在&lt;code&gt;任務詳情&lt;/code&gt;中即可看到本次 SBOM 掃描報告和提取碼。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0620/183339_ghVF_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;輸入提取碼後即可查看本次掃描詳情，報告中包含了&lt;code&gt;組件&lt;/code&gt;、&lt;code&gt;漏洞&lt;/code&gt;、&lt;code&gt;許可證&lt;/code&gt;相關風險項及依賴關係圖。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0620/183350_3TpU_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0620/183401_vUGn_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;目前該服務已對 Gitee&amp;nbsp;&lt;strong&gt;所有開源倉庫&lt;/strong&gt;開放使用，歡迎開發者訪問體驗&amp;nbsp;&lt;a href="https://gitee.com/"&gt;https://gitee.com/&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;強大底層支撐，全面追蹤風險&lt;/h2&gt; 
&lt;p&gt;開源項目的安全性和透明度不容忽視，為此，Gitee SBOM 掃描採用統一的規範和嚴謹的評估方法，保證物料信息的準確性和質量。同時，依託於強大的數據庫和先進的 NLP、機器學習技術，實時更新開源組件與漏洞數據，實現風險精準追蹤與管理。&lt;/p&gt; 
&lt;p&gt;立即使用 Gitee 的 SBOM 掃描功能，讓你的軟件開發和管理更加安全、可靠、高效！&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0411/120710_Spld_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356489</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356489</guid>
      <pubDate>Fri, 20 Jun 2025 10:35:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>jsoup 1.21.1 發佈，Java HTML 解析器</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;jsoup 1.21.1 現已發佈。此版本具有強大的全新節點選擇功能，可讓用戶使用 CSS 選擇器鎖定特定的 DOM 節點（例如註釋和文本節點）、通過新的 TagSet 回調系統進行動態標籤自定義，並通過簡化的屬性轉義增強了對突變 XSS 攻擊的防禦能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此版本還默認提供 HTTP/2 支持，並進行了多項 API 改進以提升開發者體驗，並修復了多個 edge-case parsing 問題。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style="color:#192943"&gt;Changes&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul style="margin-left:0; margin-right:0"&gt; 
 &lt;li&gt;刪除了以前棄用的方法。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fpull%2F2317" target="_blank"&gt;#2317&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;由於&lt;code&gt;:matchText&lt;/code&gt;pseduo-selector 對 DOM 的副作用，已將其棄用；改用新的&lt;code&gt;::textnode&lt;/code&gt;&lt;span style="color:#192943"&gt;&amp;nbsp;selector&lt;/span&gt;和 &lt;span style="color:#192943"&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fnodes%2FElement.html%23selectNodes%28java.lang.String%2Cjava.lang.Class%29" target="_blank"&gt;Element#selectNodes(String css, Class&amp;lt;T&amp;gt; type)&lt;/a&gt;&lt;/code&gt;方法。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fpull%2F2343" target="_blank"&gt;#2343&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;已棄用&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.Response.html%23bufferUp%28%29" target="_blank"&gt;Connection.Response#bufferUp()&lt;/a&gt;&lt;/code&gt;，以代替&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.Response.html%23readFully%28%29" target="_blank"&gt;Connection.Response#readFully()&lt;/a&gt;&lt;/code&gt;，後者會拋出一個已檢查的 IOException。&lt;/li&gt; 
 &lt;li&gt;已棄用的內部方法&lt;span style="color:#192943"&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fhelper%2FValidate.html%23ensureNotNull%28java.lang.Object%29" target="_blank"&gt;Validate#ensureNotNull(Object)&lt;/a&gt;&lt;/code&gt;（由 t&lt;span style="color:#192943"&gt;yped&amp;nbsp;&lt;/span&gt;&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fhelper%2FValidate.html%23expectNotNull%28T%29" target="_blank"&gt;Validate#expectNotNull(T)&lt;/a&gt;&lt;/code&gt;替代）；來自 Attribute 和 Node 的受保護 HTML 附加程序。&lt;/li&gt; 
 &lt;li&gt;如果你碰巧正在使用任何已棄用的方法，官方建議立即藉此機會遷移它們，因為它們將在未來的版本中被刪除。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style="color:#192943"&gt;Improvements&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul style="margin-left:0; margin-right:0"&gt; 
 &lt;li&gt;增強了&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fselect%2FSelector.html" target="_blank"&gt;Selector&lt;/a&gt;&lt;/code&gt;，支持直接匹配註釋和文本節點等節點。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fpull%2F2324" target="_blank"&gt;#2324&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;新增&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fparser%2FTagSet.html%23onNewTag%28java.util.function.Consumer%29" target="_blank"&gt;TagSet#onNewTag(Consumer&amp;lt;Tag&amp;gt; customizer)&lt;/a&gt;：註冊一個回，當每個新的或克隆的標籤插入到集合中時，都會調用該回調函數。該函數支持動態調整標籤選項（例如，將所有自定義標籤標記為自閉合，或將給定命名空間中的所有內容標記為保留空格）。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2330" target="_blank"&gt;#2330&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;使&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fparser%2FTokenQueue.html" target="_blank"&gt;TokenQueue&lt;/a&gt;&lt;/code&gt;和&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fparser%2FCharacterReader.html" target="_blank"&gt;CharacterReader&lt;/a&gt;&lt;/code&gt;可自動關閉，以確保它們將緩衝區釋放回緩衝池，以供以後重用。&lt;/li&gt; 
 &lt;li&gt;添加了&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fselect%2FSelector.html%23evaluatorOf%28java.lang.String%29" target="_blank"&gt;Selector#evaluatorOf(String css)&lt;/a&gt;&lt;/code&gt;，以更清晰的方式從 CSS 查詢中獲取評估器。這是&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fselect%2FQueryParser.html%23parse%28java.lang.String%29" target="_blank"&gt;QueryParser.parse(String css)&lt;/a&gt;&lt;/code&gt;的別名。&lt;/li&gt; 
 &lt;li&gt;可以將外部命名空間（例如 SVG）中的自定義標籤（通過&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fparser%2FTagSet.html" target="_blank"&gt;TagSet&lt;/a&gt;&lt;/code&gt;定義）配置為數據標籤進行解析。&lt;/li&gt; 
 &lt;li&gt;添加&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fselect%2FNodeVisitor.html%23traverse%28org.jsoup.nodes.Node%29" target="_blank"&gt;NodeVisitor#traverse(Node)&lt;/a&gt;&lt;/code&gt;以簡化節點遍歷調用（相對於導入&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fselect%2FNodeTraversor.html" target="_blank"&gt;NodeTraversor&lt;/a&gt;&lt;/code&gt;）。&lt;/li&gt; 
 &lt;li&gt;更新了默認用戶代理字符串以提高兼容性。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2341" target="_blank"&gt;#2341&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;HTML 解析器現在允許為已知標籤自定義特定的文本數據類型 (Data、RcData)。（之前此功能僅支持自定義標籤。）&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2326" target="_blank"&gt;#2326&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;添加了&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.Response.html%23readFully%28%29" target="_blank"&gt;Connection.Response#readFully()&lt;/a&gt;&lt;/code&gt;，以替代&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.Response.html%23bufferUp%28%29" target="_blank"&gt;Connection.Response#bufferUp()&lt;/a&gt;&lt;/code&gt;，並明確了 IOException。同樣，添加&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.Response.html%23readBody%28%29" target="_blank"&gt;Connection.Response#readBody()&lt;/a&gt;&lt;/code&gt;代替&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.Response.html%23body%28%29" target="_blank"&gt;Connection.Response#body()&lt;/a&gt;&lt;/code&gt;。已棄用&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.Response.html%23bufferUp%28%29" target="_blank"&gt;Connection.Response#bufferUp()&lt;/a&gt;&lt;/code&gt;。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fpull%2F2327" target="_blank"&gt;#2327&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;序列化 HTML 時，屬性中的&lt;code&gt;&amp;lt;&lt;/code&gt;和&lt;code&gt;&amp;gt;&lt;/code&gt;字符現在會被轉義。這有助於防止一類變異 XSS 攻擊。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fpull%2F2337" target="_blank"&gt;#2337&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;已更改&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2FConnection.html" target="_blank"&gt;Connection&lt;/a&gt;&lt;/code&gt;為優先使用 JDK 的 HttpClient 而非 HttpUrlConnection（如果可用），以默認啓用 HTTP/2 支持。用戶可以通過禁用&lt;code&gt;-Djsoup.useHttpClient=false&lt;/code&gt;關閉該功能。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fpull%2F2340" target="_blank"&gt;#2340&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style="color:#192943"&gt;Bug Fixes&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul style="margin-left:0; margin-right:0"&gt; 
 &lt;li&gt;&lt;code&gt;svg&lt;/code&gt;外部上下文中的&lt;code&gt;script&lt;/code&gt;內容應被解析為腳本數據，而非文本。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2320" target="_blank"&gt;#2320&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fapidocs%2Forg%2Fjsoup%2Fparser%2FTag.html%23isFormSubmittable%28%29" target="_blank"&gt;Tag#isFormSubmittable()&lt;/a&gt;&lt;/code&gt;正在更新標籤的選項。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2323" target="_blank"&gt;#2323&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;當文本跟在塊元素中的內聯元素之後時，HTML pretty-printer&amp;nbsp;會錯誤地修剪空格。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2325" target="_blank"&gt;#2325&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;名稱中帶有連字符或其他非字母字符的自定義標籤現在可以正確用作 Data 或 RcData 標籤。它們的結束標籤現在也能正確標記。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2332" target="_blank"&gt;#2332&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;克隆元素時，克隆將保留源的緩存子元素列表（如果有），這可能導致在修改克隆的子元素時出現不正確的結果。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjhy%2Fjsoup%2Fissues%2F2334" target="_blank"&gt;#2334&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;更新説明：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsoup.org%2Fnews%2Frelease-1.21.1" target="_blank"&gt;https://jsoup.org/news/release-1.21.1&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356839/jsoup-1-21-1-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356839/jsoup-1-21-1-released</guid>
      <pubDate>Sun, 11 May 2025 06:40:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>JDK 高版本特性總結與 ZGC 實踐</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;blockquote&gt; 
 &lt;p&gt;美團信息安全技術團隊核心服務升級 JDK 17 後，性能與穩定性大幅提升，機器成本降低了 10%。高版本 JDK 與 ZGC 技術令人驚豔，且 Java AI SDK 最低支持 JDK 17。本文總結了 JDK 17 的主要特性，然後重點分享了 JDK 17+ZGC 在安全領域的一些實踐，希望能對大家有所幫助或啓發。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-31d46a32fb835d661ed43d399296dac8a92.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;從一句調侃的話 "你發任你發，我用 Java 8！" 可以看出，在開發新項目時，Java 8 依然是大家的首選。美團 Java 8 服務佔比超過 70%，可以説 Java 8 依然是絕對的主流。但是，我們在多個核心服務上遇到較多的性能問題，這些問題無法通過 JVM 參數微調來解決，為此我們對部分核心服務使用了 JDK 17，升級後服務性能和穩定性指標也得到巨大的飛躍，同時機器成本可以下降約 10%，升級 JDK 版本收益十分明顯。另外，目前正處在 AI 時代的爆發期，Java AI SDK 的最小支持版本為 JDK 17，這讓升級 JDK 版本變得更具價值。接下來，期望跟大家一起探索 JDK 高版本和 ZGC 技術的奧祕，開啓優化 Java 應用的新徵程。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;JDK 17 的主要特性&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;包含 JDK 9~17 等中間版本的特性。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;從 JDK 8 直接升級到 JDK 17，以下是需要重點關注的特性，這些特性對開發效率、代碼風格、性能優化和安全性都有顯著影響。&lt;/p&gt; 
&lt;h3&gt;1.1 語言特性[1]&lt;/h3&gt; 
&lt;h4&gt;1.1.1 局部變量類型推斷&lt;/h4&gt; 
&lt;p&gt;使用 var 關鍵字來聲明局部變量，而無需顯式指定變量的類型。在 Java 17 中，可以使用局部變量類型推斷的擴展來編寫更簡潔的代碼。其他語言如 Golang 很早就支持了 var 變量。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// JDK8
String str = "Hello world";

// JDK17
var str = "Hello world";
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;需要注意的是，var 類型的局部變量仍然具有靜態類型，一旦被推斷出來，類型就會固定下來，並且不能重新賦值為不兼容的類型。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;1.1.2 密封類&lt;/h4&gt; 
&lt;p&gt;它允許我們將類或接口的繼承限制為一組有限的子類。如果想將類或接口的繼承限制為一組有限的子類時，這非常有用。在下面的示例中，可以看到我們如何使用 sealed 關鍵字將類的繼承限制為一組有限的子類。我們可以通過在類的聲明前加上 sealed 關鍵字來將該類聲明為密封類。然後，可以使用 permits 關鍵字列出該密封類允許繼承的子類。這些子類必須直接或間接地繼承自密封類。這樣，只有在這個預定義的子類中，才能繼承該密封類。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;//使用 permits 關鍵字列出了允許繼承的子類 Circle、Rectangle 和 Triangle
public sealed class Shape permits Circle, Rectangle, Triangle {
    // 省略實現
}

// 在與密封類相同的模塊或包中，定義以下三個允許的子類， Circle，Square 和：Rectangle
public final class Circle extends Shape {
    public float radius;
}
 
public non-sealed class Square extends Shape {
   public double side;
}   
 
public sealed class Rectangle extends Shape permits FilledRectangle {
    public double length, width;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.1.3 Record 類&lt;/h4&gt; 
&lt;p&gt;Record 類的主要目的是提供一種更簡潔、更安全的方式來定義不可變的數據載體類。它自動實現了常見的方法（如&lt;code&gt;equals()&lt;/code&gt;、&lt;code&gt;hashCode()&lt;/code&gt;、&lt;code&gt;toString()&lt;/code&gt;和構造函數），從而減少了樣板代碼。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;特點&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;不可變性&lt;/strong&gt; ：Record 類的字段默認是&lt;code&gt;final&lt;/code&gt;的，因此 Record 類是不可變的。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;簡潔性&lt;/strong&gt; ：Record 類自動提供了構造函數、&lt;code&gt;equals()&lt;/code&gt;、&lt;code&gt;hashCode()&lt;/code&gt;和&lt;code&gt;toString()&lt;/code&gt;方法，無需手動編寫。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;組件訪問&lt;/strong&gt; ：Record 類的字段可以通過&lt;code&gt;recordName.fieldName&lt;/code&gt;的方式直接訪問。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;模式匹配&lt;/strong&gt; ：Record 類支持模式匹配（Pattern Matching），可以與&lt;code&gt;instanceof&lt;/code&gt;和&lt;code&gt;switch&lt;/code&gt;表達式結合使用。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Record 類的定義非常簡單，只需要使用&lt;code&gt;record&lt;/code&gt;關鍵字，並聲明字段類型和名稱即可。例如：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// 這裏有一個包含兩個字段的記錄類
record Rectangle(double length, double width) { }

// 這個簡潔的矩形聲明等同於以下普通類
public final class Rectangle {
    private final double length;
    private final double width;

    public Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }

    double length() { return this.length; }
    double width()  { return this.width; }

    // ...
    public boolean equals...
    public int hashCode...

    // ...
    public String toString() {...}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.1.4 switch 表達式優化&lt;/h4&gt; 
&lt;p&gt;在 Java 17 中使用 switch 表達式時，不必使用關鍵字 break 來跳出 switch 語句，或 return 在每個 switch case 上使用關鍵字來返回值；相反，我們可以返回整個 switch 表達式。這種增強的 switch 表達式使整體代碼看起來更清晰，更易於閲讀。switch 打印一週中某一天的字母數量的語句。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;JDK 8&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;public enum Day { SUNDAY, MONDAY, TUESDAY,
    WEDNESDAY, THURSDAY, FRIDAY, SATURDAY; }

// ...

    int numLetters = 0;
    Day day = Day.WEDNESDAY;
    switch (day) {
        case MONDAY:
        case FRIDAY:
        case SUNDAY:
            numLetters = 6;
            break;
        case TUESDAY:
            numLetters = 7;
            break;
        case THURSDAY:
        case SATURDAY:
            numLetters = 8;
            break;
        case WEDNESDAY:
            numLetters = 9;
            break;
        default:
            throw new IllegalStateException("Invalid day: " + day);
    }
    System.out.println(numLetters);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;JDK 17&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Day day = Day.WEDNESDAY;    
    System.out.println(
        switch (day) {
            case MONDAY, FRIDAY, SUNDAY -&amp;gt; 6;
            case TUESDAY                -&amp;gt; 7;
            case THURSDAY, SATURDAY     -&amp;gt; 8;
            case WEDNESDAY              -&amp;gt; 9;
            default -&amp;gt; throw new IllegalStateException("Invalid day: " + day);
        }
    ); 
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.1.5 文本塊&lt;/h4&gt; 
&lt;p&gt;在不使用轉義序列的情況下創建多行字符串。在創建 SQL 查詢或 JSON 字符串時非常有用。在下面的示例中，可以看到使用文本塊時代碼看起來更加簡潔。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// JDK8
String message = "'The time has come,' the Walrus said,\n" +
                 "'To talk of many things:\n" +
                 "Of shoes -- and ships -- and sealing-wax --\n" +
                 "Of cabbages -- and kings --\n" +
                 "And why the sea is boiling hot --\n" +
                 "And whether pigs have wings.'\n";

// 使用文本塊可以消除大部分混亂：
String message = """
    'The time has come,' the Walrus said,
    'To talk of many things:
    Of shoes -- and ships -- and sealing-wax --
    Of cabbages -- and kings --
    And why the sea is boiling hot --
    And whether pigs have wings.'
    """;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;SQL 註解描述&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// JDK8    
@Select("select distinct ta.host_name from tb_agent_info tai, tb_agent ta where 1=1 " +
        "and ta.host_name=tai.host_name and ta.status=1 and ta.master=1 and tai.report_pid_count &amp;gt; 0")
Set&amp;lt;String&amp;gt; queryAllJavaHost();

// JDK17
@Select("""
    SELECT DISTINCT ta.host_name
    FROM tb_agent_info tai, tb_agent ta
    WHERE 1=1
      AND ta.host_name = tai.host_name
      AND ta.status = 1
      AND ta.master = 1
      AND tai.report_pid_count &amp;gt; 0
 """)
 Set&amp;lt;String&amp;gt; queryAllJavaHost2();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;可讀性更強&lt;/strong&gt;：文本結構清晰可見，無需處理轉義字符或字符串連接。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;減少錯誤&lt;/strong&gt;：不需要手動添加換行符（\n），降低了出錯的可能性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;易於編輯&lt;/strong&gt;：可以直接複製粘貼格式化好的 JSON，而不需要額外的處理。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;保留縮進&lt;/strong&gt;：文本塊會保留的縮進，使得其在 Java 代碼中的呈現更加美觀。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1.1.6 模式匹配 instanceof 優化&lt;/h4&gt; 
&lt;p&gt;它允許將 instanceof 運算符用作返回已轉換對象的表達式。當我們使用嵌套的 if-else 語句時，這非常有用。在下面的示例中，可以看到我們如何使用 instanceof 運算符來捕獲對象，而不是進行顯式轉換。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;JDK 8&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Object obj = ...;

if (obj instanceof String) {
    String str = (String) obj;
    int length = str.length();
    System.out.println("字符串長度：" + length);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;JDK 17&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Object obj = ...;

if (obj instanceof String str) {
    int length = str.length();
    System.out.println("字符串長度：" + length);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.1.7 NullPointerExceptions 的優化&lt;/h4&gt; 
&lt;p&gt;對象空指針在日常開發中遇到的比較多，一般代碼報錯只能精確的某一行，如果該行的代碼比較複雜，涉及到多個對象，往往不能直接確定是哪一個對象為空。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;public class NpeDemo { 
  public static void main(String[] args) { 
    Address address=new Address();
    User user=new User();
    user.setAddress(address);
    log.info(user.getAddress().getCity().toLowerCase()); 
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;上面代碼中的第 6 行鏈式調用，如果某一個環節出現空指針，將會拋出空指針的異常：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Exception in thread "main" java.lang.NullPointerException 
at NpeDemo.main(Main.java:6)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;使用 JDK 17&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Exception in thread "main" java.lang.NullPointerException: 
Cannot invoke "String.toLowerCase()" because the return value of "Address.getCity()" is null 
  at NpeDemo.main(Main.java:6)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.1.8 集合、Stream 和 Optional 的增強&lt;/h4&gt; 
&lt;p&gt;Java 在集合（Collections）、Stream API 和 Optional 類方面引入了許多增強功能。主要有：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;集合增強&lt;/strong&gt;：不可變集合： 引入了創建不可變集合的便捷方法，如 List.of()、Set.of() 和 Map.of()。這些方法用於快速創建不可變集合，減少了代碼量並提高了安全性。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import java.util.*;

public class CollectionsDemo {
    public static void main(String[] args) {
        // 創建不可變 list
        List&amp;lt;String&amp;gt; list = List.of("Java", "Golang", "Python");
        // 創建不可變 set
        Set&amp;lt;String&amp;gt; set = Set.of("Java", "Golang", "Python");
        // 創建不可變 map
        Map&amp;lt;String, Integer&amp;gt; map = Map.of("Java", 1, "Golang", 2, "Python", 3);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;集合工廠方法&lt;/strong&gt;：Java 17 還引入了集合工廠方法，如 List.copyOf()、Set.copyOf() 和 Map.copyOf()，用於從現有集合創建不可變副本。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Stream API 增強&lt;/strong&gt; ：&lt;code&gt;takeWhile&lt;/code&gt;和&lt;code&gt;dropWhile&lt;/code&gt;：基於條件截取或跳過元素；&lt;code&gt;iterate&lt;/code&gt;：支持終止條件的迭代；&lt;code&gt;ofNullable&lt;/code&gt;：將可能為&lt;code&gt;null&lt;/code&gt;的值轉換為 Stream。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Optional 增強&lt;/strong&gt; ： &lt;code&gt;ifPresentOrElse&lt;/code&gt;：值存在時執行操作，否則執行另一個操作；&lt;code&gt;or&lt;/code&gt;：在值不存在時提供替代值；&lt;code&gt;stream&lt;/code&gt;：將&lt;code&gt;Optional&lt;/code&gt;轉換為 Stream。&lt;/p&gt; 
&lt;h3&gt;1.2 新 API 和工具&lt;/h3&gt; 
&lt;h4&gt;1.2.1 新的 HttpClient&lt;/h4&gt; 
&lt;p&gt;可以使用&lt;code&gt;HttpClient&lt;/code&gt;使用來發送請求並檢索其響應。 &lt;code&gt;HttpClient&lt;/code&gt;可以通過&lt;code&gt;builder&lt;/code&gt;來創建。該&lt;code&gt;newBuilder&lt;/code&gt;方法返回一個構建器，用於創建默認&lt;code&gt;HttpClient&lt;/code&gt;實現的實例。該構建器可用於配置每個客戶端的狀態，例如：首選協議版本（HTTP/1.1 或 HTTP/2）、是否遵循重定向、代理、身份驗證器等。 構建完成後，&lt;code&gt;HttpClient&lt;/code&gt;是不可變的，可用於發送多個請求。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// 同步示例
HttpClient client = HttpClient.newBuilder()
        .version(Version.HTTP_1_1)
        .followRedirects(Redirect.NORMAL)
        .connectTimeout(Duration.ofSeconds(20))
        .proxy(ProxySelector.of(new InetSocketAddress("proxy.example.com", 80)))
        .authenticator(Authenticator.getDefault())
        .build();
   HttpResponse&amp;lt;String&amp;gt; response = client.send(request, BodyHandlers.ofString());
   System.out.println(response.statusCode());
   System.out.println(response.body());  

// 異步示例
HttpRequest request = HttpRequest.newBuilder()
        .uri(URI.create("https://foo.com/"))
        .timeout(Duration.ofMinutes(2))
        .header("Content-Type", "application/json")
        .POST(BodyPublishers.ofFile(Paths.get("file.json")))
        .build();
   client.sendAsync(request, BodyHandlers.ofString())
        .thenApply(HttpResponse::body)
        .thenAccept(System.out::println);  
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;如果不希望引入三方依賴（三方依賴漏洞和 Bug 等需要經常升級），可以使用 JDK 提供的原生的 httpClient API，適用場景&lt;code&gt;中間件&lt;/code&gt;。&lt;/p&gt; 
&lt;h4&gt;1.2.2 打包工具 jpackage[2]&lt;/h4&gt; 
&lt;p&gt;該工具將以 Java 應用程序和 Java 運行時鏡像作為輸入，生成包含所有必要依賴項的 Java 應用程序鏡像。它能夠生成特定平台格式的原生軟件包，例如 Windows 上的 exe 文件或 macOS 上的 dmg 文件。每種格式都必須在其運行的平台上構建，不支持跨平台。該工具將提供一些選項，允許以各種方式定製打包的應用程序。該工具最大特點是無需單獨安裝 JDK 環境，例如用 JDK17 寫了一個 MCP Server 工具，直接打包為可執行文件安裝即可，減少環境依賴安裝。&lt;/p&gt; 
&lt;h4&gt;1.2.3 進程相關 API[3]&lt;/h4&gt; 
&lt;p&gt;進程管理功能得到了顯著增強，&lt;code&gt;ProcessHandle&lt;/code&gt;提供了更強大的功能來創建、監控和管理本地進程。這些改進使得 Java 程序能夠更靈活地與操作系統交互，同時提供了更詳細的進程信息和更強大的生命週期管理功能。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1.創建進程&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 Java 中，創建新進程通常使用&lt;code&gt;ProcessBuilder&lt;/code&gt;或&lt;code&gt;Runtime.getRuntime().exec()&lt;/code&gt;。而 Java 17 上&lt;code&gt;ProcessHandle&lt;/code&gt;提供了更強大的功能來管理這些進程。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ProcessBuilder pb = new ProcessBuilder("echo", "Hello World!");
Process p = pb.start();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2.監控進程&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;public class ProcessTest {

  // ...

  static public void startProcessesTest() throws IOException, InterruptedException {
    List&amp;lt;ProcessBuilder&amp;gt; greps = new ArrayList&amp;lt;&amp;gt;();
    greps.add(new ProcessBuilder("/bin/sh", "-c", "grep -c \"java\" *"));
    greps.add(new ProcessBuilder("/bin/sh", "-c", "grep -c \"Process\" *"));
    greps.add(new ProcessBuilder("/bin/sh", "-c", "grep -c \"onExit\" *"));
    ProcessTest.startSeveralProcesses (greps, ProcessTest::printGrepResults);      
    System.out.println("\nPress enter to continue ...\n");
    System.in.read();  
  }

  static void startSeveralProcesses (
    List&amp;lt;ProcessBuilder&amp;gt; pBList,
    Consumer&amp;lt;Process&amp;gt; onExitMethod)
    throws InterruptedException {
    System.out.println("Number of processes: " + pBList.size());
    pBList.stream().forEach(
      pb -&amp;gt; {
        try {
          Process p = pb.start();
          System.out.printf("Start %d, %s%n",
            p.pid(), p.info().commandLine().orElse("&amp;lt;na&amp;gt;"));
          p.onExit().thenAccept(onExitMethod);
        } catch (IOException e) {
          System.err.println("Exception caught");
          e.printStackTrace();
        }
      }
    );
  }
  
  static void printGrepResults(Process p) {
    System.out.printf("Exit %d, status %d%n%s%n%n",
      p.pid(), p.exitValue(), output(p.getInputStream()));
  }

  private static String output(InputStream inputStream) {
    String s = "";
    try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {
      s = br.lines().collect(Collectors.joining(System.getProperty("line.separator")));
    } catch (IOException e) {
      System.err.println("Caught IOException");
      e.printStackTrace();
    }
    return s;
  }

  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;3.獲取進程信息&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;public static void getInfoTest() throws IOException {
        ProcessBuilder pb = new ProcessBuilder("echo", "Hello World!");
        String na = "&amp;lt;not available&amp;gt;";
        Process p = pb.start();
        ProcessHandle.Info info = p.info();
        System.out.printf("Process ID: %s%n", p.pid());
        System.out.printf("Command name: %s%n", info.command().orElse(na));
        System.out.printf("Command line: %s%n", info.commandLine().orElse(na));

        System.out.printf("Start time: %s%n",
            info.startInstant().map((Instant i) -&amp;gt; i
                .atZone(ZoneId.systemDefault()).toLocalDateTime().toString())
                .orElse(na));

        System.out.printf("Arguments: %s%n",
            info.arguments().map(
                (String[] a) -&amp;gt; Stream.of(a).collect(Collectors.joining(" ")))
                .orElse(na));

        System.out.printf("User: %s%n", info.user().orElse(na));
}

輸出
Process ID: 18761
Command name: /usr/bin/echo
Command line: echo Hello World!
Start time: 2017-05-30T18:52:15.577
Arguments: &amp;lt;not available&amp;gt;
User: administrator
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;1.2.4 AI 工具最低版本為 JDK17&lt;/h4&gt; 
&lt;p&gt;最近火熱的 AI 大模型工具，JDK 8 不再兼容，運行的最低版本為 JDK 17，例如 Spring AI 工具。&lt;/p&gt; 
&lt;h3&gt;1.3 性能優化與 Bug 修復&lt;/h3&gt; 
&lt;h4&gt;1.3.1 垃圾回收器改進 ZGC&lt;/h4&gt; 
&lt;p&gt;ZGC 作為新一代的垃圾回收器，主要目標：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;支持 TB 級內存&lt;/li&gt; 
 &lt;li&gt;停頓時間控制在 10ms 之內&lt;/li&gt; 
 &lt;li&gt;對程序吞吐量影響小於 15%&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;據官方測評數據，在內存為 128GB 的機器上，相比於 G1 來説，性能提高 30%，停頓時間減少 99%。&lt;/p&gt; 
&lt;h4&gt;1.3.2 NIO 重寫與優化&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;支持 Unix-Domain 套接字&lt;/strong&gt;：在 JDK8 上如果想要使用 UDS，一般使用 Netty 或者開源的 Juds 庫，JDK 17 支持了該功能，無需使用第三方庫；&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;文件通道的優化&lt;/strong&gt;：可以將文件的某個區域直接映射到內存中，從而實現高效的讀寫操作。這種方式利用了操作系統的內存映射機制，減少了 I/O 操作的開銷；&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;零拷貝支持&lt;/strong&gt;：允許數據直接從磁盤的一個位置複製到另一個位置，而無需經過用戶態內存。這減少了數據在用戶態和內核態之間的拷貝次數，從而顯著提高了性能。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1.3.3 Java SDK 模塊化設計&lt;/h4&gt; 
&lt;p&gt;JVM 的模塊化是 Java 9 引入的一個重要特性，通過 Java Platform Module System (JPMS) 實現。這一特性旨在解決 Java 應用在可擴展性和維護上的問題，提供更高級別的封裝和依賴管理機制。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;減少環境資源開銷&lt;/strong&gt;：在 JDK 9 之前，每次啓動 JVM 都要耗費至少 30MB 到 60MB 的內存空間，因為 JVM 需要加載整個 rt.jar。模塊化允許 JVM 選擇性地加載必需的模塊，從而減少內存佔用。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;提升開發效率和運行速度&lt;/strong&gt;：隨着代碼庫的複雜性增加，開發效率和運行速度會受到影響。模塊化通過規範化路徑和依賴關係，使系統更安全、更高效。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;規範化路徑及依賴關係&lt;/strong&gt;：JDK 9 之前，系統沒有對不同 JAR 之間的依賴或敏感路徑進行限制，導致所有 JAR 都可以被訪問，暴露了安全問題。模塊化通過管理模塊間的依賴關係，隱藏不必要的模塊，提高了安全性和空間利用率。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1.3.4 Java Agent 機制的 Attach Bug 修復&lt;/h4&gt; 
&lt;p&gt;Java Attach Socket 文件被刪除後會導致 Java Agent 注入失敗，在 JDK 8 上只能通過重啓解決，而 JDK 17 會重新創建一個新的文件。&lt;/p&gt; 
&lt;h4&gt;1.3.5 彈性元空間[4]&lt;/h4&gt; 
&lt;p&gt;更及時地將未使用的元空間內存回收，減少元空間佔用的內存。&lt;/p&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;JDK17+ZGC 在安全領域的實踐&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;h3&gt;2.1 美團 JDK 的現狀&lt;/h3&gt; 
&lt;p&gt;在美團信息安全部，JDK8（Oracle JDK8u201）依然是主流版本，其次是 Open JDK17，剩下為 Open JDK 11。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//741b89994a9cb115f8cfa24e32a8c514.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;2.2 ZGC 適用場景&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//63b1d3093a63550bd74f5489a0c68462.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;服務器成本壓力大：服務器數量大於 100 台、單機配置大於 16C16G、Java 堆內存超過 16G 等。&lt;/li&gt; 
 &lt;li&gt;單機 CPU 高：峯值大約在 50%&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//33bd0463bac3ff69b941c53beb498801.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;性能火焰圖中 GC 佔比高&lt;/li&gt; 
 &lt;li&gt;高峯期故障雷達、監控大盤和服務日誌等告警頻繁&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2.3 ZGC 效果&lt;/h3&gt; 
&lt;h4&gt;2.3.1 性能壓測效果&lt;/h4&gt; 
&lt;p&gt;在測試服務不同接口中，ZGC 在高 QPS 場景中收益較大（服務的 QPS 超過 1 萬）：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;TP9999&lt;/strong&gt;：下降 220~380ms，下降幅度 18%~74%。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;TP999&lt;/strong&gt;：下降 60-125ms，下降幅度 10%~63%。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;TP99&lt;/strong&gt;：下降 3ms-20ms，下降幅度 0%-25%。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;一些重度依賴外部的接口中性能優化不大，原因是這些服務的響應時間瓶頸不是 GC，而是外部依賴的性能，在一些低 QPS 接口中對比不太明顯。&lt;/p&gt; 
&lt;h4&gt;2.3.2 案例 1：智能決策系統（JDK 11+ZGC 升級到 JDK 17+ZGC）&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;峯值 cpu.busy 指標下降&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;升級前: 47.8565%&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//f718dd4d745bb448173cbe960ab78a8f.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;升級後: 41.4933%&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//6da00d3b35876b2f54ef3da8ce680972.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;系統長期運行時 TP9999 性能穩定&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;運行 15 天，JDK11 機器長時間不重啓三九、四九線會逐漸升高，JDK 17 機器較為穩定。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//a82620036e2172e5eed80eede0944f36.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;服務失敗率顯著降低&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;UGC 集羣升級效果：錯誤數量由峯值 6000 下降到 349。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//9d6499c78dd50077ab3a09c8b9a5fded.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;JVM 元空間使用降低&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//14e0e2f136345f99ea5521fe4de3de52.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;單機維度高峯期性能指標&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//1b3e2d500a2966651ec0ac9ecd2a5663.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h4&gt;2.3.3 案例 2：內容安全核心服務 (JDK 8+CMS 升級到 JDK 17+ZGC）&lt;/h4&gt; 
&lt;p&gt;該服務是內容安全的代理層，主要負責匹配請求的分發、輔助功能支撐（日誌、監控、熔斷）以及一些個性化業務需求。當前該服務 GC 是 CMS，該服務線上的 Young GC 平均耗時是 17ms，平均每分鐘 GC 次數是 6 次，該服務接口平均響應時間是 2.6ms。&lt;/p&gt; 
&lt;p&gt;根據文章《&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.meituan.com%2F2017%2F12%2F29%2Fjvm-optimize.html" target="_blank"&gt;從實際案例聊聊 Java 應用的 GC 優化&lt;/a&gt;》中提供的計算方式，受到 Young GC 影響的請求佔比是：&lt;/p&gt; 
&lt;p&gt;$$受 GC 影響請求佔比 = \frac{N * \left ( GC 時間 + 接口響應時間 \right ) }{T} = \frac{6 * \left ( 17 + 2.6 \right ) }{60000} = 0.196%$$&lt;/p&gt; 
&lt;p&gt;即有 0.196% 的請求收到 GC 時間 0-17ms 不等的影響。其中收到 GC 停頓完整影響的請求佔比：&lt;/p&gt; 
&lt;p&gt;$$受 GC 完整影響請求佔比 = \frac{N * \left (接口響應時間 \right ) }{T} = \frac{6 * 2.6}{60000} = 0.026%$$&lt;/p&gt; 
&lt;p&gt;即其中有 0.026% 的請求受到完整的 GC 停頓時間影響，即耗時增加 17ms，可以大致理解為請求響應的 9999 線會因 GC 停頓而導致 17ms 的上漲。&lt;/p&gt; 
&lt;p&gt;根據 ZGC 的 STW 的耗時在毫秒甚至亞毫秒級別，因此理論上升級後服務的 9999 線可以降低 17ms 左右。在實際生產中，還會有 Full GC 的影響，會帶來耗時的進一步提升，ZGC 在該部分可以避免 Full GC 帶來的影響。&lt;/p&gt; 
&lt;p&gt;服務升級採用的是 Tomcat 9+JDK 17 的配置，錄製線上流量進行壓測，使用同樣的流量對先前採用 CMS 垃圾回收的以及採用 ZGC 垃圾回收方式的同時進行壓測。服務器配置均為 8C16G，800QPS 的壓測，通過 2h 左右的壓測，&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;分析接口耗時統計&lt;/strong&gt;：可得到以下數據，發現耗時均有明顯下降，9999 線的下降量低於理論的 17ms，由於實際環境中其他因素的影響也基本符合預期。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//56b4d79c7da3403c9fde82947bf34f88.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;分析 CPU 和 JVM 佔用情況：CPU 和 JVM 佔用情況發現，CPU 佔用在峯值處會提升 10% 左右，JVM 佔用情況基本一致。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//5c62be54cdd72cde90060ce5bf8c78cc.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h3&gt;2.4 ZGC 實現原理簡介&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;更多詳情，可參考《&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.meituan.com%2F2020%2F08%2F06%2Fnew-zgc-practice-in-meituan.html" target="_blank"&gt;新一代垃圾回收器 ZGC 的探索與實踐&lt;/a&gt;》一文。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;2.4.1 CMS 與 G1 停頓時間瓶頸&lt;/h4&gt; 
&lt;p&gt;在介紹 ZGC 之前，首先回顧一下 CMS 和 G1 的 GC 過程以及停頓時間的瓶頸。CMS 新生代的 Young GC、G1 和 ZGC 都基於標記-複製算法，但算法具體實現的不同就導致了巨大的性能差異。&lt;/p&gt; 
&lt;p&gt;標記-複製算法應用在 CMS 新生代（ParNew 是 CMS 默認的新生代垃圾回收器）和 G1 垃圾回收器中。標記-複製算法可以分為三個階段：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;標記階段&lt;/strong&gt;，即從 GC Roots 集合開始，標記活躍對象；&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;轉移階段&lt;/strong&gt;，即把活躍對象複製到新的內存地址上；&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;重定位階段&lt;/strong&gt;，因為轉移導致對象的地址發生了變化，在重定位階段，所有指向對象舊地址的指針都要調整到對象新的地址上。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下面以 G1 為例，通過 G1 中標記-複製算法過程（G1 的 Young GC 和 Mixed GC 均採用該算法），分析 G1 停頓耗時的主要瓶頸。G1 垃圾回收週期如下圖所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//475b53df8e7a764b5b232636407dfcaa.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;G1 的混合回收過程可以分為標記階段、清理階段和複製階段：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;標記階段停頓分析&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;初始標記階段&lt;/strong&gt;：初始標記階段是指從根節點（GC Roots）出發標記全部直接子節點的過程，該階段是 STW 的。由於 GC Roots 數量不多，通常該階段耗時非常短。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;併發標記階段&lt;/strong&gt;：併發標記階段是指從 GC Roots 開始對堆中對象進行可達性分析，找出存活對象。該階段是併發的，即應用線程和 GC 線程可以同時活動。併發標記耗時相對長很多，但因為不是 STW，所以我們不太關心該階段耗時的長短。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;再標記階段&lt;/strong&gt;：重新標記那些在併發標記階段發生變化的對象。該階段是 STW 的。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;清理階段停頓分析&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;清理階段清點出有存活對象的分區和沒有存活對象的分區，該階段不會清理垃圾對象，也不會執行存活對象的複製。該階段是 STW 的。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;複製階段停頓分析&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;複製算法中的轉移階段需要分配新內存和複製對象的成員變量。轉移階段是 STW 的，其中內存分配通常耗時非常短，但對象成員變量的複製耗時有可能較長，這是因為複製耗時與存活對象數量與對象複雜度成正比。對象越複雜，複製耗時越長。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;四個 STW 過程中，初始標記因為只標記 GC Roots，耗時較短。再標記因為對象數少，耗時也較短。清理階段因為內存分區數量少，耗時也較短。轉移階段要處理所有存活的對象，耗時會較長。因此，G1 停頓時間的瓶頸主要是標記-複製中的轉移階段 STW。為什麼轉移階段不能和標記階段一樣併發執行呢？主要是 G1 未能解決轉移過程中準確定位對象地址的問題。&lt;/p&gt; 
&lt;h4&gt;2.4.2 ZGC 原理&lt;/h4&gt; 
&lt;p&gt;與 CMS 中的 ParNew 和 G1 類似，ZGC 也採用標記-複製算法，不過 ZGC 對該算法做了重大改進：&lt;strong&gt;ZGC 在標記、轉移和重定位階段幾乎都是併發的&lt;/strong&gt;，這是 ZGC 實現停頓時間小於 10ms 目標的最關鍵原因。&lt;/p&gt; 
&lt;p&gt;ZGC 垃圾回收週期如下圖所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//ff472f97b6b955687ebeabd32e9a9ee7.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;ZGC 只有三個 STW 階段：&lt;strong&gt;初始標記，再標記，初始轉移&lt;/strong&gt;。其中，初始標記和初始轉移分別都只需要掃描所有 GC Roots，其處理時間和 GC Roots 的數量成正比，一般情況耗時非常短；再標記階段 STW 時間很短，最多 1ms，超過 1ms 則再次進入併發標記階段。即，ZGC 幾乎所有暫停都只依賴於 GC Roots 集合大小，停頓時間不會隨着堆的大小或者活躍對象的大小而增加。與 ZGC 對比，G1 的轉移階段完全 STW 的，且停頓時間隨存活對象的大小增加而增加。&lt;/p&gt; 
&lt;h4&gt;2.4.3 主要特點&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;單代&lt;/strong&gt;：ZGC 沒有分代，基於"大部分對象朝生夕死"的假設，沒有 Young GC 的概念（這裏僅指 JDK 17，JDK 21 支持分代回收，性能更高）。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;基於 Region&lt;/strong&gt;： G1 的每個 Region 大小是完全一樣的，而 ZGC 的 Region 更靈活，其中大型 Region 大小不固定,可以動態變化，也不會被重分配，因為複製一個大對象代價太高。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;部分壓縮&lt;/strong&gt;： 基於 Region，"標記-整理"，相對 CMS 壓縮時間更短。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;支持 NUMA&lt;/strong&gt;： 對應有 UMA，每個 CPU 對應有一塊內存，每個 CPU 優先訪問這塊內存。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//addc3e92b946e1d9221a8cb50eff2b94.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;染色指針&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//143532af9ea5101d47ac6e49dec629eb.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;以前的垃圾回收器的 GC 信息都保存在對象頭中，ZGC 將 GC 信息保存在了染色指針上,無需進行對象訪問就可以獲得 GC 信息。這就是 ZGC 在標記和轉移階段速度更快的原因。Marked0、Marked1 和 Remapped 這三個虛擬內存作為 ZGC 的三個視圖空間，在同一個時間點內只能有一個有效。ZGC 就是通過這三個視圖空間的切換，來完成併發的垃圾回收。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;讀屏障&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;讀屏障，在標記和移動對象的階段，每次從堆裏對象的引用類型中讀取一個指針的時候，都需要加上一個 Load Barriers。用於確定對象的引用地址是否滿足條件，並作出相應動作。&lt;/p&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;JDK 17 升級實踐過程&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;p&gt;主要分為三個階段：安裝部署、解決兼容性問題、性能測試與參數優化。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;如果公司的中間件大部分基於 JDK 8，工程代碼編譯可以基於 JDK 8，運行環境使用 JDK 17。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;3.1 安裝與兼容性問題&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;1.主要的問題舉例&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;JVM 運行的報錯信息：module java.base does not "opens java.util.concurrent.locks" to unnamed module&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[ERROR] main JsonUtil Json parse failed
java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock java.util.concurrent.locks.ReentrantReadWriteLock.readerLock accessible: module java.base does not "opens java.util.concurrent.locks" to unnamed module @1ba9117e
at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
at com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(ClassUtil.java:939)
at com.fasterxml.jackson.databind.deser.impl.FieldProperty.fixAccess(FieldProperty.java:104)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2.原因&lt;/strong&gt;：JDK9 之後 Java API 使用了模塊化設計方案，用戶模塊無法反射調用 Java 代碼，需要使用開啓對應模塊訪問權限（沒有引入新的安全問題，相當於沒有用模塊隔離的功能）。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3.解決方式&lt;/strong&gt;：　JVM 參數增加如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/java.math=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-opens java.base/java.security=ALL-UNNAMED --add-opens java.base/java.text=ALL-UNNAMED --add-opens java.base/java.time=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.util.concurrent=ALL-UNNAMED --add-opens java.base/java.util.concurrent.locks=ALL-UNNAMED --add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED --add-opens java.base/jdk.internal.access=ALL-UNNAMED --add-opens java.base/jdk.internal.misc=ALL-UNNAMED
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;其他軟件等兼容性問題，根據自身服務報錯，對應解決問題。&lt;/p&gt; 
&lt;h3&gt;3.2 性能壓測&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;基準&lt;/strong&gt;： JDK 8+CMS&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;壓測&lt;/strong&gt;：實驗組和對照組壓測後重啓避免性能優化為結果影響並取平均值&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;指標監控&lt;/strong&gt;： 峯值 CPU、平均 CPU、TP9999、報錯數量、GC 總時間和次數、JVM 堆內存和元空間變化等&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;其他&lt;/strong&gt;：性能火焰圖&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3.3 JVM 參數&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;-Xmx18g -Xms18g 堆大小&lt;/li&gt; 
 &lt;li&gt;-XX:MaxDirectMemorySize=2G 直接內存&lt;/li&gt; 
 &lt;li&gt;-XX:+HeapDumpOnOutOfMemoryError 當 JVM 發生 OOM 時，自動生成 DUMP 文件。&lt;/li&gt; 
 &lt;li&gt;-XX:ReservedCodeCacheSize=256m -XX:InitialCodeCacheSize=256m 設置 codecache 大小，默認 128m&lt;/li&gt; 
 &lt;li&gt;-XX:+UseZGC 使用 ZGC&lt;/li&gt; 
 &lt;li&gt;-XX:ZAllocationSpikeTolerance=2 ZGC 觸發自適應算法的修正係數，默認 2，數值越大，越早的觸發 ZGC&lt;/li&gt; 
 &lt;li&gt;-XX:ZCollectionInterval=0 ZGC 的週期。默認值為 0，表示不需要觸發垃圾回收。固定週期垃圾回收。ZGC 發生的最小時間間隔，單位秒&lt;/li&gt; 
 &lt;li&gt;-XX:ConcGCThreads=4 併發階段的 GC 線程數，默認是總核數的 12.5%&lt;/li&gt; 
 &lt;li&gt;-XX:ZStatisticsInterval=10 控制統計信息輸出的間隔，默認 10s&lt;/li&gt; 
 &lt;li&gt;-XX:ParallelGCThreads=16 並行工作線程數據，STW 階段使用線程數，默認是總核數的 60%&lt;/li&gt; 
 &lt;li&gt;-Xlog:safepoint,classhisto*=trace,age*,gc*=info:file=/opt/logs/logs/gc-%t.log:time,tid,tags:filecount=5,filesize=50m' 設置 GC 日誌中的內容、格式、位置以及每個日誌的大小&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;本服務 prod 機器 16c，16g 成功運行起來的 JVM 參數（還在調整中，僅供參考）：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;-server -Xmx12g -Xms12g -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+UseZGC -XX:+UseDynamicNumberOfGCThreads -XX:ConcGCThreads=3 -XX:ParallelGCThreads=8 -XX:ZCollectionInterval=130 -XX:ZAllocationSpikeTolerance=1 -XX:MaxDirectMemorySize=460m -XX:MetaspaceSize=330m -XX:MaxMetaspaceSize=330m -XX:ReservedCodeCacheSize=256m -XX:InitialCodeCacheSize=256m -XX:+UseCountedLoopSafepoints -XX:+SafepointTimeout -XX:SafepointTimeoutDelay=500 -XX:GuaranteedSafepointInterval=0 -XX:+DisableExplicitGC -XX:+HeapDumpOnOutOfMemoryError -XX:ZStatisticsInterval=130 -XX:+PrintGCDetails -Xlog:safepoint,class+load=info,class+unload=info,classhisto*=trace,age*,gc*=info:file=/opt/logs/logs/gc-%t.log:time,tid,tags:filecount=5,filesize=50m --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/java.math=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-opens java.base/java.security=ALL-UNNAMED --add-opens java.base/java.text=ALL-UNNAMED --add-opens java.base/java.time=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.util.concurrent=ALL-UNNAMED --add-opens java.base/java.util.concurrent.locks=ALL-UNNAMED --add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED --add-opens java.base/jdk.internal.access=ALL-UNNAMED --add-opens java.base/jdk.internal.misc=ALL-UNNAMED --add-opens java.base/sun.reflect.generics.reflectiveObjects=ALL-UNNAMED --add-opens java.base/jdk.internal.perf=ALL-UNNAMED --add-opens java.base/java.instrument=ALL-UNNAMED --add-opens jdk.attach/sun.tools.attach=ALL-UNNAMED 
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;總結&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li&gt;ZGC 作為新一代垃圾回收器，各項性能指標都比較突出，升級之後，機器成本和性能收益明顯；&lt;/li&gt; 
 &lt;li&gt;Spring AI SDK 支持的 JDK 版本最小為 17，升級到 JDK 17 能更好地擁抱 AI 新技術；&lt;/li&gt; 
 &lt;li&gt;直接從 JDK 8 升級到 JDK 17 跨度較大，需要解決的兼容性問題較多，如果公司的基礎組件不支持 JDK 17，可以考慮先升級到 JDK 11 做一個過渡；&lt;/li&gt; 
 &lt;li&gt;如果在升級與實踐的過程中遇到了一些問題，可以結合 AI 大模型來給出解決方案，幫助提高升級效率。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;註釋&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[1] &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fen%2Fjava%2Fjavase%2F17%2Flanguage%2Fjava-language-changes-summary.html" target="_blank"&gt;語言特性&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[2] &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fen%2Fjava%2Fjavase%2F17%2Fdocs%2Fspecs%2Fman%2Fjpackage.html" target="_blank"&gt;打包工具 jpackage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[3] &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fen%2Fjava%2Fjavase%2F17%2Fcore%2Fprocess-api1.html" target="_blank"&gt;進程相關 API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[4] &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F387" target="_blank"&gt;彈性元空間&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[5] TP999：指的是 OctoService.TP999&lt;/li&gt; 
 &lt;li&gt;[6] &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmalloc.se%2Fblog%2Fzgc-jdk16" target="_blank"&gt;TP9999&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;閲讀更多&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;| 關注「美團技術團隊」微信公眾號，在公眾號菜單欄對話框回覆【2024 年貨】、【2023 年貨】、【2022 年貨】、【2021 年貨】、【2020 年貨】、【2019 年貨】、【2018 年貨】、【2017 年貨】等關鍵詞，可查看美團技術團隊歷年技術文章合集。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//99197a0cda5599168313884ca25c4fd6.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;| 本文系美團技術團隊出品，著作權歸屬美團。歡迎出於分享和交流等非商業目的轉載或使用本文內容，敬請註明 "內容轉載自美團技術團隊"。本文未經許可，不得進行商業性轉載或者使用。任何商用行為，請發送郵件至 &lt;a href="https://www.oschina.net/action/GoToLink?url=mailto%3Atech%40meituan.com" target="_blank"&gt;tech@meituan.com&lt;/a&gt; 申請授權。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/meituantech/blog/18627969</link>
      <guid isPermaLink="false">https://my.oschina.net/meituantech/blog/18627969</guid>
      <pubDate>Sun, 11 May 2025 03:41:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>深圳程序員住車裏，被質疑佔用公共資源</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;今年 4 月，深圳程序員張運來因不租房住車裏引發大量關注。報道稱，張運來工作日期間天天睡車裏，週五晚上再開車約 300 公里回陽江老家陪家人，週一一早再開車回深圳上班。利用公園的公共衞生間洗漱，每晚只需花費 6 元停車費，每日消費僅 100 元上下。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;通過住進車裏，「三年多省了差不多十萬塊錢」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img height="416" src="https://oscimg.oschina.net/oscnet/up-a27f5633fe69b3d829c02629eb8616161d2.png" width="300" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;但該行為也引來了許多網友的質疑，認為他佔用了公共資源。對此，紅星新聞記者近日專訪張運來。張運來解釋稱，自己並沒有不文明行為。深圳灣晚上的空閒車位很多，他只是剛好利用空閒時間在那邊過夜，最多也只是在公園的洗手間進行刷牙洗臉。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356800</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356800</guid>
      <pubDate>Sun, 11 May 2025 03:20:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>微軟發佈 WSL 2.6 作為首個開源版本更新</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;微軟於 5 月在 Build 開發者大會上宣佈&lt;a href="https://www.oschina.net/news/350716/wsl-open-source"&gt;WSL 開源&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-68339f59c1f8585f833f947f24d261183ab.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;近日，微軟發佈了該項目的首個開源版本，同時帶來了穩定性改進以及各種錯誤修復和其他增強功能。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;更新本地化字符串&lt;/li&gt; 
 &lt;li&gt;在 BasePath 不存在時不要拋出異常&lt;/li&gt; 
 &lt;li&gt;修復如果 URL 包含參數時分佈下載失敗&lt;/li&gt; 
 &lt;li&gt;修復與 systemd 用戶會話的各種問題&lt;/li&gt; 
 &lt;li&gt;修復從 wslservice 調用 wslsettings 時崩潰&lt;/li&gt; 
 &lt;li&gt;在移動分佈 VHD 時設置 MOVEFILE_WRITE_THROUGH&lt;/li&gt; 
 &lt;li&gt;解析 Windows 的'hosts'文件時丟棄 BOM 頭&lt;/li&gt; 
 &lt;li&gt;在 mount() 因 EUCLEAN 失敗時正確報告損壞的磁盤&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;WSL 2.6.0 版本的下載和更多詳情查看&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2FWSL%2Freleases%2Ftag%2F2.6.0" target="_blank"&gt;https://github.com/microsoft/WSL/releases/tag/2.6.0&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356799/wsl-2-6-open-source</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356799/wsl-2-6-open-source</guid>
      <pubDate>Sun, 11 May 2025 03:20:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Spring Boot 3.4.7 正式發佈</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Spring Boot 3.4.7 已正式&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspring.io%2Fblog%2F2025%2F06%2F19%2Fspring-boot-3-4-7-available-now" target="_blank"&gt;發佈&lt;/a&gt;，這是 Spring Boot 3.4 系列的最新版本。&lt;/p&gt; 
&lt;p&gt;以下是該版本的一些更新內容：&lt;/p&gt; 
&lt;h3&gt;修復了多項錯誤&lt;/h3&gt; 
&lt;p&gt;共修復了 49 個錯誤，涵蓋了應用的各個方面的潛在問題，可有效提高應用的穩定性和可靠性。&lt;/p&gt; 
&lt;h3&gt;改進了文檔&lt;/h3&gt; 
&lt;p&gt;對相關文檔進行了完善和更新，使開發者能夠更準確地理解和使用 Spring Boot 的各項功能。&lt;/p&gt; 
&lt;h3&gt;依賴項升級&lt;/h3&gt; 
&lt;p&gt;更新了部分依賴項，讓 Spring Boot 能夠與更高版本的庫和框架兼容，從而更好地利用新技術和新特性，提升整體性能和安全性。&lt;/p&gt; 
&lt;h3&gt;改進了可觀測性&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;新增應用分組功能&lt;/strong&gt; ：引入 &lt;code&gt;spring.application.group&lt;/code&gt; 屬性，可將屬於同一業務單元或大型應用組的多個應用進行分組。當設置該屬性時，其值還會包含在日誌消息中，也可通過 &lt;code&gt;logging.include-application.group&lt;/code&gt; 屬性控制此行為，便於對應用進行分類監控和管理。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;增強 OTLP 支持&lt;/strong&gt; ：支持通過 gRPC 傳輸 OTLP span，並引入新的配置屬性 &lt;code&gt;management.otlp.tracing.transport&lt;/code&gt;，其默認值為 http。同時增加了對服務連接的支持，並新增了 &lt;code&gt;management.otlp.logs&lt;/code&gt; 下的屬性，用於自動配置 OpenTelemetry 的 &lt;code&gt;OtlpHttpLogRecordExporter&lt;/code&gt; 和 &lt;code&gt;SdkLoggerProvider&lt;/code&gt;。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;對 Spring Integration 的支持升級&lt;/h3&gt; 
&lt;p&gt;升級了對 Spring Integration 的支持，現在它要求使用 Spring Integration 6.1.5 或更高版本。&lt;/p&gt; 
&lt;h3&gt;增強了對虛擬線程的支持&lt;/h3&gt; 
&lt;p&gt;如果啓用了虛擬線程，那麼 &lt;code&gt;OtlpMeterRegistry&lt;/code&gt; 和 Undertow web 服務器將使用虛擬線程，從而提高性能和可擴展性。&lt;/p&gt; 
&lt;h3&gt;Docker Compose 改進&lt;/h3&gt; 
&lt;p&gt;Docker Compose 支持多個 Docker Compose 配置文件，並新增了 &lt;code&gt;spring.docker.compose.start.arguments&lt;/code&gt;、&lt;code&gt;spring.docker.compose.stop.arguments&lt;/code&gt; 和 &lt;code&gt;spring.docker.compose.arguments&lt;/code&gt; 屬性，分別用於在啓動和停止服務時向 Docker Compose 子命令傳遞額外的命令行參數以及向 Docker Compose 傳遞參數。&lt;/p&gt; 
&lt;h3&gt;改進了測試容器相關功能&lt;/h3&gt; 
&lt;p&gt;新增了對 &lt;code&gt;org.testcontainers.kafka.KafkaContainer&lt;/code&gt; 的支持，同時也支持了 Redis Stack 和 Redis Stack Server，分別使用 &lt;code&gt;redis/redis-stack&lt;/code&gt; 和 &lt;code&gt;redis/redis-stack-server&lt;/code&gt; 鏡像，還支持了 &lt;code&gt;org.testcontainers.grafana.LgtmStackContainer&lt;/code&gt; 和 Hazelcast 以及 OTLP 日誌等。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356793/spring-boot-3-4-7</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356793/spring-boot-3-4-7</guid>
      <pubDate>Sun, 11 May 2025 03:06:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>羅永浩：3 個月後發佈新 AI 產品，梁文鋒建議我「靠嘴吃飯」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;羅永浩近日以「科技創業者」身份出席線下活動時表示，接下來兩三個月內，他會發布一款與郵件等場景相關的提高工作效率的 AI 生產力軟件工具。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;羅永浩表示，他認為用 AI 做圖片生成、視頻生成等技術比較驚豔。但他認為，具體到 Email 場景中，無論是雅虎還是谷歌，當前很多 Email 和 AI 結合的 AI 郵件產品體驗做得不好。而且，很多相關的美國明星創業公司也融了不少錢，但產品做得很差。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;「然後我就感覺，我們可以把 AI 郵件這塊做得更好，這個過程裏我們雖然沒有資源和錢去做預訓練，但基於第一批的用戶不斷優化，我們是有信心的。而且我不擔心這個事兒會被大公司覆蓋掉。所以我們想要做得更好，被收費也是一個好的出路。」羅永浩表示，用 GUI 設計出來的工作流可以處理海量的郵件，如果利用 AI 把郵件產品優化的話，可以節省掉 2/3 以上的時間。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="335" src="https://oscimg.oschina.net/oscnet/up-ccc7ab26346d316e69b64e6f303f93227d1.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;談到 AI 取代人類話題，羅永浩表示，「我經常被非科技行業的人問，AI 替代了人怎麼辦。為什麼都問我呢？畢竟我也還沒做出來 AI 產品」。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;羅永浩説，AI 並不意味着所有人都會失業，但是每個人都要學會 AI，哪怕是在辦公室裏偷懶，也要把更多的時間用在 AI 上，否則被裁員而失業了，你們也不知道該怎麼辦。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;「我們以前招了幾個人做戰略分析，寫 15000 字戰略報告那種，現在用 AI 很快能寫出來，15 分鐘做到之前一週內的水平，質量還好。結果還沒裁這幾個人，他們就自己走了。去了哪裏呢？去了那些對 AI 還不懂的傳統公司。」&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;此外，羅永浩也談到 DeepSeek，他曾在去年見過一次梁文鋒。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;羅永浩表示，他在酒店大堂裏面和梁文鋒見面攀談，他認為梁文鋒不像是老闆，而像一名學生，甚至像是「沒找到工作的博士後」，非常樸素。對於 AI 創業，梁文鋒給羅永浩提了意見，問他為什麼要做 AI，説他用嘴説話的能力是中國前三，就應該專注在用嘴這件事，建議去做個播客節目。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;「他説我沒有別的意思，我説我只是覺得一個人在任何領域裏，如果能做到全國前幾名，應該要堅持做這件事。」因此，羅永浩現場表示，2025 今年底前，他將可能創立一個 AI 領域的播客節目。而梁文鋒對於羅永浩做 AI 應用稱「結果我不好判斷」。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356791</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356791</guid>
      <pubDate>Sun, 11 May 2025 03:01:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>網信辦整治 AI 濫用，3500 餘款違規 AI 產品被處置</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;「清朗·整治 AI 技術濫用」專項行動於 2025 年 4 月啓動。第一階段累計處置違規小程序、應用程序、智能體等 AI 產品 3500 餘款，清理違法違規信息 96 萬餘條，處置賬號 3700 餘個，各項工作取得積極進展。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="245" src="https://oscimg.oschina.net/oscnet/up-61fa8623f6acb022a23177614c906e2d7ea.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;其中，在處置違規 AI 產品方面，騰訊規範應用程序管理，提高准入門檻，優化巡查機制，駁回、處置違規小程序、應用程序等共計 570 餘款。在清理違規 AI 產品教程和商品方面，微博通過策略識別、用戶舉報等多渠道審核，累計處置違規內容 4800 餘條，並公佈典型案例。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在加強訓練語料管理方面，通義平台圍繞數據生命週期建立安全管理體系，在數據採集、訓練、使用等階段加強訓練語料管理。在強化安全管理措施方面，抖音建立「紅藍對抗」機制，模擬攻擊案例，修復潛在安全漏洞，優化模型對虛假信息的識別能力。在落實內容標識要求方面，阿里、快手、稀宇等重點平台積極推進元數據隱式標識落地落實。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;在防範重點領域安全風險方面，小紅書在模型後置訓練階段輸入專業領域數據，提升模型對醫療、金融、未成年人等重點領域問題的理解能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;據悉，下一步，中央網信辦將聚焦 AI 造謠、低俗內容等 7 類突出問題，開展「清朗·整治 AI 技術濫用」專項行動第二階段工作，構建技術監測體系，形成處置處罰規範，推動內容標識如期落地，形成長效工作機制，着力維護清朗網絡生態，推動人工智能向善向好。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356788</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356788</guid>
      <pubDate>Sun, 11 May 2025 02:44:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>月之暗面 Kimi 首個 Agent 開始灰度測試</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;Kimi 首個 Agent Kimi-Researcher（深度研究）已於日前開始小範圍灰度測試。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FYV4M8YNZ5hnzfxaFQ7PL9A" target="_blank"&gt;公告&lt;/a&gt;稱，Kimi-Researcher 是基於端到端自主強化學習（end-to-end agentic RL）技術訓練的新一代 Agent 模型，也是一個專為深度研究任務而生的 Agent 產品。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;接下來，Kimi 還計劃逐步開源 Kimi-Researcher 基礎預訓練模型、以及強化學習後的模型。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;根據介紹，對於每一個問題，Kimi-Researcher 都會自主規劃任務執行流程，最終交付完整結果：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;澄清問題（clarification）：理解問題時主動反問，構建更清晰的問題空間；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;深入思考：每個任務平均進行 23 步推理，自主梳理並解決需求；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;主動搜索：每個任務，平均規劃 74 個關鍵詞，找到 206 個網址，由模型判斷並篩選出信息質量最高的前 3.2% 內容，剔除冗餘、低質信息；&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;調用工具，交付結果：自主調用瀏覽器、代碼等工具，處理原始數據、自動生成分析結論，端到端完成交付。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;為了保證輸出的質量和信息覆蓋度，Kimi-Researcher 採用異步執行方式，用更多時間逐步推理、檢索和撰寫內容。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;&lt;img alt="" height="250" src="https://oscimg.oschina.net/oscnet/up-7bf271cbc490315d0514136f703d2363fc1.gif" width="500" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:#000000"&gt;在完全&lt;/span&gt;&lt;strong style="color:#000000"&gt;零結構、無流程設計&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#000000"&gt;的設置下，&lt;/span&gt;&lt;span style="color:#000000"&gt;Kimi-Researcher 的&amp;nbsp;&lt;/span&gt;&lt;span style="background-color:#ffffff; color:#000000"&gt;Humanity’s Last Exam（HLE）基準測試得分如下：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;Pass@1 準確率：26.9%&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="color:#000000"&gt;Pass@4 準確率：40.17%&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="color:#000000"&gt;這一表現超過了 Claude 4 Opus（10.7%）、Gemini 2.5 Pro（21.6%），略高於 OpenAI Deep Research（26.6%），和 Gemini-Pro 的 Deep Research Agent（26.9%）打平，是目前已知最高水平之一。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:#000000"&gt;在紅杉中國發布的 xbench 基準測試中 —— 一套對齊真實任務場景的 AI 能力評估體系，Kimi-Researcher 在 DeepSearch 任務中取得 69% 的平均通過率。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height="331" src="https://oscimg.oschina.net/oscnet/up-34b4836de3fd3cf3656ab62331a137ccf11.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong style="color:rgba(0, 0, 0, 0.9)"&gt;&lt;span style="color:#000000"&gt;可訪問&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#0080ff"&gt;&lt;strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.kimi.com%2F" target="_blank"&gt;&lt;u&gt;&lt;strong&gt;&lt;u&gt;kimi.com&lt;/u&gt;&lt;/strong&gt;&lt;/u&gt;&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&lt;strong style="color:rgba(0, 0, 0, 0.9)"&gt;&lt;span style="color:#000000"&gt;申請內測。&lt;/span&gt;&lt;/strong&gt;&lt;span style="color:#000000"&gt;對於獲得&lt;/span&gt;&lt;span style="background-color:#ffffff; color:#000000"&gt;內測權限的用戶：只需打開 Kimi 對話框下方的「深度研究」按鈕，即可開始使用（每月 20 次額度，同時支持 1 條任務併發）。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356787</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356787</guid>
      <pubDate>Sun, 11 May 2025 02:37:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>比爾·蓋茨與 Linus 共同參加晚宴，50 年來首次會面</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近日，微軟創始人比爾·蓋茨與 Linux 內核創始人林納斯·託瓦茲在微軟 Azure 首席技術官馬克·魯西諾維奇家中出席晚宴，這是二人 50 年來首次同框。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-8a55b472cfd2df4a60c8160a72ba060d705.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;據 The Verge 報道，馬克·魯西諾維奇在 LinkedIn 上&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linkedin.com%2Fposts%2Fmarkrussinovich_i-had-the-thrill-of-a-lifetime-hosting-dinner-activity-7341857033932914691-f5Kw%2F" target="_blank"&gt;分享&lt;/a&gt;了一張四人合照，除蓋茨和託瓦茲外，還包括戴維·卡特勒和他自己。他發文表示，能舉辦這次晚宴是一生的榮幸，託瓦茲從未見過蓋茨，戴維也從未見過託瓦茲。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-9676330f0dec6a2dc99200788e85e70504f.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;Tom's Hardware 的報道&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.tomshardware.com%2Fsoftware%2Foperating-systems%2Flong-time-rivals-bill-gates-and-linus-torvalds-meet-for-the-first-time-have-dinner-no-major-kernel-decisions-were-made-but-maybe-next-dinner" target="_blank"&gt;指出&lt;/a&gt;，這次會面是一次歷史性突破，二人坐在一起暢談，而幾十年前這樣的場景可能會引發激烈爭吵，但現在時間讓一切變得包容。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356781/bill-gates-linus-torvalds-meeting-photo</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356781/bill-gates-linus-torvalds-meeting-photo</guid>
      <pubDate>Sun, 11 May 2025 02:24:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>tlmqtt:如何基於責任鏈模式的高效認證</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;strong&gt;tlmqtt&lt;/strong&gt;是一款基於&lt;code&gt;Java&lt;/code&gt;開發的輕量級高併發&lt;code&gt;MQTT Broker&lt;/code&gt;，採用&lt;code&gt;Netty&lt;/code&gt;和&lt;code&gt;Project Reactor&lt;/code&gt;實現異步通信，完整支持&lt;strong&gt;MQTT 3.1.1&lt;/strong&gt;協議，包括&lt;strong&gt;QoS&lt;/strong&gt;消息分級、主題通配符、消息持久化等核心功能。項目採用模塊化設計，&lt;strong&gt;提供認證（文件/數據庫/HTTP）&lt;/strong&gt;、&lt;strong&gt;數據橋接（Kafka/MySQL&lt;/strong&gt;）和&lt;strong&gt;存儲（內存/Redis）&lt;strong&gt;等可擴展組件，支持&lt;/strong&gt;MQTT&lt;/strong&gt;和&lt;strong&gt;WebSocket&lt;/strong&gt;雙協議接入。具備生產級特性如&lt;strong&gt;SSL&lt;/strong&gt;加密、會話恢復及高併發處理能力，適用於物聯網和實時通信場景。&lt;/p&gt; 
&lt;h1&gt;認證&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;mqtt&lt;/code&gt;協議規定了&lt;strong&gt;CONNECT&lt;/strong&gt;包含有&lt;code&gt;Username&lt;/code&gt;和&lt;code&gt;Password&lt;/code&gt;字段。實現可以選擇如何使用這些字段的內容。他們也可能提供自己的認證機制，使用額外的認證系統。 而&lt;strong&gt;tlmqtt&lt;/strong&gt;實現了&lt;strong&gt;基本文件&lt;/strong&gt;，&lt;strong&gt;mysql&lt;/strong&gt;和&lt;strong&gt;http 接口&lt;/strong&gt;的 3 種認證方式，並且提供了擴展讓用戶自行去實現認證方式並添加到認證鏈中，其中只要有任何一個認證通過了，那麼此次客戶端連接就是通過的&lt;/p&gt; 
&lt;h1&gt;tlmqtt 認證原理&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;tlmqtt&lt;/strong&gt;存在一個抽象類&lt;code&gt;AbstractTlAuthentication&lt;/code&gt;它定義了認證相關的抽象方法，有具體的認證器去實現&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;nbsp; /**
&amp;nbsp; &amp;nbsp; &amp;nbsp;* 認證接口
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @author hszhou
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @datetime: 2025-05-10 10:51:55
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @param username 用戶名
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @param password 密碼
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @return boolean 是否成功
&amp;nbsp; &amp;nbsp; &amp;nbsp;**/
&amp;nbsp; &amp;nbsp; abstract public boolean authenticate(String username, String password);

&amp;nbsp; &amp;nbsp; /**
&amp;nbsp; &amp;nbsp; &amp;nbsp;* 是否啓用了該認證器
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @author hszhou
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @datetime: 2025-05-12 10:11:26
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @return boolean 是否啓用
&amp;nbsp; &amp;nbsp; &amp;nbsp;**/
&amp;nbsp; &amp;nbsp; abstract public boolean enabled();


&amp;nbsp; &amp;nbsp; /**
&amp;nbsp; &amp;nbsp; &amp;nbsp;* 添加新的認證主體
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @author hszhou
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @datetime: 2025-05-15 17:53:17
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @param object 添加的認證實體
&amp;nbsp; &amp;nbsp; &amp;nbsp;**/
&amp;nbsp; &amp;nbsp; abstract public void add(Object object);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;NoneAuthenticationService&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;tlmqtt&lt;/strong&gt; 是可以通過一個配置來進行關閉客戶端的認證的。 &amp;nbsp;&lt;code&gt;yml &amp;nbsp;auth: &amp;nbsp; enabled: true #是否開啓認證 false 就是關閉認證&lt;/code&gt; &amp;nbsp;其實現原理就是通過&lt;code&gt;NoneAuthenticationService&lt;/code&gt;這個認證器。也是認證鏈中的第一個認證器。 &amp;nbsp;&lt;code&gt;@Override &amp;nbsp; &amp;nbsp; public boolean authenticate(String username, String password) { &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return true; &amp;nbsp; &amp;nbsp; }&lt;/code&gt; 其主要實現了&lt;code&gt;authenticate&lt;/code&gt;方法返回的是&lt;code&gt;true&lt;/code&gt;。&lt;code&gt;NoneAuthenticationService&lt;/code&gt;並不關心客戶端的用戶名和密碼，也就是無論用戶名和密碼是什麼，他都不會在意，只會返回&lt;code&gt;true&lt;/code&gt;。表示認證通過，而&lt;code&gt;enabled&lt;/code&gt;方法返回的就是是否開啓，一旦開啓了，那麼這個&lt;code&gt;authenticate&lt;/code&gt;就會執行。由於處於認證鏈的首位。只要通過了就不會執行其他的認證了。&lt;/p&gt; 
&lt;h2&gt;FixTlAuthentication&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;FixTlAuthentication&lt;/code&gt;是基於固定用戶的認證方式。其固定的用戶的配置方式有 2 種， 第一種是基於文件的,這種方式是提前將用戶寫入到配置文件中&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;auth:
&amp;nbsp; enabled: true #是否開啓認證 false 就是關閉認證
&amp;nbsp; user: #開啓認證後 fix 的認證信息
&amp;nbsp; &amp;nbsp; - username: watson
&amp;nbsp; &amp;nbsp; &amp;nbsp; password: 12345
&amp;nbsp; &amp;nbsp; - username: zhouhs
&amp;nbsp; &amp;nbsp; &amp;nbsp; password: 12345
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;第二種方式是基於編程的&lt;strong&gt;tlmqtt&lt;/strong&gt;啓動引導類支持動態添加用戶&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;tlBootstrap.setFixUser(Collections.singletonList(new TlUser("admin","12345")))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;FixTlAuthentication&lt;/code&gt;的內部維護了一個用戶列表，&lt;code&gt;authenticate&lt;/code&gt;方法就是將客戶端的用戶名與密碼將內部的用戶列表繼續依次匹配。只要有任何一個匹配成功就返回。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&amp;nbsp; &amp;nbsp; public boolean authenticate(String username, String password) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if(users.isEmpty()){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return false;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for (TlUser user : users) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (user.getUsername().equals(username) &amp;amp;&amp;amp; user.getPassword().equals(password)) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log.debug("username = 【{}】,password = 【{}】 pass",username,password);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return true;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return false;
&amp;nbsp; &amp;nbsp; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;而編程式的添加用戶就是往內部的用戶列表中添加用戶&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&amp;nbsp; &amp;nbsp; @Override
&amp;nbsp; &amp;nbsp; public void add(Object object) {

&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if( object instanceof TlUser){
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log.debug("join fix authentication user 【{}】",object);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.users.add((TlUser) object);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; }

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;HttpTlAuthentication&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;HttpTlAuthentication&lt;/code&gt;認證器是基於&lt;code&gt;http&lt;/code&gt;請求的認證器。也是&lt;strong&gt;tlmqtt&lt;/strong&gt;的內置認證器之一。通過將用戶名與密碼當做參數請求第三方的 API 進行認證。只要&lt;code&gt;API&lt;/code&gt;返回的狀態碼為&lt;strong&gt;200&lt;/strong&gt;，注意的是這裏的狀態碼&lt;strong&gt;200&lt;/strong&gt;是&lt;code&gt;HTTP&lt;/code&gt;的狀態碼，而不是第三方系統自己定義的&lt;strong&gt;200&lt;/strong&gt;. &lt;strong&gt;tmqtt&lt;/strong&gt;將&lt;code&gt;http&lt;/code&gt;請求封裝成一個對象&lt;code&gt;HttpEntityInfo&lt;/code&gt;。裏面有&lt;code&gt;API&lt;/code&gt;的地址，參數等等信息&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;public class HttpEntityInfo {

&amp;nbsp; &amp;nbsp; /**請求的地址*/
&amp;nbsp; &amp;nbsp; private String url;
&amp;nbsp; &amp;nbsp; /**方法類型 post 或者 get*/
&amp;nbsp; &amp;nbsp; private String method;
&amp;nbsp; &amp;nbsp; /**請求頭*/
&amp;nbsp; &amp;nbsp; private HashMap&amp;lt;String, String&amp;gt; headers;
&amp;nbsp; &amp;nbsp; /**用戶的參數，例如，參數是 uname 與 pwd 那麼這個 params 的參數就是 ("username","uname") ("password","pwd")*/
&amp;nbsp; &amp;nbsp; private HashMap&amp;lt;String,String&amp;gt; params;

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;HttpTlAuthentication&lt;/code&gt;將認證接口大致分為 3 類，&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;POST&lt;/code&gt;請求的&lt;code&gt;form&lt;/code&gt;表單提交&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;POST&lt;/code&gt;請求的&lt;code&gt;json&lt;/code&gt;數據提交&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET&lt;/code&gt;請求&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;最終只要請求返回的是&lt;strong&gt;200&lt;/strong&gt;就認證認證成功&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;HttpTlAuthentication&lt;/code&gt;認證過濾器不單單可以設置一個&lt;code&gt;API&lt;/code&gt;。可以通過多個&lt;code&gt;API&lt;/code&gt;接口組成的集合進行認證。其內部維護了一個&lt;code&gt;HttpEntityInfo&lt;/code&gt;的集合。只要任何一個 API 通過，及認證通過&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&amp;nbsp; &amp;nbsp;private final List&amp;lt;HttpEntityInfo&amp;gt; httpEntityInfos;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;HttpTlAuthentication&lt;/code&gt;提供了動態添加&lt;code&gt;http&lt;/code&gt;接口的方式&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&amp;nbsp; &amp;nbsp; @Override
&amp;nbsp; &amp;nbsp; public void add(Object object) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (object instanceof HttpEntityInfo) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.httpEntityInfos.add((HttpEntityInfo) object);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;使用方式&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&amp;nbsp; HttpEntityInfo entityInfo = AuthenticationHttpProvider.formLogin();
&amp;nbsp; HttpEntityInfo login = AuthenticationHttpProvider.getLogin();
&amp;nbsp; tlBootstrap.addAuthEntity(entityInfo)
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .addAuthEntity(login)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;SqlTlAuthentication&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;SqlTlAuthentication&lt;/code&gt;認證器是基於 mysql 數據庫的認證，&lt;strong&gt;tlmqtt&lt;/strong&gt;將&lt;code&gt;SqlTlAuthentication&lt;/code&gt;的數據封裝成了一個 SQL 對象&lt;code&gt;SqlEntityInfo&lt;/code&gt;。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&amp;nbsp; /**地址*/
&amp;nbsp; &amp;nbsp; private String host;

&amp;nbsp; &amp;nbsp; /**端口號*/
&amp;nbsp; &amp;nbsp; private String port;

&amp;nbsp; &amp;nbsp; /**用戶名*/
&amp;nbsp; &amp;nbsp; private String username;

&amp;nbsp; &amp;nbsp; /**密碼*/
&amp;nbsp; &amp;nbsp; private String password;

&amp;nbsp; &amp;nbsp; /**數據庫名*/
&amp;nbsp; &amp;nbsp; private String &amp;nbsp;database;

&amp;nbsp; &amp;nbsp; /**表名*/
&amp;nbsp; &amp;nbsp; private String table;

&amp;nbsp; &amp;nbsp; /**用戶名字段*/
&amp;nbsp; &amp;nbsp; private String usernameColumn;

&amp;nbsp; &amp;nbsp; /**密碼字段*/
&amp;nbsp; &amp;nbsp; private String passwordColumn;

&amp;nbsp; &amp;nbsp; private String driverClassName;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;如果需要使用到&lt;code&gt;SqlTlAuthentication&lt;/code&gt;認證過濾器，就需要添加相應的&lt;code&gt;SqlEntityInfo&lt;/code&gt;。&lt;code&gt;SqlEntityInfo&lt;/code&gt;設置數據庫的地址，表名和用戶名和密碼的字段。然後其內部維護了一個&lt;code&gt;SqlEntityInfo&lt;/code&gt;集合，與&lt;code&gt;http&lt;/code&gt;認證器一致，只要有任何一個認證通過即可，當用戶設置成功後，&lt;strong&gt;tlmqtt&lt;/strong&gt;會執行內部的&lt;code&gt;sql&lt;/code&gt;語句並替換相應的參數&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;&amp;nbsp;private static final String SQL = "SELECT COUNT(*) FROM %s WHERE %s = ? AND %s = ?";
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;SqlTlAuthentication&lt;/code&gt;提供動態方法新增 SqlEntityInfo 的方式。使用方法&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;SqlEntityInfo sqlEntityInfo = AuthenticationMysqlProvider.providerDemo();
tlBootstrap .addAuthEntity(sqlEntityInfo) &amp;nbsp; &amp;nbsp;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;可擴展的認證鏈&lt;/h2&gt; 
&lt;p&gt;當上述認證器不滿足系統的認證方式，&lt;strong&gt;tlmqtt&lt;/strong&gt;提供了可擴展的認證器。是需要用戶繼承&lt;code&gt;AbstractTlAuthentication&lt;/code&gt;類即可。然後實現&lt;code&gt;authenticate&lt;/code&gt;方法。然後通過輔助引導類&lt;code&gt;TlBootstrap&lt;/code&gt;的&lt;code&gt;addAuthentication&lt;/code&gt;方法即可。&lt;/p&gt; 
&lt;h3&gt;實現 AbstractTlAuthentication 類&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;@Slf4j
public class NoneA extends AbstractTlAuthentication {
&amp;nbsp; &amp;nbsp; @Override
&amp;nbsp; &amp;nbsp; public boolean authenticate(String username, String password) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return true;
&amp;nbsp; &amp;nbsp; }

&amp;nbsp; &amp;nbsp; @Override
&amp;nbsp; &amp;nbsp; public boolean enabled() {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return true;
&amp;nbsp; &amp;nbsp; }

&amp;nbsp; &amp;nbsp; @Override
&amp;nbsp; &amp;nbsp; public void add(Object object) {

&amp;nbsp; &amp;nbsp; }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;添加認證器&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;&amp;nbsp;tlBootstrap.addAuthentication(new NoneA())
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;這樣就可以將自定義的認證器添加到&lt;code&gt;tlmqtt&lt;/code&gt;的整個認證體系中。&lt;/p&gt; 
&lt;h1&gt;結語&lt;/h1&gt; 
&lt;p&gt;歡迎通過以下方式參與項目共建：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;提交 Issue&lt;/strong&gt;：反饋 Bug 或提出功能建議&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;提交 PR&lt;/strong&gt;：優化代碼或新增功能（建議先創建 Issue 溝通方案）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Star/Fork&lt;/strong&gt;：支持項目持續發展&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;聯繫方式：&lt;/h1&gt; 
&lt;p&gt;項目地址 &amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FZHSQJM%2Ftlmqtt%23" target="_blank"&gt;https://github.com/ZHSQJM/tlmqtt&lt;/a&gt; &amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitee.com/PiQiHenHaoDeGangTieXia/tlmqtt"&gt;https://gitee.com/PiQiHenHaoDeGangTieXia/tlmqtt&lt;/a&gt; &amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;tlmqtt&lt;/strong&gt;致力於為物聯網開發者提供輕量、高效的 MQTT 消息服務，期待您的加入！ 🚀&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356775</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356775</guid>
      <pubDate>Sun, 11 May 2025 02:08:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>SamWaf v1.3.15 發佈，輕量級網站應用防火牆</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;SamWaf v1.3.15 已經發布，輕量級網站應用防火牆。&lt;/p&gt; 
&lt;p&gt;此版本更新內容包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;新增 SSL 證書申請相同運營商不同賬號的場景&lt;/li&gt; 
 &lt;li&gt;新增批量導入敏感詞的功能&lt;/li&gt; 
 &lt;li&gt;新增純靜態 Web 站點的功能&lt;/li&gt; 
 &lt;li&gt;新增配置開啓調試日誌&lt;/li&gt; 
 &lt;li&gt;新增證書夾導入 crt、key 文件的功能&lt;/li&gt; 
 &lt;li&gt;新增可線上刪除大日誌文件&lt;/li&gt; 
 &lt;li&gt;新增相同端口 HTTP 跳轉 HTTPS 的功能&lt;/li&gt; 
 &lt;li&gt;修正 event_stream 無法正常響應的問題&lt;/li&gt; 
 &lt;li&gt;修正健康度檢測內存泄露問題&lt;/li&gt; 
 &lt;li&gt;修正下載附件的損壞的問題&lt;/li&gt; 
 &lt;li&gt;修正強制 HTTP 跳轉 HTTPS 功能自帶默認 80 端口的問題&lt;/li&gt; 
 &lt;li&gt;優化 SSL 證書文件驗證方式&lt;/li&gt; 
 &lt;li&gt;優化快捷 Linux 部署方式&lt;/li&gt; 
 &lt;li&gt;優化批量導入新增手工執行和定時執行&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;詳情查看：&lt;a href="https://gitee.com/samwaf/SamWaf/releases/v1.3.15"&gt;https://gitee.com/samwaf/SamWaf/releases/v1.3.15&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356763</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356763</guid>
      <pubDate>Sun, 11 May 2025 01:34:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>Skyeye 雲智能製造辦公系統 - Saas v3.16.9 發佈</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="background-color:#ffffff; color:#6a737d"&gt;&lt;span&gt;Skyeye 雲智能製造，採用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;Springboot (微服務) + Layui + UNI-APP + Ant Design Vue&lt;/span&gt;&lt;span style="background-color:#ffffff; color:#6a737d"&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;的低代碼平台。包含 30 多個應用模塊、50 多種電子流程，CRM、PM、ERP、MES、ADM、EHR、筆記、知識庫、項目、門店、商城、財務、多班次考勤、薪資、招聘、雲售後、論壇、公告、問卷、報表設計、工作流、日程、雲盤等全面管理，實現智能製造行業一體化管理。實現管理流程 「客戶關係 -&amp;gt; 線上 / 線下報價 -&amp;gt; 銷售報價 -&amp;gt; 銷售合同 -&amp;gt; 生產計劃 -&amp;gt; 商品設計 -&amp;gt; 採購 -&amp;gt; 加工製造 -&amp;gt; 入庫 -&amp;gt; 發貨 -&amp;gt; 售後服務」 的高效運作，同時實現企業員工的管理以及內部運作的流程操作，完善了員工從 「入職 -&amp;gt; 培訓 -&amp;gt; 轉正 -&amp;gt; 辦公 -&amp;gt; 離職」 等多項功能。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;&lt;a href="https://gitee.com/dromara/skyeye/blob/company_server/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.md"&gt;常見問題&lt;/a&gt;&lt;/strong&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;strong&gt;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Farticles.zsxq.com%2Fid_xi3xhacte72g.html" target="_blank"&gt;開發文檔&lt;/a&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Fspace.bilibili.com%2F87396008%2Fchannel%2Fseries" target="_blank"&gt;視頻教程&lt;/a&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/strong&gt;&lt;strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.qq.com%2Fsheet%2FDYUtPdWhTbVBITlpL%3Ftab%3D000001" target="_blank"&gt;功能點&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;Skyeye&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;雲【源代碼】針對 {星球用戶} 開源。拿到源碼後可進行學習、畢設、企業等使用。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;Skyeye 雲智能製造 v3.16.9 發佈 ，發佈內容如下：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;span&gt;Skyeye 雲已加入 Dromara 社區&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;業務對象適配 Saas 進展 90%&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;VUE 版開發&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;流程設計器完成&lt;/li&gt; 
   &lt;li&gt;業務對象管理-屬性管理完成&lt;/li&gt; 
   &lt;li&gt;業務對象管理-表單佈局完成&lt;/li&gt; 
   &lt;li&gt;業務對象管理-操作管理完成&lt;/li&gt; 
   &lt;li&gt;角色賦權完成&lt;/li&gt; 
   &lt;li&gt;排班管理完成 80%&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;span&gt;源代碼只對星球用戶開放&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;解決若干問題。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;Skyeye 具備&lt;/span&gt;&lt;strong&gt;&lt;span&gt;低代碼、快捷開發、可視化設計、微服務&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;等特點，方便客戶二次開發，極大的提高了開發效率。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;erp：&amp;nbsp;&lt;/span&gt;&lt;span&gt;https://gitee.com/doc_wei01/skyeye&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;OA：&amp;nbsp;&lt;/span&gt;&lt;span&gt;https://gitee.com/dromara/skyeye&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;報表：&lt;/span&gt;&lt;span&gt;https://gitee.com/doc_wei01/skyeye-report&lt;/span&gt;&lt;span&gt;&amp;nbsp; 有問題可以聯繫作者，詳情請看開發計劃。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;PC 端效果圖&lt;/strong&gt;&lt;/p&gt; 
&lt;table cellspacing="0" style="--darkreader-inline-bgcolor:#181a1b; --darkreader-inline-border-bottom:currentcolor; --darkreader-inline-border-left:currentcolor; --darkreader-inline-border-right:currentcolor; --darkreader-inline-border-top:currentcolor; --darkreader-inline-color:#bdb7af; -webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:1px; border:medium none; box-sizing:border-box; color:#444444; display:block; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif; font-size:14px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px; max-width:100%; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:776px; word-break:keep-all; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th style="text-align:center"&gt;效果圖&lt;/th&gt; 
   &lt;th style="text-align:center"&gt;效果圖&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-35a653b1c873ab9501f7187b0901a27cc64.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-a8f7c658a21594b2787c667fc1214c673b1.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-50138b38c37d750b93db5b37493f71bf4ca.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-00fd5dbd8a44f8d815ecf77d93d37062616.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-6499d74ddcfe9a99997d8c797aae7b7f0b0.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-e97af4a2caccb199b76d906ecbb339a7575.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-a58e6cb3e687de2a468cb095516951f077c.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-9eb76f53a99358fdf1ce532dc711baec41a.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-ce7c58e9fe940d58b2cb9cec441176b3481.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-ca685ab278a861067f5850e12470e155e59.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1837" src="https://oscimg.oschina.net/oscnet/up-270d853e879bc14cf6632d67e0168c656c0.png" width="3839" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1837" src="https://oscimg.oschina.net/oscnet/up-0bebb255d3c79c13a69bfa0fbb7fcd80836.png" width="3839" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1837" src="https://oscimg.oschina.net/oscnet/up-90cde5042c0effeea9e85761ff8dc7283d5.png" width="3839" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1837" src="https://oscimg.oschina.net/oscnet/up-47ccf76ab671effc6142727caf066d67071.png" width="3839" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;移動端效果圖&lt;/strong&gt;&lt;/p&gt; 
&lt;table border="1" cellpadding="1" cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:1px; border:none; box-sizing:border-box; color:#444444; display:block; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif; font-size:14px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px; max-width:100%; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:776px; word-break:keep-all; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果圖&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果圖&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果圖&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果圖&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1637" src="https://oscimg.oschina.net/oscnet/up-6850576a0a01188e6b2a9d1ecce58ed7455.png" width="755" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1637" src="https://oscimg.oschina.net/oscnet/up-770416ac656e0b41097dc917b2b404e62f2.png" width="755" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1637" src="https://oscimg.oschina.net/oscnet/up-754034f48dd04fd9ee1e6618db0e37f6ecb.png" width="755" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1637" src="https://oscimg.oschina.net/oscnet/up-d7707ebc67ddf3842adbb54fdc0c062a2a1.png" width="755" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356758</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356758</guid>
      <pubDate>Sun, 11 May 2025 00:18:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>gmanager v2.0.1 一鍵部署，基於 GoFrame 的後端管理系統</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;gmanager v2.0.1 本次主要提供項目一鍵部署功能&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;詳情見文檔：&lt;/strong&gt;https://gitee.com/goflyfox/gmanager/blob/master/docs/02.deploy.md&lt;/p&gt; 
&lt;h2&gt;更新説明&lt;/h2&gt; 
&lt;p&gt;1. 完善部署文檔，提供一鍵部署&lt;br&gt; 2. 問題修復，如菜單批量刪除問題&lt;/p&gt; 
&lt;p&gt;演示環境：https://gmanager.jflyfox.com/&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;gmanager 後端管理系統&lt;/span&gt;&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;基於 GoFrame V2 框架的後台管理系統。支持登錄、認證、組織機構、用戶帳號、角色權限、菜單、配置、操作日誌等模塊&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;前端基於 Vue3 + Vite + TypeScript + Element-Plus 的後台管理模板&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;登錄組件使用 gtoken 完美支持集羣部署&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;一、代碼&lt;/span&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;github 地址：&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgoflyfox%2Fgmanager" target="_blank"&gt;https://github.com/goflyfox/gmanager&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;gitee 地址：&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href="https://gitee.com/goflyfox/gmanager"&gt;https://gitee.com/goflyfox/gmanager&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;二、功能模塊&lt;/span&gt;&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;部門管理：配置系統組織機構信息&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;用戶管理：處理用戶添加、用戶配置、權限分配&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;角色管理：角色菜單權限分配，支持菜單和按鈕權限設置&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;菜單管理：配置系統菜單、按鈕權限等&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;配置管理：支持對系統參數動態配置及數據字典配置&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;日誌管理：支持登錄、登出、業務增刪改操作記錄&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;其他：登錄、認證、登出、訪問統計&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;gmanager 開源以來得到了大家的很多支持，本項目初衷只為互相學習交流，沒有任何盈利性目的！歡迎為 gmanager 貢獻代碼或提供建議！&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;三、演示地址&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgmanager.jflyfox.com%2F" target="_blank"&gt;https://gmanager.jflyfox.com/&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&amp;gt; 賬號：admin 密碼：123456&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;四、部署説明&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:20px; margin-right:0; text-align:left"&gt;&lt;span&gt;以下為部署簡要説明，詳情參考&lt;/span&gt;&lt;span&gt;&lt;a href="https://gitee.com/goflyfox/gmanager/blob/master/docs/installation.md"&gt;&lt;span&gt;部署文檔&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;4.1 後端&lt;/span&gt;&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;從 git 下載項目： git clone&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgoflyfox%2Fgmanager" target="_blank"&gt;https://github.com/goflyfox/gmanager&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;安裝 mysql 數據庫運行 resource/sql/gmanager.sql 腳本&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;複製&lt;/span&gt;&lt;span&gt;&lt;code&gt;server/manifest/config/config.example.yaml&lt;/code&gt;&lt;/span&gt;&lt;span&gt;配置文件，改名為&lt;/span&gt;&lt;span&gt;&lt;code&gt;config.yaml&lt;/code&gt;&lt;/span&gt;&lt;span&gt;, 修改數據庫配置&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;span&gt;&lt;span style="color:#aa5500"&gt;&lt;span style="color:#6a737d"&gt;&lt;span style="color:#6a737d"&gt;# 數據庫配置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#000000"&gt;database:&lt;/span&gt;&lt;/span&gt;
&lt;span&gt; &amp;nbsp;&lt;span style="color:#000000"&gt;default:&lt;/span&gt;&lt;/span&gt;
&lt;span&gt; &amp;nbsp; &amp;nbsp;&lt;span style="color:#000000"&gt;&lt;span style="color:#d73a49"&gt;&lt;span style="color:#d73a49"&gt;link&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt; &lt;span style="color:#000000"&gt;&lt;span style="color:#032f62"&gt;&lt;span style="color:#032f62"&gt;"mysql:root:123456@tcp(127.0.0.1:3306)/gmanager"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;啓動項目&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;span&gt;&lt;span style="color:#3300aa"&gt;&lt;span style="color:#6f42c1"&gt;&lt;span style="color:#6f42c1"&gt;cd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span style="color:#032f62"&gt;&lt;span style="color:#032f62"&gt;server&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#6f42c1"&gt;&lt;span style="color:#6f42c1"&gt;go&lt;/span&gt;&lt;/span&gt; &lt;span style="color:#032f62"&gt;&lt;span style="color:#032f62"&gt;mod tidy&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#6f42c1"&gt;&lt;span style="color:#6f42c1"&gt;go&lt;/span&gt;&lt;/span&gt; &lt;span style="color:#032f62"&gt;&lt;span style="color:#032f62"&gt;run main.go&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;訪問&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Flocalhost%3A8000%2Fping" target="_blank"&gt;http://localhost:8000/ping&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;後端接口，返回&lt;/span&gt;&lt;span&gt;&lt;code&gt;pong&lt;/code&gt;&lt;/span&gt;&lt;span&gt;驗證部署成功&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;&lt;span&gt;4.2 前端部署&lt;/span&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;span&gt;&lt;span style="color:#3300aa"&gt;&lt;span style="color:#6f42c1"&gt;&lt;span style="color:#6f42c1"&gt;cd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span style="color:#032f62"&gt;&lt;span style="color:#032f62"&gt;web&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#6f42c1"&gt;&lt;span style="color:#6f42c1"&gt;pnpm&lt;/span&gt;&lt;/span&gt; &lt;span style="color:#032f62"&gt;&lt;span style="color:#032f62"&gt;install&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&lt;span style="color:#6f42c1"&gt;&lt;span style="color:#6f42c1"&gt;pnpm&lt;/span&gt;&lt;/span&gt; &lt;span style="color:#032f62"&gt;&lt;span style="color:#032f62"&gt;run dev&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
&lt;p style="color:#333333; margin-left:20px; margin-right:0; text-align:left"&gt;&lt;span&gt;瀏覽器訪問&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Flocalhost%3A3000" target="_blank"&gt;&lt;span&gt;http://localhost:3000&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;即可看到登錄頁面，默認賬號 / 密碼：admin/123456&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;五、使用文檔&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:20px; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;a href="https://gitee.com/goflyfox/gmanager/blob/master/docs/README.md"&gt;&lt;span&gt;説明文檔&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;·&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href="https://gitee.com/goflyfox/gmanager/blob/master/docs/installation.md"&gt;&lt;span&gt;部署文檔&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;·&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href="https://gitee.com/goflyfox/gmanager/blob/master/docs/ChangeLog.md"&gt;&lt;span&gt;更新説明&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;六、效果截圖&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:20px; margin-right:0; text-align:left"&gt;&lt;span&gt;登錄：&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:20px; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;img alt="" height="726" src="https://oscimg.oschina.net/oscnet/up-882586e84b203a7774b2e0c7d7131051b2e.png" width="505" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:20px; margin-right:0; text-align:left"&gt;&lt;span&gt;組織機構：&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:20px; margin-right:0; text-align:left"&gt;&lt;img alt="" height="1076" src="https://oscimg.oschina.net/oscnet/up-cf04937135552ebfdc0a98838f201c6af14.png" width="2678" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:20px; margin-right:0; text-align:left"&gt;&lt;span&gt;用戶管理：&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:20px; margin-right:0; text-align:left"&gt;&lt;img alt="" height="1240" src="https://oscimg.oschina.net/oscnet/up-50f73e8b72f569384378de7d1e9c29708d5.png" width="2658" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:20px; margin-right:0; text-align:left"&gt;&lt;span&gt;日誌管理：&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:20px; margin-right:0; text-align:left"&gt;&lt;img alt="" height="1090" src="https://oscimg.oschina.net/oscnet/up-bda3664d8f175edc73fded6ef43cae83861.png" width="2666" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;七、感謝&lt;/span&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span&gt;gf 框架&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fgogf%2Fgf"&gt;&lt;span&gt;https://github.com/gogf/gf&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356738/gmanager-2-0-1</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356738/gmanager-2-0-1</guid>
      <pubDate>Sat, 10 May 2025 15:01:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
    <item>
      <title>layui v2.11.4 發佈，極簡模塊化前端 UI 框架</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;layui v2.11.4 已經發布，極簡模塊化前端 UI 框架&lt;/p&gt; 
&lt;p&gt;此版本更新內容包括：&lt;/p&gt; 
&lt;ul style="margin-left:0; margin-right:0"&gt; 
 &lt;li&gt;&lt;span&gt;重構 collapse 展開收縮動畫的核心邏輯&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Flayui%2Flayui%2Fpull%2F2734" target="_blank"&gt;#2734&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;新增 collapse 列表項添加&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;layui-show&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;類設置默認展開的支持，且兼容舊版&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Flayui%2Flayui%2Fpull%2F2734" target="_blank"&gt;#2734&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;修復 collapse 列表項的內容元素添加&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;layui-show&lt;/code&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;類時的收縮異常問題&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Flayui%2Flayui%2Fpull%2F2734" target="_blank"&gt;#2734&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Flayui.dev%2Fdocs%2F2%2Fversions.html%23v2.11.4" target="_blank"&gt;https://layui.dev/docs/2/versions.html#v2.11.4&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;詳情查看：&lt;a href="https://gitee.com/layui/layui/releases/v2.11.4"&gt;https://gitee.com/layui/layui/releases/v2.11.4&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/356733</link>
      <guid isPermaLink="false">https://www.oschina.net/news/356733</guid>
      <pubDate>Sat, 10 May 2025 14:23:00 GMT</pubDate>
      <author>來源: 投稿</author>
    </item>
  </channel>
</rss>
