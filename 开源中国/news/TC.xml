<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - news - 繁體中文（台灣）</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news" rel="self" type="application/rss+xml"/>
    <description>已對該 RSS 進行格式化操作：中英字符之間插入空格、使用直角引號、標點符號修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-tw</language>
    <lastBuildDate>Mon, 15 Sep 2025 07:42:40 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>阿里 Qoder 新升級，Repo Wiki 支持共享、編輯和導出</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;過去兩年雖有眾多 AI 編程工具湧現，但在真實軟件開發中仍面臨諸多挑戰，如工程複雜度高、不確定性強和知識無沉澱傳承等，現有工具難以滿足開發需要，Qoder 正是為解決這些問題而推出。Qoder 是阿里巴巴發佈的一款全新的 Agentic 編程平台，它集成了全球頂尖的編程模型，提供最強的上下文工程能力，可一次檢索 10 萬個代碼文件。基於強大的編程智能體，可實現 AI 自主研發，大幅提升真實軟件的開發效率。&lt;/p&gt; 
&lt;p&gt;據官方披露，Qoder 上線 5 天用戶規模突破 10 萬，&lt;strong&gt;其中 Repo Wiki 功能受到開發者廣泛好評。&lt;/strong&gt; Repo Wiki 能基於代碼自動為工程生成結構化的文檔，涵蓋工程架構、引用關係圖譜、技術文檔等內容，並持續跟蹤代碼與文檔的變更，把知識沉澱為可複用的工程資產。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-6d025ed54bfc027f70832d07af8b3f21d11.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;舉例來説，&lt;strong&gt;在新項目開始時&lt;/strong&gt; ，Repo Wiki 可以根據工程代碼自動生成架構圖譜、模塊文檔、API 手冊以及依賴關係文檔，幫助團隊搭建工程框架，讓成員快速瞭解工程結構。&lt;strong&gt;對於遺留系統研發&lt;/strong&gt; ，Repo Wiki 能快速分析工程結構，幫助開發者理解代碼邏輯，解決遺留工程文檔缺失或過時的問題。更為重要的是，&lt;strong&gt;工程中存在許多隱性知識&lt;/strong&gt; ，如設計決策考量、模塊之間深層依賴關係等，這些知識通常散落在文檔、郵件或口頭交流中，難以被有效獲取。Repo Wiki 能夠將這些隱性知識顯性化，以結構化的形式存儲和呈現，方便開發者和智能體更全面、準確地理解代碼工程。同時 Repo Wiki 對於&lt;strong&gt;軟件代碼的學習和傳承&lt;/strong&gt;大有幫助，讓開發者更快地理解陌生代碼庫，提高開發、學習和交接效率。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;今天， Repo Wiki 正式上線新功能：支持 Wiki 共享、編輯和導出。&lt;/strong&gt; 為了讓知識更好地在團隊中流轉，Qoder 提供了 Wiki 共享能力。當用戶在本地生成 Wiki 時，會自動在代碼庫中創建一個專屬目錄，只需將該目錄推送至代碼倉庫，即可將生成的文檔輕鬆共享給團隊成員，實現協作共建。&lt;/p&gt; 
&lt;p&gt;此外，為確保 Wiki 與代碼始終保持一致，Qoder 內置了自動檢測機制。當發現代碼變更導致文檔滯後時，系統會及時提醒更新 Wiki。同時為了支持靈活自定義，開發者可以直接修改 Wiki 內容， 實現手工維護。&lt;/p&gt; 
&lt;p&gt;Qoder 目前在公測期，歡迎免費下載體驗：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fqoder.com%2F" target="_blank"&gt;https://qoder.com/&lt;/a&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/3874284/blog/18691841</link>
      <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/18691841</guid>
      <pubDate>Mon, 15 Sep 2025 07:22:26 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>螞蟻開源發佈《大模型開源開發生態全景與趨勢》報告</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;螞蟻開源聯合 Inclusion AI&amp;nbsp;發佈了一份大模型開發生態下的開源項目全景圖，和一份對生態趨勢的洞察報告。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0915/151228_jv6C_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;https://antoss-landscape.my.canva.site/&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;據悉，這是報告 5 月首次發佈後的 2.0 版本，不僅全面揭示了人工智能開源領域的發展現狀和未來趨勢，還納入了百餘天內開源社區的新動向，為行業發展提供重要參考。&lt;/p&gt; 
&lt;p&gt;報告最初起源於螞蟻集團內部的技術趨勢洞察，其中的數據全部來源於開源社區，通過對 GitHub 全平台項目的分析，使用 OpenRank 算法對項目進行篩選和排名。&lt;/p&gt; 
&lt;p&gt;具體來看，本次發佈的大模型開源開發生態全景圖共收錄了分佈在 22 個技術領域的 114 個最受關注的開源項目，分為 AI Agent 和 AI Infra 兩大技術方向。&lt;/p&gt; 
&lt;p&gt;據報告顯示，在參與全景圖項目開發的約 36 萬全球開發者中，統計到美國開發者佔比 24%，中國開發者佔比 18%，其次是印度（8%）、德國（6%）和英國（5%）。中美兩國合計貢獻超四成核心力量。更值得關注的是，在大模型開源策略上，中國廠商更傾向於開放權重的開源模型路線，而美國頭部廠商則多采用閉源模式。&lt;/p&gt; 
&lt;p&gt;和全景圖一同發佈的還有一份詳盡的洞察報告《從社區數據出發，再看大模型開源開發生態全景與趨勢》。該報告指出，62% 的大模型生態下的開源項目誕生於 2022 年 10 月「GPT 時刻」之後，平均「年齡」僅 30 個月，這反映出 AI 開源生態的高速迭代特性。&lt;/p&gt; 
&lt;p&gt;另外，AI 編程工具的爆發式增長也成為了矚目的趨勢。數據顯示，2025 年新出現的 Coding 工具平均獲得 3 萬以上開發者 Star 關注，其中 Gemini CLI 開源僅 3 個月，星標數已突破 6 萬，成為增長最快的項目之一。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372284</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372284</guid>
      <pubDate>Mon, 15 Sep 2025 07:17:26 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>火山引擎發佈命令行 AI Agent：veCLI</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;火山引擎&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F-UTsE4yDf2XRrbpP3TqOww" target="_blank"&gt;宣佈&lt;/a&gt;推出命令行 AI Agent：veCLI，無縫集成豆包大模型 1.6，veCLI 通過將大模型 AI 能力整合到命令行界面，讓開發者能夠在熟悉的環境中獲得智能助手的全方位支持，為開發者提供更智能、更高效的開發體驗。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-4f862d843b686e87e6ce50cfbbc0423f4f4.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;https://www.volcengine.com/product/vecli&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-ccc5e33323ef3899349dbac8ac9ecd86ef8.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在技術架構上，veCLI 採用了「思考-行動」循環機制（ReAct），使 AI 助手能夠像經驗豐富的開發者一樣進行多步推理和問題解決。veCLI 不僅和豆包大模型無縫調用，還集成了 Kimi-K2、DeepSeek v3.1 等三方模型供用戶選擇，確保在複雜開發場景下的準確理解和高效響應。同時，還集成火山引擎 MCP Server 等，幫助用戶從構建到部署都更便捷調用火山引擎雲服務，提升雲上 AI 應用開發的效率。&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372278</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372278</guid>
      <pubDate>Mon, 15 Sep 2025 07:01:26 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>🔥真寵物小精靈？還能智能操控傢俱？</title>
      <description/>
      <link>https://www.oschina.net/ai-creation/details/2208</link>
      <guid isPermaLink="false">https://www.oschina.net/ai-creation/details/2208</guid>
      <pubDate>Mon, 15 Sep 2025 07:00:26 GMT</pubDate>
    </item>
    <item>
      <title>釘釘首款 AI 硬件 DingTalk A1 開售</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;9 月 15 日，釘釘首款 AI 硬件 DingTalk A1 旗艦版正式在天貓釘釘官方旗艦店開售。&lt;/p&gt; 
&lt;p&gt;DingTalk A1 旗艦版售價 799 元。購買產品的個人用戶，將免費獲得每月 1000 分鐘語音轉文字時長和 10GB 個人雲存儲空間。也可以選擇開通 599 元/年的專業版和 1499 元/年尊享版會員，享受更長語音轉文字時長和更多 AI 權益。消費者下單後，產品 48 小時內即可發貨。&lt;/p&gt; 
&lt;p&gt;&lt;img height="300" src="https://oscimg.oschina.net/oscnet/up-63a507278e97aa6453ed75aa78203221ab0.jpg" width="300" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;DingTalk A1 厚度僅 3.8 毫米，只相當於幾張信用卡厚度。通過磁吸在手機背面，能夠記錄電話及日常溝通語音。依靠釘釘 AI 聽記能力，它能夠把語音轉換成文字，通過 AI 大模型總結分析。它還能實時翻譯和多語種互譯，特別是針對學習、跨國會議等場景。&lt;/p&gt; 
&lt;p&gt;DingTalk A1 還內置了 30 多種 AI 場景化分析模板，在開會、採訪、心理諮詢、法律諮詢、客戶拜訪、面試問答等工作場合，都能用它對語音溝通進行總結分析劃重點。&lt;/p&gt; 
&lt;p&gt;這款產品主要面向銷售、人事、客服、律師、醫生、教師等崗位和職業，能夠幫助用戶把溝通語音轉化為經過整理提煉的線上知識，在釘釘上分享、協作，同時這些工作過程數據會沉澱為高質量資產，助力企業經營和個人積累。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372276</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372276</guid>
      <pubDate>Mon, 15 Sep 2025 07:00:26 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>經濟日報：谷歌反壟斷案折射搜索行業變革</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;近日，谷歌在一場持續 5 年的反壟斷案中取得階段性勝利，成功避免被強制拆分。令人關注的是，在這場危機中「救局」的，恰恰是被視為谷歌競爭對手的 OpenAI 等生成式人工智能（AI）公司。谷歌一案的判決讓業界更清晰地看到，AI 正在重塑全球搜索引擎市場的競爭格局。&lt;/p&gt; 
&lt;p&gt;多年來，美國政府持續加強對硅谷巨頭的反壟斷審查，谷歌正是其中的代表性企業。2020 年，美國司法部及多個州對谷歌提起反壟斷訴訟，指控其搜索引擎年利潤達數十億美元、處理近 90% 的網絡搜索請求，要求拆分谷歌相關業務。&lt;/p&gt; 
&lt;p&gt;經過長達 5 年的拉鋸，美國聯邦地區法院法官阿米特·梅塔近日裁定，谷歌無需剝離 Chrome 瀏覽器及安卓操作系統，只需向競爭對手開放更多搜索結果數據，並設立反壟斷技術委員會以監督公司運營。這一相對寬鬆的判決提振了市場信心，消息公佈後，谷歌盤後股價一度大漲超 8%。&lt;/p&gt; 
&lt;p&gt;谷歌能夠避免被拆分，生成式 AI 意外成了「救命稻草」。梅塔在判決書中多次強調生成式 AI 的影響。判決書指出，越來越多的用戶正通過 ChatGPT 等 AI 聊天機器人獲取信息，而非傳統搜索引擎。儘管生成式 AI 尚未完全取代谷歌搜索，但它顯著加劇了搜索市場的競爭，削弱了對谷歌進行徹底拆分的必要性。&lt;/p&gt; 
&lt;p&gt;如判決書所言，當前已有一批 AI 瀏覽器新品發佈，讓沉寂多時的瀏覽器市場再次硝煙瀰漫。例如，AI 搜索引擎的獨角獸 Perplexity 已正式發佈了自己的瀏覽器 Comet。幾乎同一時間，OpenAI 也宣佈在未來幾周發佈新款 AI 瀏覽器。這些 AI 搜索並非傳統搜索引擎的簡單升級，而是藉助深度學習與自然語言處理技術，重新定義了信息獲取的方式。Perplexity 聯合創始人阿拉溫德·斯里尼瓦斯將其稱為「答案引擎」——當用戶提出問題，它會給出一個簡潔明確的答案，且所有的答案都標明瞭來源，給出系列聯想問題，可以讓用戶連續追問，進一步拓展和延伸相關話題。&lt;/p&gt; 
&lt;p&gt;但當前 AI 搜索完全取代傳統搜索引擎仍不現實。多年來，傳統搜索巨頭已構建起堅實的「護城河」。以谷歌為例，Chrome 瀏覽器背後有 YouTube、Gmail、地圖等生態服務支持。當用戶使用 Chrome 登錄谷歌賬號，就能同步這些應用中的書籤、密碼、瀏覽記錄等，換個電腦也能無縫銜接。這種生態黏性是新興 AI 瀏覽器一時難以突破的。&lt;/p&gt; 
&lt;p&gt;傳統搜索引擎還掌握着生成式 AI 發展的關鍵資源——算力與數據。例如，OpenAI 訓練 ChatGPT 需依賴龐大算力，而谷歌雲位居全球前三；模型優化需要海量數據，其中大量仍存儲於谷歌服務器中。而這些 AI 公司若想跳過這一枷鎖，自建數據索引庫，不僅技術門檻高，也意味着鉅額成本。&lt;/p&gt; 
&lt;p&gt;無論如何，隨着 AI 技術不斷發展，全球搜索業務已站在轉型的十字路口。新興 AI 搜索能否突破成本與技術壁壘，開闢新格局？傳統搜索巨頭又能否擺脫固有商業模式的束縛，成功實現 AI 化轉型？答案尚未揭曉。可以確定的是，AI 不再只是技術革命的推動者，也正在成為塑造市場競爭與監管走向的關鍵力量。谷歌一案的判決，被業內稱為「本世紀科技行業最具深遠影響的法院裁決之一」，將為同樣面臨反壟斷訴訟的 Meta、亞馬遜和蘋果提供重要參考和借鑑。（經濟日報，楊嘯林）&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372272</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372272</guid>
      <pubDate>Mon, 15 Sep 2025 06:51:26 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>「Google Gemini」登頂 App Store 免費榜榜首</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;谷歌旗下 AI 應用「Google Gemini」在美國 App Store 免費榜單上躍居第一，成為 iPhone 上最受歡迎的免費應用。這一成績部分得益於廣受歡迎的 Nano Banana 圖像編輯模型。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-f32d258f67a978346ec2dba1fa5857c6603.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;截至週五晚，Gemini 位列美國 App Store 免費榜第一位，OpenAI 的 ChatGPT 排名第二，社交應用 Threads 位居第三。Google 搜索 App 排在第六，Google 地圖第八，Chrome 第十三，Gmail 則排在第二十一。&lt;/p&gt; 
&lt;p&gt;在加拿大與英國市場，Gemini 的表現同樣強勁，均居榜單第二位。&lt;/p&gt; 
&lt;p&gt;自 8 月 26 日發佈至 9 月 9 日短短兩週，Gemini 應用已新增 2300 萬用戶，Nano Banana 圖像編輯工具在此期間被使用超 5 億次。該編輯模型因能精準保持人物特徵一致性而走紅，支持多張照片混合生成、風格遷移及對話化編輯等功能。&lt;/p&gt; 
&lt;p&gt;所有免費用戶每天可生成或編輯最多 100 張圖片，付費訂閲用戶（每月 19.99 美元起）每日額度則提升至 1000 張。&lt;/p&gt; 
&lt;p&gt;據瞭解，Gemini 的火爆也帶動了谷歌在 iOS 生態中的各類應用整體排名上升，顯示出生成式 AI 工具在移動端繼續受到強烈關注。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372266</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372266</guid>
      <pubDate>Sun, 14 Sep 2025 06:36:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>蘋果 AI 領域人事調整：前 Siri 高管 Robby Walker 將於 10 月底離職</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;據路透社報道，蘋果公司在人工智能（AI）領域再迎人事變動。消息披露，前 Siri 高管、曾負責「Apple Intelligence」版本 Siri 研發的 Robby Walker，計劃於 2025 年 10 月底正式離開蘋果。&lt;/p&gt; 
&lt;p&gt;&lt;img height="248" src="https://oscimg.oschina.net/oscnet/up-48a88ba0ad3262605a5f5cbf1737efcb81c.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;公開信息顯示，Walker 在蘋果 AI 業務推進中曾承擔重要角色。此前，在「Apple Intelligence」版 Siri 項目出現延期後，他曾在內部會議中以「挑戰游泳紀錄的失敗嘗試」作比，客觀評價團隊工作——既坦誠項目未達預期目標，也肯定了團隊在研發過程中取得的階段性成果。同時，Walker 還提及，儘管部分競爭對手已推出質量相對較低的類似功能，但蘋果始終堅持更高的質量標準，不急於推出未達標的產品。&lt;/p&gt; 
&lt;p&gt;項目調整後，Walker 轉崗至蘋果「Answers」團隊，牽頭研發基於人工智能技術的搜索工具。目前，彭博社等多方信息顯示，「Answers」項目仍在正常推進中，預計將於 2026 年正式上線，此次 Walker 離職暫未對該項目整體進展造成公開披露的影響。&lt;/p&gt; 
&lt;p&gt;值得關注的是，此次人事變動並非蘋果近期在 Siri 相關業務上的唯一調整。此前，蘋果已對 Siri 項目管理權進行調整，將其從 AI 主管 John Giannandrea 手中移交至曾主導打造 Vision Pro 及 visionOS 的 Mike Rockwell。按照當前規劃，新版 Siri 最早有望在 2026 年春季與用戶見面。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372246</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372246</guid>
      <pubDate>Sun, 14 Sep 2025 03:41:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>主流 AI 聊天機器人傳播虛假信息概率翻倍，高達 35%</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Newsguard 最近發佈了一項研究，顯示截至 2023 年 8 月，十大生成式 AI 工具在處理實時新聞時，有高達 35% 的概率傳播虛假信息。相比去年 8 月的 18%，這一數字幾乎翻了一番。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;研究指出，這一虛假信息傳播率的顯著上升與 AI 聊天機器人引入實時網絡搜索功能密切相關。隨着拒絕回答用戶問題的比例從 31% 降至 0%，AI 開始接入一個充滿不實信息的網絡生態系統，導致虛假信息的傳播現象愈加嚴重。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;該研究發現，許多不良行為者利用 AI 的特性故意散佈虛假信息。去年，Newsguard 就曾標記出 966 個以 16 種語言運營的 AI 生成新聞網站，這些網站通過模仿正規媒體的名稱，如 「iBusiness Day」，向公眾傳播假消息。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;具體來看，Inflection 公司的 AI 模型傳播虛假信息的概率最高，達到了 56.67%;而 Perplexity 模型也不容樂觀，出錯率為 46.67%。ChatGPT 和 Meta 的 AI 模型則各自為 40%，而 Copilot（微軟必應聊天）和 Mistral 的虛假信息傳播率為 36.67%。表現最好的兩款模型是 Claude 和 Gemini，錯誤率分別為 10% 和 16.67%。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;值得注意的是，Perplexity 的表現大幅下滑，去年 8 月時該模型對虛假信息的揭穿率達到 100%，然而到今年 8 月，這一概率接近 50%。引入網絡搜索功能的初衷是解決 AI 回答內容過時的問題，但卻引發了新的挑戰。這些聊天機器人開始從不可靠的來源獲取信息，使得用戶在判斷事實與假消息時愈發困難。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Newsguard 指出，早期的 AI 通過拒絕回答問題來避免傳播虛假信息的風險，但如今網絡生態中虛假信息氾濫，辨別真偽愈發複雜。OpenAI 也承認，當前的語言模型總是可能產生 「幻覺內容」，即虛假或無根據的信息。該公司表示正在研發新技術，力圖讓未來的模型能夠更好地提示不確定性，而不是篤定地生成虛假信息。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372244</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372244</guid>
      <pubDate>Sun, 14 Sep 2025 03:27:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>VS 2026 最佳配置提升為 64GB 內存 16 核 CPU，微軟工程師給出原因：方便程序員申請高配機</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/news/371552/visual-studio-2026-insiders" target="_blank"&gt;微軟最近推出了 Visual Studio 2026 的預覽版&lt;/a&gt;，在硬件建議上推薦使用 64GB 內存和 16 核 CPU。在此前版本如 Visual Studio 2019 和 2022 中，硬件要求均為至少 4 核處理器和 4GB 內存，而到了 2026 版本，微軟則專門建議 64GB 內存和 16 核處理器。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0915/111252_72AB_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;對此 Visual Studio 團隊的性能架構師 David Kean 解釋了這一變化背後的原因，簡單來説就是一些公司看到最低內存要求 8G，就只肯給員工配 8G 的機器，乾脆寫個 64G 讓工程師更方便申請高配機。&lt;/p&gt; 
&lt;p&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-9b11c480f0cc1c4434d99db8eb9508f39cf.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;他指出，Visual Studio 2026 的最低和推薦配置與 2022 和 2019 版本相同，但新版本在相同硬件上的性能將顯著提升，新版本使用更少的資源，並在需要時更好地利用可用資源。&lt;/p&gt; 
&lt;p&gt;David Kean 表示「我經常和開發者交流，他們的 IT 部門通常會嚴格按照最低/推薦配置來配備硬件。」因此他的目標之一就是為開發者提供依據，讓他們能夠與 IT 部門、經理或決策者交涉，爭取到更好更快的硬件。&lt;/p&gt; 
&lt;p&gt;他提到，雖然 Visual Studio 可以在低配置上運行，但根據工作負載、項目大小或已安裝的擴展，少於 8GB 內存可能會導致體驗不佳。他還表示，64GB 內存和 16 核 CPU 的配置在硬件成本與性能之間達到了最佳平衡，如果使用更高配置，如 128GB 內存和 32 核 CPU，效果會更好。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372242</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372242</guid>
      <pubDate>Sun, 14 Sep 2025 03:17:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>0 基礎帶你精通 Java 對象序列化 -- 以 Hessian 為例</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;span id="OSC_h1_1"&gt;&lt;/span&gt; 
&lt;h1&gt;一、概述&lt;/h1&gt; 
&lt;p&gt;在高級編程語言的世界中，開發者始終與**【object/struct】**這類高度抽象的數據結構打交道。然而在分佈式架構下，任何服務進程都不是數據孤島——跨進程數據交換是必然需求。&lt;/p&gt; 
&lt;p&gt;以 Java 為例，業務邏輯的輸入輸出都是**【object】&lt;strong&gt;。但在 RPC 場景中，這些對象必須經由網絡傳輸。這裏出現了一個根本性矛盾：網絡介質 (網線/光纖) 對面向對象編程 (OOP) 一無所知，它們只會用光和電忠實地傳輸&lt;/strong&gt;扁平化**的字節流 (&lt;strong&gt;byte[]&lt;/strong&gt;)。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//a0cedde6f9c31265f57bce8e896481f6.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;軟件工程經典的分層理論驅使我們去添加一個&lt;strong&gt;轉換層&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//93923be5e7dee6b3519f0fbab774a8b5.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//8a35581e9f80f33e26df7eed4c78df53.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;我們需要有個工具或者組件來協助進行**【object】&lt;strong&gt;和&lt;/strong&gt;【byte[]】&lt;strong&gt;之間的&lt;/strong&gt;雙向轉換**。這個過程包含兩個對稱的流程：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;【&lt;strong&gt;object&lt;/strong&gt;】-&amp;gt;【&lt;strong&gt;byte[]&lt;/strong&gt;】：業界一般稱為&lt;strong&gt;序列化/serialize&lt;/strong&gt;，但是那個單詞念起來很拗口，本文我們都叫它【編碼/&lt;strong&gt;encode&lt;/strong&gt;】好了。&lt;/li&gt; 
 &lt;li&gt;【&lt;strong&gt;byte[]&lt;/strong&gt;】-&amp;gt;【&lt;strong&gt;object&lt;/strong&gt;】：業界一般稱為&lt;strong&gt;反序列化/deserialize&lt;/strong&gt;，但是那個單詞念起來很拗口，本文我們都叫它【解碼/&lt;strong&gt;decode&lt;/strong&gt;】好了。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Hessian 作為 Java 生態中久經考驗的對象編解碼器，相較於同類產品具有以下兩大核心優勢：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;深度 Java 生態適配&lt;/strong&gt;：與 JSON、Protobuf 等語言中立的通用協議不同，Hessian 專為 Java 深度優化，對泛型、多態等&lt;strong&gt;Java 特有語言特性提供原生支持&lt;/strong&gt;。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;高效二進制協議&lt;/strong&gt;：相較 JSON 等文本協議，Hessian 採用精心設計的二進制編碼方案，在編解碼效率和數據壓縮率方面表現更優。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;需要強調的是，軟件工程沒有銀彈——業務場景的差異決定了編解碼器的選擇必然需要權衡取捨。但就 Java RPC 而言，Hessian 應該是經過廣泛實踐驗證的穩健選擇。&lt;/p&gt; 
&lt;p&gt;本文將系統解析 Hessian 的編碼流程，重點揭示其實現【&lt;strong&gt;object&lt;/strong&gt;】-&amp;gt;【&lt;strong&gt;byte[]&lt;/strong&gt;】轉換的核心機制。&lt;/p&gt; 
&lt;span id="OSC_h1_2"&gt;&lt;/span&gt; 
&lt;h1&gt;二、基礎編碼原理&lt;/h1&gt; 
&lt;p&gt;對象編碼過程主要包含如下兩大核心：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;對象圖遍歷&lt;/strong&gt;：遍歷高級數據結構&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;通過反射或元編程技術遍歷對象圖（Object Graph）。&lt;/li&gt; 
   &lt;li&gt;是同類產品的通用邏輯，不管 jackson、fastjson、hessian 都需要用&lt;strong&gt;不同的方式做類似的事情。&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;編碼格式&lt;/strong&gt;：將高級數據結構按協議拍平放到&lt;strong&gt;byte[]&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;同類產品百家爭鳴，各有各的思路。&lt;/li&gt; 
   &lt;li&gt;是同類產品的競技場，&lt;strong&gt;各個產品在這裏體現差異化的競爭力&lt;/strong&gt;。&lt;/li&gt; 
   &lt;li&gt;設計權衡包括： 
    &lt;ul&gt; 
     &lt;li&gt;二進制效率 vs 可讀性（如 Hessian 二進制 vs JSON 文本）&lt;/li&gt; 
     &lt;li&gt;編碼緊湊性 vs 擴展靈活性&lt;/li&gt; 
     &lt;li&gt;跨語言支持 vs 語言特性深度優化&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;對象圖遍歷&lt;/strong&gt;決定了編碼能力的下限 (能否正確處理對象結構)，而&lt;strong&gt;編碼格式&lt;/strong&gt;決定了編碼能力的上限 (傳輸效率、兼容性等)。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;對象圖遍歷&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//be559029d05ec34091e74cb6e6141e9a.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;對象圖遍歷的本質是&lt;strong&gt;按深度優先&lt;/strong&gt;進行&lt;strong&gt;對象屬性導航&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;舉個例子：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//b10fb4203811541f2408894498531740.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;宏觀來看，A 類型的對象其實是&lt;strong&gt;一棵樹 (或圖)&lt;/strong&gt;，如果腦補不出來的話，我給你畫個圖：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//3c6628413a7422c5be5773cef2612c75.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;可以看到這棵樹的葉子結點都一定是 Java 內置的基本數據類型。換句話説，Java 的&lt;strong&gt;8 種基礎數據類型&lt;/strong&gt;和他們的&lt;strong&gt;數組變體&lt;/strong&gt;，支撐了 Java 豐富的預定義/自定義數據結構。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;八股文：Java 的 8 種基礎數據類型是哪些？String 算不算基礎數據類型？&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;編碼的本質就是深度優先的遍歷這棵樹，拍平它，然後放到**byte[]**裏。&lt;/p&gt; 
&lt;p&gt;我舉個例子吧。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;偽代碼&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;為降低偽代碼複雜度，我們假設 Java 只有 1 種基礎數據類型 int，也就是説 Java 裏只有 int 和只包含 int 字段的自定義 POJO。&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;我們定義 POJO 指的是用於傳輸、存儲使用的簡單 Java Bean 或者常説的 DTO。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;從某種意義上來説，Integer 也是基於 int 封裝的自定義 POJO。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;字節流抽象&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;我們使用標準庫裏的 java.io.DataOutput 來進行偽代碼説理，這個類提供了一些語義化的編碼 function。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//239f91dfc543c0ff88fb90cf15e8fff5.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;java.io.DataOutput&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;對象圖遍歷&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//c9f64aaf28e83e372ea67c932db0937c.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;字節流佈局&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;最終呈現出來的字節流層面的數據佈局會是這樣：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//77ecb08f4d5f27695f0f76d7c10cbee6.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;看起來沒毛病，唯一的問題就是不好解碼。&lt;/p&gt; 
&lt;p&gt;當解碼端收到一個 16 字節的字節流以後，它分不清哪塊數據是 A 對象的，哪塊數據是 B 對象的。甚至都分不清這到底是 4 個 int32 還是 2 個 int64。&lt;/p&gt; 
&lt;p&gt;這個問題需要&lt;strong&gt;編碼格式&lt;/strong&gt;來解決。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;編碼格式&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;上面遺留的問題，聰明的你肯定想到了答案。&lt;/p&gt; 
&lt;p&gt;就是因為編碼產物太太太簡陋了，整個過程中只是一股腦的把樹拍平，把葉子節點的值寫入字節流，缺少&lt;strong&gt;結構元數據&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;最最最重要的&lt;strong&gt;結構元數據&lt;/strong&gt;就是數據塊的邊界，上述 4 個數據塊，最起碼應該添加 3 個邊界標識。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//01cadc75fb4261e8778896a92e5beca7.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;我們先用我們耳熟能詳的 JSON 格式來理解下編碼格式這個事情。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;偽代碼&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;JSON 是這樣解決這個問題的：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//457465c678f29743ca41d351dd932ab2.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;JSON 協議在嵌套的 POJO 上用**{}&lt;strong&gt;來作為邊界，POJO 內部的字段鍵值用 &lt;strong&gt;,&lt;/strong&gt; 來做邊界，&lt;/strong&gt;:**拆分字段鍵值。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;字節流佈局&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;結果就變成這樣：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//718a030c1291d7f86e7c4c886c3d01cd.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;這樣在解碼的時候，可以通過**{&lt;strong&gt;、&lt;/strong&gt;}&lt;strong&gt;、&lt;/strong&gt;,&lt;strong&gt;、&lt;/strong&gt;:** 等&lt;strong&gt;token&lt;/strong&gt;來切割 JSON 字符串，判定&lt;strong&gt;數據塊邊界&lt;/strong&gt;並恢復出&lt;strong&gt;對象圖&lt;/strong&gt;。&lt;/p&gt; 
&lt;span id="OSC_h1_3"&gt;&lt;/span&gt; 
&lt;h1&gt;三、Hessian 編碼格式&lt;/h1&gt; 
&lt;p&gt;接下來我們可以開始介紹 Hessian 的編碼魔法了。&lt;/p&gt; 
&lt;p&gt;需要強調的是：Hessian 跟 JSON 不同，Hessian 是二進制格式。如果一個字節流直接按字符集解碼不能得到一個完整的、有意義的字符串，那它就是二進制編碼數據。&lt;/p&gt; 
&lt;p&gt;Hessian 在編碼時，按&lt;strong&gt;數據塊類型&lt;/strong&gt;為每一個數據塊添加一個&lt;strong&gt;前綴字節 (byte)&lt;strong&gt;作為結構元數據，這些&lt;/strong&gt;元數據&lt;/strong&gt;和&lt;strong&gt;數據塊&lt;/strong&gt;一起，交給解碼端使用。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;數據塊&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;對象圖裏的每一個節點，都是一個數據塊。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//3115085d696f405a881e61692a063b92.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;如上圖所示，以 A 對象為根的對象圖，一共有 6 個&lt;strong&gt;數據塊&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;數據塊標籤（tag）&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Hessain 在編碼每一個數據塊時，都會根據數據塊的類型在字節流中寫入一個&lt;strong&gt;前綴字節&lt;/strong&gt;(&lt;strong&gt;0-255&lt;/strong&gt;)，這個字節説明瞭數據塊的&lt;strong&gt;語義和結構&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;以&lt;strong&gt;int32&lt;/strong&gt;為例，其最基礎的編碼格式如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//fb9f5e4ffbe04e67cc8526e86038ce87.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;除該基礎編碼格式外，int32 的編碼還有其他變體。&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;上述 &lt;strong&gt;I&lt;/strong&gt; 就是整數類型的 tag。解碼端讀取 tag 後，按 tag 值來解碼數據。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//6db73099018e0bb91d7b0eb8d7a998d7.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;com.alibaba.com.caucho.hessian.io.Hessian2Input#readObject(java.util.List&amp;lt;java.lang.Class&amp;lt;?&amp;gt;&amp;gt;)&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;由此延伸、拓展，其他的數據類型都是類似的模式。常見數據類型及其對應的 tag 值如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//bdc6fc4ca7b3d70f391b9ea328b36a26.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;值得注意的是，&lt;strong&gt;N&lt;/strong&gt;、&lt;strong&gt;F&lt;/strong&gt;、&lt;strong&gt;T&lt;/strong&gt;三個 tag 是自解釋的，和固定值映射、綁定。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;POJO 編碼&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;POJO 是一種特殊的&lt;strong&gt;數據塊&lt;/strong&gt;，Hessian 將 POJO 的&lt;strong&gt;結構&lt;/strong&gt;和&lt;strong&gt;值&lt;/strong&gt;拆開，分別編碼。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;POJO 結構編碼&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;POJO 結構&lt;/strong&gt;的 tag 為&lt;strong&gt;C&lt;/strong&gt;，對照 int32 的編碼格式，POJO 結構的編碼格式如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//f82feb9cef8ee37be26fa5e236e1cafc.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;舉個例子：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//57fce9ec2ed617db45fc440313c0c184.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;編碼 POJO 時，Hessain 會將 POJO 的類名、字段名列表寫入字節流，供解碼端使用。後續編碼 POJO 字段值時，需要&lt;strong&gt;按照字段名列表&lt;/strong&gt;(如上述&lt;strong&gt;bb&lt;/strong&gt;、&lt;strong&gt;cc&lt;/strong&gt;)&lt;strong&gt;的順序&lt;/strong&gt;來編碼字段值。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//e0478bcef5e562ad49afa590a79185ab.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;POJO 字段值編碼&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;POJO 字段值&lt;/strong&gt;的 tag 為&lt;strong&gt;O&lt;/strong&gt;，對照 int32 的編碼格式，POJO 字段值的編碼格式如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//147cb7b396ba5fcad0c15a00a5c6f6d6.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;舉個例子：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//1ec3dd805e8ba21d9cc0c7e64fca7824.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;可以看到，編碼 POJO 字段值的時候，在 tag 後面有一個&lt;strong&gt;POJO 結構序號&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;這是 Hessian 的一個&lt;strong&gt;數據複用&lt;/strong&gt;的小技巧。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;POJO 結構複用&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;JSON 協議有一個缺點，那就是重複數據帶來的存儲/傳輸開銷。舉個例子：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//c0f290170c6fbe02c4a22668f81e31f0.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;如上圖，B 類型的字段名 (&lt;strong&gt;dd&lt;/strong&gt;、&lt;strong&gt;ee&lt;/strong&gt;) 在編碼產物中&lt;strong&gt;重複出現&lt;/strong&gt;！&lt;/p&gt; 
&lt;p&gt;Hessian 希望解決這個問題，同一類型的多個 POJO 對象在序列化時，只需要在第一次的時候編碼&lt;strong&gt;類名、字段名&lt;/strong&gt;等元數據，後續可以被重複的引用、使用，無需重複編碼。&lt;/p&gt; 
&lt;p&gt;如果用 Hessian 來編碼，結果會是這樣：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;數據佈局&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//ae454fbec4eae9f73efea262750e29f0.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;數據佈局詳解&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//d0f362d8687736273afdf6c9e45b04a6.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;如上圖，APojo、BPojo 的字段名只會編碼一次。多個 BPojo 對象在編碼時會通過**結構引用序號 (1)**來引用它。相對 JSON，Hessian 避免了多次編碼 BPojo 字段名的開銷。&lt;/p&gt; 
&lt;p&gt;為什麼 APojo 的序號是 1、BPojo 的序號是 2？&lt;/p&gt; 
&lt;p&gt;Hessain 在編碼過程中，每次遇到一個新的、沒有處理過的新 POJO 類型時，會給它分配一個&lt;strong&gt;從 0 開始、單調遞增&lt;/strong&gt;的序號。&lt;/p&gt; 
&lt;p&gt;遙相呼應的，&lt;strong&gt;解碼側&lt;/strong&gt;每次解碼一個 tag 為&lt;strong&gt;C&lt;/strong&gt;的 POJO 結構數據塊時，也會按&lt;strong&gt;解碼順序&lt;/strong&gt;維護好其索引序號。&lt;/p&gt; 
&lt;span id="OSC_h1_4"&gt;&lt;/span&gt; 
&lt;h1&gt;四、Hessian 編碼細節&lt;/h1&gt; 
&lt;p&gt;到現在，我們已經對 Hessian 編碼有了一個的概括性的認識，接下來我們來看看一些值得注意的細節。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;重複對象複用&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//77f9679e85811f93d0fcdb046ad714f3.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;A 對象裏有兩個字段 (d、e) 指向同一個對象 B。如果不做處理，會因為重複編碼而帶來不必要的開銷。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//7f723ff30877e885b2f4a5bbef0265a2.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;相同的一個 B 對象，因為被兩個字段重複引用，導致&lt;strong&gt;2 次編碼&lt;/strong&gt;、產生&lt;strong&gt;2 份數據空間佔用！&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;如果只是有額外的開銷，沒有可用性問題那都還好。關鍵是在&lt;strong&gt;循環引用&lt;/strong&gt;場景下，會因為&lt;strong&gt;引用成環&lt;/strong&gt;導致&lt;strong&gt;遞歸&lt;/strong&gt;進行對象圖遍歷時觸發方法棧溢出！&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//4f959593079f42c81c5f5901540dd995.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;循環引用是重複引用的特例&lt;/strong&gt;，只要將重複引用處理掉，循環引用也就沒問題了。&lt;/p&gt; 
&lt;p&gt;Hessian 通過&lt;strong&gt;對象引用&lt;/strong&gt;來解決這個問題。在對象圖遍歷過程中，遇到一個之前沒有遇到過、處理過的 POJO 對象時，會給它分配一個&lt;strong&gt;從 0 開始、單調遞增&lt;/strong&gt;的序號。&lt;/p&gt; 
&lt;p&gt;後續再次需要序列化相同的對象時，直接&lt;strong&gt;跳過&lt;/strong&gt;編碼流程，將這個對象的&lt;strong&gt;序號&lt;/strong&gt;寫入字節流。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//7c90939b732ed84f63bcb8ea21b63546.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;解碼時，解碼側按相同的順序來恢復出&lt;strong&gt;引用序號表&lt;/strong&gt;，解碼後續的對象引用。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;小整數內聯 (direct)&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;很多編碼類型，都需要在 tag 後再維護一個&lt;strong&gt;整數類型&lt;/strong&gt;的字段。比如：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;POJO 的編碼 tag &lt;strong&gt;O&lt;/strong&gt;需要一個整數來引用 POJO 結構引用&lt;strong&gt;序號&lt;/strong&gt;。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//60853c7e321632c599984c66b22cb8aa.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;類似 String 的變長類型需要一個整數來標識變長數據的&lt;strong&gt;長度&lt;/strong&gt;。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//10f03bd8e5e43dd19a3484e1f1fee510.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;當字符串很短，就比如**"hi"&lt;strong&gt;吧，短字符串編碼格式的&lt;/strong&gt;長度字段**可能比實際字符數據還大（用 4 字節存儲長度 2），效率低下。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;tag 分段&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Hessian 將一些 tag 值的語義富化，讓它既體現數據類型，也體現小數值。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;因為 tag 是一個&lt;strong&gt;byte(int8)&lt;/strong&gt;，取值範圍是&lt;strong&gt;0-255&lt;/strong&gt;，每個 tag 標識一種特定的數據類型 (int、boolean 等)，但是這些數據類型最多&lt;strong&gt;幾十種&lt;/strong&gt;，取值範圍內還有很大的數值區間沒有被使用，其實比較浪費。那我們就可以把這些空閒的 tag 值，挪作他用，提升 tag 數值空間利用率。&lt;/p&gt; 
&lt;p&gt;我舉個例子，注意這個是參考 Hessian 思路的一個簡單示意，&lt;strong&gt;具體的 Tag 值和 Hessian 無關&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//3e4c45ee3365b0258eb67d931eff94c3.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;長度內聯&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;對於&lt;strong&gt;長度≤31&lt;/strong&gt;的字符串，Hessian 用&lt;strong&gt;tag 同時編碼類型和長度&lt;/strong&gt;。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;當 0 &amp;lt;= tag &amp;lt;= 31 時，標識後續的數據塊為字符串。&lt;/li&gt; 
 &lt;li&gt;tag 的數值即為後續數據塊的長度。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;示例如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//6dd4c9e15c8208157f4a3e53320e3813.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;序號內聯&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;當結構引用&lt;strong&gt;序號&amp;lt;=16&lt;/strong&gt;時，Hessain 用&lt;strong&gt;tag 同時編碼類型和序號&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;1. 當 0x60 &amp;lt;= tag &amp;lt;= 0x70 時，標識後續的數據塊為 POJO 字段值。&lt;/p&gt; 
&lt;p&gt;2. tag - 0x60 的值，即為 POJO 結構 (類名+字段名) 引用序號。&lt;/p&gt; 
&lt;p&gt;示例如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//08031efdb62b1e14cb8c6ade63888486.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;相關源碼如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//237bc12726766598c175abc821760060.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;com.alibaba.com.caucho.hessian.io.Hessian2Output#writeObjectBegin&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;字符串編碼&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Hessian 編碼字符串的關鍵流程是：&lt;strong&gt;字符串分段+不同長度的子串使用不同的 tag。&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;分段原則&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;字符串會被分割為若干塊，每塊最大長度為 32768（0x8000）。前 N-1 塊均為完整長度的子串（32768 字節），使用固定 tag &lt;strong&gt;R&lt;/strong&gt;標識；最後一塊為剩餘部分，長度範圍為 0-32768 字節，根據實際長度選擇動態 tag。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;尾段 tag 的選擇基於尾塊的長度決定&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;長度≤31（0x1F）：使用單字節 tag 0x00-0x1F 直接內聯長度值。&lt;/li&gt; 
   &lt;li&gt;32≤長度≤1023（0x3FF）：使用 tag &lt;strong&gt;0&lt;/strong&gt;後跟 1 字節長度 (大端序)，&lt;strong&gt;10bit&lt;/strong&gt;的計數空間由 tag 字節和長度字節共同提供。這個地方有點繞，看下代碼吧。&lt;/li&gt; 
   &lt;li&gt;長度≥1024：使用 tag &lt;strong&gt;S&lt;/strong&gt;後跟 2 字節長度（大端序）。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;相關源碼&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//0d46a7cdf992687d78fc5d21f2bbccaa.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;com.alibaba.com.caucho.hessian.io.Hessian2Output#writeString(java.lang.String)&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;這種設計通過減少長字符串的冗餘長度標記，在保持兼容性的同時顯著提升了編碼效率。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;整數壓縮&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;基礎編碼&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;整數 (int32) 的的取值範圍很大 (-23^31 - 2^31)，保守的編碼格式會用 4 個 byte 來編碼整數。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//50ee2c14cb9e43fdbd52a30c58e19a1d.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;但是日常使用中，我們會大量使用&lt;strong&gt;小整數&lt;/strong&gt;，比如 1、31。這時候如果還用 4 字節編碼就很不划算啦~&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;變長編碼&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Hessian 根據整數的值範圍，動態的選擇不同的編碼方式，且&lt;strong&gt;不同的編碼方式有不同的 tag&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;單字節整數編碼&lt;/strong&gt;：&lt;strong&gt;類似【長度壓縮】，tag 中直接內聯數值&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;適用範圍：-16 到 47（共 64 個值）&lt;/p&gt; 
&lt;p&gt;編碼方式：使用單字節，值為 value + &lt;strong&gt;0x90&lt;/strong&gt;（144）&lt;/p&gt; 
&lt;p&gt;例如：0 編碼為 0x90，-1 編碼為 0x8f，47 編碼為 0xbf&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;雙字節整數編碼&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;適用範圍：-2048 到 2047&lt;/p&gt; 
&lt;p&gt;編碼方式：首字節為 &lt;strong&gt;0xc8&lt;/strong&gt; + (value &amp;gt;&amp;gt; 8)，後跟一個字節存儲 value 剩下的 bit。&lt;/p&gt; 
&lt;p&gt;這種編碼可以表示&lt;strong&gt;12bit&lt;/strong&gt;有符號整數&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;三字節整數編碼&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;適用範圍：-262144 到 262143&lt;/p&gt; 
&lt;p&gt;編碼方式：首字節為 &lt;strong&gt;0xd4&lt;/strong&gt; + (value &amp;gt;&amp;gt; 16)，後跟兩個字節存儲 value 的高 8 位和低 8 位。&lt;/p&gt; 
&lt;p&gt;這種編碼可以表示&lt;strong&gt;19bit&lt;/strong&gt;有符號整數。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;五字節整數編碼&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;適用範圍：超出上述範圍的所有 32 位整數&lt;/p&gt; 
&lt;p&gt;編碼方式：以 &lt;strong&gt;'I'&lt;/strong&gt;（0x49）開頭，後跟 4 個字節表示完整的 32 位整數值。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;相關源碼&lt;/strong&gt;：&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet//a6fdb7cd76b7cd2cb3bb2130f078a10c.jpg" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;com.alibaba.com.caucho.hessian.io.Hessian2Output#writeInt&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;收益&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;小整數（如 0、-1）僅需 1 字節 ，而傳統 int32 固定 4 字節。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;大整數動態擴展，避免固定長度浪費（如 1000 僅需 2 字節）。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;其他的數值類型比如 int64 也有類似的機制。&lt;/p&gt; 
&lt;span id="OSC_h1_5"&gt;&lt;/span&gt; 
&lt;h1&gt;五、總結&lt;/h1&gt; 
&lt;p&gt;Hessian 專為 Java 優化，採用高效二進制協議，通過對象圖遍歷和編碼協議實現對象與字節流的轉換，利用數據塊標籤、重複對象複用、數據壓縮等機制，提升編解碼效率和數據壓縮率。&lt;/p&gt; 
&lt;p&gt;本文沒有去展開 Hessian 的代碼細節，而是儘可能深入淺出的介紹了 Hessain 的核心編碼原理，以幫助讀者建立對 Hessian 的宏觀認知，從而可以更好的去理解和使用它。&lt;/p&gt; 
&lt;p&gt;儘管不同語言/生態的序列化框架選型讓人眼花繚亂，但是各自需要解決的問題和解決問題的思路都大同小異；我們對 Hessain 原理的認識可以遷移到其他序列化框架，甚至自己寫一個領域特定的序列化框架。&lt;/p&gt; 
&lt;p&gt;相關內容均為筆者走讀源碼整理而來，如有疏漏，歡迎指正。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;參考：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 2.0 Serialization Protocol&lt;/strong&gt;（&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fhessian.caucho.com%2Fdoc%2Fhessian-serialization.html" rel="nofollow" target="_blank"&gt;http://hessian.caucho.com/doc/hessian-serialization.html&lt;/a&gt;&lt;/em&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 2.0 序列化協議（中文版）&lt;/strong&gt;&lt;em&gt;（&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.diguage.com%2Fpost%2Fhessian-serialization-protocol%2F%25EF%25BC%2589" rel="nofollow" target="_blank"&gt;https://www.diguage.com/post/hessian-serialization-protocol/）&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 協議解釋與實戰（一）：布爾、日期、浮點數與整數&lt;/strong&gt;（&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.diguage.com%2Fpost%2Fhessian-protocol-interpretation-and-practice-1%2F" rel="nofollow" target="_blank"&gt;https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-1/&lt;/a&gt;&lt;/em&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 協議解釋與實戰（二）：長整型、二進制數據與 Null&lt;/strong&gt;（&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.diguage.com%2Fpost%2Fhessian-protocol-interpretation-and-practice-2%2F" rel="nofollow" target="_blank"&gt;https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-2/&lt;/a&gt;&lt;/em&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 協議解釋與實戰（三）：字符串&lt;/strong&gt;（&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.diguage.com%2Fpost%2Fhessian-protocol-interpretation-and-practice-3%2F" rel="nofollow" target="_blank"&gt;https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-3/&lt;/a&gt;&lt;/em&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 協議解釋與實戰（四）：數組與集合&lt;/strong&gt;（&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.diguage.com%2Fpost%2Fhessian-protocol-interpretation-and-practice-4%2F" rel="nofollow" target="_blank"&gt;https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-4/&lt;/a&gt;&lt;/em&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 協議解釋與實戰（五）：對象與映射&lt;/strong&gt;（&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.diguage.com%2Fpost%2Fhessian-protocol-interpretation-and-practice-5%2F" rel="nofollow" target="_blank"&gt;https://www.diguage.com/post/hessian-protocol-interpretation-and-practice-5/&lt;/a&gt;&lt;/em&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hessian 源碼分析（Java）&lt;/strong&gt;（&lt;em&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.diguage.com%2Fpost%2Fhessian-source-analysis-for-java%2F" rel="nofollow" target="_blank"&gt;https://www.diguage.com/post/hessian-source-analysis-for-java/&lt;/a&gt;&lt;/em&gt;）&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;往期回顧&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;1. 前端日誌回撈系統的性能優化實踐｜得物技術&lt;/p&gt; 
&lt;p&gt;2. 得物靈犀搜索推薦詞分發平台演進 3.0&lt;/p&gt; 
&lt;p&gt;3. R8 疑難雜症分析實戰：外聯優化設計缺陷引起的崩潰｜得物技術&lt;/p&gt; 
&lt;p&gt;4. 可擴展系統設計的黃金法則與 Go 語言實踐｜得物技術&lt;/p&gt; 
&lt;p&gt;5. 營銷會場預覽直通車實踐｜得物技術&lt;/p&gt; 
&lt;p&gt;文 / 羊羽&lt;/p&gt; 
&lt;p&gt;關注得物技術，每週更新技術乾貨&lt;/p&gt; 
&lt;p&gt;要是覺得文章對你有幫助的話，歡迎評論轉發點贊～&lt;/p&gt; 
&lt;p&gt;未經得物技術許可嚴禁轉載，否則依法追究法律責任。&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/5783135/blog/18691458</link>
      <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/18691458</guid>
      <pubDate>Sun, 14 Sep 2025 03:06:00 GMT</pubDate>
      <author>原創</author>
    </item>
    <item>
      <title>彭斯克集團起訴 Google，指控 AI 摘要侵權並威脅數字媒體未來</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;彭斯克媒體集團（Penske Media）向美國華盛頓特區聯邦法院提起訴訟，控告科技巨頭 Google 在未經授權的情況下使用其新聞內容生成人工智能（AI）摘要。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;這起訴訟標誌着美國主流出版商&lt;/span&gt;&lt;span&gt;&lt;span&gt;首次&lt;/span&gt;&lt;/span&gt;&lt;span&gt;就 Google 搜索結果中現有的 AI 生成摘要提起法律行動。彭斯克集團旗下包括《滾石》（RollingStone）、Billboard 和 Variety 等知名媒體，每月吸引 1.2 億的網絡訪問者。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="274" src="https://oscimg.oschina.net/oscnet/up-6754ce01e89dc9798ddac2728e0f7784c02.png" width="700" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;彭斯克集團在訴訟中指出，Google 在生成 AI 摘要時使用了出版商的文章，但並未支付任何費用。他們認為，如果沒有 Google 對出版商內容的使用，Google 本應向這些出版商支付相應的費用，以合法使用其內容或將其內容用於訓練自己的 AI 系統。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;彭斯克集團強調，Google 的行為不僅損害了出版商的廣告收入和訂閲收入，還使得其網站流量大幅下降，預計到 2024 年底，該集團的關聯收入將比峯值下降超過三分之一。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;Google 對這一訴訟做出回應，表示其 AI 摘要提升了用戶的搜索體驗，實際上能夠為更多類型的網站帶來流量。Google 發言人何塞・卡斯塔涅達（Jose Castaneda）指出，AI 摘要使得搜索功能更實用，並創造了新的內容被發現的機會，Google 將會為這些 「毫無根據的指控」 進行辯護。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在此之前，在線教育公司 Chegg 也曾起訴 Google，認為其 AI 生成摘要削弱了用戶對原創內容的需求，損害了出版商的競爭力。彭斯克集團的訴訟反映了當前媒體行業對 Google 壟斷地位的擔憂，認為其在搜索市場接近 90% 的份額使得出版商處於弱勢地位。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;新聞 / 媒體聯盟（News/Media Alliance）也對此表示關注，認為這一情況導致出版商無法拒絕 Google 使用其內容進行 AI 摘要生成。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372231</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372231</guid>
      <pubDate>Sun, 14 Sep 2025 02:49:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>馬斯克旗下 xAI 數據標註團隊裁員 500 人</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.businessinsider.com%2Felon-musk-xai-layoffs-data-annotators-2025-9" target="_blank"&gt;據報道&lt;/a&gt;，馬斯克旗下 AI 初創公司 xAI 宣佈，已從其數據標註團隊裁員約 500 人，約佔該團隊三分之一。該團隊曾在訓練 xAI 聊天機器人 Grok 時，通過對數據進行分類和情境化處理發揮關鍵作用。&lt;/p&gt; 
&lt;p&gt;在裁員前，xAI 數據標註團隊是其規模最大的一個工作組，成員超過 1500 人，涵蓋全職員工和合同工。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;xAI 在通知裁員之前，公司要求部分員工參加技能評估/測試，這些測試內容涉及 STEM（科學、技術、工程、數學）、編碼、金融、醫學、模型行為與安全性等多個領域。測試被用於判斷哪些通用導師或其主管可能被保留或轉為更「專才」的角色。 &amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0915/103652_R1Bm_2720166.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;此次裁員是 xAI 戰略轉變的一部分，該公司現專注於招聘 STEM、金融、醫學和安全領域的專業 AI 導師，同時減少普通崗位。xAI 表示，計劃將專業導師團隊擴大 10 倍。這一舉措反映了更廣泛的行業趨勢，隨着 AI 處理日常任務能力的提升，企業正優先考慮能提供專業領域知識的員工。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372229</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372229</guid>
      <pubDate>Sun, 14 Sep 2025 02:39:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Solon AI v3.5.2 發佈，面向全場景的 Java AI 應用開發框架</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Solon AI v3.5.2 已經發布，面向全場景的 Java AI 應用開發框架&lt;/p&gt; 
&lt;p&gt;此版本更新內容包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;添加 solon-ai-core ToolSchemaUtil 簡化方法&lt;/li&gt; 
 &lt;li&gt;添加 solon-ai-mcp McpClientProperties:timeout 屬性，方便簡化超時配置（可省略 httpTimeout, requestTimeout, initializationTimeout）&lt;/li&gt; 
 &lt;li&gt;添加 solon-ai-mcp McpClientProvider:toolsChangeConsumer,resourcesChangeConsumer,resourcesUpdateConsumer,promptsChangeConsumer 配置支持&lt;/li&gt; 
 &lt;li&gt;添加 solon-ai-mcp McpClientProvider 緩存鎖和變更刷新控制&lt;/li&gt; 
 &lt;li&gt;添加 solon-ai-mcp IMcpServerEndpoint 接口（方便可批量獲取組件）&lt;/li&gt; 
 &lt;li&gt;優化 solon-ai-core RepositoryStorable 接口定義，用 save 替代 insert(標為棄用)&lt;/li&gt; 
 &lt;li&gt;調整 solon-ai-core FunctionToolDesc:doHandle 改用 ToolHandler 參數類型（之前為 Function），方便傳遞異常&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;詳情查看：&lt;a href="https://gitee.com/opensolon/solon-ai/releases/v3.5.2"&gt;https://gitee.com/opensolon/solon-ai/releases/v3.5.2&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372219</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372219</guid>
      <pubDate>Sun, 14 Sep 2025 02:20:00 GMT</pubDate>
      <author>來源: 資訊</author>
    </item>
    <item>
      <title>OpenAI 擬將與微軟分成比例降至 8%，獲 500 億美元額外收入</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;據美國科技媒體《The Information》報道，人工智能公司 OpenAI 正尋求調整其與主要投資方微軟的財務協議，以期保留更多收入，用於支付其龐大的計算開銷。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;報道援引知情人士透露，OpenAI 已向部分投資者表示，計劃將微軟獲得的收入分成比例從目前略低於 20% 的水平，到 2030 年逐步降至 8% 左右。根據最初的協議，到 2030 年，微軟將獲得 20% 的分成。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="251" src="https://oscimg.oschina.net/oscnet/up-879eb71753d9c8a6f9579fa9d00e263ca1e.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;這一調整意義重大，預計將為 OpenAI 帶來超過 500 億美元的額外收入。這筆資金將成為其維持和擴展 AI 模型訓練所需的寶貴「彈藥」。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;作為回報，微軟將獲得重組後 OpenAI 實體的三分之一股份，而剩餘部分將歸其非營利組織所有。不過，報道稱，微軟仍將不會在 OpenAI 董事會中擁有席位。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;此外，兩家公司還在就通用人工智能（AGI）的潛在應用、服務器費用及合同條款進行深入談判。目前，尚不清楚這是否已體現在兩家公司近期宣佈的非約束性協議中。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;&lt;span style="color:#000000"&gt;相關閲讀：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style="text-align:left"&gt;&lt;a href="https://www.oschina.net/news/371712" target="_blank"&gt;OpenAI 與微軟達成非約束性協議：允許將營利部門轉型公益股份公司&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372214</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372214</guid>
      <pubDate>Sun, 14 Sep 2025 02:04:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>Skyeye 雲智能製造辦公系統 - Saas v3.17.4 發佈</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="background-color:#ffffff; color:#6a737d"&gt;&lt;span&gt;Skyeye 雲智能製造，&lt;/span&gt;智能製造一體化，採用 SpringBoot+ UNI-APP + Ant Design Vue 的低代碼平台開發模式。包含 50 多種電子流程，CRM、PM、ERP、MES、ADM、OA、EHR、AI、項目、商城、財務、多班次考勤、薪資、招聘、雲售後、論壇、問卷、報表設計、工作流、Saas 等功能。打造全網首套低代碼、功能最全的智能製造行業供應鏈一體化管理軟件&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fip.makerview.cn%3A30003%2FskyPortal" target="_blank"&gt;官方網站&lt;/a&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Farticles.zsxq.com%2Fid_xi3xhacte72g.html" target="_blank"&gt;開發文檔&lt;/a&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Fspace.bilibili.com%2F87396008%2Fchannel%2Fseries" target="_blank"&gt;視頻教程&lt;/a&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/strong&gt;&lt;strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkdocs.cn%2Fl%2Fcbf2cgCLrUyz" target="_blank"&gt;功能點&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;Skyeye&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;雲【源代碼】針對 {Skyeye 會員} 開源。拿到源碼後可進行學習、畢設、企業等使用。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;Skyeye 雲智能製造 v3.17.4 發佈 ，發佈內容如下：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;span&gt;Skyeye 雲已加入 Dromara 社區&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;業務對象適配 Saas 進展 100%&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;VUE 版開發&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;完成文本轉語音功能 (window 服務器可以免費使用，Linux 服務器需要對接百度智能雲)&lt;/li&gt; 
   &lt;li&gt;完成學校模塊校內導航功能，為後續倉庫尋件、園區導航做準備&lt;/li&gt; 
   &lt;li&gt;完成導航模塊得路線規劃、導航計算、位置搜索等功能&lt;/li&gt; 
   &lt;li&gt;支持管理端得路線規劃&lt;/li&gt; 
   &lt;li&gt;低代碼生成器完成，支持 Skyeye 雲內置四種低代碼模板，可自由選擇模板生成代碼&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;span&gt;源代碼只對 Skyeye 會員開放&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;Skyeye 具備&lt;/span&gt;&lt;strong&gt;&lt;span&gt;低代碼、快捷開發、可視化設計、微服務&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;等特點，方便客戶二次開發，極大的提高了開發效率。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;&lt;strong&gt;項目地址：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;Gitee：&amp;nbsp;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;https://gitee.com/doc_wei01/skyeye&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;https://gitee.com/dromara/skyeye&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;GitCode：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://gitcode.com/doc_wei/erp-pro&lt;/li&gt; 
 &lt;li&gt;https://gitcode.com/doc_wei/skyeye-oa&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;PC 端效果圖&lt;/strong&gt;&lt;/p&gt; 
&lt;table cellspacing="0" style="--darkreader-inline-bgcolor:#181a1b; --darkreader-inline-border-bottom:currentcolor; --darkreader-inline-border-left:currentcolor; --darkreader-inline-border-right:currentcolor; --darkreader-inline-border-top:currentcolor; --darkreader-inline-color:#bdb7af; -webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:1px; border:medium none; box-sizing:border-box; color:#444444; display:block; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif; font-size:14px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px; max-width:100%; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:776px; word-break:keep-all; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th style="text-align:center"&gt;效果圖&lt;/th&gt; 
   &lt;th style="text-align:center"&gt;效果圖&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-35a653b1c873ab9501f7187b0901a27cc64.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1919" src="https://oscimg.oschina.net/oscnet/up-f571611575c569395f75d2766052fab6120.png" width="3840" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-50138b38c37d750b93db5b37493f71bf4ca.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p&gt;&lt;img height="1911" src="https://oscimg.oschina.net/oscnet/up-c281a05f7ef637b7a7686865dd36493f1ff.png" width="3843" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-6499d74ddcfe9a99997d8c797aae7b7f0b0.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-e97af4a2caccb199b76d906ecbb339a7575.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1919" src="https://oscimg.oschina.net/oscnet/up-be4cfd4da0048b3fbe82e830fab3aae132c.png" width="3840" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-9eb76f53a99358fdf1ce532dc711baec41a.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-ce7c58e9fe940d58b2cb9cec441176b3481.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="919" src="https://oscimg.oschina.net/oscnet/up-ca685ab278a861067f5850e12470e155e59.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1919" src="https://oscimg.oschina.net/oscnet/up-ec6e551aca1cae85af43a94d3e2061445b1.png" width="3840" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1837" src="https://oscimg.oschina.net/oscnet/up-0bebb255d3c79c13a69bfa0fbb7fcd80836.png" width="3839" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1837" src="https://oscimg.oschina.net/oscnet/up-90cde5042c0effeea9e85761ff8dc7283d5.png" width="3839" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1837" src="https://oscimg.oschina.net/oscnet/up-47ccf76ab671effc6142727caf066d67071.png" width="3839" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;移動端效果圖&lt;/strong&gt;&lt;/p&gt; 
&lt;table border="1" cellpadding="1" cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:1px; border:none; box-sizing:border-box; color:#444444; display:block; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Segoe UI&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Helvetica Neue&amp;quot;,Helvetica,Arial,sans-serif; font-size:14px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px; max-width:100%; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:776px; word-break:keep-all; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果圖&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果圖&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果圖&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&lt;strong&gt;效果圖&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1637" src="https://oscimg.oschina.net/oscnet/up-6850576a0a01188e6b2a9d1ecce58ed7455.png" width="755" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1266" src="https://oscimg.oschina.net/oscnet/up-b5a18816a9e0e785ec5efcbd5baaac89d91.png" width="585" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1266" src="https://oscimg.oschina.net/oscnet/up-df25b57cc822bc730f41ca85c69caee46b6.png" width="588" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img height="1637" src="https://oscimg.oschina.net/oscnet/up-d7707ebc67ddf3842adbb54fdc0c062a2a1.png" width="755" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt; &lt;p&gt;&lt;img height="1269" src="https://oscimg.oschina.net/oscnet/up-8bff9dc60bdbf9fd632676cccab7b0b4ea6.png" width="582" referrerpolicy="no-referrer"&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&amp;nbsp;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&amp;nbsp;&lt;/td&gt; 
   &lt;td style="border-color:#dddddd; border-style:solid; border-width:1px"&gt;&amp;nbsp;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372204</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372204</guid>
      <pubDate>Sun, 14 Sep 2025 00:33:00 GMT</pubDate>
      <author>來源: 資訊</author>
    </item>
    <item>
      <title>Forest v1.7.4 已經發布，輕量級 HTTP 客戶端</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Forest v1.7.4 已經發布，輕量級 HTTP 客戶端&lt;/p&gt;
&lt;p&gt;此版本更新內容包括：&lt;/p&gt;
&lt;p&gt;Forest v1.7.4 版本發佈了！此次版本發佈主要支持了在編程式接口中使用和修改字符串模板變量&lt;/p&gt; 
&lt;h4&gt;編程式接口中的模板變量&lt;/h4&gt; 
&lt;p&gt;可以在 URL 中使用模板變量&lt;/p&gt; 
&lt;div class="markdown-code-block"&gt; 
 &lt;pre class="java"&gt;&lt;code&gt;Forest.get("{baseURL}/test/{myPath}");
&lt;/code&gt;&lt;/pre&gt; 
 &lt;div class="markdown-code-block-copy-btn"&gt;&lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;可以在請求頭中使用模板變量&lt;/p&gt; 
&lt;div class="markdown-code-block"&gt; 
 &lt;pre class="java"&gt;&lt;code&gt;Forest.post("/test")
        .addHeader("Content-Type", "{myContentType}")
        .addHeader("name", "{myName}");
&lt;/code&gt;&lt;/pre&gt; 
 &lt;div class="markdown-code-block-copy-btn"&gt;&lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;可以在字符串型請求體中使用模板變量&lt;/p&gt; 
&lt;div class="markdown-code-block"&gt; 
 &lt;pre class="java"&gt;&lt;code&gt;Forest.post("/test")
        .contentTypeJson()
        .addBody("{myBody}");
&lt;/code&gt;&lt;/pre&gt; 
 &lt;div class="markdown-code-block-copy-btn"&gt;&lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;可以在 K-V 型請求體中使用模板變量&lt;/p&gt; 
&lt;div class="markdown-code-block"&gt; 
 &lt;pre class="java"&gt;&lt;code&gt;Forest.post("/test")
        .contentFormUrlEncoded()
        .addBody("a", "{a}")
        .addBody("b", "{b}");
&lt;/code&gt;&lt;/pre&gt; 
 &lt;div class="markdown-code-block-copy-btn"&gt;&lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;其他可以使用模板變量的編程式接口&lt;/p&gt; 
&lt;div class="markdown-code-block"&gt; 
 &lt;pre class="java"&gt;&lt;code&gt;Forest.get("/")
      .host("{myHost}") // host
      .port("{myPort}") // port
      .path("{myPath}") // path
      .charset("{myCharset}") // charset
      .connectTimeout("{myConnTimeout}") // connect timeout
      .readTimeout("{myReadTimeout}"); // read timeout
&lt;/code&gt;&lt;/pre&gt; 
 &lt;div class="markdown-code-block-copy-btn"&gt;&lt;/div&gt; 
&lt;/div&gt; 
&lt;h4&gt;新特性&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;feat: 在編程式接口中，在&lt;code&gt;ForestRequest&lt;/code&gt;對象中新增&lt;code&gt;var(name, value)&lt;/code&gt;、&lt;code&gt;var(name)&lt;/code&gt;、&lt;code&gt;varAs(name, class)&lt;/code&gt;方法，用於修改和獲取請求級別的變量&lt;/li&gt; 
 &lt;li&gt;feat: 在編程式接口中，&lt;code&gt;url&lt;/code&gt;、&lt;code&gt;header&lt;/code&gt;、Key-Value 形式的&lt;code&gt;body&lt;/code&gt;支持使用字符串模板&lt;/li&gt; 
 &lt;li&gt;feat: 在編程式接口中，&lt;code&gt;connectTimeout&lt;/code&gt;方法和&lt;code&gt;readTimeout&lt;/code&gt;方法支持接受字符串模板作為參數&lt;/li&gt; 
 &lt;li&gt;feat: 在編程式接口中，&lt;code&gt;charset&lt;/code&gt;方法支持接受字符串模板作為參數&lt;/li&gt; 
 &lt;li&gt;feat: OAuth2 增加&lt;code&gt;OAuth2#forestInterceptor&lt;/code&gt;屬性，可以增加自定義攔截器來對獲取 Token 的請求進行一些操作&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;修復問題&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;fix: 默認不對 cookie 的值進行編碼和反編碼 (#ICVPUG)&lt;/li&gt; 
&lt;/ul&gt;
&lt;p&gt;詳情查看：&lt;a href="https://gitee.com/dromara/forest/releases/v1.7.4" rel="nofollow"&gt;https://gitee.com/dromara/forest/releases/v1.7.4&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/372190</link>
      <guid isPermaLink="false">https://www.oschina.net/news/372190</guid>
      <pubDate>Sat, 13 Sep 2025 17:03:00 GMT</pubDate>
      <author>來源: 資訊</author>
    </item>
    <item>
      <title>重塑研發組織形態：從「中心軟件工廠」到「移動軟件工廠」</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;數字化轉型的加速，讓軟件研發從幕後走到前台，成為組織創新和產業升級的關鍵引擎。無論是科研攻關、產業製造，還是信息基礎設施建設，軟件都已經滲透到最核心的環節。 然而，在現實環境中，研發並非總是發生在高速網絡與開放環境下。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;有時，它需要在&lt;strong&gt;嚴格隔離的網絡&lt;/strong&gt;中完成；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;有時，它需要跨越地域，在&lt;strong&gt;多團隊協作&lt;/strong&gt;中推進；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;有時，它要面對&lt;strong&gt;安全與合規&lt;/strong&gt;的高壓要求，容不得半點鬆懈。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;這就是今天的研發新常態：複雜、分佈、受限，卻又必須高效、統一、可控。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;行業挑戰：研發必須跨越的三重門檻&lt;/h2&gt; 
&lt;p&gt;面對這樣的新常態，研發組織普遍遭遇三道門檻：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;協同門檻&lt;/strong&gt;：不同地域、不同團隊之間，工具鏈與流程標準不一致，導致研發成果常常無法順暢對接。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;網絡門檻&lt;/strong&gt;：在斷網或弱網的條件下，環境一致、基線相同、依賴拉取、製品共享、版本同步都成了奢望。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;合規門檻&lt;/strong&gt;：即使是短期的現場研發，也必須滿足嚴格的標準與安全要求，否則創新成果難以落地。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;這三道門檻，幾乎成了所有組織共同面對的困境。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;新形態的亮相：中心與移動軟件工廠&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0912/185857_1Zh5_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;在這樣的背景下，軟件工廠的形態正在發生演進。&lt;/p&gt; 
&lt;p&gt;Gitee 帶來了一個新的答案：&lt;strong&gt;中心軟件工廠與移動軟件工廠的雙重驅動模式&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;它不是簡單的功能疊加，而是研發組織能力的一次重塑：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;中心軟件工廠&lt;/strong&gt;：承載統一的研發基線與標準，形成高效、安全、合規的研發中心；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;移動軟件工廠&lt;/strong&gt;：作為靈活的延伸，將研發能力帶到任何需要的地方，讓創新不再受限。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;中心軟件工廠：標準的承載者&lt;/h2&gt; 
&lt;p&gt;在中心軟件工廠裏，研發流程被整體化、規範化：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;統一的代碼管理與版本基線；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;標準化的流水線與構建環境；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;安全可控的製品倉庫與掃描規則；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;全局適配的權限與合規策略。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0912/185923_8uvl_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;它是研發的「大本營」，確保所有成果都有跡可循、有規可依。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;移動軟件工廠：靈活的延伸者&lt;/h2&gt; 
&lt;p&gt;移動軟件工廠的使命，是讓研發能力突破環境的限制。&lt;/p&gt; 
&lt;p&gt;它並不是「縮減版」，而是&lt;strong&gt;完整工廠能力的便攜延伸&lt;/strong&gt;：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;攜帶基線&lt;/strong&gt;：將中心工廠中經過驗證的基線，帶到斷網或弱網的現場；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;獨立運行&lt;/strong&gt;：在隔離條件下完成開發、構建與測試；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;成果回傳&lt;/strong&gt;：生成資產包，回傳中心工廠，完成入庫、複用與追蹤；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;快速部署&lt;/strong&gt;：無需長期建設，即插即用，滿足現場研發需求。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;一句話概括：移動軟件工廠讓研發隨時隨地發生，同時與中心保持標準一致。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0912/185946_9FIg_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;場景化小故事&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;隔離環境中的創新&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在一處無法連接外部網絡的現場，團隊依然能夠基於移動工廠的基線順利開發，研發成果在返回中心後快速入庫，形成統一管理。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;弱網條件下的交付&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在網絡條件不足的地區，移動工廠攜帶所需的依賴和製品，避免頻繁的遠程請求。研發節奏不再因網絡波動而停滯。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;跨組織的協作&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在大型項目中，不同組織以中心工廠為標準，各自研發成果通過移動工廠快速接入與同步，協作效率顯著提升。&lt;/p&gt; 
&lt;p&gt;這些故事有一個共同點：&lt;strong&gt;研發不再因環境受限而止步&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0912/190005_a74I_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;雙工廠模式的價值&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;效率不受限&lt;/strong&gt;：研發團隊可以在任何環境中持續迭代，項目進度更有保障。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;標準不走樣&lt;/strong&gt;：中心工廠統一的基線與規則，讓所有研發成果始終符合合規與質量要求。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;擴展不昂貴&lt;/strong&gt;：移動工廠以低成本實現靈活部署，避免重複建設與資源浪費。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;成果可複用&lt;/strong&gt;：通過資產回傳機制，現場研發的成果也能納入中心，成為可追溯、可檢索、可複用的知識資產。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;這不僅僅是一種工具組合，而是一種新的研發組織能力。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;展望：研發的新未來&lt;/h2&gt; 
&lt;p&gt;中心與移動雙工廠模式，正在成為下一代軟件研發體系的關鍵基石。 讓研發在複雜環境中依然順暢，讓創新在任何場景下都能發生。 未來，無論研發場景如何變化，這一模式都將持續釋放價值：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;讓效率與合規不再對立，而是並行；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;讓組織在變化的環境中，依然保持穩健與敏捷；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;讓創新真正隨時隨地、無處不在。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2 style="margin-left:0; margin-right:0; text-align:left"&gt;Gitee DevSecOps 的現代化研發生態&lt;/h2&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;Gitee DevSecOps 是一站式國產化研發與交付平台，集成了代碼託管（Code）、項目協作（Team）、持續集成（CI）、持續部署（CD）、代碼安全（Scan）、數據洞察（Insight）等多項能力，致力於打造具備全生命週期管控能力的現代軟件工廠。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img src="https://static.oschina.net/uploads/space/2025/0523/174619_MpFL_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;平台設計充分考慮關鍵領域行業對安全性、可控性、合規性的極高要求，具備以下核心特徵：&lt;/p&gt; 
&lt;ul style="list-style-type:disc; margin-left:0; margin-right:0"&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;國產化適配與私有化部署能力：全面兼容國產操作系統與基礎設施，支持靈活部署於內網環境，保障數據主權；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;全流程 DevSecOps 管控體系：代碼從提交、審核、構建、掃描、部署到發佈全流程可視、可追溯、安全可控；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;模塊化產品結構：各能力模塊（如 Code、Team、Repo、Pipe、Scan、Insight 等）可靈活組合、漸進集成，適配多樣化團隊與流程要求；&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;深度可觀測與度量體系：內置研發效能度量與數據洞察引擎，支撐管理者宏觀掌控項目態勢與交付健康度。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img alt="162046_MD15_2720166.png" src="https://static.oschina.net/uploads/space/2025/0516/162046_MD15_2720166.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;在多個國家級重大項目與關鍵領域單位落地實踐中，Gitee DevSecOps 已成為構建「自主、可控、高效、安全」的軟件工程體系的重要基石。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-825957ffbed1798ea7b6a37079fd6c99d18.gif" referrerpolicy="no-referrer"&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371860</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371860</guid>
      <pubDate>Fri, 12 Sep 2025 11:00:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>微軟正加大投資訓練自己的人工智能模型</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span&gt;微軟正在進行重大的投資，以增強其用於訓練自主 AI 模型的服務器能力。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="334" src="https://oscimg.oschina.net/oscnet/up-85c73e1b3777c036f3526be295fc3e499f7.png" width="500" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;微軟 AI 負責人穆斯塔法・蘇萊曼在公司內部會議上表示，微軟正在為未來的前沿模型進行 「顯著的投資」。他指出：「我們應該具備內部構建&lt;span&gt;世界級&lt;/span&gt;前沿模型的能力，涵蓋各種規模的模型，但在必要時也應理性地使用其他模型。」 這一戰略顯示出微軟的決心，希望在 AI 領域與 Meta、谷歌及 xAI 等公司並肩競爭。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;據悉，微軟目前正在建設自己的計算集羣。目前，MAI-1-preview 模型僅在 15000 個 H100GPU 上進行訓練，這在整體看來仍然是一個相對較小的集羣。蘇萊曼提到，微軟計劃訓練的模型集羣規模將是目前的 「六到十倍」，以增強其在 AI 研發中的實力。他表示:「還有很多工作要做，但邁出了&lt;span&gt;第一&lt;/span&gt;步，這很好。」&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;在同一場會議上，微軟首席執行官薩提亞・納德拉也表達了他對未來模型能力建設的期待。他強調，微軟將 「&lt;span&gt;絕對&lt;/span&gt;支持多種模型」 的應用，並以 GitHub Copilot 為例，説明該戰略的成功。&lt;/p&gt; 
&lt;p style="color:#242424; margin-left:0; margin-right:0; text-align:left"&gt;此外，微軟還計劃在即將推出的 Microsoft365 中引入 Anthropic 的 AI 模型。據《信息時報》報道，Microsoft365Copilot 將 「部分由 Anthropic 模型驅動」，因為這些模型在 Excel 和 PowerPoint 的性能上超過了 OpenAI。這表明微軟正在積極探索各種合作，以提升其產品的智能化水平。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/371856</link>
      <guid isPermaLink="false">https://www.oschina.net/news/371856</guid>
      <pubDate>Fri, 12 Sep 2025 10:30:00 GMT</pubDate>
      <author>來源: OSCHINA</author>
    </item>
    <item>
      <title>JuiceFS on Windows: 首個 Beta 版的探索與優化之路</title>
      <description>&lt;div class="content"&gt;
                                                                                                                    
                                                                                                                                                    &lt;p&gt;在近期發佈的 JuiceFS 社區版 1.3 和企業版 5.2 中，我們對 Windows 客戶端進行了大量的優化工作。在早期版本中，JuiceFS 也嘗試支持 Windows 平台，但是在使用體驗和穩定性方面存在諸多問題，無法達到一個穩定的可用狀態。&lt;/p&gt; 
&lt;p&gt;去年，我們決定重新對 Windows 客戶端，進行全面改進，力求在提高性能的同時，提供更加穩定和高質量的用戶體驗。在近期的一次雲端渲染場景測試中，我們對 3000 台 Windows 客戶端進行了小文件讀寫性能測試，結果表明性能已能滿足大規模使用需求。我們將在下一篇博客中分享此次測試的詳細情況。&lt;/p&gt; 
&lt;p&gt;在此次歷時一年的優化過程中，由於 Windows 客戶端相關文檔和資料相對有限，我們面臨了諸多挑戰。本文將詳細闡述過程中遇到的關鍵問題、採取的方案以及目前已取得的進展。需要注意的是，目前的版本處於 Beta 階段，即主要功能已完成，但仍需通過持續的測試和用戶反饋進行優化。希望有需求的用戶積極使用，並在社區中提出建議，我們也將積極支持並解決大家的問題。&lt;/p&gt; 
&lt;h2&gt;01 目標是什麼？&lt;/h2&gt; 
&lt;p&gt;對於 Windows 版本，的開發，核心任務是將現有文件系統邏輯遷移到 Windows 平台。接入方式主要有兩種：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;一是通過 Linux 掛載並啓動 Samba 服務，將文件共享給 Windows 使用；這種方式可能帶來額外的協議開銷和配置複雜性，進而影響性能和穩定性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;二是直接在 Windows 上運行客戶端，這種方式更接近 Windows 原生的使用體驗，但歷史版本存在較多 bug。在此次 Beta 版本，中，我們主要針對第二種方式對 Windows 客戶端進行優化。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;我們希望這個版本能夠達到真正可用的狀態，包括確保大多數 Windows 應用程序能夠在 JuiceFS 的文件系統上正常運行，支持數據讀寫操作以及文件管理功能；確保系統具有合格的性能。為此，Beta 版本需要完成的工作可以分為幾個方面：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. 修復工具集&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;工具集是 JuiceFS 使用過程中的重要組成部分，但許多常用命令在 Windows 客戶端上無法正常使用。我們將在下文詳細描述各個主要命令，所進行的優化和改進工作。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. 優化使用體驗&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在過去的版本中，用戶體驗存在許多問題，尤其在性能方面和操作簡便性方面。因此，我們需要着重優化這些方面，使得使用過程更加流暢、簡便。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3. 修復 Bug&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;與身份驗證和權限管理相關的問題，過去的版本在這些方面比較混亂。&lt;/li&gt; 
 &lt;li&gt;與 Windows API 相關的 Bug，特別是錯誤碼返回值和某些邏輯問題。&lt;/li&gt; 
 &lt;li&gt;一些零散的 Bug，需要在 Beta 版本中一併修復。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;02 怎麼做 ？&lt;/h2&gt; 
&lt;p&gt;在這個優化過程中，我們依舊藉助了一個非常重要的組件------WinFsp（Windows File System Proxy），它是一個開源庫，提供了兩個至關重要的特性：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;提供了一個高效的文件系統驅動接口，實現了 Windows 文件系統驅動（FSD, File System Driver）。&lt;/li&gt; 
 &lt;li&gt;還提供了 FUSE（Filesystem in Userspace）接口中的 high-level 接口。FUSE 本身提供了兩套接口------high-level 接口和 low-level 接口。在 JuiceFS 中，我們使用的是 low-level 的接口，但通過做一些路徑轉換，我們已經可以成功對接 FUSE 層。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;在引入 WinFsp 後，Windows 上的讀取流程大致是這樣的。下圖中上半部分代表用戶空間，下半部分代表內核空間。&lt;/p&gt; 
&lt;p&gt;圖中展示的流程是數據從應用程序到驅動程序之間的流轉路徑。在用戶空間中，應用程序執行 I/O 操作（如文件讀寫）會傳遞到內核空間，並流轉到 Windows 內核中的一個核心組件 ------ Windows I/O Manager。該組件負責管理所有的 I/O 操作。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-b57a140b1efff9c20e1868dcd2ae1dbe89a.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;接下來，Windows I/O Manager 會將這些 I/O 操作轉換為 Windows I/O Request Package（IRP），然後將其轉發到文件系統驅動層。此處簡化了部分層級，最終這些請求會傳遞到文件系統驅動層，具體來説就是 WinFsp 文件系統驅動。&lt;/p&gt; 
&lt;p&gt;當文件系統驅動接收到請求時，它會將請求轉發給 WinFsp 的 DLL。這個 DLL 承擔了與 Windows 系統內核數據進行接口轉換的責任。&lt;/p&gt; 
&lt;p&gt;在我們 JuiceFS 的實現中，應用程序通過鏈接 WinFsp DLL 來處理 I/O 請求。當 Windows I/O 請求被傳遞到 DLL 時，WinFsp 會將其轉換為 FUSE 接口，並通過 Windows FUSE 兼容層，進行回調處理。絕大部分的工作集中在這一層，包括 bug 修復和性能優化。&lt;/p&gt; 
&lt;p&gt;處理完這些操作後，最終的請求會交給 JuiceFS 核心 VFS（虛擬文件系統）層，核心 VFS 負責執行具體的文件系統邏輯和請求處理。&lt;/p&gt; 
&lt;h3&gt;還有 4 個困難&lt;/h3&gt; 
&lt;h4&gt;1. Unix vs Windows&lt;/h4&gt; 
&lt;p&gt;儘管 WinFsp 已經幫助我們將 I/O 請求轉換為 FUSE 接口，但我們依然需要面對 Unix 和 Windows 之間的本質性差異。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;權限管理差異&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;例如，Linux 中的文件權限（可讀、可寫、可執行等）和擴展權限（如 ACL）與 Windows 中的權限模型完全不同。Windows 使用 DACL（Discretionary Access Control List）進行權限定義，同時支持權限繼承，這與 Unix 的權限模型有很大差異。因此，雖然 WinFsp 處理了一部分權限的轉換，但我們仍需解決如何將這兩種，權限體系進行有效映射，以便更好地支持 Windows 應用。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;系統特性的差異&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Unix 和 Windows 在文件系統特性方面也存在較多的本質差異。諸如硬鏈接、軟鏈接、掛載方式、目錄長度、字符限制等、文件屬性等，而我們的 JuiceFS 核心文件系統是基於 Unix 的文件系統設計，因此我們需要解決或者繞開這些差異，以確保在 Windows 平台上也能正常運行。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;API 差異&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Unix 和 Windows 在系統 API 上也有許多差異，儘管我們使用了 Go 語言來簡化部分 API 差異的處理，但依然存在一些需要手動解決的情況。例如，獲取 UID 和 GID 等信息，在 Windows 系統中並沒有直接的對應方式。雖然 Go 語言在跨平台處理上做了很多優化，但一些特定的系統 API 仍然需要我們自行處理這些差異，確保系統的兼容性和穩定性。&lt;/p&gt; 
&lt;h4&gt;2. Linux FUSE vs WinFsp FUSE&lt;/h4&gt; 
&lt;p&gt;之前，JuiceFS 一直與 low-level FUSE 接口進行對接，而 WinFsp FUSE 則是一個 high-level FUSE 接口，這兩者存在本質的區別。&lt;/p&gt; 
&lt;p&gt;首先，low-level FUSE 通常使用 inode 作為回調參數，而高級 FUSE 則主要使用路徑作為回調參數，這是兩者的一個顯著差異。然而，差異不僅限於此。&lt;/p&gt; 
&lt;p&gt;儘管 WinFsp 提供了一個 high-level 的 FUSE 回調接口，但其實現邏輯並未完全遵循 Linux 中 libfuse 的實現方式。因此，在使用 WinFsp FUSE 時，我們常常會遇到一種情況：在 Linux 中，某些行為表現得很自然和一致，完全如 FUSE 文檔所述的一致，但在 WinFsp 中，這些行為的回調邏輯卻有所不同。這使得我們需要特別注意並解決這些平台之間的行為差異。&lt;/p&gt; 
&lt;h4&gt;3. 黑盒的 Windows 內核&lt;/h4&gt; 
&lt;p&gt;在開發過程中，我們還需要面對一個，黑盒的 Windows 內核。由於 Windows 內核沒有開源，且相關文檔資料非常有限，調試和觀察 Windows 內核的行為變得較為困難。這使得整個開發過程充滿了不確定性，對於開發人員來説，Windows 內核的工作機制就像一個封閉的黑盒，需要通過不斷的實驗和反向工程來理解和適應。&lt;/p&gt; 
&lt;h4&gt;4. 有限的 FSD 文檔資源&lt;/h4&gt; 
&lt;p&gt;除了 Windows 內核本身的黑盒特性外，關於文件系統驅動（FSD）的文檔資源也非常有限。微軟並未公開完整的 Windows 內核開發文檔，很多 API 僅由第三方整理，官方文檔稀缺。事實上，唯一一本專注於 Windows 文件系統驅動的書籍是 1997 年出版的 《Windows NT File System Internals: A Developer's Guide》。儘管該書中包含大量錯誤（多數是由於不適用於當前版本），直到今天，Windows 文件系統驅動的開發者仍然只能依賴這本書作為參考。這些有限的文檔資源使得我們在排查問題和理解 Windows 文件系統行為時，必須付出更多的時間和精力來收集資料並進行學習。&lt;/p&gt; 
&lt;h2&gt;03 做到了哪些？&lt;/h2&gt; 
&lt;p&gt;接下來，我們將介紹我們在 Beta 版本中進行的具體工作。主要可以分為兩個部分：JuiceFS 端的工作以及 WinFsp 端的工作。&lt;/p&gt; 
&lt;h4&gt;1. JuiceFS 部分&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;工具集&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;首先，工具集在我們日常使用 JuiceFS 時至關重要。使用者在部署之後，都需要藉助工具集來進行性能測試、監控等操作。例如，最基本的性能測試通常會運行 bench 命令。然而，在早期版本中，這個命令在 Windows 平台上無法運行，系統會提示命令不支持 Windows。&lt;/p&gt; 
&lt;p&gt;此外，掛載文件系統後，我們通常需要觀察一些關鍵的性能指標，例如原始數據的延遲、吞吐量、對象存儲的表現，以及分佈式緩存的吞吐量等。然而，在之前的版本中，這些監控功能也無法正常使用，系統會提示無法打開 &lt;code&gt;.control&lt;/code&gt; 文件。&lt;/p&gt; 
&lt;p&gt;JuiceFS 1.3 和，企業版 5.2 中，這些問題都得到了修復。目前，工具集已經從幾乎完全不可用，發展到了基本可用的狀態。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;API 兼容性&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在早期版本中，一些用戶可能會遇到問題，特別是當將 JuiceFS 用作 Git 目錄時。有些用戶發現直接執行 Git 命令時，操作無法正常執行。問題的主要原因在於錯誤碼的處理不兼容 Windows 系統。我們沒有像 Windows 本身那樣處理特定的錯誤碼，導致應用程序依賴於某些特定錯誤碼時無法正常工作。這一部分主要涉及到 API 兼容性，的改進。&lt;/p&gt; 
&lt;p&gt;此外，早期版本中還可能出現掛載狀態異常的情況。例如，掛載過程完成後，系統提示掛載失敗，實際上文件系統已經掛載；或是掛載成功的提示顯示不正確。在當前的 Beta 版本中，我們已經對這些行為進行了修復和優化，包括 Git 命令相關的錯誤。&lt;/p&gt; 
&lt;p&gt;本質上，Linux 和 Windows 在錯誤碼方面的差異是難以完全匹配的，因此實現 100% 的一致性非常困難。儘管如此，我們依然通過持續的反饋和改進，不斷優化這些兼容性問題，力求提供更穩定的 Windows 版本。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;User/permission&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在早期版本中，我們的權限管理還存在一些模糊之處。比如，當用戶 A 設置了某些權限或在其他區域設置了權限時，我們並沒有清晰的預期和統一的處理方式。這導致了一些問題，例如，用戶 A 掛載了文件系統後，他希望同事能夠讀取文件，但當時我們沒有明確的方案來處理這種情況。為了實現文件共享，我們曾使用一個名為 as-root 的參數，將所有用戶權限提升為 root 權限，這種做法雖然能暫時解決問題，但並不理想。&lt;/p&gt; 
&lt;p&gt;而在 Beta 版本中，我們對權限管理進行了優化。重新設計了權限機制，明確了權限管理的目標，確保在 Windows API 的正常工作下，儘可能地與 POSIX 行為保持一致。具體來説，我們在沒有開啓 UID 映射的情況下，確保 Linux 用戶的 UID（如 1001）能夠在 Windows 系統中正確映射和共享，保證相同 UID 的用戶被視為相同的用戶。&lt;/p&gt; 
&lt;p&gt;此外，如果啓用了 UID 映射功能，這是一個更為複雜的話題，但我們也將提供支持。總之，我們的目標是確保 Windows 系統的權限管理儘可能與 POSIX 行為一致，為用戶提供更清晰、可靠的權限控制。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;掛載相關&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在早期版本中，掛載操作只能在前台進行，無法支持後台掛載。這導致了一個問題：如果用戶希望後台掛載文件系統以便共享給其他用戶，他們不得不依賴第三方工具或手動配置。例如，他們可能需要使用微軟自帶的命令行工具來創建系統服務，或者手寫 YAML 配置文件，這樣的過程既繁瑣又容易出錯。&lt;/p&gt; 
&lt;p&gt;在 JuiceFS 1.3 和，企業版 5.2 中，我們解決了這一問題，直接支持了後台掛載。與 Linux 版本一致，用戶可以通過 &lt;code&gt;-d&lt;/code&gt; 參數在社區版中實現後台掛載，而企業版默認支持後台掛載。如果用戶需要前台掛載，則可以使用 &lt;code&gt;-f&lt;/code&gt; 參數。&lt;/p&gt; 
&lt;p&gt;此外，過去的社區版也不支持將同一個文件系統掛載到多個盤符上。現在，在，企業版，中，我們已實現了這一功能，允許用戶將同一個文件系統掛載到多個盤符上。目前，這項功能僅在企業版中可用。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;性能提升&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在早期版本中，存在一個廣泛且嚴重的問題，那就是小文件的讀寫性能非常差，文件屬性的讀取效率也很低。&lt;/p&gt; 
&lt;p&gt;在 JuiceFS 1.3 和，企業版 5.2 版本中，我們進行了大幅優化，顯著提升了小文件的讀寫性能。具體的優化進展可以通過 bench 工具來測試和反饋，該工具能夠提供關於大文件和小文件的讀寫性能指標。&lt;/p&gt; 
&lt;p&gt;以阿里雲上一個 88 核 16 GB 的機器為例，使用阿里雲的 Redis 和自建的 MinIO 進行性能測試。在默認命令行參數下，我們發現小文件的寫入性能接近 1.2 版本，而小文件的讀取性能則有了顯著提升：從 1.2 版本，的每秒 200 個小文件提升至 1.3 版本，的每秒接近 1000 個小文件。&lt;/p&gt; 
&lt;p&gt;此外，文件屬性的讀取性能也得到了優化。過去每秒大約只能獲取 200 個文件屬性，而現在可以達到 4500 次每秒。當然，這一結果受緩存的影響，實際性能可能會有所波動，但總體上優化效果非常顯著。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-e99aa801f3ab93281f35c83c5641a364771.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;另一項重要的優化涉及路徑深度的影響。在 1.2 版本，中，當文件路徑深度增加時，性能急劇下降。例如，在三層目錄的情況下，讀取小文件的性能大幅下降，可能每秒只能讀取幾十個小文件。而在 1.3 版本，中，即使路徑深度達到三層，性能幾乎沒有顯著變化，保持了穩定的表現。這一改進確保了用戶在使用過程中，不會因為創建更多目錄而導致性能下降。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-d3ecb240d7be9c8504d22847a6baebef086.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;其他優化與修復&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;子目錄掛載和文件重命名操作在之前的版本中可能無法正常進行，尤其是在重命名時，常常會遇到一些難以解釋的錯誤，導致操作無法完成。現在，這些問題已經得到了優化和修復。此外，可能還有一些其他因素未在此列出，仍在持續改進中。&lt;/p&gt; 
&lt;h3&gt;2. FSD 相關問題修復與定位&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;POSIX 文件權限映射&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在之前的版本中，我們遇到一個與文件權限映射相關的問題，尤其是 0666 權限設置。根據 POSIX 標準，0666 權限意味着文件對於所有用戶都是可讀可寫的。然而，在 Windows 上，即使我們為某個文件設置了 0666 權限，Everyone 組（即所有用戶）仍然無法進行覆蓋寫操作。&lt;/p&gt; 
&lt;p&gt;這個問題的根本原因在於 WinFsp 目前沒有完全處理這些權限映射。即使在 Windows 上設置了類似的權限，實際上它並不會如 POSIX 系統那樣讓所有用戶都能夠讀取和寫入文件。&lt;/p&gt; 
&lt;p&gt;目前，WinFsp 的版本仍然存在這個問題，我們已經向上遊提交 PR 來修復這個問題，期望能夠使 Windows 上的行為與 POSIX 系統一致，確保在 Windows 平台上也能正確地處理文件權限。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;close to open 一致性&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;默認情況下，JuiceFS 遵循 close-to-open 一致性模型，這意味着在文件關閉之後，下次打開該文件時，用戶能夠看到之前寫入的數據，即使是在不同的機器上也是如此。&lt;/p&gt; 
&lt;p&gt;然而，在 WinFsp 及 Windows 系統中，文件關閉的處理方式與此不同。WinFsp 的默認行為並不會在文件關閉時，異步等待 FUSE 應用程序處理完數據。具體來説，當應用程序調用 CloseHandle 關閉文件句柄時，經由 WinFsp 的 Windows 應用程序並不會阻塞在 CloseHandle 的調用處，而是直接返回，哪怕本地還有未上傳至雲端的數據。這種方式導致了 close-to-open 一致性無法得到保證，甚至本機用戶，在下一次打開此文件時，依舊可能讀取到的是錯誤的文件長度信息。&lt;/p&gt; 
&lt;p&gt;為瞭解決這個問題，我們已經向 WinFsp 的源代碼做出相應調整，以確保在 Windows 平台上也能夠維持 close-to-open 一致性，確保數據的同步和一致性不受影響。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;內核 cache manager 使用&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在 WinFsp 的處理過程中，默認情況下它並未利用內核的 Cache Manager，這直接導致了文件讀取性能較差。Cache Manager 通常會負責緩存和預讀操作，這有助於提升文件系統的讀取效率。然而，在 WinFsp 的默認配置下，Cache Manager 並未得到有效利用，從而影響了系統的性能表現。&lt;/p&gt; 
&lt;p&gt;為瞭解決這一問題，我們在 FSD 層面進行了問題定位和修復，並研究瞭如何在 WinFsp 中正確啓用 Cache Manager。我們的目標是通過正確啓用和配置緩存管理，顯著提升文件讀取性能，並優化系統的整體表現。&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://oscimg.oschina.net/oscnet/up-5e3109a0cee8c5df150e577ae7e76e404f0.png" alt="" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h2&gt;03 未來計劃&lt;/h2&gt; 
&lt;p&gt;我們將持續聚焦 Windows 客戶端的可用性，包括 bug 修復、功能擴展以及對軟鏈接（symlink）的支持；性能提升也是我們不斷努力的方向。隨着使用場景日益複雜，數據規模不斷擴大，且涉及的技術點較為廣泛，Windows 客戶端，的優化將是一個長期過程。&lt;/p&gt; 
&lt;p&gt;此外，許多用戶反饋希望能夠與 AD 域賬號進行集成。在 Windows 環境下，與 AD 域賬號的綁定將是一個非常實用的特性，我們正在研究這一需求。如果大家有相關的建議或希望實現的功能，歡迎與我們討論。&lt;/p&gt; 
&lt;p&gt;最後，感謝大家對 Windows 版本的支持，歡迎大家體驗和反饋，希望我們能為大家提供更好的使用體驗。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;相關閲讀推薦&lt;/strong&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuicefs.com%2Fzh-cn%2Fblog%2Fsolutions%2Fjuicefs-windows--performance-test" target="_blank"&gt;3000 台 JuiceFS Windows 客戶端性能評估&lt;/a&gt; &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuicefs.com%2Fzh-cn%2Fblog%2Fsolutions%2Fbuilding-high-throughput-cache-pool-resilience-with-juicefs" target="_blank"&gt;從資源閒置到彈性高吞吐，JuiceFS 如何構建 70GB/s 吞吐的緩存池？&lt;/a&gt;&lt;/p&gt;
                                                                                    &lt;/div&gt;
                                                                            </description>
      <link>https://my.oschina.net/u/5389802/blog/18691611</link>
      <guid isPermaLink="false">https://my.oschina.net/u/5389802/blog/18691611</guid>
      <pubDate>Fri, 12 Sep 2025 10:15:00 GMT</pubDate>
      <author>原創</author>
    </item>
  </channel>
</rss>
