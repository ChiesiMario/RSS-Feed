<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>oschina - project - 简体中文</title>
    <link>https://www.oschina.net/news/project</link>
    <atom:link href="http://127.0.0.1:30044/oschina/news/project" rel="self" type="application/rss+xml"/>
    <description>已对该 RSS 进行格式化操作：中英字符之间插入空格、使用直角引号、标点符号修正</description>
    <generator>RSSHub</generator>
    <webMaster>contact@rsshub.app (RSSHub)</webMaster>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 11 Jun 2025 21:43:30 GMT</lastBuildDate>
    <ttl>5</ttl>
    <item>
      <title>TimescaleDB 2.20.3 发布，基于 PostgreSQL 的时序数据库</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;TimescaleDB 是一个开源数据库，旨在使 SQL 可扩展到时间序列数据，基于 PostgreSQL 构建的，并打包为 PostgreSQL 扩展程序，提供跨时间和空间的自动分区，以及完整的 SQL 支持。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;TimescaleDB 2.20.3 现已发布，此版本包含自&amp;nbsp;2.20.2&amp;nbsp;版本以来的错误修复。具体更新内容如下：&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong style="color:#000000"&gt;Bug fixes&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftimescale%2Ftimescaledb%2Fpull%2F8107" target="_blank"&gt;#8107&lt;/a&gt;&amp;nbsp;调整需要对索引数据进行全面扫描的资格的 SkipScan 成本。&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftimescale%2Ftimescaledb%2Fpull%2F8211" target="_blank"&gt;#8211&lt;/a&gt;&amp;nbsp;修复启用 chunk skipping&amp;nbsp;时的转储和恢复问题。&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftimescale%2Ftimescaledb%2Fpull%2F8216" target="_blank"&gt;#8216&lt;/a&gt;&amp;nbsp;修复 SkipScan 中丢失的 quals bug。&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftimescale%2Ftimescaledb%2Fpull%2F8230" target="_blank"&gt;#8230&lt;/a&gt;&amp;nbsp;修复当向量化检查不可用时插入压缩数据的问题。&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftimescale%2Ftimescaledb%2Fpull%2F8236" target="_blank"&gt;#8236&lt;/a&gt;&amp;nbsp;修复了 background workers 中的快照处理。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;更新说明：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftimescale%2Ftimescaledb%2Freleases%2Ftag%2F2.20.3" target="_blank"&gt;https://github.com/timescale/timescaledb/releases/tag/2.20.3&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354862/timescaledb-2-20-3-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354862/timescaledb-2-20-3-released</guid>
      <pubDate>Sat, 10 May 2025 09:59:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>多源多表写入、数据格式增强，SeaTunnel 2.3.11 重磅更新来了！</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;h1 style="text-align:center"&gt;&lt;img alt="2.3.11" src="https://oscimg.oschina.net/oscnet//58710d13d425ac4a438e096f3576a207.png" referrerpolicy="no-referrer"&gt;&lt;/h1&gt; 
&lt;p style="color:#333333; text-align:start"&gt;我们很高兴地宣布 Apache SeaTunnel 2.3.11 正式发布！作为一个专注于高性能、可扩展的数据集成平台，SeaTunnel 始终致力于为开发者和数据工程团队提供更强大、更灵活的异构数据处理能力。本次 2.3.11 版本在&lt;strong&gt;稳定性、易用性、连接器生态、数据转换能力以及引擎层面&lt;/strong&gt;都进行了重要增强。无论是支持更多新型数据源与目标端、多表写入、复杂格式支持，还是对关键 Bug 的修复与文档优化，本次更新都体现了社区对用户反馈的快速响应和持续进化的能力。下面让我们一起来详细了解 2.3.11 的亮点内容。&lt;/p&gt; 
&lt;h2&gt;功能更新 Highlights&lt;/h2&gt; 
&lt;h3&gt;新增连接器与功能增强&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;HTTP Sink 支持批量写入&lt;/strong&gt;：实现了 HTTP Sink 的批量写入功能，提高了数据写入效率。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;支持多表写入功能&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;ClickHouse&lt;/strong&gt;：新增支持多表写入功能，提升了数据同步的灵活性。&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;TDengine&lt;/strong&gt;：新增支持多表写入功能，增强了数据处理能力。&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;DataHub&lt;/strong&gt;：新增支持多表写入功能，扩展了数据集成场景。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;GraphQL Connector&lt;/strong&gt;：新增支持 GraphQL 连接器，丰富了数据源类型。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Elasticsearch Source 支持 PIT（Point-in-Time）&lt;/strong&gt;：增强了 Elasticsearch 数据源的查询能力。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;支持 CSV 文件中不同列顺序的提取&lt;/strong&gt;：提升了文件数据处理的灵活性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;新增 Apache Cloudberry 支持&lt;/strong&gt;：扩展了数据源的多样性。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;新增 Aerospike Sink Connector&lt;/strong&gt;：丰富了数据写入目标。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;新增 Helm 测试用例&lt;/strong&gt;：增强了部署测试能力。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;配置与参数优化&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;新增&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;end_timestamp&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;参数&lt;/strong&gt;：在时间戳起始模式中添加了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;end_timestamp&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;参数，增强了数据读取的灵活性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;支持占位符替换&lt;/strong&gt;：HTTP Connector 支持参数占位符替换，提升了配置的灵活性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;新增远程主机验证选项&lt;/strong&gt;：FTP 数据通道新增远程主机验证选项，增强了安全性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;优化变量处理的健壮性&lt;/strong&gt;：改进了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;stop-seatunnel-cluster.sh&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;脚本中变量处理的健壮性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;移除无用配置项&lt;/strong&gt;：删除了 Iceberg Sink 中无用的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;iceberg.table.config&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;配置项。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;优化 JDBC 方言选择逻辑&lt;/strong&gt;：提升了 JDBC 连接器的兼容性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;支持定义 Sink 列类型&lt;/strong&gt;：Transform 支持定义 Sink 列类型，增强了数据转换能力。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;支持 SQL Transform 中的布尔类型&lt;/strong&gt;：提升了 SQL 转换的表达能力。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;支持 Iceberg Source 中的过滤条件&lt;/strong&gt;：增强了数据读取的灵活性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;支持源/汇状态类的 serialVersionUID 检查脚本&lt;/strong&gt;：提升了状态管理的可靠性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;支持 Web UI 的基本认证&lt;/strong&gt;：增强了 Web UI 的安全性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;支持 Rest-API v2 的 HTTPS 协议&lt;/strong&gt;：提升了 API 通信的安全性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;新增任务运行管理页面的异常信息格式化&lt;/strong&gt;：优化了异常信息的展示。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;优化 JDBC 的字符集分割算法&lt;/strong&gt;：提升了数据读取的准确性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;新增&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;row_delimiter&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;选项&lt;/strong&gt;：Text File Sink 新增&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;row_delimiter&lt;/code&gt;选项，增强了文件写入的灵活性。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Bug 修复&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;修复 SeaTunnelClient 无法正常退出的问题：增强了客户端的稳定性。&lt;/li&gt; 
 &lt;li&gt;修复 Oracle-CDC 重命名 DDL 事件缺失列类型的问题：提升了数据同步的准确性。&lt;/li&gt; 
 &lt;li&gt;修复 PostgreSQL Sink 尝试更新唯一键的问题：增强了数据写入的稳定性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;修复 Hive 客户端线程不安全的问题&lt;/strong&gt;：提升了多线程环境下的可靠性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;修复 OceanBase MySQL JDBC Sink 创建语句错误的问题&lt;/strong&gt;：增强了兼容性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;修复 Kafka 枚举器分配分片时的空指针异常&lt;/strong&gt;：提升了数据读取的稳定性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;修复 JSON 输出中科学计数法表示的十进制数问题&lt;/strong&gt;：确保了数据的准确性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;修复 Parquet Int32 转换错误的问题&lt;/strong&gt;：提升了数据类型处理的准确性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;修复 CSV 格式分隔符的问题&lt;/strong&gt;：增强了文件解析的稳定性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;修复 MaxCompute Sink 写入日期小于实际日期的问题&lt;/strong&gt;：确保了数据写入的准确性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;修复 MongoDB 中 Long 类型无法处理科学计数法字符串的问题&lt;/strong&gt;：提升了数据类型兼容性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;修复 Elasticsearch 添加列事件的问题&lt;/strong&gt;：增强了数据同步的稳定性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;修复 SQL Server 在数据库名称包含点时创建表的问题&lt;/strong&gt;：提升了数据库兼容性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;修复 DateUtils 无法解析带本地时区的日期时间字符串的问题&lt;/strong&gt;：确保了时间解析的准确性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;修复 JDBC 默认连接参数无效的问题&lt;/strong&gt;：增强了连接配置的可靠性。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;修复 Redis 写入失败但任务未失败的问题&lt;/strong&gt;：提升了错误处理的准确性。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;文档更新&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;新增中文文档&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;MySQL-CDC Connector&lt;/li&gt; 
   &lt;li&gt;MongoDB-CDC Connector&lt;/li&gt; 
   &lt;li&gt;HiveJdbc Connector&lt;/li&gt; 
   &lt;li&gt;Jira Connector&lt;/li&gt; 
   &lt;li&gt;Cloudberry Connector&lt;/li&gt; 
   &lt;li&gt;GitHub Connector&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;文档格式与内容优化&lt;/strong&gt;：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;修复了 Markdown 格式问题，统一了标题格式，删除了无效的空格和重复内容。&lt;/li&gt; 
   &lt;li&gt;调整了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;explode&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;和&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;trim&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;系列 SQL 函数的描述，提升了文档的准确性。&lt;/li&gt; 
   &lt;li&gt;更新了 Kafka 文档中的 Kerberos 部分，增强了安全配置的指导性。&lt;/li&gt; 
   &lt;li&gt;修复了死链接，提升了文档的可用性。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;致谢贡献者&lt;/h2&gt; 
&lt;p style="color:#333333; text-align:start"&gt;感谢@zhangshenghang 对本次版本发布的指导，以及以下贡献者对本次发布的代码提交、文档撰写、问题反馈做出的宝贵贡献（按用户名排序）：&lt;/p&gt; 
&lt;p style="color:#333333; text-align:start"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet//1dd3b6fcd33c5aac23f32c462da301b7.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; text-align:start"&gt;也感谢所有参与代码审核、功能测试、文档翻译和社区讨论的开发者、用户和贡献者！&lt;/p&gt; 
&lt;h2&gt;获取方式&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;镜像下载：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fseatunnel.apache.org%2Fdownload" target="_blank"&gt;https://seatunnel.apache.org/download&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GitHub Release 页面：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fseatunnel%2Freleases%2Ftag%2F2.3.11" target="_blank"&gt;SeaTunnel 2.3.11&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Maven 依赖更新：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsearch.maven.org%2Fsearch%3Fq%3Dorg.apache.seatunnel" target="_blank"&gt;Maven Central&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354859/apache-seatunnel-2-3-11-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354859/apache-seatunnel-2-3-11-released</guid>
      <pubDate>Sat, 10 May 2025 09:56:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>BootstrapBlazor v9.7.3 已经发布，Bootstrap 样式的 Blazor UI 组件库</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;BootstrapBlazor v9.7.3 已经发布，Bootstrap 样式的 Blazor UI 组件库&lt;/p&gt; 
&lt;p&gt;此版本更新内容包括：&lt;/p&gt; 
&lt;h2&gt;Release 2025-6-11 V9.7.3&lt;/h2&gt; 
&lt;h3&gt;Break changes&lt;/h3&gt; 
&lt;h3&gt;Bugs&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;fix(ErrorLogger): 修复 wasm 模式下报错问题 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6210" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6210&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;revert(Bootstrap): 撤销 &lt;code&gt;Bootstrap&lt;/code&gt; 模块化功能 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6205" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6205&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Extensions&lt;/h3&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;doc(IpLocator): 增加 &lt;code&gt;WebClientOptions&lt;/code&gt; 用法文档 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6208" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6208&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Full Changelog&lt;/strong&gt;: &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fcompare%2Fv9.7.1...v9.7.3" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/compare/v9.7.1...v9.7.3&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;详情查看：&lt;a href="https://gitee.com/LongbowEnterprise/BootstrapBlazor/releases/v9.7.3"&gt;https://gitee.com/LongbowEnterprise/BootstrapBlazor/releases/v9.7.3&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354856/bootstrapblazor-9-7-3-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354856/bootstrapblazor-9-7-3-released</guid>
      <pubDate>Sat, 10 May 2025 09:53:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>Proxy-Go v15.1 发布，sps 的 socks5 和 http 代理，新增域名嗅探功能！</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img src="https://oscimg.oschina.net/oscnet//1d652744cd6db91b4ab8f1e9636e2284.jpg" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;Proxy 是 golang 实现的高性能 http、https、websocket、tcp、udp、socks5 代理服务器，支持正向代理、反向代理、透明代理、内网穿透、TCP/UDP 端口映射、SSH 中转、TLS 加密传输、协议转换、DNS 防污染智能代理、前置 CDN/Nginx 反代、代理连接重定向、API 动态调用上级代理、限速限连接数。提供全平台的命令行版本，友好易用的 Windows&amp;amp;Linux&amp;amp;macOS 控制面板，强大的安卓版。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;strong&gt;更新内容&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="background-color:#ffffff; color:#24292f"&gt;1、&lt;/span&gt;&lt;span style="background-color:#ffffff; color:#1f2328"&gt;sps 添加域名嗅探功能，支持在流量上报中获取客户端请求的域&lt;/span&gt;&lt;span style="background-color:#ffffff; color:#1f2328"&gt;名&lt;/span&gt;。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;更新： v10.7 及以后版本，执行：&lt;code&gt;proxy update&lt;/code&gt;，即可完成快速更新到最新版。&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;特色功能&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;链式代理，程序本身可以作为一级代理，如果设置了上级代理那么可以作为二级代理，乃至 N 级代理。&lt;/li&gt; 
 &lt;li&gt;通讯加密，如果程序不是一级代理，而且上级代理也是本程序，那么可以加密和上级代理之间的通讯，采用底层 tls 高强度加密，安全无特征。&lt;/li&gt; 
 &lt;li&gt;智能 HTTP 代理，HTTPS 代理，SOCKS5 代理，会自动判断访问的网站是否屏蔽，如果被屏蔽那么就会使用上级代理 (前提是配置了上级代理) 访问网站；如果访问的网站没有被屏蔽，为了加速访问，代理会直接访问网站，不使用上级代理。&lt;/li&gt; 
 &lt;li&gt;域名黑白名单，更加自由的控制网站的访问方式。&lt;/li&gt; 
 &lt;li&gt;跨平台性，无论你是 widows，linux，还是 mac，甚至是树莓派，都可以很好的运行 proxy。&lt;/li&gt; 
 &lt;li&gt;多协议支持，支持 HTTP (S)，TCP，UDP，Websocket，SOCKS5 代理。&lt;/li&gt; 
 &lt;li&gt;TCP/UDP 端口转发。&lt;/li&gt; 
 &lt;li&gt;游戏盾，游戏代理，高仿服务器。&lt;/li&gt; 
 &lt;li&gt;内网穿透，P2P 传输，协议支持 TCP 和 UDP，针对 HTTP 的优化穿透。&lt;/li&gt; 
 &lt;li&gt;SSH 中转，HTTP (S)，SOCKS5 代理支持 SSH 中转，上级 Linux 服务器不需要任何服务端，本地一个 proxy 即可开心上网。&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxtaci%2Fkcp-go" target="_blank"&gt;KCP&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;协议支持，HTTP (S)，SOCKS5 代理支持 KCP 协议传输数据，降低延迟，提升浏览体验。&lt;/li&gt; 
 &lt;li&gt;动态选择上级代理，通过外部 API，HTTP (S)，SOCKS5，SPS 代理可以实现基于用户或者 IP 的限速，连接数限制，动态获取上级。&lt;/li&gt; 
 &lt;li&gt;灵活的上级分配，HTTP (S)，SOCKS5，SPS 代理可以通过配置文件实现基于用户或者 IP 的限速，连接数限制，指定上级。&lt;/li&gt; 
 &lt;li&gt;反向代理，支持直接把域名解析到 proxy 监听的 ip，然后 proxy 就会帮你代理访问需要访问的 HTTP (S) 网站。&lt;/li&gt; 
 &lt;li&gt;透明 HTTP (S) 代理，配合 iptables，在网关直接把出去的 80，443 方向的流量转发到 proxy，就能实现无感知的智能路由器代理。&lt;/li&gt; 
 &lt;li&gt;协议转换，可以把已经存在的 HTTP (S) 或 SOCKS5 或 SS 代理转换为一个端口同时支持 HTTP (S) 和 SOCKS5 和 SS 代理，转换后的 SOCKS5 和 SS 代理如果上级是 SOCKS5 代理，那么支持 UDP 功能，同时支持强大的级联认证功能。&lt;/li&gt; 
 &lt;li&gt;自定义底层加密传输，http (s)\sps\socks 代理在 tcp 之上可以通过 tls 标准加密以及 kcp 协议加密 tcp 数据，除此之外还支持在 tls 和 kcp 之后进行自定义加密，也就是说自定义加密和 tls|kcp 是可以联合使用的，内部采用 AES256 加密，使用的时候只需要自己定义一个密码即可。&lt;/li&gt; 
 &lt;li&gt;底层压缩高效传输，http (s)\sps\socks 代理在 tcp 之上可以通过自定义加密和 tls 标准加密以及 kcp 协议加密 tcp 数据，在加密之后还可以对数据进行压缩，也就是说压缩功能和自定义加密和 tls|kcp 是可以联合使用的。&lt;/li&gt; 
 &lt;li&gt;安全的 DNS 代理，可以通过本地的 proxy 提供的 DNS 代理服务器与上级代理加密通讯实现安全防污染的 DNS 查询。&lt;/li&gt; 
 &lt;li&gt;负载均衡，高可用，HTTP (S)\SOCKS5\SPS 代理支持上级负载均衡和高可用，多个上级重复 - P 参数即可。&lt;/li&gt; 
 &lt;li&gt;指定出口 IP，HTTP (S)\SOCKS5\SPS\TCP 代理支持客户端用入口 IP 连接过来的，就用入口 IP 作为出口 IP 访问目标网站的功能。如果入口 IP 是内网 IP，出口 IP 不会使用入口 IP&lt;/li&gt; 
 &lt;li&gt;支持限速，HTTP (S)\SOCKS5\SPS\TCP 代理支持限速。&lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;支持限连接数，HTTP (S)\SOCKS5\SPS\TCP 代理支持限连接数。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt;SOCKS5 代理支持级联认证。&lt;/li&gt; 
 &lt;li&gt;证书参数使用 base64 数据，默认情况下 - C，-K 参数是 crt 证书和 key 文件的路径，如果是 base64:// 开头，那么就认为后面的数据是 base64 编码的，会解码后使用。&lt;/li&gt; 
 &lt;li&gt;支持客户端 IP 黑白名单，更加安全的控制客户端对代理服务的访问，如果黑白名单同时设置，那么只有白名单生效。socks/http (s)/sps/tcp/udp/dns/ 内网穿透 bridge / 内网穿透 tbridge，都支持客户端 IP 黑白名单。&lt;/li&gt; 
 &lt;li&gt;端口范围批量监听，HTTP (S)\SOCKS5\SPS\TCP 代理支持指定端口范围监听，避免启动过多进程，提高性能。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;下载地址:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;a href="https://gitee.com/snail/proxy/" target="_blank"&gt;Gitee&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsnail007%2Fgoproxy" target="_blank"&gt;Github&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354834/proxy-go-15-1-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354834/proxy-go-15-1-released</guid>
      <pubDate>Sat, 10 May 2025 08:30:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>轻量级 ioc 框架 loveqq，支持接口上传 jar 格式的 starter 启动器并支持热加载其中的 bean</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;热加载 starter 启动器代码示例：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;package com.kfyty.demo;

import com.kfyty.loveqq.framework.boot.K;
import com.kfyty.loveqq.framework.boot.context.ContextRefresher;
import com.kfyty.loveqq.framework.core.autoconfig.annotation.Autowired;
import com.kfyty.loveqq.framework.core.autoconfig.annotation.BootApplication;
import com.kfyty.loveqq.framework.core.autoconfig.annotation.Component;
import com.kfyty.loveqq.framework.core.autoconfig.condition.annotation.ConditionalOnMissingBean;
import com.kfyty.loveqq.framework.core.lang.JarIndexClassLoader;
import com.kfyty.loveqq.framework.core.utils.IOC;
import com.kfyty.loveqq.framework.web.core.annotation.GetMapping;
import com.kfyty.loveqq.framework.web.core.annotation.RequestMapping;
import com.kfyty.loveqq.framework.web.core.annotation.RestController;
import com.kfyty.loveqq.framework.web.core.autoconfig.annotation.EnableWebMvc;
import com.kfyty.loveqq.framework.web.core.multipart.MultipartFile;
import lombok.extern.slf4j.Slf4j;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.security.cert.Extension;
import java.util.Collections;
import java.util.UUID;
import java.util.jar.JarFile;

@Slf4j
@EnableWebMvc
@RestController
@BootApplication
@RequestMapping(expose = true)                  // 自动暴露 public 方法为 POST http 接口
public class Main {
    @Autowired
    private Extension extension;

    /**
     * 测试接口
     */
    @GetMapping
    public String sayHello() {
        return extension.getId();
    }

    /**
     * 加载插件
     *
     * @param jar jar 包，启动器
     * @return 上传后的 jar 包绝对路径，卸载启动器时需要提供该返回值
     */
    public String loadPlugin(MultipartFile jar) throws Exception {
        // 保存到本地
        String filePath = "D:\\temp\\jar\\" + UUID.randomUUID().toString().replace("-", "") + "\\" + jar.getOriginalFilename();
        File jarFile = new File(filePath);
        jar.transferTo(jarFile);

        // 添加到框架 ClassLoader
        JarIndexClassLoader classLoader = (JarIndexClassLoader) IOC.class.getClassLoader();
        classLoader.addJarIndex(Collections.singletonList(new JarFile(jarFile)));

        // 刷新上下文
        ContextRefresher.refresh(IOC.getApplicationContext());

        return jarFile.getAbsolutePath();
    }

    /**
     * 卸载启动器
     *
     * @param jarPath {@link #loadPlugin(MultipartFile)} 的返回值
     */
    public String unloadPlugin(String jarPath) throws Exception {
        // 构建 File 对象
        File jarFile = new File(jarPath);

        // 从框架 ClassLoader 移除
        JarIndexClassLoader classLoader = (JarIndexClassLoader) IOC.class.getClassLoader();
        classLoader.removeJarIndex(Collections.singletonList(new JarFile(jarFile)));

        // 刷新上下文
        ContextRefresher.refresh(IOC.getApplicationContext());

        return "ok";
    }

    public static void main(String[] args) throws Exception {
        K.run(Main.class, args);
    }

    /**
     * 默认实现
     */
    @Component
    @ConditionalOnMissingBean(Extension.class)
    public static class DefaultExtension implements Extension {

        @Override
        public String getId() {
            return "default";
        }

        @Override
        public boolean isCritical() {
            return false;
        }

        @Override
        public byte[] getValue() {
            return new byte[0];
        }

        @Override
        public void encode(OutputStream out) throws IOException {

        }
    }

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;然后，新建一个项目，添加如下类：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;package com.kfyty.graal.example;

import com.kfyty.loveqq.framework.core.autoconfig.annotation.Component;

import java.io.IOException;
import java.io.OutputStream;
import java.security.cert.Extension;

/**
 * 动态加载示例实现
 */
@Component
public class ExampleExtension implements Extension {

    @Override
    public String getId() {
        return "example";
    }

    @Override
    public boolean isCritical() {
        return false;
    }

    @Override
    public byte[] getValue() {
        return new byte[0];
    }

    @Override
    public void encode(OutputStream out) throws IOException {

    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;并在&amp;nbsp;k.factories 中添加：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;com.kfyty.loveqq.framework.core.autoconfig.annotation.EnableAutoConfiguration=com.kfyty.graal.example.ExampleExtension
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;然后打成 jar 包，就是一个启动器了。&lt;/p&gt; 
&lt;p&gt;接着启动第一段代码的 main 方法后：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;先访问：http://localhost:8080/sayHello，将返回 default&lt;/li&gt; 
 &lt;li&gt;然后使用 postman 上传启动器 jar 包：http://127.0.0.1:8080/loadPlugin，此时将动态加载上传的启动器，并刷新 ioc 容器&lt;/li&gt; 
 &lt;li&gt;然后再访问：http://localhost:8080/sayHello，将返回 example，原因是加载了新的启动器，条件注解生效，实现类变化了！&lt;/li&gt; 
 &lt;li&gt;然后再访问：http://127.0.0.1:8080/unloadPlugin，将第二步的返回值作为入参传入，此时将卸载启动器，并刷新 ioc 容器&lt;/li&gt; 
 &lt;li&gt;然后再访问：http://localhost:8080/sayHello，将返回 default，原因是卸载了之前加载的启动器，条件注解生效，实现类又变化了！&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;从而实现了启动器的热加载，感兴趣的同学可以试一下。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354807</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354807</guid>
      <pubDate>Sat, 10 May 2025 06:11:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>CrateDB 5.10.8 发布，分布式 SQL 数据库</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;CrateDB 是一个分布式的 SQL 数据库，使得实时存储和分析大量的机器数据变得简单。CrateDB 提供了通常与 NoSQL 数据库相关的可扩展性和灵活性，最小的 CrateDB 集群可以轻松地每秒摄取数万条记录。这些数据可以在整个集群中实时地、临时地、并行地进行查询。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;span style="color:#000000"&gt;CrateDB 5.10.8 现已正式发布，该版本更新内容如下：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;修复了当需要该节点的查询即将在另一个节点上启动时，节点断开连接可能导致内存泄漏的竞争条件。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;修复了&lt;/span&gt;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcratedb.com%2Fdocs%2Fcrate%2Freference%2Fen%2Flatest%2Fappendices%2Frelease-notes%2F5.6.0.html%23version-5-6-0" target="_blank"&gt;&lt;span&gt;&lt;span&gt;版本 5.6.0&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&amp;nbsp;中引入的回归问题，该问题导致在 publisher source table 包含一些 non-active primary shards 时（例如在重启节点时），逻辑复制会停止。建议先升级 subscriber cluster&amp;nbsp;，然后再升级 publisher cluster，以便正确应用此修复。此修复仅在 publisher 和 subscriber clusters 均运行&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcratedb.com%2Fdocs%2Fcrate%2Freference%2Fen%2Flatest%2Fappendices%2Frelease-notes%2F5.10.8.html%23version-5-10-8" target="_blank"&gt;&lt;span&gt;&lt;span&gt;5.10.8&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&amp;nbsp;或更高版本时有效。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;修复&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;了一个问题，即在 &lt;span&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcratedb.com%2Fdocs%2Fcrate%2Freference%2Fen%2Flatest%2Fadmin%2Fsystem-information.html%23sys-repositories" target="_blank"&gt;&lt;span&gt;&lt;span&gt;sys.repositories&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; 表中，&lt;span&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcratedb.com%2Fdocs%2Fcrate%2Freference%2Fen%2Flatest%2Fsql%2Fstatements%2Fcreate-repository.html%23sql-create-repo-azure" target="_blank"&gt;&lt;span&gt;&lt;span&gt;Azure 存储库&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;的&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;sas_token&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;和&lt;span&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;key&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;设置以未屏蔽设置的形式暴露。&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;修复了在构建结果集时抛出导&lt;code&gt;&lt;span&gt;&lt;span&gt;CircuitBreakerException&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;致查询无法完成并返回的问题。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span&gt;修复了导致中断的批量操作无法从&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcratedb.com%2Fdocs%2Fcrate%2Freference%2Fen%2Flatest%2Fadmin%2Fsystem-information.html%23sys-jobs" target="_blank"&gt;&lt;span&gt;&lt;span&gt;sys.jobs&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&amp;nbsp;表中清除的问题。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;详情可&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcratedb.com%2Fdocs%2Fcrate%2Freference%2Fen%2Flatest%2Fappendices%2Frelease-notes%2F5.10.8.html" target="_blank"&gt;查看更新说明&lt;/a&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;。&lt;/span&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354801/cratedb-5-10-8-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354801/cratedb-5-10-8-released</guid>
      <pubDate>Sat, 10 May 2025 05:47:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>TickIt：基于 LLM 的自动化 Oncall 升级</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;div&gt; 
 &lt;div&gt;
  资料来源：
  &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.volcengine.com%2F" target="_blank"&gt;火山引擎-开发者社区&lt;/a&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  软件工程领域顶级学术会议之一 FSE 2025（The ACM International Conference on the Foundations of Software Engineering）预计将在 2025 年 6 月于挪威特隆赫姆举行，字节跳动 ByteBrain 团队的论文《TickIt: Leveraging Large Language Models for Automated Ticket Escalation》成功入选
 &lt;/div&gt; 
 &lt;div&gt;
  （https://arxiv.org/abs/2504.08475）。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  背景
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  在云计算技术蓬勃发展的当下，对于火山引擎来说，工单/Oncall 成为了客户与技术支持&amp;amp;SRE 团队沟通的关键桥梁。随着云服务规模的不断扩大，每日会产生数以千计的 Oncall。这些 Oncall 通常以自然语言的形式，涵盖了使用咨询、功能需求，系统故障等各类复杂问题。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  在传统的手动升级模式下，Oncall 值班人依赖个人经验判断工单是否严重，进而决定是否应该进一步升级。这一过程很依赖值班人员的经验判断，也难以形成统一标准。在过往的案例研究与故障覆盘中，我们发现由于人为疏漏，部分严重问题没有及时升级处理，从而导致了稳定性下降的风险，这也可能对火山引擎的客户满意度造成负面影响。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  如何在面对紧急问题时，及时识别并升级这些 Oncall，成为了提升客户满意度和保障服务质量的关键所在。针对这一问题，我们提出了 TickIt，旨在识别紧急的、报告严重问题的 Oncall，并及时地将其升级给产研/稳定性/故障应急等团队。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  挑战
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  Oncall 问题具有显著的多样性，不同类型的问题需由不同专业背景的人员进行处理。例如，系统故障需要产研&amp;amp; SRE 迅速定位并修复，以减少服务中断时间；客户投诉以及负面情绪则需要客户经理及时安抚客户并解决问题，进而提升客户满意度。进一步来说，Oncall 问题还可进一步细分，例如判断其影响面大小、是否对业务有损等。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  现有的基于特征工程的分析方法，对 Oncall 内容的语义理解能力也较为有限，在实际应用中难以准确识别关键问题，致使重要 Oncall 无法及时升级处理。此外，Oncall 的严重程度也可能在对话过程中被（动态地）逐步澄清，而一些现有方法仅进行一次性分类，忽略了对话中不断更新的信息，无法在线及时识别到需要升级的情况。
 &lt;/div&gt; 
 &lt;div&gt;
  此外，挖掘 Oncall 之间的关系同样重要。当一个问题影响多个客户时，会产生多个相似的 Oncall。如果能及时捕获分析这些 Oncall 之间的关系，有助于更全面地评估问题的严重性与影响范围，而对于产研来说，可以合并这些 Oncall 共同处理，从而更加聚焦地解决问题。
 &lt;/div&gt; 
 &lt;div&gt;
  得益于大语言模型（LLM）在自然语言理解方面的强大能力，我们将其用于辅助理解 Oncall 中的文本信息，但是简单使用 LLM 并不能真正有效的解决上述挑战。在本文中，我们提出了基于 LLM 的 Oncall 分析方法 —— TickIt，该方法可以动态追踪 Oncall 中的信息，还能借助 LLM 深入理解 Oncall 对话的语义内容，及时识别严重问题并升级。同时，TickIt 还能挖掘不同 Oncall 问题现象之间的语义关联，识别潜在的共性问题，实现更高效的问题处理。
 &lt;/div&gt; 
 &lt;div&gt;
  TickIt
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  TickIt 使用了字节的豆包（doubao）模型，旨在借助大语言模型（LLM）强大的自然语言处理能力，实现高效、准确的 Oncall 升级任务。该框架主要包含基于多分类的 Oncall 升级（Multi-class escalation）、重复 Oncall 分析 (Escalation deduplication) 和基于类别引导的微调（Category-guided fine-tuning）这三个核心功能模块。
 &lt;/div&gt; 
 &lt;div&gt;
  基于多分类的 Oncall 升级
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;img src="https://oscimg.oschina.net/oscnet//a38b4514cb694357dbd5a996f44a3ba2.jpg" referrerpolicy="no-referrer"&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  在 Oncall 升级功能中，TickIt 将 Oncall 升级问题视作多分类任务。依据产研&amp;amp; SRE &amp;amp;客户关系的不同职责和关注重点，预先定义了系统故障、客户投诉、资产损失等多种主题类别。而对于普通 Oncall，统一归为 「其他」 类别（无需升级处理）。为使大语言模型更好地完成 Oncall 多分类任务，TickIt 也在 System Prompt 中采用了一些技术来提升其分类表现，例如赋予其任务角色、思维链（COT）等。例如，在判断一个 Oncall 是否属于系统故障时，模型会分析对话内容中提到的故障现象、影响范围等因素，并逐步解释做出该分类决策的原因。这种方式增强了分类结果的逻辑性和可解释性，让人们更易理解和信任模型的判断。此外，TickIt 通过 Few-shot learning，辅助模型理解不同的 Oncall 类别。这些示例特别对易混淆的场景进行了举例示范，从而帮助模型更准确地区分各类 Oncall 的特征。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  TickIt 采用在升级任务中所采用的 System Prompt 格式如下图所示：
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;img src="https://oscimg.oschina.net/oscnet//a83ba70159b8a333261baa7c65e4b07e.jpg" referrerpolicy="no-referrer"&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  重复 Oncall 分析
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;img src="https://oscimg.oschina.net/oscnet//3ded1921020057de79c7cfbcfdbb01bd.jpg" referrerpolicy="no-referrer"&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  重复 Oncall 分析是 TickIt 的另一个功能。当一个 Oncall 被判定需要升级时，TickIt 会对所有处于「Pending」状态的 Oncall 进行检查，以确定是否有类似问题已被升级。为此，TickIt 将 Oncall 在其生命周期中的状态抽象为有限状态机。当客户提交 Oncall 工单并被接受后，该 Oncall 对象进入 「Active」 状态。每当 Oncall 中有新的对话内容时，最新的对话记录会触发 TickIt 启动新一轮分析，此时将其设置为进入 「Analyzing」 状态。TickIt 会运用上述的基于多分类的升级方法，判断当前 Oncall 是否需要升级。如果被分类为 「其他」，则其状态返回 「Active」，等待下一轮对话交互；若被分类为预设好的严重问题类型中，则进入 「Pending」 状态，此时 TickIt 会检查是否有相似的 Oncall 已经被升级。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  在判断 Oncall 是否重复时，TickIt 首先利用大语言模型提取 Oncall 中的问题描述，并借助 doubao-embedding model 将这些问题描述转化为向量表示。通过 consine similarity 来计算向量之间的相似度，并通过一个阈值参数 𝜃 来判断当前 Oncall 与已升级的 Oncall 是否相似（𝜃 通过参数选择实验确认，在本方法中 𝜃=0.88）。对于 TicketIt 判定当前需要升级的 Oncall，如果历史已有升级且相似的 Oncall，则会将当前 Oncall 与对应的历史 Oncall 进行关联，并不再重复告警（仅在关联工单中体现）。同时，TickIt 会将当前 Oncall 与已重复会利用大语言模型重写问题描述，从语义上更全面地归纳该类问题的共性特征，避免因个别 Oncall 工单描述的局限性而导致对问题的理解偏差。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  基于类别引导的微调
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;img src="https://oscimg.oschina.net/oscnet//9a20ab7d348eaba17524ba79b94e8374.jpg" referrerpolicy="no-referrer"&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  类别引导的微调是 TickIt 不断优化准确率的关键机制。当一个 Oncall 按照上述的流程被升级后，TickIt 会发送包含 Oncall 问题摘要的提醒通知卡片。通知卡片中有三个交互按钮，其中两个分别用于点赞或点踩；第三个按钮则是一个 Oncall 跳转链接，点击后可直接跳转到相关的聊天群中。TickIt 则会记录下这些通知卡片的交互行为作为自动升级的反馈数据。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;img src="https://oscimg.oschina.net/oscnet//74dd763b0ca8e181846e69dffbc00e72.jpg" referrerpolicy="no-referrer"&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  在处理这些反馈数据时，TickIt 采用监督微调（SFT）方法，一条典型的 SFT 数据同时包含「对话内容」（Oncall 原始信息），「LLM 思考过程与类别判断」（LLM 的输出）。并按照 TickIt 用于 Oncall 升级任务的 System Prompt 来进行组织成数据集。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  我们对四种反馈动作设置了不同的优先级，以避免同一 Oncall 下存在冲突的反馈。其中直接反馈（点赞、点踩）都会被纳入 SFT 的数据集中。根据我们的观察，相较于正面反馈（点赞）人们通常会在 Oncall 升级错误时更倾向提供一些负面反馈（点踩）。因此，点赞的数量要远小于点踩，也正是出于此原因，我们将点赞的优先级设置为最高（至少有一个人认为该告警是有帮助的）。而对于点踩的反馈来说，通常是认为误告警，因此则将其目标类别设置为「其它」（如无指定类别说明）。在该情况下，由于仅仅知道目标类别，而缺乏 COT 所需要的推理步骤，TickIt 则利用大语言模型完成目标分类下思维链步骤的补充。考虑到思维步骤的多样性，TickIt 会对每个 Oncall 进行三次可能思维链步骤的采样，以丰富数据集。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  通过这种方式，TickIt 能够处理用户反馈，并基于类别引导进行数据增强，最终构建出一个高质量的标注数据集。当积累了足够数量的标注数据后，TickIt 会运用 SFT 方法对模型进行离线优化，然后更新在线模型，从而不断提升模型在升级分类任务上的性能表现。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  TickIt 的实验验证
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  TickIt 在火山引擎的线上进行了全面部署，并取得了显著成效。在此期间，TickIt 共处理了数以万计的 Oncall。在收到的反馈中，约 81% 的反馈表明 TickIt 的升级决策是准确的，这也证明了 TickIt 在实际应用中的有效性和可靠性。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  在进一步的 Oncall 升级性能评估方面，我们还对比了基于小语言模型（SLM）和大语言模型（LLM）的多种方法。小语言模型受限于参数规模，其语言理解能力相较 LLM 有较大差距，且部分非端到端的方法设计在信息传递过程中易出现信息丢失的情况。而基于 LLM 的方法则展现出了良好的准确率。我们通过消融实验验证了不同框架设计对模型性能的影。使用 CoT 的 LLM 方法，准确率和召回率均能达到 82% 左右。在此基础上，结合反思（Reflection）提示，模型能够对自身的推理和输出进行自我纠正，精度略微提升至 82.8%。但由于 CoT 提示已经使模型在得出结论前进行了充分的推理，在反思阶段模型难以获取新的关键信息来进一步提高输出的准确性和洞察力，因此反思技术对实验结果的提升效果并不显著。引入上下文学习（ICL）提示后，模型的召回率大幅提升至 89.2%，尽管精度略有下降，但这一结果充分体现了 LLM 方法强大的泛化能力。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;img src="https://oscimg.oschina.net/oscnet//8b040985eb15eb72e4893c729c56be70.jpg" referrerpolicy="no-referrer"&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  在不同方法设计下的 Oncall 升级比较
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  进一步对 LLM 进行监督微调（SFT）后，模型性能得到了显著提升。以 CoT 提示为例，微调后的召回率从 82.1% 大幅提高到 91.2%，同时保持了 81.8% 的较高精度，F1 分数达到了 86.2%，在所有对比方法中表现最佳。这一结果有力地证明了 SFT 在利用 LLM 能力提升 Oncall 升级任务性能方面的有效性。然而，当 SFT 与其他基于提示的方法（如 Reflection 和 ICL）结合时，性能出现了轻微下降。这可能是因为 SFT 过程中使用了 ICL 中的一些样本或与训练数据分布相似的数据，使得模型在离线微调时已经学习了相应内容，从而在结合使用时产生了一定的冲突。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  在重复 Oncall 分析的实验中，通过调整相似度阈值来探寻最合适的参数，该参数在 0.86 - 0.95 之间时，F1 分数会随着参数的升高先上升后下降。当其设置过高时，严格的相似度约束可能会导致相似问题被错误分类到不同类别，使得评估结果中升级 Oncall 的数量相较于真实情况出现偏差，且该偏差与阈值并非单调关系。此外，基于问题现象的去重方法本身存在一定局限性，对于表现相同但根因不同的 Oncall，可能会出现错误去重的情况。而在针对 Oncall 问题重写的设计中，我们也进行了消融实验。实验结果表明，开启重写功能的 TickIt 相较于未开启该功能的实验设置来说，F1 分数提升了 1.7%。进一步对数据集进行分析，仅保留包含多个关联 Oncall 的升级进行实验，结果显示 TickIt 中的重写设计使得其 F1 分数从 0.706 提升至 0.749，提升幅度达到 6.1%。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;img src="https://oscimg.oschina.net/oscnet//f44da441270f9c510f3972871725a119.jpg" referrerpolicy="no-referrer"&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  重复 Oncall 识别下的参数选择实验
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;img src="https://oscimg.oschina.net/oscnet//685b195201866bfe500add599463e6ee.jpg" referrerpolicy="no-referrer"&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  Ticket 在重复 Oncall 识别下的问题重写消融实验
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  总结与局限性分析
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  TickIt 借助大语言模型实现了高效的自动化 Oncall 升级，为火山引擎带来了显著的效率提升。它从「帮助人们及时介入严重 Oncall」的角度，帮助火山引擎缩短了严重问题的响应时间，使得整体的 MTTR 降低了约 26%，并节约了人力投入成本。同时，TickIt 也得到了使用者的广泛认可。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  然而，TickIt 在实际应用中也暴露出一些局限性。对话中（个性化的）表达方式可能会对大语言模型的判断产生影响。例如，部分使用者可能会夸大问题的影响，导致不必要的升级；而有人也可能对严重问题描述过于平淡，使得 TickIt 未能及时识别出需要升级的情况。此外，如果 Oncall 所关联的云服务产品不够具体，相似的问题描述可能会因涉及不同的云服务产品而具有不同的严重程度，这容易导致大语言模型的误判，进而出现错误的升级。我们在后续的工作中会进一步优化 TickIt 的实际效果，助力火山引擎的稳定性工作。
 &lt;/div&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;div&gt;
  作者团队： 我们来自字节跳动的 ByteBrain 团队，我们致力于用 AI 技术，为各种基础架构与系统（数据库、云原生、大数据、网络等）降本增效、提升稳定性。
 &lt;/div&gt; 
&lt;/div&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354786</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354786</guid>
      <pubDate>Sat, 10 May 2025 03:46:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>界面控件 Kendo UI 在实战应用 —— 打通数据链路，重塑业务效率</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;div&gt;
 &lt;img alt="界面控件 Kendo UI 在制造与供应链行业应用——打通数据链路，重塑业务效率" src="https://oscimg.oschina.net/oscnet//009b6caaeed5461884780886e08eac09.jpg" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;div&gt;
 &amp;nbsp;
&lt;/div&gt; 
&lt;div&gt;
 在制造与供应链行业中，企业通常面对「信息孤岛」、「任务难协同」、「实时数据难可视」等挑战。
 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.evget.com%2Fproduct%2F3438" target="_blank"&gt;Kendo UI&lt;/a&gt;作为一套成熟的 Web 界面控件解决方案，凭借其丰富的组件库与卓越的数据交互能力，已成为制造系统中构建高效、清晰、可操作用户界面的有力工具。
&lt;/div&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.evget.com%2Fproduct%2F3438" target="_blank"&gt;Kendo UI&lt;/a&gt;是带有 jQuery、Angular、React 和 Vue 库的 JavaScript UI 组件的最终集合，无论选择哪种 JavaScript 框架，都可以快速构建高性能响应式 Web 应用程序。通过可自定义的 UI 组件，Kendo UI 可以创建数据丰富的桌面、平板和移动 Web 应用程序。通过响应式的布局、强大的数据绑定、跨浏览器兼容性和即时使用的主题，Kendo UI 将开发时间加快了 50%。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;行业关键痛点与挑战&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;&lt;strong&gt;1. 生产排程混乱，难以动态调整&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;排产表手工维护，任务依赖关系不清晰；&lt;/li&gt; 
 &lt;li&gt;一旦生产任务调整，工序安排需人工同步，极易出错。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;&lt;strong&gt;2. 物料与库存信息分散，数据透明度低&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;原材料、在制品、半成品和成品数据分布于不同系统；&lt;/li&gt; 
 &lt;li&gt;缺乏统一视图，容易导致缺料、积压或发错货。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;&lt;strong&gt;3. 设备利用率、产能瓶颈难以量化&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;设备运转状态、停机时间、工单完成率难以直观掌握；&lt;/li&gt; 
 &lt;li&gt;管理层缺乏实时运营看板支撑决策。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;&lt;strong&gt;4. 多角色协同效率低&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;采购、仓储、生产、质检等部门使用界面风格不一致；&lt;/li&gt; 
 &lt;li&gt;操作体验差，培训成本高，数据流转阻断。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Kendo UI 提供的关键解决方案&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;&lt;strong&gt;1. 精准的生产排程与任务可视化&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Gantt Chart 控件&lt;/strong&gt;：可视化呈现排程计划，支持任务依赖、拖拽重排、进度条展示，帮助排程人员动态优化排产逻辑。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Scheduler 日历控件&lt;/strong&gt;：用于设备维护排程或产线预约，支持多资源并发视图。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;&lt;strong&gt;2. 统一的库存数据展示与交互操作&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Data Grid + 分组 + 分页 + 导出功能&lt;/strong&gt;：构建灵活的物料清单、库存看板，支持层级显示与动态筛选。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;TreeView + PanelBar&lt;/strong&gt;：适用于多仓库、多区域的库存结构导航。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AutoComplete / MultiSelect&lt;/strong&gt;：提升物料录入与搜索效率，防止错录错查。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;&lt;strong&gt;3. 实时可视化的运营监控&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Charts 图表组件（柱状图、折线图、圆环图等）：展&lt;/strong&gt;示各产线设备的稼动率、生产效率、工单完成情况等关键指标。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sparkline 小型趋势图&lt;/strong&gt;：适用于嵌入表格单元格中，轻量快速展现某项指标走势。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ProgressBar + KPI 指标块组合&lt;/strong&gt;：适合构建实时工厂大屏或车间电子看板。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;&lt;strong&gt;4. 多端一致的界面交互体验&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;响应式布局组件（ResponsivePanel / Drawer / TabStrip）：&lt;/strong&gt;适配桌面与平板设备，统一各角色使用体验。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Upload + Dialog + Tooltip + Notification&lt;/strong&gt;：用于上传质检报告、操作提示与反馈，提升人机交互流畅度。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;丰富的表单验证机制&lt;/strong&gt;：确保关键业务数据录入安全、准确。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;应用场景示例&lt;/strong&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;img alt="界面控件 Kendo UI 在制造与供应链行业应用——打通数据链路，重塑业务效率" src="https://oscimg.oschina.net/oscnet//181f48127f99e600559a7997cf56e624.png" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p&gt;&lt;strong&gt;结语&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;在数字化制造转型的背景下，&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.evget.com%2Fproduct%2F3438" target="_blank"&gt;Kendo UI&lt;/a&gt;不仅是「界面构建工具」，更是连接业务流程与数据决策的桥梁。它以高可定制、高性能的前端控件能力，为制造与供应链行业提供了稳定、高效、专业的用户交互解决方案。从排程到仓储、从设备监控到多角色协同，Kendo UI 为企业打造真正可视、可控、可运营的管理界面，助力制造企业迈向数字化高质量发展。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354778</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354778</guid>
      <pubDate>Sat, 10 May 2025 03:25:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>BootstrapBlazor v9.7.1 已经发布，Bootstrap 样式的 Blazor UI 组件库</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;BootstrapBlazor v9.7.1 已经发布，Bootstrap 样式的 Blazor UI 组件库&lt;/p&gt; 
&lt;p&gt;此版本更新内容包括：&lt;/p&gt; 
&lt;h2&gt;Release 2025-6-11 V9.7.1&lt;/h2&gt; 
&lt;h3&gt;Break changes&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;feat(Upload): 重新设计 &lt;code&gt;Upload&lt;/code&gt; 组件支持剪贴板与拖拽 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6049" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6049&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(Select): 重新设计 &lt;code&gt;OnBeforeSelectedItemChange&lt;/code&gt; 与 &lt;code&gt;ShowSwal&lt;/code&gt; 逻辑 &lt;code&gt;ShowSwal&lt;/code&gt; 由原来的默认值 &lt;code&gt;true&lt;/code&gt; 更改为 &lt;code&gt;false&lt;/code&gt; by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6199" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6199&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(Stack): 重命名样式 &lt;code&gt;bb_stack&lt;/code&gt; 为 &lt;code&gt;bb-stack&lt;/code&gt; by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6189" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6189&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Bugs&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;fix(BootstrapBlazorErrorBoundary): 更新 &lt;code&gt;BuildRenderTree&lt;/code&gt; 逻辑增加渲染异常回落机制 by @flyliononline in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6114" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6114&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;fix(Select): 修复 &lt;code&gt;SearchIcon&lt;/code&gt; 在 &lt;code&gt;BI&lt;/code&gt; 主题下不垂直居中问题 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6173" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6173&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;feat(BootstrapBlazorOptions): 增加 &lt;code&gt;ShowErrorLoggerToast&lt;/code&gt; 参数全局配置异常处理是否弹出 &lt;code&gt;Toast&lt;/code&gt; 对话框 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6117" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6117&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(Layout): 重构内部逻辑支持 &lt;code&gt;ErrorLogger&lt;/code&gt; 组件处理子组件或者页面生命周期内异常 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6119" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6119&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(SelectGeneric): 更新重置逻辑 &lt;code&gt;TextConvertToValueCallback&lt;/code&gt; 逻辑更新 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6123" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6123&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(TabItem): 增加 &lt;code&gt;Id&lt;/code&gt; 参数方便二开人员脚本获得标签页 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6124" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6124&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(ImageViewer): 增加 &lt;code&gt;ZoomSpeed&lt;/code&gt; 参数适配超大显示器滚轮控制缩放速度 by @h2ls in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6145" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6145&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(TabItem): 实现 &lt;code&gt;IHandlerException&lt;/code&gt; 接口支持 &lt;code&gt;ErrorLogger&lt;/code&gt; 全局异常处理组件 @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6148" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6148&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(IErrorLogger): 增加生产模式下仅显示异常消息不显示堆栈信息功能 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6152" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6152&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(SelectTree): 增加 &lt;code&gt;CanExpandWhenDisabled&lt;/code&gt; 参数 by @WilliamLiu1997 in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6128" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6128&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(IFrame): 支持 &lt;code&gt;Html&lt;/code&gt; 原生属性标签 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6160" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6160&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(PdfViewer): 新增 &lt;code&gt;PdfViewer&lt;/code&gt; 组件使用浏览器原生 api 预览 &lt;code&gt;Pdf&lt;/code&gt; 不依赖 &lt;code&gt;JavaScript&lt;/code&gt; 库 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6164" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6164&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(PdfViewer): 增加 &lt;code&gt;UseGoogleDocs&lt;/code&gt; 参数使用 &lt;code&gt;Google Docs&lt;/code&gt; 预览 &lt;code&gt;Pdf&lt;/code&gt; 文档 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6170" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6170&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(ImageCorpper): 更新 &lt;code&gt;AspectRatio&lt;/code&gt; 类型为 &lt;code&gt;float&lt;/code&gt; 支持 &lt;code&gt;16:9&lt;/code&gt; 等任意比例 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6175" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6175&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(ImageCropper): 增加 &lt;code&gt;Preview&lt;/code&gt; 参数内置支持预览 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6177" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6177&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(ImageCropper): 增加 &lt;code&gt;OnCropChangedAsync&lt;/code&gt; 回调方法 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6179" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6179&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(Bootstrap): &lt;code&gt;bootstrap&lt;/code&gt; 样式脚本更新到最新 &lt;code&gt;5.3.6&lt;/code&gt; by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6191" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6191&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(BootstrapServiceBase): 更新错误提示信息增加中文提示信息（眼瞎党福音） by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6197" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6197&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(Bootstrap): 支持脚本模块动态加载 BB 组件库步骤可不引用 &lt;code&gt;Bootstrap&lt;/code&gt; &lt;code&gt;JavaScript&lt;/code&gt; 脚本 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6201" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6201&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat(Print): 弹窗打印支持 &lt;code&gt;cavas&lt;/code&gt; 元素 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6203" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6203&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Performance&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;feat(Upload): 使用本地浏览器预览替换上传后用 &lt;code&gt;base64&lt;/code&gt; 数据格式预览 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6157" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6157&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;doc(SelectGeneric): 更新 &lt;code&gt;IsEditable&lt;/code&gt; 参数示例文档 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6135" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6135&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;doc(Bootstrap): 开发模式加载未混淆 &lt;code&gt;Bootstrap&lt;/code&gt; 脚本源码方便调试 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6137" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6137&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;doc(Icon): 重新排序内置图标菜单 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6155" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6155&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;doc(Login): 增加微软登录界面模板 by @h2ls in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6162" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6162&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;doc(PdfViewer): 增加 &lt;code&gt;OnLoaded&lt;/code&gt; 回调方法示例文档 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6166" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6166&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;doc(Upload): 更新 &lt;code&gt;Upload&lt;/code&gt; 组件文档（全部更新移除掉原 upload 网页拆分成 5 个组件独立文档） by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6193" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6193&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;doc(BootstrapBlazorRoot): 更新 &lt;code&gt;BootstrapBlazorRoot&lt;/code&gt; 组件使用文档 by @ArgoZhang in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6195" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6195&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;New Contributors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;@flyliononline made their first contribution in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6114" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6114&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@WilliamLiu1997 made their first contribution in &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fpull%2F6128" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/pull/6128&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Full Changelog&lt;/strong&gt;: &lt;a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdotnetcore%2FBootstrapBlazor%2Fcompare%2Fv9.7.0...v9.7.1" target="_blank"&gt;https://github.com/dotnetcore/BootstrapBlazor/compare/v9.7.0...v9.7.1&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;详情查看：&lt;a href="https://gitee.com/LongbowEnterprise/BootstrapBlazor/releases/v9.7.1"&gt;https://gitee.com/LongbowEnterprise/BootstrapBlazor/releases/v9.7.1&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354776/bootstrapblazor-9-7-1-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354776/bootstrapblazor-9-7-1-released</guid>
      <pubDate>Sat, 10 May 2025 03:08:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>Ant Design 5.26.0 发布，企业级 UI 设计语言和 React 实现</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="color:#000000"&gt;Ant Design 5.26.0&amp;nbsp;现已发布，主要更新内容如下：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Upload&amp;nbsp;&lt;code&gt;progress&lt;/code&gt;&amp;nbsp;属性现在可以覆盖进度条类型。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fant-design%2Fant-design%2Fpull%2F53972" target="_blank"&gt;#53972&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Table&amp;nbsp;&lt;code&gt;expandable&lt;/code&gt;&amp;nbsp;增加&amp;nbsp;&lt;code&gt;expandedRowOffset&lt;/code&gt;&amp;nbsp;以支持展开行的偏移列数。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fant-design%2Fant-design%2Fpull%2F53926" target="_blank"&gt;#53926&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;修复 ConfigProvider 多层嵌套后&amp;nbsp;&lt;code&gt;motion&lt;/code&gt;&amp;nbsp;失效的问题。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fant-design%2Fant-design%2Fpull%2F53902" target="_blank"&gt;#53902&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;修复 Modal hooks 的&amp;nbsp;&lt;code&gt;update&lt;/code&gt;&amp;nbsp;不支持更新函数的问题。&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fant-design%2Fant-design%2Fpull%2F53994" target="_blank"&gt;#53994&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;更新说明：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fant-design%2Fant-design%2Freleases%2Ftag%2F5.26.0" target="_blank"&gt;https://github.com/ant-design/ant-design/releases/tag/5.26.0&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354771/ant-design-5-26-0-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354771/ant-design-5-26-0-released</guid>
      <pubDate>Sat, 10 May 2025 02:54:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>Firefox 139.0.4 发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;Firefox 139.0.4 现已发布，具体更新内容如下：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Fixed&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;修复了在应用程序之间切换或在浏览器中打开某些面板时 Firefox freezing 的问题。（&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1969253" target="_blank"&gt;Bug 1969253&lt;/a&gt;&amp;nbsp;和&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1969346" target="_blank"&gt;Bug 1969346&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;修复了通过页内搜索选择 Firefox 首选项页面中的下拉菜单选项时难以选择的问题。（&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1968949" target="_blank"&gt;Bug 1968949&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;修复了在某些情况下三次单击文本时的各种选择问题。（&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1969100" target="_blank"&gt;Bug 1969100&lt;/a&gt;&amp;nbsp;和&amp;nbsp;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1969432" target="_blank"&gt;Bug 1969432&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;修复了在 Windows 上将图像设置为桌面壁纸时使用不正确的文件名的问题。（&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1969793" target="_blank"&gt;Bug 1969793&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;各种&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mozilla.org%2Fsecurity%2Fadvisories%2Fmfsa2025-47" target="_blank"&gt;安全修复&lt;/a&gt;。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;更新说明：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mozilla.org%2Fen-US%2Ffirefox%2F139.0.4%2Freleasenotes%2F" target="_blank"&gt;https://www.mozilla.org/en-US/firefox/139.0.4/releasenotes/&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354763/firefox-139-0-4-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354763/firefox-139-0-4-released</guid>
      <pubDate>Sat, 10 May 2025 02:38:00 GMT</pubDate>
      <author>来源: OSCHINA</author>
    </item>
    <item>
      <title>界面控件 DevExpress WPF v24.2 新版亮点：报表等组件功能升级</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#333333; text-align:justify"&gt;DevExpress WPF 拥有 120+个控件和库，将帮助您交付满足甚至超出企业需求的高性能业务应用程序。通过 DevExpress WPF 能创建有着强大互动功能的 XAML 基础应用程序，这些应用程序专注于当代客户的需求和构建未来新一代支持触摸的解决方案。&lt;/p&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.evget.com%2Fproduct%2F2346" target="_blank"&gt;DevExpress WPF&lt;/a&gt;控件近期全新发布 v24.2，此版本进一步升级了网格、报表、地图等组件的功能，欢迎下载最新版体验！&lt;/p&gt; 
&lt;div&gt;
 &lt;strong&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.evget.com%2Fproduct%2F2346%2Fdownload" target="_blank"&gt;DevExpress WPF v24.2 正式版下载&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:#ff6600"&gt;&lt;strong&gt;Grid（网格）控件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;多单元格编辑&lt;/p&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;Microsoft Excel 允许您选择多个单元格并通过按 Ctrl + Enter（替代 Enter）应用文本更改，DevExpress WPF Grid 控件中添加了一个类似的特性，允许用户同时对多个单元格应用相同的值。要启用此功能，将&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.devexpress.com%2FWPF%2FDevExpress.Xpf.Grid.DataControlBase.SelectionMode" target="_blank"&gt;GridControl.SelectionMode&lt;/a&gt;设置为 Cell，将&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.devexpress.com%2FWPF%2FDevExpress.Xpf.Grid.TableView.MultiCellEditMode%3Fv%3D24.2" target="_blank"&gt;GridControl.MultiCellEditMode&lt;/a&gt;设置为 FocusedColumn/AllColumns。&lt;/p&gt; 
&lt;div&gt;
 &lt;img alt="DevExpress WPF v24.2 产品图集" src="https://oscimg.oschina.net/oscnet//a590e16b5907853d6c754e5c5bc46b88.gif" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p&gt;&lt;span style="color:#ff6600"&gt;&lt;strong&gt;PDF Viewer&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;获取在页面缩略图面板中选择的页面&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;新的&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.devexpress.com%2FWPF%2FDevExpress.Xpf.PdfViewer.PdfThumbnailsViewerSettings.GetSelectedThumbnailPageIndexes%3Fv%3D24.2" target="_blank"&gt;PdfViewer.GetSelectedThumbnailPageIndexes&lt;/a&gt;方法允许您获得在 Page Thumbnails 面板中所选页面的索引，可以在 DevExpress PDF Viewer 中提取、删除或导出选定的页面。&lt;/p&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;使用&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.devexpress.com%2FWPF%2FDevExpress.Xpf.PdfViewer.PdfViewerControl.ActualThumbnailsViewerSettings%3Fv%3D24.2" target="_blank"&gt;PdfViewerControl.ActualThumbnailsViewer&lt;/a&gt;属性来访问实际的缩略图查看器设置，并调用&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.devexpress.com%2FWPF%2FDevExpress.Xpf.PdfViewer.PdfThumbnailsViewerSettings.GetSelectedThumbnailPageIndexes%3Fv%3D24.2" target="_blank"&gt;GetSelectedThumbnailPageIndexes&lt;/a&gt;方法来获取页面索引。&lt;/p&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;下面的示例将在页面缩略图面板中选择的 PDF 文档的页面保存为图像：&lt;/p&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;&lt;strong&gt;&lt;em&gt;C#&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;using System.Windows.Media.Imaging;
using System.IO;
// ...
private void simpleButton_Click(object sender, RoutedEventArgs e) {
// Obtains the selected page indexes.
var pages = viewer.ActualThumbnailsViewerSettings.GetSelectedThumbnailPageIndexes();
// Saves each page from the collection to an image.
foreach (var i in pages) {
BitmapSource image = viewer.CreateBitmap(i, 1000);
PngBitmapEncoder encoder = new PngBitmapEncoder();
encoder.Frames.Add(BitmapFrame.Create(image));
using (var fileStream = new FileStream($"..\\MyBitmap{i + 1}.bmp", FileMode.Create)) {
encoder.Save(fileStream);
}
}
}&lt;/pre&gt; 
&lt;p&gt;&lt;span style="color:#ff6600"&gt;&lt;strong&gt;Reporting（报表）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;WPF 报表设计器 - 维度符号&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;为了简化报表设计过程，此更新在&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.evget.com%2Fproduct%2F2346" target="_blank"&gt;DevExpress WPF&lt;/a&gt;报表设计器中引入了维度符号。当您调整控件的大小时，设计器会提供精确的视觉反馈，并根据指定的 ReportUnit 属性值（如英寸、厘米或像素）显示维度符号。&lt;/p&gt; 
&lt;div&gt;
 &lt;img alt="DevExpress WPF v24.2 产品图集" src="https://oscimg.oschina.net/oscnet//b1ccdc0e972820bc31dddac86cddd3d6.png" referrerpolicy="no-referrer"&gt;
&lt;/div&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;要管理符号的可见性，请使用&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.devexpress.com%2FXtraReports%2FDevExpress.XtraReports.Configuration.UserDesignerOptions.ShowDimensionNotations%3Fv%3D24.2" target="_blank"&gt;UserDesignerOptions.ShowDimensionNotations&lt;/a&gt;属性。&lt;/p&gt; 
&lt;p&gt;&lt;span style="color:#ff6600"&gt;&lt;strong&gt;地图组件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;支持 Azure 地图&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;DevExpress WPF MapControl 现在可以显示 Microsoft Azure 地图数据，使用 AzureMapDataProvider 提供程序获取光栅图像磁贴。&lt;/p&gt; 
&lt;p style="color:#333333; text-align:justify"&gt;&lt;strong&gt;注意&lt;/strong&gt;：在使用 Azure Maps 时，您必须阅读并理解 Microsoft 的使用条款：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fazure.microsoft.com%2Fen-us%2Fpricing%2Fdetails%2Fazure-maps%2F" target="_blank"&gt;https://azure.microsoft.com/en-us/pricing/details/azure-maps/&lt;/a&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354762</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354762</guid>
      <pubDate>Sat, 10 May 2025 02:36:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>物联网卡管理平台 loTLink V2.2.1【2025 高考版)</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;&lt;span style="background-color:#ffffff; color:#40485b"&gt;基于 SpringBoot、Vue、Mybatis、RabbitMq、Mysql、Redis 等开发的轻量级的物联网综合业务支撑平台。支持物联网卡、物联网模组、卡 + 模组融合管理。提供状态、资费、客户、进销存、合同、订单、续费、充值、诊断、账单等功能。平台可同时接入中国移动、中国电信、中国联通、第三方物联网卡进行统一管理。逐步完善平台，助您快速接入物联网，让万物互联更简单。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;本次主要更新内容：&lt;/strong&gt;&lt;/p&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;1、添加卡冻结状态功能&lt;/p&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;2、对外 API 更新&lt;/p&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;3、&lt;a href="https://gitee.com/sdyunze/iotlink/commit/491c39f0d1f3029b95dacbe9e1bab0556a8f4627" target="_self"&gt;卡列表前端更新&lt;/a&gt;&lt;/p&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:start"&gt;&lt;strong&gt;完整的更新日志&lt;/strong&gt;:&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://gitee.com/sdyunze/iotlink/compare/v2.2.0...v2.2.1"&gt;https://gitee.com/sdyunze/iotlink/compare/v2.2.0...v2.2.1&lt;/a&gt;&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354729/iotlink-2-2-1-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354729/iotlink-2-2-1-released</guid>
      <pubDate>Sat, 10 May 2025 00:15:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>蓝鲸云 LanJing-NaiveVue 单体敏捷开发框架 v1.0.0 发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;v1.0.0 更新内容：&lt;/span&gt;&lt;br&gt; &lt;span style="background-color:#ffffff; color:#333333"&gt;1、全新升级 JDK17；&lt;/span&gt;&lt;br&gt; &lt;span style="background-color:#ffffff; color:#333333"&gt;2、全新设计软件架构；&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;项目介绍&lt;/h4&gt; 
&lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"&gt;基于 SpringBoot3、SpringSecurity、MybatisPlus、Vue3、TypeScript、Vite、NaiveUI、MySQL 等技术栈实现的单体前后端分离后台管理系统；后端基于 Java 语言采用 SpringBoot3、SpringSecurity、MybatisPlus、MySQL 等主流技术栈，前端基于 Vue3、TypeScript、Vite 等技术栈实现，采用&amp;nbsp;NaiveUI 前端 UI 框架，基于目前 Vue 前后端分离主流设计思想，为了实现精细化分工，模块化、组件化开发模式，目前采用完全前后端分离架构实现，前端应用通过 API 调用后端服务的方式实现数据交互；整套系统拥有完善的 RBAC 权限架构体系，权限颗粒度精细至按钮级别，支持多主题切换模式，多端兼容手机客户端、PAD 平板、PC 电脑等终端设备，提升了用户使用体验；同时为了简化开发，本身集成了基础模块，如用户模块、角色模块、菜单模块、部门模块、岗位模块、职级模块、日志模块、租户模块、字典模块、配置模块、行政区划、任务调度等基础功能模块； 为了支持个别企业和开发者多租户功能需求，在设计之初已重点设计并支持多租户功能；为了实现项目快速开发，官方自定义研发了整套代码生成器功能，可以根据单个规范的数据表结构一键生成模块的后端文件代码和前端模块代码；为了高度适配企业、政府和开发者定制化项目的需求，目前单体前后端分离架构发行了多个版本，根据实际需求按需选择即可，软件框架本身已集成了权限架构体系和基础功能模块，极大的提高了开发效率，降低了项目研发成本以及节省了人力。&lt;/p&gt; 
&lt;h4&gt;软件架构&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;采用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;模块化&lt;/code&gt;、&lt;code&gt;插件化&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;设计，实现核心类库按需引入；&lt;/li&gt; 
 &lt;li&gt;采用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;Vue3&lt;/code&gt;、&lt;code&gt;TypeScript&lt;/code&gt;、&lt;code&gt;NaiveUI&lt;/code&gt;、&lt;code&gt;Vite&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;等技术实现完全前后端分离；&lt;/li&gt; 
 &lt;li&gt;采用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;MybatisPlus&lt;/code&gt;、&lt;code&gt;hutool&lt;/code&gt;、&lt;code&gt;fastjson2&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;等主流开源框架；&lt;/li&gt; 
 &lt;li&gt;采用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;Json Web Token&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;、&lt;code&gt;redis&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;缓存技术等令牌生成机制；&lt;/li&gt; 
 &lt;li&gt;采用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;AOP&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;切面技术实现日志及权限访问控制，颗粒度至按钮节点级别；&lt;/li&gt; 
 &lt;li&gt;采用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;Validator&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;验证器，实现&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;DTO&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;参数严格校验；&lt;/li&gt; 
 &lt;li&gt;采用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;SpringDoc&lt;/code&gt;、&lt;code&gt;knife4j&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;实现在线文档查看；&lt;/li&gt; 
 &lt;li&gt;采用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;redis&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;缓存技术记录登录信息，实现在线强制退出机制；&lt;/li&gt; 
 &lt;li&gt;采用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;mybatis-plus-generator&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;实现代码生成器，一键生成模块文件；&lt;/li&gt; 
 &lt;li&gt;采用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;MybatisPlus&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;实现多租户数据隔离策略；&lt;/li&gt; 
 &lt;li&gt;集成&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;阿里短信&lt;/code&gt;、&lt;code&gt;邮件&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;等核心功能，实现业务解耦；&lt;/li&gt; 
 &lt;li&gt;集成&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;在线监控&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;技术，实现应用健康度、性能在线监控；&lt;/li&gt; 
 &lt;li&gt;集成&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;Druid&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;数据库连接池，用于管理数据库连接；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;软件信息&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;软件名称：蓝鲸云单体 Vue3+NaiveUI 版&lt;/li&gt; 
 &lt;li&gt;软件作者：@蓝鲸云团队&lt;/li&gt; 
 &lt;li&gt;软件协议：Apache-2.0&lt;/li&gt; 
 &lt;li&gt;官网网址：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.lanjingcloud.vip" target="_blank"&gt;https://www.lanjingcloud.vip&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;文档网址：&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdocs.naivevue.lanjingcloud.vip" target="_blank"&gt;http://docs.naivevue.lanjingcloud.vip&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;演示地址：&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmanage.naivevue.lanjingcloud.vip" target="_blank"&gt;http://manage.naivevue.lanjingcloud.vip&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;功能模块&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;主控制枱：纯静态页面，提供给有需要的企业、开发者做定制化使用；&lt;/li&gt; 
 &lt;li&gt;用户管理：实现用户数据录入于管理，增强了账户安全；&lt;/li&gt; 
 &lt;li&gt;角色管理：基于 RBAC 权限架构体系，实现角色权限的管理；&lt;/li&gt; 
 &lt;li&gt;菜单管理：用于权限菜单数据管理以及菜单节点权限数据管理；&lt;/li&gt; 
 &lt;li&gt;部门管理：用于管理系统架构体系中的部门数据；&lt;/li&gt; 
 &lt;li&gt;岗位管理：针对用户岗位属性的数据进行统一维护管理；&lt;/li&gt; 
 &lt;li&gt;租户管理：主要对租户入住数据进行管理和租户账号开通管理；&lt;/li&gt; 
 &lt;li&gt;日志管理：用于登录日志、操作日志管理和维护；&lt;/li&gt; 
 &lt;li&gt;参数管理：用于对系统核心参数的定义和管理；&lt;/li&gt; 
 &lt;li&gt;配置管理：用于对动态配置参数的统一管理和设置；&lt;/li&gt; 
 &lt;li&gt;字典管理：用于对字典数据、字典项数据的管理为维护；&lt;/li&gt; 
 &lt;li&gt;通知公告：主要对通知、公告等站外、站内数据进行管理；&lt;/li&gt; 
 &lt;li&gt;行政区划：针对全国行政区划分数据进行管理和维护；&lt;/li&gt; 
 &lt;li&gt;消息管理：对系统消息模块进行查阅和管理；&lt;/li&gt; 
 &lt;li&gt;短信日志：主要用于记录发送短信的日志信息进行管理；&lt;/li&gt; 
 &lt;li&gt;邮件日志：主要用于记录邮件发送记录和数据维护管理；&lt;/li&gt; 
 &lt;li&gt;文件日志：主要用于上传图片、文件等资源附件日志记录进行管理；&lt;/li&gt; 
 &lt;li&gt;文件模板：主要对系统中使用的文件模板进行上传和管理；&lt;/li&gt; 
 &lt;li&gt;邮件模板：主要对系统使用的邮件模板文件进行管理；&lt;/li&gt; 
 &lt;li&gt;短信模板：主要对系统短信模板信息进行录入、维护和管理；&lt;/li&gt; 
 &lt;li&gt;消息模板：主要针对系统业务发送的消息内容进行统一管理；&lt;/li&gt; 
 &lt;li&gt;系统设置：针对系统的常规配置数据进行可视化管理维护；&lt;/li&gt; 
 &lt;li&gt;CMS 管理：主要用于网站相关的数据进行管理的模块；&lt;/li&gt; 
 &lt;li&gt;任务调度：主要用于对定时任务进行定义和统一调度管理；&lt;/li&gt; 
 &lt;li&gt;在线用户：主要用于在线用户的维护以及强制退出登录；&lt;/li&gt; 
 &lt;li&gt;SQL 监控：主要结合 Druid 数据库连接池技术实现数据库 SQL 监控管理；&lt;/li&gt; 
 &lt;li&gt;性能监控：用于监控应用 CPU、内存、服务器、磁盘、虚拟机等信息；&lt;/li&gt; 
 &lt;li&gt;健康监控：主要用于对系统健康度和运行状态、性能进行监控；&lt;/li&gt; 
 &lt;li&gt;缓存监控：主要对系统缓存信息进行统计和监控查阅；&lt;/li&gt; 
 &lt;li&gt;代码生成：官方定制化模板生成器，用于简化单模块开发，提高效率；&lt;/li&gt; 
 &lt;li&gt;接口文档：用于查阅系统接口在线文档，查阅 API 地址、入参、出参等；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;其他版本&lt;/h4&gt; 
&lt;table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; border:none; box-sizing:border-box; color:#40485b; display:block; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Segoe UI&amp;quot;,Helvetica,Arial,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Liberation Sans&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Wenquanyi Micro Hei&amp;quot;,&amp;quot;WenQuanYi Zen Hei&amp;quot;,&amp;quot;ST Heiti&amp;quot;,SimHei,SimSun,&amp;quot;WenQuanYi Zen Hei Sharp&amp;quot;,sans-serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px 0px 16px; max-width:100%; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:856px; word-break:initial; word-spacing:0px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th&gt;版本名称&lt;/th&gt; 
   &lt;th&gt;说明&lt;/th&gt; 
   &lt;th&gt;地址&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;蓝鲸云单体 Thymeleaf+Layui 版&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;基于 SpringBoot3、SpringSecurity、MybatisPlus、Thymeleaf、Layui、MySQL 等技术栈&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/lanjingcloud2/LanJing-Layui"&gt;https://gitee.com/lanjingcloud2/LanJing-Layui&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;蓝鲸云单体 Vue3+ElementPlus 版&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;基于 SpringBoot3、SpringSecurity、MybatisPlus、Vue3、ElementPlus、TypeScript、Vite、MySQL 等技术栈&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/lanjingcloud2/LanJing-EleVue"&gt;https://gitee.com/lanjingcloud2/LanJing-EleVue&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;蓝鲸云单体 Vue3+AntDesign 版&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;基于 SpringBoot3、SpringSecurity、MybatisPlus、Vue3、AntDesign、TypeScript、Vite、MySQL 等技术栈&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/lanjingcloud2/LanJing-AntdVue"&gt;https://gitee.com/lanjingcloud2/LanJing-AntdVue&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;蓝鲸云单体 Vue3+NaiveUI 版&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;基于 SpringBoot3、SpringSecurity、MybatisPlus、Vue3、NaiveUI、TypeScript、Vite、MySQL 等技术栈&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/lanjingcloud2/LanJing-NaiveVue"&gt;https://gitee.com/lanjingcloud2/LanJing-NaiveVue&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;蓝鲸云单体 Vue3+ArcoDesign 版&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;基于 SpringBoot3、SpringSecurity、MybatisPlus、Vue3、ArcoDesign、TypeScript、Vite、MySQL 等技术栈&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/lanjingcloud2/LanJing-ArcoVue"&gt;https://gitee.com/lanjingcloud2/LanJing-ArcoVue&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;蓝鲸云微服务 Nacos+ElementPlus 版&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;基于 SpringCloud、SpringSecurity、OAuth2、Nacos、Seata、MybatisPlus、Vue3、ElementPlus、TypeScript、Vite、MySQL 等技术栈&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/lanjingcloud2/LanJing-Nacos-EleVue"&gt;https://gitee.com/lanjingcloud2/LanJing-Nacos-EleVue&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;蓝鲸云微服务 Nacos+AntDesign 版&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;基于 SpringCloud、SpringSecurity、OAuth2、Nacos、Seata、MybatisPlus、Vue3、AntDesign、TypeScript、Vite、MySQL 等技术栈&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/lanjingcloud2/LanJing-Nacos-AntdVue"&gt;https://gitee.com/lanjingcloud2/LanJing-Nacos-AntdVue&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;蓝鲸云微服务 Nacos+NaiveUI 版&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;基于 SpringCloud、SpringSecurity、OAuth2、Nacos、Seata、MybatisPlus、Vue3、NaiveUI、TypeScript、Vite、MySQL 等技术栈&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/lanjingcloud2/LanJing-Nacos-NaiveVue"&gt;https://gitee.com/lanjingcloud2/LanJing-Nacos-NaiveVue&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;蓝鲸云微服务 Nacos+ArcoDesign 版&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;基于 SpringCloud、SpringSecurity、OAuth2、Nacos、Seata、MybatisPlus、Vue3、ArcoDesign、TypeScript、Vite、MySQL 等技术栈&lt;/td&gt; 
   &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/lanjingcloud2/LanJing-Nacos-ArcoVue"&gt;https://gitee.com/lanjingcloud2/LanJing-Nacos-ArcoVue&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;模块预览&lt;/h4&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img alt="" src="https://oscimg.oschina.net/oscnet/up-3b8e8bd15c83184d6c84cfd6e4172a98c60.png" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;h4&gt;开源协议&lt;/h4&gt; 
   &lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"&gt;开源软件遵循&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://gitee.com/link?target=https%3A%2F%2Fwww.apache.org%2Flicenses%2FLICENSE-2.0.html" target="_blank"&gt;Apache 2.0 协议&lt;/a&gt;。&lt;/p&gt; 
   &lt;h4&gt;版权信息&lt;/h4&gt; 
   &lt;p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"&gt;版权所有 Copyright © 2020~2025&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flanjingcloud.vip" target="_blank"&gt;lanjingcloud.vip&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;All rights reserved。&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354726</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354726</guid>
      <pubDate>Fri, 09 May 2025 22:51:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>DjangoAdmin 敏捷开发框架 Tornado+AntdVue 版本 v2.2.0 发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style="background-color:#ffffff; color:#333333"&gt;v2.2.0 更新内容：&lt;/span&gt;&lt;br&gt; &lt;span style="background-color:#ffffff; color:#333333"&gt;1、全部模块添加、修改新增记录操作人 ID；&lt;/span&gt;&lt;br&gt; &lt;span style="background-color:#ffffff; color:#333333"&gt;2、解决菜单管理模块提交表单报错的问题；&lt;/span&gt;&lt;br&gt; &lt;span style="background-color:#ffffff; color:#333333"&gt;3、菜单保存时新增权限节点的穿梭组件；&lt;/span&gt;&lt;br&gt; &lt;span style="background-color:#ffffff; color:#333333"&gt;4、优化栏目模块图片保存的功能；&lt;/span&gt;&lt;br&gt; &lt;span style="background-color:#ffffff; color:#333333"&gt;5、升级图标选择组件，简化了自定义标签；&lt;/span&gt;&lt;br&gt; &lt;span style="background-color:#ffffff; color:#333333"&gt;6、网站设置模块新增服务类，优化代码结构；&lt;/span&gt;&lt;br&gt; &lt;span style="background-color:#ffffff; color:#333333"&gt;7、修复近期用户反馈的 BUG；&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;div&gt; 
         &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span style="background-color:#ffffff; color:#40485b"&gt;一款 Python 语言基于 Tornado、Vue3、AntDesign、MySQL 等框架精心打造的一款模块化、高性能、企业级的敏捷开发框架，本着简化开发、提升开发效率的初衷触发，框架自研了一套个性化的组件，实现了可插拔的组件式开发方式：单图上传、多图上传等一系列个性化、轻量级的组件，是一款真正意义上实现组件化开发的敏捷开发框架。&lt;/span&gt;&lt;/p&gt; 
         &lt;h2&gt;软件信息&lt;/h2&gt; 
         &lt;ul&gt; 
          &lt;li&gt;软件名称：DjangoAdmin 敏捷开发框架 Tornado+AntdVue 版本&lt;/li&gt; 
          &lt;li&gt;官网网址：&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.djangoadmin.cn" target="_blank"&gt;https://www.djangoadmin.cn&lt;/a&gt;&lt;/li&gt; 
          &lt;li&gt;文档网址：&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdocs.tornado.antdvue.djangoadmin.cn" target="_blank"&gt;http://docs.tornado.antdvue.djangoadmin.cn&lt;/a&gt;&lt;/li&gt; 
          &lt;li&gt;演示地址：&lt;a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmanage.tornado.antdvue.djangoadmin.cn" target="_blank"&gt;http://manage.tornado.antdvue.djangoadmin.cn&lt;/a&gt;&lt;/li&gt; 
         &lt;/ul&gt; 
         &lt;h2&gt;版本说明&lt;/h2&gt; 
         &lt;table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; border:none; box-sizing:border-box; color:#40485b; display:block; font-family:-apple-system,BlinkMacSystemFont,&amp;quot;Segoe UI&amp;quot;,Helvetica,Arial,&amp;quot;Apple Color Emoji&amp;quot;,&amp;quot;Segoe UI Emoji&amp;quot;,&amp;quot;Segoe UI Symbol&amp;quot;,&amp;quot;Liberation Sans&amp;quot;,&amp;quot;PingFang SC&amp;quot;,&amp;quot;Microsoft YaHei&amp;quot;,&amp;quot;Hiragino Sans GB&amp;quot;,&amp;quot;Wenquanyi Micro Hei&amp;quot;,&amp;quot;WenQuanYi Zen Hei&amp;quot;,&amp;quot;ST Heiti&amp;quot;,SimHei,SimSun,&amp;quot;WenQuanYi Zen Hei Sharp&amp;quot;,sans-serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px 0px 16px; max-width:100%; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:635px; word-break:initial; word-spacing:0px"&gt; 
          &lt;tbody&gt; 
           &lt;tr&gt; 
            &lt;th&gt;版本名称&lt;/th&gt; 
            &lt;th&gt;版本说明&lt;/th&gt; 
            &lt;th&gt;版本地址&lt;/th&gt; 
           &lt;/tr&gt; 
          &lt;/tbody&gt; 
          &lt;tbody&gt; 
           &lt;tr&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;Django+Layui 混编版&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;采用 Django、Layui 等框架研发&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/djangoadmin/DjangoAdmin_Django_Layui"&gt;https://gitee.com/djangoadmin/DjangoAdmin_Django_Layui&lt;/a&gt;&lt;/td&gt; 
           &lt;/tr&gt; 
           &lt;tr&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;Flask+Layui 混编版&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;采用 Flask、Layui 等框架研发&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/djangoadmin/DjangoAdmin_Flask_Layui"&gt;https://gitee.com/djangoadmin/DjangoAdmin_Flask_Layui&lt;/a&gt;&lt;/td&gt; 
           &lt;/tr&gt; 
           &lt;tr&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;FastAPI+Layui 混编版&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;采用 FastAPI、Layui 等框架研发&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/djangoadmin/DjangoAdmin_Fastapi_Layui"&gt;https://gitee.com/djangoadmin/DjangoAdmin_Fastapi_Layui&lt;/a&gt;&lt;/td&gt; 
           &lt;/tr&gt; 
           &lt;tr&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;Tornado+Layui 混编版&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;采用 Tornado、Layui 等框架研发&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/djangoadmin/DjangoAdmin_Tornado_Layui"&gt;https://gitee.com/djangoadmin/DjangoAdmin_Tornado_Layui&lt;/a&gt;&lt;/td&gt; 
           &lt;/tr&gt; 
           &lt;tr&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;Django+EleVue 前后端分离版&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;采用 Django、Vue2.x、ElementUI 等框架研发前后端分离版本&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/djangoadmin/DjangoAdmin_Django_EleVue"&gt;https://gitee.com/djangoadmin/DjangoAdmin_Django_EleVue&lt;/a&gt;&lt;/td&gt; 
           &lt;/tr&gt; 
           &lt;tr&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;Flask+EleVue 前后端分离版&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;采用 Flask、Vue2.x、ElementUI 等框架研发前后端分离版本&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/djangoadmin/DjangoAdmin_Flask_EleVue"&gt;https://gitee.com/djangoadmin/DjangoAdmin_Flask_EleVue&lt;/a&gt;&lt;/td&gt; 
           &lt;/tr&gt; 
           &lt;tr&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;FastAPI+EleVue 前后端分离版&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;采用 FastAPI、Vue2.x、ElementUI 等框架研发前后端分离版本&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/djangoadmin/DjangoAdmin_Fastapi_EleVue"&gt;https://gitee.com/djangoadmin/DjangoAdmin_Fastapi_EleVue&lt;/a&gt;&lt;/td&gt; 
           &lt;/tr&gt; 
           &lt;tr&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;Tornado+EleVue 前后端分离版&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;采用 Tornado、Vue2.x、ElementUI 等框架研发前后端分离版本&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/djangoadmin/DjangoAdmin_Tornado_EleVue"&gt;https://gitee.com/djangoadmin/DjangoAdmin_Tornado_EleVue&lt;/a&gt;&lt;/td&gt; 
           &lt;/tr&gt; 
           &lt;tr&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;Django+AntdVue 前后端分离版&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;采用 Django、Vue3.x、AntDesign 等框架研发前后端分离版本&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/djangoadmin/DjangoAdmin_Django_AntdVue"&gt;https://gitee.com/djangoadmin/DjangoAdmin_Django_AntdVue&lt;/a&gt;&lt;/td&gt; 
           &lt;/tr&gt; 
           &lt;tr&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;Flask+AntdVue 前后端分离版&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;采用 Flask、Vue3.x、AntDesign 等框架研发前后端分离版本&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/djangoadmin/DjangoAdmin_Flask_AntdVue"&gt;https://gitee.com/djangoadmin/DjangoAdmin_Flask_AntdVue&lt;/a&gt;&lt;/td&gt; 
           &lt;/tr&gt; 
           &lt;tr&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;FastAPI+AntdVue 前后端分离版&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;采用 FastAPI、Vue3.x、AntDesign 等框架研发前后端分离版本&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/djangoadmin/DjangoAdmin_Fastapi_AntdVue"&gt;https://gitee.com/djangoadmin/DjangoAdmin_Fastapi_AntdVue&lt;/a&gt;&lt;/td&gt; 
           &lt;/tr&gt; 
           &lt;tr&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;Tornado+AntdVue 前后端分离版&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;采用 Tornado、Vue、AntDesign 等框架研发前后端分离版本&lt;/td&gt; 
            &lt;td style="border-color:#dfe2e5; border-style:solid; border-width:1px"&gt;&lt;a href="https://gitee.com/djangoadmin/DjangoAdmin_Tornado_AntdVue"&gt;https://gitee.com/djangoadmin/DjangoAdmin_Tornado_AntdVue&lt;/a&gt;&lt;/td&gt; 
           &lt;/tr&gt; 
          &lt;/tbody&gt; 
         &lt;/table&gt; 
         &lt;h2&gt;模块展示&lt;/h2&gt; 
         &lt;p style="margin-left:0; margin-right:0"&gt;&lt;img alt="" height="1080" src="https://oscimg.oschina.net/oscnet/up-7d010e6980e11a2900f552d415e4fb3a6ca.png" width="1920" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354725</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354725</guid>
      <pubDate>Fri, 09 May 2025 22:46:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>🔥飞书钉钉开源替代流程引擎 FlowLong 1.1.10 发布</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:left"&gt;&lt;img height="141" src="https://oscimg.oschina.net/oscnet/up-8f140b87336199abaadd80c20df88f4a1a2.png" width="474" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;开源地址：&lt;span style="color:#ff2941"&gt;https://gitee.com/aizuda/flowlong&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;&lt;span style="color:#ff2941"&gt;&lt;span style="background-color:#ffffff; color:#3f3f3f"&gt;开源地址：&lt;/span&gt;&lt;span style="background-color:#ffffff; color:#ff2941"&gt;https://github.com/aizuda/flowlong&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:0; margin-right:0"&gt;官网文档：https://flowlong.aizuda.com&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p style="color:#505050; margin-left:0; margin-right:0"&gt;支持全流程操作监听，仅 8 张表实现整个流程引擎（更符合中国人的思维模式设计），截至当前近 300 家企业自用登记接入使用。300 多家企业包括，国家计算中心，电信，等国企已上车，你还在等什么呢？&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:center"&gt;&lt;span style="color:#ff2941"&gt;开源登记使用名单如下，企业版用户暂不公开&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:center"&gt;&lt;span style="color:#ff2941"&gt;https://gitee.com/aizuda/flowlong/issues/IB5K4V&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0; margin-right:0; text-align:center"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"&gt;&lt;img height="1359" src="https://oscimg.oschina.net/oscnet/up-43c04bc5fd87315fd12b5c1530a2269d65b.png" width="3119" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"&gt;&lt;img height="1639" src="https://oscimg.oschina.net/oscnet/up-883f09feb283c023c9eb75a4b8ccfe65236.png" width="3095" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;h1&gt;Flowlong 1.1.10 主要亮点&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;feat: 新增流程实例作废方法&lt;/li&gt; 
 &lt;li&gt;feat: 新增任务手动修改指定为参与者方法&lt;/li&gt; 
 &lt;li&gt;feat: 新增流程模型 extendConfig 扩展配置属性&lt;/li&gt; 
 &lt;li&gt;opt: 优化完善任务加签逻辑&lt;/li&gt; 
 &lt;li&gt;opt: 优化条件节点处理器新增错误配置断言&lt;/li&gt; 
 &lt;li&gt;opt: 优化路由节点支持默认无条件路由&lt;/li&gt; 
 &lt;li&gt;opt: 优化并行分支包容分支驳回分支任务自动结束&lt;/li&gt; 
 &lt;li&gt;opt: 优化并行分支修改为条件节点模型&lt;/li&gt; 
 &lt;li&gt;opt: 优化减签逻辑支持监听通知减签参与者&lt;/li&gt; 
 &lt;li&gt;opt: 优化拒绝终止支持传递参数变量&lt;/li&gt; 
 &lt;li&gt;opt: 优化强制完成任务当前任务监听通知&lt;/li&gt; 
 &lt;li&gt;fixed: 修复多次委派未正确归还到首次委派人问题&lt;/li&gt; 
 &lt;li&gt;fixed: 修复驳回票签其它任务未回收问题&lt;/li&gt; 
 &lt;li&gt;fixed: 修复 FlwTask.putAllVariable 变量合并 BUG&lt;/li&gt; 
 &lt;li&gt;fixed: 修复驳回父节点可能不存在情况&lt;/li&gt; 
&lt;/ul&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354699/flowlong-1-1-10-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354699/flowlong-1-1-10-released</guid>
      <pubDate>Fri, 09 May 2025 14:20:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>基于 KubeSphere 平台快速搭建单节点向量数据库 Milvus</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;pre&gt;title: 基于 KubeSphere 平台快速搭建单节点向量数据库 Milvus🔥
date: 2025-6-10
categories:
  - Milvus
tags:
  - Milvus
  - KubeSphere
sticky: 1
&lt;/pre&gt; 
&lt;h2&gt;&lt;span&gt;KubeSphere 是什么&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;KubeSphere 是一个在 Kubernetes 之上构建的、以应用为中心的多租户容器平台，完全开源，由社区驱动与开发 1&lt;/span&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Fv3.3%2Fintroduction%2Fwhat-is-kubesphere%2F" target="_blank"&gt;&lt;span&gt;2&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fv3-2.docs.kubesphere.io%2Fzh%2F" target="_blank"&gt;&lt;span&gt;4&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;。它提供全栈的 IT 自动化运维能力，旨在简化企业的 DevOps 工作流，并帮助企业快速构建强大且功能丰富的容器云平台。功能强大、易用性高的开源 Kubernetes 容器云 PaaS 平台，能够帮助企业快速构建、管理和运维云原生应用，提升 DevOps 效率，降低运维复杂度，适用于各类规模的企业和团队。&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;如何快速通过可视化界面搭建项目数据库 Milvus&lt;/span&gt;&lt;/h2&gt; 
&lt;blockquote&gt;
 &lt;span&gt;采用 K8s 平台，可以通过镜像网站：&lt;/span&gt;
 &lt;span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocker.aityp.com%2F" target="_blank"&gt;https://docker.aityp.com/&lt;/a&gt;&lt;/span&gt;
 &lt;span&gt; 下载必须的镜像，etcd、milvus、minio。使用时需要确定下载镜像对应宿主机处理器的版本进行下载不然无法成功运行镜像容器。&lt;/span&gt; 
 &lt;p&gt;&lt;span&gt;&lt;img src="https://oscimg.oschina.net/oscnet//c754d0ca9fdc8a050815a6137811fdf9.png" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;本次搭建的宿主机处理器为 amd 架构因此下载时需要筛选对应的架构版本镜像下载&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;&lt;img src="https://oscimg.oschina.net/oscnet//591be48c48ba52898104243fc8d3e713.png" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;部署 etcd 中间件&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;本次采用 etcd 国内镜像地址：swr.cn-north-4.myhuaweicloud.com/ddn-k8s/registry.k8s.io/etcd:3.5.5-0&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;&lt;img src="https://oscimg.oschina.net/oscnet//bd887c8668f3812cbbcb0d5de70e1b2a.png" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;需要对启动命令进行专门配置：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;span&gt;/usr/local/bin/etcd&lt;span style="color:#8d8df0"&gt;,--name&lt;/span&gt;&lt;span style="color:#b8bfc6"&gt;=&lt;/span&gt;etcd-0&lt;span style="color:#8d8df0"&gt;,--data-dir&lt;/span&gt;&lt;span style="color:#b8bfc6"&gt;=&lt;/span&gt;/var/lib/etcd&lt;span style="color:#8d8df0"&gt;,--listen-client-urls&lt;/span&gt;&lt;span style="color:#b8bfc6"&gt;=&lt;/span&gt;http://0.0.0.0:2379&lt;span style="color:#8d8df0"&gt;,--advertise-client-urls&lt;/span&gt;&lt;span style="color:#b8bfc6"&gt;=&lt;/span&gt;http://dev-etcd-shanghai.dev-shanghai.svc.cluster.local:2379&lt;/span&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;span&gt;对上述指令进行详细解释：&lt;/span&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;/usr/local/bin/etcd&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;lt;ul style="margin-left:0; margin-right:0"&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;这是 etcd 可执行程序的路径，表示启动 etcd 服务。&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;&amp;lt;strong style="color:#dedede"&amp;gt;&amp;lt;span&amp;gt;--name=etcd-0&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;

&amp;lt;ul style="margin-left:0; margin-right:0"&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;为当前 etcd 节点指定一个名称，集群内唯一，便于管理和识别节点&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href="https://monchickey.com/post/2023/09/24/etcd-cluster-installation/"&amp;gt;&amp;lt;span&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href="https://www.kancloud.cn/pshizhsysu/middleware/2794721"&amp;gt;&amp;lt;span&amp;gt;3&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;。&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;&amp;lt;strong style="color:#dedede"&amp;gt;&amp;lt;span&amp;gt;--data-dir=/var/lib/etcd&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;

&amp;lt;ul style="margin-left:0; margin-right:0"&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;指定 etcd 数据存储的目录，所有键值数据、集群状态和元数据都保存在这里&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href="https://monchickey.com/post/2023/09/24/etcd-cluster-installation/"&amp;gt;&amp;lt;span&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href="https://www.kancloud.cn/pshizhsysu/middleware/2794721"&amp;gt;&amp;lt;span&amp;gt;3&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;。&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;&amp;lt;strong style="color:#dedede"&amp;gt;&amp;lt;span&amp;gt;--listen-client-urls=&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href="http://0.0.0.0:2379/"&amp;gt;&amp;lt;span&amp;gt;http://0.0.0.0:2379&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;

&amp;lt;ul style="margin-left:0; margin-right:0"&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;指定 etcd 监听客户端请求的地址和端口，&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;code&amp;gt;0.0.0.0&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt; 表示监听所有网络接口，客户端可以通过任意 IP 访问本节点的 2379 端口&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href="https://www.kancloud.cn/pshizhsysu/middleware/2794721"&amp;gt;&amp;lt;span&amp;gt;3&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href="https://cloud.tencent.com/developer/article/1644574"&amp;gt;&amp;lt;span&amp;gt;7&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;。&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;如果不配置，默认只监听本地回环地址 (&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;code&amp;gt;127.0.0.1:2379&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;)，外部客户端无法访问。&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;&amp;lt;strong style="color:#dedede"&amp;gt;&amp;lt;span&amp;gt;--advertise-client-urls=&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href="http://dev-etcd-shanghai.dev-shanghai.svc.cluster.local:2379/"&amp;gt;&amp;lt;span&amp;gt;http://dev-etcd-shanghai.dev-shanghai.svc.cluster.local:2379&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;

&amp;lt;ul style="margin-left:0; margin-right:0"&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;指定 etcd 向集群其他成员和客户端通告的客户端访问地址，通常使用集群内部域名或固定 IP，便于其他节点和客户端正确连接&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href="https://cloud.tencent.com/developer/article/1644574"&amp;gt;&amp;lt;span&amp;gt;7&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href="http://www.zhaowenyu.com/etcd-doc/command/etcd.html"&amp;gt;&amp;lt;span&amp;gt;8&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;。&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;如果不配置，客户端和其他节点可能无法正确连接到本节点，导致集群通信异常&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;配置完成之后直接等待容器启动即可，etcd 服务不需要配置额外的对外暴露&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;部署 minio 中间件&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;采用的国内镜像源地址：swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/minio/minio:RELEASE.2025-04-22T22-12-26Z&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;直接使用默认的容器镜像端口即可&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;&lt;img src="https://oscimg.oschina.net/oscnet//369f954eee41419e62c2558f218ebf46.png" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;启动命令的详细概述&lt;/span&gt;&lt;/h3&gt; 
&lt;h4&gt;&lt;span&gt;命令&lt;/span&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;span&gt;/bin/sh,-c&lt;/span&gt;&lt;/pre&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h4&gt;&lt;span&gt;参数&lt;/span&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;span&gt;minio server /data &lt;span style="color:#7575e4"&gt;--console-address&lt;/span&gt; :9090&lt;/span&gt;&lt;/pre&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;对上述命令的详细解释：&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;在 Kubernetes（k8s）中配置 MinIO 时，常见的启动命令形式如下：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;span&gt;command: [&lt;span style="color:#d26b6b"&gt;"/bin/sh"&lt;/span&gt;, &lt;span style="color:#d26b6b"&gt;"-c"&lt;/span&gt;, &lt;span style="color:#d26b6b"&gt;"minio server /data --console-address :9090"&lt;/span&gt;]&lt;/span&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style="margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;/bin/sh, -c 的作用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;lt;ul style="margin-left:0; margin-right:0"&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;在 Kubernetes YAML 中，&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;code&amp;gt;command&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt; 字段默认是直接执行命令，但如果命令比较复杂（如需要环境变量、管道、重定向等），直接写命令字符串会被解析为单个命令参数，导致执行失败。&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;使用 &amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;code&amp;gt;/bin/sh -c&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt; 可以让 Kubernetes 把后面的字符串整体作为 Shell 脚本执行，支持更多的 Shell 语法和变量替换。&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;&amp;lt;strong style="color:#dedede"&amp;gt;&amp;lt;span&amp;gt;minio server /data --console-address :9090&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;

&amp;lt;ul style="margin-left:0; margin-right:0"&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;&amp;lt;code&amp;gt;/data&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt; 是 MinIO 的数据目录，必须指定。&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;&amp;lt;code&amp;gt;--console-address :9090&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt; 显式指定 Console 端口，确保 Web 管理界面可以通过固定端口访问，便于暴露服务和调试.&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;&lt;img src="https://oscimg.oschina.net/oscnet//c17c8150b20a21c9f3d6a22a17620ef6.png" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;部署 milvus 向量数据库&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;采用的国内镜像源地址：swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/milvusdb/milvus:v2.5.9&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;下述两处端口指定时参考官方文档的 docker-compose 文件，进行配置，尝试过多种镜像都不能出现如上述两个中间件一样的使用默认镜像端口按钮&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;&lt;img src="https://oscimg.oschina.net/oscnet//c7c51b72e1c85d13c6449a2c151f1f77.png" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;配置对应的系统名称和环境变量&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;配置完成需要暴露对外端口&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;&lt;img src="https://oscimg.oschina.net/oscnet//545b48d79ab09b97a9b1a741ebb97da0.png" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;span&gt;命令&lt;/span&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;span&gt;/tini,--&lt;/span&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;span&gt;参数&lt;/span&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;span&gt;milvus,run,standalone&lt;/span&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;span&gt;环境变量 k-v 值&lt;/span&gt;&lt;/h4&gt; 
&lt;table cellspacing="0" style="--tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-ring-color:rgb(59 130 246 / .5); --tw-ring-offset-color:#ffffff; --tw-ring-offset-shadow:0 0 #0000; --tw-ring-offset-width:0px; --tw-ring-shadow:0 0 #0000; --tw-rotate:0; --tw-scale-x:1; --tw-scale-y:1; --tw-scroll-snap-strictness:proximity; --tw-shadow-colored:0 0 #0000; --tw-shadow:0 0 #0000; --tw-skew-x:0; --tw-skew-y:0; --tw-translate-x:0; --tw-translate-y:0; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; break-inside:auto; cursor:text; margin:0px; max-width:100%; overflow:auto; text-align:left; white-space:pre-wrap; width:1140px"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th style="vertical-align:top"&gt;&lt;span&gt;&lt;span&gt;ETCD_ENDPOINTS&lt;/span&gt;&lt;/span&gt;&lt;/th&gt; 
   &lt;th style="vertical-align:top"&gt;&lt;span&gt;&lt;span&gt;dev-etcd-shanghai.dev-shanghai:2379&lt;/span&gt;&lt;/span&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style="border-color:#474d54; border-style:solid; border-width:1px; vertical-align:top"&gt;&lt;span&gt;&lt;span&gt;MINIO_ADDRESS&lt;/span&gt;&lt;/span&gt;&lt;/td&gt; 
   &lt;td style="border-color:#474d54; border-style:solid; border-width:1px; vertical-align:top"&gt;&lt;span&gt;&lt;span&gt;dev-minio-shanghai.dev-shanghai:9000&lt;/span&gt;&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;&lt;span&gt;上述命令的详细解释&lt;/span&gt;&lt;/h3&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;在 Kubernetes (K8s) 中启动 Milvus 时，命令行中常见的启动命令格式是：&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;span&gt;/tini &lt;span style="color:#7575e4"&gt;--&lt;/span&gt; milvus run standalone&lt;/span&gt;&lt;/pre&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;这里各部分的作用如下：&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style="margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;/tini&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;code&gt;/tini&lt;/code&gt;&lt;/span&gt;&lt;span&gt; 是一个小型的 init 进程，常用于容器环境中作为 PID 1 进程，负责正确地处理信号转发和僵尸进程回收，保证容器内的主进程（这里是 Milvus）能优雅启动和退出。它不是 Milvus 自身的命令，而是容器启动时的辅助工具，确保 Milvus 进程管理更稳定。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;--&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;这是一个常见的命令行参数分隔符，告诉 &lt;/span&gt;&lt;span&gt;&lt;code&gt;/tini&lt;/code&gt;&lt;/span&gt;&lt;span&gt; 后面的参数不是给 &lt;/span&gt;&lt;span&gt;&lt;code&gt;/tini&lt;/code&gt;&lt;/span&gt;&lt;span&gt; 本身的，而是传递给后面的程序（即 &lt;/span&gt;&lt;span&gt;&lt;code&gt;milvus&lt;/code&gt;&lt;/span&gt;&lt;span&gt;）的参数。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;code&gt;milvus run standalone&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;这是启动 Milvus 的命令，其中：&lt;/span&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;lt;ul style="margin-left:0; margin-right:0"&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;&amp;lt;code&amp;gt;run&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt; 是 Milvus 的启动命令，表示启动 Milvus 服务。&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p style="margin-left:.5rem; margin-right:0"&amp;gt;&amp;lt;span&amp;gt;&amp;lt;code&amp;gt;standalone&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt; 是指定启动模式，表示以单机模式启动 Milvus，即所有 Milvus 的组件（rootcoord、datacoord、querycoord、indexcoord、proxy 等）都在一个进程或节点上运行，而不是分布式多节点模式。&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;根据 Milvus 源码和启动逻辑分析，&lt;/span&gt;&lt;span&gt;&lt;code&gt;milvus run standalone&lt;/code&gt;&lt;/span&gt;&lt;span&gt; 命令会触发 Milvus 启动所有核心组件，适合开发测试或资源有限的场景。如果不配置或不使用该命令，Milvus 将不会启动任何服务组件，容器内 Milvus 进程不会运行，服务不可用&lt;/span&gt;&lt;span&gt;&lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.tencent.com%2Fdeveloper%2Farticle%2F2407241" target="_blank"&gt;&lt;span&gt;2&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;如果省略 &lt;/span&gt;&lt;span&gt;&lt;code&gt;/tini&lt;/code&gt;&lt;/span&gt;&lt;span&gt;，容器内进程可能无法正确处理信号和回收子进程，导致容器退出时不能优雅关闭 Milvus，可能出现僵尸进程或信号处理异常。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;如果不加 &lt;/span&gt;&lt;span&gt;&lt;code&gt;run standalone&lt;/code&gt;&lt;/span&gt;&lt;span&gt; 参数，Milvus 不知道要启动哪个组件或以何种模式启动，默认不会启动服务，或者会打印帮助信息并退出。&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;配置环境变量不用多说就是需要指定好中间件地址，不然访问不了。为什么配置上述的 url 前缀，我已 etcd 为例进行解释：&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;&lt;img src="https://oscimg.oschina.net/oscnet//33a19fcf5d350da350d15948336bb35f.png" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;完成上述配置就基本完成，最后部署一个 Milvus 可视化管理工具&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;部署 attu&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;部署这个没啥特别需要说明的直接配置镜像然后暴露对外服务进行访问即可&lt;/span&gt;&lt;/p&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;&lt;img src="https://oscimg.oschina.net/oscnet//feb400cc4e5baa1a0b232801621439cc.png" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;部署完成效果展示&lt;/span&gt;&lt;/h2&gt; 
&lt;p style="color:#b8bfc6; text-align:start"&gt;&lt;span&gt;&lt;img src="https://oscimg.oschina.net/oscnet//6119250747a3aa776bf0407722900dc1.png" referrerpolicy="no-referrer"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style="margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;上述配置没有配置数据卷挂在因此不适合生产环境使用&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style="margin-left:.5rem; margin-right:0"&gt;&lt;span&gt;单点节点配置也不是很规范&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354695</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354695</guid>
      <pubDate>Fri, 09 May 2025 13:35:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>JxBrowser 8.8.0 版本发布啦!</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;img height="675" src="https://oscimg.oschina.net/oscnet/up-67a887194ae3de59cf2099e967855d8e741.jpg" width="1200" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;一次调用即可下载文件&lt;/li&gt; 
 &lt;li&gt;精准清除浏览数据&lt;/li&gt; 
 &lt;li&gt;右键点击位置检测&lt;/li&gt; 
 &lt;li&gt;获取元素在视口中的位置&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;🔗 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fteamdev.cn%2Fjxbrowser%2Frelease-notes%2F2025%2Fv8-8-0%2F%3Futm_source%3Doschina%26utm_medium%3Drelease%2520notes%26utm_campaign%3Djx8-8-0" target="_blank"&gt;点击此处了解更多详情&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;🆓 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fteamdev.cn%2Fjxbrowser%2F%3Futm_source%3Doschina%26utm_medium%3Drelease%2520notes%26utm_campaign%3Djx8-8-0tr" target="_blank"&gt;获取 30 天免费试用&lt;/a&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354678</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354678</guid>
      <pubDate>Fri, 09 May 2025 11:09:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>JxBrowser 7.43.2 版本发布啦！</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;&lt;img height="675" src="https://oscimg.oschina.net/oscnet/up-a63593cc61ac215d4a78bfd05549276b9d1.jpg" width="1200" referrerpolicy="no-referrer"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;#&lt;strong&gt;Chromium&lt;/strong&gt; 137.0.7151.69&lt;/li&gt; 
 &lt;li&gt;引入多项质量改进&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;🔗 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fteamdev.cn%2Fjxbrowser%2Frelease-notes%2F2025%2Fv7-43-2%2F%3Futm_source%3Doschina%26utm_medium%3Drelease%2520notes%26utm_campaign%3Djx7-43-2" target="_blank"&gt;点击此处了解更多详情&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;🆓 &lt;a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fteamdev.cn%2Fjxbrowser%2F%3Futm_source%3Doschina%26utm_medium%3Drelease%2520notes%26utm_campaign%3Djx7-43-2tr" target="_blank"&gt;获取 30 天免费试用&lt;/a&gt;。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354677/jxbrowser-7-43-2-released</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354677/jxbrowser-7-43-2-released</guid>
      <pubDate>Fri, 09 May 2025 10:55:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
    <item>
      <title>轻量级 ioc/aop 框架 loveqq，支持 ioc 容器全量热刷新，可通过接口实现实时热更新类实现</title>
      <description>&lt;div class="content"&gt;
                                                                    
                                                        &lt;p&gt;全量刷新上下文代码示例：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-java"&gt;package com.kfyty.demo;

import com.kfyty.loveqq.framework.boot.K;
import com.kfyty.loveqq.framework.boot.context.ContextRefresher;
import com.kfyty.loveqq.framework.core.autoconfig.annotation.Autowired;
import com.kfyty.loveqq.framework.core.autoconfig.annotation.BootApplication;
import com.kfyty.loveqq.framework.core.autoconfig.annotation.Component;
import com.kfyty.loveqq.framework.core.autoconfig.condition.annotation.ConditionalOnProperty;
import com.kfyty.loveqq.framework.core.autoconfig.env.PropertyContext;
import com.kfyty.loveqq.framework.core.utils.IOC;
import com.kfyty.loveqq.framework.web.core.annotation.GetMapping;
import com.kfyty.loveqq.framework.web.core.annotation.RestController;
import com.kfyty.loveqq.framework.web.core.autoconfig.annotation.EnableWebMvc;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@EnableWebMvc
@RestController
@BootApplication
public class Main {

    public static void main(String[] args) throws Exception {
        K.run(Main.class, args);
    }

    @Autowired
    private UserService userService;

    @Autowired
    private PropertyContext propertyContext;

    /**
     * 调用接口方法
     */
    @GetMapping
    public String sayHello() {
        return userService.hello();
    }

    /**
     * 通过可刷新的配置属性切换 UserService 实现类
     *
     * @param impl 条件配置属性
     */
    @GetMapping
    public String switchUserImpl(String impl) {
        // 设置可刷新的属性，刷新上下文时不会丢失
        propertyContext.setRefreshProperty("user.service.impl", impl);

        // 全量刷新上下文，由于类已加载，刷新过程会很快
        ContextRefresher.refresh(IOC.getApplicationContext());

        // 刷新是异步的，这里返回页面提示
        return "ok";
    }

    /**
     * 接口定义
     */
    public interface UserService {
        String hello();
    }

    /**
     * 扩展实现
     */
    @Component
    @ConditionalOnProperty(value = "user.service.impl", havingValue = "extension")
    public static class ExtensionUserService extends DefaultUserService {

        @Override
        public String hello() {
            return "internal";
        }
    }

    /**
     * 默认实现
     */
    @Component
    @ConditionalOnProperty(value = "user.service.impl", havingValue = "default", matchIfMissing = true)
    public static class DefaultUserService implements UserService {

        @Override
        public String hello() {
            return "default";
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;上述代码启动 main 方法后：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;先访问：http://localhost:8080/sayHello，将返回 default&lt;/li&gt; 
 &lt;li&gt;然后访问：http://localhost:8080/switchUserImpl?impl=internal，此时将进行 ioc 容器的全量刷新&lt;/li&gt; 
 &lt;li&gt;然后再访问：http://localhost:8080/sayHello，将返回 internal，原因是条件注解生效，实现类变化了！&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;从而实现了&lt;strong&gt;热更新类实现&lt;/strong&gt;，这是 &lt;strong&gt;@RefreshScope 注解所无法实现&lt;/strong&gt;的效果。&lt;/p&gt; 
&lt;p&gt;并且由于是热更新，所以 ioc 容器的刷新很快完成 (ms 级别)，相比重新启动耗时更短。&lt;/p&gt;
                                                                                &lt;/div&gt;
                                                                            </description>
      <link>https://www.oschina.net/news/354668</link>
      <guid isPermaLink="false">https://www.oschina.net/news/354668</guid>
      <pubDate>Fri, 09 May 2025 10:08:00 GMT</pubDate>
      <author>来源: 投稿</author>
    </item>
  </channel>
</rss>
