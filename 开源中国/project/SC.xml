<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开源中国-软件更新资讯</title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://rsshub.app/oschina/news/project" rel="self" type="application/rss+xml"></atom:link>
        <description>开源中国-软件更新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)</description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>en</language>
        <lastBuildDate>Wed, 24 Apr 2024 14:16:32 GMT</lastBuildDate>
        <ttl>1</ttl>
        <item>
            <title>魔豆文库 moredoc v3.0.0 发布，更加强大的文章模块和爬虫功能，以及 UI 调整</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;img alt=&quot;魔豆文库&quot; src=&quot;https://static.sitestack.cn/projects/moredoc/25025565fbb0a50a52bcb76e9586ac42.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;魔豆文库 MOREDOC，使用 Go 语言开发实现的文库解决方案，&lt;a href=&quot;https://gitee.com/truthhun/DocHub&quot;&gt;dochub&lt;/a&gt;文库的重构版本，支持 office (全部类型)、PDF、TXT、EPUB、MOBI 等多种文档格式的在线阅读浏览，支持&lt;code&gt;无限级分类&lt;/code&gt;、&lt;code&gt;文档批量上传&lt;/code&gt;、&lt;code&gt;文档批量转换&lt;/code&gt;、&lt;code&gt;全文搜索&lt;/code&gt;、&lt;code&gt;云存储&lt;/code&gt;、&lt;code&gt;网络爬虫&lt;/code&gt;、&lt;code&gt;VIP&lt;/code&gt;、&lt;code&gt;手机号登录注册&lt;/code&gt;以及&lt;code&gt;支付宝&lt;/code&gt;和&lt;code&gt;微信支付&lt;/code&gt;等功能，拥有简洁美观的用户视觉和功能体验，以及配套的&lt;a href=&quot;https://gitee.com/mnt-ltd/onedoc&quot;&gt;微信小程序&lt;/a&gt;。&lt;/p&gt; 
&lt;h2&gt;技术栈&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Golang ：gin + gRPC + GORM&lt;/li&gt; 
 &lt;li&gt;Vue.js : nuxt2 + element-ui&lt;/li&gt; 
 &lt;li&gt;Database : MySQL 5.7+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;升级日志&lt;/h2&gt; 
&lt;h3&gt;社区版 (开源版) 升级日志&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;1. 调整文档封面裁剪规则&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;部分文档，如 PPT 文档，封面只裁剪截取了中间部分，导致封面没法完全显示页面内容，因此本次调整了封面裁剪规则。&lt;/p&gt; 
&lt;p&gt;如需修正网站现有文档的封面，可通过以下指令进行封面的修正调整 (不调整也不影响网站程序的正常运转)。&lt;/p&gt; 
&lt;p&gt;windows :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;moredoc&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;exe&lt;/span&gt; &lt;span&gt;fixCover&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Linux/Unix&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&lt;span&gt;./&lt;/span&gt;&lt;span&gt;moredoc fixCover&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2. 支持控制没有文档的分类的显示与隐藏&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;配置入口：管理后台-&amp;gt;系统设置-&amp;gt;展示配置，&lt;strong&gt;隐藏无文档分类&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3. 增加和支持设置网站右下角的固定栏：发布文章、上传文档、联系微信/关注公众号、意见建议、回到顶部&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;配置入口：管理后台-&amp;gt;系统设置-&amp;gt;展示配置&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;4. 支持配置分类描述卡片&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;在新增或编辑分类的时候，添加&lt;code&gt;分类描述&lt;/code&gt;，并&lt;code&gt;启用显示分类&lt;/code&gt;描述即可。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;魔豆文库 moredoc v3.0.0 发布，更加强大的文章模块和爬虫功能，以及 UI 调整 - 图 4&quot; src=&quot;https://static.sitestack.cn/projects/moredoc/202404/17c92707b6fa5c4a.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;5. 丰富和增强网站文章功能模块&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;魔豆文库 moredoc v3.0.0 发布，更加强大的文章模块和爬虫功能，以及 UI 调整 - 图 5&quot; src=&quot;https://static.sitestack.cn/projects/moredoc/202404/17c92756198e7d7e.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;5.1 支持在前台发布文章，以及文章发布权限的控制和审核&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;配置入口：管理后台-&amp;gt;用户管理-&amp;gt;角色管理，点击&lt;code&gt;编辑&lt;/code&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;5.2 增强文章管理，可以在管理后台对文章进行批量删除、批量分类和批量审批&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;5.3 增加文章回收站功能，删除的文章可以在回收站找到，并可以恢复或彻底删除&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;5.4 支持对文章的评论、收藏和分享&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;5.5 支持单独设置文章分类，与文档分类区分和隔离&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;6. 网站底部和文章 UI 布局调整&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;7. 其它 Bug 修复&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;专业版升级日志&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;1. 文章支持全文搜索，可以更准确地搜索文章内容&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. 支持保存外链图片到本地服务器，防止访问失效&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3. 文章采集功能，并支持控制哪些用户组可以使用文章采集功能，并支持对大部分网站页面内容的采集&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;配置入口：管理后台-&amp;gt;用户管理-&amp;gt;角色管理，点击&lt;code&gt;编辑&lt;/code&gt;，启用&lt;code&gt;允许采集文章&lt;/code&gt;。&lt;/p&gt; 
&lt;p&gt;文章采集，有两种模式：智能提取模式和自定义模式：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;智能模式：自动分析网站内容并提取文章内容，适用于文章特征明显的链接。&lt;/li&gt; 
 &lt;li&gt;自定义模式：根据设置的选择器、排除器来选取采集链接的文章内容，适用于对网页技术有点了解的用户使用。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;目前随机选择几个网站的文章内容链接进行测试，微信公众号等自媒体文章的采集效果也是符合预期。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img alt=&quot;魔豆文库 moredoc v3.0.0 发布，更加强大的文章模块和爬虫功能，以及 UI 调整 - 图 7&quot; src=&quot;https://static.sitestack.cn/projects/moredoc/202404/17c92841171e0a38.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;升级方式&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;本次升级，前后端的改动和调整比较大，升级前建议先做备份或直接使用云服务器商提供的快照功能打快照进行备份&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;从 Gitee 下载对应您的服务器系统的最新版本程序：&lt;a href=&quot;https://gitee.com/mnt-ltd/moredoc/releases&quot;&gt;https://gitee.com/mnt-ltd/moredoc/releases&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;更新数据库表结构&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;注意：本次升级，存在数据库表结构变更，请务必执行 syncdb 操作&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;# windows
moredoc.exe syncdb

# Linux/Unix
./moredoc syncdb&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;3. 重启程序。&lt;/p&gt; 
&lt;h2&gt;演示站点&lt;/h2&gt; 
&lt;p&gt;程序新功能体验，一睹为快！&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;网址： &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmoredoc.mnt.ltd&quot; target=&quot;_blank&quot;&gt;https://moredoc.mnt.ltd&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;管理员账号： admin&lt;/li&gt; 
 &lt;li&gt;管理员密码： mnt.ltd&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;演示站点，每天凌晨 1:00 ~ 6:00，每隔一小时重置一次全部数据&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;开源地址&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;魔豆文库 MOREDOC&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Gitee - &lt;a href=&quot;https://gitee.com/mnt-ltd/moredoc&quot;&gt;https://gitee.com/mnt-ltd/moredoc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Github - &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmnt-ltd%2Fmoredoc&quot; target=&quot;_blank&quot;&gt;https://github.com/mnt-ltd/moredoc&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;配套小程序 ONEDOC&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Gitee - &lt;a href=&quot;https://gitee.com/mnt-ltd/onedoc&quot;&gt;https://gitee.com/mnt-ltd/onedoc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Github - &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmnt-ltd%2Fonedoc&quot; target=&quot;_blank&quot;&gt;https://github.com/mnt-ltd/onedoc&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;使用手册&lt;/h2&gt; 
&lt;p&gt;关于魔豆文库安装部署、二次开发等更详细的教程，详见书栈网&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bookstack.cn%2Fbooks%2Fmoredoc&quot; target=&quot;_blank&quot;&gt;《魔豆文库使用手册》&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289274/moredoc-3-0-0-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289274/moredoc-3-0-0-released</guid>
            <pubDate>Wed, 24 Apr 2024 08:21:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>vxe-table 4.6.3 已经发布，vue 表格解决方案</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;vxe-table 4.6.3 已经发布，vue 表格解决方案&lt;/p&gt; 
&lt;p&gt;此版本更新内容包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;table 
  &lt;ul&gt; 
   &lt;li&gt;修复自定义列报错问题&lt;/li&gt; 
   &lt;li&gt;增加参数 area-config.includeFields&lt;/li&gt; 
   &lt;li&gt;增加参数 area-config.excludeFields&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情查看：&lt;a href=&quot;https://gitee.com/xuliangzhan_admin/vxe-table/releases/4.6.3&quot;&gt;https://gitee.com/xuliangzhan_admin/vxe-table/releases/4.6.3&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289267/vxe-table-4-6-3-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289267/vxe-table-4-6-3-released</guid>
            <pubDate>Wed, 24 Apr 2024 07:33:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>🎉 Socket.D v2.4.11（新增 python 实现）</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;h3&gt;Socket.D 协议？&lt;/h3&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;Socket.D 是一个网络应用协议。在微服务、移动应用、物联网等场景，可替代 http、websocket 等。协议详情参考&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsocketd.noear.org%2F&quot; target=&quot;_blank&quot;&gt;《官网介绍》&lt;/a&gt;。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;支持： tcp, udp, ws, kcp 传输。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;目前：java，kotlin，javascript，node.js，python 语言环境可用。go，rust，c/c++，.net 正在开发中。&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;for Java 更新&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;调整，本端会话关闭时，也触发本端的 onClose 事件&lt;/li&gt; 
 &lt;li&gt;优化 ws 连接控制，避免非法恶意空连&lt;/li&gt; 
 &lt;li&gt;优化 socketd-transport-java-kcp 服务端停止处理（添加延时，确保指令发送完成）&lt;/li&gt; 
 &lt;li&gt;优化 socketd-transport-java-tcp 在某些操作系统下空跑可能 cpu 过高的问题&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;for JavaScript/Node.js 更新&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;调整，本端会话关闭时，也触发本端的 onClose 事件&lt;/li&gt; 
 &lt;li&gt;优化 ws 连接控制，避免非法恶意空连&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;for Python 首次发布&lt;/h3&gt; 
&lt;p style=&quot;color:#24292e; text-align:start&quot;&gt;Helloworld 演示&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Server&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span style=&quot;color:#a626a4&quot;&gt;async&lt;/span&gt; &lt;span style=&quot;color:#a626a4&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#4078f2&quot;&gt;main&lt;/span&gt;():
    server = &lt;span style=&quot;color:#a626a4&quot;&gt;await&lt;/span&gt; (SocketD.create_server(&lt;span style=&quot;color:#50a14f&quot;&gt;&quot;sd:ws&quot;&lt;/span&gt;)
                        .listen(EventListener()
                            .do_on_open(&lt;span style=&quot;color:#a626a4&quot;&gt;lambda&lt;/span&gt; s: 
                                &lt;em&gt;#会话打开时&lt;/em&gt;
                                log.info(s.session_id())
                            ).do_on_message(&lt;span style=&quot;color:#a626a4&quot;&gt;lambda&lt;/span&gt; s, m: 
                                &lt;em&gt;#收到任意消息时（方便做统一的日志打印）&lt;/em&gt;
                                log.info(m.data_as_string())
                            ).do_on(&lt;span style=&quot;color:#50a14f&quot;&gt;&quot;/demo&quot;&lt;/span&gt;, &lt;span style=&quot;color:#a626a4&quot;&gt;lambda&lt;/span&gt; s, m: 
                                &lt;em&gt;#收到&quot;/demo&quot;事件的消息时。如果是请求或订阅？则进行签复&lt;/em&gt;
                                (m.is_request() &lt;span style=&quot;color:#a626a4&quot;&gt;or&lt;/span&gt; m.is_subscribe()) &lt;span style=&quot;color:#a626a4&quot;&gt;and&lt;/span&gt; s.reply_end(m, StringEntity(&lt;span style=&quot;color:#50a14f&quot;&gt;&quot;And you too.&quot;&lt;/span&gt;))
                            )).start())
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Client&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span style=&quot;color:#a626a4&quot;&gt;async&lt;/span&gt; &lt;span style=&quot;color:#a626a4&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#4078f2&quot;&gt;main&lt;/span&gt;():
    &lt;em&gt;#打开客户端会话，并监听（用 url 形式打开）&lt;/em&gt;
    session = &lt;span style=&quot;color:#a626a4&quot;&gt;await&lt;/span&gt; (SocketD.create_client(&lt;span style=&quot;color:#50a14f&quot;&gt;&quot;sd🇼🇸//127.0.0.1:8602/?token=1b0VsGusEkddgr3d&quot;&lt;/span&gt;)
                            .&lt;span style=&quot;color:#c18401&quot;&gt;open&lt;/span&gt;())


    entity = StringEntity(&lt;span style=&quot;color:#50a14f&quot;&gt;&quot;Hello wrold!&quot;&lt;/span&gt;).meta_put(&lt;span style=&quot;color:#50a14f&quot;&gt;&quot;sender&quot;&lt;/span&gt;,&lt;span style=&quot;color:#50a14f&quot;&gt;&quot;noear&quot;&lt;/span&gt;)

    &lt;em&gt;#发送&lt;/em&gt;
    session.send(&lt;span style=&quot;color:#50a14f&quot;&gt;&quot;/demo&quot;&lt;/span&gt;, entity)

    &lt;em&gt;#发送并请求（且，等待一个答复。否则超时异常）&lt;/em&gt;
    session.send_and_request(&lt;span style=&quot;color:#50a14f&quot;&gt;&quot;/demo&quot;&lt;/span&gt;, entity).then_reply(&lt;span style=&quot;color:#a626a4&quot;&gt;lambda&lt;/span&gt; reply:
        &lt;em&gt;#打印&lt;/em&gt;
        log.info(reply.data_as_string())
    ).then_error(&lt;span style=&quot;color:#a626a4&quot;&gt;lambda&lt;/span&gt; error:
        log.error(error)
    )


    &lt;em&gt;#发送并订阅（且，接收零个或多个答复流）&lt;/em&gt;
    session.send_and_subscribe(&lt;span style=&quot;color:#50a14f&quot;&gt;&quot;/demo&quot;&lt;/span&gt;, entity).then_reply(&lt;span style=&quot;color:#a626a4&quot;&gt;lambda&lt;/span&gt; reply:
        &lt;em&gt;#打印&lt;/em&gt;
        log.info(reply.data_as_string()) &lt;span style=&quot;color:#a626a4&quot;&gt;or&lt;/span&gt; (reply.is_end() &lt;span style=&quot;color:#a626a4&quot;&gt;and&lt;/span&gt; log.info(&lt;span style=&quot;color:#50a14f&quot;&gt;&quot;the end!&quot;&lt;/span&gt;))
    )&lt;/code&gt;&lt;/pre&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289224/socketd-2-4-11-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289224/socketd-2-4-11-released</guid>
            <pubDate>Wed, 24 Apr 2024 05:08:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>QEMU 9.0 发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;QEMU 9.0 版本现已&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.qemu.org%2F2024%2F04%2F23%2Fqemu-9-0-0%2F&quot; target=&quot;_blank&quot;&gt;推出&lt;/a&gt;，此版本包含来自 220 位作者的 2700 多项&amp;nbsp;commit。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;一些更新亮点包括：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;block：virtio-blk 现在支持多队列，其中单个磁盘的不同队列可以由不同的 I/O 线程处理&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;gdbstub：各种改进，例如在用户模式下捕获系统调用、支持 fork-follow 模式以及支持 siginfo:read&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;memory：在某些情况下，现在可以使用多个线程同时处理内存后端的预分配&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;migration：支持「mapped-ram」功能，实现更高效的虚拟机快照、改进对 zero-page 检测的支持以及对 VFIO 的 checkpoint-restart&amp;nbsp;支持&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;ARM：为 ECV (Enhanced Counter Virtualization)、NV (Nested Virtualization) 和 NV2 (Enhanced Nested Virtualization) 提供架构特性支持&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;ARM：对 B-L475E-IOT01A IoT 节点、mp3-an536（MPS3 开发板 + AN536 固件）和 raspi4b（Raspberry Pi 4 Model B）的支持&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;ARM：为 Freescale i.MX6、Allwinner R40、Banana Pi、npcm7xxx 和 virt 板提供了更全面的 IO、磁盘、USB、SPI、网卡和定时器支持&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;HPPA：大量错误修复和 SeaBIOS-hppa 固件更新至版本 16&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;LoongArch：KVM 加速支持，包括 LSX/LASX 向量扩展&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;RISC-V：针对 Zacas、amocas、RVA22 配置文件、Zaamo、Zalrsc、Ztso 等的 ISA/扩展支持&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;RISC-V：对 RISC-V 虚拟机的 SMBIOS 支持，对 SRAT、SLIT、AIA、PLIC 的 ACPI 支持和更新的 RHCT table 支持，以及大量修复&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;s390x：对 CVDG、CVB、CVBY 和 CVBG 指令的仿真支持，以及 LAE (Load Address Extended)&amp;nbsp;仿真的修复&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.qemu.org%2Fdownload%2F%23source&quot; target=&quot;_blank&quot;&gt;下载地址&lt;/a&gt;&lt;span style=&quot;color:#333333&quot;&gt;&amp;nbsp;|&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwiki.qemu.org%2FChangeLog%2F9.0&quot; target=&quot;_blank&quot;&gt;Changelog&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289216/qemu-9-0-0-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289216/qemu-9-0-0-released</guid>
            <pubDate>Wed, 24 Apr 2024 03:55:53 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>开源大模型 AI 框架，升思 MindSpore 2.3.RC1 发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;经过社区开发者们几个月的开发与贡献，现正式发布升思 MindSpore2.3.RC1 版本，通过多维混合并行以及确定性 CKPT 来实现超大集群的高性能训练，支持大模型训推一体架构，大模型开发训练推理更简、更稳、更高效，并在训推一体框架的基础上通过多样的大模型推理优化技术，进一步降低大模型推理成本；通过使能 kernel by kernel 调度执行，进一步提升静态图调试调优能力；持续升级 MindSpore TransFormers 大模型套件和 MindSpore One 生成式套件，全流程开箱即用，一周即可完成大模型全流程的开发、验证；创新 AI+科学计算（科学智能）范式，孵化科学领域基础大模型；下面就带大家详细了解下 2.3.RC1 版本的关键特性。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;1、大模型训练：细粒度多副本并行，有效提升计算通信并发度，显著提升大模型训练性能&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;大模型训练下，为了降低显存开销，广泛的使用算子级并行技术，其中引入了大量的模型并行的通信，极大地影响了大模型的训练效率。模型并行的通信，从网络的结构上来看，其处于正反向计算过程中，阻塞正反向计算，无法与正反向的计算进行互相掩盖。为了解决模型并行通信的掩盖问题，MindSpore 提出了多副本并行技术。&lt;/p&gt; 
&lt;p&gt;在旧版本的 MindSpore 上，通过将网络从数据开始进行拆分，如下图所示，在单张卡内，通过 slice 算子将 Batch 维度进行拆分，进而产生多个分支，这多个分支的计算与通信互相之间没有依赖，存在并发的空间，通过执行序调度算法，控制多个分支的计算与通信进行并发。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;744&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0424/114942_t8i3_3820517.png&quot; width=&quot;1214&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;随着网络规模的增大，受限于显存限制，当一张卡内的 BatchSize 仅支持为 1 时，上述对整网进行 Batch 拆分的方案不再可行。因此，考虑到模型并行通信的位置，升思 MindSpore2.3.RC1 版本将 Transformer 模型中的 AttentionProjection 层以及 FFN 层进行拆分，产生多个分支，通过执行序调度算法控制细粒度的多分支的并行，其中拆分从 AttentionProjection 开始，到下一个 Layer 的 QKV 计算前结束。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;752&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0424/114957_Gsi0_3820517.png&quot; width=&quot;1328&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;上图描述了序列并行场景下的细粒度多副本拆分与掩盖基本思路，拆分为两个副本，在正向可以达成 50%+的通信掩盖；而在反向，结合计算梯度的分支的计算与 TP 通信的掩盖，可达成 90% 的通信的掩盖。当前细粒度多副本并行仅在 MindSpore Transformers 的 LLAMA 网络进行了实现，需要对模型结构进行手动改造为多个副本。后续版本升思 MindSpore 将集成自动拆分副本的逻辑，达成更易用的细粒度多副本并行。&lt;/p&gt; 
&lt;p&gt;参考链接：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mindspore.cn%2Ftutorials%2Fexperts%2Fzh-CN%2Fmaster%2Fparallel%2Fmultiple_copy.html&quot; target=&quot;_blank&quot;&gt;https://www.mindspore.cn/tutorials/experts/zh-CN/master/parallel/multiple_copy.html&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;2、大模型推理全栈升级&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;大模型大规模商用之后，推理消耗的算力规模将十分庞大，相应地带来高昂的成本，商业闭环依赖推理规模突破。在降低大模型推理的成本的同时，要兼顾模型精度和计算时延，不能影响用户的体验。升思 MindSpore 2.3.RC1 版本，从最上层推理服务到模型脚本优化到推理引擎 LLM Serving，为用户提供端到端的高效推理解决方案。&lt;/p&gt; 
&lt;p&gt;2.1 训推一体：大模型训/推统一脚本，大幅简化部署流程，提高效率&lt;/p&gt; 
&lt;p&gt;模型脚本默认使能了增量推理、FlashAttention/PagedAttention 等推理加速技术，避免了模型导出、切分、推理脚本开发等一系列工作，训练到推理加速平滑迁移，部署周期下降到天级。&lt;/p&gt; 
&lt;p&gt;2.2 极致性能：持续提升融合大算子、并行推理、模型小型化的关键能力&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;融合大算子：&lt;/strong&gt;新增 10+业界最新的推理融合大算子接口，模型开发人员可以快速使能推理融合算子实现加速。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;并行推理：&lt;/strong&gt;训练推理并行策略接口一致，提供训练并行到推理并行 ckpt 重切分接口，支持动态 shape 模型切分。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;模型压缩：&lt;/strong&gt;升思 MindSpore 金箍棒升级到 2.0 版本，提供了针对大模型的业界 SOTA 以及华为诺亚自研的量化、减枝等算法，实现千亿大模型 10 倍+压缩。&lt;/p&gt; 
&lt;p&gt;以上技术均可泛化的应用于 Transformer 结构的大模型中，经过验证，在盘古、Llama 2 的 8 卡模型推理中，首 token 时延做到百 ms 级，平均 token 时延小于 50ms，保持业界领先水平。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;262&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0424/115014_2kLi_3820517.png&quot; width=&quot;830&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;2.3 服务化高吞吐&lt;/p&gt; 
&lt;p&gt;通过连续批调度、Prefill/Decoding 混合部署等手段，尽可能的消除掉冗余计算，确保算力不闲置，实现大模型推理吞吐提升 2 倍+。&lt;/p&gt; 
&lt;p&gt;参考链接：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mindspore.cn%2Flite%2Fdocs%2Fzh-CN%2Fr2.3.0rc1%2Fuse%2Fcloud_infer%2Fruntime_distributed_python.html&quot; target=&quot;_blank&quot;&gt;https://www.mindspore.cn/lite/docs/zh-CN/r2.3.0rc1/use/cloud_infer/runtime_distributed_python.html&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;3、静态图优化：支持 O(n) 多级编译，使能 kernel by kernel 调度执行，提升静态图调试调优能力&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;整图下沉执行性能最优，但大模型的规模和参数量发展得更为庞大，整图下沉执行方式在整图编译过程中耗时较长，一个千亿级别的大模型的编译时间为 30 分钟-60 分钟，调试调优效率低下。为解决上述问题，升思 MindSpore2.3.RC1 版本中，提供了多级编译技术，O0 原生构图不优化、O1 增加自动算子融合优化、O2 整图下沉执行优化。在 O0 的编译选项下，通过原生图编译和 kernel by kernel（KBK）的执行技术，可以将编译时间提升到 15 分钟以内，同时我们在新版本中还开发了 DryRun 技术，用户可以直接在离线的情况进行内存瓶颈分析和并行策略调优，结合这两大技术可以使得大模型调试效率倍增。在 O0 这种编译条件下，我们使能了 SOMAS/LazyInline/控制流 Inline 来提升内存复用率，使能了多流并行/流水异步调度，可以提升执行性能；在 O1 这种编译条件下，通过使能算子融合技术，KBK 执行模式下可以有更好的执行性能。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;466&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0424/115036_9ljw_3820517.png&quot; width=&quot;830&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;参考链接：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mindspore.cn%2Fdocs%2Fzh-CN%2Fr2.3.0rc1%2Fapi_python%2Fmindspore%2Fmindspore.JitConfig.html%3Fhighlight%3Djitconfig&quot; target=&quot;_blank&quot;&gt;https://www.mindspore.cn/docs/zh-CN/r2.3.0rc1/api_python/mindspore/mindspore.JitConfig.html?highlight=jitconfig&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;4、JIT 兼具易用性和性能，动静统一，提供灵活高效开发&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;升思 MindSpore 支持图模式（静态图）和 PyNative 模式（动态图）两种运行方法。动态图易于调试，开发灵活，易用性好；静态图语法支持有限，但执行性能好。JIT 兼顾性能和易用性，通过对 Python 字节码进行分析&amp;amp;调整、执行流进行图捕获&amp;amp;图优化，支持入图的 Python 代码做静态图方式执行，不支持的进行子图切分以动态图方式执行，自动地做到动静统一，实现方法如下图所示。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;584&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0424/115050_vUBN_3820517.png&quot; width=&quot;830&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;参考链接：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mindspore.cn%2Fdocs%2Fzh-CN%2Fr2.3%2Fdesign%2Fdynamic_graph_and_static_graph.html%23%25E5%258A%25A8%25E6%2580%2581%25E5%259B%25BE%25E8%25BD%25AC%25E9%259D%2599%25E6%2580%2581%25E5%259B%25BE%25E6%258A%2580%25E6%259C%25AF&quot; target=&quot;_blank&quot;&gt;https://www.mindspore.cn/docs/zh-CN/r2.3/design/dynamic_graph_and_static_graph.html#%E5%8A%A8%E6%80%81%E5%9B%BE%E8%BD%AC%E9%9D%99%E6%80%81%E5%9B%BE%E6%8A%80%E6%9C%AF&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;5、MindSpore Elec：新增大地电磁智能反演模型&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;MindSpore Elec 电磁仿真套件升级至 0.3 版本，联合清华大学李懋坤教授团队、华为先进计算与存储实验室共同打造了基于升思 MindSpore 的大地电磁（Magnetotelluric，MT）智能反演模型。该模型通过变分自编码器（VAE）灵活嵌入了多物理先验知识，达到了业界 SOTA。该成果已被国际顶级勘探地球物理期刊《Geophysics》收录，同时也在升思人工智能框架峰会 2024 上发布亮相。&lt;/p&gt; 
&lt;p&gt;（1）基础 MT 反演：反演区域水平长度为 10km，深度为 1km。下图 1 中目标电阻率分布（第一列）与传统大地电磁反演（第二列）、大地电磁智能反演（第三列），可以看出大地电磁智能反演相比传统反演精度显著提升（前者残差为 0.0056 和 0.0054；后者为 0.023 和 0.024 ）；下图 2 中，大地电磁智能反演性能也优于传统反演方法（前者收敛步数为 4 和 4；后者为 6 和 4）。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;656&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0424/115105_aJkE_3820517.png&quot; width=&quot;1602&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;图 1 大地电磁反演精度对比&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;348&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0424/115120_FQZC_3820517.png&quot; width=&quot;1386&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;图 2 大地电磁反演收敛速度对比（Pixel-based：传统反演；Feature-based：我们的工作）&lt;/p&gt; 
&lt;p&gt;（2）南部非洲 MT 反演：大地电磁智能反演模型也在南部非洲开源数据集（SAMTEX）上做了验证。该反演区域位于南部非洲西海岸附近，长度约为 750km，深度选定为 80km。该测区显著特征为在水平方向 100km 至 400km 之间，深度 20km 以浅的区域存在的高导结构。由于低频电磁波在导体结构中的衰减，MT 方法对高导结构下部区域的敏感度很低, 因此无先验知识约束的传统 MT 反演难以准确重建高导地层的下边界位置。大地电磁智能反演对高导地层的下边界重建较为清晰准确，较好地将地层厚度的先验知识融入了反演。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;1034&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0424/115133_IWlU_3820517.png&quot; width=&quot;1546&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;图 3 南部非洲 MT 反演示例图（上图：传统反演；下图：我们的工作）&lt;/p&gt; 
&lt;p&gt;参考链接：&lt;a href=&quot;https://gitee.com/mindspore/mindscience/tree/master/MindElec&quot; target=&quot;_blank&quot;&gt;https://gitee.com/mindspore/mindscience/tree/master/MindElec&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289215/mindspore-2-3-rc1-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289215/mindspore-2-3-rc1-released</guid>
            <pubDate>Wed, 24 Apr 2024 03:51:53 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>pnpm 9.0.0 发布，速度是 npm 2 倍的包管理器</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;pnpm v9.0.0 已经发布了。&lt;/p&gt; 
&lt;p&gt;pnpm 是一款快速且节省磁盘空间的包管理工具，速度是 npm 的 2 倍。它使用一个内容可寻址的文件系统来存储磁盘上所有模块目录的所有文件。当使用 npm 或 Yarn 时，如果你有 100 个使用 lodash 的项目，你将在磁盘上有 100 份 lodash 的拷贝，而使用 pnpm 时，lodash 将被存储在一个内容可寻址的存储器中。&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;273&quot; src=&quot;https://static.oschina.net/uploads/space/2024/0424/105419_ItFX_3820517.png&quot; width=&quot;659&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;此版本主要更新亮点包括：&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;采用 Lockfile v9。新格式提高了可读性并更好地防止 Git 冲突。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;删除了对 Lockfile v5 的支持。使用 pnpm v8 将 lockfile v5 转换为 lockfile v6&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;核心包兼容，pnpm 现在将检查 package.json 文件中的 packageManager 字段。如果此字段存在并且指定了与当前使用的不同的包管理器或 pnpm 版本，则 pnpm 将不会继续。这可确保始终使用项目所需的正确包管理器和版本。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MacOS 使用与 Linux 相同的状态文件目录&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;安装 git 托管的依赖项时，仅选择将与包一起打包的文件&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;安装 Git 存储库的子目录&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;支持 PowerShell 补全&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情查看发布公告：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fpnpm%2Fpnpm%2Freleases%2Ftag%2Fv9.0.0&quot; target=&quot;_blank&quot;&gt;https://github.com/pnpm/pnpm/releases/tag/v9.0.0&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289201/pnpm-9-0-0-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289201/pnpm-9-0-0-released</guid>
            <pubDate>Wed, 24 Apr 2024 02:55:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>Mall4j 商城系统 v3.3 升级支持 JDK 21 及虚拟线程</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;时代发生了变化，vue2 已于 2023 年 12 月 31 日停止维护，springboot2 已于 2023 年 11 月 24 日停止维护&lt;/p&gt; 
&lt;p&gt;本次更新：&lt;/p&gt; 
&lt;p&gt;1. 修复小程序首页样式问题&lt;br&gt; 2. 去除 husky 依赖&lt;br&gt; 3. 修复小程序下点登录没反应&lt;br&gt; 4. 购物车页去除控制枱报错提示&lt;br&gt; 5. 优化密码修改&lt;br&gt; 6. 修复【订单管理】下单时间搜索失败&lt;br&gt; 7. 短信限制发送次数&lt;br&gt; 8. 补充分类列表的样式&lt;br&gt; 10. 优化【地址管理】【订单管理】修复打包语法错误&lt;br&gt; 11. 【分类】图片回显增加地址校验&lt;br&gt; 12. 更新优化提示,优化分类图片返回&lt;/p&gt; 
&lt;p&gt;还有一些其他的依赖更新：&lt;/p&gt; 
&lt;p&gt;1. spring-boot 升级到 3.2 支持 jdk21 打包，及支持虚拟线程&lt;br&gt; 2. hutool 升级到 5.8.24&lt;br&gt; 3. poi 升级到 5.2.5&lt;br&gt; 4.mybatis-plus 升级到 &amp;nbsp;3.5.5&lt;br&gt; 5. redisson 升级到 3.25.2&lt;br&gt; 6. knife4j 升级到 4.3.0&lt;br&gt; 7. spring-cloud-commons 升级到 4.1.0&lt;br&gt; 8. satoken 升级到 1.37.0&lt;/p&gt; 
&lt;p&gt;一些其他小改动，具体看提交记录&lt;/p&gt; 
&lt;p&gt;Spring 以及 VUE 官方宣布，SpringBoot2 与 Vue2 已在 2023 年底停止维护。新项目建议使用 SpringBoot3+Vue3 的组合，本商城已于 2023 年完成升级！！！&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289185</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289185</guid>
            <pubDate>Wed, 24 Apr 2024 01:59:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>Audacity 3.5 发布，开源音频编辑器</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Audacity 是最受欢迎的免费跨平台的开源音频编辑器之一。它可以在 Windows、macOS 和 GNU/Linux 设备上下载和使用，并且长期以来维持更新，功能也十分丰富。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Audacity 3.5 现已&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.audacityteam.org%2Fblog%2Faudacity-3-5%2F&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;，增加了多项新功能以及各种改进内容。一些亮点内容包括增加了云保存、节拍检测、音高转换等功能。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;281&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e3051a135e75568576b240efc99d97acbf4.png&quot; width=&quot;500&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;Cloud project saving&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;推出了一项新的云保存功能，允许用户将 Audacity 项目保存到 &lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Faudio.com&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;audio.com&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;。使得用户可以在任何设备上工作，与他人共享和协作，并在出现问题时恢复以前的版本。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;自动节拍检测&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;Audacity 现在可以自动检测导入循环的节拍，并将其调整为合适的节拍。节拍检测通过音频分析和元数据检查两种方式完成。如果你想在不依赖音频分析的情况下为自动节拍检测做好准备，acidizer tempo tags 或简单地将「123 bpm」写入文件名中的任何位置都可以。可以通过 Preferences -&amp;gt; Import/Export 禁用自动节拍检测功能。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;音高转换&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;现在，用户可以通过按住 Alt 并按向上和向下箭头键来非破坏性地改变片段的音高。或者，可以单击 overflow menu (…) 并选择「Pitch and speed…」。当以这种方式改变音高时，用户界面中的箭头会显示音调移动的幅度。&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color:#000000&quot;&gt;一些其他更改包括：&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;添加了将标签导出为字幕文件的功能。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;添加了跳过插件扫描的选项。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;添加了 overflow menu 以及剪辑的速度和音调指示器。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;各种功能的各种变化。&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;删除了一些小众功能，以简化应用。旨在使 Audacity 的使用更简单，同时也会加快未来的开发速度，因为需要考虑的事情更少了。&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情可&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.audacityteam.org%2Fblog%2Faudacity-3-5%2F&quot; target=&quot;_blank&quot;&gt;查看官方博客&lt;/a&gt;。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289184/audacity-3-5-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289184/audacity-3-5-released</guid>
            <pubDate>Wed, 24 Apr 2024 01:57:41 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>DataGear 5.0.0 发布，数据可视化分析平台</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;h3&gt;&lt;span style=&quot;color:#e74c3c&quot;&gt;&lt;strong&gt;DataGear 企业版 1.1.0 已发布，欢迎了解试用！&lt;br&gt; &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdatagear.tech%2Fpro%2F&quot; target=&quot;_blank&quot;&gt;http://datagear.tech/pro/&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.datagear.tech%2F&quot; target=&quot;_blank&quot;&gt;DataGear&lt;/a&gt;&amp;nbsp;5.0.0 发布，核心功能重构，新增图表追加更新模式，具体更新内容如下：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;重构：【图表数据集】概念和设计重构为【数据集绑定】；&lt;/li&gt; 
 &lt;li&gt;弃用：看板弃用 dg-chart-map 图表元素属性，改为采用 dgMap 图表选项方式；&lt;/li&gt; 
 &lt;li&gt;弃用：图表 JS 对象弃用 chart.map() 函数，改为采用 dgMap 图表选项方式；&lt;/li&gt; 
 &lt;li&gt;新增：看板编辑页面新增插入新建图表功能；&lt;/li&gt; 
 &lt;li&gt;新增：内置地图类图表新增 dgMap 图表选项，可以更方便灵活地设置图表地图；&lt;/li&gt; 
 &lt;li&gt;新增：看板/图表 JS 对象新增 contextURL() 函数，用于支持获取系统内其他模块资源的访问 URL；&lt;/li&gt; 
 &lt;li&gt;新增：图表 JS 对象新增 chart.dataSetBind*() 函数，替换已弃用的 chart.chartDataSet*() 函数；&lt;/li&gt; 
 &lt;li&gt;新增：图表 JS 对象新增 chart.updateAppendMode() 函数，用于设置图表追加更新模式；&lt;/li&gt; 
 &lt;li&gt;新增：系统配置文件新增 dbmeta.tabletypes*数据源表类型配置项，用于解决某些数据库无法加载表的问题；&lt;/li&gt; 
 &lt;li&gt;新增；数据源管理右键菜单新增【数据库信息】功能，可查看数据库名称、表类型信息；&lt;/li&gt; 
 &lt;li&gt;修复：修复 CSV、Excel、JSON 数据集有时未开启数据缓存的 BUG；&lt;/li&gt; 
 &lt;li&gt;修复：修复在配置了应用根路径后看板展示页无法显示网页图标的 BUG；&lt;/li&gt; 
 &lt;li&gt;改进：关闭或刷新看板展示页面后，及时清除后台会话中保存的看板信息；&lt;/li&gt; 
 &lt;li&gt;改进：整理数据集管理页面【添加】下拉菜单，添加【文本】、【文件】分类；&lt;/li&gt; 
 &lt;li&gt;改进：数据集编辑页面【可变模型】字面修改为【易变模型】；&lt;/li&gt; 
 &lt;li&gt;改进：主页左侧导航栏【项目】替换新图标；&lt;/li&gt; 
 &lt;li&gt;改进：完善创建用户相关操作响应逻辑，避免泄露敏感信息；&lt;/li&gt; 
 &lt;li&gt;改进：系统后台运行日志脱敏处理，避免泄露敏感信息；&lt;/li&gt; 
 &lt;li&gt;改进：前端 UI 库 PrimeVue 版本由 3.15.0 升级至 3.45.0；&lt;/li&gt; 
 &lt;li&gt;改进：前端库 Vue 版本由 3.2.36 升级至 3.4.5；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.datagear.tech%2F&quot; target=&quot;_blank&quot;&gt;DataGear&lt;/a&gt;是一款开源免费的数据可视化分析平台，支持自由制作任何您想要的数据可视化看板。&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;系统特点：&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;h4&gt;&lt;strong&gt;友好接入的数据源&lt;/strong&gt;&lt;/h4&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;支持运行时接入任意提供 JDBC 驱动的数据库，包括 MySQL、Oracle、PostgreSQL、SQL Server 等关系数据库，以及 Elasticsearch、ClickHouse、Hive 等大数据引擎&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;h4&gt;&lt;strong&gt;多样动态的数据集&lt;/strong&gt;&lt;/h4&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;支持创建 SQL、CSV、Excel、HTTP 接口、JSON 数据集，并可设置为动态的参数化数据集，可定义文本框、下拉框、日期框、时间框等类型的数据集参数，灵活筛选满足不同业务需求的数据&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;h4&gt;&lt;strong&gt;强大丰富的数据图表&lt;/strong&gt;&lt;/h4&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;数据图表可聚合绑定多个不同格式的数据集，轻松定义同比、环比图表，内置折线图、柱状图、饼图、地图、雷达图、漏斗图、散点图、K 线图、桑基图等 70 + 开箱即用的图表，并且支持自定义图表配置项，支持编写和上传自定义图表插件&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;h4&gt;&lt;strong&gt;自由开放的数据看板&lt;/strong&gt;&lt;/h4&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;数据看板采用原生的 HTML 网页作为模板，支持导入任意 HTML 网页，支持以可视化方式进行看板设计和编辑，也支持使用 JavaScript、CSS 等 web 前端技术自由编辑看板源码，内置丰富的 API，可制作图表联动、数据钻取、异步加载、交互表单等个性化的数据看板&lt;/p&gt; 
&lt;p&gt;官网地址：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.datagear.tech%2F&quot; target=&quot;_blank&quot;&gt;http://www.datagear.tech&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;源码地址：&lt;/p&gt; 
&lt;p&gt;Gitee：&lt;a href=&quot;https://gitee.com/datagear/datagear&quot;&gt;https://gitee.com/datagear/datagear&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Github：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdatageartech%2Fdatagear&quot; target=&quot;_blank&quot;&gt;https://github.com/datageartech/datagear&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;系统截图：&lt;/h3&gt; 
&lt;p&gt;图表类型&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;887&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-b4a742233367305e7825a482be9683e4582.png&quot; width=&quot;1089&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;数据源管理&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;561&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5d3a73b84e84d9873191f10b64ebd1ab269.png&quot; width=&quot;1152&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;SQL 数据集&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;576&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4d8e007b848186929effeae1f47718a1513.png&quot; width=&quot;1106&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;看板编辑&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;565&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-03d3bf6d0ca4301ec5cfea606e2ba6045e1.gif&quot; width=&quot;1095&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/u/4035217/blog/3168893&quot;&gt;制作看板&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;563&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8d44fe2497a797a09ce42a5cccc5dd8cc50.png&quot; width=&quot;1106&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/u/4035217/blog/4529151&quot;&gt;数据钻取&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;565&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-8c5df432ca6a1d721ef61b92e2219e32c05.gif&quot; width=&quot;1096&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/u/4035217/blog/4443596&quot;&gt;地图联动&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;565&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-ba4802924d238d1c60de7ecf3afc2a8b169.gif&quot; width=&quot;1096&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/u/4035217/blog/4458378&quot;&gt;看板表单&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;565&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-cc0b2383446202fb8a217f2cad1098f4a15.gif&quot; width=&quot;1096&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/u/4035217/blog/4504599&quot;&gt;实时图表&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;565&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e6633cc1192c0dda38f75e6431f92681102.gif&quot; width=&quot;1096&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/u/4035217/blog/5713335&quot;&gt;异步加载&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;565&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-63490b0aa500554f2e8bbc0bad707e8d596.gif&quot; width=&quot;1096&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289182/datagear-5-0-0-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289182/datagear-5-0-0-released</guid>
            <pubDate>Wed, 24 Apr 2024 01:54:41 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>RuleGo v0.20.0 发布：Go 轻量级、高性能、嵌入式、组件编排规则引擎</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;code&gt;RuleGo&lt;/code&gt; 是一个基于 &lt;code&gt;Go&lt;/code&gt; 语言的轻量级、高性能、嵌入式、组件编排规则引擎。也一个灵活配置和高度定制化的事件处理框架。支持异构系统数据集成，可以对输入消息进行聚合、分发、过滤、转换、丰富和执行各种动作。&lt;/p&gt; 
&lt;h4&gt;典型使用场景&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;边缘计算：&lt;/strong&gt; 可以在边缘服务器部署 &lt;code&gt;RuleGo&lt;/code&gt;，对数据进行预处理，筛选、聚合或者计算后再上报到云端。数据的处理规则和分发规则可以通过规则链动态配置和修改，而不需要重启系统。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;物联网：&lt;/strong&gt; 收集设备数据上报，经过规则链的规则判断，触发一个或者多个动作，例如：发邮件、发告警、和其他设备或者系统联动。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;数据分发：&lt;/strong&gt; 可以根据不同的消息类型，调用 HTTP、MQTT 或者 gRPC 把数据分发到不同系统。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;应用集成：&lt;/strong&gt; 把 &lt;code&gt;RuleGo&lt;/code&gt; 当做胶水连接各种系统或者协议，例如：ssh、webhook、kafka、消息队列、数据库、chatGPT、第三方应用系统。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;异构系统数据集中处理：&lt;/strong&gt; 从不同的数据源（如 MQTT、HTTP、WS、TCP/UDP 等）接收数据，然后对数据进行过滤、格式转换、然后分发到数据库、业务系统或者仪表板。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;高度定制化业务：&lt;/strong&gt; 把高度定制化或者经常变化的业务解耦出来，交给 &lt;code&gt;RuleGo&lt;/code&gt; 规则链进行管理。业务需求变化而不需要重启主程序。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;复杂业务编排：&lt;/strong&gt; 把业务封装成自定义组件，通过 &lt;code&gt;RuleGo&lt;/code&gt; 编排和驱动这些自定义的组件，业务逻辑并支持动态调整和替换。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;微服务编排：&lt;/strong&gt; 通过 &lt;code&gt;RuleGo&lt;/code&gt; 编排和驱动微服务，或者动态调用第三方服务处理业务，并返回结果。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;业务代码和业务逻辑解耦：&lt;/strong&gt; 例如：用户积分计算系统、风控系统。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;自动化：&lt;/strong&gt; 例如：流程自动化系统、营销自动化系统、对接&lt;code&gt;大模型&lt;/code&gt;提取用户意图，然后触发规则链与其他系统进行联动或者进行业务处理。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;灵活配置和高度定制化的事件处理框架：&lt;/strong&gt; 对不同的消息类型，进行异步或者同步的处理。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;架构图&lt;/h3&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; height=&quot;1536&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-e549bd3e4e005f5ac2031927b4ab00e516b.png&quot; width=&quot;2149&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;本次更新&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;feat: 允许不同脚本相同的函数名&lt;/li&gt; 
 &lt;li&gt;feat: restApiCall 节点允许空 body&lt;/li&gt; 
 &lt;li&gt;feat: 可以得到规则链执行快照&lt;/li&gt; 
 &lt;li&gt;feat: 允许在 OnMsg 上下文添加 onDebug 回调函数&lt;/li&gt; 
 &lt;li&gt;feat: endpoint 允许添加 RuleContextOption&lt;/li&gt; 
 &lt;li&gt;feat: 规则链 DSL 文件可以添加 vars 变量&lt;/li&gt; 
 &lt;li&gt;feat: 节点配置允许通过规则链 vars 值替换&lt;/li&gt; 
 &lt;li&gt;feat: 规则链池增加 reload 和 range 方法&lt;/li&gt; 
 &lt;li&gt;feat: websocket endpoint 允许和 rest endpoint 共用一个 server&lt;/li&gt; 
 &lt;li&gt;feat: 节点 debugMode 允许被规则链的 debugMode 参数统一覆盖&lt;/li&gt; 
 &lt;li&gt;feat: 子规则链允许通过 Failure 和其他节点连接&lt;/li&gt; 
 &lt;li&gt;feat: 加载规则链跳过出错的规则链&lt;/li&gt; 
 &lt;li&gt;feat: 规则链引擎增加初始化标志&lt;/li&gt; 
 &lt;li&gt;feat: js 相关节点运行时允许通过&lt;code&gt;vars.xx&lt;/code&gt;访问规则链 vars&lt;/li&gt; 
 &lt;li&gt;feat: 重构 examples/server 提供基于 rulego 开发应用的脚手架：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2F8.134.32.225%3A9090%2Fui%2F&quot; target=&quot;_blank&quot;&gt;体验地址&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;feat: 增加&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frulego%2Frulego-components-ai&quot; target=&quot;_blank&quot;&gt;rulego-components-ai&lt;/a&gt;模块扩展组件库，提供 AI 组件&lt;/li&gt; 
 &lt;li&gt;feat: 增加&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frulego%2Frulego-components-ci&quot; target=&quot;_blank&quot;&gt;rulego-components-ci&lt;/a&gt;模块扩展组件库，提供 CD/CI 组件&lt;/li&gt; 
 &lt;li&gt;feat: 增加&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frulego%2Frulego-components-iot&quot; target=&quot;_blank&quot;&gt;rulego-components-iot&lt;/a&gt;模块扩展组件库，提供 IoT 组件&lt;/li&gt; 
 &lt;li&gt;fix: mqtt client 节点如果连接不上 mqtt broker 允许延迟连接，而不是报错&lt;/li&gt; 
 &lt;li&gt;fix: 修复 groupAction 节点，可能并发读写问题&lt;/li&gt; 
 &lt;li&gt;fix: 规则链没有节点，执行报错问题&lt;/li&gt; 
 &lt;li&gt;opt: 优化大 js 文件的加载效率&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;示例应用体验地址：&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Feditor.rulego.cc%2F&quot; target=&quot;_blank&quot;&gt;RuleGo-Editor&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2F8.134.32.225%3A9090%2Fui%2F&quot; target=&quot;_blank&quot;&gt;应用开发脚手架&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;其他信息&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;欢迎在&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://gitee.com/rulego/rulego&quot; target=&quot;_blank&quot;&gt;Gitee&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;或者&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frulego%2Frulego&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;上提交反馈或建议&lt;/li&gt; 
 &lt;li&gt;如果喜欢这个项目，请给我们点个 Star&lt;/li&gt; 
 &lt;li&gt;文档官网：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frulego.cc%2F&quot; target=&quot;_blank&quot;&gt;rulego.cc&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;欢迎加入社区群，提出你的建议和需求。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289154/rulego-0-20-0-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289154/rulego-0-20-0-released</guid>
            <pubDate>Tue, 23 Apr 2024 15:10:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>youdeyunke [6.1.145] 版本发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;本次更新主要内容如下：&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;一、新增功能&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;新增 excel 导入数据功能，现可通过指定格式的 Excel 文件导入新房、二手房、一房一价数据，提高了数据录入的效率和准确性 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img alt=&quot; &quot; height=&quot;517&quot; src=&quot;https://30798900.s21i.faiusr.com/4/4/ABUIABAEGAAgypOJsQYoyozGvgUwoQg4hQQ.png&quot; width=&quot;1057&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;新增图片搬家功能，管理员可输入图片所在网址，系统将自动爬取图片，保存到&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcurl.qcloud.com%2FUmQkab6I&quot; target=&quot;_blank&quot;&gt;服务器&lt;/a&gt;中，方便管理员快速迁移图片资源。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;新增文章搬家功能，管理员输入微信公众号文章的链接，系统能够自动爬取文章内容并保存至服务器，便于管理员迁移或备份微信公众号文章。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;新增预约时间设置功能，小程序预约看房功能，管理后台可设置可预约的时间段，为管理员提供更灵活的预约服务。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;二、修复问题&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;修复了系统初始化后，界面设计器页面数据异常问题。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;修复了管理后台在创建文章时可能出现的重复创建问题&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;三、优化调整&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;优化了小程序预约看房页面。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;优化了管理后台文章管理界面。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;优化了管理后台图片搬家界面。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;注意事项：&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;若您的项目在升级后发现界面设计器界面异常或报错，请尝试重新导入页面文件以解决问题。页面文件可从以下地址下载：&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fqiniucdn.udeve.cn%2Fudyk%2Fpages.udpage&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;页面文件下载地址&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289132/youdeyunke-6-1-145</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289132/youdeyunke-6-1-145</guid>
            <pubDate>Tue, 23 Apr 2024 12:10:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>netty 高性能游戏服务器框架；ioGame 21.6 真.轻量级网络编程框架发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#333333&quot;&gt;ioGame 源码完全开放、最新文档阅读完全开放；使用完全自由、免费（遵守开源协议）。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#333333&quot;&gt;ioGame 是一个&lt;/span&gt;&lt;span style=&quot;color:#262626&quot;&gt;轻量级的&lt;/span&gt;&lt;span style=&quot;color:#333333&quot;&gt;网络编程框架，适用于&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#df2a3f&quot;&gt;网络游戏服务器、物联网、内部系统&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#333333&quot;&gt;及各种需要长连接的场景。&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;本次更新&lt;/span&gt;&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;版本更新汇总&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fiohao%2FioGame%2Fissues%2F264&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;#264&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt; 新增属性值变更监听特性&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;模拟客户端新增与服务器断开连接的方法。模拟客户端新增是否活跃的状态属性。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fiohao%2FioGame%2Fissues%2F265&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;#265&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt; 从游戏对外服中获取玩家相关数据 - 模拟玩家请求。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;任务相关：TaskListener 接口增加异常回调方法，用于接收异常信息；当 triggerUpdate 或 onUpdate 方法抛出异常时，将会传递到该回调方法中。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fiohao%2FioGame%2Fissues%2F266&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;#266&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt; 新增 RangeBroadcast 范围内的广播功能，这个范围指的是，可指定某些用户进行广播。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;AbstractRoom 增加 ifPlayerExist、ifPlayerNotExist 方法。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;div&gt; 
 &lt;hr&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;h3&gt;&lt;span&gt;属性监听特性&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;#264 新增属性值变更监听特性&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;文档 : &lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fuqn84q41f58xe5f0&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;属性监听 (yuque.com)&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;属性可添加监听器，当某些属性值的发生变化时，触发监听器。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;使用场景举例&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p style=&quot;margin-left:.8em; margin-right:0&quot;&gt;&lt;span&gt;比如玩家的血量低于一定值时，需要触发无敌状态；此时，我们就可以监听玩家的血量，并在该属性上添加一个对应的监听器来观察血量的变化，当达到预期值时就触发对应的业务。&lt;/span&gt;&lt;/p&gt; 
  &lt;p style=&quot;margin-left:.8em; margin-right:.8em&quot;&gt;&lt;span&gt;类似的使用场景还有很多，这里就不过多的举例了。属性监听的特点在于属性变化后会触发监听器。&lt;/span&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;属性监听特点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;可为属性添加监听器，用于观察属性值的变化。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;属性可以添加多个监听器。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;属性的监听器可以移除。&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;框架已经内置了几个属性实现类，分别是：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;IntegerProperty&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;LongProperty&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;StringProperty&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;BooleanProperty&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;ObjectProperty&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;h4&gt;&lt;span&gt;for example - 添加监听器&lt;/span&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;当 BooleanProperty 对象的值发生改变时，触发监听器。&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt; &lt;span&gt;&lt;span style=&quot;color:#008855&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#770088&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;BooleanProperty&lt;/span&gt;();&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#aa5500&quot;&gt;// 添加一个监听器。&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;addListener&lt;/span&gt;((&lt;span style=&quot;color:#000000&quot;&gt;observable&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;oldValue&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;newValue&lt;/span&gt;) &lt;span style=&quot;color:#981a1a&quot;&gt;-&amp;gt;&lt;/span&gt; {&lt;/span&gt;
 &lt;span&gt;   &lt;span style=&quot;color:#000000&quot;&gt;log&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;info&lt;/span&gt;(&lt;span style=&quot;color:#aa1111&quot;&gt;&quot;oldValue:{}, newValue:{}&quot;&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;oldValue&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;newValue&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;});&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;get&lt;/span&gt;(); &lt;span style=&quot;color:#aa5500&quot;&gt;// value is false&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;set&lt;/span&gt;(&lt;span style=&quot;color:#221199&quot;&gt;true&lt;/span&gt;); &lt;span style=&quot;color:#aa5500&quot;&gt;// 值变更时，将会触发监听器&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;get&lt;/span&gt;(); &lt;span style=&quot;color:#aa5500&quot;&gt;// value is true&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;当 IntegerProperty 对象的值发生改变时，触发监听器。&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt; &lt;span&gt;&lt;span style=&quot;color:#008855&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#770088&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;IntegerProperty&lt;/span&gt;();&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#aa5500&quot;&gt;// add listener monitor property object&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;addListener&lt;/span&gt;((&lt;span style=&quot;color:#000000&quot;&gt;observable&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;oldValue&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;newValue&lt;/span&gt;) &lt;span style=&quot;color:#981a1a&quot;&gt;-&amp;gt;&lt;/span&gt; {&lt;/span&gt;
 &lt;span&gt;   &lt;span style=&quot;color:#000000&quot;&gt;log&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;info&lt;/span&gt;(&lt;span style=&quot;color:#aa1111&quot;&gt;&quot;oldValue:{}, newValue:{}&quot;&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;oldValue&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;newValue&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;});&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;get&lt;/span&gt;(); &lt;span style=&quot;color:#aa5500&quot;&gt;// value is 0&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;set&lt;/span&gt;(&lt;span style=&quot;color:#116644&quot;&gt;22&lt;/span&gt;); &lt;span style=&quot;color:#aa5500&quot;&gt;// When the value changes,listeners are triggered&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;get&lt;/span&gt;(); &lt;span style=&quot;color:#aa5500&quot;&gt;// value is 22&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;increment&lt;/span&gt;(); &lt;span style=&quot;color:#aa5500&quot;&gt;// value is 23. will trigger listeners&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;h4&gt;&lt;span&gt;for example - 移除监听器&lt;/span&gt;&lt;/h4&gt; 
 &lt;p&gt;&lt;span&gt;下面这个示例，我们将 property 初始值设置为 10，随后添加了一个监听器；当监听器观察到新值为 9 时，就从 observable 中移除自己（这个自己指的是监听器本身），而 observable 则是 IntegerProperty。&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt; &lt;span&gt;&lt;span style=&quot;color:#555555&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#770088&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#008855&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color:#0000ff&quot;&gt;remove1&lt;/span&gt;() {&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;IntegerProperty&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#770088&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;IntegerProperty&lt;/span&gt;(&lt;span style=&quot;color:#116644&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#aa5500&quot;&gt;// 添加一个监听器&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;addListener&lt;/span&gt;(&lt;span style=&quot;color:#770088&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;PropertyChangeListener&lt;/span&gt;&lt;span style=&quot;color:#981a1a&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;() {&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#555555&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#770088&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#008855&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;changed&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;PropertyValueObservable&lt;/span&gt;&lt;span style=&quot;color:#981a1a&quot;&gt; &lt;span style=&quot;color:#770088&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color:#008855&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color:#981a1a&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;observable&lt;/span&gt;, &lt;span style=&quot;color:#008855&quot;&gt;Number&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;oldValue&lt;/span&gt;, &lt;span style=&quot;color:#008855&quot;&gt;Number&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;newValue&lt;/span&gt;) {&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#000000&quot;&gt;log&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;info&lt;/span&gt;(&lt;span style=&quot;color:#aa1111&quot;&gt;&quot;1 - newValue : {}&quot;&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;newValue&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#770088&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color:#000000&quot;&gt;newValue&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;intValue&lt;/span&gt;() &lt;span style=&quot;color:#981a1a&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color:#116644&quot;&gt;9&lt;/span&gt;) {&lt;/span&gt;
 &lt;span&gt;                &lt;span style=&quot;color:#aa5500&quot;&gt;// 移除当前监听器&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;                &lt;span style=&quot;color:#000000&quot;&gt;observable&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;removeListener&lt;/span&gt;(&lt;span style=&quot;color:#770088&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;            }&lt;/span&gt;
 &lt;span&gt;        }&lt;/span&gt;
 &lt;span&gt;    });&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;decrement&lt;/span&gt;(); &lt;span style=&quot;color:#aa5500&quot;&gt;// value 是 9，并触发监听器&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;decrement&lt;/span&gt;(); &lt;span style=&quot;color:#aa5500&quot;&gt;// value 是 8，由于监听器已经移除，所以不会触发任何事件。&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;下面的示例中，我们定义了一个监听器类 OnePropertyChangeListener 并实现了 PropertyChangeListener 监听器接口。示例中，我们通过 OnePropertyChangeListener 对象的引用来移除监听器。&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt; &lt;span&gt;&lt;span style=&quot;color:#555555&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#770088&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#008855&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color:#0000ff&quot;&gt;remove2&lt;/span&gt;() {&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#aa5500&quot;&gt;// 监听器&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;OnePropertyChangeListener&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;onePropertyChangeListener&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#770088&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;OnePropertyChangeListener&lt;/span&gt;();&lt;/span&gt;
 &lt;span&gt;    &lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#aa5500&quot;&gt;// 属性&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;IntegerProperty&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#770088&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;IntegerProperty&lt;/span&gt;();&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#aa5500&quot;&gt;// 添加监听器&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;addListener&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;onePropertyChangeListener&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;increment&lt;/span&gt;(); &lt;span style=&quot;color:#aa5500&quot;&gt;// value == 1，并触发监听器&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;removeListener&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;onePropertyChangeListener&lt;/span&gt;); &lt;span style=&quot;color:#aa5500&quot;&gt;// 移除监听器&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;property&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;increment&lt;/span&gt;(); &lt;span style=&quot;color:#aa5500&quot;&gt;// value == 2，由于监听器已经移除，所以不会触发任何事件。&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;}&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#aa5500&quot;&gt;// 自定义的监听器&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#770088&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#0000ff&quot;&gt;OnePropertyChangeListener&lt;/span&gt; &lt;span style=&quot;color:#770088&quot;&gt;implements&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;PropertyChangeListener&lt;/span&gt;&lt;span style=&quot;color:#981a1a&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#008855&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color:#981a1a&quot;&gt;&amp;gt;&lt;/span&gt; {&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#555555&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#770088&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#008855&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;changed&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;PropertyValueObservable&lt;/span&gt;&lt;span style=&quot;color:#981a1a&quot;&gt; &lt;span style=&quot;color:#770088&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color:#008855&quot;&gt;Number&lt;/span&gt;&lt;span style=&quot;color:#981a1a&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;observable&lt;/span&gt;, &lt;span style=&quot;color:#008855&quot;&gt;Number&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;oldValue&lt;/span&gt;, &lt;span style=&quot;color:#008855&quot;&gt;Number&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;newValue&lt;/span&gt;) {&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#000000&quot;&gt;log&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;info&lt;/span&gt;(&lt;span style=&quot;color:#aa1111&quot;&gt;&quot;oldValue:{}, newValue:{}, observable:{}&quot;&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;oldValue&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;newValue&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;observable&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;    }&lt;/span&gt;
 &lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;h4&gt;&lt;span&gt;属性监听 - 小结&lt;/span&gt;&lt;/h4&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;属性监听在使用上是简单的，如果你的业务中&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;有关于属性变化后需要触发某些事件的&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，可以考虑引用该特性。框架为 int、long、boolean、Object、String 等基础类型提供了对应的属性监听。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;属性监听特性支持添加多个监听器，支持移除监听器。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;h3&gt;&lt;span&gt;模拟客户端相关&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;模拟客户端新增与服务器断开连接的方法。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;模拟客户端新增是否活跃的状态属性。&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt; &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;ClientUser&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;clientUser&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; ...;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#aa5500&quot;&gt;// 是否活跃，true 表示玩家活跃&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;clientUser&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;isActive&lt;/span&gt;();&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#aa5500&quot;&gt;// 关闭模拟客户端连接&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;clientUser&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;getClientUserChannel&lt;/span&gt;().&lt;span style=&quot;color:#000000&quot;&gt;closeChannel&lt;/span&gt;();&lt;/span&gt;&lt;/pre&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;h3&gt;&lt;span&gt;获取游戏对外服的数据与扩展相关&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;文档 &lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fivxsw5&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;获取游戏对外服的数据与扩展 (yuque.com)&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;RequestCollectExternalMessage 增加 userId 字段。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;#265 模拟玩家请求时 - 从游戏对外服中获取在线玩家相关数据&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;新增 UserHeadMetadataExternalBizRegion，从用户（玩家）所在游戏对外服中获取用户自身的数据，如用户所绑定的游戏逻辑服、元信息 ...等&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;使用参考&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt; &lt;span&gt;&lt;span style=&quot;color:#555555&quot;&gt;@Slf4j&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#555555&quot;&gt;@RestController&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#555555&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span style=&quot;color:#aa1111&quot;&gt;&quot;other&quot;&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#770088&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#770088&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#0000ff&quot;&gt;OtherController&lt;/span&gt; {&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#770088&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#770088&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;AtomicLong&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;msgId&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;GameManagerController&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;msgId&lt;/span&gt;;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#aa5500&quot;&gt;/** 为了方便测试，这里指定一个 userId 来模拟玩家 */&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#770088&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#770088&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color:#008855&quot;&gt;long&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;userId&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;GameManagerController&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;userId&lt;/span&gt;;&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#555555&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span style=&quot;color:#aa1111&quot;&gt;&quot;/notice&quot;&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#770088&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#008855&quot;&gt;String&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;notice&lt;/span&gt;() {&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#000000&quot;&gt;log&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;info&lt;/span&gt;(&lt;span style=&quot;color:#aa1111&quot;&gt;&quot;other notice&quot;&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#aa5500&quot;&gt;// 使用协议碎片特性 https://www.yuque.com/iohao/game/ieimzn&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#000000&quot;&gt;StringValue&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;data&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;StringValue&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;of&lt;/span&gt;(&lt;span style=&quot;color:#aa1111&quot;&gt;&quot;other GM web msg &quot;&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;msgId&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;incrementAndGet&lt;/span&gt;());&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#aa5500&quot;&gt;// 模拟请求 : 路由 - 业务数据&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#000000&quot;&gt;RequestMessage&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;requestMessage&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;BarMessageKit&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;createRequestMessage&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;ExchangeCmd&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;of&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;ExchangeCmd&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;notice&lt;/span&gt;), &lt;span style=&quot;color:#000000&quot;&gt;data&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#aa5500&quot;&gt;// 设置需要模拟的玩家&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#000000&quot;&gt;HeadMetadata&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;headMetadata&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;requestMessage&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;getHeadMetadata&lt;/span&gt;();&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#000000&quot;&gt;headMetadata&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;setUserId&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;userId&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#aa5500&quot;&gt;// 从游戏对外服中获取一些用户（玩家的）自身的数据，如元信息、所绑定的游戏逻辑服 ...等&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#000000&quot;&gt;Optional&lt;/span&gt;&lt;span style=&quot;color:#981a1a&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;HeadMetadata&lt;/span&gt;&lt;span style=&quot;color:#981a1a&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;headMetadataOptional&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;ExternalCommunicationKit&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;employHeadMetadata&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;requestMessage&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#770088&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color:#000000&quot;&gt;headMetadataOptional&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;isPresent&lt;/span&gt;()) {&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#aa5500&quot;&gt;// 发起模拟请求&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#000000&quot;&gt;extractedRequestLogic&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;requestMessage&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#aa5500&quot;&gt;// 打印从游戏对外服获取的元信息&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#008855&quot;&gt;byte&lt;/span&gt;[] &lt;span style=&quot;color:#000000&quot;&gt;attachmentData&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;headMetadata&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;getAttachmentData&lt;/span&gt;();&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#000000&quot;&gt;ExchangeAttachment&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;attachment&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;DataCodecKit&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;decode&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;attachmentData&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;ExchangeAttachment&lt;/span&gt;.&lt;span style=&quot;color:#770088&quot;&gt;class&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#770088&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#aa1111&quot;&gt;&quot;other notice 玩家的元信息: %s - %s&quot;&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;formatted&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;attachment&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;msgId&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;get&lt;/span&gt;());&lt;/span&gt;
 &lt;span&gt;        } &lt;span style=&quot;color:#770088&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#770088&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#aa1111&quot;&gt;&quot;other notice 玩家 %s 不在线，无法获取玩家的元信息 - %s&quot;&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;formatted&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;userId&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;msgId&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;get&lt;/span&gt;());&lt;/span&gt;
 &lt;span&gt;        }&lt;/span&gt;
 &lt;span&gt;    }&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#770088&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color:#008855&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;extractedRequestLogic&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;RequestMessage&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;requestMessage&lt;/span&gt;) {&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#aa5500&quot;&gt;// 向逻辑服发送请求，该模拟请求具备了玩家的元信息。&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#000000&quot;&gt;BrokerClient&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;brokerClient&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;MyKit&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;brokerClient&lt;/span&gt;;&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#000000&quot;&gt;InvokeModuleContext&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;invokeModuleContext&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;brokerClient&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;getInvokeModuleContext&lt;/span&gt;();&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#000000&quot;&gt;invokeModuleContext&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;invokeModuleVoidMessage&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;requestMessage&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;    }&lt;/span&gt;
 &lt;span&gt;}&lt;/span&gt;&lt;/pre&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;h3&gt;&lt;span&gt;任务工具相关&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;TaskListener 接口增加异常回调方法 &lt;/span&gt;&lt;span&gt;&lt;code&gt;void onException(Throwable e)&lt;/code&gt;&lt;/span&gt;&lt;span&gt;，用于接收异常信息；当 triggerUpdate 或 onUpdate 方法抛出异常时，将会传递到该回调方法中。&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt; &lt;span&gt;&lt;span style=&quot;color:#555555&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#770088&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#008855&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color:#0000ff&quot;&gt;testException&lt;/span&gt;() &lt;span style=&quot;color:#770088&quot;&gt;throws&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;InterruptedException&lt;/span&gt; {&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;AtomicBoolean&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;hasEx&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#770088&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;AtomicBoolean&lt;/span&gt;(&lt;span style=&quot;color:#221199&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;TaskKit&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;runOnce&lt;/span&gt;(&lt;span style=&quot;color:#770088&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;OnceTaskListener&lt;/span&gt;() {&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#555555&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#770088&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#008855&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;onUpdate&lt;/span&gt;() {&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#aa5500&quot;&gt;// 模拟一个业务异常&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#770088&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color:#770088&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span style=&quot;color:#aa1111&quot;&gt;&quot;hello exception&quot;&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;        }&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#555555&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#770088&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#008855&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;onException&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;Throwable&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;e&lt;/span&gt;) {&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#000000&quot;&gt;hasEx&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;set&lt;/span&gt;(&lt;span style=&quot;color:#221199&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#aa5500&quot;&gt;// 触发异常后，将来到这里&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#000000&quot;&gt;log&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;error&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;e&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;getMessage&lt;/span&gt;(), &lt;span style=&quot;color:#000000&quot;&gt;e&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;        }&lt;/span&gt;
 &lt;span&gt;    }, &lt;span style=&quot;color:#116644&quot;&gt;10&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;TimeUnit&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;MILLISECONDS&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;TimeUnit&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;MILLISECONDS&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;sleep&lt;/span&gt;(&lt;span style=&quot;color:#116644&quot;&gt;200&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;Assert&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;assertTrue&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;hasEx&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;get&lt;/span&gt;()); &lt;span style=&quot;color:#aa5500&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;}&lt;/span&gt;&lt;/pre&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;h3&gt;&lt;span&gt;业务框架相关 - [common-core]&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;266 新增 RangeBroadcast 范围内的广播功能，这个范围指的是，可指定某些用户进行广播。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;在执行广播前，开发者可以自定义业务逻辑，如&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;添加一些需要广播的用户&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;删除一些不需要接收广播的用户&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p style=&quot;margin-left:.5rem; margin-right:0&quot;&gt;&lt;span&gt;可通过重写 logic、trick 方法来做一些额外扩展&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;for example&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;code&gt;在某些业务场景下，能让语义更清晰&lt;/code&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt; &lt;span&gt;&lt;span style=&quot;color:#aa5500&quot;&gt;// example - 1&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#770088&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;RangeBroadcast&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;flowContext&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#aa5500&quot;&gt;// 需要广播的数据&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        .&lt;span style=&quot;color:#000000&quot;&gt;setResponseMessage&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;responseMessage&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#aa5500&quot;&gt;// 添加需要接收广播的用户&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        .&lt;span style=&quot;color:#000000&quot;&gt;addUserId&lt;/span&gt;(&lt;span style=&quot;color:#116644&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;        .&lt;span style=&quot;color:#000000&quot;&gt;addUserId&lt;/span&gt;(&lt;span style=&quot;color:#116644&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;        .&lt;span style=&quot;color:#000000&quot;&gt;addUserId&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;of&lt;/span&gt;(&lt;span style=&quot;color:#116644&quot;&gt;3L&lt;/span&gt;, &lt;span style=&quot;color:#116644&quot;&gt;4L&lt;/span&gt;, &lt;span style=&quot;color:#116644&quot;&gt;5L&lt;/span&gt;))&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#aa5500&quot;&gt;// 排除一些用户，被排除的用户将不会接收到广播&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        .&lt;span style=&quot;color:#000000&quot;&gt;removeUserId&lt;/span&gt;(&lt;span style=&quot;color:#116644&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#aa5500&quot;&gt;// 执行广播&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        .&lt;span style=&quot;color:#000000&quot;&gt;execute&lt;/span&gt;();&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#aa5500&quot;&gt;// example - 2&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#770088&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;RangeBroadcast&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;flowContext&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#aa5500&quot;&gt;// 需要广播的数据&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        .&lt;span style=&quot;color:#000000&quot;&gt;setResponseMessage&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;cmdInfo&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;playerReady&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#aa5500&quot;&gt;// 添加需要接收广播的用户&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        .&lt;span style=&quot;color:#000000&quot;&gt;addUserId&lt;/span&gt;(&lt;span style=&quot;color:#116644&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;        &lt;span style=&quot;color:#aa5500&quot;&gt;// 执行广播&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;        .&lt;span style=&quot;color:#000000&quot;&gt;execute&lt;/span&gt;();&lt;/span&gt;&lt;/pre&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;h3&gt;&lt;span&gt;[light-game-room] 房间模块&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;移除 AbstractRoom broadcast 系列方法，开发者可使用 RoomBroadcastFlowContext 接口实现旧的兼容。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;移除 AbstractRoom createSend 方法，开发者可使用 ofRangeBroadcast 系列来代替。AbstractRoom 新增 RoomBroadcastEnhance，实现房间内的广播增强，该系列在语义上更清晰。&lt;/span&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;这里使用一个准备就绪的示例来演示，当有玩家准备时，需要通知房间内的其他玩家&lt;/span&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt; &lt;span&gt;&lt;span style=&quot;color:#770088&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;RoomService&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;roomService&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; ...;&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#555555&quot;&gt;@ActionMethod&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;RoomCmd&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;ready&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#770088&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#008855&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color:#0000ff&quot;&gt;ready&lt;/span&gt;(&lt;span style=&quot;color:#008855&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;ready&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;FlowContext&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;flowContext&lt;/span&gt;) {&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#008855&quot;&gt;long&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;userId&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;flowContext&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;getUserId&lt;/span&gt;();&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#aa5500&quot;&gt;// 得到玩家所在的房间&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;AbstractRoom&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;room&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#770088&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;roomService&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;getRoomByUserId&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;userId&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;    &lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#aa5500&quot;&gt;// 准备&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;PlayerReady&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;playerReady&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#770088&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;PlayerReady&lt;/span&gt;();&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;playerReady&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;userId&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;userId&lt;/span&gt;;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;playerReady&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;ready&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;ready&lt;/span&gt;;&lt;/span&gt;
 &lt;span&gt;  &lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#aa5500&quot;&gt;// 通知房间内的所有玩家，有玩家准备或取消准备了&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;room&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;ofRangeBroadcast&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;flowContext&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#aa5500&quot;&gt;// 响应数据（路由、业务数据）&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;            .&lt;span style=&quot;color:#000000&quot;&gt;setResponseMessage&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;flowContext&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;getCmdInfo&lt;/span&gt;(), &lt;span style=&quot;color:#000000&quot;&gt;playerReady&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;            .&lt;span style=&quot;color:#000000&quot;&gt;execute&lt;/span&gt;();&lt;/span&gt;
 &lt;span&gt;}&lt;/span&gt;
 &lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#aa5500&quot;&gt;// 准备或取消准备&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#555555&quot;&gt;@ProtobufClass&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#555555&quot;&gt;@FieldDefaults&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;level&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;AccessLevel&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;PUBLIC&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#770088&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#770088&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#0000ff&quot;&gt;PlayerReady&lt;/span&gt; {&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#aa5500&quot;&gt;/** 当前操作的玩家 userId */&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#008855&quot;&gt;long&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;userId&lt;/span&gt;;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#aa5500&quot;&gt;/** true 表示准备 */&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#008855&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;ready&lt;/span&gt;;&lt;/span&gt;
 &lt;span&gt;}&lt;/span&gt;&lt;/pre&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;AbstractRoom 增加 ifPlayerExist、ifPlayerNotExist 方法。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ifPlayerExist 方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;如果玩家在房间内，就执行给定的操作，否则不执行任何操作。&lt;/span&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;这里演示玩家加入房间的业务&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt; &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;RoomService&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;roomService&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; ...;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;AbstractRoom&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;room&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; ...;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#aa5500&quot;&gt;// 如果玩家不在房间内，就创建一个玩家，并让玩家加入房间&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;room&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;ifPlayerNotExist&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;userId&lt;/span&gt;, () &lt;span style=&quot;color:#981a1a&quot;&gt;-&amp;gt;&lt;/span&gt; {&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#aa5500&quot;&gt;// 玩家加入房间&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;FightPlayerEntity&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;newPlayer&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#770088&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;FightPlayerEntity&lt;/span&gt;();&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;newPlayer&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;setId&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;userId&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;    &lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#770088&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;roomService&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;addPlayer&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;room&lt;/span&gt;, &lt;span style=&quot;color:#000000&quot;&gt;newPlayer&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;});&lt;/span&gt;&lt;/pre&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ifPlayerNotExist 方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;如果玩家不在房间内，就执行给定的操作，否则不执行任何操作。&lt;/span&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p style=&quot;color:#333333; margin-left:.8em; margin-right:.8em; text-align:start&quot;&gt;&lt;span&gt;这里结合 RangeBroadcast，演示当有新玩家加入房间时，通知房间内的其他玩家。&lt;/span&gt;&lt;/p&gt; 
 &lt;pre&gt; &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;AbstractRoom&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;room&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; ...;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#aa5500&quot;&gt;// 有新玩家加入房间，通知其他玩家&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;&lt;span style=&quot;color:#000000&quot;&gt;room&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;ifPlayerExist&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;userId&lt;/span&gt;, (&lt;span style=&quot;color:#000000&quot;&gt;FightPlayerEntity&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;playerEntity&lt;/span&gt;) &lt;span style=&quot;color:#981a1a&quot;&gt;-&amp;gt;&lt;/span&gt; {&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;FightPlayer&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;fightPlayer&lt;/span&gt; &lt;span style=&quot;color:#981a1a&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;FightMapstruct&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;ME&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;convert&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;playerEntity&lt;/span&gt;);&lt;/span&gt;
 &lt;span&gt;    &lt;span style=&quot;color:#000000&quot;&gt;room&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;ofRangeBroadcast&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;flowContext&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;            .&lt;span style=&quot;color:#000000&quot;&gt;setResponseMessage&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;RoomCmd&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;of&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;RoomCmd&lt;/span&gt;.&lt;span style=&quot;color:#000000&quot;&gt;playerEnterRoomBroadcast&lt;/span&gt;), &lt;span style=&quot;color:#000000&quot;&gt;fightPlayer&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;            &lt;span style=&quot;color:#aa5500&quot;&gt;// 排除不需要通知的玩家（当前 userId 是自己）&lt;/span&gt;&lt;/span&gt;
 &lt;span&gt;            .&lt;span style=&quot;color:#000000&quot;&gt;removeUserId&lt;/span&gt;(&lt;span style=&quot;color:#000000&quot;&gt;userId&lt;/span&gt;)&lt;/span&gt;
 &lt;span&gt;            .&lt;span style=&quot;color:#000000&quot;&gt;execute&lt;/span&gt;();&lt;/span&gt;
 &lt;span&gt;});&lt;/span&gt;&lt;/pre&gt; 
 &lt;hr&gt; 
 &lt;h3&gt;&lt;span style=&quot;color:#40485b&quot;&gt;ioGame 使用趋势数据&lt;/span&gt;&lt;/h3&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;关注 ioGame 的游戏服务器开发者持续增多，&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#df2a3f&quot;&gt;2022-09 ~ 至今&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;各月&lt;/span&gt;&lt;span&gt;的统计数据；&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;这里的统计信息是关于开发者关注 ioGame 框架相关的，从统计数据中可以看出，由于 ioGame 上手简单，功能强大等优点，得到了众多开发者的关注。如果你想知道 ioGame 有没有人在使用，可以先到这里看下统计数据、开发者的评价与讨论。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgpxk93%23TwVa8&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://www.yuque.com/iohao/game/gpxk93#TwVa8&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;这里展示了每月的统计数据，统计数据来源于语雀后台，这些数据都是&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#df2a3f&quot;&gt;真实的、客观存在的、活的&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt; 
 &lt;div&gt; 
  &lt;blockquote&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#df2a3f&quot;&gt;因为成本的原因，某宝某多还没有出现能提供这种服务的商家，所以这样的统计数据也更具真实性。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/div&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;通过统计数据，我们可以看到每天会有很多开发者在访问 ioGame 的在线文档，并且这些统计数据不是来源于口嗨的，也不是主观创造的。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;所以，还在犹豫要不要使用 ioGame 的开发者们，更应该讨论的是 「为什么这些开发者会选择使用 ioGame」，而不是 ioGame 有没有人在使用的问题。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;点击我，到语雀后台查看 ioGame 的数据&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://foruda.gitee.com/images/1712545646696346363/d8a549f9_5475.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h2&gt;ioGame 网络游戏服务器框架简介&lt;/h2&gt; 
 &lt;ul&gt; 
  &lt;li&gt;无锁异步化、事件驱动的架构设计；轻量级，无需依赖任何第三方中间件或数据库就能支持集群、分布式&lt;/li&gt; 
  &lt;li&gt;通过 ioGame 可以很容易的搭建出一个集群无中心节点、集群自动化、多进程的分布式游戏服务器&lt;/li&gt; 
  &lt;li&gt;包体小、启动快、内存占用少、更加的节约、无需配置文件、提供了优雅的路由访问权限控制&lt;/li&gt; 
  &lt;li&gt;可同时支持多种连接方式：WS、UDP、TCP... 等；框架已支持全链路调用日志跟踪特性&lt;/li&gt; 
  &lt;li&gt;让开发者用一套业务代码，能轻松切换和扩展不同的通信协议：Protobuf、JSON&lt;/li&gt; 
  &lt;li&gt;近原生的性能；业务框架在单线程中平均每秒可以执行 1152 万次业务逻辑&lt;/li&gt; 
  &lt;li&gt;代码即联调文档、JSR380 验证、断言 + 异常机制 = 更少的维护成本&lt;/li&gt; 
  &lt;li&gt;框架具备智能的同进程亲和性；开发中，业务代码可定位与跳转&lt;/li&gt; 
  &lt;li&gt;架构部署灵活性与多样性：既可相互独立，又可相互融合&lt;/li&gt; 
  &lt;li&gt;可同时与同类型的多个游戏逻辑服通信并得到数据&lt;/li&gt; 
  &lt;li&gt;逻辑服之间可相互跨进程、跨机器进行通信&lt;/li&gt; 
  &lt;li&gt;支持玩家对游戏逻辑服进行动态绑定&lt;/li&gt; 
  &lt;li&gt;能与任何其他框架做融合共存&lt;/li&gt; 
  &lt;li&gt;对 webMVC 开发者友好&lt;/li&gt; 
  &lt;li&gt;无 spring 强依赖&lt;/li&gt; 
  &lt;li&gt;零学习成本&lt;/li&gt; 
  &lt;li&gt;javaSE&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;你是否想要开发一个&lt;/span&gt;&lt;strong&gt;&lt;span&gt;高性能、稳定、易用、自带负载均衡、避免类爆炸设计、可跨进程跨机器通信、集群无中心节点、集群自动化、有状态多进程的分布式的&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;网络编程服务器呢？如果是的话，这里向你推荐一个由 java 语言编写的网络编程框架 ioGame。下面将会从多个方面来对框架做一些简单的介绍。&lt;/span&gt;&lt;/p&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;ioGame 是一个&lt;/span&gt;&lt;span style=&quot;color:#262626&quot;&gt;轻量级的&lt;/span&gt;&lt;span&gt;网络编程框架，适用于&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#df2a3f&quot;&gt;网络游戏服务器、物联网、内部系统&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;及各种需要长连接的场景；&lt;/span&gt;&lt;/p&gt; 
  &lt;div&gt; 
   &lt;blockquote&gt; 
    &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;ioGame 有以下特点：&lt;/span&gt;&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;span&gt;无锁异步化、事件驱动的架构设计&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;同时支持 TCP、WebSocket、UDP 多种连接方式，并且可扩展&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;支持 protobuf、json 等不同的通信协议&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;集群无中心节点、集群自动化、分布式的设计&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span style=&quot;color:#000000&quot;&gt;真轻量级，不依赖任何第三方中间件或数据库就能支持集群、分布式&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;提供多种通讯方式，且逻辑服之间可以相互跨机器通信&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;框架为开发者提供了同步、异步、异步回调的方法，用于逻辑服之间的相互访问&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;ioGame 是纯 javaSE 的，使得 ioGame 能与其他框架方便的进行集成、融合；如 spring ... 等&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;学习成本低，开发体验好&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;支持多服单进程、多服多进程的启动和部署方式&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;提供游戏文档生成的辅助功能&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;包体小、启动快、内存占用少&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;提供优雅的路由访问权限控制&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;提供了灵活的线程扩展、设置&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;具备智能的同进程亲和性&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;具备全链路调用日志跟踪特性&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;业务框架提供了插件机制，插件是可插拨、可扩展的&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;JSR380 验证、断言 + 异常机制 = 更少的维护成本&lt;/span&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;span&gt;action 支持自动装箱、拆箱基础类型，用于解决&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fieimzn&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;协议碎片&lt;/span&gt;&lt;/a&gt;&lt;span&gt;的问题&lt;/span&gt;&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/blockquote&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;ioGame 是一个专为网络编程设计的&lt;/span&gt;&lt;span style=&quot;color:#262626&quot;&gt;轻量级&lt;/span&gt;&lt;span&gt;框架，它可以帮助你快速地搭建和运行自己的网络服务器。ioGame 适用于&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#df2a3f&quot;&gt;网络游戏服务器、物联网、内部系统&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;及各种需要长连接的场景。如各种类型和规模的网络游戏，无论是 H5、手游还是 PC 游戏，无论是简单的聊天室，还是复杂的&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;全球同服&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;、回合制游戏、策略游戏、放置休闲游戏、即时战斗、&lt;/span&gt;&lt;span&gt;MMORPG 等，ioGame 都可以满足你的需求。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#262626&quot;&gt;ioGame 在打包、内存占用、启动速度等方面也是优秀的。打 jar 包后大约&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;15MB&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;，应用通常会在&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;0.x 秒&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;内完成启动，内存占用小。详细请看&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzm6qg2%23LF8Qh&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;快速从零编写服务器完整示例&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color:#262626&quot;&gt;。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在生态融合方面，ioGame 可以很方便的&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fevkgnz&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;与&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;spring 集成&lt;/span&gt;&lt;/a&gt;&lt;span&gt;（5 行代码）；除了 spring 外，还能与任何其他的框架做&lt;/span&gt;&lt;strong&gt;&lt;span&gt;融合&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，如：&lt;/span&gt;&lt;span&gt;solon&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;... 等，从而使用其他框架的相关生态。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#262626&quot;&gt;ioGame 在架构上解决了传统框架所产生的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;N*N 问题&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;（&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fcklv8p&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;与传统架构对比&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color:#262626&quot;&gt;）。传统架构在扩展机器时，需要借助很多第三方中间件，如：Redis、MQ、ZooKeeper ... 等，才能满足整体架构的运作。通常，只要引入了需要安装的中间件才能做到扩展的，那么你的架构或者说框架，基本上与轻量级无缘了。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在轻量级方面，ioGame&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#df2a3f&quot;&gt;不依赖任何第三方&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;中间件或数据库&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#df2a3f&quot;&gt;就能支持集群、分布式&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，只需要 java 环境就可以运行。这意味着在使用上简单了，在部署上也为企业减少了部署成本、维护难度。使用 ioGame 时，只需一个依赖即可获得整个框架，而无需安装其他服务，如： Nginx、Redis、MQ、Mysql、ZooKeeper、Protobuf 协议编译工具 ... 等。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;ioGame 具备&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzurusq&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;全链路调用日志跟踪&lt;/span&gt;&lt;/a&gt;&lt;span&gt;特性，这在分布式下非常的实用。该特性为每个请求分配一个唯一标识，并记录在日志中，通过唯一标识可以快速的在日志中过滤出指定请求的信息。ioGame 提供的全链路调用日志跟踪特性更是强大，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;支持跨机器、跨进程&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。简单的说，从玩家的请求进来到结束，无论该请求经过了多少个游戏逻辑服，都能精准记录。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在通讯方式方面，大部分框架只能支持推送（广播）这一类型的通讯方式；ioGame 则提供了多种类型的通讯方式，通过对各种通讯方式的组合使用，可以简单完成以往难以完成的工作，并且这些通讯方式都支持跨进程、跨机器通信，且具备全链路调用日志跟踪。这些通讯方式分别是&lt;/span&gt;&lt;/p&gt; 
   &lt;ol&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fkrzxcmgoispw0gl8&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;请求响应&lt;/span&gt;&lt;/a&gt;&lt;span&gt;（单次请求处理）&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fqv4qfo&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;广播&lt;/span&gt;&lt;/a&gt;&lt;span&gt;（推送）&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fanguu6&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;单个逻辑服间的相互通讯&lt;/span&gt;&lt;/a&gt;&lt;span&gt;（可跨机器通信、可跨进程通信）&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Frf9rb9&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;与同类型多个逻辑服相互通讯&lt;/span&gt;&lt;/a&gt;&lt;span&gt;（可跨多个机器通信、可跨多个进程通信）&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzgaldoxz6zgg0tgn&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;脉冲通讯&lt;/span&gt;&lt;/a&gt;&lt;span&gt;（可跨多个机器通信、可跨多个进程通信）&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgmxz33&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;分布式事件总线&lt;/span&gt;&lt;/a&gt;&lt;span&gt;（类似 MQ、Redis 发布订阅机制；可跨多个机器通信、可跨多个进程通信）&lt;/span&gt;&lt;/li&gt; 
   &lt;/ol&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在编码风格上，ioGame 为开发者提供了类 MVC 的编码风格（无入侵的 Java Bean ），这种设计方式很好的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;避免了类爆炸&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。同时，框架为开发者提供了同步、异步、异步回调的方法，用于逻辑服之间的相互访问；这使得开发者所编写的代码会非常的优雅，并且具备全链路调用日志跟踪。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;从 ioGame21 开始，框架添加了虚拟线程的相关支持。各逻辑服之间通信阻塞部分使用虚拟线程，这样可以很好的避免阻塞业务线程，并大幅提高了框架的吞吐量。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在线程安全方面，框架为开发者解决了单个玩家的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;并发问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;；即使玩家重新登录后，也会使用相同的线程来消费业务，并推荐使用&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgmfy1k&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;领域事件&lt;/span&gt;&lt;/a&gt;&lt;span&gt;来解决同一房间或业务内多个玩家的并发问题。&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Feixd6x&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;框架在线程的扩展性&lt;/span&gt;&lt;/a&gt;&lt;span&gt;上提供了友好的支持，开发者可以很容易的编写出无锁并发代码，这得益于 ioGame 独有的线程执行器设计与扩展。换句话说，你不会因为并发问题烦恼。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在无锁并发方面，ioGame 提供了优雅、独特的线程执行器设计。通过该特性，开发者能轻易的编写出无锁高并发的代码。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在连接方式方面，ioGame 允许开发者&lt;/span&gt;&lt;strong&gt;&lt;span&gt;使用一套业务代码&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;同时支持&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;多种连接方式，无需进行任何修改。ioGame 已经支持了 TCP、WebSocket 和 UDP 连接方式，并且也支持在这几种连接方式之间进行灵活切换。连接方式是可扩展的，并且扩展操作也很简单，这意味着之后如果支持了 KCP，无论你当前项目使用的是 TCP、WebSocket 还是 UDP，都可以切换成 KCP；注意了，即使切换到 KCP 的连接方式，现有的业务代码也无需改变。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在通信协议方面，ioGame 让开发者&lt;/span&gt;&lt;strong&gt;&lt;span&gt;用一套业务代码&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，就能轻松&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fuq2zrltrc7to27bt&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;切换和扩展不同的通信协议&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，如 Protobuf、JSON 等。只需一行代码，就可以从 Protobuf 切换到 JSON，无需改变业务方法。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在增减协议方面，ioGame 可以让你在&lt;/span&gt;&lt;strong&gt;&lt;span&gt;新增或减少协议&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;时，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;无需重启&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;游戏对外服与 Broker（游戏网关）；这样既能避免玩家断线，又能避免因新增、减少协议而重启所有机器的痛点。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在协议碎片方面，action 支持自动装箱、拆箱基础类型特性，用于解决&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fieimzn&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;协议碎片&lt;/span&gt;&lt;/a&gt;&lt;span&gt;的问题。同时该特性除了能使你的业务代码更加清晰以外，还能大幅提高开发者在该环节的生产力。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在集群方面，ioGame 的 Broker （游戏网关）采用无中心节点、&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fqmo56c&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;自动化的集群设计&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，所有节点平等且自治，不存在单点故障。集群能够&lt;/span&gt;&lt;strong&gt;&lt;span&gt;自动管理和弹性扩缩&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，节点加入或退出时，能够自动保证负载均衡和数据一致性，不影响服务可用性。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在分布式方面，ioGame 的逻辑服使用了分布式设计思想，将服务器分为&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fwotnhl&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;游戏对外服&lt;/span&gt;&lt;/a&gt;&lt;span&gt;、&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fensevx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;游戏逻辑服&lt;/span&gt;&lt;/a&gt;&lt;span&gt;等不同层次，并且每一层都有明确的职责和接口。这样可以提高代码可读性和可维护性，并且方便进行&lt;/span&gt;&lt;strong&gt;&lt;span&gt;水平扩展&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在学习成本方面，ioGame 的学习成本非常低，可以说是&lt;/span&gt;&lt;strong&gt;&lt;span&gt;零学习成本&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，即使没有游戏编程经验，也能轻松上手。开发者只需掌握普通的 java 方法或 webMVC 相关知识，就能用框架开发业务。框架不要求开发者改变编码习惯，而是自身适应开发者的需求。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Funp26u&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;同进程亲和性&lt;/span&gt;&lt;/a&gt;&lt;span&gt;方面，在同一进程内，不同 Netty 实例之间的通信，是通过内存进行传输的，不需要经过网络传输，数据传输速度极快。同进程亲和性指的是，优先访问同进程内的游戏逻辑服，当同进程内没有能处理请求的游戏逻辑服时，才会去其他进程或机器中查找能处理请求的游戏逻辑服；简单点说，框架对于请求的处理很智能，会优先将请求给同进程内的逻辑服消费。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在开发体验方面，ioGame 非常注重开发者的开发体验；框架提供了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fghng6g&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;JSR380 验证&lt;/span&gt;&lt;/a&gt;&lt;span&gt;、&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Favlo99&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;断言 + 异常机制&lt;/span&gt;&lt;/a&gt;&lt;span&gt;、&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fpf3sx0&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;业务代码定位&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，action 支持自动装箱、拆箱基础类型，用于解决&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fieimzn&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;协议碎片&lt;/span&gt;&lt;/a&gt;&lt;span&gt;的问题 ... 等。诸多丰富的功能，使得开发者的业务代码更加的清晰、简洁；&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;业务框架提供了&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fbsgvzglvlr5tenao&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;插件&lt;/span&gt;&lt;/a&gt;&lt;span&gt;机制，插件是可插拨、可扩展的。框架内置提供了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fpf3sx0&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;DebugInOut&lt;/span&gt;&lt;/a&gt;&lt;span&gt;、&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fznapzm1dqgehdyw8&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;action 调用统计&lt;/span&gt;&lt;/a&gt;&lt;span&gt;、&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzoqabk4gez3bckis&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;业务线程监控插件&lt;/span&gt;&lt;/a&gt;&lt;span&gt;、&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fumzk2d6lovo4n9gz&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;各时间段调用统计插件&lt;/span&gt;&lt;/a&gt;&lt;span&gt;... 等插件；不同的插件提供了不同的关注点，比如我们可以使用调用、监控等插件相互配合，可以让我们在开发阶段就知道&lt;/span&gt;&lt;strong&gt;&lt;span&gt;是否存在性能问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。合理利用好各个插件，可以让我们在开发阶段就能知道问题所在，提前发现问题，提前预防问题。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;在分布式开发体验方面，通常在开发分布式应用时是需要启动多个进程的。这会让调试与排查问题变得非常困难，从而降低开发者的效率、增加工作量等，这也是很多框架都&lt;/span&gt;&lt;strong&gt;&lt;span&gt;解决不了的问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，但 ioGame 做到了！ioGame 支持多服单进程的启动方式，这使得开发者在开发和调试分布式系统时更加简单。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;与前端对接联调方面，ioGame 提供了&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Firth38&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;游戏文档生成&lt;/span&gt;&lt;/a&gt;&lt;span&gt;的辅助功能，可以做到&lt;/span&gt;&lt;strong&gt;&lt;span&gt;代码即对接文档&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。简单地说，当业务代码编写完后，框架会自动生成最新的文档。如果没有游戏文档的生成，那么你将要抽出一些时间来编写、维护对接文档的工作，而且当团队人数多了之后，文档就会很乱、不同步、不是最新的、忘记更新等情况就会出现。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#262626&quot;&gt;在部署方面，ioGame 支持&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;多服单进程&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;的方式部署，也支持&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;多服多进程&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;多机器的方式部署；在部署方式上可以随意的切换而不需要更改代码。日常中我们可以按照单体思维开发，到了生产可以选择使用多进程的方式部署。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#262626&quot;&gt;在安全方面，所有的游戏逻辑服&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fcklv8p%23NQ6Oc&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;不需要开放端口，天然地避免了扫描攻击&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color:#262626&quot;&gt;。由于不需要为每个逻辑服分配独立的端口，那么我们在使用诸如云服务器之类的服务时，就不需要担心端口开放权限的问题了。别小看这一个环节，通常这些小细节最浪费开发者的时间。由于我们不需要管理这些 IP:Port，&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;这部分的工作量就自然地消失了&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#333333&quot;&gt;在模拟客户端测试方面，ioGame 提供了&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Ftc83ud&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;压测 &amp;amp; 模拟客户端请求&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color:#333333&quot;&gt;模块。此模块是用于模拟客户端，简化模拟工作量，只需要编写对应请求与回调。除了可以模拟简单的请求外，通常还可以做一些复杂的请求编排，并支持复杂业务的压测。&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#333333&quot;&gt;与单元测试不同的是，该模块可以模拟真实的网络环境，并且在模拟测试的过程中与服务器的交互是可持续的、可互动的，同时也是支持自动化的&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#333333&quot;&gt;。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;在&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzqgdv3g9if8w37vr&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;架构灵活性&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color:#000000&quot;&gt;方面，ioGame 的架构由三部分组成：1. 游戏对外服、2.Broker（游戏网关）、3. 游戏逻辑服；三者既可相互独立，又可相互融合。这意味着使用 ioGame 可以&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#df2a3f&quot;&gt;适应任何类型的游戏&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;，因为只需通过调整部署方式，就可以满足不同类型的游戏需求。在 ioGame 中进行这些调整工作非常简单，而且不会对现有代码产生不良影响。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#000000&quot;&gt;架构是可以动态扩缩的，游戏对外服、游戏逻辑服、Broker（游戏网关）都&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;支持动态增加和减少&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;。无论未来玩家数量增加或减少，我们都能够轻松应对。同时，架构是&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;支持玩家无感知更新&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;的，这得益于分布式设计。举例来说，如果 A 类型的游戏逻辑服需要增加一些新功能，我们可以启动 A-3、A-4 等已经支持了新功能的服务器，然后逐步将之前的 A-1 和 A-2 下线，从而实现了无感知的更新。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;开发者基于 ioGame 编写的项目模块，通常是条理清晰的，得益于框架对&lt;/span&gt;&lt;strong&gt;&lt;span&gt;路由的合理设计&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，同时也为路由提供了优雅的&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fnap5y8p5fevhv99y&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;访问权限控制&lt;/span&gt;&lt;/a&gt;&lt;span&gt;。当我们整理好这些模块后，对于其他开发者接管项目或后续的维护中，会是一个不错的帮助（&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fruaqza%2F%23OBwXQ&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;模块的整理与建议&lt;/span&gt;&lt;/a&gt;&lt;span&gt;）。或许现阶段你感受不到这块的威力，随着你深入地使用实践就能体会到这么设计的诸多好处与优势。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#262626&quot;&gt;开发者基于 ioGame 编写的项目，通常是语法简洁的、高性能的、低延迟的。框架最低要求使用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;JDK21&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;，这样即可以让项目享受到&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;分代 ZGC&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;带来的改进，还能享受语法上的简洁。分代 ZGC 远低于其&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;亚毫秒级&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;暂停时间的目标，&lt;/span&gt;&lt;span&gt;可以在不影响游戏速度的情况下，清理掉多余的内存；这样就不会出现卡顿或者崩溃的问题了，&lt;/span&gt;&lt;span style=&quot;color:#262626&quot;&gt;相当于在项目中变相的引入了一位 JVM 调优大师。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;综上所述，ioGame 是一个非常适合网络游戏开发的框架。可以让你轻松地创建高性能、低延迟、易扩展的游戏服务器，并且节省时间和资源。如果你想要快速地开发出令人惊艳的网络游戏，请不要犹豫，立即选择 ioGame 吧！框架&lt;/span&gt;&lt;span style=&quot;color:#262626&quot;&gt;屏蔽了很多复杂且重复性的工作，并可为项目中的功能模块结构、开发流程等进行&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;清晰的组织定义&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#262626&quot;&gt;，减少了后续的项目维护成本。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#333333&quot;&gt;框架在开发、部署、压测 &amp;amp; 模拟测试 ... 等，各个阶段都提供了很好的支持。&lt;/span&gt;&lt;span&gt;相信你已经对 ioGame 有了一个初步的了解，虽然还有很多丰富的功能与特性没有介绍到，但你可以通过后续的实践过程中来深入了解。感谢你的阅读，并期待你使用 ioGame 来打造自己的游戏服务器。&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;h2&gt;&lt;span&gt;ioGame 的组成&lt;/span&gt;&lt;/h2&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;ioGame 由 [&lt;/span&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;网络通信框架&lt;/span&gt;&lt;span&gt;] 和 [&lt;/span&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;业务框架&lt;/span&gt;&lt;span&gt;] 组成&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#333333&quot;&gt;网络通信框架：职责是各服务器之间的网络通信&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span style=&quot;color:#333333&quot;&gt;业务框架：职责是业务逻辑的处理方式和编写方式&lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;网络通信框架&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.sofastack.tech%2Fprojects%2Fsofa-bolt%2Foverview%2F&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;SOFABolt&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;是蚂蚁金融服务集团开发的一套基于 Netty 实现的网络通信框架。&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span&gt;为了让 Java 程序员能将&lt;/span&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;更多的精力放在&lt;/span&gt;&lt;span&gt;基于网络通信的&lt;/span&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;业务逻辑实现上&lt;/span&gt;&lt;span&gt;，而不是过多的纠结于网络底层 NIO 的实现以及处理难以调试的网络问题，Netty 应运而生。&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;为了让中间件开发者能将更多的精力放在产品功能特性实现上，而不是重复地一遍遍制造通信框架的轮子，SOFABolt 应运而生。&lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;Bolt 名字取自迪士尼动画 - 闪电狗，是一个基于 Netty 最佳实践的&lt;/span&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;轻量、易用、高性能、易扩展&lt;/span&gt;&lt;span&gt;的通信框架。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&amp;nbsp;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;业务框架&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;如果说&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;sofa-bolt&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;是为了让 Java 程序员能&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;将更多的精力放在基于网络通信的业务逻辑实现上&lt;/span&gt;&lt;span&gt;。而业务框架正是&lt;/span&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;解决&lt;/span&gt;&lt;span&gt;业务逻辑&lt;/span&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;如何方便实现&lt;/span&gt;&lt;span&gt;这一问题上。业务框架是游戏框架的一部分，职责是简化程序员的业务逻辑实现，业务框架使程序员能够快速的开始编写游戏业务。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;业务框架对于每个 action （即业务的处理方法） 都是通过&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/p/reflectasm&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;asm&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;与 Singleton、Flyweight 、Command 等设计模式结合，对 action 的获取上通过 array 来得到，是一种近原生的方式。&lt;/span&gt;&lt;/p&gt; 
 &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;单线程中，业务框架平均每秒可以执行 1152 万次业务逻辑。&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;div&gt; 
  &lt;h2&gt;&lt;span&gt;架构简图&lt;/span&gt;&lt;/h2&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;387&quot; src=&quot;https://foruda.gitee.com/images/1708310869810934709/12963674_5475.jpeg&quot; width=&quot;621&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0; text-align:center&quot;&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;通过 ioGame 你可以很容易的搭建出一个集群无中心节点、集群自动化、分布式的网络游戏服务器！&lt;/span&gt;&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;从图中可以看出，游戏网关支持以集群方式启动多个实例。这个设计选择了集群的方式，因为游戏网关通常是无状态的，主要作用是解耦各逻辑服之间的关系、负载均衡、调度和转发任务。&lt;/span&gt;&lt;/p&gt; 
    &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;而游戏对外服、游戏逻辑服使用分布式设计，支持启动多个相同类型的服务。这意味着，当玩家数量增加时，我们可以轻松增加相应类型的游戏逻辑服以处理更多请求。&lt;/span&gt;&lt;/p&gt; 
    &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;以游戏逻辑服为例，假设我们启动了两个 A 类型的游戏逻辑服，分别为 A-1 和 A-2。当玩家向 A 类型的游戏逻辑服发起多次请求时，游戏网关会使用默认的随机负载策略将请求分配给 A-1 和 A-2 来处理。&lt;/span&gt;&lt;/p&gt; 
    &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;现在我们明白，游戏对外服和游戏逻辑服都支持动态增加和减少。无论未来玩家数量增加或减少，我们都能够轻松应对。架构是&lt;/span&gt;&lt;strong&gt;&lt;span&gt;支持玩家无感知更新&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的，这得益于分布式设计。举例来说，如果 A 类型的游戏逻辑服需要增加一些新功能，我们可以启动 A-3、A-4 等已经支持了新功能的服务器，然后逐步将之前的 A-1 和 A-2 下线，从而实现了无感知的更新。&lt;/span&gt;&lt;/p&gt; 
    &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;此外，框架还支持玩家&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fidl1wm&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;动态绑定游戏逻辑服&lt;/span&gt;&lt;/a&gt;&lt;span&gt;；玩家与游戏逻辑服绑定后，之后的请求都由该游戏逻辑服来处理。&lt;/span&gt;&lt;/p&gt; 
    &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;除了游戏之外，ioGame 也适用于物联网相关项目。只需将图中的玩家视为具体的设备，即使存在数亿个设备，ioGame 的架构也可以轻松支持。从 2022 年开始，已经有一些物联网公司开始采用这一解决方案，并得到了很好的体验。&lt;/span&gt;&lt;/p&gt; 
    &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;ioGame 适用于&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#df2a3f&quot;&gt;网络游戏服务器、物联网、内部系统&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;及各种需要长连接的场景；&lt;/span&gt;&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
  &lt;div&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span&gt;无锁异步化与事件驱动的架构设计、集群无中心节点、自带负载均衡、分布式支持、可动态增减机器、避免类爆炸的设计；&lt;/span&gt;&lt;/p&gt; 
  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; style=&quot;border-collapse:collapse; border-spacing:1px; border:1px solid #d9d9d9; box-sizing:border-box; color:#444444; display:block; font-size:14px; line-height:inherit; margin:0px 0px 20px; max-width:100%; overflow:auto; table-layout:fixed; width:583px; word-break:keep-all&quot;&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;background-color:#f4f5f5; border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;名称&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
     &lt;td style=&quot;background-color:#f4f5f5; border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;扩展方式&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
     &lt;td style=&quot;background-color:#f4f5f5; border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;职责&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;游戏对外服&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;分布式&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;与玩家连接、交互&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;游戏逻辑服&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;分布式&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;处理具体业务逻辑&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td style=&quot;border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;Broker（游戏网关）&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;集群&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
     &lt;td style=&quot;border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;调度和转发任务；&lt;/span&gt;&lt;/p&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
  &lt;hr&gt; 
  &lt;h2&gt;通过 ioGame 可以使得游戏编程变得简单，下面是一个业务示例&lt;/h2&gt; 
  &lt;div&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;协议文件定义&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;首先我们自定义一个协议文件，这个协议文件作为我们的业务载体描述。这个协议是纯 java 代码编写的，使用的是 jprotobuf，jprotobuf 是对&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;google protobuf&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;的简化使用，性能同等。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;可以把这理解成 DTO、POJO、业务数据载体等，其主要目的是用于业务数据的传输；&lt;/span&gt;&lt;/p&gt; 
   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;/** 请求 */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;@ProtobufClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;@FieldDefaults&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(level = AccessLevel.PUBLIC)
public class HelloReq {
    &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;name&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;Action&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#333333&quot;&gt;游戏服务器的编程，游戏服务器接收业务数据后，对业务数据进行处理；下面这段代码可以同时支持 TCP、WebSocket、UDP 通信方式。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#333333&quot;&gt;示例代码中展示了玩家的请求与响应处理，还展示了跨服（跨进程、跨机器）的请求处理的示例。&lt;/span&gt;&lt;span style=&quot;background-color:#f5f5f5; color:#262626&quot;&gt;无入侵的 Java Bean。&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;@ActionController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)
&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;public&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;DemoAction&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;{
    &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;@ActionMethod&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)
    &lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;public&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; HelloReq &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;here&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;(HelloReq helloReq)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;{
        &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;// 业务数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;var&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; newHelloReq = &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;new&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; HelloReq();
        newHelloReq.name = helloReq.name + &lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&quot;, I&#39;m here &quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
        &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; newHelloReq;
    }

    &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;// 注意，这个方法只是为了演示而写的；（ioGame21 开始支持）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;// 效果与上面的方法一样，只不过是用广播（推送）的方式将数据返回给请求方&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;@ActionMethod&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)
    &lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;public&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;here&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;(HelloReq helloReq, FlowContext flowContext)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;{
        &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;// 业务数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;var&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; newHelloReq = &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;new&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; HelloReq();
        newHelloReq.name = helloReq.name + &lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&quot;, I&#39;m here &quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;

        flowContext.broadcastMe(newHelloReq);
    }

    &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;// 跨服调用示例，下面分别展示了同步与异步回调的写法&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;testShowInvokeModule&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;(FlowContext flowContext)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;{
        &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;/*
         * 框架为跨服请求提供了同步、异步、异步回调的编码风格 api。（ioGame21 开始支持）
         */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;var&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; cmdInfo = CmdInfo.of(&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;,&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;);
        &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;var&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; yourData = ... 你的请求参数
        
        &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;// 跨服请求（异步回调 - 无阻塞）-- 路由、请求参数、回调。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
        flowContext.invokeModuleMessageAsync(cmdInfo, yourData, responseMessage -&amp;gt; {
            &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;var&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; helloReq = responseMessage.getData(HelloReq&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
             &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;// --- 此异步回调，具备全链路调用日志跟踪 ---&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
            log.info(&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&quot;异步回调 : {}&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, helloReq);
        });


        &lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;&lt;span style=&quot;color:#6a737d&quot;&gt;// 跨服请求（同步 - 阻塞）-- 路由、请求参数。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
        ResponseMessage responseMessage = flowContext.invokeModuleMessage(cmdInfo, yourData);
        &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;var&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; helloReq = responseMessage.getData(HelloReq&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
        log.info(&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&lt;span style=&quot;color:#032f62&quot;&gt;&quot;同步调用 : {}&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, helloReq);
    }
}&lt;/code&gt;&lt;/pre&gt; 
  &lt;div&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;一个方法（here）在业务框架中表示一个&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fsqcevl&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Action&lt;/span&gt;&lt;/a&gt;&lt;span&gt;（一个业务动作）。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;方法声明的参数是用于接收前端传入的业务数据，在方法 return 时，数据就可以被游戏前端接收到。程序员可以不需要关心业务框架的内部细节。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;从上面的示例可以看出，这和普通的 java 类并无区别，同时这种设计方式&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#fa8c16&quot;&gt;避免了类爆炸&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。如果&lt;/span&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;只负责编写游戏业务&lt;/span&gt;&lt;span&gt;，那么对于业务框架的学习可以&lt;/span&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;到此为止&lt;/span&gt;&lt;span&gt;了。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#f5222d&quot;&gt;游戏编程就是如此简单&lt;/span&gt;&lt;span&gt;！&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&amp;nbsp;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;&lt;span&gt;问：我可以开始游戏服务&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span style=&quot;color:#333333&quot;&gt;器&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;的编程了吗？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;是的，你已经可以开始游戏服务&lt;/span&gt;&lt;span style=&quot;color:#333333&quot;&gt;器&lt;/span&gt;&lt;span&gt;的编程了。&lt;/span&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&amp;nbsp;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;&lt;span&gt;访问示例（控制枱）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;当我们访问&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;here&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;方法时（通常由游戏前端来请求），控制枱将会打印&lt;/span&gt;&lt;/p&gt; 
   &lt;pre&gt;&lt;code&gt;┏━━━━━ &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;Debug&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. &lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;[(DemoAction.java:4).hello]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; ━━━━━ &lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;[cmd:1-0 65536]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; ━━━━━ &lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;[逻辑服 [xxx 逻辑服]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;-&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;:&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;[76526c134cc88232379167be83e4ddfc]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;]
┣ &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;userId&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
┣ 参数: &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;active&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;HelloReq&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(id=&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;101&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, name=塔姆)
┣ 响应: &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;HelloReq&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(name=塔姆, I&#39;m here )
┣ 时间: &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;&lt;span style=&quot;color:#d73a49&quot;&gt;ms&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; (业务方法总耗时)
┗━━━━━ &lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;[ioGameVersion]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; ━━━━━ &lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;[线程:User-8-2]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; ━━━━━━━ &lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;&lt;span style=&quot;color:#6f42c1&quot;&gt;[traceId:956230991452569600]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━&lt;/code&gt;&lt;/pre&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&amp;nbsp;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;&lt;span&gt;控制枱打印说明&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
   &lt;div&gt; 
    &lt;blockquote&gt; 
     &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#e8323c&quot;&gt;Debug. [(DemoAction.java:4).here]&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;:&lt;/span&gt;&lt;/p&gt; 
     &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示执行业务的是&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;DemoAction&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;类下的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;here&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;方法，&lt;/span&gt;&lt;span style=&quot;color:#f5222d&quot;&gt;4&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;表示业务方法所在的代码行数。&lt;/span&gt;&lt;/p&gt; 
     &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在工具中点击控制枱的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#000000&quot;&gt;DemoAction.java:4&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;这条信息，就可以跳转到对应的代码中（&lt;/span&gt;&lt;span style=&quot;color:#52c41a&quot;&gt;快速导航到对应的代码&lt;/span&gt;&lt;span&gt;），这是一个开发良好体验的开始！&lt;/span&gt;&lt;/p&gt; 
     &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#f5222d&quot;&gt;userId&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;: 当前发起请求的，用户 id。&lt;/span&gt;&lt;/p&gt; 
     &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#f5222d&quot;&gt;参数&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;: 通常是游戏前端传入的值。&lt;/span&gt;&lt;/p&gt; 
     &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#f5222d&quot;&gt;响应&lt;/span&gt;&lt;span&gt;：通常是业务方法返回的值 ，业务框架会把这个返回值推送到游戏前端。&lt;/span&gt;&lt;/p&gt; 
     &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#f5222d&quot;&gt;时间&lt;/span&gt;&lt;span&gt;：执行业务方法总耗时，我们可根据业务方法总耗时的时长来优化业务。&lt;/span&gt;&lt;/p&gt; 
     &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#f5222d&quot;&gt;路由信息&lt;/span&gt;&lt;span&gt;：[cmd - subCmd]&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fsoxp4u&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;路由&lt;/span&gt;&lt;/a&gt;&lt;span&gt;是唯一的访问地址。&lt;/span&gt;&lt;/p&gt; 
     &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#df2a3f&quot;&gt;ioGameVersion&lt;/span&gt;&lt;span&gt;：表示当前所使用的 ioGame 版本。&lt;/span&gt;&lt;/p&gt; 
     &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#df2a3f&quot;&gt;线程&lt;/span&gt;&lt;span&gt;：当前执行 action 所使用的线程。&lt;/span&gt;&lt;/p&gt; 
     &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#df2a3f&quot;&gt;traceId&lt;/span&gt;&lt;span&gt;：全链路调用日志跟踪 id，每个请求唯一。（该特性在分布式下非常实用）&lt;/span&gt;&lt;/p&gt; 
     &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;color:#df2a3f&quot;&gt;逻辑服&lt;/span&gt;&lt;span&gt;：当前游戏逻辑服与其 id&lt;/span&gt;&lt;/p&gt; 
    &lt;/blockquote&gt; 
   &lt;/div&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&amp;nbsp;&lt;/p&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;有了以上信息，游戏开发者可以很快的定位问题。如果没有可视化的信息，开发中会浪费很多时间在前后端的沟通上。问题包括：&lt;/span&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;span&gt;是否传参问题 （游戏前端说传了）&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;是否响应问题（游戏后端说返回了）&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;业务执行时长问题 （游戏前端说没收到响应， 游戏后端说早就响应了）&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span&gt;其中&lt;/span&gt;&lt;span style=&quot;color:#f5222d&quot;&gt;代码导航&lt;/span&gt;&lt;span&gt;可以让开发者快速的跳转到业务类对应代码中，在多人合作的项目中，可以快速的知道业务经过了哪些方法的执行，使得我们可以快速的进行阅读或修改；&lt;/span&gt;&lt;/p&gt; 
   &lt;hr&gt; 
   &lt;div&gt;
    &amp;nbsp;
   &lt;/div&gt; 
   &lt;h2&gt;&lt;span&gt;框架内置的其他功能&lt;/span&gt;&lt;/h2&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;&lt;span&gt;内置多种可选模块，可按需选择，以方便应用开发：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgmfy1k&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;领域事件&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;（&lt;/span&gt;&lt;span style=&quot;color:#333333&quot;&gt;轻量级&lt;/span&gt;&lt;span&gt;单机最快 MQ --&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color:#333333&quot;&gt;disruptor&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;color:#333333&quot;&gt;；通过&lt;/span&gt;&lt;span&gt;领域事件模块，可为你的系统实现类似 Guava-EventBus、Spring 事件驱动模型 ApplicationEvent、业务解耦、规避并发、不阻塞主线程... 等，各种浪操作）&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fniflk0&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;任务延时器&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;（将来某个时间可对任务进行执行、暂停、取消等操作，并不是类似 Quartz 的任务调度）&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fekx6ve&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;多环境切换&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;（不同运行环境下的配置支持）&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fvpe2t6&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;light-jprotobuf&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;（&lt;/span&gt;&lt;span style=&quot;color:#333333&quot;&gt;补足 jprotobuf 不能让多个对象在单个 .proto 源文件中生成的需求，并简化 jprotobuf 对源文件的注释&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fwz7af5&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;分布式锁&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;(基于 Redisson 的简单实现)&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;&lt;span&gt;内置的其他功能：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fuueq3i&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;心跳相关&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fhv5qqh&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;用户上线、离线相关的钩子方法&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fwg6lk7&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;UserSessions&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;（对所有用户 UserSession 的管理，统计在线用户等）&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fwg6lk7&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;UserSession&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;(与 channel 是 1:1 的关系，可取到对应的 userId、channel 等信息。)&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Ftywkqv&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;登录相关&lt;/span&gt;&lt;/a&gt;&lt;span&gt;（提供重复登录、顶号等相关增强功能）&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fieimzn&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;业务参数基础类型，自动装箱、拆箱&lt;/span&gt;&lt;/a&gt;&lt;span&gt;（解决协议碎片）&lt;/span&gt;&lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;hr&gt; 
   &lt;h2&gt;&lt;span&gt;适合人群？&lt;/span&gt;&lt;/h2&gt; 
   &lt;ol&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#333333&quot;&gt;长期从事 web 内部系统开发人员， 想了解游戏的&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#333333&quot;&gt;刚从事游戏开发的&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#333333&quot;&gt;未从事过游戏开发，但却对其感兴趣的&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;对设计模式在实践中的应用和 sofa-bolt 有兴趣的学习者&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span&gt;可以接受新鲜事物的&lt;/span&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;span style=&quot;color:#40485b&quot;&gt;想放弃祖传代码的&lt;/span&gt;&lt;/li&gt; 
   &lt;/ol&gt; 
   &lt;p style=&quot;margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;span style=&quot;color:#333333&quot;&gt;推荐实际编程经验一年以上的人员。&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;ioGame&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color:#ffffff; color:#333333&quot;&gt;提供了丰富的在线高质量使用文档，为你的团队助力，带上你们的小伙伴一起，这样就不用手把手的教了。&lt;/span&gt;&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289095/iogame-21-6-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289095/iogame-21-6-released</guid>
            <pubDate>Tue, 23 Apr 2024 08:05:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>React Native 0.74 发布，Yoga 3.0、Bridgeless 新架构</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;React Native 0.74 现已&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Freactnative.dev%2Fblog%2F2024%2F04%2F22%2Frelease-0.74&quot; target=&quot;_blank&quot;&gt;发布&lt;/a&gt;，此版本包含来自 57 位贡献者的超过 1673 项 commit。&lt;/p&gt; 
&lt;p&gt;新增了 Yoga 3.0、新架构下默认的 Bridgeless、批量 onLayout 更新（新架构）以及作为新项目默认包管理器的 Yarn 3。还删除了已弃用的 API，包括 PropTypes 的移除和对 PushNotificationIOS 的破坏性变更。在 Android 上，SDK 23 (Android 6.0) 现在是最低支持版本。&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;Yoga 3.0&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;New Layout Behaviors&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Yoga 3.0 通过提高样式的可预测性来改进布局，并支持为 Web 编写的渲染组件。此外，考虑到可能会对大量组件造成影响，React Native 会继续有意保留一些不正确的布局行为。计划在未来版本中，对布局一致性进行更精细的配置。&lt;/p&gt; 
&lt;table cellspacing=&quot;0&quot; style=&quot;-webkit-text-stroke-width:0px; background-color:rgba(255, 229, 100, 0.25); border-collapse:collapse; border:var(--ifm-table-border-width) solid var(--ifm-table-border-color); box-sizing:border-box; color:#4d3800; display:table; font-family:&amp;quot;Optimistic Display&amp;quot;,system-ui,-apple-system,sans-serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:300; letter-spacing:normal; margin:20px 0px 0px; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:664.917px; word-spacing:0px&quot;&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th style=&quot;background-color:var(--ifm-table-head-background); text-align:left&quot;&gt;STYLE&lt;/th&gt; 
   &lt;th style=&quot;background-color:var(--ifm-table-head-background); text-align:left&quot;&gt;前&lt;/th&gt; 
   &lt;th style=&quot;background-color:var(--ifm-table-head-background); text-align:left&quot;&gt;后&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;background-color:rgba(255, 229, 100, 0.25); border-style:solid; text-align:left&quot;&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;pre&gt;&lt;span style=&quot;color:var(--ifm-table-cell-color)&quot;&gt;&lt;span style=&quot;color:var(--prism-color)&quot;&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;code&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;color:#657b83&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#fac863&quot;&gt;View&lt;/span&gt;
  &lt;span style=&quot;color:#c5a5c5&quot;&gt;style&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;={{&lt;/span&gt;
    &lt;span style=&quot;color:#2aa198&quot;&gt;flexDirection&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#8dc891&quot;&gt;&#39;row&#39;&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
    &lt;span style=&quot;color:#2aa198&quot;&gt;backgroundColor&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#8dc891&quot;&gt;&#39;red&#39;&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
    &lt;span style=&quot;color:#2aa198&quot;&gt;margin&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#5a9bcf&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
    &lt;span style=&quot;color:#2aa198&quot;&gt;width&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#5a9bcf&quot;&gt;200&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
    &lt;span style=&quot;color:#2aa198&quot;&gt;height&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#5a9bcf&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
  &lt;span style=&quot;color:#657b83&quot;&gt;}}&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#657b83&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#fac863&quot;&gt;View&lt;/span&gt;
    &lt;span style=&quot;color:#c5a5c5&quot;&gt;style&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;={{&lt;/span&gt;
      &lt;span style=&quot;color:#2aa198&quot;&gt;flexDirection&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#8dc891&quot;&gt;&#39;row-reverse&#39;&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
      &lt;span style=&quot;color:#2aa198&quot;&gt;backgroundColor&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#8dc891&quot;&gt;&#39;blue&#39;&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
      &lt;span style=&quot;color:#2aa198&quot;&gt;flex&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#5a9bcf&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
      &lt;span style=&quot;color:#2aa198&quot;&gt;marginLeft&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#5a9bcf&quot;&gt;50&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
    &lt;span style=&quot;color:#657b83&quot;&gt;}}&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#657b83&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#fac863&quot;&gt;View&lt;/span&gt;
      &lt;span style=&quot;color:#c5a5c5&quot;&gt;style&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;={{&lt;/span&gt;
        &lt;span style=&quot;color:#2aa198&quot;&gt;backgroundColor&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#8dc891&quot;&gt;&#39;green&#39;&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
        &lt;span style=&quot;color:#2aa198&quot;&gt;height&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#8dc891&quot;&gt;&#39;50%&#39;&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
        &lt;span style=&quot;color:#2aa198&quot;&gt;flex&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#5a9bcf&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
        &lt;span style=&quot;color:#2aa198&quot;&gt;marginLeft&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#5a9bcf&quot;&gt;50&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
      &lt;span style=&quot;color:#657b83&quot;&gt;}}&lt;/span&gt;
    &lt;span style=&quot;color:#657b83&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#657b83&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color:#fac863&quot;&gt;View&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#657b83&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color:#fac863&quot;&gt;View&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
      &lt;div&gt;
       &amp;nbsp;
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td style=&quot;background-color:rgba(255, 229, 100, 0.25); border-style:solid; text-align:left&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;100&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-4c3b6fd9f8454a1db1e9fb8d4c24d580ff6.png&quot; width=&quot;200&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td style=&quot;background-color:rgba(255, 229, 100, 0.25); border-style:solid; text-align:left&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;100&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-7f29d8d317a9e243fe276514384c427ffb7.png&quot; width=&quot;200&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;对&lt;code&gt;align-content: &#39;space-evenly&#39;&lt;/code&gt;的支持&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img height=&quot;132&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-5b18a0b2769957fec6141f79ec81a9a97e5.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;对&lt;code&gt;position: &#39;static&#39;&lt;/code&gt;的支持&lt;/strong&gt;（&lt;code&gt;position: &#39;static&#39;&lt;/code&gt;仅在新架构中受支持）&lt;/p&gt; 
&lt;table cellspacing=&quot;0&quot; style=&quot;-webkit-text-stroke-width:0px; border-collapse:collapse; border:var(--ifm-table-border-width) solid var(--ifm-table-border-color); box-sizing:border-box; color:#1c1e21; display:table; font-family:&amp;quot;Optimistic Display&amp;quot;,system-ui,-apple-system,sans-serif; font-size:17px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:300; letter-spacing:normal; margin:20px 0px; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:701.583px; word-spacing:0px&quot;&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td style=&quot;border-style:solid; text-align:left&quot;&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;pre&gt;&lt;span style=&quot;color:var(--ifm-table-cell-color)&quot;&gt;&lt;span style=&quot;color:var(--prism-color)&quot;&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;code&gt;&lt;span style=&quot;color:#ffffff&quot;&gt;&lt;span style=&quot;color:#657b83&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#fac863&quot;&gt;View&lt;/span&gt;
  &lt;span style=&quot;color:#c5a5c5&quot;&gt;style&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;={{&lt;/span&gt;
    &lt;span style=&quot;color:#2aa198&quot;&gt;backgroundColor&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#8dc891&quot;&gt;&#39;blue&#39;&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
    &lt;span style=&quot;color:#2aa198&quot;&gt;width&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#5a9bcf&quot;&gt;200&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
    &lt;span style=&quot;color:#2aa198&quot;&gt;height&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#5a9bcf&quot;&gt;200&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
    &lt;span style=&quot;color:#2aa198&quot;&gt;flexDirection&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#8dc891&quot;&gt;&#39;row-reverse&#39;&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
  &lt;span style=&quot;color:#657b83&quot;&gt;}}&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#657b83&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#fac863&quot;&gt;View&lt;/span&gt;
    &lt;span style=&quot;color:#c5a5c5&quot;&gt;style&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;={{&lt;/span&gt;
      &lt;span style=&quot;color:#2aa198&quot;&gt;backgroundColor&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#8dc891&quot;&gt;&#39;red&#39;&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
      &lt;span style=&quot;color:#2aa198&quot;&gt;width&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#5a9bcf&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
      &lt;span style=&quot;color:#2aa198&quot;&gt;height&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#5a9bcf&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
      &lt;span style=&quot;color:#2aa198&quot;&gt;position&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#8dc891&quot;&gt;&#39;static&#39;&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
    &lt;span style=&quot;color:#657b83&quot;&gt;}}&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#657b83&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#fac863&quot;&gt;View&lt;/span&gt;
      &lt;span style=&quot;color:#c5a5c5&quot;&gt;style&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;={{&lt;/span&gt;
        &lt;span style=&quot;color:#2aa198&quot;&gt;backgroundColor&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#8dc891&quot;&gt;&#39;green&#39;&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
        &lt;span style=&quot;color:#2aa198&quot;&gt;width&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#5a9bcf&quot;&gt;25&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
        &lt;span style=&quot;color:#2aa198&quot;&gt;height&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#8dc891&quot;&gt;&#39;25%&#39;&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
        &lt;span style=&quot;color:#2aa198&quot;&gt;left&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#5a9bcf&quot;&gt;25&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
        &lt;span style=&quot;color:#2aa198&quot;&gt;top&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#5a9bcf&quot;&gt;25&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
        &lt;span style=&quot;color:#2aa198&quot;&gt;position&lt;/span&gt;&lt;span style=&quot;color:#fc929e&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color:#8dc891&quot;&gt;&#39;absolute&#39;&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;,&lt;/span&gt;
      &lt;span style=&quot;color:#657b83&quot;&gt;}}&lt;/span&gt;
    &lt;span style=&quot;color:#657b83&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#657b83&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color:#fac863&quot;&gt;View&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#657b83&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color:#fac863&quot;&gt;View&lt;/span&gt;&lt;span style=&quot;color:#657b83&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; 
      &lt;div&gt;
       &amp;nbsp;
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td style=&quot;border-style:solid; text-align:left&quot;&gt; &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;299&quot; src=&quot;https://oscimg.oschina.net/oscnet/up-c524a593e23a1cef95e080c32db15ac130d.png&quot; width=&quot;300&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;&lt;strong&gt;新架构：Bridgeless by Default&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;将&amp;nbsp;Bridgeless Mode 设为启用新架构时的默认模式，可以在&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Freactwg%2Freact-native-new-architecture%2Fdiscussions%2F174&quot; target=&quot;_blank&quot;&gt;这篇文章&lt;/a&gt;中了解更多详细信息。为了让过渡更顺利，项目团队增强了互操作层以 &amp;nbsp;cover Bridgeless，并与多个库合作以确保可以在 Bridgeless 模式下顺利使用。&lt;/p&gt; 
&lt;p&gt;同时还改进了新渲染器互操作层（New Renderer Interop layers），并设置为默认启用。有关新架构的更多信息，可以在&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Freactwg%2Freact-native-new-architecture%2Ftree%2Fmain%2Fdocs&quot; target=&quot;_blank&quot;&gt;react-native-new-architecture&lt;/a&gt;&amp;nbsp;存储库中查看文档。&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;新架构：Batched&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;onLayout&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;updates&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;onLayout callbacks 中的 State updates 现在可以分批进行。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;function MyComponent(props) {
  const [state1, setState1] = useState(false);
  const [state2, setState2] = useState(false);

  return (
    &amp;lt;View&amp;gt;
      &amp;lt;View
        onLayout={() =&amp;gt; {
          setState1(true);
       }}&amp;gt;
      &amp;lt;View
         onLayout={() =&amp;gt; {
          // When this event is executed, state1&#39;s new value is no longer observable here.
          setState2(true);
        }}&amp;gt;
      &amp;lt;/View&amp;gt;
    &amp;lt;/View&amp;gt;
  );
}&lt;/code&gt;&lt;/pre&gt; 
&lt;h4 style=&quot;text-align:start&quot;&gt;&lt;strong&gt;Yarn 3 for New Projects&lt;/strong&gt;&lt;/h4&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#1c1e21&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyarnpkg.com%2Fblog%2Frelease%2F3.0&quot; target=&quot;_blank&quot;&gt;Yarn 3&lt;/a&gt;&amp;nbsp;现在是使用 React Native Community CLI 初始化的新项目的默认 JavaScript 包管理器。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span style=&quot;color:#1c1e21&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Yarn 3.x 将与&lt;code&gt;nodeLinker: node-modules&lt;/code&gt;一起使用，这是一种与 React Native 库兼容的模式。这将取代以前的默认 Yarn Classic（1.x，已弃用）。要升级现有应用程序中的 Yarn 版本，可以按照本&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyarnpkg.com%2Fmigration%2Fguide&quot; target=&quot;_blank&quot;&gt;指南&lt;/a&gt;进行操作。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ yarn --help
━━━ Yarn Package Manager - 3.6.4 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  $ yarn &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span style=&quot;color:#1c1e21&quot;&gt;Community CLI 还支持通过&lt;/span&gt;&lt;code&gt;--pm&lt;/code&gt;&lt;span style=&quot;color:#1c1e21&quot;&gt;flag 与其他包管理器一起初始化项目（&lt;/span&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Freact-native-community%2Fcli%2Fblob%2Fmain%2Fdocs%2Finit.md&quot; target=&quot;_blank&quot;&gt;了解更多&lt;/a&gt;&lt;span style=&quot;color:#1c1e21&quot;&gt;）。&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align:start&quot;&gt;&lt;span style=&quot;color:#1c1e21&quot;&gt;更多详情可&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Freactnative.dev%2Fblog%2F2024%2F04%2F22%2Frelease-0.74&quot; target=&quot;_blank&quot;&gt;查看官方公告&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289088/react-native-0-74-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289088/react-native-0-74-released</guid>
            <pubDate>Tue, 23 Apr 2024 07:44:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>🎉 领域模型即服务 | Wow 3.3.8 发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;a href=&quot;https://ahoowang.gitee.io/wow/&quot;&gt;&lt;img alt=&quot;Wow:基于 DDD、EventSourcing 的现代响应式 CQRS 架构微服务开发框架&quot; src=&quot;https://static.oschina.net/uploads/img/202312/13135012_Zb9v.svg&quot; width=&quot;150&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;a href=&quot;https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FAhoo-Wang%2FWow%2Fblob%2Fmvp%2FLICENSE&quot;&gt;&lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/badge/license-Apache%202-4EB1BA.svg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/a&gt;&lt;span style=&quot;background-color:#ffffff; color:#40485b&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FAhoo-Wang%2FWow%2Freleases&quot;&gt;&lt;img alt=&quot;GitHub release&quot; src=&quot;https://img.shields.io/github/release/Ahoo-Wang/Wow.svg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/a&gt;&lt;span style=&quot;background-color:#ffffff; color:#40485b&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://gitee.com/link?target=https%3A%2F%2Fmaven-badges.herokuapp.com%2Fmaven-central%2Fme.ahoo.wow%2Fwow-core&quot;&gt;&lt;img alt=&quot;Maven Central&quot; src=&quot;https://maven-badges.herokuapp.com/maven-central/me.ahoo.wow/wow-core/badge.svg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/a&gt;&lt;span style=&quot;background-color:#ffffff; color:#40485b&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://gitee.com/link?target=https%3A%2F%2Fapp.codacy.com%2Fgh%2FAhoo-Wang%2FWow%2Fdashboard%3Futm_source%3Dgh%26utm_medium%3Dreferral%26utm_content%3D%26utm_campaign%3DBadge_grade&quot;&gt;&lt;img alt=&quot;Codacy Badge&quot; src=&quot;https://app.codacy.com/project/badge/Grade/cfc724df22db4f9387525258c8a59609&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/a&gt;&lt;span style=&quot;background-color:#ffffff; color:#40485b&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://gitee.com/link?target=https%3A%2F%2Fcodecov.io%2Fgh%2FAhoo-Wang%2FWow&quot;&gt;&lt;img alt=&quot;codecov&quot; src=&quot;https://codecov.io/gh/Ahoo-Wang/Wow/branch/main/graph/badge.svg?token=uloJrLoQir&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/a&gt;&lt;span style=&quot;background-color:#ffffff; color:#40485b&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FAhoo-Wang%2FWow&quot;&gt;&lt;img alt=&quot;Integration Test Status&quot; src=&quot;https://github.com/Ahoo-Wang/Wow/actions/workflows/integration-test.yml/badge.svg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/a&gt;&lt;span style=&quot;background-color:#ffffff; color:#40485b&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FKotlinBy%2Fawesome-kotlin&quot;&gt;&lt;img alt=&quot;Awesome Kotlin Badge&quot; src=&quot;https://kotlin.link/awesome-kotlin.svg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;strong&gt;领域驱动&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;|&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;事件驱动&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;|&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;测试驱动&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;|&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;声明式设计&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;|&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;响应式编程&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;|&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;命令查询职责分离&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;|&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;事件溯源&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;strong&gt;官方文档：&lt;/strong&gt;&lt;img alt=&quot;👉&quot; height=&quot;14&quot; src=&quot;https://cn-assets.gitee.com/assets/emoji/point_right-8d392cf32998e3bca12bb7b4ee10dae0.png&quot; width=&quot;14&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://ahoowang.gitee.io/wow/&quot; target=&quot;_blank&quot;&gt;https://ahoowang.gitee.io/wow/&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;img alt=&quot;👈&quot; height=&quot;14&quot; src=&quot;https://cn-assets.gitee.com/assets/emoji/point_left-4570b6929b8880ab2e8b8031007fef18.png&quot; width=&quot;14&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;更新内容&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;特性 (dashboard): 支持自定义搜索&lt;/li&gt; 
 &lt;li&gt;特性 (dashboard): 异常信息抽屉支持强制重试（&lt;code&gt;forceRetry&lt;/code&gt;）&lt;/li&gt; 
 &lt;li&gt;特性 (dashboard): 不可恢复的执行失败支持强制重试&lt;/li&gt; 
 &lt;li&gt;特性 (dashboard): 异常操作按钮支持显示异常基础信息&lt;/li&gt; 
 &lt;li&gt;特性 (dashboard): 支持显示所有记录数&lt;/li&gt; 
 &lt;li&gt;特性 (openapi): 添加&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;CommandFacadeRouteSpec&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;以支持统一的命令发送&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;RESTful&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;网关&lt;/li&gt; 
 &lt;li&gt;特性 (compensation):&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;ErrorDetails&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;支持属性&lt;code&gt;bindingErrors&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;依赖 (dashboard): 更新&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;angular&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;到&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;v17.3.5&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;依赖: 更新&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;org.springframework.boot:spring-boot-dependencies&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;到&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;v3.2.5&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;依赖 (doc): 更新&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;vitepress&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;到&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;v1.1.3&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Dashboard&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;img alt=&quot;Dashboard&quot; src=&quot;https://foruda.gitee.com/images/1713855399720132733/c12a9a0c_384561.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;简介&lt;/h2&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;是一个基于领域驱动设计和事件溯源的现代响应式&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;CQRS&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;微服务开发框架，历经多年生产环境验证。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;旨在帮助开发者构建现代化的、高性能且易于维护的微服务应用程序，充分发挥领域驱动设计和事件溯源等模式优势的同时降低应用的复杂性以及实践成本。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;值得一提的是，领域驱动设计和事件溯源并非微服务架构的专属，&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架不仅适用于微服务开发，同样也可用于构建基于领域驱动设计的单体应用程序。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;快速开始&lt;/h2&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;a href=&quot;https://ahoowang.gitee.io/wow/guide/getting-started.html&quot;&gt;使用 Wow 项目模板快速创建基于 Wow 框架的 DDD 项目&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;特性概览&lt;/h2&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img alt=&quot;Wow-Features&quot; src=&quot;https://gitee.com/AhooWang/Wow/raw/main/documentation/docs/public/images/Features.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;架构图&lt;/h2&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img alt=&quot;Wow-Architecture&quot; src=&quot;https://gitee.com/AhooWang/Wow/raw/main/documentation/docs/public/images/Architecture.svg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;背景&lt;/h2&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;随着业务的发展和复杂性的增加，传统的架构和开发方式逐渐显露出瓶颈。&lt;em&gt;领域驱动设计&lt;/em&gt;和&lt;em&gt;事件溯源&lt;/em&gt;等理念在提高系统设计的灵活性和可维护性方面表现出色，但在实践中常常需要面对复杂性和学习曲线的挑战。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架的目标是以简单易用的方式将领域驱动设计和事件溯源等理念融入到微服务应用开发中，降低开发者的学习成本，提高开发效率。 通过提供现代响应式的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;CQRS&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;架构和相关组件，&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架旨在让开发者更专注于业务逻辑的实现，而不必过多关心底层技术细节。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;经过多年的实践和不断的演进，&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架在生产环境中得到了验证，积累了丰富的经验。这些经验和反馈不仅丰富了框架的功能和性能，也为持续的改进和优化提供了宝贵的指导。&lt;/p&gt; 
&lt;h2&gt;对于开发者而言，&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架意味着什么？&lt;/h2&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;我曾告诫我的团队：如果我们过于依赖&lt;em&gt;数据驱动设计&lt;/em&gt;而忽视&lt;em&gt;领域驱动设计&lt;/em&gt;，我们最终将沦为&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;CRUD&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;工程师。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;&lt;em&gt;CRUD&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;工程师的竞争力和可替代性可想而知，这或许是为何会有&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;35&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;岁效应，企业显然更倾向于招募没有太多生活羁绊、更加廉价的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;25&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;岁&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;CRUD&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;工程师。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;业务价值&lt;/h3&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;软件系统的核心价值体现在业务价值上，研发人员不应只关注技术实现上，而是应该更多地关注业务价值的实现。 这其中的好处显而易见，当你开发完一个业务系统之后，你将变成一个业务专家，甚至比跟你合作的领域专家还要专业，因为你需要洞察业务细节。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;使用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架，意味着你将关注点放在围绕领域模型设计上，与业务专家一起探索业务领域，而不是关注于技术实现上。 你仅需编写领域模型，即可完成服务开发，&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架自动为你准备好&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;OpenAPI&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;接口。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;在《实现领域驱动设计》一书中，作者 Vaughn Vernon 提到：核心域才值得投入精力进行领域驱动设计， 但如果你使用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架，你将发现，因为低廉开发成本、快速的开发效率，即使是次要的支撑子域也值得&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;DDD&lt;/em&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;性能与伸缩性&lt;/h3&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;随着业务的发展，你需要开始思考系统的性能和伸缩性问题。 在传统架构中，这牵扯到数据库关系模式、分片规则等复杂问题，同时你还需要处理因数据库分片导致的跨分片事务问题。 这时，你不得不修改你的业务代码，以适应水平拆分后的数据库架构。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;然而，如果你选择使用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架，你将不再需要过多关注数据库关系模式、分片规则等问题。你的业务代码无需变更，系统能够轻松实现水平伸缩。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;你可以在这里了解更多关于&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://ahoowang.gitee.io/wow/guide/perf-test.html&quot;&gt;Wow 框架的性能&lt;/a&gt;。&lt;/p&gt; 
&lt;h3&gt;读写分离与同步延迟&lt;/h3&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;读写分离是一种极为普遍的性能优化架构模式。 然而，同步延迟问题常伴随而来，事务执行成功后写库落库成功，但读库同步延迟，用户刷新页面后无法获取最新数据，从而对用户的体验产生影响。例如：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;用户发起下单事务，写库执行成功，但由于某种原因，读库同步延迟，用户刷新页面后发现订单未成功创建。&lt;/li&gt; 
 &lt;li&gt;商家编辑完商品后，同步到&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;Elasticsearch&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;索引库，但由于某种原因，同步延迟，导致商家刷新页面后搜索不到该商品。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;通常，大家采用最简便的方法，等待 1 秒后刷新页面。 虽然这种方式能解决大多数数据同步延迟的问题，但效率不够高。 因为大多数情况下，同步在 100 毫秒内就已完成，剩余的 900 毫秒成了&lt;em&gt;浪费&lt;/em&gt;。 然而，有时 1 秒无法完成同步，这就导致用户获取的数据变得&lt;strong&gt;无效&lt;/strong&gt;。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;使用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架，你可以通过等待&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;PROJECTED&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;信号完成，然后再将结果返回给用户，以更为优雅和高效的方式处理数据同步延迟的问题。&lt;/p&gt; 
&lt;h3&gt;工程质量&lt;/h3&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;单元测试&lt;/em&gt;是确保代码质量且符合预期业务需求的重要手段，但在传统架构中，单元测试往往是一项相当困难的任务，因为你需要考虑数据库连接、事务管理、数据清理等问题。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;使用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架，你将会发现基于&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;Given-&amp;gt;When-&amp;gt;Expect&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;模式的测试套件，使得单元测试变得异常简单。 你只需关注领域模型是否符合预期，而无需为数据库连接等问题烦恼。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;在实际应用中，我们将领域模型的单元测试覆盖率下限阈值设置为&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;85%&lt;/strong&gt;，也是可以轻松实现的。&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;在没有刻意要求的情况下，开发人员甚至自觉地将覆盖率提升至&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;95%&lt;/strong&gt;。&lt;/p&gt; 
 &lt;p style=&quot;margin-left:0; margin-right:0&quot;&gt;因此，每次提交代码都变得轻松自在，因为你确信你的代码经过了充分的测试，并且真正意义上从单元测试中获得了收益。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;在研发同级别的项目中，我们的测试团队在系统&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;API&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;测试中发现，基于 Wow 框架的项目，其&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;BUG&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;数仅为传统架构项目的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;strong&gt;1/3&lt;/strong&gt;。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;你可以在这里了解更多关于&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://ahoowang.gitee.io/wow/guide/test-suite.html&quot;&gt;Wow 单元测试套件&lt;/a&gt;。&lt;/p&gt; 
&lt;h2&gt;对于企业而言，&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架意味着什么？&lt;/h2&gt; 
&lt;h3&gt;商业智能&lt;/h3&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img alt=&quot;传统架构 VS 事件溯源&quot; src=&quot;https://foruda.gitee.com/images/1704878807657006766/300ee974_384561.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:center&quot;&gt;&lt;img alt=&quot;ETL 同步流程&quot; src=&quot;https://foruda.gitee.com/images/1704878793697689592/5fda25c1_384561.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;商业智能&lt;/em&gt;是企业决策的关键支持，而数据则是商业智能的分析原料。业务数据越为丰富有价值，商业智能的分析结果越准确，决策也就更加可靠。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;与传统架构有着显著差异，&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;提供了实时聚合根状态事件（&lt;code&gt;StateEvent&lt;/code&gt;）和聚合命令（&lt;code&gt;Command&lt;/code&gt;）作为数据分析的数据源，同时极大降低了实时&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;ETL&lt;/em&gt;（&lt;code&gt;Extract&lt;/code&gt;,&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;Transform&lt;/code&gt;,&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;Load&lt;/code&gt;）的难度。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;在传统架构中，实现实时&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;ETL&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;通常需要经过繁琐的流程，包括&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;DB-&amp;gt;CDC-&amp;gt;Process-&amp;gt;DB&lt;/code&gt;，而在&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架中，仅需一段简单的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;SQL&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;脚本即可完成这一过程。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;另外，在传统架构中，使用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;em&gt;CDC&lt;/em&gt;（&lt;code&gt;MySql Binlog&lt;/code&gt;）数据仅记录数据的变化，缺乏明确的业务语义。进行业务分析时，需要基于数据状态的变化推断出业务语义，这往往需要进行大量的数据处理。 相较之下，&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架直接提供了聚合根状态事件和聚合命令作为数据分析的数据源，极大降低了数据处理的难度。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;提供的实时同步机制将数据实时同步至数据仓库（&lt;em&gt;ClickHouse&lt;/em&gt;），为实时数据分析提供了极大的便利。这种方法为商业智能提供了强有力的支持，构建了一个实时数据分析系统，使决策制定能够基于及时而准确的信息。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;你可以在这里了解更多关于&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://ahoowang.gitee.io/wow/guide/bi.html&quot;&gt;Wow 商业智能&lt;/a&gt;。&lt;/p&gt; 
&lt;h3&gt;操作审计&lt;/h3&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;&lt;em&gt;操作审计&lt;/em&gt;是企业中保障安全性和合规性的重要组成部分，同时也是对系统操作进行监控和追踪的关键手段。&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架在这方面为企业带来了显著的优势。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;通过记录聚合命令（&lt;code&gt;Command&lt;/code&gt;）作为操作审计的数据源，&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架能够详细追踪系统中的各种操作。 这些记录不仅包含了操作本身的内容，还涵盖了操作触发的副作用（&lt;em&gt;领域事件&lt;/em&gt;），为审计提供了更为全面和准确的数据基础。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;相较于传统审计方法，&lt;em&gt;Wow&lt;/em&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;框架的操作审计的数据源具备更加明确的业务语义，以及操作后产生的明确领域事件。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;此外，Wow 框架提供的实时数据同步机制也为操作审计带来了便利，确保了审计数据的及时性和一致性。&lt;/p&gt; 
&lt;p style=&quot;color:#40485b; margin-left:0; margin-right:0; text-align:left&quot;&gt;了解更多关于&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://ahoowang.gitee.io/wow/guide/bi.html#%E8%81%9A%E5%90%88%E5%91%BD%E4%BB%A4&quot;&gt;Wow 操作审计&lt;/a&gt;。&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289081/wow-3-3-8-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289081/wow-3-3-8-released</guid>
            <pubDate>Tue, 23 Apr 2024 07:04:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>Docker 26.1.0 发布</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;Docker 26.1.0&amp;nbsp;现已发布，具体更新内容如下：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;New&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;将可配置的 OpenTelemetry utilities 和 basic instrumentation 添加到命令中。&lt;br&gt; 有关更多信息，可参阅&amp;nbsp;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.docker.com%2Fconfig%2Fotel&quot; target=&quot;_blank&quot;&gt;OpenTelemetry for the Docker CLI&lt;/a&gt;.&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdocker%2Fcli%2Fpull%2F4889&quot; target=&quot;_blank&quot;&gt;docker/cli#4889&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Bug fixes and enhancements&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Native Windows 容器配置有用于容器名称解析的内部 DNS 服务器和用于其他查询的外部 DNS 服务器。并非所有解析器（包括&lt;code&gt;nslookup&lt;/code&gt;）在从内部服务器获得&lt;code&gt;SERVFAIL&lt;/code&gt;应答时都会返回到外部解析器。因此，现在可以通过在&lt;code&gt;daemon.json&lt;/code&gt;文件中设置&lt;code&gt;&quot;features&quot;: {&quot;windows-dns-proxy&quot;: true }&lt;/code&gt;，将内部 DNS 服务器配置为将请求转发到外部解析器。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmoby%2Fmoby%2Fpull%2F47584&quot; target=&quot;_blank&quot;&gt;moby/moby#47584&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note：这将是 Docker Engine 27.0 中的新默认行为。&lt;/p&gt; 
 &lt;p&gt;Warning：&lt;code&gt;windows-dns-proxy&lt;/code&gt;功能标志将在未来版本中删除。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Swarm：修复&lt;code&gt;Subpath&lt;/code&gt;未传递到容器配置的问题。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmoby%2Fmoby%2Fpull%2F47711&quot; target=&quot;_blank&quot;&gt;moby/moby#47711&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;经典构建器：修复&lt;code&gt;WORKDIR &amp;lt;directory&amp;gt;/&lt;/code&gt;构建步骤中的缓存缺失（带有尾部斜杠的目录）。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmoby%2Fmoby%2Fpull%2F47723&quot; target=&quot;_blank&quot;&gt;moby/moby#47723&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;containerd image store：修复当存储中的任何镜像有意外目标时，&lt;code&gt;docker images&lt;/code&gt;失效的问题。&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmoby%2Fmoby%2Fpull%2F47738&quot; target=&quot;_blank&quot;&gt;moby/moby#47738&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;更新说明：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmoby%2Fmoby%2Freleases%2Ftag%2Fv26.1.0&quot; target=&quot;_blank&quot;&gt;https://github.com/moby/moby/releases/tag/v26.1.0&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289061/docker-26-1-0-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289061/docker-26-1-0-released</guid>
            <pubDate>Tue, 23 Apr 2024 05:47:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>vxe-table 4.6.1 已经发布，vue 表格解决方案</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;vxe-table 4.6.1 已经发布，vue 表格解决方案&lt;/p&gt; 
&lt;p&gt;此版本更新内容包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;table 
  &lt;ul&gt; 
   &lt;li&gt;修复 title-prefix 或 title-suffix 鼠标 hover 报错问题&lt;/li&gt; 
   &lt;li&gt;修复自定义列相关问题&lt;/li&gt; 
   &lt;li&gt;增加参数 custom-config.visibleMethod&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情查看：&lt;a href=&quot;https://gitee.com/xuliangzhan_admin/vxe-table/releases/4.6.1&quot;&gt;https://gitee.com/xuliangzhan_admin/vxe-table/releases/4.6.1&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289057/vxe-table-4-6-1-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289057/vxe-table-4-6-1-released</guid>
            <pubDate>Tue, 23 Apr 2024 05:15:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>🎉 OpsPilot 1.1.0 版本发布：Jenkins 构建通知和资产测绘能力加入啦！🎉</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p style=&quot;color:#111824; margin-left:0; margin-right:0; text-align:left&quot;&gt;大家好，我是你们的小助手 OpsPilot，我又学会了新技能哦！在 1.1.0 版本中，我新增了 Jenkins 构建通知和 KScan 资产测绘能力，让我变得更强大啦！🚀&lt;/p&gt; 
&lt;p style=&quot;color:#111824; margin-left:0; margin-right:0; text-align:left&quot;&gt;在这个版本中，我可以帮助你们更好地管理 Jenkins 构建。当构建出现异常的时候，我会通过企业微信消息推送机器人，通知到群组中，告诉运维人员构建失败的原因与修复建议。这样，你们就可以更快地发现问题，更及时地进行修复啦！🔧&lt;/p&gt; 
&lt;p style=&quot;color:#111824; margin-left:0; margin-right:0; text-align:left&quot;&gt;而且，我还学会了 KScan 资产测绘能力。我可以对目标进行资产测绘，获取目标的信息，包括端口、服务、操作系统等信息。这样，你们就可以更全面地了解你们的资产情况，更好地进行管理和保护啦！🔍&lt;/p&gt; 
&lt;h2&gt;📝版本更新内容：&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎁 新增 Docker Compose 部署文件&lt;/li&gt; 
 &lt;li&gt;📢 新增 Jenkins 构建通知，支持接入企业微信消息推送机器人&lt;/li&gt; 
 &lt;li&gt;🕵️ 新增 KScan 资产测绘能力&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p style=&quot;color:#111824; margin-left:0px; margin-right:0px; text-align:left&quot;&gt;希望我的新技能能够帮助到你们，让你们的工作变得更轻松，更高效！我会继续努力学习，变得更强大的！🌟&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289029/opspilot-1-1-0-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289029/opspilot-1-1-0-released</guid>
            <pubDate>Tue, 23 Apr 2024 02:47:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>Xmake v2.9.1 发布，新增 native lua 模块和鸿蒙系统支持</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake&quot; target=&quot;_blank&quot;&gt;Xmake&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;是一个基于 Lua 的轻量级跨平台构建工具。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;它非常的轻量，没有任何依赖，因为它内置了 Lua 运行时。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;它使用 xmake.lua 维护项目构建，相比 makefile/CMakeLists.txt，配置语法更加简洁直观，对新手非常友好，短时间内就能快速入门，能够让用户把更多的精力集中在实际的项目开发上。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;我们能够使用它像 Make/Ninja 那样可以直接编译项目，也可以像 CMake/Meson 那样生成工程文件，另外它还有内置的包管理系统来帮助用户解决 C/C++ 依赖库的集成使用问题。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;目前，Xmake 主要用于 C/C++ 项目的构建，但是同时也支持其他 native 语言的构建，可以实现跟 C/C++ 进行混合编译，同时编译速度也是非常的快，可以跟 Ninja 持平。&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;尽管不是很准确，但我们还是可以把 Xmake 按下面的方式来理解：&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;Xmake ≈ Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake&quot; target=&quot;_blank&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fxmake.io%2F%23%2Fzh-cn%2F&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fxmake.io%2F%23%2Fzh-cn%2Fabout%2Fcourse&quot; target=&quot;_blank&quot;&gt;入门课程&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;新特性介绍&lt;/h2&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;新版本中，我们新增了鸿蒙系统的 native 工具链支持，并且实现了一种新的 native 原生 lua 模块的导入支持。另外，我们也对构建速度做了很多的优化，效果非常明显。&lt;/p&gt; 
&lt;h3&gt;添加鸿蒙 SDK 工具链支持&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;我们新增了鸿蒙 OS 平台的 native 工具链编译支持：&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#8f5902&quot;&gt;$ &lt;/span&gt;xmake f -p harmony
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;xmake 也会自动探测默认的 SDK 路径，当然我们也可以指定 Harmony SDK 路径。&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#8f5902&quot;&gt;$ &lt;/span&gt;xmake f -p Harmony --sdk&lt;strong&gt;=&lt;/strong&gt;/Users/ruki/Library/Huawei/Sdk/...
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h3&gt;添加 native 模块支持&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;我们知道，在 xmake 中，可以通过 import 接口去导入一些 lua 模块在脚本域中使用，但是如果一些模块的操作比较耗时，那么 lua 实现并不是理想的选择。 因此，新版本中，我们新增了 native lua 模块的支持，可以通过 native 实现，来达到提速优化的效果，并且模块导入和使用，还是跟 lua 模块一样简单。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;使用原生模块时，xmake 会进行两段编译，先会自动编译原生模块，后将模块导入 lua 作为库或二进制，而对于用户，仅仅只需要调用 import 导入即可。&lt;/p&gt; 
&lt;h4&gt;定义动态库模块&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;动态库模块的好处是，不仅仅通过 native 实现了性能加速，另外避免了每次调用额外的子进程创建，因此更加的轻量，速度进一步得到提升。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;我们可以先定义一个动态库模块，里面完全支持 lua 的所有 c API，因此我们也可以将一些第三方的开源 lua native 模块直接引入进来使用。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;这里我们也有一个完整的导入 lua-cjson 模块的例子可以参考：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Ftree%2Fmaster%2Ftests%2Fprojects%2Fother%2Fnative_module_cjson&quot; target=&quot;_blank&quot;&gt;native_module_cjson&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;首先，我们先实现 shared 的 native 代码，所以接口通过 lua API 导出。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;./modules/foo/foo.c&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;em&gt;#include &amp;lt;xmi.h&amp;gt;
&lt;/em&gt;
&lt;span style=&quot;color:blue&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:blue&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color:black&quot;&gt;c_add&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;lua_State&lt;/span&gt;&lt;strong&gt;*&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;lua&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;strong&gt;{&lt;/strong&gt;
    &lt;span style=&quot;color:blue&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;a&lt;/span&gt; &lt;strong&gt;=&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;lua_tointeger&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;lua&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;);&lt;/strong&gt;
    &lt;span style=&quot;color:blue&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;b&lt;/span&gt; &lt;strong&gt;=&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;lua_tointeger&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;lua&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;2&lt;/strong&gt;&lt;strong&gt;);&lt;/strong&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;lua_pushinteger&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;lua&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;a&lt;/span&gt; &lt;strong&gt;+&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;b&lt;/span&gt;&lt;strong&gt;);&lt;/strong&gt;
    &lt;span style=&quot;color:blue&quot;&gt;return&lt;/span&gt; &lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;;&lt;/strong&gt;
&lt;strong&gt;}&lt;/strong&gt;

&lt;span style=&quot;color:blue&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:blue&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color:black&quot;&gt;c_sub&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;lua_State&lt;/span&gt;&lt;strong&gt;*&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;lua&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;strong&gt;{&lt;/strong&gt;
    &lt;span style=&quot;color:blue&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;a&lt;/span&gt; &lt;strong&gt;=&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;lua_tointeger&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;lua&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;);&lt;/strong&gt;
    &lt;span style=&quot;color:blue&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;b&lt;/span&gt; &lt;strong&gt;=&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;lua_tointeger&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;lua&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;2&lt;/strong&gt;&lt;strong&gt;);&lt;/strong&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;lua_pushinteger&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;lua&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;a&lt;/span&gt; &lt;strong&gt;-&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;b&lt;/span&gt;&lt;strong&gt;);&lt;/strong&gt;
    &lt;span style=&quot;color:blue&quot;&gt;return&lt;/span&gt; &lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;;&lt;/strong&gt;
&lt;strong&gt;}&lt;/strong&gt;

&lt;span style=&quot;color:blue&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color:black&quot;&gt;luaopen&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;foo&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;lua_State&lt;/span&gt;&lt;strong&gt;*&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;lua&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;strong&gt;{&lt;/strong&gt;
    &lt;em&gt;// 收集 add 和 sub
&lt;/em&gt;    &lt;span style=&quot;color:blue&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:blue&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;luaL_Reg&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;funcs&lt;/span&gt;&lt;strong&gt;[]&lt;/strong&gt; &lt;strong&gt;=&lt;/strong&gt; &lt;strong&gt;{&lt;/strong&gt;
        &lt;strong&gt;{&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;c_add&lt;/span&gt;&lt;strong&gt;},&lt;/strong&gt;
        &lt;strong&gt;{&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;sub&quot;&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;c_sub&lt;/span&gt;&lt;strong&gt;},&lt;/strong&gt;
        &lt;strong&gt;{&lt;/strong&gt;&lt;span style=&quot;color:black&quot;&gt;NULL&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:black&quot;&gt;NULL&lt;/span&gt;&lt;strong&gt;}&lt;/strong&gt;
    &lt;strong&gt;};&lt;/strong&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;lua_newtable&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;lua&lt;/span&gt;&lt;strong&gt;);&lt;/strong&gt;
    &lt;em&gt;// 传递函数列表
&lt;/em&gt;    &lt;span style=&quot;color:#000000&quot;&gt;luaL_setfuncs&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;lua&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;funcs&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;0&lt;/strong&gt;&lt;strong&gt;);&lt;/strong&gt;
    &lt;span style=&quot;color:blue&quot;&gt;return&lt;/span&gt; &lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;;&lt;/strong&gt;
&lt;strong&gt;}&lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;注意到这里，我们 include 了一个&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;xmi.h&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;的接口头文件，其实我们也可以直接引入&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;lua.h&lt;/code&gt;，&lt;code&gt;luaconf.h&lt;/code&gt;，效果是一样的，但是会提供更好的跨平台性，内部会自动处理 lua/luajit 还有版本间的差异。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;然后，我们配置&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;add_rules(&quot;modules.shared&quot;)&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;作为 shared native 模块来编译，不需要引入任何其他依赖。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;甚至连 lua 的依赖也不需要引入，因为 xmake 主程序已经对其导出了所有的 lua 接口，可直接使用，所以整个模块是非常轻量的。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;./modules/foo/xmake.lua&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#000000&quot;&gt;add_rules&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;

&lt;span style=&quot;color:#000000&quot;&gt;target&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
    &lt;em&gt;-- 指定目标为库 lua 模块&lt;/em&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;add_rules&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;module.shared&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;add_files&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;foo.c&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h4&gt;定义二进制模块&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;出了动态库模块，我们还提供了另外一种二进制模块的导入。它其实就是一个可执行文件，每次调用模块接口，都会去调用一次子进程。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;那它有什么好处呢，尽管它没有动态库模块那么高效，但是它的模块实现更加的简单，不需要调用 lua API，仅仅只需要处理参数数据，通过 stdout 去输出返回值即可。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;另外，相比二进制分发，它是通过源码分发的，因此也解决了跨平台的问题。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;具体是使用动态库模块，还是二进制模块，具体看自己的需求，如果想要实现简单，可以考虑二进制模块，如果想要高效，就用动态库模块。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;另外，如果需要通过并行执行来提速，也可以使用二进制模块。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;./modules/bar/bar.cpp&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;em&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;cstdlib&amp;gt;
&lt;/em&gt;
&lt;span style=&quot;color:blue&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color:black&quot;&gt;main&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:blue&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;argc&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:blue&quot;&gt;char&lt;/span&gt;&lt;strong&gt;**&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;argv&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;strong&gt;{&lt;/strong&gt;
    &lt;span style=&quot;color:blue&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;a&lt;/span&gt; &lt;strong&gt;=&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;atoi&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;argv&lt;/span&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;]);&lt;/strong&gt;
    &lt;span style=&quot;color:blue&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;b&lt;/span&gt; &lt;strong&gt;=&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;atoi&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;argv&lt;/span&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;strong&gt;]);&lt;/strong&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;printf&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;a&lt;/span&gt; &lt;strong&gt;+&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;b&lt;/span&gt;&lt;strong&gt;);&lt;/strong&gt;
    &lt;span style=&quot;color:blue&quot;&gt;return&lt;/span&gt; &lt;strong&gt;0&lt;/strong&gt;&lt;strong&gt;;&lt;/strong&gt;
&lt;strong&gt;}&lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;./modules/bar/xmake.lua&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#000000&quot;&gt;add_rules&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;

&lt;span style=&quot;color:#000000&quot;&gt;target&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
    &lt;em&gt;-- 指定目标为二进制 lua 模块&lt;/em&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;add_rules&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;module.binary&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;add_files&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;bar.cpp&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h4&gt;导入原生模块&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;对于模块导入，我们仅仅需要调用 import，跟导入 lua 模块的用法完全一致。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;./xmake.lua&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#000000&quot;&gt;add_rules&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
&lt;em&gt;-- 添加./modules 目录内原生模块&lt;/em&gt;
&lt;span style=&quot;color:#000000&quot;&gt;add_moduledirs&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;modules&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;

&lt;span style=&quot;color:#000000&quot;&gt;target&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;set_kind&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;phony&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;on_load&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:blue&quot;&gt;function&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;target&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
        &lt;span style=&quot;color:#000000&quot;&gt;import&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;{&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;always_build&lt;/span&gt; &lt;strong&gt;=&lt;/strong&gt; &lt;strong&gt;true&lt;/strong&gt;&lt;strong&gt;})&lt;/strong&gt;
        &lt;span style=&quot;color:#000000&quot;&gt;import&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
        &lt;span style=&quot;color:black&quot;&gt;print&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;foo: 1 + 1 = %s&quot;&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;foo&lt;/span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;add&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;))&lt;/strong&gt;
        &lt;span style=&quot;color:black&quot;&gt;print&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;foo: 1 - 1 = %s&quot;&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;foo&lt;/span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;sub&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;))&lt;/strong&gt;
        &lt;span style=&quot;color:black&quot;&gt;print&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;bar: 1 + 1 = %s&quot;&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;bar&lt;/span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;add&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;))&lt;/strong&gt;
    &lt;span style=&quot;color:blue&quot;&gt;end&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;由于插件模块的构建是跟主工程完全独立的，因此，native 模块只会被构建一次，如果想要触发增量的插件编译，需要配置上&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;always_build = true&lt;/code&gt;，这样，xmake 就会每次检测插件代码是否有改动，如果有改动，会自动增量构建插件。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;首次执行效果如下：&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;ruki-2:native_module ruki&lt;span style=&quot;color:black&quot;&gt;$ &lt;/span&gt;xmake
&lt;strong&gt;[&lt;/strong&gt; 50%]: cache compiling.release src/foo.c
&lt;strong&gt;[&lt;/strong&gt; 50%]: cache compiling.release src/bar.c
&lt;strong&gt;[&lt;/strong&gt; 75%]: linking.release libmodule_foo.dylib
&lt;strong&gt;[&lt;/strong&gt; 75%]: linking.release module_bar
&lt;strong&gt;[&lt;/strong&gt;100%]: build ok, spent 1.296s
foo: 1 + 1 &lt;strong&gt;=&lt;/strong&gt; 2
foo: 1 - 1 &lt;strong&gt;=&lt;/strong&gt; 0
bar: 1 + 1 &lt;strong&gt;=&lt;/strong&gt; 2
&lt;strong&gt;[&lt;/strong&gt;100%]: build ok, spent 0.447s
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;第二次执行，就不会再构建插件，可以直接使用模块：&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;ruki-2:native_module ruki&lt;span style=&quot;color:black&quot;&gt;$ &lt;/span&gt;xmake
foo: 1 + 1 &lt;strong&gt;=&lt;/strong&gt; 2
foo: 1 - 1 &lt;strong&gt;=&lt;/strong&gt; 0
bar: 1 + 1 &lt;strong&gt;=&lt;/strong&gt; 2
&lt;strong&gt;[&lt;/strong&gt;100%]: build ok, spent 0.447s
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h4&gt;作为 codegen 来使用&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;通过新的 native 模块特性，我们也可以用来实现 auto-codegen，然后根据自动生成的代码，继续执行后续编译流程。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;这里也有完整的例子可以参考：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Ftree%2Fmaster%2Ftests%2Fprojects%2Fother%2Fautogen_shared_module&quot; target=&quot;_blank&quot;&gt;autogen_shared_module&lt;/a&gt;。&lt;/p&gt; 
&lt;h3&gt;添加 signal 模块&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;新版本中，我们还新增了信号注册接口，我们可以在 lua 层，注册 SIGINT 等信号处理函数，来定制化响应逻辑。&lt;/p&gt; 
&lt;h4&gt;signal.register&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;这个接口用于注册信号处理器，目前仅仅支持 SIGINT 信号的处理，同时它也是支持 windows 等主流平台的。&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#000000&quot;&gt;import&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;core.base.signal&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;

&lt;span style=&quot;color:blue&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:black&quot;&gt;main&lt;/span&gt;&lt;strong&gt;()&lt;/strong&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;signal&lt;/span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;register&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;signal&lt;/span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;SIGINT&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:blue&quot;&gt;function&lt;/span&gt; &lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;signo&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
        &lt;span style=&quot;color:black&quot;&gt;print&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;signal.SIGINT(%d)&quot;&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;signo&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
    &lt;span style=&quot;color:blue&quot;&gt;end&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
    &lt;span style=&quot;color:black&quot;&gt;io.read&lt;/span&gt;&lt;strong&gt;()&lt;/strong&gt;
&lt;span style=&quot;color:blue&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;这对于当一些子进程内部屏蔽了 SIGINT，导致卡死不退出，即使用户按了&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;Ctrl+C&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;退出了 xmake 进程，它也没有退出时候， 我们就可以通过这种方式去强制退掉它。&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#000000&quot;&gt;import&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;core.base.process&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
&lt;span style=&quot;color:#000000&quot;&gt;import&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;core.base.signal&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;

&lt;span style=&quot;color:blue&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:black&quot;&gt;main&lt;/span&gt;&lt;strong&gt;()&lt;/strong&gt;
    &lt;span style=&quot;color:blue&quot;&gt;local&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;proc&lt;/span&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;signal&lt;/span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;register&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;signal&lt;/span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;SIGINT&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:blue&quot;&gt;function&lt;/span&gt; &lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;signo&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
        &lt;span style=&quot;color:black&quot;&gt;print&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;sigint&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
        &lt;span style=&quot;color:blue&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;proc&lt;/span&gt; &lt;span style=&quot;color:blue&quot;&gt;then&lt;/span&gt;
            &lt;span style=&quot;color:#000000&quot;&gt;proc&lt;/span&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;kill&lt;/span&gt;&lt;strong&gt;()&lt;/strong&gt;
        &lt;span style=&quot;color:blue&quot;&gt;end&lt;/span&gt;
    &lt;span style=&quot;color:blue&quot;&gt;end&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;proc&lt;/span&gt; &lt;strong&gt;=&lt;/strong&gt; &lt;span style=&quot;color:#000000&quot;&gt;process&lt;/span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;open&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;./trap.sh&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
    &lt;span style=&quot;color:blue&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color:#000000&quot;&gt;proc&lt;/span&gt; &lt;span style=&quot;color:blue&quot;&gt;then&lt;/span&gt;
        &lt;span style=&quot;color:#000000&quot;&gt;proc&lt;/span&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;wait&lt;/span&gt;&lt;strong&gt;()&lt;/strong&gt;
        &lt;span style=&quot;color:#000000&quot;&gt;proc&lt;/span&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;close&lt;/span&gt;&lt;strong&gt;()&lt;/strong&gt;
    &lt;span style=&quot;color:blue&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:blue&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;关于这个问题的背景，可以参考：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F4889&quot; target=&quot;_blank&quot;&gt;#4889&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;signal.ignore&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;我们也可以通过&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;signal.ignore&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;这个接口，去忽略屏蔽某个信号的处理。&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#000000&quot;&gt;signal&lt;/span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;ignore&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;signal&lt;/span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;SIGINT&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h4&gt;signal.reset&lt;/h4&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;我们也可以清除某个信号的处理函数，回退到默认的处理逻辑。&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#000000&quot;&gt;signal&lt;/span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;reset&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;signal&lt;/span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span style=&quot;color:#000000&quot;&gt;SIGINT&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h3&gt;增加对 cppfront/h2 的支持&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;我们还改进了对 cppfront 的最新版本支持，而新版本的 cppfront 增加了 .h2 头文件的处理，因此我们也增加了对它的支持。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;感谢来自 @shaoxie1986 的贡献。、&lt;/p&gt; 
&lt;div&gt; 
 &lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color:#000000&quot;&gt;add_rules&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;

&lt;span style=&quot;color:#000000&quot;&gt;add_requires&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;cppfront&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;

&lt;span style=&quot;color:#000000&quot;&gt;target&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;add_rules&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;cppfront&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;set_kind&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;add_files&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;src/*.cpp2&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;add_files&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;src/*.h2&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
    &lt;span style=&quot;color:#000000&quot;&gt;add_packages&lt;/span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span style=&quot;color:#ff00ff&quot;&gt;&quot;cppfront&quot;&lt;/span&gt;&lt;strong&gt;)&lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h3&gt;改进构建速度&lt;/h3&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;新版本中，我们还修复一个并行构建相关的问题，经过对调度器的重构，构建速度得到明显的提升，尤其在 cpp 文件编译耗时非常慢的增量编译场景，效果更为明显。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;相关背景见：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F4928&quot; target=&quot;_blank&quot;&gt;#4928&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;更新日志&lt;/h2&gt; 
&lt;h3&gt;新特性&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fpull%2F4874&quot; target=&quot;_blank&quot;&gt;#4874&lt;/a&gt;: 添加鸿蒙 SDK 支持&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F4889&quot; target=&quot;_blank&quot;&gt;#4889&lt;/a&gt;: 添加 signal 模块，去注册信号处理&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F4925&quot; target=&quot;_blank&quot;&gt;#4925&lt;/a&gt;: 添加 native 模块支持&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F4938&quot; target=&quot;_blank&quot;&gt;#4938&lt;/a&gt;: 增加对 cppfront/h2 的支持&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;改进&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;改进包管理，支持切换 clang-cl&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F4893&quot; target=&quot;_blank&quot;&gt;#4893&lt;/a&gt;: 改进 rc 头文件依赖检测&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F4928&quot; target=&quot;_blank&quot;&gt;#4928&lt;/a&gt;: 改进构建和链接速度，增量编译时候效果更加明显&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fpull%2F4931&quot; target=&quot;_blank&quot;&gt;#4931&lt;/a&gt;: 更新 pdcurses&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F4973&quot; target=&quot;_blank&quot;&gt;#4973&lt;/a&gt;: 改进选择脚本的匹配模式&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Bugs 修复&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F4882&quot; target=&quot;_blank&quot;&gt;#4882&lt;/a&gt;: 修复安装组依赖问题&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F4877&quot; target=&quot;_blank&quot;&gt;#4877&lt;/a&gt;: 修复 xpack 打包时，unit build 编译失败问题&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F4887&quot; target=&quot;_blank&quot;&gt;#4887&lt;/a&gt;: 修复 object 依赖链接&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289022/xmake-2-9-1-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289022/xmake-2-9-1-released</guid>
            <pubDate>Tue, 23 Apr 2024 02:02:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
        <item>
            <title>Redisson 3.29.0 发布，官方推荐的 Redis 客户端</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;Redisson 3.29.0&amp;nbsp;现已发布，这是一个 Java 编写的 Redis 客户端，具备驻内存数据网格（In-Memory Data Grid）功能，并获得了 Redis 的官方推荐。&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:left&quot;&gt;此版本更新内容如下：&lt;/p&gt; 
&lt;p style=&quot;color:#333333; margin-left:0; margin-right:0; text-align:start&quot;&gt;&lt;strong&gt;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;Feature&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;新增&lt;code&gt;NewObjectListener&lt;/code&gt;以跟踪创建的对象&lt;/li&gt; 
 &lt;li&gt;可使用&lt;code&gt;RKeys.addListener()&lt;/code&gt;方法注册&lt;code&gt;NewObjectListener&lt;/code&gt;和&lt;code&gt;SetObjectListener&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;subscribeOnElements()&lt;/code&gt;、&lt;code&gt;subscribeOnLastElements&lt;/code&gt;() 和&lt;code&gt;subscribeOnFirstElements&lt;/code&gt;() 方法在轮询下一个元素前会等待&lt;code&gt;CompletionStage&lt;/code&gt;完成&lt;/li&gt; 
 &lt;li&gt;在 &lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;Cluster configuration&amp;nbsp;&lt;/span&gt;中添加了&lt;code&gt;shardedSubscriptionMode&lt;/code&gt;设置&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;RSemaphore.trySetPermits()&lt;/code&gt;方法添加了 ttl 参数&lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;在&lt;code&gt;RStream&lt;/code&gt; &lt;code&gt;AutoClaimResult&lt;/code&gt;对象中添加&lt;code&gt;getDeletedIds()&lt;/code&gt;方法&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Improvement&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;在&lt;code&gt;RRemoteService&lt;/code&gt;和&lt;code&gt;RScheduledExecutorService&lt;/code&gt;中用 fine-grained entry locking 取代&amp;nbsp;responses map lock&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Fixed&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Stream.autoClaim()&lt;/code&gt;方法抛出 ClassCastException&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;RSearch&lt;/code&gt;聚合表达式应用错误&lt;/li&gt; 
 &lt;li&gt;如果本地缓存与&lt;code&gt;RTransaction&lt;/code&gt;一起使用，&lt;code&gt;LocalCachedMapDisabledKey&lt;/code&gt;事件的解析不正确&lt;/li&gt; 
 &lt;li&gt;如果&lt;code&gt;readMode = MASTER&lt;/code&gt;和&lt;code&gt;subscribeMode = MASTER&lt;/code&gt;，集群模式中的从节点不能正确关闭（自 3.27.2 起的回归）&lt;/li&gt; 
 &lt;li&gt;集群拓扑更新期间的 race condition 会导致从属节点添加/删除事件&lt;/li&gt; 
 &lt;li&gt;OSGi MANIFEST 应定义可选依赖项的问题&lt;/li&gt; 
 &lt;li&gt;如果&lt;code&gt;connectionMinimumIdleSize = 0&lt;/code&gt;，则会抛出&lt;code&gt;TimeoutException&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;如果 Redisson 实例不是 Reactive/Rx，在调用 Reactive/Rx RemoteService 时会抛出&lt;code&gt;ClassCastException&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;在调用&lt;code&gt;RLocalCachedMap.clearLocalCache()&lt;/code&gt;方法后，semaphore 对象不会被删除&lt;/li&gt; 
 &lt;li&gt;在&lt;code&gt;RSearch.aggregate()&lt;/code&gt;方法中使用&lt;code&gt;AggregationOptions.groupBy()&lt;/code&gt;设置会导致异常（如果未定义&amp;nbsp;&lt;span style=&quot;background-color:#ffffff; color:#1f2328&quot;&gt;reducers&lt;/span&gt;）&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;RSearch.aggregate()&lt;/code&gt;方法使用&lt;code&gt;AggregationOptions.sortBy&lt;/code&gt; &lt;code&gt;()&lt;/code&gt;设置会导致异常&lt;/li&gt; 
 &lt;li&gt;在事务中执行&lt;code&gt;RSet&lt;/code&gt;的多个包含操作时的资源泄漏错误&lt;/li&gt; 
 &lt;li&gt;maven-surefire-plugin 内的 jmockit 已升级至 1.52.0&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;更新说明：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fredisson%2Fredisson%2Freleases%2Ftag%2Fredisson-3.29.0&quot; target=&quot;_blank&quot;&gt;https://github.com/redisson/redisson/releases/tag/redisson-3.29.0&lt;/a&gt;&lt;/p&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289021/redisson-3-29-0-released</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289021/redisson-3-29-0-released</guid>
            <pubDate>Tue, 23 Apr 2024 02:00:00 GMT</pubDate>
            <author>来源: OSCHINA</author>
        </item>
        <item>
            <title>酷瓜云课堂（内网版）v1.1.3 发布，内网在线学习平台方案</title>
            <description>&lt;div class=&quot;content&quot;&gt;
                                                                    
                                                        &lt;p&gt;&lt;img alt=&quot;酷瓜云课堂-局域网学习平台&quot; src=&quot;https://portal-1255691183.file.myqcloud.com/img/content/624528cd8be23.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;更新内容&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;增加试题挑错功能&lt;/li&gt; 
 &lt;li&gt;增加图文和试卷背景水印&lt;/li&gt; 
 &lt;li&gt;增加删除和还原用户功能&lt;/li&gt; 
 &lt;li&gt;修复答案列表问题标题&lt;/li&gt; 
 &lt;li&gt;修改后台页用户链接&lt;/li&gt; 
 &lt;li&gt;优化待阅试卷&lt;/li&gt; 
 &lt;li&gt;优化 uploadTempFile 临时文件上传&lt;/li&gt; 
 &lt;li&gt;优化 CategoryTreeListBuilder&lt;/li&gt; 
 &lt;li&gt;优化 ArticleUserTrait,CourseUserTrait,PaperUserTrait&lt;/li&gt; 
 &lt;li&gt;还原误删的 QuestionXmCategories&lt;/li&gt; 
 &lt;li&gt;study_article 结构变化：market_price-&amp;gt;price&lt;/li&gt; 
 &lt;li&gt;修正 chapter_user 中学习时长重复计数的问题&lt;/li&gt; 
 &lt;li&gt;更新 layui-v2.9.7&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;系统介绍&lt;/h3&gt; 
&lt;p&gt;酷瓜云课堂内网版，采用 C 扩展框架 Phalcon 开发，使用本地基础服务，无营销相关功能，主要适用于公司、集团、机关、学校等内部网络环境使用。&lt;/p&gt; 
&lt;h3&gt;系统功能&lt;/h3&gt; 
&lt;p&gt;实现了点播、直播、专栏、问答、积分等。&lt;/p&gt; 
&lt;p&gt;友情提示：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;演示系统配置低，带宽有限，切莫压测&lt;/li&gt; 
 &lt;li&gt;课程数据来源于网络（无实质内容）&lt;/li&gt; 
 &lt;li&gt;管理后台已禁止数据提交，私密配置已过滤&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;系统演示：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flan-edu.koogua.com&quot; target=&quot;_blank&quot;&gt;前台演示&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flan-edu.koogua.com%2Fadmin&quot; target=&quot;_blank&quot;&gt;后台演示&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;演示账号：100015@163.com / 123456 （前后台通用）&lt;/p&gt; 
&lt;h3&gt;项目组件&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;后台框架：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fphalcon.io&quot; target=&quot;_blank&quot;&gt;phalcon 3.4.5&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;前端框架：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flayui.dev&quot; target=&quot;_blank&quot;&gt;layui 2.9.7&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;全文检索：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.xunsearch.com&quot; target=&quot;_blank&quot;&gt;xunsearch 1.4.9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;基础依赖：&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fphp.net&quot; target=&quot;_blank&quot;&gt;php7.3&lt;/a&gt;， &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmysql.com&quot; target=&quot;_blank&quot;&gt;mysql5.7&lt;/a&gt;， &lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fredis.io&quot; target=&quot;_blank&quot;&gt;redis5.0&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;项目文档&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.koogua.com%2Fpage%2Fwiki&quot; target=&quot;_blank&quot;&gt;运行环境搭建&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.koogua.com%2Fpage%2Fwiki&quot; target=&quot;_blank&quot;&gt;系统服务配置&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.koogua.com%2Fpage%2Fwiki&quot; target=&quot;_blank&quot;&gt;客户终端配置&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;
                                        &lt;/div&gt;
                                    </description>
            <link>https://www.oschina.net/news/289013</link>
            <guid isPermaLink="false">https://www.oschina.net/news/289013</guid>
            <pubDate>Tue, 23 Apr 2024 01:00:00 GMT</pubDate>
            <author>来源: 投稿</author>
        </item>
    </channel>
</rss>